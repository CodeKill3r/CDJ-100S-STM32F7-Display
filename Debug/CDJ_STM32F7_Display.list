
CDJ_STM32F7_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000266dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055ec  080268ac  080268ac  000368ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802be98  0802be98  0003be98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802bea0  0802bea0  0003bea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802bea4  0802bea4  0003bea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000013c  20000000  0802bea8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00018d64  20000140  0802bfe4  00040140  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20018ea4  0802bfe4  00048ea4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0004013c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003f48d  00000000  00000000  0004016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009d91  00000000  00000000  0007f5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002948  00000000  00000000  00089390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000024f0  00000000  00000000  0008bcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000346ad  00000000  00000000  0008e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00047da8  00000000  00000000  000c2875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001051c2  00000000  00000000  0010a61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020f7df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000abc8  00000000  00000000  0020f830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000140 	.word	0x20000140
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08026894 	.word	0x08026894

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000144 	.word	0x20000144
 800020c:	08026894 	.word	0x08026894

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_uldivmod>:
 8000e78:	b953      	cbnz	r3, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7a:	b94a      	cbnz	r2, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	bf08      	it	eq
 8000e80:	2800      	cmpeq	r0, #0
 8000e82:	bf1c      	itt	ne
 8000e84:	f04f 31ff 	movne.w	r1, #4294967295
 8000e88:	f04f 30ff 	movne.w	r0, #4294967295
 8000e8c:	f000 b994 	b.w	80011b8 <__aeabi_idiv0>
 8000e90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e98:	f000 f826 	bl	8000ee8 <__udivmoddi4>
 8000e9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea4:	b004      	add	sp, #16
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_f2ulz>:
 8000ea8:	b5d0      	push	{r4, r6, r7, lr}
 8000eaa:	f7ff fb75 	bl	8000598 <__aeabi_f2d>
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__aeabi_f2ulz+0x38>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4606      	mov	r6, r0
 8000eb4:	460f      	mov	r7, r1
 8000eb6:	f7ff fbc7 	bl	8000648 <__aeabi_dmul>
 8000eba:	f7ff fe5f 	bl	8000b7c <__aeabi_d2uiz>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	f7ff fb48 	bl	8000554 <__aeabi_ui2d>
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <__aeabi_f2ulz+0x3c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f7ff fbbe 	bl	8000648 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	4639      	mov	r1, r7
 8000ed4:	f7ff fa00 	bl	80002d8 <__aeabi_dsub>
 8000ed8:	f7ff fe50 	bl	8000b7c <__aeabi_d2uiz>
 8000edc:	4621      	mov	r1, r4
 8000ede:	bdd0      	pop	{r4, r6, r7, pc}
 8000ee0:	3df00000 	.word	0x3df00000
 8000ee4:	41f00000 	.word	0x41f00000

08000ee8 <__udivmoddi4>:
 8000ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eec:	9d08      	ldr	r5, [sp, #32]
 8000eee:	4604      	mov	r4, r0
 8000ef0:	468e      	mov	lr, r1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d14d      	bne.n	8000f92 <__udivmoddi4+0xaa>
 8000ef6:	428a      	cmp	r2, r1
 8000ef8:	4694      	mov	ip, r2
 8000efa:	d969      	bls.n	8000fd0 <__udivmoddi4+0xe8>
 8000efc:	fab2 f282 	clz	r2, r2
 8000f00:	b152      	cbz	r2, 8000f18 <__udivmoddi4+0x30>
 8000f02:	fa01 f302 	lsl.w	r3, r1, r2
 8000f06:	f1c2 0120 	rsb	r1, r2, #32
 8000f0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000f0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f12:	ea41 0e03 	orr.w	lr, r1, r3
 8000f16:	4094      	lsls	r4, r2
 8000f18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f1c:	0c21      	lsrs	r1, r4, #16
 8000f1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000f22:	fa1f f78c 	uxth.w	r7, ip
 8000f26:	fb08 e316 	mls	r3, r8, r6, lr
 8000f2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f2e:	fb06 f107 	mul.w	r1, r6, r7
 8000f32:	4299      	cmp	r1, r3
 8000f34:	d90a      	bls.n	8000f4c <__udivmoddi4+0x64>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f3e:	f080 811f 	bcs.w	8001180 <__udivmoddi4+0x298>
 8000f42:	4299      	cmp	r1, r3
 8000f44:	f240 811c 	bls.w	8001180 <__udivmoddi4+0x298>
 8000f48:	3e02      	subs	r6, #2
 8000f4a:	4463      	add	r3, ip
 8000f4c:	1a5b      	subs	r3, r3, r1
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f54:	fb08 3310 	mls	r3, r8, r0, r3
 8000f58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f5c:	fb00 f707 	mul.w	r7, r0, r7
 8000f60:	42a7      	cmp	r7, r4
 8000f62:	d90a      	bls.n	8000f7a <__udivmoddi4+0x92>
 8000f64:	eb1c 0404 	adds.w	r4, ip, r4
 8000f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f6c:	f080 810a 	bcs.w	8001184 <__udivmoddi4+0x29c>
 8000f70:	42a7      	cmp	r7, r4
 8000f72:	f240 8107 	bls.w	8001184 <__udivmoddi4+0x29c>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f7e:	1be4      	subs	r4, r4, r7
 8000f80:	2600      	movs	r6, #0
 8000f82:	b11d      	cbz	r5, 8000f8c <__udivmoddi4+0xa4>
 8000f84:	40d4      	lsrs	r4, r2
 8000f86:	2300      	movs	r3, #0
 8000f88:	e9c5 4300 	strd	r4, r3, [r5]
 8000f8c:	4631      	mov	r1, r6
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d909      	bls.n	8000faa <__udivmoddi4+0xc2>
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	f000 80ef 	beq.w	800117a <__udivmoddi4+0x292>
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	fab3 f683 	clz	r6, r3
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d14a      	bne.n	8001048 <__udivmoddi4+0x160>
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	d302      	bcc.n	8000fbc <__udivmoddi4+0xd4>
 8000fb6:	4282      	cmp	r2, r0
 8000fb8:	f200 80f9 	bhi.w	80011ae <__udivmoddi4+0x2c6>
 8000fbc:	1a84      	subs	r4, r0, r2
 8000fbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	469e      	mov	lr, r3
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d0e0      	beq.n	8000f8c <__udivmoddi4+0xa4>
 8000fca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000fce:	e7dd      	b.n	8000f8c <__udivmoddi4+0xa4>
 8000fd0:	b902      	cbnz	r2, 8000fd4 <__udivmoddi4+0xec>
 8000fd2:	deff      	udf	#255	; 0xff
 8000fd4:	fab2 f282 	clz	r2, r2
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	f040 8092 	bne.w	8001102 <__udivmoddi4+0x21a>
 8000fde:	eba1 010c 	sub.w	r1, r1, ip
 8000fe2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe6:	fa1f fe8c 	uxth.w	lr, ip
 8000fea:	2601      	movs	r6, #1
 8000fec:	0c20      	lsrs	r0, r4, #16
 8000fee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ff2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ff6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ffa:	fb0e f003 	mul.w	r0, lr, r3
 8000ffe:	4288      	cmp	r0, r1
 8001000:	d908      	bls.n	8001014 <__udivmoddi4+0x12c>
 8001002:	eb1c 0101 	adds.w	r1, ip, r1
 8001006:	f103 38ff 	add.w	r8, r3, #4294967295
 800100a:	d202      	bcs.n	8001012 <__udivmoddi4+0x12a>
 800100c:	4288      	cmp	r0, r1
 800100e:	f200 80cb 	bhi.w	80011a8 <__udivmoddi4+0x2c0>
 8001012:	4643      	mov	r3, r8
 8001014:	1a09      	subs	r1, r1, r0
 8001016:	b2a4      	uxth	r4, r4
 8001018:	fbb1 f0f7 	udiv	r0, r1, r7
 800101c:	fb07 1110 	mls	r1, r7, r0, r1
 8001020:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001024:	fb0e fe00 	mul.w	lr, lr, r0
 8001028:	45a6      	cmp	lr, r4
 800102a:	d908      	bls.n	800103e <__udivmoddi4+0x156>
 800102c:	eb1c 0404 	adds.w	r4, ip, r4
 8001030:	f100 31ff 	add.w	r1, r0, #4294967295
 8001034:	d202      	bcs.n	800103c <__udivmoddi4+0x154>
 8001036:	45a6      	cmp	lr, r4
 8001038:	f200 80bb 	bhi.w	80011b2 <__udivmoddi4+0x2ca>
 800103c:	4608      	mov	r0, r1
 800103e:	eba4 040e 	sub.w	r4, r4, lr
 8001042:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001046:	e79c      	b.n	8000f82 <__udivmoddi4+0x9a>
 8001048:	f1c6 0720 	rsb	r7, r6, #32
 800104c:	40b3      	lsls	r3, r6
 800104e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001052:	ea4c 0c03 	orr.w	ip, ip, r3
 8001056:	fa20 f407 	lsr.w	r4, r0, r7
 800105a:	fa01 f306 	lsl.w	r3, r1, r6
 800105e:	431c      	orrs	r4, r3
 8001060:	40f9      	lsrs	r1, r7
 8001062:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001066:	fa00 f306 	lsl.w	r3, r0, r6
 800106a:	fbb1 f8f9 	udiv	r8, r1, r9
 800106e:	0c20      	lsrs	r0, r4, #16
 8001070:	fa1f fe8c 	uxth.w	lr, ip
 8001074:	fb09 1118 	mls	r1, r9, r8, r1
 8001078:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800107c:	fb08 f00e 	mul.w	r0, r8, lr
 8001080:	4288      	cmp	r0, r1
 8001082:	fa02 f206 	lsl.w	r2, r2, r6
 8001086:	d90b      	bls.n	80010a0 <__udivmoddi4+0x1b8>
 8001088:	eb1c 0101 	adds.w	r1, ip, r1
 800108c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001090:	f080 8088 	bcs.w	80011a4 <__udivmoddi4+0x2bc>
 8001094:	4288      	cmp	r0, r1
 8001096:	f240 8085 	bls.w	80011a4 <__udivmoddi4+0x2bc>
 800109a:	f1a8 0802 	sub.w	r8, r8, #2
 800109e:	4461      	add	r1, ip
 80010a0:	1a09      	subs	r1, r1, r0
 80010a2:	b2a4      	uxth	r4, r4
 80010a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80010a8:	fb09 1110 	mls	r1, r9, r0, r1
 80010ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80010b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80010b4:	458e      	cmp	lr, r1
 80010b6:	d908      	bls.n	80010ca <__udivmoddi4+0x1e2>
 80010b8:	eb1c 0101 	adds.w	r1, ip, r1
 80010bc:	f100 34ff 	add.w	r4, r0, #4294967295
 80010c0:	d26c      	bcs.n	800119c <__udivmoddi4+0x2b4>
 80010c2:	458e      	cmp	lr, r1
 80010c4:	d96a      	bls.n	800119c <__udivmoddi4+0x2b4>
 80010c6:	3802      	subs	r0, #2
 80010c8:	4461      	add	r1, ip
 80010ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010ce:	fba0 9402 	umull	r9, r4, r0, r2
 80010d2:	eba1 010e 	sub.w	r1, r1, lr
 80010d6:	42a1      	cmp	r1, r4
 80010d8:	46c8      	mov	r8, r9
 80010da:	46a6      	mov	lr, r4
 80010dc:	d356      	bcc.n	800118c <__udivmoddi4+0x2a4>
 80010de:	d053      	beq.n	8001188 <__udivmoddi4+0x2a0>
 80010e0:	b15d      	cbz	r5, 80010fa <__udivmoddi4+0x212>
 80010e2:	ebb3 0208 	subs.w	r2, r3, r8
 80010e6:	eb61 010e 	sbc.w	r1, r1, lr
 80010ea:	fa01 f707 	lsl.w	r7, r1, r7
 80010ee:	fa22 f306 	lsr.w	r3, r2, r6
 80010f2:	40f1      	lsrs	r1, r6
 80010f4:	431f      	orrs	r7, r3
 80010f6:	e9c5 7100 	strd	r7, r1, [r5]
 80010fa:	2600      	movs	r6, #0
 80010fc:	4631      	mov	r1, r6
 80010fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001102:	f1c2 0320 	rsb	r3, r2, #32
 8001106:	40d8      	lsrs	r0, r3
 8001108:	fa0c fc02 	lsl.w	ip, ip, r2
 800110c:	fa21 f303 	lsr.w	r3, r1, r3
 8001110:	4091      	lsls	r1, r2
 8001112:	4301      	orrs	r1, r0
 8001114:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001118:	fa1f fe8c 	uxth.w	lr, ip
 800111c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001120:	fb07 3610 	mls	r6, r7, r0, r3
 8001124:	0c0b      	lsrs	r3, r1, #16
 8001126:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800112a:	fb00 f60e 	mul.w	r6, r0, lr
 800112e:	429e      	cmp	r6, r3
 8001130:	fa04 f402 	lsl.w	r4, r4, r2
 8001134:	d908      	bls.n	8001148 <__udivmoddi4+0x260>
 8001136:	eb1c 0303 	adds.w	r3, ip, r3
 800113a:	f100 38ff 	add.w	r8, r0, #4294967295
 800113e:	d22f      	bcs.n	80011a0 <__udivmoddi4+0x2b8>
 8001140:	429e      	cmp	r6, r3
 8001142:	d92d      	bls.n	80011a0 <__udivmoddi4+0x2b8>
 8001144:	3802      	subs	r0, #2
 8001146:	4463      	add	r3, ip
 8001148:	1b9b      	subs	r3, r3, r6
 800114a:	b289      	uxth	r1, r1
 800114c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001150:	fb07 3316 	mls	r3, r7, r6, r3
 8001154:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001158:	fb06 f30e 	mul.w	r3, r6, lr
 800115c:	428b      	cmp	r3, r1
 800115e:	d908      	bls.n	8001172 <__udivmoddi4+0x28a>
 8001160:	eb1c 0101 	adds.w	r1, ip, r1
 8001164:	f106 38ff 	add.w	r8, r6, #4294967295
 8001168:	d216      	bcs.n	8001198 <__udivmoddi4+0x2b0>
 800116a:	428b      	cmp	r3, r1
 800116c:	d914      	bls.n	8001198 <__udivmoddi4+0x2b0>
 800116e:	3e02      	subs	r6, #2
 8001170:	4461      	add	r1, ip
 8001172:	1ac9      	subs	r1, r1, r3
 8001174:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001178:	e738      	b.n	8000fec <__udivmoddi4+0x104>
 800117a:	462e      	mov	r6, r5
 800117c:	4628      	mov	r0, r5
 800117e:	e705      	b.n	8000f8c <__udivmoddi4+0xa4>
 8001180:	4606      	mov	r6, r0
 8001182:	e6e3      	b.n	8000f4c <__udivmoddi4+0x64>
 8001184:	4618      	mov	r0, r3
 8001186:	e6f8      	b.n	8000f7a <__udivmoddi4+0x92>
 8001188:	454b      	cmp	r3, r9
 800118a:	d2a9      	bcs.n	80010e0 <__udivmoddi4+0x1f8>
 800118c:	ebb9 0802 	subs.w	r8, r9, r2
 8001190:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001194:	3801      	subs	r0, #1
 8001196:	e7a3      	b.n	80010e0 <__udivmoddi4+0x1f8>
 8001198:	4646      	mov	r6, r8
 800119a:	e7ea      	b.n	8001172 <__udivmoddi4+0x28a>
 800119c:	4620      	mov	r0, r4
 800119e:	e794      	b.n	80010ca <__udivmoddi4+0x1e2>
 80011a0:	4640      	mov	r0, r8
 80011a2:	e7d1      	b.n	8001148 <__udivmoddi4+0x260>
 80011a4:	46d0      	mov	r8, sl
 80011a6:	e77b      	b.n	80010a0 <__udivmoddi4+0x1b8>
 80011a8:	3b02      	subs	r3, #2
 80011aa:	4461      	add	r1, ip
 80011ac:	e732      	b.n	8001014 <__udivmoddi4+0x12c>
 80011ae:	4630      	mov	r0, r6
 80011b0:	e709      	b.n	8000fc6 <__udivmoddi4+0xde>
 80011b2:	4464      	add	r4, ip
 80011b4:	3802      	subs	r0, #2
 80011b6:	e742      	b.n	800103e <__udivmoddi4+0x156>

080011b8 <__aeabi_idiv0>:
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_Init+0x28>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_Init+0x28>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f973 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f808 	bl	80011e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f020 fb3e 	bl	8021858 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9d2 	bl	80015b0 <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f968 	bl	80014f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000a4 	.word	0x200000a4
 8001240:	20000004 	.word	0x20000004
 8001244:	20000000 	.word	0x20000000

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000004 	.word	0x20000004
 800126c:	2000015c 	.word	0x2000015c

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000015c 	.word	0x2000015c

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000004 	.word	0x20000004

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	05fa0000 	.word	0x05fa0000

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db12      	blt.n	80013a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	490a      	ldr	r1, [pc, #40]	; (80013b4 <__NVIC_DisableIRQ+0x44>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	3320      	adds	r3, #32
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800139c:	f3bf 8f4f 	dsb	sy
}
 80013a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013a2:	f3bf 8f6f 	isb	sy
}
 80013a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b07      	cmp	r3, #7
 80014c4:	d00f      	beq.n	80014e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d00c      	beq.n	80014e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d009      	beq.n	80014e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d006      	beq.n	80014e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d003      	beq.n	80014e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014de:	2192      	movs	r1, #146	; 0x92
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80014e2:	f01d f899 	bl	801e618 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fef2 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	080268ac 	.word	0x080268ac

080014f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d903      	bls.n	8001518 <HAL_NVIC_SetPriority+0x20>
 8001510:	21aa      	movs	r1, #170	; 0xaa
 8001512:	480e      	ldr	r0, [pc, #56]	; (800154c <HAL_NVIC_SetPriority+0x54>)
 8001514:	f01d f880 	bl	801e618 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	d903      	bls.n	8001526 <HAL_NVIC_SetPriority+0x2e>
 800151e:	21ab      	movs	r1, #171	; 0xab
 8001520:	480a      	ldr	r0, [pc, #40]	; (800154c <HAL_NVIC_SetPriority+0x54>)
 8001522:	f01d f879 	bl	801e618 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001526:	f7ff fef7 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800152a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff ff6b 	bl	800140c <NVIC_EncodePriority>
 8001536:	4602      	mov	r2, r0
 8001538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff3a 	bl	80013b8 <__NVIC_SetPriority>
}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	080268ac 	.word	0x080268ac

08001550 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	da03      	bge.n	800156a <HAL_NVIC_EnableIRQ+0x1a>
 8001562:	21be      	movs	r1, #190	; 0xbe
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <HAL_NVIC_EnableIRQ+0x2c>)
 8001566:	f01d f857 	bl	801e618 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fee0 	bl	8001334 <__NVIC_EnableIRQ>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	080268ac 	.word	0x080268ac

08001580 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	da03      	bge.n	800159a <HAL_NVIC_DisableIRQ+0x1a>
 8001592:	21ce      	movs	r1, #206	; 0xce
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <HAL_NVIC_DisableIRQ+0x2c>)
 8001596:	f01d f83f 	bl	801e618 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fee6 	bl	8001370 <__NVIC_DisableIRQ>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	080268ac 	.word	0x080268ac

080015b0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff5b 	bl	8001474 <SysTick_Config>
 80015be:	4603      	mov	r3, r0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015cc:	f3bf 8f5f 	dmb	sy
}
 80015d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_MPU_Disable+0x28>)
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_MPU_Disable+0x28>)
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_MPU_Disable+0x2c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00
 80015f4:	e000ed90 	.word	0xe000ed90

080015f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001600:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_MPU_Enable+0x38>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_MPU_Enable+0x3c>)
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_MPU_Enable+0x3c>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001616:	f3bf 8f4f 	dsb	sy
}
 800161a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800161c:	f3bf 8f6f 	isb	sy
}
 8001620:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed90 	.word	0xe000ed90
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fe14 	bl	8001270 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e203      	b.n	8001a5c <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a8b      	ldr	r2, [pc, #556]	; (8001888 <HAL_DMA_Init+0x250>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d04e      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a8a      	ldr	r2, [pc, #552]	; (800188c <HAL_DMA_Init+0x254>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d049      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a88      	ldr	r2, [pc, #544]	; (8001890 <HAL_DMA_Init+0x258>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d044      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a87      	ldr	r2, [pc, #540]	; (8001894 <HAL_DMA_Init+0x25c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d03f      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a85      	ldr	r2, [pc, #532]	; (8001898 <HAL_DMA_Init+0x260>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d03a      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a84      	ldr	r2, [pc, #528]	; (800189c <HAL_DMA_Init+0x264>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d035      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a82      	ldr	r2, [pc, #520]	; (80018a0 <HAL_DMA_Init+0x268>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d030      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a81      	ldr	r2, [pc, #516]	; (80018a4 <HAL_DMA_Init+0x26c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d02b      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a7f      	ldr	r2, [pc, #508]	; (80018a8 <HAL_DMA_Init+0x270>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d026      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7e      	ldr	r2, [pc, #504]	; (80018ac <HAL_DMA_Init+0x274>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d021      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a7c      	ldr	r2, [pc, #496]	; (80018b0 <HAL_DMA_Init+0x278>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01c      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7b      	ldr	r2, [pc, #492]	; (80018b4 <HAL_DMA_Init+0x27c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d017      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a79      	ldr	r2, [pc, #484]	; (80018b8 <HAL_DMA_Init+0x280>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d012      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a78      	ldr	r2, [pc, #480]	; (80018bc <HAL_DMA_Init+0x284>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a76      	ldr	r2, [pc, #472]	; (80018c0 <HAL_DMA_Init+0x288>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d008      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a75      	ldr	r2, [pc, #468]	; (80018c4 <HAL_DMA_Init+0x28c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d003      	beq.n	80016fc <HAL_DMA_Init+0xc4>
 80016f4:	21b9      	movs	r1, #185	; 0xb9
 80016f6:	4874      	ldr	r0, [pc, #464]	; (80018c8 <HAL_DMA_Init+0x290>)
 80016f8:	f01c ff8e 	bl	801e618 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d026      	beq.n	8001752 <HAL_DMA_Init+0x11a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800170c:	d021      	beq.n	8001752 <HAL_DMA_Init+0x11a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001716:	d01c      	beq.n	8001752 <HAL_DMA_Init+0x11a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001720:	d017      	beq.n	8001752 <HAL_DMA_Init+0x11a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800172a:	d012      	beq.n	8001752 <HAL_DMA_Init+0x11a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001734:	d00d      	beq.n	8001752 <HAL_DMA_Init+0x11a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800173e:	d008      	beq.n	8001752 <HAL_DMA_Init+0x11a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001748:	d003      	beq.n	8001752 <HAL_DMA_Init+0x11a>
 800174a:	21ba      	movs	r1, #186	; 0xba
 800174c:	485e      	ldr	r0, [pc, #376]	; (80018c8 <HAL_DMA_Init+0x290>)
 800174e:	f01c ff63 	bl	801e618 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_DMA_Init+0x13a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b40      	cmp	r3, #64	; 0x40
 8001760:	d007      	beq.n	8001772 <HAL_DMA_Init+0x13a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b80      	cmp	r3, #128	; 0x80
 8001768:	d003      	beq.n	8001772 <HAL_DMA_Init+0x13a>
 800176a:	21bb      	movs	r1, #187	; 0xbb
 800176c:	4856      	ldr	r0, [pc, #344]	; (80018c8 <HAL_DMA_Init+0x290>)
 800176e:	f01c ff53 	bl	801e618 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800177a:	d007      	beq.n	800178c <HAL_DMA_Init+0x154>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_DMA_Init+0x154>
 8001784:	21bc      	movs	r1, #188	; 0xbc
 8001786:	4850      	ldr	r0, [pc, #320]	; (80018c8 <HAL_DMA_Init+0x290>)
 8001788:	f01c ff46 	bl	801e618 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001794:	d007      	beq.n	80017a6 <HAL_DMA_Init+0x16e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_DMA_Init+0x16e>
 800179e:	21bd      	movs	r1, #189	; 0xbd
 80017a0:	4849      	ldr	r0, [pc, #292]	; (80018c8 <HAL_DMA_Init+0x290>)
 80017a2:	f01c ff39 	bl	801e618 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00d      	beq.n	80017ca <HAL_DMA_Init+0x192>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Init+0x192>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c0:	d003      	beq.n	80017ca <HAL_DMA_Init+0x192>
 80017c2:	21be      	movs	r1, #190	; 0xbe
 80017c4:	4840      	ldr	r0, [pc, #256]	; (80018c8 <HAL_DMA_Init+0x290>)
 80017c6:	f01c ff27 	bl	801e618 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00d      	beq.n	80017ee <HAL_DMA_Init+0x1b6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017da:	d008      	beq.n	80017ee <HAL_DMA_Init+0x1b6>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e4:	d003      	beq.n	80017ee <HAL_DMA_Init+0x1b6>
 80017e6:	21bf      	movs	r1, #191	; 0xbf
 80017e8:	4837      	ldr	r0, [pc, #220]	; (80018c8 <HAL_DMA_Init+0x290>)
 80017ea:	f01c ff15 	bl	801e618 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <HAL_DMA_Init+0x1d8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017fe:	d007      	beq.n	8001810 <HAL_DMA_Init+0x1d8>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	2b20      	cmp	r3, #32
 8001806:	d003      	beq.n	8001810 <HAL_DMA_Init+0x1d8>
 8001808:	21c0      	movs	r1, #192	; 0xc0
 800180a:	482f      	ldr	r0, [pc, #188]	; (80018c8 <HAL_DMA_Init+0x290>)
 800180c:	f01c ff04 	bl	801e618 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d012      	beq.n	800183e <HAL_DMA_Init+0x206>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d00d      	beq.n	800183e <HAL_DMA_Init+0x206>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800182a:	d008      	beq.n	800183e <HAL_DMA_Init+0x206>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001834:	d003      	beq.n	800183e <HAL_DMA_Init+0x206>
 8001836:	21c1      	movs	r1, #193	; 0xc1
 8001838:	4823      	ldr	r0, [pc, #140]	; (80018c8 <HAL_DMA_Init+0x290>)
 800183a:	f01c feed 	bl	801e618 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <HAL_DMA_Init+0x21e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	2b04      	cmp	r3, #4
 800184c:	d003      	beq.n	8001856 <HAL_DMA_Init+0x21e>
 800184e:	21c2      	movs	r1, #194	; 0xc2
 8001850:	481d      	ldr	r0, [pc, #116]	; (80018c8 <HAL_DMA_Init+0x290>)
 8001852:	f01c fee1 	bl	801e618 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	2b00      	cmp	r3, #0
 800185c:	d064      	beq.n	8001928 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	2b00      	cmp	r3, #0
 8001864:	d032      	beq.n	80018cc <HAL_DMA_Init+0x294>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	2b01      	cmp	r3, #1
 800186c:	d02e      	beq.n	80018cc <HAL_DMA_Init+0x294>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	2b02      	cmp	r3, #2
 8001874:	d02a      	beq.n	80018cc <HAL_DMA_Init+0x294>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	2b03      	cmp	r3, #3
 800187c:	d026      	beq.n	80018cc <HAL_DMA_Init+0x294>
 800187e:	21c7      	movs	r1, #199	; 0xc7
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <HAL_DMA_Init+0x290>)
 8001882:	f01c fec9 	bl	801e618 <assert_failed>
 8001886:	e021      	b.n	80018cc <HAL_DMA_Init+0x294>
 8001888:	40026010 	.word	0x40026010
 800188c:	40026028 	.word	0x40026028
 8001890:	40026040 	.word	0x40026040
 8001894:	40026058 	.word	0x40026058
 8001898:	40026070 	.word	0x40026070
 800189c:	40026088 	.word	0x40026088
 80018a0:	400260a0 	.word	0x400260a0
 80018a4:	400260b8 	.word	0x400260b8
 80018a8:	40026410 	.word	0x40026410
 80018ac:	40026428 	.word	0x40026428
 80018b0:	40026440 	.word	0x40026440
 80018b4:	40026458 	.word	0x40026458
 80018b8:	40026470 	.word	0x40026470
 80018bc:	40026488 	.word	0x40026488
 80018c0:	400264a0 	.word	0x400264a0
 80018c4:	400264b8 	.word	0x400264b8
 80018c8:	080268e8 	.word	0x080268e8
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d012      	beq.n	80018fa <HAL_DMA_Init+0x2c2>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018dc:	d00d      	beq.n	80018fa <HAL_DMA_Init+0x2c2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e6:	d008      	beq.n	80018fa <HAL_DMA_Init+0x2c2>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018f0:	d003      	beq.n	80018fa <HAL_DMA_Init+0x2c2>
 80018f2:	21c8      	movs	r1, #200	; 0xc8
 80018f4:	485b      	ldr	r0, [pc, #364]	; (8001a64 <HAL_DMA_Init+0x42c>)
 80018f6:	f01c fe8f 	bl	801e618 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d012      	beq.n	8001928 <HAL_DMA_Init+0x2f0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800190a:	d00d      	beq.n	8001928 <HAL_DMA_Init+0x2f0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001914:	d008      	beq.n	8001928 <HAL_DMA_Init+0x2f0>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800191e:	d003      	beq.n	8001928 <HAL_DMA_Init+0x2f0>
 8001920:	21c9      	movs	r1, #201	; 0xc9
 8001922:	4850      	ldr	r0, [pc, #320]	; (8001a64 <HAL_DMA_Init+0x42c>)
 8001924:	f01c fe78 	bl	801e618 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001948:	e00f      	b.n	800196a <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194a:	f7ff fc91 	bl	8001270 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b05      	cmp	r3, #5
 8001956:	d908      	bls.n	800196a <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2220      	movs	r2, #32
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2203      	movs	r2, #3
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e078      	b.n	8001a5c <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e8      	bne.n	800194a <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_DMA_Init+0x430>)
 8001984:	4013      	ands	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d107      	bne.n	80019d4 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	4313      	orrs	r3, r2
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f023 0307 	bic.w	r3, r3, #7
 80019ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d117      	bne.n	8001a2e <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00e      	beq.n	8001a2e <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fb19 	bl	8002048 <DMA_CheckFifoParam>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2240      	movs	r2, #64	; 0x40
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e016      	b.n	8001a5c <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fad0 	bl	8001fdc <DMA_CalcBaseAndBitshift>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a44:	223f      	movs	r2, #63	; 0x3f
 8001a46:	409a      	lsls	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	080268e8 	.word	0x080268e8
 8001a68:	f010803f 	.word	0xf010803f

08001a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_DMA_Start_IT+0x26>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a90:	d304      	bcc.n	8001a9c <HAL_DMA_Start_IT+0x30>
 8001a92:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001a96:	482b      	ldr	r0, [pc, #172]	; (8001b44 <HAL_DMA_Start_IT+0xd8>)
 8001a98:	f01c fdbe 	bl	801e618 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_DMA_Start_IT+0x3e>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e048      	b.n	8001b3c <HAL_DMA_Start_IT+0xd0>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d137      	bne.n	8001b2e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 fa54 	bl	8001f80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	223f      	movs	r2, #63	; 0x3f
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0216 	orr.w	r2, r2, #22
 8001af2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b02:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_DMA_Start_IT+0xb0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0208 	orr.w	r2, r2, #8
 8001b1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e005      	b.n	8001b3a <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
 8001b38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	080268e8 	.word	0x080268e8

08001b48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b56:	f7ff fb8b 	bl	8001270 <HAL_GetTick>
 8001b5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e052      	b.n	8001c20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0216 	bic.w	r2, r2, #22
 8001b88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <HAL_DMA_Abort+0x62>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0208 	bic.w	r2, r2, #8
 8001bb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bca:	e013      	b.n	8001bf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bcc:	f7ff fb50 	bl	8001270 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d90c      	bls.n	8001bf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2203      	movs	r2, #3
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e015      	b.n	8001c20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1e4      	bne.n	8001bcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	223f      	movs	r2, #63	; 0x3f
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d004      	beq.n	8001c46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00c      	b.n	8001c60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2205      	movs	r2, #5
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c78:	4b8e      	ldr	r3, [pc, #568]	; (8001eb4 <HAL_DMA_IRQHandler+0x248>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a8e      	ldr	r2, [pc, #568]	; (8001eb8 <HAL_DMA_IRQHandler+0x24c>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2208      	movs	r2, #8
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01a      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0204 	bic.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2201      	movs	r2, #1
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d012      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	f043 0202 	orr.w	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2204      	movs	r2, #4
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2204      	movs	r2, #4
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f043 0204 	orr.w	r2, r3, #4
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2210      	movs	r2, #16
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d043      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d03c      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2210      	movs	r2, #16
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d018      	beq.n	8001dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d108      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d024      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
 8001d9a:	e01f      	b.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
 8001dac:	e016      	b.n	8001ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0208 	bic.w	r2, r2, #8
 8001dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2220      	movs	r2, #32
 8001de2:	409a      	lsls	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 808f 	beq.w	8001f0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8087 	beq.w	8001f0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2220      	movs	r2, #32
 8001e04:	409a      	lsls	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d136      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0216 	bic.w	r2, r2, #22
 8001e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d103      	bne.n	8001e46 <HAL_DMA_IRQHandler+0x1da>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0208 	bic.w	r2, r2, #8
 8001e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	223f      	movs	r2, #63	; 0x3f
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d07e      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
        }
        return;
 8001e82:	e079      	b.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01d      	beq.n	8001ece <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10d      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d031      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
 8001eb0:	e02c      	b.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
 8001eb2:	bf00      	nop
 8001eb4:	200000a4 	.word	0x200000a4
 8001eb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
 8001ecc:	e01e      	b.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0210 	bic.w	r2, r2, #16
 8001eea:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d032      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d022      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2205      	movs	r2, #5
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d307      	bcc.n	8001f54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f2      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x2cc>
 8001f52:	e000      	b.n	8001f56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f54:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
 8001f76:	e000      	b.n	8001f7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f78:	bf00      	nop
    }
  }
}
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d108      	bne.n	8001fc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fbe:	e007      	b.n	8001fd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3b10      	subs	r3, #16
 8001fec:	4a13      	ldr	r2, [pc, #76]	; (800203c <DMA_CalcBaseAndBitshift+0x60>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <DMA_CalcBaseAndBitshift+0x64>)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d908      	bls.n	800201c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <DMA_CalcBaseAndBitshift+0x68>)
 8002012:	4013      	ands	r3, r2
 8002014:	1d1a      	adds	r2, r3, #4
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	659a      	str	r2, [r3, #88]	; 0x58
 800201a:	e006      	b.n	800202a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <DMA_CalcBaseAndBitshift+0x68>)
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	aaaaaaab 	.word	0xaaaaaaab
 8002040:	08026f6c 	.word	0x08026f6c
 8002044:	fffffc00 	.word	0xfffffc00

08002048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11f      	bne.n	80020a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d856      	bhi.n	8002116 <DMA_CheckFifoParam+0xce>
 8002068:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <DMA_CheckFifoParam+0x28>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002081 	.word	0x08002081
 8002074:	08002093 	.word	0x08002093
 8002078:	08002081 	.word	0x08002081
 800207c:	08002117 	.word	0x08002117
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d046      	beq.n	800211a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002090:	e043      	b.n	800211a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800209a:	d140      	bne.n	800211e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a0:	e03d      	b.n	800211e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020aa:	d121      	bne.n	80020f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d837      	bhi.n	8002122 <DMA_CheckFifoParam+0xda>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <DMA_CheckFifoParam+0x70>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020cf 	.word	0x080020cf
 80020c0:	080020c9 	.word	0x080020c9
 80020c4:	080020e1 	.word	0x080020e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
      break;
 80020cc:	e030      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d025      	beq.n	8002126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020de:	e022      	b.n	8002126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e8:	d11f      	bne.n	800212a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ee:	e01c      	b.n	800212a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d903      	bls.n	80020fe <DMA_CheckFifoParam+0xb6>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d003      	beq.n	8002104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020fc:	e018      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
      break;
 8002102:	e015      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      break;
 8002114:	e00b      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      break;
 8002116:	bf00      	nop
 8002118:	e00a      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
 800211c:	e008      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 800211e:	bf00      	nop
 8002120:	e006      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 8002122:	bf00      	nop
 8002124:	e004      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 8002126:	bf00      	nop
 8002128:	e002      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;   
 800212a:	bf00      	nop
 800212c:	e000      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
    }
  } 
  
  return status; 
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop

08002140 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e07a      	b.n	8002248 <HAL_DMA2D_Init+0x108>
  }

  /* Check the parameters */
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <HAL_DMA2D_Init+0x110>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <HAL_DMA2D_Init+0x24>
 800215c:	21f6      	movs	r1, #246	; 0xf6
 800215e:	483d      	ldr	r0, [pc, #244]	; (8002254 <HAL_DMA2D_Init+0x114>)
 8002160:	f01c fa5a 	bl	801e618 <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d012      	beq.n	8002192 <HAL_DMA2D_Init+0x52>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002174:	d00d      	beq.n	8002192 <HAL_DMA2D_Init+0x52>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800217e:	d008      	beq.n	8002192 <HAL_DMA2D_Init+0x52>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002188:	d003      	beq.n	8002192 <HAL_DMA2D_Init+0x52>
 800218a:	21f7      	movs	r1, #247	; 0xf7
 800218c:	4831      	ldr	r0, [pc, #196]	; (8002254 <HAL_DMA2D_Init+0x114>)
 800218e:	f01c fa43 	bl	801e618 <assert_failed>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d013      	beq.n	80021c2 <HAL_DMA2D_Init+0x82>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d00f      	beq.n	80021c2 <HAL_DMA2D_Init+0x82>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d00b      	beq.n	80021c2 <HAL_DMA2D_Init+0x82>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d007      	beq.n	80021c2 <HAL_DMA2D_Init+0x82>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d003      	beq.n	80021c2 <HAL_DMA2D_Init+0x82>
 80021ba:	21f8      	movs	r1, #248	; 0xf8
 80021bc:	4825      	ldr	r0, [pc, #148]	; (8002254 <HAL_DMA2D_Init+0x114>)
 80021be:	f01c fa2b 	bl	801e618 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ca:	d303      	bcc.n	80021d4 <HAL_DMA2D_Init+0x94>
 80021cc:	21f9      	movs	r1, #249	; 0xf9
 80021ce:	4821      	ldr	r0, [pc, #132]	; (8002254 <HAL_DMA2D_Init+0x114>)
 80021d0:	f01c fa22 	bl	801e618 <assert_failed>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <HAL_DMA2D_Init+0xae>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f01a fc69 	bl	801cac0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	f023 0107 	bic.w	r1, r3, #7
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_DMA2D_Init+0x118>)
 800222a:	4013      	ands	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68d1      	ldr	r1, [r2, #12]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	4002b000 	.word	0x4002b000
 8002254:	08026920 	.word	0x08026920
 8002258:	ffffc000 	.word	0xffffc000

0800225c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	d304      	bcc.n	800227c <HAL_DMA2D_Start+0x20>
 8002272:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 8002276:	4818      	ldr	r0, [pc, #96]	; (80022d8 <HAL_DMA2D_Start+0x7c>)
 8002278:	f01c f9ce 	bl	801e618 <assert_failed>
  assert_param(IS_DMA2D_PIXEL(Width));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002282:	d304      	bcc.n	800228e <HAL_DMA2D_Start+0x32>
 8002284:	f240 21a5 	movw	r1, #677	; 0x2a5
 8002288:	4813      	ldr	r0, [pc, #76]	; (80022d8 <HAL_DMA2D_Start+0x7c>)
 800228a:	f01c f9c5 	bl	801e618 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_DMA2D_Start+0x40>
 8002298:	2302      	movs	r3, #2
 800229a:	e018      	b.n	80022ce <HAL_DMA2D_Start+0x72>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fa24 	bl	8002704 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	08026920 	.word	0x08026920

080022dc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d056      	beq.n	80023a6 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80022f8:	f7fe ffba 	bl	8001270 <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80022fe:	e04b      	b.n	8002398 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800230e:	2b00      	cmp	r3, #0
 8002310:	d023      	beq.n	800235a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	f043 0202 	orr.w	r2, r3, #2
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2221      	movs	r2, #33	; 0x21
 8002344:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2204      	movs	r2, #4
 800234a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0a5      	b.n	80024a6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d01a      	beq.n	8002398 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002362:	f7fe ff85 	bl	8001270 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d302      	bcc.n	8002378 <HAL_DMA2D_PollForTransfer+0x9c>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10f      	bne.n	8002398 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2203      	movs	r2, #3
 8002388:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e086      	b.n	80024a6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0ac      	beq.n	8002300 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d061      	beq.n	800248c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80023c8:	f7fe ff52 	bl	8001270 <HAL_GetTick>
 80023cc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80023ce:	e056      	b.n	800247e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d02e      	beq.n	8002440 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	f043 0202 	orr.w	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2229      	movs	r2, #41	; 0x29
 800242a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2204      	movs	r2, #4
 8002430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e032      	b.n	80024a6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002446:	d01a      	beq.n	800247e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002448:	f7fe ff12 	bl	8001270 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d302      	bcc.n	800245e <HAL_DMA2D_PollForTransfer+0x182>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	f043 0220 	orr.w	r2, r3, #32
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2203      	movs	r2, #3
 800246e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e013      	b.n	80024a6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0a1      	beq.n	80023d0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2212      	movs	r2, #18
 8002492:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg;
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_DMA2D_ConfigLayer+0x20>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d004      	beq.n	80024d0 <HAL_DMA2D_ConfigLayer+0x20>
 80024c6:	f240 614a 	movw	r1, #1610	; 0x64a
 80024ca:	488c      	ldr	r0, [pc, #560]	; (80026fc <HAL_DMA2D_ConfigLayer+0x24c>)
 80024cc:	f01c f8a4 	bl	801e618 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4413      	add	r3, r2
 80024d8:	3318      	adds	r3, #24
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e0:	d304      	bcc.n	80024ec <HAL_DMA2D_ConfigLayer+0x3c>
 80024e2:	f240 614b 	movw	r1, #1611	; 0x64b
 80024e6:	4885      	ldr	r0, [pc, #532]	; (80026fc <HAL_DMA2D_ConfigLayer+0x24c>)
 80024e8:	f01c f896 	bl	801e618 <assert_failed>
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024f4:	d07d      	beq.n	80025f2 <HAL_DMA2D_ConfigLayer+0x142>
  {
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	4413      	add	r3, r2
 80024fe:	331c      	adds	r3, #28
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d054      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4413      	add	r3, r2
 800250e:	331c      	adds	r3, #28
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d04c      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	4413      	add	r3, r2
 800251e:	331c      	adds	r3, #28
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d044      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	4413      	add	r3, r2
 800252e:	331c      	adds	r3, #28
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d03c      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4413      	add	r3, r2
 800253e:	331c      	adds	r3, #28
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b04      	cmp	r3, #4
 8002544:	d034      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4413      	add	r3, r2
 800254e:	331c      	adds	r3, #28
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d02c      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	4413      	add	r3, r2
 800255e:	331c      	adds	r3, #28
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b06      	cmp	r3, #6
 8002564:	d024      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4413      	add	r3, r2
 800256e:	331c      	adds	r3, #28
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b07      	cmp	r3, #7
 8002574:	d01c      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	4413      	add	r3, r2
 800257e:	331c      	adds	r3, #28
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b08      	cmp	r3, #8
 8002584:	d014      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	4413      	add	r3, r2
 800258e:	331c      	adds	r3, #28
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b09      	cmp	r3, #9
 8002594:	d00c      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	4413      	add	r3, r2
 800259e:	331c      	adds	r3, #28
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b0a      	cmp	r3, #10
 80025a4:	d004      	beq.n	80025b0 <HAL_DMA2D_ConfigLayer+0x100>
 80025a6:	f240 614e 	movw	r1, #1614	; 0x64e
 80025aa:	4854      	ldr	r0, [pc, #336]	; (80026fc <HAL_DMA2D_ConfigLayer+0x24c>)
 80025ac:	f01c f834 	bl	801e618 <assert_failed>
    if(hdma2d->Init.Mode != DMA2D_M2M)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01c      	beq.n	80025f2 <HAL_DMA2D_ConfigLayer+0x142>
    {
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	3302      	adds	r3, #2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d014      	beq.n	80025f2 <HAL_DMA2D_ConfigLayer+0x142>
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	3302      	adds	r3, #2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	4413      	add	r3, r2
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d00c      	beq.n	80025f2 <HAL_DMA2D_ConfigLayer+0x142>
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3302      	adds	r3, #2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	4413      	add	r3, r2
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d004      	beq.n	80025f2 <HAL_DMA2D_ConfigLayer+0x142>
 80025e8:	f240 6151 	movw	r1, #1617	; 0x651
 80025ec:	4843      	ldr	r0, [pc, #268]	; (80026fc <HAL_DMA2D_ConfigLayer+0x24c>)
 80025ee:	f01c f813 	bl	801e618 <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_DMA2D_ConfigLayer+0x150>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e079      	b.n	80026f4 <HAL_DMA2D_ConfigLayer+0x244>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	3318      	adds	r3, #24
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800262a:	4b35      	ldr	r3, [pc, #212]	; (8002700 <HAL_DMA2D_ConfigLayer+0x250>)
 800262c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d003      	beq.n	800263e <HAL_DMA2D_ConfigLayer+0x18e>
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b09      	cmp	r3, #9
 800263c:	d107      	bne.n	800264e <HAL_DMA2D_ConfigLayer+0x19e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e005      	b.n	800265a <HAL_DMA2D_ConfigLayer+0x1aa>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	061b      	lsls	r3, r3, #24
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d120      	bne.n	80026a2 <HAL_DMA2D_ConfigLayer+0x1f2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	ea02 0103 	and.w	r1, r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	430a      	orrs	r2, r1
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b0a      	cmp	r3, #10
 8002688:	d003      	beq.n	8002692 <HAL_DMA2D_ConfigLayer+0x1e2>
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b09      	cmp	r3, #9
 8002690:	d127      	bne.n	80026e2 <HAL_DMA2D_ConfigLayer+0x232>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
 80026a0:	e01f      	b.n	80026e2 <HAL_DMA2D_ConfigLayer+0x232>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	ea02 0103 	and.w	r1, r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b0a      	cmp	r3, #10
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA2D_ConfigLayer+0x224>
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d106      	bne.n	80026e2 <HAL_DMA2D_ConfigLayer+0x232>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80026e0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	08026920 	.word	0x08026920
 8002700:	ff03000f 	.word	0xff03000f

08002704 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002704:	b480      	push	{r7}
 8002706:	b08b      	sub	sp, #44	; 0x2c
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	041a      	lsls	r2, r3, #16
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800273c:	d174      	bne.n	8002828 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002744:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800274c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002754:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d108      	bne.n	8002776 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	431a      	orrs	r2, r3
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	4313      	orrs	r3, r2
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	e053      	b.n	800281e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d106      	bne.n	800278c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4313      	orrs	r3, r2
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	e048      	b.n	800281e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d111      	bne.n	80027b8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	0cdb      	lsrs	r3, r3, #19
 8002798:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	0a9b      	lsrs	r3, r3, #10
 800279e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	08db      	lsrs	r3, r3, #3
 80027a4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	02db      	lsls	r3, r3, #11
 80027ae:	4313      	orrs	r3, r2
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	e032      	b.n	800281e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d117      	bne.n	80027f0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	0fdb      	lsrs	r3, r3, #31
 80027c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	0cdb      	lsrs	r3, r3, #19
 80027ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	0adb      	lsrs	r3, r3, #11
 80027d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	08db      	lsrs	r3, r3, #3
 80027d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	431a      	orrs	r2, r3
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	03db      	lsls	r3, r3, #15
 80027e6:	4313      	orrs	r3, r2
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	e016      	b.n	800281e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	0f1b      	lsrs	r3, r3, #28
 80027f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	0d1b      	lsrs	r3, r3, #20
 80027fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	0b1b      	lsrs	r3, r3, #12
 8002800:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	011a      	lsls	r2, r3, #4
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	431a      	orrs	r2, r3
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	031b      	lsls	r3, r3, #12
 8002816:	4313      	orrs	r3, r2
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002824:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002826:	e003      	b.n	8002830 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	60da      	str	r2, [r3, #12]
}
 8002830:	bf00      	nop
 8002832:	372c      	adds	r7, #44	; 0x2c
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a42      	ldr	r2, [pc, #264]	; (8002964 <HAL_GPIO_Init+0x128>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a41      	ldr	r2, [pc, #260]	; (8002968 <HAL_GPIO_Init+0x12c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d027      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a40      	ldr	r2, [pc, #256]	; (800296c <HAL_GPIO_Init+0x130>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d023      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a3f      	ldr	r2, [pc, #252]	; (8002970 <HAL_GPIO_Init+0x134>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01f      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a3e      	ldr	r2, [pc, #248]	; (8002974 <HAL_GPIO_Init+0x138>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01b      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a3d      	ldr	r2, [pc, #244]	; (8002978 <HAL_GPIO_Init+0x13c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d017      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a3c      	ldr	r2, [pc, #240]	; (800297c <HAL_GPIO_Init+0x140>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a3b      	ldr	r2, [pc, #236]	; (8002980 <HAL_GPIO_Init+0x144>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00f      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a3a      	ldr	r2, [pc, #232]	; (8002984 <HAL_GPIO_Init+0x148>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a39      	ldr	r2, [pc, #228]	; (8002988 <HAL_GPIO_Init+0x14c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a38      	ldr	r2, [pc, #224]	; (800298c <HAL_GPIO_Init+0x150>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x7a>
 80028ae:	21b1      	movs	r1, #177	; 0xb1
 80028b0:	4837      	ldr	r0, [pc, #220]	; (8002990 <HAL_GPIO_Init+0x154>)
 80028b2:	f01b feb1 	bl	801e618 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <HAL_GPIO_Init+0x8c>
 80028c0:	21b2      	movs	r1, #178	; 0xb2
 80028c2:	4833      	ldr	r0, [pc, #204]	; (8002990 <HAL_GPIO_Init+0x154>)
 80028c4:	f01b fea8 	bl	801e618 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d035      	beq.n	800293c <HAL_GPIO_Init+0x100>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d031      	beq.n	800293c <HAL_GPIO_Init+0x100>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b11      	cmp	r3, #17
 80028de:	d02d      	beq.n	800293c <HAL_GPIO_Init+0x100>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d029      	beq.n	800293c <HAL_GPIO_Init+0x100>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b12      	cmp	r3, #18
 80028ee:	d025      	beq.n	800293c <HAL_GPIO_Init+0x100>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_GPIO_Init+0x158>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d020      	beq.n	800293c <HAL_GPIO_Init+0x100>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4a26      	ldr	r2, [pc, #152]	; (8002998 <HAL_GPIO_Init+0x15c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d01b      	beq.n	800293c <HAL_GPIO_Init+0x100>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_GPIO_Init+0x160>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d016      	beq.n	800293c <HAL_GPIO_Init+0x100>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <HAL_GPIO_Init+0x164>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d011      	beq.n	800293c <HAL_GPIO_Init+0x100>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a21      	ldr	r2, [pc, #132]	; (80029a4 <HAL_GPIO_Init+0x168>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00c      	beq.n	800293c <HAL_GPIO_Init+0x100>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a20      	ldr	r2, [pc, #128]	; (80029a8 <HAL_GPIO_Init+0x16c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <HAL_GPIO_Init+0x100>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x100>
 8002934:	21b3      	movs	r1, #179	; 0xb3
 8002936:	4816      	ldr	r0, [pc, #88]	; (8002990 <HAL_GPIO_Init+0x154>)
 8002938:	f01b fe6e 	bl	801e618 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00b      	beq.n	800295c <HAL_GPIO_Init+0x120>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d007      	beq.n	800295c <HAL_GPIO_Init+0x120>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x120>
 8002954:	21b4      	movs	r1, #180	; 0xb4
 8002956:	480e      	ldr	r0, [pc, #56]	; (8002990 <HAL_GPIO_Init+0x154>)
 8002958:	f01b fe5e 	bl	801e618 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	e2d9      	b.n	8002f16 <HAL_GPIO_Init+0x6da>
 8002962:	bf00      	nop
 8002964:	40020000 	.word	0x40020000
 8002968:	40020400 	.word	0x40020400
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00
 8002974:	40021000 	.word	0x40021000
 8002978:	40021400 	.word	0x40021400
 800297c:	40021800 	.word	0x40021800
 8002980:	40021c00 	.word	0x40021c00
 8002984:	40022000 	.word	0x40022000
 8002988:	40022400 	.word	0x40022400
 800298c:	40022800 	.word	0x40022800
 8002990:	0802695c 	.word	0x0802695c
 8002994:	10110000 	.word	0x10110000
 8002998:	10210000 	.word	0x10210000
 800299c:	10310000 	.word	0x10310000
 80029a0:	10120000 	.word	0x10120000
 80029a4:	10220000 	.word	0x10220000
 80029a8:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f040 82a3 	bne.w	8002f10 <HAL_GPIO_Init+0x6d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d004      	beq.n	80029dc <HAL_GPIO_Init+0x1a0>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b12      	cmp	r3, #18
 80029d8:	f040 8134 	bne.w	8002c44 <HAL_GPIO_Init+0x408>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 810b 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	f000 8106 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8101 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80fc 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80f7 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f000 80f2 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	f000 80ed 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	f000 80e8 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	f000 80e3 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	f000 80de 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	f000 80d9 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	f000 80d4 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	f000 80cf 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	f000 80ca 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	f000 80c5 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	f000 80c0 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	f000 80bb 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	f000 80b6 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	f000 80b1 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	f000 80ac 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	f000 80a7 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	f000 80a2 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	f000 809d 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	f000 8098 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	f000 8093 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	f000 808e 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	f000 8089 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	f000 8084 	beq.w	8002bfc <HAL_GPIO_Init+0x3c0>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b07      	cmp	r3, #7
 8002afa:	d07f      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b07      	cmp	r3, #7
 8002b02:	d07b      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2b07      	cmp	r3, #7
 8002b0a:	d077      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b07      	cmp	r3, #7
 8002b12:	d073      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b07      	cmp	r3, #7
 8002b1a:	d06f      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b07      	cmp	r3, #7
 8002b22:	d06b      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	d067      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d063      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d05f      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d05b      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d057      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d053      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d04f      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d04b      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	d047      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d043      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b09      	cmp	r3, #9
 8002b7a:	d03f      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	d03b      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	d037      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	d033      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b09      	cmp	r3, #9
 8002b9a:	d02f      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b0a      	cmp	r3, #10
 8002ba2:	d02b      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b0a      	cmp	r3, #10
 8002baa:	d027      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b0a      	cmp	r3, #10
 8002bb2:	d023      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b0a      	cmp	r3, #10
 8002bba:	d01f      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b0b      	cmp	r3, #11
 8002bc2:	d01b      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d013      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	d00f      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b0f      	cmp	r3, #15
 8002be2:	d00b      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b0d      	cmp	r3, #13
 8002bea:	d007      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b0e      	cmp	r3, #14
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x3c0>
 8002bf4:	21c5      	movs	r1, #197	; 0xc5
 8002bf6:	4887      	ldr	r0, [pc, #540]	; (8002e14 <HAL_GPIO_Init+0x5d8>)
 8002bf8:	f01b fd0e 	bl	801e618 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d00b      	beq.n	8002c98 <HAL_GPIO_Init+0x45c>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d007      	beq.n	8002c98 <HAL_GPIO_Init+0x45c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c8c:	2b11      	cmp	r3, #17
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x45c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d144      	bne.n	8002d22 <HAL_GPIO_Init+0x4e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00f      	beq.n	8002cc0 <HAL_GPIO_Init+0x484>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_GPIO_Init+0x484>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d007      	beq.n	8002cc0 <HAL_GPIO_Init+0x484>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x484>
 8002cb8:	21d9      	movs	r1, #217	; 0xd9
 8002cba:	4856      	ldr	r0, [pc, #344]	; (8002e14 <HAL_GPIO_Init+0x5d8>)
 8002cbc:	f01b fcac 	bl	801e618 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 0201 	and.w	r2, r3, #1
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80d8 	beq.w	8002f10 <HAL_GPIO_Init+0x6d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_GPIO_Init+0x5dc>)
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	4a2c      	ldr	r2, [pc, #176]	; (8002e18 <HAL_GPIO_Init+0x5dc>)
 8002d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_GPIO_Init+0x5dc>)
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d78:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_GPIO_Init+0x5e0>)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <HAL_GPIO_Init+0x5e4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d051      	beq.n	8002e48 <HAL_GPIO_Init+0x60c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <HAL_GPIO_Init+0x5e8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d031      	beq.n	8002e10 <HAL_GPIO_Init+0x5d4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_GPIO_Init+0x5ec>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d02b      	beq.n	8002e0c <HAL_GPIO_Init+0x5d0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <HAL_GPIO_Init+0x5f0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d025      	beq.n	8002e08 <HAL_GPIO_Init+0x5cc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_GPIO_Init+0x5f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d01f      	beq.n	8002e04 <HAL_GPIO_Init+0x5c8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <HAL_GPIO_Init+0x5f8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d019      	beq.n	8002e00 <HAL_GPIO_Init+0x5c4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_GPIO_Init+0x5fc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <HAL_GPIO_Init+0x5c0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_GPIO_Init+0x600>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00d      	beq.n	8002df8 <HAL_GPIO_Init+0x5bc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <HAL_GPIO_Init+0x604>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d007      	beq.n	8002df4 <HAL_GPIO_Init+0x5b8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_GPIO_Init+0x608>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d101      	bne.n	8002df0 <HAL_GPIO_Init+0x5b4>
 8002dec:	2309      	movs	r3, #9
 8002dee:	e02c      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002df0:	230a      	movs	r3, #10
 8002df2:	e02a      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002df4:	2308      	movs	r3, #8
 8002df6:	e028      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002df8:	2307      	movs	r3, #7
 8002dfa:	e026      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002dfc:	2306      	movs	r3, #6
 8002dfe:	e024      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002e00:	2305      	movs	r3, #5
 8002e02:	e022      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002e04:	2304      	movs	r3, #4
 8002e06:	e020      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e01e      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e01c      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e01a      	b.n	8002e4a <HAL_GPIO_Init+0x60e>
 8002e14:	0802695c 	.word	0x0802695c
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40013800 	.word	0x40013800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40020c00 	.word	0x40020c00
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40021400 	.word	0x40021400
 8002e38:	40021800 	.word	0x40021800
 8002e3c:	40021c00 	.word	0x40021c00
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40022400 	.word	0x40022400
 8002e48:	2300      	movs	r3, #0
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	f002 0203 	and.w	r2, r2, #3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4093      	lsls	r3, r2
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e5a:	4933      	ldr	r1, [pc, #204]	; (8002f28 <HAL_GPIO_Init+0x6ec>)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e68:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_GPIO_Init+0x6f0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x650>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e8c:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <HAL_GPIO_Init+0x6f0>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_GPIO_Init+0x6f0>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x67a>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_GPIO_Init+0x6f0>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_GPIO_Init+0x6f0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x6a4>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee0:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <HAL_GPIO_Init+0x6f0>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_GPIO_Init+0x6f0>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x6ce>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f0a:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <HAL_GPIO_Init+0x6f0>)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b0f      	cmp	r3, #15
 8002f1a:	f67f ad47 	bls.w	80029ac <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40013c00 	.word	0x40013c00

08002f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <HAL_GPIO_ReadPin+0x1c>
 8002f42:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002f46:	4809      	ldr	r0, [pc, #36]	; (8002f6c <HAL_GPIO_ReadPin+0x3c>)
 8002f48:	f01b fb66 	bl	801e618 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e001      	b.n	8002f62 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	0802695c 	.word	0x0802695c

08002f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <HAL_GPIO_WritePin+0x20>
 8002f86:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002f8a:	480e      	ldr	r0, [pc, #56]	; (8002fc4 <HAL_GPIO_WritePin+0x54>)
 8002f8c:	f01b fb44 	bl	801e618 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002f90:	787b      	ldrb	r3, [r7, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_GPIO_WritePin+0x36>
 8002f96:	787b      	ldrb	r3, [r7, #1]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d004      	beq.n	8002fa6 <HAL_GPIO_WritePin+0x36>
 8002f9c:	f240 119b 	movw	r1, #411	; 0x19b
 8002fa0:	4808      	ldr	r0, [pc, #32]	; (8002fc4 <HAL_GPIO_WritePin+0x54>)
 8002fa2:	f01b fb39 	bl	801e618 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002fa6:	787b      	ldrb	r3, [r7, #1]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fac:	887a      	ldrh	r2, [r7, #2]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fb2:	e003      	b.n	8002fbc <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	041a      	lsls	r2, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	619a      	str	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	0802695c 	.word	0x0802695c

08002fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f806 	bl	8002ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40013c00 	.word	0x40013c00

08002ff8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003012:	b08d      	sub	sp, #52	; 0x34
 8003014:	af0a      	add	r7, sp, #40	; 0x28
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e056      	b.n	80030d0 <HAL_HCD_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800302a:	d008      	beq.n	800303e <HAL_HCD_Init+0x2e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <HAL_HCD_Init+0xc8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <HAL_HCD_Init+0x2e>
 8003036:	217c      	movs	r1, #124	; 0x7c
 8003038:	4828      	ldr	r0, [pc, #160]	; (80030dc <HAL_HCD_Init+0xcc>)
 800303a:	f01b faed 	bl	801e618 <assert_failed>

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_HCD_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f020 fb36 	bl	80236c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2203      	movs	r2, #3
 800305c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f007 ffb2 	bl	800afce <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	687e      	ldr	r6, [r7, #4]
 8003072:	466d      	mov	r5, sp
 8003074:	f106 0410 	add.w	r4, r6, #16
 8003078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800307a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800307c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800307e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003080:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003084:	e885 0003 	stmia.w	r5, {r0, r1}
 8003088:	1d33      	adds	r3, r6, #4
 800308a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800308c:	6838      	ldr	r0, [r7, #0]
 800308e:	f007 ff35 	bl	800aefc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2101      	movs	r1, #1
 8003098:	4618      	mov	r0, r3
 800309a:	f007 ffa9 	bl	800aff0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	687e      	ldr	r6, [r7, #4]
 80030a6:	466d      	mov	r5, sp
 80030a8:	f106 0410 	add.w	r4, r6, #16
 80030ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80030bc:	1d33      	adds	r3, r6, #4
 80030be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030c0:	6838      	ldr	r0, [r7, #0]
 80030c2:	f008 f8bb 	bl	800b23c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030d8:	40040000 	.word	0x40040000
 80030dc:	08026998 	.word	0x08026998

080030e0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af04      	add	r7, sp, #16
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	70fb      	strb	r3, [r7, #3]
 80030f2:	460b      	mov	r3, r1
 80030f4:	70bb      	strb	r3, [r7, #2]
 80030f6:	4613      	mov	r3, r2
 80030f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_HCD_HC_Init+0x28>
 8003104:	2302      	movs	r3, #2
 8003106:	e07f      	b.n	8003208 <HAL_HCD_HC_Init+0x128>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	440b      	add	r3, r1
 800311e:	333d      	adds	r3, #61	; 0x3d
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	3338      	adds	r3, #56	; 0x38
 8003134:	787a      	ldrb	r2, [r7, #1]
 8003136:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	3340      	adds	r3, #64	; 0x40
 8003148:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800314a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3339      	adds	r3, #57	; 0x39
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	333f      	adds	r3, #63	; 0x3f
 8003170:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003174:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	78bb      	ldrb	r3, [r7, #2]
 800317a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800317e:	b2d8      	uxtb	r0, r3
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	333a      	adds	r3, #58	; 0x3a
 800318e:	4602      	mov	r2, r0
 8003190:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003192:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003196:	2b00      	cmp	r3, #0
 8003198:	da0a      	bge.n	80031b0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	333b      	adds	r3, #59	; 0x3b
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e009      	b.n	80031c4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	333b      	adds	r3, #59	; 0x3b
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	333c      	adds	r3, #60	; 0x3c
 80031d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80031d8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	787c      	ldrb	r4, [r7, #1]
 80031e0:	78ba      	ldrb	r2, [r7, #2]
 80031e2:	78f9      	ldrb	r1, [r7, #3]
 80031e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031e6:	9302      	str	r3, [sp, #8]
 80031e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	4623      	mov	r3, r4
 80031f6:	f008 f997 	bl	800b528 <USB_HC_Init>
 80031fa:	4603      	mov	r3, r0
 80031fc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}

08003210 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_HCD_HC_Halt+0x1e>
 800322a:	2302      	movs	r3, #2
 800322c:	e00f      	b.n	800324e <HAL_HCD_HC_Halt+0x3e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f008 fbcf 	bl	800b9e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	4608      	mov	r0, r1
 8003262:	4611      	mov	r1, r2
 8003264:	461a      	mov	r2, r3
 8003266:	4603      	mov	r3, r0
 8003268:	70fb      	strb	r3, [r7, #3]
 800326a:	460b      	mov	r3, r1
 800326c:	70bb      	strb	r3, [r7, #2]
 800326e:	4613      	mov	r3, r2
 8003270:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	333b      	adds	r3, #59	; 0x3b
 8003282:	78ba      	ldrb	r2, [r7, #2]
 8003284:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	333f      	adds	r3, #63	; 0x3f
 8003296:	787a      	ldrb	r2, [r7, #1]
 8003298:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800329a:	7c3b      	ldrb	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	3342      	adds	r3, #66	; 0x42
 80032b0:	2203      	movs	r2, #3
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e009      	b.n	80032ca <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	3342      	adds	r3, #66	; 0x42
 80032c6:	2202      	movs	r2, #2
 80032c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80032ca:	787b      	ldrb	r3, [r7, #1]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	f200 80d6 	bhi.w	800347e <HAL_HCD_HC_SubmitRequest+0x226>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_HCD_HC_SubmitRequest+0x80>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032e9 	.word	0x080032e9
 80032dc:	08003469 	.word	0x08003469
 80032e0:	08003355 	.word	0x08003355
 80032e4:	080033df 	.word	0x080033df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80032e8:	7c3b      	ldrb	r3, [r7, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	f040 80c9 	bne.w	8003482 <HAL_HCD_HC_SubmitRequest+0x22a>
 80032f0:	78bb      	ldrb	r3, [r7, #2]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 80c5 	bne.w	8003482 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80032f8:	8b3b      	ldrh	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3351      	adds	r3, #81	; 0x51
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	3351      	adds	r3, #81	; 0x51
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	3342      	adds	r3, #66	; 0x42
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800333c:	e0a1      	b.n	8003482 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	3342      	adds	r3, #66	; 0x42
 800334e:	2202      	movs	r2, #2
 8003350:	701a      	strb	r2, [r3, #0]
      break;
 8003352:	e096      	b.n	8003482 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003354:	78bb      	ldrb	r3, [r7, #2]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d120      	bne.n	800339c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	3351      	adds	r3, #81	; 0x51
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	3342      	adds	r3, #66	; 0x42
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003384:	e07e      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	3342      	adds	r3, #66	; 0x42
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
      break;
 800339a:	e073      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	3350      	adds	r3, #80	; 0x50
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	3342      	adds	r3, #66	; 0x42
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
      break;
 80033c6:	e05d      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	3342      	adds	r3, #66	; 0x42
 80033d8:	2202      	movs	r2, #2
 80033da:	701a      	strb	r2, [r3, #0]
      break;
 80033dc:	e052      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80033de:	78bb      	ldrb	r3, [r7, #2]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d120      	bne.n	8003426 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	3351      	adds	r3, #81	; 0x51
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	3342      	adds	r3, #66	; 0x42
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800340e:	e039      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	3342      	adds	r3, #66	; 0x42
 8003420:	2202      	movs	r2, #2
 8003422:	701a      	strb	r2, [r3, #0]
      break;
 8003424:	e02e      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	440b      	add	r3, r1
 8003434:	3350      	adds	r3, #80	; 0x50
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	3342      	adds	r3, #66	; 0x42
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
      break;
 8003450:	e018      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	3342      	adds	r3, #66	; 0x42
 8003462:	2202      	movs	r2, #2
 8003464:	701a      	strb	r2, [r3, #0]
      break;
 8003466:	e00d      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	3342      	adds	r3, #66	; 0x42
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
      break;
 800347c:	e002      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8003482:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	3344      	adds	r3, #68	; 0x44
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	8b39      	ldrh	r1, [r7, #24]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4403      	add	r3, r0
 80034a8:	3348      	adds	r3, #72	; 0x48
 80034aa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	335c      	adds	r3, #92	; 0x5c
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	334c      	adds	r3, #76	; 0x4c
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	440b      	add	r3, r1
 80034e2:	3339      	adds	r3, #57	; 0x39
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	440b      	add	r3, r1
 80034f6:	335d      	adds	r3, #93	; 0x5d
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	3338      	adds	r3, #56	; 0x38
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	18d1      	adds	r1, r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	f008 f910 	bl	800b73c <USB_HC_StartXfer>
 800351c:	4603      	mov	r3, r0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop

08003528 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f007 fe39 	bl	800b1b6 <USB_GetMode>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	f040 80f1 	bne.w	800372e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f007 fe1d 	bl	800b190 <USB_ReadInterrupts>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80e7 	beq.w	800372c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f007 fe14 	bl	800b190 <USB_ReadInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003572:	d104      	bne.n	800357e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800357c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f007 fe04 	bl	800b190 <USB_ReadInterrupts>
 8003588:	4603      	mov	r3, r0
 800358a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003592:	d104      	bne.n	800359e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800359c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f007 fdf4 	bl	800b190 <USB_ReadInterrupts>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b2:	d104      	bne.n	80035be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f007 fde4 	bl	800b190 <USB_ReadInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d103      	bne.n	80035da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2202      	movs	r2, #2
 80035d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f007 fdd6 	bl	800b190 <USB_ReadInterrupts>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ee:	d117      	bne.n	8003620 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80035fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003602:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f020 f9b5 	bl	8023974 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2101      	movs	r1, #1
 8003610:	4618      	mov	r0, r3
 8003612:	f007 fec3 	bl	800b39c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800361e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f007 fdb3 	bl	800b190 <USB_ReadInterrupts>
 800362a:	4603      	mov	r3, r0
 800362c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003634:	d102      	bne.n	800363c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f001 f8ca 	bl	80047d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f007 fda5 	bl	800b190 <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d106      	bne.n	800365e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f020 f973 	bl	802393c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2208      	movs	r2, #8
 800365c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f007 fd94 	bl	800b190 <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003672:	d138      	bne.n	80036e6 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f008 f9a1 	bl	800b9c0 <USB_HC_ReadInterrupt>
 800367e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e025      	b.n	80036d2 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d018      	beq.n	80036cc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	d106      	bne.n	80036c0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f8cf 	bl	800385c <HCD_HC_IN_IRQHandler>
 80036be:	e005      	b.n	80036cc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fc5f 	bl	8003f8a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3301      	adds	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d3d4      	bcc.n	8003686 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f007 fd50 	bl	800b190 <USB_ReadInterrupts>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d101      	bne.n	80036fe <HAL_HCD_IRQHandler+0x1d6>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_HCD_IRQHandler+0x1d8>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d014      	beq.n	800372e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0210 	bic.w	r2, r2, #16
 8003712:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 ffad 	bl	8004674 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0210 	orr.w	r2, r2, #16
 8003728:	619a      	str	r2, [r3, #24]
 800372a:	e000      	b.n	800372e <HAL_HCD_IRQHandler+0x206>
      return;
 800372c:	bf00      	nop
    }
  }
}
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_HCD_Start+0x16>
 8003746:	2302      	movs	r3, #2
 8003748:	e013      	b.n	8003772 <HAL_HCD_Start+0x3e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f007 fc28 	bl	800afac <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	4618      	mov	r0, r3
 8003764:	f007 fe7e 	bl	800b464 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_HCD_Stop+0x16>
 800378c:	2302      	movs	r3, #2
 800378e:	e00d      	b.n	80037ac <HAL_HCD_Stop+0x32>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f008 fa5b 	bl	800bc58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f007 fe25 	bl	800b410 <USB_ResetPort>
 80037c6:	4603      	mov	r3, r0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	440b      	add	r3, r1
 80037ea:	335c      	adds	r3, #92	; 0x5c
 80037ec:	781b      	ldrb	r3, [r3, #0]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	334c      	adds	r3, #76	; 0x4c
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f007 fe67 	bl	800b504 <USB_GetCurrentFrame>
 8003836:	4603      	mov	r3, r0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f007 fe42 	bl	800b4d6 <USB_GetHostSpeed>
 8003852:	4603      	mov	r3, r0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b04      	cmp	r3, #4
 800388a:	d119      	bne.n	80038c0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003898:	461a      	mov	r2, r3
 800389a:	2304      	movs	r3, #4
 800389c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	60d3      	str	r3, [r2, #12]
 80038be:	e095      	b.n	80039ec <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d109      	bne.n	80038ea <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	461a      	mov	r2, r3
 80038e4:	2320      	movs	r3, #32
 80038e6:	6093      	str	r3, [r2, #8]
 80038e8:	e080      	b.n	80039ec <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d134      	bne.n	800396a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	440a      	add	r2, r1
 8003916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	335d      	adds	r3, #93	; 0x5d
 8003930:	2205      	movs	r2, #5
 8003932:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	461a      	mov	r2, r3
 8003942:	2310      	movs	r3, #16
 8003944:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003952:	461a      	mov	r2, r3
 8003954:	2308      	movs	r3, #8
 8003956:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f008 f83d 	bl	800b9e2 <USB_HC_Halt>
 8003968:	e040      	b.n	80039ec <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d134      	bne.n	80039ec <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	0151      	lsls	r1, r2, #5
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	440a      	add	r2, r1
 8003998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f008 f818 	bl	800b9e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039be:	461a      	mov	r2, r3
 80039c0:	2310      	movs	r3, #16
 80039c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	335d      	adds	r3, #93	; 0x5d
 80039d4:	2208      	movs	r2, #8
 80039d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e4:	461a      	mov	r2, r3
 80039e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ea:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a02:	d122      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f007 ffd7 	bl	800b9e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a40:	461a      	mov	r2, r3
 8003a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a46:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a48:	e29b      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	f040 80c1 	bne.w	8003be4 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01b      	beq.n	8003aa2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	3348      	adds	r3, #72	; 0x48
 8003a7a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	0159      	lsls	r1, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	440b      	add	r3, r1
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003a8e:	1ad1      	subs	r1, r2, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4403      	add	r3, r0
 8003a9e:	334c      	adds	r3, #76	; 0x4c
 8003aa0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	440b      	add	r3, r1
 8003ab0:	335d      	adds	r3, #93	; 0x5d
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3358      	adds	r3, #88	; 0x58
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2301      	movs	r3, #1
 8003ada:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	333f      	adds	r3, #63	; 0x3f
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	440b      	add	r3, r1
 8003b00:	333f      	adds	r3, #63	; 0x3f
 8003b02:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d121      	bne.n	8003b4c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	0151      	lsls	r1, r2, #5
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	440a      	add	r2, r1
 8003b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f007 ff55 	bl	800b9e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	461a      	mov	r2, r3
 8003b46:	2310      	movs	r3, #16
 8003b48:	6093      	str	r3, [r2, #8]
 8003b4a:	e034      	b.n	8003bb6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	440b      	add	r3, r1
 8003b5a:	333f      	adds	r3, #63	; 0x3f
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d129      	bne.n	8003bb6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b80:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	335c      	adds	r3, #92	; 0x5c
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	b2d8      	uxtb	r0, r3
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	335c      	adds	r3, #92	; 0x5c
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	4601      	mov	r1, r0
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f01f feed 	bl	8023990 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3350      	adds	r3, #80	; 0x50
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	f083 0301 	eor.w	r3, r3, #1
 8003bcc:	b2d8      	uxtb	r0, r3
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	3350      	adds	r3, #80	; 0x50
 8003bde:	4602      	mov	r2, r0
 8003be0:	701a      	strb	r2, [r3, #0]
}
 8003be2:	e1ce      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	f040 80f1 	bne.w	8003dde <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	0151      	lsls	r1, r2, #5
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	440a      	add	r2, r1
 8003c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c16:	f023 0302 	bic.w	r3, r3, #2
 8003c1a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	440b      	add	r3, r1
 8003c2a:	335d      	adds	r3, #93	; 0x5d
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d10a      	bne.n	8003c48 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	440b      	add	r3, r1
 8003c40:	335c      	adds	r3, #92	; 0x5c
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	e0b0      	b.n	8003daa <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	335d      	adds	r3, #93	; 0x5d
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d10a      	bne.n	8003c74 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	335c      	adds	r3, #92	; 0x5c
 8003c6e:	2205      	movs	r2, #5
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e09a      	b.n	8003daa <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	335d      	adds	r3, #93	; 0x5d
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b06      	cmp	r3, #6
 8003c88:	d00a      	beq.n	8003ca0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	335d      	adds	r3, #93	; 0x5d
 8003c9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d156      	bne.n	8003d4e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	3358      	adds	r3, #88	; 0x58
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3358      	adds	r3, #88	; 0x58
 8003cc4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3358      	adds	r3, #88	; 0x58
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d914      	bls.n	8003d06 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	440b      	add	r3, r1
 8003cea:	3358      	adds	r3, #88	; 0x58
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	335c      	adds	r3, #92	; 0x5c
 8003d00:	2204      	movs	r2, #4
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e009      	b.n	8003d1a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	440b      	add	r3, r1
 8003d14:	335c      	adds	r3, #92	; 0x5c
 8003d16:	2202      	movs	r2, #2
 8003d18:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d30:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d38:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e02d      	b.n	8003daa <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	440b      	add	r3, r1
 8003d5c:	335d      	adds	r3, #93	; 0x5d
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d122      	bne.n	8003daa <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	440b      	add	r3, r1
 8003d72:	335c      	adds	r3, #92	; 0x5c
 8003d74:	2202      	movs	r2, #2
 8003d76:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d8e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d96:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db6:	461a      	mov	r2, r3
 8003db8:	2302      	movs	r3, #2
 8003dba:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	b2d8      	uxtb	r0, r3
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	440b      	add	r3, r1
 8003dce:	335c      	adds	r3, #92	; 0x5c
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4601      	mov	r1, r0
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f01f fdda 	bl	8023990 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ddc:	e0d1      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d13e      	bne.n	8003e72 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e0e:	f043 0302 	orr.w	r3, r3, #2
 8003e12:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	3358      	adds	r3, #88	; 0x58
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	1c59      	adds	r1, r3, #1
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4403      	add	r3, r0
 8003e36:	3358      	adds	r3, #88	; 0x58
 8003e38:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	335d      	adds	r3, #93	; 0x5d
 8003e4a:	2206      	movs	r2, #6
 8003e4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f007 fdc2 	bl	800b9e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	6093      	str	r3, [r2, #8]
}
 8003e70:	e087      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d17c      	bne.n	8003f82 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	440b      	add	r3, r1
 8003e96:	333f      	adds	r3, #63	; 0x3f
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d122      	bne.n	8003ee4 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	3358      	adds	r3, #88	; 0x58
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f007 fd80 	bl	800b9e2 <USB_HC_Halt>
 8003ee2:	e045      	b.n	8003f70 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	333f      	adds	r3, #63	; 0x3f
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	440b      	add	r3, r1
 8003f08:	333f      	adds	r3, #63	; 0x3f
 8003f0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d12f      	bne.n	8003f70 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3358      	adds	r3, #88	; 0x58
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d121      	bne.n	8003f70 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	440b      	add	r3, r1
 8003f3a:	335d      	adds	r3, #93	; 0x5d
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f5a:	f043 0302 	orr.w	r3, r3, #2
 8003f5e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	4611      	mov	r1, r2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f007 fd39 	bl	800b9e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2310      	movs	r3, #16
 8003f80:	6093      	str	r3, [r2, #8]
}
 8003f82:	bf00      	nop
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d119      	bne.n	8003fee <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2304      	movs	r3, #4
 8003fca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	0151      	lsls	r1, r2, #5
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	440a      	add	r2, r1
 8003fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe6:	f043 0302 	orr.w	r3, r3, #2
 8003fea:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003fec:	e33e      	b.n	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b20      	cmp	r3, #32
 8004002:	d141      	bne.n	8004088 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	461a      	mov	r2, r3
 8004012:	2320      	movs	r3, #32
 8004014:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	440b      	add	r3, r1
 8004024:	333d      	adds	r3, #61	; 0x3d
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	f040 831f 	bne.w	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	333d      	adds	r3, #61	; 0x3d
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	335c      	adds	r3, #92	; 0x5c
 8004052:	2202      	movs	r2, #2
 8004054:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	0151      	lsls	r1, r2, #5
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	440a      	add	r2, r1
 800406c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004070:	f043 0302 	orr.w	r3, r3, #2
 8004074:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f007 fcae 	bl	800b9e2 <USB_HC_Halt>
}
 8004086:	e2f1      	b.n	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d13f      	bne.n	800411e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	440b      	add	r3, r1
 80040ac:	335d      	adds	r3, #93	; 0x5d
 80040ae:	2204      	movs	r2, #4
 80040b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	333d      	adds	r3, #61	; 0x3d
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	3358      	adds	r3, #88	; 0x58
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	0151      	lsls	r1, r2, #5
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	440a      	add	r2, r1
 80040f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f007 fc6c 	bl	800b9e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004116:	461a      	mov	r2, r3
 8004118:	2340      	movs	r3, #64	; 0x40
 800411a:	6093      	str	r3, [r2, #8]
}
 800411c:	e2a6      	b.n	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004134:	d122      	bne.n	800417c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	440a      	add	r2, r1
 800414c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f007 fc3e 	bl	800b9e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	461a      	mov	r2, r3
 8004174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004178:	6093      	str	r3, [r2, #8]
}
 800417a:	e277      	b.n	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d135      	bne.n	80041fe <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	3358      	adds	r3, #88	; 0x58
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041c0:	f043 0302 	orr.w	r3, r3, #2
 80041c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f007 fc06 	bl	800b9e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	461a      	mov	r2, r3
 80041e4:	2301      	movs	r3, #1
 80041e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	440b      	add	r3, r1
 80041f6:	335d      	adds	r3, #93	; 0x5d
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
}
 80041fc:	e236      	b.n	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d12b      	bne.n	800426c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004220:	461a      	mov	r2, r3
 8004222:	2308      	movs	r3, #8
 8004224:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4413      	add	r3, r2
 800422e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	440a      	add	r2, r1
 800423c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f007 fbc6 	bl	800b9e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	440b      	add	r3, r1
 8004264:	335d      	adds	r3, #93	; 0x5d
 8004266:	2205      	movs	r2, #5
 8004268:	701a      	strb	r2, [r3, #0]
}
 800426a:	e1ff      	b.n	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b10      	cmp	r3, #16
 8004280:	d155      	bne.n	800432e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	440b      	add	r3, r1
 8004290:	3358      	adds	r3, #88	; 0x58
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	440b      	add	r3, r1
 80042a4:	335d      	adds	r3, #93	; 0x5d
 80042a6:	2203      	movs	r2, #3
 80042a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	440b      	add	r3, r1
 80042b8:	333d      	adds	r3, #61	; 0x3d
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d114      	bne.n	80042ea <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	333c      	adds	r3, #60	; 0x3c
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	440b      	add	r3, r1
 80042e4:	333d      	adds	r3, #61	; 0x3d
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	0151      	lsls	r1, r2, #5
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	440a      	add	r2, r1
 8004300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f007 fb64 	bl	800b9e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	461a      	mov	r2, r3
 8004328:	2310      	movs	r3, #16
 800432a:	6093      	str	r3, [r2, #8]
}
 800432c:	e19e      	b.n	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b80      	cmp	r3, #128	; 0x80
 8004342:	d12b      	bne.n	800439c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4413      	add	r3, r2
 800434c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	440a      	add	r2, r1
 800435a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800435e:	f043 0302 	orr.w	r3, r3, #2
 8004362:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f007 fb37 	bl	800b9e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	335d      	adds	r3, #93	; 0x5d
 8004384:	2206      	movs	r2, #6
 8004386:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	461a      	mov	r2, r3
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	6093      	str	r3, [r2, #8]
}
 800439a:	e167      	b.n	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b2:	d135      	bne.n	8004420 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ce:	f043 0302 	orr.w	r3, r3, #2
 80043d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f007 faff 	bl	800b9e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f0:	461a      	mov	r2, r3
 80043f2:	2310      	movs	r3, #16
 80043f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004402:	461a      	mov	r2, r3
 8004404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004408:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	335d      	adds	r3, #93	; 0x5d
 800441a:	2208      	movs	r2, #8
 800441c:	701a      	strb	r2, [r3, #0]
}
 800441e:	e125      	b.n	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4413      	add	r3, r2
 8004428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	f040 811a 	bne.w	800466c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	440a      	add	r2, r1
 800444e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004452:	f023 0302 	bic.w	r3, r3, #2
 8004456:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	440b      	add	r3, r1
 8004466:	335d      	adds	r3, #93	; 0x5d
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d137      	bne.n	80044de <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	440b      	add	r3, r1
 800447c:	335c      	adds	r3, #92	; 0x5c
 800447e:	2201      	movs	r2, #1
 8004480:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	333f      	adds	r3, #63	; 0x3f
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d00b      	beq.n	80044b0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	333f      	adds	r3, #63	; 0x3f
 80044a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	f040 80c5 	bne.w	800463a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	440b      	add	r3, r1
 80044be:	3351      	adds	r3, #81	; 0x51
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	f083 0301 	eor.w	r3, r3, #1
 80044c6:	b2d8      	uxtb	r0, r3
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	440b      	add	r3, r1
 80044d6:	3351      	adds	r3, #81	; 0x51
 80044d8:	4602      	mov	r2, r0
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e0ad      	b.n	800463a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	440b      	add	r3, r1
 80044ec:	335d      	adds	r3, #93	; 0x5d
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d10a      	bne.n	800450a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	440b      	add	r3, r1
 8004502:	335c      	adds	r3, #92	; 0x5c
 8004504:	2202      	movs	r2, #2
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e097      	b.n	800463a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	440b      	add	r3, r1
 8004518:	335d      	adds	r3, #93	; 0x5d
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d10a      	bne.n	8004536 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	440b      	add	r3, r1
 800452e:	335c      	adds	r3, #92	; 0x5c
 8004530:	2202      	movs	r2, #2
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e081      	b.n	800463a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	335d      	adds	r3, #93	; 0x5d
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b05      	cmp	r3, #5
 800454a:	d10a      	bne.n	8004562 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	440b      	add	r3, r1
 800455a:	335c      	adds	r3, #92	; 0x5c
 800455c:	2205      	movs	r2, #5
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e06b      	b.n	800463a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	440b      	add	r3, r1
 8004570:	335d      	adds	r3, #93	; 0x5d
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b06      	cmp	r3, #6
 8004576:	d00a      	beq.n	800458e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	440b      	add	r3, r1
 8004586:	335d      	adds	r3, #93	; 0x5d
 8004588:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800458a:	2b08      	cmp	r3, #8
 800458c:	d155      	bne.n	800463a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	440b      	add	r3, r1
 800459c:	3358      	adds	r3, #88	; 0x58
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	1c59      	adds	r1, r3, #1
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4403      	add	r3, r0
 80045b0:	3358      	adds	r3, #88	; 0x58
 80045b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	440b      	add	r3, r1
 80045c2:	3358      	adds	r3, #88	; 0x58
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d914      	bls.n	80045f4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	440b      	add	r3, r1
 80045d8:	3358      	adds	r3, #88	; 0x58
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	440b      	add	r3, r1
 80045ec:	335c      	adds	r3, #92	; 0x5c
 80045ee:	2204      	movs	r2, #4
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e009      	b.n	8004608 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	440b      	add	r3, r1
 8004602:	335c      	adds	r3, #92	; 0x5c
 8004604:	2202      	movs	r2, #2
 8004606:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800461e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004626:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	461a      	mov	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	461a      	mov	r2, r3
 8004648:	2302      	movs	r3, #2
 800464a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	b2d8      	uxtb	r0, r3
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	335c      	adds	r3, #92	; 0x5c
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4601      	mov	r1, r0
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f01f f992 	bl	8023990 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	0c5b      	lsrs	r3, r3, #17
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046a8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d004      	beq.n	80046ba <HCD_RXQLVL_IRQHandler+0x46>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	f000 8082 	beq.w	80047bc <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046b8:	e083      	b.n	80047c2 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d07f      	beq.n	80047c0 <HCD_RXQLVL_IRQHandler+0x14c>
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	440b      	add	r3, r1
 80046ce:	3344      	adds	r3, #68	; 0x44
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d074      	beq.n	80047c0 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	440b      	add	r3, r1
 80046e8:	3344      	adds	r3, #68	; 0x44
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	b292      	uxth	r2, r2
 80046f0:	4619      	mov	r1, r3
 80046f2:	f006 fd24 	bl	800b13e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	440b      	add	r3, r1
 8004704:	3344      	adds	r3, #68	; 0x44
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	18d1      	adds	r1, r2, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4403      	add	r3, r0
 800471a:	3344      	adds	r3, #68	; 0x44
 800471c:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	440b      	add	r3, r1
 800472c:	334c      	adds	r3, #76	; 0x4c
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	18d1      	adds	r1, r2, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4403      	add	r3, r0
 8004742:	334c      	adds	r3, #76	; 0x4c
 8004744:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	4413      	add	r3, r2
 800474e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HCD_RXQLVL_IRQHandler+0x158>)
 8004756:	4013      	ands	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d031      	beq.n	80047c0 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	4413      	add	r3, r2
 8004764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004772:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800477a:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004788:	461a      	mov	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	3350      	adds	r3, #80	; 0x50
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f083 0301 	eor.w	r3, r3, #1
 80047a4:	b2d8      	uxtb	r0, r3
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	440b      	add	r3, r1
 80047b4:	3350      	adds	r3, #80	; 0x50
 80047b6:	4602      	mov	r2, r0
 80047b8:	701a      	strb	r2, [r3, #0]
      break;
 80047ba:	e001      	b.n	80047c0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80047bc:	bf00      	nop
 80047be:	e000      	b.n	80047c2 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80047c0:	bf00      	nop
  }
}
 80047c2:	bf00      	nop
 80047c4:	3728      	adds	r7, #40	; 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	1ff80000 	.word	0x1ff80000

080047d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d10b      	bne.n	8004820 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d102      	bne.n	8004818 <HCD_Port_IRQHandler+0x48>
      //USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f01f f8a0 	bl	8023958 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f043 0302 	orr.w	r3, r3, #2
 800481e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b08      	cmp	r3, #8
 8004828:	d147      	bne.n	80048ba <HCD_Port_IRQHandler+0xea>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f043 0308 	orr.w	r3, r3, #8
 8004830:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d129      	bne.n	8004890 <HCD_Port_IRQHandler+0xc0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d113      	bne.n	800486c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800484a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800484e:	d106      	bne.n	800485e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2102      	movs	r1, #2
 8004856:	4618      	mov	r0, r3
 8004858:	f006 fda0 	bl	800b39c <USB_InitFSLSPClkSel>
 800485c:	e011      	b.n	8004882 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2101      	movs	r1, #1
 8004864:	4618      	mov	r0, r3
 8004866:	f006 fd99 	bl	800b39c <USB_InitFSLSPClkSel>
 800486a:	e00a      	b.n	8004882 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d106      	bne.n	8004882 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800487a:	461a      	mov	r2, r3
 800487c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004880:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f01f f892 	bl	80239ac <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f01f f865 	bl	8023958 <HAL_HCD_Connect_Callback>
 800488e:	e014      	b.n	80048ba <HCD_Port_IRQHandler+0xea>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f01f f899 	bl	80239c8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048a8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699a      	ldr	r2, [r3, #24]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80048b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d103      	bne.n	80048cc <HCD_Port_IRQHandler+0xfc>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f043 0320 	orr.w	r3, r3, #32
 80048ca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048d2:	461a      	mov	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6013      	str	r3, [r2, #0]
}
 80048d8:	bf00      	nop
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e107      	b.n	8004b02 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a85      	ldr	r2, [pc, #532]	; (8004b0c <HAL_I2C_Init+0x22c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d013      	beq.n	8004924 <HAL_I2C_Init+0x44>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a83      	ldr	r2, [pc, #524]	; (8004b10 <HAL_I2C_Init+0x230>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00e      	beq.n	8004924 <HAL_I2C_Init+0x44>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a82      	ldr	r2, [pc, #520]	; (8004b14 <HAL_I2C_Init+0x234>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_I2C_Init+0x44>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a80      	ldr	r2, [pc, #512]	; (8004b18 <HAL_I2C_Init+0x238>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_I2C_Init+0x44>
 800491a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800491e:	487f      	ldr	r0, [pc, #508]	; (8004b1c <HAL_I2C_Init+0x23c>)
 8004920:	f019 fe7a 	bl	801e618 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492c:	d304      	bcc.n	8004938 <HAL_I2C_Init+0x58>
 800492e:	f240 11df 	movw	r1, #479	; 0x1df
 8004932:	487a      	ldr	r0, [pc, #488]	; (8004b1c <HAL_I2C_Init+0x23c>)
 8004934:	f019 fe70 	bl	801e618 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d008      	beq.n	8004952 <HAL_I2C_Init+0x72>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d004      	beq.n	8004952 <HAL_I2C_Init+0x72>
 8004948:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800494c:	4873      	ldr	r0, [pc, #460]	; (8004b1c <HAL_I2C_Init+0x23c>)
 800494e:	f019 fe63 	bl	801e618 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_I2C_Init+0x8e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004962:	d004      	beq.n	800496e <HAL_I2C_Init+0x8e>
 8004964:	f240 11e1 	movw	r1, #481	; 0x1e1
 8004968:	486c      	ldr	r0, [pc, #432]	; (8004b1c <HAL_I2C_Init+0x23c>)
 800496a:	f019 fe55 	bl	801e618 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	2bff      	cmp	r3, #255	; 0xff
 8004974:	d904      	bls.n	8004980 <HAL_I2C_Init+0xa0>
 8004976:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800497a:	4868      	ldr	r0, [pc, #416]	; (8004b1c <HAL_I2C_Init+0x23c>)
 800497c:	f019 fe4c 	bl	801e618 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d020      	beq.n	80049ca <HAL_I2C_Init+0xea>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d01c      	beq.n	80049ca <HAL_I2C_Init+0xea>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d018      	beq.n	80049ca <HAL_I2C_Init+0xea>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d014      	beq.n	80049ca <HAL_I2C_Init+0xea>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d010      	beq.n	80049ca <HAL_I2C_Init+0xea>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b05      	cmp	r3, #5
 80049ae:	d00c      	beq.n	80049ca <HAL_I2C_Init+0xea>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b06      	cmp	r3, #6
 80049b6:	d008      	beq.n	80049ca <HAL_I2C_Init+0xea>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b07      	cmp	r3, #7
 80049be:	d004      	beq.n	80049ca <HAL_I2C_Init+0xea>
 80049c0:	f240 11e3 	movw	r1, #483	; 0x1e3
 80049c4:	4855      	ldr	r0, [pc, #340]	; (8004b1c <HAL_I2C_Init+0x23c>)
 80049c6:	f019 fe27 	bl	801e618 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_I2C_Init+0x106>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049da:	d004      	beq.n	80049e6 <HAL_I2C_Init+0x106>
 80049dc:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80049e0:	484e      	ldr	r0, [pc, #312]	; (8004b1c <HAL_I2C_Init+0x23c>)
 80049e2:	f019 fe19 	bl	801e618 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_I2C_Init+0x122>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f6:	d004      	beq.n	8004a02 <HAL_I2C_Init+0x122>
 80049f8:	f240 11e5 	movw	r1, #485	; 0x1e5
 80049fc:	4847      	ldr	r0, [pc, #284]	; (8004b1c <HAL_I2C_Init+0x23c>)
 80049fe:	f019 fe0b 	bl	801e618 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f018 fe96 	bl	801d748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	; 0x24
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d107      	bne.n	8004a6a <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	e006      	b.n	8004a78 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d104      	bne.n	8004a8a <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b22      	ldr	r3, [pc, #136]	; (8004b20 <HAL_I2C_Init+0x240>)
 8004a96:	430b      	orrs	r3, r1
 8004a98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	ea42 0103 	orr.w	r1, r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	021a      	lsls	r2, r3, #8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69d9      	ldr	r1, [r3, #28]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40005400 	.word	0x40005400
 8004b10:	40005800 	.word	0x40005800
 8004b14:	40005c00 	.word	0x40005c00
 8004b18:	40006000 	.word	0x40006000
 8004b1c:	080269d0 	.word	0x080269d0
 8004b20:	02008000 	.word	0x02008000

08004b24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	817b      	strh	r3, [r7, #10]
 8004b36:	460b      	mov	r3, r1
 8004b38:	813b      	strh	r3, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d007      	beq.n	8004b54 <HAL_I2C_Mem_Write+0x30>
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d004      	beq.n	8004b54 <HAL_I2C_Mem_Write+0x30>
 8004b4a:	f640 01ed 	movw	r1, #2285	; 0x8ed
 8004b4e:	4884      	ldr	r0, [pc, #528]	; (8004d60 <HAL_I2C_Mem_Write+0x23c>)
 8004b50:	f019 fd62 	bl	801e618 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	f040 80f9 	bne.w	8004d54 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_I2C_Mem_Write+0x4a>
 8004b68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0ed      	b.n	8004d56 <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_I2C_Mem_Write+0x64>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e0e6      	b.n	8004d56 <HAL_I2C_Mem_Write+0x232>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b90:	f7fc fb6e 	bl	8001270 <HAL_GetTick>
 8004b94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2319      	movs	r3, #25
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fad4 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0d1      	b.n	8004d56 <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2221      	movs	r2, #33	; 0x21
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2240      	movs	r2, #64	; 0x40
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a3a      	ldr	r2, [r7, #32]
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bda:	88f8      	ldrh	r0, [r7, #6]
 8004bdc:	893a      	ldrh	r2, [r7, #8]
 8004bde:	8979      	ldrh	r1, [r7, #10]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	4603      	mov	r3, r0
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f9e4 	bl	8004fb8 <I2C_RequestMemoryWrite>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e0a9      	b.n	8004d56 <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2bff      	cmp	r3, #255	; 0xff
 8004c0a:	d90e      	bls.n	8004c2a <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	22ff      	movs	r2, #255	; 0xff
 8004c10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	8979      	ldrh	r1, [r7, #10]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fbb6 	bl	8005394 <I2C_TransferConfig>
 8004c28:	e00f      	b.n	8004c4a <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	8979      	ldrh	r1, [r7, #10]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fba5 	bl	8005394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fabe 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07b      	b.n	8004d56 <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	781a      	ldrb	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d034      	beq.n	8004d02 <HAL_I2C_Mem_Write+0x1de>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d130      	bne.n	8004d02 <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2180      	movs	r1, #128	; 0x80
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fa50 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e04d      	b.n	8004d56 <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2bff      	cmp	r3, #255	; 0xff
 8004cc2:	d90e      	bls.n	8004ce2 <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	22ff      	movs	r2, #255	; 0xff
 8004cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	8979      	ldrh	r1, [r7, #10]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fb5a 	bl	8005394 <I2C_TransferConfig>
 8004ce0:	e00f      	b.n	8004d02 <HAL_I2C_Mem_Write+0x1de>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	8979      	ldrh	r1, [r7, #10]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fb49 	bl	8005394 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d19e      	bne.n	8004c4a <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fa9d 	bl	8005250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e01a      	b.n	8004d56 <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2220      	movs	r2, #32
 8004d26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <HAL_I2C_Mem_Write+0x240>)
 8004d34:	400b      	ands	r3, r1
 8004d36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	080269d0 	.word	0x080269d0
 8004d64:	fe00e800 	.word	0xfe00e800

08004d68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	817b      	strh	r3, [r7, #10]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	813b      	strh	r3, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d007      	beq.n	8004d98 <HAL_I2C_Mem_Read+0x30>
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d004      	beq.n	8004d98 <HAL_I2C_Mem_Read+0x30>
 8004d8e:	f640 1174 	movw	r1, #2420	; 0x974
 8004d92:	4886      	ldr	r0, [pc, #536]	; (8004fac <HAL_I2C_Mem_Read+0x244>)
 8004d94:	f019 fc40 	bl	801e618 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	f040 80fd 	bne.w	8004fa0 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_I2C_Mem_Read+0x4a>
 8004dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d105      	bne.n	8004dbe <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e0f1      	b.n	8004fa2 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_I2C_Mem_Read+0x64>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e0ea      	b.n	8004fa2 <HAL_I2C_Mem_Read+0x23a>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dd4:	f7fc fa4c 	bl	8001270 <HAL_GetTick>
 8004dd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2319      	movs	r3, #25
 8004de0:	2201      	movs	r2, #1
 8004de2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f9b2 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0d5      	b.n	8004fa2 <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2222      	movs	r2, #34	; 0x22
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2240      	movs	r2, #64	; 0x40
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a3a      	ldr	r2, [r7, #32]
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e1e:	88f8      	ldrh	r0, [r7, #6]
 8004e20:	893a      	ldrh	r2, [r7, #8]
 8004e22:	8979      	ldrh	r1, [r7, #10]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f916 	bl	8005060 <I2C_RequestMemoryRead>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e0ad      	b.n	8004fa2 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2bff      	cmp	r3, #255	; 0xff
 8004e4e:	d90e      	bls.n	8004e6e <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	8979      	ldrh	r1, [r7, #10]
 8004e5e:	4b54      	ldr	r3, [pc, #336]	; (8004fb0 <HAL_I2C_Mem_Read+0x248>)
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fa94 	bl	8005394 <I2C_TransferConfig>
 8004e6c:	e00f      	b.n	8004e8e <HAL_I2C_Mem_Read+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	8979      	ldrh	r1, [r7, #10]
 8004e80:	4b4b      	ldr	r3, [pc, #300]	; (8004fb0 <HAL_I2C_Mem_Read+0x248>)
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fa83 	bl	8005394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	2200      	movs	r2, #0
 8004e96:	2104      	movs	r1, #4
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f959 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e07c      	b.n	8004fa2 <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d034      	beq.n	8004f4e <HAL_I2C_Mem_Read+0x1e6>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d130      	bne.n	8004f4e <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f92a 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e04d      	b.n	8004fa2 <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2bff      	cmp	r3, #255	; 0xff
 8004f0e:	d90e      	bls.n	8004f2e <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	22ff      	movs	r2, #255	; 0xff
 8004f14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	8979      	ldrh	r1, [r7, #10]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 fa34 	bl	8005394 <I2C_TransferConfig>
 8004f2c:	e00f      	b.n	8004f4e <HAL_I2C_Mem_Read+0x1e6>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	8979      	ldrh	r1, [r7, #10]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fa23 	bl	8005394 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d19a      	bne.n	8004e8e <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f977 	bl	8005250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e01a      	b.n	8004fa2 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2220      	movs	r2, #32
 8004f72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6859      	ldr	r1, [r3, #4]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <HAL_I2C_Mem_Read+0x24c>)
 8004f80:	400b      	ands	r3, r1
 8004f82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e000      	b.n	8004fa2 <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
  }
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	080269d0 	.word	0x080269d0
 8004fb0:	80002400 	.word	0x80002400
 8004fb4:	fe00e800 	.word	0xfe00e800

08004fb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	817b      	strh	r3, [r7, #10]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	813b      	strh	r3, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	8979      	ldrh	r1, [r7, #10]
 8004fd8:	4b20      	ldr	r3, [pc, #128]	; (800505c <I2C_RequestMemoryWrite+0xa4>)
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f9d7 	bl	8005394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	69b9      	ldr	r1, [r7, #24]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f8f0 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e02c      	b.n	8005054 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d105      	bne.n	800500c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005000:	893b      	ldrh	r3, [r7, #8]
 8005002:	b2da      	uxtb	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	629a      	str	r2, [r3, #40]	; 0x28
 800500a:	e015      	b.n	8005038 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800500c:	893b      	ldrh	r3, [r7, #8]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	b29b      	uxth	r3, r3
 8005012:	b2da      	uxtb	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	69b9      	ldr	r1, [r7, #24]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f8d6 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e012      	b.n	8005054 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800502e:	893b      	ldrh	r3, [r7, #8]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2200      	movs	r2, #0
 8005040:	2180      	movs	r1, #128	; 0x80
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f884 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	80002000 	.word	0x80002000

08005060 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	4608      	mov	r0, r1
 800506a:	4611      	mov	r1, r2
 800506c:	461a      	mov	r2, r3
 800506e:	4603      	mov	r3, r0
 8005070:	817b      	strh	r3, [r7, #10]
 8005072:	460b      	mov	r3, r1
 8005074:	813b      	strh	r3, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	8979      	ldrh	r1, [r7, #10]
 8005080:	4b20      	ldr	r3, [pc, #128]	; (8005104 <I2C_RequestMemoryRead+0xa4>)
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f984 	bl	8005394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	69b9      	ldr	r1, [r7, #24]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f89d 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e02c      	b.n	80050fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d105      	bne.n	80050b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050a6:	893b      	ldrh	r3, [r7, #8]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28
 80050b0:	e015      	b.n	80050de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050b2:	893b      	ldrh	r3, [r7, #8]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	69b9      	ldr	r1, [r7, #24]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f883 	bl	80051d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e012      	b.n	80050fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050d4:	893b      	ldrh	r3, [r7, #8]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2140      	movs	r1, #64	; 0x40
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f831 	bl	8005150 <I2C_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	80002000 	.word	0x80002000

08005108 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d103      	bne.n	8005126 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b01      	cmp	r3, #1
 8005132:	d007      	beq.n	8005144 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	619a      	str	r2, [r3, #24]
  }
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005160:	e022      	b.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d01e      	beq.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fc f881 	bl	8001270 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d113      	bne.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e00f      	b.n	80051c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d0cd      	beq.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051dc:	e02c      	b.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f870 	bl	80052c8 <I2C_IsAcknowledgeFailed>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e02a      	b.n	8005248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d01e      	beq.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fa:	f7fc f839 	bl	8001270 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	d302      	bcc.n	8005210 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d113      	bne.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e007      	b.n	8005248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b02      	cmp	r3, #2
 8005244:	d1cb      	bne.n	80051de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800525c:	e028      	b.n	80052b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f830 	bl	80052c8 <I2C_IsAcknowledgeFailed>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e026      	b.n	80052c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fb fffd 	bl	8001270 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d113      	bne.n	80052b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e007      	b.n	80052c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d1cf      	bne.n	800525e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d151      	bne.n	8005386 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052e2:	e022      	b.n	800532a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d01e      	beq.n	800532a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ec:	f7fb ffc0 	bl	8001270 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d302      	bcc.n	8005302 <I2C_IsAcknowledgeFailed+0x3a>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d113      	bne.n	800532a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e02e      	b.n	8005388 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b20      	cmp	r3, #32
 8005336:	d1d5      	bne.n	80052e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2210      	movs	r2, #16
 800533e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2220      	movs	r2, #32
 8005346:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff fedd 	bl	8005108 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <I2C_IsAcknowledgeFailed+0xc8>)
 800535a:	400b      	ands	r3, r1
 800535c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	fe00e800 	.word	0xfe00e800

08005394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	4613      	mov	r3, r2
 80053a4:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2d      	ldr	r2, [pc, #180]	; (8005460 <I2C_TransferConfig+0xcc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <I2C_TransferConfig+0x44>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <I2C_TransferConfig+0xd0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <I2C_TransferConfig+0x44>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <I2C_TransferConfig+0xd4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <I2C_TransferConfig+0x44>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a28      	ldr	r2, [pc, #160]	; (800546c <I2C_TransferConfig+0xd8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <I2C_TransferConfig+0x44>
 80053ce:	f641 01c1 	movw	r1, #6337	; 0x18c1
 80053d2:	4827      	ldr	r0, [pc, #156]	; (8005470 <I2C_TransferConfig+0xdc>)
 80053d4:	f019 f920 	bl	801e618 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053de:	d00b      	beq.n	80053f8 <I2C_TransferConfig+0x64>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053e6:	d007      	beq.n	80053f8 <I2C_TransferConfig+0x64>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <I2C_TransferConfig+0x64>
 80053ee:	f641 01c2 	movw	r1, #6338	; 0x18c2
 80053f2:	481f      	ldr	r0, [pc, #124]	; (8005470 <I2C_TransferConfig+0xdc>)
 80053f4:	f019 f910 	bl	801e618 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	4a1e      	ldr	r2, [pc, #120]	; (8005474 <I2C_TransferConfig+0xe0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00f      	beq.n	8005420 <I2C_TransferConfig+0x8c>
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	4a1d      	ldr	r2, [pc, #116]	; (8005478 <I2C_TransferConfig+0xe4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <I2C_TransferConfig+0x8c>
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	4a1c      	ldr	r2, [pc, #112]	; (800547c <I2C_TransferConfig+0xe8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <I2C_TransferConfig+0x8c>
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <I2C_TransferConfig+0x8c>
 8005416:	f641 01c3 	movw	r1, #6339	; 0x18c3
 800541a:	4815      	ldr	r0, [pc, #84]	; (8005470 <I2C_TransferConfig+0xdc>)
 800541c:	f019 f8fc 	bl	801e618 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	0d5b      	lsrs	r3, r3, #21
 800542a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800542e:	4b14      	ldr	r3, [pc, #80]	; (8005480 <I2C_TransferConfig+0xec>)
 8005430:	430b      	orrs	r3, r1
 8005432:	43db      	mvns	r3, r3
 8005434:	ea02 0103 	and.w	r1, r2, r3
 8005438:	897b      	ldrh	r3, [r7, #10]
 800543a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800543e:	7a7b      	ldrb	r3, [r7, #9]
 8005440:	041b      	lsls	r3, r3, #16
 8005442:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	431a      	orrs	r2, r3
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	431a      	orrs	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40005400 	.word	0x40005400
 8005464:	40005800 	.word	0x40005800
 8005468:	40005c00 	.word	0x40005c00
 800546c:	40006000 	.word	0x40006000
 8005470:	080269d0 	.word	0x080269d0
 8005474:	80004000 	.word	0x80004000
 8005478:	80002400 	.word	0x80002400
 800547c:	80002000 	.word	0x80002000
 8005480:	03ff63ff 	.word	0x03ff63ff

08005484 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a32      	ldr	r2, [pc, #200]	; (800555c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d012      	beq.n	80054be <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a30      	ldr	r2, [pc, #192]	; (8005560 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00d      	beq.n	80054be <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2f      	ldr	r2, [pc, #188]	; (8005564 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d008      	beq.n	80054be <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2d      	ldr	r2, [pc, #180]	; (8005568 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80054b6:	215f      	movs	r1, #95	; 0x5f
 80054b8:	482c      	ldr	r0, [pc, #176]	; (800556c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80054ba:	f019 f8ad 	bl	801e618 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	d003      	beq.n	80054d4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80054cc:	2160      	movs	r1, #96	; 0x60
 80054ce:	4827      	ldr	r0, [pc, #156]	; (800556c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80054d0:	f019 f8a2 	bl	801e618 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d138      	bne.n	8005552 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e032      	b.n	8005554 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2224      	movs	r2, #36	; 0x24
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800551c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6819      	ldr	r1, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	e000      	b.n	8005554 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8005552:	2302      	movs	r3, #2
  }
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40005400 	.word	0x40005400
 8005560:	40005800 	.word	0x40005800
 8005564:	40005c00 	.word	0x40005c00
 8005568:	40006000 	.word	0x40006000
 800556c:	08026a08 	.word	0x08026a08

08005570 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a31      	ldr	r2, [pc, #196]	; (8005644 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d012      	beq.n	80055aa <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00d      	beq.n	80055aa <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2e      	ldr	r2, [pc, #184]	; (800564c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d008      	beq.n	80055aa <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2c      	ldr	r2, [pc, #176]	; (8005650 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80055a2:	218d      	movs	r1, #141	; 0x8d
 80055a4:	482b      	ldr	r0, [pc, #172]	; (8005654 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80055a6:	f019 f837 	bl	801e618 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b0f      	cmp	r3, #15
 80055ae:	d903      	bls.n	80055b8 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80055b0:	218e      	movs	r1, #142	; 0x8e
 80055b2:	4828      	ldr	r0, [pc, #160]	; (8005654 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80055b4:	f019 f830 	bl	801e618 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d139      	bne.n	8005638 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e033      	b.n	800563a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2224      	movs	r2, #36	; 0x24
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005600:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005638:	2302      	movs	r3, #2
  }
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40005400 	.word	0x40005400
 8005648:	40005800 	.word	0x40005800
 800564c:	40005c00 	.word	0x40005c00
 8005650:	40006000 	.word	0x40006000
 8005654:	08026a08 	.word	0x08026a08

08005658 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e14b      	b.n	8005902 <HAL_LTDC_Init+0x2aa>
  }

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a97      	ldr	r2, [pc, #604]	; (80058cc <HAL_LTDC_Init+0x274>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <HAL_LTDC_Init+0x24>
 8005674:	21ca      	movs	r1, #202	; 0xca
 8005676:	4896      	ldr	r0, [pc, #600]	; (80058d0 <HAL_LTDC_Init+0x278>)
 8005678:	f018 ffce 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d303      	bcc.n	800568e <HAL_LTDC_Init+0x36>
 8005686:	21cb      	movs	r1, #203	; 0xcb
 8005688:	4891      	ldr	r0, [pc, #580]	; (80058d0 <HAL_LTDC_Init+0x278>)
 800568a:	f018 ffc5 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005696:	d303      	bcc.n	80056a0 <HAL_LTDC_Init+0x48>
 8005698:	21cc      	movs	r1, #204	; 0xcc
 800569a:	488d      	ldr	r0, [pc, #564]	; (80058d0 <HAL_LTDC_Init+0x278>)
 800569c:	f018 ffbc 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d303      	bcc.n	80056b2 <HAL_LTDC_Init+0x5a>
 80056aa:	21cd      	movs	r1, #205	; 0xcd
 80056ac:	4888      	ldr	r0, [pc, #544]	; (80058d0 <HAL_LTDC_Init+0x278>)
 80056ae:	f018 ffb3 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ba:	d303      	bcc.n	80056c4 <HAL_LTDC_Init+0x6c>
 80056bc:	21ce      	movs	r1, #206	; 0xce
 80056be:	4884      	ldr	r0, [pc, #528]	; (80058d0 <HAL_LTDC_Init+0x278>)
 80056c0:	f018 ffaa 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056cc:	d303      	bcc.n	80056d6 <HAL_LTDC_Init+0x7e>
 80056ce:	21cf      	movs	r1, #207	; 0xcf
 80056d0:	487f      	ldr	r0, [pc, #508]	; (80058d0 <HAL_LTDC_Init+0x278>)
 80056d2:	f018 ffa1 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056de:	d303      	bcc.n	80056e8 <HAL_LTDC_Init+0x90>
 80056e0:	21d0      	movs	r1, #208	; 0xd0
 80056e2:	487b      	ldr	r0, [pc, #492]	; (80058d0 <HAL_LTDC_Init+0x278>)
 80056e4:	f018 ff98 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f0:	d303      	bcc.n	80056fa <HAL_LTDC_Init+0xa2>
 80056f2:	21d1      	movs	r1, #209	; 0xd1
 80056f4:	4876      	ldr	r0, [pc, #472]	; (80058d0 <HAL_LTDC_Init+0x278>)
 80056f6:	f018 ff8f 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005702:	d303      	bcc.n	800570c <HAL_LTDC_Init+0xb4>
 8005704:	21d2      	movs	r1, #210	; 0xd2
 8005706:	4872      	ldr	r0, [pc, #456]	; (80058d0 <HAL_LTDC_Init+0x278>)
 8005708:	f018 ff86 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_LTDC_Init+0xce>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800571c:	d003      	beq.n	8005726 <HAL_LTDC_Init+0xce>
 800571e:	21d3      	movs	r1, #211	; 0xd3
 8005720:	486b      	ldr	r0, [pc, #428]	; (80058d0 <HAL_LTDC_Init+0x278>)
 8005722:	f018 ff79 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <HAL_LTDC_Init+0xe8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005736:	d003      	beq.n	8005740 <HAL_LTDC_Init+0xe8>
 8005738:	21d4      	movs	r1, #212	; 0xd4
 800573a:	4865      	ldr	r0, [pc, #404]	; (80058d0 <HAL_LTDC_Init+0x278>)
 800573c:	f018 ff6c 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_LTDC_Init+0x102>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005750:	d003      	beq.n	800575a <HAL_LTDC_Init+0x102>
 8005752:	21d5      	movs	r1, #213	; 0xd5
 8005754:	485e      	ldr	r0, [pc, #376]	; (80058d0 <HAL_LTDC_Init+0x278>)
 8005756:	f018 ff5f 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_LTDC_Init+0x11c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800576a:	d003      	beq.n	8005774 <HAL_LTDC_Init+0x11c>
 800576c:	21d6      	movs	r1, #214	; 0xd6
 800576e:	4858      	ldr	r0, [pc, #352]	; (80058d0 <HAL_LTDC_Init+0x278>)
 8005770:	f018 ff52 	bl	801e618 <assert_failed>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <HAL_LTDC_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f018 f8f7 	bl	801d97c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80057a4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6999      	ldr	r1, [r3, #24]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6899      	ldr	r1, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b3f      	ldr	r3, [pc, #252]	; (80058d4 <HAL_LTDC_Init+0x27c>)
 80057d6:	400b      	ands	r3, r1
 80057d8:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6899      	ldr	r1, [r3, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68d9      	ldr	r1, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <HAL_LTDC_Init+0x27c>)
 8005804:	400b      	ands	r3, r1
 8005806:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	041b      	lsls	r3, r3, #16
 800580e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68d9      	ldr	r1, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6919      	ldr	r1, [r3, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <HAL_LTDC_Init+0x27c>)
 8005832:	400b      	ands	r3, r1
 8005834:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6919      	ldr	r1, [r3, #16]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6959      	ldr	r1, [r3, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <HAL_LTDC_Init+0x27c>)
 8005860:	400b      	ands	r3, r1
 8005862:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6959      	ldr	r1, [r3, #20]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80058a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	e005      	b.n	80058d8 <HAL_LTDC_Init+0x280>
 80058cc:	40016800 	.word	0x40016800
 80058d0:	08026a44 	.word	0x08026a44
 80058d4:	f000f800 	.word	0xf000f800
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0206 	orr.w	r2, r2, #6
 80058de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop

0800590c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800590c:	b5b0      	push	{r4, r5, r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d904      	bls.n	8005928 <HAL_LTDC_ConfigLayer+0x1c>
 800591e:	f240 21fe 	movw	r1, #766	; 0x2fe
 8005922:	4865      	ldr	r0, [pc, #404]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005924:	f018 fe78 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005930:	d304      	bcc.n	800593c <HAL_LTDC_ConfigLayer+0x30>
 8005932:	f240 21ff 	movw	r1, #767	; 0x2ff
 8005936:	4860      	ldr	r0, [pc, #384]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005938:	f018 fe6e 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005944:	d304      	bcc.n	8005950 <HAL_LTDC_ConfigLayer+0x44>
 8005946:	f44f 7140 	mov.w	r1, #768	; 0x300
 800594a:	485b      	ldr	r0, [pc, #364]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 800594c:	f018 fe64 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005958:	d304      	bcc.n	8005964 <HAL_LTDC_ConfigLayer+0x58>
 800595a:	f240 3101 	movw	r1, #769	; 0x301
 800595e:	4856      	ldr	r0, [pc, #344]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005960:	f018 fe5a 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d304      	bcc.n	8005978 <HAL_LTDC_ConfigLayer+0x6c>
 800596e:	f240 3102 	movw	r1, #770	; 0x302
 8005972:	4851      	ldr	r0, [pc, #324]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005974:	f018 fe50 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d020      	beq.n	80059c2 <HAL_LTDC_ConfigLayer+0xb6>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d01c      	beq.n	80059c2 <HAL_LTDC_ConfigLayer+0xb6>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d018      	beq.n	80059c2 <HAL_LTDC_ConfigLayer+0xb6>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d014      	beq.n	80059c2 <HAL_LTDC_ConfigLayer+0xb6>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b04      	cmp	r3, #4
 800599e:	d010      	beq.n	80059c2 <HAL_LTDC_ConfigLayer+0xb6>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b05      	cmp	r3, #5
 80059a6:	d00c      	beq.n	80059c2 <HAL_LTDC_ConfigLayer+0xb6>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b06      	cmp	r3, #6
 80059ae:	d008      	beq.n	80059c2 <HAL_LTDC_ConfigLayer+0xb6>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b07      	cmp	r3, #7
 80059b6:	d004      	beq.n	80059c2 <HAL_LTDC_ConfigLayer+0xb6>
 80059b8:	f240 3103 	movw	r1, #771	; 0x303
 80059bc:	483e      	ldr	r0, [pc, #248]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 80059be:	f018 fe2b 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	2bff      	cmp	r3, #255	; 0xff
 80059c8:	d904      	bls.n	80059d4 <HAL_LTDC_ConfigLayer+0xc8>
 80059ca:	f44f 7141 	mov.w	r1, #772	; 0x304
 80059ce:	483a      	ldr	r0, [pc, #232]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 80059d0:	f018 fe22 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2bff      	cmp	r3, #255	; 0xff
 80059da:	d904      	bls.n	80059e6 <HAL_LTDC_ConfigLayer+0xda>
 80059dc:	f240 3105 	movw	r1, #773	; 0x305
 80059e0:	4835      	ldr	r0, [pc, #212]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 80059e2:	f018 fe19 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d009      	beq.n	8005a04 <HAL_LTDC_ConfigLayer+0xf8>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059f8:	d004      	beq.n	8005a04 <HAL_LTDC_ConfigLayer+0xf8>
 80059fa:	f240 3106 	movw	r1, #774	; 0x306
 80059fe:	482e      	ldr	r0, [pc, #184]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005a00:	f018 fe0a 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	2b05      	cmp	r3, #5
 8005a0a:	d008      	beq.n	8005a1e <HAL_LTDC_ConfigLayer+0x112>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	2b07      	cmp	r3, #7
 8005a12:	d004      	beq.n	8005a1e <HAL_LTDC_ConfigLayer+0x112>
 8005a14:	f240 3107 	movw	r1, #775	; 0x307
 8005a18:	4827      	ldr	r0, [pc, #156]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005a1a:	f018 fdfd 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a26:	d304      	bcc.n	8005a32 <HAL_LTDC_ConfigLayer+0x126>
 8005a28:	f44f 7142 	mov.w	r1, #776	; 0x308
 8005a2c:	4822      	ldr	r0, [pc, #136]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005a2e:	f018 fdf3 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a3a:	d304      	bcc.n	8005a46 <HAL_LTDC_ConfigLayer+0x13a>
 8005a3c:	f240 3109 	movw	r1, #777	; 0x309
 8005a40:	481d      	ldr	r0, [pc, #116]	; (8005ab8 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005a42:	f018 fde9 	bl	801e618 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_LTDC_ConfigLayer+0x148>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e02c      	b.n	8005aae <HAL_LTDC_ConfigLayer+0x1a2>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2134      	movs	r1, #52	; 0x34
 8005a6a:	fb01 f303 	mul.w	r3, r1, r3
 8005a6e:	4413      	add	r3, r2
 8005a70:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4614      	mov	r4, r2
 8005a78:	461d      	mov	r5, r3
 8005a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a86:	682b      	ldr	r3, [r5, #0]
 8005a88:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f8d2 	bl	8005c38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08026a44 	.word	0x08026a44

08005abc <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d904      	bls.n	8005ad8 <HAL_LTDC_SetAddress+0x1c>
 8005ace:	f240 5111 	movw	r1, #1297	; 0x511
 8005ad2:	4819      	ldr	r0, [pc, #100]	; (8005b38 <HAL_LTDC_SetAddress+0x7c>)
 8005ad4:	f018 fda0 	bl	801e618 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_LTDC_SetAddress+0x2a>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e024      	b.n	8005b30 <HAL_LTDC_SetAddress+0x74>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2234      	movs	r2, #52	; 0x34
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	3338      	adds	r3, #56	; 0x38
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6979      	ldr	r1, [r7, #20]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f891 	bl	8005c38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	08026a44 	.word	0x08026a44

08005b3c <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d007      	beq.n	8005b5c <HAL_LTDC_Reload+0x20>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d004      	beq.n	8005b5c <HAL_LTDC_Reload+0x20>
 8005b52:	f240 51aa 	movw	r1, #1450	; 0x5aa
 8005b56:	4815      	ldr	r0, [pc, #84]	; (8005bac <HAL_LTDC_Reload+0x70>)
 8005b58:	f018 fd5e 	bl	801e618 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_LTDC_Reload+0x2e>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e01c      	b.n	8005ba4 <HAL_LTDC_Reload+0x68>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0208 	orr.w	r2, r2, #8
 8005b88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	08026a44 	.word	0x08026a44

08005bb0 <HAL_LTDC_SetAlpha_NoReload>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2bff      	cmp	r3, #255	; 0xff
 8005bc0:	d904      	bls.n	8005bcc <HAL_LTDC_SetAlpha_NoReload+0x1c>
 8005bc2:	f240 6196 	movw	r1, #1686	; 0x696
 8005bc6:	481b      	ldr	r0, [pc, #108]	; (8005c34 <HAL_LTDC_SetAlpha_NoReload+0x84>)
 8005bc8:	f018 fd26 	bl	801e618 <assert_failed>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d904      	bls.n	8005bdc <HAL_LTDC_SetAlpha_NoReload+0x2c>
 8005bd2:	f240 6197 	movw	r1, #1687	; 0x697
 8005bd6:	4817      	ldr	r0, [pc, #92]	; (8005c34 <HAL_LTDC_SetAlpha_NoReload+0x84>)
 8005bd8:	f018 fd1e 	bl	801e618 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_LTDC_SetAlpha_NoReload+0x3a>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e020      	b.n	8005c2c <HAL_LTDC_SetAlpha_NoReload+0x7c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2234      	movs	r2, #52	; 0x34
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	3338      	adds	r3, #56	; 0x38
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6979      	ldr	r1, [r7, #20]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f80f 	bl	8005c38 <LTDC_SetConfig>

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	08026a44 	.word	0x08026a44

08005c38 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b089      	sub	sp, #36	; 0x24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c54:	4413      	add	r3, r2
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	01db      	lsls	r3, r3, #7
 8005c64:	4413      	add	r3, r2
 8005c66:	3384      	adds	r3, #132	; 0x84
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	4611      	mov	r1, r2
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	01d2      	lsls	r2, r2, #7
 8005c74:	440a      	add	r2, r1
 8005c76:	3284      	adds	r2, #132	; 0x84
 8005c78:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c7c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	0c1b      	lsrs	r3, r3, #16
 8005c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8e:	4413      	add	r3, r2
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4619      	mov	r1, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	01db      	lsls	r3, r3, #7
 8005c9c:	440b      	add	r3, r1
 8005c9e:	3384      	adds	r3, #132	; 0x84
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cb6:	4413      	add	r3, r2
 8005cb8:	041b      	lsls	r3, r3, #16
 8005cba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	01db      	lsls	r3, r3, #7
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3384      	adds	r3, #132	; 0x84
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	01d2      	lsls	r2, r2, #7
 8005cd6:	440a      	add	r2, r1
 8005cd8:	3284      	adds	r2, #132	; 0x84
 8005cda:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005cde:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cee:	4413      	add	r3, r2
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	01db      	lsls	r3, r3, #7
 8005cfc:	440b      	add	r3, r1
 8005cfe:	3384      	adds	r3, #132	; 0x84
 8005d00:	4619      	mov	r1, r3
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	01db      	lsls	r3, r3, #7
 8005d12:	4413      	add	r3, r2
 8005d14:	3384      	adds	r3, #132	; 0x84
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	01d2      	lsls	r2, r2, #7
 8005d22:	440a      	add	r2, r1
 8005d24:	3284      	adds	r2, #132	; 0x84
 8005d26:	f023 0307 	bic.w	r3, r3, #7
 8005d2a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	01db      	lsls	r3, r3, #7
 8005d36:	4413      	add	r3, r2
 8005d38:	3384      	adds	r3, #132	; 0x84
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d52:	041b      	lsls	r3, r3, #16
 8005d54:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	061b      	lsls	r3, r3, #24
 8005d5c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	01db      	lsls	r3, r3, #7
 8005d68:	4413      	add	r3, r2
 8005d6a:	3384      	adds	r3, #132	; 0x84
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	01db      	lsls	r3, r3, #7
 8005d78:	4413      	add	r3, r2
 8005d7a:	3384      	adds	r3, #132	; 0x84
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d88:	461a      	mov	r2, r3
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4619      	mov	r1, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	01db      	lsls	r3, r3, #7
 8005d9c:	440b      	add	r3, r1
 8005d9e:	3384      	adds	r3, #132	; 0x84
 8005da0:	4619      	mov	r1, r3
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	01db      	lsls	r3, r3, #7
 8005db2:	4413      	add	r3, r2
 8005db4:	3384      	adds	r3, #132	; 0x84
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	01d2      	lsls	r2, r2, #7
 8005dc2:	440a      	add	r2, r1
 8005dc4:	3284      	adds	r2, #132	; 0x84
 8005dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005dca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	01db      	lsls	r3, r3, #7
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3384      	adds	r3, #132	; 0x84
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	01db      	lsls	r3, r3, #7
 8005dec:	4413      	add	r3, r2
 8005dee:	3384      	adds	r3, #132	; 0x84
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4619      	mov	r1, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	01db      	lsls	r3, r3, #7
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3384      	adds	r3, #132	; 0x84
 8005e00:	4619      	mov	r1, r3
 8005e02:	4b58      	ldr	r3, [pc, #352]	; (8005f64 <LTDC_SetConfig+0x32c>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	68f9      	ldr	r1, [r7, #12]
 8005e12:	6809      	ldr	r1, [r1, #0]
 8005e14:	4608      	mov	r0, r1
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	01c9      	lsls	r1, r1, #7
 8005e1a:	4401      	add	r1, r0
 8005e1c:	3184      	adds	r1, #132	; 0x84
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	01db      	lsls	r3, r3, #7
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3384      	adds	r3, #132	; 0x84
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	01db      	lsls	r3, r3, #7
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3384      	adds	r3, #132	; 0x84
 8005e40:	461a      	mov	r2, r3
 8005e42:	2300      	movs	r3, #0
 8005e44:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	01db      	lsls	r3, r3, #7
 8005e50:	4413      	add	r3, r2
 8005e52:	3384      	adds	r3, #132	; 0x84
 8005e54:	461a      	mov	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005e64:	2304      	movs	r3, #4
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	e01b      	b.n	8005ea2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d102      	bne.n	8005e78 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005e72:	2303      	movs	r3, #3
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	e014      	b.n	8005ea2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d00b      	beq.n	8005e98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d007      	beq.n	8005e98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d003      	beq.n	8005e98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e94:	2b07      	cmp	r3, #7
 8005e96:	d102      	bne.n	8005e9e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	e001      	b.n	8005ea2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	01db      	lsls	r3, r3, #7
 8005eac:	4413      	add	r3, r2
 8005eae:	3384      	adds	r3, #132	; 0x84
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	01d2      	lsls	r2, r2, #7
 8005ebc:	440a      	add	r2, r1
 8005ebe:	3284      	adds	r2, #132	; 0x84
 8005ec0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	fb02 f303 	mul.w	r3, r2, r3
 8005ed0:	041a      	lsls	r2, r3, #16
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6859      	ldr	r1, [r3, #4]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	1acb      	subs	r3, r1, r3
 8005edc:	69f9      	ldr	r1, [r7, #28]
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	3303      	adds	r3, #3
 8005ee4:	68f9      	ldr	r1, [r7, #12]
 8005ee6:	6809      	ldr	r1, [r1, #0]
 8005ee8:	4608      	mov	r0, r1
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	01c9      	lsls	r1, r1, #7
 8005eee:	4401      	add	r1, r0
 8005ef0:	3184      	adds	r1, #132	; 0x84
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	01db      	lsls	r3, r3, #7
 8005f00:	4413      	add	r3, r2
 8005f02:	3384      	adds	r3, #132	; 0x84
 8005f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	01db      	lsls	r3, r3, #7
 8005f10:	440b      	add	r3, r1
 8005f12:	3384      	adds	r3, #132	; 0x84
 8005f14:	4619      	mov	r1, r3
 8005f16:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <LTDC_SetConfig+0x330>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	01db      	lsls	r3, r3, #7
 8005f26:	4413      	add	r3, r2
 8005f28:	3384      	adds	r3, #132	; 0x84
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	01db      	lsls	r3, r3, #7
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3384      	adds	r3, #132	; 0x84
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	6812      	ldr	r2, [r2, #0]
 8005f46:	4611      	mov	r1, r2
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	01d2      	lsls	r2, r2, #7
 8005f4c:	440a      	add	r2, r1
 8005f4e:	3284      	adds	r2, #132	; 0x84
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	6013      	str	r3, [r2, #0]
}
 8005f56:	bf00      	nop
 8005f58:	3724      	adds	r7, #36	; 0x24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	fffff8f8 	.word	0xfffff8f8
 8005f68:	fffff800 	.word	0xfffff800

08005f6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f76:	4b23      	ldr	r3, [pc, #140]	; (8006004 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	4a22      	ldr	r2, [pc, #136]	; (8006004 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6413      	str	r3, [r2, #64]	; 0x40
 8005f82:	4b20      	ldr	r3, [pc, #128]	; (8006004 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	; (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f9a:	f7fb f969 	bl	8001270 <HAL_GetTick>
 8005f9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fa0:	e009      	b.n	8005fb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fa2:	f7fb f965 	bl	8001270 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fb0:	d901      	bls.n	8005fb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e022      	b.n	8005ffc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fb6:	4b14      	ldr	r3, [pc, #80]	; (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc2:	d1ee      	bne.n	8005fa2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a0f      	ldr	r2, [pc, #60]	; (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fd0:	f7fb f94e 	bl	8001270 <HAL_GetTick>
 8005fd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fd6:	e009      	b.n	8005fec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fd8:	f7fb f94a 	bl	8001270 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe6:	d901      	bls.n	8005fec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e007      	b.n	8005ffc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ff8:	d1ee      	bne.n	8005fd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40023800 	.word	0x40023800
 8006008:	40007000 	.word	0x40007000

0800600c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006014:	2300      	movs	r3, #0
 8006016:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e315      	b.n	800664e <HAL_RCC_OscConfig+0x642>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d904      	bls.n	8006034 <HAL_RCC_OscConfig+0x28>
 800602a:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800602e:	4892      	ldr	r0, [pc, #584]	; (8006278 <HAL_RCC_OscConfig+0x26c>)
 8006030:	f018 faf2 	bl	801e618 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 809a 	beq.w	8006176 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00e      	beq.n	8006068 <HAL_RCC_OscConfig+0x5c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006052:	d009      	beq.n	8006068 <HAL_RCC_OscConfig+0x5c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800605c:	d004      	beq.n	8006068 <HAL_RCC_OscConfig+0x5c>
 800605e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8006062:	4885      	ldr	r0, [pc, #532]	; (8006278 <HAL_RCC_OscConfig+0x26c>)
 8006064:	f018 fad8 	bl	801e618 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006068:	4b84      	ldr	r3, [pc, #528]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 030c 	and.w	r3, r3, #12
 8006070:	2b04      	cmp	r3, #4
 8006072:	d00c      	beq.n	800608e <HAL_RCC_OscConfig+0x82>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006074:	4b81      	ldr	r3, [pc, #516]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 030c 	and.w	r3, r3, #12
 800607c:	2b08      	cmp	r3, #8
 800607e:	d112      	bne.n	80060a6 <HAL_RCC_OscConfig+0x9a>
 8006080:	4b7e      	ldr	r3, [pc, #504]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800608c:	d10b      	bne.n	80060a6 <HAL_RCC_OscConfig+0x9a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608e:	4b7b      	ldr	r3, [pc, #492]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d06c      	beq.n	8006174 <HAL_RCC_OscConfig+0x168>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d168      	bne.n	8006174 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e2d3      	b.n	800664e <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ae:	d106      	bne.n	80060be <HAL_RCC_OscConfig+0xb2>
 80060b0:	4b72      	ldr	r3, [pc, #456]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a71      	ldr	r2, [pc, #452]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e02e      	b.n	800611c <HAL_RCC_OscConfig+0x110>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10c      	bne.n	80060e0 <HAL_RCC_OscConfig+0xd4>
 80060c6:	4b6d      	ldr	r3, [pc, #436]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a6c      	ldr	r2, [pc, #432]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	4b6a      	ldr	r3, [pc, #424]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a69      	ldr	r2, [pc, #420]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e01d      	b.n	800611c <HAL_RCC_OscConfig+0x110>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060e8:	d10c      	bne.n	8006104 <HAL_RCC_OscConfig+0xf8>
 80060ea:	4b64      	ldr	r3, [pc, #400]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a63      	ldr	r2, [pc, #396]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b61      	ldr	r3, [pc, #388]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a60      	ldr	r2, [pc, #384]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e00b      	b.n	800611c <HAL_RCC_OscConfig+0x110>
 8006104:	4b5d      	ldr	r3, [pc, #372]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a5c      	ldr	r2, [pc, #368]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800610a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b5a      	ldr	r3, [pc, #360]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a59      	ldr	r2, [pc, #356]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800611a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fb f8a4 	bl	8001270 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800612c:	f7fb f8a0 	bl	8001270 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b64      	cmp	r3, #100	; 0x64
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e287      	b.n	800664e <HAL_RCC_OscConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	4b4f      	ldr	r3, [pc, #316]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0x120>
 800614a:	e014      	b.n	8006176 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fb f890 	bl	8001270 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x15a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006154:	f7fb f88c 	bl	8001270 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	; 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e273      	b.n	800664e <HAL_RCC_OscConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	4b45      	ldr	r3, [pc, #276]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x148>
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8084 	beq.w	800628c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_RCC_OscConfig+0x192>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d004      	beq.n	800619e <HAL_RCC_OscConfig+0x192>
 8006194:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8006198:	4837      	ldr	r0, [pc, #220]	; (8006278 <HAL_RCC_OscConfig+0x26c>)
 800619a:	f018 fa3d 	bl	801e618 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b1f      	cmp	r3, #31
 80061a4:	d904      	bls.n	80061b0 <HAL_RCC_OscConfig+0x1a4>
 80061a6:	f240 119d 	movw	r1, #413	; 0x19d
 80061aa:	4833      	ldr	r0, [pc, #204]	; (8006278 <HAL_RCC_OscConfig+0x26c>)
 80061ac:	f018 fa34 	bl	801e618 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061b0:	4b32      	ldr	r3, [pc, #200]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 030c 	and.w	r3, r3, #12
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <HAL_RCC_OscConfig+0x1c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 030c 	and.w	r3, r3, #12
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d11c      	bne.n	8006202 <HAL_RCC_OscConfig+0x1f6>
 80061c8:	4b2c      	ldr	r3, [pc, #176]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d116      	bne.n	8006202 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061d4:	4b29      	ldr	r3, [pc, #164]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_RCC_OscConfig+0x1e0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e230      	b.n	800664e <HAL_RCC_OscConfig+0x642>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ec:	4b23      	ldr	r3, [pc, #140]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4920      	ldr	r1, [pc, #128]	; (800627c <HAL_RCC_OscConfig+0x270>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006200:	e044      	b.n	800628c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d023      	beq.n	8006252 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1b      	ldr	r2, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006216:	f7fb f82b 	bl	8001270 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x224>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800621e:	f7fb f827 	bl	8001270 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e20e      	b.n	800664e <HAL_RCC_OscConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800623c:	4b0f      	ldr	r3, [pc, #60]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	490c      	ldr	r1, [pc, #48]	; (800627c <HAL_RCC_OscConfig+0x270>)
 800624c:	4313      	orrs	r3, r2
 800624e:	600b      	str	r3, [r1, #0]
 8006250:	e01c      	b.n	800628c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006252:	4b0a      	ldr	r3, [pc, #40]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a09      	ldr	r2, [pc, #36]	; (800627c <HAL_RCC_OscConfig+0x270>)
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625e:	f7fb f807 	bl	8001270 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006264:	e00c      	b.n	8006280 <HAL_RCC_OscConfig+0x274>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006266:	f7fb f803 	bl	8001270 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d905      	bls.n	8006280 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e1ea      	b.n	800664e <HAL_RCC_OscConfig+0x642>
 8006278:	08026a80 	.word	0x08026a80
 800627c:	40023800 	.word	0x40023800
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006280:	4b7e      	ldr	r3, [pc, #504]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1ec      	bne.n	8006266 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d043      	beq.n	8006320 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_RCC_OscConfig+0x2a6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d004      	beq.n	80062b2 <HAL_RCC_OscConfig+0x2a6>
 80062a8:	f240 11dd 	movw	r1, #477	; 0x1dd
 80062ac:	4874      	ldr	r0, [pc, #464]	; (8006480 <HAL_RCC_OscConfig+0x474>)
 80062ae:	f018 f9b3 	bl	801e618 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d019      	beq.n	80062ee <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ba:	4b70      	ldr	r3, [pc, #448]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80062bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062be:	4a6f      	ldr	r2, [pc, #444]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c6:	f7fa ffd3 	bl	8001270 <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ce:	f7fa ffcf 	bl	8001270 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e1b6      	b.n	800664e <HAL_RCC_OscConfig+0x642>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062e0:	4b66      	ldr	r3, [pc, #408]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80062e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f0      	beq.n	80062ce <HAL_RCC_OscConfig+0x2c2>
 80062ec:	e018      	b.n	8006320 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062ee:	4b63      	ldr	r3, [pc, #396]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80062f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f2:	4a62      	ldr	r2, [pc, #392]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fa:	f7fa ffb9 	bl	8001270 <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x308>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006302:	f7fa ffb5 	bl	8001270 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e19c      	b.n	800664e <HAL_RCC_OscConfig+0x642>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f0      	bne.n	8006302 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80bc 	beq.w	80064a6 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <HAL_RCC_OscConfig+0x344>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d008      	beq.n	8006350 <HAL_RCC_OscConfig+0x344>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	2b05      	cmp	r3, #5
 8006344:	d004      	beq.n	8006350 <HAL_RCC_OscConfig+0x344>
 8006346:	f240 2107 	movw	r1, #519	; 0x207
 800634a:	484d      	ldr	r0, [pc, #308]	; (8006480 <HAL_RCC_OscConfig+0x474>)
 800634c:	f018 f964 	bl	801e618 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006350:	4b4a      	ldr	r3, [pc, #296]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10d      	bne.n	8006378 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800635c:	4b47      	ldr	r3, [pc, #284]	; (800647c <HAL_RCC_OscConfig+0x470>)
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	4a46      	ldr	r2, [pc, #280]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006366:	6413      	str	r3, [r2, #64]	; 0x40
 8006368:	4b44      	ldr	r3, [pc, #272]	; (800647c <HAL_RCC_OscConfig+0x470>)
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006374:	2301      	movs	r3, #1
 8006376:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006378:	4b42      	ldr	r3, [pc, #264]	; (8006484 <HAL_RCC_OscConfig+0x478>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d118      	bne.n	80063b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006384:	4b3f      	ldr	r3, [pc, #252]	; (8006484 <HAL_RCC_OscConfig+0x478>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a3e      	ldr	r2, [pc, #248]	; (8006484 <HAL_RCC_OscConfig+0x478>)
 800638a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800638e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006390:	f7fa ff6e 	bl	8001270 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006398:	f7fa ff6a 	bl	8001270 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b64      	cmp	r3, #100	; 0x64
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e151      	b.n	800664e <HAL_RCC_OscConfig+0x642>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063aa:	4b36      	ldr	r3, [pc, #216]	; (8006484 <HAL_RCC_OscConfig+0x478>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f0      	beq.n	8006398 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d106      	bne.n	80063cc <HAL_RCC_OscConfig+0x3c0>
 80063be:	4b2f      	ldr	r3, [pc, #188]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80063c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c2:	4a2e      	ldr	r2, [pc, #184]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80063c4:	f043 0301 	orr.w	r3, r3, #1
 80063c8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ca:	e02d      	b.n	8006428 <HAL_RCC_OscConfig+0x41c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10c      	bne.n	80063ee <HAL_RCC_OscConfig+0x3e2>
 80063d4:	4b29      	ldr	r3, [pc, #164]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	4a28      	ldr	r2, [pc, #160]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80063da:	f023 0301 	bic.w	r3, r3, #1
 80063de:	6713      	str	r3, [r2, #112]	; 0x70
 80063e0:	4b26      	ldr	r3, [pc, #152]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80063e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e4:	4a25      	ldr	r2, [pc, #148]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80063e6:	f023 0304 	bic.w	r3, r3, #4
 80063ea:	6713      	str	r3, [r2, #112]	; 0x70
 80063ec:	e01c      	b.n	8006428 <HAL_RCC_OscConfig+0x41c>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	d10c      	bne.n	8006410 <HAL_RCC_OscConfig+0x404>
 80063f6:	4b21      	ldr	r3, [pc, #132]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4a20      	ldr	r2, [pc, #128]	; (800647c <HAL_RCC_OscConfig+0x470>)
 80063fc:	f043 0304 	orr.w	r3, r3, #4
 8006400:	6713      	str	r3, [r2, #112]	; 0x70
 8006402:	4b1e      	ldr	r3, [pc, #120]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	4a1d      	ldr	r2, [pc, #116]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006408:	f043 0301 	orr.w	r3, r3, #1
 800640c:	6713      	str	r3, [r2, #112]	; 0x70
 800640e:	e00b      	b.n	8006428 <HAL_RCC_OscConfig+0x41c>
 8006410:	4b1a      	ldr	r3, [pc, #104]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006414:	4a19      	ldr	r2, [pc, #100]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	6713      	str	r3, [r2, #112]	; 0x70
 800641c:	4b17      	ldr	r3, [pc, #92]	; (800647c <HAL_RCC_OscConfig+0x470>)
 800641e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006420:	4a16      	ldr	r2, [pc, #88]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006422:	f023 0304 	bic.w	r3, r3, #4
 8006426:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d015      	beq.n	800645c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006430:	f7fa ff1e 	bl	8001270 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006436:	e00a      	b.n	800644e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006438:	f7fa ff1a 	bl	8001270 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f241 3288 	movw	r2, #5000	; 0x1388
 8006446:	4293      	cmp	r3, r2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e0ff      	b.n	800664e <HAL_RCC_OscConfig+0x642>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <HAL_RCC_OscConfig+0x470>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0ee      	beq.n	8006438 <HAL_RCC_OscConfig+0x42c>
 800645a:	e01b      	b.n	8006494 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645c:	f7fa ff08 	bl	8001270 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006462:	e011      	b.n	8006488 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006464:	f7fa ff04 	bl	8001270 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006472:	4293      	cmp	r3, r2
 8006474:	d908      	bls.n	8006488 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e0e9      	b.n	800664e <HAL_RCC_OscConfig+0x642>
 800647a:	bf00      	nop
 800647c:	40023800 	.word	0x40023800
 8006480:	08026a80 	.word	0x08026a80
 8006484:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006488:	4b73      	ldr	r3, [pc, #460]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e7      	bne.n	8006464 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d105      	bne.n	80064a6 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800649a:	4b6f      	ldr	r3, [pc, #444]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	4a6e      	ldr	r2, [pc, #440]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 80064a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00c      	beq.n	80064c8 <HAL_RCC_OscConfig+0x4bc>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d008      	beq.n	80064c8 <HAL_RCC_OscConfig+0x4bc>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d004      	beq.n	80064c8 <HAL_RCC_OscConfig+0x4bc>
 80064be:	f240 214b 	movw	r1, #587	; 0x24b
 80064c2:	4866      	ldr	r0, [pc, #408]	; (800665c <HAL_RCC_OscConfig+0x650>)
 80064c4:	f018 f8a8 	bl	801e618 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80bd 	beq.w	800664c <HAL_RCC_OscConfig+0x640>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064d2:	4b61      	ldr	r3, [pc, #388]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b08      	cmp	r3, #8
 80064dc:	f000 80b4 	beq.w	8006648 <HAL_RCC_OscConfig+0x63c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	f040 8095 	bne.w	8006614 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <HAL_RCC_OscConfig+0x4fa>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064fa:	d004      	beq.n	8006506 <HAL_RCC_OscConfig+0x4fa>
 80064fc:	f44f 7115 	mov.w	r1, #596	; 0x254
 8006500:	4856      	ldr	r0, [pc, #344]	; (800665c <HAL_RCC_OscConfig+0x650>)
 8006502:	f018 f889 	bl	801e618 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d903      	bls.n	8006516 <HAL_RCC_OscConfig+0x50a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	2b3f      	cmp	r3, #63	; 0x3f
 8006514:	d904      	bls.n	8006520 <HAL_RCC_OscConfig+0x514>
 8006516:	f240 2155 	movw	r1, #597	; 0x255
 800651a:	4850      	ldr	r0, [pc, #320]	; (800665c <HAL_RCC_OscConfig+0x650>)
 800651c:	f018 f87c 	bl	801e618 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	2b31      	cmp	r3, #49	; 0x31
 8006526:	d904      	bls.n	8006532 <HAL_RCC_OscConfig+0x526>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006530:	d904      	bls.n	800653c <HAL_RCC_OscConfig+0x530>
 8006532:	f240 2156 	movw	r1, #598	; 0x256
 8006536:	4849      	ldr	r0, [pc, #292]	; (800665c <HAL_RCC_OscConfig+0x650>)
 8006538:	f018 f86e 	bl	801e618 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	2b02      	cmp	r3, #2
 8006542:	d010      	beq.n	8006566 <HAL_RCC_OscConfig+0x55a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	2b04      	cmp	r3, #4
 800654a:	d00c      	beq.n	8006566 <HAL_RCC_OscConfig+0x55a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	2b06      	cmp	r3, #6
 8006552:	d008      	beq.n	8006566 <HAL_RCC_OscConfig+0x55a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	2b08      	cmp	r3, #8
 800655a:	d004      	beq.n	8006566 <HAL_RCC_OscConfig+0x55a>
 800655c:	f240 2157 	movw	r1, #599	; 0x257
 8006560:	483e      	ldr	r0, [pc, #248]	; (800665c <HAL_RCC_OscConfig+0x650>)
 8006562:	f018 f859 	bl	801e618 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	2b01      	cmp	r3, #1
 800656c:	d903      	bls.n	8006576 <HAL_RCC_OscConfig+0x56a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d904      	bls.n	8006580 <HAL_RCC_OscConfig+0x574>
 8006576:	f44f 7116 	mov.w	r1, #600	; 0x258
 800657a:	4838      	ldr	r0, [pc, #224]	; (800665c <HAL_RCC_OscConfig+0x650>)
 800657c:	f018 f84c 	bl	801e618 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006580:	4b35      	ldr	r3, [pc, #212]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a34      	ldr	r2, [pc, #208]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 8006586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800658a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fa fe70 	bl	8001270 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006594:	f7fa fe6c 	bl	8001270 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e053      	b.n	800664e <HAL_RCC_OscConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a6:	4b2c      	ldr	r3, [pc, #176]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69da      	ldr	r2, [r3, #28]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	019b      	lsls	r3, r3, #6
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	3b01      	subs	r3, #1
 80065cc:	041b      	lsls	r3, r3, #16
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	061b      	lsls	r3, r3, #24
 80065d6:	4313      	orrs	r3, r2
 80065d8:	4a1f      	ldr	r2, [pc, #124]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 80065da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065de:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e0:	4b1d      	ldr	r3, [pc, #116]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1c      	ldr	r2, [pc, #112]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 80065e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fa fe40 	bl	8001270 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x5fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f4:	f7fa fe3c 	bl	8001270 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e023      	b.n	800664e <HAL_RCC_OscConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0f0      	beq.n	80065f4 <HAL_RCC_OscConfig+0x5e8>
 8006612:	e01b      	b.n	800664c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006614:	4b10      	ldr	r3, [pc, #64]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a0f      	ldr	r2, [pc, #60]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 800661a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800661e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006620:	f7fa fe26 	bl	8001270 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x62e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006628:	f7fa fe22 	bl	8001270 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e009      	b.n	800664e <HAL_RCC_OscConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <HAL_RCC_OscConfig+0x64c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x61c>
 8006646:	e001      	b.n	800664c <HAL_RCC_OscConfig+0x640>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <HAL_RCC_OscConfig+0x642>
    }
  }
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40023800 	.word	0x40023800
 800665c:	08026a80 	.word	0x08026a80

08006660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e18a      	b.n	800698e <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <HAL_RCC_ClockConfig+0x28>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b0f      	cmp	r3, #15
 8006686:	d904      	bls.n	8006692 <HAL_RCC_ClockConfig+0x32>
 8006688:	f240 21ca 	movw	r1, #714	; 0x2ca
 800668c:	4887      	ldr	r0, [pc, #540]	; (80068ac <HAL_RCC_ClockConfig+0x24c>)
 800668e:	f017 ffc3 	bl	801e618 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d031      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d02e      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d02b      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d028      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d025      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	d022      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b06      	cmp	r3, #6
 80066ba:	d01f      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b07      	cmp	r3, #7
 80066c0:	d01c      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d019      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d016      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b0a      	cmp	r3, #10
 80066d2:	d013      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b0b      	cmp	r3, #11
 80066d8:	d010      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b0c      	cmp	r3, #12
 80066de:	d00d      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b0d      	cmp	r3, #13
 80066e4:	d00a      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b0e      	cmp	r3, #14
 80066ea:	d007      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b0f      	cmp	r3, #15
 80066f0:	d004      	beq.n	80066fc <HAL_RCC_ClockConfig+0x9c>
 80066f2:	f240 21cb 	movw	r1, #715	; 0x2cb
 80066f6:	486d      	ldr	r0, [pc, #436]	; (80068ac <HAL_RCC_ClockConfig+0x24c>)
 80066f8:	f017 ff8e 	bl	801e618 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066fc:	4b6c      	ldr	r3, [pc, #432]	; (80068b0 <HAL_RCC_ClockConfig+0x250>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d910      	bls.n	800672c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670a:	4b69      	ldr	r3, [pc, #420]	; (80068b0 <HAL_RCC_ClockConfig+0x250>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f023 020f 	bic.w	r2, r3, #15
 8006712:	4967      	ldr	r1, [pc, #412]	; (80068b0 <HAL_RCC_ClockConfig+0x250>)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b65      	ldr	r3, [pc, #404]	; (80068b0 <HAL_RCC_ClockConfig+0x250>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e130      	b.n	800698e <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d049      	beq.n	80067cc <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006744:	4b5b      	ldr	r3, [pc, #364]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a5a      	ldr	r2, [pc, #360]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 800674a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800674e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800675c:	4b55      	ldr	r3, [pc, #340]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a54      	ldr	r2, [pc, #336]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 8006762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d024      	beq.n	80067ba <HAL_RCC_ClockConfig+0x15a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2b80      	cmp	r3, #128	; 0x80
 8006776:	d020      	beq.n	80067ba <HAL_RCC_ClockConfig+0x15a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b90      	cmp	r3, #144	; 0x90
 800677e:	d01c      	beq.n	80067ba <HAL_RCC_ClockConfig+0x15a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2ba0      	cmp	r3, #160	; 0xa0
 8006786:	d018      	beq.n	80067ba <HAL_RCC_ClockConfig+0x15a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2bb0      	cmp	r3, #176	; 0xb0
 800678e:	d014      	beq.n	80067ba <HAL_RCC_ClockConfig+0x15a>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2bc0      	cmp	r3, #192	; 0xc0
 8006796:	d010      	beq.n	80067ba <HAL_RCC_ClockConfig+0x15a>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2bd0      	cmp	r3, #208	; 0xd0
 800679e:	d00c      	beq.n	80067ba <HAL_RCC_ClockConfig+0x15a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2be0      	cmp	r3, #224	; 0xe0
 80067a6:	d008      	beq.n	80067ba <HAL_RCC_ClockConfig+0x15a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	2bf0      	cmp	r3, #240	; 0xf0
 80067ae:	d004      	beq.n	80067ba <HAL_RCC_ClockConfig+0x15a>
 80067b0:	f240 21ef 	movw	r1, #751	; 0x2ef
 80067b4:	483d      	ldr	r0, [pc, #244]	; (80068ac <HAL_RCC_ClockConfig+0x24c>)
 80067b6:	f017 ff2f 	bl	801e618 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ba:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	493b      	ldr	r1, [pc, #236]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d051      	beq.n	800687c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00c      	beq.n	80067fa <HAL_RCC_ClockConfig+0x19a>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d008      	beq.n	80067fa <HAL_RCC_ClockConfig+0x19a>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d004      	beq.n	80067fa <HAL_RCC_ClockConfig+0x19a>
 80067f0:	f240 21f6 	movw	r1, #758	; 0x2f6
 80067f4:	482d      	ldr	r0, [pc, #180]	; (80068ac <HAL_RCC_ClockConfig+0x24c>)
 80067f6:	f017 ff0f 	bl	801e618 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d107      	bne.n	8006812 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006802:	4b2c      	ldr	r3, [pc, #176]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d115      	bne.n	800683a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0bd      	b.n	800698e <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d107      	bne.n	800682a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800681a:	4b26      	ldr	r3, [pc, #152]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e0b1      	b.n	800698e <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800682a:	4b22      	ldr	r3, [pc, #136]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e0a9      	b.n	800698e <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800683a:	4b1e      	ldr	r3, [pc, #120]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f023 0203 	bic.w	r2, r3, #3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	491b      	ldr	r1, [pc, #108]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 8006848:	4313      	orrs	r3, r2
 800684a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800684c:	f7fa fd10 	bl	8001270 <HAL_GetTick>
 8006850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006852:	e00a      	b.n	800686a <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006854:	f7fa fd0c 	bl	8001270 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006862:	4293      	cmp	r3, r2
 8006864:	d901      	bls.n	800686a <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e091      	b.n	800698e <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <HAL_RCC_ClockConfig+0x254>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 020c 	and.w	r2, r3, #12
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	429a      	cmp	r2, r3
 800687a:	d1eb      	bne.n	8006854 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800687c:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <HAL_RCC_ClockConfig+0x250>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d216      	bcs.n	80068b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <HAL_RCC_ClockConfig+0x250>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f023 020f 	bic.w	r2, r3, #15
 8006892:	4907      	ldr	r1, [pc, #28]	; (80068b0 <HAL_RCC_ClockConfig+0x250>)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	4313      	orrs	r3, r2
 8006898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <HAL_RCC_ClockConfig+0x250>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d007      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e070      	b.n	800698e <HAL_RCC_ClockConfig+0x32e>
 80068ac:	08026a80 	.word	0x08026a80
 80068b0:	40023c00 	.word	0x40023c00
 80068b4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d025      	beq.n	8006910 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d018      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d4:	d013      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29e>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068de:	d00e      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29e>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80068e8:	d009      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29e>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80068f2:	d004      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29e>
 80068f4:	f240 3133 	movw	r1, #819	; 0x333
 80068f8:	4827      	ldr	r0, [pc, #156]	; (8006998 <HAL_RCC_ClockConfig+0x338>)
 80068fa:	f017 fe8d 	bl	801e618 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068fe:	4b27      	ldr	r3, [pc, #156]	; (800699c <HAL_RCC_ClockConfig+0x33c>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	4924      	ldr	r1, [pc, #144]	; (800699c <HAL_RCC_ClockConfig+0x33c>)
 800690c:	4313      	orrs	r3, r2
 800690e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d026      	beq.n	800696a <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d018      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f6>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d013      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f6>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006936:	d00e      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f6>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006940:	d009      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f6>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800694a:	d004      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f6>
 800694c:	f240 313a 	movw	r1, #826	; 0x33a
 8006950:	4811      	ldr	r0, [pc, #68]	; (8006998 <HAL_RCC_ClockConfig+0x338>)
 8006952:	f017 fe61 	bl	801e618 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <HAL_RCC_ClockConfig+0x33c>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	490d      	ldr	r1, [pc, #52]	; (800699c <HAL_RCC_ClockConfig+0x33c>)
 8006966:	4313      	orrs	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800696a:	f000 f81d 	bl	80069a8 <HAL_RCC_GetSysClockFreq>
 800696e:	4602      	mov	r2, r0
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <HAL_RCC_ClockConfig+0x33c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	4909      	ldr	r1, [pc, #36]	; (80069a0 <HAL_RCC_ClockConfig+0x340>)
 800697c:	5ccb      	ldrb	r3, [r1, r3]
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	4a08      	ldr	r2, [pc, #32]	; (80069a4 <HAL_RCC_ClockConfig+0x344>)
 8006984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006986:	2000      	movs	r0, #0
 8006988:	f7fa fc2e 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	08026a80 	.word	0x08026a80
 800699c:	40023800 	.word	0x40023800
 80069a0:	0802be40 	.word	0x0802be40
 80069a4:	200000a4 	.word	0x200000a4

080069a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069ac:	b090      	sub	sp, #64	; 0x40
 80069ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
 80069b4:	2300      	movs	r3, #0
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b8:	2300      	movs	r3, #0
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069c0:	4b59      	ldr	r3, [pc, #356]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f003 030c 	and.w	r3, r3, #12
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d00d      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0x40>
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	f200 80a1 	bhi.w	8006b14 <HAL_RCC_GetSysClockFreq+0x16c>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <HAL_RCC_GetSysClockFreq+0x34>
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d003      	beq.n	80069e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80069da:	e09b      	b.n	8006b14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069dc:	4b53      	ldr	r3, [pc, #332]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x184>)
 80069de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80069e0:	e09b      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069e2:	4b53      	ldr	r3, [pc, #332]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x188>)
 80069e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069e6:	e098      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069e8:	4b4f      	ldr	r3, [pc, #316]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80069f2:	4b4d      	ldr	r3, [pc, #308]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d028      	beq.n	8006a50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069fe:	4b4a      	ldr	r3, [pc, #296]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	099b      	lsrs	r3, r3, #6
 8006a04:	2200      	movs	r2, #0
 8006a06:	623b      	str	r3, [r7, #32]
 8006a08:	627a      	str	r2, [r7, #36]	; 0x24
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a10:	2100      	movs	r1, #0
 8006a12:	4b47      	ldr	r3, [pc, #284]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a14:	fb03 f201 	mul.w	r2, r3, r1
 8006a18:	2300      	movs	r3, #0
 8006a1a:	fb00 f303 	mul.w	r3, r0, r3
 8006a1e:	4413      	add	r3, r2
 8006a20:	4a43      	ldr	r2, [pc, #268]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a22:	fba0 1202 	umull	r1, r2, r0, r2
 8006a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a28:	460a      	mov	r2, r1
 8006a2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a2e:	4413      	add	r3, r2
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a34:	2200      	movs	r2, #0
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	61fa      	str	r2, [r7, #28]
 8006a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006a42:	f7fa fa19 	bl	8000e78 <__aeabi_uldivmod>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4e:	e053      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a50:	4b35      	ldr	r3, [pc, #212]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	099b      	lsrs	r3, r3, #6
 8006a56:	2200      	movs	r2, #0
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	617a      	str	r2, [r7, #20]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006a62:	f04f 0b00 	mov.w	fp, #0
 8006a66:	4652      	mov	r2, sl
 8006a68:	465b      	mov	r3, fp
 8006a6a:	f04f 0000 	mov.w	r0, #0
 8006a6e:	f04f 0100 	mov.w	r1, #0
 8006a72:	0159      	lsls	r1, r3, #5
 8006a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a78:	0150      	lsls	r0, r2, #5
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	ebb2 080a 	subs.w	r8, r2, sl
 8006a82:	eb63 090b 	sbc.w	r9, r3, fp
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a9a:	ebb2 0408 	subs.w	r4, r2, r8
 8006a9e:	eb63 0509 	sbc.w	r5, r3, r9
 8006aa2:	f04f 0200 	mov.w	r2, #0
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	00eb      	lsls	r3, r5, #3
 8006aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ab0:	00e2      	lsls	r2, r4, #3
 8006ab2:	4614      	mov	r4, r2
 8006ab4:	461d      	mov	r5, r3
 8006ab6:	eb14 030a 	adds.w	r3, r4, sl
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	eb45 030b 	adc.w	r3, r5, fp
 8006ac0:	607b      	str	r3, [r7, #4]
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ace:	4629      	mov	r1, r5
 8006ad0:	028b      	lsls	r3, r1, #10
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ad8:	4621      	mov	r1, r4
 8006ada:	028a      	lsls	r2, r1, #10
 8006adc:	4610      	mov	r0, r2
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	60fa      	str	r2, [r7, #12]
 8006ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aec:	f7fa f9c4 	bl	8000e78 <__aeabi_uldivmod>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4613      	mov	r3, r2
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006af8:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	0c1b      	lsrs	r3, r3, #16
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	3301      	adds	r3, #1
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b12:	e002      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x184>)
 8006b16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3740      	adds	r7, #64	; 0x40
 8006b20:	46bd      	mov	sp, r7
 8006b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b26:	bf00      	nop
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	00f42400 	.word	0x00f42400
 8006b30:	017d7840 	.word	0x017d7840

08006b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 8089 	bne.w	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f040 8082 	bne.w	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d17b      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d175      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d16f      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d169      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d163      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d15d      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d157      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d151      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d14b      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d145      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d13f      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d139      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d133      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d12d      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d127      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d121      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d11b      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d115      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10f      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d109      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c68:	2174      	movs	r1, #116	; 0x74
 8006c6a:	4895      	ldr	r0, [pc, #596]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006c6c:	f017 fcd4 	bl	801e618 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01f      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c8c:	d003      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006c8e:	217a      	movs	r1, #122	; 0x7a
 8006c90:	488b      	ldr	r0, [pc, #556]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006c92:	f017 fcc1 	bl	801e618 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c96:	4b8b      	ldr	r3, [pc, #556]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	4a8a      	ldr	r2, [pc, #552]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006c9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ca0:	6093      	str	r3, [r2, #8]
 8006ca2:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006caa:	4986      	ldr	r1, [pc, #536]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d029      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00d      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd8:	d008      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ce2:	d003      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006ce4:	218a      	movs	r1, #138	; 0x8a
 8006ce6:	4876      	ldr	r0, [pc, #472]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006ce8:	f017 fc96 	bl	801e618 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cec:	4b75      	ldr	r3, [pc, #468]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfa:	4972      	ldr	r1, [pc, #456]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0a:	d101      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d029      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00d      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d38:	d008      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d42:	d003      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006d44:	219e      	movs	r1, #158	; 0x9e
 8006d46:	485e      	ldr	r0, [pc, #376]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006d48:	f017 fc66 	bl	801e618 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d4c:	4b5d      	ldr	r3, [pc, #372]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	495a      	ldr	r1, [pc, #360]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d6a:	d101      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 8186 	beq.w	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da2:	f000 80e4 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dae:	f000 80de 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	4a44      	ldr	r2, [pc, #272]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	f000 80d8 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	4a42      	ldr	r2, [pc, #264]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	f000 80d2 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	4a40      	ldr	r2, [pc, #256]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	f000 80cc 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	4a3e      	ldr	r2, [pc, #248]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	f000 80c6 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de6:	4a3c      	ldr	r2, [pc, #240]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	f000 80c0 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	4a3a      	ldr	r2, [pc, #232]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	f000 80ba 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfe:	4a38      	ldr	r2, [pc, #224]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	f000 80b4 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	4a36      	ldr	r2, [pc, #216]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	f000 80ae 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	4a34      	ldr	r2, [pc, #208]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	f000 80a8 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	4a32      	ldr	r2, [pc, #200]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	f000 80a2 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	4a30      	ldr	r2, [pc, #192]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	f000 809c 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	4a2e      	ldr	r2, [pc, #184]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	f000 8096 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	4a2c      	ldr	r2, [pc, #176]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	f000 8090 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	4a2a      	ldr	r2, [pc, #168]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	f000 808a 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5e:	4a28      	ldr	r2, [pc, #160]	; (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	f000 8084 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	4a26      	ldr	r2, [pc, #152]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d07e      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e74:	4a24      	ldr	r2, [pc, #144]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d079      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	4a23      	ldr	r2, [pc, #140]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d074      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	4a21      	ldr	r2, [pc, #132]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d06f      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	4a20      	ldr	r2, [pc, #128]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d06a      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	4a1e      	ldr	r2, [pc, #120]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d065      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	4a1d      	ldr	r2, [pc, #116]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d060      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	4a1b      	ldr	r2, [pc, #108]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d05b      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	4a1a      	ldr	r2, [pc, #104]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	e033      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006ec0:	08026ab8 	.word	0x08026ab8
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	00020300 	.word	0x00020300
 8006ecc:	00030300 	.word	0x00030300
 8006ed0:	00040300 	.word	0x00040300
 8006ed4:	00050300 	.word	0x00050300
 8006ed8:	00060300 	.word	0x00060300
 8006edc:	00070300 	.word	0x00070300
 8006ee0:	00080300 	.word	0x00080300
 8006ee4:	00090300 	.word	0x00090300
 8006ee8:	000a0300 	.word	0x000a0300
 8006eec:	000b0300 	.word	0x000b0300
 8006ef0:	000c0300 	.word	0x000c0300
 8006ef4:	000d0300 	.word	0x000d0300
 8006ef8:	000e0300 	.word	0x000e0300
 8006efc:	000f0300 	.word	0x000f0300
 8006f00:	00100300 	.word	0x00100300
 8006f04:	00110300 	.word	0x00110300
 8006f08:	00120300 	.word	0x00120300
 8006f0c:	00130300 	.word	0x00130300
 8006f10:	00140300 	.word	0x00140300
 8006f14:	00150300 	.word	0x00150300
 8006f18:	00160300 	.word	0x00160300
 8006f1c:	00170300 	.word	0x00170300
 8006f20:	00180300 	.word	0x00180300
 8006f24:	00190300 	.word	0x00190300
 8006f28:	d021      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	4a4c      	ldr	r2, [pc, #304]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d01c      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f38:	4a4a      	ldr	r2, [pc, #296]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d017      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	4a49      	ldr	r2, [pc, #292]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d012      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	4a47      	ldr	r2, [pc, #284]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00d      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	4a46      	ldr	r2, [pc, #280]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d008      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f60:	4a44      	ldr	r2, [pc, #272]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d003      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006f66:	21b9      	movs	r1, #185	; 0xb9
 8006f68:	4843      	ldr	r0, [pc, #268]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8006f6a:	f017 fb55 	bl	801e618 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f6e:	4b43      	ldr	r3, [pc, #268]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	4a42      	ldr	r2, [pc, #264]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f78:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7a:	4b40      	ldr	r3, [pc, #256]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f86:	4b3e      	ldr	r3, [pc, #248]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a3d      	ldr	r2, [pc, #244]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f92:	f7fa f96d 	bl	8001270 <HAL_GetTick>
 8006f96:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f98:	e009      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f9a:	f7fa f969 	bl	8001270 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b64      	cmp	r3, #100	; 0x64
 8006fa6:	d902      	bls.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	f000 bd9f 	b.w	8007aec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fae:	4b34      	ldr	r3, [pc, #208]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0ef      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fba:	4b30      	ldr	r3, [pc, #192]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d036      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d02f      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fd8:	4b28      	ldr	r3, [pc, #160]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fe2:	4b26      	ldr	r3, [pc, #152]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	4a25      	ldr	r2, [pc, #148]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fee:	4b23      	ldr	r3, [pc, #140]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	4a22      	ldr	r2, [pc, #136]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ffa:	4a20      	ldr	r2, [pc, #128]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007000:	4b1e      	ldr	r3, [pc, #120]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	d115      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700c:	f7fa f930 	bl	8001270 <HAL_GetTick>
 8007010:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007012:	e00b      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007014:	f7fa f92c 	bl	8001270 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007022:	4293      	cmp	r3, r2
 8007024:	d902      	bls.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	f000 bd60 	b.w	8007aec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0ed      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007044:	d120      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007054:	400b      	ands	r3, r1
 8007056:	4909      	ldr	r1, [pc, #36]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007058:	4313      	orrs	r3, r2
 800705a:	608b      	str	r3, [r1, #8]
 800705c:	e01a      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800705e:	bf00      	nop
 8007060:	001a0300 	.word	0x001a0300
 8007064:	001b0300 	.word	0x001b0300
 8007068:	001c0300 	.word	0x001c0300
 800706c:	001d0300 	.word	0x001d0300
 8007070:	001e0300 	.word	0x001e0300
 8007074:	001f0300 	.word	0x001f0300
 8007078:	08026ab8 	.word	0x08026ab8
 800707c:	40023800 	.word	0x40023800
 8007080:	40007000 	.word	0x40007000
 8007084:	0ffffcff 	.word	0x0ffffcff
 8007088:	4b9a      	ldr	r3, [pc, #616]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	4a99      	ldr	r2, [pc, #612]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800708e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007092:	6093      	str	r3, [r2, #8]
 8007094:	4b97      	ldr	r3, [pc, #604]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007096:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070a0:	4994      	ldr	r1, [pc, #592]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01d      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d008      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070c2:	d003      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80070c4:	21f3      	movs	r1, #243	; 0xf3
 80070c6:	488c      	ldr	r0, [pc, #560]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80070c8:	f017 faa6 	bl	801e618 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070cc:	4b89      	ldr	r3, [pc, #548]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80070ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d2:	4a88      	ldr	r2, [pc, #544]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80070d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070dc:	4b85      	ldr	r3, [pc, #532]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80070de:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	4983      	ldr	r1, [pc, #524]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01c      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00d      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800710a:	d008      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007114:	d003      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8007116:	21fd      	movs	r1, #253	; 0xfd
 8007118:	4877      	ldr	r0, [pc, #476]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800711a:	f017 fa7d 	bl	801e618 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800711e:	4b75      	ldr	r3, [pc, #468]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800712c:	4971      	ldr	r1, [pc, #452]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01d      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00e      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800714c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007150:	d009      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007156:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800715a:	d004      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x632>
 800715c:	f240 1107 	movw	r1, #263	; 0x107
 8007160:	4865      	ldr	r0, [pc, #404]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8007162:	f017 fa59 	bl	801e618 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007166:	4b63      	ldr	r3, [pc, #396]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007174:	495f      	ldr	r1, [pc, #380]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01d      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00e      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007198:	d009      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800719e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071a2:	d004      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80071a4:	f240 1111 	movw	r1, #273	; 0x111
 80071a8:	4853      	ldr	r0, [pc, #332]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80071aa:	f017 fa35 	bl	801e618 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071ae:	4b51      	ldr	r3, [pc, #324]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071bc:	494d      	ldr	r1, [pc, #308]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01d      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00e      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071e0:	d009      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071ea:	d004      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80071ec:	f240 111b 	movw	r1, #283	; 0x11b
 80071f0:	4841      	ldr	r0, [pc, #260]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80071f2:	f017 fa11 	bl	801e618 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071f6:	4b3f      	ldr	r3, [pc, #252]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80071f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007204:	493b      	ldr	r1, [pc, #236]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01f      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721c:	2b00      	cmp	r3, #0
 800721e:	d010      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007224:	2b01      	cmp	r3, #1
 8007226:	d00c      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722c:	2b03      	cmp	r3, #3
 800722e:	d008      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	2b02      	cmp	r3, #2
 8007236:	d004      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007238:	f240 1125 	movw	r1, #293	; 0x125
 800723c:	482e      	ldr	r0, [pc, #184]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800723e:	f017 f9eb 	bl	801e618 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007242:	4b2c      	ldr	r3, [pc, #176]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007248:	f023 0203 	bic.w	r2, r3, #3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007250:	4928      	ldr	r1, [pc, #160]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007260:	2b00      	cmp	r3, #0
 8007262:	d01f      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007268:	2b00      	cmp	r3, #0
 800726a:	d010      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007270:	2b04      	cmp	r3, #4
 8007272:	d00c      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007278:	2b0c      	cmp	r3, #12
 800727a:	d008      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007280:	2b08      	cmp	r3, #8
 8007282:	d004      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8007284:	f240 112f 	movw	r1, #303	; 0x12f
 8007288:	481b      	ldr	r0, [pc, #108]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800728a:	f017 f9c5 	bl	801e618 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800728e:	4b19      	ldr	r3, [pc, #100]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	f023 020c 	bic.w	r2, r3, #12
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729c:	4915      	ldr	r1, [pc, #84]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d025      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d010      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d00c      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c4:	2b30      	cmp	r3, #48	; 0x30
 80072c6:	d008      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	d004      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80072d0:	f240 1139 	movw	r1, #313	; 0x139
 80072d4:	4808      	ldr	r0, [pc, #32]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80072d6:	f017 f99f 	bl	801e618 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e8:	4902      	ldr	r1, [pc, #8]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80072f0:	e004      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80072f2:	bf00      	nop
 80072f4:	40023800 	.word	0x40023800
 80072f8:	08026ab8 	.word	0x08026ab8
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01f      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730c:	2b00      	cmp	r3, #0
 800730e:	d010      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d00c      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	2bc0      	cmp	r3, #192	; 0xc0
 800731e:	d008      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007324:	2b80      	cmp	r3, #128	; 0x80
 8007326:	d004      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8007328:	f240 1143 	movw	r1, #323	; 0x143
 800732c:	48a0      	ldr	r0, [pc, #640]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800732e:	f017 f973 	bl	801e618 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007332:	4ba0      	ldr	r3, [pc, #640]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007338:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007340:	499c      	ldr	r1, [pc, #624]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007350:	2b00      	cmp	r3, #0
 8007352:	d022      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007358:	2b00      	cmp	r3, #0
 800735a:	d013      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007364:	d00e      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800736e:	d009      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007378:	d004      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800737a:	f240 114d 	movw	r1, #333	; 0x14d
 800737e:	488c      	ldr	r0, [pc, #560]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007380:	f017 f94a 	bl	801e618 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007384:	4b8b      	ldr	r3, [pc, #556]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007392:	4988      	ldr	r1, [pc, #544]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d022      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d013      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b6:	d00e      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073c0:	d009      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ca:	d004      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80073cc:	f240 1157 	movw	r1, #343	; 0x157
 80073d0:	4877      	ldr	r0, [pc, #476]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80073d2:	f017 f921 	bl	801e618 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80073d6:	4b77      	ldr	r3, [pc, #476]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e4:	4973      	ldr	r1, [pc, #460]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d022      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d013      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007408:	d00e      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007412:	d009      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800741c:	d004      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800741e:	f240 1161 	movw	r1, #353	; 0x161
 8007422:	4863      	ldr	r0, [pc, #396]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007424:	f017 f8f8 	bl	801e618 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007428:	4b62      	ldr	r3, [pc, #392]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007436:	495f      	ldr	r1, [pc, #380]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d022      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800744e:	2b00      	cmp	r3, #0
 8007450:	d013      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800745a:	d00e      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x946>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007460:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007464:	d009      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746e:	d004      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007470:	f240 116b 	movw	r1, #363	; 0x16b
 8007474:	484e      	ldr	r0, [pc, #312]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007476:	f017 f8cf 	bl	801e618 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800747a:	4b4e      	ldr	r3, [pc, #312]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007488:	494a      	ldr	r1, [pc, #296]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d018      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074a4:	d008      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80074ae:	f240 1175 	movw	r1, #373	; 0x175
 80074b2:	483f      	ldr	r0, [pc, #252]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80074b4:	f017 f8b0 	bl	801e618 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074b8:	4b3e      	ldr	r3, [pc, #248]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80074ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074c6:	493b      	ldr	r1, [pc, #236]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01f      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074e2:	d008      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d004      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80074ec:	f240 117f 	movw	r1, #383	; 0x17f
 80074f0:	482f      	ldr	r0, [pc, #188]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80074f2:	f017 f891 	bl	801e618 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80074f6:	4b2f      	ldr	r3, [pc, #188]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80074f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007504:	492b      	ldr	r1, [pc, #172]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007506:	4313      	orrs	r3, r2
 8007508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007514:	d101      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8007516:	2301      	movs	r3, #1
 8007518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8007526:	2301      	movs	r3, #1
 8007528:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d022      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800753a:	2b00      	cmp	r3, #0
 800753c:	d013      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007546:	d00e      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007550:	d009      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800755a:	d004      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800755c:	f240 1197 	movw	r1, #407	; 0x197
 8007560:	4813      	ldr	r0, [pc, #76]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007562:	f017 f859 	bl	801e618 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007566:	4b13      	ldr	r3, [pc, #76]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007574:	490f      	ldr	r1, [pc, #60]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007576:	4313      	orrs	r3, r2
 8007578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d020      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800758e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007592:	d009      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800759e:	f240 11a1 	movw	r1, #417	; 0x1a1
 80075a2:	4803      	ldr	r0, [pc, #12]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80075a4:	f017 f838 	bl	801e618 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075a8:	4b02      	ldr	r3, [pc, #8]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80075aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ae:	e003      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80075b0:	08026ab8 	.word	0x08026ab8
 80075b4:	40023800 	.word	0x40023800
 80075b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c2:	4910      	ldr	r1, [pc, #64]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d005      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075d8:	f040 8156 	bne.w	8007888 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a08      	ldr	r2, [pc, #32]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80075e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e8:	f7f9 fe42 	bl	8001270 <HAL_GetTick>
 80075ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075ee:	e00b      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075f0:	f7f9 fe3e 	bl	8001270 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b64      	cmp	r3, #100	; 0x64
 80075fc:	d904      	bls.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e274      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8007602:	bf00      	nop
 8007604:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007608:	4b9a      	ldr	r3, [pc, #616]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1ed      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b31      	cmp	r3, #49	; 0x31
 800761a:	d904      	bls.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007624:	d904      	bls.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8007626:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800762a:	4893      	ldr	r0, [pc, #588]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800762c:	f016 fff4 	bl	801e618 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d02e      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xb66>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007640:	2b00      	cmp	r3, #0
 8007642:	d12a      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d903      	bls.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b07      	cmp	r3, #7
 8007652:	d904      	bls.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007654:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8007658:	4887      	ldr	r0, [pc, #540]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800765a:	f016 ffdd 	bl	801e618 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800765e:	4b85      	ldr	r3, [pc, #532]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007664:	0c1b      	lsrs	r3, r3, #16
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800766c:	4b81      	ldr	r3, [pc, #516]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800766e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007672:	0e1b      	lsrs	r3, r3, #24
 8007674:	f003 030f 	and.w	r3, r3, #15
 8007678:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	019a      	lsls	r2, r3, #6
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	041b      	lsls	r3, r3, #16
 8007684:	431a      	orrs	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	061b      	lsls	r3, r3, #24
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	071b      	lsls	r3, r3, #28
 8007692:	4978      	ldr	r1, [pc, #480]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d004      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ae:	d00a      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d048      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c4:	d143      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d903      	bls.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	2b0f      	cmp	r3, #15
 80076d4:	d904      	bls.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80076d6:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80076da:	4867      	ldr	r0, [pc, #412]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80076dc:	f016 ff9c 	bl	801e618 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	d904      	bls.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 80076f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80076f4:	4860      	ldr	r0, [pc, #384]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80076f6:	f016 ff8f 	bl	801e618 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076fa:	4b5e      	ldr	r3, [pc, #376]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80076fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007700:	0c1b      	lsrs	r3, r3, #16
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007708:	4b5a      	ldr	r3, [pc, #360]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800770a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800770e:	0f1b      	lsrs	r3, r3, #28
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	019a      	lsls	r2, r3, #6
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	061b      	lsls	r3, r3, #24
 8007728:	431a      	orrs	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	071b      	lsls	r3, r3, #28
 800772e:	4951      	ldr	r1, [pc, #324]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007736:	4b4f      	ldr	r3, [pc, #316]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773c:	f023 021f 	bic.w	r2, r3, #31
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	3b01      	subs	r3, #1
 8007746:	494b      	ldr	r1, [pc, #300]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d032      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d010      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d00c      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d008      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d004      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800777a:	f240 2107 	movw	r1, #519	; 0x207
 800777e:	483e      	ldr	r0, [pc, #248]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007780:	f016 ff4a 	bl	801e618 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007784:	4b3b      	ldr	r3, [pc, #236]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800778a:	0e1b      	lsrs	r3, r3, #24
 800778c:	f003 030f 	and.w	r3, r3, #15
 8007790:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007792:	4b38      	ldr	r3, [pc, #224]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007798:	0f1b      	lsrs	r3, r3, #28
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	019a      	lsls	r2, r3, #6
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	041b      	lsls	r3, r3, #16
 80077ac:	431a      	orrs	r2, r3
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	061b      	lsls	r3, r3, #24
 80077b2:	431a      	orrs	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	071b      	lsls	r3, r3, #28
 80077b8:	492e      	ldr	r1, [pc, #184]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d040      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d010      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d00c      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d008      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d004      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80077ec:	f240 2116 	movw	r1, #534	; 0x216
 80077f0:	4821      	ldr	r0, [pc, #132]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80077f2:	f016 ff11 	bl	801e618 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d903      	bls.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	2b07      	cmp	r3, #7
 8007804:	d904      	bls.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007806:	f240 2117 	movw	r1, #535	; 0x217
 800780a:	481b      	ldr	r0, [pc, #108]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800780c:	f016 ff04 	bl	801e618 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d903      	bls.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b0f      	cmp	r3, #15
 800781e:	d904      	bls.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8007820:	f44f 7106 	mov.w	r1, #536	; 0x218
 8007824:	4814      	ldr	r0, [pc, #80]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007826:	f016 fef7 	bl	801e618 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	019a      	lsls	r2, r3, #6
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	041b      	lsls	r3, r3, #16
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	061b      	lsls	r3, r3, #24
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	071b      	lsls	r3, r3, #28
 8007846:	490b      	ldr	r1, [pc, #44]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007848:	4313      	orrs	r3, r2
 800784a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800784e:	4b09      	ldr	r3, [pc, #36]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a08      	ldr	r2, [pc, #32]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007854:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800785a:	f7f9 fd09 	bl	8001270 <HAL_GetTick>
 800785e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007860:	e00c      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007862:	f7f9 fd05 	bl	8001270 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b64      	cmp	r3, #100	; 0x64
 800786e:	d905      	bls.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e13b      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8007874:	40023800 	.word	0x40023800
 8007878:	08026ab8 	.word	0x08026ab8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800787c:	4b9d      	ldr	r3, [pc, #628]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0ec      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b01      	cmp	r3, #1
 800788c:	f040 812d 	bne.w	8007aea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007890:	4b98      	ldr	r3, [pc, #608]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a97      	ldr	r2, [pc, #604]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800789a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800789c:	f7f9 fce8 	bl	8001270 <HAL_GetTick>
 80078a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078a2:	e008      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078a4:	f7f9 fce4 	bl	8001270 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b64      	cmp	r3, #100	; 0x64
 80078b0:	d901      	bls.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e11a      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078b6:	4b8f      	ldr	r3, [pc, #572]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078c2:	d0ef      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	2b31      	cmp	r3, #49	; 0x31
 80078ca:	d904      	bls.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80078d4:	d904      	bls.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80078d6:	f240 2146 	movw	r1, #582	; 0x246
 80078da:	4887      	ldr	r0, [pc, #540]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80078dc:	f016 fe9c 	bl	801e618 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d009      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d048      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d144      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d903      	bls.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	2b0f      	cmp	r3, #15
 8007916:	d904      	bls.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8007918:	f240 214d 	movw	r1, #589	; 0x24d
 800791c:	4876      	ldr	r0, [pc, #472]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800791e:	f016 fe7b 	bl	801e618 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	2b20      	cmp	r3, #32
 8007930:	d904      	bls.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8007932:	f240 214f 	movw	r1, #591	; 0x24f
 8007936:	4870      	ldr	r0, [pc, #448]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007938:	f016 fe6e 	bl	801e618 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800793c:	4b6d      	ldr	r3, [pc, #436]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800793e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007942:	0c1b      	lsrs	r3, r3, #16
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800794a:	4b6a      	ldr	r3, [pc, #424]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007950:	0f1b      	lsrs	r3, r3, #28
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	019a      	lsls	r2, r3, #6
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	041b      	lsls	r3, r3, #16
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	061b      	lsls	r3, r3, #24
 800796a:	431a      	orrs	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	071b      	lsls	r3, r3, #28
 8007970:	4960      	ldr	r1, [pc, #384]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007972:	4313      	orrs	r3, r2
 8007974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007978:	4b5e      	ldr	r3, [pc, #376]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800797a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800797e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	3b01      	subs	r3, #1
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	495a      	ldr	r1, [pc, #360]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800798c:	4313      	orrs	r3, r2
 800798e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d037      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079a6:	d132      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d010      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d00c      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d008      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d004      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80079c8:	f240 2162 	movw	r1, #610	; 0x262
 80079cc:	484a      	ldr	r0, [pc, #296]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80079ce:	f016 fe23 	bl	801e618 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079d2:	4b48      	ldr	r3, [pc, #288]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80079d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d8:	0e1b      	lsrs	r3, r3, #24
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079e0:	4b44      	ldr	r3, [pc, #272]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80079e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e6:	0f1b      	lsrs	r3, r3, #28
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	019a      	lsls	r2, r3, #6
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	041b      	lsls	r3, r3, #16
 80079fa:	431a      	orrs	r2, r3
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	061b      	lsls	r3, r3, #24
 8007a00:	431a      	orrs	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	071b      	lsls	r3, r3, #28
 8007a06:	493b      	ldr	r1, [pc, #236]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d04d      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d903      	bls.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	2b07      	cmp	r3, #7
 8007a28:	d904      	bls.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8007a2a:	f240 2171 	movw	r1, #625	; 0x271
 8007a2e:	4832      	ldr	r0, [pc, #200]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007a30:	f016 fdf2 	bl	801e618 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d013      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a44:	d00e      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a4e:	d009      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a58:	d004      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007a5a:	f240 2172 	movw	r1, #626	; 0x272
 8007a5e:	4826      	ldr	r0, [pc, #152]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007a60:	f016 fdda 	bl	801e618 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a64:	4b23      	ldr	r3, [pc, #140]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6a:	0e1b      	lsrs	r3, r3, #24
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a72:	4b20      	ldr	r3, [pc, #128]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a78:	0c1b      	lsrs	r3, r3, #16
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	019a      	lsls	r2, r3, #6
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	041b      	lsls	r3, r3, #16
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	061b      	lsls	r3, r3, #24
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	071b      	lsls	r3, r3, #28
 8007a98:	4916      	ldr	r1, [pc, #88]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007aa0:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aae:	4911      	ldr	r1, [pc, #68]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ab6:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a0e      	ldr	r2, [pc, #56]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac2:	f7f9 fbd5 	bl	8001270 <HAL_GetTick>
 8007ac6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ac8:	e008      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007aca:	f7f9 fbd1 	bl	8001270 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b64      	cmp	r3, #100	; 0x64
 8007ad6:	d901      	bls.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e007      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007adc:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae8:	d1ef      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3720      	adds	r7, #32
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40023800 	.word	0x40023800
 8007af8:	08026ab8 	.word	0x08026ab8

08007afc <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a80      	ldr	r2, [pc, #512]	; (8007d0c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007b0c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007b0e:	4b80      	ldr	r3, [pc, #512]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b14:	099b      	lsrs	r3, r3, #6
 8007b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b1e:	4b7c      	ldr	r3, [pc, #496]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b24:	0c1b      	lsrs	r3, r3, #16
 8007b26:	f003 0203 	and.w	r2, r3, #3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b2e:	4b78      	ldr	r3, [pc, #480]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b34:	0e1b      	lsrs	r3, r3, #24
 8007b36:	f003 020f 	and.w	r2, r3, #15
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b3e:	4b74      	ldr	r3, [pc, #464]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b44:	0f1b      	lsrs	r3, r3, #28
 8007b46:	f003 0207 	and.w	r2, r3, #7
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8007b4e:	4b70      	ldr	r3, [pc, #448]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b54:	099b      	lsrs	r3, r3, #6
 8007b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007b5e:	4b6c      	ldr	r3, [pc, #432]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b64:	0c1b      	lsrs	r3, r3, #16
 8007b66:	f003 0203 	and.w	r2, r3, #3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b6e:	4b68      	ldr	r3, [pc, #416]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b74:	0e1b      	lsrs	r3, r3, #24
 8007b76:	f003 020f 	and.w	r2, r3, #15
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b7e:	4b64      	ldr	r3, [pc, #400]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b84:	0f1b      	lsrs	r3, r3, #28
 8007b86:	f003 0207 	and.w	r2, r3, #7
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8007b8e:	4b60      	ldr	r3, [pc, #384]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b94:	f003 021f 	and.w	r2, r3, #31
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8007b9c:	4b5c      	ldr	r3, [pc, #368]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	f003 021f 	and.w	r2, r3, #31
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007bac:	4b58      	ldr	r3, [pc, #352]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb2:	0c1b      	lsrs	r3, r3, #16
 8007bb4:	f003 0203 	and.w	r2, r3, #3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8007bbc:	4b54      	ldr	r3, [pc, #336]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc2:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007bca:	4b51      	ldr	r3, [pc, #324]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007bd8:	4b4d      	ldr	r3, [pc, #308]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007be4:	4b4a      	ldr	r3, [pc, #296]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8007bf2:	4b47      	ldr	r3, [pc, #284]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf8:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007c00:	4b43      	ldr	r3, [pc, #268]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c06:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007c0e:	4b40      	ldr	r3, [pc, #256]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c14:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007c1c:	4b3c      	ldr	r3, [pc, #240]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c22:	f003 0203 	and.w	r2, r3, #3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007c2a:	4b39      	ldr	r3, [pc, #228]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c30:	f003 020c 	and.w	r2, r3, #12
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007c38:	4b35      	ldr	r3, [pc, #212]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8007c46:	4b32      	ldr	r3, [pc, #200]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007c54:	4b2e      	ldr	r3, [pc, #184]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8007c62:	4b2b      	ldr	r3, [pc, #172]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c68:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007c70:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c76:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007c7e:	4b24      	ldr	r3, [pc, #144]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c84:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007c8c:	4b20      	ldr	r3, [pc, #128]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c92:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007c9a:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca0:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007ca8:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cae:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007cb6:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007cc6:	4b12      	ldr	r3, [pc, #72]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007cce:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d103      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007cf4:	e003      	b.n	8007cfe <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cfc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007cfe:	bf00      	nop
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	00fffff1 	.word	0x00fffff1
 8007d10:	40023800 	.word	0x40023800

08007d14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d32:	f040 808c 	bne.w	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007d36:	4b95      	ldr	r3, [pc, #596]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d3c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007d44:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d4c:	d07c      	beq.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d54:	d87d      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d004      	beq.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d62:	d039      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007d64:	e075      	b.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d66:	4b89      	ldr	r3, [pc, #548]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d108      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d72:	4b86      	ldr	r3, [pc, #536]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d7a:	4a85      	ldr	r2, [pc, #532]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	e007      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007d84:	4b81      	ldr	r3, [pc, #516]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d8c:	4a81      	ldr	r2, [pc, #516]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007d94:	4b7d      	ldr	r3, [pc, #500]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9a:	0e1b      	lsrs	r3, r3, #24
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007da2:	4b7a      	ldr	r3, [pc, #488]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da8:	099b      	lsrs	r3, r3, #6
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	fb03 f202 	mul.w	r2, r3, r2
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dba:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007dbc:	4b73      	ldr	r3, [pc, #460]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc2:	0a1b      	lsrs	r3, r3, #8
 8007dc4:	f003 031f 	and.w	r3, r3, #31
 8007dc8:	3301      	adds	r3, #1
 8007dca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd4:	617b      	str	r3, [r7, #20]
        break;
 8007dd6:	e03d      	b.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007dd8:	4b6c      	ldr	r3, [pc, #432]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d108      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007de4:	4b69      	ldr	r3, [pc, #420]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dec:	4a68      	ldr	r2, [pc, #416]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	e007      	b.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007df6:	4b65      	ldr	r3, [pc, #404]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dfe:	4a65      	ldr	r2, [pc, #404]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e04:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007e06:	4b61      	ldr	r3, [pc, #388]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e0c:	0e1b      	lsrs	r3, r3, #24
 8007e0e:	f003 030f 	and.w	r3, r3, #15
 8007e12:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007e14:	4b5d      	ldr	r3, [pc, #372]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1a:	099b      	lsrs	r3, r3, #6
 8007e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	fb03 f202 	mul.w	r2, r3, r2
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007e2e:	4b57      	ldr	r3, [pc, #348]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e34:	f003 031f 	and.w	r3, r3, #31
 8007e38:	3301      	adds	r3, #1
 8007e3a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e44:	617b      	str	r3, [r7, #20]
        break;
 8007e46:	e005      	b.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e48:	4b53      	ldr	r3, [pc, #332]	; (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007e4a:	617b      	str	r3, [r7, #20]
        break;
 8007e4c:	e002      	b.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8007e4e:	bf00      	nop
 8007e50:	e000      	b.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8007e52:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e5a:	f040 808c 	bne.w	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007e5e:	4b4b      	ldr	r3, [pc, #300]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e64:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007e6c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e74:	d07c      	beq.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e7c:	d87d      	bhi.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e8a:	d039      	beq.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007e8c:	e075      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007e8e:	4b3f      	ldr	r3, [pc, #252]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d108      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e9a:	4b3c      	ldr	r3, [pc, #240]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ea2:	4a3b      	ldr	r2, [pc, #236]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea8:	613b      	str	r3, [r7, #16]
 8007eaa:	e007      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007eac:	4b37      	ldr	r3, [pc, #220]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eb4:	4a37      	ldr	r2, [pc, #220]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eba:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007ebc:	4b33      	ldr	r3, [pc, #204]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec2:	0e1b      	lsrs	r3, r3, #24
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007eca:	4b30      	ldr	r3, [pc, #192]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed0:	099b      	lsrs	r3, r3, #6
 8007ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	fb03 f202 	mul.w	r2, r3, r2
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007ee4:	4b29      	ldr	r3, [pc, #164]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eea:	0a1b      	lsrs	r3, r3, #8
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efc:	617b      	str	r3, [r7, #20]
        break;
 8007efe:	e03d      	b.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f00:	4b22      	ldr	r3, [pc, #136]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d108      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f0c:	4b1f      	ldr	r3, [pc, #124]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f14:	4a1e      	ldr	r2, [pc, #120]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	e007      	b.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f1e:	4b1b      	ldr	r3, [pc, #108]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f26:	4a1b      	ldr	r2, [pc, #108]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007f2e:	4b17      	ldr	r3, [pc, #92]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f34:	0e1b      	lsrs	r3, r3, #24
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007f3c:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f42:	099b      	lsrs	r3, r3, #6
 8007f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	fb03 f202 	mul.w	r2, r3, r2
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f54:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007f56:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	3301      	adds	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6c:	617b      	str	r3, [r7, #20]
        break;
 8007f6e:	e005      	b.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f70:	4b09      	ldr	r3, [pc, #36]	; (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007f72:	617b      	str	r3, [r7, #20]
        break;
 8007f74:	e002      	b.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8007f76:	bf00      	nop
 8007f78:	e000      	b.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8007f7a:	bf00      	nop

  return frequency;
 8007f7c:	697b      	ldr	r3, [r7, #20]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	40023800 	.word	0x40023800
 8007f90:	00f42400 	.word	0x00f42400
 8007f94:	017d7840 	.word	0x017d7840
 8007f98:	00bb8000 	.word	0x00bb8000

08007f9c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e31f      	b.n	80085fa <HAL_SAI_Init+0x65e>
  }

  /* check the instance */
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a84      	ldr	r2, [pc, #528]	; (80081d0 <HAL_SAI_Init+0x234>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d013      	beq.n	8007fec <HAL_SAI_Init+0x50>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a82      	ldr	r2, [pc, #520]	; (80081d4 <HAL_SAI_Init+0x238>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00e      	beq.n	8007fec <HAL_SAI_Init+0x50>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a81      	ldr	r2, [pc, #516]	; (80081d8 <HAL_SAI_Init+0x23c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d009      	beq.n	8007fec <HAL_SAI_Init+0x50>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a7f      	ldr	r2, [pc, #508]	; (80081dc <HAL_SAI_Init+0x240>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d004      	beq.n	8007fec <HAL_SAI_Init+0x50>
 8007fe2:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8007fe6:	487e      	ldr	r0, [pc, #504]	; (80081e0 <HAL_SAI_Init+0x244>)
 8007fe8:	f016 fb16 	bl	801e618 <assert_failed>

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	4a7c      	ldr	r2, [pc, #496]	; (80081e4 <HAL_SAI_Init+0x248>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d034      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	4a7b      	ldr	r2, [pc, #492]	; (80081e8 <HAL_SAI_Init+0x24c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d02f      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008008:	4293      	cmp	r3, r2
 800800a:	d029      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	f64a 4244 	movw	r2, #44100	; 0xac44
 8008014:	4293      	cmp	r3, r2
 8008016:	d023      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8008020:	d01e      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	f245 6222 	movw	r2, #22050	; 0x5622
 800802a:	4293      	cmp	r3, r2
 800802c:	d018      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008036:	d013      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8008040:	4293      	cmp	r3, r2
 8008042:	d00d      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800804c:	d008      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d004      	beq.n	8008060 <HAL_SAI_Init+0xc4>
 8008056:	f240 1173 	movw	r1, #371	; 0x173
 800805a:	4861      	ldr	r0, [pc, #388]	; (80081e0 <HAL_SAI_Init+0x244>)
 800805c:	f016 fadc 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00c      	beq.n	8008082 <HAL_SAI_Init+0xe6>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806c:	2b08      	cmp	r3, #8
 800806e:	d008      	beq.n	8008082 <HAL_SAI_Init+0xe6>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008074:	2b04      	cmp	r3, #4
 8008076:	d004      	beq.n	8008082 <HAL_SAI_Init+0xe6>
 8008078:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800807c:	4858      	ldr	r0, [pc, #352]	; (80081e0 <HAL_SAI_Init+0x244>)
 800807e:	f016 facb 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d010      	beq.n	80080ac <HAL_SAI_Init+0x110>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d00c      	beq.n	80080ac <HAL_SAI_Init+0x110>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d008      	beq.n	80080ac <HAL_SAI_Init+0x110>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d004      	beq.n	80080ac <HAL_SAI_Init+0x110>
 80080a2:	f240 1175 	movw	r1, #373	; 0x175
 80080a6:	484e      	ldr	r0, [pc, #312]	; (80081e0 <HAL_SAI_Init+0x244>)
 80080a8:	f016 fab6 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	2b40      	cmp	r3, #64	; 0x40
 80080b2:	d018      	beq.n	80080e6 <HAL_SAI_Init+0x14a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b8:	2b60      	cmp	r3, #96	; 0x60
 80080ba:	d014      	beq.n	80080e6 <HAL_SAI_Init+0x14a>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c0:	2b80      	cmp	r3, #128	; 0x80
 80080c2:	d010      	beq.n	80080e6 <HAL_SAI_Init+0x14a>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c8:	2ba0      	cmp	r3, #160	; 0xa0
 80080ca:	d00c      	beq.n	80080e6 <HAL_SAI_Init+0x14a>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d0:	2bc0      	cmp	r3, #192	; 0xc0
 80080d2:	d008      	beq.n	80080e6 <HAL_SAI_Init+0x14a>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	2be0      	cmp	r3, #224	; 0xe0
 80080da:	d004      	beq.n	80080e6 <HAL_SAI_Init+0x14a>
 80080dc:	f44f 71bb 	mov.w	r1, #374	; 0x176
 80080e0:	483f      	ldr	r0, [pc, #252]	; (80081e0 <HAL_SAI_Init+0x244>)
 80080e2:	f016 fa99 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <HAL_SAI_Init+0x166>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f6:	d004      	beq.n	8008102 <HAL_SAI_Init+0x166>
 80080f8:	f240 1177 	movw	r1, #375	; 0x177
 80080fc:	4838      	ldr	r0, [pc, #224]	; (80081e0 <HAL_SAI_Init+0x244>)
 80080fe:	f016 fa8b 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <HAL_SAI_Init+0x180>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	2b01      	cmp	r3, #1
 8008110:	d004      	beq.n	800811c <HAL_SAI_Init+0x180>
 8008112:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8008116:	4832      	ldr	r0, [pc, #200]	; (80081e0 <HAL_SAI_Init+0x244>)
 8008118:	f016 fa7e 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d010      	beq.n	8008146 <HAL_SAI_Init+0x1aa>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d00c      	beq.n	8008146 <HAL_SAI_Init+0x1aa>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d008      	beq.n	8008146 <HAL_SAI_Init+0x1aa>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b03      	cmp	r3, #3
 800813a:	d004      	beq.n	8008146 <HAL_SAI_Init+0x1aa>
 800813c:	f240 1179 	movw	r1, #377	; 0x179
 8008140:	4827      	ldr	r0, [pc, #156]	; (80081e0 <HAL_SAI_Init+0x244>)
 8008142:	f016 fa69 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <HAL_SAI_Init+0x1c6>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008156:	d004      	beq.n	8008162 <HAL_SAI_Init+0x1c6>
 8008158:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800815c:	4820      	ldr	r0, [pc, #128]	; (80081e0 <HAL_SAI_Init+0x244>)
 800815e:	f016 fa5b 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <HAL_SAI_Init+0x1e2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008172:	d004      	beq.n	800817e <HAL_SAI_Init+0x1e2>
 8008174:	f240 117b 	movw	r1, #379	; 0x17b
 8008178:	4819      	ldr	r0, [pc, #100]	; (80081e0 <HAL_SAI_Init+0x244>)
 800817a:	f016 fa4d 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d014      	beq.n	80081b0 <HAL_SAI_Init+0x214>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d010      	beq.n	80081b0 <HAL_SAI_Init+0x214>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d00c      	beq.n	80081b0 <HAL_SAI_Init+0x214>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	2b03      	cmp	r3, #3
 800819c:	d008      	beq.n	80081b0 <HAL_SAI_Init+0x214>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d004      	beq.n	80081b0 <HAL_SAI_Init+0x214>
 80081a6:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80081aa:	480d      	ldr	r0, [pc, #52]	; (80081e0 <HAL_SAI_Init+0x244>)
 80081ac:	f016 fa34 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b8:	d018      	beq.n	80081ec <HAL_SAI_Init+0x250>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d014      	beq.n	80081ec <HAL_SAI_Init+0x250>
 80081c2:	f240 117d 	movw	r1, #381	; 0x17d
 80081c6:	4806      	ldr	r0, [pc, #24]	; (80081e0 <HAL_SAI_Init+0x244>)
 80081c8:	f016 fa26 	bl	801e618 <assert_failed>
 80081cc:	e00e      	b.n	80081ec <HAL_SAI_Init+0x250>
 80081ce:	bf00      	nop
 80081d0:	40015804 	.word	0x40015804
 80081d4:	40015824 	.word	0x40015824
 80081d8:	40015c04 	.word	0x40015c04
 80081dc:	40015c24 	.word	0x40015c24
 80081e0:	08026af4 	.word	0x08026af4
 80081e4:	0002ee00 	.word	0x0002ee00
 80081e8:	00017700 	.word	0x00017700
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d018      	beq.n	8008226 <HAL_SAI_Init+0x28a>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081fc:	d013      	beq.n	8008226 <HAL_SAI_Init+0x28a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008206:	d00e      	beq.n	8008226 <HAL_SAI_Init+0x28a>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008210:	d009      	beq.n	8008226 <HAL_SAI_Init+0x28a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008216:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800821a:	d004      	beq.n	8008226 <HAL_SAI_Init+0x28a>
 800821c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8008220:	4878      	ldr	r0, [pc, #480]	; (8008404 <HAL_SAI_Init+0x468>)
 8008222:	f016 f9f9 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d008      	beq.n	8008240 <HAL_SAI_Init+0x2a4>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	2b10      	cmp	r3, #16
 8008234:	d004      	beq.n	8008240 <HAL_SAI_Init+0x2a4>
 8008236:	f240 117f 	movw	r1, #383	; 0x17f
 800823a:	4872      	ldr	r0, [pc, #456]	; (8008404 <HAL_SAI_Init+0x468>)
 800823c:	f016 f9ec 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00c      	beq.n	8008262 <HAL_SAI_Init+0x2c6>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d008      	beq.n	8008262 <HAL_SAI_Init+0x2c6>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d004      	beq.n	8008262 <HAL_SAI_Init+0x2c6>
 8008258:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800825c:	4869      	ldr	r0, [pc, #420]	; (8008404 <HAL_SAI_Init+0x468>)
 800825e:	f016 f9db 	bl	801e618 <assert_failed>

  /* Check the SAI Block Frame parameters */
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	2b07      	cmp	r3, #7
 8008268:	d904      	bls.n	8008274 <HAL_SAI_Init+0x2d8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008272:	d904      	bls.n	800827e <HAL_SAI_Init+0x2e2>
 8008274:	f240 1183 	movw	r1, #387	; 0x183
 8008278:	4862      	ldr	r0, [pc, #392]	; (8008404 <HAL_SAI_Init+0x468>)
 800827a:	f016 f9cd 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_SAI_Init+0x2f2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828a:	2b80      	cmp	r3, #128	; 0x80
 800828c:	d904      	bls.n	8008298 <HAL_SAI_Init+0x2fc>
 800828e:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8008292:	485c      	ldr	r0, [pc, #368]	; (8008404 <HAL_SAI_Init+0x468>)
 8008294:	f016 f9c0 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800829c:	2b00      	cmp	r3, #0
 800829e:	d009      	beq.n	80082b4 <HAL_SAI_Init+0x318>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a8:	d004      	beq.n	80082b4 <HAL_SAI_Init+0x318>
 80082aa:	f240 1185 	movw	r1, #389	; 0x185
 80082ae:	4855      	ldr	r0, [pc, #340]	; (8008404 <HAL_SAI_Init+0x468>)
 80082b0:	f016 f9b2 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d009      	beq.n	80082d0 <HAL_SAI_Init+0x334>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082c4:	d004      	beq.n	80082d0 <HAL_SAI_Init+0x334>
 80082c6:	f44f 71c3 	mov.w	r1, #390	; 0x186
 80082ca:	484e      	ldr	r0, [pc, #312]	; (8008404 <HAL_SAI_Init+0x468>)
 80082cc:	f016 f9a4 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d009      	beq.n	80082ec <HAL_SAI_Init+0x350>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082e0:	d004      	beq.n	80082ec <HAL_SAI_Init+0x350>
 80082e2:	f240 1187 	movw	r1, #391	; 0x187
 80082e6:	4847      	ldr	r0, [pc, #284]	; (8008404 <HAL_SAI_Init+0x468>)
 80082e8:	f016 f996 	bl	801e618 <assert_failed>

  /* Check the SAI Block Slot parameters */
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f0:	2b18      	cmp	r3, #24
 80082f2:	d904      	bls.n	80082fe <HAL_SAI_Init+0x362>
 80082f4:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80082f8:	4842      	ldr	r0, [pc, #264]	; (8008404 <HAL_SAI_Init+0x468>)
 80082fa:	f016 f98d 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00c      	beq.n	8008320 <HAL_SAI_Init+0x384>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830a:	2b40      	cmp	r3, #64	; 0x40
 800830c:	d008      	beq.n	8008320 <HAL_SAI_Init+0x384>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d004      	beq.n	8008320 <HAL_SAI_Init+0x384>
 8008316:	f240 118b 	movw	r1, #395	; 0x18b
 800831a:	483a      	ldr	r0, [pc, #232]	; (8008404 <HAL_SAI_Init+0x468>)
 800831c:	f016 f97c 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_SAI_Init+0x394>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832c:	2b10      	cmp	r3, #16
 800832e:	d904      	bls.n	800833a <HAL_SAI_Init+0x39e>
 8008330:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008334:	4833      	ldr	r0, [pc, #204]	; (8008404 <HAL_SAI_Init+0x468>)
 8008336:	f016 f96f 	bl	801e618 <assert_failed>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008342:	d304      	bcc.n	800834e <HAL_SAI_Init+0x3b2>
 8008344:	f240 118d 	movw	r1, #397	; 0x18d
 8008348:	482e      	ldr	r0, [pc, #184]	; (8008404 <HAL_SAI_Init+0x468>)
 800834a:	f016 f965 	bl	801e618 <assert_failed>

  if(hsai->State == HAL_SAI_STATE_RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <HAL_SAI_Init+0x3cc>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f018 fab4 	bl	80208d0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 faf1 	bl	8008958 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d00c      	beq.n	8008398 <HAL_SAI_Init+0x3fc>
 800837e:	2b02      	cmp	r3, #2
 8008380:	d80d      	bhi.n	800839e <HAL_SAI_Init+0x402>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_SAI_Init+0x3f0>
 8008386:	2b01      	cmp	r3, #1
 8008388:	d003      	beq.n	8008392 <HAL_SAI_Init+0x3f6>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800838a:	e008      	b.n	800839e <HAL_SAI_Init+0x402>
      tmpregisterGCR = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	61fb      	str	r3, [r7, #28]
      break;
 8008390:	e006      	b.n	80083a0 <HAL_SAI_Init+0x404>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008392:	2310      	movs	r3, #16
 8008394:	61fb      	str	r3, [r7, #28]
      break;
 8008396:	e003      	b.n	80083a0 <HAL_SAI_Init+0x404>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008398:	2320      	movs	r3, #32
 800839a:	61fb      	str	r3, [r7, #28]
      break;
 800839c:	e000      	b.n	80083a0 <HAL_SAI_Init+0x404>
    break;
 800839e:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d81e      	bhi.n	80083e6 <HAL_SAI_Init+0x44a>
 80083a8:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <HAL_SAI_Init+0x414>)
 80083aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ae:	bf00      	nop
 80083b0:	080083c1 	.word	0x080083c1
 80083b4:	080083c7 	.word	0x080083c7
 80083b8:	080083cf 	.word	0x080083cf
 80083bc:	080083d7 	.word	0x080083d7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
      }
      break;
 80083c4:	e010      	b.n	80083e8 <HAL_SAI_Init+0x44c>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80083c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ca:	617b      	str	r3, [r7, #20]
      }
      break;
 80083cc:	e00c      	b.n	80083e8 <HAL_SAI_Init+0x44c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80083ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083d2:	617b      	str	r3, [r7, #20]
      }
      break;
 80083d4:	e008      	b.n	80083e8 <HAL_SAI_Init+0x44c>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80083d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083da:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	61fb      	str	r3, [r7, #28]
      }
      break;
 80083e4:	e000      	b.n	80083e8 <HAL_SAI_Init+0x44c>
  default:
    break;
 80083e6:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a06      	ldr	r2, [pc, #24]	; (8008408 <HAL_SAI_Init+0x46c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d004      	beq.n	80083fc <HAL_SAI_Init+0x460>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a05      	ldr	r2, [pc, #20]	; (800840c <HAL_SAI_Init+0x470>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d10b      	bne.n	8008414 <HAL_SAI_Init+0x478>
  {
    SAI1->GCR = tmpregisterGCR;
 80083fc:	4a04      	ldr	r2, [pc, #16]	; (8008410 <HAL_SAI_Init+0x474>)
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	e00a      	b.n	800841a <HAL_SAI_Init+0x47e>
 8008404:	08026af4 	.word	0x08026af4
 8008408:	40015804 	.word	0x40015804
 800840c:	40015824 	.word	0x40015824
 8008410:	40015800 	.word	0x40015800
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008414:	4a7b      	ldr	r2, [pc, #492]	; (8008604 <HAL_SAI_Init+0x668>)
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d043      	beq.n	80084aa <HAL_SAI_Init+0x50e>
  {
    uint32_t freq = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a77      	ldr	r2, [pc, #476]	; (8008608 <HAL_SAI_Init+0x66c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d004      	beq.n	800843a <HAL_SAI_Init+0x49e>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a75      	ldr	r2, [pc, #468]	; (800860c <HAL_SAI_Init+0x670>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d104      	bne.n	8008444 <HAL_SAI_Init+0x4a8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800843a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800843e:	f7ff fc69 	bl	8007d14 <HAL_RCCEx_GetPeriphCLKFreq>
 8008442:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a71      	ldr	r2, [pc, #452]	; (8008610 <HAL_SAI_Init+0x674>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d004      	beq.n	8008458 <HAL_SAI_Init+0x4bc>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a70      	ldr	r2, [pc, #448]	; (8008614 <HAL_SAI_Init+0x678>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d104      	bne.n	8008462 <HAL_SAI_Init+0x4c6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008458:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800845c:	f7ff fc5a 	bl	8007d14 <HAL_RCCEx_GetPeriphCLKFreq>
 8008460:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	461a      	mov	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	025b      	lsls	r3, r3, #9
 8008474:	fbb2 f3f3 	udiv	r3, r2, r3
 8008478:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4a66      	ldr	r2, [pc, #408]	; (8008618 <HAL_SAI_Init+0x67c>)
 800847e:	fba2 2303 	umull	r2, r3, r2, r3
 8008482:	08da      	lsrs	r2, r3, #3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008488:	68f9      	ldr	r1, [r7, #12]
 800848a:	4b63      	ldr	r3, [pc, #396]	; (8008618 <HAL_SAI_Init+0x67c>)
 800848c:	fba3 2301 	umull	r2, r3, r3, r1
 8008490:	08da      	lsrs	r2, r3, #3
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	1aca      	subs	r2, r1, r3
 800849c:	2a08      	cmp	r2, #8
 800849e:	d904      	bls.n	80084aa <HAL_SAI_Init+0x50e>
    {
      hsai->Init.Mckdiv+= 1;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_SAI_Init+0x51e>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d109      	bne.n	80084ce <HAL_SAI_Init+0x532>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d101      	bne.n	80084c6 <HAL_SAI_Init+0x52a>
 80084c2:	2300      	movs	r3, #0
 80084c4:	e001      	b.n	80084ca <HAL_SAI_Init+0x52e>
 80084c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	e008      	b.n	80084e0 <HAL_SAI_Init+0x544>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d102      	bne.n	80084dc <HAL_SAI_Init+0x540>
 80084d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084da:	e000      	b.n	80084de <HAL_SAI_Init+0x542>
 80084dc:	2300      	movs	r3, #0
 80084de:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6819      	ldr	r1, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	4b4c      	ldr	r3, [pc, #304]	; (800861c <HAL_SAI_Init+0x680>)
 80084ec:	400b      	ands	r3, r1
 80084ee:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6819      	ldr	r1, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008504:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850a:	431a      	orrs	r2, r3
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008518:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008524:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	051b      	lsls	r3, r3, #20
 800852c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6859      	ldr	r1, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	4b37      	ldr	r3, [pc, #220]	; (8008620 <HAL_SAI_Init+0x684>)
 8008542:	400b      	ands	r3, r1
 8008544:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6859      	ldr	r1, [r3, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699a      	ldr	r2, [r3, #24]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6899      	ldr	r1, [r3, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4b2d      	ldr	r3, [pc, #180]	; (8008624 <HAL_SAI_Init+0x688>)
 8008570:	400b      	ands	r3, r1
 8008572:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6899      	ldr	r1, [r3, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008584:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800858a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008590:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	3b01      	subs	r3, #1
 8008598:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800859a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68d9      	ldr	r1, [r3, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	f24f 0320 	movw	r3, #61472	; 0xf020
 80085b2:	400b      	ands	r3, r1
 80085b4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68d9      	ldr	r1, [r3, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ca:	041b      	lsls	r3, r3, #16
 80085cc:	431a      	orrs	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d2:	3b01      	subs	r3, #1
 80085d4:	021b      	lsls	r3, r3, #8
 80085d6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3720      	adds	r7, #32
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	40015c00 	.word	0x40015c00
 8008608:	40015804 	.word	0x40015804
 800860c:	40015824 	.word	0x40015824
 8008610:	40015c04 	.word	0x40015c04
 8008614:	40015c24 	.word	0x40015c24
 8008618:	cccccccd 	.word	0xcccccccd
 800861c:	ff05c010 	.word	0xff05c010
 8008620:	ffff1ff0 	.word	0xffff1ff0
 8008624:	fff88000 	.word	0xfff88000

08008628 <HAL_SAI_DMAPause>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <HAL_SAI_DMAPause+0x16>
 800863a:	2302      	movs	r3, #2
 800863c:	e010      	b.n	8008660 <HAL_SAI_DMAPause+0x38>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008654:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_SAI_DMAResume>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAResume(SAI_HandleTypeDef *hsai)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_SAI_DMAResume+0x16>
 800867e:	2302      	movs	r3, #2
 8008680:	e01f      	b.n	80086c2 <HAL_SAI_DMAResume+0x56>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Enable the SAI DMA requests */
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008698:	601a      	str	r2, [r3, #0]

  /* If the SAI peripheral is still not enabled, enable it */
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d107      	bne.n	80086b8 <HAL_SAI_DMAResume+0x4c>
  {
    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(hsai);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80086b6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d101      	bne.n	80086e8 <HAL_SAI_DMAStop+0x1a>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e061      	b.n	80087ac <HAL_SAI_DMAStop+0xde>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80086fe:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01c      	beq.n	8008742 <HAL_SAI_DMAStop+0x74>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b12      	cmp	r3, #18
 8008712:	d116      	bne.n	8008742 <HAL_SAI_DMAStop+0x74>
  {
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008718:	4618      	mov	r0, r3
 800871a:	f7f9 fa15 	bl	8001b48 <HAL_DMA_Abort>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00e      	beq.n	8008742 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872a:	2b80      	cmp	r3, #128	; 0x80
 800872c:	d009      	beq.n	8008742 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008738:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01c      	beq.n	8008784 <HAL_SAI_DMAStop+0xb6>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b22      	cmp	r3, #34	; 0x22
 8008754:	d116      	bne.n	8008784 <HAL_SAI_DMAStop+0xb6>
  {
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875a:	4618      	mov	r0, r3
 800875c:	f7f9 f9f4 	bl	8001b48 <HAL_DMA_Abort>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00e      	beq.n	8008784 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876c:	2b80      	cmp	r3, #128	; 0x80
 800876e:	d009      	beq.n	8008784 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800877a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f8e7 	bl	8008958 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f042 0208 	orr.w	r2, r2, #8
 8008798:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4613      	mov	r3, r2
 80087c0:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <HAL_SAI_Transmit_DMA+0x1a>
 80087c8:	88fb      	ldrh	r3, [r7, #6]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e074      	b.n	80088bc <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d16d      	bne.n	80088ba <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <HAL_SAI_Transmit_DMA+0x38>
 80087e8:	2302      	movs	r3, #2
 80087ea:	e067      	b.n	80088bc <HAL_SAI_Transmit_DMA+0x108>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	88fa      	ldrh	r2, [r7, #6]
 80087fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	88fa      	ldrh	r2, [r7, #6]
 8008806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2212      	movs	r2, #18
 8008816:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881e:	4a29      	ldr	r2, [pc, #164]	; (80088c4 <HAL_SAI_Transmit_DMA+0x110>)
 8008820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008826:	4a28      	ldr	r2, [pc, #160]	; (80088c8 <HAL_SAI_Transmit_DMA+0x114>)
 8008828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882e:	4a27      	ldr	r2, [pc, #156]	; (80088cc <HAL_SAI_Transmit_DMA+0x118>)
 8008830:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008836:	2200      	movs	r2, #0
 8008838:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008842:	4619      	mov	r1, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	331c      	adds	r3, #28
 800884a:	461a      	mov	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008852:	f7f9 f90b 	bl	8001a6c <HAL_DMA_Start_IT>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e029      	b.n	80088bc <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d107      	bne.n	8008886 <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008884:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008886:	2100      	movs	r1, #0
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 f82f 	bl	80088ec <SAI_InterruptFlag>
 800888e:	4601      	mov	r1, r0
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691a      	ldr	r2, [r3, #16]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	430a      	orrs	r2, r1
 800889c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80088ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	e000      	b.n	80088bc <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80088ba:	2302      	movs	r3, #2
  }
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	08008a29 	.word	0x08008a29
 80088c8:	080089c5 	.word	0x080089c5
 80088cc:	08008a45 	.word	0x08008a45

080088d0 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  return hsai->State;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80088de:	b2db      	uxtb	r3, r3
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d103      	bne.n	8008908 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f043 0308 	orr.w	r3, r3, #8
 8008906:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	2b08      	cmp	r3, #8
 800890e:	d10b      	bne.n	8008928 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008914:	2b03      	cmp	r3, #3
 8008916:	d003      	beq.n	8008920 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d103      	bne.n	8008928 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f043 0310 	orr.w	r3, r3, #16
 8008926:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b03      	cmp	r3, #3
 800892e:	d003      	beq.n	8008938 <SAI_InterruptFlag+0x4c>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d104      	bne.n	8008942 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	e003      	b.n	800894a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f043 0304 	orr.w	r3, r3, #4
 8008948:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008958:	b490      	push	{r4, r7}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008960:	4b16      	ldr	r3, [pc, #88]	; (80089bc <SAI_Disable+0x64>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a16      	ldr	r2, [pc, #88]	; (80089c0 <SAI_Disable+0x68>)
 8008966:	fba2 2303 	umull	r2, r3, r2, r3
 800896a:	0b1b      	lsrs	r3, r3, #12
 800896c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008980:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008982:	4623      	mov	r3, r4
 8008984:	1e5c      	subs	r4, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10a      	bne.n	80089a0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	73fb      	strb	r3, [r7, #15]
      break;
 800899e:	e006      	b.n	80089ae <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e9      	bne.n	8008982 <SAI_Disable+0x2a>

  return status;
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc90      	pop	{r4, r7}
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	200000a4 	.word	0x200000a4
 80089c0:	95cbec1b 	.word	0x95cbec1b

080089c4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d11c      	bne.n	8008a1a <SAI_DMATxCplt+0x56>
  {
    hsai->XferCount = 0;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80089f6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80089f8:	2100      	movs	r1, #0
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff ff76 	bl	80088ec <SAI_InterruptFlag>
 8008a00:	4603      	mov	r3, r0
 8008a02:	43d9      	mvns	r1, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	400a      	ands	r2, r1
 8008a10:	611a      	str	r2, [r3, #16]

    hsai->State= HAL_SAI_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f018 f972 	bl	8020d04 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008a20:	bf00      	nop
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f018 f9b6 	bl	8020da8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008a3c:	bf00      	nop
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d004      	beq.n	8008a76 <SAI_DMAError+0x32>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d112      	bne.n	8008a9c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008a84:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff ff66 	bl	8008958 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f018 f9d3 	bl	8020e48 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008aa2:	bf00      	nop
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e025      	b.n	8008b0a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d106      	bne.n	8008ad8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f014 f9a2 	bl	801ce1c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	f001 ff56 	bl	800a99c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	f002 f870 	bl	800abe0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d101      	bne.n	8008b2e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	e018      	b.n	8008b60 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2202      	movs	r2, #2
 8008b32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	68b9      	ldr	r1, [r7, #8]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f002 f93e 	bl	800adc0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d104      	bne.n	8008b56 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2205      	movs	r2, #5
 8008b50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008b54:	e003      	b.n	8008b5e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d101      	bne.n	8008b82 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008b7e:	2302      	movs	r3, #2
 8008b80:	e00e      	b.n	8008ba0 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2202      	movs	r2, #2
 8008b86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f002 f98b 	bl	800aeac <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e19b      	b.n	8008ef2 <HAL_SPI_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a8b      	ldr	r2, [pc, #556]	; (8008dec <HAL_SPI_Init+0x244>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d01d      	beq.n	8008c00 <HAL_SPI_Init+0x58>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a89      	ldr	r2, [pc, #548]	; (8008df0 <HAL_SPI_Init+0x248>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d018      	beq.n	8008c00 <HAL_SPI_Init+0x58>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a88      	ldr	r2, [pc, #544]	; (8008df4 <HAL_SPI_Init+0x24c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <HAL_SPI_Init+0x58>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a86      	ldr	r2, [pc, #536]	; (8008df8 <HAL_SPI_Init+0x250>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00e      	beq.n	8008c00 <HAL_SPI_Init+0x58>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a85      	ldr	r2, [pc, #532]	; (8008dfc <HAL_SPI_Init+0x254>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_SPI_Init+0x58>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a83      	ldr	r2, [pc, #524]	; (8008e00 <HAL_SPI_Init+0x258>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_SPI_Init+0x58>
 8008bf6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008bfa:	4882      	ldr	r0, [pc, #520]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008bfc:	f015 fd0c 	bl	801e618 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d009      	beq.n	8008c1c <HAL_SPI_Init+0x74>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c10:	d004      	beq.n	8008c1c <HAL_SPI_Init+0x74>
 8008c12:	f240 1145 	movw	r1, #325	; 0x145
 8008c16:	487b      	ldr	r0, [pc, #492]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008c18:	f015 fcfe 	bl	801e618 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00e      	beq.n	8008c42 <HAL_SPI_Init+0x9a>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2c:	d009      	beq.n	8008c42 <HAL_SPI_Init+0x9a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c36:	d004      	beq.n	8008c42 <HAL_SPI_Init+0x9a>
 8008c38:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008c3c:	4871      	ldr	r0, [pc, #452]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008c3e:	f015 fceb 	bl	801e618 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008c4a:	d040      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008c54:	d03b      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8008c5e:	d036      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c68:	d031      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8008c72:	d02c      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008c7c:	d027      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8008c86:	d022      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c90:	d01d      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c9a:	d018      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008ca4:	d013      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008cae:	d00e      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cb8:	d009      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cc2:	d004      	beq.n	8008cce <HAL_SPI_Init+0x126>
 8008cc4:	f240 1147 	movw	r1, #327	; 0x147
 8008cc8:	484e      	ldr	r0, [pc, #312]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008cca:	f015 fca5 	bl	801e618 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd6:	d00d      	beq.n	8008cf4 <HAL_SPI_Init+0x14c>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d009      	beq.n	8008cf4 <HAL_SPI_Init+0x14c>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ce8:	d004      	beq.n	8008cf4 <HAL_SPI_Init+0x14c>
 8008cea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008cee:	4845      	ldr	r0, [pc, #276]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008cf0:	f015 fc92 	bl	801e618 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d008      	beq.n	8008d0e <HAL_SPI_Init+0x166>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d004      	beq.n	8008d0e <HAL_SPI_Init+0x166>
 8008d04:	f240 1149 	movw	r1, #329	; 0x149
 8008d08:	483e      	ldr	r0, [pc, #248]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008d0a:	f015 fc85 	bl	801e618 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d020      	beq.n	8008d58 <HAL_SPI_Init+0x1b0>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	d01c      	beq.n	8008d58 <HAL_SPI_Init+0x1b0>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	2b10      	cmp	r3, #16
 8008d24:	d018      	beq.n	8008d58 <HAL_SPI_Init+0x1b0>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	2b18      	cmp	r3, #24
 8008d2c:	d014      	beq.n	8008d58 <HAL_SPI_Init+0x1b0>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	d010      	beq.n	8008d58 <HAL_SPI_Init+0x1b0>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	2b28      	cmp	r3, #40	; 0x28
 8008d3c:	d00c      	beq.n	8008d58 <HAL_SPI_Init+0x1b0>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	2b30      	cmp	r3, #48	; 0x30
 8008d44:	d008      	beq.n	8008d58 <HAL_SPI_Init+0x1b0>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	2b38      	cmp	r3, #56	; 0x38
 8008d4c:	d004      	beq.n	8008d58 <HAL_SPI_Init+0x1b0>
 8008d4e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008d52:	482c      	ldr	r0, [pc, #176]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008d54:	f015 fc60 	bl	801e618 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <HAL_SPI_Init+0x1ca>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	2b80      	cmp	r3, #128	; 0x80
 8008d66:	d004      	beq.n	8008d72 <HAL_SPI_Init+0x1ca>
 8008d68:	f240 114b 	movw	r1, #331	; 0x14b
 8008d6c:	4825      	ldr	r0, [pc, #148]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008d6e:	f015 fc53 	bl	801e618 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d008      	beq.n	8008d8c <HAL_SPI_Init+0x1e4>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b10      	cmp	r3, #16
 8008d80:	d004      	beq.n	8008d8c <HAL_SPI_Init+0x1e4>
 8008d82:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008d86:	481f      	ldr	r0, [pc, #124]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008d88:	f015 fc46 	bl	801e618 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d119      	bne.n	8008dc8 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d008      	beq.n	8008dae <HAL_SPI_Init+0x206>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d004      	beq.n	8008dae <HAL_SPI_Init+0x206>
 8008da4:	f240 114f 	movw	r1, #335	; 0x14f
 8008da8:	4816      	ldr	r0, [pc, #88]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008daa:	f015 fc35 	bl	801e618 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d008      	beq.n	8008dc8 <HAL_SPI_Init+0x220>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d004      	beq.n	8008dc8 <HAL_SPI_Init+0x220>
 8008dbe:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8008dc2:	4810      	ldr	r0, [pc, #64]	; (8008e04 <HAL_SPI_Init+0x25c>)
 8008dc4:	f015 fc28 	bl	801e618 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d116      	bne.n	8008e08 <HAL_SPI_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f017 fe6c 	bl	8020ac0 <HAL_SPI_MspInit>
 8008de8:	e00e      	b.n	8008e08 <HAL_SPI_Init+0x260>
 8008dea:	bf00      	nop
 8008dec:	40013000 	.word	0x40013000
 8008df0:	40003800 	.word	0x40003800
 8008df4:	40003c00 	.word	0x40003c00
 8008df8:	40013400 	.word	0x40013400
 8008dfc:	40015000 	.word	0x40015000
 8008e00:	40015400 	.word	0x40015400
 8008e04:	08026b2c 	.word	0x08026b2c
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e28:	d902      	bls.n	8008e30 <HAL_SPI_Init+0x288>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	e002      	b.n	8008e36 <HAL_SPI_Init+0x28e>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e3e:	d007      	beq.n	8008e50 <HAL_SPI_Init+0x2a8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e48:	d002      	beq.n	8008e50 <HAL_SPI_Init+0x2a8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10b      	bne.n	8008e70 <HAL_SPI_Init+0x2c8>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e60:	d903      	bls.n	8008e6a <HAL_SPI_Init+0x2c2>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2202      	movs	r2, #2
 8008e66:	631a      	str	r2, [r3, #48]	; 0x30
 8008e68:	e002      	b.n	8008e70 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	431a      	orrs	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	ea42 0103 	orr.w	r1, r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	0c1b      	lsrs	r3, r3, #16
 8008eb0:	f003 0204 	and.w	r2, r3, #4
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	ea42 0103 	orr.w	r1, r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ee0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop

08008efc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d004      	beq.n	8008f20 <HAL_SPI_TransmitReceive_IT+0x24>
 8008f16:	f240 619a 	movw	r1, #1690	; 0x69a
 8008f1a:	4850      	ldr	r0, [pc, #320]	; (800905c <HAL_SPI_TransmitReceive_IT+0x160>)
 8008f1c:	f015 fb7c 	bl	801e618 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hspi);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d101      	bne.n	8008f2e <HAL_SPI_TransmitReceive_IT+0x32>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	e091      	b.n	8009052 <HAL_SPI_TransmitReceive_IT+0x156>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f3c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f44:	7dbb      	ldrb	r3, [r7, #22]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d00d      	beq.n	8008f66 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f50:	d106      	bne.n	8008f60 <HAL_SPI_TransmitReceive_IT+0x64>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d102      	bne.n	8008f60 <HAL_SPI_TransmitReceive_IT+0x64>
 8008f5a:	7dbb      	ldrb	r3, [r7, #22]
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d002      	beq.n	8008f66 <HAL_SPI_TransmitReceive_IT+0x6a>
  {
    errorcode = HAL_BUSY;
 8008f60:	2302      	movs	r3, #2
 8008f62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f64:	e070      	b.n	8009048 <HAL_SPI_TransmitReceive_IT+0x14c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <HAL_SPI_TransmitReceive_IT+0x7c>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <HAL_SPI_TransmitReceive_IT+0x7c>
 8008f72:	887b      	ldrh	r3, [r7, #2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d102      	bne.n	8008f7e <HAL_SPI_TransmitReceive_IT+0x82>
  {
    errorcode = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f7c:	e064      	b.n	8009048 <HAL_SPI_TransmitReceive_IT+0x14c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d003      	beq.n	8008f92 <HAL_SPI_TransmitReceive_IT+0x96>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2205      	movs	r2, #5
 8008f8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	887a      	ldrh	r2, [r7, #2]
 8008fa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	887a      	ldrh	r2, [r7, #2]
 8008fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	887a      	ldrh	r2, [r7, #2]
 8008fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	887a      	ldrh	r2, [r7, #2]
 8008fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fc8:	d906      	bls.n	8008fd8 <HAL_SPI_TransmitReceive_IT+0xdc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4a24      	ldr	r2, [pc, #144]	; (8009060 <HAL_SPI_TransmitReceive_IT+0x164>)
 8008fce:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a24      	ldr	r2, [pc, #144]	; (8009064 <HAL_SPI_TransmitReceive_IT+0x168>)
 8008fd4:	651a      	str	r2, [r3, #80]	; 0x50
 8008fd6:	e005      	b.n	8008fe4 <HAL_SPI_TransmitReceive_IT+0xe8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4a23      	ldr	r2, [pc, #140]	; (8009068 <HAL_SPI_TransmitReceive_IT+0x16c>)
 8008fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4a22      	ldr	r2, [pc, #136]	; (800906c <HAL_SPI_TransmitReceive_IT+0x170>)
 8008fe2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fec:	d802      	bhi.n	8008ff4 <HAL_SPI_TransmitReceive_IT+0xf8>
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d908      	bls.n	8009006 <HAL_SPI_TransmitReceive_IT+0x10a>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009002:	605a      	str	r2, [r3, #4]
 8009004:	e007      	b.n	8009016 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009014:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009024:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009030:	2b40      	cmp	r3, #64	; 0x40
 8009032:	d008      	beq.n	8009046 <HAL_SPI_TransmitReceive_IT+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	e000      	b.n	8009048 <HAL_SPI_TransmitReceive_IT+0x14c>
  }

error :
 8009046:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009050:	7dfb      	ldrb	r3, [r7, #23]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	08026b2c 	.word	0x08026b2c
 8009060:	08009413 	.word	0x08009413
 8009064:	08009479 	.word	0x08009479
 8009068:	080092c3 	.word	0x080092c3
 800906c:	08009381 	.word	0x08009381

08009070 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	099b      	lsrs	r3, r3, #6
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10f      	bne.n	80090b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	099b      	lsrs	r3, r3, #6
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d004      	beq.n	80090b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	4798      	blx	r3
    return;
 80090b2:	e0d7      	b.n	8009264 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <HAL_SPI_IRQHandler+0x66>
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	09db      	lsrs	r3, r3, #7
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d004      	beq.n	80090d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
    return;
 80090d4:	e0c6      	b.n	8009264 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	095b      	lsrs	r3, r3, #5
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10c      	bne.n	80090fc <HAL_SPI_IRQHandler+0x8c>
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	099b      	lsrs	r3, r3, #6
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <HAL_SPI_IRQHandler+0x8c>
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	0a1b      	lsrs	r3, r3, #8
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 80b4 	beq.w	8009264 <HAL_SPI_IRQHandler+0x1f4>
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	095b      	lsrs	r3, r3, #5
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 80ad 	beq.w	8009264 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	099b      	lsrs	r3, r3, #6
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d023      	beq.n	800915e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b03      	cmp	r3, #3
 8009120:	d011      	beq.n	8009146 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009126:	f043 0204 	orr.w	r2, r3, #4
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	617b      	str	r3, [r7, #20]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	617b      	str	r3, [r7, #20]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	e00b      	b.n	800915e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009146:	2300      	movs	r3, #0
 8009148:	613b      	str	r3, [r7, #16]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	613b      	str	r3, [r7, #16]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	693b      	ldr	r3, [r7, #16]
        return;
 800915c:	e082      	b.n	8009264 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	095b      	lsrs	r3, r3, #5
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d014      	beq.n	8009194 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800916e:	f043 0201 	orr.w	r2, r3, #1
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	0a1b      	lsrs	r3, r3, #8
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00c      	beq.n	80091ba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091a4:	f043 0208 	orr.w	r2, r3, #8
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091ac:	2300      	movs	r3, #0
 80091ae:	60bb      	str	r3, [r7, #8]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	60bb      	str	r3, [r7, #8]
 80091b8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d04f      	beq.n	8009262 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091d0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d104      	bne.n	80091ee <HAL_SPI_IRQHandler+0x17e>
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d034      	beq.n	8009258 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0203 	bic.w	r2, r2, #3
 80091fc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009202:	2b00      	cmp	r3, #0
 8009204:	d011      	beq.n	800922a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920a:	4a18      	ldr	r2, [pc, #96]	; (800926c <HAL_SPI_IRQHandler+0x1fc>)
 800920c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009212:	4618      	mov	r0, r3
 8009214:	f7f8 fd08 	bl	8001c28 <HAL_DMA_Abort_IT>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922e:	2b00      	cmp	r3, #0
 8009230:	d016      	beq.n	8009260 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009236:	4a0d      	ldr	r2, [pc, #52]	; (800926c <HAL_SPI_IRQHandler+0x1fc>)
 8009238:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923e:	4618      	mov	r0, r3
 8009240:	f7f8 fcf2 	bl	8001c28 <HAL_DMA_Abort_IT>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800924e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009256:	e003      	b.n	8009260 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f813 	bl	8009284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800925e:	e000      	b.n	8009262 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009260:	bf00      	nop
    return;
 8009262:	bf00      	nop
  }
}
 8009264:	3720      	adds	r7, #32
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	08009299 	.word	0x08009299

08009270 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff ffe5 	bl	8009284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d923      	bls.n	800931e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e0:	b292      	uxth	r2, r2
 80092e2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	1c9a      	adds	r2, r3, #2
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	3b02      	subs	r3, #2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009306:	b29b      	uxth	r3, r3
 8009308:	2b01      	cmp	r3, #1
 800930a:	d11f      	bne.n	800934c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800931a:	605a      	str	r2, [r3, #4]
 800931c:	e016      	b.n	800934c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f103 020c 	add.w	r2, r3, #12
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	7812      	ldrb	r2, [r2, #0]
 800932c:	b2d2      	uxtb	r2, r2
 800932e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009340:	b29b      	uxth	r3, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	b29a      	uxth	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009352:	b29b      	uxth	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10f      	bne.n	8009378 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009366:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800936c:	b29b      	uxth	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d102      	bne.n	8009378 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9cd 	bl	8009712 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800938c:	b29b      	uxth	r3, r3
 800938e:	2b01      	cmp	r3, #1
 8009390:	d912      	bls.n	80093b8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	881a      	ldrh	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	1c9a      	adds	r2, r3, #2
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	3b02      	subs	r3, #2
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093b6:	e012      	b.n	80093de <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	330c      	adds	r3, #12
 80093c2:	7812      	ldrb	r2, [r2, #0]
 80093c4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	3b01      	subs	r3, #1
 80093d8:	b29a      	uxth	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d110      	bne.n	800940a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093f6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f984 	bl	8009712 <SPI_CloseRxTx_ISR>
    }
  }
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009424:	b292      	uxth	r2, r2
 8009426:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942c:	1c9a      	adds	r2, r3, #2
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b01      	subs	r3, #1
 800943c:	b29a      	uxth	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10f      	bne.n	8009470 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800945e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d102      	bne.n	8009470 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f951 	bl	8009712 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009484:	881a      	ldrh	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	1c9a      	adds	r2, r3, #2
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800949a:	b29b      	uxth	r3, r3
 800949c:	3b01      	subs	r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d110      	bne.n	80094d0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094bc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d102      	bne.n	80094d0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f921 	bl	8009712 <SPI_CloseRxTx_ISR>
    }
  }
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094e8:	e04c      	b.n	8009584 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d048      	beq.n	8009584 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80094f2:	f7f7 febd 	bl	8001270 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d902      	bls.n	8009508 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d13d      	bne.n	8009584 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009516:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009520:	d111      	bne.n	8009546 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800952a:	d004      	beq.n	8009536 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009534:	d107      	bne.n	8009546 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009544:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800954e:	d10f      	bne.n	8009570 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800956e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e00f      	b.n	80095a4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4013      	ands	r3, r2
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	429a      	cmp	r2, r3
 8009592:	bf0c      	ite	eq
 8009594:	2301      	moveq	r3, #1
 8009596:	2300      	movne	r3, #0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d1a3      	bne.n	80094ea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80095ba:	e057      	b.n	800966c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80095c2:	d106      	bne.n	80095d2 <SPI_WaitFifoStateUntilTimeout+0x26>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d103      	bne.n	80095d2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	330c      	adds	r3, #12
 80095d0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d8:	d048      	beq.n	800966c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80095da:	f7f7 fe49 	bl	8001270 <HAL_GetTick>
 80095de:	4602      	mov	r2, r0
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d902      	bls.n	80095f0 <SPI_WaitFifoStateUntilTimeout+0x44>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d13d      	bne.n	800966c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009608:	d111      	bne.n	800962e <SPI_WaitFifoStateUntilTimeout+0x82>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009612:	d004      	beq.n	800961e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800961c:	d107      	bne.n	800962e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800962c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009636:	d10f      	bne.n	8009658 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009656:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e008      	b.n	800967e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689a      	ldr	r2, [r3, #8]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	4013      	ands	r3, r2
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	429a      	cmp	r2, r3
 800967a:	d19f      	bne.n	80095bc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b086      	sub	sp, #24
 800968a:	af02      	add	r7, sp, #8
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2200      	movs	r2, #0
 800969a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f7ff ff84 	bl	80095ac <SPI_WaitFifoStateUntilTimeout>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d007      	beq.n	80096ba <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ae:	f043 0220 	orr.w	r2, r3, #32
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e027      	b.n	800970a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2200      	movs	r2, #0
 80096c2:	2180      	movs	r1, #128	; 0x80
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f7ff ff07 	bl	80094d8 <SPI_WaitFlagStateUntilTimeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d007      	beq.n	80096e0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d4:	f043 0220 	orr.w	r2, r3, #32
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e014      	b.n	800970a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f7ff ff5d 	bl	80095ac <SPI_WaitFifoStateUntilTimeout>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fc:	f043 0220 	orr.w	r2, r3, #32
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e000      	b.n	800970a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800971a:	f7f7 fda9 	bl	8001270 <HAL_GetTick>
 800971e:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 0220 	bic.w	r2, r2, #32
 800972e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	2164      	movs	r1, #100	; 0x64
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ffa6 	bl	8009686 <SPI_EndRxTxTransaction>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d005      	beq.n	800974c <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009744:	f043 0220 	orr.w	r2, r3, #32
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009750:	2b00      	cmp	r3, #0
 8009752:	d115      	bne.n	8009780 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b04      	cmp	r3, #4
 800975e:	d107      	bne.n	8009770 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff fd81 	bl	8009270 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800976e:	e00e      	b.n	800978e <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f018 fd7d 	bl	8022278 <HAL_SPI_TxRxCpltCallback>
}
 800977e:	e006      	b.n	800978e <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff fd7b 	bl	8009284 <HAL_SPI_ErrorCallback>
}
 800978e:	bf00      	nop
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e0a1      	b.n	80098ee <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a52      	ldr	r2, [pc, #328]	; (80098f8 <HAL_TIM_Base_Init+0x160>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d045      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097bc:	d040      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a4e      	ldr	r2, [pc, #312]	; (80098fc <HAL_TIM_Base_Init+0x164>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d03b      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a4c      	ldr	r2, [pc, #304]	; (8009900 <HAL_TIM_Base_Init+0x168>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d036      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a4b      	ldr	r2, [pc, #300]	; (8009904 <HAL_TIM_Base_Init+0x16c>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d031      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a49      	ldr	r2, [pc, #292]	; (8009908 <HAL_TIM_Base_Init+0x170>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d02c      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a48      	ldr	r2, [pc, #288]	; (800990c <HAL_TIM_Base_Init+0x174>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d027      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a46      	ldr	r2, [pc, #280]	; (8009910 <HAL_TIM_Base_Init+0x178>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d022      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a45      	ldr	r2, [pc, #276]	; (8009914 <HAL_TIM_Base_Init+0x17c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d01d      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a43      	ldr	r2, [pc, #268]	; (8009918 <HAL_TIM_Base_Init+0x180>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d018      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a42      	ldr	r2, [pc, #264]	; (800991c <HAL_TIM_Base_Init+0x184>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d013      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a40      	ldr	r2, [pc, #256]	; (8009920 <HAL_TIM_Base_Init+0x188>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d00e      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a3f      	ldr	r2, [pc, #252]	; (8009924 <HAL_TIM_Base_Init+0x18c>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d009      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a3d      	ldr	r2, [pc, #244]	; (8009928 <HAL_TIM_Base_Init+0x190>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d004      	beq.n	8009840 <HAL_TIM_Base_Init+0xa8>
 8009836:	f240 110d 	movw	r1, #269	; 0x10d
 800983a:	483c      	ldr	r0, [pc, #240]	; (800992c <HAL_TIM_Base_Init+0x194>)
 800983c:	f014 feec 	bl	801e618 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d014      	beq.n	8009872 <HAL_TIM_Base_Init+0xda>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	2b10      	cmp	r3, #16
 800984e:	d010      	beq.n	8009872 <HAL_TIM_Base_Init+0xda>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	2b20      	cmp	r3, #32
 8009856:	d00c      	beq.n	8009872 <HAL_TIM_Base_Init+0xda>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	2b40      	cmp	r3, #64	; 0x40
 800985e:	d008      	beq.n	8009872 <HAL_TIM_Base_Init+0xda>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b60      	cmp	r3, #96	; 0x60
 8009866:	d004      	beq.n	8009872 <HAL_TIM_Base_Init+0xda>
 8009868:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800986c:	482f      	ldr	r0, [pc, #188]	; (800992c <HAL_TIM_Base_Init+0x194>)
 800986e:	f014 fed3 	bl	801e618 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <HAL_TIM_Base_Init+0x100>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009882:	d009      	beq.n	8009898 <HAL_TIM_Base_Init+0x100>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800988c:	d004      	beq.n	8009898 <HAL_TIM_Base_Init+0x100>
 800988e:	f240 110f 	movw	r1, #271	; 0x10f
 8009892:	4826      	ldr	r0, [pc, #152]	; (800992c <HAL_TIM_Base_Init+0x194>)
 8009894:	f014 fec0 	bl	801e618 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <HAL_TIM_Base_Init+0x11a>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	2b80      	cmp	r3, #128	; 0x80
 80098a6:	d004      	beq.n	80098b2 <HAL_TIM_Base_Init+0x11a>
 80098a8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80098ac:	481f      	ldr	r0, [pc, #124]	; (800992c <HAL_TIM_Base_Init+0x194>)
 80098ae:	f014 feb3 	bl	801e618 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f019 fd5c 	bl	8023384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3304      	adds	r3, #4
 80098dc:	4619      	mov	r1, r3
 80098de:	4610      	mov	r0, r2
 80098e0:	f000 fde6 	bl	800a4b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	40010000 	.word	0x40010000
 80098fc:	40000400 	.word	0x40000400
 8009900:	40000800 	.word	0x40000800
 8009904:	40000c00 	.word	0x40000c00
 8009908:	40001000 	.word	0x40001000
 800990c:	40001400 	.word	0x40001400
 8009910:	40010400 	.word	0x40010400
 8009914:	40014000 	.word	0x40014000
 8009918:	40014400 	.word	0x40014400
 800991c:	40014800 	.word	0x40014800
 8009920:	40001800 	.word	0x40001800
 8009924:	40001c00 	.word	0x40001c00
 8009928:	40002000 	.word	0x40002000
 800992c:	08026b64 	.word	0x08026b64

08009930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a35      	ldr	r2, [pc, #212]	; (8009a14 <HAL_TIM_Base_Start_IT+0xe4>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d045      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994a:	d040      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a31      	ldr	r2, [pc, #196]	; (8009a18 <HAL_TIM_Base_Start_IT+0xe8>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d03b      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a30      	ldr	r2, [pc, #192]	; (8009a1c <HAL_TIM_Base_Start_IT+0xec>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d036      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a2e      	ldr	r2, [pc, #184]	; (8009a20 <HAL_TIM_Base_Start_IT+0xf0>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d031      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a2d      	ldr	r2, [pc, #180]	; (8009a24 <HAL_TIM_Base_Start_IT+0xf4>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d02c      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a2b      	ldr	r2, [pc, #172]	; (8009a28 <HAL_TIM_Base_Start_IT+0xf8>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d027      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a2a      	ldr	r2, [pc, #168]	; (8009a2c <HAL_TIM_Base_Start_IT+0xfc>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d022      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a28      	ldr	r2, [pc, #160]	; (8009a30 <HAL_TIM_Base_Start_IT+0x100>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d01d      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a27      	ldr	r2, [pc, #156]	; (8009a34 <HAL_TIM_Base_Start_IT+0x104>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d018      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a25      	ldr	r2, [pc, #148]	; (8009a38 <HAL_TIM_Base_Start_IT+0x108>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d013      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a24      	ldr	r2, [pc, #144]	; (8009a3c <HAL_TIM_Base_Start_IT+0x10c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00e      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a22      	ldr	r2, [pc, #136]	; (8009a40 <HAL_TIM_Base_Start_IT+0x110>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d009      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a21      	ldr	r2, [pc, #132]	; (8009a44 <HAL_TIM_Base_Start_IT+0x114>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d004      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x9e>
 80099c4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80099c8:	481f      	ldr	r0, [pc, #124]	; (8009a48 <HAL_TIM_Base_Start_IT+0x118>)
 80099ca:	f014 fe25 	bl	801e618 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68da      	ldr	r2, [r3, #12]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f042 0201 	orr.w	r2, r2, #1
 80099dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	4b19      	ldr	r3, [pc, #100]	; (8009a4c <HAL_TIM_Base_Start_IT+0x11c>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b06      	cmp	r3, #6
 80099ee:	d00b      	beq.n	8009a08 <HAL_TIM_Base_Start_IT+0xd8>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f6:	d007      	beq.n	8009a08 <HAL_TIM_Base_Start_IT+0xd8>
  {
    __HAL_TIM_ENABLE(htim);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0201 	orr.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	40010000 	.word	0x40010000
 8009a18:	40000400 	.word	0x40000400
 8009a1c:	40000800 	.word	0x40000800
 8009a20:	40000c00 	.word	0x40000c00
 8009a24:	40001000 	.word	0x40001000
 8009a28:	40001400 	.word	0x40001400
 8009a2c:	40010400 	.word	0x40010400
 8009a30:	40014000 	.word	0x40014000
 8009a34:	40014400 	.word	0x40014400
 8009a38:	40014800 	.word	0x40014800
 8009a3c:	40001800 	.word	0x40001800
 8009a40:	40001c00 	.word	0x40001c00
 8009a44:	40002000 	.word	0x40002000
 8009a48:	08026b64 	.word	0x08026b64
 8009a4c:	00010007 	.word	0x00010007

08009a50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a36      	ldr	r2, [pc, #216]	; (8009b38 <HAL_TIM_Base_Stop_IT+0xe8>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d045      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a6a:	d040      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a32      	ldr	r2, [pc, #200]	; (8009b3c <HAL_TIM_Base_Stop_IT+0xec>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d03b      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a31      	ldr	r2, [pc, #196]	; (8009b40 <HAL_TIM_Base_Stop_IT+0xf0>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d036      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a2f      	ldr	r2, [pc, #188]	; (8009b44 <HAL_TIM_Base_Stop_IT+0xf4>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d031      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a2e      	ldr	r2, [pc, #184]	; (8009b48 <HAL_TIM_Base_Stop_IT+0xf8>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d02c      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a2c      	ldr	r2, [pc, #176]	; (8009b4c <HAL_TIM_Base_Stop_IT+0xfc>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d027      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a2b      	ldr	r2, [pc, #172]	; (8009b50 <HAL_TIM_Base_Stop_IT+0x100>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d022      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a29      	ldr	r2, [pc, #164]	; (8009b54 <HAL_TIM_Base_Stop_IT+0x104>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d01d      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a28      	ldr	r2, [pc, #160]	; (8009b58 <HAL_TIM_Base_Stop_IT+0x108>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d018      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a26      	ldr	r2, [pc, #152]	; (8009b5c <HAL_TIM_Base_Stop_IT+0x10c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d013      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a25      	ldr	r2, [pc, #148]	; (8009b60 <HAL_TIM_Base_Stop_IT+0x110>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d00e      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a23      	ldr	r2, [pc, #140]	; (8009b64 <HAL_TIM_Base_Stop_IT+0x114>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d009      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a22      	ldr	r2, [pc, #136]	; (8009b68 <HAL_TIM_Base_Stop_IT+0x118>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d004      	beq.n	8009aee <HAL_TIM_Base_Stop_IT+0x9e>
 8009ae4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8009ae8:	4820      	ldr	r0, [pc, #128]	; (8009b6c <HAL_TIM_Base_Stop_IT+0x11c>)
 8009aea:	f014 fd95 	bl	801e618 <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0201 	bic.w	r2, r2, #1
 8009afc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6a1a      	ldr	r2, [r3, #32]
 8009b04:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b08:	4013      	ands	r3, r2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10f      	bne.n	8009b2e <HAL_TIM_Base_Stop_IT+0xde>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6a1a      	ldr	r2, [r3, #32]
 8009b14:	f240 4344 	movw	r3, #1092	; 0x444
 8009b18:	4013      	ands	r3, r2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d107      	bne.n	8009b2e <HAL_TIM_Base_Stop_IT+0xde>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 0201 	bic.w	r2, r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	40010000 	.word	0x40010000
 8009b3c:	40000400 	.word	0x40000400
 8009b40:	40000800 	.word	0x40000800
 8009b44:	40000c00 	.word	0x40000c00
 8009b48:	40001000 	.word	0x40001000
 8009b4c:	40001400 	.word	0x40001400
 8009b50:	40010400 	.word	0x40010400
 8009b54:	40014000 	.word	0x40014000
 8009b58:	40014400 	.word	0x40014400
 8009b5c:	40014800 	.word	0x40014800
 8009b60:	40001800 	.word	0x40001800
 8009b64:	40001c00 	.word	0x40001c00
 8009b68:	40002000 	.word	0x40002000
 8009b6c:	08026b64 	.word	0x08026b64

08009b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d122      	bne.n	8009bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d11b      	bne.n	8009bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f06f 0202 	mvn.w	r2, #2
 8009b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fc5e 	bl	800a474 <HAL_TIM_IC_CaptureCallback>
 8009bb8:	e005      	b.n	8009bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fc50 	bl	800a460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fc61 	bl	800a488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	f003 0304 	and.w	r3, r3, #4
 8009bd6:	2b04      	cmp	r3, #4
 8009bd8:	d122      	bne.n	8009c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d11b      	bne.n	8009c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f06f 0204 	mvn.w	r2, #4
 8009bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fc34 	bl	800a474 <HAL_TIM_IC_CaptureCallback>
 8009c0c:	e005      	b.n	8009c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fc26 	bl	800a460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fc37 	bl	800a488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0308 	and.w	r3, r3, #8
 8009c2a:	2b08      	cmp	r3, #8
 8009c2c:	d122      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0308 	and.w	r3, r3, #8
 8009c38:	2b08      	cmp	r3, #8
 8009c3a:	d11b      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f06f 0208 	mvn.w	r2, #8
 8009c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	f003 0303 	and.w	r3, r3, #3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fc0a 	bl	800a474 <HAL_TIM_IC_CaptureCallback>
 8009c60:	e005      	b.n	8009c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fbfc 	bl	800a460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fc0d 	bl	800a488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0310 	and.w	r3, r3, #16
 8009c7e:	2b10      	cmp	r3, #16
 8009c80:	d122      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f003 0310 	and.w	r3, r3, #16
 8009c8c:	2b10      	cmp	r3, #16
 8009c8e:	d11b      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f06f 0210 	mvn.w	r2, #16
 8009c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2208      	movs	r2, #8
 8009c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fbe0 	bl	800a474 <HAL_TIM_IC_CaptureCallback>
 8009cb4:	e005      	b.n	8009cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fbd2 	bl	800a460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fbe3 	bl	800a488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d10e      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d107      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f06f 0201 	mvn.w	r2, #1
 8009cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fbac 	bl	800a44c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cfe:	2b80      	cmp	r3, #128	; 0x80
 8009d00:	d10e      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0c:	2b80      	cmp	r3, #128	; 0x80
 8009d0e:	d107      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fe2a 	bl	800a974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d2e:	d10e      	bne.n	8009d4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d3a:	2b80      	cmp	r3, #128	; 0x80
 8009d3c:	d107      	bne.n	8009d4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fe1d 	bl	800a988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d58:	2b40      	cmp	r3, #64	; 0x40
 8009d5a:	d10e      	bne.n	8009d7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d66:	2b40      	cmp	r3, #64	; 0x40
 8009d68:	d107      	bne.n	8009d7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fb91 	bl	800a49c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	f003 0320 	and.w	r3, r3, #32
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	d10e      	bne.n	8009da6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b20      	cmp	r3, #32
 8009d94:	d107      	bne.n	8009da6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f06f 0220 	mvn.w	r2, #32
 8009d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fddd 	bl	800a960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d101      	bne.n	8009dc8 <HAL_TIM_ConfigClockSource+0x18>
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	e331      	b.n	800a42c <HAL_TIM_ConfigClockSource+0x67c>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009de0:	d029      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dea:	d024      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d020      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b10      	cmp	r3, #16
 8009dfa:	d01c      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b20      	cmp	r3, #32
 8009e02:	d018      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b30      	cmp	r3, #48	; 0x30
 8009e0a:	d014      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b40      	cmp	r3, #64	; 0x40
 8009e12:	d010      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b50      	cmp	r3, #80	; 0x50
 8009e1a:	d00c      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b60      	cmp	r3, #96	; 0x60
 8009e22:	d008      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b70      	cmp	r3, #112	; 0x70
 8009e2a:	d004      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x86>
 8009e2c:	f241 11f6 	movw	r1, #4598	; 0x11f6
 8009e30:	4893      	ldr	r0, [pc, #588]	; (800a080 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009e32:	f014 fbf1 	bl	801e618 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	4b90      	ldr	r3, [pc, #576]	; (800a084 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009e42:	4013      	ands	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e4c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e5e:	f000 812d 	beq.w	800a0bc <HAL_TIM_ConfigClockSource+0x30c>
 8009e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e66:	f200 82d5 	bhi.w	800a414 <HAL_TIM_ConfigClockSource+0x664>
 8009e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6e:	d02e      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x11e>
 8009e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e74:	f200 82ce 	bhi.w	800a414 <HAL_TIM_ConfigClockSource+0x664>
 8009e78:	2b70      	cmp	r3, #112	; 0x70
 8009e7a:	f000 8082 	beq.w	8009f82 <HAL_TIM_ConfigClockSource+0x1d2>
 8009e7e:	2b70      	cmp	r3, #112	; 0x70
 8009e80:	f200 82c8 	bhi.w	800a414 <HAL_TIM_ConfigClockSource+0x664>
 8009e84:	2b60      	cmp	r3, #96	; 0x60
 8009e86:	f000 81e0 	beq.w	800a24a <HAL_TIM_ConfigClockSource+0x49a>
 8009e8a:	2b60      	cmp	r3, #96	; 0x60
 8009e8c:	f200 82c2 	bhi.w	800a414 <HAL_TIM_ConfigClockSource+0x664>
 8009e90:	2b50      	cmp	r3, #80	; 0x50
 8009e92:	f000 8184 	beq.w	800a19e <HAL_TIM_ConfigClockSource+0x3ee>
 8009e96:	2b50      	cmp	r3, #80	; 0x50
 8009e98:	f200 82bc 	bhi.w	800a414 <HAL_TIM_ConfigClockSource+0x664>
 8009e9c:	2b40      	cmp	r3, #64	; 0x40
 8009e9e:	f000 8237 	beq.w	800a310 <HAL_TIM_ConfigClockSource+0x560>
 8009ea2:	2b40      	cmp	r3, #64	; 0x40
 8009ea4:	f200 82b6 	bhi.w	800a414 <HAL_TIM_ConfigClockSource+0x664>
 8009ea8:	2b30      	cmp	r3, #48	; 0x30
 8009eaa:	f000 8287 	beq.w	800a3bc <HAL_TIM_ConfigClockSource+0x60c>
 8009eae:	2b30      	cmp	r3, #48	; 0x30
 8009eb0:	f200 82b0 	bhi.w	800a414 <HAL_TIM_ConfigClockSource+0x664>
 8009eb4:	2b20      	cmp	r3, #32
 8009eb6:	f000 8281 	beq.w	800a3bc <HAL_TIM_ConfigClockSource+0x60c>
 8009eba:	2b20      	cmp	r3, #32
 8009ebc:	f200 82aa 	bhi.w	800a414 <HAL_TIM_ConfigClockSource+0x664>
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 827b 	beq.w	800a3bc <HAL_TIM_ConfigClockSource+0x60c>
 8009ec6:	2b10      	cmp	r3, #16
 8009ec8:	f000 8278 	beq.w	800a3bc <HAL_TIM_ConfigClockSource+0x60c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009ecc:	e2a2      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x664>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a6d      	ldr	r2, [pc, #436]	; (800a088 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	f000 829f 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ee2:	f000 8299 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a68      	ldr	r2, [pc, #416]	; (800a08c <HAL_TIM_ConfigClockSource+0x2dc>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	f000 8293 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a66      	ldr	r2, [pc, #408]	; (800a090 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	f000 828d 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a64      	ldr	r2, [pc, #400]	; (800a094 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	f000 8287 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a62      	ldr	r2, [pc, #392]	; (800a098 <HAL_TIM_ConfigClockSource+0x2e8>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	f000 8281 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a60      	ldr	r2, [pc, #384]	; (800a09c <HAL_TIM_ConfigClockSource+0x2ec>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	f000 827b 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a5e      	ldr	r2, [pc, #376]	; (800a0a0 <HAL_TIM_ConfigClockSource+0x2f0>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	f000 8275 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a5c      	ldr	r2, [pc, #368]	; (800a0a4 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	f000 826f 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a5a      	ldr	r2, [pc, #360]	; (800a0a8 <HAL_TIM_ConfigClockSource+0x2f8>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	f000 8269 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a58      	ldr	r2, [pc, #352]	; (800a0ac <HAL_TIM_ConfigClockSource+0x2fc>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	f000 8263 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a56      	ldr	r2, [pc, #344]	; (800a0b0 <HAL_TIM_ConfigClockSource+0x300>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	f000 825d 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a54      	ldr	r2, [pc, #336]	; (800a0b4 <HAL_TIM_ConfigClockSource+0x304>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	f000 8257 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a52      	ldr	r2, [pc, #328]	; (800a0b8 <HAL_TIM_ConfigClockSource+0x308>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	f000 8251 	beq.w	800a418 <HAL_TIM_ConfigClockSource+0x668>
 8009f76:	f241 2102 	movw	r1, #4610	; 0x1202
 8009f7a:	4841      	ldr	r0, [pc, #260]	; (800a080 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009f7c:	f014 fb4c 	bl	801e618 <assert_failed>
      break;
 8009f80:	e24a      	b.n	800a418 <HAL_TIM_ConfigClockSource+0x668>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a40      	ldr	r2, [pc, #256]	; (800a088 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d027      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0x22c>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f94:	d022      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0x22c>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a3c      	ldr	r2, [pc, #240]	; (800a08c <HAL_TIM_ConfigClockSource+0x2dc>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d01d      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0x22c>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a3a      	ldr	r2, [pc, #232]	; (800a090 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d018      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0x22c>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a39      	ldr	r2, [pc, #228]	; (800a094 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d013      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0x22c>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a39      	ldr	r2, [pc, #228]	; (800a0a0 <HAL_TIM_ConfigClockSource+0x2f0>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d00e      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0x22c>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a38      	ldr	r2, [pc, #224]	; (800a0a4 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d009      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0x22c>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a38      	ldr	r2, [pc, #224]	; (800a0b0 <HAL_TIM_ConfigClockSource+0x300>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d004      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0x22c>
 8009fd2:	f241 2109 	movw	r1, #4617	; 0x1209
 8009fd6:	482a      	ldr	r0, [pc, #168]	; (800a080 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009fd8:	f014 fb1e 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d013      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x25c>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fec:	d00e      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x25c>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ff6:	d009      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x25c>
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a000:	d004      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x25c>
 800a002:	f241 210c 	movw	r1, #4620	; 0x120c
 800a006:	481e      	ldr	r0, [pc, #120]	; (800a080 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a008:	f014 fb06 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a014:	d014      	beq.n	800a040 <HAL_TIM_ConfigClockSource+0x290>
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d010      	beq.n	800a040 <HAL_TIM_ConfigClockSource+0x290>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00c      	beq.n	800a040 <HAL_TIM_ConfigClockSource+0x290>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d008      	beq.n	800a040 <HAL_TIM_ConfigClockSource+0x290>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	2b0a      	cmp	r3, #10
 800a034:	d004      	beq.n	800a040 <HAL_TIM_ConfigClockSource+0x290>
 800a036:	f241 210d 	movw	r1, #4621	; 0x120d
 800a03a:	4811      	ldr	r0, [pc, #68]	; (800a080 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a03c:	f014 faec 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	2b0f      	cmp	r3, #15
 800a046:	d904      	bls.n	800a052 <HAL_TIM_ConfigClockSource+0x2a2>
 800a048:	f241 210e 	movw	r1, #4622	; 0x120e
 800a04c:	480c      	ldr	r0, [pc, #48]	; (800a080 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a04e:	f014 fae3 	bl	801e618 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	6899      	ldr	r1, [r3, #8]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	f000 fb3f 	bl	800a6e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a074:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	609a      	str	r2, [r3, #8]
      break;
 800a07e:	e1cc      	b.n	800a41a <HAL_TIM_ConfigClockSource+0x66a>
 800a080:	08026b64 	.word	0x08026b64
 800a084:	fffeff88 	.word	0xfffeff88
 800a088:	40010000 	.word	0x40010000
 800a08c:	40000400 	.word	0x40000400
 800a090:	40000800 	.word	0x40000800
 800a094:	40000c00 	.word	0x40000c00
 800a098:	40001000 	.word	0x40001000
 800a09c:	40001400 	.word	0x40001400
 800a0a0:	40010400 	.word	0x40010400
 800a0a4:	40014000 	.word	0x40014000
 800a0a8:	40014400 	.word	0x40014400
 800a0ac:	40014800 	.word	0x40014800
 800a0b0:	40001800 	.word	0x40001800
 800a0b4:	40001c00 	.word	0x40001c00
 800a0b8:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a8d      	ldr	r2, [pc, #564]	; (800a2f8 <HAL_TIM_ConfigClockSource+0x548>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d01d      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0x352>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ce:	d018      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0x352>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a89      	ldr	r2, [pc, #548]	; (800a2fc <HAL_TIM_ConfigClockSource+0x54c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d013      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0x352>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a88      	ldr	r2, [pc, #544]	; (800a300 <HAL_TIM_ConfigClockSource+0x550>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d00e      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0x352>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a86      	ldr	r2, [pc, #536]	; (800a304 <HAL_TIM_ConfigClockSource+0x554>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d009      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0x352>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a85      	ldr	r2, [pc, #532]	; (800a308 <HAL_TIM_ConfigClockSource+0x558>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d004      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0x352>
 800a0f8:	f241 2121 	movw	r1, #4641	; 0x1221
 800a0fc:	4883      	ldr	r0, [pc, #524]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a0fe:	f014 fa8b 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d013      	beq.n	800a132 <HAL_TIM_ConfigClockSource+0x382>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a112:	d00e      	beq.n	800a132 <HAL_TIM_ConfigClockSource+0x382>
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a11c:	d009      	beq.n	800a132 <HAL_TIM_ConfigClockSource+0x382>
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a126:	d004      	beq.n	800a132 <HAL_TIM_ConfigClockSource+0x382>
 800a128:	f241 2124 	movw	r1, #4644	; 0x1224
 800a12c:	4877      	ldr	r0, [pc, #476]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a12e:	f014 fa73 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a13a:	d014      	beq.n	800a166 <HAL_TIM_ConfigClockSource+0x3b6>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d010      	beq.n	800a166 <HAL_TIM_ConfigClockSource+0x3b6>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00c      	beq.n	800a166 <HAL_TIM_ConfigClockSource+0x3b6>
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	2b02      	cmp	r3, #2
 800a152:	d008      	beq.n	800a166 <HAL_TIM_ConfigClockSource+0x3b6>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	2b0a      	cmp	r3, #10
 800a15a:	d004      	beq.n	800a166 <HAL_TIM_ConfigClockSource+0x3b6>
 800a15c:	f241 2125 	movw	r1, #4645	; 0x1225
 800a160:	486a      	ldr	r0, [pc, #424]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a162:	f014 fa59 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	2b0f      	cmp	r3, #15
 800a16c:	d904      	bls.n	800a178 <HAL_TIM_ConfigClockSource+0x3c8>
 800a16e:	f241 2126 	movw	r1, #4646	; 0x1226
 800a172:	4866      	ldr	r0, [pc, #408]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a174:	f014 fa50 	bl	801e618 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	6899      	ldr	r1, [r3, #8]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f000 faac 	bl	800a6e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689a      	ldr	r2, [r3, #8]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a19a:	609a      	str	r2, [r3, #8]
      break;
 800a19c:	e13d      	b.n	800a41a <HAL_TIM_ConfigClockSource+0x66a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a55      	ldr	r2, [pc, #340]	; (800a2f8 <HAL_TIM_ConfigClockSource+0x548>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d01d      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0x434>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b0:	d018      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0x434>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a51      	ldr	r2, [pc, #324]	; (800a2fc <HAL_TIM_ConfigClockSource+0x54c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d013      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0x434>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a4f      	ldr	r2, [pc, #316]	; (800a300 <HAL_TIM_ConfigClockSource+0x550>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d00e      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0x434>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a4e      	ldr	r2, [pc, #312]	; (800a304 <HAL_TIM_ConfigClockSource+0x554>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d009      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0x434>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a4c      	ldr	r2, [pc, #304]	; (800a308 <HAL_TIM_ConfigClockSource+0x558>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d004      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0x434>
 800a1da:	f241 2135 	movw	r1, #4661	; 0x1235
 800a1de:	484b      	ldr	r0, [pc, #300]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a1e0:	f014 fa1a 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ec:	d014      	beq.n	800a218 <HAL_TIM_ConfigClockSource+0x468>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d010      	beq.n	800a218 <HAL_TIM_ConfigClockSource+0x468>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00c      	beq.n	800a218 <HAL_TIM_ConfigClockSource+0x468>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d008      	beq.n	800a218 <HAL_TIM_ConfigClockSource+0x468>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2b0a      	cmp	r3, #10
 800a20c:	d004      	beq.n	800a218 <HAL_TIM_ConfigClockSource+0x468>
 800a20e:	f241 2138 	movw	r1, #4664	; 0x1238
 800a212:	483e      	ldr	r0, [pc, #248]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a214:	f014 fa00 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	2b0f      	cmp	r3, #15
 800a21e:	d904      	bls.n	800a22a <HAL_TIM_ConfigClockSource+0x47a>
 800a220:	f241 2139 	movw	r1, #4665	; 0x1239
 800a224:	4839      	ldr	r0, [pc, #228]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a226:	f014 f9f7 	bl	801e618 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	6859      	ldr	r1, [r3, #4]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	461a      	mov	r2, r3
 800a238:	f000 f9da 	bl	800a5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2150      	movs	r1, #80	; 0x50
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fa33 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 800a248:	e0e7      	b.n	800a41a <HAL_TIM_ConfigClockSource+0x66a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a2a      	ldr	r2, [pc, #168]	; (800a2f8 <HAL_TIM_ConfigClockSource+0x548>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d01d      	beq.n	800a290 <HAL_TIM_ConfigClockSource+0x4e0>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25c:	d018      	beq.n	800a290 <HAL_TIM_ConfigClockSource+0x4e0>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a26      	ldr	r2, [pc, #152]	; (800a2fc <HAL_TIM_ConfigClockSource+0x54c>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d013      	beq.n	800a290 <HAL_TIM_ConfigClockSource+0x4e0>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a24      	ldr	r2, [pc, #144]	; (800a300 <HAL_TIM_ConfigClockSource+0x550>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00e      	beq.n	800a290 <HAL_TIM_ConfigClockSource+0x4e0>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a23      	ldr	r2, [pc, #140]	; (800a304 <HAL_TIM_ConfigClockSource+0x554>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d009      	beq.n	800a290 <HAL_TIM_ConfigClockSource+0x4e0>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a21      	ldr	r2, [pc, #132]	; (800a308 <HAL_TIM_ConfigClockSource+0x558>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d004      	beq.n	800a290 <HAL_TIM_ConfigClockSource+0x4e0>
 800a286:	f241 2145 	movw	r1, #4677	; 0x1245
 800a28a:	4820      	ldr	r0, [pc, #128]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a28c:	f014 f9c4 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a298:	d014      	beq.n	800a2c4 <HAL_TIM_ConfigClockSource+0x514>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d010      	beq.n	800a2c4 <HAL_TIM_ConfigClockSource+0x514>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00c      	beq.n	800a2c4 <HAL_TIM_ConfigClockSource+0x514>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d008      	beq.n	800a2c4 <HAL_TIM_ConfigClockSource+0x514>
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	2b0a      	cmp	r3, #10
 800a2b8:	d004      	beq.n	800a2c4 <HAL_TIM_ConfigClockSource+0x514>
 800a2ba:	f241 2148 	movw	r1, #4680	; 0x1248
 800a2be:	4813      	ldr	r0, [pc, #76]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a2c0:	f014 f9aa 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	2b0f      	cmp	r3, #15
 800a2ca:	d904      	bls.n	800a2d6 <HAL_TIM_ConfigClockSource+0x526>
 800a2cc:	f241 2149 	movw	r1, #4681	; 0x1249
 800a2d0:	480e      	ldr	r0, [pc, #56]	; (800a30c <HAL_TIM_ConfigClockSource+0x55c>)
 800a2d2:	f014 f9a1 	bl	801e618 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	6859      	ldr	r1, [r3, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f000 f9b3 	bl	800a64e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2160      	movs	r1, #96	; 0x60
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 f9dd 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 800a2f4:	e091      	b.n	800a41a <HAL_TIM_ConfigClockSource+0x66a>
 800a2f6:	bf00      	nop
 800a2f8:	40010000 	.word	0x40010000
 800a2fc:	40000400 	.word	0x40000400
 800a300:	40000800 	.word	0x40000800
 800a304:	40000c00 	.word	0x40000c00
 800a308:	40010400 	.word	0x40010400
 800a30c:	08026b64 	.word	0x08026b64
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a47      	ldr	r2, [pc, #284]	; (800a434 <HAL_TIM_ConfigClockSource+0x684>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d01d      	beq.n	800a356 <HAL_TIM_ConfigClockSource+0x5a6>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a322:	d018      	beq.n	800a356 <HAL_TIM_ConfigClockSource+0x5a6>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a43      	ldr	r2, [pc, #268]	; (800a438 <HAL_TIM_ConfigClockSource+0x688>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d013      	beq.n	800a356 <HAL_TIM_ConfigClockSource+0x5a6>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a42      	ldr	r2, [pc, #264]	; (800a43c <HAL_TIM_ConfigClockSource+0x68c>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d00e      	beq.n	800a356 <HAL_TIM_ConfigClockSource+0x5a6>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a40      	ldr	r2, [pc, #256]	; (800a440 <HAL_TIM_ConfigClockSource+0x690>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d009      	beq.n	800a356 <HAL_TIM_ConfigClockSource+0x5a6>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a3f      	ldr	r2, [pc, #252]	; (800a444 <HAL_TIM_ConfigClockSource+0x694>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d004      	beq.n	800a356 <HAL_TIM_ConfigClockSource+0x5a6>
 800a34c:	f241 2155 	movw	r1, #4693	; 0x1255
 800a350:	483d      	ldr	r0, [pc, #244]	; (800a448 <HAL_TIM_ConfigClockSource+0x698>)
 800a352:	f014 f961 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a35e:	d014      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x5da>
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d010      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x5da>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00c      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x5da>
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d008      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x5da>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	2b0a      	cmp	r3, #10
 800a37e:	d004      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0x5da>
 800a380:	f241 2158 	movw	r1, #4696	; 0x1258
 800a384:	4830      	ldr	r0, [pc, #192]	; (800a448 <HAL_TIM_ConfigClockSource+0x698>)
 800a386:	f014 f947 	bl	801e618 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	2b0f      	cmp	r3, #15
 800a390:	d904      	bls.n	800a39c <HAL_TIM_ConfigClockSource+0x5ec>
 800a392:	f241 2159 	movw	r1, #4697	; 0x1259
 800a396:	482c      	ldr	r0, [pc, #176]	; (800a448 <HAL_TIM_ConfigClockSource+0x698>)
 800a398:	f014 f93e 	bl	801e618 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	6859      	ldr	r1, [r3, #4]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	f000 f921 	bl	800a5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2140      	movs	r1, #64	; 0x40
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 f97a 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 800a3ba:	e02e      	b.n	800a41a <HAL_TIM_ConfigClockSource+0x66a>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a1c      	ldr	r2, [pc, #112]	; (800a434 <HAL_TIM_ConfigClockSource+0x684>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d01d      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x652>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ce:	d018      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x652>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a18      	ldr	r2, [pc, #96]	; (800a438 <HAL_TIM_ConfigClockSource+0x688>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d013      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x652>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a17      	ldr	r2, [pc, #92]	; (800a43c <HAL_TIM_ConfigClockSource+0x68c>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00e      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x652>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a15      	ldr	r2, [pc, #84]	; (800a440 <HAL_TIM_ConfigClockSource+0x690>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d009      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x652>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a14      	ldr	r2, [pc, #80]	; (800a444 <HAL_TIM_ConfigClockSource+0x694>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d004      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x652>
 800a3f8:	f241 2168 	movw	r1, #4712	; 0x1268
 800a3fc:	4812      	ldr	r0, [pc, #72]	; (800a448 <HAL_TIM_ConfigClockSource+0x698>)
 800a3fe:	f014 f90b 	bl	801e618 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4619      	mov	r1, r3
 800a40c:	4610      	mov	r0, r2
 800a40e:	f000 f94e 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 800a412:	e002      	b.n	800a41a <HAL_TIM_ConfigClockSource+0x66a>
      break;
 800a414:	bf00      	nop
 800a416:	e000      	b.n	800a41a <HAL_TIM_ConfigClockSource+0x66a>
      break;
 800a418:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	40010000 	.word	0x40010000
 800a438:	40000400 	.word	0x40000400
 800a43c:	40000800 	.word	0x40000800
 800a440:	40000c00 	.word	0x40000c00
 800a444:	40010400 	.word	0x40010400
 800a448:	08026b64 	.word	0x08026b64

0800a44c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a40      	ldr	r2, [pc, #256]	; (800a5c4 <TIM_Base_SetConfig+0x114>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d013      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ce:	d00f      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a3d      	ldr	r2, [pc, #244]	; (800a5c8 <TIM_Base_SetConfig+0x118>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d00b      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a3c      	ldr	r2, [pc, #240]	; (800a5cc <TIM_Base_SetConfig+0x11c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d007      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a3b      	ldr	r2, [pc, #236]	; (800a5d0 <TIM_Base_SetConfig+0x120>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d003      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a3a      	ldr	r2, [pc, #232]	; (800a5d4 <TIM_Base_SetConfig+0x124>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d108      	bne.n	800a502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a2f      	ldr	r2, [pc, #188]	; (800a5c4 <TIM_Base_SetConfig+0x114>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d02b      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a510:	d027      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a2c      	ldr	r2, [pc, #176]	; (800a5c8 <TIM_Base_SetConfig+0x118>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d023      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a2b      	ldr	r2, [pc, #172]	; (800a5cc <TIM_Base_SetConfig+0x11c>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d01f      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a2a      	ldr	r2, [pc, #168]	; (800a5d0 <TIM_Base_SetConfig+0x120>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d01b      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a29      	ldr	r2, [pc, #164]	; (800a5d4 <TIM_Base_SetConfig+0x124>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d017      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a28      	ldr	r2, [pc, #160]	; (800a5d8 <TIM_Base_SetConfig+0x128>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d013      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a27      	ldr	r2, [pc, #156]	; (800a5dc <TIM_Base_SetConfig+0x12c>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d00f      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a26      	ldr	r2, [pc, #152]	; (800a5e0 <TIM_Base_SetConfig+0x130>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d00b      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a25      	ldr	r2, [pc, #148]	; (800a5e4 <TIM_Base_SetConfig+0x134>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d007      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a24      	ldr	r2, [pc, #144]	; (800a5e8 <TIM_Base_SetConfig+0x138>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d003      	beq.n	800a562 <TIM_Base_SetConfig+0xb2>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a23      	ldr	r2, [pc, #140]	; (800a5ec <TIM_Base_SetConfig+0x13c>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d108      	bne.n	800a574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	4313      	orrs	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a0a      	ldr	r2, [pc, #40]	; (800a5c4 <TIM_Base_SetConfig+0x114>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d003      	beq.n	800a5a8 <TIM_Base_SetConfig+0xf8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a0c      	ldr	r2, [pc, #48]	; (800a5d4 <TIM_Base_SetConfig+0x124>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d103      	bne.n	800a5b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	691a      	ldr	r2, [r3, #16]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	615a      	str	r2, [r3, #20]
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	40010000 	.word	0x40010000
 800a5c8:	40000400 	.word	0x40000400
 800a5cc:	40000800 	.word	0x40000800
 800a5d0:	40000c00 	.word	0x40000c00
 800a5d4:	40010400 	.word	0x40010400
 800a5d8:	40014000 	.word	0x40014000
 800a5dc:	40014400 	.word	0x40014400
 800a5e0:	40014800 	.word	0x40014800
 800a5e4:	40001800 	.word	0x40001800
 800a5e8:	40001c00 	.word	0x40001c00
 800a5ec:	40002000 	.word	0x40002000

0800a5f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	f023 0201 	bic.w	r2, r3, #1
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a61a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	4313      	orrs	r3, r2
 800a624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f023 030a 	bic.w	r3, r3, #10
 800a62c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4313      	orrs	r3, r2
 800a634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	621a      	str	r2, [r3, #32]
}
 800a642:	bf00      	nop
 800a644:	371c      	adds	r7, #28
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a64e:	b480      	push	{r7}
 800a650:	b087      	sub	sp, #28
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	f023 0210 	bic.w	r2, r3, #16
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6a1b      	ldr	r3, [r3, #32]
 800a670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	031b      	lsls	r3, r3, #12
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4313      	orrs	r3, r2
 800a682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a68a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	4313      	orrs	r3, r2
 800a694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	621a      	str	r2, [r3, #32]
}
 800a6a2:	bf00      	nop
 800a6a4:	371c      	adds	r7, #28
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b085      	sub	sp, #20
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	f043 0307 	orr.w	r3, r3, #7
 800a6d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	609a      	str	r2, [r3, #8]
}
 800a6d8:	bf00      	nop
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	021a      	lsls	r2, r3, #8
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	431a      	orrs	r2, r3
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4313      	orrs	r3, r2
 800a710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	609a      	str	r2, [r3, #8]
}
 800a718:	bf00      	nop
 800a71a:	371c      	adds	r7, #28
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a83      	ldr	r2, [pc, #524]	; (800a940 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d027      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a740:	d022      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a7f      	ldr	r2, [pc, #508]	; (800a944 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d01d      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a7d      	ldr	r2, [pc, #500]	; (800a948 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d018      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a7c      	ldr	r2, [pc, #496]	; (800a94c <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d013      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a7a      	ldr	r2, [pc, #488]	; (800a950 <HAL_TIMEx_MasterConfigSynchronization+0x22c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d00e      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a79      	ldr	r2, [pc, #484]	; (800a954 <HAL_TIMEx_MasterConfigSynchronization+0x230>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d009      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a77      	ldr	r2, [pc, #476]	; (800a958 <HAL_TIMEx_MasterConfigSynchronization+0x234>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d004      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a77e:	f240 6163 	movw	r1, #1635	; 0x663
 800a782:	4876      	ldr	r0, [pc, #472]	; (800a95c <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800a784:	f013 ff48 	bl	801e618 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d020      	beq.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b10      	cmp	r3, #16
 800a796:	d01c      	beq.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d018      	beq.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b30      	cmp	r3, #48	; 0x30
 800a7a6:	d014      	beq.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b40      	cmp	r3, #64	; 0x40
 800a7ae:	d010      	beq.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b50      	cmp	r3, #80	; 0x50
 800a7b6:	d00c      	beq.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b60      	cmp	r3, #96	; 0x60
 800a7be:	d008      	beq.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b70      	cmp	r3, #112	; 0x70
 800a7c6:	d004      	beq.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a7c8:	f240 6164 	movw	r1, #1636	; 0x664
 800a7cc:	4863      	ldr	r0, [pc, #396]	; (800a95c <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800a7ce:	f013 ff23 	bl	801e618 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	2b80      	cmp	r3, #128	; 0x80
 800a7d8:	d008      	beq.n	800a7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7e2:	f240 6165 	movw	r1, #1637	; 0x665
 800a7e6:	485d      	ldr	r0, [pc, #372]	; (800a95c <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800a7e8:	f013 ff16 	bl	801e618 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d101      	bne.n	800a7fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e09e      	b.n	800a938 <HAL_TIMEx_MasterConfigSynchronization+0x214>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2202      	movs	r2, #2
 800a806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a48      	ldr	r2, [pc, #288]	; (800a940 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d004      	beq.n	800a82e <HAL_TIMEx_MasterConfigSynchronization+0x10a>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a4b      	ldr	r2, [pc, #300]	; (800a958 <HAL_TIMEx_MasterConfigSynchronization+0x234>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d161      	bne.n	800a8f2 <HAL_TIMEx_MasterConfigSynchronization+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d054      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a83e:	d04f      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a848:	d04a      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a852:	d045      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a85c:	d040      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800a866:	d03b      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a870:	d036      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a87a:	d031      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800a884:	d02c      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a88e:	d027      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800a898:	d022      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a8a2:	d01d      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800a8ac:	d018      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a8b6:	d013      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800a8c0:	d00e      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800a8ca:	d009      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800a8d4:	d004      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800a8d6:	f240 6177 	movw	r1, #1655	; 0x677
 800a8da:	4820      	ldr	r0, [pc, #128]	; (800a95c <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800a8dc:	f013 fe9c 	bl	801e618 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a8e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	4313      	orrs	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a90a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	4313      	orrs	r3, r2
 800a914:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	40010000 	.word	0x40010000
 800a944:	40000400 	.word	0x40000400
 800a948:	40000800 	.word	0x40000800
 800a94c:	40000c00 	.word	0x40000c00
 800a950:	40001000 	.word	0x40001000
 800a954:	40001400 	.word	0x40001400
 800a958:	40010400 	.word	0x40010400
 800a95c:	08026b9c 	.word	0x08026b9c

0800a960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60bb      	str	r3, [r7, #8]
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a88      	ldr	r2, [pc, #544]	; (800abd4 <FMC_SDRAM_Init+0x238>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d004      	beq.n	800a9c0 <FMC_SDRAM_Init+0x24>
 800a9b6:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800a9ba:	4887      	ldr	r0, [pc, #540]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800a9bc:	f013 fe2c 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d008      	beq.n	800a9da <FMC_SDRAM_Init+0x3e>
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d004      	beq.n	800a9da <FMC_SDRAM_Init+0x3e>
 800a9d0:	f240 21ed 	movw	r1, #749	; 0x2ed
 800a9d4:	4880      	ldr	r0, [pc, #512]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800a9d6:	f013 fe1f 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d010      	beq.n	800aa04 <FMC_SDRAM_Init+0x68>
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d00c      	beq.n	800aa04 <FMC_SDRAM_Init+0x68>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d008      	beq.n	800aa04 <FMC_SDRAM_Init+0x68>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d004      	beq.n	800aa04 <FMC_SDRAM_Init+0x68>
 800a9fa:	f240 21ee 	movw	r1, #750	; 0x2ee
 800a9fe:	4876      	ldr	r0, [pc, #472]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800aa00:	f013 fe0a 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00c      	beq.n	800aa26 <FMC_SDRAM_Init+0x8a>
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	2b04      	cmp	r3, #4
 800aa12:	d008      	beq.n	800aa26 <FMC_SDRAM_Init+0x8a>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	2b08      	cmp	r3, #8
 800aa1a:	d004      	beq.n	800aa26 <FMC_SDRAM_Init+0x8a>
 800aa1c:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aa20:	486d      	ldr	r0, [pc, #436]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800aa22:	f013 fdf9 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00c      	beq.n	800aa48 <FMC_SDRAM_Init+0xac>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	2b10      	cmp	r3, #16
 800aa34:	d008      	beq.n	800aa48 <FMC_SDRAM_Init+0xac>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	2b20      	cmp	r3, #32
 800aa3c:	d004      	beq.n	800aa48 <FMC_SDRAM_Init+0xac>
 800aa3e:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800aa42:	4865      	ldr	r0, [pc, #404]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800aa44:	f013 fde8 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d008      	beq.n	800aa62 <FMC_SDRAM_Init+0xc6>
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	2b40      	cmp	r3, #64	; 0x40
 800aa56:	d004      	beq.n	800aa62 <FMC_SDRAM_Init+0xc6>
 800aa58:	f240 21f1 	movw	r1, #753	; 0x2f1
 800aa5c:	485e      	ldr	r0, [pc, #376]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800aa5e:	f013 fddb 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	2b80      	cmp	r3, #128	; 0x80
 800aa68:	d00e      	beq.n	800aa88 <FMC_SDRAM_Init+0xec>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa72:	d009      	beq.n	800aa88 <FMC_SDRAM_Init+0xec>
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800aa7c:	d004      	beq.n	800aa88 <FMC_SDRAM_Init+0xec>
 800aa7e:	f240 21f2 	movw	r1, #754	; 0x2f2
 800aa82:	4855      	ldr	r0, [pc, #340]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800aa84:	f013 fdc8 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d009      	beq.n	800aaa4 <FMC_SDRAM_Init+0x108>
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa98:	d004      	beq.n	800aaa4 <FMC_SDRAM_Init+0x108>
 800aa9a:	f240 21f3 	movw	r1, #755	; 0x2f3
 800aa9e:	484e      	ldr	r0, [pc, #312]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800aaa0:	f013 fdba 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00e      	beq.n	800aaca <FMC_SDRAM_Init+0x12e>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aab4:	d009      	beq.n	800aaca <FMC_SDRAM_Init+0x12e>
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aabe:	d004      	beq.n	800aaca <FMC_SDRAM_Init+0x12e>
 800aac0:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800aac4:	4844      	ldr	r0, [pc, #272]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800aac6:	f013 fda7 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d009      	beq.n	800aae6 <FMC_SDRAM_Init+0x14a>
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aada:	d004      	beq.n	800aae6 <FMC_SDRAM_Init+0x14a>
 800aadc:	f240 21f5 	movw	r1, #757	; 0x2f5
 800aae0:	483d      	ldr	r0, [pc, #244]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800aae2:	f013 fd99 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00e      	beq.n	800ab0c <FMC_SDRAM_Init+0x170>
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaf6:	d009      	beq.n	800ab0c <FMC_SDRAM_Init+0x170>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab00:	d004      	beq.n	800ab0c <FMC_SDRAM_Init+0x170>
 800ab02:	f240 21f6 	movw	r1, #758	; 0x2f6
 800ab06:	4834      	ldr	r0, [pc, #208]	; (800abd8 <FMC_SDRAM_Init+0x23c>)
 800ab08:	f013 fd86 	bl	801e618 <assert_failed>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d027      	beq.n	800ab64 <FMC_SDRAM_Init+0x1c8>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	4b2f      	ldr	r3, [pc, #188]	; (800abdc <FMC_SDRAM_Init+0x240>)
 800ab1e:	4013      	ands	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab2a:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ab30:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ab36:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ab3c:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ab42:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ab48:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ab4e:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ab54:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	e032      	b.n	800abca <FMC_SDRAM_Init+0x22e>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab70:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ab7a:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ab80:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	4b12      	ldr	r3, [pc, #72]	; (800abdc <FMC_SDRAM_Init+0x240>)
 800ab92:	4013      	ands	r3, r2
 800ab94:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab9e:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800aba4:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800abaa:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800abb0:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800abb6:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	4313      	orrs	r3, r2
 800abbc:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	a0000140 	.word	0xa0000140
 800abd8:	08026bd8 	.word	0x08026bd8
 800abdc:	ffff8000 	.word	0xffff8000

0800abe0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	613b      	str	r3, [r7, #16]
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4a6f      	ldr	r2, [pc, #444]	; (800adb4 <FMC_SDRAM_Timing_Init+0x1d4>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d004      	beq.n	800ac06 <FMC_SDRAM_Timing_Init+0x26>
 800abfc:	f240 313d 	movw	r1, #829	; 0x33d
 800ac00:	486d      	ldr	r0, [pc, #436]	; (800adb8 <FMC_SDRAM_Timing_Init+0x1d8>)
 800ac02:	f013 fd09 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <FMC_SDRAM_Timing_Init+0x36>
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b10      	cmp	r3, #16
 800ac14:	d904      	bls.n	800ac20 <FMC_SDRAM_Timing_Init+0x40>
 800ac16:	f240 313e 	movw	r1, #830	; 0x33e
 800ac1a:	4867      	ldr	r0, [pc, #412]	; (800adb8 <FMC_SDRAM_Timing_Init+0x1d8>)
 800ac1c:	f013 fcfc 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d003      	beq.n	800ac30 <FMC_SDRAM_Timing_Init+0x50>
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	2b10      	cmp	r3, #16
 800ac2e:	d904      	bls.n	800ac3a <FMC_SDRAM_Timing_Init+0x5a>
 800ac30:	f240 313f 	movw	r1, #831	; 0x33f
 800ac34:	4860      	ldr	r0, [pc, #384]	; (800adb8 <FMC_SDRAM_Timing_Init+0x1d8>)
 800ac36:	f013 fcef 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <FMC_SDRAM_Timing_Init+0x6a>
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	2b10      	cmp	r3, #16
 800ac48:	d904      	bls.n	800ac54 <FMC_SDRAM_Timing_Init+0x74>
 800ac4a:	f44f 7150 	mov.w	r1, #832	; 0x340
 800ac4e:	485a      	ldr	r0, [pc, #360]	; (800adb8 <FMC_SDRAM_Timing_Init+0x1d8>)
 800ac50:	f013 fce2 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d003      	beq.n	800ac64 <FMC_SDRAM_Timing_Init+0x84>
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	2b10      	cmp	r3, #16
 800ac62:	d904      	bls.n	800ac6e <FMC_SDRAM_Timing_Init+0x8e>
 800ac64:	f240 3141 	movw	r1, #833	; 0x341
 800ac68:	4853      	ldr	r0, [pc, #332]	; (800adb8 <FMC_SDRAM_Timing_Init+0x1d8>)
 800ac6a:	f013 fcd5 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <FMC_SDRAM_Timing_Init+0x9e>
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	2b10      	cmp	r3, #16
 800ac7c:	d904      	bls.n	800ac88 <FMC_SDRAM_Timing_Init+0xa8>
 800ac7e:	f240 3142 	movw	r1, #834	; 0x342
 800ac82:	484d      	ldr	r0, [pc, #308]	; (800adb8 <FMC_SDRAM_Timing_Init+0x1d8>)
 800ac84:	f013 fcc8 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d003      	beq.n	800ac98 <FMC_SDRAM_Timing_Init+0xb8>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	2b10      	cmp	r3, #16
 800ac96:	d904      	bls.n	800aca2 <FMC_SDRAM_Timing_Init+0xc2>
 800ac98:	f240 3143 	movw	r1, #835	; 0x343
 800ac9c:	4846      	ldr	r0, [pc, #280]	; (800adb8 <FMC_SDRAM_Timing_Init+0x1d8>)
 800ac9e:	f013 fcbb 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <FMC_SDRAM_Timing_Init+0xd2>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	2b10      	cmp	r3, #16
 800acb0:	d904      	bls.n	800acbc <FMC_SDRAM_Timing_Init+0xdc>
 800acb2:	f44f 7151 	mov.w	r1, #836	; 0x344
 800acb6:	4840      	ldr	r0, [pc, #256]	; (800adb8 <FMC_SDRAM_Timing_Init+0x1d8>)
 800acb8:	f013 fcae 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d007      	beq.n	800acd2 <FMC_SDRAM_Timing_Init+0xf2>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d004      	beq.n	800acd2 <FMC_SDRAM_Timing_Init+0xf2>
 800acc8:	f240 3145 	movw	r1, #837	; 0x345
 800accc:	483a      	ldr	r0, [pc, #232]	; (800adb8 <FMC_SDRAM_Timing_Init+0x1d8>)
 800acce:	f013 fca3 	bl	801e618 <assert_failed>
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d02e      	beq.n	800ad36 <FMC_SDRAM_Timing_Init+0x156>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ace4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800acf4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800acfe:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ad08:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ad12:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ad1c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad26:	4313      	orrs	r3, r2
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	609a      	str	r2, [r3, #8]
 800ad34:	e039      	b.n	800adaa <FMC_SDRAM_Timing_Init+0x1ca>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	4b1f      	ldr	r3, [pc, #124]	; (800adbc <FMC_SDRAM_Timing_Init+0x1dc>)
 800ad40:	4013      	ands	r3, r2
 800ad42:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ad54:	4313      	orrs	r3, r2
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad68:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad78:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ad82:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ad8c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad96:	4313      	orrs	r3, r2
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	a0000140 	.word	0xa0000140
 800adb8:	08026bd8 	.word	0x08026bd8
 800adbc:	ff0f0fff 	.word	0xff0f0fff

0800adc0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4a34      	ldr	r2, [pc, #208]	; (800aea4 <FMC_SDRAM_SendCommand+0xe4>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d004      	beq.n	800ade2 <FMC_SDRAM_SendCommand+0x22>
 800add8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 800addc:	4832      	ldr	r0, [pc, #200]	; (800aea8 <FMC_SDRAM_SendCommand+0xe8>)
 800adde:	f013 fc1b 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d01c      	beq.n	800ae24 <FMC_SDRAM_SendCommand+0x64>
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d018      	beq.n	800ae24 <FMC_SDRAM_SendCommand+0x64>
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d014      	beq.n	800ae24 <FMC_SDRAM_SendCommand+0x64>
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b03      	cmp	r3, #3
 800ae00:	d010      	beq.n	800ae24 <FMC_SDRAM_SendCommand+0x64>
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d00c      	beq.n	800ae24 <FMC_SDRAM_SendCommand+0x64>
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b05      	cmp	r3, #5
 800ae10:	d008      	beq.n	800ae24 <FMC_SDRAM_SendCommand+0x64>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b06      	cmp	r3, #6
 800ae18:	d004      	beq.n	800ae24 <FMC_SDRAM_SendCommand+0x64>
 800ae1a:	f240 31d1 	movw	r1, #977	; 0x3d1
 800ae1e:	4822      	ldr	r0, [pc, #136]	; (800aea8 <FMC_SDRAM_SendCommand+0xe8>)
 800ae20:	f013 fbfa 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	2b10      	cmp	r3, #16
 800ae2a:	d00c      	beq.n	800ae46 <FMC_SDRAM_SendCommand+0x86>
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	d008      	beq.n	800ae46 <FMC_SDRAM_SendCommand+0x86>
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	2b18      	cmp	r3, #24
 800ae3a:	d004      	beq.n	800ae46 <FMC_SDRAM_SendCommand+0x86>
 800ae3c:	f240 31d2 	movw	r1, #978	; 0x3d2
 800ae40:	4819      	ldr	r0, [pc, #100]	; (800aea8 <FMC_SDRAM_SendCommand+0xe8>)
 800ae42:	f013 fbe9 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <FMC_SDRAM_SendCommand+0x96>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	2b10      	cmp	r3, #16
 800ae54:	d904      	bls.n	800ae60 <FMC_SDRAM_SendCommand+0xa0>
 800ae56:	f240 31d3 	movw	r1, #979	; 0x3d3
 800ae5a:	4813      	ldr	r0, [pc, #76]	; (800aea8 <FMC_SDRAM_SendCommand+0xe8>)
 800ae5c:	f013 fbdc 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae68:	d304      	bcc.n	800ae74 <FMC_SDRAM_SendCommand+0xb4>
 800ae6a:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800ae6e:	480e      	ldr	r0, [pc, #56]	; (800aea8 <FMC_SDRAM_SendCommand+0xe8>)
 800ae70:	f013 fbd2 	bl	801e618 <assert_failed>

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae7c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800ae86:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	a0000140 	.word	0xa0000140
 800aea8:	08026bd8 	.word	0x08026bd8

0800aeac <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a0e      	ldr	r2, [pc, #56]	; (800aef4 <FMC_SDRAM_ProgramRefreshRate+0x48>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d004      	beq.n	800aec8 <FMC_SDRAM_ProgramRefreshRate+0x1c>
 800aebe:	f240 31eb 	movw	r1, #1003	; 0x3eb
 800aec2:	480d      	ldr	r0, [pc, #52]	; (800aef8 <FMC_SDRAM_ProgramRefreshRate+0x4c>)
 800aec4:	f013 fba8 	bl	801e618 <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aece:	d304      	bcc.n	800aeda <FMC_SDRAM_ProgramRefreshRate+0x2e>
 800aed0:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 800aed4:	4808      	ldr	r0, [pc, #32]	; (800aef8 <FMC_SDRAM_ProgramRefreshRate+0x4c>)
 800aed6:	f013 fb9f 	bl	801e618 <assert_failed>
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	695a      	ldr	r2, [r3, #20]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	005b      	lsls	r3, r3, #1
 800aee2:	431a      	orrs	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	a0000140 	.word	0xa0000140
 800aef8:	08026bd8 	.word	0x08026bd8

0800aefc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aefc:	b084      	sub	sp, #16
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	f107 001c 	add.w	r0, r7, #28
 800af0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	2b01      	cmp	r3, #1
 800af12:	d120      	bne.n	800af56 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	4b20      	ldr	r3, [pc, #128]	; (800afa8 <USB_CoreInit+0xac>)
 800af26:	4013      	ands	r3, r2
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800af38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d105      	bne.n	800af4a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f942 	bl	800b1d4 <USB_CoreReset>
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]
 800af54:	e010      	b.n	800af78 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f936 	bl	800b1d4 <USB_CoreReset>
 800af68:	4603      	mov	r3, r0
 800af6a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d10b      	bne.n	800af96 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	f043 0206 	orr.w	r2, r3, #6
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	f043 0220 	orr.w	r2, r3, #32
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800af96:	7bfb      	ldrb	r3, [r7, #15]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afa2:	b004      	add	sp, #16
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	ffbdffbf 	.word	0xffbdffbf

0800afac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	f043 0201 	orr.w	r2, r3, #1
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f023 0201 	bic.w	r2, r3, #1
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b008:	78fb      	ldrb	r3, [r7, #3]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d106      	bne.n	800b01c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	e00b      	b.n	800b034 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b01c:	78fb      	ldrb	r3, [r7, #3]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	60da      	str	r2, [r3, #12]
 800b02e:	e001      	b.n	800b034 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e003      	b.n	800b03c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b034:	2032      	movs	r0, #50	; 0x32
 800b036:	f7f6 f927 	bl	8001288 <HAL_Delay>

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	019b      	lsls	r3, r3, #6
 800b056:	f043 0220 	orr.w	r2, r3, #32
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3301      	adds	r3, #1
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	4a09      	ldr	r2, [pc, #36]	; (800b08c <USB_FlushTxFifo+0x48>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d901      	bls.n	800b070 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e006      	b.n	800b07e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	f003 0320 	and.w	r3, r3, #32
 800b078:	2b20      	cmp	r3, #32
 800b07a:	d0f0      	beq.n	800b05e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	00030d40 	.word	0x00030d40

0800b090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2210      	movs	r2, #16
 800b0a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	4a09      	ldr	r2, [pc, #36]	; (800b0d0 <USB_FlushRxFifo+0x40>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d901      	bls.n	800b0b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e006      	b.n	800b0c2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	f003 0310 	and.w	r3, r3, #16
 800b0bc:	2b10      	cmp	r3, #16
 800b0be:	d0f0      	beq.n	800b0a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	00030d40 	.word	0x00030d40

0800b0d4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b089      	sub	sp, #36	; 0x24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	4611      	mov	r1, r2
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	71fb      	strb	r3, [r7, #7]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b0f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d11a      	bne.n	800b130 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b0fa:	88bb      	ldrh	r3, [r7, #4]
 800b0fc:	3303      	adds	r3, #3
 800b0fe:	089b      	lsrs	r3, r3, #2
 800b100:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b102:	2300      	movs	r3, #0
 800b104:	61bb      	str	r3, [r7, #24]
 800b106:	e00f      	b.n	800b128 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800b108:	79fb      	ldrb	r3, [r7, #7]
 800b10a:	031a      	lsls	r2, r3, #12
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	4413      	add	r3, r2
 800b110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b114:	461a      	mov	r2, r3
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	3304      	adds	r3, #4
 800b120:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	3301      	adds	r3, #1
 800b126:	61bb      	str	r3, [r7, #24]
 800b128:	69ba      	ldr	r2, [r7, #24]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d3eb      	bcc.n	800b108 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3724      	adds	r7, #36	; 0x24
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b13e:	b480      	push	{r7}
 800b140:	b089      	sub	sp, #36	; 0x24
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	60b9      	str	r1, [r7, #8]
 800b148:	4613      	mov	r3, r2
 800b14a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b154:	88fb      	ldrh	r3, [r7, #6]
 800b156:	3303      	adds	r3, #3
 800b158:	089b      	lsrs	r3, r3, #2
 800b15a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b15c:	2300      	movs	r3, #0
 800b15e:	61bb      	str	r3, [r7, #24]
 800b160:	e00b      	b.n	800b17a <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	3304      	adds	r3, #4
 800b172:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	3301      	adds	r3, #1
 800b178:	61bb      	str	r3, [r7, #24]
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d3ef      	bcc.n	800b162 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b182:	69fb      	ldr	r3, [r7, #28]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3724      	adds	r7, #36	; 0x24
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	f003 0301 	and.w	r3, r3, #1
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
	...

0800b1d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	60fb      	str	r3, [r7, #12]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	4a13      	ldr	r2, [pc, #76]	; (800b238 <USB_CoreReset+0x64>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d901      	bls.n	800b1f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e01b      	b.n	800b22a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	daf2      	bge.n	800b1e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	f043 0201 	orr.w	r2, r3, #1
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	60fb      	str	r3, [r7, #12]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	4a09      	ldr	r2, [pc, #36]	; (800b238 <USB_CoreReset+0x64>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d901      	bls.n	800b21c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b218:	2303      	movs	r3, #3
 800b21a:	e006      	b.n	800b22a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	f003 0301 	and.w	r3, r3, #1
 800b224:	2b01      	cmp	r3, #1
 800b226:	d0f0      	beq.n	800b20a <USB_CoreReset+0x36>

  return HAL_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	00030d40 	.word	0x00030d40

0800b23c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b23c:	b084      	sub	sp, #16
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	f107 001c 	add.w	r0, r7, #28
 800b24a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b258:	461a      	mov	r2, r3
 800b25a:	2300      	movs	r3, #0
 800b25c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b262:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b272:	2b00      	cmp	r3, #0
 800b274:	d018      	beq.n	800b2a8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d10a      	bne.n	800b292 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b28a:	f043 0304 	orr.w	r3, r3, #4
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	e014      	b.n	800b2bc <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2a0:	f023 0304 	bic.w	r3, r3, #4
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	e009      	b.n	800b2bc <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2b6:	f023 0304 	bic.w	r3, r3, #4
 800b2ba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b2bc:	2110      	movs	r1, #16
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7ff fec0 	bl	800b044 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff fee3 	bl	800b090 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	e015      	b.n	800b2fc <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	015a      	lsls	r2, r3, #5
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2dc:	461a      	mov	r2, r3
 800b2de:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	015a      	lsls	r2, r3, #5
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	429a      	cmp	r2, r3
 800b302:	d3e5      	bcc.n	800b2d0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b304:	2101      	movs	r1, #1
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f8ac 	bl	800b464 <USB_DriveVbus>

  HAL_Delay(200U);
 800b30c:	20c8      	movs	r0, #200	; 0xc8
 800b30e:	f7f5 ffbb 	bl	8001288 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f04f 32ff 	mov.w	r2, #4294967295
 800b31e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00b      	beq.n	800b344 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b332:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a14      	ldr	r2, [pc, #80]	; (800b388 <USB_HostInit+0x14c>)
 800b338:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a13      	ldr	r2, [pc, #76]	; (800b38c <USB_HostInit+0x150>)
 800b33e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b342:	e009      	b.n	800b358 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2280      	movs	r2, #128	; 0x80
 800b348:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a10      	ldr	r2, [pc, #64]	; (800b390 <USB_HostInit+0x154>)
 800b34e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a10      	ldr	r2, [pc, #64]	; (800b394 <USB_HostInit+0x158>)
 800b354:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d105      	bne.n	800b36a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	f043 0210 	orr.w	r2, r3, #16
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	699a      	ldr	r2, [r3, #24]
 800b36e:	4b0a      	ldr	r3, [pc, #40]	; (800b398 <USB_HostInit+0x15c>)
 800b370:	4313      	orrs	r3, r2
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b382:	b004      	add	sp, #16
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	01000200 	.word	0x01000200
 800b38c:	00e00300 	.word	0x00e00300
 800b390:	00600080 	.word	0x00600080
 800b394:	004000e0 	.word	0x004000e0
 800b398:	a3200008 	.word	0xa3200008

0800b39c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3ba:	f023 0303 	bic.w	r3, r3, #3
 800b3be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	78fb      	ldrb	r3, [r7, #3]
 800b3ca:	f003 0303 	and.w	r3, r3, #3
 800b3ce:	68f9      	ldr	r1, [r7, #12]
 800b3d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b3d8:	78fb      	ldrb	r3, [r7, #3]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d107      	bne.n	800b3ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b3ea:	6053      	str	r3, [r2, #4]
 800b3ec:	e009      	b.n	800b402 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b3ee:	78fb      	ldrb	r3, [r7, #3]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d106      	bne.n	800b402 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f241 7370 	movw	r3, #6000	; 0x1770
 800b400:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b41c:	2300      	movs	r3, #0
 800b41e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b430:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b43a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b43e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b440:	2064      	movs	r0, #100	; 0x64
 800b442:	f7f5 ff21 	bl	8001288 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b44e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b452:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b454:	200a      	movs	r0, #10
 800b456:	f7f5 ff17 	bl	8001288 <HAL_Delay>

  return HAL_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b474:	2300      	movs	r3, #0
 800b476:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b488:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d109      	bne.n	800b4a8 <USB_DriveVbus+0x44>
 800b494:	78fb      	ldrb	r3, [r7, #3]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d106      	bne.n	800b4a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b4a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b4a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b2:	d109      	bne.n	800b4c8 <USB_DriveVbus+0x64>
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d106      	bne.n	800b4c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b4c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	b085      	sub	sp, #20
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	0c5b      	lsrs	r3, r3, #17
 800b4f4:	f003 0303 	and.w	r3, r3, #3
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	b29b      	uxth	r3, r3
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
	...

0800b528 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	4608      	mov	r0, r1
 800b532:	4611      	mov	r1, r2
 800b534:	461a      	mov	r2, r3
 800b536:	4603      	mov	r3, r0
 800b538:	70fb      	strb	r3, [r7, #3]
 800b53a:	460b      	mov	r3, r1
 800b53c:	70bb      	strb	r3, [r7, #2]
 800b53e:	4613      	mov	r3, r2
 800b540:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b542:	2300      	movs	r3, #0
 800b544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b54a:	78fb      	ldrb	r3, [r7, #3]
 800b54c:	015a      	lsls	r2, r3, #5
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	4413      	add	r3, r2
 800b552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b556:	461a      	mov	r2, r3
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b55e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b562:	2b03      	cmp	r3, #3
 800b564:	d87e      	bhi.n	800b664 <USB_HC_Init+0x13c>
 800b566:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <USB_HC_Init+0x44>)
 800b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56c:	0800b57d 	.word	0x0800b57d
 800b570:	0800b627 	.word	0x0800b627
 800b574:	0800b57d 	.word	0x0800b57d
 800b578:	0800b5e9 	.word	0x0800b5e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b57c:	78fb      	ldrb	r3, [r7, #3]
 800b57e:	015a      	lsls	r2, r3, #5
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4413      	add	r3, r2
 800b584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b588:	461a      	mov	r2, r3
 800b58a:	f240 439d 	movw	r3, #1181	; 0x49d
 800b58e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b590:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b594:	2b00      	cmp	r3, #0
 800b596:	da10      	bge.n	800b5ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b598:	78fb      	ldrb	r3, [r7, #3]
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	78fa      	ldrb	r2, [r7, #3]
 800b5a8:	0151      	lsls	r1, r2, #5
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	440a      	add	r2, r1
 800b5ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5b6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800b5b8:	e057      	b.n	800b66a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d051      	beq.n	800b66a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b5c6:	78fb      	ldrb	r3, [r7, #3]
 800b5c8:	015a      	lsls	r2, r3, #5
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	78fa      	ldrb	r2, [r7, #3]
 800b5d6:	0151      	lsls	r1, r2, #5
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	440a      	add	r2, r1
 800b5dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b5e4:	60d3      	str	r3, [r2, #12]
      break;
 800b5e6:	e040      	b.n	800b66a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b5e8:	78fb      	ldrb	r3, [r7, #3]
 800b5ea:	015a      	lsls	r2, r3, #5
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	f240 639d 	movw	r3, #1693	; 0x69d
 800b5fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b5fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b600:	2b00      	cmp	r3, #0
 800b602:	da34      	bge.n	800b66e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b604:	78fb      	ldrb	r3, [r7, #3]
 800b606:	015a      	lsls	r2, r3, #5
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	4413      	add	r3, r2
 800b60c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	78fa      	ldrb	r2, [r7, #3]
 800b614:	0151      	lsls	r1, r2, #5
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	440a      	add	r2, r1
 800b61a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b61e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b622:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b624:	e023      	b.n	800b66e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b626:	78fb      	ldrb	r3, [r7, #3]
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b632:	461a      	mov	r2, r3
 800b634:	f240 2325 	movw	r3, #549	; 0x225
 800b638:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b63a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	da17      	bge.n	800b672 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b642:	78fb      	ldrb	r3, [r7, #3]
 800b644:	015a      	lsls	r2, r3, #5
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	4413      	add	r3, r2
 800b64a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	78fa      	ldrb	r2, [r7, #3]
 800b652:	0151      	lsls	r1, r2, #5
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	440a      	add	r2, r1
 800b658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b65c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b660:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b662:	e006      	b.n	800b672 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	75fb      	strb	r3, [r7, #23]
      break;
 800b668:	e004      	b.n	800b674 <USB_HC_Init+0x14c>
      break;
 800b66a:	bf00      	nop
 800b66c:	e002      	b.n	800b674 <USB_HC_Init+0x14c>
      break;
 800b66e:	bf00      	nop
 800b670:	e000      	b.n	800b674 <USB_HC_Init+0x14c>
      break;
 800b672:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b67a:	699a      	ldr	r2, [r3, #24]
 800b67c:	78fb      	ldrb	r3, [r7, #3]
 800b67e:	f003 030f 	and.w	r3, r3, #15
 800b682:	2101      	movs	r1, #1
 800b684:	fa01 f303 	lsl.w	r3, r1, r3
 800b688:	68b9      	ldr	r1, [r7, #8]
 800b68a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b68e:	4313      	orrs	r3, r2
 800b690:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b69e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	da03      	bge.n	800b6ae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b6a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6aa:	613b      	str	r3, [r7, #16]
 800b6ac:	e001      	b.n	800b6b2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800b6b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d103      	bne.n	800b6c2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b6ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	e001      	b.n	800b6c6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b6c6:	787b      	ldrb	r3, [r7, #1]
 800b6c8:	059b      	lsls	r3, r3, #22
 800b6ca:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b6ce:	78bb      	ldrb	r3, [r7, #2]
 800b6d0:	02db      	lsls	r3, r3, #11
 800b6d2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b6d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b6d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6dc:	049b      	lsls	r3, r3, #18
 800b6de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b6e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b6e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b6e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b6ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	0159      	lsls	r1, r3, #5
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	440b      	add	r3, r1
 800b6f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6fc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b702:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b704:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d10f      	bne.n	800b72c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b70c:	78fb      	ldrb	r3, [r7, #3]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4413      	add	r3, r2
 800b714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	78fa      	ldrb	r2, [r7, #3]
 800b71c:	0151      	lsls	r1, r2, #5
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	440a      	add	r2, r1
 800b722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b72a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	371c      	adds	r7, #28
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop

0800b73c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08c      	sub	sp, #48	; 0x30
 800b740:	af02      	add	r7, sp, #8
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	4613      	mov	r3, r2
 800b748:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	785b      	ldrb	r3, [r3, #1]
 800b752:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b754:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b758:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b762:	2b00      	cmp	r3, #0
 800b764:	d028      	beq.n	800b7b8 <USB_HC_StartXfer+0x7c>
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	791b      	ldrb	r3, [r3, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d124      	bne.n	800b7b8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10b      	bne.n	800b78c <USB_HC_StartXfer+0x50>
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	795b      	ldrb	r3, [r3, #5]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d107      	bne.n	800b78c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	785b      	ldrb	r3, [r3, #1]
 800b780:	4619      	mov	r1, r3
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f000 fa2c 	bl	800bbe0 <USB_DoPing>
      return HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	e111      	b.n	800b9b0 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d112      	bne.n	800b7b8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	69fa      	ldr	r2, [r7, #28]
 800b7a2:	0151      	lsls	r1, r2, #5
 800b7a4:	6a3a      	ldr	r2, [r7, #32]
 800b7a6:	440a      	add	r2, r1
 800b7a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7ac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b7b0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d018      	beq.n	800b7f2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	8912      	ldrh	r2, [r2, #8]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	8912      	ldrh	r2, [r2, #8]
 800b7d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7d4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b7d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b7d8:	8b7b      	ldrh	r3, [r7, #26]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d90b      	bls.n	800b7f6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b7de:	8b7b      	ldrh	r3, [r7, #26]
 800b7e0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b7e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	8912      	ldrh	r2, [r2, #8]
 800b7e8:	fb03 f202 	mul.w	r2, r3, r2
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	611a      	str	r2, [r3, #16]
 800b7f0:	e001      	b.n	800b7f6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	78db      	ldrb	r3, [r3, #3]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d006      	beq.n	800b80c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b7fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	8912      	ldrh	r2, [r2, #8]
 800b804:	fb03 f202 	mul.w	r2, r3, r2
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b814:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b816:	04d9      	lsls	r1, r3, #19
 800b818:	4b67      	ldr	r3, [pc, #412]	; (800b9b8 <USB_HC_StartXfer+0x27c>)
 800b81a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b81c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	7a9b      	ldrb	r3, [r3, #10]
 800b822:	075b      	lsls	r3, r3, #29
 800b824:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b828:	69f9      	ldr	r1, [r7, #28]
 800b82a:	0148      	lsls	r0, r1, #5
 800b82c:	6a39      	ldr	r1, [r7, #32]
 800b82e:	4401      	add	r1, r0
 800b830:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b834:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b836:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b838:	79fb      	ldrb	r3, [r7, #7]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d009      	beq.n	800b852 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	68d9      	ldr	r1, [r3, #12]
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	015a      	lsls	r2, r3, #5
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	4413      	add	r3, r2
 800b84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b84e:	460a      	mov	r2, r1
 800b850:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	f003 0301 	and.w	r3, r3, #1
 800b85e:	2b00      	cmp	r3, #0
 800b860:	bf0c      	ite	eq
 800b862:	2301      	moveq	r3, #1
 800b864:	2300      	movne	r3, #0
 800b866:	b2db      	uxtb	r3, r3
 800b868:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	4413      	add	r3, r2
 800b872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	69fa      	ldr	r2, [r7, #28]
 800b87a:	0151      	lsls	r1, r2, #5
 800b87c:	6a3a      	ldr	r2, [r7, #32]
 800b87e:	440a      	add	r2, r1
 800b880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b884:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b888:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	4413      	add	r3, r2
 800b892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	7e7b      	ldrb	r3, [r7, #25]
 800b89a:	075b      	lsls	r3, r3, #29
 800b89c:	69f9      	ldr	r1, [r7, #28]
 800b89e:	0148      	lsls	r0, r1, #5
 800b8a0:	6a39      	ldr	r1, [r7, #32]
 800b8a2:	4401      	add	r1, r0
 800b8a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	015a      	lsls	r2, r3, #5
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a40      	ldr	r2, [pc, #256]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b8bc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b8be:	4b3f      	ldr	r3, [pc, #252]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b8c6:	4a3d      	ldr	r2, [pc, #244]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b8c8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	78db      	ldrb	r3, [r3, #3]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d006      	beq.n	800b8e0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b8d2:	4b3a      	ldr	r3, [pc, #232]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8da:	4a38      	ldr	r2, [pc, #224]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	e005      	b.n	800b8ec <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b8e0:	4b36      	ldr	r3, [pc, #216]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b8e8:	4a34      	ldr	r2, [pc, #208]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b8ea:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b8ec:	4b33      	ldr	r3, [pc, #204]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8f4:	4a31      	ldr	r2, [pc, #196]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b8f6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	015a      	lsls	r2, r3, #5
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	4413      	add	r3, r2
 800b900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b904:	461a      	mov	r2, r3
 800b906:	4b2d      	ldr	r3, [pc, #180]	; (800b9bc <USB_HC_StartXfer+0x280>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800b90c:	79fb      	ldrb	r3, [r7, #7]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d14d      	bne.n	800b9ae <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	78db      	ldrb	r3, [r3, #3]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d149      	bne.n	800b9ae <USB_HC_StartXfer+0x272>
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d045      	beq.n	800b9ae <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	79db      	ldrb	r3, [r3, #7]
 800b926:	2b03      	cmp	r3, #3
 800b928:	d830      	bhi.n	800b98c <USB_HC_StartXfer+0x250>
 800b92a:	a201      	add	r2, pc, #4	; (adr r2, 800b930 <USB_HC_StartXfer+0x1f4>)
 800b92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b930:	0800b941 	.word	0x0800b941
 800b934:	0800b965 	.word	0x0800b965
 800b938:	0800b941 	.word	0x0800b941
 800b93c:	0800b965 	.word	0x0800b965
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	3303      	adds	r3, #3
 800b946:	089b      	lsrs	r3, r3, #2
 800b948:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b94a:	8afa      	ldrh	r2, [r7, #22]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	b29b      	uxth	r3, r3
 800b952:	429a      	cmp	r2, r3
 800b954:	d91c      	bls.n	800b990 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	f043 0220 	orr.w	r2, r3, #32
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	619a      	str	r2, [r3, #24]
          }
          break;
 800b962:	e015      	b.n	800b990 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	3303      	adds	r3, #3
 800b96a:	089b      	lsrs	r3, r3, #2
 800b96c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b96e:	8afa      	ldrh	r2, [r7, #22]
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	b29b      	uxth	r3, r3
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d90a      	bls.n	800b994 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	619a      	str	r2, [r3, #24]
          }
          break;
 800b98a:	e003      	b.n	800b994 <USB_HC_StartXfer+0x258>

        default:
          break;
 800b98c:	bf00      	nop
 800b98e:	e002      	b.n	800b996 <USB_HC_StartXfer+0x25a>
          break;
 800b990:	bf00      	nop
 800b992:	e000      	b.n	800b996 <USB_HC_StartXfer+0x25a>
          break;
 800b994:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	68d9      	ldr	r1, [r3, #12]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	785a      	ldrb	r2, [r3, #1]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	9000      	str	r0, [sp, #0]
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f7ff fb93 	bl	800b0d4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3728      	adds	r7, #40	; 0x28
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	1ff80000 	.word	0x1ff80000
 800b9bc:	20000160 	.word	0x20000160

0800b9c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9d2:	695b      	ldr	r3, [r3, #20]
 800b9d4:	b29b      	uxth	r3, r3
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b087      	sub	sp, #28
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b9f2:	78fb      	ldrb	r3, [r7, #3]
 800b9f4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	0c9b      	lsrs	r3, r3, #18
 800ba0a:	f003 0303 	and.w	r3, r3, #3
 800ba0e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <USB_HC_Halt+0x3a>
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d16c      	bne.n	800baf6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	015a      	lsls	r2, r3, #5
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	4413      	add	r3, r2
 800ba24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	0151      	lsls	r1, r2, #5
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	440a      	add	r2, r1
 800ba32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba3a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d143      	bne.n	800bad0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	0151      	lsls	r1, r2, #5
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	440a      	add	r2, r1
 800ba5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	0151      	lsls	r1, r2, #5
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	440a      	add	r2, r1
 800ba7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	0151      	lsls	r1, r2, #5
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800baa2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800baa6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	3301      	adds	r3, #1
 800baac:	617b      	str	r3, [r7, #20]
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bab4:	d81d      	bhi.n	800baf2 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	4413      	add	r3, r2
 800babe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bacc:	d0ec      	beq.n	800baa8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bace:	e080      	b.n	800bbd2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	015a      	lsls	r2, r3, #5
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	4413      	add	r3, r2
 800bad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	0151      	lsls	r1, r2, #5
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	440a      	add	r2, r1
 800bae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800baea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800baee:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800baf0:	e06f      	b.n	800bbd2 <USB_HC_Halt+0x1f0>
          break;
 800baf2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800baf4:	e06d      	b.n	800bbd2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	0151      	lsls	r1, r2, #5
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	440a      	add	r2, r1
 800bb0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb14:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d143      	bne.n	800bbae <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	015a      	lsls	r2, r3, #5
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	0151      	lsls	r1, r2, #5
 800bb38:	693a      	ldr	r2, [r7, #16]
 800bb3a:	440a      	add	r2, r1
 800bb3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb44:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	0151      	lsls	r1, r2, #5
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	440a      	add	r2, r1
 800bb5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb64:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	015a      	lsls	r2, r3, #5
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	0151      	lsls	r1, r2, #5
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	440a      	add	r2, r1
 800bb7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb84:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb92:	d81d      	bhi.n	800bbd0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	015a      	lsls	r2, r3, #5
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbaa:	d0ec      	beq.n	800bb86 <USB_HC_Halt+0x1a4>
 800bbac:	e011      	b.n	800bbd2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	015a      	lsls	r2, r3, #5
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	0151      	lsls	r1, r2, #5
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	440a      	add	r2, r1
 800bbc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	e000      	b.n	800bbd2 <USB_HC_Halt+0x1f0>
          break;
 800bbd0:	bf00      	nop
    }
  }

  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	371c      	adds	r7, #28
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	04da      	lsls	r2, r3, #19
 800bbfc:	4b15      	ldr	r3, [pc, #84]	; (800bc54 <USB_DoPing+0x74>)
 800bbfe:	4013      	ands	r3, r2
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	0151      	lsls	r1, r2, #5
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	440a      	add	r2, r1
 800bc08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc3e:	461a      	mov	r2, r3
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	371c      	adds	r7, #28
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	1ff80000 	.word	0x1ff80000

0800bc58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bc64:	2300      	movs	r3, #0
 800bc66:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff f9b0 	bl	800afce <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800bc6e:	2110      	movs	r1, #16
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7ff f9e7 	bl	800b044 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7ff fa0a 	bl	800b090 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	613b      	str	r3, [r7, #16]
 800bc80:	e01f      	b.n	800bcc2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc98:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bca0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bca8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	015a      	lsls	r2, r3, #5
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	613b      	str	r3, [r7, #16]
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b0f      	cmp	r3, #15
 800bcc6:	d9dc      	bls.n	800bc82 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	613b      	str	r3, [r7, #16]
 800bccc:	e034      	b.n	800bd38 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bce4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bcf4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd02:	461a      	mov	r2, r3
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	617b      	str	r3, [r7, #20]
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd14:	d80c      	bhi.n	800bd30 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd2c:	d0ec      	beq.n	800bd08 <USB_StopHost+0xb0>
 800bd2e:	e000      	b.n	800bd32 <USB_StopHost+0xda>
        break;
 800bd30:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	3301      	adds	r3, #1
 800bd36:	613b      	str	r3, [r7, #16]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	2b0f      	cmp	r3, #15
 800bd3c:	d9c7      	bls.n	800bcce <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd44:	461a      	mov	r2, r3
 800bd46:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd52:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7ff f929 	bl	800afac <USB_EnableGlobalInt>

  return HAL_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800bd64:	b590      	push	{r4, r7, lr}
 800bd66:	b089      	sub	sp, #36	; 0x24
 800bd68:	af04      	add	r7, sp, #16
 800bd6a:	6078      	str	r0, [r7, #4]
  uint8_t interface = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef status = USBH_FAIL;
 800bd70:	2302      	movs	r3, #2
 800bd72:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800bd7a:	7919      	ldrb	r1, [r3, #4]
 800bd7c:	2350      	movs	r3, #80	; 0x50
 800bd7e:	2206      	movs	r2, #6
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f001 fc52 	bl	800d62a <USBH_FindInterface>
 800bd86:	4603      	mov	r3, r0
 800bd88:	73bb      	strb	r3, [r7, #14]

  if(interface == 0xFFU) /* Not Valid Interface */
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
 800bd8c:	2bff      	cmp	r3, #255	; 0xff
 800bd8e:	d102      	bne.n	800bd96 <USBH_MSC_InterfaceInit+0x32>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;
 800bd90:	2302      	movs	r3, #2
 800bd92:	73fb      	strb	r3, [r7, #15]
 800bd94:	e10a      	b.n	800bfac <USBH_MSC_InterfaceInit+0x248>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f001 fc29 	bl	800d5f2 <USBH_SelectInterface>

    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 4278 	ldr.w	r4, [r3, #632]	; 0x278
 800bda6:	20cc      	movs	r0, #204	; 0xcc
 800bda8:	f01a f8ae 	bl	8025f08 <malloc>
 800bdac:	4603      	mov	r3, r0
 800bdae:	61e3      	str	r3, [r4, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800bdb6:	69db      	ldr	r3, [r3, #28]
 800bdb8:	60bb      	str	r3, [r7, #8]

    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	231a      	movs	r3, #26
 800bdc6:	fb01 f303 	mul.w	r3, r1, r3
 800bdca:	4413      	add	r3, r2
 800bdcc:	f203 234a 	addw	r3, r3, #586	; 0x24a
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	b25b      	sxtb	r3, r3
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	da1c      	bge.n	800be12 <USBH_MSC_InterfaceInit+0xae>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bdde:	4619      	mov	r1, r3
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	231a      	movs	r3, #26
 800bde4:	fb01 f303 	mul.w	r3, r1, r3
 800bde8:	4413      	add	r3, r2
 800bdea:	f203 234a 	addw	r3, r3, #586	; 0x24a
 800bdee:	781a      	ldrb	r2, [r3, #0]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	231a      	movs	r3, #26
 800be00:	fb01 f303 	mul.w	r3, r1, r3
 800be04:	4413      	add	r3, r2
 800be06:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800be0a:	881a      	ldrh	r2, [r3, #0]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	815a      	strh	r2, [r3, #10]
 800be10:	e01b      	b.n	800be4a <USBH_MSC_InterfaceInit+0xe6>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800be18:	4619      	mov	r1, r3
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	231a      	movs	r3, #26
 800be1e:	fb01 f303 	mul.w	r3, r1, r3
 800be22:	4413      	add	r3, r2
 800be24:	f203 234a 	addw	r3, r3, #586	; 0x24a
 800be28:	781a      	ldrb	r2, [r3, #0]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800be34:	4619      	mov	r1, r3
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	231a      	movs	r3, #26
 800be3a:	fb01 f303 	mul.w	r3, r1, r3
 800be3e:	4413      	add	r3, r2
 800be40:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800be44:	881a      	ldrh	r2, [r3, #0]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	811a      	strh	r2, [r3, #8]
    }

    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800be50:	4619      	mov	r1, r3
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	231a      	movs	r3, #26
 800be56:	fb01 f303 	mul.w	r3, r1, r3
 800be5a:	4413      	add	r3, r2
 800be5c:	f203 2352 	addw	r3, r3, #594	; 0x252
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	b25b      	sxtb	r3, r3
 800be64:	2b00      	cmp	r3, #0
 800be66:	da1c      	bge.n	800bea2 <USBH_MSC_InterfaceInit+0x13e>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800be6e:	4619      	mov	r1, r3
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	231a      	movs	r3, #26
 800be74:	fb01 f303 	mul.w	r3, r1, r3
 800be78:	4413      	add	r3, r2
 800be7a:	f203 2352 	addw	r3, r3, #594	; 0x252
 800be7e:	781a      	ldrb	r2, [r3, #0]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800be8a:	4619      	mov	r1, r3
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	231a      	movs	r3, #26
 800be90:	fb01 f303 	mul.w	r3, r1, r3
 800be94:	4413      	add	r3, r2
 800be96:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800be9a:	881a      	ldrh	r2, [r3, #0]
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	815a      	strh	r2, [r3, #10]
 800bea0:	e01b      	b.n	800beda <USBH_MSC_InterfaceInit+0x176>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bea8:	4619      	mov	r1, r3
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	231a      	movs	r3, #26
 800beae:	fb01 f303 	mul.w	r3, r1, r3
 800beb2:	4413      	add	r3, r2
 800beb4:	f203 2352 	addw	r3, r3, #594	; 0x252
 800beb8:	781a      	ldrb	r2, [r3, #0]
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bec4:	4619      	mov	r1, r3
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	231a      	movs	r3, #26
 800beca:	fb01 f303 	mul.w	r3, r1, r3
 800bece:	4413      	add	r3, r2
 800bed0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800bed4:	881a      	ldrh	r2, [r3, #0]
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	811a      	strh	r2, [r3, #8]
    }

    MSC_Handle->current_lun = 0U;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2200      	movs	r2, #0
 800bede:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    MSC_Handle->rw_lun = 0U;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    MSC_Handle->state = MSC_INIT;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2200      	movs	r2, #0
 800beee:	731a      	strb	r2, [r3, #12]
    MSC_Handle->error = MSC_OK;
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	2200      	movs	r2, #0
 800bef4:	735a      	strb	r2, [r3, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2200      	movs	r2, #0
 800befa:	739a      	strb	r2, [r3, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	799b      	ldrb	r3, [r3, #6]
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f002 fcb5 	bl	800e872 <USBH_AllocPipe>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	715a      	strb	r2, [r3, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	79db      	ldrb	r3, [r3, #7]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f002 fcab 	bl	800e872 <USBH_AllocPipe>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	461a      	mov	r2, r3
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	711a      	strb	r2, [r3, #4]

    USBH_MSC_BOT_Init(phost);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fdb5 	bl	800ca94 <USBH_MSC_BOT_Init>

    /* De-Initialize LUNs information */
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	3390      	adds	r3, #144	; 0x90
 800bf2e:	2234      	movs	r2, #52	; 0x34
 800bf30:	2100      	movs	r1, #0
 800bf32:	4618      	mov	r0, r3
 800bf34:	f01a f820 	bl	8025f78 <memset>

    /* Open the new channels */
    USBH_OpenPipe  (phost,
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	7959      	ldrb	r1, [r3, #5]
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	7998      	ldrb	r0, [r3, #6]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f893 421c 	ldrb.w	r4, [r3, #540]	; 0x21c
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	8912      	ldrh	r2, [r2, #8]
 800bf50:	9202      	str	r2, [sp, #8]
 800bf52:	2202      	movs	r2, #2
 800bf54:	9201      	str	r2, [sp, #4]
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	4623      	mov	r3, r4
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f002 fc59 	bl	800e814 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->OutEpSize);

    USBH_OpenPipe  (phost,
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	7919      	ldrb	r1, [r3, #4]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	79d8      	ldrb	r0, [r3, #7]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 421c 	ldrb.w	r4, [r3, #540]	; 0x21c
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	8952      	ldrh	r2, [r2, #10]
 800bf7a:	9202      	str	r2, [sp, #8]
 800bf7c:	2202      	movs	r2, #2
 800bf7e:	9201      	str	r2, [sp, #4]
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	4623      	mov	r3, r4
 800bf84:	4602      	mov	r2, r0
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f002 fc44 	bl	800e814 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->InEpSize);

    USBH_LL_SetToggle (phost, MSC_Handle->InPipe, 0U);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	791b      	ldrb	r3, [r3, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f017 fedc 	bl	8023d52 <USBH_LL_SetToggle>
    USBH_LL_SetToggle (phost, MSC_Handle->OutPipe, 0U);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	795b      	ldrb	r3, [r3, #5]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f017 fed5 	bl	8023d52 <USBH_LL_SetToggle>
    status = USBH_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd90      	pop	{r4, r7, pc}

0800bfb6 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b084      	sub	sp, #16
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800bfc4:	69db      	ldr	r3, [r3, #28]
 800bfc6:	60fb      	str	r3, [r7, #12]

  if ( MSC_Handle->OutPipe)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	795b      	ldrb	r3, [r3, #5]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00e      	beq.n	800bfee <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	795b      	ldrb	r3, [r3, #5]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f002 fc3b 	bl	800e852 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	795b      	ldrb	r3, [r3, #5]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f002 fc63 	bl	800e8ae <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	715a      	strb	r2, [r3, #5]
  }

  if ( MSC_Handle->InPipe)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	791b      	ldrb	r3, [r3, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00e      	beq.n	800c014 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	791b      	ldrb	r3, [r3, #4]
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f002 fc28 	bl	800e852 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	791b      	ldrb	r3, [r3, #4]
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f002 fc50 	bl	800e8ae <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	711a      	strb	r2, [r3, #4]
  }

  if(phost->pActiveClass->pData)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free (phost->pActiveClass->pData);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	4618      	mov	r0, r3
 800c02a:	f019 ff75 	bl	8025f18 <free>
    phost->pActiveClass->pData = 0U;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c034:	2200      	movs	r2, #0
 800c036:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c050:	69db      	ldr	r3, [r3, #28]
 800c052:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c054:	2301      	movs	r3, #1
 800c056:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	7b9b      	ldrb	r3, [r3, #14]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d041      	beq.n	800c0e4 <USBH_MSC_ClassRequest+0xa2>
 800c060:	2b03      	cmp	r3, #3
 800c062:	dc4b      	bgt.n	800c0fc <USBH_MSC_ClassRequest+0xba>
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <USBH_MSC_ClassRequest+0x2a>
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d147      	bne.n	800c0fc <USBH_MSC_ClassRequest+0xba>
  {
  case MSC_REQ_IDLE:
  case MSC_REQ_GET_MAX_LUN:
    /* Issue GetMaxLUN request */
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)(void *)&MSC_Handle->max_lun);
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fcf0 	bl	800ca56 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800c076:	4603      	mov	r3, r0
 800c078:	73fb      	strb	r3, [r7, #15]

    /* When devices do not support the GetMaxLun request, this should
       be considred as only one logical unit is supported */
    if(status == USBH_NOT_SUPPORTED)
 800c07a:	7bfb      	ldrb	r3, [r7, #15]
 800c07c:	2b03      	cmp	r3, #3
 800c07e:	d104      	bne.n	800c08a <USBH_MSC_ClassRequest+0x48>
    {
      MSC_Handle->max_lun = 0U;
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2200      	movs	r2, #0
 800c084:	601a      	str	r2, [r3, #0]
      status = USBH_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	73fb      	strb	r3, [r7, #15]
    }

    if(status == USBH_OK)
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d137      	bne.n	800c100 <USBH_MSC_ClassRequest+0xbe>
    {
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d804      	bhi.n	800c0a2 <USBH_MSC_ClassRequest+0x60>
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	3301      	adds	r3, #1
 800c0a0:	e000      	b.n	800c0a4 <USBH_MSC_ClassRequest+0x62>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	68ba      	ldr	r2, [r7, #8]
 800c0a6:	6013      	str	r3, [r2, #0]
      USBH_UsrLog ("Number of supported LUN: %lu", (int32_t)(MSC_Handle->max_lun));

      for(i = 0U; i < MSC_Handle->max_lun; i++)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	73bb      	strb	r3, [r7, #14]
 800c0ac:	e014      	b.n	800c0d8 <USBH_MSC_ClassRequest+0x96>
      {
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800c0ae:	7bbb      	ldrb	r3, [r7, #14]
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	2134      	movs	r1, #52	; 0x34
 800c0b4:	fb01 f303 	mul.w	r3, r1, r3
 800c0b8:	4413      	add	r3, r2
 800c0ba:	3392      	adds	r3, #146	; 0x92
 800c0bc:	2202      	movs	r2, #2
 800c0be:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[i].state_changed = 0U;
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	2134      	movs	r1, #52	; 0x34
 800c0c6:	fb01 f303 	mul.w	r3, r1, r3
 800c0ca:	4413      	add	r3, r2
 800c0cc:	33c1      	adds	r3, #193	; 0xc1
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	701a      	strb	r2, [r3, #0]
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 800c0d2:	7bbb      	ldrb	r3, [r7, #14]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	73bb      	strb	r3, [r7, #14]
 800c0d8:	7bba      	ldrb	r2, [r7, #14]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d3e5      	bcc.n	800c0ae <USBH_MSC_ClassRequest+0x6c>
      }
    }
    break;
 800c0e2:	e00d      	b.n	800c100 <USBH_MSC_ClassRequest+0xbe>

  case MSC_REQ_ERROR :
    /* a Clear Feature should be issued here */
    if(USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f001 ff62 	bl	800dfb0 <USBH_ClrFeature>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d108      	bne.n	800c104 <USBH_MSC_ClassRequest+0xc2>
    {
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	7bda      	ldrb	r2, [r3, #15]
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	739a      	strb	r2, [r3, #14]
    }
    break;
 800c0fa:	e003      	b.n	800c104 <USBH_MSC_ClassRequest+0xc2>

  default:
    break;
 800c0fc:	bf00      	nop
 800c0fe:	e002      	b.n	800c106 <USBH_MSC_ClassRequest+0xc4>
    break;
 800c100:	bf00      	nop
 800c102:	e000      	b.n	800c106 <USBH_MSC_ClassRequest+0xc4>
    break;
 800c104:	bf00      	nop
  }

  return status;
 800c106:	7bfb      	ldrb	r3, [r7, #15]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800c122:	2301      	movs	r3, #1
 800c124:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800c126:	2301      	movs	r3, #1
 800c128:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY ;
 800c12a:	2301      	movs	r3, #1
 800c12c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	7b1b      	ldrb	r3, [r3, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <USBH_MSC_Process+0x2e>
 800c136:	2b01      	cmp	r3, #1
 800c138:	f000 8271 	beq.w	800c61e <USBH_MSC_Process+0x50e>
  case MSC_IDLE:
    error = USBH_OK;
    break;

  default:
    break;
 800c13c:	e272      	b.n	800c624 <USBH_MSC_Process+0x514>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c144:	461a      	mov	r2, r3
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	f080 824f 	bcs.w	800c5ee <USBH_MSC_Process+0x4de>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c156:	4619      	mov	r1, r3
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	2334      	movs	r3, #52	; 0x34
 800c15c:	fb01 f303 	mul.w	r3, r1, r3
 800c160:	4413      	add	r3, r2
 800c162:	3391      	adds	r3, #145	; 0x91
 800c164:	2201      	movs	r2, #1
 800c166:	701a      	strb	r2, [r3, #0]
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c16e:	4619      	mov	r1, r3
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	2334      	movs	r3, #52	; 0x34
 800c174:	fb01 f303 	mul.w	r3, r1, r3
 800c178:	4413      	add	r3, r2
 800c17a:	3390      	adds	r3, #144	; 0x90
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	2b08      	cmp	r3, #8
 800c180:	f200 8243 	bhi.w	800c60a <USBH_MSC_Process+0x4fa>
 800c184:	a201      	add	r2, pc, #4	; (adr r2, 800c18c <USBH_MSC_Process+0x7c>)
 800c186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18a:	bf00      	nop
 800c18c:	0800c1b1 	.word	0x0800c1b1
 800c190:	0800c60b 	.word	0x0800c60b
 800c194:	0800c279 	.word	0x0800c279
 800c198:	0800c3fd 	.word	0x0800c3fd
 800c19c:	0800c1d7 	.word	0x0800c1d7
 800c1a0:	0800c4c9 	.word	0x0800c4c9
 800c1a4:	0800c60b 	.word	0x0800c60b
 800c1a8:	0800c60b 	.word	0x0800c60b
 800c1ac:	0800c5dd 	.word	0x0800c5dd
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	2334      	movs	r3, #52	; 0x34
 800c1bc:	fb01 f303 	mul.w	r3, r1, r3
 800c1c0:	4413      	add	r3, r2
 800c1c2:	3390      	adds	r3, #144	; 0x90
 800c1c4:	2204      	movs	r2, #4
 800c1c6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->timer = phost->Timer;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 800c1d4:	e222      	b.n	800c61c <USBH_MSC_Process+0x50c>
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c1dc:	b2d9      	uxtb	r1, r3
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	2334      	movs	r3, #52	; 0x34
 800c1e8:	fb02 f303 	mul.w	r3, r2, r3
 800c1ec:	3398      	adds	r3, #152	; 0x98
 800c1ee:	693a      	ldr	r2, [r7, #16]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	3307      	adds	r3, #7
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 ff6a 	bl	800d0d0 <USBH_MSC_SCSI_Inquiry>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73fb      	strb	r3, [r7, #15]
        if (scsi_status == USBH_OK)
 800c200:	7bfb      	ldrb	r3, [r7, #15]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d10b      	bne.n	800c21e <USBH_MSC_Process+0x10e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c20c:	4619      	mov	r1, r3
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	2334      	movs	r3, #52	; 0x34
 800c212:	fb01 f303 	mul.w	r3, r1, r3
 800c216:	4413      	add	r3, r2
 800c218:	3390      	adds	r3, #144	; 0x90
 800c21a:	2202      	movs	r2, #2
 800c21c:	701a      	strb	r2, [r3, #0]
        if (scsi_status == USBH_FAIL)
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	2b02      	cmp	r3, #2
 800c222:	d10c      	bne.n	800c23e <USBH_MSC_Process+0x12e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c22a:	4619      	mov	r1, r3
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	2334      	movs	r3, #52	; 0x34
 800c230:	fb01 f303 	mul.w	r3, r1, r3
 800c234:	4413      	add	r3, r2
 800c236:	3390      	adds	r3, #144	; 0x90
 800c238:	2205      	movs	r2, #5
 800c23a:	701a      	strb	r2, [r3, #0]
        break;
 800c23c:	e1e7      	b.n	800c60e <USBH_MSC_Process+0x4fe>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	2b04      	cmp	r3, #4
 800c242:	f040 81e4 	bne.w	800c60e <USBH_MSC_Process+0x4fe>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c24c:	4619      	mov	r1, r3
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	2334      	movs	r3, #52	; 0x34
 800c252:	fb01 f303 	mul.w	r3, r1, r3
 800c256:	4413      	add	r3, r2
 800c258:	3390      	adds	r3, #144	; 0x90
 800c25a:	2201      	movs	r2, #1
 800c25c:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c264:	4619      	mov	r1, r3
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	2334      	movs	r3, #52	; 0x34
 800c26a:	fb01 f303 	mul.w	r3, r1, r3
 800c26e:	4413      	add	r3, r2
 800c270:	3391      	adds	r3, #145	; 0x91
 800c272:	2202      	movs	r2, #2
 800c274:	701a      	strb	r2, [r3, #0]
        break;
 800c276:	e1ca      	b.n	800c60e <USBH_MSC_Process+0x4fe>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fe66 	bl	800cf54 <USBH_MSC_SCSI_TestUnitReady>
 800c288:	4603      	mov	r3, r0
 800c28a:	73bb      	strb	r3, [r7, #14]
        if (ready_status == USBH_OK)
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d149      	bne.n	800c326 <USBH_MSC_Process+0x216>
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c298:	4619      	mov	r1, r3
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	2334      	movs	r3, #52	; 0x34
 800c29e:	fb01 f303 	mul.w	r3, r1, r3
 800c2a2:	4413      	add	r3, r2
 800c2a4:	3392      	adds	r3, #146	; 0x92
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00c      	beq.n	800c2c6 <USBH_MSC_Process+0x1b6>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	693a      	ldr	r2, [r7, #16]
 800c2b6:	2334      	movs	r3, #52	; 0x34
 800c2b8:	fb01 f303 	mul.w	r3, r1, r3
 800c2bc:	4413      	add	r3, r2
 800c2be:	33c1      	adds	r3, #193	; 0xc1
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	701a      	strb	r2, [r3, #0]
 800c2c4:	e00b      	b.n	800c2de <USBH_MSC_Process+0x1ce>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	693a      	ldr	r2, [r7, #16]
 800c2d0:	2334      	movs	r3, #52	; 0x34
 800c2d2:	fb01 f303 	mul.w	r3, r1, r3
 800c2d6:	4413      	add	r3, r2
 800c2d8:	33c1      	adds	r3, #193	; 0xc1
 800c2da:	2200      	movs	r2, #0
 800c2dc:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	2334      	movs	r3, #52	; 0x34
 800c2ea:	fb01 f303 	mul.w	r3, r1, r3
 800c2ee:	4413      	add	r3, r2
 800c2f0:	3390      	adds	r3, #144	; 0x90
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	2334      	movs	r3, #52	; 0x34
 800c302:	fb01 f303 	mul.w	r3, r1, r3
 800c306:	4413      	add	r3, r2
 800c308:	3391      	adds	r3, #145	; 0x91
 800c30a:	2200      	movs	r2, #0
 800c30c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c314:	4619      	mov	r1, r3
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	2334      	movs	r3, #52	; 0x34
 800c31a:	fb01 f303 	mul.w	r3, r1, r3
 800c31e:	4413      	add	r3, r2
 800c320:	3392      	adds	r3, #146	; 0x92
 800c322:	2200      	movs	r2, #0
 800c324:	701a      	strb	r2, [r3, #0]
        if (ready_status == USBH_FAIL)
 800c326:	7bbb      	ldrb	r3, [r7, #14]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d14a      	bne.n	800c3c2 <USBH_MSC_Process+0x2b2>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c332:	4619      	mov	r1, r3
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	2334      	movs	r3, #52	; 0x34
 800c338:	fb01 f303 	mul.w	r3, r1, r3
 800c33c:	4413      	add	r3, r2
 800c33e:	3392      	adds	r3, #146	; 0x92
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	2b02      	cmp	r3, #2
 800c344:	d00c      	beq.n	800c360 <USBH_MSC_Process+0x250>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c34c:	4619      	mov	r1, r3
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	2334      	movs	r3, #52	; 0x34
 800c352:	fb01 f303 	mul.w	r3, r1, r3
 800c356:	4413      	add	r3, r2
 800c358:	33c1      	adds	r3, #193	; 0xc1
 800c35a:	2201      	movs	r2, #1
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	e00b      	b.n	800c378 <USBH_MSC_Process+0x268>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c366:	4619      	mov	r1, r3
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	2334      	movs	r3, #52	; 0x34
 800c36c:	fb01 f303 	mul.w	r3, r1, r3
 800c370:	4413      	add	r3, r2
 800c372:	33c1      	adds	r3, #193	; 0xc1
 800c374:	2200      	movs	r2, #0
 800c376:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c37e:	4619      	mov	r1, r3
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	2334      	movs	r3, #52	; 0x34
 800c384:	fb01 f303 	mul.w	r3, r1, r3
 800c388:	4413      	add	r3, r2
 800c38a:	3390      	adds	r3, #144	; 0x90
 800c38c:	2205      	movs	r2, #5
 800c38e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c396:	4619      	mov	r1, r3
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	2334      	movs	r3, #52	; 0x34
 800c39c:	fb01 f303 	mul.w	r3, r1, r3
 800c3a0:	4413      	add	r3, r2
 800c3a2:	3391      	adds	r3, #145	; 0x91
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	693a      	ldr	r2, [r7, #16]
 800c3b2:	2334      	movs	r3, #52	; 0x34
 800c3b4:	fb01 f303 	mul.w	r3, r1, r3
 800c3b8:	4413      	add	r3, r2
 800c3ba:	3392      	adds	r3, #146	; 0x92
 800c3bc:	2202      	movs	r2, #2
 800c3be:	701a      	strb	r2, [r3, #0]
        break;
 800c3c0:	e127      	b.n	800c612 <USBH_MSC_Process+0x502>
          if (ready_status == USBH_UNRECOVERED_ERROR)
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	f040 8124 	bne.w	800c612 <USBH_MSC_Process+0x502>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	693a      	ldr	r2, [r7, #16]
 800c3d4:	2334      	movs	r3, #52	; 0x34
 800c3d6:	fb01 f303 	mul.w	r3, r1, r3
 800c3da:	4413      	add	r3, r2
 800c3dc:	3390      	adds	r3, #144	; 0x90
 800c3de:	2201      	movs	r2, #1
 800c3e0:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	2334      	movs	r3, #52	; 0x34
 800c3ee:	fb01 f303 	mul.w	r3, r1, r3
 800c3f2:	4413      	add	r3, r2
 800c3f4:	3391      	adds	r3, #145	; 0x91
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	701a      	strb	r2, [r3, #0]
        break;
 800c3fa:	e10a      	b.n	800c612 <USBH_MSC_Process+0x502>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c402:	b2d9      	uxtb	r1, r3
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c40a:	461a      	mov	r2, r3
 800c40c:	2334      	movs	r3, #52	; 0x34
 800c40e:	fb02 f303 	mul.w	r3, r2, r3
 800c412:	3390      	adds	r3, #144	; 0x90
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	4413      	add	r3, r2
 800c418:	3304      	adds	r3, #4
 800c41a:	461a      	mov	r2, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fddc 	bl	800cfda <USBH_MSC_SCSI_ReadCapacity>
 800c422:	4603      	mov	r3, r0
 800c424:	73fb      	strb	r3, [r7, #15]
        if(scsi_status == USBH_OK)
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d120      	bne.n	800c46e <USBH_MSC_Process+0x35e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c432:	4619      	mov	r1, r3
 800c434:	693a      	ldr	r2, [r7, #16]
 800c436:	2334      	movs	r3, #52	; 0x34
 800c438:	fb01 f303 	mul.w	r3, r1, r3
 800c43c:	4413      	add	r3, r2
 800c43e:	3390      	adds	r3, #144	; 0x90
 800c440:	2201      	movs	r2, #1
 800c442:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c44a:	4619      	mov	r1, r3
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	2334      	movs	r3, #52	; 0x34
 800c450:	fb01 f303 	mul.w	r3, r1, r3
 800c454:	4413      	add	r3, r2
 800c456:	3391      	adds	r3, #145	; 0x91
 800c458:	2200      	movs	r2, #0
 800c45a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c462:	3301      	adds	r3, #1
 800c464:	b29a      	uxth	r2, r3
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
        break;
 800c46c:	e0d3      	b.n	800c616 <USBH_MSC_Process+0x506>
        else if(scsi_status == USBH_FAIL)
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
 800c470:	2b02      	cmp	r3, #2
 800c472:	d10c      	bne.n	800c48e <USBH_MSC_Process+0x37e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c47a:	4619      	mov	r1, r3
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	2334      	movs	r3, #52	; 0x34
 800c480:	fb01 f303 	mul.w	r3, r1, r3
 800c484:	4413      	add	r3, r2
 800c486:	3390      	adds	r3, #144	; 0x90
 800c488:	2205      	movs	r2, #5
 800c48a:	701a      	strb	r2, [r3, #0]
        break;
 800c48c:	e0c3      	b.n	800c616 <USBH_MSC_Process+0x506>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 800c48e:	7bfb      	ldrb	r3, [r7, #15]
 800c490:	2b04      	cmp	r3, #4
 800c492:	f040 80c0 	bne.w	800c616 <USBH_MSC_Process+0x506>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c49c:	4619      	mov	r1, r3
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	2334      	movs	r3, #52	; 0x34
 800c4a2:	fb01 f303 	mul.w	r3, r1, r3
 800c4a6:	4413      	add	r3, r2
 800c4a8:	3390      	adds	r3, #144	; 0x90
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	2334      	movs	r3, #52	; 0x34
 800c4ba:	fb01 f303 	mul.w	r3, r1, r3
 800c4be:	4413      	add	r3, r2
 800c4c0:	3391      	adds	r3, #145	; 0x91
 800c4c2:	2202      	movs	r2, #2
 800c4c4:	701a      	strb	r2, [r3, #0]
        break;
 800c4c6:	e0a6      	b.n	800c616 <USBH_MSC_Process+0x506>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c4ce:	b2d9      	uxtb	r1, r3
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	2334      	movs	r3, #52	; 0x34
 800c4da:	fb02 f303 	mul.w	r3, r2, r3
 800c4de:	3398      	adds	r3, #152	; 0x98
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fe96 	bl	800d21a <USBH_MSC_SCSI_RequestSense>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d145      	bne.n	800c584 <USBH_MSC_Process+0x474>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c4fe:	4619      	mov	r1, r3
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	2334      	movs	r3, #52	; 0x34
 800c504:	fb01 f303 	mul.w	r3, r1, r3
 800c508:	4413      	add	r3, r2
 800c50a:	339c      	adds	r3, #156	; 0x9c
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	2b06      	cmp	r3, #6
 800c510:	d00c      	beq.n	800c52c <USBH_MSC_Process+0x41c>
             (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c518:	4619      	mov	r1, r3
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	2334      	movs	r3, #52	; 0x34
 800c51e:	fb01 f303 	mul.w	r3, r1, r3
 800c522:	4413      	add	r3, r2
 800c524:	339c      	adds	r3, #156	; 0x9c
 800c526:	781b      	ldrb	r3, [r3, #0]
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d117      	bne.n	800c55c <USBH_MSC_Process+0x44c>
            if((phost->Timer - MSC_Handle->timer) < 10000U)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	f242 720f 	movw	r2, #9999	; 0x270f
 800c53e:	4293      	cmp	r3, r2
 800c540:	d80c      	bhi.n	800c55c <USBH_MSC_Process+0x44c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c548:	4619      	mov	r1, r3
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	2334      	movs	r3, #52	; 0x34
 800c54e:	fb01 f303 	mul.w	r3, r1, r3
 800c552:	4413      	add	r3, r2
 800c554:	3390      	adds	r3, #144	; 0x90
 800c556:	2202      	movs	r2, #2
 800c558:	701a      	strb	r2, [r3, #0]
              break;
 800c55a:	e05f      	b.n	800c61c <USBH_MSC_Process+0x50c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c562:	4619      	mov	r1, r3
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	2334      	movs	r3, #52	; 0x34
 800c568:	fb01 f303 	mul.w	r3, r1, r3
 800c56c:	4413      	add	r3, r2
 800c56e:	3390      	adds	r3, #144	; 0x90
 800c570:	2201      	movs	r2, #1
 800c572:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c57a:	3301      	adds	r3, #1
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
        if(scsi_status == USBH_FAIL)
 800c584:	7bfb      	ldrb	r3, [r7, #15]
 800c586:	2b02      	cmp	r3, #2
 800c588:	d10c      	bne.n	800c5a4 <USBH_MSC_Process+0x494>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c590:	4619      	mov	r1, r3
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	2334      	movs	r3, #52	; 0x34
 800c596:	fb01 f303 	mul.w	r3, r1, r3
 800c59a:	4413      	add	r3, r2
 800c59c:	3390      	adds	r3, #144	; 0x90
 800c59e:	2208      	movs	r2, #8
 800c5a0:	701a      	strb	r2, [r3, #0]
        break;
 800c5a2:	e03a      	b.n	800c61a <USBH_MSC_Process+0x50a>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	2b04      	cmp	r3, #4
 800c5a8:	d137      	bne.n	800c61a <USBH_MSC_Process+0x50a>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	2334      	movs	r3, #52	; 0x34
 800c5b6:	fb01 f303 	mul.w	r3, r1, r3
 800c5ba:	4413      	add	r3, r2
 800c5bc:	3390      	adds	r3, #144	; 0x90
 800c5be:	2201      	movs	r2, #1
 800c5c0:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	2334      	movs	r3, #52	; 0x34
 800c5ce:	fb01 f303 	mul.w	r3, r1, r3
 800c5d2:	4413      	add	r3, r2
 800c5d4:	3391      	adds	r3, #145	; 0x91
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	701a      	strb	r2, [r3, #0]
        break;
 800c5da:	e01e      	b.n	800c61a <USBH_MSC_Process+0x50a>
        MSC_Handle->current_lun++;
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
        break;
 800c5ec:	e016      	b.n	800c61c <USBH_MSC_Process+0x50c>
      MSC_Handle->current_lun = 0U;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      MSC_Handle->state = MSC_IDLE;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	731a      	strb	r2, [r3, #12]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c602:	2102      	movs	r1, #2
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	4798      	blx	r3
    break;
 800c608:	e00c      	b.n	800c624 <USBH_MSC_Process+0x514>
        break;
 800c60a:	bf00      	nop
 800c60c:	e00a      	b.n	800c624 <USBH_MSC_Process+0x514>
        break;
 800c60e:	bf00      	nop
 800c610:	e008      	b.n	800c624 <USBH_MSC_Process+0x514>
        break;
 800c612:	bf00      	nop
 800c614:	e006      	b.n	800c624 <USBH_MSC_Process+0x514>
        break;
 800c616:	bf00      	nop
 800c618:	e004      	b.n	800c624 <USBH_MSC_Process+0x514>
        break;
 800c61a:	bf00      	nop
    break;
 800c61c:	e002      	b.n	800c624 <USBH_MSC_Process+0x514>
    error = USBH_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	75fb      	strb	r3, [r7, #23]
    break;
 800c622:	bf00      	nop
  }
  return error;
 800c624:	7dfb      	ldrb	r3, [r7, #23]
}
 800c626:	4618      	mov	r0, r3
 800c628:	3718      	adds	r7, #24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop

0800c630 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]

  return USBH_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b088      	sub	sp, #32
 800c64a:	af02      	add	r7, sp, #8
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	460b      	mov	r3, r1
 800c650:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800c65c:	2301      	movs	r3, #1
 800c65e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800c660:	2301      	movs	r3, #1
 800c662:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800c664:	78fb      	ldrb	r3, [r7, #3]
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	2134      	movs	r1, #52	; 0x34
 800c66a:	fb01 f303 	mul.w	r3, r1, r3
 800c66e:	4413      	add	r3, r2
 800c670:	3390      	adds	r3, #144	; 0x90
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	2b07      	cmp	r3, #7
 800c676:	d03c      	beq.n	800c6f2 <USBH_MSC_RdWrProcess+0xac>
 800c678:	2b07      	cmp	r3, #7
 800c67a:	f300 80a7 	bgt.w	800c7cc <USBH_MSC_RdWrProcess+0x186>
 800c67e:	2b05      	cmp	r3, #5
 800c680:	d06c      	beq.n	800c75c <USBH_MSC_RdWrProcess+0x116>
 800c682:	2b06      	cmp	r3, #6
 800c684:	f040 80a2 	bne.w	800c7cc <USBH_MSC_RdWrProcess+0x186>
  {

  case MSC_READ:
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 800c688:	78f9      	ldrb	r1, [r7, #3]
 800c68a:	2300      	movs	r3, #0
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	2300      	movs	r3, #0
 800c690:	2200      	movs	r2, #0
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 fea5 	bl	800d3e2 <USBH_MSC_SCSI_Read>
 800c698:	4603      	mov	r3, r0
 800c69a:	73fb      	strb	r3, [r7, #15]

    if(scsi_status == USBH_OK)
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d10b      	bne.n	800c6ba <USBH_MSC_RdWrProcess+0x74>
    {
      MSC_Handle->unit[lun].state = MSC_IDLE;
 800c6a2:	78fb      	ldrb	r3, [r7, #3]
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	2134      	movs	r1, #52	; 0x34
 800c6a8:	fb01 f303 	mul.w	r3, r1, r3
 800c6ac:	4413      	add	r3, r2
 800c6ae:	3390      	adds	r3, #144	; 0x90
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	701a      	strb	r2, [r3, #0]
      error = USBH_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800c6b8:	e08a      	b.n	800c7d0 <USBH_MSC_RdWrProcess+0x18a>
    else if( scsi_status == USBH_FAIL)
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d109      	bne.n	800c6d4 <USBH_MSC_RdWrProcess+0x8e>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	693a      	ldr	r2, [r7, #16]
 800c6c4:	2134      	movs	r1, #52	; 0x34
 800c6c6:	fb01 f303 	mul.w	r3, r1, r3
 800c6ca:	4413      	add	r3, r2
 800c6cc:	3390      	adds	r3, #144	; 0x90
 800c6ce:	2205      	movs	r2, #5
 800c6d0:	701a      	strb	r2, [r3, #0]
    break;
 800c6d2:	e07d      	b.n	800c7d0 <USBH_MSC_RdWrProcess+0x18a>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
 800c6d6:	2b04      	cmp	r3, #4
 800c6d8:	d17a      	bne.n	800c7d0 <USBH_MSC_RdWrProcess+0x18a>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c6da:	78fb      	ldrb	r3, [r7, #3]
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	2134      	movs	r1, #52	; 0x34
 800c6e0:	fb01 f303 	mul.w	r3, r1, r3
 800c6e4:	4413      	add	r3, r2
 800c6e6:	3390      	adds	r3, #144	; 0x90
 800c6e8:	2208      	movs	r2, #8
 800c6ea:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	75fb      	strb	r3, [r7, #23]
    break;
 800c6f0:	e06e      	b.n	800c7d0 <USBH_MSC_RdWrProcess+0x18a>

  case MSC_WRITE:
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 800c6f2:	78f9      	ldrb	r1, [r7, #3]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fe05 	bl	800d30c <USBH_MSC_SCSI_Write>
 800c702:	4603      	mov	r3, r0
 800c704:	73fb      	strb	r3, [r7, #15]

    if(scsi_status == USBH_OK)
 800c706:	7bfb      	ldrb	r3, [r7, #15]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10b      	bne.n	800c724 <USBH_MSC_RdWrProcess+0xde>
    {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c70c:	78fb      	ldrb	r3, [r7, #3]
 800c70e:	693a      	ldr	r2, [r7, #16]
 800c710:	2134      	movs	r1, #52	; 0x34
 800c712:	fb01 f303 	mul.w	r3, r1, r3
 800c716:	4413      	add	r3, r2
 800c718:	3390      	adds	r3, #144	; 0x90
 800c71a:	2201      	movs	r2, #1
 800c71c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800c722:	e057      	b.n	800c7d4 <USBH_MSC_RdWrProcess+0x18e>
    else if( scsi_status == USBH_FAIL)
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	2b02      	cmp	r3, #2
 800c728:	d109      	bne.n	800c73e <USBH_MSC_RdWrProcess+0xf8>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800c72a:	78fb      	ldrb	r3, [r7, #3]
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	2134      	movs	r1, #52	; 0x34
 800c730:	fb01 f303 	mul.w	r3, r1, r3
 800c734:	4413      	add	r3, r2
 800c736:	3390      	adds	r3, #144	; 0x90
 800c738:	2205      	movs	r2, #5
 800c73a:	701a      	strb	r2, [r3, #0]
    break;
 800c73c:	e04a      	b.n	800c7d4 <USBH_MSC_RdWrProcess+0x18e>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 800c73e:	7bfb      	ldrb	r3, [r7, #15]
 800c740:	2b04      	cmp	r3, #4
 800c742:	d147      	bne.n	800c7d4 <USBH_MSC_RdWrProcess+0x18e>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c744:	78fb      	ldrb	r3, [r7, #3]
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	2134      	movs	r1, #52	; 0x34
 800c74a:	fb01 f303 	mul.w	r3, r1, r3
 800c74e:	4413      	add	r3, r2
 800c750:	3390      	adds	r3, #144	; 0x90
 800c752:	2208      	movs	r2, #8
 800c754:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800c756:	2302      	movs	r3, #2
 800c758:	75fb      	strb	r3, [r7, #23]
    break;
 800c75a:	e03b      	b.n	800c7d4 <USBH_MSC_RdWrProcess+0x18e>

  case MSC_REQUEST_SENSE:
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800c75c:	78fb      	ldrb	r3, [r7, #3]
 800c75e:	2234      	movs	r2, #52	; 0x34
 800c760:	fb02 f303 	mul.w	r3, r2, r3
 800c764:	3398      	adds	r3, #152	; 0x98
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	4413      	add	r3, r2
 800c76a:	1d1a      	adds	r2, r3, #4
 800c76c:	78fb      	ldrb	r3, [r7, #3]
 800c76e:	4619      	mov	r1, r3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fd52 	bl	800d21a <USBH_MSC_SCSI_RequestSense>
 800c776:	4603      	mov	r3, r0
 800c778:	73fb      	strb	r3, [r7, #15]

    if(scsi_status == USBH_OK)
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d113      	bne.n	800c7a8 <USBH_MSC_RdWrProcess+0x162>
    {
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
      USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
      USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
      MSC_Handle->unit[lun].state = MSC_IDLE;
 800c780:	78fb      	ldrb	r3, [r7, #3]
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	2134      	movs	r1, #52	; 0x34
 800c786:	fb01 f303 	mul.w	r3, r1, r3
 800c78a:	4413      	add	r3, r2
 800c78c:	3390      	adds	r3, #144	; 0x90
 800c78e:	2201      	movs	r2, #1
 800c790:	701a      	strb	r2, [r3, #0]
      MSC_Handle->unit[lun].error = MSC_ERROR;
 800c792:	78fb      	ldrb	r3, [r7, #3]
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	2134      	movs	r1, #52	; 0x34
 800c798:	fb01 f303 	mul.w	r3, r1, r3
 800c79c:	4413      	add	r3, r2
 800c79e:	3391      	adds	r3, #145	; 0x91
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	701a      	strb	r2, [r3, #0]

      error = USBH_FAIL;
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	75fb      	strb	r3, [r7, #23]
    }
    if(scsi_status == USBH_FAIL)
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d014      	beq.n	800c7d8 <USBH_MSC_RdWrProcess+0x192>
    {
      USBH_UsrLog ("MSC Device NOT ready");
    }
    else
    {
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d111      	bne.n	800c7d8 <USBH_MSC_RdWrProcess+0x192>
      {
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	2134      	movs	r1, #52	; 0x34
 800c7ba:	fb01 f303 	mul.w	r3, r1, r3
 800c7be:	4413      	add	r3, r2
 800c7c0:	3390      	adds	r3, #144	; 0x90
 800c7c2:	2208      	movs	r2, #8
 800c7c4:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800c7ca:	e005      	b.n	800c7d8 <USBH_MSC_RdWrProcess+0x192>

  default:
    break;
 800c7cc:	bf00      	nop
 800c7ce:	e004      	b.n	800c7da <USBH_MSC_RdWrProcess+0x194>
    break;
 800c7d0:	bf00      	nop
 800c7d2:	e002      	b.n	800c7da <USBH_MSC_RdWrProcess+0x194>
    break;
 800c7d4:	bf00      	nop
 800c7d6:	e000      	b.n	800c7da <USBH_MSC_RdWrProcess+0x194>
    break;
 800c7d8:	bf00      	nop

  }
  return error;
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c7f6:	69db      	ldr	r3, [r3, #28]
 800c7f8:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b0b      	cmp	r3, #11
 800c802:	d10c      	bne.n	800c81e <USBH_MSC_UnitIsReady+0x3a>
 800c804:	78fb      	ldrb	r3, [r7, #3]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	2134      	movs	r1, #52	; 0x34
 800c80a:	fb01 f303 	mul.w	r3, r1, r3
 800c80e:	4413      	add	r3, r2
 800c810:	3391      	adds	r3, #145	; 0x91
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d102      	bne.n	800c81e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800c818:	2301      	movs	r3, #1
 800c81a:	73fb      	strb	r3, [r7, #15]
 800c81c:	e001      	b.n	800c822 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800c81e:	2300      	movs	r3, #0
 800c820:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c822:	7bfb      	ldrb	r3, [r7, #15]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	460b      	mov	r3, r1
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	617b      	str	r3, [r7, #20]
  if(phost->gState == HOST_CLASS)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b0b      	cmp	r3, #11
 800c850:	d10d      	bne.n	800c86e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800c852:	7afb      	ldrb	r3, [r7, #11]
 800c854:	2234      	movs	r2, #52	; 0x34
 800c856:	fb02 f303 	mul.w	r3, r2, r3
 800c85a:	3390      	adds	r3, #144	; 0x90
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	4413      	add	r3, r2
 800c860:	2234      	movs	r2, #52	; 0x34
 800c862:	4619      	mov	r1, r3
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f019 fb5f 	bl	8025f28 <memcpy>
    return USBH_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	e000      	b.n	800c870 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800c86e:	2302      	movs	r3, #2
  }
}
 800c870:	4618      	mov	r0, r3
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b088      	sub	sp, #32
 800c87c:	af02      	add	r7, sp, #8
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	607a      	str	r2, [r7, #4]
 800c882:	603b      	str	r3, [r7, #0]
 800c884:	460b      	mov	r3, r1
 800c886:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c88e:	69db      	ldr	r3, [r3, #28]
 800c890:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00e      	beq.n	800c8bc <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c8a4:	2b0b      	cmp	r3, #11
 800c8a6:	d109      	bne.n	800c8bc <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c8a8:	7afb      	ldrb	r3, [r7, #11]
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	2134      	movs	r1, #52	; 0x34
 800c8ae:	fb01 f303 	mul.w	r3, r1, r3
 800c8b2:	4413      	add	r3, r2
 800c8b4:	3390      	adds	r3, #144	; 0x90
 800c8b6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d001      	beq.n	800c8c0 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800c8bc:	2302      	movs	r3, #2
 800c8be:	e040      	b.n	800c942 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	2206      	movs	r2, #6
 800c8c4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800c8c6:	7afb      	ldrb	r3, [r7, #11]
 800c8c8:	697a      	ldr	r2, [r7, #20]
 800c8ca:	2134      	movs	r1, #52	; 0x34
 800c8cc:	fb01 f303 	mul.w	r3, r1, r3
 800c8d0:	4413      	add	r3, r2
 800c8d2:	3390      	adds	r3, #144	; 0x90
 800c8d4:	2206      	movs	r2, #6
 800c8d6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c8d8:	7afb      	ldrb	r3, [r7, #11]
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800c8e2:	7af9      	ldrb	r1, [r7, #11]
 800c8e4:	6a3b      	ldr	r3, [r7, #32]
 800c8e6:	9300      	str	r3, [sp, #0]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f000 fd78 	bl	800d3e2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8f8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c8fa:	e016      	b.n	800c92a <USBH_MSC_Read+0xb2>
  {
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	1ad2      	subs	r2, r2, r3
 800c906:	6a3b      	ldr	r3, [r7, #32]
 800c908:	f242 7110 	movw	r1, #10000	; 0x2710
 800c90c:	fb01 f303 	mul.w	r3, r1, r3
 800c910:	429a      	cmp	r2, r3
 800c912:	d805      	bhi.n	800c920 <USBH_MSC_Read+0xa8>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d104      	bne.n	800c92a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	2201      	movs	r2, #1
 800c924:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c926:	2302      	movs	r3, #2
 800c928:	e00b      	b.n	800c942 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c92a:	7afb      	ldrb	r3, [r7, #11]
 800c92c:	4619      	mov	r1, r3
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f7ff fe89 	bl	800c646 <USBH_MSC_RdWrProcess>
 800c934:	4603      	mov	r3, r0
 800c936:	2b01      	cmp	r3, #1
 800c938:	d0e0      	beq.n	800c8fc <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2201      	movs	r2, #1
 800c93e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b088      	sub	sp, #32
 800c94e:	af02      	add	r7, sp, #8
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	607a      	str	r2, [r7, #4]
 800c954:	603b      	str	r3, [r7, #0]
 800c956:	460b      	mov	r3, r1
 800c958:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800c960:	69db      	ldr	r3, [r3, #28]
 800c962:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00e      	beq.n	800c98e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c976:	2b0b      	cmp	r3, #11
 800c978:	d109      	bne.n	800c98e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	2134      	movs	r1, #52	; 0x34
 800c980:	fb01 f303 	mul.w	r3, r1, r3
 800c984:	4413      	add	r3, r2
 800c986:	3390      	adds	r3, #144	; 0x90
 800c988:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d001      	beq.n	800c992 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800c98e:	2302      	movs	r3, #2
 800c990:	e040      	b.n	800ca14 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	2207      	movs	r2, #7
 800c996:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800c998:	7afb      	ldrb	r3, [r7, #11]
 800c99a:	697a      	ldr	r2, [r7, #20]
 800c99c:	2134      	movs	r1, #52	; 0x34
 800c99e:	fb01 f303 	mul.w	r3, r1, r3
 800c9a2:	4413      	add	r3, r2
 800c9a4:	3390      	adds	r3, #144	; 0x90
 800c9a6:	2207      	movs	r2, #7
 800c9a8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c9aa:	7afb      	ldrb	r3, [r7, #11]
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800c9b4:	7af9      	ldrb	r1, [r7, #11]
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f000 fca4 	bl	800d30c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9ca:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c9cc:	e016      	b.n	800c9fc <USBH_MSC_Write+0xb2>
  {
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	1ad2      	subs	r2, r2, r3
 800c9d8:	6a3b      	ldr	r3, [r7, #32]
 800c9da:	f242 7110 	movw	r1, #10000	; 0x2710
 800c9de:	fb01 f303 	mul.w	r3, r1, r3
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d805      	bhi.n	800c9f2 <USBH_MSC_Write+0xa8>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d104      	bne.n	800c9fc <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	e00b      	b.n	800ca14 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c9fc:	7afb      	ldrb	r3, [r7, #11]
 800c9fe:	4619      	mov	r1, r3
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f7ff fe20 	bl	800c646 <USBH_MSC_RdWrProcess>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d0e0      	beq.n	800c9ce <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2221      	movs	r2, #33	; 0x21
 800ca28:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	22ff      	movs	r2, #255	; 0xff
 800ca2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800ca42:	2200      	movs	r2, #0
 800ca44:	2100      	movs	r1, #0
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f001 fc92 	bl	800e370 <USBH_CtlReq>
 800ca4c:	4603      	mov	r3, r0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b082      	sub	sp, #8
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	22a1      	movs	r2, #161	; 0xa1
 800ca64:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	22fe      	movs	r2, #254	; 0xfe
 800ca6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800ca7e:	2201      	movs	r2, #1
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f001 fc74 	bl	800e370 <USBH_CtlReq>
 800ca88:	4603      	mov	r3, r0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
	...

0800ca94 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	4a09      	ldr	r2, [pc, #36]	; (800cad0 <USBH_MSC_BOT_Init+0x3c>)
 800caaa:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4a09      	ldr	r2, [pc, #36]	; (800cad4 <USBH_MSC_BOT_Init+0x40>)
 800cab0:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3714      	adds	r7, #20
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	43425355 	.word	0x43425355
 800cad4:	20304050 	.word	0x20304050

0800cad8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process (USBH_HandleTypeDef *phost, uint8_t lun)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af02      	add	r7, sp, #8
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	460b      	mov	r3, r1
 800cae2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800cae4:	2301      	movs	r3, #1
 800cae6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800cae8:	2301      	movs	r3, #1
 800caea:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800caec:	2301      	movs	r3, #1
 800caee:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800caf0:	2300      	movs	r3, #0
 800caf2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800cafa:	69db      	ldr	r3, [r3, #28]
 800cafc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800cafe:	2300      	movs	r3, #0
 800cb00:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	2b0a      	cmp	r3, #10
 800cb0c:	f200 819e 	bhi.w	800ce4c <USBH_MSC_BOT_Process+0x374>
 800cb10:	a201      	add	r2, pc, #4	; (adr r2, 800cb18 <USBH_MSC_BOT_Process+0x40>)
 800cb12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb16:	bf00      	nop
 800cb18:	0800cb45 	.word	0x0800cb45
 800cb1c:	0800cb6d 	.word	0x0800cb6d
 800cb20:	0800cbd7 	.word	0x0800cbd7
 800cb24:	0800cbf5 	.word	0x0800cbf5
 800cb28:	0800cc79 	.word	0x0800cc79
 800cb2c:	0800cc9b 	.word	0x0800cc9b
 800cb30:	0800cd33 	.word	0x0800cd33
 800cb34:	0800cd4f 	.word	0x0800cd4f
 800cb38:	0800cda1 	.word	0x0800cda1
 800cb3c:	0800cdd1 	.word	0x0800cdd1
 800cb40:	0800ce33 	.word	0x0800ce33
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	78fa      	ldrb	r2, [r7, #3]
 800cb48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	2202      	movs	r2, #2
 800cb50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	795b      	ldrb	r3, [r3, #5]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	9200      	str	r2, [sp, #0]
 800cb62:	221f      	movs	r2, #31
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f001 fe12 	bl	800e78e <USBH_BulkSendData>
                       BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

    break;
 800cb6a:	e17e      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>

  case BOT_SEND_CBW_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	795b      	ldrb	r3, [r3, #5]
 800cb70:	4619      	mov	r1, r3
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f017 f8ba 	bl	8023cec <USBH_LL_GetURBState>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 800cb7c:	7d3b      	ldrb	r3, [r7, #20]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d118      	bne.n	800cbb4 <USBH_MSC_BOT_Process+0xdc>
    {
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00f      	beq.n	800cbaa <USBH_MSC_BOT_Process+0xd2>
      {
        /* If there is Data Transfer Stage */
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800cb90:	b25b      	sxtb	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	da04      	bge.n	800cba0 <USBH_MSC_BOT_Process+0xc8>
        {
          /* Data Direction is IN */
          MSC_Handle->hbot.state = BOT_DATA_IN;
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2203      	movs	r2, #3
 800cb9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cb9e:	e157      	b.n	800ce50 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	2205      	movs	r2, #5
 800cba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cba8:	e152      	b.n	800ce50 <USBH_MSC_BOT_Process+0x378>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	2207      	movs	r2, #7
 800cbae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cbb2:	e14d      	b.n	800ce50 <USBH_MSC_BOT_Process+0x378>
    else if(URB_Status == USBH_URB_NOTREADY)
 800cbb4:	7d3b      	ldrb	r3, [r7, #20]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d104      	bne.n	800cbc4 <USBH_MSC_BOT_Process+0xec>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cbc2:	e145      	b.n	800ce50 <USBH_MSC_BOT_Process+0x378>
      if(URB_Status == USBH_URB_STALL)
 800cbc4:	7d3b      	ldrb	r3, [r7, #20]
 800cbc6:	2b05      	cmp	r3, #5
 800cbc8:	f040 8142 	bne.w	800ce50 <USBH_MSC_BOT_Process+0x378>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	220a      	movs	r2, #10
 800cbd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cbd4:	e13c      	b.n	800ce50 <USBH_MSC_BOT_Process+0x378>

  case BOT_DATA_IN:
    /* Send first packet */
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	895a      	ldrh	r2, [r3, #10]
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	791b      	ldrb	r3, [r3, #4]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f001 fdf7 	bl	800e7d8 <USBH_BulkReceiveData>
                          MSC_Handle->InEpSize, MSC_Handle->InPipe);

    MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2204      	movs	r2, #4
 800cbee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    break;
 800cbf2:	e13a      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>

  case BOT_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	791b      	ldrb	r3, [r3, #4]
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f017 f876 	bl	8023cec <USBH_LL_GetURBState>
 800cc00:	4603      	mov	r3, r0
 800cc02:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 800cc04:	7d3b      	ldrb	r3, [r7, #20]
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d12d      	bne.n	800cc66 <USBH_MSC_BOT_Process+0x18e>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc0e:	693a      	ldr	r2, [r7, #16]
 800cc10:	8952      	ldrh	r2, [r2, #10]
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d910      	bls.n	800cc38 <USBH_MSC_BOT_Process+0x160>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc1c:	693a      	ldr	r2, [r7, #16]
 800cc1e:	8952      	ldrh	r2, [r2, #10]
 800cc20:	441a      	add	r2, r3
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	8952      	ldrh	r2, [r2, #10]
 800cc30:	1a9a      	subs	r2, r3, r2
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc36:	e002      	b.n	800cc3e <USBH_MSC_BOT_Process+0x166>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* More Data To be Received */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00a      	beq.n	800cc5c <USBH_MSC_BOT_Process+0x184>
      {
        /* Send next packet */
        USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	895a      	ldrh	r2, [r3, #10]
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	791b      	ldrb	r3, [r3, #4]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f001 fdbf 	bl	800e7d8 <USBH_BulkReceiveData>
#endif
    }
    else
    {
    }
    break;
 800cc5a:	e0fb      	b.n	800ce54 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	2207      	movs	r2, #7
 800cc60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cc64:	e0f6      	b.n	800ce54 <USBH_MSC_BOT_Process+0x37c>
    else if(URB_Status == USBH_URB_STALL)
 800cc66:	7d3b      	ldrb	r3, [r7, #20]
 800cc68:	2b05      	cmp	r3, #5
 800cc6a:	f040 80f3 	bne.w	800ce54 <USBH_MSC_BOT_Process+0x37c>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	2209      	movs	r2, #9
 800cc72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cc76:	e0ed      	b.n	800ce54 <USBH_MSC_BOT_Process+0x37c>

  case BOT_DATA_OUT:

    USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	891a      	ldrh	r2, [r3, #8]
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	795b      	ldrb	r3, [r3, #5]
 800cc86:	2001      	movs	r0, #1
 800cc88:	9000      	str	r0, [sp, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f001 fd7f 	bl	800e78e <USBH_BulkSendData>
                       MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	2206      	movs	r2, #6
 800cc94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cc98:	e0e7      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>

  case BOT_DATA_OUT_WAIT:
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	795b      	ldrb	r3, [r3, #5]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f017 f823 	bl	8023cec <USBH_LL_GetURBState>
 800cca6:	4603      	mov	r3, r0
 800cca8:	753b      	strb	r3, [r7, #20]

    if(URB_Status == USBH_URB_DONE)
 800ccaa:	7d3b      	ldrb	r3, [r7, #20]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d12f      	bne.n	800cd10 <USBH_MSC_BOT_Process+0x238>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	8912      	ldrh	r2, [r2, #8]
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d910      	bls.n	800ccde <USBH_MSC_BOT_Process+0x206>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	8912      	ldrh	r2, [r2, #8]
 800ccc6:	441a      	add	r2, r3
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	8912      	ldrh	r2, [r2, #8]
 800ccd6:	1a9a      	subs	r2, r3, r2
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	65da      	str	r2, [r3, #92]	; 0x5c
 800ccdc:	e002      	b.n	800cce4 <USBH_MSC_BOT_Process+0x20c>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	2200      	movs	r2, #0
 800cce2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00c      	beq.n	800cd06 <USBH_MSC_BOT_Process+0x22e>
      {
        USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	891a      	ldrh	r2, [r3, #8]
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	795b      	ldrb	r3, [r3, #5]
 800ccfa:	2001      	movs	r0, #1
 800ccfc:	9000      	str	r0, [sp, #0]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f001 fd45 	bl	800e78e <USBH_BulkSendData>
#endif
    }
    else
    {
    }
    break;
 800cd04:	e0a8      	b.n	800ce58 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2207      	movs	r2, #7
 800cd0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cd0e:	e0a3      	b.n	800ce58 <USBH_MSC_BOT_Process+0x380>
    else if(URB_Status == USBH_URB_NOTREADY)
 800cd10:	7d3b      	ldrb	r3, [r7, #20]
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d104      	bne.n	800cd20 <USBH_MSC_BOT_Process+0x248>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	2205      	movs	r2, #5
 800cd1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cd1e:	e09b      	b.n	800ce58 <USBH_MSC_BOT_Process+0x380>
    else if(URB_Status == USBH_URB_STALL)
 800cd20:	7d3b      	ldrb	r3, [r7, #20]
 800cd22:	2b05      	cmp	r3, #5
 800cd24:	f040 8098 	bne.w	800ce58 <USBH_MSC_BOT_Process+0x380>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	220a      	movs	r2, #10
 800cd2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cd30:	e092      	b.n	800ce58 <USBH_MSC_BOT_Process+0x380>

  case BOT_RECEIVE_CSW:

    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	791b      	ldrb	r3, [r3, #4]
 800cd3c:	220d      	movs	r2, #13
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f001 fd4a 	bl	800e7d8 <USBH_BulkReceiveData>
                          BOT_CSW_LENGTH, MSC_Handle->InPipe);

    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	2208      	movs	r2, #8
 800cd48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cd4c:	e08d      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>

  case BOT_RECEIVE_CSW_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	791b      	ldrb	r3, [r3, #4]
 800cd52:	4619      	mov	r1, r3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f016 ffc9 	bl	8023cec <USBH_LL_GetURBState>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	753b      	strb	r3, [r7, #20]

    /* Decode CSW */
    if(URB_Status == USBH_URB_DONE)
 800cd5e:	7d3b      	ldrb	r3, [r7, #20]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d115      	bne.n	800cd90 <USBH_MSC_BOT_Process+0x2b8>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f8a9 	bl	800cecc <USBH_MSC_DecodeCSW>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	757b      	strb	r3, [r7, #21]

      if(CSW_Status == BOT_CSW_CMD_PASSED)
 800cd7e:	7d7b      	ldrb	r3, [r7, #21]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <USBH_MSC_BOT_Process+0x2b2>
      {
        status = USBH_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	75fb      	strb	r3, [r7, #23]
#endif
    }
    else
    {
    }
    break;
 800cd88:	e068      	b.n	800ce5c <USBH_MSC_BOT_Process+0x384>
        status = USBH_FAIL;
 800cd8a:	2302      	movs	r3, #2
 800cd8c:	75fb      	strb	r3, [r7, #23]
    break;
 800cd8e:	e065      	b.n	800ce5c <USBH_MSC_BOT_Process+0x384>
    else if(URB_Status == USBH_URB_STALL)
 800cd90:	7d3b      	ldrb	r3, [r7, #20]
 800cd92:	2b05      	cmp	r3, #5
 800cd94:	d162      	bne.n	800ce5c <USBH_MSC_BOT_Process+0x384>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	2209      	movs	r2, #9
 800cd9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cd9e:	e05d      	b.n	800ce5c <USBH_MSC_BOT_Process+0x384>

  case BOT_ERROR_IN:
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800cda0:	78fb      	ldrb	r3, [r7, #3]
 800cda2:	2200      	movs	r2, #0
 800cda4:	4619      	mov	r1, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f864 	bl	800ce74 <USBH_MSC_BOT_Abort>
 800cdac:	4603      	mov	r3, r0
 800cdae:	75bb      	strb	r3, [r7, #22]

    if (error == USBH_OK)
 800cdb0:	7dbb      	ldrb	r3, [r7, #22]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d104      	bne.n	800cdc0 <USBH_MSC_BOT_Process+0x2e8>
    {
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	2207      	movs	r2, #7
 800cdba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    else
    {
    }
    break;
 800cdbe:	e04f      	b.n	800ce60 <USBH_MSC_BOT_Process+0x388>
    else if (error == USBH_UNRECOVERED_ERROR)
 800cdc0:	7dbb      	ldrb	r3, [r7, #22]
 800cdc2:	2b04      	cmp	r3, #4
 800cdc4:	d14c      	bne.n	800ce60 <USBH_MSC_BOT_Process+0x388>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	220b      	movs	r2, #11
 800cdca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800cdce:	e047      	b.n	800ce60 <USBH_MSC_BOT_Process+0x388>

  case BOT_ERROR_OUT:
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f84c 	bl	800ce74 <USBH_MSC_BOT_Abort>
 800cddc:	4603      	mov	r3, r0
 800cdde:	75bb      	strb	r3, [r7, #22]

    if (error == USBH_OK)
 800cde0:	7dbb      	ldrb	r3, [r7, #22]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d11d      	bne.n	800ce22 <USBH_MSC_BOT_Process+0x34a>
    {

      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	795b      	ldrb	r3, [r3, #5]
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f016 ffe3 	bl	8023db8 <USBH_LL_GetToggle>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	73fb      	strb	r3, [r7, #15]
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	7959      	ldrb	r1, [r3, #5]
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	f1c3 0301 	rsb	r3, r3, #1
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	461a      	mov	r2, r3
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f016 ffa4 	bl	8023d52 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	791b      	ldrb	r3, [r3, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	4619      	mov	r1, r3
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f016 ff9d 	bl	8023d52 <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	2209      	movs	r2, #9
 800ce1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (error == USBH_UNRECOVERED_ERROR)
      {
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
    }
    break;
 800ce20:	e020      	b.n	800ce64 <USBH_MSC_BOT_Process+0x38c>
      if (error == USBH_UNRECOVERED_ERROR)
 800ce22:	7dbb      	ldrb	r3, [r7, #22]
 800ce24:	2b04      	cmp	r3, #4
 800ce26:	d11d      	bne.n	800ce64 <USBH_MSC_BOT_Process+0x38c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	220b      	movs	r2, #11
 800ce2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 800ce30:	e018      	b.n	800ce64 <USBH_MSC_BOT_Process+0x38c>


  case BOT_UNRECOVERED_ERROR:
    status = USBH_MSC_BOT_REQ_Reset(phost);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff fdf2 	bl	800ca1c <USBH_MSC_BOT_REQ_Reset>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	75fb      	strb	r3, [r7, #23]
    if ( status == USBH_OK)
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d112      	bne.n	800ce68 <USBH_MSC_BOT_Process+0x390>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	2201      	movs	r2, #1
 800ce46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    break;
 800ce4a:	e00d      	b.n	800ce68 <USBH_MSC_BOT_Process+0x390>

  default:
    break;
 800ce4c:	bf00      	nop
 800ce4e:	e00c      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>
    break;
 800ce50:	bf00      	nop
 800ce52:	e00a      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>
    break;
 800ce54:	bf00      	nop
 800ce56:	e008      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>
    break;
 800ce58:	bf00      	nop
 800ce5a:	e006      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>
    break;
 800ce5c:	bf00      	nop
 800ce5e:	e004      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>
    break;
 800ce60:	bf00      	nop
 800ce62:	e002      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>
    break;
 800ce64:	bf00      	nop
 800ce66:	e000      	b.n	800ce6a <USBH_MSC_BOT_Process+0x392>
    break;
 800ce68:	bf00      	nop
  }
  return status;
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	70fb      	strb	r3, [r7, #3]
 800ce80:	4613      	mov	r3, r2
 800ce82:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_FAIL;
 800ce84:	2302      	movs	r3, #2
 800ce86:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800ce8e:	69db      	ldr	r3, [r3, #28]
 800ce90:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800ce92:	78bb      	ldrb	r3, [r7, #2]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <USBH_MSC_BOT_Abort+0x2a>
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d009      	beq.n	800ceb0 <USBH_MSC_BOT_Abort+0x3c>
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
    break;

  default:
    break;
 800ce9c:	e011      	b.n	800cec2 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	79db      	ldrb	r3, [r3, #7]
 800cea2:	4619      	mov	r1, r3
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f001 f883 	bl	800dfb0 <USBH_ClrFeature>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	73fb      	strb	r3, [r7, #15]
    break;
 800ceae:	e008      	b.n	800cec2 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	799b      	ldrb	r3, [r3, #6]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f001 f87a 	bl	800dfb0 <USBH_ClrFeature>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73fb      	strb	r3, [r7, #15]
    break;
 800cec0:	bf00      	nop
  }
  return status;
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800cede:	2301      	movs	r3, #1
 800cee0:	73fb      	strb	r3, [r7, #15]

    /*Checking if the transfer length is different than 13*/
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	791b      	ldrb	r3, [r3, #4]
 800cee6:	4619      	mov	r1, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f016 fe6d 	bl	8023bc8 <USBH_LL_GetLastXferSize>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b0d      	cmp	r3, #13
 800cef2:	d002      	beq.n	800cefa <USBH_MSC_DecodeCSW+0x2e>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/


      status = BOT_CSW_PHASE_ERROR;
 800cef4:	2302      	movs	r3, #2
 800cef6:	73fb      	strb	r3, [r7, #15]
 800cef8:	e024      	b.n	800cf44 <USBH_MSC_DecodeCSW+0x78>
    }
    else
    { /* CSW length is Correct */

      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cefe:	4a14      	ldr	r2, [pc, #80]	; (800cf50 <USBH_MSC_DecodeCSW+0x84>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d11d      	bne.n	800cf40 <USBH_MSC_DecodeCSW+0x74>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */

        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d119      	bne.n	800cf44 <USBH_MSC_DecodeCSW+0x78>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0U)
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d102      	bne.n	800cf20 <USBH_MSC_DecodeCSW+0x54>
            (12) Ho = Do (Host expects to send data to the device,
            Device intends to receive data from the host)

            */

            status = BOT_CSW_CMD_PASSED;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	73fb      	strb	r3, [r7, #15]
 800cf1e:	e011      	b.n	800cf44 <USBH_MSC_DecodeCSW+0x78>
          }
          else if(MSC_Handle->hbot.csw.field.Status == 1U)
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d102      	bne.n	800cf30 <USBH_MSC_DecodeCSW+0x64>
          {
            status = BOT_CSW_CMD_FAILED;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	73fb      	strb	r3, [r7, #15]
 800cf2e:	e009      	b.n	800cf44 <USBH_MSC_DecodeCSW+0x78>
          }

          else if(MSC_Handle->hbot.csw.field.Status == 2U)
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d104      	bne.n	800cf44 <USBH_MSC_DecodeCSW+0x78>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device,
            Device intends to receive data from the host)
            */

            status = BOT_CSW_PHASE_ERROR;
 800cf3a:	2302      	movs	r3, #2
 800cf3c:	73fb      	strb	r3, [r7, #15]
 800cf3e:	e001      	b.n	800cf44 <USBH_MSC_DecodeCSW+0x78>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */

        status = BOT_CSW_PHASE_ERROR;
 800cf40:	2302      	movs	r3, #2
 800cf42:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/

  return status;
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	53425355 	.word	0x53425355

0800cf54 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost,
                                                uint8_t lun)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cf60:	2302      	movs	r3, #2
 800cf62:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800cf6a:	69db      	ldr	r3, [r3, #28]
 800cf6c:	60bb      	str	r3, [r7, #8]

  switch(MSC_Handle->hbot.cmd_state)
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d002      	beq.n	800cf7e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	d021      	beq.n	800cfc0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 800cf7c:	e028      	b.n	800cfd0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2200      	movs	r2, #0
 800cf82:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	220a      	movs	r2, #10
 800cf90:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	3363      	adds	r3, #99	; 0x63
 800cf98:	2210      	movs	r2, #16
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f018 ffeb 	bl	8025f78 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2202      	movs	r2, #2
 800cfb6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    error = USBH_BUSY;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	73fb      	strb	r3, [r7, #15]
    break;
 800cfbe:	e007      	b.n	800cfd0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    error = USBH_MSC_BOT_Process(phost, lun);
 800cfc0:	78fb      	ldrb	r3, [r7, #3]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7ff fd87 	bl	800cad8 <USBH_MSC_BOT_Process>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	73fb      	strb	r3, [r7, #15]
    break;
 800cfce:	bf00      	nop
  }

  return error;
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b086      	sub	sp, #24
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	60f8      	str	r0, [r7, #12]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	607a      	str	r2, [r7, #4]
 800cfe6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800cff2:	69db      	ldr	r3, [r3, #28]
 800cff4:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d002      	beq.n	800d006 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800d000:	2b02      	cmp	r3, #2
 800d002:	d027      	beq.n	800d054 <USBH_MSC_SCSI_ReadCapacity+0x7a>
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
    }
    break;

  default:
    break;
 800d004:	e05f      	b.n	800d0c6 <USBH_MSC_SCSI_ReadCapacity+0xec>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	2208      	movs	r2, #8
 800d00a:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	2280      	movs	r2, #128	; 0x80
 800d010:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	220a      	movs	r2, #10
 800d018:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	3363      	adds	r3, #99	; 0x63
 800d020:	2210      	movs	r2, #16
 800d022:	2100      	movs	r1, #0
 800d024:	4618      	mov	r0, r3
 800d026:	f018 ffa7 	bl	8025f78 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	2225      	movs	r2, #37	; 0x25
 800d02e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	2202      	movs	r2, #2
 800d03e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	f103 0210 	add.w	r2, r3, #16
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800d04e:	2301      	movs	r3, #1
 800d050:	75fb      	strb	r3, [r7, #23]
    break;
 800d052:	e038      	b.n	800d0c6 <USBH_MSC_SCSI_ReadCapacity+0xec>
    error = USBH_MSC_BOT_Process(phost, lun);
 800d054:	7afb      	ldrb	r3, [r7, #11]
 800d056:	4619      	mov	r1, r3
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f7ff fd3d 	bl	800cad8 <USBH_MSC_BOT_Process>
 800d05e:	4603      	mov	r3, r0
 800d060:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 800d062:	7dfb      	ldrb	r3, [r7, #23]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d12d      	bne.n	800d0c4 <USBH_MSC_SCSI_ReadCapacity+0xea>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d06e:	3303      	adds	r3, #3
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	461a      	mov	r2, r3
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d07a:	3302      	adds	r3, #2
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	021b      	lsls	r3, r3, #8
 800d080:	431a      	orrs	r2, r3
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d088:	3301      	adds	r3, #1
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 800d08e:	431a      	orrs	r2, r3
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	061b      	lsls	r3, r3, #24
 800d09a:	431a      	orrs	r2, r3
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	601a      	str	r2, [r3, #0]
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0a6:	3307      	adds	r3, #7
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0b2:	3306      	adds	r3, #6
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	021b      	lsls	r3, r3, #8
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	809a      	strh	r2, [r3, #4]
    break;
 800d0c4:	bf00      	nop
  }

  return error;
 800d0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, uint8_t lun,
                                          SCSI_StdInquiryDataTypeDef *inquiry)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	607a      	str	r2, [r7, #4]
 800d0dc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800d0de:	2302      	movs	r3, #2
 800d0e0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d002      	beq.n	800d0fc <USBH_MSC_SCSI_Inquiry+0x2c>
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d03d      	beq.n	800d176 <USBH_MSC_SCSI_Inquiry+0xa6>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
    }
    break;

  default:
    break;
 800d0fa:	e089      	b.n	800d210 <USBH_MSC_SCSI_Inquiry+0x140>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	2224      	movs	r2, #36	; 0x24
 800d100:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	2280      	movs	r2, #128	; 0x80
 800d106:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	220a      	movs	r2, #10
 800d10e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	3363      	adds	r3, #99	; 0x63
 800d116:	220a      	movs	r2, #10
 800d118:	2100      	movs	r1, #0
 800d11a:	4618      	mov	r0, r3
 800d11c:	f018 ff2c 	bl	8025f78 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	2212      	movs	r2, #18
 800d124:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800d128:	7afb      	ldrb	r3, [r7, #11]
 800d12a:	015b      	lsls	r3, r3, #5
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	2200      	movs	r2, #0
 800d140:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	2224      	movs	r2, #36	; 0x24
 800d148:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	2200      	movs	r2, #0
 800d150:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	2202      	movs	r2, #2
 800d160:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	f103 0210 	add.w	r2, r3, #16
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800d170:	2301      	movs	r3, #1
 800d172:	75fb      	strb	r3, [r7, #23]
    break;
 800d174:	e04c      	b.n	800d210 <USBH_MSC_SCSI_Inquiry+0x140>
    error = USBH_MSC_BOT_Process(phost, lun);
 800d176:	7afb      	ldrb	r3, [r7, #11]
 800d178:	4619      	mov	r1, r3
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f7ff fcac 	bl	800cad8 <USBH_MSC_BOT_Process>
 800d180:	4603      	mov	r3, r0
 800d182:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 800d184:	7dfb      	ldrb	r3, [r7, #23]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d141      	bne.n	800d20e <USBH_MSC_SCSI_Inquiry+0x13e>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800d18a:	2222      	movs	r2, #34	; 0x22
 800d18c:	2100      	movs	r1, #0
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f018 fef2 	bl	8025f78 <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	f003 031f 	and.w	r3, r3, #31
 800d1a0:	b2da      	uxtb	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	705a      	strb	r2, [r3, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	095b      	lsrs	r3, r3, #5
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	701a      	strb	r2, [r3, #0]
      if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1bc:	3301      	adds	r3, #1
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	b25b      	sxtb	r3, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	da03      	bge.n	800d1ce <USBH_MSC_SCSI_Inquiry+0xfe>
        inquiry->RemovableMedia = 1U;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	709a      	strb	r2, [r3, #2]
 800d1cc:	e002      	b.n	800d1d4 <USBH_MSC_SCSI_Inquiry+0x104>
        inquiry->RemovableMedia = 0U;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	709a      	strb	r2, [r3, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	1cd8      	adds	r0, r3, #3
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1de:	3308      	adds	r3, #8
 800d1e0:	2208      	movs	r2, #8
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	f018 fea0 	bl	8025f28 <memcpy>
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f103 000c 	add.w	r0, r3, #12
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1f4:	3310      	adds	r3, #16
 800d1f6:	2210      	movs	r2, #16
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	f018 fe95 	bl	8025f28 <memcpy>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	331d      	adds	r3, #29
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800d208:	3220      	adds	r2, #32
 800d20a:	6812      	ldr	r2, [r2, #0]
 800d20c:	601a      	str	r2, [r3, #0]
    break;
 800d20e:	bf00      	nop
  }

  return error;
 800d210:	7dfb      	ldrb	r3, [r7, #23]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3718      	adds	r7, #24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_SenseTypeDef *sense_data)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b086      	sub	sp, #24
 800d21e:	af00      	add	r7, sp, #0
 800d220:	60f8      	str	r0, [r7, #12]
 800d222:	460b      	mov	r3, r1
 800d224:	607a      	str	r2, [r7, #4]
 800d226:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d228:	2302      	movs	r3, #2
 800d22a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d002      	beq.n	800d246 <USBH_MSC_SCSI_RequestSense+0x2c>
 800d240:	2b02      	cmp	r3, #2
 800d242:	d03d      	beq.n	800d2c0 <USBH_MSC_SCSI_RequestSense+0xa6>
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
    }
    break;

  default:
    break;
 800d244:	e05d      	b.n	800d302 <USBH_MSC_SCSI_RequestSense+0xe8>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	220e      	movs	r2, #14
 800d24a:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2280      	movs	r2, #128	; 0x80
 800d250:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	220a      	movs	r2, #10
 800d258:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	3363      	adds	r3, #99	; 0x63
 800d260:	2210      	movs	r2, #16
 800d262:	2100      	movs	r1, #0
 800d264:	4618      	mov	r0, r3
 800d266:	f018 fe87 	bl	8025f78 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	2203      	movs	r2, #3
 800d26e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800d272:	7afb      	ldrb	r3, [r7, #11]
 800d274:	015b      	lsls	r3, r3, #5
 800d276:	b2da      	uxtb	r2, r3
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	220e      	movs	r2, #14
 800d292:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	2202      	movs	r2, #2
 800d2aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	f103 0210 	add.w	r2, r3, #16
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	75fb      	strb	r3, [r7, #23]
    break;
 800d2be:	e020      	b.n	800d302 <USBH_MSC_SCSI_RequestSense+0xe8>
    error = USBH_MSC_BOT_Process(phost, lun);
 800d2c0:	7afb      	ldrb	r3, [r7, #11]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f7ff fc07 	bl	800cad8 <USBH_MSC_BOT_Process>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d115      	bne.n	800d300 <USBH_MSC_SCSI_RequestSense+0xe6>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2da:	3302      	adds	r3, #2
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	f003 030f 	and.w	r3, r3, #15
 800d2e2:	b2da      	uxtb	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	701a      	strb	r2, [r3, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2ee:	7b1a      	ldrb	r2, [r3, #12]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	705a      	strb	r2, [r3, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2fa:	7b5a      	ldrb	r2, [r3, #13]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	709a      	strb	r2, [r3, #2]
    break;
 800d300:	bf00      	nop
  }

  return error;
 800d302:	7dfb      	ldrb	r3, [r7, #23]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	607a      	str	r2, [r7, #4]
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	460b      	mov	r3, r1
 800d31a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d31c:	2302      	movs	r3, #2
 800d31e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d330:	2b01      	cmp	r3, #1
 800d332:	d002      	beq.n	800d33a <USBH_MSC_SCSI_Write+0x2e>
 800d334:	2b02      	cmp	r3, #2
 800d336:	d047      	beq.n	800d3c8 <USBH_MSC_SCSI_Write+0xbc>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 800d338:	e04e      	b.n	800d3d8 <USBH_MSC_SCSI_Write+0xcc>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800d340:	461a      	mov	r2, r3
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	fb03 f202 	mul.w	r2, r3, r2
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	220a      	movs	r2, #10
 800d358:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	3363      	adds	r3, #99	; 0x63
 800d360:	2210      	movs	r2, #16
 800d362:	2100      	movs	r1, #0
 800d364:	4618      	mov	r0, r3
 800d366:	f018 fe07 	bl	8025f78 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	222a      	movs	r2, #42	; 0x2a
 800d36e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 800d372:	79fa      	ldrb	r2, [r7, #7]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 800d37a:	79ba      	ldrb	r2, [r7, #6]
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 800d382:	797a      	ldrb	r2, [r7, #5]
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 800d38a:	1d3b      	adds	r3, r7, #4
 800d38c:	781a      	ldrb	r2, [r3, #0]
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800d394:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800d39e:	f107 0320 	add.w	r3, r7, #32
 800d3a2:	781a      	ldrb	r2, [r3, #0]
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	683a      	ldr	r2, [r7, #0]
 800d3be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	75fb      	strb	r3, [r7, #23]
    break;
 800d3c6:	e007      	b.n	800d3d8 <USBH_MSC_SCSI_Write+0xcc>
    error = USBH_MSC_BOT_Process(phost, lun);
 800d3c8:	7afb      	ldrb	r3, [r7, #11]
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7ff fb83 	bl	800cad8 <USBH_MSC_BOT_Process>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	75fb      	strb	r3, [r7, #23]
    break;
 800d3d6:	bf00      	nop
  }

  return error;
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b086      	sub	sp, #24
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d3fc:	69db      	ldr	r3, [r3, #28]
 800d3fe:	613b      	str	r3, [r7, #16]

  switch(MSC_Handle->hbot.cmd_state)
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d406:	2b01      	cmp	r3, #1
 800d408:	d002      	beq.n	800d410 <USBH_MSC_SCSI_Read+0x2e>
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d047      	beq.n	800d49e <USBH_MSC_SCSI_Read+0xbc>
  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
    break;

  default:
    break;
 800d40e:	e04e      	b.n	800d4ae <USBH_MSC_SCSI_Read+0xcc>
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800d416:	461a      	mov	r2, r3
 800d418:	6a3b      	ldr	r3, [r7, #32]
 800d41a:	fb03 f202 	mul.w	r2, r3, r2
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	2280      	movs	r2, #128	; 0x80
 800d426:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	220a      	movs	r2, #10
 800d42e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	3363      	adds	r3, #99	; 0x63
 800d436:	2210      	movs	r2, #16
 800d438:	2100      	movs	r1, #0
 800d43a:	4618      	mov	r0, r3
 800d43c:	f018 fd9c 	bl	8025f78 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	2228      	movs	r2, #40	; 0x28
 800d444:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 800d448:	79fa      	ldrb	r2, [r7, #7]
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 800d450:	79ba      	ldrb	r2, [r7, #6]
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 800d458:	797a      	ldrb	r2, [r7, #5]
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 800d460:	1d3b      	adds	r3, r7, #4
 800d462:	781a      	ldrb	r2, [r3, #0]
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800d46a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800d474:	f107 0320 	add.w	r3, r7, #32
 800d478:	781a      	ldrb	r2, [r3, #0]
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY;
 800d498:	2301      	movs	r3, #1
 800d49a:	75fb      	strb	r3, [r7, #23]
    break;
 800d49c:	e007      	b.n	800d4ae <USBH_MSC_SCSI_Read+0xcc>
    error = USBH_MSC_BOT_Process(phost, lun);
 800d49e:	7afb      	ldrb	r3, [r7, #11]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f7ff fb18 	bl	800cad8 <USBH_MSC_BOT_Process>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	75fb      	strb	r3, [r7, #23]
    break;
 800d4ac:	bf00      	nop
  }

  return error;
 800d4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3718      	adds	r7, #24
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	e019      	b.n	800d504 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	79fa      	ldrb	r2, [r7, #7]
 800d4d4:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
  phost->ClassNumber = 0U;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f000 f80f 	bl	800d50c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d003      	beq.n	800d4fc <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f016 fa71 	bl	80239e4 <USBH_LL_Init>

  return USBH_OK;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	3710      	adds	r7, #16
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b085      	sub	sp, #20
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d514:	2300      	movs	r3, #0
 800d516:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800d518:	e008      	b.n	800d52c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	32a0      	adds	r2, #160	; 0xa0
 800d520:	2100      	movs	r1, #0
 800d522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	3301      	adds	r3, #1
 800d52a:	60fb      	str	r3, [r7, #12]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2b0e      	cmp	r3, #14
 800d530:	d9f3      	bls.n	800d51a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800d532:	2300      	movs	r3, #0
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	e008      	b.n	800d54a <DeInitStateMachine+0x3e>
  {
    phost->device.Data[i] = 0U;
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	4413      	add	r3, r2
 800d53e:	331c      	adds	r3, #28
 800d540:	2200      	movs	r2, #0
 800d542:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	3301      	adds	r3, #1
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d550:	d3f2      	bcc.n	800d538 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  phost->Control.state = CTRL_SETUP;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2240      	movs	r2, #64	; 0x40
 800d576:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
  phost->device.speed   = USBH_SPEED_FULL;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

  return USBH_OK;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d017      	beq.n	800d5e0 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10f      	bne.n	800d5da <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d5c0:	1c59      	adds	r1, r3, #1
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	f8c2 127c 	str.w	r1, [r2, #636]	; 0x27c
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	339c      	adds	r3, #156	; 0x9c
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	4413      	add	r3, r2
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	73fb      	strb	r3, [r7, #15]
 800d5d8:	e004      	b.n	800d5e4 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d5da:	2302      	movs	r3, #2
 800d5dc:	73fb      	strb	r3, [r7, #15]
 800d5de:	e001      	b.n	800d5e4 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b085      	sub	sp, #20
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 800d608:	78fa      	ldrb	r2, [r7, #3]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d204      	bcs.n	800d618 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	78fa      	ldrb	r2, [r7, #3]
 800d612:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 800d616:	e001      	b.n	800d61c <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d618:	2302      	movs	r3, #2
 800d61a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr

0800d62a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d62a:	b480      	push	{r7}
 800d62c:	b087      	sub	sp, #28
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	4608      	mov	r0, r1
 800d634:	4611      	mov	r1, r2
 800d636:	461a      	mov	r2, r3
 800d638:	4603      	mov	r3, r0
 800d63a:	70fb      	strb	r3, [r7, #3]
 800d63c:	460b      	mov	r3, r1
 800d63e:	70bb      	strb	r3, [r7, #2]
 800d640:	4613      	mov	r3, r2
 800d642:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800d644:	2300      	movs	r3, #0
 800d646:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d648:	2300      	movs	r3, #0
 800d64a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800d652:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d654:	e025      	b.n	800d6a2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d656:	7dfb      	ldrb	r3, [r7, #23]
 800d658:	221a      	movs	r2, #26
 800d65a:	fb02 f303 	mul.w	r3, r2, r3
 800d65e:	3308      	adds	r3, #8
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	4413      	add	r3, r2
 800d664:	3302      	adds	r3, #2
 800d666:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	795b      	ldrb	r3, [r3, #5]
 800d66c:	78fa      	ldrb	r2, [r7, #3]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d002      	beq.n	800d678 <USBH_FindInterface+0x4e>
 800d672:	78fb      	ldrb	r3, [r7, #3]
 800d674:	2bff      	cmp	r3, #255	; 0xff
 800d676:	d111      	bne.n	800d69c <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800d67c:	78ba      	ldrb	r2, [r7, #2]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d002      	beq.n	800d688 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800d682:	78bb      	ldrb	r3, [r7, #2]
 800d684:	2bff      	cmp	r3, #255	; 0xff
 800d686:	d109      	bne.n	800d69c <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800d68c:	787a      	ldrb	r2, [r7, #1]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d002      	beq.n	800d698 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d692:	787b      	ldrb	r3, [r7, #1]
 800d694:	2bff      	cmp	r3, #255	; 0xff
 800d696:	d101      	bne.n	800d69c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d698:	7dfb      	ldrb	r3, [r7, #23]
 800d69a:	e006      	b.n	800d6aa <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d6a2:	7dfb      	ldrb	r3, [r7, #23]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d9d6      	bls.n	800d656 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d6a8:	23ff      	movs	r3, #255	; 0xff
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	371c      	adds	r7, #28
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f016 fa0a 	bl	8023ad8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800d6c4:	2101      	movs	r1, #1
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f016 fb23 	bl	8023d12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
	...

0800d6d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af04      	add	r7, sp, #16
 800d6de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 faec 	bl	800dcc6 <USBH_IsPortEnabled>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10c      	bne.n	800d70e <USBH_Process+0x36>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d007      	beq.n	800d70e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	b2db      	uxtb	r3, r3
 800d704:	2b03      	cmp	r3, #3
 800d706:	d002      	beq.n	800d70e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2203      	movs	r2, #3
 800d70c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b0b      	cmp	r3, #11
 800d716:	f200 814c 	bhi.w	800d9b2 <USBH_Process+0x2da>
 800d71a:	a201      	add	r2, pc, #4	; (adr r2, 800d720 <USBH_Process+0x48>)
 800d71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d720:	0800d751 	.word	0x0800d751
 800d724:	0800d773 	.word	0x0800d773
 800d728:	0800d787 	.word	0x0800d787
 800d72c:	0800d98d 	.word	0x0800d98d
 800d730:	0800d9b3 	.word	0x0800d9b3
 800d734:	0800d815 	.word	0x0800d815
 800d738:	0800d943 	.word	0x0800d943
 800d73c:	0800d845 	.word	0x0800d845
 800d740:	0800d865 	.word	0x0800d865
 800d744:	0800d885 	.word	0x0800d885
 800d748:	0800d8b3 	.word	0x0800d8b3
 800d74c:	0800d975 	.word	0x0800d975
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800d756:	b2db      	uxtb	r3, r3
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f000 812c 	beq.w	800d9b6 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800d764:	20c8      	movs	r0, #200	; 0xc8
 800d766:	f016 fb5a 	bl	8023e1e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f016 fa11 	bl	8023b92 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d770:	e121      	b.n	800d9b6 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 800d778:	2b01      	cmp	r3, #1
 800d77a:	f040 811e 	bne.w	800d9ba <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2202      	movs	r2, #2
 800d782:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d784:	e119      	b.n	800d9ba <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800d786:	2064      	movs	r0, #100	; 0x64
 800d788:	f016 fb49 	bl	8023e1e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f016 f9d9 	bl	8023b44 <USBH_LL_GetSpeed>
 800d792:	4603      	mov	r3, r0
 800d794:	461a      	mov	r2, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

    phost->gState = HOST_ENUMERATION;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2205      	movs	r2, #5
 800d7a0:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f001 f864 	bl	800e872 <USBH_AllocPipe>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800d7b2:	2180      	movs	r1, #128	; 0x80
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f001 f85c 	bl	800e872 <USBH_AllocPipe>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	461a      	mov	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	7919      	ldrb	r1, [r3, #4]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800d7d6:	b292      	uxth	r2, r2
 800d7d8:	9202      	str	r2, [sp, #8]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	9201      	str	r2, [sp, #4]
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2280      	movs	r2, #128	; 0x80
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f001 f815 	bl	800e814 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	7959      	ldrb	r1, [r3, #5]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800d7fe:	b292      	uxth	r2, r2
 800d800:	9202      	str	r2, [sp, #8]
 800d802:	2200      	movs	r2, #0
 800d804:	9201      	str	r2, [sp, #4]
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	4603      	mov	r3, r0
 800d80a:	2200      	movs	r2, #0
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f001 f801 	bl	800e814 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d812:	e0e3      	b.n	800d9dc <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f8e7 	bl	800d9e8 <USBH_HandleEnum>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f040 80ce 	bne.w	800d9be <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 800d830:	2b01      	cmp	r3, #1
 800d832:	d103      	bne.n	800d83c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2208      	movs	r2, #8
 800d838:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800d83a:	e0c0      	b.n	800d9be <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2207      	movs	r2, #7
 800d840:	701a      	strb	r2, [r3, #0]
    break;
 800d842:	e0bc      	b.n	800d9be <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f000 80b9 	beq.w	800d9c2 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d856:	2101      	movs	r1, #1
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2208      	movs	r2, #8
 800d860:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800d862:	e0ae      	b.n	800d9c2 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fb57 	bl	800df22 <USBH_SetCfg>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	f040 80a5 	bne.w	800d9c6 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2209      	movs	r2, #9
 800d880:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d882:	e0a0      	b.n	800d9c6 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f893 323b 	ldrb.w	r3, [r3, #571]	; 0x23b
 800d88a:	f003 0320 	and.w	r3, r3, #32
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00b      	beq.n	800d8aa <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d892:	2101      	movs	r1, #1
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 fb67 	bl	800df68 <USBH_SetFeature>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f040 8094 	bne.w	800d9ca <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	220a      	movs	r2, #10
 800d8a6:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d8a8:	e08f      	b.n	800d9ca <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	220a      	movs	r2, #10
 800d8ae:	701a      	strb	r2, [r3, #0]
    break;
 800d8b0:	e08b      	b.n	800d9ca <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f000 8088 	beq.w	800d9ce <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	73fb      	strb	r3, [r7, #15]
 800d8ca:	e017      	b.n	800d8fc <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	339c      	adds	r3, #156	; 0x9c
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	791a      	ldrb	r2, [r3, #4]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 3243 	ldrb.w	r3, [r3, #579]	; 0x243
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d108      	bne.n	800d8f6 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	339c      	adds	r3, #156	; 0x9c
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	4413      	add	r3, r2
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d8f6:	7bfb      	ldrb	r3, [r7, #15]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	73fb      	strb	r3, [r7, #15]
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d0e4      	beq.n	800d8cc <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d016      	beq.n	800d93a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	4798      	blx	r3
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d109      	bne.n	800d932 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2206      	movs	r2, #6
 800d922:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d92a:	2103      	movs	r1, #3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d930:	e04d      	b.n	800d9ce <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	220d      	movs	r2, #13
 800d936:	701a      	strb	r2, [r3, #0]
    break;
 800d938:	e049      	b.n	800d9ce <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	220d      	movs	r2, #13
 800d93e:	701a      	strb	r2, [r3, #0]
    break;
 800d940:	e045      	b.n	800d9ce <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00f      	beq.n	800d96c <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	4798      	blx	r3
 800d958:	4603      	mov	r3, r0
 800d95a:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800d95c:	7bbb      	ldrb	r3, [r7, #14]
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b00      	cmp	r3, #0
 800d962:	d136      	bne.n	800d9d2 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	220b      	movs	r2, #11
 800d968:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800d96a:	e032      	b.n	800d9d2 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	220d      	movs	r2, #13
 800d970:	701a      	strb	r2, [r3, #0]
    break;
 800d972:	e02e      	b.n	800d9d2 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d02b      	beq.n	800d9d6 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d984:	695b      	ldr	r3, [r3, #20]
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	4798      	blx	r3
    }
    break;
 800d98a:	e024      	b.n	800d9d6 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7ff fdbd 	bl	800d50c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d01e      	beq.n	800d9da <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
    }
    break;
 800d9b0:	e013      	b.n	800d9da <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800d9b2:	bf00      	nop
 800d9b4:	e012      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9b6:	bf00      	nop
 800d9b8:	e010      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9ba:	bf00      	nop
 800d9bc:	e00e      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9be:	bf00      	nop
 800d9c0:	e00c      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9c2:	bf00      	nop
 800d9c4:	e00a      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9c6:	bf00      	nop
 800d9c8:	e008      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9ca:	bf00      	nop
 800d9cc:	e006      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9ce:	bf00      	nop
 800d9d0:	e004      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9d2:	bf00      	nop
 800d9d4:	e002      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9d6:	bf00      	nop
 800d9d8:	e000      	b.n	800d9dc <USBH_Process+0x304>
    break;
 800d9da:	bf00      	nop
  }
 return USBH_OK;
 800d9dc:	2300      	movs	r3, #0
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop

0800d9e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af04      	add	r7, sp, #16
 800d9ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	785b      	ldrb	r3, [r3, #1]
 800d9f8:	2b07      	cmp	r3, #7
 800d9fa:	f200 80f8 	bhi.w	800dbee <USBH_HandleEnum+0x206>
 800d9fe:	a201      	add	r2, pc, #4	; (adr r2, 800da04 <USBH_HandleEnum+0x1c>)
 800da00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da04:	0800da25 	.word	0x0800da25
 800da08:	0800da97 	.word	0x0800da97
 800da0c:	0800daaf 	.word	0x0800daaf
 800da10:	0800db25 	.word	0x0800db25
 800da14:	0800db3b 	.word	0x0800db3b
 800da18:	0800db57 	.word	0x0800db57
 800da1c:	0800db8b 	.word	0x0800db8b
 800da20:	0800dbbf 	.word	0x0800dbbf
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800da24:	2108      	movs	r1, #8
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 f9ad 	bl	800dd86 <USBH_Get_DevDesc>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f040 80df 	bne.w	800dbf2 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f893 2229 	ldrb.w	r2, [r3, #553]	; 0x229
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	7919      	ldrb	r1, [r3, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800da58:	b292      	uxth	r2, r2
 800da5a:	9202      	str	r2, [sp, #8]
 800da5c:	2200      	movs	r2, #0
 800da5e:	9201      	str	r2, [sp, #4]
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	4603      	mov	r3, r0
 800da64:	2280      	movs	r2, #128	; 0x80
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fed4 	bl	800e814 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	7959      	ldrb	r1, [r3, #5]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800da80:	b292      	uxth	r2, r2
 800da82:	9202      	str	r2, [sp, #8]
 800da84:	2200      	movs	r2, #0
 800da86:	9201      	str	r2, [sp, #4]
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	4603      	mov	r3, r0
 800da8c:	2200      	movs	r2, #0
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fec0 	bl	800e814 <USBH_OpenPipe>

    }
    break;
 800da94:	e0ad      	b.n	800dbf2 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800da96:	2112      	movs	r1, #18
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f974 	bl	800dd86 <USBH_Get_DevDesc>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f040 80a8 	bne.w	800dbf6 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2202      	movs	r2, #2
 800daaa:	705a      	strb	r2, [r3, #1]

    }
    break;
 800daac:	e0a3      	b.n	800dbf6 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800daae:	2101      	movs	r1, #1
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fa12 	bl	800deda <USBH_SetAddress>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f040 809e 	bne.w	800dbfa <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800dabe:	2002      	movs	r0, #2
 800dac0:	f016 f9ad 	bl	8023e1e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2203      	movs	r2, #3
 800dad0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	7919      	ldrb	r1, [r3, #4]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800dae6:	b292      	uxth	r2, r2
 800dae8:	9202      	str	r2, [sp, #8]
 800daea:	2200      	movs	r2, #0
 800daec:	9201      	str	r2, [sp, #4]
 800daee:	9300      	str	r3, [sp, #0]
 800daf0:	4603      	mov	r3, r0
 800daf2:	2280      	movs	r2, #128	; 0x80
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 fe8d 	bl	800e814 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	7959      	ldrb	r1, [r3, #5]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800db0e:	b292      	uxth	r2, r2
 800db10:	9202      	str	r2, [sp, #8]
 800db12:	2200      	movs	r2, #0
 800db14:	9201      	str	r2, [sp, #4]
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	4603      	mov	r3, r0
 800db1a:	2200      	movs	r2, #0
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fe79 	bl	800e814 <USBH_OpenPipe>
    }
    break;
 800db22:	e06a      	b.n	800dbfa <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800db24:	2109      	movs	r1, #9
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f954 	bl	800ddd4 <USBH_Get_CfgDesc>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d165      	bne.n	800dbfe <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2204      	movs	r2, #4
 800db36:	705a      	strb	r2, [r3, #1]
    }
    break;
 800db38:	e061      	b.n	800dbfe <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8b3 3236 	ldrh.w	r3, [r3, #566]	; 0x236
 800db40:	4619      	mov	r1, r3
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 f946 	bl	800ddd4 <USBH_Get_CfgDesc>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d159      	bne.n	800dc02 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2205      	movs	r2, #5
 800db52:	705a      	strb	r2, [r3, #1]
    }
    break;
 800db54:	e055      	b.n	800dc02 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d010      	beq.n	800db82 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f893 1230 	ldrb.w	r1, [r3, #560]	; 0x230
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f103 021c 	add.w	r2, r3, #28
      if ( USBH_Get_StringDesc(phost,
 800db6c:	23ff      	movs	r3, #255	; 0xff
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f954 	bl	800de1c <USBH_Get_StringDesc>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d145      	bne.n	800dc06 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2206      	movs	r2, #6
 800db7e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800db80:	e041      	b.n	800dc06 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2206      	movs	r2, #6
 800db86:	705a      	strb	r2, [r3, #1]
    break;
 800db88:	e03d      	b.n	800dc06 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 800db90:	2b00      	cmp	r3, #0
 800db92:	d010      	beq.n	800dbb6 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f893 1231 	ldrb.w	r1, [r3, #561]	; 0x231
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f103 021c 	add.w	r2, r3, #28
      if ( USBH_Get_StringDesc(phost,
 800dba0:	23ff      	movs	r3, #255	; 0xff
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f93a 	bl	800de1c <USBH_Get_StringDesc>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d12d      	bne.n	800dc0a <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2207      	movs	r2, #7
 800dbb2:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800dbb4:	e029      	b.n	800dc0a <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2207      	movs	r2, #7
 800dbba:	705a      	strb	r2, [r3, #1]
    break;
 800dbbc:	e025      	b.n	800dc0a <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00f      	beq.n	800dbe8 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 1232 	ldrb.w	r1, [r3, #562]	; 0x232
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f103 021c 	add.w	r2, r3, #28
      if ( USBH_Get_StringDesc(phost,
 800dbd4:	23ff      	movs	r3, #255	; 0xff
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 f920 	bl	800de1c <USBH_Get_StringDesc>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d115      	bne.n	800dc0e <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800dbe6:	e012      	b.n	800dc0e <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	73fb      	strb	r3, [r7, #15]
    break;
 800dbec:	e00f      	b.n	800dc0e <USBH_HandleEnum+0x226>

  default:
    break;
 800dbee:	bf00      	nop
 800dbf0:	e00e      	b.n	800dc10 <USBH_HandleEnum+0x228>
    break;
 800dbf2:	bf00      	nop
 800dbf4:	e00c      	b.n	800dc10 <USBH_HandleEnum+0x228>
    break;
 800dbf6:	bf00      	nop
 800dbf8:	e00a      	b.n	800dc10 <USBH_HandleEnum+0x228>
    break;
 800dbfa:	bf00      	nop
 800dbfc:	e008      	b.n	800dc10 <USBH_HandleEnum+0x228>
    break;
 800dbfe:	bf00      	nop
 800dc00:	e006      	b.n	800dc10 <USBH_HandleEnum+0x228>
    break;
 800dc02:	bf00      	nop
 800dc04:	e004      	b.n	800dc10 <USBH_HandleEnum+0x228>
    break;
 800dc06:	bf00      	nop
 800dc08:	e002      	b.n	800dc10 <USBH_HandleEnum+0x228>
    break;
 800dc0a:	bf00      	nop
 800dc0c:	e000      	b.n	800dc10 <USBH_HandleEnum+0x228>
    break;
 800dc0e:	bf00      	nop
  }
  return Status;
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3710      	adds	r7, #16
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop

0800dc1c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b083      	sub	sp, #12
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
}
 800dc2e:	bf00      	nop
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr

0800dc3a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b082      	sub	sp, #8
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  USBH_HandleSof(phost);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f804 	bl	800dc5e <USBH_HandleSof>
}
 800dc56:	bf00      	nop
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b082      	sub	sp, #8
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2b0b      	cmp	r3, #11
 800dc6e:	d10a      	bne.n	800dc86 <USBH_HandleSof+0x28>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d005      	beq.n	800dc86 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800dc80:	699b      	ldr	r3, [r3, #24]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	4798      	blx	r3
  }
}
 800dc86:	bf00      	nop
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f

  return;
 800dc9e:	bf00      	nop
}
 800dca0:	370c      	adds	r7, #12
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr

0800dcaa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b083      	sub	sp, #12
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f

  return;
 800dcba:	bf00      	nop
}
 800dcbc:	370c      	adds	r7, #12
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr

0800dcc6 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800dcc6:	b480      	push	{r7}
 800dcc8:	b083      	sub	sp, #12
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10f      	bne.n	800dd12 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    if(phost->pUser != NULL)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00e      	beq.n	800dd22 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd0a:	2104      	movs	r1, #4
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	4798      	blx	r3
 800dd10:	e007      	b.n	800dd22 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d102      	bne.n	800dd22 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2202      	movs	r2, #2
 800dd20:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f015 feea 	bl	8023b0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	791b      	ldrb	r3, [r3, #4]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 fdb4 	bl	800e8ae <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	795b      	ldrb	r3, [r3, #5]
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fdae 	bl	800e8ae <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

  if(phost->pUser != NULL)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d005      	beq.n	800dd70 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd6a:	2105      	movs	r1, #5
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f015 feb1 	bl	8023ad8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2203      	movs	r2, #3
 800dd7a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b086      	sub	sp, #24
 800dd8a:	af02      	add	r7, sp, #8
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	460b      	mov	r3, r1
 800dd90:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f103 021c 	add.w	r2, r3, #28
  if((status = USBH_GetDescriptor(phost,
 800dd98:	78fb      	ldrb	r3, [r7, #3]
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	4613      	mov	r3, r2
 800dda0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dda4:	2100      	movs	r1, #0
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 f862 	bl	800de70 <USBH_GetDescriptor>
 800ddac:	4603      	mov	r3, r0
 800ddae:	73fb      	strb	r3, [r7, #15]
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d109      	bne.n	800ddca <USBH_Get_DevDesc+0x44>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f203 2022 	addw	r0, r3, #546	; 0x222
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	331c      	adds	r3, #28
 800ddc0:	78fa      	ldrb	r2, [r7, #3]
 800ddc2:	b292      	uxth	r2, r2
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	f000 f917 	bl	800dff8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800ddca:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3710      	adds	r7, #16
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af02      	add	r7, sp, #8
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
#else
  pData = phost->device.Data;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	331c      	adds	r3, #28
 800dde4:	60fb      	str	r3, [r7, #12]
#endif
  if((status = USBH_GetDescriptor(phost,
 800dde6:	887b      	ldrh	r3, [r7, #2]
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f83c 	bl	800de70 <USBH_GetDescriptor>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	72fb      	strb	r3, [r7, #11]
 800ddfc:	7afb      	ldrb	r3, [r7, #11]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d107      	bne.n	800de12 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800de08:	887a      	ldrh	r2, [r7, #2]
 800de0a:	68f9      	ldr	r1, [r7, #12]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f000 f963 	bl	800e0d8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800de12:	7afb      	ldrb	r3, [r7, #11]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3710      	adds	r7, #16
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b088      	sub	sp, #32
 800de20:	af02      	add	r7, sp, #8
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	607a      	str	r2, [r7, #4]
 800de26:	461a      	mov	r2, r3
 800de28:	460b      	mov	r3, r1
 800de2a:	72fb      	strb	r3, [r7, #11]
 800de2c:	4613      	mov	r3, r2
 800de2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800de30:	7afb      	ldrb	r3, [r7, #11]
 800de32:	b29b      	uxth	r3, r3
 800de34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800de38:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f103 011c 	add.w	r1, r3, #28
  if((status = USBH_GetDescriptor(phost,
 800de40:	893b      	ldrh	r3, [r7, #8]
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	460b      	mov	r3, r1
 800de46:	2100      	movs	r1, #0
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f000 f811 	bl	800de70 <USBH_GetDescriptor>
 800de4e:	4603      	mov	r3, r0
 800de50:	75fb      	strb	r3, [r7, #23]
 800de52:	7dfb      	ldrb	r3, [r7, #23]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d106      	bne.n	800de66 <USBH_Get_StringDesc+0x4a>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	331c      	adds	r3, #28
 800de5c:	893a      	ldrh	r2, [r7, #8]
 800de5e:	6879      	ldr	r1, [r7, #4]
 800de60:	4618      	mov	r0, r3
 800de62:	f000 fa37 	bl	800e2d4 <USBH_ParseStringDesc>
  }
  return status;
 800de66:	7dfb      	ldrb	r3, [r7, #23]
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3718      	adds	r7, #24
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	607b      	str	r3, [r7, #4]
 800de7a:	460b      	mov	r3, r1
 800de7c:	72fb      	strb	r3, [r7, #11]
 800de7e:	4613      	mov	r3, r2
 800de80:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	789b      	ldrb	r3, [r3, #2]
 800de86:	2b01      	cmp	r3, #1
 800de88:	d11c      	bne.n	800dec4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800de8a:	7afb      	ldrb	r3, [r7, #11]
 800de8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de90:	b2da      	uxtb	r2, r3
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2206      	movs	r2, #6
 800de9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	893a      	ldrh	r2, [r7, #8]
 800dea0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dea2:	893b      	ldrh	r3, [r7, #8]
 800dea4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800deac:	d104      	bne.n	800deb8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f240 4209 	movw	r2, #1033	; 0x409
 800deb4:	829a      	strh	r2, [r3, #20]
 800deb6:	e002      	b.n	800debe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2200      	movs	r2, #0
 800debc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	8b3a      	ldrh	r2, [r7, #24]
 800dec2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800dec4:	8b3b      	ldrh	r3, [r7, #24]
 800dec6:	461a      	mov	r2, r3
 800dec8:	6879      	ldr	r1, [r7, #4]
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f000 fa50 	bl	800e370 <USBH_CtlReq>
 800ded0:	4603      	mov	r3, r0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b082      	sub	sp, #8
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	460b      	mov	r3, r1
 800dee4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	789b      	ldrb	r3, [r3, #2]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d10f      	bne.n	800df0e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2205      	movs	r2, #5
 800def8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800defa:	78fb      	ldrb	r3, [r7, #3]
 800defc:	b29a      	uxth	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800df0e:	2200      	movs	r2, #0
 800df10:	2100      	movs	r1, #0
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fa2c 	bl	800e370 <USBH_CtlReq>
 800df18:	4603      	mov	r3, r0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b082      	sub	sp, #8
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	460b      	mov	r3, r1
 800df2c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	789b      	ldrb	r3, [r3, #2]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d10e      	bne.n	800df54 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2209      	movs	r2, #9
 800df40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	887a      	ldrh	r2, [r7, #2]
 800df46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800df54:	2200      	movs	r2, #0
 800df56:	2100      	movs	r1, #0
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 fa09 	bl	800e370 <USBH_CtlReq>
 800df5e:	4603      	mov	r3, r0
}
 800df60:	4618      	mov	r0, r3
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	789b      	ldrb	r3, [r3, #2]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d10f      	bne.n	800df9c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2203      	movs	r2, #3
 800df86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800df88:	78fb      	ldrb	r3, [r7, #3]
 800df8a:	b29a      	uxth	r2, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800df9c:	2200      	movs	r2, #0
 800df9e:	2100      	movs	r1, #0
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 f9e5 	bl	800e370 <USBH_CtlReq>
 800dfa6:	4603      	mov	r3, r0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	789b      	ldrb	r3, [r3, #2]
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d10f      	bne.n	800dfe4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2202      	movs	r2, #2
 800dfc8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dfd6:	78fb      	ldrb	r3, [r7, #3]
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 f9c1 	bl	800e370 <USBH_CtlReq>
 800dfee:	4603      	mov	r3, r0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	4613      	mov	r3, r2
 800e004:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	781a      	ldrb	r2, [r3, #0]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	785a      	ldrb	r2, [r3, #1]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	3302      	adds	r3, #2
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	3303      	adds	r3, #3
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	b29b      	uxth	r3, r3
 800e026:	021b      	lsls	r3, r3, #8
 800e028:	b29b      	uxth	r3, r3
 800e02a:	4313      	orrs	r3, r2
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	791a      	ldrb	r2, [r3, #4]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	795a      	ldrb	r2, [r3, #5]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	799a      	ldrb	r2, [r3, #6]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	79da      	ldrb	r2, [r3, #7]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800e052:	88fb      	ldrh	r3, [r7, #6]
 800e054:	2b08      	cmp	r3, #8
 800e056:	d939      	bls.n	800e0cc <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	3308      	adds	r3, #8
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	b29a      	uxth	r2, r3
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	3309      	adds	r3, #9
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	b29b      	uxth	r3, r3
 800e068:	021b      	lsls	r3, r3, #8
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	4313      	orrs	r3, r2
 800e06e:	b29a      	uxth	r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	330a      	adds	r3, #10
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	330b      	adds	r3, #11
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	b29b      	uxth	r3, r3
 800e084:	021b      	lsls	r3, r3, #8
 800e086:	b29b      	uxth	r3, r3
 800e088:	4313      	orrs	r3, r2
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	330c      	adds	r3, #12
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	b29a      	uxth	r2, r3
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	330d      	adds	r3, #13
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	021b      	lsls	r3, r3, #8
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	7b9a      	ldrb	r2, [r3, #14]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	7bda      	ldrb	r2, [r3, #15]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	7c1a      	ldrb	r2, [r3, #16]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	7c5a      	ldrb	r2, [r3, #17]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	745a      	strb	r2, [r3, #17]
  }
}
 800e0cc:	bf00      	nop
 800e0ce:	3714      	adds	r7, #20
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08a      	sub	sp, #40	; 0x28
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	781a      	ldrb	r2, [r3, #0]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	785a      	ldrb	r2, [r3, #1]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	3302      	adds	r3, #2
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	b29a      	uxth	r2, r3
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	3303      	adds	r3, #3
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	b29b      	uxth	r3, r3
 800e11a:	021b      	lsls	r3, r3, #8
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	4313      	orrs	r3, r2
 800e120:	b29a      	uxth	r2, r3
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	791a      	ldrb	r2, [r3, #4]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	795a      	ldrb	r2, [r3, #5]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	799a      	ldrb	r2, [r3, #6]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	79da      	ldrb	r2, [r3, #7]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	7a1a      	ldrb	r2, [r3, #8]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e14e:	88fb      	ldrh	r3, [r7, #6]
 800e150:	2b09      	cmp	r3, #9
 800e152:	d95f      	bls.n	800e214 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e154:	2309      	movs	r3, #9
 800e156:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e158:	2300      	movs	r3, #0
 800e15a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e15c:	e051      	b.n	800e202 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e15e:	f107 0316 	add.w	r3, r7, #22
 800e162:	4619      	mov	r1, r3
 800e164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e166:	f000 f8e8 	bl	800e33a <USBH_GetNextDesc>
 800e16a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	785b      	ldrb	r3, [r3, #1]
 800e170:	2b04      	cmp	r3, #4
 800e172:	d146      	bne.n	800e202 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e178:	221a      	movs	r2, #26
 800e17a:	fb02 f303 	mul.w	r3, r2, r3
 800e17e:	3308      	adds	r3, #8
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	4413      	add	r3, r2
 800e184:	3302      	adds	r3, #2
 800e186:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800e188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e18a:	69f8      	ldr	r0, [r7, #28]
 800e18c:	f000 f846 	bl	800e21c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e190:	2300      	movs	r3, #0
 800e192:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e196:	2300      	movs	r3, #0
 800e198:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e19a:	e022      	b.n	800e1e2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800e19c:	f107 0316 	add.w	r3, r7, #22
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1a4:	f000 f8c9 	bl	800e33a <USBH_GetNextDesc>
 800e1a8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ac:	785b      	ldrb	r3, [r3, #1]
 800e1ae:	2b05      	cmp	r3, #5
 800e1b0:	d117      	bne.n	800e1e2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e1b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e1b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e1ba:	3201      	adds	r2, #1
 800e1bc:	00d2      	lsls	r2, r2, #3
 800e1be:	211a      	movs	r1, #26
 800e1c0:	fb01 f303 	mul.w	r3, r1, r3
 800e1c4:	4413      	add	r3, r2
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800e1d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1d2:	69b8      	ldr	r0, [r7, #24]
 800e1d4:	f000 f851 	bl	800e27a <USBH_ParseEPDesc>
            ep_ix++;
 800e1d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e1dc:	3301      	adds	r3, #1
 800e1de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	791b      	ldrb	r3, [r3, #4]
 800e1e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d204      	bcs.n	800e1f8 <USBH_ParseCfgDesc+0x120>
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	885a      	ldrh	r2, [r3, #2]
 800e1f2:	8afb      	ldrh	r3, [r7, #22]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d8d1      	bhi.n	800e19c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e1f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e206:	2b01      	cmp	r3, #1
 800e208:	d804      	bhi.n	800e214 <USBH_ParseCfgDesc+0x13c>
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	885a      	ldrh	r2, [r3, #2]
 800e20e:	8afb      	ldrh	r3, [r7, #22]
 800e210:	429a      	cmp	r2, r3
 800e212:	d8a4      	bhi.n	800e15e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e214:	bf00      	nop
 800e216:	3728      	adds	r7, #40	; 0x28
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	781a      	ldrb	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	785a      	ldrb	r2, [r3, #1]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	789a      	ldrb	r2, [r3, #2]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	78da      	ldrb	r2, [r3, #3]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	791a      	ldrb	r2, [r3, #4]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	795a      	ldrb	r2, [r3, #5]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	799a      	ldrb	r2, [r3, #6]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	79da      	ldrb	r2, [r3, #7]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	7a1a      	ldrb	r2, [r3, #8]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	721a      	strb	r2, [r3, #8]
}
 800e26e:	bf00      	nop
 800e270:	370c      	adds	r7, #12
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr

0800e27a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800e27a:	b480      	push	{r7}
 800e27c:	b083      	sub	sp, #12
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	781a      	ldrb	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	785a      	ldrb	r2, [r3, #1]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	789a      	ldrb	r2, [r3, #2]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	78da      	ldrb	r2, [r3, #3]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	3305      	adds	r3, #5
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	021b      	lsls	r3, r3, #8
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	799a      	ldrb	r2, [r3, #6]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	719a      	strb	r2, [r3, #6]
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b087      	sub	sp, #28
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	4613      	mov	r3, r2
 800e2e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	d120      	bne.n	800e32e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	1e9a      	subs	r2, r3, #2
 800e2f2:	88fb      	ldrh	r3, [r7, #6]
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	bf28      	it	cs
 800e2f8:	4613      	movcs	r3, r2
 800e2fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	3302      	adds	r3, #2
 800e300:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e302:	2300      	movs	r3, #0
 800e304:	82fb      	strh	r3, [r7, #22]
 800e306:	e00b      	b.n	800e320 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e308:	8afb      	ldrh	r3, [r7, #22]
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	4413      	add	r3, r2
 800e30e:	781a      	ldrb	r2, [r3, #0]
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	3301      	adds	r3, #1
 800e318:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e31a:	8afb      	ldrh	r3, [r7, #22]
 800e31c:	3302      	adds	r3, #2
 800e31e:	82fb      	strh	r3, [r7, #22]
 800e320:	8afa      	ldrh	r2, [r7, #22]
 800e322:	8abb      	ldrh	r3, [r7, #20]
 800e324:	429a      	cmp	r2, r3
 800e326:	d3ef      	bcc.n	800e308 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	2200      	movs	r2, #0
 800e32c:	701a      	strb	r2, [r3, #0]
  }
}
 800e32e:	bf00      	nop
 800e330:	371c      	adds	r7, #28
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr

0800e33a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800e33a:	b480      	push	{r7}
 800e33c:	b085      	sub	sp, #20
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
 800e342:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	881a      	ldrh	r2, [r3, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	4413      	add	r3, r2
 800e350:	b29a      	uxth	r2, r3
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4413      	add	r3, r2
 800e360:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800e362:	68fb      	ldr	r3, [r7, #12]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	4613      	mov	r3, r2
 800e37c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e37e:	2301      	movs	r3, #1
 800e380:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	789b      	ldrb	r3, [r3, #2]
 800e386:	2b01      	cmp	r3, #1
 800e388:	d002      	beq.n	800e390 <USBH_CtlReq+0x20>
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d00f      	beq.n	800e3ae <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800e38e:	e034      	b.n	800e3fa <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	68ba      	ldr	r2, [r7, #8]
 800e394:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	88fa      	ldrh	r2, [r7, #6]
 800e39a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	75fb      	strb	r3, [r7, #23]
    break;
 800e3ac:	e025      	b.n	800e3fa <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f000 f828 	bl	800e404 <USBH_HandleControl>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800e3b8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d108      	bne.n	800e3d0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	75fb      	strb	r3, [r7, #23]
    break;
 800e3ce:	e013      	b.n	800e3f8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800e3d0:	7dfb      	ldrb	r3, [r7, #23]
 800e3d2:	2b03      	cmp	r3, #3
 800e3d4:	d108      	bne.n	800e3e8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800e3e2:	2303      	movs	r3, #3
 800e3e4:	75fb      	strb	r3, [r7, #23]
    break;
 800e3e6:	e007      	b.n	800e3f8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800e3e8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d104      	bne.n	800e3f8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800e3f4:	2302      	movs	r3, #2
 800e3f6:	75fb      	strb	r3, [r7, #23]
    break;
 800e3f8:	bf00      	nop
  }
  return status;
 800e3fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af02      	add	r7, sp, #8
 800e40a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e40c:	2301      	movs	r3, #1
 800e40e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e410:	2300      	movs	r3, #0
 800e412:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7e1b      	ldrb	r3, [r3, #24]
 800e418:	3b01      	subs	r3, #1
 800e41a:	2b0a      	cmp	r3, #10
 800e41c:	f200 814a 	bhi.w	800e6b4 <USBH_HandleControl+0x2b0>
 800e420:	a201      	add	r2, pc, #4	; (adr r2, 800e428 <USBH_HandleControl+0x24>)
 800e422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e426:	bf00      	nop
 800e428:	0800e455 	.word	0x0800e455
 800e42c:	0800e46f 	.word	0x0800e46f
 800e430:	0800e4d9 	.word	0x0800e4d9
 800e434:	0800e4ff 	.word	0x0800e4ff
 800e438:	0800e537 	.word	0x0800e537
 800e43c:	0800e561 	.word	0x0800e561
 800e440:	0800e5b3 	.word	0x0800e5b3
 800e444:	0800e5d5 	.word	0x0800e5d5
 800e448:	0800e611 	.word	0x0800e611
 800e44c:	0800e637 	.word	0x0800e637
 800e450:	0800e675 	.word	0x0800e675
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f103 0110 	add.w	r1, r3, #16
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	795b      	ldrb	r3, [r3, #5]
 800e45e:	461a      	mov	r2, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 f937 	bl	800e6d4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2202      	movs	r2, #2
 800e46a:	761a      	strb	r2, [r3, #24]
    break;
 800e46c:	e12d      	b.n	800e6ca <USBH_HandleControl+0x2c6>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	795b      	ldrb	r3, [r3, #5]
 800e472:	4619      	mov	r1, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f015 fc39 	bl	8023cec <USBH_LL_GetURBState>
 800e47a:	4603      	mov	r3, r0
 800e47c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800e47e:	7bbb      	ldrb	r3, [r7, #14]
 800e480:	2b01      	cmp	r3, #1
 800e482:	d11e      	bne.n	800e4c2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	7c1b      	ldrb	r3, [r3, #16]
 800e488:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e48c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	8adb      	ldrh	r3, [r3, #22]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00a      	beq.n	800e4ac <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800e496:	7b7b      	ldrb	r3, [r7, #13]
 800e498:	2b80      	cmp	r3, #128	; 0x80
 800e49a:	d103      	bne.n	800e4a4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2203      	movs	r2, #3
 800e4a0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e4a2:	e109      	b.n	800e6b8 <USBH_HandleControl+0x2b4>
          phost->Control.state = CTRL_DATA_OUT;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2205      	movs	r2, #5
 800e4a8:	761a      	strb	r2, [r3, #24]
    break;
 800e4aa:	e105      	b.n	800e6b8 <USBH_HandleControl+0x2b4>
        if (direction == USB_D2H)
 800e4ac:	7b7b      	ldrb	r3, [r7, #13]
 800e4ae:	2b80      	cmp	r3, #128	; 0x80
 800e4b0:	d103      	bne.n	800e4ba <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2209      	movs	r2, #9
 800e4b6:	761a      	strb	r2, [r3, #24]
    break;
 800e4b8:	e0fe      	b.n	800e6b8 <USBH_HandleControl+0x2b4>
          phost->Control.state = CTRL_STATUS_IN;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2207      	movs	r2, #7
 800e4be:	761a      	strb	r2, [r3, #24]
    break;
 800e4c0:	e0fa      	b.n	800e6b8 <USBH_HandleControl+0x2b4>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e4c2:	7bbb      	ldrb	r3, [r7, #14]
 800e4c4:	2b04      	cmp	r3, #4
 800e4c6:	d003      	beq.n	800e4d0 <USBH_HandleControl+0xcc>
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ca:	2b02      	cmp	r3, #2
 800e4cc:	f040 80f4 	bne.w	800e6b8 <USBH_HandleControl+0x2b4>
        phost->Control.state = CTRL_ERROR;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	220b      	movs	r2, #11
 800e4d4:	761a      	strb	r2, [r3, #24]
    break;
 800e4d6:	e0ef      	b.n	800e6b8 <USBH_HandleControl+0x2b4>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6899      	ldr	r1, [r3, #8]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	899a      	ldrh	r2, [r3, #12]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	791b      	ldrb	r3, [r3, #4]
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f92e 	bl	800e752 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2204      	movs	r2, #4
 800e4fa:	761a      	strb	r2, [r3, #24]
    break;
 800e4fc:	e0e5      	b.n	800e6ca <USBH_HandleControl+0x2c6>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	791b      	ldrb	r3, [r3, #4]
 800e502:	4619      	mov	r1, r3
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f015 fbf1 	bl	8023cec <USBH_LL_GetURBState>
 800e50a:	4603      	mov	r3, r0
 800e50c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800e50e:	7bbb      	ldrb	r3, [r7, #14]
 800e510:	2b01      	cmp	r3, #1
 800e512:	d102      	bne.n	800e51a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2209      	movs	r2, #9
 800e518:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800e51a:	7bbb      	ldrb	r3, [r7, #14]
 800e51c:	2b05      	cmp	r3, #5
 800e51e:	d102      	bne.n	800e526 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800e520:	2303      	movs	r3, #3
 800e522:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e524:	e0ca      	b.n	800e6bc <USBH_HandleControl+0x2b8>
      if (URB_Status == USBH_URB_ERROR)
 800e526:	7bbb      	ldrb	r3, [r7, #14]
 800e528:	2b04      	cmp	r3, #4
 800e52a:	f040 80c7 	bne.w	800e6bc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	220b      	movs	r2, #11
 800e532:	761a      	strb	r2, [r3, #24]
    break;
 800e534:	e0c2      	b.n	800e6bc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6899      	ldr	r1, [r3, #8]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	899a      	ldrh	r2, [r3, #12]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	795b      	ldrb	r3, [r3, #5]
 800e542:	2001      	movs	r0, #1
 800e544:	9000      	str	r0, [sp, #0]
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 f8de 	bl	800e708 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e552:	b29a      	uxth	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2206      	movs	r2, #6
 800e55c:	761a      	strb	r2, [r3, #24]
    break;
 800e55e:	e0b4      	b.n	800e6ca <USBH_HandleControl+0x2c6>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	795b      	ldrb	r3, [r3, #5]
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f015 fbc0 	bl	8023cec <USBH_LL_GetURBState>
 800e56c:	4603      	mov	r3, r0
 800e56e:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800e570:	7bbb      	ldrb	r3, [r7, #14]
 800e572:	2b01      	cmp	r3, #1
 800e574:	d103      	bne.n	800e57e <USBH_HandleControl+0x17a>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2207      	movs	r2, #7
 800e57a:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e57c:	e0a0      	b.n	800e6c0 <USBH_HandleControl+0x2bc>
    else if  (URB_Status == USBH_URB_STALL)
 800e57e:	7bbb      	ldrb	r3, [r7, #14]
 800e580:	2b05      	cmp	r3, #5
 800e582:	d105      	bne.n	800e590 <USBH_HandleControl+0x18c>
      phost->Control.state = CTRL_STALLED;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	220c      	movs	r2, #12
 800e588:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800e58a:	2303      	movs	r3, #3
 800e58c:	73fb      	strb	r3, [r7, #15]
    break;
 800e58e:	e097      	b.n	800e6c0 <USBH_HandleControl+0x2bc>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800e590:	7bbb      	ldrb	r3, [r7, #14]
 800e592:	2b02      	cmp	r3, #2
 800e594:	d103      	bne.n	800e59e <USBH_HandleControl+0x19a>
      phost->Control.state = CTRL_DATA_OUT;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2205      	movs	r2, #5
 800e59a:	761a      	strb	r2, [r3, #24]
    break;
 800e59c:	e090      	b.n	800e6c0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800e59e:	7bbb      	ldrb	r3, [r7, #14]
 800e5a0:	2b04      	cmp	r3, #4
 800e5a2:	f040 808d 	bne.w	800e6c0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	220b      	movs	r2, #11
 800e5aa:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e5b0:	e086      	b.n	800e6c0 <USBH_HandleControl+0x2bc>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	791b      	ldrb	r3, [r3, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 f8c9 	bl	800e752 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2208      	movs	r2, #8
 800e5d0:	761a      	strb	r2, [r3, #24]

    break;
 800e5d2:	e07a      	b.n	800e6ca <USBH_HandleControl+0x2c6>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	791b      	ldrb	r3, [r3, #4]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f015 fb86 	bl	8023cec <USBH_LL_GetURBState>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800e5e4:	7bbb      	ldrb	r3, [r7, #14]
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d105      	bne.n	800e5f6 <USBH_HandleControl+0x1f2>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	220d      	movs	r2, #13
 800e5ee:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e5f4:	e066      	b.n	800e6c4 <USBH_HandleControl+0x2c0>
    else if (URB_Status == USBH_URB_ERROR)
 800e5f6:	7bbb      	ldrb	r3, [r7, #14]
 800e5f8:	2b04      	cmp	r3, #4
 800e5fa:	d103      	bne.n	800e604 <USBH_HandleControl+0x200>
      phost->Control.state = CTRL_ERROR;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	220b      	movs	r2, #11
 800e600:	761a      	strb	r2, [r3, #24]
    break;
 800e602:	e05f      	b.n	800e6c4 <USBH_HandleControl+0x2c0>
      if(URB_Status == USBH_URB_STALL)
 800e604:	7bbb      	ldrb	r3, [r7, #14]
 800e606:	2b05      	cmp	r3, #5
 800e608:	d15c      	bne.n	800e6c4 <USBH_HandleControl+0x2c0>
        status = USBH_NOT_SUPPORTED;
 800e60a:	2303      	movs	r3, #3
 800e60c:	73fb      	strb	r3, [r7, #15]
    break;
 800e60e:	e059      	b.n	800e6c4 <USBH_HandleControl+0x2c0>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	795b      	ldrb	r3, [r3, #5]
 800e614:	2201      	movs	r2, #1
 800e616:	9200      	str	r2, [sp, #0]
 800e618:	2200      	movs	r2, #0
 800e61a:	2100      	movs	r1, #0
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 f873 	bl	800e708 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e628:	b29a      	uxth	r2, r3
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	220a      	movs	r2, #10
 800e632:	761a      	strb	r2, [r3, #24]
    break;
 800e634:	e049      	b.n	800e6ca <USBH_HandleControl+0x2c6>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	795b      	ldrb	r3, [r3, #5]
 800e63a:	4619      	mov	r1, r3
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f015 fb55 	bl	8023cec <USBH_LL_GetURBState>
 800e642:	4603      	mov	r3, r0
 800e644:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800e646:	7bbb      	ldrb	r3, [r7, #14]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d105      	bne.n	800e658 <USBH_HandleControl+0x254>
    {
      status = USBH_OK;
 800e64c:	2300      	movs	r3, #0
 800e64e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	220d      	movs	r2, #13
 800e654:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800e656:	e037      	b.n	800e6c8 <USBH_HandleControl+0x2c4>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800e658:	7bbb      	ldrb	r3, [r7, #14]
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d103      	bne.n	800e666 <USBH_HandleControl+0x262>
      phost->Control.state = CTRL_STATUS_OUT;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2209      	movs	r2, #9
 800e662:	761a      	strb	r2, [r3, #24]
    break;
 800e664:	e030      	b.n	800e6c8 <USBH_HandleControl+0x2c4>
      if (URB_Status == USBH_URB_ERROR)
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	2b04      	cmp	r3, #4
 800e66a:	d12d      	bne.n	800e6c8 <USBH_HandleControl+0x2c4>
        phost->Control.state = CTRL_ERROR;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	220b      	movs	r2, #11
 800e670:	761a      	strb	r2, [r3, #24]
    break;
 800e672:	e029      	b.n	800e6c8 <USBH_HandleControl+0x2c4>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	7e5b      	ldrb	r3, [r3, #25]
 800e678:	3301      	adds	r3, #1
 800e67a:	b2da      	uxtb	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	765a      	strb	r2, [r3, #25]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	7e5b      	ldrb	r3, [r3, #25]
 800e684:	2b02      	cmp	r3, #2
 800e686:	d809      	bhi.n	800e69c <USBH_HandleControl+0x298>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f015 fa40 	bl	8023b0e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2201      	movs	r2, #1
 800e692:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2201      	movs	r2, #1
 800e698:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800e69a:	e016      	b.n	800e6ca <USBH_HandleControl+0x2c6>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6a2:	2106      	movs	r1, #6
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e6b2:	e00a      	b.n	800e6ca <USBH_HandleControl+0x2c6>

  default:
    break;
 800e6b4:	bf00      	nop
 800e6b6:	e008      	b.n	800e6ca <USBH_HandleControl+0x2c6>
    break;
 800e6b8:	bf00      	nop
 800e6ba:	e006      	b.n	800e6ca <USBH_HandleControl+0x2c6>
    break;
 800e6bc:	bf00      	nop
 800e6be:	e004      	b.n	800e6ca <USBH_HandleControl+0x2c6>
    break;
 800e6c0:	bf00      	nop
 800e6c2:	e002      	b.n	800e6ca <USBH_HandleControl+0x2c6>
    break;
 800e6c4:	bf00      	nop
 800e6c6:	e000      	b.n	800e6ca <USBH_HandleControl+0x2c6>
    break;
 800e6c8:	bf00      	nop
  }
  return status;
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af04      	add	r7, sp, #16
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	4613      	mov	r3, r2
 800e6e0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e6e2:	79f9      	ldrb	r1, [r7, #7]
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	9303      	str	r3, [sp, #12]
 800e6e8:	2308      	movs	r3, #8
 800e6ea:	9302      	str	r3, [sp, #8]
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	9301      	str	r3, [sp, #4]
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	9300      	str	r3, [sp, #0]
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f015 fac6 	bl	8023c8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b088      	sub	sp, #32
 800e70c:	af04      	add	r7, sp, #16
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	4611      	mov	r1, r2
 800e714:	461a      	mov	r2, r3
 800e716:	460b      	mov	r3, r1
 800e718:	80fb      	strh	r3, [r7, #6]
 800e71a:	4613      	mov	r3, r2
 800e71c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800e724:	2b00      	cmp	r3, #0
 800e726:	d001      	beq.n	800e72c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e728:	2300      	movs	r3, #0
 800e72a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e72c:	7979      	ldrb	r1, [r7, #5]
 800e72e:	7e3b      	ldrb	r3, [r7, #24]
 800e730:	9303      	str	r3, [sp, #12]
 800e732:	88fb      	ldrh	r3, [r7, #6]
 800e734:	9302      	str	r3, [sp, #8]
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	9301      	str	r3, [sp, #4]
 800e73a:	2301      	movs	r3, #1
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	2300      	movs	r3, #0
 800e740:	2200      	movs	r2, #0
 800e742:	68f8      	ldr	r0, [r7, #12]
 800e744:	f015 faa1 	bl	8023c8a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b088      	sub	sp, #32
 800e756:	af04      	add	r7, sp, #16
 800e758:	60f8      	str	r0, [r7, #12]
 800e75a:	60b9      	str	r1, [r7, #8]
 800e75c:	4611      	mov	r1, r2
 800e75e:	461a      	mov	r2, r3
 800e760:	460b      	mov	r3, r1
 800e762:	80fb      	strh	r3, [r7, #6]
 800e764:	4613      	mov	r3, r2
 800e766:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e768:	7979      	ldrb	r1, [r7, #5]
 800e76a:	2300      	movs	r3, #0
 800e76c:	9303      	str	r3, [sp, #12]
 800e76e:	88fb      	ldrh	r3, [r7, #6]
 800e770:	9302      	str	r3, [sp, #8]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	9301      	str	r3, [sp, #4]
 800e776:	2301      	movs	r3, #1
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	2300      	movs	r3, #0
 800e77c:	2201      	movs	r2, #1
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f015 fa83 	bl	8023c8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e784:	2300      	movs	r3, #0

}
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b088      	sub	sp, #32
 800e792:	af04      	add	r7, sp, #16
 800e794:	60f8      	str	r0, [r7, #12]
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	4611      	mov	r1, r2
 800e79a:	461a      	mov	r2, r3
 800e79c:	460b      	mov	r3, r1
 800e79e:	80fb      	strh	r3, [r7, #6]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d001      	beq.n	800e7b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e7b2:	7979      	ldrb	r1, [r7, #5]
 800e7b4:	7e3b      	ldrb	r3, [r7, #24]
 800e7b6:	9303      	str	r3, [sp, #12]
 800e7b8:	88fb      	ldrh	r3, [r7, #6]
 800e7ba:	9302      	str	r3, [sp, #8]
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	9301      	str	r3, [sp, #4]
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	9300      	str	r3, [sp, #0]
 800e7c4:	2302      	movs	r3, #2
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f015 fa5e 	bl	8023c8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b088      	sub	sp, #32
 800e7dc:	af04      	add	r7, sp, #16
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	80fb      	strh	r3, [r7, #6]
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e7ee:	7979      	ldrb	r1, [r7, #5]
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	9303      	str	r3, [sp, #12]
 800e7f4:	88fb      	ldrh	r3, [r7, #6]
 800e7f6:	9302      	str	r3, [sp, #8]
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	9301      	str	r3, [sp, #4]
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	2302      	movs	r3, #2
 800e802:	2201      	movs	r2, #1
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f015 fa40 	bl	8023c8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af04      	add	r7, sp, #16
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	4608      	mov	r0, r1
 800e81e:	4611      	mov	r1, r2
 800e820:	461a      	mov	r2, r3
 800e822:	4603      	mov	r3, r0
 800e824:	70fb      	strb	r3, [r7, #3]
 800e826:	460b      	mov	r3, r1
 800e828:	70bb      	strb	r3, [r7, #2]
 800e82a:	4613      	mov	r3, r2
 800e82c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800e82e:	7878      	ldrb	r0, [r7, #1]
 800e830:	78ba      	ldrb	r2, [r7, #2]
 800e832:	78f9      	ldrb	r1, [r7, #3]
 800e834:	8b3b      	ldrh	r3, [r7, #24]
 800e836:	9302      	str	r3, [sp, #8]
 800e838:	7d3b      	ldrb	r3, [r7, #20]
 800e83a:	9301      	str	r3, [sp, #4]
 800e83c:	7c3b      	ldrb	r3, [r7, #16]
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	4603      	mov	r3, r0
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f015 f9d3 	bl	8023bee <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800e848:	2300      	movs	r3, #0

}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b082      	sub	sp, #8
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
 800e85a:	460b      	mov	r3, r1
 800e85c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800e85e:	78fb      	ldrb	r3, [r7, #3]
 800e860:	4619      	mov	r1, r3
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f015 f9f2 	bl	8023c4c <USBH_LL_ClosePipe>

  return USBH_OK;
 800e868:	2300      	movs	r3, #0

}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b084      	sub	sp, #16
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
 800e87a:	460b      	mov	r3, r1
 800e87c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f831 	bl	800e8e6 <USBH_GetFreePipe>
 800e884:	4603      	mov	r3, r0
 800e886:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e888:	89fb      	ldrh	r3, [r7, #14]
 800e88a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e88e:	4293      	cmp	r3, r2
 800e890:	d007      	beq.n	800e8a2 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800e892:	78fb      	ldrb	r3, [r7, #3]
 800e894:	89fa      	ldrh	r2, [r7, #14]
 800e896:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	32a0      	adds	r2, #160	; 0xa0
 800e89e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800e8a2:	89fb      	ldrh	r3, [r7, #14]
 800e8a4:	b2db      	uxtb	r3, r3
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e8ae:	b480      	push	{r7}
 800e8b0:	b083      	sub	sp, #12
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800e8ba:	78fb      	ldrb	r3, [r7, #3]
 800e8bc:	2b0a      	cmp	r3, #10
 800e8be:	d80b      	bhi.n	800e8d8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800e8c0:	78fa      	ldrb	r2, [r7, #3]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	32a0      	adds	r2, #160	; 0xa0
 800e8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ca:	78fa      	ldrb	r2, [r7, #3]
 800e8cc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	32a0      	adds	r2, #160	; 0xa0
 800e8d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800e8d8:	2300      	movs	r3, #0
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	370c      	adds	r7, #12
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr

0800e8e6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800e8e6:	b480      	push	{r7}
 800e8e8:	b085      	sub	sp, #20
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	73fb      	strb	r3, [r7, #15]
 800e8f6:	e00e      	b.n	800e916 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e8f8:	7bfa      	ldrb	r2, [r7, #15]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	32a0      	adds	r2, #160	; 0xa0
 800e8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e906:	2b00      	cmp	r3, #0
 800e908:	d102      	bne.n	800e910 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800e90a:	7bfb      	ldrb	r3, [r7, #15]
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	e007      	b.n	800e920 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	3301      	adds	r3, #1
 800e914:	73fb      	strb	r3, [r7, #15]
 800e916:	7bfb      	ldrb	r3, [r7, #15]
 800e918:	2b0a      	cmp	r3, #10
 800e91a:	d9ed      	bls.n	800e8f8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800e91c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e920:	4618      	mov	r0, r3
 800e922:	3714      	adds	r7, #20
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	4603      	mov	r3, r0
 800e934:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e936:	79fb      	ldrb	r3, [r7, #7]
 800e938:	4a08      	ldr	r2, [pc, #32]	; (800e95c <disk_status+0x30>)
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	4413      	add	r3, r2
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	79fa      	ldrb	r2, [r7, #7]
 800e944:	4905      	ldr	r1, [pc, #20]	; (800e95c <disk_status+0x30>)
 800e946:	440a      	add	r2, r1
 800e948:	7b12      	ldrb	r2, [r2, #12]
 800e94a:	4610      	mov	r0, r2
 800e94c:	4798      	blx	r3
 800e94e:	4603      	mov	r3, r0
 800e950:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e952:	7bfb      	ldrb	r3, [r7, #15]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	200007d0 	.word	0x200007d0

0800e960 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	4603      	mov	r3, r0
 800e968:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e96a:	2300      	movs	r3, #0
 800e96c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e96e:	79fb      	ldrb	r3, [r7, #7]
 800e970:	4a0d      	ldr	r2, [pc, #52]	; (800e9a8 <disk_initialize+0x48>)
 800e972:	5cd3      	ldrb	r3, [r2, r3]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d111      	bne.n	800e99c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e978:	79fb      	ldrb	r3, [r7, #7]
 800e97a:	4a0b      	ldr	r2, [pc, #44]	; (800e9a8 <disk_initialize+0x48>)
 800e97c:	2101      	movs	r1, #1
 800e97e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	4a09      	ldr	r2, [pc, #36]	; (800e9a8 <disk_initialize+0x48>)
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	4413      	add	r3, r2
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	79fa      	ldrb	r2, [r7, #7]
 800e98e:	4906      	ldr	r1, [pc, #24]	; (800e9a8 <disk_initialize+0x48>)
 800e990:	440a      	add	r2, r1
 800e992:	7b12      	ldrb	r2, [r2, #12]
 800e994:	4610      	mov	r0, r2
 800e996:	4798      	blx	r3
 800e998:	4603      	mov	r3, r0
 800e99a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	200007d0 	.word	0x200007d0

0800e9ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e9ac:	b590      	push	{r4, r7, lr}
 800e9ae:	b087      	sub	sp, #28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60b9      	str	r1, [r7, #8]
 800e9b4:	607a      	str	r2, [r7, #4]
 800e9b6:	603b      	str	r3, [r7, #0]
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
 800e9be:	4a0a      	ldr	r2, [pc, #40]	; (800e9e8 <disk_read+0x3c>)
 800e9c0:	009b      	lsls	r3, r3, #2
 800e9c2:	4413      	add	r3, r2
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	689c      	ldr	r4, [r3, #8]
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ca:	4a07      	ldr	r2, [pc, #28]	; (800e9e8 <disk_read+0x3c>)
 800e9cc:	4413      	add	r3, r2
 800e9ce:	7b18      	ldrb	r0, [r3, #12]
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	68b9      	ldr	r1, [r7, #8]
 800e9d6:	47a0      	blx	r4
 800e9d8:	4603      	mov	r3, r0
 800e9da:	75fb      	strb	r3, [r7, #23]
  return res;
 800e9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	371c      	adds	r7, #28
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd90      	pop	{r4, r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	200007d0 	.word	0x200007d0

0800e9ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e9fc:	89fb      	ldrh	r3, [r7, #14]
 800e9fe:	021b      	lsls	r3, r3, #8
 800ea00:	b21a      	sxth	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	b21b      	sxth	r3, r3
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	b21b      	sxth	r3, r3
 800ea0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ea0e:	89fb      	ldrh	r3, [r7, #14]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	3303      	adds	r3, #3
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	021b      	lsls	r3, r3, #8
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	3202      	adds	r2, #2
 800ea34:	7812      	ldrb	r2, [r2, #0]
 800ea36:	4313      	orrs	r3, r2
 800ea38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	021b      	lsls	r3, r3, #8
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	3201      	adds	r2, #1
 800ea42:	7812      	ldrb	r2, [r2, #0]
 800ea44:	4313      	orrs	r3, r2
 800ea46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	021b      	lsls	r3, r3, #8
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	7812      	ldrb	r2, [r2, #0]
 800ea50:	4313      	orrs	r3, r2
 800ea52:	60fb      	str	r3, [r7, #12]
	return rv;
 800ea54:	68fb      	ldr	r3, [r7, #12]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3714      	adds	r7, #20
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800ea62:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ea66:	b09d      	sub	sp, #116	; 0x74
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800ea6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea6e:	3307      	adds	r3, #7
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	2200      	movs	r2, #0
 800ea76:	469a      	mov	sl, r3
 800ea78:	4693      	mov	fp, r2
 800ea7a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800ea7e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ea82:	f04f 0000 	mov.w	r0, #0
 800ea86:	f04f 0100 	mov.w	r1, #0
 800ea8a:	0219      	lsls	r1, r3, #8
 800ea8c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ea90:	0210      	lsls	r0, r2, #8
 800ea92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea94:	3306      	adds	r3, #6
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	461c      	mov	r4, r3
 800ea9e:	4615      	mov	r5, r2
 800eaa0:	ea40 0804 	orr.w	r8, r0, r4
 800eaa4:	ea41 0905 	orr.w	r9, r1, r5
 800eaa8:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800eaac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800eab0:	f04f 0000 	mov.w	r0, #0
 800eab4:	f04f 0100 	mov.w	r1, #0
 800eab8:	0219      	lsls	r1, r3, #8
 800eaba:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800eabe:	0210      	lsls	r0, r2, #8
 800eac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eac2:	3305      	adds	r3, #5
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	2200      	movs	r2, #0
 800eaca:	65bb      	str	r3, [r7, #88]	; 0x58
 800eacc:	65fa      	str	r2, [r7, #92]	; 0x5c
 800eace:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800ead2:	4623      	mov	r3, r4
 800ead4:	4303      	orrs	r3, r0
 800ead6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ead8:	462b      	mov	r3, r5
 800eada:	430b      	orrs	r3, r1
 800eadc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eade:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800eae2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800eae6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800eaea:	f04f 0000 	mov.w	r0, #0
 800eaee:	f04f 0100 	mov.w	r1, #0
 800eaf2:	0219      	lsls	r1, r3, #8
 800eaf4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800eaf8:	0210      	lsls	r0, r2, #8
 800eafa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eafc:	3304      	adds	r3, #4
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	2200      	movs	r2, #0
 800eb04:	653b      	str	r3, [r7, #80]	; 0x50
 800eb06:	657a      	str	r2, [r7, #84]	; 0x54
 800eb08:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800eb0c:	4623      	mov	r3, r4
 800eb0e:	4303      	orrs	r3, r0
 800eb10:	623b      	str	r3, [r7, #32]
 800eb12:	462b      	mov	r3, r5
 800eb14:	430b      	orrs	r3, r1
 800eb16:	627b      	str	r3, [r7, #36]	; 0x24
 800eb18:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800eb1c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800eb20:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800eb24:	f04f 0000 	mov.w	r0, #0
 800eb28:	f04f 0100 	mov.w	r1, #0
 800eb2c:	0219      	lsls	r1, r3, #8
 800eb2e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800eb32:	0210      	lsls	r0, r2, #8
 800eb34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb36:	3303      	adds	r3, #3
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb40:	64fa      	str	r2, [r7, #76]	; 0x4c
 800eb42:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800eb46:	4623      	mov	r3, r4
 800eb48:	4303      	orrs	r3, r0
 800eb4a:	61bb      	str	r3, [r7, #24]
 800eb4c:	462b      	mov	r3, r5
 800eb4e:	430b      	orrs	r3, r1
 800eb50:	61fb      	str	r3, [r7, #28]
 800eb52:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800eb56:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800eb5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800eb5e:	f04f 0000 	mov.w	r0, #0
 800eb62:	f04f 0100 	mov.w	r1, #0
 800eb66:	0219      	lsls	r1, r3, #8
 800eb68:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800eb6c:	0210      	lsls	r0, r2, #8
 800eb6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb70:	3302      	adds	r3, #2
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	2200      	movs	r2, #0
 800eb78:	643b      	str	r3, [r7, #64]	; 0x40
 800eb7a:	647a      	str	r2, [r7, #68]	; 0x44
 800eb7c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800eb80:	4623      	mov	r3, r4
 800eb82:	4303      	orrs	r3, r0
 800eb84:	613b      	str	r3, [r7, #16]
 800eb86:	462b      	mov	r3, r5
 800eb88:	430b      	orrs	r3, r1
 800eb8a:	617b      	str	r3, [r7, #20]
 800eb8c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800eb90:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800eb94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800eb98:	f04f 0200 	mov.w	r2, #0
 800eb9c:	f04f 0300 	mov.w	r3, #0
 800eba0:	020b      	lsls	r3, r1, #8
 800eba2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eba6:	0202      	lsls	r2, r0, #8
 800eba8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ebaa:	3101      	adds	r1, #1
 800ebac:	7809      	ldrb	r1, [r1, #0]
 800ebae:	b2c9      	uxtb	r1, r1
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	63b9      	str	r1, [r7, #56]	; 0x38
 800ebb4:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ebb6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800ebba:	4621      	mov	r1, r4
 800ebbc:	4311      	orrs	r1, r2
 800ebbe:	60b9      	str	r1, [r7, #8]
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	4319      	orrs	r1, r3
 800ebc4:	60f9      	str	r1, [r7, #12]
 800ebc6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ebca:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800ebce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ebd2:	f04f 0200 	mov.w	r2, #0
 800ebd6:	f04f 0300 	mov.w	r3, #0
 800ebda:	020b      	lsls	r3, r1, #8
 800ebdc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ebe0:	0202      	lsls	r2, r0, #8
 800ebe2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ebe4:	7809      	ldrb	r1, [r1, #0]
 800ebe6:	b2c9      	uxtb	r1, r1
 800ebe8:	2000      	movs	r0, #0
 800ebea:	6339      	str	r1, [r7, #48]	; 0x30
 800ebec:	6378      	str	r0, [r7, #52]	; 0x34
 800ebee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ebf2:	4621      	mov	r1, r4
 800ebf4:	4311      	orrs	r1, r2
 800ebf6:	6039      	str	r1, [r7, #0]
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	4319      	orrs	r1, r3
 800ebfc:	6079      	str	r1, [r7, #4]
 800ebfe:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ec02:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800ec06:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800ec0a:	4610      	mov	r0, r2
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	3774      	adds	r7, #116	; 0x74
 800ec10:	46bd      	mov	sp, r7
 800ec12:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ec16:	4770      	bx	lr

0800ec18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ec18:	b480      	push	{r7}
 800ec1a:	b087      	sub	sp, #28
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00d      	beq.n	800ec4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ec32:	693a      	ldr	r2, [r7, #16]
 800ec34:	1c53      	adds	r3, r2, #1
 800ec36:	613b      	str	r3, [r7, #16]
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	1c59      	adds	r1, r3, #1
 800ec3c:	6179      	str	r1, [r7, #20]
 800ec3e:	7812      	ldrb	r2, [r2, #0]
 800ec40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	3b01      	subs	r3, #1
 800ec46:	607b      	str	r3, [r7, #4]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1f1      	bne.n	800ec32 <mem_cpy+0x1a>
	}
}
 800ec4e:	bf00      	nop
 800ec50:	371c      	adds	r7, #28
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr

0800ec5a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ec5a:	b480      	push	{r7}
 800ec5c:	b087      	sub	sp, #28
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	60f8      	str	r0, [r7, #12]
 800ec62:	60b9      	str	r1, [r7, #8]
 800ec64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	1c5a      	adds	r2, r3, #1
 800ec6e:	617a      	str	r2, [r7, #20]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	b2d2      	uxtb	r2, r2
 800ec74:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	3b01      	subs	r3, #1
 800ec7a:	607b      	str	r3, [r7, #4]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1f3      	bne.n	800ec6a <mem_set+0x10>
}
 800ec82:	bf00      	nop
 800ec84:	bf00      	nop
 800ec86:	371c      	adds	r7, #28
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ec90:	b480      	push	{r7}
 800ec92:	b089      	sub	sp, #36	; 0x24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	61fb      	str	r3, [r7, #28]
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eca4:	2300      	movs	r3, #0
 800eca6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	1c5a      	adds	r2, r3, #1
 800ecac:	61fa      	str	r2, [r7, #28]
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	1c5a      	adds	r2, r3, #1
 800ecb6:	61ba      	str	r2, [r7, #24]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	1acb      	subs	r3, r1, r3
 800ecbc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	607b      	str	r3, [r7, #4]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d002      	beq.n	800ecd0 <mem_cmp+0x40>
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d0eb      	beq.n	800eca8 <mem_cmp+0x18>

	return r;
 800ecd0:	697b      	ldr	r3, [r7, #20]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3724      	adds	r7, #36	; 0x24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr

0800ecde <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ecde:	b480      	push	{r7}
 800ece0:	b083      	sub	sp, #12
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
 800ece6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ece8:	e002      	b.n	800ecf0 <chk_chr+0x12>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	3301      	adds	r3, #1
 800ecee:	607b      	str	r3, [r7, #4]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d005      	beq.n	800ed04 <chk_chr+0x26>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d1f2      	bne.n	800ecea <chk_chr+0xc>
	return *str;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	781b      	ldrb	r3, [r3, #0]
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d016      	beq.n	800ed5a <move_window+0x46>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ed2c:	7bfb      	ldrb	r3, [r7, #15]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d113      	bne.n	800ed5a <move_window+0x46>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	7858      	ldrb	r0, [r3, #1]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	683a      	ldr	r2, [r7, #0]
 800ed40:	f7ff fe34 	bl	800e9ac <disk_read>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d004      	beq.n	800ed54 <move_window+0x40>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ed4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ed50:	2301      	movs	r3, #1
 800ed52:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ed5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3710      	adds	r7, #16
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	3b02      	subs	r3, #2
 800ed72:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	695b      	ldr	r3, [r3, #20]
 800ed78:	3b02      	subs	r3, #2
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d301      	bcc.n	800ed84 <clust2sect+0x20>
 800ed80:	2300      	movs	r3, #0
 800ed82:	e008      	b.n	800ed96 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	895b      	ldrh	r3, [r3, #10]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	fb03 f202 	mul.w	r2, r3, r2
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed94:	4413      	add	r3, r2
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	370c      	adds	r7, #12
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
	...

0800eda4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b088      	sub	sp, #32
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800edae:	6879      	ldr	r1, [r7, #4]
 800edb0:	6809      	ldr	r1, [r1, #0]
 800edb2:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800edb4:	6839      	ldr	r1, [r7, #0]
 800edb6:	2901      	cmp	r1, #1
 800edb8:	d904      	bls.n	800edc4 <get_fat+0x20>
 800edba:	69b9      	ldr	r1, [r7, #24]
 800edbc:	6949      	ldr	r1, [r1, #20]
 800edbe:	6838      	ldr	r0, [r7, #0]
 800edc0:	4288      	cmp	r0, r1
 800edc2:	d302      	bcc.n	800edca <get_fat+0x26>
		val = 1;	/* Internal error */
 800edc4:	2301      	movs	r3, #1
 800edc6:	61fb      	str	r3, [r7, #28]
 800edc8:	e101      	b.n	800efce <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800edca:	f04f 31ff 	mov.w	r1, #4294967295
 800edce:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800edd0:	69b9      	ldr	r1, [r7, #24]
 800edd2:	7809      	ldrb	r1, [r1, #0]
 800edd4:	3901      	subs	r1, #1
 800edd6:	2903      	cmp	r1, #3
 800edd8:	f200 80ed 	bhi.w	800efb6 <get_fat+0x212>
 800eddc:	a001      	add	r0, pc, #4	; (adr r0, 800ede4 <get_fat+0x40>)
 800edde:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ede2:	bf00      	nop
 800ede4:	0800edf5 	.word	0x0800edf5
 800ede8:	0800ee7d 	.word	0x0800ee7d
 800edec:	0800eeb3 	.word	0x0800eeb3
 800edf0:	0800eeeb 	.word	0x0800eeeb
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	60fb      	str	r3, [r7, #12]
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	085b      	lsrs	r3, r3, #1
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	4413      	add	r3, r2
 800ee00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee02:	69bb      	ldr	r3, [r7, #24]
 800ee04:	6a1a      	ldr	r2, [r3, #32]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	0a5b      	lsrs	r3, r3, #9
 800ee0a:	4413      	add	r3, r2
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	69b8      	ldr	r0, [r7, #24]
 800ee10:	f7ff ff80 	bl	800ed14 <move_window>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f040 80d0 	bne.w	800efbc <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	1c5a      	adds	r2, r3, #1
 800ee20:	60fa      	str	r2, [r7, #12]
 800ee22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee26:	69ba      	ldr	r2, [r7, #24]
 800ee28:	4413      	add	r3, r2
 800ee2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee2e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	6a1a      	ldr	r2, [r3, #32]
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	0a5b      	lsrs	r3, r3, #9
 800ee38:	4413      	add	r3, r2
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	69b8      	ldr	r0, [r7, #24]
 800ee3e:	f7ff ff69 	bl	800ed14 <move_window>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f040 80bb 	bne.w	800efc0 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee50:	69ba      	ldr	r2, [r7, #24]
 800ee52:	4413      	add	r3, r2
 800ee54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee58:	021b      	lsls	r3, r3, #8
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	f003 0301 	and.w	r3, r3, #1
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d002      	beq.n	800ee72 <get_fat+0xce>
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	091b      	lsrs	r3, r3, #4
 800ee70:	e002      	b.n	800ee78 <get_fat+0xd4>
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee78:	61fb      	str	r3, [r7, #28]
			break;
 800ee7a:	e0a8      	b.n	800efce <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	6a1a      	ldr	r2, [r3, #32]
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	0a1b      	lsrs	r3, r3, #8
 800ee84:	4413      	add	r3, r2
 800ee86:	4619      	mov	r1, r3
 800ee88:	69b8      	ldr	r0, [r7, #24]
 800ee8a:	f7ff ff43 	bl	800ed14 <move_window>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f040 8097 	bne.w	800efc4 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	005b      	lsls	r3, r3, #1
 800eea0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800eea4:	4413      	add	r3, r2
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fda0 	bl	800e9ec <ld_word>
 800eeac:	4603      	mov	r3, r0
 800eeae:	61fb      	str	r3, [r7, #28]
			break;
 800eeb0:	e08d      	b.n	800efce <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	6a1a      	ldr	r2, [r3, #32]
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	09db      	lsrs	r3, r3, #7
 800eeba:	4413      	add	r3, r2
 800eebc:	4619      	mov	r1, r3
 800eebe:	69b8      	ldr	r0, [r7, #24]
 800eec0:	f7ff ff28 	bl	800ed14 <move_window>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d17e      	bne.n	800efc8 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eed8:	4413      	add	r3, r2
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7ff fd9e 	bl	800ea1c <ld_dword>
 800eee0:	4603      	mov	r3, r0
 800eee2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eee6:	61fb      	str	r3, [r7, #28]
			break;
 800eee8:	e071      	b.n	800efce <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800eeea:	6879      	ldr	r1, [r7, #4]
 800eeec:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800eef0:	4301      	orrs	r1, r0
 800eef2:	d060      	beq.n	800efb6 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800eef4:	6879      	ldr	r1, [r7, #4]
 800eef6:	6889      	ldr	r1, [r1, #8]
 800eef8:	6838      	ldr	r0, [r7, #0]
 800eefa:	1a41      	subs	r1, r0, r1
 800eefc:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800eefe:	6879      	ldr	r1, [r7, #4]
 800ef00:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800ef04:	1e42      	subs	r2, r0, #1
 800ef06:	f141 33ff 	adc.w	r3, r1, #4294967295
 800ef0a:	f04f 0000 	mov.w	r0, #0
 800ef0e:	f04f 0100 	mov.w	r1, #0
 800ef12:	0a50      	lsrs	r0, r2, #9
 800ef14:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ef18:	0a59      	lsrs	r1, r3, #9
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	895b      	ldrh	r3, [r3, #10]
 800ef20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef24:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	79db      	ldrb	r3, [r3, #7]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d10e      	bne.n	800ef4c <get_fat+0x1a8>
					if (cofs <= clen) {
 800ef2e:	697a      	ldr	r2, [r7, #20]
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d80a      	bhi.n	800ef4c <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ef36:	697a      	ldr	r2, [r7, #20]
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d002      	beq.n	800ef44 <get_fat+0x1a0>
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	3301      	adds	r3, #1
 800ef42:	e001      	b.n	800ef48 <get_fat+0x1a4>
 800ef44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ef48:	61fb      	str	r3, [r7, #28]
						break;
 800ef4a:	e040      	b.n	800efce <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	79db      	ldrb	r3, [r3, #7]
 800ef50:	2b03      	cmp	r3, #3
 800ef52:	d108      	bne.n	800ef66 <get_fat+0x1c2>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	699b      	ldr	r3, [r3, #24]
 800ef58:	697a      	ldr	r2, [r7, #20]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d203      	bcs.n	800ef66 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	3301      	adds	r3, #1
 800ef62:	61fb      	str	r3, [r7, #28]
					break;
 800ef64:	e033      	b.n	800efce <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	79db      	ldrb	r3, [r3, #7]
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d023      	beq.n	800efb6 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	69db      	ldr	r3, [r3, #28]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d003      	beq.n	800ef7e <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800ef76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ef7a:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800ef7c:	e027      	b.n	800efce <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	6a1a      	ldr	r2, [r3, #32]
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	09db      	lsrs	r3, r3, #7
 800ef86:	4413      	add	r3, r2
 800ef88:	4619      	mov	r1, r3
 800ef8a:	69b8      	ldr	r0, [r7, #24]
 800ef8c:	f7ff fec2 	bl	800ed14 <move_window>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d11a      	bne.n	800efcc <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800efa4:	4413      	add	r3, r2
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7ff fd38 	bl	800ea1c <ld_dword>
 800efac:	4603      	mov	r3, r0
 800efae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efb2:	61fb      	str	r3, [r7, #28]
					break;
 800efb4:	e00b      	b.n	800efce <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800efb6:	2301      	movs	r3, #1
 800efb8:	61fb      	str	r3, [r7, #28]
 800efba:	e008      	b.n	800efce <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efbc:	bf00      	nop
 800efbe:	e006      	b.n	800efce <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efc0:	bf00      	nop
 800efc2:	e004      	b.n	800efce <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800efc4:	bf00      	nop
 800efc6:	e002      	b.n	800efce <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800efc8:	bf00      	nop
 800efca:	e000      	b.n	800efce <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800efcc:	bf00      	nop
		}
	}

	return val;
 800efce:	69fb      	ldr	r3, [r7, #28]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3720      	adds	r7, #32
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800efd8:	b5b0      	push	{r4, r5, r7, lr}
 800efda:	b088      	sub	sp, #32
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efee:	3304      	adds	r3, #4
 800eff0:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eff6:	f04f 0000 	mov.w	r0, #0
 800effa:	f04f 0100 	mov.w	r1, #0
 800effe:	0a50      	lsrs	r0, r2, #9
 800f000:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800f004:	0a59      	lsrs	r1, r3, #9
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	895b      	ldrh	r3, [r3, #10]
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	2200      	movs	r2, #0
 800f00e:	461c      	mov	r4, r3
 800f010:	4615      	mov	r5, r2
 800f012:	4622      	mov	r2, r4
 800f014:	462b      	mov	r3, r5
 800f016:	f7f1 ff2f 	bl	8000e78 <__aeabi_uldivmod>
 800f01a:	4602      	mov	r2, r0
 800f01c:	460b      	mov	r3, r1
 800f01e:	4613      	mov	r3, r2
 800f020:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	1d1a      	adds	r2, r3, #4
 800f026:	61ba      	str	r2, [r7, #24]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d101      	bne.n	800f036 <clmt_clust+0x5e>
 800f032:	2300      	movs	r3, #0
 800f034:	e010      	b.n	800f058 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800f036:	69fa      	ldr	r2, [r7, #28]
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d307      	bcc.n	800f04e <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800f03e:	69fa      	ldr	r2, [r7, #28]
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	61fb      	str	r3, [r7, #28]
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	3304      	adds	r3, #4
 800f04a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f04c:	e7e9      	b.n	800f022 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800f04e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	4413      	add	r3, r2
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3720      	adds	r7, #32
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bdb0      	pop	{r4, r5, r7, pc}

0800f060 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	2b04      	cmp	r3, #4
 800f076:	d102      	bne.n	800f07e <dir_sdi+0x1e>
 800f078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f07c:	e001      	b.n	800f082 <dir_sdi+0x22>
 800f07e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d904      	bls.n	800f092 <dir_sdi+0x32>
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	f003 031f 	and.w	r3, r3, #31
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d001      	beq.n	800f096 <dir_sdi+0x36>
		return FR_INT_ERR;
 800f092:	2302      	movs	r3, #2
 800f094:	e066      	b.n	800f164 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	683a      	ldr	r2, [r7, #0]
 800f09a:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	689b      	ldr	r3, [r3, #8]
 800f0a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d109      	bne.n	800f0bc <dir_sdi+0x5c>
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d905      	bls.n	800f0bc <dir_sdi+0x5c>
		clst = fs->dirbase;
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d10c      	bne.n	800f0dc <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	095b      	lsrs	r3, r3, #5
 800f0c6:	693a      	ldr	r2, [r7, #16]
 800f0c8:	8912      	ldrh	r2, [r2, #8]
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d301      	bcc.n	800f0d2 <dir_sdi+0x72>
 800f0ce:	2302      	movs	r3, #2
 800f0d0:	e048      	b.n	800f164 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	639a      	str	r2, [r3, #56]	; 0x38
 800f0da:	e029      	b.n	800f130 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	895b      	ldrh	r3, [r3, #10]
 800f0e0:	025b      	lsls	r3, r3, #9
 800f0e2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f0e4:	e019      	b.n	800f11a <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6979      	ldr	r1, [r7, #20]
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7ff fe5a 	bl	800eda4 <get_fat>
 800f0f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f8:	d101      	bne.n	800f0fe <dir_sdi+0x9e>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e032      	b.n	800f164 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d904      	bls.n	800f10e <dir_sdi+0xae>
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	695b      	ldr	r3, [r3, #20]
 800f108:	697a      	ldr	r2, [r7, #20]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d301      	bcc.n	800f112 <dir_sdi+0xb2>
 800f10e:	2302      	movs	r3, #2
 800f110:	e028      	b.n	800f164 <dir_sdi+0x104>
			ofs -= csz;
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f11a:	683a      	ldr	r2, [r7, #0]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d2e1      	bcs.n	800f0e6 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800f122:	6979      	ldr	r1, [r7, #20]
 800f124:	6938      	ldr	r0, [r7, #16]
 800f126:	f7ff fe1d 	bl	800ed64 <clust2sect>
 800f12a:	4602      	mov	r2, r0
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	697a      	ldr	r2, [r7, #20]
 800f134:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d101      	bne.n	800f142 <dir_sdi+0xe2>
 800f13e:	2302      	movs	r3, #2
 800f140:	e010      	b.n	800f164 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	0a5b      	lsrs	r3, r3, #9
 800f14a:	441a      	add	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f15c:	441a      	add	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3718      	adds	r7, #24
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	617b      	str	r3, [r7, #20]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f180:	3320      	adds	r3, #32
 800f182:	613b      	str	r3, [r7, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00b      	beq.n	800f1a4 <dir_next+0x38>
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	2b04      	cmp	r3, #4
 800f192:	d102      	bne.n	800f19a <dir_next+0x2e>
 800f194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f198:	e001      	b.n	800f19e <dir_next+0x32>
 800f19a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d801      	bhi.n	800f1a8 <dir_next+0x3c>
 800f1a4:	2304      	movs	r3, #4
 800f1a6:	e05a      	b.n	800f25e <dir_next+0xf2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d148      	bne.n	800f244 <dir_next+0xd8>
		dp->sect++;				/* Next sector */
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b6:	1c5a      	adds	r2, r3, #1
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d10a      	bne.n	800f1da <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	095b      	lsrs	r3, r3, #5
 800f1c8:	697a      	ldr	r2, [r7, #20]
 800f1ca:	8912      	ldrh	r2, [r2, #8]
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d339      	bcc.n	800f244 <dir_next+0xd8>
				dp->sect = 0; return FR_NO_FILE;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	639a      	str	r2, [r3, #56]	; 0x38
 800f1d6:	2304      	movs	r3, #4
 800f1d8:	e041      	b.n	800f25e <dir_next+0xf2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	0a5b      	lsrs	r3, r3, #9
 800f1de:	697a      	ldr	r2, [r7, #20]
 800f1e0:	8952      	ldrh	r2, [r2, #10]
 800f1e2:	3a01      	subs	r2, #1
 800f1e4:	4013      	ands	r3, r2
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d12c      	bne.n	800f244 <dir_next+0xd8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	4610      	mov	r0, r2
 800f1f4:	f7ff fdd6 	bl	800eda4 <get_fat>
 800f1f8:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d801      	bhi.n	800f204 <dir_next+0x98>
 800f200:	2302      	movs	r3, #2
 800f202:	e02c      	b.n	800f25e <dir_next+0xf2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f20a:	d101      	bne.n	800f210 <dir_next+0xa4>
 800f20c:	2301      	movs	r3, #1
 800f20e:	e026      	b.n	800f25e <dir_next+0xf2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	695b      	ldr	r3, [r3, #20]
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	429a      	cmp	r2, r3
 800f218:	d30a      	bcc.n	800f230 <dir_next+0xc4>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d102      	bne.n	800f226 <dir_next+0xba>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	639a      	str	r2, [r3, #56]	; 0x38
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	639a      	str	r2, [r3, #56]	; 0x38
 800f22c:	2304      	movs	r3, #4
 800f22e:	e016      	b.n	800f25e <dir_next+0xf2>
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800f236:	68f9      	ldr	r1, [r7, #12]
 800f238:	6978      	ldr	r0, [r7, #20]
 800f23a:	f7ff fd93 	bl	800ed64 <clust2sect>
 800f23e:	4602      	mov	r2, r0
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	693a      	ldr	r2, [r7, #16]
 800f248:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f256:	441a      	add	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3718      	adds	r7, #24
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b084      	sub	sp, #16
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
 800f26e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	331a      	adds	r3, #26
 800f274:	4618      	mov	r0, r3
 800f276:	f7ff fbb9 	bl	800e9ec <ld_word>
 800f27a:	4603      	mov	r3, r0
 800f27c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	2b03      	cmp	r3, #3
 800f284:	d109      	bne.n	800f29a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	3314      	adds	r3, #20
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff fbae 	bl	800e9ec <ld_word>
 800f290:	4603      	mov	r3, r0
 800f292:	041b      	lsls	r3, r3, #16
 800f294:	68fa      	ldr	r2, [r7, #12]
 800f296:	4313      	orrs	r3, r2
 800f298:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f29a:	68fb      	ldr	r3, [r7, #12]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f2a4:	b590      	push	{r4, r7, lr}
 800f2a6:	b087      	sub	sp, #28
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	331a      	adds	r3, #26
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7ff fb9a 	bl	800e9ec <ld_word>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d001      	beq.n	800f2c2 <cmp_lfn+0x1e>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	e057      	b.n	800f372 <cmp_lfn+0xce>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2ca:	1e5a      	subs	r2, r3, #1
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	005b      	lsls	r3, r3, #1
 800f2d0:	4413      	add	r3, r2
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	4413      	add	r3, r2
 800f2d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f2d8:	2301      	movs	r3, #1
 800f2da:	60fb      	str	r3, [r7, #12]
 800f2dc:	2300      	movs	r3, #0
 800f2de:	613b      	str	r3, [r7, #16]
 800f2e0:	e031      	b.n	800f346 <cmp_lfn+0xa2>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f2e2:	4a26      	ldr	r2, [pc, #152]	; (800f37c <cmp_lfn+0xd8>)
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff fb7b 	bl	800e9ec <ld_word>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	60bb      	str	r3, [r7, #8]
		if (wc) {
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d018      	beq.n	800f332 <cmp_lfn+0x8e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	2bfe      	cmp	r3, #254	; 0xfe
 800f304:	d810      	bhi.n	800f328 <cmp_lfn+0x84>
 800f306:	68b8      	ldr	r0, [r7, #8]
 800f308:	f002 f9ec 	bl	80116e4 <ff_wtoupper>
 800f30c:	4604      	mov	r4, r0
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	1c5a      	adds	r2, r3, #1
 800f312:	617a      	str	r2, [r7, #20]
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	4413      	add	r3, r2
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f002 f9e1 	bl	80116e4 <ff_wtoupper>
 800f322:	4603      	mov	r3, r0
 800f324:	429c      	cmp	r4, r3
 800f326:	d001      	beq.n	800f32c <cmp_lfn+0x88>
				return 0;					/* Not matched */
 800f328:	2300      	movs	r3, #0
 800f32a:	e022      	b.n	800f372 <cmp_lfn+0xce>
			}
			wc = uc;
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	e006      	b.n	800f340 <cmp_lfn+0x9c>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f338:	4293      	cmp	r3, r2
 800f33a:	d001      	beq.n	800f340 <cmp_lfn+0x9c>
 800f33c:	2300      	movs	r3, #0
 800f33e:	e018      	b.n	800f372 <cmp_lfn+0xce>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	3301      	adds	r3, #1
 800f344:	613b      	str	r3, [r7, #16]
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	2b0c      	cmp	r3, #12
 800f34a:	d9ca      	bls.n	800f2e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f354:	2b00      	cmp	r3, #0
 800f356:	d00b      	beq.n	800f370 <cmp_lfn+0xcc>
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d008      	beq.n	800f370 <cmp_lfn+0xcc>
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	4413      	add	r3, r2
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d001      	beq.n	800f370 <cmp_lfn+0xcc>
 800f36c:	2300      	movs	r3, #0
 800f36e:	e000      	b.n	800f372 <cmp_lfn+0xce>

	return 1;		/* The part of LFN matched */
 800f370:	2301      	movs	r3, #1
}
 800f372:	4618      	mov	r0, r3
 800f374:	371c      	adds	r7, #28
 800f376:	46bd      	mov	sp, r7
 800f378:	bd90      	pop	{r4, r7, pc}
 800f37a:	bf00      	nop
 800f37c:	08026ff4 	.word	0x08026ff4

0800f380 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b086      	sub	sp, #24
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	331a      	adds	r3, #26
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff fb2c 	bl	800e9ec <ld_word>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d001      	beq.n	800f39e <pick_lfn+0x1e>
 800f39a:	2300      	movs	r3, #0
 800f39c:	e04d      	b.n	800f43a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3a6:	1e5a      	subs	r2, r3, #1
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	005b      	lsls	r3, r3, #1
 800f3ac:	4413      	add	r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	4413      	add	r3, r2
 800f3b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	60fb      	str	r3, [r7, #12]
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	613b      	str	r3, [r7, #16]
 800f3bc:	e028      	b.n	800f410 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f3be:	4a21      	ldr	r2, [pc, #132]	; (800f444 <pick_lfn+0xc4>)
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff fb0d 	bl	800e9ec <ld_word>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	60bb      	str	r3, [r7, #8]
		if (wc) {
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00f      	beq.n	800f3fc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	2bfe      	cmp	r3, #254	; 0xfe
 800f3e0:	d901      	bls.n	800f3e6 <pick_lfn+0x66>
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	e029      	b.n	800f43a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	60fb      	str	r3, [r7, #12]
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	1c5a      	adds	r2, r3, #1
 800f3ee:	617a      	str	r2, [r7, #20]
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	601a      	str	r2, [r3, #0]
 800f3fa:	e006      	b.n	800f40a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f402:	4293      	cmp	r3, r2
 800f404:	d001      	beq.n	800f40a <pick_lfn+0x8a>
 800f406:	2300      	movs	r3, #0
 800f408:	e017      	b.n	800f43a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	3301      	adds	r3, #1
 800f40e:	613b      	str	r3, [r7, #16]
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	2b0c      	cmp	r3, #12
 800f414:	d9d3      	bls.n	800f3be <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d00a      	beq.n	800f438 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	2bfe      	cmp	r3, #254	; 0xfe
 800f426:	d901      	bls.n	800f42c <pick_lfn+0xac>
 800f428:	2300      	movs	r3, #0
 800f42a:	e006      	b.n	800f43a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	4413      	add	r3, r2
 800f434:	2200      	movs	r2, #0
 800f436:	601a      	str	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800f438:	2301      	movs	r3, #1
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3718      	adds	r7, #24
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	08026ff4 	.word	0x08026ff4

0800f448 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f448:	b480      	push	{r7}
 800f44a:	b085      	sub	sp, #20
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f450:	2300      	movs	r3, #0
 800f452:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f454:	230b      	movs	r3, #11
 800f456:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f458:	7bfb      	ldrb	r3, [r7, #15]
 800f45a:	b2da      	uxtb	r2, r3
 800f45c:	0852      	lsrs	r2, r2, #1
 800f45e:	01db      	lsls	r3, r3, #7
 800f460:	4313      	orrs	r3, r2
 800f462:	b2da      	uxtb	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	1c59      	adds	r1, r3, #1
 800f468:	6079      	str	r1, [r7, #4]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	4413      	add	r3, r2
 800f46e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	3b01      	subs	r3, #1
 800f474:	60bb      	str	r3, [r7, #8]
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1ed      	bne.n	800f458 <sum_sfn+0x10>
	return sum;
 800f47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3714      	adds	r7, #20
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr

0800f48a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800f48a:	b480      	push	{r7}
 800f48c:	b087      	sub	sp, #28
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	3301      	adds	r3, #1
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	3301      	adds	r3, #1
 800f49a:	015b      	lsls	r3, r3, #5
 800f49c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800f49e:	2300      	movs	r3, #0
 800f4a0:	827b      	strh	r3, [r7, #18]
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	617b      	str	r3, [r7, #20]
 800f4a6:	e018      	b.n	800f4da <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	2b02      	cmp	r3, #2
 800f4ac:	d103      	bne.n	800f4b6 <xdir_sum+0x2c>
			i++;
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	617b      	str	r3, [r7, #20]
 800f4b4:	e00e      	b.n	800f4d4 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800f4b6:	8a7b      	ldrh	r3, [r7, #18]
 800f4b8:	03db      	lsls	r3, r3, #15
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	8a7b      	ldrh	r3, [r7, #18]
 800f4be:	085b      	lsrs	r3, r3, #1
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	4413      	add	r3, r2
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	6879      	ldr	r1, [r7, #4]
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	440b      	add	r3, r1
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	4413      	add	r3, r2
 800f4d2:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	617b      	str	r3, [r7, #20]
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d3e2      	bcc.n	800f4a8 <xdir_sum+0x1e>
		}
	}
	return sum;
 800f4e2:	8a7b      	ldrh	r3, [r7, #18]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	371c      	adds	r7, #28
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800f4fc:	e01e      	b.n	800f53c <xname_sum+0x4c>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800f4fe:	68b8      	ldr	r0, [r7, #8]
 800f500:	f002 f8f0 	bl	80116e4 <ff_wtoupper>
 800f504:	60b8      	str	r0, [r7, #8]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800f506:	89fb      	ldrh	r3, [r7, #14]
 800f508:	03db      	lsls	r3, r3, #15
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	89fb      	ldrh	r3, [r7, #14]
 800f50e:	085b      	lsrs	r3, r3, #1
 800f510:	b29b      	uxth	r3, r3
 800f512:	4413      	add	r3, r2
 800f514:	b29a      	uxth	r2, r3
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	b29b      	uxth	r3, r3
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	4413      	add	r3, r2
 800f520:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800f522:	89fb      	ldrh	r3, [r7, #14]
 800f524:	03db      	lsls	r3, r3, #15
 800f526:	b29a      	uxth	r2, r3
 800f528:	89fb      	ldrh	r3, [r7, #14]
 800f52a:	085b      	lsrs	r3, r3, #1
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	4413      	add	r3, r2
 800f530:	b29a      	uxth	r2, r3
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	0a1b      	lsrs	r3, r3, #8
 800f536:	b29b      	uxth	r3, r3
 800f538:	4413      	add	r3, r2
 800f53a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	1d1a      	adds	r2, r3, #4
 800f540:	607a      	str	r2, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	60bb      	str	r3, [r7, #8]
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1d8      	bne.n	800f4fe <xname_sum+0xe>
	}
	return sum;
 800f54c:	89fb      	ldrh	r3, [r7, #14]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b086      	sub	sp, #24
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
 800f55e:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800f560:	2300      	movs	r3, #0
 800f562:	617b      	str	r3, [r7, #20]
#if _LFN_UNICODE
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800f564:	2340      	movs	r3, #64	; 0x40
 800f566:	613b      	str	r3, [r7, #16]
 800f568:	e022      	b.n	800f5b0 <get_xdir_info+0x5a>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	f003 031f 	and.w	r3, r3, #31
 800f570:	2b00      	cmp	r3, #0
 800f572:	d102      	bne.n	800f57a <get_xdir_info+0x24>
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	3302      	adds	r3, #2
 800f578:	613b      	str	r3, [r7, #16]
		w = ld_word(dirb + si);					/* Get a character */
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	4413      	add	r3, r2
 800f580:	4618      	mov	r0, r3
 800f582:	f7ff fa33 	bl	800e9ec <ld_word>
 800f586:	4603      	mov	r3, r0
 800f588:	60fb      	str	r3, [r7, #12]
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	2bfe      	cmp	r3, #254	; 0xfe
 800f58e:	d902      	bls.n	800f596 <get_xdir_info+0x40>
 800f590:	2300      	movs	r3, #0
 800f592:	617b      	str	r3, [r7, #20]
 800f594:	e013      	b.n	800f5be <get_xdir_info+0x68>
		fno->fname[di] = w;						/* Store it */
 800f596:	683a      	ldr	r2, [r7, #0]
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	3310      	adds	r3, #16
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	4413      	add	r3, r2
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	605a      	str	r2, [r3, #4]
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	3302      	adds	r3, #2
 800f5a8:	613b      	str	r3, [r7, #16]
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	617b      	str	r3, [r7, #20]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	3323      	adds	r3, #35	; 0x23
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d3d5      	bcc.n	800f56a <get_xdir_info+0x14>
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
		fno->fname[di++] = (char)w;
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d108      	bne.n	800f5d6 <get_xdir_info+0x80>
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	1c5a      	adds	r2, r3, #1
 800f5c8:	617a      	str	r2, [r7, #20]
 800f5ca:	683a      	ldr	r2, [r7, #0]
 800f5cc:	3310      	adds	r3, #16
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	4413      	add	r3, r2
 800f5d2:	223f      	movs	r2, #63	; 0x3f
 800f5d4:	605a      	str	r2, [r3, #4]
	fno->fname[di] = 0;						/* Terminate file name */
 800f5d6:	683a      	ldr	r2, [r7, #0]
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	3310      	adds	r3, #16
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	4413      	add	r3, r2
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	605a      	str	r2, [r3, #4]

	fno->altname[0] = 0;							/* No SFN */
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	611a      	str	r2, [r3, #16]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	791a      	ldrb	r2, [r3, #4]
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	7b1b      	ldrb	r3, [r3, #12]
 800f5f6:	f003 0310 	and.w	r3, r3, #16
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d107      	bne.n	800f60e <get_xdir_info+0xb8>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	3338      	adds	r3, #56	; 0x38
 800f602:	4618      	mov	r0, r3
 800f604:	f7ff fa2d 	bl	800ea62 <ld_qword>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	e003      	b.n	800f616 <get_xdir_info+0xc0>
 800f60e:	f04f 0200 	mov.w	r2, #0
 800f612:	f04f 0300 	mov.w	r3, #0
 800f616:	6839      	ldr	r1, [r7, #0]
 800f618:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	330c      	adds	r3, #12
 800f620:	4618      	mov	r0, r3
 800f622:	f7ff f9e3 	bl	800e9ec <ld_word>
 800f626:	4603      	mov	r3, r0
 800f628:	461a      	mov	r2, r3
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	330e      	adds	r3, #14
 800f632:	4618      	mov	r0, r3
 800f634:	f7ff f9da 	bl	800e9ec <ld_word>
 800f638:	4603      	mov	r3, r0
 800f63a:	461a      	mov	r2, r3
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	811a      	strh	r2, [r3, #8]
}
 800f640:	bf00      	nop
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800f648:	b590      	push	{r4, r7, lr}
 800f64a:	b087      	sub	sp, #28
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	691b      	ldr	r3, [r3, #16]
 800f656:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f660:	4619      	mov	r1, r3
 800f662:	4610      	mov	r0, r2
 800f664:	f7ff fb56 	bl	800ed14 <move_window>
 800f668:	4603      	mov	r3, r0
 800f66a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d001      	beq.n	800f676 <load_xdir+0x2e>
 800f672:	7bfb      	ldrb	r3, [r7, #15]
 800f674:	e09f      	b.n	800f7b6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	2b85      	cmp	r3, #133	; 0x85
 800f67e:	d001      	beq.n	800f684 <load_xdir+0x3c>
 800f680:	2302      	movs	r3, #2
 800f682:	e098      	b.n	800f7b6 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f688:	2220      	movs	r2, #32
 800f68a:	4619      	mov	r1, r3
 800f68c:	6938      	ldr	r0, [r7, #16]
 800f68e:	f7ff fac3 	bl	800ec18 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	3301      	adds	r3, #1
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	3301      	adds	r3, #1
 800f69a:	015b      	lsls	r3, r3, #5
 800f69c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	2b5f      	cmp	r3, #95	; 0x5f
 800f6a2:	d903      	bls.n	800f6ac <load_xdir+0x64>
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f6aa:	d901      	bls.n	800f6b0 <load_xdir+0x68>
 800f6ac:	2302      	movs	r3, #2
 800f6ae:	e082      	b.n	800f7b6 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7ff fd5a 	bl	800f16c <dir_next>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f6bc:	7bfb      	ldrb	r3, [r7, #15]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <load_xdir+0x7e>
 800f6c2:	7bfb      	ldrb	r3, [r7, #15]
 800f6c4:	e077      	b.n	800f7b6 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	f7ff fb1f 	bl	800ed14 <move_window>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f6da:	7bfb      	ldrb	r3, [r7, #15]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d001      	beq.n	800f6e4 <load_xdir+0x9c>
 800f6e0:	7bfb      	ldrb	r3, [r7, #15]
 800f6e2:	e068      	b.n	800f7b6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	2bc0      	cmp	r3, #192	; 0xc0
 800f6ec:	d001      	beq.n	800f6f2 <load_xdir+0xaa>
 800f6ee:	2302      	movs	r3, #2
 800f6f0:	e061      	b.n	800f7b6 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	f103 0020 	add.w	r0, r3, #32
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6fc:	2220      	movs	r2, #32
 800f6fe:	4619      	mov	r1, r3
 800f700:	f7ff fa8a 	bl	800ec18 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	3323      	adds	r3, #35	; 0x23
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	332c      	adds	r3, #44	; 0x2c
 800f70c:	4a2c      	ldr	r2, [pc, #176]	; (800f7c0 <load_xdir+0x178>)
 800f70e:	fba2 2303 	umull	r2, r3, r2, r3
 800f712:	08db      	lsrs	r3, r3, #3
 800f714:	015b      	lsls	r3, r3, #5
 800f716:	68ba      	ldr	r2, [r7, #8]
 800f718:	429a      	cmp	r2, r3
 800f71a:	d201      	bcs.n	800f720 <load_xdir+0xd8>
 800f71c:	2302      	movs	r3, #2
 800f71e:	e04a      	b.n	800f7b6 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800f720:	2340      	movs	r3, #64	; 0x40
 800f722:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800f724:	2100      	movs	r1, #0
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7ff fd20 	bl	800f16c <dir_next>
 800f72c:	4603      	mov	r3, r0
 800f72e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f730:	7bfb      	ldrb	r3, [r7, #15]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d001      	beq.n	800f73a <load_xdir+0xf2>
 800f736:	7bfb      	ldrb	r3, [r7, #15]
 800f738:	e03d      	b.n	800f7b6 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f742:	4619      	mov	r1, r3
 800f744:	4610      	mov	r0, r2
 800f746:	f7ff fae5 	bl	800ed14 <move_window>
 800f74a:	4603      	mov	r3, r0
 800f74c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d001      	beq.n	800f758 <load_xdir+0x110>
 800f754:	7bfb      	ldrb	r3, [r7, #15]
 800f756:	e02e      	b.n	800f7b6 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	2bc1      	cmp	r3, #193	; 0xc1
 800f760:	d001      	beq.n	800f766 <load_xdir+0x11e>
 800f762:	2302      	movs	r3, #2
 800f764:	e027      	b.n	800f7b6 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f76c:	d208      	bcs.n	800f780 <load_xdir+0x138>
 800f76e:	693a      	ldr	r2, [r7, #16]
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	18d0      	adds	r0, r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f778:	2220      	movs	r2, #32
 800f77a:	4619      	mov	r1, r3
 800f77c:	f7ff fa4c 	bl	800ec18 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	3320      	adds	r3, #32
 800f784:	617b      	str	r3, [r7, #20]
 800f786:	697a      	ldr	r2, [r7, #20]
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d3ca      	bcc.n	800f724 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f794:	d80e      	bhi.n	800f7b4 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800f796:	6938      	ldr	r0, [r7, #16]
 800f798:	f7ff fe77 	bl	800f48a <xdir_sum>
 800f79c:	4603      	mov	r3, r0
 800f79e:	461c      	mov	r4, r3
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	3302      	adds	r3, #2
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7ff f921 	bl	800e9ec <ld_word>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	429c      	cmp	r4, r3
 800f7ae:	d001      	beq.n	800f7b4 <load_xdir+0x16c>
 800f7b0:	2302      	movs	r3, #2
 800f7b2:	e000      	b.n	800f7b6 <load_xdir+0x16e>
	}
	return FR_OK;
 800f7b4:	2300      	movs	r3, #0
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	371c      	adds	r7, #28
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd90      	pop	{r4, r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	88888889 	.word	0x88888889

0800f7c4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b086      	sub	sp, #24
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f7ce:	2304      	movs	r3, #4
 800f7d0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f7d8:	23ff      	movs	r3, #255	; 0xff
 800f7da:	757b      	strb	r3, [r7, #21]
 800f7dc:	23ff      	movs	r3, #255	; 0xff
 800f7de:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f7e0:	e09f      	b.n	800f922 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	6938      	ldr	r0, [r7, #16]
 800f7ea:	f7ff fa93 	bl	800ed14 <move_window>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f7f2:	7dfb      	ldrb	r3, [r7, #23]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f040 809a 	bne.w	800f92e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f802:	7dbb      	ldrb	r3, [r7, #22]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d102      	bne.n	800f80e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f808:	2304      	movs	r3, #4
 800f80a:	75fb      	strb	r3, [r7, #23]
 800f80c:	e096      	b.n	800f93c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	2b04      	cmp	r3, #4
 800f814:	d118      	bne.n	800f848 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800f816:	7dbb      	ldrb	r3, [r7, #22]
 800f818:	2b85      	cmp	r3, #133	; 0x85
 800f81a:	d179      	bne.n	800f910 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7ff ff0f 	bl	800f648 <load_xdir>
 800f82a:	4603      	mov	r3, r0
 800f82c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800f82e:	7dfb      	ldrb	r3, [r7, #23]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d17e      	bne.n	800f932 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	691b      	ldr	r3, [r3, #16]
 800f838:	3304      	adds	r3, #4
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f840:	b2da      	uxtb	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	719a      	strb	r2, [r3, #6]
					}
					break;
 800f846:	e074      	b.n	800f932 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f84c:	330b      	adds	r3, #11
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f854:	73fb      	strb	r3, [r7, #15]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	7bfa      	ldrb	r2, [r7, #15]
 800f85a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f85c:	7dbb      	ldrb	r3, [r7, #22]
 800f85e:	2be5      	cmp	r3, #229	; 0xe5
 800f860:	d00e      	beq.n	800f880 <dir_read+0xbc>
 800f862:	7dbb      	ldrb	r3, [r7, #22]
 800f864:	2b2e      	cmp	r3, #46	; 0x2e
 800f866:	d00b      	beq.n	800f880 <dir_read+0xbc>
 800f868:	7bfb      	ldrb	r3, [r7, #15]
 800f86a:	f023 0320 	bic.w	r3, r3, #32
 800f86e:	2b08      	cmp	r3, #8
 800f870:	bf0c      	ite	eq
 800f872:	2301      	moveq	r3, #1
 800f874:	2300      	movne	r3, #0
 800f876:	b2db      	uxtb	r3, r3
 800f878:	461a      	mov	r2, r3
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d002      	beq.n	800f886 <dir_read+0xc2>
				ord = 0xFF;
 800f880:	23ff      	movs	r3, #255	; 0xff
 800f882:	757b      	strb	r3, [r7, #21]
 800f884:	e044      	b.n	800f910 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f886:	7bfb      	ldrb	r3, [r7, #15]
 800f888:	2b0f      	cmp	r3, #15
 800f88a:	d12f      	bne.n	800f8ec <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f88c:	7dbb      	ldrb	r3, [r7, #22]
 800f88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00d      	beq.n	800f8b2 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f89a:	7b5b      	ldrb	r3, [r3, #13]
 800f89c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f89e:	7dbb      	ldrb	r3, [r7, #22]
 800f8a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8a4:	75bb      	strb	r3, [r7, #22]
 800f8a6:	7dbb      	ldrb	r3, [r7, #22]
 800f8a8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f8b2:	7dba      	ldrb	r2, [r7, #22]
 800f8b4:	7d7b      	ldrb	r3, [r7, #21]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d115      	bne.n	800f8e6 <dir_read+0x122>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8be:	330d      	adds	r3, #13
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	7d3a      	ldrb	r2, [r7, #20]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d10e      	bne.n	800f8e6 <dir_read+0x122>
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	68da      	ldr	r2, [r3, #12]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	4610      	mov	r0, r2
 800f8d4:	f7ff fd54 	bl	800f380 <pick_lfn>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d003      	beq.n	800f8e6 <dir_read+0x122>
 800f8de:	7d7b      	ldrb	r3, [r7, #21]
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	e000      	b.n	800f8e8 <dir_read+0x124>
 800f8e6:	23ff      	movs	r3, #255	; 0xff
 800f8e8:	757b      	strb	r3, [r7, #21]
 800f8ea:	e011      	b.n	800f910 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f8ec:	7d7b      	ldrb	r3, [r7, #21]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d109      	bne.n	800f906 <dir_read+0x142>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7ff fda6 	bl	800f448 <sum_sfn>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	461a      	mov	r2, r3
 800f900:	7d3b      	ldrb	r3, [r7, #20]
 800f902:	4293      	cmp	r3, r2
 800f904:	d017      	beq.n	800f936 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f04f 32ff 	mov.w	r2, #4294967295
 800f90c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800f90e:	e012      	b.n	800f936 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f910:	2100      	movs	r1, #0
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f7ff fc2a 	bl	800f16c <dir_next>
 800f918:	4603      	mov	r3, r0
 800f91a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f91c:	7dfb      	ldrb	r3, [r7, #23]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d10b      	bne.n	800f93a <dir_read+0x176>
	while (dp->sect) {
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f926:	2b00      	cmp	r3, #0
 800f928:	f47f af5b 	bne.w	800f7e2 <dir_read+0x1e>
 800f92c:	e006      	b.n	800f93c <dir_read+0x178>
		if (res != FR_OK) break;
 800f92e:	bf00      	nop
 800f930:	e004      	b.n	800f93c <dir_read+0x178>
					break;
 800f932:	bf00      	nop
 800f934:	e002      	b.n	800f93c <dir_read+0x178>
					break;
 800f936:	bf00      	nop
 800f938:	e000      	b.n	800f93c <dir_read+0x178>
		if (res != FR_OK) break;
 800f93a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f93c:	7dfb      	ldrb	r3, [r7, #23]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d002      	beq.n	800f948 <dir_read+0x184>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800f948:	7dfb      	ldrb	r3, [r7, #23]
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3718      	adds	r7, #24
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}

0800f952 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f952:	b590      	push	{r4, r7, lr}
 800f954:	b089      	sub	sp, #36	; 0x24
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f960:	2100      	movs	r1, #0
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7ff fb7c 	bl	800f060 <dir_sdi>
 800f968:	4603      	mov	r3, r0
 800f96a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800f96c:	7ffb      	ldrb	r3, [r7, #31]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d001      	beq.n	800f976 <dir_find+0x24>
 800f972:	7ffb      	ldrb	r3, [r7, #31]
 800f974:	e111      	b.n	800fb9a <dir_find+0x248>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	2b04      	cmp	r3, #4
 800f97c:	d163      	bne.n	800fa46 <dir_find+0xf4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	4618      	mov	r0, r3
 800f984:	f7ff fdb4 	bl	800f4f0 <xname_sum>
 800f988:	4603      	mov	r3, r0
 800f98a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f98c:	e04e      	b.n	800fa2c <dir_find+0xda>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	691b      	ldr	r3, [r3, #16]
 800f992:	3324      	adds	r3, #36	; 0x24
 800f994:	4618      	mov	r0, r3
 800f996:	f7ff f829 	bl	800e9ec <ld_word>
 800f99a:	4603      	mov	r3, r0
 800f99c:	461a      	mov	r2, r3
 800f99e:	893b      	ldrh	r3, [r7, #8]
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d000      	beq.n	800f9a6 <dir_find+0x54>
 800f9a4:	e042      	b.n	800fa2c <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	691b      	ldr	r3, [r3, #16]
 800f9aa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f9ae:	76fb      	strb	r3, [r7, #27]
 800f9b0:	2340      	movs	r3, #64	; 0x40
 800f9b2:	617b      	str	r3, [r7, #20]
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	613b      	str	r3, [r7, #16]
 800f9b8:	e028      	b.n	800fa0c <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	f003 031f 	and.w	r3, r3, #31
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d102      	bne.n	800f9ca <dir_find+0x78>
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	3302      	adds	r3, #2
 800f9c8:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	691a      	ldr	r2, [r3, #16]
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7ff f80a 	bl	800e9ec <ld_word>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f001 fe82 	bl	80116e4 <ff_wtoupper>
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	68da      	ldr	r2, [r3, #12]
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	4413      	add	r3, r2
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f001 fe78 	bl	80116e4 <ff_wtoupper>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	429c      	cmp	r4, r3
 800f9f8:	d10c      	bne.n	800fa14 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f9fa:	7efb      	ldrb	r3, [r7, #27]
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	76fb      	strb	r3, [r7, #27]
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	3302      	adds	r3, #2
 800fa04:	617b      	str	r3, [r7, #20]
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	613b      	str	r3, [r7, #16]
 800fa0c:	7efb      	ldrb	r3, [r7, #27]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1d3      	bne.n	800f9ba <dir_find+0x68>
 800fa12:	e000      	b.n	800fa16 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800fa14:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800fa16:	7efb      	ldrb	r3, [r7, #27]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d107      	bne.n	800fa2c <dir_find+0xda>
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	68da      	ldr	r2, [r3, #12]
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	4413      	add	r3, r2
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d009      	beq.n	800fa40 <dir_find+0xee>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f7ff fec8 	bl	800f7c4 <dir_read>
 800fa34:	4603      	mov	r3, r0
 800fa36:	77fb      	strb	r3, [r7, #31]
 800fa38:	7ffb      	ldrb	r3, [r7, #31]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d0a7      	beq.n	800f98e <dir_find+0x3c>
 800fa3e:	e000      	b.n	800fa42 <dir_find+0xf0>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800fa40:	bf00      	nop
		}
		return res;
 800fa42:	7ffb      	ldrb	r3, [r7, #31]
 800fa44:	e0a9      	b.n	800fb9a <dir_find+0x248>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fa46:	23ff      	movs	r3, #255	; 0xff
 800fa48:	773b      	strb	r3, [r7, #28]
 800fa4a:	7f3b      	ldrb	r3, [r7, #28]
 800fa4c:	777b      	strb	r3, [r7, #29]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f04f 32ff 	mov.w	r2, #4294967295
 800fa54:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f7ff f959 	bl	800ed14 <move_window>
 800fa62:	4603      	mov	r3, r0
 800fa64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800fa66:	7ffb      	ldrb	r3, [r7, #31]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f040 8090 	bne.w	800fb8e <dir_find+0x23c>
		c = dp->dir[DIR_Name];
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fa76:	7fbb      	ldrb	r3, [r7, #30]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d102      	bne.n	800fa82 <dir_find+0x130>
 800fa7c:	2304      	movs	r3, #4
 800fa7e:	77fb      	strb	r3, [r7, #31]
 800fa80:	e08a      	b.n	800fb98 <dir_find+0x246>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa86:	330b      	adds	r3, #11
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa8e:	72fb      	strb	r3, [r7, #11]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	7afa      	ldrb	r2, [r7, #11]
 800fa94:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fa96:	7fbb      	ldrb	r3, [r7, #30]
 800fa98:	2be5      	cmp	r3, #229	; 0xe5
 800fa9a:	d007      	beq.n	800faac <dir_find+0x15a>
 800fa9c:	7afb      	ldrb	r3, [r7, #11]
 800fa9e:	f003 0308 	and.w	r3, r3, #8
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d009      	beq.n	800faba <dir_find+0x168>
 800faa6:	7afb      	ldrb	r3, [r7, #11]
 800faa8:	2b0f      	cmp	r3, #15
 800faaa:	d006      	beq.n	800faba <dir_find+0x168>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800faac:	23ff      	movs	r3, #255	; 0xff
 800faae:	777b      	strb	r3, [r7, #29]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f04f 32ff 	mov.w	r2, #4294967295
 800fab6:	64da      	str	r2, [r3, #76]	; 0x4c
 800fab8:	e05e      	b.n	800fb78 <dir_find+0x226>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800faba:	7afb      	ldrb	r3, [r7, #11]
 800fabc:	2b0f      	cmp	r3, #15
 800fabe:	d136      	bne.n	800fb2e <dir_find+0x1dc>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800fac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faca:	2b00      	cmp	r3, #0
 800facc:	d154      	bne.n	800fb78 <dir_find+0x226>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800face:	7fbb      	ldrb	r3, [r7, #30]
 800fad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00d      	beq.n	800faf4 <dir_find+0x1a2>
						sum = dp->dir[LDIR_Chksum];
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fadc:	7b5b      	ldrb	r3, [r3, #13]
 800fade:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800fae0:	7fbb      	ldrb	r3, [r7, #30]
 800fae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fae6:	77bb      	strb	r3, [r7, #30]
 800fae8:	7fbb      	ldrb	r3, [r7, #30]
 800faea:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800faf4:	7fba      	ldrb	r2, [r7, #30]
 800faf6:	7f7b      	ldrb	r3, [r7, #29]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d115      	bne.n	800fb28 <dir_find+0x1d6>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb00:	330d      	adds	r3, #13
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	7f3a      	ldrb	r2, [r7, #28]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d10e      	bne.n	800fb28 <dir_find+0x1d6>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	68da      	ldr	r2, [r3, #12]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb12:	4619      	mov	r1, r3
 800fb14:	4610      	mov	r0, r2
 800fb16:	f7ff fbc5 	bl	800f2a4 <cmp_lfn>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d003      	beq.n	800fb28 <dir_find+0x1d6>
 800fb20:	7f7b      	ldrb	r3, [r7, #29]
 800fb22:	3b01      	subs	r3, #1
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	e000      	b.n	800fb2a <dir_find+0x1d8>
 800fb28:	23ff      	movs	r3, #255	; 0xff
 800fb2a:	777b      	strb	r3, [r7, #29]
 800fb2c:	e024      	b.n	800fb78 <dir_find+0x226>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fb2e:	7f7b      	ldrb	r3, [r7, #29]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d109      	bne.n	800fb48 <dir_find+0x1f6>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff fc85 	bl	800f448 <sum_sfn>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	461a      	mov	r2, r3
 800fb42:	7f3b      	ldrb	r3, [r7, #28]
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d024      	beq.n	800fb92 <dir_find+0x240>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800fb4e:	f003 0301 	and.w	r3, r3, #1
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d10a      	bne.n	800fb6c <dir_find+0x21a>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	3340      	adds	r3, #64	; 0x40
 800fb5e:	220b      	movs	r2, #11
 800fb60:	4619      	mov	r1, r3
 800fb62:	f7ff f895 	bl	800ec90 <mem_cmp>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d014      	beq.n	800fb96 <dir_find+0x244>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fb6c:	23ff      	movs	r3, #255	; 0xff
 800fb6e:	777b      	strb	r3, [r7, #29]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f04f 32ff 	mov.w	r2, #4294967295
 800fb76:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb78:	2100      	movs	r1, #0
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f7ff faf6 	bl	800f16c <dir_next>
 800fb80:	4603      	mov	r3, r0
 800fb82:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800fb84:	7ffb      	ldrb	r3, [r7, #31]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f43f af65 	beq.w	800fa56 <dir_find+0x104>
 800fb8c:	e004      	b.n	800fb98 <dir_find+0x246>
		if (res != FR_OK) break;
 800fb8e:	bf00      	nop
 800fb90:	e002      	b.n	800fb98 <dir_find+0x246>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fb92:	bf00      	nop
 800fb94:	e000      	b.n	800fb98 <dir_find+0x246>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fb96:	bf00      	nop

	return res;
 800fb98:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3724      	adds	r7, #36	; 0x24
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd90      	pop	{r4, r7, pc}

0800fba2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fba2:	b5b0      	push	{r4, r5, r7, lr}
 800fba4:	b08a      	sub	sp, #40	; 0x28
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	61bb      	str	r3, [r7, #24]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	645a      	str	r2, [r3, #68]	; 0x44
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f000 80db 	beq.w	800fd78 <get_fileinfo+0x1d6>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	2b04      	cmp	r3, #4
 800fbc8:	d106      	bne.n	800fbd8 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	6839      	ldr	r1, [r7, #0]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff fcc0 	bl	800f556 <get_xdir_info>
		return;
 800fbd6:	e0d0      	b.n	800fd7a <get_fileinfo+0x1d8>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe0:	d026      	beq.n	800fc30 <get_fileinfo+0x8e>
			i = j = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	623b      	str	r3, [r7, #32]
 800fbe6:	6a3b      	ldr	r3, [r7, #32]
 800fbe8:	627b      	str	r3, [r7, #36]	; 0x24
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fbea:	e00e      	b.n	800fc0a <get_fileinfo+0x68>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbee:	2bfe      	cmp	r3, #254	; 0xfe
 800fbf0:	d902      	bls.n	800fbf8 <get_fileinfo+0x56>
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	627b      	str	r3, [r7, #36]	; 0x24
 800fbf6:	e014      	b.n	800fc22 <get_fileinfo+0x80>
				fno->fname[i++] = (TCHAR)w;
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfa:	1c5a      	adds	r2, r3, #1
 800fbfc:	627a      	str	r2, [r7, #36]	; 0x24
 800fbfe:	683a      	ldr	r2, [r7, #0]
 800fc00:	3310      	adds	r3, #16
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	605a      	str	r2, [r3, #4]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	68da      	ldr	r2, [r3, #12]
 800fc0e:	6a3b      	ldr	r3, [r7, #32]
 800fc10:	1c59      	adds	r1, r3, #1
 800fc12:	6239      	str	r1, [r7, #32]
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4413      	add	r3, r2
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	617b      	str	r3, [r7, #20]
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1e4      	bne.n	800fbec <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800fc22:	683a      	ldr	r2, [r7, #0]
 800fc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc26:	3310      	adds	r3, #16
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	4413      	add	r3, r2
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	605a      	str	r2, [r3, #4]
		}
	}

	i = j = 0;
 800fc30:	2300      	movs	r3, #0
 800fc32:	623b      	str	r3, [r7, #32]
 800fc34:	6a3b      	ldr	r3, [r7, #32]
 800fc36:	627b      	str	r3, [r7, #36]	; 0x24
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3c:	3310      	adds	r3, #16
 800fc3e:	009b      	lsls	r3, r3, #2
 800fc40:	4413      	add	r3, r2
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	613b      	str	r3, [r7, #16]
	while (i < 11) {		/* Copy name body and extension */
 800fc46:	e059      	b.n	800fcfc <get_fileinfo+0x15a>
		c = (TCHAR)dp->dir[i++];
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4e:	1c59      	adds	r1, r3, #1
 800fc50:	6279      	str	r1, [r7, #36]	; 0x24
 800fc52:	4413      	add	r3, r2
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	61fb      	str	r3, [r7, #28]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	2b20      	cmp	r3, #32
 800fc5c:	d100      	bne.n	800fc60 <get_fileinfo+0xbe>
 800fc5e:	e04d      	b.n	800fcfc <get_fileinfo+0x15a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	2b05      	cmp	r3, #5
 800fc64:	d101      	bne.n	800fc6a <get_fileinfo+0xc8>
 800fc66:	23e5      	movs	r3, #229	; 0xe5
 800fc68:	61fb      	str	r3, [r7, #28]
		if (i == 9) {						/* Insert a . if extension is exist */
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6c:	2b09      	cmp	r3, #9
 800fc6e:	d111      	bne.n	800fc94 <get_fileinfo+0xf2>
			if (!lfv) fno->fname[j] = '.';
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d106      	bne.n	800fc84 <get_fileinfo+0xe2>
 800fc76:	683a      	ldr	r2, [r7, #0]
 800fc78:	6a3b      	ldr	r3, [r7, #32]
 800fc7a:	3310      	adds	r3, #16
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	4413      	add	r3, r2
 800fc80:	222e      	movs	r2, #46	; 0x2e
 800fc82:	605a      	str	r2, [r3, #4]
			fno->altname[j++] = '.';
 800fc84:	6a3b      	ldr	r3, [r7, #32]
 800fc86:	1c5a      	adds	r2, r3, #1
 800fc88:	623a      	str	r2, [r7, #32]
 800fc8a:	683a      	ldr	r2, [r7, #0]
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	212e      	movs	r1, #46	; 0x2e
 800fc90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
#if _LFN_UNICODE
		if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dp->dir[i])) {
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
 800fc94:	2101      	movs	r1, #1
 800fc96:	69f8      	ldr	r0, [r7, #28]
 800fc98:	f001 fcea 	bl	8011670 <ff_convert>
 800fc9c:	61f8      	str	r0, [r7, #28]
		if (!c) c = '?';
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d101      	bne.n	800fca8 <get_fileinfo+0x106>
 800fca4:	233f      	movs	r3, #63	; 0x3f
 800fca6:	61fb      	str	r3, [r7, #28]
#endif
		fno->altname[j] = c;
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	6a3a      	ldr	r2, [r7, #32]
 800fcac:	3204      	adds	r2, #4
 800fcae:	69f9      	ldr	r1, [r7, #28]
 800fcb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (!lfv) {
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d11d      	bne.n	800fcf6 <get_fileinfo+0x154>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	2b40      	cmp	r3, #64	; 0x40
 800fcbe:	d913      	bls.n	800fce8 <get_fileinfo+0x146>
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	2b5a      	cmp	r3, #90	; 0x5a
 800fcc4:	d810      	bhi.n	800fce8 <get_fileinfo+0x146>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcca:	330c      	adds	r3, #12
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	461a      	mov	r2, r3
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd2:	2b08      	cmp	r3, #8
 800fcd4:	d901      	bls.n	800fcda <get_fileinfo+0x138>
 800fcd6:	2310      	movs	r3, #16
 800fcd8:	e000      	b.n	800fcdc <get_fileinfo+0x13a>
 800fcda:	2308      	movs	r3, #8
 800fcdc:	4013      	ands	r3, r2
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d002      	beq.n	800fce8 <get_fileinfo+0x146>
				c += 0x20;			/* To lower */
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	3320      	adds	r3, #32
 800fce6:	61fb      	str	r3, [r7, #28]
			}
			fno->fname[j] = c;
 800fce8:	683a      	ldr	r2, [r7, #0]
 800fcea:	6a3b      	ldr	r3, [r7, #32]
 800fcec:	3310      	adds	r3, #16
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	4413      	add	r3, r2
 800fcf2:	69fa      	ldr	r2, [r7, #28]
 800fcf4:	605a      	str	r2, [r3, #4]
		}
		j++;
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	623b      	str	r3, [r7, #32]
	while (i < 11) {		/* Copy name body and extension */
 800fcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfe:	2b0a      	cmp	r3, #10
 800fd00:	d9a2      	bls.n	800fc48 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10e      	bne.n	800fd26 <get_fileinfo+0x184>
		fno->fname[j] = 0;
 800fd08:	683a      	ldr	r2, [r7, #0]
 800fd0a:	6a3b      	ldr	r3, [r7, #32]
 800fd0c:	3310      	adds	r3, #16
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	4413      	add	r3, r2
 800fd12:	2200      	movs	r2, #0
 800fd14:	605a      	str	r2, [r3, #4]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd1a:	330c      	adds	r3, #12
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d101      	bne.n	800fd26 <get_fileinfo+0x184>
 800fd22:	2300      	movs	r3, #0
 800fd24:	623b      	str	r3, [r7, #32]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	6a3a      	ldr	r2, [r7, #32]
 800fd2a:	3204      	adds	r2, #4
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd36:	7ada      	ldrb	r2, [r3, #11]
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd40:	331c      	adds	r3, #28
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fe fe6a 	bl	800ea1c <ld_dword>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	461c      	mov	r4, r3
 800fd4e:	4615      	mov	r5, r2
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd5a:	3316      	adds	r3, #22
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fe fe5d 	bl	800ea1c <ld_dword>
 800fd62:	60f8      	str	r0, [r7, #12]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	815a      	strh	r2, [r3, #10]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	0c1b      	lsrs	r3, r3, #16
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	811a      	strh	r2, [r3, #8]
 800fd76:	e000      	b.n	800fd7a <get_fileinfo+0x1d8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fd78:	bf00      	nop
}
 800fd7a:	3728      	adds	r7, #40	; 0x28
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bdb0      	pop	{r4, r5, r7, pc}

0800fd80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b08a      	sub	sp, #40	; 0x28
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	60fb      	str	r3, [r7, #12]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	60bb      	str	r3, [r7, #8]
 800fd98:	2300      	movs	r3, #0
 800fd9a:	613b      	str	r3, [r7, #16]
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	1c5a      	adds	r2, r3, #1
 800fda4:	617a      	str	r2, [r7, #20]
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	4413      	add	r3, r2
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	623b      	str	r3, [r7, #32]
		if (w < ' ') break;				/* Break if end of the path name */
 800fdb0:	6a3b      	ldr	r3, [r7, #32]
 800fdb2:	2b1f      	cmp	r3, #31
 800fdb4:	d933      	bls.n	800fe1e <create_name+0x9e>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fdb6:	6a3b      	ldr	r3, [r7, #32]
 800fdb8:	2b2f      	cmp	r3, #47	; 0x2f
 800fdba:	d006      	beq.n	800fdca <create_name+0x4a>
 800fdbc:	6a3b      	ldr	r3, [r7, #32]
 800fdbe:	2b5c      	cmp	r3, #92	; 0x5c
 800fdc0:	d112      	bne.n	800fde8 <create_name+0x68>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fdc2:	e002      	b.n	800fdca <create_name+0x4a>
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	617b      	str	r3, [r7, #20]
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	68fa      	ldr	r2, [r7, #12]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b2f      	cmp	r3, #47	; 0x2f
 800fdd6:	d0f5      	beq.n	800fdc4 <create_name+0x44>
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	68fa      	ldr	r2, [r7, #12]
 800fdde:	4413      	add	r3, r2
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	2b5c      	cmp	r3, #92	; 0x5c
 800fde4:	d0ee      	beq.n	800fdc4 <create_name+0x44>
			break;
 800fde6:	e01b      	b.n	800fe20 <create_name+0xa0>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	2bfe      	cmp	r3, #254	; 0xfe
 800fdec:	d901      	bls.n	800fdf2 <create_name+0x72>
 800fdee:	2306      	movs	r3, #6
 800fdf0:	e16e      	b.n	80100d0 <create_name+0x350>
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fdf2:	6a3b      	ldr	r3, [r7, #32]
 800fdf4:	2b7f      	cmp	r3, #127	; 0x7f
 800fdf6:	d809      	bhi.n	800fe0c <create_name+0x8c>
 800fdf8:	6a3b      	ldr	r3, [r7, #32]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	488d      	ldr	r0, [pc, #564]	; (8010034 <create_name+0x2b4>)
 800fdfe:	f7fe ff6e 	bl	800ecde <chk_chr>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <create_name+0x8c>
 800fe08:	2306      	movs	r3, #6
 800fe0a:	e161      	b.n	80100d0 <create_name+0x350>
		lfn[di++] = w;					/* Store the Unicode character */
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	1c5a      	adds	r2, r3, #1
 800fe10:	613a      	str	r2, [r7, #16]
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	68ba      	ldr	r2, [r7, #8]
 800fe16:	4413      	add	r3, r2
 800fe18:	6a3a      	ldr	r2, [r7, #32]
 800fe1a:	601a      	str	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fe1c:	e7c0      	b.n	800fda0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fe1e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	441a      	add	r2, r3
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fe2c:	6a3b      	ldr	r3, [r7, #32]
 800fe2e:	2b1f      	cmp	r3, #31
 800fe30:	d801      	bhi.n	800fe36 <create_name+0xb6>
 800fe32:	2304      	movs	r3, #4
 800fe34:	e000      	b.n	800fe38 <create_name+0xb8>
 800fe36:	2300      	movs	r3, #0
 800fe38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fe3c:	e011      	b.n	800fe62 <create_name+0xe2>
		w = lfn[di - 1];
 800fe3e:	693a      	ldr	r2, [r7, #16]
 800fe40:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fe44:	4413      	add	r3, r2
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	4413      	add	r3, r2
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	623b      	str	r3, [r7, #32]
		if (w != ' ' && w != '.') break;
 800fe50:	6a3b      	ldr	r3, [r7, #32]
 800fe52:	2b20      	cmp	r3, #32
 800fe54:	d002      	beq.n	800fe5c <create_name+0xdc>
 800fe56:	6a3b      	ldr	r3, [r7, #32]
 800fe58:	2b2e      	cmp	r3, #46	; 0x2e
 800fe5a:	d106      	bne.n	800fe6a <create_name+0xea>
		di--;
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	613b      	str	r3, [r7, #16]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d1ea      	bne.n	800fe3e <create_name+0xbe>
 800fe68:	e000      	b.n	800fe6c <create_name+0xec>
		if (w != ' ' && w != '.') break;
 800fe6a:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	009b      	lsls	r3, r3, #2
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	4413      	add	r3, r2
 800fe74:	2200      	movs	r2, #0
 800fe76:	601a      	str	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d101      	bne.n	800fe82 <create_name+0x102>
 800fe7e:	2306      	movs	r3, #6
 800fe80:	e126      	b.n	80100d0 <create_name+0x350>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	3340      	adds	r3, #64	; 0x40
 800fe86:	220b      	movs	r2, #11
 800fe88:	2120      	movs	r1, #32
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fe fee5 	bl	800ec5a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fe90:	2300      	movs	r3, #0
 800fe92:	617b      	str	r3, [r7, #20]
 800fe94:	e002      	b.n	800fe9c <create_name+0x11c>
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	617b      	str	r3, [r7, #20]
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	68ba      	ldr	r2, [r7, #8]
 800fea2:	4413      	add	r3, r2
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	2b20      	cmp	r3, #32
 800fea8:	d0f5      	beq.n	800fe96 <create_name+0x116>
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	4413      	add	r3, r2
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b2e      	cmp	r3, #46	; 0x2e
 800feb6:	d0ee      	beq.n	800fe96 <create_name+0x116>
	if (si) cf |= NS_LOSS | NS_LFN;
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d009      	beq.n	800fed2 <create_name+0x152>
 800febe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fec2:	f043 0303 	orr.w	r3, r3, #3
 800fec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800feca:	e002      	b.n	800fed2 <create_name+0x152>
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	3b01      	subs	r3, #1
 800fed0:	613b      	str	r3, [r7, #16]
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d009      	beq.n	800feec <create_name+0x16c>
 800fed8:	693a      	ldr	r2, [r7, #16]
 800feda:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fede:	4413      	add	r3, r2
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	68ba      	ldr	r2, [r7, #8]
 800fee4:	4413      	add	r3, r2
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b2e      	cmp	r3, #46	; 0x2e
 800feea:	d1ef      	bne.n	800fecc <create_name+0x14c>

	i = b = 0; ni = 8;
 800feec:	2300      	movs	r3, #0
 800feee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fef2:	2300      	movs	r3, #0
 800fef4:	61fb      	str	r3, [r7, #28]
 800fef6:	2308      	movs	r3, #8
 800fef8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	1c5a      	adds	r2, r3, #1
 800fefe:	617a      	str	r2, [r7, #20]
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	68ba      	ldr	r2, [r7, #8]
 800ff04:	4413      	add	r3, r2
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	623b      	str	r3, [r7, #32]
		if (!w) break;					/* Break on end of the LFN */
 800ff0a:	6a3b      	ldr	r3, [r7, #32]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f000 808e 	beq.w	801002e <create_name+0x2ae>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ff12:	6a3b      	ldr	r3, [r7, #32]
 800ff14:	2b20      	cmp	r3, #32
 800ff16:	d006      	beq.n	800ff26 <create_name+0x1a6>
 800ff18:	6a3b      	ldr	r3, [r7, #32]
 800ff1a:	2b2e      	cmp	r3, #46	; 0x2e
 800ff1c:	d10a      	bne.n	800ff34 <create_name+0x1b4>
 800ff1e:	697a      	ldr	r2, [r7, #20]
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d006      	beq.n	800ff34 <create_name+0x1b4>
			cf |= NS_LOSS | NS_LFN; continue;
 800ff26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff2a:	f043 0303 	orr.w	r3, r3, #3
 800ff2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ff32:	e07b      	b.n	801002c <create_name+0x2ac>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ff34:	69fa      	ldr	r2, [r7, #28]
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d203      	bcs.n	800ff44 <create_name+0x1c4>
 800ff3c:	697a      	ldr	r2, [r7, #20]
 800ff3e:	693b      	ldr	r3, [r7, #16]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d123      	bne.n	800ff8c <create_name+0x20c>
			if (ni == 11) {				/* Long extension */
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	2b0b      	cmp	r3, #11
 800ff48:	d106      	bne.n	800ff58 <create_name+0x1d8>
				cf |= NS_LOSS | NS_LFN; break;
 800ff4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff4e:	f043 0303 	orr.w	r3, r3, #3
 800ff52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ff56:	e074      	b.n	8010042 <create_name+0x2c2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ff58:	697a      	ldr	r2, [r7, #20]
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d005      	beq.n	800ff6c <create_name+0x1ec>
 800ff60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff64:	f043 0303 	orr.w	r3, r3, #3
 800ff68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800ff6c:	697a      	ldr	r2, [r7, #20]
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d865      	bhi.n	8010040 <create_name+0x2c0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	617b      	str	r3, [r7, #20]
 800ff78:	2308      	movs	r3, #8
 800ff7a:	61fb      	str	r3, [r7, #28]
 800ff7c:	230b      	movs	r3, #11
 800ff7e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800ff80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff8a:	e04f      	b.n	801002c <create_name+0x2ac>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ff8c:	6a3b      	ldr	r3, [r7, #32]
 800ff8e:	2b7f      	cmp	r3, #127	; 0x7f
 800ff90:	d912      	bls.n	800ffb8 <create_name+0x238>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ff92:	2100      	movs	r1, #0
 800ff94:	6a38      	ldr	r0, [r7, #32]
 800ff96:	f001 fb6b 	bl	8011670 <ff_convert>
 800ff9a:	6238      	str	r0, [r7, #32]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ff9c:	6a3b      	ldr	r3, [r7, #32]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d004      	beq.n	800ffac <create_name+0x22c>
 800ffa2:	6a3b      	ldr	r3, [r7, #32]
 800ffa4:	3b80      	subs	r3, #128	; 0x80
 800ffa6:	4a24      	ldr	r2, [pc, #144]	; (8010038 <create_name+0x2b8>)
 800ffa8:	5cd3      	ldrb	r3, [r2, r3]
 800ffaa:	623b      	str	r3, [r7, #32]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ffac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ffb0:	f043 0302 	orr.w	r3, r3, #2
 800ffb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ffb8:	6a3b      	ldr	r3, [r7, #32]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d007      	beq.n	800ffce <create_name+0x24e>
 800ffbe:	6a3b      	ldr	r3, [r7, #32]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	481e      	ldr	r0, [pc, #120]	; (801003c <create_name+0x2bc>)
 800ffc4:	f7fe fe8b 	bl	800ecde <chk_chr>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d008      	beq.n	800ffe0 <create_name+0x260>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ffce:	235f      	movs	r3, #95	; 0x5f
 800ffd0:	623b      	str	r3, [r7, #32]
 800ffd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ffd6:	f043 0303 	orr.w	r3, r3, #3
 800ffda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ffde:	e01b      	b.n	8010018 <create_name+0x298>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ffe0:	6a3b      	ldr	r3, [r7, #32]
 800ffe2:	2b40      	cmp	r3, #64	; 0x40
 800ffe4:	d909      	bls.n	800fffa <create_name+0x27a>
 800ffe6:	6a3b      	ldr	r3, [r7, #32]
 800ffe8:	2b5a      	cmp	r3, #90	; 0x5a
 800ffea:	d806      	bhi.n	800fffa <create_name+0x27a>
					b |= 2;
 800ffec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fff0:	f043 0302 	orr.w	r3, r3, #2
 800fff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fff8:	e00e      	b.n	8010018 <create_name+0x298>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fffa:	6a3b      	ldr	r3, [r7, #32]
 800fffc:	2b60      	cmp	r3, #96	; 0x60
 800fffe:	d90b      	bls.n	8010018 <create_name+0x298>
 8010000:	6a3b      	ldr	r3, [r7, #32]
 8010002:	2b7a      	cmp	r3, #122	; 0x7a
 8010004:	d808      	bhi.n	8010018 <create_name+0x298>
						b |= 1; w -= 0x20;
 8010006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801000a:	f043 0301 	orr.w	r3, r3, #1
 801000e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010012:	6a3b      	ldr	r3, [r7, #32]
 8010014:	3b20      	subs	r3, #32
 8010016:	623b      	str	r3, [r7, #32]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	1c5a      	adds	r2, r3, #1
 801001c:	61fa      	str	r2, [r7, #28]
 801001e:	6a3a      	ldr	r2, [r7, #32]
 8010020:	b2d1      	uxtb	r1, r2
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	4413      	add	r3, r2
 8010026:	460a      	mov	r2, r1
 8010028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 801002c:	e765      	b.n	800fefa <create_name+0x17a>
		if (!w) break;					/* Break on end of the LFN */
 801002e:	bf00      	nop
 8010030:	e007      	b.n	8010042 <create_name+0x2c2>
 8010032:	bf00      	nop
 8010034:	08026c14 	.word	0x08026c14
 8010038:	08026f74 	.word	0x08026f74
 801003c:	08026c20 	.word	0x08026c20
			if (si > di) break;			/* No extension */
 8010040:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010048:	2be5      	cmp	r3, #229	; 0xe5
 801004a:	d103      	bne.n	8010054 <create_name+0x2d4>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2205      	movs	r2, #5
 8010050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	2b08      	cmp	r3, #8
 8010058:	d104      	bne.n	8010064 <create_name+0x2e4>
 801005a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010068:	f003 030c 	and.w	r3, r3, #12
 801006c:	2b0c      	cmp	r3, #12
 801006e:	d005      	beq.n	801007c <create_name+0x2fc>
 8010070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010074:	f003 0303 	and.w	r3, r3, #3
 8010078:	2b03      	cmp	r3, #3
 801007a:	d105      	bne.n	8010088 <create_name+0x308>
 801007c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010080:	f043 0302 	orr.w	r3, r3, #2
 8010084:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801008c:	f003 0302 	and.w	r3, r3, #2
 8010090:	2b00      	cmp	r3, #0
 8010092:	d117      	bne.n	80100c4 <create_name+0x344>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010098:	f003 0303 	and.w	r3, r3, #3
 801009c:	2b01      	cmp	r3, #1
 801009e:	d105      	bne.n	80100ac <create_name+0x32c>
 80100a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100a4:	f043 0310 	orr.w	r3, r3, #16
 80100a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80100ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100b0:	f003 030c 	and.w	r3, r3, #12
 80100b4:	2b04      	cmp	r3, #4
 80100b6:	d105      	bne.n	80100c4 <create_name+0x344>
 80100b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100bc:	f043 0308 	orr.w	r3, r3, #8
 80100c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80100ca:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 80100ce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3728      	adds	r7, #40	; 0x28
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80100ec:	e002      	b.n	80100f4 <follow_path+0x1c>
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	3304      	adds	r3, #4
 80100f2:	603b      	str	r3, [r7, #0]
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b2f      	cmp	r3, #47	; 0x2f
 80100fa:	d0f8      	beq.n	80100ee <follow_path+0x16>
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2b5c      	cmp	r3, #92	; 0x5c
 8010102:	d0f4      	beq.n	80100ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	2200      	movs	r2, #0
 8010108:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	2200      	movs	r2, #0
 801010e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	2b1f      	cmp	r3, #31
 8010116:	d80a      	bhi.n	801012e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2280      	movs	r2, #128	; 0x80
 801011c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8010120:	2100      	movs	r1, #0
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f7fe ff9c 	bl	800f060 <dir_sdi>
 8010128:	4603      	mov	r3, r0
 801012a:	75fb      	strb	r3, [r7, #23]
 801012c:	e078      	b.n	8010220 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801012e:	463b      	mov	r3, r7
 8010130:	4619      	mov	r1, r3
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f7ff fe24 	bl	800fd80 <create_name>
 8010138:	4603      	mov	r3, r0
 801013a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801013c:	7dfb      	ldrb	r3, [r7, #23]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d169      	bne.n	8010216 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7ff fc05 	bl	800f952 <dir_find>
 8010148:	4603      	mov	r3, r0
 801014a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8010152:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010154:	7dfb      	ldrb	r3, [r7, #23]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00a      	beq.n	8010170 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801015a:	7dfb      	ldrb	r3, [r7, #23]
 801015c:	2b04      	cmp	r3, #4
 801015e:	d15c      	bne.n	801021a <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010160:	7afb      	ldrb	r3, [r7, #11]
 8010162:	f003 0304 	and.w	r3, r3, #4
 8010166:	2b00      	cmp	r3, #0
 8010168:	d157      	bne.n	801021a <follow_path+0x142>
 801016a:	2305      	movs	r3, #5
 801016c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801016e:	e054      	b.n	801021a <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010170:	7afb      	ldrb	r3, [r7, #11]
 8010172:	f003 0304 	and.w	r3, r3, #4
 8010176:	2b00      	cmp	r3, #0
 8010178:	d151      	bne.n	801021e <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	799b      	ldrb	r3, [r3, #6]
 801017e:	f003 0310 	and.w	r3, r3, #16
 8010182:	2b00      	cmp	r3, #0
 8010184:	d102      	bne.n	801018c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8010186:	2305      	movs	r3, #5
 8010188:	75fb      	strb	r3, [r7, #23]
 801018a:	e049      	b.n	8010220 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	2b04      	cmp	r3, #4
 8010192:	d130      	bne.n	80101f6 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	689a      	ldr	r2, [r3, #8]
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80101a2:	4613      	mov	r3, r2
 80101a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80101a8:	693a      	ldr	r2, [r7, #16]
 80101aa:	79d2      	ldrb	r2, [r2, #7]
 80101ac:	431a      	orrs	r2, r3
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	691b      	ldr	r3, [r3, #16]
 80101be:	3334      	adds	r3, #52	; 0x34
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fe fc2b 	bl	800ea1c <ld_dword>
 80101c6:	4602      	mov	r2, r0
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	691b      	ldr	r3, [r3, #16]
 80101d0:	3321      	adds	r3, #33	; 0x21
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	f003 0302 	and.w	r3, r3, #2
 80101d8:	b2da      	uxtb	r2, r3
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	3338      	adds	r3, #56	; 0x38
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7fe fc3c 	bl	800ea62 <ld_qword>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	6939      	ldr	r1, [r7, #16]
 80101f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80101f4:	e79b      	b.n	801012e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010204:	4413      	add	r3, r2
 8010206:	4619      	mov	r1, r3
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f7ff f82c 	bl	800f266 <ld_clust>
 801020e:	4602      	mov	r2, r0
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010214:	e78b      	b.n	801012e <follow_path+0x56>
			if (res != FR_OK) break;
 8010216:	bf00      	nop
 8010218:	e002      	b.n	8010220 <follow_path+0x148>
				break;
 801021a:	bf00      	nop
 801021c:	e000      	b.n	8010220 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801021e:	bf00      	nop
			}
		}
	}

	return res;
 8010220:	7dfb      	ldrb	r3, [r7, #23]
}
 8010222:	4618      	mov	r0, r3
 8010224:	3718      	adds	r7, #24
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801022a:	b480      	push	{r7}
 801022c:	b087      	sub	sp, #28
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010232:	f04f 33ff 	mov.w	r3, #4294967295
 8010236:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d031      	beq.n	80102a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	617b      	str	r3, [r7, #20]
 8010246:	e002      	b.n	801024e <get_ldnumber+0x24>
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	3304      	adds	r3, #4
 801024c:	617b      	str	r3, [r7, #20]
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b1f      	cmp	r3, #31
 8010254:	d903      	bls.n	801025e <get_ldnumber+0x34>
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b3a      	cmp	r3, #58	; 0x3a
 801025c:	d1f4      	bne.n	8010248 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	2b3a      	cmp	r3, #58	; 0x3a
 8010264:	d11c      	bne.n	80102a0 <get_ldnumber+0x76>
			tp = *path;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	1d1a      	adds	r2, r3, #4
 8010270:	60fa      	str	r2, [r7, #12]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	3b30      	subs	r3, #48	; 0x30
 8010276:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	2b09      	cmp	r3, #9
 801027c:	d80e      	bhi.n	801029c <get_ldnumber+0x72>
 801027e:	68fa      	ldr	r2, [r7, #12]
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	429a      	cmp	r2, r3
 8010284:	d10a      	bne.n	801029c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	2b01      	cmp	r3, #1
 801028a:	d807      	bhi.n	801029c <get_ldnumber+0x72>
					vol = (int)i;
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	3304      	adds	r3, #4
 8010294:	617b      	str	r3, [r7, #20]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	697a      	ldr	r2, [r7, #20]
 801029a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	e002      	b.n	80102a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80102a0:	2300      	movs	r3, #0
 80102a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80102a4:	693b      	ldr	r3, [r7, #16]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	371c      	adds	r7, #28
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr
	...

080102b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	70da      	strb	r2, [r3, #3]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80102cc:	6839      	ldr	r1, [r7, #0]
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f7fe fd20 	bl	800ed14 <move_window>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d001      	beq.n	80102de <check_fs+0x2a>
 80102da:	2304      	movs	r3, #4
 80102dc:	e044      	b.n	8010368 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	3330      	adds	r3, #48	; 0x30
 80102e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fb80 	bl	800e9ec <ld_word>
 80102ec:	4603      	mov	r3, r0
 80102ee:	461a      	mov	r2, r3
 80102f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d001      	beq.n	80102fc <check_fs+0x48>
 80102f8:	2303      	movs	r3, #3
 80102fa:	e035      	b.n	8010368 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010302:	2be9      	cmp	r3, #233	; 0xe9
 8010304:	d009      	beq.n	801031a <check_fs+0x66>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801030c:	2beb      	cmp	r3, #235	; 0xeb
 801030e:	d11e      	bne.n	801034e <check_fs+0x9a>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010316:	2b90      	cmp	r3, #144	; 0x90
 8010318:	d119      	bne.n	801034e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	3330      	adds	r3, #48	; 0x30
 801031e:	3336      	adds	r3, #54	; 0x36
 8010320:	4618      	mov	r0, r3
 8010322:	f7fe fb7b 	bl	800ea1c <ld_dword>
 8010326:	4603      	mov	r3, r0
 8010328:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801032c:	4a10      	ldr	r2, [pc, #64]	; (8010370 <check_fs+0xbc>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d101      	bne.n	8010336 <check_fs+0x82>
 8010332:	2300      	movs	r3, #0
 8010334:	e018      	b.n	8010368 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	3330      	adds	r3, #48	; 0x30
 801033a:	3352      	adds	r3, #82	; 0x52
 801033c:	4618      	mov	r0, r3
 801033e:	f7fe fb6d 	bl	800ea1c <ld_dword>
 8010342:	4603      	mov	r3, r0
 8010344:	4a0b      	ldr	r2, [pc, #44]	; (8010374 <check_fs+0xc0>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d101      	bne.n	801034e <check_fs+0x9a>
 801034a:	2300      	movs	r3, #0
 801034c:	e00c      	b.n	8010368 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	3330      	adds	r3, #48	; 0x30
 8010352:	220b      	movs	r2, #11
 8010354:	4908      	ldr	r1, [pc, #32]	; (8010378 <check_fs+0xc4>)
 8010356:	4618      	mov	r0, r3
 8010358:	f7fe fc9a 	bl	800ec90 <mem_cmp>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d101      	bne.n	8010366 <check_fs+0xb2>
 8010362:	2301      	movs	r3, #1
 8010364:	e000      	b.n	8010368 <check_fs+0xb4>
#endif
	return 2;
 8010366:	2302      	movs	r3, #2
}
 8010368:	4618      	mov	r0, r3
 801036a:	3708      	adds	r7, #8
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	00544146 	.word	0x00544146
 8010374:	33544146 	.word	0x33544146
 8010378:	08026c28 	.word	0x08026c28

0801037c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801037c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010380:	b09c      	sub	sp, #112	; 0x70
 8010382:	af00      	add	r7, sp, #0
 8010384:	61f8      	str	r0, [r7, #28]
 8010386:	61b9      	str	r1, [r7, #24]
 8010388:	4613      	mov	r3, r2
 801038a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	2200      	movs	r2, #0
 8010390:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010392:	69f8      	ldr	r0, [r7, #28]
 8010394:	f7ff ff49 	bl	801022a <get_ldnumber>
 8010398:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 801039a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801039c:	2b00      	cmp	r3, #0
 801039e:	da01      	bge.n	80103a4 <find_volume+0x28>
 80103a0:	230b      	movs	r3, #11
 80103a2:	e2bd      	b.n	8010920 <find_volume+0x5a4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80103a4:	4aa9      	ldr	r2, [pc, #676]	; (801064c <find_volume+0x2d0>)
 80103a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103ac:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80103ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d101      	bne.n	80103b8 <find_volume+0x3c>
 80103b4:	230c      	movs	r3, #12
 80103b6:	e2b3      	b.n	8010920 <find_volume+0x5a4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80103bc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80103be:	7dfb      	ldrb	r3, [r7, #23]
 80103c0:	f023 0301 	bic.w	r3, r3, #1
 80103c4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80103c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00f      	beq.n	80103ee <find_volume+0x72>
		stat = disk_status(fs->drv);
 80103ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103d0:	785b      	ldrb	r3, [r3, #1]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fe faaa 	bl	800e92c <disk_status>
 80103d8:	4603      	mov	r3, r0
 80103da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80103de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80103e2:	f003 0301 	and.w	r3, r3, #1
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d101      	bne.n	80103ee <find_volume+0x72>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
 80103ea:	2300      	movs	r3, #0
 80103ec:	e298      	b.n	8010920 <find_volume+0x5a4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80103ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103f0:	2200      	movs	r2, #0
 80103f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80103f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103f6:	b2da      	uxtb	r2, r3
 80103f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80103fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103fe:	785b      	ldrb	r3, [r3, #1]
 8010400:	4618      	mov	r0, r3
 8010402:	f7fe faad 	bl	800e960 <disk_initialize>
 8010406:	4603      	mov	r3, r0
 8010408:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801040c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010410:	f003 0301 	and.w	r3, r3, #1
 8010414:	2b00      	cmp	r3, #0
 8010416:	d001      	beq.n	801041c <find_volume+0xa0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010418:	2303      	movs	r3, #3
 801041a:	e281      	b.n	8010920 <find_volume+0x5a4>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801041c:	2300      	movs	r3, #0
 801041e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010420:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010422:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010424:	f7ff ff46 	bl	80102b4 <check_fs>
 8010428:	4603      	mov	r3, r0
 801042a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801042e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010432:	2b02      	cmp	r3, #2
 8010434:	d14d      	bne.n	80104d2 <find_volume+0x156>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010436:	2300      	movs	r3, #0
 8010438:	65bb      	str	r3, [r7, #88]	; 0x58
 801043a:	e020      	b.n	801047e <find_volume+0x102>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801043c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801043e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010444:	011b      	lsls	r3, r3, #4
 8010446:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801044a:	4413      	add	r3, r2
 801044c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801044e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010450:	3304      	adds	r3, #4
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d006      	beq.n	8010466 <find_volume+0xea>
 8010458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801045a:	3308      	adds	r3, #8
 801045c:	4618      	mov	r0, r3
 801045e:	f7fe fadd 	bl	800ea1c <ld_dword>
 8010462:	4602      	mov	r2, r0
 8010464:	e000      	b.n	8010468 <find_volume+0xec>
 8010466:	2200      	movs	r2, #0
 8010468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	3360      	adds	r3, #96	; 0x60
 801046e:	f107 0110 	add.w	r1, r7, #16
 8010472:	440b      	add	r3, r1
 8010474:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801047a:	3301      	adds	r3, #1
 801047c:	65bb      	str	r3, [r7, #88]	; 0x58
 801047e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010480:	2b03      	cmp	r3, #3
 8010482:	d9db      	bls.n	801043c <find_volume+0xc0>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010484:	2300      	movs	r3, #0
 8010486:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 8010488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801048a:	2b00      	cmp	r3, #0
 801048c:	d002      	beq.n	8010494 <find_volume+0x118>
 801048e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010490:	3b01      	subs	r3, #1
 8010492:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	3360      	adds	r3, #96	; 0x60
 801049a:	f107 0210 	add.w	r2, r7, #16
 801049e:	4413      	add	r3, r2
 80104a0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80104a4:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80104a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d005      	beq.n	80104b8 <find_volume+0x13c>
 80104ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80104ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80104b0:	f7ff ff00 	bl	80102b4 <check_fs>
 80104b4:	4603      	mov	r3, r0
 80104b6:	e000      	b.n	80104ba <find_volume+0x13e>
 80104b8:	2303      	movs	r3, #3
 80104ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80104be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d905      	bls.n	80104d2 <find_volume+0x156>
 80104c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104c8:	3301      	adds	r3, #1
 80104ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80104cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104ce:	2b03      	cmp	r3, #3
 80104d0:	d9e0      	bls.n	8010494 <find_volume+0x118>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80104d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80104d6:	2b04      	cmp	r3, #4
 80104d8:	d101      	bne.n	80104de <find_volume+0x162>
 80104da:	2301      	movs	r3, #1
 80104dc:	e220      	b.n	8010920 <find_volume+0x5a4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80104de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d901      	bls.n	80104ea <find_volume+0x16e>
 80104e6:	230d      	movs	r3, #13
 80104e8:	e21a      	b.n	8010920 <find_volume+0x5a4>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80104ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	f040 80f2 	bne.w	80106d8 <find_volume+0x35c>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80104f4:	230b      	movs	r3, #11
 80104f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80104f8:	e002      	b.n	8010500 <find_volume+0x184>
 80104fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104fc:	3301      	adds	r3, #1
 80104fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8010500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010502:	2b3f      	cmp	r3, #63	; 0x3f
 8010504:	d806      	bhi.n	8010514 <find_volume+0x198>
 8010506:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801050a:	4413      	add	r3, r2
 801050c:	3330      	adds	r3, #48	; 0x30
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d0f2      	beq.n	80104fa <find_volume+0x17e>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8010514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010516:	2b3f      	cmp	r3, #63	; 0x3f
 8010518:	d801      	bhi.n	801051e <find_volume+0x1a2>
 801051a:	230d      	movs	r3, #13
 801051c:	e200      	b.n	8010920 <find_volume+0x5a4>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801051e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010520:	3330      	adds	r3, #48	; 0x30
 8010522:	3368      	adds	r3, #104	; 0x68
 8010524:	4618      	mov	r0, r3
 8010526:	f7fe fa61 	bl	800e9ec <ld_word>
 801052a:	4603      	mov	r3, r0
 801052c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010530:	d001      	beq.n	8010536 <find_volume+0x1ba>
 8010532:	230d      	movs	r3, #13
 8010534:	e1f4      	b.n	8010920 <find_volume+0x5a4>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8010536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010538:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 801053c:	2b09      	cmp	r3, #9
 801053e:	d001      	beq.n	8010544 <find_volume+0x1c8>
			return FR_NO_FILESYSTEM;
 8010540:	230d      	movs	r3, #13
 8010542:	e1ed      	b.n	8010920 <find_volume+0x5a4>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8010544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010546:	3330      	adds	r3, #48	; 0x30
 8010548:	3348      	adds	r3, #72	; 0x48
 801054a:	4618      	mov	r0, r3
 801054c:	f7fe fa89 	bl	800ea62 <ld_qword>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010556:	2000      	movs	r0, #0
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	68b9      	ldr	r1, [r7, #8]
 801055e:	1851      	adds	r1, r2, r1
 8010560:	6039      	str	r1, [r7, #0]
 8010562:	68f9      	ldr	r1, [r7, #12]
 8010564:	eb43 0101 	adc.w	r1, r3, r1
 8010568:	6079      	str	r1, [r7, #4]
 801056a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801056e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8010572:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010576:	2b01      	cmp	r3, #1
 8010578:	d301      	bcc.n	801057e <find_volume+0x202>
 801057a:	230d      	movs	r3, #13
 801057c:	e1d0      	b.n	8010920 <find_volume+0x5a4>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 801057e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010580:	3330      	adds	r3, #48	; 0x30
 8010582:	3354      	adds	r3, #84	; 0x54
 8010584:	4618      	mov	r0, r3
 8010586:	f7fe fa49 	bl	800ea1c <ld_dword>
 801058a:	4602      	mov	r2, r0
 801058c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801058e:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8010590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010592:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
 8010596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010598:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 801059a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801059c:	789b      	ldrb	r3, [r3, #2]
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d001      	beq.n	80105a6 <find_volume+0x22a>
 80105a2:	230d      	movs	r3, #13
 80105a4:	e1bc      	b.n	8010920 <find_volume+0x5a4>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80105a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105a8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80105ac:	461a      	mov	r2, r3
 80105ae:	2301      	movs	r3, #1
 80105b0:	4093      	lsls	r3, r2
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105b6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80105b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ba:	895b      	ldrh	r3, [r3, #10]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d101      	bne.n	80105c4 <find_volume+0x248>
 80105c0:	230d      	movs	r3, #13
 80105c2:	e1ad      	b.n	8010920 <find_volume+0x5a4>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80105c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c6:	3330      	adds	r3, #48	; 0x30
 80105c8:	335c      	adds	r3, #92	; 0x5c
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fe fa26 	bl	800ea1c <ld_dword>
 80105d0:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80105d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105d4:	4a1e      	ldr	r2, [pc, #120]	; (8010650 <find_volume+0x2d4>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d901      	bls.n	80105de <find_volume+0x262>
 80105da:	230d      	movs	r3, #13
 80105dc:	e1a0      	b.n	8010920 <find_volume+0x5a4>
		fs->n_fatent = nclst + 2;
 80105de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105e0:	1c9a      	adds	r2, r3, #2
 80105e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e4:	615a      	str	r2, [r3, #20]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80105e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80105ea:	61da      	str	r2, [r3, #28]
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80105ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ee:	3330      	adds	r3, #48	; 0x30
 80105f0:	3358      	adds	r3, #88	; 0x58
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fe fa12 	bl	800ea1c <ld_dword>
 80105f8:	4602      	mov	r2, r0
 80105fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105fc:	441a      	add	r2, r3
 80105fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010600:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8010602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010604:	3330      	adds	r3, #48	; 0x30
 8010606:	3350      	adds	r3, #80	; 0x50
 8010608:	4618      	mov	r0, r3
 801060a:	f7fe fa07 	bl	800ea1c <ld_dword>
 801060e:	4602      	mov	r2, r0
 8010610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010612:	441a      	add	r2, r3
 8010614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010616:	621a      	str	r2, [r3, #32]
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8010618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061c:	2200      	movs	r2, #0
 801061e:	469a      	mov	sl, r3
 8010620:	4693      	mov	fp, r2
 8010622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010624:	895b      	ldrh	r3, [r3, #10]
 8010626:	461a      	mov	r2, r3
 8010628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801062a:	fb02 f303 	mul.w	r3, r2, r3
 801062e:	2200      	movs	r2, #0
 8010630:	4698      	mov	r8, r3
 8010632:	4691      	mov	r9, r2
 8010634:	eb1a 0408 	adds.w	r4, sl, r8
 8010638:	eb4b 0509 	adc.w	r5, fp, r9
 801063c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010640:	42a2      	cmp	r2, r4
 8010642:	41ab      	sbcs	r3, r5
 8010644:	d206      	bcs.n	8010654 <find_volume+0x2d8>
 8010646:	230d      	movs	r3, #13
 8010648:	e16a      	b.n	8010920 <find_volume+0x5a4>
 801064a:	bf00      	nop
 801064c:	20000164 	.word	0x20000164
 8010650:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8010654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010656:	3330      	adds	r3, #48	; 0x30
 8010658:	3360      	adds	r3, #96	; 0x60
 801065a:	4618      	mov	r0, r3
 801065c:	f7fe f9de 	bl	800ea1c <ld_dword>
 8010660:	4602      	mov	r2, r0
 8010662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010664:	625a      	str	r2, [r3, #36]	; 0x24

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8010666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066a:	4619      	mov	r1, r3
 801066c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801066e:	f7fe fb79 	bl	800ed64 <clust2sect>
 8010672:	4603      	mov	r3, r0
 8010674:	4619      	mov	r1, r3
 8010676:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010678:	f7fe fb4c 	bl	800ed14 <move_window>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d001      	beq.n	8010686 <find_volume+0x30a>
 8010682:	2301      	movs	r3, #1
 8010684:	e14c      	b.n	8010920 <find_volume+0x5a4>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8010686:	2300      	movs	r3, #0
 8010688:	65bb      	str	r3, [r7, #88]	; 0x58
 801068a:	e015      	b.n	80106b8 <find_volume+0x33c>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801068c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801068e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010690:	4413      	add	r3, r2
 8010692:	3330      	adds	r3, #48	; 0x30
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	2b81      	cmp	r3, #129	; 0x81
 8010698:	d10b      	bne.n	80106b2 <find_volume+0x336>
 801069a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801069c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80106a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106a2:	3314      	adds	r3, #20
 80106a4:	4413      	add	r3, r2
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fe f9b8 	bl	800ea1c <ld_dword>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2b02      	cmp	r3, #2
 80106b0:	d007      	beq.n	80106c2 <find_volume+0x346>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80106b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106b4:	3320      	adds	r3, #32
 80106b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80106b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106be:	d3e5      	bcc.n	801068c <find_volume+0x310>
 80106c0:	e000      	b.n	80106c4 <find_volume+0x348>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80106c2:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80106c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106ca:	d101      	bne.n	80106d0 <find_volume+0x354>
 80106cc:	230d      	movs	r3, #13
 80106ce:	e127      	b.n	8010920 <find_volume+0x5a4>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80106d0:	2304      	movs	r3, #4
 80106d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80106d6:	e10e      	b.n	80108f6 <find_volume+0x57a>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80106d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106da:	3330      	adds	r3, #48	; 0x30
 80106dc:	330b      	adds	r3, #11
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fe f984 	bl	800e9ec <ld_word>
 80106e4:	4603      	mov	r3, r0
 80106e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106ea:	d001      	beq.n	80106f0 <find_volume+0x374>
 80106ec:	230d      	movs	r3, #13
 80106ee:	e117      	b.n	8010920 <find_volume+0x5a4>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80106f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106f2:	3330      	adds	r3, #48	; 0x30
 80106f4:	3316      	adds	r3, #22
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fe f978 	bl	800e9ec <ld_word>
 80106fc:	4603      	mov	r3, r0
 80106fe:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010702:	2b00      	cmp	r3, #0
 8010704:	d106      	bne.n	8010714 <find_volume+0x398>
 8010706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010708:	3330      	adds	r3, #48	; 0x30
 801070a:	3324      	adds	r3, #36	; 0x24
 801070c:	4618      	mov	r0, r3
 801070e:	f7fe f985 	bl	800ea1c <ld_dword>
 8010712:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8010714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010716:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010718:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801071a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801071c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010722:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010726:	789b      	ldrb	r3, [r3, #2]
 8010728:	2b01      	cmp	r3, #1
 801072a:	d005      	beq.n	8010738 <find_volume+0x3bc>
 801072c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801072e:	789b      	ldrb	r3, [r3, #2]
 8010730:	2b02      	cmp	r3, #2
 8010732:	d001      	beq.n	8010738 <find_volume+0x3bc>
 8010734:	230d      	movs	r3, #13
 8010736:	e0f3      	b.n	8010920 <find_volume+0x5a4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801073a:	789b      	ldrb	r3, [r3, #2]
 801073c:	461a      	mov	r2, r3
 801073e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010740:	fb02 f303 	mul.w	r3, r2, r3
 8010744:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801074c:	b29a      	uxth	r2, r3
 801074e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010750:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010754:	895b      	ldrh	r3, [r3, #10]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d008      	beq.n	801076c <find_volume+0x3f0>
 801075a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801075c:	895b      	ldrh	r3, [r3, #10]
 801075e:	461a      	mov	r2, r3
 8010760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010762:	895b      	ldrh	r3, [r3, #10]
 8010764:	3b01      	subs	r3, #1
 8010766:	4013      	ands	r3, r2
 8010768:	2b00      	cmp	r3, #0
 801076a:	d001      	beq.n	8010770 <find_volume+0x3f4>
 801076c:	230d      	movs	r3, #13
 801076e:	e0d7      	b.n	8010920 <find_volume+0x5a4>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010772:	3330      	adds	r3, #48	; 0x30
 8010774:	3311      	adds	r3, #17
 8010776:	4618      	mov	r0, r3
 8010778:	f7fe f938 	bl	800e9ec <ld_word>
 801077c:	4603      	mov	r3, r0
 801077e:	461a      	mov	r2, r3
 8010780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010782:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010786:	891b      	ldrh	r3, [r3, #8]
 8010788:	f003 030f 	and.w	r3, r3, #15
 801078c:	b29b      	uxth	r3, r3
 801078e:	2b00      	cmp	r3, #0
 8010790:	d001      	beq.n	8010796 <find_volume+0x41a>
 8010792:	230d      	movs	r3, #13
 8010794:	e0c4      	b.n	8010920 <find_volume+0x5a4>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010798:	3330      	adds	r3, #48	; 0x30
 801079a:	3313      	adds	r3, #19
 801079c:	4618      	mov	r0, r3
 801079e:	f7fe f925 	bl	800e9ec <ld_word>
 80107a2:	4603      	mov	r3, r0
 80107a4:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80107a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d106      	bne.n	80107ba <find_volume+0x43e>
 80107ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ae:	3330      	adds	r3, #48	; 0x30
 80107b0:	3320      	adds	r3, #32
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fe f932 	bl	800ea1c <ld_dword>
 80107b8:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80107ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107bc:	3330      	adds	r3, #48	; 0x30
 80107be:	330e      	adds	r3, #14
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fe f913 	bl	800e9ec <ld_word>
 80107c6:	4603      	mov	r3, r0
 80107c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80107cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d101      	bne.n	80107d8 <find_volume+0x45c>
 80107d4:	230d      	movs	r3, #13
 80107d6:	e0a3      	b.n	8010920 <find_volume+0x5a4>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80107d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80107dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107de:	4413      	add	r3, r2
 80107e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107e2:	8912      	ldrh	r2, [r2, #8]
 80107e4:	0912      	lsrs	r2, r2, #4
 80107e6:	b292      	uxth	r2, r2
 80107e8:	4413      	add	r3, r2
 80107ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80107ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d201      	bcs.n	80107f8 <find_volume+0x47c>
 80107f4:	230d      	movs	r3, #13
 80107f6:	e093      	b.n	8010920 <find_volume+0x5a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80107f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107fc:	1ad3      	subs	r3, r2, r3
 80107fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010800:	8952      	ldrh	r2, [r2, #10]
 8010802:	fbb3 f3f2 	udiv	r3, r3, r2
 8010806:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801080a:	2b00      	cmp	r3, #0
 801080c:	d101      	bne.n	8010812 <find_volume+0x496>
 801080e:	230d      	movs	r3, #13
 8010810:	e086      	b.n	8010920 <find_volume+0x5a4>
		fmt = FS_FAT32;
 8010812:	2303      	movs	r3, #3
 8010814:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801081a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801081e:	4293      	cmp	r3, r2
 8010820:	d802      	bhi.n	8010828 <find_volume+0x4ac>
 8010822:	2302      	movs	r3, #2
 8010824:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801082a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801082e:	4293      	cmp	r3, r2
 8010830:	d802      	bhi.n	8010838 <find_volume+0x4bc>
 8010832:	2301      	movs	r3, #1
 8010834:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801083a:	1c9a      	adds	r2, r3, #2
 801083c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801083e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010842:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010844:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010846:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801084a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801084c:	441a      	add	r2, r3
 801084e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010850:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010852:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010856:	441a      	add	r2, r3
 8010858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801085a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801085c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010860:	2b03      	cmp	r3, #3
 8010862:	d11e      	bne.n	80108a2 <find_volume+0x526>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010866:	3330      	adds	r3, #48	; 0x30
 8010868:	332a      	adds	r3, #42	; 0x2a
 801086a:	4618      	mov	r0, r3
 801086c:	f7fe f8be 	bl	800e9ec <ld_word>
 8010870:	4603      	mov	r3, r0
 8010872:	2b00      	cmp	r3, #0
 8010874:	d001      	beq.n	801087a <find_volume+0x4fe>
 8010876:	230d      	movs	r3, #13
 8010878:	e052      	b.n	8010920 <find_volume+0x5a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801087a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801087c:	891b      	ldrh	r3, [r3, #8]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d001      	beq.n	8010886 <find_volume+0x50a>
 8010882:	230d      	movs	r3, #13
 8010884:	e04c      	b.n	8010920 <find_volume+0x5a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010888:	3330      	adds	r3, #48	; 0x30
 801088a:	332c      	adds	r3, #44	; 0x2c
 801088c:	4618      	mov	r0, r3
 801088e:	f7fe f8c5 	bl	800ea1c <ld_dword>
 8010892:	4602      	mov	r2, r0
 8010894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010896:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801089a:	695b      	ldr	r3, [r3, #20]
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80108a0:	e01f      	b.n	80108e2 <find_volume+0x566>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80108a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108a4:	891b      	ldrh	r3, [r3, #8]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <find_volume+0x532>
 80108aa:	230d      	movs	r3, #13
 80108ac:	e038      	b.n	8010920 <find_volume+0x5a4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80108ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108b0:	6a1a      	ldr	r2, [r3, #32]
 80108b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80108b4:	441a      	add	r2, r3
 80108b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108b8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80108ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80108be:	2b02      	cmp	r3, #2
 80108c0:	d103      	bne.n	80108ca <find_volume+0x54e>
 80108c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108c4:	695b      	ldr	r3, [r3, #20]
 80108c6:	005b      	lsls	r3, r3, #1
 80108c8:	e00a      	b.n	80108e0 <find_volume+0x564>
 80108ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108cc:	695a      	ldr	r2, [r3, #20]
 80108ce:	4613      	mov	r3, r2
 80108d0:	005b      	lsls	r3, r3, #1
 80108d2:	4413      	add	r3, r2
 80108d4:	085a      	lsrs	r2, r3, #1
 80108d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108d8:	695b      	ldr	r3, [r3, #20]
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80108e0:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80108e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108e4:	699a      	ldr	r2, [r3, #24]
 80108e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80108ec:	0a5b      	lsrs	r3, r3, #9
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d201      	bcs.n	80108f6 <find_volume+0x57a>
 80108f2:	230d      	movs	r3, #13
 80108f4:	e014      	b.n	8010920 <find_volume+0x5a4>
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80108f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108f8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80108fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80108fe:	4b0b      	ldr	r3, [pc, #44]	; (801092c <find_volume+0x5b0>)
 8010900:	881b      	ldrh	r3, [r3, #0]
 8010902:	3301      	adds	r3, #1
 8010904:	b29a      	uxth	r2, r3
 8010906:	4b09      	ldr	r3, [pc, #36]	; (801092c <find_volume+0x5b0>)
 8010908:	801a      	strh	r2, [r3, #0]
 801090a:	4b08      	ldr	r3, [pc, #32]	; (801092c <find_volume+0x5b0>)
 801090c:	881a      	ldrh	r2, [r3, #0]
 801090e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010910:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010914:	4a06      	ldr	r2, [pc, #24]	; (8010930 <find_volume+0x5b4>)
 8010916:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8010918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801091a:	4a06      	ldr	r2, [pc, #24]	; (8010934 <find_volume+0x5b8>)
 801091c:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 801091e:	2300      	movs	r3, #0
}
 8010920:	4618      	mov	r0, r3
 8010922:	3770      	adds	r7, #112	; 0x70
 8010924:	46bd      	mov	sp, r7
 8010926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801092a:	bf00      	nop
 801092c:	2000016c 	.word	0x2000016c
 8010930:	200003d0 	.word	0x200003d0
 8010934:	20000170 	.word	0x20000170

08010938 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010942:	2309      	movs	r3, #9
 8010944:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d01c      	beq.n	8010986 <validate+0x4e>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d018      	beq.n	8010986 <validate+0x4e>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d013      	beq.n	8010986 <validate+0x4e>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	889a      	ldrh	r2, [r3, #4]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	88db      	ldrh	r3, [r3, #6]
 8010968:	429a      	cmp	r2, r3
 801096a:	d10c      	bne.n	8010986 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	785b      	ldrb	r3, [r3, #1]
 8010972:	4618      	mov	r0, r3
 8010974:	f7fd ffda 	bl	800e92c <disk_status>
 8010978:	4603      	mov	r3, r0
 801097a:	f003 0301 	and.w	r3, r3, #1
 801097e:	2b00      	cmp	r3, #0
 8010980:	d101      	bne.n	8010986 <validate+0x4e>
			res = FR_OK;
 8010982:	2300      	movs	r3, #0
 8010984:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010986:	7bfb      	ldrb	r3, [r7, #15]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d102      	bne.n	8010992 <validate+0x5a>
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	e000      	b.n	8010994 <validate+0x5c>
 8010992:	2300      	movs	r3, #0
 8010994:	683a      	ldr	r2, [r7, #0]
 8010996:	6013      	str	r3, [r2, #0]
	return res;
 8010998:	7bfb      	ldrb	r3, [r7, #15]
}
 801099a:	4618      	mov	r0, r3
 801099c:	3710      	adds	r7, #16
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
	...

080109a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b088      	sub	sp, #32
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	60b9      	str	r1, [r7, #8]
 80109ae:	4613      	mov	r3, r2
 80109b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80109b6:	f107 0310 	add.w	r3, r7, #16
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7ff fc35 	bl	801022a <get_ldnumber>
 80109c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	da01      	bge.n	80109cc <f_mount+0x28>
 80109c8:	230b      	movs	r3, #11
 80109ca:	e028      	b.n	8010a1e <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80109cc:	4a16      	ldr	r2, [pc, #88]	; (8010a28 <f_mount+0x84>)
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	2200      	movs	r2, #0
 80109e0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d002      	beq.n	80109ee <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2200      	movs	r2, #0
 80109ec:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80109ee:	68fa      	ldr	r2, [r7, #12]
 80109f0:	490d      	ldr	r1, [pc, #52]	; (8010a28 <f_mount+0x84>)
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d002      	beq.n	8010a04 <f_mount+0x60>
 80109fe:	79fb      	ldrb	r3, [r7, #7]
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d001      	beq.n	8010a08 <f_mount+0x64>
 8010a04:	2300      	movs	r3, #0
 8010a06:	e00a      	b.n	8010a1e <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010a08:	f107 010c 	add.w	r1, r7, #12
 8010a0c:	f107 0308 	add.w	r3, r7, #8
 8010a10:	2200      	movs	r2, #0
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7ff fcb2 	bl	801037c <find_volume>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3720      	adds	r7, #32
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	20000164 	.word	0x20000164

08010a2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010a2c:	b5b0      	push	{r4, r5, r7, lr}
 8010a2e:	b09c      	sub	sp, #112	; 0x70
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	4613      	mov	r3, r2
 8010a38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d101      	bne.n	8010a44 <f_open+0x18>
 8010a40:	2309      	movs	r3, #9
 8010a42:	e0a3      	b.n	8010b8c <f_open+0x160>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010a44:	79fb      	ldrb	r3, [r7, #7]
 8010a46:	f003 0301 	and.w	r3, r3, #1
 8010a4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010a4c:	79fa      	ldrb	r2, [r7, #7]
 8010a4e:	f107 0114 	add.w	r1, r7, #20
 8010a52:	f107 0308 	add.w	r3, r7, #8
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff fc90 	bl	801037c <find_volume>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8010a62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f040 8087 	bne.w	8010b7a <f_open+0x14e>
		dj.obj.fs = fs;
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	f107 0318 	add.w	r3, r7, #24
 8010a76:	4611      	mov	r1, r2
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7ff fb2d 	bl	80100d8 <follow_path>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			if (!fp->obj.lockid) res = FR_INT_ERR;
#endif
		}
#else		/* R/O configuration */
		if (res == FR_OK) {
 8010a84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d110      	bne.n	8010aae <f_open+0x82>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010a8c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8010a90:	b25b      	sxtb	r3, r3
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	da03      	bge.n	8010a9e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010a96:	2306      	movs	r3, #6
 8010a98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010a9c:	e007      	b.n	8010aae <f_open+0x82>
			} else {
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010a9e:	7fbb      	ldrb	r3, [r7, #30]
 8010aa0:	f003 0310 	and.w	r3, r3, #16
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d002      	beq.n	8010aae <f_open+0x82>
					res = FR_NO_FILE;
 8010aa8:	2304      	movs	r3, #4
 8010aaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010aae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d161      	bne.n	8010b7a <f_open+0x14e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	2b04      	cmp	r3, #4
 8010abc:	d12c      	bne.n	8010b18 <f_open+0xec>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8010abe:	6a3a      	ldr	r2, [r7, #32]
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8010ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010ac8:	4613      	mov	r3, r2
 8010aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010ace:	7ffa      	ldrb	r2, [r7, #31]
 8010ad0:	431a      	orrs	r2, r3
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8010ad6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	691b      	ldr	r3, [r3, #16]
 8010ae0:	3334      	adds	r3, #52	; 0x34
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fd ff9a 	bl	800ea1c <ld_dword>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	691b      	ldr	r3, [r3, #16]
 8010af2:	3338      	adds	r3, #56	; 0x38
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7fd ffb4 	bl	800ea62 <ld_qword>
 8010afa:	4602      	mov	r2, r0
 8010afc:	460b      	mov	r3, r1
 8010afe:	68f9      	ldr	r1, [r7, #12]
 8010b00:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	691b      	ldr	r3, [r3, #16]
 8010b08:	3321      	adds	r3, #33	; 0x21
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	f003 0302 	and.w	r3, r3, #2
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	71da      	strb	r2, [r3, #7]
 8010b16:	e014      	b.n	8010b42 <f_open+0x116>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b1c:	4611      	mov	r1, r2
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fe fba1 	bl	800f266 <ld_clust>
 8010b24:	4602      	mov	r2, r0
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b2c:	331c      	adds	r3, #28
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fd ff74 	bl	800ea1c <ld_dword>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2200      	movs	r2, #0
 8010b38:	461c      	mov	r4, r3
 8010b3a:	4615      	mov	r5, r2
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	e9c3 4504 	strd	r4, r5, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	2200      	movs	r2, #0
 8010b46:	649a      	str	r2, [r3, #72]	; 0x48
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010b48:	697a      	ldr	r2, [r7, #20]
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	88da      	ldrh	r2, [r3, #6]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	79fa      	ldrb	r2, [r7, #7]
 8010b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2200      	movs	r2, #0
 8010b62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010b6c:	68f9      	ldr	r1, [r7, #12]
 8010b6e:	f04f 0200 	mov.w	r2, #0
 8010b72:	f04f 0300 	mov.w	r3, #0
 8010b76:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010b7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d002      	beq.n	8010b88 <f_open+0x15c>
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2200      	movs	r2, #0
 8010b86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010b88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3770      	adds	r7, #112	; 0x70
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bdb0      	pop	{r4, r5, r7, pc}

08010b94 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b98:	b095      	sub	sp, #84	; 0x54
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	61f8      	str	r0, [r7, #28]
 8010b9e:	61b9      	str	r1, [r7, #24]
 8010ba0:	617a      	str	r2, [r7, #20]
 8010ba2:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	63fb      	str	r3, [r7, #60]	; 0x3c


	*br = 0;	/* Clear read byte counter */
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	2200      	movs	r2, #0
 8010bac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010bae:	69fb      	ldr	r3, [r7, #28]
 8010bb0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010bb4:	4611      	mov	r1, r2
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7ff febe 	bl	8010938 <validate>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010bc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d108      	bne.n	8010bdc <f_read+0x48>
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010bd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010bd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d002      	beq.n	8010be2 <f_read+0x4e>
 8010bdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010be0:	e10e      	b.n	8010e00 <f_read+0x26c>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010be8:	f003 0301 	and.w	r3, r3, #1
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d101      	bne.n	8010bf4 <f_read+0x60>
 8010bf0:	2307      	movs	r3, #7
 8010bf2:	e105      	b.n	8010e00 <f_read+0x26c>
	remain = fp->obj.objsize - fp->fptr;
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010bfa:	69fb      	ldr	r3, [r7, #28]
 8010bfc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010c00:	1a86      	subs	r6, r0, r2
 8010c02:	603e      	str	r6, [r7, #0]
 8010c04:	eb61 0303 	sbc.w	r3, r1, r3
 8010c08:	607b      	str	r3, [r7, #4]
 8010c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	2200      	movs	r2, #0
 8010c16:	469a      	mov	sl, r3
 8010c18:	4693      	mov	fp, r2
 8010c1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010c1e:	4552      	cmp	r2, sl
 8010c20:	eb73 030b 	sbcs.w	r3, r3, fp
 8010c24:	f080 80e7 	bcs.w	8010df6 <f_read+0x262>
 8010c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2a:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 8010c2c:	e0e3      	b.n	8010df6 <f_read+0x262>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010c34:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010c38:	2500      	movs	r5, #0
 8010c3a:	ea54 0305 	orrs.w	r3, r4, r5
 8010c3e:	f040 809c 	bne.w	8010d7a <f_read+0x1e6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010c48:	f04f 0200 	mov.w	r2, #0
 8010c4c:	f04f 0300 	mov.w	r3, #0
 8010c50:	0a42      	lsrs	r2, r0, #9
 8010c52:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010c56:	0a4b      	lsrs	r3, r1, #9
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	895b      	ldrh	r3, [r3, #10]
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	4013      	ands	r3, r2
 8010c60:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 8010c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d132      	bne.n	8010cce <f_read+0x13a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010c6e:	4313      	orrs	r3, r2
 8010c70:	d103      	bne.n	8010c7a <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010c72:	69fb      	ldr	r3, [r7, #28]
 8010c74:	689b      	ldr	r3, [r3, #8]
 8010c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c78:	e013      	b.n	8010ca2 <f_read+0x10e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d007      	beq.n	8010c92 <f_read+0xfe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010c88:	69f8      	ldr	r0, [r7, #28]
 8010c8a:	f7fe f9a5 	bl	800efd8 <clmt_clust>
 8010c8e:	64b8      	str	r0, [r7, #72]	; 0x48
 8010c90:	e007      	b.n	8010ca2 <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010c92:	69fa      	ldr	r2, [r7, #28]
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c98:	4619      	mov	r1, r3
 8010c9a:	4610      	mov	r0, r2
 8010c9c:	f7fe f882 	bl	800eda4 <get_fat>
 8010ca0:	64b8      	str	r0, [r7, #72]	; 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d805      	bhi.n	8010cb4 <f_read+0x120>
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	2202      	movs	r2, #2
 8010cac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010cb0:	2302      	movs	r3, #2
 8010cb2:	e0a5      	b.n	8010e00 <f_read+0x26c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cba:	d105      	bne.n	8010cc8 <f_read+0x134>
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	e09b      	b.n	8010e00 <f_read+0x26c>
				fp->clust = clst;				/* Update current cluster */
 8010cc8:	69fb      	ldr	r3, [r7, #28]
 8010cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ccc:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	4610      	mov	r0, r2
 8010cd8:	f7fe f844 	bl	800ed64 <clust2sect>
 8010cdc:	62b8      	str	r0, [r7, #40]	; 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d105      	bne.n	8010cf0 <f_read+0x15c>
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	2202      	movs	r2, #2
 8010ce8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010cec:	2302      	movs	r3, #2
 8010cee:	e087      	b.n	8010e00 <f_read+0x26c>
			sect += csect;
 8010cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf4:	4413      	add	r3, r2
 8010cf6:	62bb      	str	r3, [r7, #40]	; 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	0a5b      	lsrs	r3, r3, #9
 8010cfc:	643b      	str	r3, [r7, #64]	; 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d020      	beq.n	8010d46 <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d08:	4413      	add	r3, r2
 8010d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d0c:	8952      	ldrh	r2, [r2, #10]
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d905      	bls.n	8010d1e <f_read+0x18a>
					cc = fs->csize - csect;
 8010d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d14:	895b      	ldrh	r3, [r3, #10]
 8010d16:	461a      	mov	r2, r3
 8010d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1a:	1ad3      	subs	r3, r2, r3
 8010d1c:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d20:	7858      	ldrb	r0, [r3, #1]
 8010d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d28:	f7fd fe40 	bl	800e9ac <disk_read>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d005      	beq.n	8010d3e <f_read+0x1aa>
 8010d32:	69fb      	ldr	r3, [r7, #28]
 8010d34:	2201      	movs	r2, #1
 8010d36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e060      	b.n	8010e00 <f_read+0x26c>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d40:	025b      	lsls	r3, r3, #9
 8010d42:	647b      	str	r3, [r7, #68]	; 0x44
				continue;
 8010d44:	e037      	b.n	8010db6 <f_read+0x222>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d011      	beq.n	8010d74 <f_read+0x1e0>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	7858      	ldrb	r0, [r3, #1]
 8010d54:	69fb      	ldr	r3, [r7, #28]
 8010d56:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d5e:	f7fd fe25 	bl	800e9ac <disk_read>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d005      	beq.n	8010d74 <f_read+0x1e0>
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010d70:	2301      	movs	r3, #1
 8010d72:	e045      	b.n	8010e00 <f_read+0x26c>
			}
#endif
			fp->sect = sect;
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d78:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d7a:	69fb      	ldr	r3, [r7, #28]
 8010d7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010d80:	4613      	mov	r3, r2
 8010d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d86:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010d8a:	647b      	str	r3, [r7, #68]	; 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d901      	bls.n	8010d98 <f_read+0x204>
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	647b      	str	r3, [r7, #68]	; 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010d98:	69fb      	ldr	r3, [r7, #28]
 8010d9a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010da4:	4613      	mov	r3, r2
 8010da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010daa:	440b      	add	r3, r1
 8010dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010dae:	4619      	mov	r1, r3
 8010db0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010db2:	f7fd ff31 	bl	800ec18 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010db6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dba:	4413      	add	r3, r2
 8010dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010dc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dc6:	2000      	movs	r0, #0
 8010dc8:	4688      	mov	r8, r1
 8010dca:	4681      	mov	r9, r0
 8010dcc:	eb12 0108 	adds.w	r1, r2, r8
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	eb43 0309 	adc.w	r3, r3, r9
 8010dd6:	60fb      	str	r3, [r7, #12]
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010dde:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010de8:	441a      	add	r2, r3
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	601a      	str	r2, [r3, #0]
 8010dee:	697a      	ldr	r2, [r7, #20]
 8010df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	f47f af18 	bne.w	8010c2e <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010dfe:	2300      	movs	r3, #0
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3754      	adds	r7, #84	; 0x54
 8010e04:	46bd      	mov	sp, r7
 8010e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e0a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b084      	sub	sp, #16
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f107 0208 	add.w	r2, r7, #8
 8010e18:	4611      	mov	r1, r2
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7ff fd8c 	bl	8010938 <validate>
 8010e20:	4603      	mov	r3, r0
 8010e22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010e24:	7bfb      	ldrb	r3, [r7, #15]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d102      	bne.n	8010e30 <f_close+0x26>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3710      	adds	r7, #16
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010e3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e3e:	b0b6      	sub	sp, #216	; 0xd8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010e46:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010e52:	4619      	mov	r1, r3
 8010e54:	4610      	mov	r0, r2
 8010e56:	f7ff fd6f 	bl	8010938 <validate>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010e60:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d105      	bne.n	8010e74 <f_lseek+0x3a>
 8010e68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010e70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010e74:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d002      	beq.n	8010e82 <f_lseek+0x48>
 8010e7c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010e80:	e2b0      	b.n	80113e4 <f_lseek+0x5aa>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	f000 8118 	beq.w	80110be <f_lseek+0x284>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010e8e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e96:	bf08      	it	eq
 8010e98:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8010e9c:	f040 8087 	bne.w	8010fae <f_lseek+0x174>
			tbl = fp->cltbl;
 8010ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010eaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010eae:	1d1a      	adds	r2, r3, #4
 8010eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010eba:	2302      	movs	r3, #2
 8010ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ec4:	689b      	ldr	r3, [r3, #8]
 8010ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 8010eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d058      	beq.n	8010f84 <f_lseek+0x14a>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010ed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010eda:	2300      	movs	r3, #0
 8010edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010ee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010ee4:	3302      	adds	r3, #2
 8010ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 8010eea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010ef2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 8010efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f00:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fd ff4d 	bl	800eda4 <get_fat>
 8010f0a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d806      	bhi.n	8010f24 <f_lseek+0xea>
 8010f16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f1a:	2202      	movs	r2, #2
 8010f1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010f20:	2302      	movs	r3, #2
 8010f22:	e25f      	b.n	80113e4 <f_lseek+0x5aa>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f2c:	d106      	bne.n	8010f3c <f_lseek+0x102>
 8010f2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f32:	2201      	movs	r2, #1
 8010f34:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010f38:	2301      	movs	r3, #1
 8010f3a:	e253      	b.n	80113e4 <f_lseek+0x5aa>
					} while (cl == pcl + 1);
 8010f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010f40:	3301      	adds	r3, #1
 8010f42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d0cf      	beq.n	8010eea <f_lseek+0xb0>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010f4a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d80f      	bhi.n	8010f76 <f_lseek+0x13c>
						*tbl++ = ncl; *tbl++ = tcl;
 8010f56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f5a:	1d1a      	adds	r2, r3, #4
 8010f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010f60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010f64:	601a      	str	r2, [r3, #0]
 8010f66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f6a:	1d1a      	adds	r2, r3, #4
 8010f6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010f70:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010f74:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010f7a:	695b      	ldr	r3, [r3, #20]
 8010f7c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d3a6      	bcc.n	8010ed2 <f_lseek+0x98>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010f84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f8a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010f8e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010f90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010f94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d804      	bhi.n	8010fa6 <f_lseek+0x16c>
				*tbl = 0;		/* Terminate table */
 8010f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	601a      	str	r2, [r3, #0]
 8010fa4:	e21c      	b.n	80113e0 <f_lseek+0x5a6>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010fa6:	2311      	movs	r3, #17
 8010fa8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8010fac:	e218      	b.n	80113e0 <f_lseek+0x5a6>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fb2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010fb6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010fba:	4290      	cmp	r0, r2
 8010fbc:	eb71 0303 	sbcs.w	r3, r1, r3
 8010fc0:	d205      	bcs.n	8010fce <f_lseek+0x194>
 8010fc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010fca:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 8010fce:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010fd2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010fd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 8010fda:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	f000 81fe 	beq.w	80113e0 <f_lseek+0x5a6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010fe4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010fe8:	f112 3aff 	adds.w	sl, r2, #4294967295
 8010fec:	f143 3bff 	adc.w	fp, r3, #4294967295
 8010ff0:	4652      	mov	r2, sl
 8010ff2:	465b      	mov	r3, fp
 8010ff4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8010ff8:	f7fd ffee 	bl	800efd8 <clmt_clust>
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011002:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8011004:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801100e:	4619      	mov	r1, r3
 8011010:	4610      	mov	r0, r2
 8011012:	f7fd fea7 	bl	800ed64 <clust2sect>
 8011016:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801101a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801101e:	2b00      	cmp	r3, #0
 8011020:	d106      	bne.n	8011030 <f_lseek+0x1f6>
 8011022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011026:	2202      	movs	r2, #2
 8011028:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801102c:	2302      	movs	r3, #2
 801102e:	e1d9      	b.n	80113e4 <f_lseek+0x5aa>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011030:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011034:	1e54      	subs	r4, r2, #1
 8011036:	f143 35ff 	adc.w	r5, r3, #4294967295
 801103a:	f04f 0200 	mov.w	r2, #0
 801103e:	f04f 0300 	mov.w	r3, #0
 8011042:	0a62      	lsrs	r2, r4, #9
 8011044:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 8011048:	0a6b      	lsrs	r3, r5, #9
 801104a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801104e:	895b      	ldrh	r3, [r3, #10]
 8011050:	3b01      	subs	r3, #1
 8011052:	4013      	ands	r3, r2
 8011054:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011058:	4413      	add	r3, r2
 801105a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801105e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011062:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011066:	f3c2 0808 	ubfx	r8, r2, #0, #9
 801106a:	f04f 0900 	mov.w	r9, #0
 801106e:	ea58 0309 	orrs.w	r3, r8, r9
 8011072:	f000 81b5 	beq.w	80113e0 <f_lseek+0x5a6>
 8011076:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801107c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011080:	429a      	cmp	r2, r3
 8011082:	f000 81ad 	beq.w	80113e0 <f_lseek+0x5a6>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
						fp->flag &= (BYTE)~FA_DIRTY;
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011086:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801108a:	7858      	ldrb	r0, [r3, #1]
 801108c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011090:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8011094:	2301      	movs	r3, #1
 8011096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801109a:	f7fd fc87 	bl	800e9ac <disk_read>
 801109e:	4603      	mov	r3, r0
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d006      	beq.n	80110b2 <f_lseek+0x278>
 80110a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110a8:	2201      	movs	r2, #1
 80110aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80110ae:	2301      	movs	r3, #1
 80110b0:	e198      	b.n	80113e4 <f_lseek+0x5aa>
#endif
					fp->sect = dsc;
 80110b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80110ba:	645a      	str	r2, [r3, #68]	; 0x44
 80110bc:	e190      	b.n	80113e0 <f_lseek+0x5a6>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 80110be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	2b04      	cmp	r3, #4
 80110c6:	d009      	beq.n	80110dc <f_lseek+0x2a2>
 80110c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d305      	bcc.n	80110dc <f_lseek+0x2a2>
 80110d0:	f04f 32ff 	mov.w	r2, #4294967295
 80110d4:	f04f 0300 	mov.w	r3, #0
 80110d8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80110dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80110e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80110e8:	4290      	cmp	r0, r2
 80110ea:	eb71 0303 	sbcs.w	r3, r1, r3
 80110ee:	d205      	bcs.n	80110fc <f_lseek+0x2c2>
			ofs = fp->obj.objsize;
 80110f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80110f8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 80110fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011100:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011104:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 8011108:	2300      	movs	r3, #0
 801110a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801110e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011112:	f04f 0200 	mov.w	r2, #0
 8011116:	f04f 0300 	mov.w	r3, #0
 801111a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 801111e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011122:	4313      	orrs	r3, r2
 8011124:	f000 812c 	beq.w	8011380 <f_lseek+0x546>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801112c:	895b      	ldrh	r3, [r3, #10]
 801112e:	025b      	lsls	r3, r3, #9
 8011130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 8011134:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8011138:	4313      	orrs	r3, r2
 801113a:	d06b      	beq.n	8011214 <f_lseek+0x3da>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801113c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011140:	1e51      	subs	r1, r2, #1
 8011142:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8011146:	f143 33ff 	adc.w	r3, r3, #4294967295
 801114a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801114e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011152:	2200      	movs	r2, #0
 8011154:	67bb      	str	r3, [r7, #120]	; 0x78
 8011156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011158:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801115c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011160:	f7ef fe8a 	bl	8000e78 <__aeabi_uldivmod>
 8011164:	4602      	mov	r2, r0
 8011166:	460b      	mov	r3, r1
 8011168:	4614      	mov	r4, r2
 801116a:	461d      	mov	r5, r3
 801116c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8011170:	1e51      	subs	r1, r2, #1
 8011172:	6739      	str	r1, [r7, #112]	; 0x70
 8011174:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011178:	677b      	str	r3, [r7, #116]	; 0x74
 801117a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801117e:	2200      	movs	r2, #0
 8011180:	66bb      	str	r3, [r7, #104]	; 0x68
 8011182:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011184:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011188:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801118c:	f7ef fe74 	bl	8000e78 <__aeabi_uldivmod>
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 8011194:	4294      	cmp	r4, r2
 8011196:	eb75 0303 	sbcs.w	r3, r5, r3
 801119a:	d33b      	bcc.n	8011214 <f_lseek+0x3da>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801119c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80111a0:	1e51      	subs	r1, r2, #1
 80111a2:	6639      	str	r1, [r7, #96]	; 0x60
 80111a4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80111a8:	667b      	str	r3, [r7, #100]	; 0x64
 80111aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80111ae:	3b01      	subs	r3, #1
 80111b0:	2200      	movs	r2, #0
 80111b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80111b4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80111b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80111ba:	460b      	mov	r3, r1
 80111bc:	43db      	mvns	r3, r3
 80111be:	653b      	str	r3, [r7, #80]	; 0x50
 80111c0:	4613      	mov	r3, r2
 80111c2:	43db      	mvns	r3, r3
 80111c4:	657b      	str	r3, [r7, #84]	; 0x54
 80111c6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80111ca:	4623      	mov	r3, r4
 80111cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80111d0:	4602      	mov	r2, r0
 80111d2:	4013      	ands	r3, r2
 80111d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80111d6:	462b      	mov	r3, r5
 80111d8:	460a      	mov	r2, r1
 80111da:	4013      	ands	r3, r2
 80111dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80111de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80111e6:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 80111ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80111f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80111f6:	1a14      	subs	r4, r2, r0
 80111f8:	60bc      	str	r4, [r7, #8]
 80111fa:	eb63 0301 	sbc.w	r3, r3, r1
 80111fe:	60fb      	str	r3, [r7, #12]
 8011200:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011204:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 8011208:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801120e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011212:	e009      	b.n	8011228 <f_lseek+0x3ee>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011214:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011218:	689b      	ldr	r3, [r3, #8]
 801121a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					fp->obj.sclust = clst;
				}
#endif
				fp->clust = clst;
 801121e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011222:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011226:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 8011228:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801122c:	2b00      	cmp	r3, #0
 801122e:	f000 80a7 	beq.w	8011380 <f_lseek+0x546>
				while (ofs > bcs) {						/* Cluster following loop */
 8011232:	e056      	b.n	80112e2 <f_lseek+0x4a8>
					ofs -= bcs; fp->fptr += bcs;
 8011234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011238:	2200      	movs	r2, #0
 801123a:	643b      	str	r3, [r7, #64]	; 0x40
 801123c:	647a      	str	r2, [r7, #68]	; 0x44
 801123e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011242:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8011246:	4621      	mov	r1, r4
 8011248:	1a51      	subs	r1, r2, r1
 801124a:	6039      	str	r1, [r7, #0]
 801124c:	4629      	mov	r1, r5
 801124e:	eb63 0301 	sbc.w	r3, r3, r1
 8011252:	607b      	str	r3, [r7, #4]
 8011254:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011258:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 801125c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011260:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011264:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8011268:	2000      	movs	r0, #0
 801126a:	63b9      	str	r1, [r7, #56]	; 0x38
 801126c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801126e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8011272:	4621      	mov	r1, r4
 8011274:	1851      	adds	r1, r2, r1
 8011276:	6339      	str	r1, [r7, #48]	; 0x30
 8011278:	4629      	mov	r1, r5
 801127a:	414b      	adcs	r3, r1
 801127c:	637b      	str	r3, [r7, #52]	; 0x34
 801127e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011282:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8011286:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801128a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801128e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011292:	4618      	mov	r0, r3
 8011294:	f7fd fd86 	bl	800eda4 <get_fat>
 8011298:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801129c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80112a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112a4:	d106      	bne.n	80112b4 <f_lseek+0x47a>
 80112a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112aa:	2201      	movs	r2, #1
 80112ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80112b0:	2301      	movs	r3, #1
 80112b2:	e097      	b.n	80113e4 <f_lseek+0x5aa>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80112b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	d906      	bls.n	80112ca <f_lseek+0x490>
 80112bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80112c0:	695a      	ldr	r2, [r3, #20]
 80112c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d306      	bcc.n	80112d8 <f_lseek+0x49e>
 80112ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112ce:	2202      	movs	r2, #2
 80112d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80112d4:	2302      	movs	r3, #2
 80112d6:	e085      	b.n	80113e4 <f_lseek+0x5aa>
					fp->clust = clst;
 80112d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80112dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80112e0:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 80112e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80112e6:	2200      	movs	r2, #0
 80112e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80112ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80112ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80112f0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80112f4:	4621      	mov	r1, r4
 80112f6:	4291      	cmp	r1, r2
 80112f8:	4629      	mov	r1, r5
 80112fa:	eb71 0303 	sbcs.w	r3, r1, r3
 80112fe:	d399      	bcc.n	8011234 <f_lseek+0x3fa>
				}
				fp->fptr += ofs;
 8011300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011304:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011308:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801130c:	1884      	adds	r4, r0, r2
 801130e:	623c      	str	r4, [r7, #32]
 8011310:	eb41 0303 	adc.w	r3, r1, r3
 8011314:	627b      	str	r3, [r7, #36]	; 0x24
 8011316:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801131a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801131e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 8011322:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011326:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801132a:	61bb      	str	r3, [r7, #24]
 801132c:	2300      	movs	r3, #0
 801132e:	61fb      	str	r3, [r7, #28]
 8011330:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011334:	460b      	mov	r3, r1
 8011336:	4313      	orrs	r3, r2
 8011338:	d022      	beq.n	8011380 <f_lseek+0x546>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801133a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801133e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011342:	4618      	mov	r0, r3
 8011344:	f7fd fd0e 	bl	800ed64 <clust2sect>
 8011348:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801134c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011350:	2b00      	cmp	r3, #0
 8011352:	d106      	bne.n	8011362 <f_lseek+0x528>
 8011354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011358:	2202      	movs	r2, #2
 801135a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801135e:	2302      	movs	r3, #2
 8011360:	e040      	b.n	80113e4 <f_lseek+0x5aa>
					nsect += (DWORD)(ofs / SS(fs));
 8011362:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8011366:	f04f 0200 	mov.w	r2, #0
 801136a:	f04f 0300 	mov.w	r3, #0
 801136e:	0a42      	lsrs	r2, r0, #9
 8011370:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8011374:	0a4b      	lsrs	r3, r1, #9
 8011376:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801137a:	4413      	add	r3, r2
 801137c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
			fp->obj.objsize = fp->fptr;
			fp->flag |= FA_MODIFIED;
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011380:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011384:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011388:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801138c:	613b      	str	r3, [r7, #16]
 801138e:	2300      	movs	r3, #0
 8011390:	617b      	str	r3, [r7, #20]
 8011392:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011396:	460b      	mov	r3, r1
 8011398:	4313      	orrs	r3, r2
 801139a:	d021      	beq.n	80113e0 <f_lseek+0x5a6>
 801139c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113a2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d01a      	beq.n	80113e0 <f_lseek+0x5a6>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80113aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80113ae:	7858      	ldrb	r0, [r3, #1]
 80113b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113b4:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80113b8:	2301      	movs	r3, #1
 80113ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80113be:	f7fd faf5 	bl	800e9ac <disk_read>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d006      	beq.n	80113d6 <f_lseek+0x59c>
 80113c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113cc:	2201      	movs	r2, #1
 80113ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80113d2:	2301      	movs	r3, #1
 80113d4:	e006      	b.n	80113e4 <f_lseek+0x5aa>
#endif
			fp->sect = nsect;
 80113d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113da:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80113de:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 80113e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	37d8      	adds	r7, #216	; 0xd8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080113ee <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b086      	sub	sp, #24
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	6078      	str	r0, [r7, #4]
 80113f6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d101      	bne.n	8011402 <f_opendir+0x14>
 80113fe:	2309      	movs	r3, #9
 8011400:	e081      	b.n	8011506 <f_opendir+0x118>

	/* Get logical drive */
	obj = &dp->obj;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011406:	f107 010c 	add.w	r1, r7, #12
 801140a:	463b      	mov	r3, r7
 801140c:	2200      	movs	r2, #0
 801140e:	4618      	mov	r0, r3
 8011410:	f7fe ffb4 	bl	801037c <find_volume>
 8011414:	4603      	mov	r3, r0
 8011416:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011418:	7dfb      	ldrb	r3, [r7, #23]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d16c      	bne.n	80114f8 <f_opendir+0x10a>
		obj->fs = fs;
 801141e:	68fa      	ldr	r2, [r7, #12]
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	4619      	mov	r1, r3
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7fe fe55 	bl	80100d8 <follow_path>
 801142e:	4603      	mov	r3, r0
 8011430:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011432:	7dfb      	ldrb	r3, [r7, #23]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d15a      	bne.n	80114ee <f_opendir+0x100>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801143e:	b25b      	sxtb	r3, r3
 8011440:	2b00      	cmp	r3, #0
 8011442:	db47      	blt.n	80114d4 <f_opendir+0xe6>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	799b      	ldrb	r3, [r3, #6]
 8011448:	f003 0310 	and.w	r3, r3, #16
 801144c:	2b00      	cmp	r3, #0
 801144e:	d03f      	beq.n	80114d0 <f_opendir+0xe2>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	2b04      	cmp	r3, #4
 8011456:	d130      	bne.n	80114ba <f_opendir+0xcc>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	689a      	ldr	r2, [r3, #8]
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011466:	4613      	mov	r3, r2
 8011468:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801146c:	693a      	ldr	r2, [r7, #16]
 801146e:	79d2      	ldrb	r2, [r2, #7]
 8011470:	431a      	orrs	r2, r3
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	691b      	ldr	r3, [r3, #16]
 8011482:	3334      	adds	r3, #52	; 0x34
 8011484:	4618      	mov	r0, r3
 8011486:	f7fd fac9 	bl	800ea1c <ld_dword>
 801148a:	4602      	mov	r2, r0
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	691b      	ldr	r3, [r3, #16]
 8011494:	3338      	adds	r3, #56	; 0x38
 8011496:	4618      	mov	r0, r3
 8011498:	f7fd fae3 	bl	800ea62 <ld_qword>
 801149c:	4602      	mov	r2, r0
 801149e:	460b      	mov	r3, r1
 80114a0:	6939      	ldr	r1, [r7, #16]
 80114a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	691b      	ldr	r3, [r3, #16]
 80114aa:	3321      	adds	r3, #33	; 0x21
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	f003 0302 	and.w	r3, r3, #2
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	71da      	strb	r2, [r3, #7]
 80114b8:	e00c      	b.n	80114d4 <f_opendir+0xe6>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114c0:	4619      	mov	r1, r3
 80114c2:	4610      	mov	r0, r2
 80114c4:	f7fd fecf 	bl	800f266 <ld_clust>
 80114c8:	4602      	mov	r2, r0
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	609a      	str	r2, [r3, #8]
 80114ce:	e001      	b.n	80114d4 <f_opendir+0xe6>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80114d0:	2305      	movs	r3, #5
 80114d2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80114d4:	7dfb      	ldrb	r3, [r7, #23]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d109      	bne.n	80114ee <f_opendir+0x100>
				obj->id = fs->id;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	88da      	ldrh	r2, [r3, #6]
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80114e2:	2100      	movs	r1, #0
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f7fd fdbb 	bl	800f060 <dir_sdi>
 80114ea:	4603      	mov	r3, r0
 80114ec:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80114ee:	7dfb      	ldrb	r3, [r7, #23]
 80114f0:	2b04      	cmp	r3, #4
 80114f2:	d101      	bne.n	80114f8 <f_opendir+0x10a>
 80114f4:	2305      	movs	r3, #5
 80114f6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80114f8:	7dfb      	ldrb	r3, [r7, #23]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d002      	beq.n	8011504 <f_opendir+0x116>
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	2200      	movs	r2, #0
 8011502:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011504:	7dfb      	ldrb	r3, [r7, #23]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3718      	adds	r7, #24
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801150e:	b580      	push	{r7, lr}
 8011510:	b084      	sub	sp, #16
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f107 0208 	add.w	r2, r7, #8
 801151c:	4611      	mov	r1, r2
 801151e:	4618      	mov	r0, r3
 8011520:	f7ff fa0a 	bl	8010938 <validate>
 8011524:	4603      	mov	r3, r0
 8011526:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d102      	bne.n	8011534 <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2200      	movs	r2, #0
 8011532:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8011534:	7bfb      	ldrb	r3, [r7, #15]
}
 8011536:	4618      	mov	r0, r3
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801153e:	b580      	push	{r7, lr}
 8011540:	b084      	sub	sp, #16
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
 8011546:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f107 0208 	add.w	r2, r7, #8
 801154e:	4611      	mov	r1, r2
 8011550:	4618      	mov	r0, r3
 8011552:	f7ff f9f1 	bl	8010938 <validate>
 8011556:	4603      	mov	r3, r0
 8011558:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801155a:	7bfb      	ldrb	r3, [r7, #15]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d126      	bne.n	80115ae <f_readdir+0x70>
		if (!fno) {
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d106      	bne.n	8011574 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011566:	2100      	movs	r1, #0
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f7fd fd79 	bl	800f060 <dir_sdi>
 801156e:	4603      	mov	r3, r0
 8011570:	73fb      	strb	r3, [r7, #15]
 8011572:	e01c      	b.n	80115ae <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011574:	2100      	movs	r1, #0
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f7fe f924 	bl	800f7c4 <dir_read>
 801157c:	4603      	mov	r3, r0
 801157e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011580:	7bfb      	ldrb	r3, [r7, #15]
 8011582:	2b04      	cmp	r3, #4
 8011584:	d101      	bne.n	801158a <f_readdir+0x4c>
 8011586:	2300      	movs	r3, #0
 8011588:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801158a:	7bfb      	ldrb	r3, [r7, #15]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d10e      	bne.n	80115ae <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011590:	6839      	ldr	r1, [r7, #0]
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f7fe fb05 	bl	800fba2 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011598:	2100      	movs	r1, #0
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7fd fde6 	bl	800f16c <dir_next>
 80115a0:	4603      	mov	r3, r0
 80115a2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80115a4:	7bfb      	ldrb	r3, [r7, #15]
 80115a6:	2b04      	cmp	r3, #4
 80115a8:	d101      	bne.n	80115ae <f_readdir+0x70>
 80115aa:	2300      	movs	r3, #0
 80115ac:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80115ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3710      	adds	r7, #16
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80115b8:	b480      	push	{r7}
 80115ba:	b087      	sub	sp, #28
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	4613      	mov	r3, r2
 80115c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80115c6:	2301      	movs	r3, #1
 80115c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80115ca:	2300      	movs	r3, #0
 80115cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80115ce:	4b1f      	ldr	r3, [pc, #124]	; (801164c <FATFS_LinkDriverEx+0x94>)
 80115d0:	7b9b      	ldrb	r3, [r3, #14]
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d831      	bhi.n	801163c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80115d8:	4b1c      	ldr	r3, [pc, #112]	; (801164c <FATFS_LinkDriverEx+0x94>)
 80115da:	7b9b      	ldrb	r3, [r3, #14]
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	461a      	mov	r2, r3
 80115e0:	4b1a      	ldr	r3, [pc, #104]	; (801164c <FATFS_LinkDriverEx+0x94>)
 80115e2:	2100      	movs	r1, #0
 80115e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80115e6:	4b19      	ldr	r3, [pc, #100]	; (801164c <FATFS_LinkDriverEx+0x94>)
 80115e8:	7b9b      	ldrb	r3, [r3, #14]
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	4a17      	ldr	r2, [pc, #92]	; (801164c <FATFS_LinkDriverEx+0x94>)
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	4413      	add	r3, r2
 80115f2:	68fa      	ldr	r2, [r7, #12]
 80115f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80115f6:	4b15      	ldr	r3, [pc, #84]	; (801164c <FATFS_LinkDriverEx+0x94>)
 80115f8:	7b9b      	ldrb	r3, [r3, #14]
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	461a      	mov	r2, r3
 80115fe:	4b13      	ldr	r3, [pc, #76]	; (801164c <FATFS_LinkDriverEx+0x94>)
 8011600:	4413      	add	r3, r2
 8011602:	79fa      	ldrb	r2, [r7, #7]
 8011604:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8011606:	4b11      	ldr	r3, [pc, #68]	; (801164c <FATFS_LinkDriverEx+0x94>)
 8011608:	7b9b      	ldrb	r3, [r3, #14]
 801160a:	b2db      	uxtb	r3, r3
 801160c:	1c5a      	adds	r2, r3, #1
 801160e:	b2d1      	uxtb	r1, r2
 8011610:	4a0e      	ldr	r2, [pc, #56]	; (801164c <FATFS_LinkDriverEx+0x94>)
 8011612:	7391      	strb	r1, [r2, #14]
 8011614:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011616:	7dbb      	ldrb	r3, [r7, #22]
 8011618:	3330      	adds	r3, #48	; 0x30
 801161a:	b2da      	uxtb	r2, r3
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	3301      	adds	r3, #1
 8011624:	223a      	movs	r2, #58	; 0x3a
 8011626:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	3302      	adds	r3, #2
 801162c:	222f      	movs	r2, #47	; 0x2f
 801162e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	3303      	adds	r3, #3
 8011634:	2200      	movs	r2, #0
 8011636:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011638:	2300      	movs	r3, #0
 801163a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801163c:	7dfb      	ldrb	r3, [r7, #23]
}
 801163e:	4618      	mov	r0, r3
 8011640:	371c      	adds	r7, #28
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	200007d0 	.word	0x200007d0

08011650 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801165a:	2200      	movs	r2, #0
 801165c:	6839      	ldr	r1, [r7, #0]
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7ff ffaa 	bl	80115b8 <FATFS_LinkDriverEx>
 8011664:	4603      	mov	r3, r0
}
 8011666:	4618      	mov	r0, r3
 8011668:	3708      	adds	r7, #8
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
	...

08011670 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011670:	b480      	push	{r7}
 8011672:	b085      	sub	sp, #20
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b7f      	cmp	r3, #127	; 0x7f
 801167e:	d802      	bhi.n	8011686 <ff_convert+0x16>
		c = chr;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	60fb      	str	r3, [r7, #12]
 8011684:	e024      	b.n	80116d0 <ff_convert+0x60>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d00b      	beq.n	80116a4 <ff_convert+0x34>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2bff      	cmp	r3, #255	; 0xff
 8011690:	d805      	bhi.n	801169e <ff_convert+0x2e>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	3b80      	subs	r3, #128	; 0x80
 8011696:	4a12      	ldr	r2, [pc, #72]	; (80116e0 <ff_convert+0x70>)
 8011698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801169c:	e000      	b.n	80116a0 <ff_convert+0x30>
 801169e:	2300      	movs	r3, #0
 80116a0:	60fb      	str	r3, [r7, #12]
 80116a2:	e015      	b.n	80116d0 <ff_convert+0x60>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80116a4:	2300      	movs	r3, #0
 80116a6:	60fb      	str	r3, [r7, #12]
 80116a8:	e009      	b.n	80116be <ff_convert+0x4e>
				if (chr == Tbl[c]) break;
 80116aa:	4a0d      	ldr	r2, [pc, #52]	; (80116e0 <ff_convert+0x70>)
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d006      	beq.n	80116c6 <ff_convert+0x56>
			for (c = 0; c < 0x80; c++) {
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	3301      	adds	r3, #1
 80116bc:	60fb      	str	r3, [r7, #12]
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2b7f      	cmp	r3, #127	; 0x7f
 80116c2:	d9f2      	bls.n	80116aa <ff_convert+0x3a>
 80116c4:	e000      	b.n	80116c8 <ff_convert+0x58>
				if (chr == Tbl[c]) break;
 80116c6:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	3380      	adds	r3, #128	; 0x80
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	60fb      	str	r3, [r7, #12]
		}
	}

	return c;
 80116d0:	68fb      	ldr	r3, [r7, #12]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3714      	adds	r7, #20
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop
 80116e0:	08027004 	.word	0x08027004

080116e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b087      	sub	sp, #28
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116f2:	d201      	bcs.n	80116f8 <ff_wtoupper+0x14>
 80116f4:	4b3d      	ldr	r3, [pc, #244]	; (80117ec <ff_wtoupper+0x108>)
 80116f6:	e000      	b.n	80116fa <ff_wtoupper+0x16>
 80116f8:	4b3d      	ldr	r3, [pc, #244]	; (80117f0 <ff_wtoupper+0x10c>)
 80116fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	1d1a      	adds	r2, r3, #4
 8011700:	617a      	str	r2, [r7, #20]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	613b      	str	r3, [r7, #16]
		if (!bc || chr < bc) break;
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d067      	beq.n	80117dc <ff_wtoupper+0xf8>
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	429a      	cmp	r2, r3
 8011712:	d363      	bcc.n	80117dc <ff_wtoupper+0xf8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	1d1a      	adds	r2, r3, #4
 8011718:	617a      	str	r2, [r7, #20]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	60fb      	str	r3, [r7, #12]
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	0a1b      	lsrs	r3, r3, #8
 8011722:	60bb      	str	r3, [r7, #8]
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	b2db      	uxtb	r3, r3
 8011728:	60fb      	str	r3, [r7, #12]
		if (chr < bc + nc) {	/* In the block? */
 801172a:	693a      	ldr	r2, [r7, #16]
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	4413      	add	r3, r2
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	429a      	cmp	r2, r3
 8011734:	d248      	bcs.n	80117c8 <ff_wtoupper+0xe4>
			switch (cmd) {
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	2b08      	cmp	r3, #8
 801173a:	d84e      	bhi.n	80117da <ff_wtoupper+0xf6>
 801173c:	a201      	add	r2, pc, #4	; (adr r2, 8011744 <ff_wtoupper+0x60>)
 801173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011742:	bf00      	nop
 8011744:	08011769 	.word	0x08011769
 8011748:	0801177b 	.word	0x0801177b
 801174c:	0801178d 	.word	0x0801178d
 8011750:	08011795 	.word	0x08011795
 8011754:	0801179d 	.word	0x0801179d
 8011758:	080117a5 	.word	0x080117a5
 801175c:	080117ad 	.word	0x080117ad
 8011760:	080117b5 	.word	0x080117b5
 8011764:	080117bd 	.word	0x080117bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011768:	687a      	ldr	r2, [r7, #4]
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	697a      	ldr	r2, [r7, #20]
 8011772:	4413      	add	r3, r2
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	607b      	str	r3, [r7, #4]
 8011778:	e025      	b.n	80117c6 <ff_wtoupper+0xe2>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	693b      	ldr	r3, [r7, #16]
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	f003 0301 	and.w	r3, r3, #1
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	1ad3      	subs	r3, r2, r3
 8011788:	607b      	str	r3, [r7, #4]
 801178a:	e01c      	b.n	80117c6 <ff_wtoupper+0xe2>
			case 2: chr -= 16; break;				/* Shift -16 */
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	3b10      	subs	r3, #16
 8011790:	607b      	str	r3, [r7, #4]
 8011792:	e018      	b.n	80117c6 <ff_wtoupper+0xe2>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	3b20      	subs	r3, #32
 8011798:	607b      	str	r3, [r7, #4]
 801179a:	e014      	b.n	80117c6 <ff_wtoupper+0xe2>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	3b30      	subs	r3, #48	; 0x30
 80117a0:	607b      	str	r3, [r7, #4]
 80117a2:	e010      	b.n	80117c6 <ff_wtoupper+0xe2>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	3b1a      	subs	r3, #26
 80117a8:	607b      	str	r3, [r7, #4]
 80117aa:	e00c      	b.n	80117c6 <ff_wtoupper+0xe2>
			case 6:	chr += 8; break;				/* Shift +8 */
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	3308      	adds	r3, #8
 80117b0:	607b      	str	r3, [r7, #4]
 80117b2:	e008      	b.n	80117c6 <ff_wtoupper+0xe2>
			case 7: chr -= 80; break;				/* Shift -80 */
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	3b50      	subs	r3, #80	; 0x50
 80117b8:	607b      	str	r3, [r7, #4]
 80117ba:	e004      	b.n	80117c6 <ff_wtoupper+0xe2>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80117c2:	607b      	str	r3, [r7, #4]
 80117c4:	bf00      	nop
			}
			break;
 80117c6:	e008      	b.n	80117da <ff_wtoupper+0xf6>
		}
		if (!cmd) p += nc;
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d196      	bne.n	80116fc <ff_wtoupper+0x18>
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	009b      	lsls	r3, r3, #2
 80117d2:	697a      	ldr	r2, [r7, #20]
 80117d4:	4413      	add	r3, r2
 80117d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80117d8:	e790      	b.n	80116fc <ff_wtoupper+0x18>
			break;
 80117da:	bf00      	nop
	}

	return chr;
 80117dc:	687b      	ldr	r3, [r7, #4]
}
 80117de:	4618      	mov	r0, r3
 80117e0:	371c      	adds	r7, #28
 80117e2:	46bd      	mov	sp, r7
 80117e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e8:	4770      	bx	lr
 80117ea:	bf00      	nop
 80117ec:	08027204 	.word	0x08027204
 80117f0:	080275e8 	.word	0x080275e8

080117f4 <MP3InitDecoder>:
 * Outputs:     none
 *
 * Return:      handle to mp3 decoder instance, 0 if malloc fails
 **************************************************************************************/
HMP3Decoder MP3InitDecoder(void)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
	MP3DecInfo *mp3DecInfo;

	mp3DecInfo = AllocateBuffers();
 80117fa:	f000 ff69 	bl	80126d0 <xmp3fixpt_AllocateBuffers>
 80117fe:	6078      	str	r0, [r7, #4]

	return (HMP3Decoder)mp3DecInfo;
 8011800:	687b      	ldr	r3, [r7, #4]
}
 8011802:	4618      	mov	r0, r3
 8011804:	3708      	adds	r7, #8
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <MP3FindSyncWord>:
 *
 * Return:      offset to first sync word (bytes from start of buf)
 *              -1 if sync not found after searching nBytes
 **************************************************************************************/
int MP3FindSyncWord(unsigned char *buf, int nBytes)
{
 801180a:	b480      	push	{r7}
 801180c:	b085      	sub	sp, #20
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
 8011812:	6039      	str	r1, [r7, #0]
	int i;

	/* find byte-aligned syncword - need 12 (MPEG 1,2) or 11 (MPEG 2.5) matching bits */
	for (i = 0; i < nBytes - 1; i++) {
 8011814:	2300      	movs	r3, #0
 8011816:	60fb      	str	r3, [r7, #12]
 8011818:	e013      	b.n	8011842 <MP3FindSyncWord+0x38>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	4413      	add	r3, r2
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	2bff      	cmp	r3, #255	; 0xff
 8011824:	d10a      	bne.n	801183c <MP3FindSyncWord+0x32>
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	3301      	adds	r3, #1
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	4413      	add	r3, r2
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011834:	2be0      	cmp	r3, #224	; 0xe0
 8011836:	d101      	bne.n	801183c <MP3FindSyncWord+0x32>
			return i;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	e009      	b.n	8011850 <MP3FindSyncWord+0x46>
	for (i = 0; i < nBytes - 1; i++) {
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	3301      	adds	r3, #1
 8011840:	60fb      	str	r3, [r7, #12]
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	3b01      	subs	r3, #1
 8011846:	68fa      	ldr	r2, [r7, #12]
 8011848:	429a      	cmp	r2, r3
 801184a:	dbe6      	blt.n	801181a <MP3FindSyncWord+0x10>
	}
	
	return -1;
 801184c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011850:	4618      	mov	r0, r3
 8011852:	3714      	adds	r7, #20
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <MP3FindFreeSync>:
 *              since free mode requires CBR (see spec) we generally only call
 *                this function once (first frame) then store the result (nSlots)
 *                and just use it from then on
 **************************************************************************************/
static int MP3FindFreeSync(unsigned char *buf, unsigned char firstFH[4], int nBytes)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b086      	sub	sp, #24
 8011860:	af00      	add	r7, sp, #0
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
	int offset = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	613b      	str	r3, [r7, #16]
	unsigned char *bufPtr = buf;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	617b      	str	r3, [r7, #20]
	 *  - run out of nBytes (FindMP3SyncWord() returns -1)
	 *  - find the next valid frame header (sync word, version, layer, CRC flag, bitrate, and sample rate
	 *      in next header must match current header)
	 */
	while (1) {
		offset = MP3FindSyncWord(bufPtr, nBytes);
 8011870:	6879      	ldr	r1, [r7, #4]
 8011872:	6978      	ldr	r0, [r7, #20]
 8011874:	f7ff ffc9 	bl	801180a <MP3FindSyncWord>
 8011878:	6138      	str	r0, [r7, #16]
		bufPtr += offset;
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	697a      	ldr	r2, [r7, #20]
 801187e:	4413      	add	r3, r2
 8011880:	617b      	str	r3, [r7, #20]
		if (offset < 0) {
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	2b00      	cmp	r3, #0
 8011886:	da02      	bge.n	801188e <MP3FindFreeSync+0x32>
			return -1;
 8011888:	f04f 33ff 	mov.w	r3, #4294967295
 801188c:	e032      	b.n	80118f4 <MP3FindFreeSync+0x98>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	781a      	ldrb	r2, [r3, #0]
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	781b      	ldrb	r3, [r3, #0]
 8011896:	429a      	cmp	r2, r3
 8011898:	d123      	bne.n	80118e2 <MP3FindFreeSync+0x86>
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	3301      	adds	r3, #1
 801189e:	781a      	ldrb	r2, [r3, #0]
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	3301      	adds	r3, #1
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d11b      	bne.n	80118e2 <MP3FindFreeSync+0x86>
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	3302      	adds	r3, #2
 80118ae:	781a      	ldrb	r2, [r3, #0]
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	3302      	adds	r3, #2
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	4053      	eors	r3, r2
 80118b8:	b2db      	uxtb	r3, r3
 80118ba:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d10f      	bne.n	80118e2 <MP3FindFreeSync+0x86>
			/* want to return number of bytes per frame, NOT counting the padding byte, so subtract one if padFlag == 1 */
			if ((firstFH[2] >> 1) & 0x01)
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	3302      	adds	r3, #2
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	085b      	lsrs	r3, r3, #1
 80118ca:	b2db      	uxtb	r3, r3
 80118cc:	f003 0301 	and.w	r3, r3, #1
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d002      	beq.n	80118da <MP3FindFreeSync+0x7e>
				bufPtr--;
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	3b01      	subs	r3, #1
 80118d8:	617b      	str	r3, [r7, #20]
			return bufPtr - buf;
 80118da:	697a      	ldr	r2, [r7, #20]
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	1ad3      	subs	r3, r2, r3
 80118e0:	e008      	b.n	80118f4 <MP3FindFreeSync+0x98>
		}
		bufPtr += 3;
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	3303      	adds	r3, #3
 80118e6:	617b      	str	r3, [r7, #20]
		nBytes -= (offset + 3);
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	3303      	adds	r3, #3
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	607b      	str	r3, [r7, #4]
		offset = MP3FindSyncWord(bufPtr, nBytes);
 80118f2:	e7bd      	b.n	8011870 <MP3FindFreeSync+0x14>
	};

	return -1;
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3718      	adds	r7, #24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <MP3GetLastFrameInfo>:
 * Return:      none
 *
 * Notes:       call this right after calling MP3Decode
 **************************************************************************************/
void MP3GetLastFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo)
{
 80118fc:	b490      	push	{r4, r7}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	6039      	str	r1, [r7, #0]
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	60fb      	str	r3, [r7, #12]

	if (!mp3DecInfo || mp3DecInfo->layer != 3) {
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d004      	beq.n	801191a <MP3GetLastFrameInfo+0x1e>
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8011916:	2b03      	cmp	r3, #3
 8011918:	d015      	beq.n	8011946 <MP3GetLastFrameInfo+0x4a>
		mp3FrameInfo->bitrate = 0;
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	2200      	movs	r2, #0
 801191e:	601a      	str	r2, [r3, #0]
		mp3FrameInfo->nChans = 0;
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	2200      	movs	r2, #0
 8011924:	605a      	str	r2, [r3, #4]
		mp3FrameInfo->samprate = 0;
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	2200      	movs	r2, #0
 801192a:	609a      	str	r2, [r3, #8]
		mp3FrameInfo->bitsPerSample = 0;
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	2200      	movs	r2, #0
 8011930:	60da      	str	r2, [r3, #12]
		mp3FrameInfo->outputSamps = 0;
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	2200      	movs	r2, #0
 8011936:	611a      	str	r2, [r3, #16]
		mp3FrameInfo->layer = 0;
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	2200      	movs	r2, #0
 801193c:	615a      	str	r2, [r3, #20]
		mp3FrameInfo->version = 0;
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	2200      	movs	r2, #0
 8011942:	619a      	str	r2, [r3, #24]
 8011944:	e033      	b.n	80119ae <MP3GetLastFrameInfo+0xb2>
	} else {
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f8d3 27b8 	ldr.w	r2, [r3, #1976]	; 0x7b8
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	601a      	str	r2, [r3, #0]
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	605a      	str	r2, [r3, #4]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f8d3 27c0 	ldr.w	r2, [r3, #1984]	; 0x7c0
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	609a      	str	r2, [r3, #8]
		mp3FrameInfo->bitsPerSample = 16;
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	2210      	movs	r2, #16
 8011968:	60da      	str	r2, [r3, #12]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 8011976:	461c      	mov	r4, r3
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 801197e:	1e59      	subs	r1, r3, #1
 8011980:	480d      	ldr	r0, [pc, #52]	; (80119b8 <MP3GetLastFrameInfo+0xbc>)
 8011982:	4623      	mov	r3, r4
 8011984:	005b      	lsls	r3, r3, #1
 8011986:	4423      	add	r3, r4
 8011988:	440b      	add	r3, r1
 801198a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 801198e:	fb03 f202 	mul.w	r2, r3, r2
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	611a      	str	r2, [r3, #16]
		mp3FrameInfo->layer = mp3DecInfo->layer;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	; 0x7d0
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	615a      	str	r2, [r3, #20]
		mp3FrameInfo->version = mp3DecInfo->version;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 80119a6:	461a      	mov	r2, r3
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	619a      	str	r2, [r3, #24]
	}
}
 80119ac:	bf00      	nop
 80119ae:	bf00      	nop
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bc90      	pop	{r4, r7}
 80119b6:	4770      	bx	lr
 80119b8:	08027894 	.word	0x08027894

080119bc <MP3ClearBadFrame>:
 * Outputs:     zeroed out pcm buffer
 *
 * Return:      none
 **************************************************************************************/
static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, short *outbuf)
{
 80119bc:	b480      	push	{r7}
 80119be:	b085      	sub	sp, #20
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
	int i;

	if (!mp3DecInfo)
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d01c      	beq.n	8011a06 <MP3ClearBadFrame+0x4a>
		return;

	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80119cc:	2300      	movs	r3, #0
 80119ce:	60fb      	str	r3, [r7, #12]
 80119d0:	e008      	b.n	80119e4 <MP3ClearBadFrame+0x28>
		outbuf[i] = 0;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	005b      	lsls	r3, r3, #1
 80119d6:	683a      	ldr	r2, [r7, #0]
 80119d8:	4413      	add	r3, r2
 80119da:	2200      	movs	r2, #0
 80119dc:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	3301      	adds	r3, #1
 80119e2:	60fb      	str	r3, [r7, #12]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	f8d2 27c8 	ldr.w	r2, [r2, #1992]	; 0x7c8
 80119f0:	fb02 f303 	mul.w	r3, r2, r3
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	f8d2 27bc 	ldr.w	r2, [r2, #1980]	; 0x7bc
 80119fa:	fb02 f303 	mul.w	r3, r2, r3
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	dbe6      	blt.n	80119d2 <MP3ClearBadFrame+0x16>
 8011a04:	e000      	b.n	8011a08 <MP3ClearBadFrame+0x4c>
		return;
 8011a06:	bf00      	nop
}
 8011a08:	3714      	adds	r7, #20
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr

08011a12 <MP3Decode>:
 *
 * Notes:       switching useSize on and off between frames in the same stream 
 *                is not supported (bit reservoir is not maintained if useSize on)
 **************************************************************************************/
int MP3Decode(HMP3Decoder hMP3Decoder, unsigned char **inbuf, int *bytesLeft, short *outbuf, int useSize)
{
 8011a12:	b590      	push	{r4, r7, lr}
 8011a14:	b095      	sub	sp, #84	; 0x54
 8011a16:	af02      	add	r7, sp, #8
 8011a18:	60f8      	str	r0, [r7, #12]
 8011a1a:	60b9      	str	r1, [r7, #8]
 8011a1c:	607a      	str	r2, [r7, #4]
 8011a1e:	603b      	str	r3, [r7, #0]
	int offset, bitOffset, mainBits, gr, ch, fhBytes, siBytes, freeFrameBytes;
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	637b      	str	r3, [r7, #52]	; 0x34
//mw	ULONG32 ulTime;
//mw	StartYield(&ulTime); 
	if (!mp3DecInfo)
 8011a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d102      	bne.n	8011a30 <MP3Decode+0x1e>
		return ERR_MP3_NULL_POINTER;
 8011a2a:	f06f 0304 	mvn.w	r3, #4
 8011a2e:	e204      	b.n	8011e3a <MP3Decode+0x428>

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	4619      	mov	r1, r3
 8011a36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011a38:	f000 fb0e 	bl	8012058 <xmp3fixpt_UnpackFrameHeader>
 8011a3c:	6338      	str	r0, [r7, #48]	; 0x30
	if (fhBytes < 0)	
 8011a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	da02      	bge.n	8011a4a <MP3Decode+0x38>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 8011a44:	f06f 0305 	mvn.w	r3, #5
 8011a48:	e1f7      	b.n	8011e3a <MP3Decode+0x428>
	*inbuf += fhBytes;
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a50:	441a      	add	r2, r3
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	601a      	str	r2, [r3, #0]
	
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011a5e:	f000 fc7d 	bl	801235c <xmp3fixpt_UnpackSideInfo>
 8011a62:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (siBytes < 0) {
 8011a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	da06      	bge.n	8011a78 <MP3Decode+0x66>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011a6a:	6839      	ldr	r1, [r7, #0]
 8011a6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011a6e:	f7ff ffa5 	bl	80119bc <MP3ClearBadFrame>
		return ERR_MP3_INVALID_SIDEINFO;
 8011a72:	f06f 0306 	mvn.w	r3, #6
 8011a76:	e1e0      	b.n	8011e3a <MP3Decode+0x428>
	}
	*inbuf += siBytes;
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	681a      	ldr	r2, [r3, #0]
 8011a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7e:	441a      	add	r2, r3
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	601a      	str	r2, [r3, #0]
	*bytesLeft -= (fhBytes + siBytes);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8c:	440b      	add	r3, r1
 8011a8e:	1ad2      	subs	r2, r2, r3
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	601a      	str	r2, [r3, #0]
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 8011a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a96:	f8d3 37b8 	ldr.w	r3, [r3, #1976]	; 0x7b8
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d004      	beq.n	8011aa8 <MP3Decode+0x96>
 8011a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aa0:	f8d3 37b0 	ldr.w	r3, [r3, #1968]	; 0x7b0
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d04d      	beq.n	8011b44 <MP3Decode+0x132>
		if (!mp3DecInfo->freeBitrateFlag) {
 8011aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aaa:	f8d3 37b0 	ldr.w	r3, [r3, #1968]	; 0x7b0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d13d      	bne.n	8011b2e <MP3Decode+0x11c>
			/* first time through, need to scan for next sync word and figure out frame size */
			mp3DecInfo->freeBitrateFlag = 1;
 8011ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ab4:	2201      	movs	r2, #1
 8011ab6:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	6818      	ldr	r0, [r3, #0]
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac4:	4259      	negs	r1, r3
 8011ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac8:	1acb      	subs	r3, r1, r3
 8011aca:	18d1      	adds	r1, r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	f7ff fec3 	bl	801185c <MP3FindFreeSync>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ada:	f8c3 27b4 	str.w	r2, [r3, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 8011ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ae0:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	; 0x7b4
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	da06      	bge.n	8011af6 <MP3Decode+0xe4>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011ae8:	6839      	ldr	r1, [r7, #0]
 8011aea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011aec:	f7ff ff66 	bl	80119bc <MP3ClearBadFrame>
				return ERR_MP3_FREE_BITRATE_SYNC;
 8011af0:	f06f 0302 	mvn.w	r3, #2
 8011af4:	e1a1      	b.n	8011e3a <MP3Decode+0x428>
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 8011af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011af8:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
 8011afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afe:	4413      	add	r3, r2
 8011b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b02:	4413      	add	r3, r2
 8011b04:	62bb      	str	r3, [r7, #40]	; 0x28
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 8011b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b08:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8011b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b0e:	fb02 f303 	mul.w	r3, r2, r3
 8011b12:	00da      	lsls	r2, r3, #3
 8011b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b16:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8011b1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011b1c:	f8d1 17c8 	ldr.w	r1, [r1, #1992]	; 0x7c8
 8011b20:	fb01 f303 	mul.w	r3, r1, r3
 8011b24:	fb92 f2f3 	sdiv	r2, r2, r3
 8011b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b2a:	f8c3 27b8 	str.w	r2, [r3, #1976]	; 0x7b8
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 8011b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b30:	f8d3 47b4 	ldr.w	r4, [r3, #1972]	; 0x7b4
 8011b34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011b36:	f000 fa71 	bl	801201c <xmp3fixpt_CheckPadBit>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	18e2      	adds	r2, r4, r3
 8011b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b40:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
	 *  - calling function assembles "self-contained" MP3 frames by shifting any main_data 
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
 8011b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d02f      	beq.n	8011baa <MP3Decode+0x198>
		mp3DecInfo->nSlots = *bytesLeft;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b50:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 8011b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b56:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d104      	bne.n	8011b68 <MP3Decode+0x156>
 8011b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b60:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	dc06      	bgt.n	8011b76 <MP3Decode+0x164>
			/* error - non self-contained frame, or missing frame (size <= 0), could do loss concealment here */
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011b68:	6839      	ldr	r1, [r7, #0]
 8011b6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011b6c:	f7ff ff26 	bl	80119bc <MP3ClearBadFrame>
			return ERR_MP3_INVALID_FRAMEHEADER;
 8011b70:	f06f 0305 	mvn.w	r3, #5
 8011b74:	e161      	b.n	8011e3a <MP3Decode+0x428>
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 8011b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b78:	f8d3 27cc 	ldr.w	r2, [r3, #1996]	; 0x7cc
 8011b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7e:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
		mainPtr = *inbuf;
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	63bb      	str	r3, [r7, #56]	; 0x38
		*inbuf += mp3DecInfo->nSlots;
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b8e:	f8d2 27cc 	ldr.w	r2, [r2, #1996]	; 0x7cc
 8011b92:	441a      	add	r2, r3
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	601a      	str	r2, [r3, #0]
		*bytesLeft -= (mp3DecInfo->nSlots);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b9e:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8011ba2:	1ad2      	subs	r2, r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	601a      	str	r2, [r3, #0]
 8011ba8:	e085      	b.n	8011cb6 <MP3Decode+0x2a4>
	} else {
		/* out of data - assume last or truncated frame */
		if (mp3DecInfo->nSlots > *bytesLeft) {
 8011baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bac:	f8d3 27cc 	ldr.w	r2, [r3, #1996]	; 0x7cc
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	dd06      	ble.n	8011bc6 <MP3Decode+0x1b4>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011bb8:	6839      	ldr	r1, [r7, #0]
 8011bba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011bbc:	f7ff fefe 	bl	80119bc <MP3ClearBadFrame>
			return ERR_MP3_INDATA_UNDERFLOW;	
 8011bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc4:	e139      	b.n	8011e3a <MP3Decode+0x428>
		}
		/* fill main data buffer with enough new data for this frame */
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 8011bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bc8:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	; 0x7dc
 8011bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bce:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	db40      	blt.n	8011c58 <MP3Decode+0x246>
			/* adequate "old" main data available (i.e. bit reservoir) */
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 8011bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd8:	f103 001c 	add.w	r0, r3, #28
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bde:	f103 021c 	add.w	r2, r3, #28
 8011be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011be4:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 8011be8:	4619      	mov	r1, r3
 8011bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bec:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8011bf0:	1acb      	subs	r3, r1, r3
 8011bf2:	18d1      	adds	r1, r2, r3
 8011bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bf6:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	f014 f9a2 	bl	8025f44 <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 8011c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c02:	331c      	adds	r3, #28
 8011c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c06:	f8d2 27d8 	ldr.w	r2, [r2, #2008]	; 0x7d8
 8011c0a:	1898      	adds	r0, r3, r2
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	6819      	ldr	r1, [r3, #0]
 8011c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c12:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8011c16:	461a      	mov	r2, r3
 8011c18:	f014 f986 	bl	8025f28 <memcpy>

			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 8011c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1e:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	; 0x7d8
 8011c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c24:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8011c28:	441a      	add	r2, r3
 8011c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c2c:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c36:	f8d2 27cc 	ldr.w	r2, [r2, #1996]	; 0x7cc
 8011c3a:	441a      	add	r2, r3
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	601a      	str	r2, [r3, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c46:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8011c4a:	1ad2      	subs	r2, r2, r3
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	601a      	str	r2, [r3, #0]
			mainPtr = mp3DecInfo->mainBuf;
 8011c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c52:	331c      	adds	r3, #28
 8011c54:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c56:	e02e      	b.n	8011cb6 <MP3Decode+0x2a4>
		} else {
			/* not enough data in bit reservoir from previous frames (perhaps starting in middle of file) */
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 8011c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c5a:	331c      	adds	r3, #28
 8011c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c5e:	f8d2 27dc 	ldr.w	r2, [r2, #2012]	; 0x7dc
 8011c62:	1898      	adds	r0, r3, r2
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	6819      	ldr	r1, [r3, #0]
 8011c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c6a:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8011c6e:	461a      	mov	r2, r3
 8011c70:	f014 f95a 	bl	8025f28 <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 8011c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c76:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	; 0x7dc
 8011c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c7c:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8011c80:	441a      	add	r2, r3
 8011c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c84:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c8e:	f8d2 27cc 	ldr.w	r2, [r2, #1996]	; 0x7cc
 8011c92:	441a      	add	r2, r3
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	601a      	str	r2, [r3, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c9e:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8011ca2:	1ad2      	subs	r2, r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	601a      	str	r2, [r3, #0]
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011ca8:	6839      	ldr	r1, [r7, #0]
 8011caa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011cac:	f7ff fe86 	bl	80119bc <MP3ClearBadFrame>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 8011cb0:	f06f 0301 	mvn.w	r3, #1
 8011cb4:	e0c1      	b.n	8011e3a <MP3Decode+0x428>
		}
	}
	bitOffset = 0;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	617b      	str	r3, [r7, #20]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 8011cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cbc:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 8011cc0:	00db      	lsls	r3, r3, #3
 8011cc2:	647b      	str	r3, [r7, #68]	; 0x44

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8011cc8:	e0af      	b.n	8011e2a <MP3Decode+0x418>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8011cca:	2300      	movs	r3, #0
 8011ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011cce:	e05e      	b.n	8011d8e <MP3Decode+0x37c>
			/* unpack scale factors and compute size of scale factor block */
			prevBitOffset = bitOffset;
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	627b      	str	r3, [r7, #36]	; 0x24
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 8011cd4:	f107 0214 	add.w	r2, r7, #20
 8011cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cda:	9301      	str	r3, [sp, #4]
 8011cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ce4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011ce6:	f006 fbef 	bl	80184c8 <xmp3fixpt_UnpackScaleFactors>
 8011cea:	6238      	str	r0, [r7, #32]

			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 8011cec:	6a3b      	ldr	r3, [r7, #32]
 8011cee:	00da      	lsls	r2, r3, #3
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf2:	1ad2      	subs	r2, r2, r3
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	61fb      	str	r3, [r7, #28]
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 8011cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011cfe:	0051      	lsls	r1, r2, #1
 8011d00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011d02:	440a      	add	r2, r1
 8011d04:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 8011d08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	1ad3      	subs	r3, r2, r3
 8011d10:	61bb      	str	r3, [r7, #24]
			mainPtr += offset;
 8011d12:	6a3b      	ldr	r3, [r7, #32]
 8011d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d16:	4413      	add	r3, r2
 8011d18:	63bb      	str	r3, [r7, #56]	; 0x38
			mainBits -= sfBlockBits;
 8011d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	1ad3      	subs	r3, r2, r3
 8011d20:	647b      	str	r3, [r7, #68]	; 0x44

			if (offset < 0 || mainBits < huffBlockBits) {
 8011d22:	6a3b      	ldr	r3, [r7, #32]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	db03      	blt.n	8011d30 <MP3Decode+0x31e>
 8011d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	da06      	bge.n	8011d3e <MP3Decode+0x32c>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011d30:	6839      	ldr	r1, [r7, #0]
 8011d32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d34:	f7ff fe42 	bl	80119bc <MP3ClearBadFrame>
				return ERR_MP3_INVALID_SCALEFACT;
 8011d38:	f06f 0307 	mvn.w	r3, #7
 8011d3c:	e07d      	b.n	8011e3a <MP3Decode+0x428>
			}

			/* decode Huffman code words */
			prevBitOffset = bitOffset;
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	627b      	str	r3, [r7, #36]	; 0x24
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 8011d42:	f107 0214 	add.w	r2, r7, #20
 8011d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d48:	9301      	str	r3, [sp, #4]
 8011d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	69bb      	ldr	r3, [r7, #24]
 8011d50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d54:	f002 fe08 	bl	8014968 <xmp3fixpt_DecodeHuffman>
 8011d58:	6238      	str	r0, [r7, #32]
			if (offset < 0) {
 8011d5a:	6a3b      	ldr	r3, [r7, #32]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	da06      	bge.n	8011d6e <MP3Decode+0x35c>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011d60:	6839      	ldr	r1, [r7, #0]
 8011d62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d64:	f7ff fe2a 	bl	80119bc <MP3ClearBadFrame>
				return ERR_MP3_INVALID_HUFFCODES;
 8011d68:	f06f 0308 	mvn.w	r3, #8
 8011d6c:	e065      	b.n	8011e3a <MP3Decode+0x428>
			}

			mainPtr += offset;
 8011d6e:	6a3b      	ldr	r3, [r7, #32]
 8011d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d72:	4413      	add	r3, r2
 8011d74:	63bb      	str	r3, [r7, #56]	; 0x38
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 8011d76:	6a3b      	ldr	r3, [r7, #32]
 8011d78:	00da      	lsls	r2, r3, #3
 8011d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7c:	1ad2      	subs	r2, r2, r3
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	4413      	add	r3, r2
 8011d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	647b      	str	r3, [r7, #68]	; 0x44
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8011d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d90:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8011d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011d96:	429a      	cmp	r2, r3
 8011d98:	db9a      	blt.n	8011cd0 <MP3Decode+0x2be>
		}
//mw		YieldIfRequired(&ulTime);
		/* dequantize coefficients, decode stereo, reorder short blocks */
		if (Dequantize(mp3DecInfo, gr) < 0) {
 8011d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011d9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d9e:	f001 fce5 	bl	801376c <xmp3fixpt_Dequantize>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	da06      	bge.n	8011db6 <MP3Decode+0x3a4>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011dac:	f7ff fe06 	bl	80119bc <MP3ClearBadFrame>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 8011db0:	f06f 0309 	mvn.w	r3, #9
 8011db4:	e041      	b.n	8011e3a <MP3Decode+0x428>
		}

		/* alias reduction, inverse MDCT, overlap-add, frequency inversion */
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8011db6:	2300      	movs	r3, #0
 8011db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dba:	e011      	b.n	8011de0 <MP3Decode+0x3ce>
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 8011dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011dbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011dc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011dc2:	f004 fbaf 	bl	8016524 <xmp3fixpt_IMDCT>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	da06      	bge.n	8011dda <MP3Decode+0x3c8>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011dcc:	6839      	ldr	r1, [r7, #0]
 8011dce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011dd0:	f7ff fdf4 	bl	80119bc <MP3ClearBadFrame>
				return ERR_MP3_INVALID_IMDCT;			
 8011dd4:	f06f 030a 	mvn.w	r3, #10
 8011dd8:	e02f      	b.n	8011e3a <MP3Decode+0x428>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8011dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ddc:	3301      	adds	r3, #1
 8011dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011de2:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8011de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011de8:	429a      	cmp	r2, r3
 8011dea:	dbe7      	blt.n	8011dbc <MP3Decode+0x3aa>
			}

		/* subband transform - if stereo, interleaves pcm LRLRLR */
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 8011dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dee:	f8d3 37c8 	ldr.w	r3, [r3, #1992]	; 0x7c8
 8011df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011df4:	fb02 f303 	mul.w	r3, r2, r3
 8011df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011dfa:	f8d2 27bc 	ldr.w	r2, [r2, #1980]	; 0x7bc
 8011dfe:	fb02 f303 	mul.w	r3, r2, r3
 8011e02:	005b      	lsls	r3, r3, #1
 8011e04:	683a      	ldr	r2, [r7, #0]
 8011e06:	4413      	add	r3, r2
 8011e08:	4619      	mov	r1, r3
 8011e0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011e0c:	f007 f934 	bl	8019078 <xmp3fixpt_Subband>
 8011e10:	4603      	mov	r3, r0
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	da06      	bge.n	8011e24 <MP3Decode+0x412>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8011e16:	6839      	ldr	r1, [r7, #0]
 8011e18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011e1a:	f7ff fdcf 	bl	80119bc <MP3ClearBadFrame>
			return ERR_MP3_INVALID_SUBBAND;			
 8011e1e:	f06f 030b 	mvn.w	r3, #11
 8011e22:	e00a      	b.n	8011e3a <MP3Decode+0x428>
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 8011e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e26:	3301      	adds	r3, #1
 8011e28:	643b      	str	r3, [r7, #64]	; 0x40
 8011e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e2c:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8011e30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e32:	429a      	cmp	r2, r3
 8011e34:	f6ff af49 	blt.w	8011cca <MP3Decode+0x2b8>
		}
	}
	return ERR_MP3_NONE;
 8011e38:	2300      	movs	r3, #0
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	374c      	adds	r7, #76	; 0x4c
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd90      	pop	{r4, r7, pc}

08011e42 <xmp3fixpt_SetBitstreamPointer>:
 * Outputs:     filled bitstream info struct
 *
 * Return:      none
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
 8011e42:	b480      	push	{r7}
 8011e44:	b085      	sub	sp, #20
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	60f8      	str	r0, [r7, #12]
 8011e4a:	60b9      	str	r1, [r7, #8]
 8011e4c:	607a      	str	r2, [r7, #4]
	/* init bitstream */
	bsi->bytePtr = buf;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	601a      	str	r2, [r3, #0]
	bsi->iCache = 0;		/* 4-byte unsigned int */
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2200      	movs	r2, #0
 8011e58:	605a      	str	r2, [r3, #4]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	609a      	str	r2, [r3, #8]
	bsi->nBytes = nBytes;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	68ba      	ldr	r2, [r7, #8]
 8011e64:	60da      	str	r2, [r3, #12]
}
 8011e66:	bf00      	nop
 8011e68:	3714      	adds	r7, #20
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr

08011e72 <RefillBitstreamCache>:
 *
 * TODO:        optimize for ARM
 *              possibly add little/big-endian modes for doing 32-bit loads
 **************************************************************************************/
static __inline void RefillBitstreamCache(BitStreamInfo *bsi)
{
 8011e72:	b480      	push	{r7}
 8011e74:	b085      	sub	sp, #20
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
	int nBytes = bsi->nBytes;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	60fb      	str	r3, [r7, #12]

	/* optimize for common case, independent of machine endian-ness */
	if (nBytes >= 4) {
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2b03      	cmp	r3, #3
 8011e84:	dd35      	ble.n	8011ef2 <RefillBitstreamCache+0x80>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	1c59      	adds	r1, r3, #1
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	6011      	str	r1, [r2, #0]
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	061b      	lsls	r3, r3, #24
 8011e94:	461a      	mov	r2, r3
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	1c59      	adds	r1, r3, #1
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	6011      	str	r1, [r2, #0]
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	041a      	lsls	r2, r3, #16
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	431a      	orrs	r2, r3
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	1c59      	adds	r1, r3, #1
 8011eb8:	687a      	ldr	r2, [r7, #4]
 8011eba:	6011      	str	r1, [r2, #0]
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	021a      	lsls	r2, r3, #8
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	431a      	orrs	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	1c59      	adds	r1, r3, #1
 8011ed0:	687a      	ldr	r2, [r7, #4]
 8011ed2:	6011      	str	r1, [r2, #0]
 8011ed4:	781a      	ldrb	r2, [r3, #0]
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	685b      	ldr	r3, [r3, #4]
 8011eda:	431a      	orrs	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 32;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2220      	movs	r2, #32
 8011ee4:	609a      	str	r2, [r3, #8]
		bsi->nBytes -= 4;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	68db      	ldr	r3, [r3, #12]
 8011eea:	1f1a      	subs	r2, r3, #4
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	60da      	str	r2, [r3, #12]
		}
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
		bsi->cachedBits = 8*bsi->nBytes;
		bsi->nBytes = 0;
	}
}
 8011ef0:	e02a      	b.n	8011f48 <RefillBitstreamCache+0xd6>
		bsi->iCache = 0;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	605a      	str	r2, [r3, #4]
		while (nBytes--) {
 8011ef8:	e00f      	b.n	8011f1a <RefillBitstreamCache+0xa8>
			bsi->iCache |= (*bsi->bytePtr++);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	1c59      	adds	r1, r3, #1
 8011f00:	687a      	ldr	r2, [r7, #4]
 8011f02:	6011      	str	r1, [r2, #0]
 8011f04:	781a      	ldrb	r2, [r3, #0]
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	431a      	orrs	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	605a      	str	r2, [r3, #4]
			bsi->iCache <<= 8;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	021a      	lsls	r2, r3, #8
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	605a      	str	r2, [r3, #4]
		while (nBytes--) {
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	1e5a      	subs	r2, r3, #1
 8011f1e:	60fa      	str	r2, [r7, #12]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d1ea      	bne.n	8011efa <RefillBitstreamCache+0x88>
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	685a      	ldr	r2, [r3, #4]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	f1c3 0303 	rsb	r3, r3, #3
 8011f30:	00db      	lsls	r3, r3, #3
 8011f32:	409a      	lsls	r2, r3
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 8*bsi->nBytes;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	00da      	lsls	r2, r3, #3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	609a      	str	r2, [r3, #8]
		bsi->nBytes = 0;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2200      	movs	r2, #0
 8011f46:	60da      	str	r2, [r3, #12]
}
 8011f48:	bf00      	nop
 8011f4a:	3714      	adds	r7, #20
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f52:	4770      	bx	lr

08011f54 <xmp3fixpt_GetBits>:
 *              if nBits = 0, returns 0 (useful for scalefactor unpacking)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6039      	str	r1, [r7, #0]
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	f003 031f 	and.w	r3, r3, #31
 8011f64:	603b      	str	r3, [r7, #0]
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	685a      	ldr	r2, [r3, #4]
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	f1c3 031f 	rsb	r3, r3, #31
 8011f70:	fa22 f303 	lsr.w	r3, r2, r3
 8011f74:	60fb      	str	r3, [r7, #12]
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	085b      	lsrs	r3, r3, #1
 8011f7a:	60fb      	str	r3, [r7, #12]
	bsi->iCache <<= nBits;					/* left-justify cache */
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	685a      	ldr	r2, [r3, #4]
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	409a      	lsls	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	605a      	str	r2, [r3, #4]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	689a      	ldr	r2, [r3, #8]
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	1ad2      	subs	r2, r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	609a      	str	r2, [r3, #8]

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	689b      	ldr	r3, [r3, #8]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	da1e      	bge.n	8011fda <xmp3fixpt_GetBits+0x86>
		lowBits = -bsi->cachedBits;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	689b      	ldr	r3, [r3, #8]
 8011fa0:	425b      	negs	r3, r3
 8011fa2:	60bb      	str	r3, [r7, #8]
		RefillBitstreamCache(bsi);
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f7ff ff64 	bl	8011e72 <RefillBitstreamCache>
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685a      	ldr	r2, [r3, #4]
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	f1c3 0320 	rsb	r3, r3, #32
 8011fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8011fb8:	68fa      	ldr	r2, [r7, #12]
 8011fba:	4313      	orrs	r3, r2
 8011fbc:	60fb      	str	r3, [r7, #12]
	
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	689b      	ldr	r3, [r3, #8]
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	1ad3      	subs	r3, r2, r3
 8011fc8:	461a      	mov	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	609a      	str	r2, [r3, #8]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	685a      	ldr	r2, [r3, #4]
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	409a      	lsls	r2, r3
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	605a      	str	r2, [r3, #4]
	}

	return data;
 8011fda:	68fb      	ldr	r3, [r7, #12]
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3710      	adds	r7, #16
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <xmp3fixpt_CalcBitsUsed>:
 * Outputs:     none
 *
 * Return:      number of bits read from bitstream, as offset from startBuf:startOffset
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b087      	sub	sp, #28
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	1ad3      	subs	r3, r2, r3
 8011ff8:	00db      	lsls	r3, r3, #3
 8011ffa:	617b      	str	r3, [r7, #20]
	bitsUsed -= bsi->cachedBits;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	689b      	ldr	r3, [r3, #8]
 8012000:	697a      	ldr	r2, [r7, #20]
 8012002:	1ad3      	subs	r3, r2, r3
 8012004:	617b      	str	r3, [r7, #20]
	bitsUsed -= startOffset;
 8012006:	697a      	ldr	r2, [r7, #20]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	617b      	str	r3, [r7, #20]

	return bitsUsed;
 801200e:	697b      	ldr	r3, [r7, #20]
}
 8012010:	4618      	mov	r0, r3
 8012012:	371c      	adds	r7, #28
 8012014:	46bd      	mov	sp, r7
 8012016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201a:	4770      	bx	lr

0801201c <xmp3fixpt_CheckPadBit>:
 * Outputs:     none
 *
 * Return:      1 if pad bit is set, 0 if not, -1 if null input pointer
 **************************************************************************************/
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
 801201c:	b480      	push	{r7}
 801201e:	b085      	sub	sp, #20
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d003      	beq.n	8012032 <xmp3fixpt_CheckPadBit+0x16>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d102      	bne.n	8012038 <xmp3fixpt_CheckPadBit+0x1c>
		return -1;
 8012032:	f04f 33ff 	mov.w	r3, #4294967295
 8012036:	e009      	b.n	801204c <xmp3fixpt_CheckPadBit+0x30>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	60fb      	str	r3, [r7, #12]

	return (fh->paddingBit ? 1 : 0);
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	695b      	ldr	r3, [r3, #20]
 8012042:	2b00      	cmp	r3, #0
 8012044:	bf14      	ite	ne
 8012046:	2301      	movne	r3, #1
 8012048:	2300      	moveq	r3, #0
 801204a:	b2db      	uxtb	r3, r3
}
 801204c:	4618      	mov	r0, r3
 801204e:	3714      	adds	r7, #20
 8012050:	46bd      	mov	sp, r7
 8012052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012056:	4770      	bx	lr

08012058 <xmp3fixpt_UnpackFrameHeader>:
 *
 * TODO:        check for valid modes, depending on capabilities of decoder
 *              test CRC on actual stream (verify no endian problems)
 **************************************************************************************/
int UnpackFrameHeader(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 8012058:	b490      	push	{r4, r7}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	6039      	str	r1, [r7, #0]

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00e      	beq.n	8012086 <xmp3fixpt_UnpackFrameHeader+0x2e>
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d00a      	beq.n	8012086 <xmp3fixpt_UnpackFrameHeader+0x2e>
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	2bff      	cmp	r3, #255	; 0xff
 8012076:	d106      	bne.n	8012086 <xmp3fixpt_UnpackFrameHeader+0x2e>
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	3301      	adds	r3, #1
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012082:	2be0      	cmp	r3, #224	; 0xe0
 8012084:	d002      	beq.n	801208c <xmp3fixpt_UnpackFrameHeader+0x34>
		return -1;
 8012086:	f04f 33ff 	mov.w	r3, #4294967295
 801208a:	e155      	b.n	8012338 <xmp3fixpt_UnpackFrameHeader+0x2e0>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	60fb      	str	r3, [r7, #12]

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	3301      	adds	r3, #1
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	08db      	lsrs	r3, r3, #3
 801209a:	b2db      	uxtb	r3, r3
 801209c:	f003 0303 	and.w	r3, r3, #3
 80120a0:	60bb      	str	r3, [r7, #8]
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d009      	beq.n	80120bc <xmp3fixpt_UnpackFrameHeader+0x64>
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	f003 0301 	and.w	r3, r3, #1
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	bf0c      	ite	eq
 80120b2:	2301      	moveq	r3, #1
 80120b4:	2300      	movne	r3, #0
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	b2da      	uxtb	r2, r3
 80120ba:	e000      	b.n	80120be <xmp3fixpt_UnpackFrameHeader+0x66>
 80120bc:	2202      	movs	r2, #2
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	701a      	strb	r2, [r3, #0]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	3301      	adds	r3, #1
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	085b      	lsrs	r3, r3, #1
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	f003 0303 	and.w	r3, r3, #3
 80120d0:	f1c3 0204 	rsb	r2, r3, #4
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	605a      	str	r2, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	3301      	adds	r3, #1
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	f003 0301 	and.w	r3, r3, #1
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	bf0c      	ite	eq
 80120e6:	2301      	moveq	r3, #1
 80120e8:	2300      	movne	r3, #0
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	461a      	mov	r2, r3
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	609a      	str	r2, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	3302      	adds	r3, #2
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	091b      	lsrs	r3, r3, #4
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	f003 020f 	and.w	r2, r3, #15
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	60da      	str	r2, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	3302      	adds	r3, #2
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	089b      	lsrs	r3, r3, #2
 801210c:	b2db      	uxtb	r3, r3
 801210e:	f003 0203 	and.w	r2, r3, #3
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	611a      	str	r2, [r3, #16]
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	3302      	adds	r3, #2
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	085b      	lsrs	r3, r3, #1
 801211e:	b2db      	uxtb	r3, r3
 8012120:	f003 0201 	and.w	r2, r3, #1
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	615a      	str	r2, [r3, #20]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	3302      	adds	r3, #2
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	f003 0201 	and.w	r2, r3, #1
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	619a      	str	r2, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	3303      	adds	r3, #3
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	099b      	lsrs	r3, r3, #6
 801213e:	b2da      	uxtb	r2, r3
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	771a      	strb	r2, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	3303      	adds	r3, #3
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	091b      	lsrs	r3, r3, #4
 801214c:	b2db      	uxtb	r3, r3
 801214e:	f003 0203 	and.w	r2, r3, #3
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	621a      	str	r2, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	3303      	adds	r3, #3
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	08db      	lsrs	r3, r3, #3
 801215e:	b2db      	uxtb	r3, r3
 8012160:	f003 0201 	and.w	r2, r3, #1
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	625a      	str	r2, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	3303      	adds	r3, #3
 801216c:	781b      	ldrb	r3, [r3, #0]
 801216e:	089b      	lsrs	r3, r3, #2
 8012170:	b2db      	uxtb	r3, r3
 8012172:	f003 0201 	and.w	r2, r3, #1
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	629a      	str	r2, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	3303      	adds	r3, #3
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	f003 0203 	and.w	r2, r3, #3
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	62da      	str	r2, [r3, #44]	; 0x2c

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	691b      	ldr	r3, [r3, #16]
 801218c:	2b03      	cmp	r3, #3
 801218e:	d007      	beq.n	80121a0 <xmp3fixpt_UnpackFrameHeader+0x148>
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	2b04      	cmp	r3, #4
 8012196:	d003      	beq.n	80121a0 <xmp3fixpt_UnpackFrameHeader+0x148>
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	68db      	ldr	r3, [r3, #12]
 801219c:	2b0f      	cmp	r3, #15
 801219e:	d102      	bne.n	80121a6 <xmp3fixpt_UnpackFrameHeader+0x14e>
		return -1;
 80121a0:	f04f 33ff 	mov.w	r3, #4294967295
 80121a4:	e0c8      	b.n	8012338 <xmp3fixpt_UnpackFrameHeader+0x2e0>

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	4619      	mov	r1, r3
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	691b      	ldr	r3, [r3, #16]
 80121b0:	224a      	movs	r2, #74	; 0x4a
 80121b2:	fb03 f202 	mul.w	r2, r3, r2
 80121b6:	23de      	movs	r3, #222	; 0xde
 80121b8:	fb01 f303 	mul.w	r3, r1, r3
 80121bc:	4413      	add	r3, r2
 80121be:	4a61      	ldr	r2, [pc, #388]	; (8012344 <xmp3fixpt_UnpackFrameHeader+0x2ec>)
 80121c0:	441a      	add	r2, r3
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	635a      	str	r2, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	7f1b      	ldrb	r3, [r3, #28]
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d002      	beq.n	80121d4 <xmp3fixpt_UnpackFrameHeader+0x17c>
		fh->modeExt = 0;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	2200      	movs	r2, #0
 80121d2:	621a      	str	r2, [r3, #32]

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	7f1b      	ldrb	r3, [r3, #28]
 80121d8:	2b03      	cmp	r3, #3
 80121da:	d101      	bne.n	80121e0 <xmp3fixpt_UnpackFrameHeader+0x188>
 80121dc:	2201      	movs	r2, #1
 80121de:	e000      	b.n	80121e2 <xmp3fixpt_UnpackFrameHeader+0x18a>
 80121e0:	2202      	movs	r2, #2
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8c3 27bc 	str.w	r2, [r3, #1980]	; 0x7bc
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	4618      	mov	r0, r3
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	691a      	ldr	r2, [r3, #16]
 80121f2:	4955      	ldr	r1, [pc, #340]	; (8012348 <xmp3fixpt_UnpackFrameHeader+0x2f0>)
 80121f4:	4603      	mov	r3, r0
 80121f6:	005b      	lsls	r3, r3, #1
 80121f8:	4403      	add	r3, r0
 80121fa:	4413      	add	r3, r2
 80121fc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d101      	bne.n	8012212 <xmp3fixpt_UnpackFrameHeader+0x1ba>
 801220e:	2202      	movs	r2, #2
 8012210:	e000      	b.n	8012214 <xmp3fixpt_UnpackFrameHeader+0x1bc>
 8012212:	2201      	movs	r2, #1
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8c3 27c4 	str.w	r2, [r3, #1988]	; 0x7c4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	4618      	mov	r0, r3
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	1e5a      	subs	r2, r3, #1
 8012226:	4949      	ldr	r1, [pc, #292]	; (801234c <xmp3fixpt_UnpackFrameHeader+0x2f4>)
 8012228:	4603      	mov	r3, r0
 801222a:	005b      	lsls	r3, r3, #1
 801222c:	4403      	add	r3, r0
 801222e:	4413      	add	r3, r2
 8012230:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8012234:	461a      	mov	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 801223c:	fb92 f2f3 	sdiv	r2, r2, r3
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8c3 27c8 	str.w	r2, [r3, #1992]	; 0x7c8
	mp3DecInfo->layer = fh->layer;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	685a      	ldr	r2, [r3, #4]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f8c3 27d0 	str.w	r2, [r3, #2000]	; 0x7d0
	mp3DecInfo->version = fh->ver;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	781a      	ldrb	r2, [r3, #0]
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	68db      	ldr	r3, [r3, #12]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d056      	beq.n	8012310 <xmp3fixpt_UnpackFrameHeader+0x2b8>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	4619      	mov	r1, r3
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	3b01      	subs	r3, #1
 801226e:	68fa      	ldr	r2, [r7, #12]
 8012270:	68d0      	ldr	r0, [r2, #12]
 8012272:	4c37      	ldr	r4, [pc, #220]	; (8012350 <xmp3fixpt_UnpackFrameHeader+0x2f8>)
 8012274:	461a      	mov	r2, r3
 8012276:	0112      	lsls	r2, r2, #4
 8012278:	1ad2      	subs	r2, r2, r3
 801227a:	460b      	mov	r3, r1
 801227c:	005b      	lsls	r3, r3, #1
 801227e:	440b      	add	r3, r1
 8012280:	0119      	lsls	r1, r3, #4
 8012282:	1ac9      	subs	r1, r1, r3
 8012284:	1853      	adds	r3, r2, r1
 8012286:	4403      	add	r3, r0
 8012288:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 801228c:	461a      	mov	r2, r3
 801228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012292:	fb03 f202 	mul.w	r2, r3, r2
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f8c3 27b8 	str.w	r2, [r3, #1976]	; 0x7b8
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	4619      	mov	r1, r3
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	691b      	ldr	r3, [r3, #16]
 80122a6:	68fa      	ldr	r2, [r7, #12]
 80122a8:	68d0      	ldr	r0, [r2, #12]
 80122aa:	4c2a      	ldr	r4, [pc, #168]	; (8012354 <xmp3fixpt_UnpackFrameHeader+0x2fc>)
 80122ac:	461a      	mov	r2, r3
 80122ae:	0112      	lsls	r2, r2, #4
 80122b0:	1ad2      	subs	r2, r2, r3
 80122b2:	460b      	mov	r3, r1
 80122b4:	005b      	lsls	r3, r3, #1
 80122b6:	440b      	add	r3, r1
 80122b8:	0119      	lsls	r1, r3, #4
 80122ba:	1ac9      	subs	r1, r1, r3
 80122bc:	1853      	adds	r3, r2, r1
 80122be:	4403      	add	r3, r0
 80122c0:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 80122c4:	4619      	mov	r1, r3
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	461c      	mov	r4, r3
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	7f1b      	ldrb	r3, [r3, #28]
 80122d0:	2b03      	cmp	r3, #3
 80122d2:	bf14      	ite	ne
 80122d4:	2301      	movne	r3, #1
 80122d6:	2300      	moveq	r3, #0
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	4618      	mov	r0, r3
 80122dc:	4a1e      	ldr	r2, [pc, #120]	; (8012358 <xmp3fixpt_UnpackFrameHeader+0x300>)
 80122de:	0063      	lsls	r3, r4, #1
 80122e0:	4403      	add	r3, r0
 80122e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 80122e6:	1acb      	subs	r3, r1, r3
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 80122e8:	1f1a      	subs	r2, r3, #4
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	689b      	ldr	r3, [r3, #8]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d001      	beq.n	80122f6 <xmp3fixpt_UnpackFrameHeader+0x29e>
 80122f2:	2302      	movs	r3, #2
 80122f4:	e000      	b.n	80122f8 <xmp3fixpt_UnpackFrameHeader+0x2a0>
 80122f6:	2300      	movs	r3, #0
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	68fa      	ldr	r2, [r7, #12]
 80122fc:	6952      	ldr	r2, [r2, #20]
 80122fe:	2a00      	cmp	r2, #0
 8012300:	bf14      	ite	ne
 8012302:	2201      	movne	r2, #1
 8012304:	2200      	moveq	r2, #0
 8012306:	b2d2      	uxtb	r2, r2
 8012308:	441a      	add	r2, r3
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	689b      	ldr	r3, [r3, #8]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d00b      	beq.n	8012330 <xmp3fixpt_UnpackFrameHeader+0x2d8>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	3304      	adds	r3, #4
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	021b      	lsls	r3, r3, #8
 8012320:	683a      	ldr	r2, [r7, #0]
 8012322:	3205      	adds	r2, #5
 8012324:	7812      	ldrb	r2, [r2, #0]
 8012326:	431a      	orrs	r2, r3
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	631a      	str	r2, [r3, #48]	; 0x30
		return 6;
 801232c:	2306      	movs	r3, #6
 801232e:	e003      	b.n	8012338 <xmp3fixpt_UnpackFrameHeader+0x2e0>
	} else {
		fh->CRCWord = 0;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2200      	movs	r2, #0
 8012334:	631a      	str	r2, [r3, #48]	; 0x30
		return 4;
 8012336:	2304      	movs	r3, #4
	}
}
 8012338:	4618      	mov	r0, r3
 801233a:	3710      	adds	r7, #16
 801233c:	46bd      	mov	sp, r7
 801233e:	bc90      	pop	{r4, r7}
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop
 8012344:	080279c4 	.word	0x080279c4
 8012348:	08027760 	.word	0x08027760
 801234c:	08027894 	.word	0x08027894
 8012350:	08027784 	.word	0x08027784
 8012354:	080278b4 	.word	0x080278b4
 8012358:	080278a8 	.word	0x080278a8

0801235c <xmp3fixpt_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b08e      	sub	sp, #56	; 0x38
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d007      	beq.n	801237c <xmp3fixpt_UnpackSideInfo+0x20>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d003      	beq.n	801237c <xmp3fixpt_UnpackSideInfo+0x20>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	685b      	ldr	r3, [r3, #4]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d102      	bne.n	8012382 <xmp3fixpt_UnpackSideInfo+0x26>
		return -1;
 801237c:	f04f 33ff 	mov.w	r3, #4294967295
 8012380:	e186      	b.n	8012690 <xmp3fixpt_UnpackSideInfo+0x334>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	627b      	str	r3, [r7, #36]	; 0x24
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	623b      	str	r3, [r7, #32]

	bsi = &bitStreamInfo;
 801238e:	f107 0308 	add.w	r3, r7, #8
 8012392:	61fb      	str	r3, [r7, #28]
	if (fh->ver == MPEG1) {
 8012394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d147      	bne.n	801242c <xmp3fixpt_UnpackSideInfo+0xd0>
		/* MPEG 1 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 801239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239e:	7f1b      	ldrb	r3, [r3, #28]
 80123a0:	2b03      	cmp	r3, #3
 80123a2:	d101      	bne.n	80123a8 <xmp3fixpt_UnpackSideInfo+0x4c>
 80123a4:	2311      	movs	r3, #17
 80123a6:	e000      	b.n	80123aa <xmp3fixpt_UnpackSideInfo+0x4e>
 80123a8:	2320      	movs	r3, #32
 80123aa:	62bb      	str	r3, [r7, #40]	; 0x28
		SetBitstreamPointer(bsi, nBytes, buf);
 80123ac:	683a      	ldr	r2, [r7, #0]
 80123ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123b0:	69f8      	ldr	r0, [r7, #28]
 80123b2:	f7ff fd46 	bl	8011e42 <xmp3fixpt_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 9);
 80123b6:	2109      	movs	r1, #9
 80123b8:	69f8      	ldr	r0, [r7, #28]
 80123ba:	f7ff fdcb 	bl	8011f54 <xmp3fixpt_GetBits>
 80123be:	4603      	mov	r3, r0
 80123c0:	461a      	mov	r2, r3
 80123c2:	6a3b      	ldr	r3, [r7, #32]
 80123c4:	601a      	str	r2, [r3, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 80123c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c8:	7f1b      	ldrb	r3, [r3, #28]
 80123ca:	2b03      	cmp	r3, #3
 80123cc:	d101      	bne.n	80123d2 <xmp3fixpt_UnpackSideInfo+0x76>
 80123ce:	2305      	movs	r3, #5
 80123d0:	e000      	b.n	80123d4 <xmp3fixpt_UnpackSideInfo+0x78>
 80123d2:	2303      	movs	r3, #3
 80123d4:	4619      	mov	r1, r3
 80123d6:	69f8      	ldr	r0, [r7, #28]
 80123d8:	f7ff fdbc 	bl	8011f54 <xmp3fixpt_GetBits>
 80123dc:	4603      	mov	r3, r0
 80123de:	461a      	mov	r2, r3
 80123e0:	6a3b      	ldr	r3, [r7, #32]
 80123e2:	605a      	str	r2, [r3, #4]

		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 80123e4:	2300      	movs	r3, #0
 80123e6:	633b      	str	r3, [r7, #48]	; 0x30
 80123e8:	e019      	b.n	801241e <xmp3fixpt_UnpackSideInfo+0xc2>
			for (bd = 0; bd < MAX_SCFBD; bd++)
 80123ea:	2300      	movs	r3, #0
 80123ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123ee:	e010      	b.n	8012412 <xmp3fixpt_UnpackSideInfo+0xb6>
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 80123f0:	2101      	movs	r1, #1
 80123f2:	69f8      	ldr	r0, [r7, #28]
 80123f4:	f7ff fdae 	bl	8011f54 <xmp3fixpt_GetBits>
 80123f8:	4603      	mov	r3, r0
 80123fa:	4618      	mov	r0, r3
 80123fc:	6a3b      	ldr	r3, [r7, #32]
 80123fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012400:	0091      	lsls	r1, r2, #2
 8012402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012404:	440a      	add	r2, r1
 8012406:	3202      	adds	r2, #2
 8012408:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
			for (bd = 0; bd < MAX_SCFBD; bd++)
 801240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240e:	3301      	adds	r3, #1
 8012410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012414:	2b03      	cmp	r3, #3
 8012416:	ddeb      	ble.n	80123f0 <xmp3fixpt_UnpackSideInfo+0x94>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8012418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241a:	3301      	adds	r3, #1
 801241c:	633b      	str	r3, [r7, #48]	; 0x30
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8012424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012426:	429a      	cmp	r2, r3
 8012428:	dbdf      	blt.n	80123ea <xmp3fixpt_UnpackSideInfo+0x8e>
 801242a:	e023      	b.n	8012474 <xmp3fixpt_UnpackSideInfo+0x118>
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 801242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242e:	7f1b      	ldrb	r3, [r3, #28]
 8012430:	2b03      	cmp	r3, #3
 8012432:	d101      	bne.n	8012438 <xmp3fixpt_UnpackSideInfo+0xdc>
 8012434:	2309      	movs	r3, #9
 8012436:	e000      	b.n	801243a <xmp3fixpt_UnpackSideInfo+0xde>
 8012438:	2311      	movs	r3, #17
 801243a:	62bb      	str	r3, [r7, #40]	; 0x28
		SetBitstreamPointer(bsi, nBytes, buf);
 801243c:	683a      	ldr	r2, [r7, #0]
 801243e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012440:	69f8      	ldr	r0, [r7, #28]
 8012442:	f7ff fcfe 	bl	8011e42 <xmp3fixpt_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 8);
 8012446:	2108      	movs	r1, #8
 8012448:	69f8      	ldr	r0, [r7, #28]
 801244a:	f7ff fd83 	bl	8011f54 <xmp3fixpt_GetBits>
 801244e:	4603      	mov	r3, r0
 8012450:	461a      	mov	r2, r3
 8012452:	6a3b      	ldr	r3, [r7, #32]
 8012454:	601a      	str	r2, [r3, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 8012456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012458:	7f1b      	ldrb	r3, [r3, #28]
 801245a:	2b03      	cmp	r3, #3
 801245c:	d101      	bne.n	8012462 <xmp3fixpt_UnpackSideInfo+0x106>
 801245e:	2301      	movs	r3, #1
 8012460:	e000      	b.n	8012464 <xmp3fixpt_UnpackSideInfo+0x108>
 8012462:	2302      	movs	r3, #2
 8012464:	4619      	mov	r1, r3
 8012466:	69f8      	ldr	r0, [r7, #28]
 8012468:	f7ff fd74 	bl	8011f54 <xmp3fixpt_GetBits>
 801246c:	4603      	mov	r3, r0
 801246e:	461a      	mov	r2, r3
 8012470:	6a3b      	ldr	r3, [r7, #32]
 8012472:	605a      	str	r2, [r3, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 8012474:	2300      	movs	r3, #0
 8012476:	637b      	str	r3, [r7, #52]	; 0x34
 8012478:	e0fd      	b.n	8012676 <xmp3fixpt_UnpackSideInfo+0x31a>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 801247a:	2300      	movs	r3, #0
 801247c:	633b      	str	r3, [r7, #48]	; 0x30
 801247e:	e0f0      	b.n	8012662 <xmp3fixpt_UnpackSideInfo+0x306>
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */
 8012480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012482:	461a      	mov	r2, r3
 8012484:	00d2      	lsls	r2, r2, #3
 8012486:	441a      	add	r2, r3
 8012488:	00d3      	lsls	r3, r2, #3
 801248a:	461a      	mov	r2, r3
 801248c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801248e:	460b      	mov	r3, r1
 8012490:	00db      	lsls	r3, r3, #3
 8012492:	440b      	add	r3, r1
 8012494:	011b      	lsls	r3, r3, #4
 8012496:	4413      	add	r3, r2
 8012498:	3328      	adds	r3, #40	; 0x28
 801249a:	6a3a      	ldr	r2, [r7, #32]
 801249c:	4413      	add	r3, r2
 801249e:	61bb      	str	r3, [r7, #24]

			sis->part23Length =    GetBits(bsi, 12);
 80124a0:	210c      	movs	r1, #12
 80124a2:	69f8      	ldr	r0, [r7, #28]
 80124a4:	f7ff fd56 	bl	8011f54 <xmp3fixpt_GetBits>
 80124a8:	4603      	mov	r3, r0
 80124aa:	461a      	mov	r2, r3
 80124ac:	69bb      	ldr	r3, [r7, #24]
 80124ae:	601a      	str	r2, [r3, #0]
			sis->nBigvals =        GetBits(bsi, 9);
 80124b0:	2109      	movs	r1, #9
 80124b2:	69f8      	ldr	r0, [r7, #28]
 80124b4:	f7ff fd4e 	bl	8011f54 <xmp3fixpt_GetBits>
 80124b8:	4603      	mov	r3, r0
 80124ba:	461a      	mov	r2, r3
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	605a      	str	r2, [r3, #4]
			sis->globalGain =      GetBits(bsi, 8);
 80124c0:	2108      	movs	r1, #8
 80124c2:	69f8      	ldr	r0, [r7, #28]
 80124c4:	f7ff fd46 	bl	8011f54 <xmp3fixpt_GetBits>
 80124c8:	4603      	mov	r3, r0
 80124ca:	461a      	mov	r2, r3
 80124cc:	69bb      	ldr	r3, [r7, #24]
 80124ce:	609a      	str	r2, [r3, #8]
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 80124d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d101      	bne.n	80124dc <xmp3fixpt_UnpackSideInfo+0x180>
 80124d8:	2304      	movs	r3, #4
 80124da:	e000      	b.n	80124de <xmp3fixpt_UnpackSideInfo+0x182>
 80124dc:	2309      	movs	r3, #9
 80124de:	4619      	mov	r1, r3
 80124e0:	69f8      	ldr	r0, [r7, #28]
 80124e2:	f7ff fd37 	bl	8011f54 <xmp3fixpt_GetBits>
 80124e6:	4603      	mov	r3, r0
 80124e8:	461a      	mov	r2, r3
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	60da      	str	r2, [r3, #12]
			sis->winSwitchFlag =   GetBits(bsi, 1);
 80124ee:	2101      	movs	r1, #1
 80124f0:	69f8      	ldr	r0, [r7, #28]
 80124f2:	f7ff fd2f 	bl	8011f54 <xmp3fixpt_GetBits>
 80124f6:	4603      	mov	r3, r0
 80124f8:	461a      	mov	r2, r3
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	611a      	str	r2, [r3, #16]

			if(sis->winSwitchFlag) {
 80124fe:	69bb      	ldr	r3, [r7, #24]
 8012500:	691b      	ldr	r3, [r3, #16]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d05e      	beq.n	80125c4 <xmp3fixpt_UnpackSideInfo+0x268>
				/* this is a start, stop, short, or mixed block */
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 8012506:	2102      	movs	r1, #2
 8012508:	69f8      	ldr	r0, [r7, #28]
 801250a:	f7ff fd23 	bl	8011f54 <xmp3fixpt_GetBits>
 801250e:	4603      	mov	r3, r0
 8012510:	461a      	mov	r2, r3
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	615a      	str	r2, [r3, #20]
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 8012516:	2101      	movs	r1, #1
 8012518:	69f8      	ldr	r0, [r7, #28]
 801251a:	f7ff fd1b 	bl	8011f54 <xmp3fixpt_GetBits>
 801251e:	4603      	mov	r3, r0
 8012520:	461a      	mov	r2, r3
 8012522:	69bb      	ldr	r3, [r7, #24]
 8012524:	619a      	str	r2, [r3, #24]
				sis->tableSelect[0] =  GetBits(bsi, 5);
 8012526:	2105      	movs	r1, #5
 8012528:	69f8      	ldr	r0, [r7, #28]
 801252a:	f7ff fd13 	bl	8011f54 <xmp3fixpt_GetBits>
 801252e:	4603      	mov	r3, r0
 8012530:	461a      	mov	r2, r3
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	61da      	str	r2, [r3, #28]
				sis->tableSelect[1] =  GetBits(bsi, 5);
 8012536:	2105      	movs	r1, #5
 8012538:	69f8      	ldr	r0, [r7, #28]
 801253a:	f7ff fd0b 	bl	8011f54 <xmp3fixpt_GetBits>
 801253e:	4603      	mov	r3, r0
 8012540:	461a      	mov	r2, r3
 8012542:	69bb      	ldr	r3, [r7, #24]
 8012544:	621a      	str	r2, [r3, #32]
				sis->tableSelect[2] =  0;					/* unused */
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	2200      	movs	r2, #0
 801254a:	625a      	str	r2, [r3, #36]	; 0x24
				sis->subBlockGain[0] = GetBits(bsi, 3);
 801254c:	2103      	movs	r1, #3
 801254e:	69f8      	ldr	r0, [r7, #28]
 8012550:	f7ff fd00 	bl	8011f54 <xmp3fixpt_GetBits>
 8012554:	4603      	mov	r3, r0
 8012556:	461a      	mov	r2, r3
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	629a      	str	r2, [r3, #40]	; 0x28
				sis->subBlockGain[1] = GetBits(bsi, 3);
 801255c:	2103      	movs	r1, #3
 801255e:	69f8      	ldr	r0, [r7, #28]
 8012560:	f7ff fcf8 	bl	8011f54 <xmp3fixpt_GetBits>
 8012564:	4603      	mov	r3, r0
 8012566:	461a      	mov	r2, r3
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	62da      	str	r2, [r3, #44]	; 0x2c
				sis->subBlockGain[2] = GetBits(bsi, 3);
 801256c:	2103      	movs	r1, #3
 801256e:	69f8      	ldr	r0, [r7, #28]
 8012570:	f7ff fcf0 	bl	8011f54 <xmp3fixpt_GetBits>
 8012574:	4603      	mov	r3, r0
 8012576:	461a      	mov	r2, r3
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	631a      	str	r2, [r3, #48]	; 0x30

				/* TODO - check logic */
				if (sis->blockType == 0) {
 801257c:	69bb      	ldr	r3, [r7, #24]
 801257e:	695b      	ldr	r3, [r3, #20]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d109      	bne.n	8012598 <xmp3fixpt_UnpackSideInfo+0x23c>
					/* this should not be allowed, according to spec */
					sis->nBigvals = 0;
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	2200      	movs	r2, #0
 8012588:	605a      	str	r2, [r3, #4]
					sis->part23Length = 0;
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	2200      	movs	r2, #0
 801258e:	601a      	str	r2, [r3, #0]
					sis->sfCompress = 0;
 8012590:	69bb      	ldr	r3, [r7, #24]
 8012592:	2200      	movs	r2, #0
 8012594:	60da      	str	r2, [r3, #12]
 8012596:	e00e      	b.n	80125b6 <xmp3fixpt_UnpackSideInfo+0x25a>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	695b      	ldr	r3, [r3, #20]
 801259c:	2b02      	cmp	r3, #2
 801259e:	d107      	bne.n	80125b0 <xmp3fixpt_UnpackSideInfo+0x254>
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	699b      	ldr	r3, [r3, #24]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d103      	bne.n	80125b0 <xmp3fixpt_UnpackSideInfo+0x254>
					/* short block, not mixed */
					sis->region0Count = 8;
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	2208      	movs	r2, #8
 80125ac:	635a      	str	r2, [r3, #52]	; 0x34
 80125ae:	e002      	b.n	80125b6 <xmp3fixpt_UnpackSideInfo+0x25a>
				} else {
					/* start, stop, or short-mixed */
					sis->region0Count = 7;
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	2207      	movs	r2, #7
 80125b4:	635a      	str	r2, [r3, #52]	; 0x34
				}
				sis->region1Count = 20 - sis->region0Count;
 80125b6:	69bb      	ldr	r3, [r7, #24]
 80125b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125ba:	f1c3 0214 	rsb	r2, r3, #20
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	639a      	str	r2, [r3, #56]	; 0x38
 80125c2:	e02d      	b.n	8012620 <xmp3fixpt_UnpackSideInfo+0x2c4>
			} else {
				/* this is a normal block */
				sis->blockType = 0;
 80125c4:	69bb      	ldr	r3, [r7, #24]
 80125c6:	2200      	movs	r2, #0
 80125c8:	615a      	str	r2, [r3, #20]
				sis->mixedBlock = 0;
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	2200      	movs	r2, #0
 80125ce:	619a      	str	r2, [r3, #24]
				sis->tableSelect[0] =  GetBits(bsi, 5);
 80125d0:	2105      	movs	r1, #5
 80125d2:	69f8      	ldr	r0, [r7, #28]
 80125d4:	f7ff fcbe 	bl	8011f54 <xmp3fixpt_GetBits>
 80125d8:	4603      	mov	r3, r0
 80125da:	461a      	mov	r2, r3
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	61da      	str	r2, [r3, #28]
				sis->tableSelect[1] =  GetBits(bsi, 5);
 80125e0:	2105      	movs	r1, #5
 80125e2:	69f8      	ldr	r0, [r7, #28]
 80125e4:	f7ff fcb6 	bl	8011f54 <xmp3fixpt_GetBits>
 80125e8:	4603      	mov	r3, r0
 80125ea:	461a      	mov	r2, r3
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	621a      	str	r2, [r3, #32]
				sis->tableSelect[2] =  GetBits(bsi, 5);
 80125f0:	2105      	movs	r1, #5
 80125f2:	69f8      	ldr	r0, [r7, #28]
 80125f4:	f7ff fcae 	bl	8011f54 <xmp3fixpt_GetBits>
 80125f8:	4603      	mov	r3, r0
 80125fa:	461a      	mov	r2, r3
 80125fc:	69bb      	ldr	r3, [r7, #24]
 80125fe:	625a      	str	r2, [r3, #36]	; 0x24
				sis->region0Count =    GetBits(bsi, 4);
 8012600:	2104      	movs	r1, #4
 8012602:	69f8      	ldr	r0, [r7, #28]
 8012604:	f7ff fca6 	bl	8011f54 <xmp3fixpt_GetBits>
 8012608:	4603      	mov	r3, r0
 801260a:	461a      	mov	r2, r3
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	635a      	str	r2, [r3, #52]	; 0x34
				sis->region1Count =    GetBits(bsi, 3);
 8012610:	2103      	movs	r1, #3
 8012612:	69f8      	ldr	r0, [r7, #28]
 8012614:	f7ff fc9e 	bl	8011f54 <xmp3fixpt_GetBits>
 8012618:	4603      	mov	r3, r0
 801261a:	461a      	mov	r2, r3
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	639a      	str	r2, [r3, #56]	; 0x38
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 8012620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d106      	bne.n	8012636 <xmp3fixpt_UnpackSideInfo+0x2da>
 8012628:	2101      	movs	r1, #1
 801262a:	69f8      	ldr	r0, [r7, #28]
 801262c:	f7ff fc92 	bl	8011f54 <xmp3fixpt_GetBits>
 8012630:	4603      	mov	r3, r0
 8012632:	461a      	mov	r2, r3
 8012634:	e000      	b.n	8012638 <xmp3fixpt_UnpackSideInfo+0x2dc>
 8012636:	2200      	movs	r2, #0
 8012638:	69bb      	ldr	r3, [r7, #24]
 801263a:	63da      	str	r2, [r3, #60]	; 0x3c
			sis->sfactScale =        GetBits(bsi, 1);
 801263c:	2101      	movs	r1, #1
 801263e:	69f8      	ldr	r0, [r7, #28]
 8012640:	f7ff fc88 	bl	8011f54 <xmp3fixpt_GetBits>
 8012644:	4603      	mov	r3, r0
 8012646:	461a      	mov	r2, r3
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	641a      	str	r2, [r3, #64]	; 0x40
			sis->count1TableSelect = GetBits(bsi, 1);
 801264c:	2101      	movs	r1, #1
 801264e:	69f8      	ldr	r0, [r7, #28]
 8012650:	f7ff fc80 	bl	8011f54 <xmp3fixpt_GetBits>
 8012654:	4603      	mov	r3, r0
 8012656:	461a      	mov	r2, r3
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	645a      	str	r2, [r3, #68]	; 0x44
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 801265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265e:	3301      	adds	r3, #1
 8012660:	633b      	str	r3, [r7, #48]	; 0x30
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8012668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801266a:	429a      	cmp	r2, r3
 801266c:	f6ff af08 	blt.w	8012480 <xmp3fixpt_UnpackSideInfo+0x124>
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 8012670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012672:	3301      	adds	r3, #1
 8012674:	637b      	str	r3, [r7, #52]	; 0x34
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 801267c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801267e:	429a      	cmp	r2, r3
 8012680:	f6ff aefb 	blt.w	801247a <xmp3fixpt_UnpackSideInfo+0x11e>
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 8012684:	6a3b      	ldr	r3, [r7, #32]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
 801268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8012690:	4618      	mov	r0, r3
 8012692:	3738      	adds	r7, #56	; 0x38
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <ClearBuffer>:
 * Return:      none
 *
 * Notes:       slow, platform-independent equivalent to memset(buf, 0, nBytes)
 **************************************************************************************/
static void ClearBuffer(void *buf, int nBytes)
{
 8012698:	b480      	push	{r7}
 801269a:	b085      	sub	sp, #20
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
	int i;
	unsigned char *cbuf = (unsigned char *)buf;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < nBytes; i++)
 80126a6:	2300      	movs	r3, #0
 80126a8:	60fb      	str	r3, [r7, #12]
 80126aa:	e007      	b.n	80126bc <ClearBuffer+0x24>
		cbuf[i] = 0;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	68ba      	ldr	r2, [r7, #8]
 80126b0:	4413      	add	r3, r2
 80126b2:	2200      	movs	r2, #0
 80126b4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nBytes; i++)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	3301      	adds	r3, #1
 80126ba:	60fb      	str	r3, [r7, #12]
 80126bc:	68fa      	ldr	r2, [r7, #12]
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	dbf3      	blt.n	80126ac <ClearBuffer+0x14>

	return;
 80126c4:	bf00      	nop
}
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr

080126d0 <xmp3fixpt_AllocateBuffers>:
 *
 * Notes:       if one or more mallocs fail, function frees any buffers already
 *                allocated before returning
 **************************************************************************************/
MP3DecInfo *AllocateBuffers(void)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b088      	sub	sp, #32
 80126d4:	af00      	add	r7, sp, #0
	HuffmanInfo *hi;
	DequantInfo *di;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	mp3DecInfo = (MP3DecInfo *)malloc(sizeof(MP3DecInfo));
 80126d6:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
 80126da:	f013 fc15 	bl	8025f08 <malloc>
 80126de:	4603      	mov	r3, r0
 80126e0:	61fb      	str	r3, [r7, #28]
	if (!mp3DecInfo)
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d101      	bne.n	80126ec <xmp3fixpt_AllocateBuffers+0x1c>
		return 0;
 80126e8:	2300      	movs	r3, #0
 80126ea:	e07f      	b.n	80127ec <xmp3fixpt_AllocateBuffers+0x11c>
	ClearBuffer(mp3DecInfo, sizeof(MP3DecInfo));
 80126ec:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80126f0:	69f8      	ldr	r0, [r7, #28]
 80126f2:	f7ff ffd1 	bl	8012698 <ClearBuffer>
	
	fh =  (FrameHeader *)     malloc(sizeof(FrameHeader));
 80126f6:	2038      	movs	r0, #56	; 0x38
 80126f8:	f013 fc06 	bl	8025f08 <malloc>
 80126fc:	4603      	mov	r3, r0
 80126fe:	61bb      	str	r3, [r7, #24]
	si =  (SideInfo *)        malloc(sizeof(SideInfo));
 8012700:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8012704:	f013 fc00 	bl	8025f08 <malloc>
 8012708:	4603      	mov	r3, r0
 801270a:	617b      	str	r3, [r7, #20]
	sfi = (ScaleFactorInfo *) malloc(sizeof(ScaleFactorInfo));
 801270c:	f44f 708e 	mov.w	r0, #284	; 0x11c
 8012710:	f013 fbfa 	bl	8025f08 <malloc>
 8012714:	4603      	mov	r3, r0
 8012716:	613b      	str	r3, [r7, #16]
	hi =  (HuffmanInfo *)     malloc(sizeof(HuffmanInfo));
 8012718:	f241 2010 	movw	r0, #4624	; 0x1210
 801271c:	f013 fbf4 	bl	8025f08 <malloc>
 8012720:	4603      	mov	r3, r0
 8012722:	60fb      	str	r3, [r7, #12]
	di =  (DequantInfo *)     malloc(sizeof(DequantInfo));
 8012724:	f44f 7052 	mov.w	r0, #840	; 0x348
 8012728:	f013 fbee 	bl	8025f08 <malloc>
 801272c:	4603      	mov	r3, r0
 801272e:	60bb      	str	r3, [r7, #8]
	mi =  (IMDCTInfo *)       malloc(sizeof(IMDCTInfo));
 8012730:	f44f 50d9 	mov.w	r0, #6944	; 0x1b20
 8012734:	f013 fbe8 	bl	8025f08 <malloc>
 8012738:	4603      	mov	r3, r0
 801273a:	607b      	str	r3, [r7, #4]
	sbi = (SubbandInfo *)     malloc(sizeof(SubbandInfo));
 801273c:	f242 2004 	movw	r0, #8708	; 0x2204
 8012740:	f013 fbe2 	bl	8025f08 <malloc>
 8012744:	4603      	mov	r3, r0
 8012746:	603b      	str	r3, [r7, #0]

	mp3DecInfo->FrameHeaderPS =     (void *)fh;
 8012748:	69fb      	ldr	r3, [r7, #28]
 801274a:	69ba      	ldr	r2, [r7, #24]
 801274c:	601a      	str	r2, [r3, #0]
	mp3DecInfo->SideInfoPS =        (void *)si;
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	697a      	ldr	r2, [r7, #20]
 8012752:	605a      	str	r2, [r3, #4]
	mp3DecInfo->ScaleFactorInfoPS = (void *)sfi;
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	693a      	ldr	r2, [r7, #16]
 8012758:	609a      	str	r2, [r3, #8]
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	68fa      	ldr	r2, [r7, #12]
 801275e:	60da      	str	r2, [r3, #12]
	mp3DecInfo->DequantInfoPS =     (void *)di;
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	68ba      	ldr	r2, [r7, #8]
 8012764:	611a      	str	r2, [r3, #16]
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	615a      	str	r2, [r3, #20]
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	683a      	ldr	r2, [r7, #0]
 8012770:	619a      	str	r2, [r3, #24]

	if (!fh || !si || !sfi || !hi || !di || !mi || !sbi) {
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d011      	beq.n	801279c <xmp3fixpt_AllocateBuffers+0xcc>
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d00e      	beq.n	801279c <xmp3fixpt_AllocateBuffers+0xcc>
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d00b      	beq.n	801279c <xmp3fixpt_AllocateBuffers+0xcc>
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d008      	beq.n	801279c <xmp3fixpt_AllocateBuffers+0xcc>
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d005      	beq.n	801279c <xmp3fixpt_AllocateBuffers+0xcc>
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d002      	beq.n	801279c <xmp3fixpt_AllocateBuffers+0xcc>
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d104      	bne.n	80127a6 <xmp3fixpt_AllocateBuffers+0xd6>
		FreeBuffers(mp3DecInfo);	/* safe to call - only frees memory that was successfully allocated */
 801279c:	69f8      	ldr	r0, [r7, #28]
 801279e:	f000 f829 	bl	80127f4 <xmp3fixpt_FreeBuffers>
		return 0;
 80127a2:	2300      	movs	r3, #0
 80127a4:	e022      	b.n	80127ec <xmp3fixpt_AllocateBuffers+0x11c>
	}

	/* important to do this - DSP primitives assume a bunch of state variables are 0 on first use */
	ClearBuffer(fh,  sizeof(FrameHeader));
 80127a6:	2138      	movs	r1, #56	; 0x38
 80127a8:	69b8      	ldr	r0, [r7, #24]
 80127aa:	f7ff ff75 	bl	8012698 <ClearBuffer>
	ClearBuffer(si,  sizeof(SideInfo));
 80127ae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80127b2:	6978      	ldr	r0, [r7, #20]
 80127b4:	f7ff ff70 	bl	8012698 <ClearBuffer>
	ClearBuffer(sfi, sizeof(ScaleFactorInfo));
 80127b8:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80127bc:	6938      	ldr	r0, [r7, #16]
 80127be:	f7ff ff6b 	bl	8012698 <ClearBuffer>
	ClearBuffer(hi,  sizeof(HuffmanInfo));
 80127c2:	f241 2110 	movw	r1, #4624	; 0x1210
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	f7ff ff66 	bl	8012698 <ClearBuffer>
	ClearBuffer(di,  sizeof(DequantInfo));
 80127cc:	f44f 7152 	mov.w	r1, #840	; 0x348
 80127d0:	68b8      	ldr	r0, [r7, #8]
 80127d2:	f7ff ff61 	bl	8012698 <ClearBuffer>
	ClearBuffer(mi,  sizeof(IMDCTInfo));
 80127d6:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7ff ff5c 	bl	8012698 <ClearBuffer>
	ClearBuffer(sbi, sizeof(SubbandInfo));
 80127e0:	f242 2104 	movw	r1, #8708	; 0x2204
 80127e4:	6838      	ldr	r0, [r7, #0]
 80127e6:	f7ff ff57 	bl	8012698 <ClearBuffer>

	return mp3DecInfo;
 80127ea:	69fb      	ldr	r3, [r7, #28]
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3720      	adds	r7, #32
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <xmp3fixpt_FreeBuffers>:
 * Return:      none
 *
 * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
 **************************************************************************************/
void FreeBuffers(MP3DecInfo *mp3DecInfo)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
	if (!mp3DecInfo)
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d05c      	beq.n	80128bc <xmp3fixpt_FreeBuffers+0xc8>
		return;

	SAFE_FREE(mp3DecInfo->FrameHeaderPS);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d004      	beq.n	8012814 <xmp3fixpt_FreeBuffers+0x20>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	4618      	mov	r0, r3
 8012810:	f013 fb82 	bl	8025f18 <free>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2200      	movs	r2, #0
 8012818:	601a      	str	r2, [r3, #0]
	SAFE_FREE(mp3DecInfo->SideInfoPS);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d004      	beq.n	801282c <xmp3fixpt_FreeBuffers+0x38>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	685b      	ldr	r3, [r3, #4]
 8012826:	4618      	mov	r0, r3
 8012828:	f013 fb76 	bl	8025f18 <free>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2200      	movs	r2, #0
 8012830:	605a      	str	r2, [r3, #4]
	SAFE_FREE(mp3DecInfo->ScaleFactorInfoPS);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	689b      	ldr	r3, [r3, #8]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d004      	beq.n	8012844 <xmp3fixpt_FreeBuffers+0x50>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	689b      	ldr	r3, [r3, #8]
 801283e:	4618      	mov	r0, r3
 8012840:	f013 fb6a 	bl	8025f18 <free>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	609a      	str	r2, [r3, #8]
	SAFE_FREE(mp3DecInfo->HuffmanInfoPS);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	68db      	ldr	r3, [r3, #12]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d004      	beq.n	801285c <xmp3fixpt_FreeBuffers+0x68>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	4618      	mov	r0, r3
 8012858:	f013 fb5e 	bl	8025f18 <free>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2200      	movs	r2, #0
 8012860:	60da      	str	r2, [r3, #12]
	SAFE_FREE(mp3DecInfo->DequantInfoPS);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	691b      	ldr	r3, [r3, #16]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d004      	beq.n	8012874 <xmp3fixpt_FreeBuffers+0x80>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	691b      	ldr	r3, [r3, #16]
 801286e:	4618      	mov	r0, r3
 8012870:	f013 fb52 	bl	8025f18 <free>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2200      	movs	r2, #0
 8012878:	611a      	str	r2, [r3, #16]
	SAFE_FREE(mp3DecInfo->IMDCTInfoPS);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	695b      	ldr	r3, [r3, #20]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d004      	beq.n	801288c <xmp3fixpt_FreeBuffers+0x98>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	695b      	ldr	r3, [r3, #20]
 8012886:	4618      	mov	r0, r3
 8012888:	f013 fb46 	bl	8025f18 <free>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2200      	movs	r2, #0
 8012890:	615a      	str	r2, [r3, #20]
	SAFE_FREE(mp3DecInfo->SubbandInfoPS);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	699b      	ldr	r3, [r3, #24]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d004      	beq.n	80128a4 <xmp3fixpt_FreeBuffers+0xb0>
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	699b      	ldr	r3, [r3, #24]
 801289e:	4618      	mov	r0, r3
 80128a0:	f013 fb3a 	bl	8025f18 <free>
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2200      	movs	r2, #0
 80128a8:	619a      	str	r2, [r3, #24]

	SAFE_FREE(mp3DecInfo);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d002      	beq.n	80128b6 <xmp3fixpt_FreeBuffers+0xc2>
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f013 fb31 	bl	8025f18 <free>
 80128b6:	2300      	movs	r3, #0
 80128b8:	607b      	str	r3, [r7, #4]
 80128ba:	e000      	b.n	80128be <xmp3fixpt_FreeBuffers+0xca>
		return;
 80128bc:	bf00      	nop
}
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <MULSHIFT32>:
}

#elif defined(__GNUC__) && defined(ARM)

static __inline int MULSHIFT32(int x, int y)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b085      	sub	sp, #20
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
	 * For inline assembly, x and y are not assumed to be R0, R1 so it shouldn't matter
	 *   which one is returned. (If this were a function call, returning y (R1) would 
	 *   require an extra "mov r0, r1")
     */
    int zlow;
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80128ce:	6879      	ldr	r1, [r7, #4]
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	fb81 2303 	smull	r2, r3, r1, r3
 80128d6:	60fa      	str	r2, [r7, #12]
 80128d8:	603b      	str	r3, [r7, #0]

    return y;
 80128da:	683b      	ldr	r3, [r7, #0]
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3714      	adds	r7, #20
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <xmp3fixpt_FDCT32>:
 * TODO:        code organization and optimization for ARM
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b09e      	sub	sp, #120	; 0x78
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	607a      	str	r2, [r7, #4]
 80128f4:	603b      	str	r3, [r7, #0]
    int i, s, tmp, es;
    const int *cptr = dcttab;
 80128f6:	4b08      	ldr	r3, [pc, #32]	; (8012918 <xmp3fixpt_FDCT32+0x30>)
 80128f8:	66bb      	str	r3, [r7, #104]	; 0x68

	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (gb < 6) {
 80128fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012902:	2b05      	cmp	r3, #5
 8012904:	dc1d      	bgt.n	8012942 <xmp3fixpt_FDCT32+0x5a>
		es = 6 - gb;
 8012906:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801290a:	f1c3 0306 	rsb	r3, r3, #6
 801290e:	66fb      	str	r3, [r7, #108]	; 0x6c
		for (i = 0; i < 32; i++)
 8012910:	2300      	movs	r3, #0
 8012912:	677b      	str	r3, [r7, #116]	; 0x74
 8012914:	e012      	b.n	801293c <xmp3fixpt_FDCT32+0x54>
 8012916:	bf00      	nop
 8012918:	08027c60 	.word	0x08027c60
			buf[i] >>= es;
 801291c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	68fa      	ldr	r2, [r7, #12]
 8012922:	4413      	add	r3, r2
 8012924:	6819      	ldr	r1, [r3, #0]
 8012926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012928:	009b      	lsls	r3, r3, #2
 801292a:	68fa      	ldr	r2, [r7, #12]
 801292c:	4413      	add	r3, r2
 801292e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012930:	fa41 f202 	asr.w	r2, r1, r2
 8012934:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 32; i++)
 8012936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012938:	3301      	adds	r3, #1
 801293a:	677b      	str	r3, [r7, #116]	; 0x74
 801293c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801293e:	2b1f      	cmp	r3, #31
 8012940:	ddec      	ble.n	801291c <xmp3fixpt_FDCT32+0x34>
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	663b      	str	r3, [r7, #96]	; 0x60
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801294c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012952:	65bb      	str	r3, [r7, #88]	; 0x58
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012958:	657b      	str	r3, [r7, #84]	; 0x54
 801295a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801295c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801295e:	4413      	add	r3, r2
 8012960:	653b      	str	r3, [r7, #80]	; 0x50
 8012962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012964:	1d1a      	adds	r2, r3, #4
 8012966:	66ba      	str	r2, [r7, #104]	; 0x68
 8012968:	6818      	ldr	r0, [r3, #0]
 801296a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801296c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801296e:	1ad3      	subs	r3, r2, r3
 8012970:	4619      	mov	r1, r3
 8012972:	f7ff ffa7 	bl	80128c4 <MULSHIFT32>
 8012976:	4603      	mov	r3, r0
 8012978:	005b      	lsls	r3, r3, #1
 801297a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801297c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801297e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012980:	4413      	add	r3, r2
 8012982:	64bb      	str	r3, [r7, #72]	; 0x48
 8012984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012986:	1d1a      	adds	r2, r3, #4
 8012988:	66ba      	str	r2, [r7, #104]	; 0x68
 801298a:	6818      	ldr	r0, [r3, #0]
 801298c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801298e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012990:	1ad3      	subs	r3, r2, r3
 8012992:	4619      	mov	r1, r3
 8012994:	f7ff ff96 	bl	80128c4 <MULSHIFT32>
 8012998:	4603      	mov	r3, r0
 801299a:	015b      	lsls	r3, r3, #5
 801299c:	647b      	str	r3, [r7, #68]	; 0x44
 801299e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129a2:	441a      	add	r2, r3
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	601a      	str	r2, [r3, #0]
 80129a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80129aa:	6818      	ldr	r0, [r3, #0]
 80129ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129b0:	1ad3      	subs	r3, r2, r3
 80129b2:	4619      	mov	r1, r3
 80129b4:	f7ff ff86 	bl	80128c4 <MULSHIFT32>
 80129b8:	4602      	mov	r2, r0
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	333c      	adds	r3, #60	; 0x3c
 80129be:	0052      	lsls	r2, r2, #1
 80129c0:	601a      	str	r2, [r3, #0]
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	3340      	adds	r3, #64	; 0x40
 80129c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80129c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80129ca:	440a      	add	r2, r1
 80129cc:	601a      	str	r2, [r3, #0]
 80129ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80129d0:	1d1a      	adds	r2, r3, #4
 80129d2:	66ba      	str	r2, [r7, #104]	; 0x68
 80129d4:	6818      	ldr	r0, [r3, #0]
 80129d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80129d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129da:	1ad3      	subs	r3, r2, r3
 80129dc:	4619      	mov	r1, r3
 80129de:	f7ff ff71 	bl	80128c4 <MULSHIFT32>
 80129e2:	4602      	mov	r2, r0
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	337c      	adds	r3, #124	; 0x7c
 80129e8:	0052      	lsls	r2, r2, #1
 80129ea:	601a      	str	r2, [r3, #0]
	D32FP(1, 1, 3, 1);
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	685b      	ldr	r3, [r3, #4]
 80129f0:	663b      	str	r3, [r7, #96]	; 0x60
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a02:	657b      	str	r3, [r7, #84]	; 0x54
 8012a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a08:	4413      	add	r3, r2
 8012a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8012a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a0e:	1d1a      	adds	r2, r3, #4
 8012a10:	66ba      	str	r2, [r7, #104]	; 0x68
 8012a12:	6818      	ldr	r0, [r3, #0]
 8012a14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a18:	1ad3      	subs	r3, r2, r3
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	f7ff ff52 	bl	80128c4 <MULSHIFT32>
 8012a20:	4603      	mov	r3, r0
 8012a22:	005b      	lsls	r3, r3, #1
 8012a24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a2a:	4413      	add	r3, r2
 8012a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a30:	1d1a      	adds	r2, r3, #4
 8012a32:	66ba      	str	r2, [r7, #104]	; 0x68
 8012a34:	6818      	ldr	r0, [r3, #0]
 8012a36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a3a:	1ad3      	subs	r3, r2, r3
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	f7ff ff41 	bl	80128c4 <MULSHIFT32>
 8012a42:	4603      	mov	r3, r0
 8012a44:	00db      	lsls	r3, r3, #3
 8012a46:	647b      	str	r3, [r7, #68]	; 0x44
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	3304      	adds	r3, #4
 8012a4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a50:	440a      	add	r2, r1
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a56:	6818      	ldr	r0, [r3, #0]
 8012a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a5c:	1ad3      	subs	r3, r2, r3
 8012a5e:	4619      	mov	r1, r3
 8012a60:	f7ff ff30 	bl	80128c4 <MULSHIFT32>
 8012a64:	4602      	mov	r2, r0
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	3338      	adds	r3, #56	; 0x38
 8012a6a:	0052      	lsls	r2, r2, #1
 8012a6c:	601a      	str	r2, [r3, #0]
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	3344      	adds	r3, #68	; 0x44
 8012a72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012a74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012a76:	440a      	add	r2, r1
 8012a78:	601a      	str	r2, [r3, #0]
 8012a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a7c:	1d1a      	adds	r2, r3, #4
 8012a7e:	66ba      	str	r2, [r7, #104]	; 0x68
 8012a80:	6818      	ldr	r0, [r3, #0]
 8012a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a86:	1ad3      	subs	r3, r2, r3
 8012a88:	4619      	mov	r1, r3
 8012a8a:	f7ff ff1b 	bl	80128c4 <MULSHIFT32>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	3378      	adds	r3, #120	; 0x78
 8012a94:	0052      	lsls	r2, r2, #1
 8012a96:	601a      	str	r2, [r3, #0]
	D32FP(2, 1, 3, 1);
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	689b      	ldr	r3, [r3, #8]
 8012a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012aae:	657b      	str	r3, [r7, #84]	; 0x54
 8012ab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ab4:	4413      	add	r3, r2
 8012ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8012ab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012aba:	1d1a      	adds	r2, r3, #4
 8012abc:	66ba      	str	r2, [r7, #104]	; 0x68
 8012abe:	6818      	ldr	r0, [r3, #0]
 8012ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	f7ff fefc 	bl	80128c4 <MULSHIFT32>
 8012acc:	4603      	mov	r3, r0
 8012ace:	005b      	lsls	r3, r3, #1
 8012ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ad6:	4413      	add	r3, r2
 8012ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012adc:	1d1a      	adds	r2, r3, #4
 8012ade:	66ba      	str	r2, [r7, #104]	; 0x68
 8012ae0:	6818      	ldr	r0, [r3, #0]
 8012ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ae6:	1ad3      	subs	r3, r2, r3
 8012ae8:	4619      	mov	r1, r3
 8012aea:	f7ff feeb 	bl	80128c4 <MULSHIFT32>
 8012aee:	4603      	mov	r3, r0
 8012af0:	00db      	lsls	r3, r3, #3
 8012af2:	647b      	str	r3, [r7, #68]	; 0x44
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	3308      	adds	r3, #8
 8012af8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012afc:	440a      	add	r2, r1
 8012afe:	601a      	str	r2, [r3, #0]
 8012b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b02:	6818      	ldr	r0, [r3, #0]
 8012b04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b08:	1ad3      	subs	r3, r2, r3
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	f7ff feda 	bl	80128c4 <MULSHIFT32>
 8012b10:	4602      	mov	r2, r0
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	3334      	adds	r3, #52	; 0x34
 8012b16:	0052      	lsls	r2, r2, #1
 8012b18:	601a      	str	r2, [r3, #0]
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	3348      	adds	r3, #72	; 0x48
 8012b1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b22:	440a      	add	r2, r1
 8012b24:	601a      	str	r2, [r3, #0]
 8012b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b28:	1d1a      	adds	r2, r3, #4
 8012b2a:	66ba      	str	r2, [r7, #104]	; 0x68
 8012b2c:	6818      	ldr	r0, [r3, #0]
 8012b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b32:	1ad3      	subs	r3, r2, r3
 8012b34:	4619      	mov	r1, r3
 8012b36:	f7ff fec5 	bl	80128c4 <MULSHIFT32>
 8012b3a:	4602      	mov	r2, r0
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	3374      	adds	r3, #116	; 0x74
 8012b40:	0052      	lsls	r2, r2, #1
 8012b42:	601a      	str	r2, [r3, #0]
	D32FP(3, 1, 2, 1);
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	663b      	str	r3, [r7, #96]	; 0x60
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b54:	65bb      	str	r3, [r7, #88]	; 0x58
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8012b5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b60:	4413      	add	r3, r2
 8012b62:	653b      	str	r3, [r7, #80]	; 0x50
 8012b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b66:	1d1a      	adds	r2, r3, #4
 8012b68:	66ba      	str	r2, [r7, #104]	; 0x68
 8012b6a:	6818      	ldr	r0, [r3, #0]
 8012b6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b70:	1ad3      	subs	r3, r2, r3
 8012b72:	4619      	mov	r1, r3
 8012b74:	f7ff fea6 	bl	80128c4 <MULSHIFT32>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	005b      	lsls	r3, r3, #1
 8012b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012b7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b82:	4413      	add	r3, r2
 8012b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8012b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b88:	1d1a      	adds	r2, r3, #4
 8012b8a:	66ba      	str	r2, [r7, #104]	; 0x68
 8012b8c:	6818      	ldr	r0, [r3, #0]
 8012b8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b92:	1ad3      	subs	r3, r2, r3
 8012b94:	4619      	mov	r1, r3
 8012b96:	f7ff fe95 	bl	80128c4 <MULSHIFT32>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	009b      	lsls	r3, r3, #2
 8012b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	330c      	adds	r3, #12
 8012ba4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ba8:	440a      	add	r2, r1
 8012baa:	601a      	str	r2, [r3, #0]
 8012bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012bae:	6818      	ldr	r0, [r3, #0]
 8012bb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bb4:	1ad3      	subs	r3, r2, r3
 8012bb6:	4619      	mov	r1, r3
 8012bb8:	f7ff fe84 	bl	80128c4 <MULSHIFT32>
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	3330      	adds	r3, #48	; 0x30
 8012bc2:	0052      	lsls	r2, r2, #1
 8012bc4:	601a      	str	r2, [r3, #0]
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	334c      	adds	r3, #76	; 0x4c
 8012bca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012bce:	440a      	add	r2, r1
 8012bd0:	601a      	str	r2, [r3, #0]
 8012bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012bd4:	1d1a      	adds	r2, r3, #4
 8012bd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8012bd8:	6818      	ldr	r0, [r3, #0]
 8012bda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bde:	1ad3      	subs	r3, r2, r3
 8012be0:	4619      	mov	r1, r3
 8012be2:	f7ff fe6f 	bl	80128c4 <MULSHIFT32>
 8012be6:	4602      	mov	r2, r0
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	3370      	adds	r3, #112	; 0x70
 8012bec:	0052      	lsls	r2, r2, #1
 8012bee:	601a      	str	r2, [r3, #0]
	D32FP(4, 1, 2, 1);
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	691b      	ldr	r3, [r3, #16]
 8012bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c06:	657b      	str	r3, [r7, #84]	; 0x54
 8012c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c0c:	4413      	add	r3, r2
 8012c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8012c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c12:	1d1a      	adds	r2, r3, #4
 8012c14:	66ba      	str	r2, [r7, #104]	; 0x68
 8012c16:	6818      	ldr	r0, [r3, #0]
 8012c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c1c:	1ad3      	subs	r3, r2, r3
 8012c1e:	4619      	mov	r1, r3
 8012c20:	f7ff fe50 	bl	80128c4 <MULSHIFT32>
 8012c24:	4603      	mov	r3, r0
 8012c26:	005b      	lsls	r3, r3, #1
 8012c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c2e:	4413      	add	r3, r2
 8012c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8012c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c34:	1d1a      	adds	r2, r3, #4
 8012c36:	66ba      	str	r2, [r7, #104]	; 0x68
 8012c38:	6818      	ldr	r0, [r3, #0]
 8012c3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c3e:	1ad3      	subs	r3, r2, r3
 8012c40:	4619      	mov	r1, r3
 8012c42:	f7ff fe3f 	bl	80128c4 <MULSHIFT32>
 8012c46:	4603      	mov	r3, r0
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	3310      	adds	r3, #16
 8012c50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c54:	440a      	add	r2, r1
 8012c56:	601a      	str	r2, [r3, #0]
 8012c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c5a:	6818      	ldr	r0, [r3, #0]
 8012c5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c60:	1ad3      	subs	r3, r2, r3
 8012c62:	4619      	mov	r1, r3
 8012c64:	f7ff fe2e 	bl	80128c4 <MULSHIFT32>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	332c      	adds	r3, #44	; 0x2c
 8012c6e:	0052      	lsls	r2, r2, #1
 8012c70:	601a      	str	r2, [r3, #0]
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	3350      	adds	r3, #80	; 0x50
 8012c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c7a:	440a      	add	r2, r1
 8012c7c:	601a      	str	r2, [r3, #0]
 8012c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c80:	1d1a      	adds	r2, r3, #4
 8012c82:	66ba      	str	r2, [r7, #104]	; 0x68
 8012c84:	6818      	ldr	r0, [r3, #0]
 8012c86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c8a:	1ad3      	subs	r3, r2, r3
 8012c8c:	4619      	mov	r1, r3
 8012c8e:	f7ff fe19 	bl	80128c4 <MULSHIFT32>
 8012c92:	4602      	mov	r2, r0
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	336c      	adds	r3, #108	; 0x6c
 8012c98:	0052      	lsls	r2, r2, #1
 8012c9a:	601a      	str	r2, [r3, #0]
	D32FP(5, 1, 1, 2);
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	695b      	ldr	r3, [r3, #20]
 8012ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8012cb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012cb8:	4413      	add	r3, r2
 8012cba:	653b      	str	r3, [r7, #80]	; 0x50
 8012cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012cbe:	1d1a      	adds	r2, r3, #4
 8012cc0:	66ba      	str	r2, [r7, #104]	; 0x68
 8012cc2:	6818      	ldr	r0, [r3, #0]
 8012cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012cc8:	1ad3      	subs	r3, r2, r3
 8012cca:	4619      	mov	r1, r3
 8012ccc:	f7ff fdfa 	bl	80128c4 <MULSHIFT32>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	005b      	lsls	r3, r3, #1
 8012cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012cd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cda:	4413      	add	r3, r2
 8012cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8012cde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012ce0:	1d1a      	adds	r2, r3, #4
 8012ce2:	66ba      	str	r2, [r7, #104]	; 0x68
 8012ce4:	6818      	ldr	r0, [r3, #0]
 8012ce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cea:	1ad3      	subs	r3, r2, r3
 8012cec:	4619      	mov	r1, r3
 8012cee:	f7ff fde9 	bl	80128c4 <MULSHIFT32>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	005b      	lsls	r3, r3, #1
 8012cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	3314      	adds	r3, #20
 8012cfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d00:	440a      	add	r2, r1
 8012d02:	601a      	str	r2, [r3, #0]
 8012d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d06:	6818      	ldr	r0, [r3, #0]
 8012d08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d0c:	1ad3      	subs	r3, r2, r3
 8012d0e:	4619      	mov	r1, r3
 8012d10:	f7ff fdd8 	bl	80128c4 <MULSHIFT32>
 8012d14:	4602      	mov	r2, r0
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	3328      	adds	r3, #40	; 0x28
 8012d1a:	0092      	lsls	r2, r2, #2
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	3354      	adds	r3, #84	; 0x54
 8012d22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012d24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d26:	440a      	add	r2, r1
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d2c:	1d1a      	adds	r2, r3, #4
 8012d2e:	66ba      	str	r2, [r7, #104]	; 0x68
 8012d30:	6818      	ldr	r0, [r3, #0]
 8012d32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d36:	1ad3      	subs	r3, r2, r3
 8012d38:	4619      	mov	r1, r3
 8012d3a:	f7ff fdc3 	bl	80128c4 <MULSHIFT32>
 8012d3e:	4602      	mov	r2, r0
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	3368      	adds	r3, #104	; 0x68
 8012d44:	0092      	lsls	r2, r2, #2
 8012d46:	601a      	str	r2, [r3, #0]
	D32FP(6, 1, 1, 2);
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	699b      	ldr	r3, [r3, #24]
 8012d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d58:	65bb      	str	r3, [r7, #88]	; 0x58
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8012d60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d64:	4413      	add	r3, r2
 8012d66:	653b      	str	r3, [r7, #80]	; 0x50
 8012d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d6a:	1d1a      	adds	r2, r3, #4
 8012d6c:	66ba      	str	r2, [r7, #104]	; 0x68
 8012d6e:	6818      	ldr	r0, [r3, #0]
 8012d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d74:	1ad3      	subs	r3, r2, r3
 8012d76:	4619      	mov	r1, r3
 8012d78:	f7ff fda4 	bl	80128c4 <MULSHIFT32>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	005b      	lsls	r3, r3, #1
 8012d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d86:	4413      	add	r3, r2
 8012d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d8c:	1d1a      	adds	r2, r3, #4
 8012d8e:	66ba      	str	r2, [r7, #104]	; 0x68
 8012d90:	6818      	ldr	r0, [r3, #0]
 8012d92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d96:	1ad3      	subs	r3, r2, r3
 8012d98:	4619      	mov	r1, r3
 8012d9a:	f7ff fd93 	bl	80128c4 <MULSHIFT32>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	005b      	lsls	r3, r3, #1
 8012da2:	647b      	str	r3, [r7, #68]	; 0x44
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	3318      	adds	r3, #24
 8012da8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012dac:	440a      	add	r2, r1
 8012dae:	601a      	str	r2, [r3, #0]
 8012db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012db2:	6818      	ldr	r0, [r3, #0]
 8012db4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012db8:	1ad3      	subs	r3, r2, r3
 8012dba:	4619      	mov	r1, r3
 8012dbc:	f7ff fd82 	bl	80128c4 <MULSHIFT32>
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	3324      	adds	r3, #36	; 0x24
 8012dc6:	0092      	lsls	r2, r2, #2
 8012dc8:	601a      	str	r2, [r3, #0]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	3358      	adds	r3, #88	; 0x58
 8012dce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012dd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012dd2:	440a      	add	r2, r1
 8012dd4:	601a      	str	r2, [r3, #0]
 8012dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012dd8:	1d1a      	adds	r2, r3, #4
 8012dda:	66ba      	str	r2, [r7, #104]	; 0x68
 8012ddc:	6818      	ldr	r0, [r3, #0]
 8012dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012de2:	1ad3      	subs	r3, r2, r3
 8012de4:	4619      	mov	r1, r3
 8012de6:	f7ff fd6d 	bl	80128c4 <MULSHIFT32>
 8012dea:	4602      	mov	r2, r0
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	3364      	adds	r3, #100	; 0x64
 8012df0:	0092      	lsls	r2, r2, #2
 8012df2:	601a      	str	r2, [r3, #0]
	D32FP(7, 1, 1, 4);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	69db      	ldr	r3, [r3, #28]
 8012df8:	663b      	str	r3, [r7, #96]	; 0x60
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	6a1b      	ldr	r3, [r3, #32]
 8012e04:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8012e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e10:	4413      	add	r3, r2
 8012e12:	653b      	str	r3, [r7, #80]	; 0x50
 8012e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e16:	1d1a      	adds	r2, r3, #4
 8012e18:	66ba      	str	r2, [r7, #104]	; 0x68
 8012e1a:	6818      	ldr	r0, [r3, #0]
 8012e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e20:	1ad3      	subs	r3, r2, r3
 8012e22:	4619      	mov	r1, r3
 8012e24:	f7ff fd4e 	bl	80128c4 <MULSHIFT32>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	005b      	lsls	r3, r3, #1
 8012e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e32:	4413      	add	r3, r2
 8012e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e38:	1d1a      	adds	r2, r3, #4
 8012e3a:	66ba      	str	r2, [r7, #104]	; 0x68
 8012e3c:	6818      	ldr	r0, [r3, #0]
 8012e3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e42:	1ad3      	subs	r3, r2, r3
 8012e44:	4619      	mov	r1, r3
 8012e46:	f7ff fd3d 	bl	80128c4 <MULSHIFT32>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	005b      	lsls	r3, r3, #1
 8012e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	331c      	adds	r3, #28
 8012e54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e58:	440a      	add	r2, r1
 8012e5a:	601a      	str	r2, [r3, #0]
 8012e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e5e:	6818      	ldr	r0, [r3, #0]
 8012e60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e64:	1ad3      	subs	r3, r2, r3
 8012e66:	4619      	mov	r1, r3
 8012e68:	f7ff fd2c 	bl	80128c4 <MULSHIFT32>
 8012e6c:	4602      	mov	r2, r0
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	3320      	adds	r3, #32
 8012e72:	0112      	lsls	r2, r2, #4
 8012e74:	601a      	str	r2, [r3, #0]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	335c      	adds	r3, #92	; 0x5c
 8012e7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e7e:	440a      	add	r2, r1
 8012e80:	601a      	str	r2, [r3, #0]
 8012e82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e84:	1d1a      	adds	r2, r3, #4
 8012e86:	66ba      	str	r2, [r7, #104]	; 0x68
 8012e88:	6818      	ldr	r0, [r3, #0]
 8012e8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e8e:	1ad3      	subs	r3, r2, r3
 8012e90:	4619      	mov	r1, r3
 8012e92:	f7ff fd17 	bl	80128c4 <MULSHIFT32>
 8012e96:	4602      	mov	r2, r0
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	3360      	adds	r3, #96	; 0x60
 8012e9c:	0112      	lsls	r2, r2, #4
 8012e9e:	601a      	str	r2, [r3, #0]

	/* second pass */
	for (i = 4; i > 0; i--) {
 8012ea0:	2304      	movs	r3, #4
 8012ea2:	677b      	str	r3, [r7, #116]	; 0x74
 8012ea4:	e104      	b.n	80130b0 <xmp3fixpt_FDCT32+0x7c8>
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	69db      	ldr	r3, [r3, #28]
 8012eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	68db      	ldr	r3, [r3, #12]
 8012eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	691b      	ldr	r3, [r3, #16]
 8012ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 8012ebe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec2:	4413      	add	r3, r2
 8012ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8012ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012ec8:	1d1a      	adds	r2, r3, #4
 8012eca:	66ba      	str	r2, [r7, #104]	; 0x68
 8012ecc:	6818      	ldr	r0, [r3, #0]
 8012ece:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	f7ff fcf5 	bl	80128c4 <MULSHIFT32>
 8012eda:	4603      	mov	r3, r0
 8012edc:	005b      	lsls	r3, r3, #1
 8012ede:	62bb      	str	r3, [r7, #40]	; 0x28
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 8012ee0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee4:	4413      	add	r3, r2
 8012ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012eea:	1d1a      	adds	r2, r3, #4
 8012eec:	66ba      	str	r2, [r7, #104]	; 0x68
 8012eee:	6818      	ldr	r0, [r3, #0]
 8012ef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef4:	1ad3      	subs	r3, r2, r3
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	f7ff fce4 	bl	80128c4 <MULSHIFT32>
 8012efc:	4603      	mov	r3, r0
 8012efe:	00db      	lsls	r3, r3, #3
 8012f00:	627b      	str	r3, [r7, #36]	; 0x24
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 8012f02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f06:	4413      	add	r3, r2
 8012f08:	663b      	str	r3, [r7, #96]	; 0x60
 8012f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f0c:	6818      	ldr	r0, [r3, #0]
 8012f0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f12:	1ad3      	subs	r3, r2, r3
 8012f14:	4619      	mov	r1, r3
 8012f16:	f7ff fcd5 	bl	80128c4 <MULSHIFT32>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	005b      	lsls	r3, r3, #1
 8012f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 8012f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f24:	4413      	add	r3, r2
 8012f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f2a:	1d1a      	adds	r2, r3, #4
 8012f2c:	66ba      	str	r2, [r7, #104]	; 0x68
 8012f2e:	6818      	ldr	r0, [r3, #0]
 8012f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f34:	1ad3      	subs	r3, r2, r3
 8012f36:	4619      	mov	r1, r3
 8012f38:	f7ff fcc4 	bl	80128c4 <MULSHIFT32>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	005b      	lsls	r3, r3, #1
 8012f40:	633b      	str	r3, [r7, #48]	; 0x30

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	699b      	ldr	r3, [r3, #24]
 8012f4c:	623b      	str	r3, [r7, #32]
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	689b      	ldr	r3, [r3, #8]
 8012f52:	657b      	str	r3, [r7, #84]	; 0x54
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	695b      	ldr	r3, [r3, #20]
 8012f58:	61fb      	str	r3, [r7, #28]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 8012f5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f5c:	6a3b      	ldr	r3, [r7, #32]
 8012f5e:	4413      	add	r3, r2
 8012f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f64:	1d1a      	adds	r2, r3, #4
 8012f66:	66ba      	str	r2, [r7, #104]	; 0x68
 8012f68:	6818      	ldr	r0, [r3, #0]
 8012f6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f6c:	6a3b      	ldr	r3, [r7, #32]
 8012f6e:	1ad3      	subs	r3, r2, r3
 8012f70:	4619      	mov	r1, r3
 8012f72:	f7ff fca7 	bl	80128c4 <MULSHIFT32>
 8012f76:	4603      	mov	r3, r0
 8012f78:	005b      	lsls	r3, r3, #1
 8012f7a:	61bb      	str	r3, [r7, #24]
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 8012f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f7e:	69fb      	ldr	r3, [r7, #28]
 8012f80:	4413      	add	r3, r2
 8012f82:	647b      	str	r3, [r7, #68]	; 0x44
 8012f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f86:	1d1a      	adds	r2, r3, #4
 8012f88:	66ba      	str	r2, [r7, #104]	; 0x68
 8012f8a:	6818      	ldr	r0, [r3, #0]
 8012f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f8e:	69fb      	ldr	r3, [r7, #28]
 8012f90:	1ad3      	subs	r3, r2, r3
 8012f92:	4619      	mov	r1, r3
 8012f94:	f7ff fc96 	bl	80128c4 <MULSHIFT32>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	617b      	str	r3, [r7, #20]
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 8012f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fa2:	4413      	add	r3, r2
 8012fa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8012fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fa8:	6818      	ldr	r0, [r3, #0]
 8012faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fae:	1ad3      	subs	r3, r2, r3
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	f7ff fc87 	bl	80128c4 <MULSHIFT32>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	009b      	lsls	r3, r3, #2
 8012fba:	657b      	str	r3, [r7, #84]	; 0x54
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 8012fbc:	697a      	ldr	r2, [r7, #20]
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	4413      	add	r3, r2
 8012fc2:	61fb      	str	r3, [r7, #28]
 8012fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fc6:	1d1a      	adds	r2, r3, #4
 8012fc8:	66ba      	str	r2, [r7, #104]	; 0x68
 8012fca:	6818      	ldr	r0, [r3, #0]
 8012fcc:	69ba      	ldr	r2, [r7, #24]
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	1ad3      	subs	r3, r2, r3
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	f7ff fc76 	bl	80128c4 <MULSHIFT32>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	623b      	str	r3, [r7, #32]

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 8012fde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fe2:	4413      	add	r3, r2
 8012fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8012fe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fea:	1ad3      	subs	r3, r2, r3
 8012fec:	4619      	mov	r1, r3
 8012fee:	4846      	ldr	r0, [pc, #280]	; (8013108 <xmp3fixpt_FDCT32+0x820>)
 8012ff0:	f7ff fc68 	bl	80128c4 <MULSHIFT32>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	64bb      	str	r3, [r7, #72]	; 0x48
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 8012ffa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ffe:	4413      	add	r3, r2
 8013000:	647b      	str	r3, [r7, #68]	; 0x44
 8013002:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013006:	1ad3      	subs	r3, r2, r3
 8013008:	4619      	mov	r1, r3
 801300a:	483f      	ldr	r0, [pc, #252]	; (8013108 <xmp3fixpt_FDCT32+0x820>)
 801300c:	f7ff fc5a 	bl	80128c4 <MULSHIFT32>
 8013010:	4603      	mov	r3, r0
 8013012:	005b      	lsls	r3, r3, #1
 8013014:	64fb      	str	r3, [r7, #76]	; 0x4c
		buf[0] = b0;	    buf[1] = b1;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801301a:	601a      	str	r2, [r3, #0]
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	3304      	adds	r3, #4
 8013020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013022:	601a      	str	r2, [r3, #0]
		buf[2] = b2 + b3;	buf[3] = b3;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	3308      	adds	r3, #8
 8013028:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801302a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801302c:	440a      	add	r2, r1
 801302e:	601a      	str	r2, [r3, #0]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	330c      	adds	r3, #12
 8013034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013036:	601a      	str	r2, [r3, #0]

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 8013038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801303a:	69fb      	ldr	r3, [r7, #28]
 801303c:	4413      	add	r3, r2
 801303e:	627b      	str	r3, [r7, #36]	; 0x24
 8013040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	1ad3      	subs	r3, r2, r3
 8013046:	4619      	mov	r1, r3
 8013048:	482f      	ldr	r0, [pc, #188]	; (8013108 <xmp3fixpt_FDCT32+0x820>)
 801304a:	f7ff fc3b 	bl	80128c4 <MULSHIFT32>
 801304e:	4603      	mov	r3, r0
 8013050:	005b      	lsls	r3, r3, #1
 8013052:	617b      	str	r3, [r7, #20]
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 8013054:	6a3a      	ldr	r2, [r7, #32]
 8013056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013058:	4413      	add	r3, r2
 801305a:	61bb      	str	r3, [r7, #24]
 801305c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801305e:	6a3b      	ldr	r3, [r7, #32]
 8013060:	1ad3      	subs	r3, r2, r3
 8013062:	4619      	mov	r1, r3
 8013064:	4828      	ldr	r0, [pc, #160]	; (8013108 <xmp3fixpt_FDCT32+0x820>)
 8013066:	f7ff fc2d 	bl	80128c4 <MULSHIFT32>
 801306a:	4603      	mov	r3, r0
 801306c:	005b      	lsls	r3, r3, #1
 801306e:	62bb      	str	r3, [r7, #40]	; 0x28
		b6 += b7;
 8013070:	69ba      	ldr	r2, [r7, #24]
 8013072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013074:	4413      	add	r3, r2
 8013076:	61bb      	str	r3, [r7, #24]
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	3310      	adds	r3, #16
 801307c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801307e:	69ba      	ldr	r2, [r7, #24]
 8013080:	440a      	add	r2, r1
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	3314      	adds	r3, #20
 8013088:	6979      	ldr	r1, [r7, #20]
 801308a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801308c:	440a      	add	r2, r1
 801308e:	601a      	str	r2, [r3, #0]
		buf[6] = b5 + b6;	buf[7] = b7;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	3318      	adds	r3, #24
 8013094:	6979      	ldr	r1, [r7, #20]
 8013096:	69ba      	ldr	r2, [r7, #24]
 8013098:	440a      	add	r2, r1
 801309a:	601a      	str	r2, [r3, #0]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	331c      	adds	r3, #28
 80130a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130a2:	601a      	str	r2, [r3, #0]

		buf += 8;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	3320      	adds	r3, #32
 80130a8:	60fb      	str	r3, [r7, #12]
	for (i = 4; i > 0; i--) {
 80130aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80130ac:	3b01      	subs	r3, #1
 80130ae:	677b      	str	r3, [r7, #116]	; 0x74
 80130b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	f73f aef7 	bgt.w	8012ea6 <xmp3fixpt_FDCT32+0x5be>
	}
	buf -= 32;	/* reset */
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	3b80      	subs	r3, #128	; 0x80
 80130bc:	60fb      	str	r3, [r7, #12]

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	1ad3      	subs	r3, r2, r3
 80130c4:	f003 0307 	and.w	r3, r3, #7
 80130c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	683a      	ldr	r2, [r7, #0]
 80130d0:	2a00      	cmp	r2, #0
 80130d2:	d001      	beq.n	80130d8 <xmp3fixpt_FDCT32+0x7f0>
 80130d4:	2200      	movs	r2, #0
 80130d6:	e001      	b.n	80130dc <xmp3fixpt_FDCT32+0x7f4>
 80130d8:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80130dc:	4413      	add	r3, r2
 80130de:	68ba      	ldr	r2, [r7, #8]
 80130e0:	4413      	add	r3, r2
 80130e2:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 0];				d[0] = d[8] = s;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	673b      	str	r3, [r7, #112]	; 0x70
 80130ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130ec:	3320      	adds	r3, #32
 80130ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80130f0:	601a      	str	r2, [r3, #0]
 80130f2:	681a      	ldr	r2, [r3, #0]
 80130f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130f6:	601a      	str	r2, [r3, #0]
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	683a      	ldr	r2, [r7, #0]
 80130fe:	2a00      	cmp	r2, #0
 8013100:	d004      	beq.n	801310c <xmp3fixpt_FDCT32+0x824>
 8013102:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8013106:	e002      	b.n	801310e <xmp3fixpt_FDCT32+0x826>
 8013108:	5a82799a 	.word	0x5a82799a
 801310c:	2200      	movs	r2, #0
 801310e:	4413      	add	r3, r2
 8013110:	68ba      	ldr	r2, [r7, #8]
 8013112:	4413      	add	r3, r2
 8013114:	667b      	str	r3, [r7, #100]	; 0x64

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	673b      	str	r3, [r7, #112]	; 0x70
 801311c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801311e:	3320      	adds	r3, #32
 8013120:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013122:	601a      	str	r2, [r3, #0]
 8013124:	681a      	ldr	r2, [r3, #0]
 8013126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013128:	601a      	str	r2, [r3, #0]
 801312a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801312c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013130:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[25] + buf[29];
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	3364      	adds	r3, #100	; 0x64
 8013136:	681a      	ldr	r2, [r3, #0]
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	3374      	adds	r3, #116	; 0x74
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	4413      	add	r3, r2
 8013140:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	3344      	adds	r3, #68	; 0x44
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801314a:	4413      	add	r3, r2
 801314c:	673b      	str	r3, [r7, #112]	; 0x70
 801314e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013150:	3320      	adds	r3, #32
 8013152:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013154:	601a      	str	r2, [r3, #0]
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801315a:	601a      	str	r2, [r3, #0]
 801315c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801315e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013162:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	3324      	adds	r3, #36	; 0x24
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	3334      	adds	r3, #52	; 0x34
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4413      	add	r3, r2
 8013172:	673b      	str	r3, [r7, #112]	; 0x70
 8013174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013176:	3320      	adds	r3, #32
 8013178:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801317a:	601a      	str	r2, [r3, #0]
 801317c:	681a      	ldr	r2, [r3, #0]
 801317e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013180:	601a      	str	r2, [r3, #0]
 8013182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013184:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013188:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	3354      	adds	r3, #84	; 0x54
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013192:	4413      	add	r3, r2
 8013194:	673b      	str	r3, [r7, #112]	; 0x70
 8013196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013198:	3320      	adds	r3, #32
 801319a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801319c:	601a      	str	r2, [r3, #0]
 801319e:	681a      	ldr	r2, [r3, #0]
 80131a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131a2:	601a      	str	r2, [r3, #0]
 80131a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131aa:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[29] + buf[27];
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	3374      	adds	r3, #116	; 0x74
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	336c      	adds	r3, #108	; 0x6c
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	4413      	add	r3, r2
 80131ba:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	695b      	ldr	r3, [r3, #20]
 80131c0:	673b      	str	r3, [r7, #112]	; 0x70
 80131c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131c4:	3320      	adds	r3, #32
 80131c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80131c8:	601a      	str	r2, [r3, #0]
 80131ca:	681a      	ldr	r2, [r3, #0]
 80131cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131ce:	601a      	str	r2, [r3, #0]
 80131d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131d6:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	3354      	adds	r3, #84	; 0x54
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80131e0:	4413      	add	r3, r2
 80131e2:	673b      	str	r3, [r7, #112]	; 0x70
 80131e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131e6:	3320      	adds	r3, #32
 80131e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80131ea:	601a      	str	r2, [r3, #0]
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131f0:	601a      	str	r2, [r3, #0]
 80131f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131f8:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	3334      	adds	r3, #52	; 0x34
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	332c      	adds	r3, #44	; 0x2c
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	4413      	add	r3, r2
 8013208:	673b      	str	r3, [r7, #112]	; 0x70
 801320a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801320c:	3320      	adds	r3, #32
 801320e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013210:	601a      	str	r2, [r3, #0]
 8013212:	681a      	ldr	r2, [r3, #0]
 8013214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013216:	601a      	str	r2, [r3, #0]
 8013218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801321a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801321e:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	334c      	adds	r3, #76	; 0x4c
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013228:	4413      	add	r3, r2
 801322a:	673b      	str	r3, [r7, #112]	; 0x70
 801322c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801322e:	3320      	adds	r3, #32
 8013230:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013232:	601a      	str	r2, [r3, #0]
 8013234:	681a      	ldr	r2, [r3, #0]
 8013236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013238:	601a      	str	r2, [r3, #0]
 801323a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801323c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013240:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[27] + buf[31];
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	336c      	adds	r3, #108	; 0x6c
 8013246:	681a      	ldr	r2, [r3, #0]
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	337c      	adds	r3, #124	; 0x7c
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	4413      	add	r3, r2
 8013250:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	673b      	str	r3, [r7, #112]	; 0x70
 8013258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801325a:	3320      	adds	r3, #32
 801325c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801325e:	601a      	str	r2, [r3, #0]
 8013260:	681a      	ldr	r2, [r3, #0]
 8013262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013264:	601a      	str	r2, [r3, #0]
 8013266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013268:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801326c:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	334c      	adds	r3, #76	; 0x4c
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013276:	4413      	add	r3, r2
 8013278:	673b      	str	r3, [r7, #112]	; 0x70
 801327a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801327c:	3320      	adds	r3, #32
 801327e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013280:	601a      	str	r2, [r3, #0]
 8013282:	681a      	ldr	r2, [r3, #0]
 8013284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013286:	601a      	str	r2, [r3, #0]
 8013288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801328a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801328e:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	332c      	adds	r3, #44	; 0x2c
 8013294:	681a      	ldr	r2, [r3, #0]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	333c      	adds	r3, #60	; 0x3c
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4413      	add	r3, r2
 801329e:	673b      	str	r3, [r7, #112]	; 0x70
 80132a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132a2:	3320      	adds	r3, #32
 80132a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80132a6:	601a      	str	r2, [r3, #0]
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132ac:	601a      	str	r2, [r3, #0]
 80132ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80132b4:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	335c      	adds	r3, #92	; 0x5c
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132be:	4413      	add	r3, r2
 80132c0:	673b      	str	r3, [r7, #112]	; 0x70
 80132c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132c4:	3320      	adds	r3, #32
 80132c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80132c8:	601a      	str	r2, [r3, #0]
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132ce:	601a      	str	r2, [r3, #0]
 80132d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80132d6:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[31];
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80132dc:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	69db      	ldr	r3, [r3, #28]
 80132e2:	673b      	str	r3, [r7, #112]	; 0x70
 80132e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132e6:	3320      	adds	r3, #32
 80132e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80132ea:	601a      	str	r2, [r3, #0]
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132f0:	601a      	str	r2, [r3, #0]
 80132f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80132f8:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	335c      	adds	r3, #92	; 0x5c
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013302:	4413      	add	r3, r2
 8013304:	673b      	str	r3, [r7, #112]	; 0x70
 8013306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013308:	3320      	adds	r3, #32
 801330a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801330c:	601a      	str	r2, [r3, #0]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013312:	601a      	str	r2, [r3, #0]
 8013314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013316:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801331a:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013320:	673b      	str	r3, [r7, #112]	; 0x70
 8013322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013324:	3320      	adds	r3, #32
 8013326:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013328:	601a      	str	r2, [r3, #0]
 801332a:	681a      	ldr	r2, [r3, #0]
 801332c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801332e:	601a      	str	r2, [r3, #0]
 8013330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013332:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013336:	667b      	str	r3, [r7, #100]	; 0x64
	s = tmp;					d[0] = d[8] = s;
 8013338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801333a:	673b      	str	r3, [r7, #112]	; 0x70
 801333c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801333e:	3320      	adds	r3, #32
 8013340:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013342:	601a      	str	r2, [r3, #0]
 8013344:	681a      	ldr	r2, [r3, #0]
 8013346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013348:	601a      	str	r2, [r3, #0]

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	1ad3      	subs	r3, r2, r3
 8013350:	f003 0307 	and.w	r3, r3, #7
 8013354:	3310      	adds	r3, #16
 8013356:	009b      	lsls	r3, r3, #2
 8013358:	683a      	ldr	r2, [r7, #0]
 801335a:	2a00      	cmp	r2, #0
 801335c:	d001      	beq.n	8013362 <xmp3fixpt_FDCT32+0xa7a>
 801335e:	2200      	movs	r2, #0
 8013360:	e001      	b.n	8013366 <xmp3fixpt_FDCT32+0xa7e>
 8013362:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8013366:	4413      	add	r3, r2
 8013368:	68ba      	ldr	r2, [r7, #8]
 801336a:	4413      	add	r3, r2
 801336c:	667b      	str	r3, [r7, #100]	; 0x64

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	673b      	str	r3, [r7, #112]	; 0x70
 8013374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013376:	3320      	adds	r3, #32
 8013378:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801337a:	601a      	str	r2, [r3, #0]
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013380:	601a      	str	r2, [r3, #0]
 8013382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013384:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013388:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[30] + buf[25];
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	3378      	adds	r3, #120	; 0x78
 801338e:	681a      	ldr	r2, [r3, #0]
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	3364      	adds	r3, #100	; 0x64
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	4413      	add	r3, r2
 8013398:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	3344      	adds	r3, #68	; 0x44
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133a2:	4413      	add	r3, r2
 80133a4:	673b      	str	r3, [r7, #112]	; 0x70
 80133a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133a8:	3320      	adds	r3, #32
 80133aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80133ac:	601a      	str	r2, [r3, #0]
 80133ae:	681a      	ldr	r2, [r3, #0]
 80133b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133b2:	601a      	str	r2, [r3, #0]
 80133b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80133ba:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	3338      	adds	r3, #56	; 0x38
 80133c0:	681a      	ldr	r2, [r3, #0]
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	3324      	adds	r3, #36	; 0x24
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	4413      	add	r3, r2
 80133ca:	673b      	str	r3, [r7, #112]	; 0x70
 80133cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133ce:	3320      	adds	r3, #32
 80133d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80133d2:	601a      	str	r2, [r3, #0]
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133d8:	601a      	str	r2, [r3, #0]
 80133da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80133e0:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	3358      	adds	r3, #88	; 0x58
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133ea:	4413      	add	r3, r2
 80133ec:	673b      	str	r3, [r7, #112]	; 0x70
 80133ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133f0:	3320      	adds	r3, #32
 80133f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80133f4:	601a      	str	r2, [r3, #0]
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133fa:	601a      	str	r2, [r3, #0]
 80133fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013402:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	699b      	ldr	r3, [r3, #24]
 8013408:	673b      	str	r3, [r7, #112]	; 0x70
 801340a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801340c:	3320      	adds	r3, #32
 801340e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013410:	601a      	str	r2, [r3, #0]
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013416:	601a      	str	r2, [r3, #0]
 8013418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801341a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801341e:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[26] + buf[30];
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	3368      	adds	r3, #104	; 0x68
 8013424:	681a      	ldr	r2, [r3, #0]
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	3378      	adds	r3, #120	; 0x78
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	4413      	add	r3, r2
 801342e:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	3358      	adds	r3, #88	; 0x58
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013438:	4413      	add	r3, r2
 801343a:	673b      	str	r3, [r7, #112]	; 0x70
 801343c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801343e:	3320      	adds	r3, #32
 8013440:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013442:	601a      	str	r2, [r3, #0]
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013448:	601a      	str	r2, [r3, #0]
 801344a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801344c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013450:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	3328      	adds	r3, #40	; 0x28
 8013456:	681a      	ldr	r2, [r3, #0]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	3338      	adds	r3, #56	; 0x38
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4413      	add	r3, r2
 8013460:	673b      	str	r3, [r7, #112]	; 0x70
 8013462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013464:	3320      	adds	r3, #32
 8013466:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013468:	601a      	str	r2, [r3, #0]
 801346a:	681a      	ldr	r2, [r3, #0]
 801346c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801346e:	601a      	str	r2, [r3, #0]
 8013470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013472:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013476:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	3348      	adds	r3, #72	; 0x48
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013480:	4413      	add	r3, r2
 8013482:	673b      	str	r3, [r7, #112]	; 0x70
 8013484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013486:	3320      	adds	r3, #32
 8013488:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801348a:	601a      	str	r2, [r3, #0]
 801348c:	681a      	ldr	r2, [r3, #0]
 801348e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013490:	601a      	str	r2, [r3, #0]
 8013492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013494:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013498:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	689b      	ldr	r3, [r3, #8]
 801349e:	673b      	str	r3, [r7, #112]	; 0x70
 80134a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134a2:	3320      	adds	r3, #32
 80134a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80134a6:	601a      	str	r2, [r3, #0]
 80134a8:	681a      	ldr	r2, [r3, #0]
 80134aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134ac:	601a      	str	r2, [r3, #0]
 80134ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80134b4:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[28] + buf[26];
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	3370      	adds	r3, #112	; 0x70
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	3368      	adds	r3, #104	; 0x68
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	4413      	add	r3, r2
 80134c4:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	3348      	adds	r3, #72	; 0x48
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80134ce:	4413      	add	r3, r2
 80134d0:	673b      	str	r3, [r7, #112]	; 0x70
 80134d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134d4:	3320      	adds	r3, #32
 80134d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80134d8:	601a      	str	r2, [r3, #0]
 80134da:	681a      	ldr	r2, [r3, #0]
 80134dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134de:	601a      	str	r2, [r3, #0]
 80134e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80134e6:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	3330      	adds	r3, #48	; 0x30
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	3328      	adds	r3, #40	; 0x28
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	4413      	add	r3, r2
 80134f6:	673b      	str	r3, [r7, #112]	; 0x70
 80134f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134fa:	3320      	adds	r3, #32
 80134fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80134fe:	601a      	str	r2, [r3, #0]
 8013500:	681a      	ldr	r2, [r3, #0]
 8013502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013504:	601a      	str	r2, [r3, #0]
 8013506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013508:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801350c:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	3350      	adds	r3, #80	; 0x50
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013516:	4413      	add	r3, r2
 8013518:	673b      	str	r3, [r7, #112]	; 0x70
 801351a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801351c:	3320      	adds	r3, #32
 801351e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013520:	601a      	str	r2, [r3, #0]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013526:	601a      	str	r2, [r3, #0]
 8013528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801352a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801352e:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	691b      	ldr	r3, [r3, #16]
 8013534:	673b      	str	r3, [r7, #112]	; 0x70
 8013536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013538:	3320      	adds	r3, #32
 801353a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801353c:	601a      	str	r2, [r3, #0]
 801353e:	681a      	ldr	r2, [r3, #0]
 8013540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013542:	601a      	str	r2, [r3, #0]
 8013544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013546:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801354a:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[24] + buf[28];
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	3360      	adds	r3, #96	; 0x60
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	3370      	adds	r3, #112	; 0x70
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	4413      	add	r3, r2
 801355a:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	3350      	adds	r3, #80	; 0x50
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013564:	4413      	add	r3, r2
 8013566:	673b      	str	r3, [r7, #112]	; 0x70
 8013568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801356a:	3320      	adds	r3, #32
 801356c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801356e:	601a      	str	r2, [r3, #0]
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013574:	601a      	str	r2, [r3, #0]
 8013576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013578:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801357c:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	3320      	adds	r3, #32
 8013582:	681a      	ldr	r2, [r3, #0]
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	3330      	adds	r3, #48	; 0x30
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4413      	add	r3, r2
 801358c:	673b      	str	r3, [r7, #112]	; 0x70
 801358e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013590:	3320      	adds	r3, #32
 8013592:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013594:	601a      	str	r2, [r3, #0]
 8013596:	681a      	ldr	r2, [r3, #0]
 8013598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801359a:	601a      	str	r2, [r3, #0]
 801359c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801359e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80135a2:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[16] + tmp;			d[0] = d[8] = s;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	3340      	adds	r3, #64	; 0x40
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80135ac:	4413      	add	r3, r2
 80135ae:	673b      	str	r3, [r7, #112]	; 0x70
 80135b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135b2:	3320      	adds	r3, #32
 80135b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80135b6:	601a      	str	r2, [r3, #0]
 80135b8:	681a      	ldr	r2, [r3, #0]
 80135ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135bc:	601a      	str	r2, [r3, #0]

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 80135be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f000 80b2 	beq.w	801372a <xmp3fixpt_FDCT32+0xe42>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 80135c6:	687a      	ldr	r2, [r7, #4]
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	1ad3      	subs	r3, r2, r3
 80135cc:	f003 0307 	and.w	r3, r3, #7
 80135d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80135d4:	009b      	lsls	r3, r3, #2
 80135d6:	683a      	ldr	r2, [r7, #0]
 80135d8:	2a00      	cmp	r2, #0
 80135da:	d001      	beq.n	80135e0 <xmp3fixpt_FDCT32+0xcf8>
 80135dc:	2200      	movs	r2, #0
 80135de:	e001      	b.n	80135e4 <xmp3fixpt_FDCT32+0xcfc>
 80135e0:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80135e4:	4413      	add	r3, r2
 80135e6:	68ba      	ldr	r2, [r7, #8]
 80135e8:	4413      	add	r3, r2
 80135ea:	667b      	str	r3, [r7, #100]	; 0x64
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 80135ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	673b      	str	r3, [r7, #112]	; 0x70
 80135f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80135f4:	17db      	asrs	r3, r3, #31
 80135f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80135f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80135fa:	f1c3 031f 	rsb	r3, r3, #31
 80135fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013600:	fa42 f303 	asr.w	r3, r2, r3
 8013604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013606:	429a      	cmp	r2, r3
 8013608:	d008      	beq.n	801361c <xmp3fixpt_FDCT32+0xd34>
 801360a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801360e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013610:	fa22 f303 	lsr.w	r3, r2, r3
 8013614:	3b01      	subs	r3, #1
 8013616:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013618:	4053      	eors	r3, r2
 801361a:	673b      	str	r3, [r7, #112]	; 0x70
 801361c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801361e:	3320      	adds	r3, #32
 8013620:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013622:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013624:	fa01 f202 	lsl.w	r2, r1, r2
 8013628:	601a      	str	r2, [r3, #0]
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801362e:	601a      	str	r2, [r3, #0]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	683a      	ldr	r2, [r7, #0]
 8013636:	2a00      	cmp	r2, #0
 8013638:	d002      	beq.n	8013640 <xmp3fixpt_FDCT32+0xd58>
 801363a:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 801363e:	e000      	b.n	8013642 <xmp3fixpt_FDCT32+0xd5a>
 8013640:	2200      	movs	r2, #0
 8013642:	4413      	add	r3, r2
 8013644:	68ba      	ldr	r2, [r7, #8]
 8013646:	4413      	add	r3, r2
 8013648:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 16; i <= 31; i++) {
 801364a:	2310      	movs	r3, #16
 801364c:	677b      	str	r3, [r7, #116]	; 0x74
 801364e:	e028      	b.n	80136a2 <xmp3fixpt_FDCT32+0xdba>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 8013650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	673b      	str	r3, [r7, #112]	; 0x70
 8013656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013658:	17db      	asrs	r3, r3, #31
 801365a:	637b      	str	r3, [r7, #52]	; 0x34
 801365c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801365e:	f1c3 031f 	rsb	r3, r3, #31
 8013662:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013664:	fa42 f303 	asr.w	r3, r2, r3
 8013668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801366a:	429a      	cmp	r2, r3
 801366c:	d008      	beq.n	8013680 <xmp3fixpt_FDCT32+0xd98>
 801366e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013674:	fa22 f303 	lsr.w	r3, r2, r3
 8013678:	3b01      	subs	r3, #1
 801367a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801367c:	4053      	eors	r3, r2
 801367e:	673b      	str	r3, [r7, #112]	; 0x70
 8013680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013682:	3320      	adds	r3, #32
 8013684:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013688:	fa01 f202 	lsl.w	r2, r1, r2
 801368c:	601a      	str	r2, [r3, #0]
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013692:	601a      	str	r2, [r3, #0]
 8013694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013696:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801369a:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 16; i <= 31; i++) {
 801369c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801369e:	3301      	adds	r3, #1
 80136a0:	677b      	str	r3, [r7, #116]	; 0x74
 80136a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80136a4:	2b1f      	cmp	r3, #31
 80136a6:	ddd3      	ble.n	8013650 <xmp3fixpt_FDCT32+0xd68>
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 80136a8:	687a      	ldr	r2, [r7, #4]
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	1ad3      	subs	r3, r2, r3
 80136ae:	f003 0307 	and.w	r3, r3, #7
 80136b2:	3310      	adds	r3, #16
 80136b4:	009b      	lsls	r3, r3, #2
 80136b6:	683a      	ldr	r2, [r7, #0]
 80136b8:	2a00      	cmp	r2, #0
 80136ba:	d001      	beq.n	80136c0 <xmp3fixpt_FDCT32+0xdd8>
 80136bc:	2200      	movs	r2, #0
 80136be:	e001      	b.n	80136c4 <xmp3fixpt_FDCT32+0xddc>
 80136c0:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80136c4:	4413      	add	r3, r2
 80136c6:	68ba      	ldr	r2, [r7, #8]
 80136c8:	4413      	add	r3, r2
 80136ca:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 15; i >= 0; i--) {
 80136cc:	230f      	movs	r3, #15
 80136ce:	677b      	str	r3, [r7, #116]	; 0x74
 80136d0:	e028      	b.n	8013724 <xmp3fixpt_FDCT32+0xe3c>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 80136d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	673b      	str	r3, [r7, #112]	; 0x70
 80136d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80136da:	17db      	asrs	r3, r3, #31
 80136dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80136de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80136e0:	f1c3 031f 	rsb	r3, r3, #31
 80136e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80136e6:	fa42 f303 	asr.w	r3, r2, r3
 80136ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d008      	beq.n	8013702 <xmp3fixpt_FDCT32+0xe1a>
 80136f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80136f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80136f6:	fa22 f303 	lsr.w	r3, r2, r3
 80136fa:	3b01      	subs	r3, #1
 80136fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136fe:	4053      	eors	r3, r2
 8013700:	673b      	str	r3, [r7, #112]	; 0x70
 8013702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013704:	3320      	adds	r3, #32
 8013706:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801370a:	fa01 f202 	lsl.w	r2, r1, r2
 801370e:	601a      	str	r2, [r3, #0]
 8013710:	681a      	ldr	r2, [r3, #0]
 8013712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013714:	601a      	str	r2, [r3, #0]
 8013716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013718:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801371c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 15; i >= 0; i--) {
 801371e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013720:	3b01      	subs	r3, #1
 8013722:	677b      	str	r3, [r7, #116]	; 0x74
 8013724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013726:	2b00      	cmp	r3, #0
 8013728:	dad3      	bge.n	80136d2 <xmp3fixpt_FDCT32+0xdea>
		}
	}
}
 801372a:	bf00      	nop
 801372c:	3778      	adds	r7, #120	; 0x78
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop

08013734 <CLZ>:

	return t;
}

static __inline int CLZ(int x)
{
 8013734:	b480      	push	{r7}
 8013736:	b085      	sub	sp, #20
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
	int numZeros;

	if (!x)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d101      	bne.n	8013746 <CLZ+0x12>
		return (sizeof(int) * 8);
 8013742:	2320      	movs	r3, #32
 8013744:	e00c      	b.n	8013760 <CLZ+0x2c>

	numZeros = 0;
 8013746:	2300      	movs	r3, #0
 8013748:	60fb      	str	r3, [r7, #12]
	while (!(x & 0x80000000)) {
 801374a:	e005      	b.n	8013758 <CLZ+0x24>
		numZeros++;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	3301      	adds	r3, #1
 8013750:	60fb      	str	r3, [r7, #12]
		x <<= 1;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	005b      	lsls	r3, r3, #1
 8013756:	607b      	str	r3, [r7, #4]
	while (!(x & 0x80000000)) {
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2b00      	cmp	r3, #0
 801375c:	daf6      	bge.n	801374c <CLZ+0x18>
	} 

	return numZeros;
 801375e:	68fb      	ldr	r3, [r7, #12]
}
 8013760:	4618      	mov	r0, r3
 8013762:	3714      	adds	r7, #20
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr

0801376c <xmp3fixpt_Dequantize>:
 *                round to PCM (>> by 15 less than we otherwise would have).
 *              Equivalently, we can think of the dequantized coefficients as 
 *                Q(DQ_FRACBITS_OUT - 15) with no implicit bias. 
 **************************************************************************************/
int Dequantize(MP3DecInfo *mp3DecInfo, int gr)
{
 801376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801376e:	b095      	sub	sp, #84	; 0x54
 8013770:	af06      	add	r7, sp, #24
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	6039      	str	r1, [r7, #0]
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d013      	beq.n	80137a4 <xmp3fixpt_Dequantize+0x38>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d00f      	beq.n	80137a4 <xmp3fixpt_Dequantize+0x38>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d00b      	beq.n	80137a4 <xmp3fixpt_Dequantize+0x38>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	689b      	ldr	r3, [r3, #8]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d007      	beq.n	80137a4 <xmp3fixpt_Dequantize+0x38>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	68db      	ldr	r3, [r3, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 8013798:	2b00      	cmp	r3, #0
 801379a:	d003      	beq.n	80137a4 <xmp3fixpt_Dequantize+0x38>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	691b      	ldr	r3, [r3, #16]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d102      	bne.n	80137aa <xmp3fixpt_Dequantize+0x3e>
		return -1;
 80137a4:	f04f 33ff 	mov.w	r3, #4294967295
 80137a8:	e1a2      	b.n	8013af0 <xmp3fixpt_Dequantize+0x384>

	fh = (FrameHeader *)(mp3DecInfo->FrameHeaderPS);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* si is an array of up to 4 structs, stored as gr0ch0, gr0ch1, gr1ch0, gr1ch1 */
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	627b      	str	r3, [r7, #36]	; 0x24
	sfi = (ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	689b      	ldr	r3, [r3, #8]
 80137ba:	623b      	str	r3, [r7, #32]
	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	61fb      	str	r3, [r7, #28]
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	691b      	ldr	r3, [r3, #16]
 80137c6:	61bb      	str	r3, [r7, #24]
	cbi = di->cbi;
 80137c8:	69bb      	ldr	r3, [r7, #24]
 80137ca:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80137ce:	617b      	str	r3, [r7, #20]
	mOut[0] = mOut[1] = 0;
 80137d0:	2300      	movs	r3, #0
 80137d2:	613b      	str	r3, [r7, #16]
 80137d4:	693b      	ldr	r3, [r7, #16]
 80137d6:	60fb      	str	r3, [r7, #12]

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 80137d8:	2300      	movs	r3, #0
 80137da:	633b      	str	r3, [r7, #48]	; 0x30
 80137dc:	e045      	b.n	801386a <xmp3fixpt_Dequantize+0xfe>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 80137de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137e0:	4613      	mov	r3, r2
 80137e2:	00db      	lsls	r3, r3, #3
 80137e4:	4413      	add	r3, r2
 80137e6:	021b      	lsls	r3, r3, #8
 80137e8:	69fa      	ldr	r2, [r7, #28]
 80137ea:	18d4      	adds	r4, r2, r3
 80137ec:	69bd      	ldr	r5, [r7, #24]
 80137ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f0:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	69fa      	ldr	r2, [r7, #28]
 80137f8:	18d6      	adds	r6, r2, r3
 80137fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fc:	461a      	mov	r2, r3
 80137fe:	00d2      	lsls	r2, r2, #3
 8013800:	441a      	add	r2, r3
 8013802:	00d3      	lsls	r3, r2, #3
 8013804:	461a      	mov	r2, r3
 8013806:	6839      	ldr	r1, [r7, #0]
 8013808:	460b      	mov	r3, r1
 801380a:	00db      	lsls	r3, r3, #3
 801380c:	440b      	add	r3, r1
 801380e:	011b      	lsls	r3, r3, #4
 8013810:	4413      	add	r3, r2
 8013812:	3328      	adds	r3, #40	; 0x28
 8013814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013816:	18d0      	adds	r0, r2, r3
 8013818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381a:	461a      	mov	r2, r3
 801381c:	0152      	lsls	r2, r2, #5
 801381e:	1ad2      	subs	r2, r2, r3
 8013820:	0053      	lsls	r3, r2, #1
 8013822:	461a      	mov	r2, r3
 8013824:	6839      	ldr	r1, [r7, #0]
 8013826:	460b      	mov	r3, r1
 8013828:	015b      	lsls	r3, r3, #5
 801382a:	1a5b      	subs	r3, r3, r1
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	4413      	add	r3, r2
 8013830:	6a3a      	ldr	r2, [r7, #32]
 8013832:	18d1      	adds	r1, r2, r3
			&si->sis[gr][ch], &sfi->sfis[gr][ch], &cbi[ch]);
 8013834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013836:	4613      	mov	r3, r2
 8013838:	005b      	lsls	r3, r3, #1
 801383a:	4413      	add	r3, r2
 801383c:	00db      	lsls	r3, r3, #3
 801383e:	461a      	mov	r2, r3
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	4413      	add	r3, r2
 8013844:	9302      	str	r3, [sp, #8]
 8013846:	9101      	str	r1, [sp, #4]
 8013848:	9000      	str	r0, [sp, #0]
 801384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384c:	4632      	mov	r2, r6
 801384e:	4629      	mov	r1, r5
 8013850:	4620      	mov	r0, r4
 8013852:	f000 fab3 	bl	8013dbc <xmp3fixpt_DequantChannel>
 8013856:	4601      	mov	r1, r0
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801385c:	f202 4282 	addw	r2, r2, #1154	; 0x482
 8013860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8013864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013866:	3301      	adds	r3, #1
 8013868:	633b      	str	r3, [r7, #48]	; 0x30
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8013870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013872:	429a      	cmp	r2, r3
 8013874:	dbb3      	blt.n	80137de <xmp3fixpt_Dequantize+0x72>
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 8013876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013878:	6a1b      	ldr	r3, [r3, #32]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d063      	beq.n	8013946 <xmp3fixpt_Dequantize+0x1da>
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013884:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013888:	2b00      	cmp	r3, #0
 801388a:	dd06      	ble.n	801389a <xmp3fixpt_Dequantize+0x12e>
 801388c:	69fb      	ldr	r3, [r7, #28]
 801388e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013892:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013896:	2b00      	cmp	r3, #0
 8013898:	dc55      	bgt.n	8013946 <xmp3fixpt_Dequantize+0x1da>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 801389a:	2300      	movs	r3, #0
 801389c:	637b      	str	r3, [r7, #52]	; 0x34
 801389e:	e01b      	b.n	80138d8 <xmp3fixpt_Dequantize+0x16c>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80138ac:	dc04      	bgt.n	80138b8 <xmp3fixpt_Dequantize+0x14c>
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138b2:	4991      	ldr	r1, [pc, #580]	; (8013af8 <xmp3fixpt_Dequantize+0x38c>)
 80138b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80138c4:	db05      	blt.n	80138d2 <xmp3fixpt_Dequantize+0x166>
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138ca:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 80138ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 80138d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138d4:	3301      	adds	r3, #1
 80138d6:	637b      	str	r3, [r7, #52]	; 0x34
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80138de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80138e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138e4:	429a      	cmp	r2, r3
 80138e6:	dbdb      	blt.n	80138a0 <xmp3fixpt_Dequantize+0x134>
		}
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 80138e8:	2300      	movs	r3, #0
 80138ea:	637b      	str	r3, [r7, #52]	; 0x34
 80138ec:	e023      	b.n	8013936 <xmp3fixpt_Dequantize+0x1ca>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 80138ee:	69fb      	ldr	r3, [r7, #28]
 80138f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138f2:	f502 7210 	add.w	r2, r2, #576	; 0x240
 80138f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138fa:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80138fe:	dc06      	bgt.n	801390e <xmp3fixpt_Dequantize+0x1a2>
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013904:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8013908:	497b      	ldr	r1, [pc, #492]	; (8013af8 <xmp3fixpt_Dequantize+0x38c>)
 801390a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 801390e:	69fb      	ldr	r3, [r7, #28]
 8013910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013912:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8013916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801391a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801391e:	db07      	blt.n	8013930 <xmp3fixpt_Dequantize+0x1c4>
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013924:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8013928:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801392c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 8013930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013932:	3301      	adds	r3, #1
 8013934:	637b      	str	r3, [r7, #52]	; 0x34
 8013936:	69fb      	ldr	r3, [r7, #28]
 8013938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801393c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8013940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013942:	429a      	cmp	r2, r3
 8013944:	dbd3      	blt.n	80138ee <xmp3fixpt_Dequantize+0x182>
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 8013946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013948:	6a1b      	ldr	r3, [r3, #32]
 801394a:	105b      	asrs	r3, r3, #1
 801394c:	2b00      	cmp	r3, #0
 801394e:	d03a      	beq.n	80139c6 <xmp3fixpt_Dequantize+0x25a>
		if (fh->modeExt & 0x01) {
 8013950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013952:	6a1b      	ldr	r3, [r3, #32]
 8013954:	f003 0301 	and.w	r3, r3, #1
 8013958:	2b00      	cmp	r3, #0
 801395a:	d01f      	beq.n	801399c <xmp3fixpt_Dequantize+0x230>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	3318      	adds	r3, #24
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d109      	bne.n	801397a <xmp3fixpt_Dequantize+0x20e>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 8013966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801396a:	697a      	ldr	r2, [r7, #20]
 801396c:	3218      	adds	r2, #24
 801396e:	6952      	ldr	r2, [r2, #20]
 8013970:	3201      	adds	r2, #1
 8013972:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013978:	e01e      	b.n	80139b8 <xmp3fixpt_Dequantize+0x24c>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 801397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	3318      	adds	r3, #24
 8013982:	691b      	ldr	r3, [r3, #16]
 8013984:	3301      	adds	r3, #1
 8013986:	3314      	adds	r3, #20
 8013988:	005b      	lsls	r3, r3, #1
 801398a:	4413      	add	r3, r2
 801398c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013990:	461a      	mov	r2, r3
 8013992:	4613      	mov	r3, r2
 8013994:	005b      	lsls	r3, r3, #1
 8013996:	4413      	add	r3, r2
 8013998:	62fb      	str	r3, [r7, #44]	; 0x2c
 801399a:	e00d      	b.n	80139b8 <xmp3fixpt_Dequantize+0x24c>
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 801399c:	69fb      	ldr	r3, [r7, #28]
 801399e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80139b0:	4293      	cmp	r3, r2
 80139b2:	bfb8      	it	lt
 80139b4:	4613      	movlt	r3, r2
 80139b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	f107 020c 	add.w	r2, r7, #12
 80139be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80139c0:	4618      	mov	r0, r3
 80139c2:	f004 fe81 	bl	80186c8 <xmp3fixpt_MidSideProc>
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 80139c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c8:	6a1b      	ldr	r3, [r3, #32]
 80139ca:	f003 0301 	and.w	r3, r3, #1
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d057      	beq.n	8013a82 <xmp3fixpt_Dequantize+0x316>
		nSamps = hi->nonZeroBound[0];
 80139d2:	69fb      	ldr	r3, [r7, #28]
 80139d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80139dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (fh->ver == MPEG1) {
 80139de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d124      	bne.n	8013a30 <xmp3fixpt_Dequantize+0x2c4>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 80139e6:	69fd      	ldr	r5, [r7, #28]
 80139e8:	683a      	ldr	r2, [r7, #0]
 80139ea:	4613      	mov	r3, r2
 80139ec:	015b      	lsls	r3, r3, #5
 80139ee:	1a9b      	subs	r3, r3, r2
 80139f0:	009b      	lsls	r3, r3, #2
 80139f2:	333e      	adds	r3, #62	; 0x3e
 80139f4:	6a3a      	ldr	r2, [r7, #32]
 80139f6:	18d6      	adds	r6, r2, r3
 80139f8:	69bb      	ldr	r3, [r7, #24]
 80139fa:	f503 7146 	add.w	r1, r3, #792	; 0x318
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 80139fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a00:	6a1b      	ldr	r3, [r3, #32]
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 8013a02:	1058      	asrs	r0, r3, #1
 8013a04:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8013a06:	683a      	ldr	r2, [r7, #0]
 8013a08:	4613      	mov	r3, r2
 8013a0a:	00db      	lsls	r3, r3, #3
 8013a0c:	4413      	add	r3, r2
 8013a0e:	011b      	lsls	r3, r3, #4
 8013a10:	4423      	add	r3, r4
 8013a12:	3388      	adds	r3, #136	; 0x88
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f107 020c 	add.w	r2, r7, #12
 8013a1a:	9203      	str	r2, [sp, #12]
 8013a1c:	9302      	str	r3, [sp, #8]
 8013a1e:	9001      	str	r0, [sp, #4]
 8013a20:	9100      	str	r1, [sp, #0]
 8013a22:	4633      	mov	r3, r6
 8013a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a28:	4628      	mov	r0, r5
 8013a2a:	f004 fea7 	bl	801877c <xmp3fixpt_IntensityProcMPEG1>
 8013a2e:	e028      	b.n	8013a82 <xmp3fixpt_Dequantize+0x316>
		} else {
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 8013a30:	69fe      	ldr	r6, [r7, #28]
 8013a32:	683a      	ldr	r2, [r7, #0]
 8013a34:	4613      	mov	r3, r2
 8013a36:	015b      	lsls	r3, r3, #5
 8013a38:	1a9b      	subs	r3, r3, r2
 8013a3a:	009b      	lsls	r3, r3, #2
 8013a3c:	333e      	adds	r3, #62	; 0x3e
 8013a3e:	6a3a      	ldr	r2, [r7, #32]
 8013a40:	eb02 0c03 	add.w	ip, r2, r3
 8013a44:	69bb      	ldr	r3, [r7, #24]
 8013a46:	f503 7146 	add.w	r1, r3, #792	; 0x318
 8013a4a:	6a3b      	ldr	r3, [r7, #32]
 8013a4c:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 8013a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a52:	6a1b      	ldr	r3, [r3, #32]
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 8013a54:	105c      	asrs	r4, r3, #1
 8013a56:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8013a58:	683a      	ldr	r2, [r7, #0]
 8013a5a:	4613      	mov	r3, r2
 8013a5c:	00db      	lsls	r3, r3, #3
 8013a5e:	4413      	add	r3, r2
 8013a60:	011b      	lsls	r3, r3, #4
 8013a62:	442b      	add	r3, r5
 8013a64:	3388      	adds	r3, #136	; 0x88
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f107 020c 	add.w	r2, r7, #12
 8013a6c:	9204      	str	r2, [sp, #16]
 8013a6e:	9303      	str	r3, [sp, #12]
 8013a70:	9402      	str	r4, [sp, #8]
 8013a72:	9001      	str	r0, [sp, #4]
 8013a74:	9100      	str	r1, [sp, #0]
 8013a76:	4663      	mov	r3, ip
 8013a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	f005 f88d 	bl	8018b9c <xmp3fixpt_IntensityProcMPEG2>
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 8013a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a84:	6a1b      	ldr	r3, [r3, #32]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d031      	beq.n	8013aee <xmp3fixpt_Dequantize+0x382>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7ff fe51 	bl	8013734 <CLZ>
 8013a92:	4603      	mov	r3, r0
 8013a94:	3b01      	subs	r3, #1
 8013a96:	69fa      	ldr	r2, [r7, #28]
 8013a98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013a9c:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
		hi->gb[1] = CLZ(mOut[1]) - 1;
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7ff fe46 	bl	8013734 <CLZ>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	3b01      	subs	r3, #1
 8013aac:	69fa      	ldr	r2, [r7, #28]
 8013aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013ab2:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013abc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013ac0:	69fb      	ldr	r3, [r7, #28]
 8013ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013aca:	4293      	cmp	r3, r2
 8013acc:	bfb8      	it	lt
 8013ace:	4613      	movlt	r3, r2
 8013ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
		hi->nonZeroBound[0] = nSamps;
 8013ad2:	69fb      	ldr	r3, [r7, #28]
 8013ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ad8:	461a      	mov	r2, r3
 8013ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013adc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		hi->nonZeroBound[1] = nSamps;
 8013ae0:	69fb      	ldr	r3, [r7, #28]
 8013ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aea:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 8013aee:	2300      	movs	r3, #0
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	373c      	adds	r7, #60	; 0x3c
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013af8:	c0000001 	.word	0xc0000001

08013afc <MULSHIFT32>:
{
 8013afc:	b480      	push	{r7}
 8013afe:	b085      	sub	sp, #20
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8013b06:	6879      	ldr	r1, [r7, #4]
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	fb81 2303 	smull	r2, r3, r1, r3
 8013b0e:	60fa      	str	r2, [r7, #12]
 8013b10:	603b      	str	r3, [r7, #0]
    return y;
 8013b12:	683b      	ldr	r3, [r7, #0]
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	3714      	adds	r7, #20
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr

08013b20 <CLZ>:
{
 8013b20:	b480      	push	{r7}
 8013b22:	b085      	sub	sp, #20
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
	if (!x)
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d101      	bne.n	8013b32 <CLZ+0x12>
		return (sizeof(int) * 8);
 8013b2e:	2320      	movs	r3, #32
 8013b30:	e00c      	b.n	8013b4c <CLZ+0x2c>
	numZeros = 0;
 8013b32:	2300      	movs	r3, #0
 8013b34:	60fb      	str	r3, [r7, #12]
	while (!(x & 0x80000000)) {
 8013b36:	e005      	b.n	8013b44 <CLZ+0x24>
		numZeros++;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	60fb      	str	r3, [r7, #12]
		x <<= 1;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	005b      	lsls	r3, r3, #1
 8013b42:	607b      	str	r3, [r7, #4]
	while (!(x & 0x80000000)) {
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	daf6      	bge.n	8013b38 <CLZ+0x18>
	return numZeros;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3714      	adds	r7, #20
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr

08013b58 <DequantBlock>:
 * Outputs:     dequantized samples in Q25 format
 *
 * Return:      bitwise-OR of the unsigned outputs (for guard bit calculations)
 **************************************************************************************/
static int DequantBlock(int *inbuf, int *outbuf, int num, int scale)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b092      	sub	sp, #72	; 0x48
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	607a      	str	r2, [r7, #4]
 8013b64:	603b      	str	r3, [r7, #0]
	int tab4[4];
	int scalef, scalei, shift;
	int sx, x, y;
	int mask = 0;
 8013b66:	2300      	movs	r3, #0
 8013b68:	63bb      	str	r3, [r7, #56]	; 0x38
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	f003 0303 	and.w	r3, r3, #3
 8013b70:	019b      	lsls	r3, r3, #6
 8013b72:	4a8a      	ldr	r2, [pc, #552]	; (8013d9c <DequantBlock+0x244>)
 8013b74:	4413      	add	r3, r2
 8013b76:	637b      	str	r3, [r7, #52]	; 0x34
	scalef = pow14[scale & 0x3];
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	f003 0303 	and.w	r3, r3, #3
 8013b7e:	4a88      	ldr	r2, [pc, #544]	; (8013da0 <DequantBlock+0x248>)
 8013b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b84:	633b      	str	r3, [r7, #48]	; 0x30
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	109b      	asrs	r3, r3, #2
 8013b8a:	2b1f      	cmp	r3, #31
 8013b8c:	bfa8      	it	ge
 8013b8e:	231f      	movge	r3, #31
 8013b90:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 8013b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b94:	2b1c      	cmp	r3, #28
 8013b96:	bfa8      	it	ge
 8013b98:	231c      	movge	r3, #28
 8013b9a:	3303      	adds	r3, #3
 8013b9c:	647b      	str	r3, [r7, #68]	; 0x44
	shift = MAX(shift, 0);
 8013b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ba0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ba4:	647b      	str	r3, [r7, #68]	; 0x44
	tab4[0] = 0;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	617b      	str	r3, [r7, #20]
	tab4[1] = tab16[1] >> shift;
 8013baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bac:	3304      	adds	r3, #4
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bb2:	fa42 f303 	asr.w	r3, r2, r3
 8013bb6:	61bb      	str	r3, [r7, #24]
	tab4[2] = tab16[2] >> shift;
 8013bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bba:	3308      	adds	r3, #8
 8013bbc:	681a      	ldr	r2, [r3, #0]
 8013bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bc0:	fa42 f303 	asr.w	r3, r2, r3
 8013bc4:	61fb      	str	r3, [r7, #28]
	tab4[3] = tab16[3] >> shift;
 8013bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bc8:	330c      	adds	r3, #12
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bce:	fa42 f303 	asr.w	r3, r2, r3
 8013bd2:	623b      	str	r3, [r7, #32]

	do {

		sx = *inbuf++;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	1d1a      	adds	r2, r3, #4
 8013bd8:	60fa      	str	r2, [r7, #12]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	62bb      	str	r3, [r7, #40]	; 0x28
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 8013bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013be4:	643b      	str	r3, [r7, #64]	; 0x40

		if (x < 4) {
 8013be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013be8:	2b03      	cmp	r3, #3
 8013bea:	dc07      	bgt.n	8013bfc <DequantBlock+0xa4>

			y = tab4[x];
 8013bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bee:	009b      	lsls	r3, r3, #2
 8013bf0:	3348      	adds	r3, #72	; 0x48
 8013bf2:	443b      	add	r3, r7
 8013bf4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8013bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013bfa:	e0b3      	b.n	8013d64 <DequantBlock+0x20c>

		} else if (x < 16) {
 8013bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bfe:	2b0f      	cmp	r3, #15
 8013c00:	dc14      	bgt.n	8013c2c <DequantBlock+0xd4>

			y = tab16[x];
 8013c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c04:	009b      	lsls	r3, r3, #2
 8013c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c08:	4413      	add	r3, r2
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 8013c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	da05      	bge.n	8013c20 <DequantBlock+0xc8>
 8013c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c16:	425b      	negs	r3, r3
 8013c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8013c1e:	e003      	b.n	8013c28 <DequantBlock+0xd0>
 8013c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c24:	fa42 f303 	asr.w	r3, r2, r3
 8013c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c2a:	e09b      	b.n	8013d64 <DequantBlock+0x20c>

		} else {

			if (x < 64) {
 8013c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c2e:	2b3f      	cmp	r3, #63	; 0x3f
 8013c30:	dc0e      	bgt.n	8013c50 <DequantBlock+0xf8>

				y = pow43[x-16];
 8013c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c34:	3b10      	subs	r3, #16
 8013c36:	4a5b      	ldr	r2, [pc, #364]	; (8013da4 <DequantBlock+0x24c>)
 8013c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c3c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* fractional scale */
				y = MULSHIFT32(y, scalef);
 8013c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013c40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013c42:	f7ff ff5b 	bl	8013afc <MULSHIFT32>
 8013c46:	63f8      	str	r0, [r7, #60]	; 0x3c
				shift = scalei - 3;
 8013c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4a:	3b03      	subs	r3, #3
 8013c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8013c4e:	e06c      	b.n	8013d2a <DequantBlock+0x1d2>

			} else {

				/* normalize to [0x40000000, 0x7fffffff] */
				x <<= 17;
 8013c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c52:	045b      	lsls	r3, r3, #17
 8013c54:	643b      	str	r3, [r7, #64]	; 0x40
				shift = 0;
 8013c56:	2300      	movs	r3, #0
 8013c58:	647b      	str	r3, [r7, #68]	; 0x44
				if (x < 0x08000000)
 8013c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013c60:	da05      	bge.n	8013c6e <DequantBlock+0x116>
					x <<= 4, shift += 4;
 8013c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c64:	011b      	lsls	r3, r3, #4
 8013c66:	643b      	str	r3, [r7, #64]	; 0x40
 8013c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c6a:	3304      	adds	r3, #4
 8013c6c:	647b      	str	r3, [r7, #68]	; 0x44
				if (x < 0x20000000)
 8013c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013c74:	da05      	bge.n	8013c82 <DequantBlock+0x12a>
					x <<= 2, shift += 2;
 8013c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c78:	009b      	lsls	r3, r3, #2
 8013c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8013c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c7e:	3302      	adds	r3, #2
 8013c80:	647b      	str	r3, [r7, #68]	; 0x44
				if (x < 0x40000000)
 8013c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013c88:	da05      	bge.n	8013c96 <DequantBlock+0x13e>
					x <<= 1, shift += 1;
 8013c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c8c:	005b      	lsls	r3, r3, #1
 8013c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8013c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c92:	3301      	adds	r3, #1
 8013c94:	647b      	str	r3, [r7, #68]	; 0x44

				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 8013c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c98:	4a43      	ldr	r2, [pc, #268]	; (8013da8 <DequantBlock+0x250>)
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	dc01      	bgt.n	8013ca2 <DequantBlock+0x14a>
 8013c9e:	4b43      	ldr	r3, [pc, #268]	; (8013dac <DequantBlock+0x254>)
 8013ca0:	e000      	b.n	8013ca4 <DequantBlock+0x14c>
 8013ca2:	4b43      	ldr	r3, [pc, #268]	; (8013db0 <DequantBlock+0x258>)
 8013ca4:	627b      	str	r3, [r7, #36]	; 0x24

				/* polynomial */
				y = coef[0];
 8013ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[1];
 8013cac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013cae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013cb0:	f7ff ff24 	bl	8013afc <MULSHIFT32>
 8013cb4:	4602      	mov	r2, r0
 8013cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb8:	3304      	adds	r3, #4
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[2];
 8013cc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013cc2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013cc4:	f7ff ff1a 	bl	8013afc <MULSHIFT32>
 8013cc8:	4602      	mov	r2, r0
 8013cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ccc:	3308      	adds	r3, #8
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	4413      	add	r3, r2
 8013cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[3];
 8013cd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013cd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013cd8:	f7ff ff10 	bl	8013afc <MULSHIFT32>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce0:	330c      	adds	r3, #12
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[4];
 8013ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013cea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013cec:	f7ff ff06 	bl	8013afc <MULSHIFT32>
 8013cf0:	4602      	mov	r2, r0
 8013cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf4:	3310      	adds	r3, #16
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 8013cfc:	4a2d      	ldr	r2, [pc, #180]	; (8013db4 <DequantBlock+0x25c>)
 8013cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d04:	4619      	mov	r1, r3
 8013d06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013d08:	f7ff fef8 	bl	8013afc <MULSHIFT32>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	00db      	lsls	r3, r3, #3
 8013d10:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* fractional scale */
				y = MULSHIFT32(y, scalef);
 8013d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013d14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013d16:	f7ff fef1 	bl	8013afc <MULSHIFT32>
 8013d1a:	63f8      	str	r0, [r7, #60]	; 0x3c
				shift = scalei - pow2exp[shift];
 8013d1c:	4a26      	ldr	r2, [pc, #152]	; (8013db8 <DequantBlock+0x260>)
 8013d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d26:	1ad3      	subs	r3, r2, r3
 8013d28:	647b      	str	r3, [r7, #68]	; 0x44
			}

			/* integer scale */
			if (shift < 0) {
 8013d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	da14      	bge.n	8013d5a <DequantBlock+0x202>
				shift = -shift;
 8013d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d32:	425b      	negs	r3, r3
 8013d34:	647b      	str	r3, [r7, #68]	; 0x44
				if (y > (0x7fffffff >> shift))
 8013d36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8013d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d3c:	fa42 f303 	asr.w	r3, r2, r3
 8013d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d42:	429a      	cmp	r2, r3
 8013d44:	dd03      	ble.n	8013d4e <DequantBlock+0x1f6>
					y = 0x7fffffff;		/* clip */
 8013d46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013d4c:	e00a      	b.n	8013d64 <DequantBlock+0x20c>
				else
					y <<= shift;
 8013d4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d52:	fa02 f303 	lsl.w	r3, r2, r3
 8013d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013d58:	e004      	b.n	8013d64 <DequantBlock+0x20c>
			} else {
				y >>= shift;
 8013d5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d5e:	fa42 f303 	asr.w	r3, r2, r3
 8013d62:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		/* sign and store */
		mask |= y;
 8013d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d68:	4313      	orrs	r3, r2
 8013d6a:	63bb      	str	r3, [r7, #56]	; 0x38
		*outbuf++ = (sx < 0) ? -y : y;
 8013d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	da02      	bge.n	8013d78 <DequantBlock+0x220>
 8013d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d74:	425a      	negs	r2, r3
 8013d76:	e000      	b.n	8013d7a <DequantBlock+0x222>
 8013d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	1d19      	adds	r1, r3, #4
 8013d7e:	60b9      	str	r1, [r7, #8]
 8013d80:	601a      	str	r2, [r3, #0]

	} while (--num);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	3b01      	subs	r3, #1
 8013d86:	607b      	str	r3, [r7, #4]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	f47f af22 	bne.w	8013bd4 <DequantBlock+0x7c>

	return mask;
 8013d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	3748      	adds	r7, #72	; 0x48
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	08027d48 	.word	0x08027d48
 8013da0:	08027d38 	.word	0x08027d38
 8013da4:	08027e48 	.word	0x08027e48
 8013da8:	5a827999 	.word	0x5a827999
 8013dac:	08027f08 	.word	0x08027f08
 8013db0:	08027f1c 	.word	0x08027f1c
 8013db4:	08027f50 	.word	0x08027f50
 8013db8:	08027f30 	.word	0x08027f30

08013dbc <xmp3fixpt_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b096      	sub	sp, #88	; 0x58
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	60f8      	str	r0, [r7, #12]
 8013dc4:	60b9      	str	r1, [r7, #8]
 8013dc6:	607a      	str	r2, [r7, #4]
 8013dc8:	603b      	str	r3, [r7, #0]
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 8013dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013dcc:	695b      	ldr	r3, [r3, #20]
 8013dce:	2b02      	cmp	r3, #2
 8013dd0:	d117      	bne.n	8013e02 <xmp3fixpt_DequantChannel+0x46>
		cbStartL = 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	633b      	str	r3, [r7, #48]	; 0x30
		if (sis->mixedBlock) { 
 8013dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013dd8:	699b      	ldr	r3, [r3, #24]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d00a      	beq.n	8013df4 <xmp3fixpt_DequantChannel+0x38>
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d101      	bne.n	8013dea <xmp3fixpt_DequantChannel+0x2e>
 8013de6:	2308      	movs	r3, #8
 8013de8:	e000      	b.n	8013dec <xmp3fixpt_DequantChannel+0x30>
 8013dea:	2306      	movs	r3, #6
 8013dec:	647b      	str	r3, [r7, #68]	; 0x44
			cbStartS = 3; 
 8013dee:	2303      	movs	r3, #3
 8013df0:	643b      	str	r3, [r7, #64]	; 0x40
 8013df2:	e003      	b.n	8013dfc <xmp3fixpt_DequantChannel+0x40>
		} else {
			cbEndL = 0; 
 8013df4:	2300      	movs	r3, #0
 8013df6:	647b      	str	r3, [r7, #68]	; 0x44
			cbStartS = 0;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	643b      	str	r3, [r7, #64]	; 0x40
		}
		cbEndS = 13;
 8013dfc:	230d      	movs	r3, #13
 8013dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e00:	e007      	b.n	8013e12 <xmp3fixpt_DequantChannel+0x56>
	} else {
		/* long block */
		cbStartL = 0;
 8013e02:	2300      	movs	r3, #0
 8013e04:	633b      	str	r3, [r7, #48]	; 0x30
		cbEndL =   22;
 8013e06:	2316      	movs	r3, #22
 8013e08:	647b      	str	r3, [r7, #68]	; 0x44
		cbStartS = 13;
 8013e0a:	230d      	movs	r3, #13
 8013e0c:	643b      	str	r3, [r7, #64]	; 0x40
		cbEndS =   13;
 8013e0e:	230d      	movs	r3, #13
 8013e10:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 8013e12:	2300      	movs	r3, #0
 8013e14:	613b      	str	r3, [r7, #16]
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	617b      	str	r3, [r7, #20]
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	61bb      	str	r3, [r7, #24]
	gbMask = 0;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	63bb      	str	r3, [r7, #56]	; 0x38
	i = 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	657b      	str	r3, [r7, #84]	; 0x54

	/* sfactScale = 0 --> quantizer step size = 2
	 * sfactScale = 1 --> quantizer step size = sqrt(2)
	 *   so sfactMultiplier = 2 or 4 (jump through globalGain by powers of 2 or sqrt(2))
	 */
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 8013e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	005b      	lsls	r3, r3, #1
 8013e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
 8013e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e32:	689b      	ldr	r3, [r3, #8]
 8013e34:	637b      	str	r3, [r7, #52]	; 0x34
	if (fh->modeExt >> 1)
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	6a1b      	ldr	r3, [r3, #32]
 8013e3a:	105b      	asrs	r3, r3, #1
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d002      	beq.n	8013e46 <xmp3fixpt_DequantChannel+0x8a>
		 globalGain -= 2;
 8013e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e42:	3b02      	subs	r3, #2
 8013e44:	637b      	str	r3, [r7, #52]	; 0x34
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 8013e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e48:	3302      	adds	r3, #2
 8013e4a:	637b      	str	r3, [r7, #52]	; 0x34

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8013e50:	e04c      	b.n	8013eec <xmp3fixpt_DequantChannel+0x130>

		nonZero = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	62bb      	str	r3, [r7, #40]	; 0x28
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e5c:	3201      	adds	r2, #1
 8013e5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013e62:	4619      	mov	r1, r3
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e6a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013e6e:	1acb      	subs	r3, r1, r3
 8013e70:	627b      	str	r3, [r7, #36]	; 0x24
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 8013e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e74:	f1c3 02d2 	rsb	r2, r3, #210	; 0xd2
 8013e78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e7c:	440b      	add	r3, r1
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	4618      	mov	r0, r3
 8013e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d004      	beq.n	8013e94 <xmp3fixpt_DequantChannel+0xd8>
 8013e8a:	498d      	ldr	r1, [pc, #564]	; (80140c0 <xmp3fixpt_DequantChannel+0x304>)
 8013e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e8e:	440b      	add	r3, r1
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	e000      	b.n	8013e96 <xmp3fixpt_DequantChannel+0xda>
 8013e94:	2300      	movs	r3, #0
 8013e96:	4403      	add	r3, r0
 8013e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013e9a:	fb01 f303 	mul.w	r3, r1, r3
 8013e9e:	4413      	add	r3, r2
 8013ea0:	623b      	str	r3, [r7, #32]

		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 8013ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ea4:	009b      	lsls	r3, r3, #2
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	18d0      	adds	r0, r2, r3
 8013eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013eac:	009b      	lsls	r3, r3, #2
 8013eae:	68fa      	ldr	r2, [r7, #12]
 8013eb0:	18d1      	adds	r1, r2, r3
 8013eb2:	6a3b      	ldr	r3, [r7, #32]
 8013eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013eb6:	f7ff fe4f 	bl	8013b58 <DequantBlock>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ebe:	4313      	orrs	r3, r2
 8013ec0:	62bb      	str	r3, [r7, #40]	; 0x28
		i += nSamps;
 8013ec2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec6:	4413      	add	r3, r2
 8013ec8:	657b      	str	r3, [r7, #84]	; 0x54

		/* update highest non-zero critical band */
		if (nonZero) 
 8013eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d001      	beq.n	8013ed4 <xmp3fixpt_DequantChannel+0x118>
			cbMax[0] = cb;
 8013ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ed2:	613b      	str	r3, [r7, #16]
		gbMask |= nonZero;
 8013ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed8:	4313      	orrs	r3, r2
 8013eda:	63bb      	str	r3, [r7, #56]	; 0x38

		if (i >= *nonZeroBound) 
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	da07      	bge.n	8013ef6 <xmp3fixpt_DequantChannel+0x13a>
	for (cb = 0; cb < cbEndL; cb++) {
 8013ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ee8:	3301      	adds	r3, #1
 8013eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8013eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	dbae      	blt.n	8013e52 <xmp3fixpt_DequantChannel+0x96>
 8013ef4:	e000      	b.n	8013ef8 <xmp3fixpt_DequantChannel+0x13c>
			break;
 8013ef6:	bf00      	nop
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
 8013ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013efa:	2200      	movs	r2, #0
 8013efc:	601a      	str	r2, [r3, #0]
	cbi->cbEndL  = cbMax[0];
 8013efe:	693a      	ldr	r2, [r7, #16]
 8013f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f02:	615a      	str	r2, [r3, #20]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 8013f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f06:	2200      	movs	r2, #0
 8013f08:	60da      	str	r2, [r3, #12]
 8013f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f0c:	68da      	ldr	r2, [r3, #12]
 8013f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f10:	609a      	str	r2, [r3, #8]
 8013f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f14:	689a      	ldr	r2, [r3, #8]
 8013f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f18:	605a      	str	r2, [r3, #4]
	cbi->cbEndSMax = 0;
 8013f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	611a      	str	r2, [r3, #16]

	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 8013f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f22:	2b0b      	cmp	r3, #11
 8013f24:	dd05      	ble.n	8013f32 <xmp3fixpt_DequantChannel+0x176>
		return CLZ(gbMask) - 1;
 8013f26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013f28:	f7ff fdfa 	bl	8013b20 <CLZ>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	3b01      	subs	r3, #1
 8013f30:	e0ec      	b.n	801410c <xmp3fixpt_DequantChannel+0x350>
	
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 8013f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f34:	613b      	str	r3, [r7, #16]
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	617b      	str	r3, [r7, #20]
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	61bb      	str	r3, [r7, #24]
	for (cb = cbStartS; cb < cbEndS; cb++) {
 8013f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f40:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f42:	e0ac      	b.n	801409e <xmp3fixpt_DequantChannel+0x2e2>

		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f4a:	3301      	adds	r3, #1
 8013f4c:	3314      	adds	r3, #20
 8013f4e:	005b      	lsls	r3, r3, #1
 8013f50:	4413      	add	r3, r2
 8013f52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013f56:	4619      	mov	r1, r3
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f5e:	3314      	adds	r3, #20
 8013f60:	005b      	lsls	r3, r3, #1
 8013f62:	4413      	add	r3, r2
 8013f64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013f68:	1acb      	subs	r3, r1, r3
 8013f6a:	627b      	str	r3, [r7, #36]	; 0x24
		for (w = 0; w < 3; w++) {
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013f70:	e045      	b.n	8013ffe <xmp3fixpt_DequantChannel+0x242>
			nonZero =  0;
 8013f72:	2300      	movs	r3, #0
 8013f74:	62bb      	str	r3, [r7, #40]	; 0x28
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 8013f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f78:	f1c3 02d2 	rsb	r2, r3, #210	; 0xd2
 8013f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013f7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013f80:	310a      	adds	r1, #10
 8013f82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f86:	00db      	lsls	r3, r3, #3
 8013f88:	18d1      	adds	r1, r2, r3
 8013f8a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8013f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f8e:	4613      	mov	r3, r2
 8013f90:	005b      	lsls	r3, r3, #1
 8013f92:	4413      	add	r3, r2
 8013f94:	18c2      	adds	r2, r0, r3
 8013f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f98:	4413      	add	r3, r2
 8013f9a:	3317      	adds	r3, #23
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa2:	fb02 f303 	mul.w	r3, r2, r3
 8013fa6:	440b      	add	r3, r1
 8013fa8:	623b      	str	r3, [r7, #32]

			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 8013faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013fae:	fb02 f303 	mul.w	r3, r2, r3
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fb6:	4413      	add	r3, r2
 8013fb8:	009b      	lsls	r3, r3, #2
 8013fba:	68fa      	ldr	r2, [r7, #12]
 8013fbc:	18d0      	adds	r0, r2, r3
 8013fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013fc2:	fb02 f303 	mul.w	r3, r2, r3
 8013fc6:	009b      	lsls	r3, r3, #2
 8013fc8:	68ba      	ldr	r2, [r7, #8]
 8013fca:	18d1      	adds	r1, r2, r3
 8013fcc:	6a3b      	ldr	r3, [r7, #32]
 8013fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fd0:	f7ff fdc2 	bl	8013b58 <DequantBlock>
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	62bb      	str	r3, [r7, #40]	; 0x28

			/* update highest non-zero critical band */
			if (nonZero)
 8013fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d006      	beq.n	8013ff0 <xmp3fixpt_DequantChannel+0x234>
				cbMax[w] = cb;
 8013fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	3358      	adds	r3, #88	; 0x58
 8013fe8:	443b      	add	r3, r7
 8013fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013fec:	f843 2c48 	str.w	r2, [r3, #-72]
			gbMask |= nonZero;
 8013ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff4:	4313      	orrs	r3, r2
 8013ff6:	63bb      	str	r3, [r7, #56]	; 0x38
		for (w = 0; w < 3; w++) {
 8013ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014000:	2b02      	cmp	r3, #2
 8014002:	ddb6      	ble.n	8013f72 <xmp3fixpt_DequantChannel+0x1b6>
		}

		/* reorder blocks */
		buf = (ARRAY3 *)(sampleBuf + i);
 8014004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014006:	009b      	lsls	r3, r3, #2
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	4413      	add	r3, r2
 801400c:	61fb      	str	r3, [r7, #28]
		i += 3*nSamps;
 801400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014010:	4613      	mov	r3, r2
 8014012:	005b      	lsls	r3, r3, #1
 8014014:	4413      	add	r3, r2
 8014016:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014018:	4413      	add	r3, r2
 801401a:	657b      	str	r3, [r7, #84]	; 0x54
		for (j = 0; j < nSamps; j++) {
 801401c:	2300      	movs	r3, #0
 801401e:	653b      	str	r3, [r7, #80]	; 0x50
 8014020:	e031      	b.n	8014086 <xmp3fixpt_DequantChannel+0x2ca>
			buf[j][0] = workBuf[0*nSamps + j];
 8014022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014024:	009b      	lsls	r3, r3, #2
 8014026:	68ba      	ldr	r2, [r7, #8]
 8014028:	18d1      	adds	r1, r2, r3
 801402a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801402c:	4613      	mov	r3, r2
 801402e:	005b      	lsls	r3, r3, #1
 8014030:	4413      	add	r3, r2
 8014032:	009b      	lsls	r3, r3, #2
 8014034:	461a      	mov	r2, r3
 8014036:	69fb      	ldr	r3, [r7, #28]
 8014038:	4413      	add	r3, r2
 801403a:	680a      	ldr	r2, [r1, #0]
 801403c:	601a      	str	r2, [r3, #0]
			buf[j][1] = workBuf[1*nSamps + j];
 801403e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014042:	4413      	add	r3, r2
 8014044:	009b      	lsls	r3, r3, #2
 8014046:	68ba      	ldr	r2, [r7, #8]
 8014048:	18d1      	adds	r1, r2, r3
 801404a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801404c:	4613      	mov	r3, r2
 801404e:	005b      	lsls	r3, r3, #1
 8014050:	4413      	add	r3, r2
 8014052:	009b      	lsls	r3, r3, #2
 8014054:	461a      	mov	r2, r3
 8014056:	69fb      	ldr	r3, [r7, #28]
 8014058:	4413      	add	r3, r2
 801405a:	680a      	ldr	r2, [r1, #0]
 801405c:	605a      	str	r2, [r3, #4]
			buf[j][2] = workBuf[2*nSamps + j];
 801405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014060:	005a      	lsls	r2, r3, #1
 8014062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014064:	4413      	add	r3, r2
 8014066:	009b      	lsls	r3, r3, #2
 8014068:	68ba      	ldr	r2, [r7, #8]
 801406a:	18d1      	adds	r1, r2, r3
 801406c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801406e:	4613      	mov	r3, r2
 8014070:	005b      	lsls	r3, r3, #1
 8014072:	4413      	add	r3, r2
 8014074:	009b      	lsls	r3, r3, #2
 8014076:	461a      	mov	r2, r3
 8014078:	69fb      	ldr	r3, [r7, #28]
 801407a:	4413      	add	r3, r2
 801407c:	680a      	ldr	r2, [r1, #0]
 801407e:	609a      	str	r2, [r3, #8]
		for (j = 0; j < nSamps; j++) {
 8014080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014082:	3301      	adds	r3, #1
 8014084:	653b      	str	r3, [r7, #80]	; 0x50
 8014086:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408a:	429a      	cmp	r2, r3
 801408c:	dbc9      	blt.n	8014022 <xmp3fixpt_DequantChannel+0x266>
		}

		ASSERT(3*nSamps <= MAX_REORDER_SAMPS);

		if (i >= *nonZeroBound) 
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014094:	429a      	cmp	r2, r3
 8014096:	da08      	bge.n	80140aa <xmp3fixpt_DequantChannel+0x2ee>
	for (cb = cbStartS; cb < cbEndS; cb++) {
 8014098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801409a:	3301      	adds	r3, #1
 801409c:	64bb      	str	r3, [r7, #72]	; 0x48
 801409e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80140a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140a2:	429a      	cmp	r2, r3
 80140a4:	f6ff af4e 	blt.w	8013f44 <xmp3fixpt_DequantChannel+0x188>
 80140a8:	e000      	b.n	80140ac <xmp3fixpt_DequantChannel+0x2f0>
			break;
 80140aa:	bf00      	nop
	 * however, the original nzb is no longer necessarily true
	 *   for each cb, buf[][] is updated with 3*nSamps samples (i increases 3*nSamps each time)
	 *   (buf[j + 1][0] = 3 (input) samples ahead of buf[j][0])
     * so update nonZeroBound to i
	 */
	*nonZeroBound = i;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80140b0:	601a      	str	r2, [r3, #0]

	ASSERT(*nonZeroBound <= MAX_NSAMP);

	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 80140b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80140b4:	699b      	ldr	r3, [r3, #24]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d004      	beq.n	80140c4 <xmp3fixpt_DequantChannel+0x308>
 80140ba:	2202      	movs	r2, #2
 80140bc:	e003      	b.n	80140c6 <xmp3fixpt_DequantChannel+0x30a>
 80140be:	bf00      	nop
 80140c0:	08027d20 	.word	0x08027d20
 80140c4:	2201      	movs	r2, #1
 80140c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140c8:	601a      	str	r2, [r3, #0]

	cbi->cbEndS[0] = cbMax[0];
 80140ca:	693a      	ldr	r2, [r7, #16]
 80140cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140ce:	605a      	str	r2, [r3, #4]
	cbi->cbEndS[1] = cbMax[1];
 80140d0:	697a      	ldr	r2, [r7, #20]
 80140d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140d4:	609a      	str	r2, [r3, #8]
	cbi->cbEndS[2] = cbMax[2];
 80140d6:	69ba      	ldr	r2, [r7, #24]
 80140d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140da:	60da      	str	r2, [r3, #12]

	cbi->cbEndSMax = cbMax[0];
 80140dc:	693a      	ldr	r2, [r7, #16]
 80140de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140e0:	611a      	str	r2, [r3, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 80140e2:	697a      	ldr	r2, [r7, #20]
 80140e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140e6:	691b      	ldr	r3, [r3, #16]
 80140e8:	429a      	cmp	r2, r3
 80140ea:	bfb8      	it	lt
 80140ec:	461a      	movlt	r2, r3
 80140ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140f0:	611a      	str	r2, [r3, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 80140f2:	69ba      	ldr	r2, [r7, #24]
 80140f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140f6:	691b      	ldr	r3, [r3, #16]
 80140f8:	429a      	cmp	r2, r3
 80140fa:	bfb8      	it	lt
 80140fc:	461a      	movlt	r2, r3
 80140fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014100:	611a      	str	r2, [r3, #16]

	return CLZ(gbMask) - 1;
 8014102:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014104:	f7ff fd0c 	bl	8013b20 <CLZ>
 8014108:	4603      	mov	r3, r0
 801410a:	3b01      	subs	r3, #1
}
 801410c:	4618      	mov	r0, r3
 801410e:	3758      	adds	r7, #88	; 0x58
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}

08014114 <DecodeHuffmanPairs>:
 * Notes:       assumes that nVals is an even number
 *              si_huff.bit tests every Huffman codeword in every table (though not
 *                necessarily all linBits outputs for x,y > 15)
 **************************************************************************************/
static int DecodeHuffmanPairs(int *xy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 8014114:	b480      	push	{r7}
 8014116:	b095      	sub	sp, #84	; 0x54
 8014118:	af00      	add	r7, sp, #0
 801411a:	60f8      	str	r0, [r7, #12]
 801411c:	60b9      	str	r1, [r7, #8]
 801411e:	607a      	str	r2, [r7, #4]
 8014120:	603b      	str	r3, [r7, #0]
	int cachedBits, padBits, len, startBits, linBits, maxBits, minBits;
	HuffTabType tabType;
	unsigned short cw, *tBase, *tCurr;
	unsigned int cache;

	if(nVals <= 0) 
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	2b00      	cmp	r3, #0
 8014126:	dc01      	bgt.n	801412c <DecodeHuffmanPairs+0x18>
		return 0;
 8014128:	2300      	movs	r3, #0
 801412a:	e2d8      	b.n	80146de <DecodeHuffmanPairs+0x5ca>

	if (bitsLeft < 0)
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	da02      	bge.n	8014138 <DecodeHuffmanPairs+0x24>
		return -1;
 8014132:	f04f 33ff 	mov.w	r3, #4294967295
 8014136:	e2d2      	b.n	80146de <DecodeHuffmanPairs+0x5ca>
	startBits = bitsLeft;
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	633b      	str	r3, [r7, #48]	; 0x30

	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 801413c:	4a9b      	ldr	r2, [pc, #620]	; (80143ac <DecodeHuffmanPairs+0x298>)
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014144:	005b      	lsls	r3, r3, #1
 8014146:	4a9a      	ldr	r2, [pc, #616]	; (80143b0 <DecodeHuffmanPairs+0x29c>)
 8014148:	4413      	add	r3, r2
 801414a:	62fb      	str	r3, [r7, #44]	; 0x2c
	linBits = huffTabLookup[tabIdx].linBits;
 801414c:	4a99      	ldr	r2, [pc, #612]	; (80143b4 <DecodeHuffmanPairs+0x2a0>)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014154:	62bb      	str	r3, [r7, #40]	; 0x28
	tabType = huffTabLookup[tabIdx].tabType;
 8014156:	4a97      	ldr	r2, [pc, #604]	; (80143b4 <DecodeHuffmanPairs+0x2a0>)
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	00db      	lsls	r3, r3, #3
 801415c:	4413      	add	r3, r2
 801415e:	791b      	ldrb	r3, [r3, #4]
 8014160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ASSERT(tabIdx < HUFF_PAIRTABS);
	ASSERT(tabIdx >= 0);
	ASSERT(tabType != invalidTab);

	/* initially fill cache with any partial byte */
	cache = 0;
 8014164:	2300      	movs	r3, #0
 8014166:	637b      	str	r3, [r7, #52]	; 0x34
	cachedBits = (8 - bitOffset) & 0x07;
 8014168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801416a:	425b      	negs	r3, r3
 801416c:	f003 0307 	and.w	r3, r3, #7
 8014170:	643b      	str	r3, [r7, #64]	; 0x40
	if (cachedBits)
 8014172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014174:	2b00      	cmp	r3, #0
 8014176:	d00a      	beq.n	801418e <DecodeHuffmanPairs+0x7a>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 8014178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801417a:	1c5a      	adds	r2, r3, #1
 801417c:	65ba      	str	r2, [r7, #88]	; 0x58
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	461a      	mov	r2, r3
 8014182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014184:	f1c3 0320 	rsb	r3, r3, #32
 8014188:	fa02 f303 	lsl.w	r3, r2, r3
 801418c:	637b      	str	r3, [r7, #52]	; 0x34
	bitsLeft -= cachedBits;
 801418e:	683a      	ldr	r2, [r7, #0]
 8014190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014192:	1ad3      	subs	r3, r2, r3
 8014194:	603b      	str	r3, [r7, #0]

	if (tabType == noBits) {
 8014196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801419a:	2b00      	cmp	r3, #0
 801419c:	d118      	bne.n	80141d0 <DecodeHuffmanPairs+0xbc>
		/* table 0, no data, x = y = 0 */
		for (i = 0; i < nVals; i+=2) {
 801419e:	2300      	movs	r3, #0
 80141a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141a2:	e00f      	b.n	80141c4 <DecodeHuffmanPairs+0xb0>
			xy[i+0] = 0;
 80141a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141a6:	009b      	lsls	r3, r3, #2
 80141a8:	68fa      	ldr	r2, [r7, #12]
 80141aa:	4413      	add	r3, r2
 80141ac:	2200      	movs	r2, #0
 80141ae:	601a      	str	r2, [r3, #0]
			xy[i+1] = 0;
 80141b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141b2:	3301      	adds	r3, #1
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	68fa      	ldr	r2, [r7, #12]
 80141b8:	4413      	add	r3, r2
 80141ba:	2200      	movs	r2, #0
 80141bc:	601a      	str	r2, [r3, #0]
		for (i = 0; i < nVals; i+=2) {
 80141be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141c0:	3302      	adds	r3, #2
 80141c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	dbeb      	blt.n	80141a4 <DecodeHuffmanPairs+0x90>
		}
		return 0;
 80141cc:	2300      	movs	r3, #0
 80141ce:	e286      	b.n	80146de <DecodeHuffmanPairs+0x5ca>
	} else if (tabType == oneShot) {
 80141d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	f040 80da 	bne.w	801438e <DecodeHuffmanPairs+0x27a>
		/* single lookup, no escapes */
		maxBits = GetMaxbits(tBase[0]);
 80141da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141dc:	881b      	ldrh	r3, [r3, #0]
 80141de:	f003 030f 	and.w	r3, r3, #15
 80141e2:	623b      	str	r3, [r7, #32]
		tBase++;
 80141e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e6:	3302      	adds	r3, #2
 80141e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		padBits = 0;
 80141ea:	2300      	movs	r3, #0
 80141ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (nVals > 0) {
 80141ee:	e0c0      	b.n	8014372 <DecodeHuffmanPairs+0x25e>
			/* refill cache - assumes cachedBits <= 16 */
			if (bitsLeft >= 16) {
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	2b0f      	cmp	r3, #15
 80141f4:	dd20      	ble.n	8014238 <DecodeHuffmanPairs+0x124>
				/* load 2 new bytes into left-justified cache */
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80141f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80141f8:	1c5a      	adds	r2, r3, #1
 80141fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	461a      	mov	r2, r3
 8014200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014202:	f1c3 0318 	rsb	r3, r3, #24
 8014206:	fa02 f303 	lsl.w	r3, r2, r3
 801420a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801420c:	4313      	orrs	r3, r2
 801420e:	637b      	str	r3, [r7, #52]	; 0x34
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8014210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014212:	1c5a      	adds	r2, r3, #1
 8014214:	65ba      	str	r2, [r7, #88]	; 0x58
 8014216:	781b      	ldrb	r3, [r3, #0]
 8014218:	461a      	mov	r2, r3
 801421a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801421c:	f1c3 0310 	rsb	r3, r3, #16
 8014220:	fa02 f303 	lsl.w	r3, r2, r3
 8014224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014226:	4313      	orrs	r3, r2
 8014228:	637b      	str	r3, [r7, #52]	; 0x34
				cachedBits += 16;
 801422a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801422c:	3310      	adds	r3, #16
 801422e:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft -= 16;
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	3b10      	subs	r3, #16
 8014234:	603b      	str	r3, [r7, #0]
 8014236:	e096      	b.n	8014366 <DecodeHuffmanPairs+0x252>
			} else {
				/* last time through, pad cache with zeros and drain cache */
				if (cachedBits + bitsLeft <= 0)	return -1;
 8014238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	4413      	add	r3, r2
 801423e:	2b00      	cmp	r3, #0
 8014240:	dc02      	bgt.n	8014248 <DecodeHuffmanPairs+0x134>
 8014242:	f04f 33ff 	mov.w	r3, #4294967295
 8014246:	e24a      	b.n	80146de <DecodeHuffmanPairs+0x5ca>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	2b00      	cmp	r3, #0
 801424c:	dd0c      	ble.n	8014268 <DecodeHuffmanPairs+0x154>
 801424e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014250:	1c5a      	adds	r2, r3, #1
 8014252:	65ba      	str	r2, [r7, #88]	; 0x58
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	461a      	mov	r2, r3
 8014258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801425a:	f1c3 0318 	rsb	r3, r3, #24
 801425e:	fa02 f303 	lsl.w	r3, r2, r3
 8014262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014264:	4313      	orrs	r3, r2
 8014266:	637b      	str	r3, [r7, #52]	; 0x34
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	2b08      	cmp	r3, #8
 801426c:	dd0c      	ble.n	8014288 <DecodeHuffmanPairs+0x174>
 801426e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014270:	1c5a      	adds	r2, r3, #1
 8014272:	65ba      	str	r2, [r7, #88]	; 0x58
 8014274:	781b      	ldrb	r3, [r3, #0]
 8014276:	461a      	mov	r2, r3
 8014278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801427a:	f1c3 0310 	rsb	r3, r3, #16
 801427e:	fa02 f303 	lsl.w	r3, r2, r3
 8014282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014284:	4313      	orrs	r3, r2
 8014286:	637b      	str	r3, [r7, #52]	; 0x34
				cachedBits += bitsLeft;
 8014288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	4413      	add	r3, r2
 801428e:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft = 0;
 8014290:	2300      	movs	r3, #0
 8014292:	603b      	str	r3, [r7, #0]

				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8014294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014296:	3b01      	subs	r3, #1
 8014298:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801429c:	fa42 f303 	asr.w	r3, r2, r3
 80142a0:	461a      	mov	r2, r3
 80142a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142a4:	4013      	ands	r3, r2
 80142a6:	637b      	str	r3, [r7, #52]	; 0x34
				padBits = 11;
 80142a8:	230b      	movs	r3, #11
 80142aa:	63fb      	str	r3, [r7, #60]	; 0x3c
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 80142ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80142ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142b0:	4413      	add	r3, r2
 80142b2:	643b      	str	r3, [r7, #64]	; 0x40
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 80142b4:	e057      	b.n	8014366 <DecodeHuffmanPairs+0x252>
				cw = tBase[cache >> (32 - maxBits)];
 80142b6:	6a3b      	ldr	r3, [r7, #32]
 80142b8:	f1c3 0320 	rsb	r3, r3, #32
 80142bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142be:	fa22 f303 	lsr.w	r3, r2, r3
 80142c2:	005b      	lsls	r3, r3, #1
 80142c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142c6:	4413      	add	r3, r2
 80142c8:	881b      	ldrh	r3, [r3, #0]
 80142ca:	83fb      	strh	r3, [r7, #30]
				len = GetHLen(cw);
 80142cc:	8bfb      	ldrh	r3, [r7, #30]
 80142ce:	0b1b      	lsrs	r3, r3, #12
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	f003 030f 	and.w	r3, r3, #15
 80142d6:	61bb      	str	r3, [r7, #24]
				cachedBits -= len;
 80142d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	1ad3      	subs	r3, r2, r3
 80142de:	643b      	str	r3, [r7, #64]	; 0x40
				cache <<= len;
 80142e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	fa02 f303 	lsl.w	r3, r2, r3
 80142e8:	637b      	str	r3, [r7, #52]	; 0x34

				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 80142ea:	8bfb      	ldrh	r3, [r7, #30]
 80142ec:	091b      	lsrs	r3, r3, #4
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	f003 030f 	and.w	r3, r3, #15
 80142f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80142f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d00b      	beq.n	8014314 <DecodeHuffmanPairs+0x200>
 80142fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142fe:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8014302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014304:	4313      	orrs	r3, r2
 8014306:	64bb      	str	r3, [r7, #72]	; 0x48
 8014308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801430a:	005b      	lsls	r3, r3, #1
 801430c:	637b      	str	r3, [r7, #52]	; 0x34
 801430e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014310:	3b01      	subs	r3, #1
 8014312:	643b      	str	r3, [r7, #64]	; 0x40
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 8014314:	8bfb      	ldrh	r3, [r7, #30]
 8014316:	0a1b      	lsrs	r3, r3, #8
 8014318:	b29b      	uxth	r3, r3
 801431a:	f003 030f 	and.w	r3, r3, #15
 801431e:	647b      	str	r3, [r7, #68]	; 0x44
 8014320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00b      	beq.n	801433e <DecodeHuffmanPairs+0x22a>
 8014326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014328:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 801432c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801432e:	4313      	orrs	r3, r2
 8014330:	647b      	str	r3, [r7, #68]	; 0x44
 8014332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	637b      	str	r3, [r7, #52]	; 0x34
 8014338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801433a:	3b01      	subs	r3, #1
 801433c:	643b      	str	r3, [r7, #64]	; 0x40

				/* ran out of bits - should never have consumed padBits */
				if (cachedBits < padBits)
 801433e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014342:	429a      	cmp	r2, r3
 8014344:	da02      	bge.n	801434c <DecodeHuffmanPairs+0x238>
					return -1;
 8014346:	f04f 33ff 	mov.w	r3, #4294967295
 801434a:	e1c8      	b.n	80146de <DecodeHuffmanPairs+0x5ca>

				*xy++ = x;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	1d1a      	adds	r2, r3, #4
 8014350:	60fa      	str	r2, [r7, #12]
 8014352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014354:	601a      	str	r2, [r3, #0]
				*xy++ = y;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	1d1a      	adds	r2, r3, #4
 801435a:	60fa      	str	r2, [r7, #12]
 801435c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801435e:	601a      	str	r2, [r3, #0]
				nVals -= 2;
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	3b02      	subs	r3, #2
 8014364:	60bb      	str	r3, [r7, #8]
			while (nVals > 0 && cachedBits >= 11 ) {
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	2b00      	cmp	r3, #0
 801436a:	dd02      	ble.n	8014372 <DecodeHuffmanPairs+0x25e>
 801436c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801436e:	2b0a      	cmp	r3, #10
 8014370:	dca1      	bgt.n	80142b6 <DecodeHuffmanPairs+0x1a2>
		while (nVals > 0) {
 8014372:	68bb      	ldr	r3, [r7, #8]
 8014374:	2b00      	cmp	r3, #0
 8014376:	f73f af3b 	bgt.w	80141f0 <DecodeHuffmanPairs+0xdc>
			}
		}
		bitsLeft += (cachedBits - padBits);
 801437a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801437e:	1ad3      	subs	r3, r2, r3
 8014380:	683a      	ldr	r2, [r7, #0]
 8014382:	4413      	add	r3, r2
 8014384:	603b      	str	r3, [r7, #0]
		return (startBits - bitsLeft);
 8014386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	1ad3      	subs	r3, r2, r3
 801438c:	e1a7      	b.n	80146de <DecodeHuffmanPairs+0x5ca>
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 801438e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014392:	2b03      	cmp	r3, #3
 8014394:	d004      	beq.n	80143a0 <DecodeHuffmanPairs+0x28c>
 8014396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801439a:	2b02      	cmp	r3, #2
 801439c:	f040 819d 	bne.w	80146da <DecodeHuffmanPairs+0x5c6>
		tCurr = tBase;
 80143a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a2:	63bb      	str	r3, [r7, #56]	; 0x38
		padBits = 0;
 80143a4:	2300      	movs	r3, #0
 80143a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (nVals > 0) {
 80143a8:	e189      	b.n	80146be <DecodeHuffmanPairs+0x5aa>
 80143aa:	bf00      	nop
 80143ac:	0802a094 	.word	0x0802a094
 80143b0:	08027f70 	.word	0x08027f70
 80143b4:	0802a114 	.word	0x0802a114
			/* refill cache - assumes cachedBits <= 16 */
			if (bitsLeft >= 16) {
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	2b0f      	cmp	r3, #15
 80143bc:	dd20      	ble.n	8014400 <DecodeHuffmanPairs+0x2ec>
				/* load 2 new bytes into left-justified cache */
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80143be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80143c0:	1c5a      	adds	r2, r3, #1
 80143c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	461a      	mov	r2, r3
 80143c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143ca:	f1c3 0318 	rsb	r3, r3, #24
 80143ce:	fa02 f303 	lsl.w	r3, r2, r3
 80143d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143d4:	4313      	orrs	r3, r2
 80143d6:	637b      	str	r3, [r7, #52]	; 0x34
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 80143d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80143da:	1c5a      	adds	r2, r3, #1
 80143dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	461a      	mov	r2, r3
 80143e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143e4:	f1c3 0310 	rsb	r3, r3, #16
 80143e8:	fa02 f303 	lsl.w	r3, r2, r3
 80143ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143ee:	4313      	orrs	r3, r2
 80143f0:	637b      	str	r3, [r7, #52]	; 0x34
				cachedBits += 16;
 80143f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143f4:	3310      	adds	r3, #16
 80143f6:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft -= 16;
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	3b10      	subs	r3, #16
 80143fc:	603b      	str	r3, [r7, #0]
 80143fe:	e157      	b.n	80146b0 <DecodeHuffmanPairs+0x59c>
			} else {
				/* last time through, pad cache with zeros and drain cache */
				if (cachedBits + bitsLeft <= 0)	return -1;
 8014400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	4413      	add	r3, r2
 8014406:	2b00      	cmp	r3, #0
 8014408:	dc02      	bgt.n	8014410 <DecodeHuffmanPairs+0x2fc>
 801440a:	f04f 33ff 	mov.w	r3, #4294967295
 801440e:	e166      	b.n	80146de <DecodeHuffmanPairs+0x5ca>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	dd0c      	ble.n	8014430 <DecodeHuffmanPairs+0x31c>
 8014416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014418:	1c5a      	adds	r2, r3, #1
 801441a:	65ba      	str	r2, [r7, #88]	; 0x58
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	461a      	mov	r2, r3
 8014420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014422:	f1c3 0318 	rsb	r3, r3, #24
 8014426:	fa02 f303 	lsl.w	r3, r2, r3
 801442a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801442c:	4313      	orrs	r3, r2
 801442e:	637b      	str	r3, [r7, #52]	; 0x34
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	2b08      	cmp	r3, #8
 8014434:	dd0c      	ble.n	8014450 <DecodeHuffmanPairs+0x33c>
 8014436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014438:	1c5a      	adds	r2, r3, #1
 801443a:	65ba      	str	r2, [r7, #88]	; 0x58
 801443c:	781b      	ldrb	r3, [r3, #0]
 801443e:	461a      	mov	r2, r3
 8014440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014442:	f1c3 0310 	rsb	r3, r3, #16
 8014446:	fa02 f303 	lsl.w	r3, r2, r3
 801444a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801444c:	4313      	orrs	r3, r2
 801444e:	637b      	str	r3, [r7, #52]	; 0x34
				cachedBits += bitsLeft;
 8014450:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	4413      	add	r3, r2
 8014456:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft = 0;
 8014458:	2300      	movs	r3, #0
 801445a:	603b      	str	r3, [r7, #0]

				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 801445c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801445e:	3b01      	subs	r3, #1
 8014460:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014464:	fa42 f303 	asr.w	r3, r2, r3
 8014468:	461a      	mov	r2, r3
 801446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801446c:	4013      	ands	r3, r2
 801446e:	637b      	str	r3, [r7, #52]	; 0x34
				padBits = 11;
 8014470:	230b      	movs	r3, #11
 8014472:	63fb      	str	r3, [r7, #60]	; 0x3c
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 8014474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014478:	4413      	add	r3, r2
 801447a:	643b      	str	r3, [r7, #64]	; 0x40
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 801447c:	e118      	b.n	80146b0 <DecodeHuffmanPairs+0x59c>
				maxBits = GetMaxbits(tCurr[0]);
 801447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014480:	881b      	ldrh	r3, [r3, #0]
 8014482:	f003 030f 	and.w	r3, r3, #15
 8014486:	623b      	str	r3, [r7, #32]
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 8014488:	6a3b      	ldr	r3, [r7, #32]
 801448a:	f1c3 0320 	rsb	r3, r3, #32
 801448e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014490:	fa22 f303 	lsr.w	r3, r2, r3
 8014494:	3301      	adds	r3, #1
 8014496:	005b      	lsls	r3, r3, #1
 8014498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801449a:	4413      	add	r3, r2
 801449c:	881b      	ldrh	r3, [r3, #0]
 801449e:	83fb      	strh	r3, [r7, #30]
				len = GetHLen(cw);
 80144a0:	8bfb      	ldrh	r3, [r7, #30]
 80144a2:	0b1b      	lsrs	r3, r3, #12
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	f003 030f 	and.w	r3, r3, #15
 80144aa:	61bb      	str	r3, [r7, #24]
				if (!len) {
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d10e      	bne.n	80144d0 <DecodeHuffmanPairs+0x3bc>
					cachedBits -= maxBits;
 80144b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80144b4:	6a3b      	ldr	r3, [r7, #32]
 80144b6:	1ad3      	subs	r3, r2, r3
 80144b8:	643b      	str	r3, [r7, #64]	; 0x40
					cache <<= maxBits;
 80144ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144bc:	6a3b      	ldr	r3, [r7, #32]
 80144be:	fa02 f303 	lsl.w	r3, r2, r3
 80144c2:	637b      	str	r3, [r7, #52]	; 0x34
					tCurr += cw;
 80144c4:	8bfb      	ldrh	r3, [r7, #30]
 80144c6:	005b      	lsls	r3, r3, #1
 80144c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144ca:	4413      	add	r3, r2
 80144cc:	63bb      	str	r3, [r7, #56]	; 0x38
					continue;
 80144ce:	e0ef      	b.n	80146b0 <DecodeHuffmanPairs+0x59c>
				}
				cachedBits -= len;
 80144d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	1ad3      	subs	r3, r2, r3
 80144d6:	643b      	str	r3, [r7, #64]	; 0x40
				cache <<= len;
 80144d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	fa02 f303 	lsl.w	r3, r2, r3
 80144e0:	637b      	str	r3, [r7, #52]	; 0x34
			
				x = GetCWX(cw);
 80144e2:	8bfb      	ldrh	r3, [r7, #30]
 80144e4:	091b      	lsrs	r3, r3, #4
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	f003 030f 	and.w	r3, r3, #15
 80144ec:	64bb      	str	r3, [r7, #72]	; 0x48
				y = GetCWY(cw);
 80144ee:	8bfb      	ldrh	r3, [r7, #30]
 80144f0:	0a1b      	lsrs	r3, r3, #8
 80144f2:	b29b      	uxth	r3, r3
 80144f4:	f003 030f 	and.w	r3, r3, #15
 80144f8:	647b      	str	r3, [r7, #68]	; 0x44

				if (x == 15 && tabType == loopLinbits) {
 80144fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144fc:	2b0f      	cmp	r3, #15
 80144fe:	d153      	bne.n	80145a8 <DecodeHuffmanPairs+0x494>
 8014500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014504:	2b03      	cmp	r3, #3
 8014506:	d14f      	bne.n	80145a8 <DecodeHuffmanPairs+0x494>
					minBits = linBits + 1 + (y ? 1 : 0);
 8014508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801450a:	3301      	adds	r3, #1
 801450c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801450e:	2a00      	cmp	r2, #0
 8014510:	bf14      	ite	ne
 8014512:	2201      	movne	r2, #1
 8014514:	2200      	moveq	r2, #0
 8014516:	b2d2      	uxtb	r2, r2
 8014518:	4413      	add	r3, r2
 801451a:	617b      	str	r3, [r7, #20]
					if (cachedBits + bitsLeft < minBits)
 801451c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	4413      	add	r3, r2
 8014522:	697a      	ldr	r2, [r7, #20]
 8014524:	429a      	cmp	r2, r3
 8014526:	dd15      	ble.n	8014554 <DecodeHuffmanPairs+0x440>
						return -1;
 8014528:	f04f 33ff 	mov.w	r3, #4294967295
 801452c:	e0d7      	b.n	80146de <DecodeHuffmanPairs+0x5ca>
					while (cachedBits < minBits) {
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 801452e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014530:	1c5a      	adds	r2, r3, #1
 8014532:	65ba      	str	r2, [r7, #88]	; 0x58
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	461a      	mov	r2, r3
 8014538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801453a:	f1c3 0318 	rsb	r3, r3, #24
 801453e:	fa02 f303 	lsl.w	r3, r2, r3
 8014542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014544:	4313      	orrs	r3, r2
 8014546:	637b      	str	r3, [r7, #52]	; 0x34
						cachedBits += 8;
 8014548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801454a:	3308      	adds	r3, #8
 801454c:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft -= 8;
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	3b08      	subs	r3, #8
 8014552:	603b      	str	r3, [r7, #0]
					while (cachedBits < minBits) {
 8014554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	429a      	cmp	r2, r3
 801455a:	dbe8      	blt.n	801452e <DecodeHuffmanPairs+0x41a>
					}
					if (bitsLeft < 0) {
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	2b00      	cmp	r3, #0
 8014560:	da0f      	bge.n	8014582 <DecodeHuffmanPairs+0x46e>
						cachedBits += bitsLeft;
 8014562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	4413      	add	r3, r2
 8014568:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft = 0;
 801456a:	2300      	movs	r3, #0
 801456c:	603b      	str	r3, [r7, #0]
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 801456e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014570:	3b01      	subs	r3, #1
 8014572:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014576:	fa42 f303 	asr.w	r3, r2, r3
 801457a:	461a      	mov	r2, r3
 801457c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801457e:	4013      	ands	r3, r2
 8014580:	637b      	str	r3, [r7, #52]	; 0x34
					}
					x += (int)(cache >> (32 - linBits));
 8014582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014584:	f1c3 0320 	rsb	r3, r3, #32
 8014588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801458a:	fa22 f303 	lsr.w	r3, r2, r3
 801458e:	461a      	mov	r2, r3
 8014590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014592:	4413      	add	r3, r2
 8014594:	64bb      	str	r3, [r7, #72]	; 0x48
					cachedBits -= linBits;
 8014596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801459a:	1ad3      	subs	r3, r2, r3
 801459c:	643b      	str	r3, [r7, #64]	; 0x40
					cache <<= linBits;
 801459e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a2:	fa02 f303 	lsl.w	r3, r2, r3
 80145a6:	637b      	str	r3, [r7, #52]	; 0x34
				}
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 80145a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d00b      	beq.n	80145c6 <DecodeHuffmanPairs+0x4b2>
 80145ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80145b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80145b6:	4313      	orrs	r3, r2
 80145b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80145ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145bc:	005b      	lsls	r3, r3, #1
 80145be:	637b      	str	r3, [r7, #52]	; 0x34
 80145c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145c2:	3b01      	subs	r3, #1
 80145c4:	643b      	str	r3, [r7, #64]	; 0x40

				if (y == 15 && tabType == loopLinbits) {
 80145c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145c8:	2b0f      	cmp	r3, #15
 80145ca:	d14c      	bne.n	8014666 <DecodeHuffmanPairs+0x552>
 80145cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145d0:	2b03      	cmp	r3, #3
 80145d2:	d148      	bne.n	8014666 <DecodeHuffmanPairs+0x552>
					minBits = linBits + 1;
 80145d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d6:	3301      	adds	r3, #1
 80145d8:	617b      	str	r3, [r7, #20]
					if (cachedBits + bitsLeft < minBits)
 80145da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	4413      	add	r3, r2
 80145e0:	697a      	ldr	r2, [r7, #20]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	dd15      	ble.n	8014612 <DecodeHuffmanPairs+0x4fe>
						return -1;
 80145e6:	f04f 33ff 	mov.w	r3, #4294967295
 80145ea:	e078      	b.n	80146de <DecodeHuffmanPairs+0x5ca>
					while (cachedBits < minBits) {
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80145ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80145ee:	1c5a      	adds	r2, r3, #1
 80145f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	461a      	mov	r2, r3
 80145f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145f8:	f1c3 0318 	rsb	r3, r3, #24
 80145fc:	fa02 f303 	lsl.w	r3, r2, r3
 8014600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014602:	4313      	orrs	r3, r2
 8014604:	637b      	str	r3, [r7, #52]	; 0x34
						cachedBits += 8;
 8014606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014608:	3308      	adds	r3, #8
 801460a:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft -= 8;
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	3b08      	subs	r3, #8
 8014610:	603b      	str	r3, [r7, #0]
					while (cachedBits < minBits) {
 8014612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	429a      	cmp	r2, r3
 8014618:	dbe8      	blt.n	80145ec <DecodeHuffmanPairs+0x4d8>
					}
					if (bitsLeft < 0) {
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	da0f      	bge.n	8014640 <DecodeHuffmanPairs+0x52c>
						cachedBits += bitsLeft;
 8014620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	4413      	add	r3, r2
 8014626:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft = 0;
 8014628:	2300      	movs	r3, #0
 801462a:	603b      	str	r3, [r7, #0]
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 801462c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801462e:	3b01      	subs	r3, #1
 8014630:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014634:	fa42 f303 	asr.w	r3, r2, r3
 8014638:	461a      	mov	r2, r3
 801463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801463c:	4013      	ands	r3, r2
 801463e:	637b      	str	r3, [r7, #52]	; 0x34
					}
					y += (int)(cache >> (32 - linBits));
 8014640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014642:	f1c3 0320 	rsb	r3, r3, #32
 8014646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014648:	fa22 f303 	lsr.w	r3, r2, r3
 801464c:	461a      	mov	r2, r3
 801464e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014650:	4413      	add	r3, r2
 8014652:	647b      	str	r3, [r7, #68]	; 0x44
					cachedBits -= linBits;
 8014654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014658:	1ad3      	subs	r3, r2, r3
 801465a:	643b      	str	r3, [r7, #64]	; 0x40
					cache <<= linBits;
 801465c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014660:	fa02 f303 	lsl.w	r3, r2, r3
 8014664:	637b      	str	r3, [r7, #52]	; 0x34
				}
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 8014666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014668:	2b00      	cmp	r3, #0
 801466a:	d00b      	beq.n	8014684 <DecodeHuffmanPairs+0x570>
 801466c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801466e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8014672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014674:	4313      	orrs	r3, r2
 8014676:	647b      	str	r3, [r7, #68]	; 0x44
 8014678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801467a:	005b      	lsls	r3, r3, #1
 801467c:	637b      	str	r3, [r7, #52]	; 0x34
 801467e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014680:	3b01      	subs	r3, #1
 8014682:	643b      	str	r3, [r7, #64]	; 0x40

				/* ran out of bits - should never have consumed padBits */
				if (cachedBits < padBits)
 8014684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014688:	429a      	cmp	r2, r3
 801468a:	da02      	bge.n	8014692 <DecodeHuffmanPairs+0x57e>
					return -1;
 801468c:	f04f 33ff 	mov.w	r3, #4294967295
 8014690:	e025      	b.n	80146de <DecodeHuffmanPairs+0x5ca>

				*xy++ = x;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	1d1a      	adds	r2, r3, #4
 8014696:	60fa      	str	r2, [r7, #12]
 8014698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801469a:	601a      	str	r2, [r3, #0]
				*xy++ = y;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	1d1a      	adds	r2, r3, #4
 80146a0:	60fa      	str	r2, [r7, #12]
 80146a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80146a4:	601a      	str	r2, [r3, #0]
				nVals -= 2;
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	3b02      	subs	r3, #2
 80146aa:	60bb      	str	r3, [r7, #8]
				tCurr = tBase;
 80146ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ae:	63bb      	str	r3, [r7, #56]	; 0x38
			while (nVals > 0 && cachedBits >= 11 ) {
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	dd03      	ble.n	80146be <DecodeHuffmanPairs+0x5aa>
 80146b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146b8:	2b0a      	cmp	r3, #10
 80146ba:	f73f aee0 	bgt.w	801447e <DecodeHuffmanPairs+0x36a>
		while (nVals > 0) {
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	f73f ae79 	bgt.w	80143b8 <DecodeHuffmanPairs+0x2a4>
			}
		}
		bitsLeft += (cachedBits - padBits);
 80146c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80146c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ca:	1ad3      	subs	r3, r2, r3
 80146cc:	683a      	ldr	r2, [r7, #0]
 80146ce:	4413      	add	r3, r2
 80146d0:	603b      	str	r3, [r7, #0]
		return (startBits - bitsLeft);
 80146d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	1ad3      	subs	r3, r2, r3
 80146d8:	e001      	b.n	80146de <DecodeHuffmanPairs+0x5ca>
	}

	/* error in bitstream - trying to access unused Huffman table */
	return -1;
 80146da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3754      	adds	r7, #84	; 0x54
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr
 80146ea:	bf00      	nop

080146ec <DecodeHuffmanQuads>:
 *                of the quad word after which all samples are 0)
 * 
 * Notes:        si_huff.bit tests every vwxy output in both quad tables
 **************************************************************************************/
static int DecodeHuffmanQuads(int *vwxy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 80146ec:	b480      	push	{r7}
 80146ee:	b091      	sub	sp, #68	; 0x44
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
 80146f8:	603b      	str	r3, [r7, #0]
	int i, v, w, x, y;
	int len, maxBits, cachedBits, padBits;
	unsigned int cache;
	unsigned char cw, *tBase;

	if (bitsLeft <= 0)
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	dc01      	bgt.n	8014704 <DecodeHuffmanQuads+0x18>
		return 0;
 8014700:	2300      	movs	r3, #0
 8014702:	e124      	b.n	801494e <DecodeHuffmanQuads+0x262>

	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 8014704:	4a95      	ldr	r2, [pc, #596]	; (801495c <DecodeHuffmanQuads+0x270>)
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801470c:	461a      	mov	r2, r3
 801470e:	4b94      	ldr	r3, [pc, #592]	; (8014960 <DecodeHuffmanQuads+0x274>)
 8014710:	4413      	add	r3, r2
 8014712:	61fb      	str	r3, [r7, #28]
	maxBits = quadTabMaxBits[tabIdx];
 8014714:	4a93      	ldr	r2, [pc, #588]	; (8014964 <DecodeHuffmanQuads+0x278>)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801471c:	61bb      	str	r3, [r7, #24]

	/* initially fill cache with any partial byte */
	cache = 0;
 801471e:	2300      	movs	r3, #0
 8014720:	623b      	str	r3, [r7, #32]
	cachedBits = (8 - bitOffset) & 0x07;
 8014722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014724:	425b      	negs	r3, r3
 8014726:	f003 0307 	and.w	r3, r3, #7
 801472a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cachedBits)
 801472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801472e:	2b00      	cmp	r3, #0
 8014730:	d00a      	beq.n	8014748 <DecodeHuffmanQuads+0x5c>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 8014732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014734:	1c5a      	adds	r2, r3, #1
 8014736:	64ba      	str	r2, [r7, #72]	; 0x48
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	461a      	mov	r2, r3
 801473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801473e:	f1c3 0320 	rsb	r3, r3, #32
 8014742:	fa02 f303 	lsl.w	r3, r2, r3
 8014746:	623b      	str	r3, [r7, #32]
	bitsLeft -= cachedBits;
 8014748:	683a      	ldr	r2, [r7, #0]
 801474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801474c:	1ad3      	subs	r3, r2, r3
 801474e:	603b      	str	r3, [r7, #0]

	i = padBits = 0;
 8014750:	2300      	movs	r3, #0
 8014752:	627b      	str	r3, [r7, #36]	; 0x24
 8014754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014756:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (i < (nVals - 3)) {
 8014758:	e0f2      	b.n	8014940 <DecodeHuffmanQuads+0x254>
		/* refill cache - assumes cachedBits <= 16 */
		if (bitsLeft >= 16) {
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	2b0f      	cmp	r3, #15
 801475e:	dd20      	ble.n	80147a2 <DecodeHuffmanQuads+0xb6>
			/* load 2 new bytes into left-justified cache */
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8014760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014762:	1c5a      	adds	r2, r3, #1
 8014764:	64ba      	str	r2, [r7, #72]	; 0x48
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	461a      	mov	r2, r3
 801476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801476c:	f1c3 0318 	rsb	r3, r3, #24
 8014770:	fa02 f303 	lsl.w	r3, r2, r3
 8014774:	6a3a      	ldr	r2, [r7, #32]
 8014776:	4313      	orrs	r3, r2
 8014778:	623b      	str	r3, [r7, #32]
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 801477a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801477c:	1c5a      	adds	r2, r3, #1
 801477e:	64ba      	str	r2, [r7, #72]	; 0x48
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	461a      	mov	r2, r3
 8014784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014786:	f1c3 0310 	rsb	r3, r3, #16
 801478a:	fa02 f303 	lsl.w	r3, r2, r3
 801478e:	6a3a      	ldr	r2, [r7, #32]
 8014790:	4313      	orrs	r3, r2
 8014792:	623b      	str	r3, [r7, #32]
			cachedBits += 16;
 8014794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014796:	3310      	adds	r3, #16
 8014798:	62bb      	str	r3, [r7, #40]	; 0x28
			bitsLeft -= 16;
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	3b10      	subs	r3, #16
 801479e:	603b      	str	r3, [r7, #0]
 80147a0:	e0c5      	b.n	801492e <DecodeHuffmanQuads+0x242>
		} else {
			/* last time through, pad cache with zeros and drain cache */
			if (cachedBits + bitsLeft <= 0) return i;
 80147a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	4413      	add	r3, r2
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	dc01      	bgt.n	80147b0 <DecodeHuffmanQuads+0xc4>
 80147ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147ae:	e0ce      	b.n	801494e <DecodeHuffmanQuads+0x262>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	dd0c      	ble.n	80147d0 <DecodeHuffmanQuads+0xe4>
 80147b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147b8:	1c5a      	adds	r2, r3, #1
 80147ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	461a      	mov	r2, r3
 80147c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c2:	f1c3 0318 	rsb	r3, r3, #24
 80147c6:	fa02 f303 	lsl.w	r3, r2, r3
 80147ca:	6a3a      	ldr	r2, [r7, #32]
 80147cc:	4313      	orrs	r3, r2
 80147ce:	623b      	str	r3, [r7, #32]
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	2b08      	cmp	r3, #8
 80147d4:	dd0c      	ble.n	80147f0 <DecodeHuffmanQuads+0x104>
 80147d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147d8:	1c5a      	adds	r2, r3, #1
 80147da:	64ba      	str	r2, [r7, #72]	; 0x48
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	461a      	mov	r2, r3
 80147e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e2:	f1c3 0310 	rsb	r3, r3, #16
 80147e6:	fa02 f303 	lsl.w	r3, r2, r3
 80147ea:	6a3a      	ldr	r2, [r7, #32]
 80147ec:	4313      	orrs	r3, r2
 80147ee:	623b      	str	r3, [r7, #32]
			cachedBits += bitsLeft;
 80147f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	4413      	add	r3, r2
 80147f6:	62bb      	str	r3, [r7, #40]	; 0x28
			bitsLeft = 0;
 80147f8:	2300      	movs	r3, #0
 80147fa:	603b      	str	r3, [r7, #0]

			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 80147fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147fe:	3b01      	subs	r3, #1
 8014800:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014804:	fa42 f303 	asr.w	r3, r2, r3
 8014808:	461a      	mov	r2, r3
 801480a:	6a3b      	ldr	r3, [r7, #32]
 801480c:	4013      	ands	r3, r2
 801480e:	623b      	str	r3, [r7, #32]
			padBits = 10;
 8014810:	230a      	movs	r3, #10
 8014812:	627b      	str	r3, [r7, #36]	; 0x24
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 8014814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014818:	4413      	add	r3, r2
 801481a:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		/* largest maxBits = 6, plus 4 for sign bits, so make sure cache has at least 10 bits */
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 801481c:	e087      	b.n	801492e <DecodeHuffmanQuads+0x242>
			cw = tBase[cache >> (32 - maxBits)];
 801481e:	69bb      	ldr	r3, [r7, #24]
 8014820:	f1c3 0320 	rsb	r3, r3, #32
 8014824:	6a3a      	ldr	r2, [r7, #32]
 8014826:	fa22 f303 	lsr.w	r3, r2, r3
 801482a:	69fa      	ldr	r2, [r7, #28]
 801482c:	4413      	add	r3, r2
 801482e:	781b      	ldrb	r3, [r3, #0]
 8014830:	75fb      	strb	r3, [r7, #23]
			len = GetHLenQ(cw);
 8014832:	7dfb      	ldrb	r3, [r7, #23]
 8014834:	091b      	lsrs	r3, r3, #4
 8014836:	b2db      	uxtb	r3, r3
 8014838:	f003 030f 	and.w	r3, r3, #15
 801483c:	613b      	str	r3, [r7, #16]
			cachedBits -= len;
 801483e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	1ad3      	subs	r3, r2, r3
 8014844:	62bb      	str	r3, [r7, #40]	; 0x28
			cache <<= len;
 8014846:	6a3a      	ldr	r2, [r7, #32]
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	fa02 f303 	lsl.w	r3, r2, r3
 801484e:	623b      	str	r3, [r7, #32]

			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 8014850:	7dfb      	ldrb	r3, [r7, #23]
 8014852:	08db      	lsrs	r3, r3, #3
 8014854:	b2db      	uxtb	r3, r3
 8014856:	f003 0301 	and.w	r3, r3, #1
 801485a:	63bb      	str	r3, [r7, #56]	; 0x38
 801485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801485e:	2b00      	cmp	r3, #0
 8014860:	d00b      	beq.n	801487a <DecodeHuffmanQuads+0x18e>
 8014862:	6a3b      	ldr	r3, [r7, #32]
 8014864:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8014868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801486a:	4313      	orrs	r3, r2
 801486c:	63bb      	str	r3, [r7, #56]	; 0x38
 801486e:	6a3b      	ldr	r3, [r7, #32]
 8014870:	005b      	lsls	r3, r3, #1
 8014872:	623b      	str	r3, [r7, #32]
 8014874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014876:	3b01      	subs	r3, #1
 8014878:	62bb      	str	r3, [r7, #40]	; 0x28
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 801487a:	7dfb      	ldrb	r3, [r7, #23]
 801487c:	089b      	lsrs	r3, r3, #2
 801487e:	b2db      	uxtb	r3, r3
 8014880:	f003 0301 	and.w	r3, r3, #1
 8014884:	637b      	str	r3, [r7, #52]	; 0x34
 8014886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014888:	2b00      	cmp	r3, #0
 801488a:	d00b      	beq.n	80148a4 <DecodeHuffmanQuads+0x1b8>
 801488c:	6a3b      	ldr	r3, [r7, #32]
 801488e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8014892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014894:	4313      	orrs	r3, r2
 8014896:	637b      	str	r3, [r7, #52]	; 0x34
 8014898:	6a3b      	ldr	r3, [r7, #32]
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	623b      	str	r3, [r7, #32]
 801489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148a0:	3b01      	subs	r3, #1
 80148a2:	62bb      	str	r3, [r7, #40]	; 0x28
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 80148a4:	7dfb      	ldrb	r3, [r7, #23]
 80148a6:	085b      	lsrs	r3, r3, #1
 80148a8:	b2db      	uxtb	r3, r3
 80148aa:	f003 0301 	and.w	r3, r3, #1
 80148ae:	633b      	str	r3, [r7, #48]	; 0x30
 80148b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d00b      	beq.n	80148ce <DecodeHuffmanQuads+0x1e2>
 80148b6:	6a3b      	ldr	r3, [r7, #32]
 80148b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80148bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148be:	4313      	orrs	r3, r2
 80148c0:	633b      	str	r3, [r7, #48]	; 0x30
 80148c2:	6a3b      	ldr	r3, [r7, #32]
 80148c4:	005b      	lsls	r3, r3, #1
 80148c6:	623b      	str	r3, [r7, #32]
 80148c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ca:	3b01      	subs	r3, #1
 80148cc:	62bb      	str	r3, [r7, #40]	; 0x28
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 80148ce:	7dfb      	ldrb	r3, [r7, #23]
 80148d0:	f003 0301 	and.w	r3, r3, #1
 80148d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80148d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d00b      	beq.n	80148f4 <DecodeHuffmanQuads+0x208>
 80148dc:	6a3b      	ldr	r3, [r7, #32]
 80148de:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80148e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148e4:	4313      	orrs	r3, r2
 80148e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80148e8:	6a3b      	ldr	r3, [r7, #32]
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	623b      	str	r3, [r7, #32]
 80148ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f0:	3b01      	subs	r3, #1
 80148f2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* ran out of bits - okay (means we're done) */
			if (cachedBits < padBits)
 80148f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f8:	429a      	cmp	r2, r3
 80148fa:	da01      	bge.n	8014900 <DecodeHuffmanQuads+0x214>
				return i;
 80148fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148fe:	e026      	b.n	801494e <DecodeHuffmanQuads+0x262>

			*vwxy++ = v;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	1d1a      	adds	r2, r3, #4
 8014904:	60fa      	str	r2, [r7, #12]
 8014906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014908:	601a      	str	r2, [r3, #0]
			*vwxy++ = w;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	1d1a      	adds	r2, r3, #4
 801490e:	60fa      	str	r2, [r7, #12]
 8014910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014912:	601a      	str	r2, [r3, #0]
			*vwxy++ = x;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	1d1a      	adds	r2, r3, #4
 8014918:	60fa      	str	r2, [r7, #12]
 801491a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801491c:	601a      	str	r2, [r3, #0]
			*vwxy++ = y;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	1d1a      	adds	r2, r3, #4
 8014922:	60fa      	str	r2, [r7, #12]
 8014924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014926:	601a      	str	r2, [r3, #0]
			i += 4;
 8014928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801492a:	3304      	adds	r3, #4
 801492c:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	3b03      	subs	r3, #3
 8014932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014934:	429a      	cmp	r2, r3
 8014936:	da03      	bge.n	8014940 <DecodeHuffmanQuads+0x254>
 8014938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493a:	2b09      	cmp	r3, #9
 801493c:	f73f af6f 	bgt.w	801481e <DecodeHuffmanQuads+0x132>
	while (i < (nVals - 3)) {
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	3b03      	subs	r3, #3
 8014944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014946:	429a      	cmp	r2, r3
 8014948:	f6ff af07 	blt.w	801475a <DecodeHuffmanQuads+0x6e>
		}
	}

	/* decoded max number of quad values */
	return i;
 801494c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801494e:	4618      	mov	r0, r3
 8014950:	3744      	adds	r7, #68	; 0x44
 8014952:	46bd      	mov	sp, r7
 8014954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014958:	4770      	bx	lr
 801495a:	bf00      	nop
 801495c:	0802a264 	.word	0x0802a264
 8014960:	0802a214 	.word	0x0802a214
 8014964:	0802a26c 	.word	0x0802a26c

08014968 <xmp3fixpt_DecodeHuffman>:
 *                byte located at buf + offset)
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b096      	sub	sp, #88	; 0x58
 801496c:	af02      	add	r7, sp, #8
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
 8014974:	603b      	str	r3, [r7, #0]
	int r1Start, r2Start, rEnd[4];	/* region boundaries */
	int i, w, bitsUsed, bitsLeft;
	unsigned char *startBuf = buf;
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	63fb      	str	r3, [r7, #60]	; 0x3c
	SideInfoSub *sis;
	ScaleFactorInfo *sfi;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS) {
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00f      	beq.n	80149a0 <xmp3fixpt_DecodeHuffman+0x38>
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d00b      	beq.n	80149a0 <xmp3fixpt_DecodeHuffman+0x38>
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d007      	beq.n	80149a0 <xmp3fixpt_DecodeHuffman+0x38>
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	689b      	ldr	r3, [r3, #8]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d003      	beq.n	80149a0 <xmp3fixpt_DecodeHuffman+0x38>
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d104      	bne.n	80149aa <xmp3fixpt_DecodeHuffman+0x42>
		i = 1;
 80149a0:	2301      	movs	r3, #1
 80149a2:	647b      	str	r3, [r7, #68]	; 0x44
		return -1;
 80149a4:	f04f 33ff 	mov.w	r3, #4294967295
 80149a8:	e146      	b.n	8014c38 <xmp3fixpt_DecodeHuffman+0x2d0>
	}
	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	63bb      	str	r3, [r7, #56]	; 0x38
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	685b      	ldr	r3, [r3, #4]
 80149b4:	637b      	str	r3, [r7, #52]	; 0x34
	sis = &si->sis[gr][ch];
 80149b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80149b8:	461a      	mov	r2, r3
 80149ba:	00d2      	lsls	r2, r2, #3
 80149bc:	441a      	add	r2, r3
 80149be:	00d3      	lsls	r3, r2, #3
 80149c0:	461a      	mov	r2, r3
 80149c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80149c4:	460b      	mov	r3, r1
 80149c6:	00db      	lsls	r3, r3, #3
 80149c8:	440b      	add	r3, r1
 80149ca:	011b      	lsls	r3, r3, #4
 80149cc:	4413      	add	r3, r2
 80149ce:	3328      	adds	r3, #40	; 0x28
 80149d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80149d2:	4413      	add	r3, r2
 80149d4:	633b      	str	r3, [r7, #48]	; 0x30
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	689b      	ldr	r3, [r3, #8]
 80149da:	62fb      	str	r3, [r7, #44]	; 0x2c
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	68db      	ldr	r3, [r3, #12]
 80149e0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (huffBlockBits < 0) {
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	da04      	bge.n	80149f2 <xmp3fixpt_DecodeHuffman+0x8a>
		i = 1;
 80149e8:	2301      	movs	r3, #1
 80149ea:	647b      	str	r3, [r7, #68]	; 0x44
		return -1;
 80149ec:	f04f 33ff 	mov.w	r3, #4294967295
 80149f0:	e122      	b.n	8014c38 <xmp3fixpt_DecodeHuffman+0x2d0>
	}

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 80149f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f4:	691b      	ldr	r3, [r3, #16]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d041      	beq.n	8014a7e <xmp3fixpt_DecodeHuffman+0x116>
 80149fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fc:	695b      	ldr	r3, [r3, #20]
 80149fe:	2b02      	cmp	r3, #2
 8014a00:	d13d      	bne.n	8014a7e <xmp3fixpt_DecodeHuffman+0x116>
		if (sis->mixedBlock == 0) {
 8014a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a04:	699b      	ldr	r3, [r3, #24]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d114      	bne.n	8014a34 <xmp3fixpt_DecodeHuffman+0xcc>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 8014a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a12:	3301      	adds	r3, #1
 8014a14:	498a      	ldr	r1, [pc, #552]	; (8014c40 <xmp3fixpt_DecodeHuffman+0x2d8>)
 8014a16:	fb81 0103 	smull	r0, r1, r1, r3
 8014a1a:	17db      	asrs	r3, r3, #31
 8014a1c:	1acb      	subs	r3, r1, r3
 8014a1e:	3314      	adds	r3, #20
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014a28:	461a      	mov	r2, r3
 8014a2a:	4613      	mov	r3, r2
 8014a2c:	005b      	lsls	r3, r3, #1
 8014a2e:	4413      	add	r3, r2
 8014a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a32:	e020      	b.n	8014a76 <xmp3fixpt_DecodeHuffman+0x10e>
		} else {
			if (fh->ver == MPEG1) {
 8014a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d108      	bne.n	8014a4e <xmp3fixpt_DecodeHuffman+0xe6>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 8014a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8014a44:	3201      	adds	r2, #1
 8014a46:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8014a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a4c:	e013      	b.n	8014a76 <xmp3fixpt_DecodeHuffman+0x10e>
			} else {
				/* see MPEG2 spec for explanation */
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 8014a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a52:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014a56:	461a      	mov	r2, r3
 8014a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a5c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8014a60:	1ad3      	subs	r3, r2, r3
 8014a62:	627b      	str	r3, [r7, #36]	; 0x24
				r1Start = fh->sfBand->l[6] + 2*w;
 8014a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a68:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a70:	005b      	lsls	r3, r3, #1
 8014a72:	4413      	add	r3, r2
 8014a74:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 8014a76:	f44f 7310 	mov.w	r3, #576	; 0x240
 8014a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8014a7c:	e013      	b.n	8014aa6 <xmp3fixpt_DecodeHuffman+0x13e>
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 8014a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8014a86:	3201      	adds	r2, #1
 8014a88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8014a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 8014a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8014a96:	1c51      	adds	r1, r2, #1
 8014a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014a9c:	440a      	add	r2, r1
 8014a9e:	3201      	adds	r2, #1
 8014aa0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8014aa4:	64bb      	str	r3, [r7, #72]	; 0x48
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 8014aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	005b      	lsls	r3, r3, #1
 8014aac:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014ab0:	bfa8      	it	ge
 8014ab2:	f44f 7310 	movge.w	r3, #576	; 0x240
 8014ab6:	61fb      	str	r3, [r7, #28]
	rEnd[2] = MIN(r2Start, rEnd[3]);
 8014ab8:	69fa      	ldr	r2, [r7, #28]
 8014aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014abc:	4293      	cmp	r3, r2
 8014abe:	bfa8      	it	ge
 8014ac0:	4613      	movge	r3, r2
 8014ac2:	61bb      	str	r3, [r7, #24]
	rEnd[1] = MIN(r1Start, rEnd[3]);
 8014ac4:	69fa      	ldr	r2, [r7, #28]
 8014ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ac8:	4293      	cmp	r3, r2
 8014aca:	bfa8      	it	ge
 8014acc:	4613      	movge	r3, r2
 8014ace:	617b      	str	r3, [r7, #20]
	rEnd[0] = 0;
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	613b      	str	r3, [r7, #16]

	/* rounds up to first all-zero pair (we don't check last pair for (x,y) == (non-zero, zero)) */
	hi->nonZeroBound[ch] = rEnd[3];
 8014ad4:	69f9      	ldr	r1, [r7, #28]
 8014ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014ada:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8014ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	643b      	str	r3, [r7, #64]	; 0x40
	for (i = 0; i < 3; i++) {
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8014aea:	e04f      	b.n	8014b8c <xmp3fixpt_DecodeHuffman+0x224>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 8014aec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014aee:	4613      	mov	r3, r2
 8014af0:	00db      	lsls	r3, r3, #3
 8014af2:	4413      	add	r3, r2
 8014af4:	021b      	lsls	r3, r3, #8
 8014af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014af8:	441a      	add	r2, r3
 8014afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014afc:	009b      	lsls	r3, r3, #2
 8014afe:	3350      	adds	r3, #80	; 0x50
 8014b00:	443b      	add	r3, r7
 8014b02:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	18d0      	adds	r0, r2, r3
 8014b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	009b      	lsls	r3, r3, #2
 8014b10:	3350      	adds	r3, #80	; 0x50
 8014b12:	443b      	add	r3, r7
 8014b14:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8014b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b1a:	009b      	lsls	r3, r3, #2
 8014b1c:	3350      	adds	r3, #80	; 0x50
 8014b1e:	443b      	add	r3, r7
 8014b20:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8014b24:	1ad1      	subs	r1, r2, r3
 8014b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b2a:	3306      	adds	r3, #6
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	4413      	add	r3, r2
 8014b30:	685a      	ldr	r2, [r3, #4]
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	9301      	str	r3, [sp, #4]
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	9300      	str	r3, [sp, #0]
 8014b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b3e:	f7ff fae9 	bl	8014114 <DecodeHuffmanPairs>
 8014b42:	6238      	str	r0, [r7, #32]
		if (bitsUsed < 0 || bitsUsed > bitsLeft) {
 8014b44:	6a3b      	ldr	r3, [r7, #32]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	db03      	blt.n	8014b52 <xmp3fixpt_DecodeHuffman+0x1ea>
 8014b4a:	6a3a      	ldr	r2, [r7, #32]
 8014b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	dd04      	ble.n	8014b5c <xmp3fixpt_DecodeHuffman+0x1f4>
			/* error - overran end of bitstream */
			i = 1;
 8014b52:	2301      	movs	r3, #1
 8014b54:	647b      	str	r3, [r7, #68]	; 0x44
			return -1;
 8014b56:	f04f 33ff 	mov.w	r3, #4294967295
 8014b5a:	e06d      	b.n	8014c38 <xmp3fixpt_DecodeHuffman+0x2d0>
		}

		/* update bitstream position */
		buf += (bitsUsed + *bitOffset) >> 3;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	6a3b      	ldr	r3, [r7, #32]
 8014b62:	4413      	add	r3, r2
 8014b64:	10db      	asrs	r3, r3, #3
 8014b66:	461a      	mov	r2, r3
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	60bb      	str	r3, [r7, #8]
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681a      	ldr	r2, [r3, #0]
 8014b72:	6a3b      	ldr	r3, [r7, #32]
 8014b74:	4413      	add	r3, r2
 8014b76:	f003 0207 	and.w	r2, r3, #7
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	601a      	str	r2, [r3, #0]
		bitsLeft -= bitsUsed;
 8014b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014b80:	6a3b      	ldr	r3, [r7, #32]
 8014b82:	1ad3      	subs	r3, r2, r3
 8014b84:	643b      	str	r3, [r7, #64]	; 0x40
	for (i = 0; i < 3; i++) {
 8014b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b88:	3301      	adds	r3, #1
 8014b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8014b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b8e:	2b02      	cmp	r3, #2
 8014b90:	ddac      	ble.n	8014aec <xmp3fixpt_DecodeHuffman+0x184>
	}

	/* decode Huffman quads (if any) */
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 8014b92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014b94:	4613      	mov	r3, r2
 8014b96:	00db      	lsls	r3, r3, #3
 8014b98:	4413      	add	r3, r2
 8014b9a:	021b      	lsls	r3, r3, #8
 8014b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b9e:	441a      	add	r2, r3
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	18d0      	adds	r0, r2, r3
 8014ba6:	69fb      	ldr	r3, [r7, #28]
 8014ba8:	f5c3 7110 	rsb	r1, r3, #576	; 0x240
 8014bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	9301      	str	r3, [sp, #4]
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	9300      	str	r3, [sp, #0]
 8014bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bbc:	f7ff fd96 	bl	80146ec <DecodeHuffmanQuads>
 8014bc0:	4601      	mov	r1, r0
 8014bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014bc6:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8014bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bce:	4419      	add	r1, r3
 8014bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014bd4:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8014bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 8014bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014be0:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8014be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014be8:	647b      	str	r3, [r7, #68]	; 0x44
 8014bea:	e00d      	b.n	8014c08 <xmp3fixpt_DecodeHuffman+0x2a0>
		hi->huffDecBuf[ch][i] = 0;
 8014bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014bee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	00db      	lsls	r3, r3, #3
 8014bf4:	4413      	add	r3, r2
 8014bf6:	019b      	lsls	r3, r3, #6
 8014bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014bfa:	4413      	add	r3, r2
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 8014c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c04:	3301      	adds	r3, #1
 8014c06:	647b      	str	r3, [r7, #68]	; 0x44
 8014c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c0a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014c0e:	dbed      	blt.n	8014bec <xmp3fixpt_DecodeHuffman+0x284>
	
	/* If bits used for 576 samples < huffBlockBits, then the extras are considered
	 *  to be stuffing bits (throw away, but need to return correct bitstream position) 
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	681a      	ldr	r2, [r3, #0]
 8014c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c16:	4413      	add	r3, r2
 8014c18:	10db      	asrs	r3, r3, #3
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	4413      	add	r3, r2
 8014c20:	60bb      	str	r3, [r7, #8]
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681a      	ldr	r2, [r3, #0]
 8014c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c28:	4413      	add	r3, r2
 8014c2a:	f003 0207 	and.w	r2, r3, #7
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	601a      	str	r2, [r3, #0]
	
	return (buf - startBuf);
 8014c32:	68ba      	ldr	r2, [r7, #8]
 8014c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c36:	1ad3      	subs	r3, r2, r3
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	3750      	adds	r7, #80	; 0x50
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd80      	pop	{r7, pc}
 8014c40:	55555556 	.word	0x55555556

08014c44 <MULSHIFT32>:
{
 8014c44:	b480      	push	{r7}
 8014c46:	b085      	sub	sp, #20
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8014c4e:	6879      	ldr	r1, [r7, #4]
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	fb81 2303 	smull	r2, r3, r1, r3
 8014c56:	60fa      	str	r2, [r7, #12]
 8014c58:	603b      	str	r3, [r7, #0]
    return y;
 8014c5a:	683b      	ldr	r3, [r7, #0]
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3714      	adds	r7, #20
 8014c60:	46bd      	mov	sp, r7
 8014c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c66:	4770      	bx	lr

08014c68 <FASTABS>:
{
 8014c68:	b480      	push	{r7}
 8014c6a:	b085      	sub	sp, #20
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
	int t=0; /*Really is not necessary to initialiaze only to avoid warning*/
 8014c70:	2300      	movs	r3, #0
 8014c72:	60fb      	str	r3, [r7, #12]
	__asm__ volatile (
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8014c7c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8014c80:	60fb      	str	r3, [r7, #12]
	return t;
 8014c82:	68fb      	ldr	r3, [r7, #12]
}
 8014c84:	4618      	mov	r0, r3
 8014c86:	3714      	adds	r7, #20
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8e:	4770      	bx	lr

08014c90 <CLZ>:
{
 8014c90:	b480      	push	{r7}
 8014c92:	b085      	sub	sp, #20
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
	if (!x)
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d101      	bne.n	8014ca2 <CLZ+0x12>
		return (sizeof(int) * 8);
 8014c9e:	2320      	movs	r3, #32
 8014ca0:	e00c      	b.n	8014cbc <CLZ+0x2c>
	numZeros = 0;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	60fb      	str	r3, [r7, #12]
	while (!(x & 0x80000000)) {
 8014ca6:	e005      	b.n	8014cb4 <CLZ+0x24>
		numZeros++;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	3301      	adds	r3, #1
 8014cac:	60fb      	str	r3, [r7, #12]
		x <<= 1;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	005b      	lsls	r3, r3, #1
 8014cb2:	607b      	str	r3, [r7, #4]
	while (!(x & 0x80000000)) {
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	daf6      	bge.n	8014ca8 <CLZ+0x18>
	return numZeros;
 8014cba:	68fb      	ldr	r3, [r7, #12]
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3714      	adds	r7, #20
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr

08014cc8 <AntiAlias>:
 *              assume at least 1 guard bit in x[] to avoid overflow
 *                (should be guaranteed from dequant, and max gain from stproc * max 
 *                 gain from AntiAlias < 2.0)
 **************************************************************************************/
static void AntiAlias(int *x, int nBfly)
{
 8014cc8:	b590      	push	{r4, r7, lr}
 8014cca:	b089      	sub	sp, #36	; 0x24
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	6039      	str	r1, [r7, #0]
	int k, a0, b0, c0, c1;
	const int *c;

	/* csa = Q31 */
	for (k = nBfly; k > 0; k--) {
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	61fb      	str	r3, [r7, #28]
 8014cd6:	e191      	b.n	8014ffc <AntiAlias+0x334>
		c = csa[0];
 8014cd8:	4ba1      	ldr	r3, [pc, #644]	; (8014f60 <AntiAlias+0x298>)
 8014cda:	61bb      	str	r3, [r7, #24]
		x += 18;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	3348      	adds	r3, #72	; 0x48
 8014ce0:	607b      	str	r3, [r7, #4]

		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014ce8:	617b      	str	r3, [r7, #20]
 8014cea:	69bb      	ldr	r3, [r7, #24]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	613b      	str	r3, [r7, #16]
 8014cf0:	69bb      	ldr	r3, [r7, #24]
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	61bb      	str	r3, [r7, #24]
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	60fb      	str	r3, [r7, #12]
 8014cfc:	69bb      	ldr	r3, [r7, #24]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	60bb      	str	r3, [r7, #8]
 8014d02:	69bb      	ldr	r3, [r7, #24]
 8014d04:	3304      	adds	r3, #4
 8014d06:	61bb      	str	r3, [r7, #24]
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8014d08:	6979      	ldr	r1, [r7, #20]
 8014d0a:	6938      	ldr	r0, [r7, #16]
 8014d0c:	f7ff ff9a 	bl	8014c44 <MULSHIFT32>
 8014d10:	4604      	mov	r4, r0
 8014d12:	68f9      	ldr	r1, [r7, #12]
 8014d14:	68b8      	ldr	r0, [r7, #8]
 8014d16:	f7ff ff95 	bl	8014c44 <MULSHIFT32>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	1ae2      	subs	r2, r4, r3
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	3b04      	subs	r3, #4
 8014d22:	0052      	lsls	r2, r2, #1
 8014d24:	601a      	str	r2, [r3, #0]
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8014d26:	68f9      	ldr	r1, [r7, #12]
 8014d28:	6938      	ldr	r0, [r7, #16]
 8014d2a:	f7ff ff8b 	bl	8014c44 <MULSHIFT32>
 8014d2e:	4604      	mov	r4, r0
 8014d30:	6979      	ldr	r1, [r7, #20]
 8014d32:	68b8      	ldr	r0, [r7, #8]
 8014d34:	f7ff ff86 	bl	8014c44 <MULSHIFT32>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	4423      	add	r3, r4
 8014d3c:	005a      	lsls	r2, r3, #1
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	601a      	str	r2, [r3, #0]

		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8014d48:	617b      	str	r3, [r7, #20]
 8014d4a:	69bb      	ldr	r3, [r7, #24]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	613b      	str	r3, [r7, #16]
 8014d50:	69bb      	ldr	r3, [r7, #24]
 8014d52:	3304      	adds	r3, #4
 8014d54:	61bb      	str	r3, [r7, #24]
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	685b      	ldr	r3, [r3, #4]
 8014d5a:	60fb      	str	r3, [r7, #12]
 8014d5c:	69bb      	ldr	r3, [r7, #24]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	60bb      	str	r3, [r7, #8]
 8014d62:	69bb      	ldr	r3, [r7, #24]
 8014d64:	3304      	adds	r3, #4
 8014d66:	61bb      	str	r3, [r7, #24]
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8014d68:	6979      	ldr	r1, [r7, #20]
 8014d6a:	6938      	ldr	r0, [r7, #16]
 8014d6c:	f7ff ff6a 	bl	8014c44 <MULSHIFT32>
 8014d70:	4604      	mov	r4, r0
 8014d72:	68f9      	ldr	r1, [r7, #12]
 8014d74:	68b8      	ldr	r0, [r7, #8]
 8014d76:	f7ff ff65 	bl	8014c44 <MULSHIFT32>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	1ae2      	subs	r2, r4, r3
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	3b08      	subs	r3, #8
 8014d82:	0052      	lsls	r2, r2, #1
 8014d84:	601a      	str	r2, [r3, #0]
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8014d86:	68f9      	ldr	r1, [r7, #12]
 8014d88:	6938      	ldr	r0, [r7, #16]
 8014d8a:	f7ff ff5b 	bl	8014c44 <MULSHIFT32>
 8014d8e:	4604      	mov	r4, r0
 8014d90:	6979      	ldr	r1, [r7, #20]
 8014d92:	68b8      	ldr	r0, [r7, #8]
 8014d94:	f7ff ff56 	bl	8014c44 <MULSHIFT32>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	18e2      	adds	r2, r4, r3
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	3304      	adds	r3, #4
 8014da0:	0052      	lsls	r2, r2, #1
 8014da2:	601a      	str	r2, [r3, #0]
		
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8014daa:	617b      	str	r3, [r7, #20]
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	613b      	str	r3, [r7, #16]
 8014db2:	69bb      	ldr	r3, [r7, #24]
 8014db4:	3304      	adds	r3, #4
 8014db6:	61bb      	str	r3, [r7, #24]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	689b      	ldr	r3, [r3, #8]
 8014dbc:	60fb      	str	r3, [r7, #12]
 8014dbe:	69bb      	ldr	r3, [r7, #24]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	60bb      	str	r3, [r7, #8]
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	3304      	adds	r3, #4
 8014dc8:	61bb      	str	r3, [r7, #24]
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8014dca:	6979      	ldr	r1, [r7, #20]
 8014dcc:	6938      	ldr	r0, [r7, #16]
 8014dce:	f7ff ff39 	bl	8014c44 <MULSHIFT32>
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	68f9      	ldr	r1, [r7, #12]
 8014dd6:	68b8      	ldr	r0, [r7, #8]
 8014dd8:	f7ff ff34 	bl	8014c44 <MULSHIFT32>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	1ae2      	subs	r2, r4, r3
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	3b0c      	subs	r3, #12
 8014de4:	0052      	lsls	r2, r2, #1
 8014de6:	601a      	str	r2, [r3, #0]
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8014de8:	68f9      	ldr	r1, [r7, #12]
 8014dea:	6938      	ldr	r0, [r7, #16]
 8014dec:	f7ff ff2a 	bl	8014c44 <MULSHIFT32>
 8014df0:	4604      	mov	r4, r0
 8014df2:	6979      	ldr	r1, [r7, #20]
 8014df4:	68b8      	ldr	r0, [r7, #8]
 8014df6:	f7ff ff25 	bl	8014c44 <MULSHIFT32>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	18e2      	adds	r2, r4, r3
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	3308      	adds	r3, #8
 8014e02:	0052      	lsls	r2, r2, #1
 8014e04:	601a      	str	r2, [r3, #0]

		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8014e0c:	617b      	str	r3, [r7, #20]
 8014e0e:	69bb      	ldr	r3, [r7, #24]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	613b      	str	r3, [r7, #16]
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	3304      	adds	r3, #4
 8014e18:	61bb      	str	r3, [r7, #24]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	68db      	ldr	r3, [r3, #12]
 8014e1e:	60fb      	str	r3, [r7, #12]
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	60bb      	str	r3, [r7, #8]
 8014e26:	69bb      	ldr	r3, [r7, #24]
 8014e28:	3304      	adds	r3, #4
 8014e2a:	61bb      	str	r3, [r7, #24]
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8014e2c:	6979      	ldr	r1, [r7, #20]
 8014e2e:	6938      	ldr	r0, [r7, #16]
 8014e30:	f7ff ff08 	bl	8014c44 <MULSHIFT32>
 8014e34:	4604      	mov	r4, r0
 8014e36:	68f9      	ldr	r1, [r7, #12]
 8014e38:	68b8      	ldr	r0, [r7, #8]
 8014e3a:	f7ff ff03 	bl	8014c44 <MULSHIFT32>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	1ae2      	subs	r2, r4, r3
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	3b10      	subs	r3, #16
 8014e46:	0052      	lsls	r2, r2, #1
 8014e48:	601a      	str	r2, [r3, #0]
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8014e4a:	68f9      	ldr	r1, [r7, #12]
 8014e4c:	6938      	ldr	r0, [r7, #16]
 8014e4e:	f7ff fef9 	bl	8014c44 <MULSHIFT32>
 8014e52:	4604      	mov	r4, r0
 8014e54:	6979      	ldr	r1, [r7, #20]
 8014e56:	68b8      	ldr	r0, [r7, #8]
 8014e58:	f7ff fef4 	bl	8014c44 <MULSHIFT32>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	18e2      	adds	r2, r4, r3
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	330c      	adds	r3, #12
 8014e64:	0052      	lsls	r2, r2, #1
 8014e66:	601a      	str	r2, [r3, #0]

		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8014e6e:	617b      	str	r3, [r7, #20]
 8014e70:	69bb      	ldr	r3, [r7, #24]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	613b      	str	r3, [r7, #16]
 8014e76:	69bb      	ldr	r3, [r7, #24]
 8014e78:	3304      	adds	r3, #4
 8014e7a:	61bb      	str	r3, [r7, #24]
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	691b      	ldr	r3, [r3, #16]
 8014e80:	60fb      	str	r3, [r7, #12]
 8014e82:	69bb      	ldr	r3, [r7, #24]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	60bb      	str	r3, [r7, #8]
 8014e88:	69bb      	ldr	r3, [r7, #24]
 8014e8a:	3304      	adds	r3, #4
 8014e8c:	61bb      	str	r3, [r7, #24]
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8014e8e:	6979      	ldr	r1, [r7, #20]
 8014e90:	6938      	ldr	r0, [r7, #16]
 8014e92:	f7ff fed7 	bl	8014c44 <MULSHIFT32>
 8014e96:	4604      	mov	r4, r0
 8014e98:	68f9      	ldr	r1, [r7, #12]
 8014e9a:	68b8      	ldr	r0, [r7, #8]
 8014e9c:	f7ff fed2 	bl	8014c44 <MULSHIFT32>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	1ae2      	subs	r2, r4, r3
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	3b14      	subs	r3, #20
 8014ea8:	0052      	lsls	r2, r2, #1
 8014eaa:	601a      	str	r2, [r3, #0]
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8014eac:	68f9      	ldr	r1, [r7, #12]
 8014eae:	6938      	ldr	r0, [r7, #16]
 8014eb0:	f7ff fec8 	bl	8014c44 <MULSHIFT32>
 8014eb4:	4604      	mov	r4, r0
 8014eb6:	6979      	ldr	r1, [r7, #20]
 8014eb8:	68b8      	ldr	r0, [r7, #8]
 8014eba:	f7ff fec3 	bl	8014c44 <MULSHIFT32>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	18e2      	adds	r2, r4, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	3310      	adds	r3, #16
 8014ec6:	0052      	lsls	r2, r2, #1
 8014ec8:	601a      	str	r2, [r3, #0]

		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8014ed0:	617b      	str	r3, [r7, #20]
 8014ed2:	69bb      	ldr	r3, [r7, #24]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	613b      	str	r3, [r7, #16]
 8014ed8:	69bb      	ldr	r3, [r7, #24]
 8014eda:	3304      	adds	r3, #4
 8014edc:	61bb      	str	r3, [r7, #24]
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	695b      	ldr	r3, [r3, #20]
 8014ee2:	60fb      	str	r3, [r7, #12]
 8014ee4:	69bb      	ldr	r3, [r7, #24]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	60bb      	str	r3, [r7, #8]
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	3304      	adds	r3, #4
 8014eee:	61bb      	str	r3, [r7, #24]
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8014ef0:	6979      	ldr	r1, [r7, #20]
 8014ef2:	6938      	ldr	r0, [r7, #16]
 8014ef4:	f7ff fea6 	bl	8014c44 <MULSHIFT32>
 8014ef8:	4604      	mov	r4, r0
 8014efa:	68f9      	ldr	r1, [r7, #12]
 8014efc:	68b8      	ldr	r0, [r7, #8]
 8014efe:	f7ff fea1 	bl	8014c44 <MULSHIFT32>
 8014f02:	4603      	mov	r3, r0
 8014f04:	1ae2      	subs	r2, r4, r3
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	3b18      	subs	r3, #24
 8014f0a:	0052      	lsls	r2, r2, #1
 8014f0c:	601a      	str	r2, [r3, #0]
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8014f0e:	68f9      	ldr	r1, [r7, #12]
 8014f10:	6938      	ldr	r0, [r7, #16]
 8014f12:	f7ff fe97 	bl	8014c44 <MULSHIFT32>
 8014f16:	4604      	mov	r4, r0
 8014f18:	6979      	ldr	r1, [r7, #20]
 8014f1a:	68b8      	ldr	r0, [r7, #8]
 8014f1c:	f7ff fe92 	bl	8014c44 <MULSHIFT32>
 8014f20:	4603      	mov	r3, r0
 8014f22:	18e2      	adds	r2, r4, r3
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	3314      	adds	r3, #20
 8014f28:	0052      	lsls	r2, r2, #1
 8014f2a:	601a      	str	r2, [r3, #0]

		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8014f32:	617b      	str	r3, [r7, #20]
 8014f34:	69bb      	ldr	r3, [r7, #24]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	613b      	str	r3, [r7, #16]
 8014f3a:	69bb      	ldr	r3, [r7, #24]
 8014f3c:	3304      	adds	r3, #4
 8014f3e:	61bb      	str	r3, [r7, #24]
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	699b      	ldr	r3, [r3, #24]
 8014f44:	60fb      	str	r3, [r7, #12]
 8014f46:	69bb      	ldr	r3, [r7, #24]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	60bb      	str	r3, [r7, #8]
 8014f4c:	69bb      	ldr	r3, [r7, #24]
 8014f4e:	3304      	adds	r3, #4
 8014f50:	61bb      	str	r3, [r7, #24]
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8014f52:	6979      	ldr	r1, [r7, #20]
 8014f54:	6938      	ldr	r0, [r7, #16]
 8014f56:	f7ff fe75 	bl	8014c44 <MULSHIFT32>
 8014f5a:	4604      	mov	r4, r0
 8014f5c:	68f9      	ldr	r1, [r7, #12]
 8014f5e:	e001      	b.n	8014f64 <AntiAlias+0x29c>
 8014f60:	0802a6d0 	.word	0x0802a6d0
 8014f64:	68b8      	ldr	r0, [r7, #8]
 8014f66:	f7ff fe6d 	bl	8014c44 <MULSHIFT32>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	1ae2      	subs	r2, r4, r3
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	3b1c      	subs	r3, #28
 8014f72:	0052      	lsls	r2, r2, #1
 8014f74:	601a      	str	r2, [r3, #0]
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8014f76:	68f9      	ldr	r1, [r7, #12]
 8014f78:	6938      	ldr	r0, [r7, #16]
 8014f7a:	f7ff fe63 	bl	8014c44 <MULSHIFT32>
 8014f7e:	4604      	mov	r4, r0
 8014f80:	6979      	ldr	r1, [r7, #20]
 8014f82:	68b8      	ldr	r0, [r7, #8]
 8014f84:	f7ff fe5e 	bl	8014c44 <MULSHIFT32>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	18e2      	adds	r2, r4, r3
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	3318      	adds	r3, #24
 8014f90:	0052      	lsls	r2, r2, #1
 8014f92:	601a      	str	r2, [r3, #0]

		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8014f9a:	617b      	str	r3, [r7, #20]
 8014f9c:	69bb      	ldr	r3, [r7, #24]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	613b      	str	r3, [r7, #16]
 8014fa2:	69bb      	ldr	r3, [r7, #24]
 8014fa4:	3304      	adds	r3, #4
 8014fa6:	61bb      	str	r3, [r7, #24]
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	69db      	ldr	r3, [r3, #28]
 8014fac:	60fb      	str	r3, [r7, #12]
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	60bb      	str	r3, [r7, #8]
 8014fb4:	69bb      	ldr	r3, [r7, #24]
 8014fb6:	3304      	adds	r3, #4
 8014fb8:	61bb      	str	r3, [r7, #24]
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8014fba:	6979      	ldr	r1, [r7, #20]
 8014fbc:	6938      	ldr	r0, [r7, #16]
 8014fbe:	f7ff fe41 	bl	8014c44 <MULSHIFT32>
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	68f9      	ldr	r1, [r7, #12]
 8014fc6:	68b8      	ldr	r0, [r7, #8]
 8014fc8:	f7ff fe3c 	bl	8014c44 <MULSHIFT32>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	1ae2      	subs	r2, r4, r3
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	3b20      	subs	r3, #32
 8014fd4:	0052      	lsls	r2, r2, #1
 8014fd6:	601a      	str	r2, [r3, #0]
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8014fd8:	68f9      	ldr	r1, [r7, #12]
 8014fda:	6938      	ldr	r0, [r7, #16]
 8014fdc:	f7ff fe32 	bl	8014c44 <MULSHIFT32>
 8014fe0:	4604      	mov	r4, r0
 8014fe2:	6979      	ldr	r1, [r7, #20]
 8014fe4:	68b8      	ldr	r0, [r7, #8]
 8014fe6:	f7ff fe2d 	bl	8014c44 <MULSHIFT32>
 8014fea:	4603      	mov	r3, r0
 8014fec:	18e2      	adds	r2, r4, r3
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	331c      	adds	r3, #28
 8014ff2:	0052      	lsls	r2, r2, #1
 8014ff4:	601a      	str	r2, [r3, #0]
	for (k = nBfly; k > 0; k--) {
 8014ff6:	69fb      	ldr	r3, [r7, #28]
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	61fb      	str	r3, [r7, #28]
 8014ffc:	69fb      	ldr	r3, [r7, #28]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	f73f ae6a 	bgt.w	8014cd8 <AntiAlias+0x10>
	}
}
 8015004:	bf00      	nop
 8015006:	bf00      	nop
 8015008:	3724      	adds	r7, #36	; 0x24
 801500a:	46bd      	mov	sp, r7
 801500c:	bd90      	pop	{r4, r7, pc}
 801500e:	bf00      	nop

08015010 <WinPrevious>:
 * Notes:       produces 9 output samples from 18 input samples via symmetry
 *              all blocks gain at least 1 guard bit via window (long blocks get extra
 *                sign bit, short blocks can have one addition but max gain < 1.0)
 **************************************************************************************/
static void WinPrevious(int *xPrev, int *xPrevWin, int btPrev)
{
 8015010:	b590      	push	{r4, r7, lr}
 8015012:	b08f      	sub	sp, #60	; 0x3c
 8015014:	af00      	add	r7, sp, #0
 8015016:	60f8      	str	r0, [r7, #12]
 8015018:	60b9      	str	r1, [r7, #8]
 801501a:	607a      	str	r2, [r7, #4]
	int i, x, *xp, *xpwLo, *xpwHi, wLo, wHi;
	const int *wpLo, *wpHi;

	xp = xPrev;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	633b      	str	r3, [r7, #48]	; 0x30
	/* mapping (see IMDCT12x3): xPrev[0-2] = sum[6-8], xPrev[3-8] = sum[12-17] */
	if (btPrev == 2) {
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2b02      	cmp	r3, #2
 8015024:	f040 810d 	bne.w	8015242 <WinPrevious+0x232>
		/* this could be reordered for minimum loads/stores */
		wpLo = imdctWin[btPrev];
 8015028:	687a      	ldr	r2, [r7, #4]
 801502a:	4613      	mov	r3, r2
 801502c:	00db      	lsls	r3, r3, #3
 801502e:	4413      	add	r3, r2
 8015030:	011b      	lsls	r3, r3, #4
 8015032:	4aa3      	ldr	r2, [pc, #652]	; (80152c0 <WinPrevious+0x2b0>)
 8015034:	4413      	add	r3, r2
 8015036:	627b      	str	r3, [r7, #36]	; 0x24
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 8015038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503a:	3318      	adds	r3, #24
 801503c:	681a      	ldr	r2, [r3, #0]
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	3308      	adds	r3, #8
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	4619      	mov	r1, r3
 8015046:	4610      	mov	r0, r2
 8015048:	f7ff fdfc 	bl	8014c44 <MULSHIFT32>
 801504c:	4604      	mov	r4, r0
 801504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015050:	681a      	ldr	r2, [r3, #0]
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	3318      	adds	r3, #24
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	4619      	mov	r1, r3
 801505a:	4610      	mov	r0, r2
 801505c:	f7ff fdf2 	bl	8014c44 <MULSHIFT32>
 8015060:	4603      	mov	r3, r0
 8015062:	18e2      	adds	r2, r4, r3
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	601a      	str	r2, [r3, #0]
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 8015068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506a:	331c      	adds	r3, #28
 801506c:	681a      	ldr	r2, [r3, #0]
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	3304      	adds	r3, #4
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	4619      	mov	r1, r3
 8015076:	4610      	mov	r0, r2
 8015078:	f7ff fde4 	bl	8014c44 <MULSHIFT32>
 801507c:	4604      	mov	r4, r0
 801507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015080:	3304      	adds	r3, #4
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	331c      	adds	r3, #28
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	4619      	mov	r1, r3
 801508c:	4610      	mov	r0, r2
 801508e:	f7ff fdd9 	bl	8014c44 <MULSHIFT32>
 8015092:	4602      	mov	r2, r0
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	3304      	adds	r3, #4
 8015098:	4422      	add	r2, r4
 801509a:	601a      	str	r2, [r3, #0]
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 801509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509e:	3320      	adds	r3, #32
 80150a0:	681a      	ldr	r2, [r3, #0]
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	4619      	mov	r1, r3
 80150a8:	4610      	mov	r0, r2
 80150aa:	f7ff fdcb 	bl	8014c44 <MULSHIFT32>
 80150ae:	4604      	mov	r4, r0
 80150b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b2:	3308      	adds	r3, #8
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	3320      	adds	r3, #32
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	4619      	mov	r1, r3
 80150be:	4610      	mov	r0, r2
 80150c0:	f7ff fdc0 	bl	8014c44 <MULSHIFT32>
 80150c4:	4602      	mov	r2, r0
 80150c6:	68bb      	ldr	r3, [r7, #8]
 80150c8:	3308      	adds	r3, #8
 80150ca:	4422      	add	r2, r4
 80150cc:	601a      	str	r2, [r3, #0]
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 80150ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150d0:	3324      	adds	r3, #36	; 0x24
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	4619      	mov	r1, r3
 80150da:	4610      	mov	r0, r2
 80150dc:	f7ff fdb2 	bl	8014c44 <MULSHIFT32>
 80150e0:	4604      	mov	r4, r0
 80150e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e4:	330c      	adds	r3, #12
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	3320      	adds	r3, #32
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	4619      	mov	r1, r3
 80150f0:	4610      	mov	r0, r2
 80150f2:	f7ff fda7 	bl	8014c44 <MULSHIFT32>
 80150f6:	4602      	mov	r2, r0
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	330c      	adds	r3, #12
 80150fc:	4422      	add	r2, r4
 80150fe:	601a      	str	r2, [r3, #0]
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 8015100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015102:	3328      	adds	r3, #40	; 0x28
 8015104:	681a      	ldr	r2, [r3, #0]
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	3304      	adds	r3, #4
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	4619      	mov	r1, r3
 801510e:	4610      	mov	r0, r2
 8015110:	f7ff fd98 	bl	8014c44 <MULSHIFT32>
 8015114:	4604      	mov	r4, r0
 8015116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015118:	3310      	adds	r3, #16
 801511a:	681a      	ldr	r2, [r3, #0]
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	331c      	adds	r3, #28
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	4619      	mov	r1, r3
 8015124:	4610      	mov	r0, r2
 8015126:	f7ff fd8d 	bl	8014c44 <MULSHIFT32>
 801512a:	4602      	mov	r2, r0
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	3310      	adds	r3, #16
 8015130:	4422      	add	r2, r4
 8015132:	601a      	str	r2, [r3, #0]
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 8015134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015136:	332c      	adds	r3, #44	; 0x2c
 8015138:	681a      	ldr	r2, [r3, #0]
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	3308      	adds	r3, #8
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	4619      	mov	r1, r3
 8015142:	4610      	mov	r0, r2
 8015144:	f7ff fd7e 	bl	8014c44 <MULSHIFT32>
 8015148:	4604      	mov	r4, r0
 801514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514c:	3314      	adds	r3, #20
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	3318      	adds	r3, #24
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	4619      	mov	r1, r3
 8015158:	4610      	mov	r0, r2
 801515a:	f7ff fd73 	bl	8014c44 <MULSHIFT32>
 801515e:	4602      	mov	r2, r0
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	3314      	adds	r3, #20
 8015164:	4422      	add	r2, r4
 8015166:	601a      	str	r2, [r3, #0]
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 8015168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516a:	3318      	adds	r3, #24
 801516c:	681a      	ldr	r2, [r3, #0]
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	3314      	adds	r3, #20
 8015172:	6819      	ldr	r1, [r3, #0]
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	f103 0418 	add.w	r4, r3, #24
 801517a:	4610      	mov	r0, r2
 801517c:	f7ff fd62 	bl	8014c44 <MULSHIFT32>
 8015180:	4603      	mov	r3, r0
 8015182:	6023      	str	r3, [r4, #0]
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 8015184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015186:	331c      	adds	r3, #28
 8015188:	681a      	ldr	r2, [r3, #0]
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	3310      	adds	r3, #16
 801518e:	6819      	ldr	r1, [r3, #0]
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	f103 041c 	add.w	r4, r3, #28
 8015196:	4610      	mov	r0, r2
 8015198:	f7ff fd54 	bl	8014c44 <MULSHIFT32>
 801519c:	4603      	mov	r3, r0
 801519e:	6023      	str	r3, [r4, #0]
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 80151a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a2:	3320      	adds	r3, #32
 80151a4:	681a      	ldr	r2, [r3, #0]
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	330c      	adds	r3, #12
 80151aa:	6819      	ldr	r1, [r3, #0]
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	f103 0420 	add.w	r4, r3, #32
 80151b2:	4610      	mov	r0, r2
 80151b4:	f7ff fd46 	bl	8014c44 <MULSHIFT32>
 80151b8:	4603      	mov	r3, r0
 80151ba:	6023      	str	r3, [r4, #0]
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 80151bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151be:	3324      	adds	r3, #36	; 0x24
 80151c0:	681a      	ldr	r2, [r3, #0]
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	330c      	adds	r3, #12
 80151c6:	6819      	ldr	r1, [r3, #0]
 80151c8:	68bb      	ldr	r3, [r7, #8]
 80151ca:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80151ce:	4610      	mov	r0, r2
 80151d0:	f7ff fd38 	bl	8014c44 <MULSHIFT32>
 80151d4:	4603      	mov	r3, r0
 80151d6:	6023      	str	r3, [r4, #0]
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 80151d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151da:	3328      	adds	r3, #40	; 0x28
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	3310      	adds	r3, #16
 80151e2:	6819      	ldr	r1, [r3, #0]
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80151ea:	4610      	mov	r0, r2
 80151ec:	f7ff fd2a 	bl	8014c44 <MULSHIFT32>
 80151f0:	4603      	mov	r3, r0
 80151f2:	6023      	str	r3, [r4, #0]
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 80151f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f6:	332c      	adds	r3, #44	; 0x2c
 80151f8:	681a      	ldr	r2, [r3, #0]
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	3314      	adds	r3, #20
 80151fe:	6819      	ldr	r1, [r3, #0]
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8015206:	4610      	mov	r0, r2
 8015208:	f7ff fd1c 	bl	8014c44 <MULSHIFT32>
 801520c:	4603      	mov	r3, r0
 801520e:	6023      	str	r3, [r4, #0]
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	3344      	adds	r3, #68	; 0x44
 8015214:	2200      	movs	r2, #0
 8015216:	601a      	str	r2, [r3, #0]
 8015218:	68ba      	ldr	r2, [r7, #8]
 801521a:	3240      	adds	r2, #64	; 0x40
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	6013      	str	r3, [r2, #0]
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	333c      	adds	r3, #60	; 0x3c
 8015224:	6812      	ldr	r2, [r2, #0]
 8015226:	601a      	str	r2, [r3, #0]
 8015228:	68ba      	ldr	r2, [r7, #8]
 801522a:	3238      	adds	r2, #56	; 0x38
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	6013      	str	r3, [r2, #0]
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	3334      	adds	r3, #52	; 0x34
 8015234:	6812      	ldr	r2, [r2, #0]
 8015236:	601a      	str	r2, [r3, #0]
 8015238:	68ba      	ldr	r2, [r7, #8]
 801523a:	3230      	adds	r2, #48	; 0x30
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	6013      	str	r3, [r2, #0]
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
			*xpwLo++ = MULSHIFT32(wLo, x);
			*xpwHi-- = MULSHIFT32(wHi, x);
		}
	}
}
 8015240:	e03a      	b.n	80152b8 <WinPrevious+0x2a8>
		wpLo = imdctWin[btPrev] + 18;
 8015242:	687a      	ldr	r2, [r7, #4]
 8015244:	4613      	mov	r3, r2
 8015246:	00db      	lsls	r3, r3, #3
 8015248:	4413      	add	r3, r2
 801524a:	011b      	lsls	r3, r3, #4
 801524c:	4a1c      	ldr	r2, [pc, #112]	; (80152c0 <WinPrevious+0x2b0>)
 801524e:	4413      	add	r3, r2
 8015250:	3348      	adds	r3, #72	; 0x48
 8015252:	627b      	str	r3, [r7, #36]	; 0x24
		wpHi = wpLo + 17;
 8015254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015256:	3344      	adds	r3, #68	; 0x44
 8015258:	623b      	str	r3, [r7, #32]
		xpwLo = xPrevWin;
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	62fb      	str	r3, [r7, #44]	; 0x2c
		xpwHi = xPrevWin + 17;
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	3344      	adds	r3, #68	; 0x44
 8015262:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 9; i > 0; i--) {
 8015264:	2309      	movs	r3, #9
 8015266:	637b      	str	r3, [r7, #52]	; 0x34
 8015268:	e023      	b.n	80152b2 <WinPrevious+0x2a2>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526c:	1d1a      	adds	r2, r3, #4
 801526e:	633a      	str	r2, [r7, #48]	; 0x30
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	61fb      	str	r3, [r7, #28]
 8015274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015276:	1d1a      	adds	r2, r3, #4
 8015278:	627a      	str	r2, [r7, #36]	; 0x24
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	61bb      	str	r3, [r7, #24]
 801527e:	6a3b      	ldr	r3, [r7, #32]
 8015280:	1f1a      	subs	r2, r3, #4
 8015282:	623a      	str	r2, [r7, #32]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	617b      	str	r3, [r7, #20]
			*xpwLo++ = MULSHIFT32(wLo, x);
 8015288:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 801528a:	1d23      	adds	r3, r4, #4
 801528c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801528e:	69f9      	ldr	r1, [r7, #28]
 8015290:	69b8      	ldr	r0, [r7, #24]
 8015292:	f7ff fcd7 	bl	8014c44 <MULSHIFT32>
 8015296:	4603      	mov	r3, r0
 8015298:	6023      	str	r3, [r4, #0]
			*xpwHi-- = MULSHIFT32(wHi, x);
 801529a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801529c:	1f23      	subs	r3, r4, #4
 801529e:	62bb      	str	r3, [r7, #40]	; 0x28
 80152a0:	69f9      	ldr	r1, [r7, #28]
 80152a2:	6978      	ldr	r0, [r7, #20]
 80152a4:	f7ff fcce 	bl	8014c44 <MULSHIFT32>
 80152a8:	4603      	mov	r3, r0
 80152aa:	6023      	str	r3, [r4, #0]
		for (i = 9; i > 0; i--) {
 80152ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152ae:	3b01      	subs	r3, #1
 80152b0:	637b      	str	r3, [r7, #52]	; 0x34
 80152b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	dcd8      	bgt.n	801526a <WinPrevious+0x25a>
}
 80152b8:	bf00      	nop
 80152ba:	373c      	adds	r7, #60	; 0x3c
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd90      	pop	{r4, r7, pc}
 80152c0:	0802a348 	.word	0x0802a348

080152c4 <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b096      	sub	sp, #88	; 0x58
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	60f8      	str	r0, [r7, #12]
 80152cc:	60b9      	str	r1, [r7, #8]
 80152ce:	607a      	str	r2, [r7, #4]
 80152d0:	603b      	str	r3, [r7, #0]
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f040 8096 	bne.w	8015406 <FreqInvertRescale+0x142>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f003 0301 	and.w	r3, r3, #1
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	f000 808e 	beq.w	8015402 <FreqInvertRescale+0x13e>
			y += NBANDS;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	3380      	adds	r3, #128	; 0x80
 80152ea:	60fb      	str	r3, [r7, #12]
			y0 = *y;	y += 2*NBANDS;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	633b      	str	r3, [r7, #48]	; 0x30
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80152f8:	60fb      	str	r3, [r7, #12]
			y1 = *y;	y += 2*NBANDS;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015306:	60fb      	str	r3, [r7, #12]
			y2 = *y;	y += 2*NBANDS;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	62bb      	str	r3, [r7, #40]	; 0x28
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015314:	60fb      	str	r3, [r7, #12]
			y3 = *y;	y += 2*NBANDS;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	627b      	str	r3, [r7, #36]	; 0x24
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015322:	60fb      	str	r3, [r7, #12]
			y4 = *y;	y += 2*NBANDS;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	623b      	str	r3, [r7, #32]
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015330:	60fb      	str	r3, [r7, #12]
			y5 = *y;	y += 2*NBANDS;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	61fb      	str	r3, [r7, #28]
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801533e:	60fb      	str	r3, [r7, #12]
			y6 = *y;	y += 2*NBANDS;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	61bb      	str	r3, [r7, #24]
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801534c:	60fb      	str	r3, [r7, #12]
			y7 = *y;	y += 2*NBANDS;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	617b      	str	r3, [r7, #20]
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801535a:	60fb      	str	r3, [r7, #12]
			y8 = *y;	y += 2*NBANDS;
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	613b      	str	r3, [r7, #16]
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015368:	60fb      	str	r3, [r7, #12]

			y -= 18*NBANDS;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8015370:	60fb      	str	r3, [r7, #12]
			*y = -y0;	y += 2*NBANDS;
 8015372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015374:	425a      	negs	r2, r3
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	601a      	str	r2, [r3, #0]
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015380:	60fb      	str	r3, [r7, #12]
			*y = -y1;	y += 2*NBANDS;
 8015382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015384:	425a      	negs	r2, r3
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	601a      	str	r2, [r3, #0]
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015390:	60fb      	str	r3, [r7, #12]
			*y = -y2;	y += 2*NBANDS;
 8015392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015394:	425a      	negs	r2, r3
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	601a      	str	r2, [r3, #0]
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80153a0:	60fb      	str	r3, [r7, #12]
			*y = -y3;	y += 2*NBANDS;
 80153a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a4:	425a      	negs	r2, r3
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	601a      	str	r2, [r3, #0]
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80153b0:	60fb      	str	r3, [r7, #12]
			*y = -y4;	y += 2*NBANDS;
 80153b2:	6a3b      	ldr	r3, [r7, #32]
 80153b4:	425a      	negs	r2, r3
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	601a      	str	r2, [r3, #0]
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80153c0:	60fb      	str	r3, [r7, #12]
			*y = -y5;	y += 2*NBANDS;
 80153c2:	69fb      	ldr	r3, [r7, #28]
 80153c4:	425a      	negs	r2, r3
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	601a      	str	r2, [r3, #0]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80153d0:	60fb      	str	r3, [r7, #12]
			*y = -y6;	y += 2*NBANDS;
 80153d2:	69bb      	ldr	r3, [r7, #24]
 80153d4:	425a      	negs	r2, r3
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	601a      	str	r2, [r3, #0]
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80153e0:	60fb      	str	r3, [r7, #12]
			*y = -y7;	y += 2*NBANDS;
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	425a      	negs	r2, r3
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	601a      	str	r2, [r3, #0]
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80153f0:	60fb      	str	r3, [r7, #12]
			*y = -y8;	y += 2*NBANDS;
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	425a      	negs	r2, r3
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	601a      	str	r2, [r3, #0]
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015400:	60fb      	str	r3, [r7, #12]
		}
		return 0;
 8015402:	2300      	movs	r3, #0
 8015404:	e0ff      	b.n	8015606 <FreqInvertRescale+0x342>
	} else {
		/* undo pre-IMDCT scaling, clipping if necessary */
		mOut = 0;
 8015406:	2300      	movs	r3, #0
 8015408:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (blockIdx & 0x01) {
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f003 0301 	and.w	r3, r3, #1
 8015410:	2b00      	cmp	r3, #0
 8015412:	d07c      	beq.n	801550e <FreqInvertRescale+0x24a>
			/* frequency invert */
			for (i = 0; i < 18; i+=2) {
 8015414:	2300      	movs	r3, #0
 8015416:	657b      	str	r3, [r7, #84]	; 0x54
 8015418:	e075      	b.n	8015506 <FreqInvertRescale+0x242>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	653b      	str	r3, [r7, #80]	; 0x50
 8015420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015422:	17db      	asrs	r3, r3, #31
 8015424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	f1c3 031f 	rsb	r3, r3, #31
 801542c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801542e:	fa42 f303 	asr.w	r3, r2, r3
 8015432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015434:	429a      	cmp	r2, r3
 8015436:	d008      	beq.n	801544a <FreqInvertRescale+0x186>
 8015438:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	fa22 f303 	lsr.w	r3, r2, r3
 8015442:	3b01      	subs	r3, #1
 8015444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015446:	4053      	eors	r3, r2
 8015448:	653b      	str	r3, [r7, #80]	; 0x50
 801544a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	409a      	lsls	r2, r3
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	601a      	str	r2, [r3, #0]
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	4618      	mov	r0, r3
 801545a:	f7ff fc05 	bl	8014c68 <FASTABS>
 801545e:	4602      	mov	r2, r0
 8015460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015462:	4313      	orrs	r3, r2
 8015464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	3380      	adds	r3, #128	; 0x80
 801546a:	60fb      	str	r3, [r7, #12]
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	425b      	negs	r3, r3
 8015472:	653b      	str	r3, [r7, #80]	; 0x50
 8015474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015476:	17db      	asrs	r3, r3, #31
 8015478:	63bb      	str	r3, [r7, #56]	; 0x38
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	f1c3 031f 	rsb	r3, r3, #31
 8015480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015482:	fa42 f303 	asr.w	r3, r2, r3
 8015486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015488:	429a      	cmp	r2, r3
 801548a:	d008      	beq.n	801549e <FreqInvertRescale+0x1da>
 801548c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	fa22 f303 	lsr.w	r3, r2, r3
 8015496:	3b01      	subs	r3, #1
 8015498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801549a:	4053      	eors	r3, r2
 801549c:	653b      	str	r3, [r7, #80]	; 0x50
 801549e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	409a      	lsls	r2, r3
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	601a      	str	r2, [r3, #0]
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7ff fbdb 	bl	8014c68 <FASTABS>
 80154b2:	4602      	mov	r2, r0
 80154b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154b6:	4313      	orrs	r3, r2
 80154b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	3380      	adds	r3, #128	; 0x80
 80154be:	60fb      	str	r3, [r7, #12]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	653b      	str	r3, [r7, #80]	; 0x50
 80154c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154c8:	17db      	asrs	r3, r3, #31
 80154ca:	637b      	str	r3, [r7, #52]	; 0x34
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	f1c3 031f 	rsb	r3, r3, #31
 80154d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80154d4:	fa42 f303 	asr.w	r3, r2, r3
 80154d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80154da:	429a      	cmp	r2, r3
 80154dc:	d008      	beq.n	80154f0 <FreqInvertRescale+0x22c>
 80154de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	fa22 f303 	lsr.w	r3, r2, r3
 80154e8:	3b01      	subs	r3, #1
 80154ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80154ec:	4053      	eors	r3, r2
 80154ee:	653b      	str	r3, [r7, #80]	; 0x50
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	1d1a      	adds	r2, r3, #4
 80154f4:	60ba      	str	r2, [r7, #8]
 80154f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80154f8:	683a      	ldr	r2, [r7, #0]
 80154fa:	fa01 f202 	lsl.w	r2, r1, r2
 80154fe:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 18; i+=2) {
 8015500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015502:	3302      	adds	r3, #2
 8015504:	657b      	str	r3, [r7, #84]	; 0x54
 8015506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015508:	2b11      	cmp	r3, #17
 801550a:	dd86      	ble.n	801541a <FreqInvertRescale+0x156>
 801550c:	e07a      	b.n	8015604 <FreqInvertRescale+0x340>
			}
		} else {
			for (i = 0; i < 18; i+=2) {
 801550e:	2300      	movs	r3, #0
 8015510:	657b      	str	r3, [r7, #84]	; 0x54
 8015512:	e074      	b.n	80155fe <FreqInvertRescale+0x33a>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	653b      	str	r3, [r7, #80]	; 0x50
 801551a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801551c:	17db      	asrs	r3, r3, #31
 801551e:	64bb      	str	r3, [r7, #72]	; 0x48
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	f1c3 031f 	rsb	r3, r3, #31
 8015526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015528:	fa42 f303 	asr.w	r3, r2, r3
 801552c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801552e:	429a      	cmp	r2, r3
 8015530:	d008      	beq.n	8015544 <FreqInvertRescale+0x280>
 8015532:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	fa22 f303 	lsr.w	r3, r2, r3
 801553c:	3b01      	subs	r3, #1
 801553e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015540:	4053      	eors	r3, r2
 8015542:	653b      	str	r3, [r7, #80]	; 0x50
 8015544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	409a      	lsls	r2, r3
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	601a      	str	r2, [r3, #0]
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	4618      	mov	r0, r3
 8015554:	f7ff fb88 	bl	8014c68 <FASTABS>
 8015558:	4602      	mov	r2, r0
 801555a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801555c:	4313      	orrs	r3, r2
 801555e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	3380      	adds	r3, #128	; 0x80
 8015564:	60fb      	str	r3, [r7, #12]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	653b      	str	r3, [r7, #80]	; 0x50
 801556c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801556e:	17db      	asrs	r3, r3, #31
 8015570:	647b      	str	r3, [r7, #68]	; 0x44
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	f1c3 031f 	rsb	r3, r3, #31
 8015578:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801557a:	fa42 f303 	asr.w	r3, r2, r3
 801557e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015580:	429a      	cmp	r2, r3
 8015582:	d008      	beq.n	8015596 <FreqInvertRescale+0x2d2>
 8015584:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	fa22 f303 	lsr.w	r3, r2, r3
 801558e:	3b01      	subs	r3, #1
 8015590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015592:	4053      	eors	r3, r2
 8015594:	653b      	str	r3, [r7, #80]	; 0x50
 8015596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	409a      	lsls	r2, r3
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	601a      	str	r2, [r3, #0]
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7ff fb5f 	bl	8014c68 <FASTABS>
 80155aa:	4602      	mov	r2, r0
 80155ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155ae:	4313      	orrs	r3, r2
 80155b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	3380      	adds	r3, #128	; 0x80
 80155b6:	60fb      	str	r3, [r7, #12]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	653b      	str	r3, [r7, #80]	; 0x50
 80155be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155c0:	17db      	asrs	r3, r3, #31
 80155c2:	643b      	str	r3, [r7, #64]	; 0x40
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	f1c3 031f 	rsb	r3, r3, #31
 80155ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80155cc:	fa42 f303 	asr.w	r3, r2, r3
 80155d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d008      	beq.n	80155e8 <FreqInvertRescale+0x324>
 80155d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	fa22 f303 	lsr.w	r3, r2, r3
 80155e0:	3b01      	subs	r3, #1
 80155e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155e4:	4053      	eors	r3, r2
 80155e6:	653b      	str	r3, [r7, #80]	; 0x50
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	1d1a      	adds	r2, r3, #4
 80155ec:	60ba      	str	r2, [r7, #8]
 80155ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80155f0:	683a      	ldr	r2, [r7, #0]
 80155f2:	fa01 f202 	lsl.w	r2, r1, r2
 80155f6:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 18; i+=2) {
 80155f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155fa:	3302      	adds	r3, #2
 80155fc:	657b      	str	r3, [r7, #84]	; 0x54
 80155fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015600:	2b11      	cmp	r3, #17
 8015602:	dd87      	ble.n	8015514 <FreqInvertRescale+0x250>
			}
		}
		return mOut;
 8015604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	}
}
 8015606:	4618      	mov	r0, r3
 8015608:	3758      	adds	r7, #88	; 0x58
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
	...

08015610 <idct9>:
	0x7f834ed0, 0x7ba3751d, 0x7401e4c1, 0x68d9f964, 0x5a82799a, 0x496af3e2, 0x36185aee, 0x2120fb83, 0x0b27eb5c, 
};

/* require at least 3 guard bits in x[] to ensure no overflow */
static __inline void idct9(int *x)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b0b0      	sub	sp, #192	; 0xc0
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
	int a10, a11, a12, a13, a14, a15, a16, a17, a18;
	int a19, a20, a21, a22, a23, a24, a25, a26, a27;
	int m1, m3, m5, m6, m7, m8, m9, m10, m11, m12;
	int x0, x1, x2, x3, x4, x5, x6, x7, x8;

	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	689b      	ldr	r3, [r3, #8]
 801562c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	691b      	ldr	r3, [r3, #16]
 801563c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	695b      	ldr	r3, [r3, #20]
 8015644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	699b      	ldr	r3, [r3, #24]
 801564c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	69db      	ldr	r3, [r3, #28]
 8015654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6a1b      	ldr	r3, [r3, #32]
 801565c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	a1 = x0 - x6;
 8015660:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015664:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015668:	1ad3      	subs	r3, r2, r3
 801566a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	a2 = x1 - x5;
 801566e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015676:	1ad3      	subs	r3, r2, r3
 8015678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	a3 = x1 + x5;
 801567c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015684:	4413      	add	r3, r2
 8015686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	a4 = x2 - x4;
 801568a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801568e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015692:	1ad3      	subs	r3, r2, r3
 8015694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	a5 = x2 + x4;
 8015698:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801569c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80156a0:	4413      	add	r3, r2
 80156a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	a6 = x2 + x8;
 80156a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80156aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80156ae:	4413      	add	r3, r2
 80156b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	a7 = x1 + x7;
 80156b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80156b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80156bc:	4413      	add	r3, r2
 80156be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	a8 = a6 - a5;		/* ie x[8] - x[4] */
 80156c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80156c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80156ca:	1ad3      	subs	r3, r2, r3
 80156cc:	67fb      	str	r3, [r7, #124]	; 0x7c
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 80156ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80156d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80156d6:	1ad3      	subs	r3, r2, r3
 80156d8:	67bb      	str	r3, [r7, #120]	; 0x78
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 80156da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80156de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80156e2:	1ad3      	subs	r3, r2, r3
 80156e4:	677b      	str	r3, [r7, #116]	; 0x74
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 80156e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80156ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80156ee:	1ad3      	subs	r3, r2, r3
 80156f0:	673b      	str	r3, [r7, #112]	; 0x70

	/* do the << 1 as constant shifts where mX is actually used (free, no stall or extra inst.) */
	m1 =  MULSHIFT32(c9_0, x3);
 80156f2:	4b79      	ldr	r3, [pc, #484]	; (80158d8 <idct9+0x2c8>)
 80156f4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7ff faa3 	bl	8014c44 <MULSHIFT32>
 80156fe:	66f8      	str	r0, [r7, #108]	; 0x6c
	m3 =  MULSHIFT32(c9_0, a10);
 8015700:	4b75      	ldr	r3, [pc, #468]	; (80158d8 <idct9+0x2c8>)
 8015702:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015704:	4618      	mov	r0, r3
 8015706:	f7ff fa9d 	bl	8014c44 <MULSHIFT32>
 801570a:	66b8      	str	r0, [r7, #104]	; 0x68
	m5 =  MULSHIFT32(c9_1, a5);
 801570c:	4b73      	ldr	r3, [pc, #460]	; (80158dc <idct9+0x2cc>)
 801570e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015712:	4618      	mov	r0, r3
 8015714:	f7ff fa96 	bl	8014c44 <MULSHIFT32>
 8015718:	6678      	str	r0, [r7, #100]	; 0x64
	m6 =  MULSHIFT32(c9_2, a6);
 801571a:	4b71      	ldr	r3, [pc, #452]	; (80158e0 <idct9+0x2d0>)
 801571c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015720:	4618      	mov	r0, r3
 8015722:	f7ff fa8f 	bl	8014c44 <MULSHIFT32>
 8015726:	6638      	str	r0, [r7, #96]	; 0x60
	m7 =  MULSHIFT32(c9_1, a8);
 8015728:	4b6c      	ldr	r3, [pc, #432]	; (80158dc <idct9+0x2cc>)
 801572a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801572c:	4618      	mov	r0, r3
 801572e:	f7ff fa89 	bl	8014c44 <MULSHIFT32>
 8015732:	65f8      	str	r0, [r7, #92]	; 0x5c
	m8 =  MULSHIFT32(c9_2, a5);
 8015734:	4b6a      	ldr	r3, [pc, #424]	; (80158e0 <idct9+0x2d0>)
 8015736:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801573a:	4618      	mov	r0, r3
 801573c:	f7ff fa82 	bl	8014c44 <MULSHIFT32>
 8015740:	65b8      	str	r0, [r7, #88]	; 0x58
	m9 =  MULSHIFT32(c9_3, a9);
 8015742:	4b68      	ldr	r3, [pc, #416]	; (80158e4 <idct9+0x2d4>)
 8015744:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8015746:	4618      	mov	r0, r3
 8015748:	f7ff fa7c 	bl	8014c44 <MULSHIFT32>
 801574c:	6578      	str	r0, [r7, #84]	; 0x54
	m10 = MULSHIFT32(c9_4, a7);
 801574e:	4b66      	ldr	r3, [pc, #408]	; (80158e8 <idct9+0x2d8>)
 8015750:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8015754:	4618      	mov	r0, r3
 8015756:	f7ff fa75 	bl	8014c44 <MULSHIFT32>
 801575a:	6538      	str	r0, [r7, #80]	; 0x50
	m11 = MULSHIFT32(c9_3, a3);
 801575c:	4b61      	ldr	r3, [pc, #388]	; (80158e4 <idct9+0x2d4>)
 801575e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8015762:	4618      	mov	r0, r3
 8015764:	f7ff fa6e 	bl	8014c44 <MULSHIFT32>
 8015768:	64f8      	str	r0, [r7, #76]	; 0x4c
	m12 = MULSHIFT32(c9_4, a9);
 801576a:	4b5f      	ldr	r3, [pc, #380]	; (80158e8 <idct9+0x2d8>)
 801576c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801576e:	4618      	mov	r0, r3
 8015770:	f7ff fa68 	bl	8014c44 <MULSHIFT32>
 8015774:	64b8      	str	r0, [r7, #72]	; 0x48

	a12 = x[0] +  (x[6] >> 1);
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	681a      	ldr	r2, [r3, #0]
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	3318      	adds	r3, #24
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	105b      	asrs	r3, r3, #1
 8015782:	4413      	add	r3, r2
 8015784:	647b      	str	r3, [r7, #68]	; 0x44
	a13 = a12  +  (  m1 << 1);
 8015786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801578c:	4413      	add	r3, r2
 801578e:	643b      	str	r3, [r7, #64]	; 0x40
	a14 = a12  -  (  m1 << 1);
 8015790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015792:	005b      	lsls	r3, r3, #1
 8015794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015796:	1ad3      	subs	r3, r2, r3
 8015798:	63fb      	str	r3, [r7, #60]	; 0x3c
	a15 = a1   +  ( a11 >> 1);
 801579a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801579c:	105b      	asrs	r3, r3, #1
 801579e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80157a2:	4413      	add	r3, r2
 80157a4:	63bb      	str	r3, [r7, #56]	; 0x38
	a16 = ( m5 << 1) + (m6 << 1);
 80157a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157a8:	005a      	lsls	r2, r3, #1
 80157aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80157ac:	005b      	lsls	r3, r3, #1
 80157ae:	4413      	add	r3, r2
 80157b0:	637b      	str	r3, [r7, #52]	; 0x34
	a17 = ( m7 << 1) - (m8 << 1);
 80157b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157b4:	005a      	lsls	r2, r3, #1
 80157b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157b8:	005b      	lsls	r3, r3, #1
 80157ba:	1ad3      	subs	r3, r2, r3
 80157bc:	633b      	str	r3, [r7, #48]	; 0x30
	a18 = a16 + a17;
 80157be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c2:	4413      	add	r3, r2
 80157c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	a19 = ( m9 << 1) + (m10 << 1);
 80157c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157c8:	005a      	lsls	r2, r3, #1
 80157ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157cc:	005b      	lsls	r3, r3, #1
 80157ce:	4413      	add	r3, r2
 80157d0:	62bb      	str	r3, [r7, #40]	; 0x28
	a20 = (m11 << 1) - (m12 << 1);
 80157d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157d4:	005a      	lsls	r2, r3, #1
 80157d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157d8:	005b      	lsls	r3, r3, #1
 80157da:	1ad3      	subs	r3, r2, r3
 80157dc:	627b      	str	r3, [r7, #36]	; 0x24

	a21 = a20 - a19;
 80157de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e2:	1ad3      	subs	r3, r2, r3
 80157e4:	623b      	str	r3, [r7, #32]
	a22 = a13 + a16;
 80157e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80157e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157ea:	4413      	add	r3, r2
 80157ec:	61fb      	str	r3, [r7, #28]
	a23 = a14 + a16;
 80157ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80157f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157f2:	4413      	add	r3, r2
 80157f4:	61bb      	str	r3, [r7, #24]
	a24 = a14 + a17;
 80157f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80157f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157fa:	4413      	add	r3, r2
 80157fc:	617b      	str	r3, [r7, #20]
	a25 = a13 + a17;
 80157fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015802:	4413      	add	r3, r2
 8015804:	613b      	str	r3, [r7, #16]
	a26 = a14 - a18;
 8015806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580a:	1ad3      	subs	r3, r2, r3
 801580c:	60fb      	str	r3, [r7, #12]
	a27 = a13 - a18;
 801580e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015812:	1ad3      	subs	r3, r2, r3
 8015814:	60bb      	str	r3, [r7, #8]

	x0 = a22 + a19;			x[0] = x0;
 8015816:	69fa      	ldr	r2, [r7, #28]
 8015818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801581a:	4413      	add	r3, r2
 801581c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015826:	601a      	str	r2, [r3, #0]
	x1 = a15 + (m3 << 1);	x[1] = x1;
 8015828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801582e:	4413      	add	r3, r2
 8015830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	3304      	adds	r3, #4
 8015838:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801583c:	601a      	str	r2, [r3, #0]
	x2 = a24 + a20;			x[2] = x2;
 801583e:	697a      	ldr	r2, [r7, #20]
 8015840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015842:	4413      	add	r3, r2
 8015844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	3308      	adds	r3, #8
 801584c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015850:	601a      	str	r2, [r3, #0]
	x3 = a26 - a21;			x[3] = x3;
 8015852:	68fa      	ldr	r2, [r7, #12]
 8015854:	6a3b      	ldr	r3, [r7, #32]
 8015856:	1ad3      	subs	r3, r2, r3
 8015858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	330c      	adds	r3, #12
 8015860:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015864:	601a      	str	r2, [r3, #0]
	x4 = a1 - a11;			x[4] = x4;
 8015866:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801586a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801586c:	1ad3      	subs	r3, r2, r3
 801586e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	3310      	adds	r3, #16
 8015876:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801587a:	601a      	str	r2, [r3, #0]
	x5 = a27 + a21;			x[5] = x5;
 801587c:	68ba      	ldr	r2, [r7, #8]
 801587e:	6a3b      	ldr	r3, [r7, #32]
 8015880:	4413      	add	r3, r2
 8015882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	3314      	adds	r3, #20
 801588a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801588e:	601a      	str	r2, [r3, #0]
	x6 = a25 - a20;			x[6] = x6;
 8015890:	693a      	ldr	r2, [r7, #16]
 8015892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015894:	1ad3      	subs	r3, r2, r3
 8015896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	3318      	adds	r3, #24
 801589e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80158a2:	601a      	str	r2, [r3, #0]
	x7 = a15 - (m3 << 1);	x[7] = x7;
 80158a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158a6:	005b      	lsls	r3, r3, #1
 80158a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80158aa:	1ad3      	subs	r3, r2, r3
 80158ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	331c      	adds	r3, #28
 80158b4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80158b8:	601a      	str	r2, [r3, #0]
	x8 = a23 - a19;			x[8] = x8;
 80158ba:	69ba      	ldr	r2, [r7, #24]
 80158bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158be:	1ad3      	subs	r3, r2, r3
 80158c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	3320      	adds	r3, #32
 80158c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80158cc:	601a      	str	r2, [r3, #0]
}
 80158ce:	bf00      	nop
 80158d0:	37c0      	adds	r7, #192	; 0xc0
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	6ed9eba1 	.word	0x6ed9eba1
 80158dc:	620dbe8b 	.word	0x620dbe8b
 80158e0:	163a1a7e 	.word	0x163a1a7e
 80158e4:	5246dd49 	.word	0x5246dd49
 80158e8:	7e0e2e32 	.word	0x7e0e2e32

080158ec <IMDCT36>:
 *
 * TODO:        optimize for ARM (reorder window coefs, ARM-style pointers in C, 
 *                inline asm may or may not be helpful)
 **************************************************************************************/
static int IMDCT36(int *xCurr, int *xPrev, int *y, int btCurr, int btPrev, int blockIdx, int gb)
{
 80158ec:	b590      	push	{r4, r7, lr}
 80158ee:	b0b9      	sub	sp, #228	; 0xe4
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	60f8      	str	r0, [r7, #12]
 80158f4:	60b9      	str	r1, [r7, #8]
 80158f6:	607a      	str	r2, [r7, #4]
 80158f8:	603b      	str	r3, [r7, #0]
	int i, es, xBuf[18], xPrevWin[18];
	int acc1, acc2, s, d, t, mOut;
	int xo, xe, c, *xp, yLo, yHi;
	const int *cp, *wp;

	acc1 = acc2 = 0;
 80158fa:	2300      	movs	r3, #0
 80158fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015900:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	xCurr += 17;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	3344      	adds	r3, #68	; 0x44
 801590c:	60fb      	str	r3, [r7, #12]

	/* 7 gb is always adequate for antialias + accumulator loop + idct9 */
	if (gb < 7) {
 801590e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015912:	2b06      	cmp	r3, #6
 8015914:	dc55      	bgt.n	80159c2 <IMDCT36+0xd6>
		/* rarely triggered - 5% to 10% of the time on normal clips (with Q25 input) */
		es = 7 - gb;
 8015916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801591a:	f1c3 0307 	rsb	r3, r3, #7
 801591e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		for (i = 8; i >= 0; i--) {	
 8015922:	2308      	movs	r3, #8
 8015924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015928:	e046      	b.n	80159b8 <IMDCT36+0xcc>
			acc1 = ((*xCurr--) >> es) - acc1;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	1f1a      	subs	r2, r3, #4
 801592e:	60fa      	str	r2, [r7, #12]
 8015930:	681a      	ldr	r2, [r3, #0]
 8015932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015936:	411a      	asrs	r2, r3
 8015938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801593c:	1ad3      	subs	r3, r2, r3
 801593e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			acc2 = acc1 - acc2;
 8015942:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015946:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801594a:	1ad3      	subs	r3, r2, r3
 801594c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			acc1 = ((*xCurr--) >> es) - acc1;
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	1f1a      	subs	r2, r3, #4
 8015954:	60fa      	str	r2, [r7, #12]
 8015956:	681a      	ldr	r2, [r3, #0]
 8015958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801595c:	411a      	asrs	r2, r3
 801595e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015962:	1ad3      	subs	r3, r2, r3
 8015964:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			xBuf[i+9] = acc2;	/* odd */
 8015968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801596c:	3309      	adds	r3, #9
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	33e0      	adds	r3, #224	; 0xe0
 8015972:	443b      	add	r3, r7
 8015974:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015978:	f843 2c88 	str.w	r2, [r3, #-136]
			xBuf[i+0] = acc1;	/* even */
 801597c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015980:	009b      	lsls	r3, r3, #2
 8015982:	33e0      	adds	r3, #224	; 0xe0
 8015984:	443b      	add	r3, r7
 8015986:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801598a:	f843 2c88 	str.w	r2, [r3, #-136]
			xPrev[i] >>= es;
 801598e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015992:	009b      	lsls	r3, r3, #2
 8015994:	68ba      	ldr	r2, [r7, #8]
 8015996:	4413      	add	r3, r2
 8015998:	6819      	ldr	r1, [r3, #0]
 801599a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801599e:	009b      	lsls	r3, r3, #2
 80159a0:	68ba      	ldr	r2, [r7, #8]
 80159a2:	4413      	add	r3, r2
 80159a4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80159a8:	fa41 f202 	asr.w	r2, r1, r2
 80159ac:	601a      	str	r2, [r3, #0]
		for (i = 8; i >= 0; i--) {	
 80159ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80159b2:	3b01      	subs	r3, #1
 80159b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80159b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80159bc:	2b00      	cmp	r3, #0
 80159be:	dab4      	bge.n	801592a <IMDCT36+0x3e>
 80159c0:	e03b      	b.n	8015a3a <IMDCT36+0x14e>
		}
	} else {
		es = 0;
 80159c2:	2300      	movs	r3, #0
 80159c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		/* max gain = 18, assume adequate guard bits */
		for (i = 8; i >= 0; i--) {	
 80159c8:	2308      	movs	r3, #8
 80159ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80159ce:	e030      	b.n	8015a32 <IMDCT36+0x146>
			acc1 = (*xCurr--) - acc1;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	1f1a      	subs	r2, r3, #4
 80159d4:	60fa      	str	r2, [r7, #12]
 80159d6:	681a      	ldr	r2, [r3, #0]
 80159d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80159dc:	1ad3      	subs	r3, r2, r3
 80159de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			acc2 = acc1 - acc2;
 80159e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80159e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80159ea:	1ad3      	subs	r3, r2, r3
 80159ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			acc1 = (*xCurr--) - acc1;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	1f1a      	subs	r2, r3, #4
 80159f4:	60fa      	str	r2, [r7, #12]
 80159f6:	681a      	ldr	r2, [r3, #0]
 80159f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80159fc:	1ad3      	subs	r3, r2, r3
 80159fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			xBuf[i+9] = acc2;	/* odd */
 8015a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015a06:	3309      	adds	r3, #9
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	33e0      	adds	r3, #224	; 0xe0
 8015a0c:	443b      	add	r3, r7
 8015a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015a12:	f843 2c88 	str.w	r2, [r3, #-136]
			xBuf[i+0] = acc1;	/* even */
 8015a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015a1a:	009b      	lsls	r3, r3, #2
 8015a1c:	33e0      	adds	r3, #224	; 0xe0
 8015a1e:	443b      	add	r3, r7
 8015a20:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015a24:	f843 2c88 	str.w	r2, [r3, #-136]
		for (i = 8; i >= 0; i--) {	
 8015a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015a2c:	3b01      	subs	r3, #1
 8015a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	daca      	bge.n	80159d0 <IMDCT36+0xe4>
		}
	}
	/* xEven[0] and xOdd[0] scaled by 0.5 */
	xBuf[9] >>= 1;
 8015a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015a3c:	105b      	asrs	r3, r3, #1
 8015a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
	xBuf[0] >>= 1;
 8015a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015a42:	105b      	asrs	r3, r3, #1
 8015a44:	65bb      	str	r3, [r7, #88]	; 0x58

	/* do 9-point IDCT on even and odd */
	idct9(xBuf+0);	/* even */
 8015a46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7ff fde0 	bl	8015610 <idct9>
	idct9(xBuf+9);	/* odd */
 8015a50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015a54:	3324      	adds	r3, #36	; 0x24
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7ff fdda 	bl	8015610 <idct9>

	xp = xBuf + 8;
 8015a5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015a60:	3320      	adds	r3, #32
 8015a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	cp = c18 + 8;
 8015a66:	4bb5      	ldr	r3, [pc, #724]	; (8015d3c <IMDCT36+0x450>)
 8015a68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	mOut = 0;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (btPrev == 0 && btCurr == 0) {
 8015a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	f040 809e 	bne.w	8015bb8 <IMDCT36+0x2cc>
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	f040 809a 	bne.w	8015bb8 <IMDCT36+0x2cc>
		/* fast path - use symmetry of sin window to reduce windowing multiplies to 18 (N/2) */
		wp = fastWin36;
 8015a84:	4bae      	ldr	r3, [pc, #696]	; (8015d40 <IMDCT36+0x454>)
 8015a86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (i = 0; i < 9; i++) {
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015a90:	e08c      	b.n	8015bac <IMDCT36+0x2c0>
			/* do ARM-style pointer arithmetic (i still needed for y[] indexing - compiler spills if 2 y pointers) */
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 8015a92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015a96:	1f1a      	subs	r2, r3, #4
 8015a98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015ab0:	1f1a      	subs	r2, r3, #4
 8015ab2:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			/* gain 2 int bits here */
			xo = MULSHIFT32(c, xo);			/* 2*c18*xOdd (mul by 2 implicit in scaling)  */
 8015abc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8015ac0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015ac4:	f7ff f8be 	bl	8014c44 <MULSHIFT32>
 8015ac8:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
			xe >>= 2;
 8015acc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015ad0:	109b      	asrs	r3, r3, #2
 8015ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	425b      	negs	r3, r3
 8015adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8015ae0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015ae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015ae8:	1ad3      	subs	r3, r2, r3
 8015aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8015aee:	68bb      	ldr	r3, [r7, #8]
 8015af0:	1d1a      	adds	r2, r3, #4
 8015af2:	60ba      	str	r2, [r7, #8]
 8015af4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8015af8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015afc:	440a      	add	r2, r1
 8015afe:	601a      	str	r2, [r3, #0]
			t = s - d;
 8015b00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015b08:	1ad3      	subs	r3, r2, r3
 8015b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 8015b0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015b12:	1d1a      	adds	r2, r3, #4
 8015b14:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8015b20:	f7ff f890 	bl	8014c44 <MULSHIFT32>
 8015b24:	4603      	mov	r3, r0
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8015b2c:	4413      	add	r3, r2
 8015b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			yHi = (s + (MULSHIFT32(t, *wp++) << 2));
 8015b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015b36:	1d1a      	adds	r2, r3, #4
 8015b38:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	4619      	mov	r1, r3
 8015b40:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8015b44:	f7ff f87e 	bl	8014c44 <MULSHIFT32>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015b50:	4413      	add	r3, r2
 8015b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			y[(i)*NBANDS]    = 	yLo;
 8015b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015b5a:	01db      	lsls	r3, r3, #7
 8015b5c:	687a      	ldr	r2, [r7, #4]
 8015b5e:	4413      	add	r3, r2
 8015b60:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015b64:	601a      	str	r2, [r3, #0]
			y[(17-i)*NBANDS] =  yHi;
 8015b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015b6a:	f1c3 0311 	rsb	r3, r3, #17
 8015b6e:	01db      	lsls	r3, r3, #7
 8015b70:	687a      	ldr	r2, [r7, #4]
 8015b72:	4413      	add	r3, r2
 8015b74:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8015b78:	601a      	str	r2, [r3, #0]
			mOut |= FASTABS(yLo);
 8015b7a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8015b7e:	f7ff f873 	bl	8014c68 <FASTABS>
 8015b82:	4602      	mov	r2, r0
 8015b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015b88:	4313      	orrs	r3, r2
 8015b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			mOut |= FASTABS(yHi);
 8015b8e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015b92:	f7ff f869 	bl	8014c68 <FASTABS>
 8015b96:	4602      	mov	r2, r0
 8015b98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015b9c:	4313      	orrs	r3, r2
 8015b9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		for (i = 0; i < 9; i++) {
 8015ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015bb0:	2b08      	cmp	r3, #8
 8015bb2:	f77f af6e 	ble.w	8015a92 <IMDCT36+0x1a6>
	if (btPrev == 0 && btCurr == 0) {
 8015bb6:	e0aa      	b.n	8015d0e <IMDCT36+0x422>
		}
	} else {
		/* slower method - either prev or curr is using window type != 0 so do full 36-point window 
		 * output xPrevWin has at least 3 guard bits (xPrev has 2, gain 1 in WinPrevious)
		 */
		WinPrevious(xPrev, xPrevWin, btPrev);
 8015bb8:	f107 0310 	add.w	r3, r7, #16
 8015bbc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8015bc0:	4619      	mov	r1, r3
 8015bc2:	68b8      	ldr	r0, [r7, #8]
 8015bc4:	f7ff fa24 	bl	8015010 <WinPrevious>

		wp = imdctWin[btCurr];
 8015bc8:	683a      	ldr	r2, [r7, #0]
 8015bca:	4613      	mov	r3, r2
 8015bcc:	00db      	lsls	r3, r3, #3
 8015bce:	4413      	add	r3, r2
 8015bd0:	011b      	lsls	r3, r3, #4
 8015bd2:	4a5c      	ldr	r2, [pc, #368]	; (8015d44 <IMDCT36+0x458>)
 8015bd4:	4413      	add	r3, r2
 8015bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (i = 0; i < 9; i++) {
 8015bda:	2300      	movs	r3, #0
 8015bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015be0:	e090      	b.n	8015d04 <IMDCT36+0x418>
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 8015be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015be6:	1f1a      	subs	r2, r3, #4
 8015be8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015bfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015c00:	1f1a      	subs	r2, r3, #4
 8015c02:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			/* gain 2 int bits here */
			xo = MULSHIFT32(c, xo);			/* 2*c18*xOdd (mul by 2 implicit in scaling)  */
 8015c0c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8015c10:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015c14:	f7ff f816 	bl	8014c44 <MULSHIFT32>
 8015c18:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
			xe >>= 2;
 8015c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015c20:	109b      	asrs	r3, r3, #2
 8015c22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

			d = xe - xo;
 8015c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015c2e:	1ad3      	subs	r3, r2, r3
 8015c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	1d1a      	adds	r2, r3, #4
 8015c38:	60ba      	str	r2, [r7, #8]
 8015c3a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8015c3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015c42:	440a      	add	r2, r1
 8015c44:	601a      	str	r2, [r3, #0]
			
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 8015c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	33e0      	adds	r3, #224	; 0xe0
 8015c4e:	443b      	add	r3, r7
 8015c50:	f853 4cd0 	ldr.w	r4, [r3, #-208]
 8015c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015c5e:	4413      	add	r3, r2
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	4619      	mov	r1, r3
 8015c64:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8015c68:	f7fe ffec 	bl	8014c44 <MULSHIFT32>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	4423      	add	r3, r4
 8015c70:	009b      	lsls	r3, r3, #2
 8015c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 8015c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c7a:	f1c3 0311 	rsb	r3, r3, #17
 8015c7e:	009b      	lsls	r3, r3, #2
 8015c80:	33e0      	adds	r3, #224	; 0xe0
 8015c82:	443b      	add	r3, r7
 8015c84:	f853 4cd0 	ldr.w	r4, [r3, #-208]
 8015c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c8c:	f1c3 0311 	rsb	r3, r3, #17
 8015c90:	009b      	lsls	r3, r3, #2
 8015c92:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015c96:	4413      	add	r3, r2
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8015ca0:	f7fe ffd0 	bl	8014c44 <MULSHIFT32>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	4423      	add	r3, r4
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			y[(i)*NBANDS]    = yLo;
 8015cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015cb2:	01db      	lsls	r3, r3, #7
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	4413      	add	r3, r2
 8015cb8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015cbc:	601a      	str	r2, [r3, #0]
			y[(17-i)*NBANDS] = yHi;
 8015cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015cc2:	f1c3 0311 	rsb	r3, r3, #17
 8015cc6:	01db      	lsls	r3, r3, #7
 8015cc8:	687a      	ldr	r2, [r7, #4]
 8015cca:	4413      	add	r3, r2
 8015ccc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8015cd0:	601a      	str	r2, [r3, #0]
			mOut |= FASTABS(yLo);
 8015cd2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8015cd6:	f7fe ffc7 	bl	8014c68 <FASTABS>
 8015cda:	4602      	mov	r2, r0
 8015cdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015ce0:	4313      	orrs	r3, r2
 8015ce2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			mOut |= FASTABS(yHi);
 8015ce6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015cea:	f7fe ffbd 	bl	8014c68 <FASTABS>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015cf4:	4313      	orrs	r3, r2
 8015cf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		for (i = 0; i < 9; i++) {
 8015cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015cfe:	3301      	adds	r3, #1
 8015d00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015d08:	2b08      	cmp	r3, #8
 8015d0a:	f77f af6a 	ble.w	8015be2 <IMDCT36+0x2f6>
		}
	}

	xPrev -= 9;
 8015d0e:	68bb      	ldr	r3, [r7, #8]
 8015d10:	3b24      	subs	r3, #36	; 0x24
 8015d12:	60bb      	str	r3, [r7, #8]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8015d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015d18:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8015d1c:	68b9      	ldr	r1, [r7, #8]
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f7ff fad0 	bl	80152c4 <FreqInvertRescale>
 8015d24:	4602      	mov	r2, r0
 8015d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015d2a:	4313      	orrs	r3, r2
 8015d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	return mOut;
 8015d30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	37e4      	adds	r7, #228	; 0xe4
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd90      	pop	{r4, r7, pc}
 8015d3c:	0802a294 	.word	0x0802a294
 8015d40:	0802a298 	.word	0x0802a298
 8015d44:	0802a348 	.word	0x0802a348

08015d48 <imdct12>:

/* 12-point inverse DCT, used in IMDCT12x3() 
 * 4 input guard bits will ensure no overflow
 */
static __inline void imdct12 (int *x, int *out)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b08c      	sub	sp, #48	; 0x30
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
 8015d50:	6039      	str	r1, [r7, #0]
	int a0, a1, a2;
	int x0, x1, x2, x3, x4, x5;

	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	330c      	adds	r3, #12
 8015d5c:	607b      	str	r3, [r7, #4]
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	330c      	adds	r3, #12
 8015d68:	607b      	str	r3, [r7, #4]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	330c      	adds	r3, #12
 8015d74:	607b      	str	r3, [r7, #4]
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	623b      	str	r3, [r7, #32]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	330c      	adds	r3, #12
 8015d80:	607b      	str	r3, [r7, #4]
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	61fb      	str	r3, [r7, #28]
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	330c      	adds	r3, #12
 8015d8c:	607b      	str	r3, [r7, #4]
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	61bb      	str	r3, [r7, #24]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	330c      	adds	r3, #12
 8015d98:	607b      	str	r3, [r7, #4]

	x4 -= x5;
 8015d9a:	69fa      	ldr	r2, [r7, #28]
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	1ad3      	subs	r3, r2, r3
 8015da0:	61fb      	str	r3, [r7, #28]
	x3 -= x4;
 8015da2:	6a3a      	ldr	r2, [r7, #32]
 8015da4:	69fb      	ldr	r3, [r7, #28]
 8015da6:	1ad3      	subs	r3, r2, r3
 8015da8:	623b      	str	r3, [r7, #32]
	x2 -= x3;
 8015daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dac:	6a3b      	ldr	r3, [r7, #32]
 8015dae:	1ad3      	subs	r3, r2, r3
 8015db0:	627b      	str	r3, [r7, #36]	; 0x24
	x3 -= x5;
 8015db2:	6a3a      	ldr	r2, [r7, #32]
 8015db4:	69bb      	ldr	r3, [r7, #24]
 8015db6:	1ad3      	subs	r3, r2, r3
 8015db8:	623b      	str	r3, [r7, #32]
	x1 -= x2;
 8015dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dbe:	1ad3      	subs	r3, r2, r3
 8015dc0:	62bb      	str	r3, [r7, #40]	; 0x28
	x0 -= x1;
 8015dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc6:	1ad3      	subs	r3, r2, r3
 8015dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 -= x3;
 8015dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015dcc:	6a3b      	ldr	r3, [r7, #32]
 8015dce:	1ad3      	subs	r3, r2, r3
 8015dd0:	62bb      	str	r3, [r7, #40]	; 0x28

	x0 >>= 1;
 8015dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd4:	105b      	asrs	r3, r3, #1
 8015dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 >>= 1;
 8015dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dda:	105b      	asrs	r3, r3, #1
 8015ddc:	62bb      	str	r3, [r7, #40]	; 0x28

	a0 = MULSHIFT32(c3_0, x2) << 1;
 8015dde:	4b3c      	ldr	r3, [pc, #240]	; (8015ed0 <imdct12+0x188>)
 8015de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7fe ff2e 	bl	8014c44 <MULSHIFT32>
 8015de8:	4603      	mov	r3, r0
 8015dea:	005b      	lsls	r3, r3, #1
 8015dec:	617b      	str	r3, [r7, #20]
	a1 = x0 + (x4 >> 1);
 8015dee:	69fb      	ldr	r3, [r7, #28]
 8015df0:	105b      	asrs	r3, r3, #1
 8015df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015df4:	4413      	add	r3, r2
 8015df6:	613b      	str	r3, [r7, #16]
	a2 = x0 - x4;
 8015df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dfa:	69fb      	ldr	r3, [r7, #28]
 8015dfc:	1ad3      	subs	r3, r2, r3
 8015dfe:	60fb      	str	r3, [r7, #12]
	x0 = a1 + a0;
 8015e00:	693a      	ldr	r2, [r7, #16]
 8015e02:	697b      	ldr	r3, [r7, #20]
 8015e04:	4413      	add	r3, r2
 8015e06:	62fb      	str	r3, [r7, #44]	; 0x2c
	x2 = a2;
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	627b      	str	r3, [r7, #36]	; 0x24
	x4 = a1 - a0;
 8015e0c:	693a      	ldr	r2, [r7, #16]
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	1ad3      	subs	r3, r2, r3
 8015e12:	61fb      	str	r3, [r7, #28]

	a0 = MULSHIFT32(c3_0, x3) << 1;
 8015e14:	4b2e      	ldr	r3, [pc, #184]	; (8015ed0 <imdct12+0x188>)
 8015e16:	6a39      	ldr	r1, [r7, #32]
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7fe ff13 	bl	8014c44 <MULSHIFT32>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	005b      	lsls	r3, r3, #1
 8015e22:	617b      	str	r3, [r7, #20]
	a1 = x1 + (x5 >> 1);
 8015e24:	69bb      	ldr	r3, [r7, #24]
 8015e26:	105b      	asrs	r3, r3, #1
 8015e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e2a:	4413      	add	r3, r2
 8015e2c:	613b      	str	r3, [r7, #16]
	a2 = x1 - x5;
 8015e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e30:	69bb      	ldr	r3, [r7, #24]
 8015e32:	1ad3      	subs	r3, r2, r3
 8015e34:	60fb      	str	r3, [r7, #12]

	/* cos window odd samples, mul by 2, eat sign bit */
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8015e36:	4827      	ldr	r0, [pc, #156]	; (8015ed4 <imdct12+0x18c>)
 8015e38:	693a      	ldr	r2, [r7, #16]
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	4413      	add	r3, r2
 8015e3e:	4619      	mov	r1, r3
 8015e40:	f7fe ff00 	bl	8014c44 <MULSHIFT32>
 8015e44:	4603      	mov	r3, r0
 8015e46:	009b      	lsls	r3, r3, #2
 8015e48:	62bb      	str	r3, [r7, #40]	; 0x28
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8015e4a:	4b23      	ldr	r3, [pc, #140]	; (8015ed8 <imdct12+0x190>)
 8015e4c:	68f9      	ldr	r1, [r7, #12]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7fe fef8 	bl	8014c44 <MULSHIFT32>
 8015e54:	4603      	mov	r3, r0
 8015e56:	009b      	lsls	r3, r3, #2
 8015e58:	623b      	str	r3, [r7, #32]
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8015e5a:	4820      	ldr	r0, [pc, #128]	; (8015edc <imdct12+0x194>)
 8015e5c:	693a      	ldr	r2, [r7, #16]
 8015e5e:	697b      	ldr	r3, [r7, #20]
 8015e60:	1ad3      	subs	r3, r2, r3
 8015e62:	4619      	mov	r1, r3
 8015e64:	f7fe feee 	bl	8014c44 <MULSHIFT32>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	009b      	lsls	r3, r3, #2
 8015e6c:	61bb      	str	r3, [r7, #24]

	*out = x0 + x1;	out++;
 8015e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e72:	441a      	add	r2, r3
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	601a      	str	r2, [r3, #0]
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	3304      	adds	r3, #4
 8015e7c:	603b      	str	r3, [r7, #0]
	*out = x2 + x3;	out++;
 8015e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e80:	6a3b      	ldr	r3, [r7, #32]
 8015e82:	441a      	add	r2, r3
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	601a      	str	r2, [r3, #0]
 8015e88:	683b      	ldr	r3, [r7, #0]
 8015e8a:	3304      	adds	r3, #4
 8015e8c:	603b      	str	r3, [r7, #0]
	*out = x4 + x5;	out++;
 8015e8e:	69fa      	ldr	r2, [r7, #28]
 8015e90:	69bb      	ldr	r3, [r7, #24]
 8015e92:	441a      	add	r2, r3
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	601a      	str	r2, [r3, #0]
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	3304      	adds	r3, #4
 8015e9c:	603b      	str	r3, [r7, #0]
	*out = x4 - x5;	out++;
 8015e9e:	69fa      	ldr	r2, [r7, #28]
 8015ea0:	69bb      	ldr	r3, [r7, #24]
 8015ea2:	1ad2      	subs	r2, r2, r3
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	601a      	str	r2, [r3, #0]
 8015ea8:	683b      	ldr	r3, [r7, #0]
 8015eaa:	3304      	adds	r3, #4
 8015eac:	603b      	str	r3, [r7, #0]
	*out = x2 - x3;	out++;
 8015eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015eb0:	6a3b      	ldr	r3, [r7, #32]
 8015eb2:	1ad2      	subs	r2, r2, r3
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	601a      	str	r2, [r3, #0]
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	3304      	adds	r3, #4
 8015ebc:	603b      	str	r3, [r7, #0]
	*out = x0 - x1;
 8015ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec2:	1ad2      	subs	r2, r2, r3
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	601a      	str	r2, [r3, #0]
}
 8015ec8:	bf00      	nop
 8015eca:	3730      	adds	r7, #48	; 0x30
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	6ed9eba1 	.word	0x6ed9eba1
 8015ed4:	7ba3751d 	.word	0x7ba3751d
 8015ed8:	5a82799a 	.word	0x5a82799a
 8015edc:	2120fb83 	.word	0x2120fb83

08015ee0 <IMDCT12x3>:
 * Return:      mOut (OR of abs(y) for all y calculated here)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
static int IMDCT12x3(int *xCurr, int *xPrev, int *y, int btPrev, int blockIdx, int gb)
{
 8015ee0:	b5b0      	push	{r4, r5, r7, lr}
 8015ee2:	b0ae      	sub	sp, #184	; 0xb8
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
 8015eec:	603b      	str	r3, [r7, #0]
	int i, es, mOut, yLo, xBuf[18], xPrevWin[18];	/* need temp buffer for reordering short blocks */
	const int *wp;

	es = 0;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	/* 7 gb is always adequate for accumulator loop + idct12 + window + overlap */
	if (gb < 7) {
 8015ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015ef8:	2b06      	cmp	r3, #6
 8015efa:	dc40      	bgt.n	8015f7e <IMDCT12x3+0x9e>
		es = 7 - gb;
 8015efc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015f00:	f1c3 0307 	rsb	r3, r3, #7
 8015f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (i = 0; i < 18; i+=2) {
 8015f08:	2300      	movs	r3, #0
 8015f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015f0e:	e02f      	b.n	8015f70 <IMDCT12x3+0x90>
			xCurr[i+0] >>= es;
 8015f10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f14:	009b      	lsls	r3, r3, #2
 8015f16:	68fa      	ldr	r2, [r7, #12]
 8015f18:	4413      	add	r3, r2
 8015f1a:	6819      	ldr	r1, [r3, #0]
 8015f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f20:	009b      	lsls	r3, r3, #2
 8015f22:	68fa      	ldr	r2, [r7, #12]
 8015f24:	4413      	add	r3, r2
 8015f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015f2a:	fa41 f202 	asr.w	r2, r1, r2
 8015f2e:	601a      	str	r2, [r3, #0]
			xCurr[i+1] >>= es;
 8015f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f34:	3301      	adds	r3, #1
 8015f36:	009b      	lsls	r3, r3, #2
 8015f38:	68fa      	ldr	r2, [r7, #12]
 8015f3a:	4413      	add	r3, r2
 8015f3c:	6819      	ldr	r1, [r3, #0]
 8015f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f42:	3301      	adds	r3, #1
 8015f44:	009b      	lsls	r3, r3, #2
 8015f46:	68fa      	ldr	r2, [r7, #12]
 8015f48:	4413      	add	r3, r2
 8015f4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015f4e:	fa41 f202 	asr.w	r2, r1, r2
 8015f52:	601a      	str	r2, [r3, #0]
			*xPrev++ >>= es;
 8015f54:	68bb      	ldr	r3, [r7, #8]
 8015f56:	1d1a      	adds	r2, r3, #4
 8015f58:	60ba      	str	r2, [r7, #8]
 8015f5a:	6819      	ldr	r1, [r3, #0]
 8015f5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015f60:	fa41 f202 	asr.w	r2, r1, r2
 8015f64:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 18; i+=2) {
 8015f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f6a:	3302      	adds	r3, #2
 8015f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015f70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015f74:	2b11      	cmp	r3, #17
 8015f76:	ddcb      	ble.n	8015f10 <IMDCT12x3+0x30>
		}
		xPrev -= 9;
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	3b24      	subs	r3, #36	; 0x24
 8015f7c:	60bb      	str	r3, [r7, #8]
	}

	/* requires 4 input guard bits for each imdct12 */
	imdct12(xCurr + 0, xBuf + 0);
 8015f7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015f82:	4619      	mov	r1, r3
 8015f84:	68f8      	ldr	r0, [r7, #12]
 8015f86:	f7ff fedf 	bl	8015d48 <imdct12>
	imdct12(xCurr + 1, xBuf + 6);
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	1d1a      	adds	r2, r3, #4
 8015f8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015f92:	3318      	adds	r3, #24
 8015f94:	4619      	mov	r1, r3
 8015f96:	4610      	mov	r0, r2
 8015f98:	f7ff fed6 	bl	8015d48 <imdct12>
	imdct12(xCurr + 2, xBuf + 12);
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	f103 0208 	add.w	r2, r3, #8
 8015fa2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015fa6:	3330      	adds	r3, #48	; 0x30
 8015fa8:	4619      	mov	r1, r3
 8015faa:	4610      	mov	r0, r2
 8015fac:	f7ff fecc 	bl	8015d48 <imdct12>

	/* window previous from last time */
	WinPrevious(xPrev, xPrevWin, btPrev);
 8015fb0:	f107 0314 	add.w	r3, r7, #20
 8015fb4:	683a      	ldr	r2, [r7, #0]
 8015fb6:	4619      	mov	r1, r3
 8015fb8:	68b8      	ldr	r0, [r7, #8]
 8015fba:	f7ff f829 	bl	8015010 <WinPrevious>

	/* could unroll this for speed, minimum loads (short blocks usually rare, so doesn't make much overall difference) 
	 * xPrevWin[i] << 2 still has 1 gb always, max gain of windowed xBuf stuff also < 1.0 and gain the sign bit
	 * so y calculations won't overflow
	 */
	wp = imdctWin[2];
 8015fbe:	4bc9      	ldr	r3, [pc, #804]	; (80162e4 <IMDCT12x3+0x404>)
 8015fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	mOut = 0;
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for (i = 0; i < 3; i++) {
 8015fca:	2300      	movs	r3, #0
 8015fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015fd0:	e13a      	b.n	8016248 <IMDCT12x3+0x368>
		yLo = (xPrevWin[ 0+i] << 2);
 8015fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015fd6:	009b      	lsls	r3, r3, #2
 8015fd8:	33b8      	adds	r3, #184	; 0xb8
 8015fda:	443b      	add	r3, r7
 8015fdc:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8015fe0:	009b      	lsls	r3, r3, #2
 8015fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 8015fe6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8015fea:	f7fe fe3d 	bl	8014c68 <FASTABS>
 8015fee:	4602      	mov	r2, r0
 8015ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015ffe:	01db      	lsls	r3, r3, #7
 8016000:	687a      	ldr	r2, [r7, #4]
 8016002:	4413      	add	r3, r2
 8016004:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016008:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[ 3+i] << 2);
 801600a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801600e:	3303      	adds	r3, #3
 8016010:	009b      	lsls	r3, r3, #2
 8016012:	33b8      	adds	r3, #184	; 0xb8
 8016014:	443b      	add	r3, r7
 8016016:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 801601a:	009b      	lsls	r3, r3, #2
 801601c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8016020:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8016024:	f7fe fe20 	bl	8014c68 <FASTABS>
 8016028:	4602      	mov	r2, r0
 801602a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801602e:	4313      	orrs	r3, r2
 8016030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016038:	3303      	adds	r3, #3
 801603a:	01db      	lsls	r3, r3, #7
 801603c:	687a      	ldr	r2, [r7, #4]
 801603e:	4413      	add	r3, r2
 8016040:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016044:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8016046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801604a:	3306      	adds	r3, #6
 801604c:	009b      	lsls	r3, r3, #2
 801604e:	33b8      	adds	r3, #184	; 0xb8
 8016050:	443b      	add	r3, r7
 8016052:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8016056:	009c      	lsls	r4, r3, #2
 8016058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016062:	4413      	add	r3, r2
 8016064:	681a      	ldr	r2, [r3, #0]
 8016066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801606a:	3303      	adds	r3, #3
 801606c:	009b      	lsls	r3, r3, #2
 801606e:	33b8      	adds	r3, #184	; 0xb8
 8016070:	443b      	add	r3, r7
 8016072:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8016076:	4619      	mov	r1, r3
 8016078:	4610      	mov	r0, r2
 801607a:	f7fe fde3 	bl	8014c44 <MULSHIFT32>
 801607e:	4603      	mov	r3, r0
 8016080:	4423      	add	r3, r4
 8016082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8016086:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801608a:	f7fe fded 	bl	8014c68 <FASTABS>
 801608e:	4602      	mov	r2, r0
 8016090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016094:	4313      	orrs	r3, r2
 8016096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801609a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801609e:	3306      	adds	r3, #6
 80160a0:	01db      	lsls	r3, r3, #7
 80160a2:	687a      	ldr	r2, [r7, #4]
 80160a4:	4413      	add	r3, r2
 80160a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80160aa:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 80160ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80160b0:	3309      	adds	r3, #9
 80160b2:	009b      	lsls	r3, r3, #2
 80160b4:	33b8      	adds	r3, #184	; 0xb8
 80160b6:	443b      	add	r3, r7
 80160b8:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80160bc:	009c      	lsls	r4, r3, #2
 80160be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80160c2:	3303      	adds	r3, #3
 80160c4:	009b      	lsls	r3, r3, #2
 80160c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80160ca:	4413      	add	r3, r2
 80160cc:	681a      	ldr	r2, [r3, #0]
 80160ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80160d2:	f1c3 0305 	rsb	r3, r3, #5
 80160d6:	009b      	lsls	r3, r3, #2
 80160d8:	33b8      	adds	r3, #184	; 0xb8
 80160da:	443b      	add	r3, r7
 80160dc:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80160e0:	4619      	mov	r1, r3
 80160e2:	4610      	mov	r0, r2
 80160e4:	f7fe fdae 	bl	8014c44 <MULSHIFT32>
 80160e8:	4603      	mov	r3, r0
 80160ea:	4423      	add	r3, r4
 80160ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 80160f0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80160f4:	f7fe fdb8 	bl	8014c68 <FASTABS>
 80160f8:	4602      	mov	r2, r0
 80160fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160fe:	4313      	orrs	r3, r2
 8016100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016104:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016108:	3309      	adds	r3, #9
 801610a:	01db      	lsls	r3, r3, #7
 801610c:	687a      	ldr	r2, [r7, #4]
 801610e:	4413      	add	r3, r2
 8016110:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016114:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8016116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801611a:	330c      	adds	r3, #12
 801611c:	009b      	lsls	r3, r3, #2
 801611e:	33b8      	adds	r3, #184	; 0xb8
 8016120:	443b      	add	r3, r7
 8016122:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8016126:	009c      	lsls	r4, r3, #2
 8016128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801612c:	3306      	adds	r3, #6
 801612e:	009b      	lsls	r3, r3, #2
 8016130:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016134:	4413      	add	r3, r2
 8016136:	681a      	ldr	r2, [r3, #0]
 8016138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801613c:	f1c3 0302 	rsb	r3, r3, #2
 8016140:	009b      	lsls	r3, r3, #2
 8016142:	33b8      	adds	r3, #184	; 0xb8
 8016144:	443b      	add	r3, r7
 8016146:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 801614a:	4619      	mov	r1, r3
 801614c:	4610      	mov	r0, r2
 801614e:	f7fe fd79 	bl	8014c44 <MULSHIFT32>
 8016152:	4605      	mov	r5, r0
 8016154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016158:	009b      	lsls	r3, r3, #2
 801615a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801615e:	4413      	add	r3, r2
 8016160:	681a      	ldr	r2, [r3, #0]
 8016162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016166:	3309      	adds	r3, #9
 8016168:	009b      	lsls	r3, r3, #2
 801616a:	33b8      	adds	r3, #184	; 0xb8
 801616c:	443b      	add	r3, r7
 801616e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8016172:	4619      	mov	r1, r3
 8016174:	4610      	mov	r0, r2
 8016176:	f7fe fd65 	bl	8014c44 <MULSHIFT32>
 801617a:	4603      	mov	r3, r0
 801617c:	442b      	add	r3, r5
 801617e:	4423      	add	r3, r4
 8016180:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 8016184:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8016188:	f7fe fd6e 	bl	8014c68 <FASTABS>
 801618c:	4602      	mov	r2, r0
 801618e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016192:	4313      	orrs	r3, r2
 8016194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016198:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801619c:	330c      	adds	r3, #12
 801619e:	01db      	lsls	r3, r3, #7
 80161a0:	687a      	ldr	r2, [r7, #4]
 80161a2:	4413      	add	r3, r2
 80161a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80161a8:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 80161aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80161ae:	330f      	adds	r3, #15
 80161b0:	009b      	lsls	r3, r3, #2
 80161b2:	33b8      	adds	r3, #184	; 0xb8
 80161b4:	443b      	add	r3, r7
 80161b6:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80161ba:	009c      	lsls	r4, r3, #2
 80161bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80161c0:	3309      	adds	r3, #9
 80161c2:	009b      	lsls	r3, r3, #2
 80161c4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80161c8:	4413      	add	r3, r2
 80161ca:	681a      	ldr	r2, [r3, #0]
 80161cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80161d0:	009b      	lsls	r3, r3, #2
 80161d2:	33b8      	adds	r3, #184	; 0xb8
 80161d4:	443b      	add	r3, r7
 80161d6:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80161da:	4619      	mov	r1, r3
 80161dc:	4610      	mov	r0, r2
 80161de:	f7fe fd31 	bl	8014c44 <MULSHIFT32>
 80161e2:	4605      	mov	r5, r0
 80161e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80161e8:	3303      	adds	r3, #3
 80161ea:	009b      	lsls	r3, r3, #2
 80161ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80161f0:	4413      	add	r3, r2
 80161f2:	681a      	ldr	r2, [r3, #0]
 80161f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80161f8:	f1c3 030b 	rsb	r3, r3, #11
 80161fc:	009b      	lsls	r3, r3, #2
 80161fe:	33b8      	adds	r3, #184	; 0xb8
 8016200:	443b      	add	r3, r7
 8016202:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8016206:	4619      	mov	r1, r3
 8016208:	4610      	mov	r0, r2
 801620a:	f7fe fd1b 	bl	8014c44 <MULSHIFT32>
 801620e:	4603      	mov	r3, r0
 8016210:	442b      	add	r3, r5
 8016212:	4423      	add	r3, r4
 8016214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8016218:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801621c:	f7fe fd24 	bl	8014c68 <FASTABS>
 8016220:	4602      	mov	r2, r0
 8016222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016226:	4313      	orrs	r3, r2
 8016228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801622c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016230:	330f      	adds	r3, #15
 8016232:	01db      	lsls	r3, r3, #7
 8016234:	687a      	ldr	r2, [r7, #4]
 8016236:	4413      	add	r3, r2
 8016238:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801623c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++) {
 801623e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016242:	3301      	adds	r3, #1
 8016244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016248:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801624c:	2b02      	cmp	r3, #2
 801624e:	f77f aec0 	ble.w	8015fd2 <IMDCT12x3+0xf2>
	}

	/* save previous (unwindowed) for overlap - only need samples 6-8, 12-17 */
	for (i = 6; i < 9; i++)
 8016252:	2306      	movs	r3, #6
 8016254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016258:	e010      	b.n	801627c <IMDCT12x3+0x39c>
		*xPrev++ = xBuf[i] >> 2;
 801625a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801625e:	009b      	lsls	r3, r3, #2
 8016260:	33b8      	adds	r3, #184	; 0xb8
 8016262:	443b      	add	r3, r7
 8016264:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 8016268:	68bb      	ldr	r3, [r7, #8]
 801626a:	1d19      	adds	r1, r3, #4
 801626c:	60b9      	str	r1, [r7, #8]
 801626e:	1092      	asrs	r2, r2, #2
 8016270:	601a      	str	r2, [r3, #0]
	for (i = 6; i < 9; i++)
 8016272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016276:	3301      	adds	r3, #1
 8016278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801627c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016280:	2b08      	cmp	r3, #8
 8016282:	ddea      	ble.n	801625a <IMDCT12x3+0x37a>
	for (i = 12; i < 18; i++)
 8016284:	230c      	movs	r3, #12
 8016286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801628a:	e010      	b.n	80162ae <IMDCT12x3+0x3ce>
		*xPrev++ = xBuf[i] >> 2;
 801628c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016290:	009b      	lsls	r3, r3, #2
 8016292:	33b8      	adds	r3, #184	; 0xb8
 8016294:	443b      	add	r3, r7
 8016296:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	1d19      	adds	r1, r3, #4
 801629e:	60b9      	str	r1, [r7, #8]
 80162a0:	1092      	asrs	r2, r2, #2
 80162a2:	601a      	str	r2, [r3, #0]
	for (i = 12; i < 18; i++)
 80162a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80162a8:	3301      	adds	r3, #1
 80162aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80162ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80162b2:	2b11      	cmp	r3, #17
 80162b4:	ddea      	ble.n	801628c <IMDCT12x3+0x3ac>

	xPrev -= 9;
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	3b24      	subs	r3, #36	; 0x24
 80162ba:	60bb      	str	r3, [r7, #8]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80162bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80162c0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80162c4:	68b9      	ldr	r1, [r7, #8]
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f7fe fffc 	bl	80152c4 <FreqInvertRescale>
 80162cc:	4602      	mov	r2, r0
 80162ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80162d2:	4313      	orrs	r3, r2
 80162d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	return mOut;
 80162d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
}
 80162dc:	4618      	mov	r0, r3
 80162de:	37b8      	adds	r7, #184	; 0xb8
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bdb0      	pop	{r4, r5, r7, pc}
 80162e4:	0802a468 	.word	0x0802a468

080162e8 <HybridTransform>:
 *                (including overlap-add)
 *
 * TODO:        examine mixedBlock/winSwitch logic carefully (test he_mode.bit)
 **************************************************************************************/
static int HybridTransform(int *xCurr, int *xPrev, int y[BLOCK_SIZE][NBANDS], SideInfoSub *sis, BlockCount *bc)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b0a4      	sub	sp, #144	; 0x90
 80162ec:	af04      	add	r7, sp, #16
 80162ee:	60f8      	str	r0, [r7, #12]
 80162f0:	60b9      	str	r1, [r7, #8]
 80162f2:	607a      	str	r2, [r7, #4]
 80162f4:	603b      	str	r3, [r7, #0]

	ASSERT(bc->nBlocksLong  <= NBANDS);
	ASSERT(bc->nBlocksTotal <= NBANDS);
	ASSERT(bc->nBlocksPrev  <= NBANDS);

	mOut = 0;
 80162f6:	2300      	movs	r3, #0
 80162f8:	667b      	str	r3, [r7, #100]	; 0x64

	/* do long blocks, if any */
	for(i = 0; i < bc->nBlocksLong; i++) {
 80162fa:	2300      	movs	r3, #0
 80162fc:	677b      	str	r3, [r7, #116]	; 0x74
 80162fe:	e038      	b.n	8016372 <HybridTransform+0x8a>
		/* currWinIdx picks the right window for long blocks (if mixed, long blocks use window type 0) */
		currWinIdx = sis->blockType;
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	695b      	ldr	r3, [r3, #20]
 8016304:	67fb      	str	r3, [r7, #124]	; 0x7c
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	699b      	ldr	r3, [r3, #24]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d007      	beq.n	801631e <HybridTransform+0x36>
 801630e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016312:	695b      	ldr	r3, [r3, #20]
 8016314:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016316:	429a      	cmp	r2, r3
 8016318:	da01      	bge.n	801631e <HybridTransform+0x36>
			currWinIdx = 0;
 801631a:	2300      	movs	r3, #0
 801631c:	67fb      	str	r3, [r7, #124]	; 0x7c

		prevWinIdx = bc->prevType;
 801631e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016322:	68db      	ldr	r3, [r3, #12]
 8016324:	67bb      	str	r3, [r7, #120]	; 0x78
		if (i < bc->prevWinSwitch)
 8016326:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801632a:	691b      	ldr	r3, [r3, #16]
 801632c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801632e:	429a      	cmp	r2, r3
 8016330:	da01      	bge.n	8016336 <HybridTransform+0x4e>
			 prevWinIdx = 0;
 8016332:	2300      	movs	r3, #0
 8016334:	67bb      	str	r3, [r7, #120]	; 0x78

		/* do 36-point IMDCT, including windowing and overlap-add */
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 8016336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016338:	009b      	lsls	r3, r3, #2
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	441a      	add	r2, r3
 801633e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016342:	699b      	ldr	r3, [r3, #24]
 8016344:	9302      	str	r3, [sp, #8]
 8016346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016348:	9301      	str	r3, [sp, #4]
 801634a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801634c:	9300      	str	r3, [sp, #0]
 801634e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016350:	68b9      	ldr	r1, [r7, #8]
 8016352:	68f8      	ldr	r0, [r7, #12]
 8016354:	f7ff faca 	bl	80158ec <IMDCT36>
 8016358:	4602      	mov	r2, r0
 801635a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801635c:	4313      	orrs	r3, r2
 801635e:	667b      	str	r3, [r7, #100]	; 0x64
		xCurr += 18;
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	3348      	adds	r3, #72	; 0x48
 8016364:	60fb      	str	r3, [r7, #12]
		xPrev += 9;
 8016366:	68bb      	ldr	r3, [r7, #8]
 8016368:	3324      	adds	r3, #36	; 0x24
 801636a:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < bc->nBlocksLong; i++) {
 801636c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801636e:	3301      	adds	r3, #1
 8016370:	677b      	str	r3, [r7, #116]	; 0x74
 8016372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801637a:	429a      	cmp	r2, r3
 801637c:	dbc0      	blt.n	8016300 <HybridTransform+0x18>
	}

	/* do short blocks (if any) */
	for (   ; i < bc->nBlocksTotal; i++) {
 801637e:	e027      	b.n	80163d0 <HybridTransform+0xe8>
		ASSERT(sis->blockType == 2);

		prevWinIdx = bc->prevType;
 8016380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016384:	68db      	ldr	r3, [r3, #12]
 8016386:	67bb      	str	r3, [r7, #120]	; 0x78
		if (i < bc->prevWinSwitch)
 8016388:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801638c:	691b      	ldr	r3, [r3, #16]
 801638e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016390:	429a      	cmp	r2, r3
 8016392:	da01      	bge.n	8016398 <HybridTransform+0xb0>
			 prevWinIdx = 0;
 8016394:	2300      	movs	r3, #0
 8016396:	67bb      	str	r3, [r7, #120]	; 0x78
		
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8016398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801639a:	009b      	lsls	r3, r3, #2
 801639c:	687a      	ldr	r2, [r7, #4]
 801639e:	441a      	add	r2, r3
 80163a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163a4:	699b      	ldr	r3, [r3, #24]
 80163a6:	9301      	str	r3, [sp, #4]
 80163a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80163aa:	9300      	str	r3, [sp, #0]
 80163ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80163ae:	68b9      	ldr	r1, [r7, #8]
 80163b0:	68f8      	ldr	r0, [r7, #12]
 80163b2:	f7ff fd95 	bl	8015ee0 <IMDCT12x3>
 80163b6:	4602      	mov	r2, r0
 80163b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80163ba:	4313      	orrs	r3, r2
 80163bc:	667b      	str	r3, [r7, #100]	; 0x64
		xCurr += 18;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	3348      	adds	r3, #72	; 0x48
 80163c2:	60fb      	str	r3, [r7, #12]
		xPrev += 9;
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	3324      	adds	r3, #36	; 0x24
 80163c8:	60bb      	str	r3, [r7, #8]
	for (   ; i < bc->nBlocksTotal; i++) {
 80163ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80163cc:	3301      	adds	r3, #1
 80163ce:	677b      	str	r3, [r7, #116]	; 0x74
 80163d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163d4:	685b      	ldr	r3, [r3, #4]
 80163d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80163d8:	429a      	cmp	r2, r3
 80163da:	dbd1      	blt.n	8016380 <HybridTransform+0x98>
	}
	nBlocksOut = i;
 80163dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80163de:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	/* window and overlap prev if prev longer that current */
	for (   ; i < bc->nBlocksPrev; i++) {
 80163e0:	e074      	b.n	80164cc <HybridTransform+0x1e4>
		prevWinIdx = bc->prevType;
 80163e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163e6:	68db      	ldr	r3, [r3, #12]
 80163e8:	67bb      	str	r3, [r7, #120]	; 0x78
		if (i < bc->prevWinSwitch)
 80163ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163ee:	691b      	ldr	r3, [r3, #16]
 80163f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80163f2:	429a      	cmp	r2, r3
 80163f4:	da01      	bge.n	80163fa <HybridTransform+0x112>
			 prevWinIdx = 0;
 80163f6:	2300      	movs	r3, #0
 80163f8:	67bb      	str	r3, [r7, #120]	; 0x78
		WinPrevious(xPrev, xPrevWin, prevWinIdx);
 80163fa:	f107 0314 	add.w	r3, r7, #20
 80163fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016400:	4619      	mov	r1, r3
 8016402:	68b8      	ldr	r0, [r7, #8]
 8016404:	f7fe fe04 	bl	8015010 <WinPrevious>

		nonZero = 0;
 8016408:	2300      	movs	r3, #0
 801640a:	66bb      	str	r3, [r7, #104]	; 0x68
		fiBit = i << 31;
 801640c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801640e:	07db      	lsls	r3, r3, #31
 8016410:	663b      	str	r3, [r7, #96]	; 0x60
		for (j = 0; j < 9; j++) {
 8016412:	2300      	movs	r3, #0
 8016414:	673b      	str	r3, [r7, #112]	; 0x70
 8016416:	e04b      	b.n	80164b0 <HybridTransform+0x1c8>
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8016418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801641a:	005b      	lsls	r3, r3, #1
 801641c:	009b      	lsls	r3, r3, #2
 801641e:	3380      	adds	r3, #128	; 0x80
 8016420:	443b      	add	r3, r7
 8016422:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8016426:	009b      	lsls	r3, r3, #2
 8016428:	65fb      	str	r3, [r7, #92]	; 0x5c
			nonZero |= xp;
 801642a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801642c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801642e:	4313      	orrs	r3, r2
 8016430:	66bb      	str	r3, [r7, #104]	; 0x68
			y[2*j+0][i] = xp;
 8016432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016434:	021b      	lsls	r3, r3, #8
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	4413      	add	r3, r2
 801643a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801643c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801643e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mOut |= FASTABS(xp);
 8016442:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016444:	f7fe fc10 	bl	8014c68 <FASTABS>
 8016448:	4602      	mov	r2, r0
 801644a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801644c:	4313      	orrs	r3, r2
 801644e:	667b      	str	r3, [r7, #100]	; 0x64

			/* frequency inversion on odd blocks/odd samples (flip sign if i odd, j odd) */
			xp = xPrevWin[2*j+1] << 2;
 8016450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016452:	005b      	lsls	r3, r3, #1
 8016454:	3301      	adds	r3, #1
 8016456:	009b      	lsls	r3, r3, #2
 8016458:	3380      	adds	r3, #128	; 0x80
 801645a:	443b      	add	r3, r7
 801645c:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	65fb      	str	r3, [r7, #92]	; 0x5c
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8016464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016466:	17da      	asrs	r2, r3, #31
 8016468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801646a:	405a      	eors	r2, r3
 801646c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801646e:	f003 0301 	and.w	r3, r3, #1
 8016472:	4413      	add	r3, r2
 8016474:	65fb      	str	r3, [r7, #92]	; 0x5c
			nonZero |= xp;
 8016476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801647a:	4313      	orrs	r3, r2
 801647c:	66bb      	str	r3, [r7, #104]	; 0x68
			y[2*j+1][i] = xp;
 801647e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016480:	021b      	lsls	r3, r3, #8
 8016482:	3380      	adds	r3, #128	; 0x80
 8016484:	687a      	ldr	r2, [r7, #4]
 8016486:	4413      	add	r3, r2
 8016488:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801648a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801648c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mOut |= FASTABS(xp);
 8016490:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016492:	f7fe fbe9 	bl	8014c68 <FASTABS>
 8016496:	4602      	mov	r2, r0
 8016498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801649a:	4313      	orrs	r3, r2
 801649c:	667b      	str	r3, [r7, #100]	; 0x64

			xPrev[j] = 0;
 801649e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164a0:	009b      	lsls	r3, r3, #2
 80164a2:	68ba      	ldr	r2, [r7, #8]
 80164a4:	4413      	add	r3, r2
 80164a6:	2200      	movs	r2, #0
 80164a8:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 9; j++) {
 80164aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164ac:	3301      	adds	r3, #1
 80164ae:	673b      	str	r3, [r7, #112]	; 0x70
 80164b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164b2:	2b08      	cmp	r3, #8
 80164b4:	ddb0      	ble.n	8016418 <HybridTransform+0x130>
		}
		xPrev += 9;
 80164b6:	68bb      	ldr	r3, [r7, #8]
 80164b8:	3324      	adds	r3, #36	; 0x24
 80164ba:	60bb      	str	r3, [r7, #8]
		if (nonZero)
 80164bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d001      	beq.n	80164c6 <HybridTransform+0x1de>
			nBlocksOut = i;
 80164c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80164c4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (   ; i < bc->nBlocksPrev; i++) {
 80164c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80164c8:	3301      	adds	r3, #1
 80164ca:	677b      	str	r3, [r7, #116]	; 0x74
 80164cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80164d0:	689b      	ldr	r3, [r3, #8]
 80164d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80164d4:	429a      	cmp	r2, r3
 80164d6:	db84      	blt.n	80163e2 <HybridTransform+0xfa>
	}
	
	/* clear rest of blocks */
	for (   ; i < 32; i++) {
 80164d8:	e013      	b.n	8016502 <HybridTransform+0x21a>
		for (j = 0; j < 18; j++) 
 80164da:	2300      	movs	r3, #0
 80164dc:	673b      	str	r3, [r7, #112]	; 0x70
 80164de:	e00a      	b.n	80164f6 <HybridTransform+0x20e>
			y[j][i] = 0;
 80164e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164e2:	01db      	lsls	r3, r3, #7
 80164e4:	687a      	ldr	r2, [r7, #4]
 80164e6:	4413      	add	r3, r2
 80164e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80164ea:	2100      	movs	r1, #0
 80164ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (j = 0; j < 18; j++) 
 80164f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164f2:	3301      	adds	r3, #1
 80164f4:	673b      	str	r3, [r7, #112]	; 0x70
 80164f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164f8:	2b11      	cmp	r3, #17
 80164fa:	ddf1      	ble.n	80164e0 <HybridTransform+0x1f8>
	for (   ; i < 32; i++) {
 80164fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80164fe:	3301      	adds	r3, #1
 8016500:	677b      	str	r3, [r7, #116]	; 0x74
 8016502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016504:	2b1f      	cmp	r3, #31
 8016506:	dde8      	ble.n	80164da <HybridTransform+0x1f2>
	}

	bc->gbOut = CLZ(mOut) - 1;
 8016508:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801650a:	f7fe fbc1 	bl	8014c90 <CLZ>
 801650e:	4603      	mov	r3, r0
 8016510:	1e5a      	subs	r2, r3, #1
 8016512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016516:	61da      	str	r2, [r3, #28]

	return nBlocksOut;
 8016518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 801651a:	4618      	mov	r0, r3
 801651c:	3780      	adds	r7, #128	; 0x80
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}
	...

08016524 <xmp3fixpt_IMDCT>:
 *              updated hi->nonZeroBound index for this channel
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
int IMDCT(MP3DecInfo *mp3DecInfo, int gr, int ch)
{
 8016524:	b5b0      	push	{r4, r5, r7, lr}
 8016526:	b094      	sub	sp, #80	; 0x50
 8016528:	af02      	add	r7, sp, #8
 801652a:	60f8      	str	r0, [r7, #12]
 801652c:	60b9      	str	r1, [r7, #8]
 801652e:	607a      	str	r2, [r7, #4]
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d00f      	beq.n	8016556 <xmp3fixpt_IMDCT+0x32>
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d00b      	beq.n	8016556 <xmp3fixpt_IMDCT+0x32>
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d007      	beq.n	8016556 <xmp3fixpt_IMDCT+0x32>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	68db      	ldr	r3, [r3, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 801654a:	2b00      	cmp	r3, #0
 801654c:	d003      	beq.n	8016556 <xmp3fixpt_IMDCT+0x32>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	695b      	ldr	r3, [r3, #20]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d102      	bne.n	801655c <xmp3fixpt_IMDCT+0x38>
		return -1;
 8016556:	f04f 33ff 	mov.w	r3, #4294967295
 801655a:	e139      	b.n	80167d0 <xmp3fixpt_IMDCT+0x2ac>

	/* si is an array of up to 4 structs, stored as gr0ch0, gr0ch1, gr1ch0, gr1ch1 */
	fh = (FrameHeader *)(mp3DecInfo->FrameHeaderPS);
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	643b      	str	r3, [r7, #64]	; 0x40
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	63fb      	str	r3, [r7, #60]	; 0x3c
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	68db      	ldr	r3, [r3, #12]
 801656c:	63bb      	str	r3, [r7, #56]	; 0x38
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	695b      	ldr	r3, [r3, #20]
 8016572:	637b      	str	r3, [r7, #52]	; 0x34
	/* anti-aliasing done on whole long blocks only
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 8016574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801657a:	7812      	ldrb	r2, [r2, #0]
 801657c:	2a00      	cmp	r2, #0
 801657e:	d101      	bne.n	8016584 <xmp3fixpt_IMDCT+0x60>
 8016580:	2208      	movs	r2, #8
 8016582:	e000      	b.n	8016586 <xmp3fixpt_IMDCT+0x62>
 8016584:	2206      	movs	r2, #6
 8016586:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801658a:	4a93      	ldr	r2, [pc, #588]	; (80167d8 <xmp3fixpt_IMDCT+0x2b4>)
 801658c:	fb82 1203 	smull	r1, r2, r2, r3
 8016590:	1092      	asrs	r2, r2, #2
 8016592:	17db      	asrs	r3, r3, #31
 8016594:	1ad3      	subs	r3, r2, r3
 8016596:	b21b      	sxth	r3, r3
 8016598:	633b      	str	r3, [r7, #48]	; 0x30
	if (si->sis[gr][ch].blockType != 2) {
 801659a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	68b9      	ldr	r1, [r7, #8]
 80165a0:	461a      	mov	r2, r3
 80165a2:	00d2      	lsls	r2, r2, #3
 80165a4:	441a      	add	r2, r3
 80165a6:	00d3      	lsls	r3, r2, #3
 80165a8:	461a      	mov	r2, r3
 80165aa:	460b      	mov	r3, r1
 80165ac:	00db      	lsls	r3, r3, #3
 80165ae:	440b      	add	r3, r1
 80165b0:	011b      	lsls	r3, r3, #4
 80165b2:	4413      	add	r3, r2
 80165b4:	4403      	add	r3, r0
 80165b6:	333c      	adds	r3, #60	; 0x3c
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2b02      	cmp	r3, #2
 80165bc:	d01e      	beq.n	80165fc <xmp3fixpt_IMDCT+0xd8>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 80165be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165c0:	687a      	ldr	r2, [r7, #4]
 80165c2:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 80165c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165ca:	f240 2226 	movw	r2, #550	; 0x226
 80165ce:	4293      	cmp	r3, r2
 80165d0:	dc0e      	bgt.n	80165f0 <xmp3fixpt_IMDCT+0xcc>
 80165d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d4:	687a      	ldr	r2, [r7, #4]
 80165d6:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 80165da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165de:	3307      	adds	r3, #7
 80165e0:	4a7d      	ldr	r2, [pc, #500]	; (80167d8 <xmp3fixpt_IMDCT+0x2b4>)
 80165e2:	fb82 1203 	smull	r1, r2, r2, r3
 80165e6:	1092      	asrs	r2, r2, #2
 80165e8:	17db      	asrs	r3, r3, #31
 80165ea:	1ad3      	subs	r3, r2, r3
 80165ec:	3301      	adds	r3, #1
 80165ee:	e000      	b.n	80165f2 <xmp3fixpt_IMDCT+0xce>
 80165f0:	2320      	movs	r3, #32
 80165f2:	613b      	str	r3, [r7, #16]
		nBfly = bc.nBlocksLong - 1;
 80165f4:	693b      	ldr	r3, [r7, #16]
 80165f6:	3b01      	subs	r3, #1
 80165f8:	647b      	str	r3, [r7, #68]	; 0x44
 80165fa:	e02d      	b.n	8016658 <xmp3fixpt_IMDCT+0x134>
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 80165fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	68b9      	ldr	r1, [r7, #8]
 8016602:	461a      	mov	r2, r3
 8016604:	00d2      	lsls	r2, r2, #3
 8016606:	441a      	add	r2, r3
 8016608:	00d3      	lsls	r3, r2, #3
 801660a:	461a      	mov	r2, r3
 801660c:	460b      	mov	r3, r1
 801660e:	00db      	lsls	r3, r3, #3
 8016610:	440b      	add	r3, r1
 8016612:	011b      	lsls	r3, r3, #4
 8016614:	4413      	add	r3, r2
 8016616:	4403      	add	r3, r0
 8016618:	333c      	adds	r3, #60	; 0x3c
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	2b02      	cmp	r3, #2
 801661e:	d117      	bne.n	8016650 <xmp3fixpt_IMDCT+0x12c>
 8016620:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	68b9      	ldr	r1, [r7, #8]
 8016626:	461a      	mov	r2, r3
 8016628:	00d2      	lsls	r2, r2, #3
 801662a:	441a      	add	r2, r3
 801662c:	00d3      	lsls	r3, r2, #3
 801662e:	461a      	mov	r2, r3
 8016630:	460b      	mov	r3, r1
 8016632:	00db      	lsls	r3, r3, #3
 8016634:	440b      	add	r3, r1
 8016636:	011b      	lsls	r3, r3, #4
 8016638:	4413      	add	r3, r2
 801663a:	4403      	add	r3, r0
 801663c:	3340      	adds	r3, #64	; 0x40
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d005      	beq.n	8016650 <xmp3fixpt_IMDCT+0x12c>
		/* mixed block - long transforms until cutoff, then short transforms */
		bc.nBlocksLong = blockCutoff;	
 8016644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016646:	613b      	str	r3, [r7, #16]
		nBfly = bc.nBlocksLong - 1;
 8016648:	693b      	ldr	r3, [r7, #16]
 801664a:	3b01      	subs	r3, #1
 801664c:	647b      	str	r3, [r7, #68]	; 0x44
 801664e:	e003      	b.n	8016658 <xmp3fixpt_IMDCT+0x134>
	} else {
		/* all short transforms */
		bc.nBlocksLong = 0;
 8016650:	2300      	movs	r3, #0
 8016652:	613b      	str	r3, [r7, #16]
		nBfly = 0;
 8016654:	2300      	movs	r3, #0
 8016656:	647b      	str	r3, [r7, #68]	; 0x44
	}
 
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 8016658:	687a      	ldr	r2, [r7, #4]
 801665a:	4613      	mov	r3, r2
 801665c:	00db      	lsls	r3, r3, #3
 801665e:	4413      	add	r3, r2
 8016660:	021b      	lsls	r3, r3, #8
 8016662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016664:	4413      	add	r3, r2
 8016666:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016668:	4618      	mov	r0, r3
 801666a:	f7fe fb2d 	bl	8014cc8 <AntiAlias>
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 801666e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016670:	4613      	mov	r3, r2
 8016672:	00db      	lsls	r3, r3, #3
 8016674:	4413      	add	r3, r2
 8016676:	005b      	lsls	r3, r3, #1
 8016678:	f103 0208 	add.w	r2, r3, #8
 801667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801667e:	6879      	ldr	r1, [r7, #4]
 8016680:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8016684:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016688:	429a      	cmp	r2, r3
 801668a:	bfb8      	it	lt
 801668c:	461a      	movlt	r2, r3
 801668e:	4611      	mov	r1, r2
 8016690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016692:	687a      	ldr	r2, [r7, #4]
 8016694:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8016698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);

	/* for readability, use a struct instead of passing a million parameters to HybridTransform() */
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 801669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 80166a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166a8:	3311      	adds	r3, #17
 80166aa:	4a4b      	ldr	r2, [pc, #300]	; (80167d8 <xmp3fixpt_IMDCT+0x2b4>)
 80166ac:	fb82 1203 	smull	r1, r2, r2, r3
 80166b0:	1092      	asrs	r2, r2, #2
 80166b2:	17db      	asrs	r3, r3, #31
 80166b4:	1ad3      	subs	r3, r2, r3
 80166b6:	617b      	str	r3, [r7, #20]
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 80166b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166ba:	687a      	ldr	r2, [r7, #4]
 80166bc:	f502 62d8 	add.w	r2, r2, #1728	; 0x6c0
 80166c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166c4:	61bb      	str	r3, [r7, #24]
	bc.prevType = mi->prevType[ch];
 80166c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166c8:	687a      	ldr	r2, [r7, #4]
 80166ca:	f202 62c2 	addw	r2, r2, #1730	; 0x6c2
 80166ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166d2:	61fb      	str	r3, [r7, #28]
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 80166d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166d6:	687a      	ldr	r2, [r7, #4]
 80166d8:	f202 62c4 	addw	r2, r2, #1732	; 0x6c4
 80166dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166e0:	623b      	str	r3, [r7, #32]
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 80166e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	68b9      	ldr	r1, [r7, #8]
 80166e8:	461a      	mov	r2, r3
 80166ea:	00d2      	lsls	r2, r2, #3
 80166ec:	441a      	add	r2, r3
 80166ee:	00d3      	lsls	r3, r2, #3
 80166f0:	461a      	mov	r2, r3
 80166f2:	460b      	mov	r3, r1
 80166f4:	00db      	lsls	r3, r3, #3
 80166f6:	440b      	add	r3, r1
 80166f8:	011b      	lsls	r3, r3, #4
 80166fa:	4413      	add	r3, r2
 80166fc:	4403      	add	r3, r0
 80166fe:	3340      	adds	r3, #64	; 0x40
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d001      	beq.n	801670a <xmp3fixpt_IMDCT+0x1e6>
 8016706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016708:	e000      	b.n	801670c <xmp3fixpt_IMDCT+0x1e8>
 801670a:	2300      	movs	r3, #0
 801670c:	627b      	str	r3, [r7, #36]	; 0x24
	bc.gbIn = hi->gb[ch];
 801670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016710:	687a      	ldr	r2, [r7, #4]
 8016712:	f202 4282 	addw	r2, r2, #1154	; 0x482
 8016716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801671a:	62bb      	str	r3, [r7, #40]	; 0x28

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 801671c:	687a      	ldr	r2, [r7, #4]
 801671e:	4613      	mov	r3, r2
 8016720:	00db      	lsls	r3, r3, #3
 8016722:	4413      	add	r3, r2
 8016724:	021b      	lsls	r3, r3, #8
 8016726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016728:	18d0      	adds	r0, r2, r3
 801672a:	687a      	ldr	r2, [r7, #4]
 801672c:	4613      	mov	r3, r2
 801672e:	00db      	lsls	r3, r3, #3
 8016730:	4413      	add	r3, r2
 8016732:	01db      	lsls	r3, r3, #7
 8016734:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8016738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801673a:	18d4      	adds	r4, r2, r3
 801673c:	687a      	ldr	r2, [r7, #4]
 801673e:	4613      	mov	r3, r2
 8016740:	00db      	lsls	r3, r3, #3
 8016742:	4413      	add	r3, r2
 8016744:	021b      	lsls	r3, r3, #8
 8016746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016748:	18d5      	adds	r5, r2, r3
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	461a      	mov	r2, r3
 801674e:	00d2      	lsls	r2, r2, #3
 8016750:	441a      	add	r2, r3
 8016752:	00d3      	lsls	r3, r2, #3
 8016754:	461a      	mov	r2, r3
 8016756:	68b9      	ldr	r1, [r7, #8]
 8016758:	460b      	mov	r3, r1
 801675a:	00db      	lsls	r3, r3, #3
 801675c:	440b      	add	r3, r1
 801675e:	011b      	lsls	r3, r3, #4
 8016760:	4413      	add	r3, r2
 8016762:	3328      	adds	r3, #40	; 0x28
 8016764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016766:	441a      	add	r2, r3
 8016768:	f107 0310 	add.w	r3, r7, #16
 801676c:	9300      	str	r3, [sp, #0]
 801676e:	4613      	mov	r3, r2
 8016770:	462a      	mov	r2, r5
 8016772:	4621      	mov	r1, r4
 8016774:	f7ff fdb8 	bl	80162e8 <HybridTransform>
 8016778:	4601      	mov	r1, r0
 801677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801677c:	687a      	ldr	r2, [r7, #4]
 801677e:	f502 62d8 	add.w	r2, r2, #1728	; 0x6c0
 8016782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 8016786:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	68b9      	ldr	r1, [r7, #8]
 801678c:	461a      	mov	r2, r3
 801678e:	00d2      	lsls	r2, r2, #3
 8016790:	441a      	add	r2, r3
 8016792:	00d3      	lsls	r3, r2, #3
 8016794:	461a      	mov	r2, r3
 8016796:	460b      	mov	r3, r1
 8016798:	00db      	lsls	r3, r3, #3
 801679a:	440b      	add	r3, r1
 801679c:	011b      	lsls	r3, r3, #4
 801679e:	4413      	add	r3, r2
 80167a0:	4403      	add	r3, r0
 80167a2:	333c      	adds	r3, #60	; 0x3c
 80167a4:	6819      	ldr	r1, [r3, #0]
 80167a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167a8:	687a      	ldr	r2, [r7, #4]
 80167aa:	f202 62c2 	addw	r2, r2, #1730	; 0x6c2
 80167ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 80167b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	f202 62c4 	addw	r2, r2, #1732	; 0x6c4
 80167bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	mi->gb[ch] = bc.gbOut;
 80167c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167c4:	687a      	ldr	r2, [r7, #4]
 80167c6:	f202 62c6 	addw	r2, r2, #1734	; 0x6c6
 80167ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 80167ce:	2300      	movs	r3, #0
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3748      	adds	r7, #72	; 0x48
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bdb0      	pop	{r4, r5, r7, pc}
 80167d8:	38e38e39 	.word	0x38e38e39

080167dc <MADD64>:

//mw
static __inline Word64 MADD64(Word64 sum, int x, int y)
{
 80167dc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80167e0:	b087      	sub	sp, #28
 80167e2:	af00      	add	r7, sp, #0
 80167e4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80167e8:	60fa      	str	r2, [r7, #12]
 80167ea:	60bb      	str	r3, [r7, #8]
   return (sum + ((int64_t)x * y));
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	17da      	asrs	r2, r3, #31
 80167f0:	469a      	mov	sl, r3
 80167f2:	4693      	mov	fp, r2
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	17da      	asrs	r2, r3, #31
 80167f8:	4698      	mov	r8, r3
 80167fa:	4691      	mov	r9, r2
 80167fc:	fb08 f20b 	mul.w	r2, r8, fp
 8016800:	fb0a f309 	mul.w	r3, sl, r9
 8016804:	4413      	add	r3, r2
 8016806:	fbaa 4508 	umull	r4, r5, sl, r8
 801680a:	442b      	add	r3, r5
 801680c:	461d      	mov	r5, r3
 801680e:	4620      	mov	r0, r4
 8016810:	4629      	mov	r1, r5
 8016812:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016816:	1884      	adds	r4, r0, r2
 8016818:	603c      	str	r4, [r7, #0]
 801681a:	eb41 0303 	adc.w	r3, r1, r3
 801681e:	607b      	str	r3, [r7, #4]
 8016820:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8016824:	4610      	mov	r0, r2
 8016826:	4619      	mov	r1, r3
 8016828:	371c      	adds	r7, #28
 801682a:	46bd      	mov	sp, r7
 801682c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016830:	4770      	bx	lr

08016832 <SAR64>:
{
  return x << n;
}

static __inline Word64 SAR64(Word64 x, int n)
{
 8016832:	b4f0      	push	{r4, r5, r6, r7}
 8016834:	b084      	sub	sp, #16
 8016836:	af00      	add	r7, sp, #0
 8016838:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801683c:	607a      	str	r2, [r7, #4]
  return x >> n;
 801683e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016842:	6879      	ldr	r1, [r7, #4]
 8016844:	f1c1 0620 	rsb	r6, r1, #32
 8016848:	f1a1 0020 	sub.w	r0, r1, #32
 801684c:	fa22 f401 	lsr.w	r4, r2, r1
 8016850:	fa03 f606 	lsl.w	r6, r3, r6
 8016854:	4334      	orrs	r4, r6
 8016856:	fa23 f000 	lsr.w	r0, r3, r0
 801685a:	4304      	orrs	r4, r0
 801685c:	fa23 f501 	lsr.w	r5, r3, r1
 8016860:	4622      	mov	r2, r4
 8016862:	462b      	mov	r3, r5
}
 8016864:	4610      	mov	r0, r2
 8016866:	4619      	mov	r1, r3
 8016868:	3710      	adds	r7, #16
 801686a:	46bd      	mov	sp, r7
 801686c:	bcf0      	pop	{r4, r5, r6, r7}
 801686e:	4770      	bx	lr

08016870 <ClipToShort>:
 */
#define DEF_NFRACBITS	(DQ_FRACBITS_OUT - 2 - 2 - 15)	
#define CSHIFT	12	/* coefficients have 12 leading sign bits for early-terminating mulitplies */

static __inline short ClipToShort(int x, int fracBits)
{
 8016870:	b480      	push	{r7}
 8016872:	b085      	sub	sp, #20
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
 8016878:	6039      	str	r1, [r7, #0]
	int sign;
	
	/* assumes you've already rounded (x += (1 << (fracBits-1))) */
	x >>= fracBits;
 801687a:	687a      	ldr	r2, [r7, #4]
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	fa42 f303 	asr.w	r3, r2, r3
 8016882:	607b      	str	r3, [r7, #4]
	
	/* Ken's trick: clips to [-32768, 32767] */
	sign = x >> 31;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	17db      	asrs	r3, r3, #31
 8016888:	60fb      	str	r3, [r7, #12]
	if (sign != (x >> 15))
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	13db      	asrs	r3, r3, #15
 801688e:	68fa      	ldr	r2, [r7, #12]
 8016890:	429a      	cmp	r2, r3
 8016892:	d004      	beq.n	801689e <ClipToShort+0x2e>
		x = sign ^ ((1 << 15) - 1);
 8016894:	68fa      	ldr	r2, [r7, #12]
 8016896:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801689a:	4053      	eors	r3, r2
 801689c:	607b      	str	r3, [r7, #4]

	return (short)x;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	b21b      	sxth	r3, r3
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	3714      	adds	r7, #20
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <xmp3fixpt_PolyphaseMono>:
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 *                (note max filter gain - see polyCoef[] comments)
 **************************************************************************************/
void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
{	
 80168ae:	b590      	push	{r4, r7, lr}
 80168b0:	b093      	sub	sp, #76	; 0x4c
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	60f8      	str	r0, [r7, #12]
 80168b6:	60b9      	str	r1, [r7, #8]
 80168b8:	607a      	str	r2, [r7, #4]
	const int *coef;
	int *vb1;
	int vLo, vHi, c1, c2;
	Word64 sum1L, sum2L, rndVal;

	rndVal = (Word64)( 1 << (DEF_NFRACBITS - 1 + (32 - CSHIFT)) );
 80168ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80168be:	f04f 0300 	mov.w	r3, #0
 80168c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	/* special case, output sample 0 */
	coef = coefBase;
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	643b      	str	r3, [r7, #64]	; 0x40
	vb1 = vbuf;
 80168ca:	68bb      	ldr	r3, [r7, #8]
 80168cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sum1L = rndVal;
 80168ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80168d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	MC0M(0)
 80168d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	627b      	str	r3, [r7, #36]	; 0x24
 80168dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80168de:	3304      	adds	r3, #4
 80168e0:	643b      	str	r3, [r7, #64]	; 0x40
 80168e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	623b      	str	r3, [r7, #32]
 80168e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80168ea:	3304      	adds	r3, #4
 80168ec:	643b      	str	r3, [r7, #64]	; 0x40
 80168ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	61fb      	str	r3, [r7, #28]
 80168f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80168f8:	61bb      	str	r3, [r7, #24]
 80168fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168fc:	69fa      	ldr	r2, [r7, #28]
 80168fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016902:	f7ff ff6b 	bl	80167dc <MADD64>
 8016906:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 801690a:	6a3b      	ldr	r3, [r7, #32]
 801690c:	425b      	negs	r3, r3
 801690e:	69ba      	ldr	r2, [r7, #24]
 8016910:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016914:	f7ff ff62 	bl	80167dc <MADD64>
 8016918:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC0M(1)
 801691c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	627b      	str	r3, [r7, #36]	; 0x24
 8016922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016924:	3304      	adds	r3, #4
 8016926:	643b      	str	r3, [r7, #64]	; 0x40
 8016928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	623b      	str	r3, [r7, #32]
 801692e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016930:	3304      	adds	r3, #4
 8016932:	643b      	str	r3, [r7, #64]	; 0x40
 8016934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	61fb      	str	r3, [r7, #28]
 801693a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801693e:	61bb      	str	r3, [r7, #24]
 8016940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016942:	69fa      	ldr	r2, [r7, #28]
 8016944:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016948:	f7ff ff48 	bl	80167dc <MADD64>
 801694c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016950:	6a3b      	ldr	r3, [r7, #32]
 8016952:	425b      	negs	r3, r3
 8016954:	69ba      	ldr	r2, [r7, #24]
 8016956:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801695a:	f7ff ff3f 	bl	80167dc <MADD64>
 801695e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC0M(2)
 8016962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	627b      	str	r3, [r7, #36]	; 0x24
 8016968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801696a:	3304      	adds	r3, #4
 801696c:	643b      	str	r3, [r7, #64]	; 0x40
 801696e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	623b      	str	r3, [r7, #32]
 8016974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016976:	3304      	adds	r3, #4
 8016978:	643b      	str	r3, [r7, #64]	; 0x40
 801697a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801697c:	689b      	ldr	r3, [r3, #8]
 801697e:	61fb      	str	r3, [r7, #28]
 8016980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016984:	61bb      	str	r3, [r7, #24]
 8016986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016988:	69fa      	ldr	r2, [r7, #28]
 801698a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801698e:	f7ff ff25 	bl	80167dc <MADD64>
 8016992:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016996:	6a3b      	ldr	r3, [r7, #32]
 8016998:	425b      	negs	r3, r3
 801699a:	69ba      	ldr	r2, [r7, #24]
 801699c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80169a0:	f7ff ff1c 	bl	80167dc <MADD64>
 80169a4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC0M(3)
 80169a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	627b      	str	r3, [r7, #36]	; 0x24
 80169ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169b0:	3304      	adds	r3, #4
 80169b2:	643b      	str	r3, [r7, #64]	; 0x40
 80169b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	623b      	str	r3, [r7, #32]
 80169ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169bc:	3304      	adds	r3, #4
 80169be:	643b      	str	r3, [r7, #64]	; 0x40
 80169c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169c2:	68db      	ldr	r3, [r3, #12]
 80169c4:	61fb      	str	r3, [r7, #28]
 80169c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80169ca:	61bb      	str	r3, [r7, #24]
 80169cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ce:	69fa      	ldr	r2, [r7, #28]
 80169d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80169d4:	f7ff ff02 	bl	80167dc <MADD64>
 80169d8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80169dc:	6a3b      	ldr	r3, [r7, #32]
 80169de:	425b      	negs	r3, r3
 80169e0:	69ba      	ldr	r2, [r7, #24]
 80169e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80169e6:	f7ff fef9 	bl	80167dc <MADD64>
 80169ea:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC0M(4)
 80169ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	627b      	str	r3, [r7, #36]	; 0x24
 80169f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169f6:	3304      	adds	r3, #4
 80169f8:	643b      	str	r3, [r7, #64]	; 0x40
 80169fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	623b      	str	r3, [r7, #32]
 8016a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a02:	3304      	adds	r3, #4
 8016a04:	643b      	str	r3, [r7, #64]	; 0x40
 8016a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a08:	691b      	ldr	r3, [r3, #16]
 8016a0a:	61fb      	str	r3, [r7, #28]
 8016a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a10:	61bb      	str	r3, [r7, #24]
 8016a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a14:	69fa      	ldr	r2, [r7, #28]
 8016a16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016a1a:	f7ff fedf 	bl	80167dc <MADD64>
 8016a1e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016a22:	6a3b      	ldr	r3, [r7, #32]
 8016a24:	425b      	negs	r3, r3
 8016a26:	69ba      	ldr	r2, [r7, #24]
 8016a28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016a2c:	f7ff fed6 	bl	80167dc <MADD64>
 8016a30:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC0M(5)
 8016a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	627b      	str	r3, [r7, #36]	; 0x24
 8016a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a3c:	3304      	adds	r3, #4
 8016a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8016a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	623b      	str	r3, [r7, #32]
 8016a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a48:	3304      	adds	r3, #4
 8016a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8016a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a4e:	695b      	ldr	r3, [r3, #20]
 8016a50:	61fb      	str	r3, [r7, #28]
 8016a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a56:	61bb      	str	r3, [r7, #24]
 8016a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a5a:	69fa      	ldr	r2, [r7, #28]
 8016a5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016a60:	f7ff febc 	bl	80167dc <MADD64>
 8016a64:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016a68:	6a3b      	ldr	r3, [r7, #32]
 8016a6a:	425b      	negs	r3, r3
 8016a6c:	69ba      	ldr	r2, [r7, #24]
 8016a6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016a72:	f7ff feb3 	bl	80167dc <MADD64>
 8016a76:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC0M(6)
 8016a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8016a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a82:	3304      	adds	r3, #4
 8016a84:	643b      	str	r3, [r7, #64]	; 0x40
 8016a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	623b      	str	r3, [r7, #32]
 8016a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a8e:	3304      	adds	r3, #4
 8016a90:	643b      	str	r3, [r7, #64]	; 0x40
 8016a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a94:	699b      	ldr	r3, [r3, #24]
 8016a96:	61fb      	str	r3, [r7, #28]
 8016a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a9c:	61bb      	str	r3, [r7, #24]
 8016a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa0:	69fa      	ldr	r2, [r7, #28]
 8016aa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016aa6:	f7ff fe99 	bl	80167dc <MADD64>
 8016aaa:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016aae:	6a3b      	ldr	r3, [r7, #32]
 8016ab0:	425b      	negs	r3, r3
 8016ab2:	69ba      	ldr	r2, [r7, #24]
 8016ab4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016ab8:	f7ff fe90 	bl	80167dc <MADD64>
 8016abc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC0M(7)
 8016ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8016ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ac8:	3304      	adds	r3, #4
 8016aca:	643b      	str	r3, [r7, #64]	; 0x40
 8016acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	623b      	str	r3, [r7, #32]
 8016ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ad4:	3304      	adds	r3, #4
 8016ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8016ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ada:	69db      	ldr	r3, [r3, #28]
 8016adc:	61fb      	str	r3, [r7, #28]
 8016ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ae2:	61bb      	str	r3, [r7, #24]
 8016ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae6:	69fa      	ldr	r2, [r7, #28]
 8016ae8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016aec:	f7ff fe76 	bl	80167dc <MADD64>
 8016af0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016af4:	6a3b      	ldr	r3, [r7, #32]
 8016af6:	425b      	negs	r3, r3
 8016af8:	69ba      	ldr	r2, [r7, #24]
 8016afa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016afe:	f7ff fe6d 	bl	80167dc <MADD64>
 8016b02:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 8016b06:	2214      	movs	r2, #20
 8016b08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016b0c:	f7ff fe91 	bl	8016832 <SAR64>
 8016b10:	4602      	mov	r2, r0
 8016b12:	460b      	mov	r3, r1
 8016b14:	4613      	mov	r3, r2
 8016b16:	2106      	movs	r1, #6
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f7ff fea9 	bl	8016870 <ClipToShort>
 8016b1e:	4603      	mov	r3, r0
 8016b20:	461a      	mov	r2, r3
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	801a      	strh	r2, [r3, #0]

	/* special case, output sample 16 */
	coef = coefBase + 256;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016b2c:	643b      	str	r3, [r7, #64]	; 0x40
	vb1 = vbuf + 64*16;
 8016b2e:	68bb      	ldr	r3, [r7, #8]
 8016b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b34:	63fb      	str	r3, [r7, #60]	; 0x3c
	sum1L = rndVal;
 8016b36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016b3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	MC1M(0)
 8016b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	627b      	str	r3, [r7, #36]	; 0x24
 8016b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b46:	3304      	adds	r3, #4
 8016b48:	643b      	str	r3, [r7, #64]	; 0x40
 8016b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	61fb      	str	r3, [r7, #28]
 8016b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b52:	69fa      	ldr	r2, [r7, #28]
 8016b54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016b58:	f7ff fe40 	bl	80167dc <MADD64>
 8016b5c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC1M(1)
 8016b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	627b      	str	r3, [r7, #36]	; 0x24
 8016b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b68:	3304      	adds	r3, #4
 8016b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8016b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b6e:	685b      	ldr	r3, [r3, #4]
 8016b70:	61fb      	str	r3, [r7, #28]
 8016b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b74:	69fa      	ldr	r2, [r7, #28]
 8016b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016b7a:	f7ff fe2f 	bl	80167dc <MADD64>
 8016b7e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC1M(2)
 8016b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	627b      	str	r3, [r7, #36]	; 0x24
 8016b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b8a:	3304      	adds	r3, #4
 8016b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8016b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b90:	689b      	ldr	r3, [r3, #8]
 8016b92:	61fb      	str	r3, [r7, #28]
 8016b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b96:	69fa      	ldr	r2, [r7, #28]
 8016b98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016b9c:	f7ff fe1e 	bl	80167dc <MADD64>
 8016ba0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC1M(3)
 8016ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8016baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bac:	3304      	adds	r3, #4
 8016bae:	643b      	str	r3, [r7, #64]	; 0x40
 8016bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bb2:	68db      	ldr	r3, [r3, #12]
 8016bb4:	61fb      	str	r3, [r7, #28]
 8016bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb8:	69fa      	ldr	r2, [r7, #28]
 8016bba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016bbe:	f7ff fe0d 	bl	80167dc <MADD64>
 8016bc2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC1M(4)
 8016bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	627b      	str	r3, [r7, #36]	; 0x24
 8016bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bce:	3304      	adds	r3, #4
 8016bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8016bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bd4:	691b      	ldr	r3, [r3, #16]
 8016bd6:	61fb      	str	r3, [r7, #28]
 8016bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bda:	69fa      	ldr	r2, [r7, #28]
 8016bdc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016be0:	f7ff fdfc 	bl	80167dc <MADD64>
 8016be4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC1M(5)
 8016be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	627b      	str	r3, [r7, #36]	; 0x24
 8016bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bf0:	3304      	adds	r3, #4
 8016bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8016bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bf6:	695b      	ldr	r3, [r3, #20]
 8016bf8:	61fb      	str	r3, [r7, #28]
 8016bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bfc:	69fa      	ldr	r2, [r7, #28]
 8016bfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016c02:	f7ff fdeb 	bl	80167dc <MADD64>
 8016c06:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC1M(6)
 8016c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8016c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c12:	3304      	adds	r3, #4
 8016c14:	643b      	str	r3, [r7, #64]	; 0x40
 8016c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c18:	699b      	ldr	r3, [r3, #24]
 8016c1a:	61fb      	str	r3, [r7, #28]
 8016c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1e:	69fa      	ldr	r2, [r7, #28]
 8016c20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016c24:	f7ff fdda 	bl	80167dc <MADD64>
 8016c28:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	MC1M(7)
 8016c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	627b      	str	r3, [r7, #36]	; 0x24
 8016c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c34:	3304      	adds	r3, #4
 8016c36:	643b      	str	r3, [r7, #64]	; 0x40
 8016c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c3a:	69db      	ldr	r3, [r3, #28]
 8016c3c:	61fb      	str	r3, [r7, #28]
 8016c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c40:	69fa      	ldr	r2, [r7, #28]
 8016c42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016c46:	f7ff fdc9 	bl	80167dc <MADD64>
 8016c4a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

	*(pcm + 16) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 8016c4e:	2214      	movs	r2, #20
 8016c50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016c54:	f7ff fded 	bl	8016832 <SAR64>
 8016c58:	4602      	mov	r2, r0
 8016c5a:	460b      	mov	r3, r1
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	f103 0420 	add.w	r4, r3, #32
 8016c62:	2106      	movs	r1, #6
 8016c64:	4610      	mov	r0, r2
 8016c66:	f7ff fe03 	bl	8016870 <ClipToShort>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	8023      	strh	r3, [r4, #0]

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	3340      	adds	r3, #64	; 0x40
 8016c72:	643b      	str	r3, [r7, #64]	; 0x40
	vb1 = vbuf + 64;
 8016c74:	68bb      	ldr	r3, [r7, #8]
 8016c76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	pcm++;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	3302      	adds	r3, #2
 8016c80:	60fb      	str	r3, [r7, #12]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 8016c82:	230f      	movs	r3, #15
 8016c84:	647b      	str	r3, [r7, #68]	; 0x44
 8016c86:	e1ca      	b.n	801701e <xmp3fixpt_PolyphaseMono+0x770>
		sum1L = sum2L = rndVal;
 8016c88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8016c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016c94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		MC2M(0)
 8016c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8016c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ca0:	3304      	adds	r3, #4
 8016ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8016ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	623b      	str	r3, [r7, #32]
 8016caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016cac:	3304      	adds	r3, #4
 8016cae:	643b      	str	r3, [r7, #64]	; 0x40
 8016cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	61fb      	str	r3, [r7, #28]
 8016cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cba:	61bb      	str	r3, [r7, #24]
 8016cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cbe:	69fa      	ldr	r2, [r7, #28]
 8016cc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016cc4:	f7ff fd8a 	bl	80167dc <MADD64>
 8016cc8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016ccc:	6a3b      	ldr	r3, [r7, #32]
 8016cce:	69fa      	ldr	r2, [r7, #28]
 8016cd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016cd4:	f7ff fd82 	bl	80167dc <MADD64>
 8016cd8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8016cdc:	6a3b      	ldr	r3, [r7, #32]
 8016cde:	425b      	negs	r3, r3
 8016ce0:	69ba      	ldr	r2, [r7, #24]
 8016ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016ce6:	f7ff fd79 	bl	80167dc <MADD64>
 8016cea:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf0:	69ba      	ldr	r2, [r7, #24]
 8016cf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016cf6:	f7ff fd71 	bl	80167dc <MADD64>
 8016cfa:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2M(1)
 8016cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	627b      	str	r3, [r7, #36]	; 0x24
 8016d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d06:	3304      	adds	r3, #4
 8016d08:	643b      	str	r3, [r7, #64]	; 0x40
 8016d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	623b      	str	r3, [r7, #32]
 8016d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d12:	3304      	adds	r3, #4
 8016d14:	643b      	str	r3, [r7, #64]	; 0x40
 8016d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	61fb      	str	r3, [r7, #28]
 8016d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d20:	61bb      	str	r3, [r7, #24]
 8016d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d24:	69fa      	ldr	r2, [r7, #28]
 8016d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016d2a:	f7ff fd57 	bl	80167dc <MADD64>
 8016d2e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016d32:	6a3b      	ldr	r3, [r7, #32]
 8016d34:	69fa      	ldr	r2, [r7, #28]
 8016d36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016d3a:	f7ff fd4f 	bl	80167dc <MADD64>
 8016d3e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8016d42:	6a3b      	ldr	r3, [r7, #32]
 8016d44:	425b      	negs	r3, r3
 8016d46:	69ba      	ldr	r2, [r7, #24]
 8016d48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016d4c:	f7ff fd46 	bl	80167dc <MADD64>
 8016d50:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d56:	69ba      	ldr	r2, [r7, #24]
 8016d58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016d5c:	f7ff fd3e 	bl	80167dc <MADD64>
 8016d60:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2M(2)
 8016d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	627b      	str	r3, [r7, #36]	; 0x24
 8016d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d6c:	3304      	adds	r3, #4
 8016d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8016d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	623b      	str	r3, [r7, #32]
 8016d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d78:	3304      	adds	r3, #4
 8016d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8016d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d7e:	689b      	ldr	r3, [r3, #8]
 8016d80:	61fb      	str	r3, [r7, #28]
 8016d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d86:	61bb      	str	r3, [r7, #24]
 8016d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d8a:	69fa      	ldr	r2, [r7, #28]
 8016d8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016d90:	f7ff fd24 	bl	80167dc <MADD64>
 8016d94:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016d98:	6a3b      	ldr	r3, [r7, #32]
 8016d9a:	69fa      	ldr	r2, [r7, #28]
 8016d9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016da0:	f7ff fd1c 	bl	80167dc <MADD64>
 8016da4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8016da8:	6a3b      	ldr	r3, [r7, #32]
 8016daa:	425b      	negs	r3, r3
 8016dac:	69ba      	ldr	r2, [r7, #24]
 8016dae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016db2:	f7ff fd13 	bl	80167dc <MADD64>
 8016db6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dbc:	69ba      	ldr	r2, [r7, #24]
 8016dbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016dc2:	f7ff fd0b 	bl	80167dc <MADD64>
 8016dc6:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2M(3)
 8016dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	627b      	str	r3, [r7, #36]	; 0x24
 8016dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016dd2:	3304      	adds	r3, #4
 8016dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8016dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	623b      	str	r3, [r7, #32]
 8016ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016dde:	3304      	adds	r3, #4
 8016de0:	643b      	str	r3, [r7, #64]	; 0x40
 8016de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016de4:	68db      	ldr	r3, [r3, #12]
 8016de6:	61fb      	str	r3, [r7, #28]
 8016de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016dec:	61bb      	str	r3, [r7, #24]
 8016dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df0:	69fa      	ldr	r2, [r7, #28]
 8016df2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016df6:	f7ff fcf1 	bl	80167dc <MADD64>
 8016dfa:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016dfe:	6a3b      	ldr	r3, [r7, #32]
 8016e00:	69fa      	ldr	r2, [r7, #28]
 8016e02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016e06:	f7ff fce9 	bl	80167dc <MADD64>
 8016e0a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8016e0e:	6a3b      	ldr	r3, [r7, #32]
 8016e10:	425b      	negs	r3, r3
 8016e12:	69ba      	ldr	r2, [r7, #24]
 8016e14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016e18:	f7ff fce0 	bl	80167dc <MADD64>
 8016e1c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e22:	69ba      	ldr	r2, [r7, #24]
 8016e24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016e28:	f7ff fcd8 	bl	80167dc <MADD64>
 8016e2c:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2M(4)
 8016e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	627b      	str	r3, [r7, #36]	; 0x24
 8016e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e38:	3304      	adds	r3, #4
 8016e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8016e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	623b      	str	r3, [r7, #32]
 8016e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e44:	3304      	adds	r3, #4
 8016e46:	643b      	str	r3, [r7, #64]	; 0x40
 8016e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e4a:	691b      	ldr	r3, [r3, #16]
 8016e4c:	61fb      	str	r3, [r7, #28]
 8016e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016e52:	61bb      	str	r3, [r7, #24]
 8016e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e56:	69fa      	ldr	r2, [r7, #28]
 8016e58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016e5c:	f7ff fcbe 	bl	80167dc <MADD64>
 8016e60:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016e64:	6a3b      	ldr	r3, [r7, #32]
 8016e66:	69fa      	ldr	r2, [r7, #28]
 8016e68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016e6c:	f7ff fcb6 	bl	80167dc <MADD64>
 8016e70:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8016e74:	6a3b      	ldr	r3, [r7, #32]
 8016e76:	425b      	negs	r3, r3
 8016e78:	69ba      	ldr	r2, [r7, #24]
 8016e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016e7e:	f7ff fcad 	bl	80167dc <MADD64>
 8016e82:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e88:	69ba      	ldr	r2, [r7, #24]
 8016e8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016e8e:	f7ff fca5 	bl	80167dc <MADD64>
 8016e92:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2M(5)
 8016e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8016e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e9e:	3304      	adds	r3, #4
 8016ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8016ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	623b      	str	r3, [r7, #32]
 8016ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016eaa:	3304      	adds	r3, #4
 8016eac:	643b      	str	r3, [r7, #64]	; 0x40
 8016eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016eb0:	695b      	ldr	r3, [r3, #20]
 8016eb2:	61fb      	str	r3, [r7, #28]
 8016eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016eb8:	61bb      	str	r3, [r7, #24]
 8016eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ebc:	69fa      	ldr	r2, [r7, #28]
 8016ebe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016ec2:	f7ff fc8b 	bl	80167dc <MADD64>
 8016ec6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016eca:	6a3b      	ldr	r3, [r7, #32]
 8016ecc:	69fa      	ldr	r2, [r7, #28]
 8016ece:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016ed2:	f7ff fc83 	bl	80167dc <MADD64>
 8016ed6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8016eda:	6a3b      	ldr	r3, [r7, #32]
 8016edc:	425b      	negs	r3, r3
 8016ede:	69ba      	ldr	r2, [r7, #24]
 8016ee0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016ee4:	f7ff fc7a 	bl	80167dc <MADD64>
 8016ee8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eee:	69ba      	ldr	r2, [r7, #24]
 8016ef0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016ef4:	f7ff fc72 	bl	80167dc <MADD64>
 8016ef8:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2M(6)
 8016efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	627b      	str	r3, [r7, #36]	; 0x24
 8016f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f04:	3304      	adds	r3, #4
 8016f06:	643b      	str	r3, [r7, #64]	; 0x40
 8016f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	623b      	str	r3, [r7, #32]
 8016f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f10:	3304      	adds	r3, #4
 8016f12:	643b      	str	r3, [r7, #64]	; 0x40
 8016f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f16:	699b      	ldr	r3, [r3, #24]
 8016f18:	61fb      	str	r3, [r7, #28]
 8016f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f1e:	61bb      	str	r3, [r7, #24]
 8016f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f22:	69fa      	ldr	r2, [r7, #28]
 8016f24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016f28:	f7ff fc58 	bl	80167dc <MADD64>
 8016f2c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016f30:	6a3b      	ldr	r3, [r7, #32]
 8016f32:	69fa      	ldr	r2, [r7, #28]
 8016f34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016f38:	f7ff fc50 	bl	80167dc <MADD64>
 8016f3c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8016f40:	6a3b      	ldr	r3, [r7, #32]
 8016f42:	425b      	negs	r3, r3
 8016f44:	69ba      	ldr	r2, [r7, #24]
 8016f46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016f4a:	f7ff fc47 	bl	80167dc <MADD64>
 8016f4e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f54:	69ba      	ldr	r2, [r7, #24]
 8016f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016f5a:	f7ff fc3f 	bl	80167dc <MADD64>
 8016f5e:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2M(7)
 8016f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	627b      	str	r3, [r7, #36]	; 0x24
 8016f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f6a:	3304      	adds	r3, #4
 8016f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8016f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	623b      	str	r3, [r7, #32]
 8016f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f76:	3304      	adds	r3, #4
 8016f78:	643b      	str	r3, [r7, #64]	; 0x40
 8016f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f7c:	69db      	ldr	r3, [r3, #28]
 8016f7e:	61fb      	str	r3, [r7, #28]
 8016f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f84:	61bb      	str	r3, [r7, #24]
 8016f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f88:	69fa      	ldr	r2, [r7, #28]
 8016f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016f8e:	f7ff fc25 	bl	80167dc <MADD64>
 8016f92:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016f96:	6a3b      	ldr	r3, [r7, #32]
 8016f98:	69fa      	ldr	r2, [r7, #28]
 8016f9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016f9e:	f7ff fc1d 	bl	80167dc <MADD64>
 8016fa2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8016fa6:	6a3b      	ldr	r3, [r7, #32]
 8016fa8:	425b      	negs	r3, r3
 8016faa:	69ba      	ldr	r2, [r7, #24]
 8016fac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016fb0:	f7ff fc14 	bl	80167dc <MADD64>
 8016fb4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8016fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fba:	69ba      	ldr	r2, [r7, #24]
 8016fbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016fc0:	f7ff fc0c 	bl	80167dc <MADD64>
 8016fc4:	e9c7 0104 	strd	r0, r1, [r7, #16]

		vb1 += 64;
 8016fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016fce:	63fb      	str	r3, [r7, #60]	; 0x3c
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 8016fd0:	2214      	movs	r2, #20
 8016fd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016fd6:	f7ff fc2c 	bl	8016832 <SAR64>
 8016fda:	4602      	mov	r2, r0
 8016fdc:	460b      	mov	r3, r1
 8016fde:	4613      	mov	r3, r2
 8016fe0:	2106      	movs	r1, #6
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7ff fc44 	bl	8016870 <ClipToShort>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	461a      	mov	r2, r3
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	801a      	strh	r2, [r3, #0]
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 8016ff0:	2214      	movs	r2, #20
 8016ff2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016ff6:	f7ff fc1c 	bl	8016832 <SAR64>
 8016ffa:	4602      	mov	r2, r0
 8016ffc:	460b      	mov	r3, r1
 8016ffe:	4610      	mov	r0, r2
 8017000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017002:	009b      	lsls	r3, r3, #2
 8017004:	68fa      	ldr	r2, [r7, #12]
 8017006:	18d4      	adds	r4, r2, r3
 8017008:	2106      	movs	r1, #6
 801700a:	f7ff fc31 	bl	8016870 <ClipToShort>
 801700e:	4603      	mov	r3, r0
 8017010:	8023      	strh	r3, [r4, #0]
		pcm++;
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	3302      	adds	r3, #2
 8017016:	60fb      	str	r3, [r7, #12]
	for (i = 15; i > 0; i--) {
 8017018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801701a:	3b01      	subs	r3, #1
 801701c:	647b      	str	r3, [r7, #68]	; 0x44
 801701e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017020:	2b00      	cmp	r3, #0
 8017022:	f73f ae31 	bgt.w	8016c88 <xmp3fixpt_PolyphaseMono+0x3da>
	}
}
 8017026:	bf00      	nop
 8017028:	bf00      	nop
 801702a:	374c      	adds	r7, #76	; 0x4c
 801702c:	46bd      	mov	sp, r7
 801702e:	bd90      	pop	{r4, r7, pc}

08017030 <xmp3fixpt_PolyphaseStereo>:
 * Notes:       interleaves PCM samples LRLRLR...
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 **************************************************************************************/
void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
{
 8017030:	b590      	push	{r4, r7, lr}
 8017032:	b097      	sub	sp, #92	; 0x5c
 8017034:	af00      	add	r7, sp, #0
 8017036:	60f8      	str	r0, [r7, #12]
 8017038:	60b9      	str	r1, [r7, #8]
 801703a:	607a      	str	r2, [r7, #4]
	const int *coef;
	int *vb1;
	int vLo, vHi, c1, c2;
	Word64 sum1L, sum2L, sum1R, sum2R, rndVal;

	rndVal = (Word64)( 1 << (DEF_NFRACBITS - 1 + (32 - CSHIFT)) );
 801703c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8017040:	f04f 0300 	mov.w	r3, #0
 8017044:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	/* special case, output sample 0 */
	coef = coefBase;
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	653b      	str	r3, [r7, #80]	; 0x50
	vb1 = vbuf;
 801704c:	68bb      	ldr	r3, [r7, #8]
 801704e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sum1L = sum1R = rndVal;
 8017050:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017054:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8017058:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801705c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	MC0S(0)
 8017060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017068:	3304      	adds	r3, #4
 801706a:	653b      	str	r3, [r7, #80]	; 0x50
 801706c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	62bb      	str	r3, [r7, #40]	; 0x28
 8017072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017074:	3304      	adds	r3, #4
 8017076:	653b      	str	r3, [r7, #80]	; 0x50
 8017078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	627b      	str	r3, [r7, #36]	; 0x24
 801707e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017082:	623b      	str	r3, [r7, #32]
 8017084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017088:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801708c:	f7ff fba6 	bl	80167dc <MADD64>
 8017090:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017096:	425b      	negs	r3, r3
 8017098:	6a3a      	ldr	r2, [r7, #32]
 801709a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801709e:	f7ff fb9d 	bl	80167dc <MADD64>
 80170a2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80170a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80170ac:	627b      	str	r3, [r7, #36]	; 0x24
 80170ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80170b4:	623b      	str	r3, [r7, #32]
 80170b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80170be:	f7ff fb8d 	bl	80167dc <MADD64>
 80170c2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80170c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c8:	425b      	negs	r3, r3
 80170ca:	6a3a      	ldr	r2, [r7, #32]
 80170cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80170d0:	f7ff fb84 	bl	80167dc <MADD64>
 80170d4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC0S(1)
 80170d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80170de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170e0:	3304      	adds	r3, #4
 80170e2:	653b      	str	r3, [r7, #80]	; 0x50
 80170e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80170ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170ec:	3304      	adds	r3, #4
 80170ee:	653b      	str	r3, [r7, #80]	; 0x50
 80170f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	627b      	str	r3, [r7, #36]	; 0x24
 80170f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80170fa:	623b      	str	r3, [r7, #32]
 80170fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017100:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017104:	f7ff fb6a 	bl	80167dc <MADD64>
 8017108:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801710e:	425b      	negs	r3, r3
 8017110:	6a3a      	ldr	r2, [r7, #32]
 8017112:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017116:	f7ff fb61 	bl	80167dc <MADD64>
 801711a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801711e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017124:	627b      	str	r3, [r7, #36]	; 0x24
 8017126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801712c:	623b      	str	r3, [r7, #32]
 801712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017132:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017136:	f7ff fb51 	bl	80167dc <MADD64>
 801713a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 801713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017140:	425b      	negs	r3, r3
 8017142:	6a3a      	ldr	r2, [r7, #32]
 8017144:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017148:	f7ff fb48 	bl	80167dc <MADD64>
 801714c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC0S(2)
 8017150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017158:	3304      	adds	r3, #4
 801715a:	653b      	str	r3, [r7, #80]	; 0x50
 801715c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	62bb      	str	r3, [r7, #40]	; 0x28
 8017162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017164:	3304      	adds	r3, #4
 8017166:	653b      	str	r3, [r7, #80]	; 0x50
 8017168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801716a:	689b      	ldr	r3, [r3, #8]
 801716c:	627b      	str	r3, [r7, #36]	; 0x24
 801716e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017172:	623b      	str	r3, [r7, #32]
 8017174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017178:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801717c:	f7ff fb2e 	bl	80167dc <MADD64>
 8017180:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017186:	425b      	negs	r3, r3
 8017188:	6a3a      	ldr	r2, [r7, #32]
 801718a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801718e:	f7ff fb25 	bl	80167dc <MADD64>
 8017192:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801719c:	627b      	str	r3, [r7, #36]	; 0x24
 801719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80171a4:	623b      	str	r3, [r7, #32]
 80171a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80171ae:	f7ff fb15 	bl	80167dc <MADD64>
 80171b2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80171b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b8:	425b      	negs	r3, r3
 80171ba:	6a3a      	ldr	r2, [r7, #32]
 80171bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80171c0:	f7ff fb0c 	bl	80167dc <MADD64>
 80171c4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC0S(3)
 80171c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171d0:	3304      	adds	r3, #4
 80171d2:	653b      	str	r3, [r7, #80]	; 0x50
 80171d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80171da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171dc:	3304      	adds	r3, #4
 80171de:	653b      	str	r3, [r7, #80]	; 0x50
 80171e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171e2:	68db      	ldr	r3, [r3, #12]
 80171e4:	627b      	str	r3, [r7, #36]	; 0x24
 80171e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171ea:	623b      	str	r3, [r7, #32]
 80171ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80171f4:	f7ff faf2 	bl	80167dc <MADD64>
 80171f8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80171fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171fe:	425b      	negs	r3, r3
 8017200:	6a3a      	ldr	r2, [r7, #32]
 8017202:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017206:	f7ff fae9 	bl	80167dc <MADD64>
 801720a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801720e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017214:	627b      	str	r3, [r7, #36]	; 0x24
 8017216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017218:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801721c:	623b      	str	r3, [r7, #32]
 801721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017222:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017226:	f7ff fad9 	bl	80167dc <MADD64>
 801722a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 801722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017230:	425b      	negs	r3, r3
 8017232:	6a3a      	ldr	r2, [r7, #32]
 8017234:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017238:	f7ff fad0 	bl	80167dc <MADD64>
 801723c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC0S(4)
 8017240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017248:	3304      	adds	r3, #4
 801724a:	653b      	str	r3, [r7, #80]	; 0x50
 801724c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	62bb      	str	r3, [r7, #40]	; 0x28
 8017252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017254:	3304      	adds	r3, #4
 8017256:	653b      	str	r3, [r7, #80]	; 0x50
 8017258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801725a:	691b      	ldr	r3, [r3, #16]
 801725c:	627b      	str	r3, [r7, #36]	; 0x24
 801725e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017262:	623b      	str	r3, [r7, #32]
 8017264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017268:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801726c:	f7ff fab6 	bl	80167dc <MADD64>
 8017270:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017276:	425b      	negs	r3, r3
 8017278:	6a3a      	ldr	r2, [r7, #32]
 801727a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801727e:	f7ff faad 	bl	80167dc <MADD64>
 8017282:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801728c:	627b      	str	r3, [r7, #36]	; 0x24
 801728e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017290:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017294:	623b      	str	r3, [r7, #32]
 8017296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801729a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801729e:	f7ff fa9d 	bl	80167dc <MADD64>
 80172a2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80172a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172a8:	425b      	negs	r3, r3
 80172aa:	6a3a      	ldr	r2, [r7, #32]
 80172ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80172b0:	f7ff fa94 	bl	80167dc <MADD64>
 80172b4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC0S(5)
 80172b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172c0:	3304      	adds	r3, #4
 80172c2:	653b      	str	r3, [r7, #80]	; 0x50
 80172c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80172ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172cc:	3304      	adds	r3, #4
 80172ce:	653b      	str	r3, [r7, #80]	; 0x50
 80172d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172d2:	695b      	ldr	r3, [r3, #20]
 80172d4:	627b      	str	r3, [r7, #36]	; 0x24
 80172d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80172da:	623b      	str	r3, [r7, #32]
 80172dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80172e4:	f7ff fa7a 	bl	80167dc <MADD64>
 80172e8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80172ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ee:	425b      	negs	r3, r3
 80172f0:	6a3a      	ldr	r2, [r7, #32]
 80172f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80172f6:	f7ff fa71 	bl	80167dc <MADD64>
 80172fa:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80172fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017304:	627b      	str	r3, [r7, #36]	; 0x24
 8017306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017308:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801730c:	623b      	str	r3, [r7, #32]
 801730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017312:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017316:	f7ff fa61 	bl	80167dc <MADD64>
 801731a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 801731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017320:	425b      	negs	r3, r3
 8017322:	6a3a      	ldr	r2, [r7, #32]
 8017324:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017328:	f7ff fa58 	bl	80167dc <MADD64>
 801732c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC0S(6)
 8017330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017338:	3304      	adds	r3, #4
 801733a:	653b      	str	r3, [r7, #80]	; 0x50
 801733c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	62bb      	str	r3, [r7, #40]	; 0x28
 8017342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017344:	3304      	adds	r3, #4
 8017346:	653b      	str	r3, [r7, #80]	; 0x50
 8017348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801734a:	699b      	ldr	r3, [r3, #24]
 801734c:	627b      	str	r3, [r7, #36]	; 0x24
 801734e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017352:	623b      	str	r3, [r7, #32]
 8017354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017358:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801735c:	f7ff fa3e 	bl	80167dc <MADD64>
 8017360:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017366:	425b      	negs	r3, r3
 8017368:	6a3a      	ldr	r2, [r7, #32]
 801736a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801736e:	f7ff fa35 	bl	80167dc <MADD64>
 8017372:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801737c:	627b      	str	r3, [r7, #36]	; 0x24
 801737e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017380:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017384:	623b      	str	r3, [r7, #32]
 8017386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801738a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801738e:	f7ff fa25 	bl	80167dc <MADD64>
 8017392:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017398:	425b      	negs	r3, r3
 801739a:	6a3a      	ldr	r2, [r7, #32]
 801739c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80173a0:	f7ff fa1c 	bl	80167dc <MADD64>
 80173a4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC0S(7)
 80173a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173b0:	3304      	adds	r3, #4
 80173b2:	653b      	str	r3, [r7, #80]	; 0x50
 80173b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80173ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173bc:	3304      	adds	r3, #4
 80173be:	653b      	str	r3, [r7, #80]	; 0x50
 80173c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173c2:	69db      	ldr	r3, [r3, #28]
 80173c4:	627b      	str	r3, [r7, #36]	; 0x24
 80173c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173ca:	623b      	str	r3, [r7, #32]
 80173cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80173d4:	f7ff fa02 	bl	80167dc <MADD64>
 80173d8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80173dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173de:	425b      	negs	r3, r3
 80173e0:	6a3a      	ldr	r2, [r7, #32]
 80173e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80173e6:	f7ff f9f9 	bl	80167dc <MADD64>
 80173ea:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80173ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80173f4:	627b      	str	r3, [r7, #36]	; 0x24
 80173f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80173fc:	623b      	str	r3, [r7, #32]
 80173fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017402:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017406:	f7ff f9e9 	bl	80167dc <MADD64>
 801740a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 801740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017410:	425b      	negs	r3, r3
 8017412:	6a3a      	ldr	r2, [r7, #32]
 8017414:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017418:	f7ff f9e0 	bl	80167dc <MADD64>
 801741c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 8017420:	2214      	movs	r2, #20
 8017422:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017426:	f7ff fa04 	bl	8016832 <SAR64>
 801742a:	4602      	mov	r2, r0
 801742c:	460b      	mov	r3, r1
 801742e:	4613      	mov	r3, r2
 8017430:	2106      	movs	r1, #6
 8017432:	4618      	mov	r0, r3
 8017434:	f7ff fa1c 	bl	8016870 <ClipToShort>
 8017438:	4603      	mov	r3, r0
 801743a:	461a      	mov	r2, r3
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	801a      	strh	r2, [r3, #0]
	*(pcm + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 8017440:	2214      	movs	r2, #20
 8017442:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017446:	f7ff f9f4 	bl	8016832 <SAR64>
 801744a:	4602      	mov	r2, r0
 801744c:	460b      	mov	r3, r1
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	1c9c      	adds	r4, r3, #2
 8017452:	2106      	movs	r1, #6
 8017454:	4610      	mov	r0, r2
 8017456:	f7ff fa0b 	bl	8016870 <ClipToShort>
 801745a:	4603      	mov	r3, r0
 801745c:	8023      	strh	r3, [r4, #0]

	/* special case, output sample 16 */
	coef = coefBase + 256;
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017464:	653b      	str	r3, [r7, #80]	; 0x50
	vb1 = vbuf + 64*16;
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801746c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sum1L = sum1R = rndVal;
 801746e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017472:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8017476:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801747a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	MC1S(0)
 801747e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017486:	3304      	adds	r3, #4
 8017488:	653b      	str	r3, [r7, #80]	; 0x50
 801748a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	627b      	str	r3, [r7, #36]	; 0x24
 8017490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017494:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017498:	f7ff f9a0 	bl	80167dc <MADD64>
 801749c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80174a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80174a6:	627b      	str	r3, [r7, #36]	; 0x24
 80174a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80174b0:	f7ff f994 	bl	80167dc <MADD64>
 80174b4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC1S(1)
 80174b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174c0:	3304      	adds	r3, #4
 80174c2:	653b      	str	r3, [r7, #80]	; 0x50
 80174c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174c6:	685b      	ldr	r3, [r3, #4]
 80174c8:	627b      	str	r3, [r7, #36]	; 0x24
 80174ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80174d2:	f7ff f983 	bl	80167dc <MADD64>
 80174d6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80174da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80174e0:	627b      	str	r3, [r7, #36]	; 0x24
 80174e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80174ea:	f7ff f977 	bl	80167dc <MADD64>
 80174ee:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC1S(2)
 80174f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174fa:	3304      	adds	r3, #4
 80174fc:	653b      	str	r3, [r7, #80]	; 0x50
 80174fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017500:	689b      	ldr	r3, [r3, #8]
 8017502:	627b      	str	r3, [r7, #36]	; 0x24
 8017504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017508:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801750c:	f7ff f966 	bl	80167dc <MADD64>
 8017510:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801751a:	627b      	str	r3, [r7, #36]	; 0x24
 801751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017520:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017524:	f7ff f95a 	bl	80167dc <MADD64>
 8017528:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC1S(3)
 801752c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017534:	3304      	adds	r3, #4
 8017536:	653b      	str	r3, [r7, #80]	; 0x50
 8017538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801753a:	68db      	ldr	r3, [r3, #12]
 801753c:	627b      	str	r3, [r7, #36]	; 0x24
 801753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017542:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017546:	f7ff f949 	bl	80167dc <MADD64>
 801754a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801754e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017554:	627b      	str	r3, [r7, #36]	; 0x24
 8017556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801755a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801755e:	f7ff f93d 	bl	80167dc <MADD64>
 8017562:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC1S(4)
 8017566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801756c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801756e:	3304      	adds	r3, #4
 8017570:	653b      	str	r3, [r7, #80]	; 0x50
 8017572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017574:	691b      	ldr	r3, [r3, #16]
 8017576:	627b      	str	r3, [r7, #36]	; 0x24
 8017578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801757a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801757c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017580:	f7ff f92c 	bl	80167dc <MADD64>
 8017584:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801758e:	627b      	str	r3, [r7, #36]	; 0x24
 8017590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017594:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017598:	f7ff f920 	bl	80167dc <MADD64>
 801759c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC1S(5)
 80175a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175a8:	3304      	adds	r3, #4
 80175aa:	653b      	str	r3, [r7, #80]	; 0x50
 80175ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175ae:	695b      	ldr	r3, [r3, #20]
 80175b0:	627b      	str	r3, [r7, #36]	; 0x24
 80175b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80175ba:	f7ff f90f 	bl	80167dc <MADD64>
 80175be:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80175c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80175c8:	627b      	str	r3, [r7, #36]	; 0x24
 80175ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80175d2:	f7ff f903 	bl	80167dc <MADD64>
 80175d6:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC1S(6)
 80175da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175e2:	3304      	adds	r3, #4
 80175e4:	653b      	str	r3, [r7, #80]	; 0x50
 80175e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175e8:	699b      	ldr	r3, [r3, #24]
 80175ea:	627b      	str	r3, [r7, #36]	; 0x24
 80175ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80175f4:	f7ff f8f2 	bl	80167dc <MADD64>
 80175f8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80175fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017602:	627b      	str	r3, [r7, #36]	; 0x24
 8017604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017608:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801760c:	f7ff f8e6 	bl	80167dc <MADD64>
 8017610:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	MC1S(7)
 8017614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	62fb      	str	r3, [r7, #44]	; 0x2c
 801761a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801761c:	3304      	adds	r3, #4
 801761e:	653b      	str	r3, [r7, #80]	; 0x50
 8017620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017622:	69db      	ldr	r3, [r3, #28]
 8017624:	627b      	str	r3, [r7, #36]	; 0x24
 8017626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801762a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801762e:	f7ff f8d5 	bl	80167dc <MADD64>
 8017632:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801763c:	627b      	str	r3, [r7, #36]	; 0x24
 801763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017642:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017646:	f7ff f8c9 	bl	80167dc <MADD64>
 801764a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

	*(pcm + 2*16 + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 801764e:	2214      	movs	r2, #20
 8017650:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017654:	f7ff f8ed 	bl	8016832 <SAR64>
 8017658:	4602      	mov	r2, r0
 801765a:	460b      	mov	r3, r1
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017662:	2106      	movs	r1, #6
 8017664:	4610      	mov	r0, r2
 8017666:	f7ff f903 	bl	8016870 <ClipToShort>
 801766a:	4603      	mov	r3, r0
 801766c:	8023      	strh	r3, [r4, #0]
	*(pcm + 2*16 + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 801766e:	2214      	movs	r2, #20
 8017670:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017674:	f7ff f8dd 	bl	8016832 <SAR64>
 8017678:	4602      	mov	r2, r0
 801767a:	460b      	mov	r3, r1
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	f103 0442 	add.w	r4, r3, #66	; 0x42
 8017682:	2106      	movs	r1, #6
 8017684:	4610      	mov	r0, r2
 8017686:	f7ff f8f3 	bl	8016870 <ClipToShort>
 801768a:	4603      	mov	r3, r0
 801768c:	8023      	strh	r3, [r4, #0]

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	3340      	adds	r3, #64	; 0x40
 8017692:	653b      	str	r3, [r7, #80]	; 0x50
	vb1 = vbuf + 64;
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801769a:	64fb      	str	r3, [r7, #76]	; 0x4c
	pcm += 2;
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	3304      	adds	r3, #4
 80176a0:	60fb      	str	r3, [r7, #12]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 80176a2:	230f      	movs	r3, #15
 80176a4:	657b      	str	r3, [r7, #84]	; 0x54
 80176a6:	e33b      	b.n	8017d20 <xmp3fixpt_PolyphaseStereo+0xcf0>
		sum1L = sum2L = rndVal;
 80176a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80176ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80176b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80176b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		sum1R = sum2R = rndVal;
 80176b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80176bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80176c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80176c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		MC2S(0)
 80176c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176d0:	3304      	adds	r3, #4
 80176d2:	653b      	str	r3, [r7, #80]	; 0x50
 80176d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80176da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176dc:	3304      	adds	r3, #4
 80176de:	653b      	str	r3, [r7, #80]	; 0x50
 80176e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	627b      	str	r3, [r7, #36]	; 0x24
 80176e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176ea:	623b      	str	r3, [r7, #32]
 80176ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80176f4:	f7ff f872 	bl	80167dc <MADD64>
 80176f8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80176fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017700:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017704:	f7ff f86a 	bl	80167dc <MADD64>
 8017708:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801770e:	425b      	negs	r3, r3
 8017710:	6a3a      	ldr	r2, [r7, #32]
 8017712:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017716:	f7ff f861 	bl	80167dc <MADD64>
 801771a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017720:	6a3a      	ldr	r2, [r7, #32]
 8017722:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017726:	f7ff f859 	bl	80167dc <MADD64>
 801772a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801772e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017734:	627b      	str	r3, [r7, #36]	; 0x24
 8017736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017738:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801773c:	623b      	str	r3, [r7, #32]
 801773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017742:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017746:	f7ff f849 	bl	80167dc <MADD64>
 801774a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 801774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017752:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017756:	f7ff f841 	bl	80167dc <MADD64>
 801775a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017760:	425b      	negs	r3, r3
 8017762:	6a3a      	ldr	r2, [r7, #32]
 8017764:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017768:	f7ff f838 	bl	80167dc <MADD64>
 801776c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017772:	6a3a      	ldr	r2, [r7, #32]
 8017774:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017778:	f7ff f830 	bl	80167dc <MADD64>
 801777c:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2S(1)
 8017780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017788:	3304      	adds	r3, #4
 801778a:	653b      	str	r3, [r7, #80]	; 0x50
 801778c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	62bb      	str	r3, [r7, #40]	; 0x28
 8017792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017794:	3304      	adds	r3, #4
 8017796:	653b      	str	r3, [r7, #80]	; 0x50
 8017798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801779a:	685b      	ldr	r3, [r3, #4]
 801779c:	627b      	str	r3, [r7, #36]	; 0x24
 801779e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177a2:	623b      	str	r3, [r7, #32]
 80177a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80177ac:	f7ff f816 	bl	80167dc <MADD64>
 80177b0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80177b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80177bc:	f7ff f80e 	bl	80167dc <MADD64>
 80177c0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80177c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177c6:	425b      	negs	r3, r3
 80177c8:	6a3a      	ldr	r2, [r7, #32]
 80177ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80177ce:	f7ff f805 	bl	80167dc <MADD64>
 80177d2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80177d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d8:	6a3a      	ldr	r2, [r7, #32]
 80177da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80177de:	f7fe fffd 	bl	80167dc <MADD64>
 80177e2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80177e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80177ec:	627b      	str	r3, [r7, #36]	; 0x24
 80177ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80177f4:	623b      	str	r3, [r7, #32]
 80177f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80177fe:	f7fe ffed 	bl	80167dc <MADD64>
 8017802:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801780a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801780e:	f7fe ffe5 	bl	80167dc <MADD64>
 8017812:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8017816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017818:	425b      	negs	r3, r3
 801781a:	6a3a      	ldr	r2, [r7, #32]
 801781c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017820:	f7fe ffdc 	bl	80167dc <MADD64>
 8017824:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801782a:	6a3a      	ldr	r2, [r7, #32]
 801782c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017830:	f7fe ffd4 	bl	80167dc <MADD64>
 8017834:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2S(2)
 8017838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801783e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017840:	3304      	adds	r3, #4
 8017842:	653b      	str	r3, [r7, #80]	; 0x50
 8017844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	62bb      	str	r3, [r7, #40]	; 0x28
 801784a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801784c:	3304      	adds	r3, #4
 801784e:	653b      	str	r3, [r7, #80]	; 0x50
 8017850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017852:	689b      	ldr	r3, [r3, #8]
 8017854:	627b      	str	r3, [r7, #36]	; 0x24
 8017856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801785a:	623b      	str	r3, [r7, #32]
 801785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801785e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017860:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017864:	f7fe ffba 	bl	80167dc <MADD64>
 8017868:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801786e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017870:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017874:	f7fe ffb2 	bl	80167dc <MADD64>
 8017878:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787e:	425b      	negs	r3, r3
 8017880:	6a3a      	ldr	r2, [r7, #32]
 8017882:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017886:	f7fe ffa9 	bl	80167dc <MADD64>
 801788a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017890:	6a3a      	ldr	r2, [r7, #32]
 8017892:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017896:	f7fe ffa1 	bl	80167dc <MADD64>
 801789a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801789e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80178a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80178a4:	627b      	str	r3, [r7, #36]	; 0x24
 80178a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80178a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80178ac:	623b      	str	r3, [r7, #32]
 80178ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80178b6:	f7fe ff91 	bl	80167dc <MADD64>
 80178ba:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80178be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80178c6:	f7fe ff89 	bl	80167dc <MADD64>
 80178ca:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80178ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d0:	425b      	negs	r3, r3
 80178d2:	6a3a      	ldr	r2, [r7, #32]
 80178d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80178d8:	f7fe ff80 	bl	80167dc <MADD64>
 80178dc:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80178e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178e2:	6a3a      	ldr	r2, [r7, #32]
 80178e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80178e8:	f7fe ff78 	bl	80167dc <MADD64>
 80178ec:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2S(3)
 80178f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80178f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178f8:	3304      	adds	r3, #4
 80178fa:	653b      	str	r3, [r7, #80]	; 0x50
 80178fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	62bb      	str	r3, [r7, #40]	; 0x28
 8017902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017904:	3304      	adds	r3, #4
 8017906:	653b      	str	r3, [r7, #80]	; 0x50
 8017908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801790a:	68db      	ldr	r3, [r3, #12]
 801790c:	627b      	str	r3, [r7, #36]	; 0x24
 801790e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017912:	623b      	str	r3, [r7, #32]
 8017914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017918:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801791c:	f7fe ff5e 	bl	80167dc <MADD64>
 8017920:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017928:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801792c:	f7fe ff56 	bl	80167dc <MADD64>
 8017930:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8017934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017936:	425b      	negs	r3, r3
 8017938:	6a3a      	ldr	r2, [r7, #32]
 801793a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801793e:	f7fe ff4d 	bl	80167dc <MADD64>
 8017942:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017948:	6a3a      	ldr	r2, [r7, #32]
 801794a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801794e:	f7fe ff45 	bl	80167dc <MADD64>
 8017952:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8017956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801795c:	627b      	str	r3, [r7, #36]	; 0x24
 801795e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017960:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8017964:	623b      	str	r3, [r7, #32]
 8017966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801796a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801796e:	f7fe ff35 	bl	80167dc <MADD64>
 8017972:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801797a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801797e:	f7fe ff2d 	bl	80167dc <MADD64>
 8017982:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8017986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017988:	425b      	negs	r3, r3
 801798a:	6a3a      	ldr	r2, [r7, #32]
 801798c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017990:	f7fe ff24 	bl	80167dc <MADD64>
 8017994:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801799a:	6a3a      	ldr	r2, [r7, #32]
 801799c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80179a0:	f7fe ff1c 	bl	80167dc <MADD64>
 80179a4:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2S(4)
 80179a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179b0:	3304      	adds	r3, #4
 80179b2:	653b      	str	r3, [r7, #80]	; 0x50
 80179b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80179ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179bc:	3304      	adds	r3, #4
 80179be:	653b      	str	r3, [r7, #80]	; 0x50
 80179c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80179c2:	691b      	ldr	r3, [r3, #16]
 80179c4:	627b      	str	r3, [r7, #36]	; 0x24
 80179c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80179c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80179ca:	623b      	str	r3, [r7, #32]
 80179cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80179d4:	f7fe ff02 	bl	80167dc <MADD64>
 80179d8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80179dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80179e4:	f7fe fefa 	bl	80167dc <MADD64>
 80179e8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80179ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ee:	425b      	negs	r3, r3
 80179f0:	6a3a      	ldr	r2, [r7, #32]
 80179f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80179f6:	f7fe fef1 	bl	80167dc <MADD64>
 80179fa:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80179fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a00:	6a3a      	ldr	r2, [r7, #32]
 8017a02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017a06:	f7fe fee9 	bl	80167dc <MADD64>
 8017a0a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8017a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a14:	627b      	str	r3, [r7, #36]	; 0x24
 8017a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a18:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017a1c:	623b      	str	r3, [r7, #32]
 8017a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017a26:	f7fe fed9 	bl	80167dc <MADD64>
 8017a2a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017a36:	f7fe fed1 	bl	80167dc <MADD64>
 8017a3a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8017a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a40:	425b      	negs	r3, r3
 8017a42:	6a3a      	ldr	r2, [r7, #32]
 8017a44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017a48:	f7fe fec8 	bl	80167dc <MADD64>
 8017a4c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a52:	6a3a      	ldr	r2, [r7, #32]
 8017a54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017a58:	f7fe fec0 	bl	80167dc <MADD64>
 8017a5c:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2S(5)
 8017a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a68:	3304      	adds	r3, #4
 8017a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8017a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8017a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a74:	3304      	adds	r3, #4
 8017a76:	653b      	str	r3, [r7, #80]	; 0x50
 8017a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a7a:	695b      	ldr	r3, [r3, #20]
 8017a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8017a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a82:	623b      	str	r3, [r7, #32]
 8017a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a88:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017a8c:	f7fe fea6 	bl	80167dc <MADD64>
 8017a90:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017a9c:	f7fe fe9e 	bl	80167dc <MADD64>
 8017aa0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8017aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aa6:	425b      	negs	r3, r3
 8017aa8:	6a3a      	ldr	r2, [r7, #32]
 8017aaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017aae:	f7fe fe95 	bl	80167dc <MADD64>
 8017ab2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ab8:	6a3a      	ldr	r2, [r7, #32]
 8017aba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017abe:	f7fe fe8d 	bl	80167dc <MADD64>
 8017ac2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8017ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017acc:	627b      	str	r3, [r7, #36]	; 0x24
 8017ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ad0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017ad4:	623b      	str	r3, [r7, #32]
 8017ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ada:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017ade:	f7fe fe7d 	bl	80167dc <MADD64>
 8017ae2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017aea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017aee:	f7fe fe75 	bl	80167dc <MADD64>
 8017af2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8017af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017af8:	425b      	negs	r3, r3
 8017afa:	6a3a      	ldr	r2, [r7, #32]
 8017afc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017b00:	f7fe fe6c 	bl	80167dc <MADD64>
 8017b04:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b0a:	6a3a      	ldr	r2, [r7, #32]
 8017b0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017b10:	f7fe fe64 	bl	80167dc <MADD64>
 8017b14:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2S(6)
 8017b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b20:	3304      	adds	r3, #4
 8017b22:	653b      	str	r3, [r7, #80]	; 0x50
 8017b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b2c:	3304      	adds	r3, #4
 8017b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8017b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b32:	699b      	ldr	r3, [r3, #24]
 8017b34:	627b      	str	r3, [r7, #36]	; 0x24
 8017b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b3a:	623b      	str	r3, [r7, #32]
 8017b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017b44:	f7fe fe4a 	bl	80167dc <MADD64>
 8017b48:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017b54:	f7fe fe42 	bl	80167dc <MADD64>
 8017b58:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8017b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b5e:	425b      	negs	r3, r3
 8017b60:	6a3a      	ldr	r2, [r7, #32]
 8017b62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017b66:	f7fe fe39 	bl	80167dc <MADD64>
 8017b6a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b70:	6a3a      	ldr	r2, [r7, #32]
 8017b72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017b76:	f7fe fe31 	bl	80167dc <MADD64>
 8017b7a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8017b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017b84:	627b      	str	r3, [r7, #36]	; 0x24
 8017b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017b8c:	623b      	str	r3, [r7, #32]
 8017b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b92:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017b96:	f7fe fe21 	bl	80167dc <MADD64>
 8017b9a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ba2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017ba6:	f7fe fe19 	bl	80167dc <MADD64>
 8017baa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8017bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bb0:	425b      	negs	r3, r3
 8017bb2:	6a3a      	ldr	r2, [r7, #32]
 8017bb4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017bb8:	f7fe fe10 	bl	80167dc <MADD64>
 8017bbc:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bc2:	6a3a      	ldr	r2, [r7, #32]
 8017bc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017bc8:	f7fe fe08 	bl	80167dc <MADD64>
 8017bcc:	e9c7 0104 	strd	r0, r1, [r7, #16]
		MC2S(7)
 8017bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bd8:	3304      	adds	r3, #4
 8017bda:	653b      	str	r3, [r7, #80]	; 0x50
 8017bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8017be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017be4:	3304      	adds	r3, #4
 8017be6:	653b      	str	r3, [r7, #80]	; 0x50
 8017be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bea:	69db      	ldr	r3, [r3, #28]
 8017bec:	627b      	str	r3, [r7, #36]	; 0x24
 8017bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bf2:	623b      	str	r3, [r7, #32]
 8017bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bf8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017bfc:	f7fe fdee 	bl	80167dc <MADD64>
 8017c00:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017c0c:	f7fe fde6 	bl	80167dc <MADD64>
 8017c10:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8017c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c16:	425b      	negs	r3, r3
 8017c18:	6a3a      	ldr	r2, [r7, #32]
 8017c1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017c1e:	f7fe fddd 	bl	80167dc <MADD64>
 8017c22:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8017c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c28:	6a3a      	ldr	r2, [r7, #32]
 8017c2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017c2e:	f7fe fdd5 	bl	80167dc <MADD64>
 8017c32:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8017c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8017c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017c44:	623b      	str	r3, [r7, #32]
 8017c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017c4e:	f7fe fdc5 	bl	80167dc <MADD64>
 8017c52:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017c5e:	f7fe fdbd 	bl	80167dc <MADD64>
 8017c62:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8017c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c68:	425b      	negs	r3, r3
 8017c6a:	6a3a      	ldr	r2, [r7, #32]
 8017c6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017c70:	f7fe fdb4 	bl	80167dc <MADD64>
 8017c74:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8017c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c7a:	6a3a      	ldr	r2, [r7, #32]
 8017c7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017c80:	f7fe fdac 	bl	80167dc <MADD64>
 8017c84:	e9c7 0104 	strd	r0, r1, [r7, #16]

		vb1 += 64;
 8017c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c8a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
		*(pcm + 0)         = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 8017c90:	2214      	movs	r2, #20
 8017c92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017c96:	f7fe fdcc 	bl	8016832 <SAR64>
 8017c9a:	4602      	mov	r2, r0
 8017c9c:	460b      	mov	r3, r1
 8017c9e:	4613      	mov	r3, r2
 8017ca0:	2106      	movs	r1, #6
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7fe fde4 	bl	8016870 <ClipToShort>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	461a      	mov	r2, r3
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	801a      	strh	r2, [r3, #0]
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 8017cb0:	2214      	movs	r2, #20
 8017cb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8017cb6:	f7fe fdbc 	bl	8016832 <SAR64>
 8017cba:	4602      	mov	r2, r0
 8017cbc:	460b      	mov	r3, r1
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	1c9c      	adds	r4, r3, #2
 8017cc2:	2106      	movs	r1, #6
 8017cc4:	4610      	mov	r0, r2
 8017cc6:	f7fe fdd3 	bl	8016870 <ClipToShort>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	8023      	strh	r3, [r4, #0]
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 8017cce:	2214      	movs	r2, #20
 8017cd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017cd4:	f7fe fdad 	bl	8016832 <SAR64>
 8017cd8:	4602      	mov	r2, r0
 8017cda:	460b      	mov	r3, r1
 8017cdc:	4610      	mov	r0, r2
 8017cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ce0:	00db      	lsls	r3, r3, #3
 8017ce2:	68fa      	ldr	r2, [r7, #12]
 8017ce4:	18d4      	adds	r4, r2, r3
 8017ce6:	2106      	movs	r1, #6
 8017ce8:	f7fe fdc2 	bl	8016870 <ClipToShort>
 8017cec:	4603      	mov	r3, r0
 8017cee:	8023      	strh	r3, [r4, #0]
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
 8017cf0:	2214      	movs	r2, #20
 8017cf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017cf6:	f7fe fd9c 	bl	8016832 <SAR64>
 8017cfa:	4602      	mov	r2, r0
 8017cfc:	460b      	mov	r3, r1
 8017cfe:	4610      	mov	r0, r2
 8017d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d02:	00db      	lsls	r3, r3, #3
 8017d04:	3302      	adds	r3, #2
 8017d06:	68fa      	ldr	r2, [r7, #12]
 8017d08:	18d4      	adds	r4, r2, r3
 8017d0a:	2106      	movs	r1, #6
 8017d0c:	f7fe fdb0 	bl	8016870 <ClipToShort>
 8017d10:	4603      	mov	r3, r0
 8017d12:	8023      	strh	r3, [r4, #0]
		pcm += 2;
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	3304      	adds	r3, #4
 8017d18:	60fb      	str	r3, [r7, #12]
	for (i = 15; i > 0; i--) {
 8017d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d1c:	3b01      	subs	r3, #1
 8017d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8017d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	f73f acc0 	bgt.w	80176a8 <xmp3fixpt_PolyphaseStereo+0x678>
	}
}
 8017d28:	bf00      	nop
 8017d2a:	bf00      	nop
 8017d2c:	375c      	adds	r7, #92	; 0x5c
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd90      	pop	{r4, r7, pc}
	...

08017d34 <UnpackSFMPEG1>:
 *                so that we index through consectutive memory locations when unpacking 
 *                (make sure dequantizer follows same convention)
 *              Illegal Intensity Position = 7 (always) for MPEG1 scale factors
 **************************************************************************************/
static void UnpackSFMPEG1(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int *scfsi, int gr, ScaleFactorInfoSub *sfisGr0)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b088      	sub	sp, #32
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	60f8      	str	r0, [r7, #12]
 8017d3c:	60b9      	str	r1, [r7, #8]
 8017d3e:	607a      	str	r2, [r7, #4]
 8017d40:	603b      	str	r3, [r7, #0]
	int sfb;
	int slen0, slen1;
	
	/* these can be 0, so make sure GetBits(bsi, 0) returns 0 (no >> 32 or anything) */
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	68db      	ldr	r3, [r3, #12]
 8017d46:	4a9b      	ldr	r2, [pc, #620]	; (8017fb4 <UnpackSFMPEG1+0x280>)
 8017d48:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8017d4c:	61bb      	str	r3, [r7, #24]
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	68db      	ldr	r3, [r3, #12]
 8017d52:	4a98      	ldr	r2, [pc, #608]	; (8017fb4 <UnpackSFMPEG1+0x280>)
 8017d54:	005b      	lsls	r3, r3, #1
 8017d56:	4413      	add	r3, r2
 8017d58:	785b      	ldrb	r3, [r3, #1]
 8017d5a:	617b      	str	r3, [r7, #20]
	
	if (sis->blockType == 2) {
 8017d5c:	68bb      	ldr	r3, [r7, #8]
 8017d5e:	695b      	ldr	r3, [r3, #20]
 8017d60:	2b02      	cmp	r3, #2
 8017d62:	f040 8096 	bne.w	8017e92 <UnpackSFMPEG1+0x15e>
		/* short block, type 2 (implies winSwitchFlag == 1) */
		if (sis->mixedBlock) {          
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	699b      	ldr	r3, [r3, #24]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d016      	beq.n	8017d9c <UnpackSFMPEG1+0x68>
			/* do long block portion */
			for (sfb = 0; sfb < 8; sfb++)
 8017d6e:	2300      	movs	r3, #0
 8017d70:	61fb      	str	r3, [r7, #28]
 8017d72:	e00d      	b.n	8017d90 <UnpackSFMPEG1+0x5c>
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 8017d74:	69b9      	ldr	r1, [r7, #24]
 8017d76:	68f8      	ldr	r0, [r7, #12]
 8017d78:	f7fa f8ec 	bl	8011f54 <xmp3fixpt_GetBits>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	b2d9      	uxtb	r1, r3
 8017d80:	687a      	ldr	r2, [r7, #4]
 8017d82:	69fb      	ldr	r3, [r7, #28]
 8017d84:	4413      	add	r3, r2
 8017d86:	460a      	mov	r2, r1
 8017d88:	701a      	strb	r2, [r3, #0]
			for (sfb = 0; sfb < 8; sfb++)
 8017d8a:	69fb      	ldr	r3, [r7, #28]
 8017d8c:	3301      	adds	r3, #1
 8017d8e:	61fb      	str	r3, [r7, #28]
 8017d90:	69fb      	ldr	r3, [r7, #28]
 8017d92:	2b07      	cmp	r3, #7
 8017d94:	ddee      	ble.n	8017d74 <UnpackSFMPEG1+0x40>
			sfb = 3;
 8017d96:	2303      	movs	r3, #3
 8017d98:	61fb      	str	r3, [r7, #28]
 8017d9a:	e032      	b.n	8017e02 <UnpackSFMPEG1+0xce>
		} else {
			/* all short blocks */
			sfb = 0;
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	61fb      	str	r3, [r7, #28]
		}

		for (      ; sfb < 6; sfb++) {
 8017da0:	e02f      	b.n	8017e02 <UnpackSFMPEG1+0xce>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 8017da2:	69b9      	ldr	r1, [r7, #24]
 8017da4:	68f8      	ldr	r0, [r7, #12]
 8017da6:	f7fa f8d5 	bl	8011f54 <xmp3fixpt_GetBits>
 8017daa:	4603      	mov	r3, r0
 8017dac:	b2d8      	uxtb	r0, r3
 8017dae:	6879      	ldr	r1, [r7, #4]
 8017db0:	69fa      	ldr	r2, [r7, #28]
 8017db2:	4613      	mov	r3, r2
 8017db4:	005b      	lsls	r3, r3, #1
 8017db6:	4413      	add	r3, r2
 8017db8:	440b      	add	r3, r1
 8017dba:	3317      	adds	r3, #23
 8017dbc:	4602      	mov	r2, r0
 8017dbe:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 8017dc0:	69b9      	ldr	r1, [r7, #24]
 8017dc2:	68f8      	ldr	r0, [r7, #12]
 8017dc4:	f7fa f8c6 	bl	8011f54 <xmp3fixpt_GetBits>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	b2d8      	uxtb	r0, r3
 8017dcc:	6879      	ldr	r1, [r7, #4]
 8017dce:	69fa      	ldr	r2, [r7, #28]
 8017dd0:	4613      	mov	r3, r2
 8017dd2:	005b      	lsls	r3, r3, #1
 8017dd4:	4413      	add	r3, r2
 8017dd6:	440b      	add	r3, r1
 8017dd8:	3318      	adds	r3, #24
 8017dda:	4602      	mov	r2, r0
 8017ddc:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 8017dde:	69b9      	ldr	r1, [r7, #24]
 8017de0:	68f8      	ldr	r0, [r7, #12]
 8017de2:	f7fa f8b7 	bl	8011f54 <xmp3fixpt_GetBits>
 8017de6:	4603      	mov	r3, r0
 8017de8:	b2d8      	uxtb	r0, r3
 8017dea:	6879      	ldr	r1, [r7, #4]
 8017dec:	69fa      	ldr	r2, [r7, #28]
 8017dee:	4613      	mov	r3, r2
 8017df0:	005b      	lsls	r3, r3, #1
 8017df2:	4413      	add	r3, r2
 8017df4:	440b      	add	r3, r1
 8017df6:	3319      	adds	r3, #25
 8017df8:	4602      	mov	r2, r0
 8017dfa:	701a      	strb	r2, [r3, #0]
		for (      ; sfb < 6; sfb++) {
 8017dfc:	69fb      	ldr	r3, [r7, #28]
 8017dfe:	3301      	adds	r3, #1
 8017e00:	61fb      	str	r3, [r7, #28]
 8017e02:	69fb      	ldr	r3, [r7, #28]
 8017e04:	2b05      	cmp	r3, #5
 8017e06:	ddcc      	ble.n	8017da2 <UnpackSFMPEG1+0x6e>
		}

		for (      ; sfb < 12; sfb++) {
 8017e08:	e02f      	b.n	8017e6a <UnpackSFMPEG1+0x136>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 8017e0a:	6979      	ldr	r1, [r7, #20]
 8017e0c:	68f8      	ldr	r0, [r7, #12]
 8017e0e:	f7fa f8a1 	bl	8011f54 <xmp3fixpt_GetBits>
 8017e12:	4603      	mov	r3, r0
 8017e14:	b2d8      	uxtb	r0, r3
 8017e16:	6879      	ldr	r1, [r7, #4]
 8017e18:	69fa      	ldr	r2, [r7, #28]
 8017e1a:	4613      	mov	r3, r2
 8017e1c:	005b      	lsls	r3, r3, #1
 8017e1e:	4413      	add	r3, r2
 8017e20:	440b      	add	r3, r1
 8017e22:	3317      	adds	r3, #23
 8017e24:	4602      	mov	r2, r0
 8017e26:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8017e28:	6979      	ldr	r1, [r7, #20]
 8017e2a:	68f8      	ldr	r0, [r7, #12]
 8017e2c:	f7fa f892 	bl	8011f54 <xmp3fixpt_GetBits>
 8017e30:	4603      	mov	r3, r0
 8017e32:	b2d8      	uxtb	r0, r3
 8017e34:	6879      	ldr	r1, [r7, #4]
 8017e36:	69fa      	ldr	r2, [r7, #28]
 8017e38:	4613      	mov	r3, r2
 8017e3a:	005b      	lsls	r3, r3, #1
 8017e3c:	4413      	add	r3, r2
 8017e3e:	440b      	add	r3, r1
 8017e40:	3318      	adds	r3, #24
 8017e42:	4602      	mov	r2, r0
 8017e44:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 8017e46:	6979      	ldr	r1, [r7, #20]
 8017e48:	68f8      	ldr	r0, [r7, #12]
 8017e4a:	f7fa f883 	bl	8011f54 <xmp3fixpt_GetBits>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	b2d8      	uxtb	r0, r3
 8017e52:	6879      	ldr	r1, [r7, #4]
 8017e54:	69fa      	ldr	r2, [r7, #28]
 8017e56:	4613      	mov	r3, r2
 8017e58:	005b      	lsls	r3, r3, #1
 8017e5a:	4413      	add	r3, r2
 8017e5c:	440b      	add	r3, r1
 8017e5e:	3319      	adds	r3, #25
 8017e60:	4602      	mov	r2, r0
 8017e62:	701a      	strb	r2, [r3, #0]
		for (      ; sfb < 12; sfb++) {
 8017e64:	69fb      	ldr	r3, [r7, #28]
 8017e66:	3301      	adds	r3, #1
 8017e68:	61fb      	str	r3, [r7, #28]
 8017e6a:	69fb      	ldr	r3, [r7, #28]
 8017e6c:	2b0b      	cmp	r3, #11
 8017e6e:	ddcc      	ble.n	8017e0a <UnpackSFMPEG1+0xd6>
		}

		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2200      	movs	r2, #0
 8017e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8017e90:	e0d0      	b.n	8018034 <UnpackSFMPEG1+0x300>
	} else {
		/* long blocks, type 0, 1, or 3 */
		if(gr == 0) {
 8017e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d128      	bne.n	8017eea <UnpackSFMPEG1+0x1b6>
			/* first granule */
			for (sfb = 0;  sfb < 11; sfb++) 
 8017e98:	2300      	movs	r3, #0
 8017e9a:	61fb      	str	r3, [r7, #28]
 8017e9c:	e00d      	b.n	8017eba <UnpackSFMPEG1+0x186>
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8017e9e:	69b9      	ldr	r1, [r7, #24]
 8017ea0:	68f8      	ldr	r0, [r7, #12]
 8017ea2:	f7fa f857 	bl	8011f54 <xmp3fixpt_GetBits>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	b2d9      	uxtb	r1, r3
 8017eaa:	687a      	ldr	r2, [r7, #4]
 8017eac:	69fb      	ldr	r3, [r7, #28]
 8017eae:	4413      	add	r3, r2
 8017eb0:	460a      	mov	r2, r1
 8017eb2:	701a      	strb	r2, [r3, #0]
			for (sfb = 0;  sfb < 11; sfb++) 
 8017eb4:	69fb      	ldr	r3, [r7, #28]
 8017eb6:	3301      	adds	r3, #1
 8017eb8:	61fb      	str	r3, [r7, #28]
 8017eba:	69fb      	ldr	r3, [r7, #28]
 8017ebc:	2b0a      	cmp	r3, #10
 8017ebe:	ddee      	ble.n	8017e9e <UnpackSFMPEG1+0x16a>
			for (sfb = 11; sfb < 21; sfb++) 
 8017ec0:	230b      	movs	r3, #11
 8017ec2:	61fb      	str	r3, [r7, #28]
 8017ec4:	e00d      	b.n	8017ee2 <UnpackSFMPEG1+0x1ae>
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8017ec6:	6979      	ldr	r1, [r7, #20]
 8017ec8:	68f8      	ldr	r0, [r7, #12]
 8017eca:	f7fa f843 	bl	8011f54 <xmp3fixpt_GetBits>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	b2d9      	uxtb	r1, r3
 8017ed2:	687a      	ldr	r2, [r7, #4]
 8017ed4:	69fb      	ldr	r3, [r7, #28]
 8017ed6:	4413      	add	r3, r2
 8017ed8:	460a      	mov	r2, r1
 8017eda:	701a      	strb	r2, [r3, #0]
			for (sfb = 11; sfb < 21; sfb++) 
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	3301      	adds	r3, #1
 8017ee0:	61fb      	str	r3, [r7, #28]
 8017ee2:	69fb      	ldr	r3, [r7, #28]
 8017ee4:	2b14      	cmp	r3, #20
 8017ee6:	ddee      	ble.n	8017ec6 <UnpackSFMPEG1+0x192>
			return;
 8017ee8:	e0a4      	b.n	8018034 <UnpackSFMPEG1+0x300>
		} else {
			/* second granule
			 * scfsi: 0 = different scalefactors for each granule, 1 = copy sf's from granule 0 into granule 1 
			 * for block type == 2, scfsi is always 0
			 */
			sfb = 0;
 8017eea:	2300      	movs	r3, #0
 8017eec:	61fb      	str	r3, [r7, #28]
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d01e      	beq.n	8017f34 <UnpackSFMPEG1+0x200>
 8017ef6:	e00b      	b.n	8017f10 <UnpackSFMPEG1+0x1dc>
 8017ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017efa:	69fb      	ldr	r3, [r7, #28]
 8017efc:	4413      	add	r3, r2
 8017efe:	7819      	ldrb	r1, [r3, #0]
 8017f00:	687a      	ldr	r2, [r7, #4]
 8017f02:	69fb      	ldr	r3, [r7, #28]
 8017f04:	4413      	add	r3, r2
 8017f06:	460a      	mov	r2, r1
 8017f08:	701a      	strb	r2, [r3, #0]
 8017f0a:	69fb      	ldr	r3, [r7, #28]
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	61fb      	str	r3, [r7, #28]
 8017f10:	69fb      	ldr	r3, [r7, #28]
 8017f12:	2b05      	cmp	r3, #5
 8017f14:	ddf0      	ble.n	8017ef8 <UnpackSFMPEG1+0x1c4>
 8017f16:	e010      	b.n	8017f3a <UnpackSFMPEG1+0x206>
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8017f18:	69b9      	ldr	r1, [r7, #24]
 8017f1a:	68f8      	ldr	r0, [r7, #12]
 8017f1c:	f7fa f81a 	bl	8011f54 <xmp3fixpt_GetBits>
 8017f20:	4603      	mov	r3, r0
 8017f22:	b2d9      	uxtb	r1, r3
 8017f24:	687a      	ldr	r2, [r7, #4]
 8017f26:	69fb      	ldr	r3, [r7, #28]
 8017f28:	4413      	add	r3, r2
 8017f2a:	460a      	mov	r2, r1
 8017f2c:	701a      	strb	r2, [r3, #0]
 8017f2e:	69fb      	ldr	r3, [r7, #28]
 8017f30:	3301      	adds	r3, #1
 8017f32:	61fb      	str	r3, [r7, #28]
 8017f34:	69fb      	ldr	r3, [r7, #28]
 8017f36:	2b05      	cmp	r3, #5
 8017f38:	ddee      	ble.n	8017f18 <UnpackSFMPEG1+0x1e4>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	3304      	adds	r3, #4
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d01e      	beq.n	8017f82 <UnpackSFMPEG1+0x24e>
 8017f44:	e00b      	b.n	8017f5e <UnpackSFMPEG1+0x22a>
 8017f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	4413      	add	r3, r2
 8017f4c:	7819      	ldrb	r1, [r3, #0]
 8017f4e:	687a      	ldr	r2, [r7, #4]
 8017f50:	69fb      	ldr	r3, [r7, #28]
 8017f52:	4413      	add	r3, r2
 8017f54:	460a      	mov	r2, r1
 8017f56:	701a      	strb	r2, [r3, #0]
 8017f58:	69fb      	ldr	r3, [r7, #28]
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	61fb      	str	r3, [r7, #28]
 8017f5e:	69fb      	ldr	r3, [r7, #28]
 8017f60:	2b0a      	cmp	r3, #10
 8017f62:	ddf0      	ble.n	8017f46 <UnpackSFMPEG1+0x212>
 8017f64:	e010      	b.n	8017f88 <UnpackSFMPEG1+0x254>
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8017f66:	69b9      	ldr	r1, [r7, #24]
 8017f68:	68f8      	ldr	r0, [r7, #12]
 8017f6a:	f7f9 fff3 	bl	8011f54 <xmp3fixpt_GetBits>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	b2d9      	uxtb	r1, r3
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	69fb      	ldr	r3, [r7, #28]
 8017f76:	4413      	add	r3, r2
 8017f78:	460a      	mov	r2, r1
 8017f7a:	701a      	strb	r2, [r3, #0]
 8017f7c:	69fb      	ldr	r3, [r7, #28]
 8017f7e:	3301      	adds	r3, #1
 8017f80:	61fb      	str	r3, [r7, #28]
 8017f82:	69fb      	ldr	r3, [r7, #28]
 8017f84:	2b0a      	cmp	r3, #10
 8017f86:	ddee      	ble.n	8017f66 <UnpackSFMPEG1+0x232>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	3308      	adds	r3, #8
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d020      	beq.n	8017fd4 <UnpackSFMPEG1+0x2a0>
 8017f92:	e00b      	b.n	8017fac <UnpackSFMPEG1+0x278>
 8017f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f96:	69fb      	ldr	r3, [r7, #28]
 8017f98:	4413      	add	r3, r2
 8017f9a:	7819      	ldrb	r1, [r3, #0]
 8017f9c:	687a      	ldr	r2, [r7, #4]
 8017f9e:	69fb      	ldr	r3, [r7, #28]
 8017fa0:	4413      	add	r3, r2
 8017fa2:	460a      	mov	r2, r1
 8017fa4:	701a      	strb	r2, [r3, #0]
 8017fa6:	69fb      	ldr	r3, [r7, #28]
 8017fa8:	3301      	adds	r3, #1
 8017faa:	61fb      	str	r3, [r7, #28]
 8017fac:	69fb      	ldr	r3, [r7, #28]
 8017fae:	2b0f      	cmp	r3, #15
 8017fb0:	ddf0      	ble.n	8017f94 <UnpackSFMPEG1+0x260>
 8017fb2:	e012      	b.n	8017fda <UnpackSFMPEG1+0x2a6>
 8017fb4:	0802a2e0 	.word	0x0802a2e0
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8017fb8:	6979      	ldr	r1, [r7, #20]
 8017fba:	68f8      	ldr	r0, [r7, #12]
 8017fbc:	f7f9 ffca 	bl	8011f54 <xmp3fixpt_GetBits>
 8017fc0:	4603      	mov	r3, r0
 8017fc2:	b2d9      	uxtb	r1, r3
 8017fc4:	687a      	ldr	r2, [r7, #4]
 8017fc6:	69fb      	ldr	r3, [r7, #28]
 8017fc8:	4413      	add	r3, r2
 8017fca:	460a      	mov	r2, r1
 8017fcc:	701a      	strb	r2, [r3, #0]
 8017fce:	69fb      	ldr	r3, [r7, #28]
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	61fb      	str	r3, [r7, #28]
 8017fd4:	69fb      	ldr	r3, [r7, #28]
 8017fd6:	2b0f      	cmp	r3, #15
 8017fd8:	ddee      	ble.n	8017fb8 <UnpackSFMPEG1+0x284>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8017fda:	683b      	ldr	r3, [r7, #0]
 8017fdc:	330c      	adds	r3, #12
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d01e      	beq.n	8018022 <UnpackSFMPEG1+0x2ee>
 8017fe4:	e00b      	b.n	8017ffe <UnpackSFMPEG1+0x2ca>
 8017fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fe8:	69fb      	ldr	r3, [r7, #28]
 8017fea:	4413      	add	r3, r2
 8017fec:	7819      	ldrb	r1, [r3, #0]
 8017fee:	687a      	ldr	r2, [r7, #4]
 8017ff0:	69fb      	ldr	r3, [r7, #28]
 8017ff2:	4413      	add	r3, r2
 8017ff4:	460a      	mov	r2, r1
 8017ff6:	701a      	strb	r2, [r3, #0]
 8017ff8:	69fb      	ldr	r3, [r7, #28]
 8017ffa:	3301      	adds	r3, #1
 8017ffc:	61fb      	str	r3, [r7, #28]
 8017ffe:	69fb      	ldr	r3, [r7, #28]
 8018000:	2b14      	cmp	r3, #20
 8018002:	ddf0      	ble.n	8017fe6 <UnpackSFMPEG1+0x2b2>
 8018004:	e010      	b.n	8018028 <UnpackSFMPEG1+0x2f4>
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8018006:	6979      	ldr	r1, [r7, #20]
 8018008:	68f8      	ldr	r0, [r7, #12]
 801800a:	f7f9 ffa3 	bl	8011f54 <xmp3fixpt_GetBits>
 801800e:	4603      	mov	r3, r0
 8018010:	b2d9      	uxtb	r1, r3
 8018012:	687a      	ldr	r2, [r7, #4]
 8018014:	69fb      	ldr	r3, [r7, #28]
 8018016:	4413      	add	r3, r2
 8018018:	460a      	mov	r2, r1
 801801a:	701a      	strb	r2, [r3, #0]
 801801c:	69fb      	ldr	r3, [r7, #28]
 801801e:	3301      	adds	r3, #1
 8018020:	61fb      	str	r3, [r7, #28]
 8018022:	69fb      	ldr	r3, [r7, #28]
 8018024:	2b14      	cmp	r3, #20
 8018026:	ddee      	ble.n	8018006 <UnpackSFMPEG1+0x2d2>
		}
		/* last sf band not transmitted */
		sfis->l[21] = 0;
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	2200      	movs	r2, #0
 801802c:	755a      	strb	r2, [r3, #21]
		sfis->l[22] = 0;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	2200      	movs	r2, #0
 8018032:	759a      	strb	r2, [r3, #22]
	}
}
 8018034:	3720      	adds	r7, #32
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}
 801803a:	bf00      	nop

0801803c <UnpackSFMPEG2>:
 *
 * TODO:        optimize the / and % stuff (only do one divide, get modulo x 
 *                with (x / m) * m, etc.)
 **************************************************************************************/
static void UnpackSFMPEG2(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int gr, int ch, int modeExt, ScaleFactorJS *sfjs)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b096      	sub	sp, #88	; 0x58
 8018040:	af00      	add	r7, sp, #0
 8018042:	60f8      	str	r0, [r7, #12]
 8018044:	60b9      	str	r1, [r7, #8]
 8018046:	607a      	str	r2, [r7, #4]
 8018048:	603b      	str	r3, [r7, #0]

	int i, sfb, sfcIdx, btIdx, nrIdx, iipTest;
	int slen[4], nr[4];
	int sfCompress, preFlag, intensityScale;
	
	sfCompress = sis->sfCompress;
 801804a:	68bb      	ldr	r3, [r7, #8]
 801804c:	68db      	ldr	r3, [r3, #12]
 801804e:	63bb      	str	r3, [r7, #56]	; 0x38
	preFlag = 0;
 8018050:	2300      	movs	r3, #0
 8018052:	643b      	str	r3, [r7, #64]	; 0x40
	intensityScale = 0;
 8018054:	2300      	movs	r3, #0
 8018056:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* stereo mode bits (1 = on): bit 1 = mid-side on/off, bit 0 = intensity on/off */
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8018058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801805a:	f003 0301 	and.w	r3, r3, #1
 801805e:	2b00      	cmp	r3, #0
 8018060:	d002      	beq.n	8018068 <UnpackSFMPEG2+0x2c>
 8018062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018064:	2b01      	cmp	r3, #1
 8018066:	d073      	beq.n	8018150 <UnpackSFMPEG2+0x114>
		/* in other words: if ((modeExt & 0x01) == 0 || ch == 0) */
		if (sfCompress < 400) {
 8018068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801806a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801806e:	da21      	bge.n	80180b4 <UnpackSFMPEG2+0x78>
			/* max slen = floor[(399/16) / 5] = 4 */
			slen[0] = (sfCompress >> 4) / 5;
 8018070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018072:	111b      	asrs	r3, r3, #4
 8018074:	4aa5      	ldr	r2, [pc, #660]	; (801830c <UnpackSFMPEG2+0x2d0>)
 8018076:	fb82 1203 	smull	r1, r2, r2, r3
 801807a:	1052      	asrs	r2, r2, #1
 801807c:	17db      	asrs	r3, r3, #31
 801807e:	1ad3      	subs	r3, r2, r3
 8018080:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1]= (sfCompress >> 4) % 5;
 8018082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018084:	1119      	asrs	r1, r3, #4
 8018086:	4ba1      	ldr	r3, [pc, #644]	; (801830c <UnpackSFMPEG2+0x2d0>)
 8018088:	fb83 2301 	smull	r2, r3, r3, r1
 801808c:	105a      	asrs	r2, r3, #1
 801808e:	17cb      	asrs	r3, r1, #31
 8018090:	1ad2      	subs	r2, r2, r3
 8018092:	4613      	mov	r3, r2
 8018094:	009b      	lsls	r3, r3, #2
 8018096:	4413      	add	r3, r2
 8018098:	1aca      	subs	r2, r1, r3
 801809a:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2]= (sfCompress & 0x0f) >> 2;
 801809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801809e:	109b      	asrs	r3, r3, #2
 80180a0:	f003 0303 	and.w	r3, r3, #3
 80180a4:	62fb      	str	r3, [r7, #44]	; 0x2c
			slen[3]= (sfCompress & 0x03);
 80180a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180a8:	f003 0303 	and.w	r3, r3, #3
 80180ac:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 0;
 80180ae:	2300      	movs	r3, #0
 80180b0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (sfCompress < 400) {
 80180b2:	e0c1      	b.n	8018238 <UnpackSFMPEG2+0x1fc>
		} else if (sfCompress < 500) {
 80180b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80180ba:	da22      	bge.n	8018102 <UnpackSFMPEG2+0xc6>
			/* max slen = floor[(99/4) / 5] = 4 */
			sfCompress -= 400;
 80180bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80180c2:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = (sfCompress >> 2) / 5;
 80180c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180c6:	109b      	asrs	r3, r3, #2
 80180c8:	4a90      	ldr	r2, [pc, #576]	; (801830c <UnpackSFMPEG2+0x2d0>)
 80180ca:	fb82 1203 	smull	r1, r2, r2, r3
 80180ce:	1052      	asrs	r2, r2, #1
 80180d0:	17db      	asrs	r3, r3, #31
 80180d2:	1ad3      	subs	r3, r2, r3
 80180d4:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1]= (sfCompress >> 2) % 5;
 80180d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d8:	1099      	asrs	r1, r3, #2
 80180da:	4b8c      	ldr	r3, [pc, #560]	; (801830c <UnpackSFMPEG2+0x2d0>)
 80180dc:	fb83 2301 	smull	r2, r3, r3, r1
 80180e0:	105a      	asrs	r2, r3, #1
 80180e2:	17cb      	asrs	r3, r1, #31
 80180e4:	1ad2      	subs	r2, r2, r3
 80180e6:	4613      	mov	r3, r2
 80180e8:	009b      	lsls	r3, r3, #2
 80180ea:	4413      	add	r3, r2
 80180ec:	1aca      	subs	r2, r1, r3
 80180ee:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2]= (sfCompress & 0x03);
 80180f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180f2:	f003 0303 	and.w	r3, r3, #3
 80180f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			slen[3]= 0;
 80180f8:	2300      	movs	r3, #0
 80180fa:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 1;
 80180fc:	2301      	movs	r3, #1
 80180fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (sfCompress < 400) {
 8018100:	e09a      	b.n	8018238 <UnpackSFMPEG2+0x1fc>
		} else {
			/* max slen = floor[11/3] = 3 (sfCompress = 9 bits in MPEG2) */
			sfCompress -= 500;
 8018102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018104:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8018108:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = sfCompress / 3;
 801810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801810c:	4a80      	ldr	r2, [pc, #512]	; (8018310 <UnpackSFMPEG2+0x2d4>)
 801810e:	fb82 1203 	smull	r1, r2, r2, r3
 8018112:	17db      	asrs	r3, r3, #31
 8018114:	1ad3      	subs	r3, r2, r3
 8018116:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = sfCompress % 3;
 8018118:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801811a:	4b7d      	ldr	r3, [pc, #500]	; (8018310 <UnpackSFMPEG2+0x2d4>)
 801811c:	fb83 3201 	smull	r3, r2, r3, r1
 8018120:	17cb      	asrs	r3, r1, #31
 8018122:	1ad2      	subs	r2, r2, r3
 8018124:	4613      	mov	r3, r2
 8018126:	005b      	lsls	r3, r3, #1
 8018128:	4413      	add	r3, r2
 801812a:	1aca      	subs	r2, r1, r3
 801812c:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2] = slen[3] = 0;
 801812e:	2300      	movs	r3, #0
 8018130:	633b      	str	r3, [r7, #48]	; 0x30
 8018132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018134:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sis->mixedBlock) {
 8018136:	68bb      	ldr	r3, [r7, #8]
 8018138:	699b      	ldr	r3, [r3, #24]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d003      	beq.n	8018146 <UnpackSFMPEG2+0x10a>
				/* adjust for long/short mix logic (see comment above in NRTab[] definition) */
				slen[2] = slen[1];  
 801813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018140:	62fb      	str	r3, [r7, #44]	; 0x2c
				slen[1] = slen[0];
 8018142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018144:	62bb      	str	r3, [r7, #40]	; 0x28
			}  
			preFlag = 1;
 8018146:	2301      	movs	r3, #1
 8018148:	643b      	str	r3, [r7, #64]	; 0x40
			sfcIdx = 2;
 801814a:	2302      	movs	r3, #2
 801814c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (sfCompress < 400) {
 801814e:	e073      	b.n	8018238 <UnpackSFMPEG2+0x1fc>
		}
	} else {    
		/* intensity stereo ch = 1 (right) */
		intensityScale = sfCompress & 0x01;
 8018150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018152:	f003 0301 	and.w	r3, r3, #1
 8018156:	63fb      	str	r3, [r7, #60]	; 0x3c
		sfCompress >>= 1;
 8018158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801815a:	105b      	asrs	r3, r3, #1
 801815c:	63bb      	str	r3, [r7, #56]	; 0x38
		if (sfCompress < 180) {
 801815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018160:	2bb3      	cmp	r3, #179	; 0xb3
 8018162:	dc35      	bgt.n	80181d0 <UnpackSFMPEG2+0x194>
			/* max slen = floor[35/6] = 5 (from mod 36) */
			slen[0] = (sfCompress / 36);
 8018164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018166:	4a6b      	ldr	r2, [pc, #428]	; (8018314 <UnpackSFMPEG2+0x2d8>)
 8018168:	fb82 1203 	smull	r1, r2, r2, r3
 801816c:	10d2      	asrs	r2, r2, #3
 801816e:	17db      	asrs	r3, r3, #31
 8018170:	1ad3      	subs	r3, r2, r3
 8018172:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = (sfCompress % 36) / 6;
 8018174:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018176:	4b67      	ldr	r3, [pc, #412]	; (8018314 <UnpackSFMPEG2+0x2d8>)
 8018178:	fb83 2301 	smull	r2, r3, r3, r1
 801817c:	10da      	asrs	r2, r3, #3
 801817e:	17cb      	asrs	r3, r1, #31
 8018180:	1ad2      	subs	r2, r2, r3
 8018182:	4613      	mov	r3, r2
 8018184:	00db      	lsls	r3, r3, #3
 8018186:	4413      	add	r3, r2
 8018188:	009b      	lsls	r3, r3, #2
 801818a:	1aca      	subs	r2, r1, r3
 801818c:	4b62      	ldr	r3, [pc, #392]	; (8018318 <UnpackSFMPEG2+0x2dc>)
 801818e:	fb83 3102 	smull	r3, r1, r3, r2
 8018192:	17d3      	asrs	r3, r2, #31
 8018194:	1acb      	subs	r3, r1, r3
 8018196:	62bb      	str	r3, [r7, #40]	; 0x28
			slen[2] = (sfCompress % 36) % 6;
 8018198:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801819a:	4b5e      	ldr	r3, [pc, #376]	; (8018314 <UnpackSFMPEG2+0x2d8>)
 801819c:	fb83 2301 	smull	r2, r3, r3, r1
 80181a0:	10da      	asrs	r2, r3, #3
 80181a2:	17cb      	asrs	r3, r1, #31
 80181a4:	1ad2      	subs	r2, r2, r3
 80181a6:	4613      	mov	r3, r2
 80181a8:	00db      	lsls	r3, r3, #3
 80181aa:	4413      	add	r3, r2
 80181ac:	009b      	lsls	r3, r3, #2
 80181ae:	1aca      	subs	r2, r1, r3
 80181b0:	4b59      	ldr	r3, [pc, #356]	; (8018318 <UnpackSFMPEG2+0x2dc>)
 80181b2:	fb83 3102 	smull	r3, r1, r3, r2
 80181b6:	17d3      	asrs	r3, r2, #31
 80181b8:	1ac9      	subs	r1, r1, r3
 80181ba:	460b      	mov	r3, r1
 80181bc:	005b      	lsls	r3, r3, #1
 80181be:	440b      	add	r3, r1
 80181c0:	005b      	lsls	r3, r3, #1
 80181c2:	1ad1      	subs	r1, r2, r3
 80181c4:	62f9      	str	r1, [r7, #44]	; 0x2c
			slen[3] = 0;
 80181c6:	2300      	movs	r3, #0
 80181c8:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 3;
 80181ca:	2303      	movs	r3, #3
 80181cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80181ce:	e033      	b.n	8018238 <UnpackSFMPEG2+0x1fc>
		} else if (sfCompress < 244) {
 80181d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181d2:	2bf3      	cmp	r3, #243	; 0xf3
 80181d4:	dc15      	bgt.n	8018202 <UnpackSFMPEG2+0x1c6>
			/* max slen = floor[63/16] = 3 */
			sfCompress -= 180;
 80181d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181d8:	3bb4      	subs	r3, #180	; 0xb4
 80181da:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = (sfCompress & 0x3f) >> 4;
 80181dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181de:	111b      	asrs	r3, r3, #4
 80181e0:	f003 0303 	and.w	r3, r3, #3
 80181e4:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = (sfCompress & 0x0f) >> 2;
 80181e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181e8:	109b      	asrs	r3, r3, #2
 80181ea:	f003 0303 	and.w	r3, r3, #3
 80181ee:	62bb      	str	r3, [r7, #40]	; 0x28
			slen[2] = (sfCompress & 0x03);
 80181f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181f2:	f003 0303 	and.w	r3, r3, #3
 80181f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			slen[3] = 0;
 80181f8:	2300      	movs	r3, #0
 80181fa:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 4;
 80181fc:	2304      	movs	r3, #4
 80181fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018200:	e01a      	b.n	8018238 <UnpackSFMPEG2+0x1fc>
		} else {
			/* max slen = floor[11/3] = 3 (max sfCompress >> 1 = 511/2 = 255) */
			sfCompress -= 244;
 8018202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018204:	3bf4      	subs	r3, #244	; 0xf4
 8018206:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = (sfCompress / 3);
 8018208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801820a:	4a41      	ldr	r2, [pc, #260]	; (8018310 <UnpackSFMPEG2+0x2d4>)
 801820c:	fb82 1203 	smull	r1, r2, r2, r3
 8018210:	17db      	asrs	r3, r3, #31
 8018212:	1ad3      	subs	r3, r2, r3
 8018214:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = (sfCompress % 3);
 8018216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018218:	4b3d      	ldr	r3, [pc, #244]	; (8018310 <UnpackSFMPEG2+0x2d4>)
 801821a:	fb83 3201 	smull	r3, r2, r3, r1
 801821e:	17cb      	asrs	r3, r1, #31
 8018220:	1ad2      	subs	r2, r2, r3
 8018222:	4613      	mov	r3, r2
 8018224:	005b      	lsls	r3, r3, #1
 8018226:	4413      	add	r3, r2
 8018228:	1aca      	subs	r2, r1, r3
 801822a:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2] = slen[3] = 0;
 801822c:	2300      	movs	r3, #0
 801822e:	633b      	str	r3, [r7, #48]	; 0x30
 8018230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018232:	62fb      	str	r3, [r7, #44]	; 0x2c
			sfcIdx = 5;
 8018234:	2305      	movs	r3, #5
 8018236:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
	}
	
	/* set index based on block type: (0,1,3) --> 0, (2 non-mixed) --> 1, (2 mixed) ---> 2 */
	btIdx = 0;
 8018238:	2300      	movs	r3, #0
 801823a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (sis->blockType == 2) 
 801823c:	68bb      	ldr	r3, [r7, #8]
 801823e:	695b      	ldr	r3, [r3, #20]
 8018240:	2b02      	cmp	r3, #2
 8018242:	d107      	bne.n	8018254 <UnpackSFMPEG2+0x218>
		btIdx = (sis->mixedBlock ? 2 : 1);
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	699b      	ldr	r3, [r3, #24]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d001      	beq.n	8018250 <UnpackSFMPEG2+0x214>
 801824c:	2302      	movs	r3, #2
 801824e:	e000      	b.n	8018252 <UnpackSFMPEG2+0x216>
 8018250:	2301      	movs	r3, #1
 8018252:	64bb      	str	r3, [r7, #72]	; 0x48
	for (i = 0; i < 4; i++)
 8018254:	2300      	movs	r3, #0
 8018256:	657b      	str	r3, [r7, #84]	; 0x54
 8018258:	e015      	b.n	8018286 <UnpackSFMPEG2+0x24a>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 801825a:	4930      	ldr	r1, [pc, #192]	; (801831c <UnpackSFMPEG2+0x2e0>)
 801825c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801825e:	4613      	mov	r3, r2
 8018260:	005b      	lsls	r3, r3, #1
 8018262:	4413      	add	r3, r2
 8018264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018266:	4413      	add	r3, r2
 8018268:	009b      	lsls	r3, r3, #2
 801826a:	18ca      	adds	r2, r1, r3
 801826c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801826e:	4413      	add	r3, r2
 8018270:	781b      	ldrb	r3, [r3, #0]
 8018272:	461a      	mov	r2, r3
 8018274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018276:	009b      	lsls	r3, r3, #2
 8018278:	3358      	adds	r3, #88	; 0x58
 801827a:	443b      	add	r3, r7
 801827c:	f843 2c44 	str.w	r2, [r3, #-68]
	for (i = 0; i < 4; i++)
 8018280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018282:	3301      	adds	r3, #1
 8018284:	657b      	str	r3, [r7, #84]	; 0x54
 8018286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018288:	2b03      	cmp	r3, #3
 801828a:	dde6      	ble.n	801825a <UnpackSFMPEG2+0x21e>

	/* save intensity stereo scale factor info */
	if( (modeExt & 0x01) && (ch == 1) ) {
 801828c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801828e:	f003 0301 	and.w	r3, r3, #1
 8018292:	2b00      	cmp	r3, #0
 8018294:	d025      	beq.n	80182e2 <UnpackSFMPEG2+0x2a6>
 8018296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018298:	2b01      	cmp	r3, #1
 801829a:	d122      	bne.n	80182e2 <UnpackSFMPEG2+0x2a6>
		for (i = 0; i < 4; i++) {
 801829c:	2300      	movs	r3, #0
 801829e:	657b      	str	r3, [r7, #84]	; 0x54
 80182a0:	e019      	b.n	80182d6 <UnpackSFMPEG2+0x29a>
			sfjs->slen[i] = slen[i];
 80182a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182a4:	009b      	lsls	r3, r3, #2
 80182a6:	3358      	adds	r3, #88	; 0x58
 80182a8:	443b      	add	r3, r7
 80182aa:	f853 2c34 	ldr.w	r2, [r3, #-52]
 80182ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80182b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182b2:	009b      	lsls	r3, r3, #2
 80182b4:	440b      	add	r3, r1
 80182b6:	605a      	str	r2, [r3, #4]
			sfjs->nr[i] = nr[i];
 80182b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182ba:	009b      	lsls	r3, r3, #2
 80182bc:	3358      	adds	r3, #88	; 0x58
 80182be:	443b      	add	r3, r7
 80182c0:	f853 2c44 	ldr.w	r2, [r3, #-68]
 80182c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80182c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182c8:	3304      	adds	r3, #4
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	440b      	add	r3, r1
 80182ce:	605a      	str	r2, [r3, #4]
		for (i = 0; i < 4; i++) {
 80182d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182d2:	3301      	adds	r3, #1
 80182d4:	657b      	str	r3, [r7, #84]	; 0x54
 80182d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182d8:	2b03      	cmp	r3, #3
 80182da:	dde2      	ble.n	80182a2 <UnpackSFMPEG2+0x266>
		}
		sfjs->intensityScale = intensityScale;
 80182dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80182de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80182e0:	601a      	str	r2, [r3, #0]
	}
	sis->preFlag = preFlag;
 80182e2:	68bb      	ldr	r3, [r7, #8]
 80182e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80182e6:	63da      	str	r2, [r3, #60]	; 0x3c

	/* short blocks */
	if(sis->blockType == 2) {
 80182e8:	68bb      	ldr	r3, [r7, #8]
 80182ea:	695b      	ldr	r3, [r3, #20]
 80182ec:	2b02      	cmp	r3, #2
 80182ee:	f040 80a6 	bne.w	801843e <UnpackSFMPEG2+0x402>
		if(sis->mixedBlock) {
 80182f2:	68bb      	ldr	r3, [r7, #8]
 80182f4:	699b      	ldr	r3, [r3, #24]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d029      	beq.n	801834e <UnpackSFMPEG2+0x312>
			/* do long block portion */
			iipTest = (1 << slen[0]) - 1;
 80182fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182fc:	2201      	movs	r2, #1
 80182fe:	fa02 f303 	lsl.w	r3, r2, r3
 8018302:	3b01      	subs	r3, #1
 8018304:	637b      	str	r3, [r7, #52]	; 0x34
			for (sfb=0; sfb < 6; sfb++) {
 8018306:	2300      	movs	r3, #0
 8018308:	653b      	str	r3, [r7, #80]	; 0x50
 801830a:	e018      	b.n	801833e <UnpackSFMPEG2+0x302>
 801830c:	66666667 	.word	0x66666667
 8018310:	55555556 	.word	0x55555556
 8018314:	38e38e39 	.word	0x38e38e39
 8018318:	2aaaaaab 	.word	0x2aaaaaab
 801831c:	0802a300 	.word	0x0802a300
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 8018320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018322:	4619      	mov	r1, r3
 8018324:	68f8      	ldr	r0, [r7, #12]
 8018326:	f7f9 fe15 	bl	8011f54 <xmp3fixpt_GetBits>
 801832a:	4603      	mov	r3, r0
 801832c:	b2d9      	uxtb	r1, r3
 801832e:	687a      	ldr	r2, [r7, #4]
 8018330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018332:	4413      	add	r3, r2
 8018334:	460a      	mov	r2, r1
 8018336:	701a      	strb	r2, [r3, #0]
			for (sfb=0; sfb < 6; sfb++) {
 8018338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801833a:	3301      	adds	r3, #1
 801833c:	653b      	str	r3, [r7, #80]	; 0x50
 801833e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018340:	2b05      	cmp	r3, #5
 8018342:	dded      	ble.n	8018320 <UnpackSFMPEG2+0x2e4>
			}
			sfb = 3;  /* start sfb for short */
 8018344:	2303      	movs	r3, #3
 8018346:	653b      	str	r3, [r7, #80]	; 0x50
			nrIdx = 1;
 8018348:	2301      	movs	r3, #1
 801834a:	647b      	str	r3, [r7, #68]	; 0x44
 801834c:	e063      	b.n	8018416 <UnpackSFMPEG2+0x3da>
		} else {      
			/* all short blocks, so start nr, sfb at 0 */
			sfb = 0;
 801834e:	2300      	movs	r3, #0
 8018350:	653b      	str	r3, [r7, #80]	; 0x50
			nrIdx = 0;
 8018352:	2300      	movs	r3, #0
 8018354:	647b      	str	r3, [r7, #68]	; 0x44
		}

		/* remaining short blocks, sfb just keeps incrementing */
		for (    ; nrIdx <= 3; nrIdx++) {
 8018356:	e05e      	b.n	8018416 <UnpackSFMPEG2+0x3da>
			iipTest = (1 << slen[nrIdx]) - 1;
 8018358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801835a:	009b      	lsls	r3, r3, #2
 801835c:	3358      	adds	r3, #88	; 0x58
 801835e:	443b      	add	r3, r7
 8018360:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8018364:	2201      	movs	r2, #1
 8018366:	fa02 f303 	lsl.w	r3, r2, r3
 801836a:	3b01      	subs	r3, #1
 801836c:	637b      	str	r3, [r7, #52]	; 0x34
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 801836e:	2300      	movs	r3, #0
 8018370:	657b      	str	r3, [r7, #84]	; 0x54
 8018372:	e044      	b.n	80183fe <UnpackSFMPEG2+0x3c2>
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 8018374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018376:	009b      	lsls	r3, r3, #2
 8018378:	3358      	adds	r3, #88	; 0x58
 801837a:	443b      	add	r3, r7
 801837c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8018380:	4619      	mov	r1, r3
 8018382:	68f8      	ldr	r0, [r7, #12]
 8018384:	f7f9 fde6 	bl	8011f54 <xmp3fixpt_GetBits>
 8018388:	4603      	mov	r3, r0
 801838a:	b2d8      	uxtb	r0, r3
 801838c:	6879      	ldr	r1, [r7, #4]
 801838e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018390:	4613      	mov	r3, r2
 8018392:	005b      	lsls	r3, r3, #1
 8018394:	4413      	add	r3, r2
 8018396:	440b      	add	r3, r1
 8018398:	3317      	adds	r3, #23
 801839a:	4602      	mov	r2, r0
 801839c:	701a      	strb	r2, [r3, #0]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 801839e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183a0:	009b      	lsls	r3, r3, #2
 80183a2:	3358      	adds	r3, #88	; 0x58
 80183a4:	443b      	add	r3, r7
 80183a6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80183aa:	4619      	mov	r1, r3
 80183ac:	68f8      	ldr	r0, [r7, #12]
 80183ae:	f7f9 fdd1 	bl	8011f54 <xmp3fixpt_GetBits>
 80183b2:	4603      	mov	r3, r0
 80183b4:	b2d8      	uxtb	r0, r3
 80183b6:	6879      	ldr	r1, [r7, #4]
 80183b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80183ba:	4613      	mov	r3, r2
 80183bc:	005b      	lsls	r3, r3, #1
 80183be:	4413      	add	r3, r2
 80183c0:	440b      	add	r3, r1
 80183c2:	3318      	adds	r3, #24
 80183c4:	4602      	mov	r2, r0
 80183c6:	701a      	strb	r2, [r3, #0]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 80183c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183ca:	009b      	lsls	r3, r3, #2
 80183cc:	3358      	adds	r3, #88	; 0x58
 80183ce:	443b      	add	r3, r7
 80183d0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80183d4:	4619      	mov	r1, r3
 80183d6:	68f8      	ldr	r0, [r7, #12]
 80183d8:	f7f9 fdbc 	bl	8011f54 <xmp3fixpt_GetBits>
 80183dc:	4603      	mov	r3, r0
 80183de:	b2d8      	uxtb	r0, r3
 80183e0:	6879      	ldr	r1, [r7, #4]
 80183e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80183e4:	4613      	mov	r3, r2
 80183e6:	005b      	lsls	r3, r3, #1
 80183e8:	4413      	add	r3, r2
 80183ea:	440b      	add	r3, r1
 80183ec:	3319      	adds	r3, #25
 80183ee:	4602      	mov	r2, r0
 80183f0:	701a      	strb	r2, [r3, #0]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 80183f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80183f4:	3301      	adds	r3, #1
 80183f6:	657b      	str	r3, [r7, #84]	; 0x54
 80183f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80183fa:	3301      	adds	r3, #1
 80183fc:	653b      	str	r3, [r7, #80]	; 0x50
 80183fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018400:	009b      	lsls	r3, r3, #2
 8018402:	3358      	adds	r3, #88	; 0x58
 8018404:	443b      	add	r3, r7
 8018406:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801840a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801840c:	429a      	cmp	r2, r3
 801840e:	dbb1      	blt.n	8018374 <UnpackSFMPEG2+0x338>
		for (    ; nrIdx <= 3; nrIdx++) {
 8018410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018412:	3301      	adds	r3, #1
 8018414:	647b      	str	r3, [r7, #68]	; 0x44
 8018416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018418:	2b03      	cmp	r3, #3
 801841a:	dd9d      	ble.n	8018358 <UnpackSFMPEG2+0x31c>
			}
		}
		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2200      	movs	r2, #0
 8018420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		}
		/* last sf band not transmitted */
		sfis->l[21] = sfis->l[22] = 0;

	}
}
 801843c:	e03f      	b.n	80184be <UnpackSFMPEG2+0x482>
		sfb = 0;
 801843e:	2300      	movs	r3, #0
 8018440:	653b      	str	r3, [r7, #80]	; 0x50
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 8018442:	2300      	movs	r3, #0
 8018444:	647b      	str	r3, [r7, #68]	; 0x44
 8018446:	e030      	b.n	80184aa <UnpackSFMPEG2+0x46e>
			iipTest = (1 << slen[nrIdx]) - 1;
 8018448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801844a:	009b      	lsls	r3, r3, #2
 801844c:	3358      	adds	r3, #88	; 0x58
 801844e:	443b      	add	r3, r7
 8018450:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8018454:	2201      	movs	r2, #1
 8018456:	fa02 f303 	lsl.w	r3, r2, r3
 801845a:	3b01      	subs	r3, #1
 801845c:	637b      	str	r3, [r7, #52]	; 0x34
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 801845e:	2300      	movs	r3, #0
 8018460:	657b      	str	r3, [r7, #84]	; 0x54
 8018462:	e016      	b.n	8018492 <UnpackSFMPEG2+0x456>
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 8018464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018466:	009b      	lsls	r3, r3, #2
 8018468:	3358      	adds	r3, #88	; 0x58
 801846a:	443b      	add	r3, r7
 801846c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8018470:	4619      	mov	r1, r3
 8018472:	68f8      	ldr	r0, [r7, #12]
 8018474:	f7f9 fd6e 	bl	8011f54 <xmp3fixpt_GetBits>
 8018478:	4603      	mov	r3, r0
 801847a:	b2d9      	uxtb	r1, r3
 801847c:	687a      	ldr	r2, [r7, #4]
 801847e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018480:	4413      	add	r3, r2
 8018482:	460a      	mov	r2, r1
 8018484:	701a      	strb	r2, [r3, #0]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8018486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018488:	3301      	adds	r3, #1
 801848a:	657b      	str	r3, [r7, #84]	; 0x54
 801848c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801848e:	3301      	adds	r3, #1
 8018490:	653b      	str	r3, [r7, #80]	; 0x50
 8018492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018494:	009b      	lsls	r3, r3, #2
 8018496:	3358      	adds	r3, #88	; 0x58
 8018498:	443b      	add	r3, r7
 801849a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801849e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80184a0:	429a      	cmp	r2, r3
 80184a2:	dbdf      	blt.n	8018464 <UnpackSFMPEG2+0x428>
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 80184a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184a6:	3301      	adds	r3, #1
 80184a8:	647b      	str	r3, [r7, #68]	; 0x44
 80184aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184ac:	2b03      	cmp	r3, #3
 80184ae:	ddcb      	ble.n	8018448 <UnpackSFMPEG2+0x40c>
		sfis->l[21] = sfis->l[22] = 0;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	2200      	movs	r2, #0
 80184b4:	759a      	strb	r2, [r3, #22]
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	7d9a      	ldrb	r2, [r3, #22]
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	755a      	strb	r2, [r3, #21]
}
 80184be:	bf00      	nop
 80184c0:	3758      	adds	r7, #88	; 0x58
 80184c2:	46bd      	mov	sp, r7
 80184c4:	bd80      	pop	{r7, pc}
 80184c6:	bf00      	nop

080184c8 <xmp3fixpt_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 80184c8:	b590      	push	{r4, r7, lr}
 80184ca:	b093      	sub	sp, #76	; 0x4c
 80184cc:	af04      	add	r7, sp, #16
 80184ce:	60f8      	str	r0, [r7, #12]
 80184d0:	60b9      	str	r1, [r7, #8]
 80184d2:	607a      	str	r2, [r7, #4]
 80184d4:	603b      	str	r3, [r7, #0]
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d00b      	beq.n	80184f4 <xmp3fixpt_UnpackScaleFactors+0x2c>
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d007      	beq.n	80184f4 <xmp3fixpt_UnpackScaleFactors+0x2c>
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d003      	beq.n	80184f4 <xmp3fixpt_UnpackScaleFactors+0x2c>
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	689b      	ldr	r3, [r3, #8]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d102      	bne.n	80184fa <xmp3fixpt_UnpackScaleFactors+0x32>
		return -1;
 80184f4:	f04f 33ff 	mov.w	r3, #4294967295
 80184f8:	e0bc      	b.n	8018674 <xmp3fixpt_UnpackScaleFactors+0x1ac>
	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	637b      	str	r3, [r7, #52]	; 0x34
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	685b      	ldr	r3, [r3, #4]
 8018504:	633b      	str	r3, [r7, #48]	; 0x30
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	689b      	ldr	r3, [r3, #8]
 801850a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* init GetBits reader */
	startBuf = buf;
 801850c:	68bb      	ldr	r3, [r7, #8]
 801850e:	62bb      	str	r3, [r7, #40]	; 0x28
	bsi = &bitStreamInfo;
 8018510:	f107 0310 	add.w	r3, r7, #16
 8018514:	627b      	str	r3, [r7, #36]	; 0x24
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	681a      	ldr	r2, [r3, #0]
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	4413      	add	r3, r2
 801851e:	3307      	adds	r3, #7
 8018520:	2b00      	cmp	r3, #0
 8018522:	da00      	bge.n	8018526 <xmp3fixpt_UnpackScaleFactors+0x5e>
 8018524:	3307      	adds	r3, #7
 8018526:	10db      	asrs	r3, r3, #3
 8018528:	68ba      	ldr	r2, [r7, #8]
 801852a:	4619      	mov	r1, r3
 801852c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801852e:	f7f9 fc88 	bl	8011e42 <xmp3fixpt_SetBitstreamPointer>
	if (*bitOffset)
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d005      	beq.n	8018546 <xmp3fixpt_UnpackScaleFactors+0x7e>
		GetBits(bsi, *bitOffset);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	4619      	mov	r1, r3
 8018540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018542:	f7f9 fd07 	bl	8011f54 <xmp3fixpt_GetBits>

	if (fh->ver == MPEG1) 
 8018546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d132      	bne.n	80185b4 <xmp3fixpt_UnpackScaleFactors+0xec>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 801854e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018550:	461a      	mov	r2, r3
 8018552:	00d2      	lsls	r2, r2, #3
 8018554:	441a      	add	r2, r3
 8018556:	00d3      	lsls	r3, r2, #3
 8018558:	461a      	mov	r2, r3
 801855a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801855c:	460b      	mov	r3, r1
 801855e:	00db      	lsls	r3, r3, #3
 8018560:	440b      	add	r3, r1
 8018562:	011b      	lsls	r3, r3, #4
 8018564:	4413      	add	r3, r2
 8018566:	3328      	adds	r3, #40	; 0x28
 8018568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801856a:	18d0      	adds	r0, r2, r3
 801856c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801856e:	461a      	mov	r2, r3
 8018570:	0152      	lsls	r2, r2, #5
 8018572:	1ad2      	subs	r2, r2, r3
 8018574:	0053      	lsls	r3, r2, #1
 8018576:	461a      	mov	r2, r3
 8018578:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801857a:	460b      	mov	r3, r1
 801857c:	015b      	lsls	r3, r3, #5
 801857e:	1a5b      	subs	r3, r3, r1
 8018580:	009b      	lsls	r3, r3, #2
 8018582:	4413      	add	r3, r2
 8018584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018586:	18d1      	adds	r1, r2, r3
 8018588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801858a:	011b      	lsls	r3, r3, #4
 801858c:	3308      	adds	r3, #8
 801858e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018590:	18d4      	adds	r4, r2, r3
 8018592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018594:	4613      	mov	r3, r2
 8018596:	015b      	lsls	r3, r3, #5
 8018598:	1a9b      	subs	r3, r3, r2
 801859a:	005b      	lsls	r3, r3, #1
 801859c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801859e:	4413      	add	r3, r2
 80185a0:	9301      	str	r3, [sp, #4]
 80185a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80185a4:	9300      	str	r3, [sp, #0]
 80185a6:	4623      	mov	r3, r4
 80185a8:	460a      	mov	r2, r1
 80185aa:	4601      	mov	r1, r0
 80185ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185ae:	f7ff fbc1 	bl	8017d34 <UnpackSFMPEG1>
 80185b2:	e02a      	b.n	801860a <xmp3fixpt_UnpackScaleFactors+0x142>
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);
 80185b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80185b6:	461a      	mov	r2, r3
 80185b8:	00d2      	lsls	r2, r2, #3
 80185ba:	441a      	add	r2, r3
 80185bc:	00d3      	lsls	r3, r2, #3
 80185be:	461a      	mov	r2, r3
 80185c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80185c2:	460b      	mov	r3, r1
 80185c4:	00db      	lsls	r3, r3, #3
 80185c6:	440b      	add	r3, r1
 80185c8:	011b      	lsls	r3, r3, #4
 80185ca:	4413      	add	r3, r2
 80185cc:	3328      	adds	r3, #40	; 0x28
 80185ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185d0:	18d0      	adds	r0, r2, r3
 80185d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80185d4:	461a      	mov	r2, r3
 80185d6:	0152      	lsls	r2, r2, #5
 80185d8:	1ad2      	subs	r2, r2, r3
 80185da:	0053      	lsls	r3, r2, #1
 80185dc:	461a      	mov	r2, r3
 80185de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80185e0:	460b      	mov	r3, r1
 80185e2:	015b      	lsls	r3, r3, #5
 80185e4:	1a5b      	subs	r3, r3, r1
 80185e6:	009b      	lsls	r3, r3, #2
 80185e8:	4413      	add	r3, r2
 80185ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80185ec:	18d1      	adds	r1, r2, r3
 80185ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185f0:	6a1b      	ldr	r3, [r3, #32]
 80185f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80185f4:	32f8      	adds	r2, #248	; 0xf8
 80185f6:	9202      	str	r2, [sp, #8]
 80185f8:	9301      	str	r3, [sp, #4]
 80185fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80185fc:	9300      	str	r3, [sp, #0]
 80185fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018600:	460a      	mov	r2, r1
 8018602:	4601      	mov	r1, r0
 8018604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018606:	f7ff fd19 	bl	801803c <UnpackSFMPEG2>

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 801860a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801860c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801860e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018610:	461a      	mov	r2, r3
 8018612:	00d2      	lsls	r2, r2, #3
 8018614:	441a      	add	r2, r3
 8018616:	00d3      	lsls	r3, r2, #3
 8018618:	461a      	mov	r2, r3
 801861a:	460b      	mov	r3, r1
 801861c:	00db      	lsls	r3, r3, #3
 801861e:	440b      	add	r3, r1
 8018620:	011b      	lsls	r3, r3, #4
 8018622:	4413      	add	r3, r2
 8018624:	4403      	add	r3, r0
 8018626:	3328      	adds	r3, #40	; 0x28
 8018628:	6819      	ldr	r1, [r3, #0]
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801862e:	0050      	lsls	r0, r2, #1
 8018630:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018632:	4402      	add	r2, r0
 8018634:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 8018638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	461a      	mov	r2, r3
 8018642:	68b9      	ldr	r1, [r7, #8]
 8018644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018646:	f7f9 fccd 	bl	8011fe4 <xmp3fixpt_CalcBitsUsed>
 801864a:	6238      	str	r0, [r7, #32]
	buf += (bitsUsed + *bitOffset) >> 3;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681a      	ldr	r2, [r3, #0]
 8018650:	6a3b      	ldr	r3, [r7, #32]
 8018652:	4413      	add	r3, r2
 8018654:	10db      	asrs	r3, r3, #3
 8018656:	461a      	mov	r2, r3
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	4413      	add	r3, r2
 801865c:	60bb      	str	r3, [r7, #8]
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	681a      	ldr	r2, [r3, #0]
 8018662:	6a3b      	ldr	r3, [r7, #32]
 8018664:	4413      	add	r3, r2
 8018666:	f003 0207 	and.w	r2, r3, #7
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	601a      	str	r2, [r3, #0]

	return (buf - startBuf);
 801866e:	68ba      	ldr	r2, [r7, #8]
 8018670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018672:	1ad3      	subs	r3, r2, r3
}
 8018674:	4618      	mov	r0, r3
 8018676:	373c      	adds	r7, #60	; 0x3c
 8018678:	46bd      	mov	sp, r7
 801867a:	bd90      	pop	{r4, r7, pc}

0801867c <MULSHIFT32>:
{
 801867c:	b480      	push	{r7}
 801867e:	b085      	sub	sp, #20
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8018686:	6879      	ldr	r1, [r7, #4]
 8018688:	683b      	ldr	r3, [r7, #0]
 801868a:	fb81 2303 	smull	r2, r3, r1, r3
 801868e:	60fa      	str	r2, [r7, #12]
 8018690:	603b      	str	r3, [r7, #0]
    return y;
 8018692:	683b      	ldr	r3, [r7, #0]
}
 8018694:	4618      	mov	r0, r3
 8018696:	3714      	adds	r7, #20
 8018698:	46bd      	mov	sp, r7
 801869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869e:	4770      	bx	lr

080186a0 <FASTABS>:
{
 80186a0:	b480      	push	{r7}
 80186a2:	b085      	sub	sp, #20
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
	int t=0; /*Really is not necessary to initialiaze only to avoid warning*/
 80186a8:	2300      	movs	r3, #0
 80186aa:	60fb      	str	r3, [r7, #12]
	__asm__ volatile (
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	687a      	ldr	r2, [r7, #4]
 80186b0:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80186b4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80186b8:	60fb      	str	r3, [r7, #12]
	return t;
 80186ba:	68fb      	ldr	r3, [r7, #12]
}
 80186bc:	4618      	mov	r0, r3
 80186be:	3714      	adds	r7, #20
 80186c0:	46bd      	mov	sp, r7
 80186c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c6:	4770      	bx	lr

080186c8 <xmp3fixpt_MidSideProc>:
 * Return:      none
 *
 * Notes:       assume at least 1 GB in input
 **************************************************************************************/
void MidSideProc(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, int mOut[2])  
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b08a      	sub	sp, #40	; 0x28
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	60f8      	str	r0, [r7, #12]
 80186d0:	60b9      	str	r1, [r7, #8]
 80186d2:	607a      	str	r2, [r7, #4]
	int i, xr, xl, mOutL, mOutR;
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
 80186d4:	2300      	movs	r3, #0
 80186d6:	61fb      	str	r3, [r7, #28]
 80186d8:	69fb      	ldr	r3, [r7, #28]
 80186da:	623b      	str	r3, [r7, #32]
	for(i = 0; i < nSamps; i++) {
 80186dc:	2300      	movs	r3, #0
 80186de:	627b      	str	r3, [r7, #36]	; 0x24
 80186e0:	e036      	b.n	8018750 <xmp3fixpt_MidSideProc+0x88>
		xl = x[0][i];
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186ea:	61bb      	str	r3, [r7, #24]
		xr = x[1][i];
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80186f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186f8:	617b      	str	r3, [r7, #20]
		x[0][i] = xl + xr;
 80186fa:	69ba      	ldr	r2, [r7, #24]
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	18d1      	adds	r1, r2, r3
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		x[1][i] = xl - xr;
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801870e:	69b9      	ldr	r1, [r7, #24]
 8018710:	697a      	ldr	r2, [r7, #20]
 8018712:	1a89      	subs	r1, r1, r2
 8018714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		mOutL |= FASTABS(x[0][i]);
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801871e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018722:	4618      	mov	r0, r3
 8018724:	f7ff ffbc 	bl	80186a0 <FASTABS>
 8018728:	4602      	mov	r2, r0
 801872a:	6a3b      	ldr	r3, [r7, #32]
 801872c:	4313      	orrs	r3, r2
 801872e:	623b      	str	r3, [r7, #32]
		mOutR |= FASTABS(x[1][i]);
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801873c:	4618      	mov	r0, r3
 801873e:	f7ff ffaf 	bl	80186a0 <FASTABS>
 8018742:	4602      	mov	r2, r0
 8018744:	69fb      	ldr	r3, [r7, #28]
 8018746:	4313      	orrs	r3, r2
 8018748:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < nSamps; i++) {
 801874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801874c:	3301      	adds	r3, #1
 801874e:	627b      	str	r3, [r7, #36]	; 0x24
 8018750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	429a      	cmp	r2, r3
 8018756:	dbc4      	blt.n	80186e2 <xmp3fixpt_MidSideProc+0x1a>
	}
	mOut[0] |= mOutL;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681a      	ldr	r2, [r3, #0]
 801875c:	6a3b      	ldr	r3, [r7, #32]
 801875e:	431a      	orrs	r2, r3
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	601a      	str	r2, [r3, #0]
	mOut[1] |= mOutR;
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	3304      	adds	r3, #4
 8018768:	6819      	ldr	r1, [r3, #0]
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	3304      	adds	r3, #4
 801876e:	69fa      	ldr	r2, [r7, #28]
 8018770:	430a      	orrs	r2, r1
 8018772:	601a      	str	r2, [r3, #0]
}
 8018774:	bf00      	nop
 8018776:	3728      	adds	r7, #40	; 0x28
 8018778:	46bd      	mov	sp, r7
 801877a:	bd80      	pop	{r7, pc}

0801877c <xmp3fixpt_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b09c      	sub	sp, #112	; 0x70
 8018780:	af00      	add	r7, sp, #0
 8018782:	60f8      	str	r0, [r7, #12]
 8018784:	60b9      	str	r1, [r7, #8]
 8018786:	607a      	str	r2, [r7, #4]
 8018788:	603b      	str	r3, [r7, #0]
	int i=0, j=0, n=0, cb=0, w=0;
 801878a:	2300      	movs	r3, #0
 801878c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801878e:	2300      	movs	r3, #0
 8018790:	66bb      	str	r3, [r7, #104]	; 0x68
 8018792:	2300      	movs	r3, #0
 8018794:	63bb      	str	r3, [r7, #56]	; 0x38
 8018796:	2300      	movs	r3, #0
 8018798:	667b      	str	r3, [r7, #100]	; 0x64
 801879a:	2300      	movs	r3, #0
 801879c:	663b      	str	r3, [r7, #96]	; 0x60
	int sampsLeft, isf, mOutL, mOutR, xl, xr;
	int fl, fr, fls[3], frs[3];
	int cbStartL=0, cbStartS=0, cbEndL=0, cbEndS=0;
 801879e:	2300      	movs	r3, #0
 80187a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80187a2:	2300      	movs	r3, #0
 80187a4:	647b      	str	r3, [r7, #68]	; 0x44
 80187a6:	2300      	movs	r3, #0
 80187a8:	643b      	str	r3, [r7, #64]	; 0x40
 80187aa:	2300      	movs	r3, #0
 80187ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 80187ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80187b0:	3318      	adds	r3, #24
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d113      	bne.n	80187e0 <xmp3fixpt_IntensityProcMPEG1+0x64>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
 80187b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80187ba:	3318      	adds	r3, #24
 80187bc:	695b      	ldr	r3, [r3, #20]
 80187be:	3301      	adds	r3, #1
 80187c0:	64bb      	str	r3, [r7, #72]	; 0x48
		cbEndL =   cbi[0].cbEndL + 1;
 80187c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80187c4:	695b      	ldr	r3, [r3, #20]
 80187c6:	3301      	adds	r3, #1
 80187c8:	643b      	str	r3, [r7, #64]	; 0x40
		cbStartS = cbEndS = 0;
 80187ca:	2300      	movs	r3, #0
 80187cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80187ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187d0:	647b      	str	r3, [r7, #68]	; 0x44
		i = fh->sfBand->l[cbStartL];
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80187d8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80187dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80187de:	e023      	b.n	8018828 <xmp3fixpt_IntensityProcMPEG1+0xac>
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 80187e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80187e2:	3318      	adds	r3, #24
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	2b01      	cmp	r3, #1
 80187e8:	d004      	beq.n	80187f4 <xmp3fixpt_IntensityProcMPEG1+0x78>
 80187ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80187ec:	3318      	adds	r3, #24
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	2b02      	cmp	r3, #2
 80187f2:	d119      	bne.n	8018828 <xmp3fixpt_IntensityProcMPEG1+0xac>
		/* short or mixed block */
		cbStartS = cbi[1].cbEndSMax + 1;
 80187f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80187f6:	3318      	adds	r3, #24
 80187f8:	691b      	ldr	r3, [r3, #16]
 80187fa:	3301      	adds	r3, #1
 80187fc:	647b      	str	r3, [r7, #68]	; 0x44
		cbEndS =   cbi[0].cbEndSMax + 1;
 80187fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018800:	691b      	ldr	r3, [r3, #16]
 8018802:	3301      	adds	r3, #1
 8018804:	63fb      	str	r3, [r7, #60]	; 0x3c
		cbStartL = cbEndL = 0;
 8018806:	2300      	movs	r3, #0
 8018808:	643b      	str	r3, [r7, #64]	; 0x40
 801880a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801880c:	64bb      	str	r3, [r7, #72]	; 0x48
		i = 3 * fh->sfBand->s[cbStartS];
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018814:	3314      	adds	r3, #20
 8018816:	005b      	lsls	r3, r3, #1
 8018818:	4413      	add	r3, r2
 801881a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801881e:	461a      	mov	r2, r3
 8018820:	4613      	mov	r3, r2
 8018822:	005b      	lsls	r3, r3, #1
 8018824:	4413      	add	r3, r2
 8018826:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	sampsLeft = nSamps - i;		/* process to length of left */
 8018828:	68ba      	ldr	r2, [r7, #8]
 801882a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801882c:	1ad3      	subs	r3, r2, r3
 801882e:	65fb      	str	r3, [r7, #92]	; 0x5c
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8018830:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8018832:	4613      	mov	r3, r2
 8018834:	00db      	lsls	r3, r3, #3
 8018836:	1a9b      	subs	r3, r3, r2
 8018838:	009b      	lsls	r3, r3, #2
 801883a:	4a75      	ldr	r2, [pc, #468]	; (8018a10 <xmp3fixpt_IntensityProcMPEG1+0x294>)
 801883c:	4413      	add	r3, r2
 801883e:	637b      	str	r3, [r7, #52]	; 0x34
	mOutL = mOutR = 0;
 8018840:	2300      	movs	r3, #0
 8018842:	657b      	str	r3, [r7, #84]	; 0x54
 8018844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018846:	65bb      	str	r3, [r7, #88]	; 0x58

	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8018848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801884a:	667b      	str	r3, [r7, #100]	; 0x64
 801884c:	e077      	b.n	801893e <xmp3fixpt_IntensityProcMPEG1+0x1c2>
		isf = sfis->l[cb];
 801884e:	683a      	ldr	r2, [r7, #0]
 8018850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018852:	4413      	add	r3, r2
 8018854:	781b      	ldrb	r3, [r3, #0]
 8018856:	633b      	str	r3, [r7, #48]	; 0x30
		if (isf == 7) {
 8018858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801885a:	2b07      	cmp	r3, #7
 801885c:	d10b      	bne.n	8018876 <xmp3fixpt_IntensityProcMPEG1+0xfa>
			fl = ISFIIP[midSideFlag][0];
 801885e:	4a6d      	ldr	r2, [pc, #436]	; (8018a14 <xmp3fixpt_IntensityProcMPEG1+0x298>)
 8018860:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018862:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018866:	653b      	str	r3, [r7, #80]	; 0x50
			fr = ISFIIP[midSideFlag][1];
 8018868:	4a6a      	ldr	r2, [pc, #424]	; (8018a14 <xmp3fixpt_IntensityProcMPEG1+0x298>)
 801886a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801886c:	00db      	lsls	r3, r3, #3
 801886e:	4413      	add	r3, r2
 8018870:	685b      	ldr	r3, [r3, #4]
 8018872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018874:	e00f      	b.n	8018896 <xmp3fixpt_IntensityProcMPEG1+0x11a>
		} else {
			fl = isfTab[isf];	
 8018876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018878:	009b      	lsls	r3, r3, #2
 801887a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801887c:	4413      	add	r3, r2
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	653b      	str	r3, [r7, #80]	; 0x50
			fr = isfTab[6] - isfTab[isf];
 8018882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018884:	3318      	adds	r3, #24
 8018886:	681a      	ldr	r2, [r3, #0]
 8018888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801888a:	009b      	lsls	r3, r3, #2
 801888c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801888e:	440b      	add	r3, r1
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	1ad3      	subs	r3, r2, r3
 8018894:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801889a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801889c:	3201      	adds	r2, #1
 801889e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80188a2:	4619      	mov	r1, r3
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80188aa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80188ae:	1acb      	subs	r3, r1, r3
 80188b0:	63bb      	str	r3, [r7, #56]	; 0x38
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 80188b2:	2300      	movs	r3, #0
 80188b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80188b6:	e038      	b.n	801892a <xmp3fixpt_IntensityProcMPEG1+0x1ae>
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80188bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188c0:	4619      	mov	r1, r3
 80188c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80188c4:	f7ff feda 	bl	801867c <MULSHIFT32>
 80188c8:	4603      	mov	r3, r0
 80188ca:	009b      	lsls	r3, r3, #2
 80188cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80188d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80188d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80188d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80188dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80188de:	f7ff fedf 	bl	80186a0 <FASTABS>
 80188e2:	4602      	mov	r2, r0
 80188e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188e6:	4313      	orrs	r3, r2
 80188e8:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80188ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188f2:	4619      	mov	r1, r3
 80188f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80188f6:	f7ff fec1 	bl	801867c <MULSHIFT32>
 80188fa:	4603      	mov	r3, r0
 80188fc:	009b      	lsls	r3, r3, #2
 80188fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801890a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801890c:	f7ff fec8 	bl	80186a0 <FASTABS>
 8018910:	4602      	mov	r2, r0
 8018912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018914:	4313      	orrs	r3, r2
 8018916:	65bb      	str	r3, [r7, #88]	; 0x58
			sampsLeft--;
 8018918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801891a:	3b01      	subs	r3, #1
 801891c:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 801891e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018920:	3301      	adds	r3, #1
 8018922:	66bb      	str	r3, [r7, #104]	; 0x68
 8018924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018926:	3301      	adds	r3, #1
 8018928:	66fb      	str	r3, [r7, #108]	; 0x6c
 801892a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801892e:	429a      	cmp	r2, r3
 8018930:	da02      	bge.n	8018938 <xmp3fixpt_IntensityProcMPEG1+0x1bc>
 8018932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018934:	2b00      	cmp	r3, #0
 8018936:	dcbf      	bgt.n	80188b8 <xmp3fixpt_IntensityProcMPEG1+0x13c>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8018938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801893a:	3301      	adds	r3, #1
 801893c:	667b      	str	r3, [r7, #100]	; 0x64
 801893e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018942:	429a      	cmp	r2, r3
 8018944:	da02      	bge.n	801894c <xmp3fixpt_IntensityProcMPEG1+0x1d0>
 8018946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018948:	2b00      	cmp	r3, #0
 801894a:	dc80      	bgt.n	801884e <xmp3fixpt_IntensityProcMPEG1+0xd2>
		}
	}

	/* short blocks */
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 801894c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801894e:	667b      	str	r3, [r7, #100]	; 0x64
 8018950:	e10e      	b.n	8018b70 <xmp3fixpt_IntensityProcMPEG1+0x3f4>
		for (w = 0; w < 3; w++) {
 8018952:	2300      	movs	r3, #0
 8018954:	663b      	str	r3, [r7, #96]	; 0x60
 8018956:	e040      	b.n	80189da <xmp3fixpt_IntensityProcMPEG1+0x25e>
			isf = sfis->s[cb][w];
 8018958:	6839      	ldr	r1, [r7, #0]
 801895a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801895c:	4613      	mov	r3, r2
 801895e:	005b      	lsls	r3, r3, #1
 8018960:	4413      	add	r3, r2
 8018962:	18ca      	adds	r2, r1, r3
 8018964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018966:	4413      	add	r3, r2
 8018968:	3317      	adds	r3, #23
 801896a:	781b      	ldrb	r3, [r3, #0]
 801896c:	633b      	str	r3, [r7, #48]	; 0x30
			if (isf == 7) {
 801896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018970:	2b07      	cmp	r3, #7
 8018972:	d115      	bne.n	80189a0 <xmp3fixpt_IntensityProcMPEG1+0x224>
				fls[w] = ISFIIP[midSideFlag][0];
 8018974:	4a27      	ldr	r2, [pc, #156]	; (8018a14 <xmp3fixpt_IntensityProcMPEG1+0x298>)
 8018976:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018978:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801897c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801897e:	009b      	lsls	r3, r3, #2
 8018980:	3370      	adds	r3, #112	; 0x70
 8018982:	443b      	add	r3, r7
 8018984:	f843 2c54 	str.w	r2, [r3, #-84]
				frs[w] = ISFIIP[midSideFlag][1];
 8018988:	4a22      	ldr	r2, [pc, #136]	; (8018a14 <xmp3fixpt_IntensityProcMPEG1+0x298>)
 801898a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801898c:	00db      	lsls	r3, r3, #3
 801898e:	4413      	add	r3, r2
 8018990:	685a      	ldr	r2, [r3, #4]
 8018992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018994:	009b      	lsls	r3, r3, #2
 8018996:	3370      	adds	r3, #112	; 0x70
 8018998:	443b      	add	r3, r7
 801899a:	f843 2c60 	str.w	r2, [r3, #-96]
 801899e:	e019      	b.n	80189d4 <xmp3fixpt_IntensityProcMPEG1+0x258>
			} else {
				fls[w] = isfTab[isf];
 80189a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189a2:	009b      	lsls	r3, r3, #2
 80189a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80189a6:	4413      	add	r3, r2
 80189a8:	681a      	ldr	r2, [r3, #0]
 80189aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80189ac:	009b      	lsls	r3, r3, #2
 80189ae:	3370      	adds	r3, #112	; 0x70
 80189b0:	443b      	add	r3, r7
 80189b2:	f843 2c54 	str.w	r2, [r3, #-84]
				frs[w] = isfTab[6] - isfTab[isf];
 80189b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189b8:	3318      	adds	r3, #24
 80189ba:	681a      	ldr	r2, [r3, #0]
 80189bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189be:	009b      	lsls	r3, r3, #2
 80189c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80189c2:	440b      	add	r3, r1
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	1ad2      	subs	r2, r2, r3
 80189c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80189ca:	009b      	lsls	r3, r3, #2
 80189cc:	3370      	adds	r3, #112	; 0x70
 80189ce:	443b      	add	r3, r7
 80189d0:	f843 2c60 	str.w	r2, [r3, #-96]
		for (w = 0; w < 3; w++) {
 80189d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80189d6:	3301      	adds	r3, #1
 80189d8:	663b      	str	r3, [r7, #96]	; 0x60
 80189da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80189dc:	2b02      	cmp	r3, #2
 80189de:	ddbb      	ble.n	8018958 <xmp3fixpt_IntensityProcMPEG1+0x1dc>
			}
		}

		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80189e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80189e6:	3301      	adds	r3, #1
 80189e8:	3314      	adds	r3, #20
 80189ea:	005b      	lsls	r3, r3, #1
 80189ec:	4413      	add	r3, r2
 80189ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80189f2:	4619      	mov	r1, r3
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80189f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80189fa:	3314      	adds	r3, #20
 80189fc:	005b      	lsls	r3, r3, #1
 80189fe:	4413      	add	r3, r2
 8018a00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018a04:	1acb      	subs	r3, r1, r3
 8018a06:	63bb      	str	r3, [r7, #56]	; 0x38
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8018a08:	2300      	movs	r3, #0
 8018a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8018a0c:	e0a5      	b.n	8018b5a <xmp3fixpt_IntensityProcMPEG1+0x3de>
 8018a0e:	bf00      	nop
 8018a10:	0802a588 	.word	0x0802a588
 8018a14:	0802a6c0 	.word	0x0802a6c0
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 8018a18:	6938      	ldr	r0, [r7, #16]
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a22:	4619      	mov	r1, r3
 8018a24:	f7ff fe2a 	bl	801867c <MULSHIFT32>
 8018a28:	4603      	mov	r3, r0
 8018a2a:	009b      	lsls	r3, r3, #2
 8018a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018a34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018a3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a3e:	f7ff fe2f 	bl	80186a0 <FASTABS>
 8018a42:	4602      	mov	r2, r0
 8018a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a46:	4313      	orrs	r3, r2
 8018a48:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 8018a4a:	69f8      	ldr	r0, [r7, #28]
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a54:	4619      	mov	r1, r3
 8018a56:	f7ff fe11 	bl	801867c <MULSHIFT32>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	009b      	lsls	r3, r3, #2
 8018a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a6c:	f7ff fe18 	bl	80186a0 <FASTABS>
 8018a70:	4602      	mov	r2, r0
 8018a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018a74:	4313      	orrs	r3, r2
 8018a76:	65bb      	str	r3, [r7, #88]	; 0x58
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 8018a78:	6978      	ldr	r0, [r7, #20]
 8018a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a7c:	1c5a      	adds	r2, r3, #1
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a84:	4619      	mov	r1, r3
 8018a86:	f7ff fdf9 	bl	801867c <MULSHIFT32>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	009b      	lsls	r3, r3, #2
 8018a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018a96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018a98:	3201      	adds	r2, #1
 8018a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018aa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018aa2:	f7ff fdfd 	bl	80186a0 <FASTABS>
 8018aa6:	4602      	mov	r2, r0
 8018aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018aaa:	4313      	orrs	r3, r2
 8018aac:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 8018aae:	6a38      	ldr	r0, [r7, #32]
 8018ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018ab2:	1c5a      	adds	r2, r3, #1
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018aba:	4619      	mov	r1, r3
 8018abc:	f7ff fdde 	bl	801867c <MULSHIFT32>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	009b      	lsls	r3, r3, #2
 8018ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8018ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018ac8:	1c5a      	adds	r2, r3, #1
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ad4:	f7ff fde4 	bl	80186a0 <FASTABS>
 8018ad8:	4602      	mov	r2, r0
 8018ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018adc:	4313      	orrs	r3, r2
 8018ade:	65bb      	str	r3, [r7, #88]	; 0x58
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 8018ae0:	69b8      	ldr	r0, [r7, #24]
 8018ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018ae4:	1c9a      	adds	r2, r3, #2
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018aec:	4619      	mov	r1, r3
 8018aee:	f7ff fdc5 	bl	801867c <MULSHIFT32>
 8018af2:	4603      	mov	r3, r0
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018afe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018b00:	3202      	adds	r2, #2
 8018b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018b08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018b0a:	f7ff fdc9 	bl	80186a0 <FASTABS>
 8018b0e:	4602      	mov	r2, r0
 8018b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018b12:	4313      	orrs	r3, r2
 8018b14:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8018b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b1a:	1c9a      	adds	r2, r3, #2
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b22:	4619      	mov	r1, r3
 8018b24:	f7ff fdaa 	bl	801867c <MULSHIFT32>
 8018b28:	4603      	mov	r3, r0
 8018b2a:	009b      	lsls	r3, r3, #2
 8018b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b30:	1c9a      	adds	r2, r3, #2
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b3c:	f7ff fdb0 	bl	80186a0 <FASTABS>
 8018b40:	4602      	mov	r2, r0
 8018b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018b44:	4313      	orrs	r3, r2
 8018b46:	65bb      	str	r3, [r7, #88]	; 0x58
			sampsLeft -= 3;
 8018b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018b4a:	3b03      	subs	r3, #3
 8018b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8018b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018b50:	3301      	adds	r3, #1
 8018b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8018b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b56:	3303      	adds	r3, #3
 8018b58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b5e:	429a      	cmp	r2, r3
 8018b60:	da03      	bge.n	8018b6a <xmp3fixpt_IntensityProcMPEG1+0x3ee>
 8018b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018b64:	2b02      	cmp	r3, #2
 8018b66:	f73f af57 	bgt.w	8018a18 <xmp3fixpt_IntensityProcMPEG1+0x29c>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8018b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018b6c:	3301      	adds	r3, #1
 8018b6e:	667b      	str	r3, [r7, #100]	; 0x64
 8018b70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b74:	429a      	cmp	r2, r3
 8018b76:	da03      	bge.n	8018b80 <xmp3fixpt_IntensityProcMPEG1+0x404>
 8018b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018b7a:	2b02      	cmp	r3, #2
 8018b7c:	f73f aee9 	bgt.w	8018952 <xmp3fixpt_IntensityProcMPEG1+0x1d6>
		}
	}
	mOut[0] = mOutL;
 8018b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018b84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018b86:	601a      	str	r2, [r3, #0]
	mOut[1] = mOutR;
 8018b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018b8c:	3304      	adds	r3, #4
 8018b8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018b90:	601a      	str	r2, [r3, #0]
	
	return;
 8018b92:	bf00      	nop
}
 8018b94:	3770      	adds	r7, #112	; 0x70
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bd80      	pop	{r7, pc}
 8018b9a:	bf00      	nop

08018b9c <xmp3fixpt_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b0b2      	sub	sp, #200	; 0xc8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	60f8      	str	r0, [r7, #12]
 8018ba4:	60b9      	str	r1, [r7, #8]
 8018ba6:	607a      	str	r2, [r7, #4]
 8018ba8:	603b      	str	r3, [r7, #0]
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8018baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	005a      	lsls	r2, r3, #1
 8018bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018bb6:	4413      	add	r3, r2
 8018bb8:	019b      	lsls	r3, r3, #6
 8018bba:	4acc      	ldr	r2, [pc, #816]	; (8018eec <xmp3fixpt_IntensityProcMPEG2+0x350>)
 8018bbc:	4413      	add	r3, r2
 8018bbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mOutL = mOutR = 0;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018bc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018bd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8018bde:	e032      	b.n	8018c46 <xmp3fixpt_IntensityProcMPEG2+0xaa>
		tmp = (1 << sfjs->slen[r]) - 1;
 8018be0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8018be4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018be8:	009b      	lsls	r3, r3, #2
 8018bea:	4413      	add	r3, r2
 8018bec:	685b      	ldr	r3, [r3, #4]
 8018bee:	2201      	movs	r2, #1
 8018bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8018bf4:	3b01      	subs	r3, #1
 8018bf6:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018bfe:	e011      	b.n	8018c24 <xmp3fixpt_IntensityProcMPEG2+0x88>
			il[k] = tmp;
 8018c00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	33c8      	adds	r3, #200	; 0xc8
 8018c08:	443b      	add	r3, r7
 8018c0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8018c0c:	f843 2cb4 	str.w	r2, [r3, #-180]
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8018c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018c14:	3301      	adds	r3, #1
 8018c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018c1e:	3301      	adds	r3, #1
 8018c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8018c24:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8018c28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018c2c:	3304      	adds	r3, #4
 8018c2e:	009b      	lsls	r3, r3, #2
 8018c30:	4413      	add	r3, r2
 8018c32:	685b      	ldr	r3, [r3, #4]
 8018c34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8018c38:	429a      	cmp	r2, r3
 8018c3a:	dbe1      	blt.n	8018c00 <xmp3fixpt_IntensityProcMPEG2+0x64>
	for (k = r = 0; r < 4; r++) {
 8018c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018c40:	3301      	adds	r3, #1
 8018c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018c4a:	2b03      	cmp	r3, #3
 8018c4c:	ddc8      	ble.n	8018be0 <xmp3fixpt_IntensityProcMPEG2+0x44>
	}

	if (cbi[1].cbType == 0) {
 8018c4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018c52:	3318      	adds	r3, #24
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	f040 80ec 	bne.w	8018e34 <xmp3fixpt_IntensityProcMPEG2+0x298>
		/* long blocks */
		il[21] = il[22] = 1;
 8018c5c:	2301      	movs	r3, #1
 8018c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c62:	66bb      	str	r3, [r7, #104]	; 0x68
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 8018c64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018c68:	3318      	adds	r3, #24
 8018c6a:	695b      	ldr	r3, [r3, #20]
 8018c6c:	3301      	adds	r3, #1
 8018c6e:	67bb      	str	r3, [r7, #120]	; 0x78
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 8018c70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018c74:	695b      	ldr	r3, [r3, #20]
 8018c76:	3301      	adds	r3, #1
 8018c78:	677b      	str	r3, [r7, #116]	; 0x74
		i = fh->sfBand->l[cbStartL];
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018c80:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8018c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		sampsLeft = nSamps - i;
 8018c88:	68ba      	ldr	r2, [r7, #8]
 8018c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018c8e:	1ad3      	subs	r3, r2, r3
 8018c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		for(cb = cbStartL; cb < cbEndL; cb++) {
 8018c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018c9a:	e0c4      	b.n	8018e26 <xmp3fixpt_IntensityProcMPEG2+0x28a>
			sfIdx = sfis->l[cb];
 8018c9c:	683a      	ldr	r2, [r7, #0]
 8018c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018ca2:	4413      	add	r3, r2
 8018ca4:	781b      	ldrb	r3, [r3, #0]
 8018ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if (sfIdx == il[cb]) {
 8018caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018cae:	009b      	lsls	r3, r3, #2
 8018cb0:	33c8      	adds	r3, #200	; 0xc8
 8018cb2:	443b      	add	r3, r7
 8018cb4:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8018cb8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	d10f      	bne.n	8018ce0 <xmp3fixpt_IntensityProcMPEG2+0x144>
				fl = ISFIIP[midSideFlag][0];
 8018cc0:	4a8b      	ldr	r2, [pc, #556]	; (8018ef0 <xmp3fixpt_IntensityProcMPEG2+0x354>)
 8018cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018cc6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				fr = ISFIIP[midSideFlag][1];
 8018cce:	4a88      	ldr	r2, [pc, #544]	; (8018ef0 <xmp3fixpt_IntensityProcMPEG2+0x354>)
 8018cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018cd4:	00db      	lsls	r3, r3, #3
 8018cd6:	4413      	add	r3, r2
 8018cd8:	685b      	ldr	r3, [r3, #4]
 8018cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018cde:	e02a      	b.n	8018d36 <xmp3fixpt_IntensityProcMPEG2+0x19a>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
 8018ce0:	683a      	ldr	r2, [r7, #0]
 8018ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018ce6:	4413      	add	r3, r2
 8018ce8:	781b      	ldrb	r3, [r3, #0]
 8018cea:	3301      	adds	r3, #1
 8018cec:	105b      	asrs	r3, r3, #1
 8018cee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8018cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018cf6:	f003 0301 	and.w	r3, r3, #1
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d003      	beq.n	8018d06 <xmp3fixpt_IntensityProcMPEG2+0x16a>
 8018cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018d02:	009b      	lsls	r3, r3, #2
 8018d04:	e000      	b.n	8018d08 <xmp3fixpt_IntensityProcMPEG2+0x16c>
 8018d06:	2300      	movs	r3, #0
 8018d08:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8018d0c:	4413      	add	r3, r2
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8018d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018d18:	f003 0301 	and.w	r3, r3, #1
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d103      	bne.n	8018d28 <xmp3fixpt_IntensityProcMPEG2+0x18c>
 8018d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018d24:	009b      	lsls	r3, r3, #2
 8018d26:	e000      	b.n	8018d2a <xmp3fixpt_IntensityProcMPEG2+0x18e>
 8018d28:	2300      	movs	r3, #0
 8018d2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8018d2e:	4413      	add	r3, r2
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018d3e:	3201      	adds	r2, #1
 8018d40:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8018d44:	4619      	mov	r1, r3
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018d4e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8018d52:	1acb      	subs	r3, r1, r3
 8018d54:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018d58:	4293      	cmp	r3, r2
 8018d5a:	bfa8      	it	ge
 8018d5c:	4613      	movge	r3, r2
 8018d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			for(j = 0; j < n; j++, i++) {
 8018d62:	2300      	movs	r3, #0
 8018d64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018d68:	e046      	b.n	8018df8 <xmp3fixpt_IntensityProcMPEG2+0x25c>
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d74:	4619      	mov	r1, r3
 8018d76:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8018d7a:	f7ff fc7f 	bl	801867c <MULSHIFT32>
 8018d7e:	4603      	mov	r3, r0
 8018d80:	009b      	lsls	r3, r3, #2
 8018d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018d8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018d90:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8018d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018d98:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8018d9c:	f7ff fc80 	bl	80186a0 <FASTABS>
 8018da0:	4602      	mov	r2, r0
 8018da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018da6:	4313      	orrs	r3, r2
 8018da8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018db6:	4619      	mov	r1, r3
 8018db8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018dbc:	f7ff fc5e 	bl	801867c <MULSHIFT32>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	009b      	lsls	r3, r3, #2
 8018dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018dcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8018dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018dd2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8018dd4:	f7ff fc64 	bl	80186a0 <FASTABS>
 8018dd8:	4602      	mov	r2, r0
 8018dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018dde:	4313      	orrs	r3, r2
 8018de0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			for(j = 0; j < n; j++, i++) {
 8018de4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018de8:	3301      	adds	r3, #1
 8018dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018df2:	3301      	adds	r3, #1
 8018df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8018df8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8018dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018e00:	429a      	cmp	r2, r3
 8018e02:	dbb2      	blt.n	8018d6a <xmp3fixpt_IntensityProcMPEG2+0x1ce>
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
 8018e04:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018e0c:	1ad3      	subs	r3, r2, r3
 8018e0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (sampsLeft == 0)		
 8018e12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	f000 811d 	beq.w	8019056 <xmp3fixpt_IntensityProcMPEG2+0x4ba>
		for(cb = cbStartL; cb < cbEndL; cb++) {
 8018e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018e20:	3301      	adds	r3, #1
 8018e22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	f6ff af35 	blt.w	8018c9c <xmp3fixpt_IntensityProcMPEG2+0x100>
 8018e32:	e111      	b.n	8019058 <xmp3fixpt_IntensityProcMPEG2+0x4bc>
				break;
		}
	} else {
		/* short or mixed blocks */
		il[12] = 1;
 8018e34:	2301      	movs	r3, #1
 8018e36:	647b      	str	r3, [r7, #68]	; 0x44

		for(w = 0; w < 3; w++) {
 8018e38:	2300      	movs	r3, #0
 8018e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018e3e:	e104      	b.n	801904a <xmp3fixpt_IntensityProcMPEG2+0x4ae>
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8018e40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018e44:	f103 0218 	add.w	r2, r3, #24
 8018e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018e4c:	009b      	lsls	r3, r3, #2
 8018e4e:	4413      	add	r3, r2
 8018e50:	685b      	ldr	r3, [r3, #4]
 8018e52:	3301      	adds	r3, #1
 8018e54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 8018e58:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8018e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018e60:	009b      	lsls	r3, r3, #2
 8018e62:	4413      	add	r3, r2
 8018e64:	685b      	ldr	r3, [r3, #4]
 8018e66:	3301      	adds	r3, #1
 8018e68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018e74:	3314      	adds	r3, #20
 8018e76:	005b      	lsls	r3, r3, #1
 8018e78:	4413      	add	r3, r2
 8018e7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018e7e:	461a      	mov	r2, r3
 8018e80:	4613      	mov	r3, r2
 8018e82:	005b      	lsls	r3, r3, #1
 8018e84:	4413      	add	r3, r2
 8018e86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018e8a:	4413      	add	r3, r2
 8018e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

			/* skip through sample array by 3, so early-exit logic would be more tricky */
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8018e90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018e98:	e0cb      	b.n	8019032 <xmp3fixpt_IntensityProcMPEG2+0x496>
				sfIdx = sfis->s[cb][w];
 8018e9a:	6839      	ldr	r1, [r7, #0]
 8018e9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018ea0:	4613      	mov	r3, r2
 8018ea2:	005b      	lsls	r3, r3, #1
 8018ea4:	4413      	add	r3, r2
 8018ea6:	18ca      	adds	r2, r1, r3
 8018ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018eac:	4413      	add	r3, r2
 8018eae:	3317      	adds	r3, #23
 8018eb0:	781b      	ldrb	r3, [r3, #0]
 8018eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				if (sfIdx == il[cb]) {
 8018eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018eba:	009b      	lsls	r3, r3, #2
 8018ebc:	33c8      	adds	r3, #200	; 0xc8
 8018ebe:	443b      	add	r3, r7
 8018ec0:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8018ec4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018ec8:	429a      	cmp	r2, r3
 8018eca:	d113      	bne.n	8018ef4 <xmp3fixpt_IntensityProcMPEG2+0x358>
					fl = ISFIIP[midSideFlag][0];
 8018ecc:	4a08      	ldr	r2, [pc, #32]	; (8018ef0 <xmp3fixpt_IntensityProcMPEG2+0x354>)
 8018ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018ed2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					fr = ISFIIP[midSideFlag][1];
 8018eda:	4a05      	ldr	r2, [pc, #20]	; (8018ef0 <xmp3fixpt_IntensityProcMPEG2+0x354>)
 8018edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018ee0:	00db      	lsls	r3, r3, #3
 8018ee2:	4413      	add	r3, r2
 8018ee4:	685b      	ldr	r3, [r3, #4]
 8018ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018eea:	e035      	b.n	8018f58 <xmp3fixpt_IntensityProcMPEG2+0x3bc>
 8018eec:	0802a5c0 	.word	0x0802a5c0
 8018ef0:	0802a6c0 	.word	0x0802a6c0
				} else {
					isf = (sfis->s[cb][w] + 1) >> 1;
 8018ef4:	6839      	ldr	r1, [r7, #0]
 8018ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018efa:	4613      	mov	r3, r2
 8018efc:	005b      	lsls	r3, r3, #1
 8018efe:	4413      	add	r3, r2
 8018f00:	18ca      	adds	r2, r1, r3
 8018f02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018f06:	4413      	add	r3, r2
 8018f08:	3317      	adds	r3, #23
 8018f0a:	781b      	ldrb	r3, [r3, #0]
 8018f0c:	3301      	adds	r3, #1
 8018f0e:	105b      	asrs	r3, r3, #1
 8018f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8018f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018f18:	f003 0301 	and.w	r3, r3, #1
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d003      	beq.n	8018f28 <xmp3fixpt_IntensityProcMPEG2+0x38c>
 8018f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018f24:	009b      	lsls	r3, r3, #2
 8018f26:	e000      	b.n	8018f2a <xmp3fixpt_IntensityProcMPEG2+0x38e>
 8018f28:	2300      	movs	r3, #0
 8018f2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8018f2e:	4413      	add	r3, r2
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8018f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018f3a:	f003 0301 	and.w	r3, r3, #1
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d103      	bne.n	8018f4a <xmp3fixpt_IntensityProcMPEG2+0x3ae>
 8018f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018f46:	009b      	lsls	r3, r3, #2
 8018f48:	e000      	b.n	8018f4c <xmp3fixpt_IntensityProcMPEG2+0x3b0>
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8018f50:	4413      	add	r3, r2
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				}
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018f60:	3301      	adds	r3, #1
 8018f62:	3314      	adds	r3, #20
 8018f64:	005b      	lsls	r3, r3, #1
 8018f66:	4413      	add	r3, r2
 8018f68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018f72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018f76:	3314      	adds	r3, #20
 8018f78:	005b      	lsls	r3, r3, #1
 8018f7a:	4413      	add	r3, r2
 8018f7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018f80:	1acb      	subs	r3, r1, r3
 8018f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

				for(j = 0; j < n; j++, i+=3) {
 8018f86:	2300      	movs	r3, #0
 8018f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018f8c:	e046      	b.n	801901c <xmp3fixpt_IntensityProcMPEG2+0x480>
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f98:	4619      	mov	r1, r3
 8018f9a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8018f9e:	f7ff fb6d 	bl	801867c <MULSHIFT32>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	009b      	lsls	r3, r3, #2
 8018fa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018fb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018fb4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8018fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018fbc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8018fc0:	f7ff fb6e 	bl	80186a0 <FASTABS>
 8018fc4:	4602      	mov	r2, r0
 8018fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018fca:	4313      	orrs	r3, r2
 8018fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018fda:	4619      	mov	r1, r3
 8018fdc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018fe0:	f7ff fb4c 	bl	801867c <MULSHIFT32>
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	009b      	lsls	r3, r3, #2
 8018fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018ff0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8018ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018ff6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8018ff8:	f7ff fb52 	bl	80186a0 <FASTABS>
 8018ffc:	4602      	mov	r2, r0
 8018ffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019002:	4313      	orrs	r3, r2
 8019004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				for(j = 0; j < n; j++, i+=3) {
 8019008:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801900c:	3301      	adds	r3, #1
 801900e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8019012:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019016:	3303      	adds	r3, #3
 8019018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801901c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8019020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019024:	429a      	cmp	r2, r3
 8019026:	dbb2      	blt.n	8018f8e <xmp3fixpt_IntensityProcMPEG2+0x3f2>
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8019028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801902c:	3301      	adds	r3, #1
 801902e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8019032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8019036:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801903a:	429a      	cmp	r2, r3
 801903c:	f6ff af2d 	blt.w	8018e9a <xmp3fixpt_IntensityProcMPEG2+0x2fe>
		for(w = 0; w < 3; w++) {
 8019040:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019044:	3301      	adds	r3, #1
 8019046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801904a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801904e:	2b02      	cmp	r3, #2
 8019050:	f77f aef6 	ble.w	8018e40 <xmp3fixpt_IntensityProcMPEG2+0x2a4>
 8019054:	e000      	b.n	8019058 <xmp3fixpt_IntensityProcMPEG2+0x4bc>
				break;
 8019056:	bf00      	nop
				}
			}
		}
	}
	mOut[0] = mOutL;
 8019058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801905c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019060:	601a      	str	r2, [r3, #0]
	mOut[1] = mOutR;
 8019062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019066:	3304      	adds	r3, #4
 8019068:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801906c:	601a      	str	r2, [r3, #0]

	return;
 801906e:	bf00      	nop
}
 8019070:	37c8      	adds	r7, #200	; 0xc8
 8019072:	46bd      	mov	sp, r7
 8019074:	bd80      	pop	{r7, pc}
 8019076:	bf00      	nop

08019078 <xmp3fixpt_Subband>:
 * Outputs:     decoded PCM data, interleaved LRLRLR... if stereo
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
int Subband(MP3DecInfo *mp3DecInfo, short *pcmBuf)
{
 8019078:	b590      	push	{r4, r7, lr}
 801907a:	b089      	sub	sp, #36	; 0x24
 801907c:	af02      	add	r7, sp, #8
 801907e:	6078      	str	r0, [r7, #4]
 8019080:	6039      	str	r1, [r7, #0]
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d00b      	beq.n	80190a0 <xmp3fixpt_Subband+0x28>
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	68db      	ldr	r3, [r3, #12]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d007      	beq.n	80190a0 <xmp3fixpt_Subband+0x28>
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	695b      	ldr	r3, [r3, #20]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d003      	beq.n	80190a0 <xmp3fixpt_Subband+0x28>
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	699b      	ldr	r3, [r3, #24]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d102      	bne.n	80190a6 <xmp3fixpt_Subband+0x2e>
		return -1;
 80190a0:	f04f 33ff 	mov.w	r3, #4294967295
 80190a4:	e0b8      	b.n	8019218 <xmp3fixpt_Subband+0x1a0>

	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	68db      	ldr	r3, [r3, #12]
 80190aa:	613b      	str	r3, [r7, #16]
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	695b      	ldr	r3, [r3, #20]
 80190b0:	60fb      	str	r3, [r7, #12]
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	699b      	ldr	r3, [r3, #24]
 80190b6:	60bb      	str	r3, [r7, #8]

	if (mp3DecInfo->nChans == 2) {
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 80190be:	2b02      	cmp	r3, #2
 80190c0:	d161      	bne.n	8019186 <xmp3fixpt_Subband+0x10e>
		/* stereo */
		for (b = 0; b < BLOCK_SIZE; b++) {
 80190c2:	2300      	movs	r3, #0
 80190c4:	617b      	str	r3, [r7, #20]
 80190c6:	e05a      	b.n	801917e <xmp3fixpt_Subband+0x106>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 80190c8:	697b      	ldr	r3, [r7, #20]
 80190ca:	01db      	lsls	r3, r3, #7
 80190cc:	68fa      	ldr	r2, [r7, #12]
 80190ce:	18d0      	adds	r0, r2, r3
 80190d0:	68b9      	ldr	r1, [r7, #8]
 80190d2:	68bb      	ldr	r3, [r7, #8]
 80190d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80190d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	f003 0401 	and.w	r4, r3, #1
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80190e8:	f8d3 3b18 	ldr.w	r3, [r3, #2840]	; 0xb18
 80190ec:	9300      	str	r3, [sp, #0]
 80190ee:	4623      	mov	r3, r4
 80190f0:	f7f9 fbfa 	bl	80128e8 <xmp3fixpt_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 80190f4:	697b      	ldr	r3, [r7, #20]
 80190f6:	3312      	adds	r3, #18
 80190f8:	01db      	lsls	r3, r3, #7
 80190fa:	68fa      	ldr	r2, [r7, #12]
 80190fc:	18d0      	adds	r0, r2, r3
 80190fe:	68bb      	ldr	r3, [r7, #8]
 8019100:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8019104:	68bb      	ldr	r3, [r7, #8]
 8019106:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801910a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801910e:	697b      	ldr	r3, [r7, #20]
 8019110:	f003 0401 	and.w	r4, r3, #1
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801911a:	f8d3 3b1c 	ldr.w	r3, [r3, #2844]	; 0xb1c
 801911e:	9300      	str	r3, [sp, #0]
 8019120:	4623      	mov	r3, r4
 8019122:	f7f9 fbe1 	bl	80128e8 <xmp3fixpt_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 8019126:	68b9      	ldr	r1, [r7, #8]
 8019128:	68bb      	ldr	r3, [r7, #8]
 801912a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801912e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8019132:	4618      	mov	r0, r3
 8019134:	697b      	ldr	r3, [r7, #20]
 8019136:	f003 0201 	and.w	r2, r3, #1
 801913a:	4613      	mov	r3, r2
 801913c:	011b      	lsls	r3, r3, #4
 801913e:	4413      	add	r3, r2
 8019140:	019b      	lsls	r3, r3, #6
 8019142:	4403      	add	r3, r0
 8019144:	009b      	lsls	r3, r3, #2
 8019146:	440b      	add	r3, r1
 8019148:	4a35      	ldr	r2, [pc, #212]	; (8019220 <xmp3fixpt_Subband+0x1a8>)
 801914a:	4619      	mov	r1, r3
 801914c:	6838      	ldr	r0, [r7, #0]
 801914e:	f7fd ff6f 	bl	8017030 <xmp3fixpt_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8019152:	68bb      	ldr	r3, [r7, #8]
 8019154:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019158:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801915c:	697b      	ldr	r3, [r7, #20]
 801915e:	f003 0301 	and.w	r3, r3, #1
 8019162:	1ad3      	subs	r3, r2, r3
 8019164:	f003 0307 	and.w	r3, r3, #7
 8019168:	68ba      	ldr	r2, [r7, #8]
 801916a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 801916e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
			pcmBuf += (2 * NBANDS);
 8019172:	683b      	ldr	r3, [r7, #0]
 8019174:	3380      	adds	r3, #128	; 0x80
 8019176:	603b      	str	r3, [r7, #0]
		for (b = 0; b < BLOCK_SIZE; b++) {
 8019178:	697b      	ldr	r3, [r7, #20]
 801917a:	3301      	adds	r3, #1
 801917c:	617b      	str	r3, [r7, #20]
 801917e:	697b      	ldr	r3, [r7, #20]
 8019180:	2b11      	cmp	r3, #17
 8019182:	dda1      	ble.n	80190c8 <xmp3fixpt_Subband+0x50>
 8019184:	e047      	b.n	8019216 <xmp3fixpt_Subband+0x19e>
		}
	} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
 8019186:	2300      	movs	r3, #0
 8019188:	617b      	str	r3, [r7, #20]
 801918a:	e041      	b.n	8019210 <xmp3fixpt_Subband+0x198>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 801918c:	697b      	ldr	r3, [r7, #20]
 801918e:	01db      	lsls	r3, r3, #7
 8019190:	68fa      	ldr	r2, [r7, #12]
 8019192:	18d0      	adds	r0, r2, r3
 8019194:	68b9      	ldr	r1, [r7, #8]
 8019196:	68bb      	ldr	r3, [r7, #8]
 8019198:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801919c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80191a0:	697b      	ldr	r3, [r7, #20]
 80191a2:	f003 0401 	and.w	r4, r3, #1
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191ac:	f8d3 3b18 	ldr.w	r3, [r3, #2840]	; 0xb18
 80191b0:	9300      	str	r3, [sp, #0]
 80191b2:	4623      	mov	r3, r4
 80191b4:	f7f9 fb98 	bl	80128e8 <xmp3fixpt_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 80191b8:	68b9      	ldr	r1, [r7, #8]
 80191ba:	68bb      	ldr	r3, [r7, #8]
 80191bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80191c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80191c4:	4618      	mov	r0, r3
 80191c6:	697b      	ldr	r3, [r7, #20]
 80191c8:	f003 0201 	and.w	r2, r3, #1
 80191cc:	4613      	mov	r3, r2
 80191ce:	011b      	lsls	r3, r3, #4
 80191d0:	4413      	add	r3, r2
 80191d2:	019b      	lsls	r3, r3, #6
 80191d4:	4403      	add	r3, r0
 80191d6:	009b      	lsls	r3, r3, #2
 80191d8:	440b      	add	r3, r1
 80191da:	4a11      	ldr	r2, [pc, #68]	; (8019220 <xmp3fixpt_Subband+0x1a8>)
 80191dc:	4619      	mov	r1, r3
 80191de:	6838      	ldr	r0, [r7, #0]
 80191e0:	f7fd fb65 	bl	80168ae <xmp3fixpt_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80191e4:	68bb      	ldr	r3, [r7, #8]
 80191e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80191ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80191ee:	697b      	ldr	r3, [r7, #20]
 80191f0:	f003 0301 	and.w	r3, r3, #1
 80191f4:	1ad3      	subs	r3, r2, r3
 80191f6:	f003 0307 	and.w	r3, r3, #7
 80191fa:	68ba      	ldr	r2, [r7, #8]
 80191fc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8019200:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
			pcmBuf += NBANDS;
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	3340      	adds	r3, #64	; 0x40
 8019208:	603b      	str	r3, [r7, #0]
		for (b = 0; b < BLOCK_SIZE; b++) {
 801920a:	697b      	ldr	r3, [r7, #20]
 801920c:	3301      	adds	r3, #1
 801920e:	617b      	str	r3, [r7, #20]
 8019210:	697b      	ldr	r3, [r7, #20]
 8019212:	2b11      	cmp	r3, #17
 8019214:	ddba      	ble.n	801918c <xmp3fixpt_Subband+0x114>
		}
	}

	return 0;
 8019216:	2300      	movs	r3, #0
}
 8019218:	4618      	mov	r0, r3
 801921a:	371c      	adds	r7, #28
 801921c:	46bd      	mov	sp, r7
 801921e:	bd90      	pop	{r4, r7, pc}
 8019220:	0802a710 	.word	0x0802a710

08019224 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b082      	sub	sp, #8
 8019228:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801922a:	2301      	movs	r3, #1
 801922c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801922e:	f003 fc87 	bl	801cb40 <BSP_PlatformIsDetected>
 8019232:	4603      	mov	r3, r0
 8019234:	2b00      	cmp	r3, #0
 8019236:	d101      	bne.n	801923c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8019238:	2300      	movs	r3, #0
 801923a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801923c:	79fb      	ldrb	r3, [r7, #7]
 801923e:	b2db      	uxtb	r3, r3
}
 8019240:	4618      	mov	r0, r3
 8019242:	3708      	adds	r7, #8
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}

08019248 <dbgAddText>:
extern float jog_sensitivity;
extern uint8_t acue_sensitivity;

//debug text handler
void dbgAddText(const char* text)
{
 8019248:	b480      	push	{r7}
 801924a:	b083      	sub	sp, #12
 801924c:	af00      	add	r7, sp, #0
 801924e:	6078      	str	r0, [r7, #4]
	if (DebugLines < MAXDEBUG){
 8019250:	4b07      	ldr	r3, [pc, #28]	; (8019270 <dbgAddText+0x28>)
 8019252:	781b      	ldrb	r3, [r3, #0]
 8019254:	2b08      	cmp	r3, #8
 8019256:	d805      	bhi.n	8019264 <dbgAddText+0x1c>
		//strcpy(DebugText[DebugLines],text);
		DebugLines++;
 8019258:	4b05      	ldr	r3, [pc, #20]	; (8019270 <dbgAddText+0x28>)
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	3301      	adds	r3, #1
 801925e:	b2da      	uxtb	r2, r3
 8019260:	4b03      	ldr	r3, [pc, #12]	; (8019270 <dbgAddText+0x28>)
 8019262:	701a      	strb	r2, [r3, #0]
	}
}
 8019264:	bf00      	nop
 8019266:	370c      	adds	r7, #12
 8019268:	46bd      	mov	sp, r7
 801926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801926e:	4770      	bx	lr
 8019270:	200008de 	.word	0x200008de

08019274 <Color_Convertion>:

// converts ARGB8888 to RGB565
static uint16_t Color_Convertion(uint32_t in_color)
{
 8019274:	b480      	push	{r7}
 8019276:	b085      	sub	sp, #20
 8019278:	af00      	add	r7, sp, #0
 801927a:	6078      	str	r0, [r7, #4]
	uint16_t red = (in_color & 0x00FF0000) >> 16;
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	0c1b      	lsrs	r3, r3, #16
 8019280:	b29b      	uxth	r3, r3
 8019282:	b2db      	uxtb	r3, r3
 8019284:	81fb      	strh	r3, [r7, #14]
	uint16_t green = (in_color & 0x0000FF00) >> 8;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	0a1b      	lsrs	r3, r3, #8
 801928a:	b29b      	uxth	r3, r3
 801928c:	b2db      	uxtb	r3, r3
 801928e:	81bb      	strh	r3, [r7, #12]
	uint16_t blue = (in_color & 0x000000FF);
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	b29b      	uxth	r3, r3
 8019294:	b2db      	uxtb	r3, r3
 8019296:	817b      	strh	r3, [r7, #10]
	uint16_t out_color = ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
 8019298:	89fb      	ldrh	r3, [r7, #14]
 801929a:	021b      	lsls	r3, r3, #8
 801929c:	b21a      	sxth	r2, r3
 801929e:	4b0c      	ldr	r3, [pc, #48]	; (80192d0 <Color_Convertion+0x5c>)
 80192a0:	4013      	ands	r3, r2
 80192a2:	b21a      	sxth	r2, r3
 80192a4:	89bb      	ldrh	r3, [r7, #12]
 80192a6:	00db      	lsls	r3, r3, #3
 80192a8:	b21b      	sxth	r3, r3
 80192aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80192ae:	b21b      	sxth	r3, r3
 80192b0:	4313      	orrs	r3, r2
 80192b2:	b21a      	sxth	r2, r3
 80192b4:	897b      	ldrh	r3, [r7, #10]
 80192b6:	08db      	lsrs	r3, r3, #3
 80192b8:	b29b      	uxth	r3, r3
 80192ba:	b21b      	sxth	r3, r3
 80192bc:	4313      	orrs	r3, r2
 80192be:	b21b      	sxth	r3, r3
 80192c0:	813b      	strh	r3, [r7, #8]
	return out_color;
 80192c2:	893b      	ldrh	r3, [r7, #8]
}
 80192c4:	4618      	mov	r0, r3
 80192c6:	3714      	adds	r7, #20
 80192c8:	46bd      	mov	sp, r7
 80192ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ce:	4770      	bx	lr
 80192d0:	fffff800 	.word	0xfffff800

080192d4 <ClearLayer>:

// clears selected ActiveLayer
void ClearLayer()
{
 80192d4:	b590      	push	{r4, r7, lr}
 80192d6:	b083      	sub	sp, #12
 80192d8:	af02      	add	r7, sp, #8
	hdma2d.Init.OutputOffset = 0;
 80192da:	4b1c      	ldr	r3, [pc, #112]	; (801934c <ClearLayer+0x78>)
 80192dc:	2200      	movs	r2, #0
 80192de:	60da      	str	r2, [r3, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 80192e0:	481a      	ldr	r0, [pc, #104]	; (801934c <ClearLayer+0x78>)
 80192e2:	f7e8 ff2d 	bl	8002140 <HAL_DMA2D_Init>
 80192e6:	4603      	mov	r3, r0
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d12a      	bne.n	8019342 <ClearLayer+0x6e>
		if(HAL_DMA2D_Start(&hdma2d, 0, hltdc.LayerCfg[ActiveLayer].FBStartAdress,
 80192ec:	4b18      	ldr	r3, [pc, #96]	; (8019350 <ClearLayer+0x7c>)
 80192ee:	781b      	ldrb	r3, [r3, #0]
 80192f0:	4619      	mov	r1, r3
 80192f2:	4a18      	ldr	r2, [pc, #96]	; (8019354 <ClearLayer+0x80>)
 80192f4:	2334      	movs	r3, #52	; 0x34
 80192f6:	fb01 f303 	mul.w	r3, r1, r3
 80192fa:	4413      	add	r3, r2
 80192fc:	335c      	adds	r3, #92	; 0x5c
 80192fe:	681a      	ldr	r2, [r3, #0]
 8019300:	4b13      	ldr	r3, [pc, #76]	; (8019350 <ClearLayer+0x7c>)
 8019302:	781b      	ldrb	r3, [r3, #0]
 8019304:	4618      	mov	r0, r3
 8019306:	4913      	ldr	r1, [pc, #76]	; (8019354 <ClearLayer+0x80>)
 8019308:	2334      	movs	r3, #52	; 0x34
 801930a:	fb00 f303 	mul.w	r3, r0, r3
 801930e:	440b      	add	r3, r1
 8019310:	3360      	adds	r3, #96	; 0x60
 8019312:	6819      	ldr	r1, [r3, #0]
 8019314:	4b0e      	ldr	r3, [pc, #56]	; (8019350 <ClearLayer+0x7c>)
 8019316:	781b      	ldrb	r3, [r3, #0]
 8019318:	461c      	mov	r4, r3
 801931a:	480e      	ldr	r0, [pc, #56]	; (8019354 <ClearLayer+0x80>)
 801931c:	2334      	movs	r3, #52	; 0x34
 801931e:	fb04 f303 	mul.w	r3, r4, r3
 8019322:	4403      	add	r3, r0
 8019324:	3364      	adds	r3, #100	; 0x64
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	9300      	str	r3, [sp, #0]
 801932a:	460b      	mov	r3, r1
 801932c:	2100      	movs	r1, #0
 801932e:	4807      	ldr	r0, [pc, #28]	; (801934c <ClearLayer+0x78>)
 8019330:	f7e8 ff94 	bl	800225c <HAL_DMA2D_Start>
 8019334:	4603      	mov	r3, r0
 8019336:	2b00      	cmp	r3, #0
 8019338:	d103      	bne.n	8019342 <ClearLayer+0x6e>
				hltdc.LayerCfg[ActiveLayer].ImageWidth, hltdc.LayerCfg[ActiveLayer].ImageHeight) == HAL_OK) {
			/* Polling For DMA transfer */
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 801933a:	2164      	movs	r1, #100	; 0x64
 801933c:	4803      	ldr	r0, [pc, #12]	; (801934c <ClearLayer+0x78>)
 801933e:	f7e8 ffcd 	bl	80022dc <HAL_DMA2D_PollForTransfer>
		}
	}
}
 8019342:	bf00      	nop
 8019344:	3704      	adds	r7, #4
 8019346:	46bd      	mov	sp, r7
 8019348:	bd90      	pop	{r4, r7, pc}
 801934a:	bf00      	nop
 801934c:	20000910 	.word	0x20000910
 8019350:	20000aa4 	.word	0x20000aa4
 8019354:	200009fc 	.word	0x200009fc

08019358 <ChangeLayers>:

// changes ActiveLayers
void ChangeLayers(void)
{
 8019358:	b580      	push	{r7, lr}
 801935a:	af00      	add	r7, sp, #0
	if(ActiveLayer == 0) {
 801935c:	4b17      	ldr	r3, [pc, #92]	; (80193bc <ChangeLayers+0x64>)
 801935e:	781b      	ldrb	r3, [r3, #0]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d112      	bne.n	801938a <ChangeLayers+0x32>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer++);
 8019364:	4b15      	ldr	r3, [pc, #84]	; (80193bc <ChangeLayers+0x64>)
 8019366:	781b      	ldrb	r3, [r3, #0]
 8019368:	1c5a      	adds	r2, r3, #1
 801936a:	b2d1      	uxtb	r1, r2
 801936c:	4a13      	ldr	r2, [pc, #76]	; (80193bc <ChangeLayers+0x64>)
 801936e:	7011      	strb	r1, [r2, #0]
 8019370:	461a      	mov	r2, r3
 8019372:	21ff      	movs	r1, #255	; 0xff
 8019374:	4812      	ldr	r0, [pc, #72]	; (80193c0 <ChangeLayers+0x68>)
 8019376:	f7ec fc1b 	bl	8005bb0 <HAL_LTDC_SetAlpha_NoReload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
 801937a:	4b10      	ldr	r3, [pc, #64]	; (80193bc <ChangeLayers+0x64>)
 801937c:	781b      	ldrb	r3, [r3, #0]
 801937e:	461a      	mov	r2, r3
 8019380:	2100      	movs	r1, #0
 8019382:	480f      	ldr	r0, [pc, #60]	; (80193c0 <ChangeLayers+0x68>)
 8019384:	f7ec fc14 	bl	8005bb0 <HAL_LTDC_SetAlpha_NoReload>
 8019388:	e011      	b.n	80193ae <ChangeLayers+0x56>
	}
	else {
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 801938a:	4b0c      	ldr	r3, [pc, #48]	; (80193bc <ChangeLayers+0x64>)
 801938c:	781b      	ldrb	r3, [r3, #0]
 801938e:	1e5a      	subs	r2, r3, #1
 8019390:	b2d1      	uxtb	r1, r2
 8019392:	4a0a      	ldr	r2, [pc, #40]	; (80193bc <ChangeLayers+0x64>)
 8019394:	7011      	strb	r1, [r2, #0]
 8019396:	461a      	mov	r2, r3
 8019398:	21ff      	movs	r1, #255	; 0xff
 801939a:	4809      	ldr	r0, [pc, #36]	; (80193c0 <ChangeLayers+0x68>)
 801939c:	f7ec fc08 	bl	8005bb0 <HAL_LTDC_SetAlpha_NoReload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
 80193a0:	4b06      	ldr	r3, [pc, #24]	; (80193bc <ChangeLayers+0x64>)
 80193a2:	781b      	ldrb	r3, [r3, #0]
 80193a4:	461a      	mov	r2, r3
 80193a6:	2100      	movs	r1, #0
 80193a8:	4805      	ldr	r0, [pc, #20]	; (80193c0 <ChangeLayers+0x68>)
 80193aa:	f7ec fc01 	bl	8005bb0 <HAL_LTDC_SetAlpha_NoReload>
	}
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80193ae:	2102      	movs	r1, #2
 80193b0:	4803      	ldr	r0, [pc, #12]	; (80193c0 <ChangeLayers+0x68>)
 80193b2:	f7ec fbc3 	bl	8005b3c <HAL_LTDC_Reload>
}
 80193b6:	bf00      	nop
 80193b8:	bd80      	pop	{r7, pc}
 80193ba:	bf00      	nop
 80193bc:	20000aa4 	.word	0x20000aa4
 80193c0:	200009fc 	.word	0x200009fc

080193c4 <DrawMenu>:

void DrawMenu()
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b0ca      	sub	sp, #296	; 0x128
 80193c8:	af02      	add	r7, sp, #8
	uint32_t backcolor = 0;
 80193ca:	2300      	movs	r3, #0
 80193cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if(menu_mode == 0) {
 80193d0:	4bbe      	ldr	r3, [pc, #760]	; (80196cc <DrawMenu+0x308>)
 80193d2:	f993 3000 	ldrsb.w	r3, [r3]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d119      	bne.n	801940e <DrawMenu+0x4a>
		//no menu -- normal play
		char string[255] = " { ";
 80193da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80193de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80193e2:	4abb      	ldr	r2, [pc, #748]	; (80196d0 <DrawMenu+0x30c>)
 80193e4:	601a      	str	r2, [r3, #0]
 80193e6:	3304      	adds	r3, #4
 80193e8:	22fb      	movs	r2, #251	; 0xfb
 80193ea:	2100      	movs	r1, #0
 80193ec:	4618      	mov	r0, r3
 80193ee:	f00c fdc3 	bl	8025f78 <memset>
		DrawString(strcat(string, rekordbox.file), 0, 20, 0x00FFFFFF, 0x000000FF);
 80193f2:	463b      	mov	r3, r7
 80193f4:	49b7      	ldr	r1, [pc, #732]	; (80196d4 <DrawMenu+0x310>)
 80193f6:	4618      	mov	r0, r3
 80193f8:	f00c fed6 	bl	80261a8 <strcat>
 80193fc:	23ff      	movs	r3, #255	; 0xff
 80193fe:	9300      	str	r3, [sp, #0]
 8019400:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019404:	2214      	movs	r2, #20
 8019406:	2100      	movs	r1, #0
 8019408:	f003 f8ca 	bl	801c5a0 <DrawString>
		while (i<DebugLines){
			DrawString(DebugText[i], 10, 21+20*(i+1), 0x00FFFFFF, backcolor);
			i++;
		}
	}
}
 801940c:	e3a1      	b.n	8019b52 <DrawMenu+0x78e>
	else if(menu_mode == 1) {
 801940e:	4baf      	ldr	r3, [pc, #700]	; (80196cc <DrawMenu+0x308>)
 8019410:	f993 3000 	ldrsb.w	r3, [r3]
 8019414:	2b01      	cmp	r3, #1
 8019416:	f040 8225 	bne.w	8019864 <DrawMenu+0x4a0>
		if(Total_tracks > 7) {
 801941a:	4baf      	ldr	r3, [pc, #700]	; (80196d8 <DrawMenu+0x314>)
 801941c:	881b      	ldrh	r3, [r3, #0]
 801941e:	2b07      	cmp	r3, #7
 8019420:	d97b      	bls.n	801951a <DrawMenu+0x156>
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 8019422:	4bad      	ldr	r3, [pc, #692]	; (80196d8 <DrawMenu+0x314>)
 8019424:	881b      	ldrh	r3, [r3, #0]
 8019426:	ee07 3a90 	vmov	s15, r3
 801942a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801942e:	eddf 6aab 	vldr	s13, [pc, #684]	; 80196dc <DrawMenu+0x318>
 8019432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019436:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 801943a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801943e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019442:	ee17 3a90 	vmov	r3, s15
 8019446:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
			uint16_t step_scroll = (140/(float)Total_tracks)*(float)str_increment;
 801944a:	4ba3      	ldr	r3, [pc, #652]	; (80196d8 <DrawMenu+0x314>)
 801944c:	881b      	ldrh	r3, [r3, #0]
 801944e:	ee07 3a90 	vmov	s15, r3
 8019452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019456:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80196dc <DrawMenu+0x318>
 801945a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801945e:	4ba0      	ldr	r3, [pc, #640]	; (80196e0 <DrawMenu+0x31c>)
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	ee07 3a90 	vmov	s15, r3
 8019466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801946a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801946e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019472:	ee17 3a90 	vmov	r3, s15
 8019476:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			if(scroll_lenght < 5) scroll_lenght = 5;
 801947a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 801947e:	2b04      	cmp	r3, #4
 8019480:	d802      	bhi.n	8019488 <DrawMenu+0xc4>
 8019482:	2305      	movs	r3, #5
 8019484:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
			VLine(1, 21, 140, 0x00FFFFFF);
 8019488:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801948c:	228c      	movs	r2, #140	; 0x8c
 801948e:	2115      	movs	r1, #21
 8019490:	2001      	movs	r0, #1
 8019492:	f002 f8bb 	bl	801b60c <VLine>
			VLine(3, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 8019496:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 801949a:	3316      	adds	r3, #22
 801949c:	b299      	uxth	r1, r3
 801949e:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80194a2:	3b02      	subs	r3, #2
 80194a4:	b29a      	uxth	r2, r3
 80194a6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80194aa:	2003      	movs	r0, #3
 80194ac:	f002 f8ae 	bl	801b60c <VLine>
			VLine(4, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80194b0:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80194b4:	3315      	adds	r3, #21
 80194b6:	b299      	uxth	r1, r3
 80194b8:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 80194bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80194c0:	2004      	movs	r0, #4
 80194c2:	f002 f8a3 	bl	801b60c <VLine>
			VLine(5, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80194c6:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80194ca:	3315      	adds	r3, #21
 80194cc:	b299      	uxth	r1, r3
 80194ce:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 80194d2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80194d6:	2005      	movs	r0, #5
 80194d8:	f002 f898 	bl	801b60c <VLine>
			VLine(6, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80194dc:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80194e0:	3315      	adds	r3, #21
 80194e2:	b299      	uxth	r1, r3
 80194e4:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 80194e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80194ec:	2006      	movs	r0, #6
 80194ee:	f002 f88d 	bl	801b60c <VLine>
			VLine(7, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 80194f2:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80194f6:	3316      	adds	r3, #22
 80194f8:	b299      	uxth	r1, r3
 80194fa:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80194fe:	3b02      	subs	r3, #2
 8019500:	b29a      	uxth	r2, r3
 8019502:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019506:	2007      	movs	r0, #7
 8019508:	f002 f880 	bl	801b60c <VLine>
			VLine(9, 21, 140, 0x00FFFFFF);
 801950c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019510:	228c      	movs	r2, #140	; 0x8c
 8019512:	2115      	movs	r1, #21
 8019514:	2009      	movs	r0, #9
 8019516:	f002 f879 	bl	801b60c <VLine>
		DrawString(" [FILES]", 0, 20, 0x00FFFFFF, 0x000000FF);
 801951a:	23ff      	movs	r3, #255	; 0xff
 801951c:	9300      	str	r3, [sp, #0]
 801951e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019522:	2214      	movs	r2, #20
 8019524:	2100      	movs	r1, #0
 8019526:	486f      	ldr	r0, [pc, #444]	; (80196e4 <DrawMenu+0x320>)
 8019528:	f003 f83a 	bl	801c5a0 <DrawString>
		int i = 0;
 801952c:	2300      	movs	r3, #0
 801952e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		while(21+20*(i+1) < 165) {
 8019532:	e17f      	b.n	8019834 <DrawMenu+0x470>
			char string[255] = "{ ";
 8019534:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8019538:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801953c:	f242 027b 	movw	r2, #8315	; 0x207b
 8019540:	601a      	str	r2, [r3, #0]
 8019542:	3304      	adds	r3, #4
 8019544:	22fb      	movs	r2, #251	; 0xfb
 8019546:	2100      	movs	r1, #0
 8019548:	4618      	mov	r0, r3
 801954a:	f00c fd15 	bl	8025f78 <memset>
			if(i == Track_number - str_increment) {
 801954e:	4b66      	ldr	r3, [pc, #408]	; (80196e8 <DrawMenu+0x324>)
 8019550:	681a      	ldr	r2, [r3, #0]
 8019552:	4b63      	ldr	r3, [pc, #396]	; (80196e0 <DrawMenu+0x31c>)
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	1ad3      	subs	r3, r2, r3
 8019558:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801955c:	429a      	cmp	r2, r3
 801955e:	d159      	bne.n	8019614 <DrawMenu+0x250>
				if(i == Mark_number) {
 8019560:	4b62      	ldr	r3, [pc, #392]	; (80196ec <DrawMenu+0x328>)
 8019562:	781b      	ldrb	r3, [r3, #0]
 8019564:	461a      	mov	r2, r3
 8019566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801956a:	4293      	cmp	r3, r2
 801956c:	d121      	bne.n	80195b2 <DrawMenu+0x1ee>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 801956e:	4b5c      	ldr	r3, [pc, #368]	; (80196e0 <DrawMenu+0x31c>)
 8019570:	681a      	ldr	r2, [r3, #0]
 8019572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019576:	441a      	add	r2, r3
 8019578:	4613      	mov	r3, r2
 801957a:	021b      	lsls	r3, r3, #8
 801957c:	1a9b      	subs	r3, r3, r2
 801957e:	4a5c      	ldr	r2, [pc, #368]	; (80196f0 <DrawMenu+0x32c>)
 8019580:	441a      	add	r2, r3
 8019582:	463b      	mov	r3, r7
 8019584:	4611      	mov	r1, r2
 8019586:	4618      	mov	r0, r3
 8019588:	f00c fe0e 	bl	80261a8 <strcat>
 801958c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019590:	3301      	adds	r3, #1
 8019592:	b29b      	uxth	r3, r3
 8019594:	461a      	mov	r2, r3
 8019596:	0092      	lsls	r2, r2, #2
 8019598:	4413      	add	r3, r2
 801959a:	009b      	lsls	r3, r3, #2
 801959c:	b29b      	uxth	r3, r3
 801959e:	3315      	adds	r3, #21
 80195a0:	b29a      	uxth	r2, r3
 80195a2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80195a6:	9300      	str	r3, [sp, #0]
 80195a8:	2300      	movs	r3, #0
 80195aa:	210b      	movs	r1, #11
 80195ac:	f002 fff8 	bl	801c5a0 <DrawString>
 80195b0:	e020      	b.n	80195f4 <DrawMenu+0x230>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, 0x000000FF);
 80195b2:	4b4b      	ldr	r3, [pc, #300]	; (80196e0 <DrawMenu+0x31c>)
 80195b4:	681a      	ldr	r2, [r3, #0]
 80195b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80195ba:	441a      	add	r2, r3
 80195bc:	4613      	mov	r3, r2
 80195be:	021b      	lsls	r3, r3, #8
 80195c0:	1a9b      	subs	r3, r3, r2
 80195c2:	4a4b      	ldr	r2, [pc, #300]	; (80196f0 <DrawMenu+0x32c>)
 80195c4:	441a      	add	r2, r3
 80195c6:	463b      	mov	r3, r7
 80195c8:	4611      	mov	r1, r2
 80195ca:	4618      	mov	r0, r3
 80195cc:	f00c fdec 	bl	80261a8 <strcat>
 80195d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80195d4:	3301      	adds	r3, #1
 80195d6:	b29b      	uxth	r3, r3
 80195d8:	461a      	mov	r2, r3
 80195da:	0092      	lsls	r2, r2, #2
 80195dc:	4413      	add	r3, r2
 80195de:	009b      	lsls	r3, r3, #2
 80195e0:	b29b      	uxth	r3, r3
 80195e2:	3315      	adds	r3, #21
 80195e4:	b29a      	uxth	r2, r3
 80195e6:	23ff      	movs	r3, #255	; 0xff
 80195e8:	9300      	str	r3, [sp, #0]
 80195ea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80195ee:	210b      	movs	r1, #11
 80195f0:	f002 ffd6 	bl	801c5a0 <DrawString>
				backcolor += 0x00202020;
 80195f4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80195f8:	4b3e      	ldr	r3, [pc, #248]	; (80196f4 <DrawMenu+0x330>)
 80195fa:	4413      	add	r3, r2
 80195fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				if(backcolor > 0x00404040) backcolor = 0;
 8019600:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019604:	4a3c      	ldr	r2, [pc, #240]	; (80196f8 <DrawMenu+0x334>)
 8019606:	4293      	cmp	r3, r2
 8019608:	f240 8106 	bls.w	8019818 <DrawMenu+0x454>
 801960c:	2300      	movs	r3, #0
 801960e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8019612:	e101      	b.n	8019818 <DrawMenu+0x454>
			else if(i == String_number) {
 8019614:	4b39      	ldr	r3, [pc, #228]	; (80196fc <DrawMenu+0x338>)
 8019616:	781b      	ldrb	r3, [r3, #0]
 8019618:	461a      	mov	r2, r3
 801961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801961e:	4293      	cmp	r3, r2
 8019620:	f040 80a1 	bne.w	8019766 <DrawMenu+0x3a2>
				if(str_offset > 10) {
 8019624:	4b36      	ldr	r3, [pc, #216]	; (8019700 <DrawMenu+0x33c>)
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	2b0a      	cmp	r3, #10
 801962a:	dd26      	ble.n	801967a <DrawMenu+0x2b6>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11 + str_offset, 21+20*(i+1), 0x00FFFFFF, 0x00008F00);
 801962c:	4b2c      	ldr	r3, [pc, #176]	; (80196e0 <DrawMenu+0x31c>)
 801962e:	681a      	ldr	r2, [r3, #0]
 8019630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019634:	441a      	add	r2, r3
 8019636:	4613      	mov	r3, r2
 8019638:	021b      	lsls	r3, r3, #8
 801963a:	1a9b      	subs	r3, r3, r2
 801963c:	4a2c      	ldr	r2, [pc, #176]	; (80196f0 <DrawMenu+0x32c>)
 801963e:	441a      	add	r2, r3
 8019640:	463b      	mov	r3, r7
 8019642:	4611      	mov	r1, r2
 8019644:	4618      	mov	r0, r3
 8019646:	f00c fdaf 	bl	80261a8 <strcat>
 801964a:	4b2d      	ldr	r3, [pc, #180]	; (8019700 <DrawMenu+0x33c>)
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	b29b      	uxth	r3, r3
 8019650:	330b      	adds	r3, #11
 8019652:	b299      	uxth	r1, r3
 8019654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019658:	3301      	adds	r3, #1
 801965a:	b29b      	uxth	r3, r3
 801965c:	461a      	mov	r2, r3
 801965e:	0092      	lsls	r2, r2, #2
 8019660:	4413      	add	r3, r2
 8019662:	009b      	lsls	r3, r3, #2
 8019664:	b29b      	uxth	r3, r3
 8019666:	3315      	adds	r3, #21
 8019668:	b29a      	uxth	r2, r3
 801966a:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 801966e:	9300      	str	r3, [sp, #0]
 8019670:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019674:	f002 ff94 	bl	801c5a0 <DrawString>
 8019678:	e066      	b.n	8019748 <DrawMenu+0x384>
					if(i == Mark_number) {
 801967a:	4b1c      	ldr	r3, [pc, #112]	; (80196ec <DrawMenu+0x328>)
 801967c:	781b      	ldrb	r3, [r3, #0]
 801967e:	461a      	mov	r2, r3
 8019680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019684:	4293      	cmp	r3, r2
 8019686:	d13d      	bne.n	8019704 <DrawMenu+0x340>
						DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 8019688:	4b15      	ldr	r3, [pc, #84]	; (80196e0 <DrawMenu+0x31c>)
 801968a:	681a      	ldr	r2, [r3, #0]
 801968c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019690:	441a      	add	r2, r3
 8019692:	4613      	mov	r3, r2
 8019694:	021b      	lsls	r3, r3, #8
 8019696:	1a9b      	subs	r3, r3, r2
 8019698:	4a15      	ldr	r2, [pc, #84]	; (80196f0 <DrawMenu+0x32c>)
 801969a:	441a      	add	r2, r3
 801969c:	463b      	mov	r3, r7
 801969e:	4611      	mov	r1, r2
 80196a0:	4618      	mov	r0, r3
 80196a2:	f00c fd81 	bl	80261a8 <strcat>
 80196a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80196aa:	3301      	adds	r3, #1
 80196ac:	b29b      	uxth	r3, r3
 80196ae:	461a      	mov	r2, r3
 80196b0:	0092      	lsls	r2, r2, #2
 80196b2:	4413      	add	r3, r2
 80196b4:	009b      	lsls	r3, r3, #2
 80196b6:	b29b      	uxth	r3, r3
 80196b8:	3315      	adds	r3, #21
 80196ba:	b29a      	uxth	r2, r3
 80196bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80196c0:	9300      	str	r3, [sp, #0]
 80196c2:	2300      	movs	r3, #0
 80196c4:	210b      	movs	r1, #11
 80196c6:	f002 ff6b 	bl	801c5a0 <DrawString>
 80196ca:	e03d      	b.n	8019748 <DrawMenu+0x384>
 80196cc:	200007e0 	.word	0x200007e0
 80196d0:	00207b20 	.word	0x00207b20
 80196d4:	2001556c 	.word	0x2001556c
 80196d8:	20001f94 	.word	0x20001f94
 80196dc:	430c0000 	.word	0x430c0000
 80196e0:	2001819c 	.word	0x2001819c
 80196e4:	08026c34 	.word	0x08026c34
 80196e8:	20000aa8 	.word	0x20000aa8
 80196ec:	20000094 	.word	0x20000094
 80196f0:	20001f98 	.word	0x20001f98
 80196f4:	00202020 	.word	0x00202020
 80196f8:	00404040 	.word	0x00404040
 80196fc:	20000090 	.word	0x20000090
 8019700:	20018198 	.word	0x20018198
						DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, backcolor);
 8019704:	4b51      	ldr	r3, [pc, #324]	; (801984c <DrawMenu+0x488>)
 8019706:	681a      	ldr	r2, [r3, #0]
 8019708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801970c:	441a      	add	r2, r3
 801970e:	4613      	mov	r3, r2
 8019710:	021b      	lsls	r3, r3, #8
 8019712:	1a9b      	subs	r3, r3, r2
 8019714:	4a4e      	ldr	r2, [pc, #312]	; (8019850 <DrawMenu+0x48c>)
 8019716:	441a      	add	r2, r3
 8019718:	463b      	mov	r3, r7
 801971a:	4611      	mov	r1, r2
 801971c:	4618      	mov	r0, r3
 801971e:	f00c fd43 	bl	80261a8 <strcat>
 8019722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019726:	3301      	adds	r3, #1
 8019728:	b29b      	uxth	r3, r3
 801972a:	461a      	mov	r2, r3
 801972c:	0092      	lsls	r2, r2, #2
 801972e:	4413      	add	r3, r2
 8019730:	009b      	lsls	r3, r3, #2
 8019732:	b29b      	uxth	r3, r3
 8019734:	3315      	adds	r3, #21
 8019736:	b29a      	uxth	r2, r3
 8019738:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801973c:	9300      	str	r3, [sp, #0]
 801973e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019742:	210b      	movs	r1, #11
 8019744:	f002 ff2c 	bl	801c5a0 <DrawString>
				backcolor += 0x00202020;
 8019748:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801974c:	4b41      	ldr	r3, [pc, #260]	; (8019854 <DrawMenu+0x490>)
 801974e:	4413      	add	r3, r2
 8019750:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				if(backcolor > 0x00404040) backcolor = 0;
 8019754:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019758:	4a3f      	ldr	r2, [pc, #252]	; (8019858 <DrawMenu+0x494>)
 801975a:	4293      	cmp	r3, r2
 801975c:	d95c      	bls.n	8019818 <DrawMenu+0x454>
 801975e:	2300      	movs	r3, #0
 8019760:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8019764:	e058      	b.n	8019818 <DrawMenu+0x454>
				if(i == Mark_number) {
 8019766:	4b3d      	ldr	r3, [pc, #244]	; (801985c <DrawMenu+0x498>)
 8019768:	781b      	ldrb	r3, [r3, #0]
 801976a:	461a      	mov	r2, r3
 801976c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019770:	4293      	cmp	r3, r2
 8019772:	d121      	bne.n	80197b8 <DrawMenu+0x3f4>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 8019774:	4b35      	ldr	r3, [pc, #212]	; (801984c <DrawMenu+0x488>)
 8019776:	681a      	ldr	r2, [r3, #0]
 8019778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801977c:	441a      	add	r2, r3
 801977e:	4613      	mov	r3, r2
 8019780:	021b      	lsls	r3, r3, #8
 8019782:	1a9b      	subs	r3, r3, r2
 8019784:	4a32      	ldr	r2, [pc, #200]	; (8019850 <DrawMenu+0x48c>)
 8019786:	441a      	add	r2, r3
 8019788:	463b      	mov	r3, r7
 801978a:	4611      	mov	r1, r2
 801978c:	4618      	mov	r0, r3
 801978e:	f00c fd0b 	bl	80261a8 <strcat>
 8019792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019796:	3301      	adds	r3, #1
 8019798:	b29b      	uxth	r3, r3
 801979a:	461a      	mov	r2, r3
 801979c:	0092      	lsls	r2, r2, #2
 801979e:	4413      	add	r3, r2
 80197a0:	009b      	lsls	r3, r3, #2
 80197a2:	b29b      	uxth	r3, r3
 80197a4:	3315      	adds	r3, #21
 80197a6:	b29a      	uxth	r2, r3
 80197a8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80197ac:	9300      	str	r3, [sp, #0]
 80197ae:	2300      	movs	r3, #0
 80197b0:	210b      	movs	r1, #11
 80197b2:	f002 fef5 	bl	801c5a0 <DrawString>
 80197b6:	e021      	b.n	80197fc <DrawMenu+0x438>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, backcolor);
 80197b8:	4b24      	ldr	r3, [pc, #144]	; (801984c <DrawMenu+0x488>)
 80197ba:	681a      	ldr	r2, [r3, #0]
 80197bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80197c0:	441a      	add	r2, r3
 80197c2:	4613      	mov	r3, r2
 80197c4:	021b      	lsls	r3, r3, #8
 80197c6:	1a9b      	subs	r3, r3, r2
 80197c8:	4a21      	ldr	r2, [pc, #132]	; (8019850 <DrawMenu+0x48c>)
 80197ca:	441a      	add	r2, r3
 80197cc:	463b      	mov	r3, r7
 80197ce:	4611      	mov	r1, r2
 80197d0:	4618      	mov	r0, r3
 80197d2:	f00c fce9 	bl	80261a8 <strcat>
 80197d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80197da:	3301      	adds	r3, #1
 80197dc:	b29b      	uxth	r3, r3
 80197de:	461a      	mov	r2, r3
 80197e0:	0092      	lsls	r2, r2, #2
 80197e2:	4413      	add	r3, r2
 80197e4:	009b      	lsls	r3, r3, #2
 80197e6:	b29b      	uxth	r3, r3
 80197e8:	3315      	adds	r3, #21
 80197ea:	b29a      	uxth	r2, r3
 80197ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80197f0:	9300      	str	r3, [sp, #0]
 80197f2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80197f6:	210b      	movs	r1, #11
 80197f8:	f002 fed2 	bl	801c5a0 <DrawString>
				backcolor += 0x00202020;
 80197fc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8019800:	4b14      	ldr	r3, [pc, #80]	; (8019854 <DrawMenu+0x490>)
 8019802:	4413      	add	r3, r2
 8019804:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				if(backcolor > 0x00404040) backcolor = 0;
 8019808:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801980c:	4a12      	ldr	r2, [pc, #72]	; (8019858 <DrawMenu+0x494>)
 801980e:	4293      	cmp	r3, r2
 8019810:	d902      	bls.n	8019818 <DrawMenu+0x454>
 8019812:	2300      	movs	r3, #0
 8019814:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			i++;
 8019818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801981c:	3301      	adds	r3, #1
 801981e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			if(i >= Total_tracks) break;
 8019822:	4b0f      	ldr	r3, [pc, #60]	; (8019860 <DrawMenu+0x49c>)
 8019824:	881b      	ldrh	r3, [r3, #0]
 8019826:	461a      	mov	r2, r3
 8019828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801982c:	4293      	cmp	r3, r2
 801982e:	db01      	blt.n	8019834 <DrawMenu+0x470>
 8019830:	bf00      	nop
}
 8019832:	e18e      	b.n	8019b52 <DrawMenu+0x78e>
		while(21+20*(i+1) < 165) {
 8019834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8019838:	1c5a      	adds	r2, r3, #1
 801983a:	4613      	mov	r3, r2
 801983c:	009b      	lsls	r3, r3, #2
 801983e:	4413      	add	r3, r2
 8019840:	009b      	lsls	r3, r3, #2
 8019842:	2b8f      	cmp	r3, #143	; 0x8f
 8019844:	f77f ae76 	ble.w	8019534 <DrawMenu+0x170>
}
 8019848:	e183      	b.n	8019b52 <DrawMenu+0x78e>
 801984a:	bf00      	nop
 801984c:	2001819c 	.word	0x2001819c
 8019850:	20001f98 	.word	0x20001f98
 8019854:	00202020 	.word	0x00202020
 8019858:	00404040 	.word	0x00404040
 801985c:	20000094 	.word	0x20000094
 8019860:	20001f94 	.word	0x20001f94
	else if(menu_mode == 2) {
 8019864:	4bbd      	ldr	r3, [pc, #756]	; (8019b5c <DrawMenu+0x798>)
 8019866:	f993 3000 	ldrsb.w	r3, [r3]
 801986a:	2b02      	cmp	r3, #2
 801986c:	f040 8137 	bne.w	8019ade <DrawMenu+0x71a>
		DrawString(" [SETTINGS]", 0, 20, 0x00FFFFFF, 0x000000FF);
 8019870:	23ff      	movs	r3, #255	; 0xff
 8019872:	9300      	str	r3, [sp, #0]
 8019874:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019878:	2214      	movs	r2, #20
 801987a:	2100      	movs	r1, #0
 801987c:	48b8      	ldr	r0, [pc, #736]	; (8019b60 <DrawMenu+0x79c>)
 801987e:	f002 fe8f 	bl	801c5a0 <DrawString>
		backcolor += 0x00202020;
 8019882:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8019886:	4bb7      	ldr	r3, [pc, #732]	; (8019b64 <DrawMenu+0x7a0>)
 8019888:	4413      	add	r3, r2
 801988a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		char stri[50] = {0};
 801988e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8019892:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019896:	2200      	movs	r2, #0
 8019898:	601a      	str	r2, [r3, #0]
 801989a:	3304      	adds	r3, #4
 801989c:	222e      	movs	r2, #46	; 0x2e
 801989e:	2100      	movs	r1, #0
 80198a0:	4618      	mov	r0, r3
 80198a2:	f00c fb69 	bl	8025f78 <memset>
		sprintf(stri, "%s %d %s", " Volume", volume, "%");
 80198a6:	4bb0      	ldr	r3, [pc, #704]	; (8019b68 <DrawMenu+0x7a4>)
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	461a      	mov	r2, r3
 80198ac:	4638      	mov	r0, r7
 80198ae:	4baf      	ldr	r3, [pc, #700]	; (8019b6c <DrawMenu+0x7a8>)
 80198b0:	9300      	str	r3, [sp, #0]
 80198b2:	4613      	mov	r3, r2
 80198b4:	4aae      	ldr	r2, [pc, #696]	; (8019b70 <DrawMenu+0x7ac>)
 80198b6:	49af      	ldr	r1, [pc, #700]	; (8019b74 <DrawMenu+0x7b0>)
 80198b8:	f00c fc56 	bl	8026168 <siprintf>
		DrawString(stri, 0, 40, 0x00FFFFFF, backcolor);
 80198bc:	4638      	mov	r0, r7
 80198be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80198c2:	9300      	str	r3, [sp, #0]
 80198c4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80198c8:	2228      	movs	r2, #40	; 0x28
 80198ca:	2100      	movs	r1, #0
 80198cc:	f002 fe68 	bl	801c5a0 <DrawString>
		VLine(40, 41, 18, 0x00FFFFFF);
 80198d0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80198d4:	2212      	movs	r2, #18
 80198d6:	2129      	movs	r1, #41	; 0x29
 80198d8:	2028      	movs	r0, #40	; 0x28
 80198da:	f001 fe97 	bl	801b60c <VLine>
		VLine(440, 41, 18, 0x00FFFFFF);
 80198de:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80198e2:	2212      	movs	r2, #18
 80198e4:	2129      	movs	r1, #41	; 0x29
 80198e6:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80198ea:	f001 fe8f 	bl	801b60c <VLine>
		HLine(40, 41, 400, 0x00FFFFFF);
 80198ee:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80198f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80198f6:	2129      	movs	r1, #41	; 0x29
 80198f8:	2028      	movs	r0, #40	; 0x28
 80198fa:	f001 fef1 	bl	801b6e0 <HLine>
		HLine(40, 59, 401, 0x00FFFFFF);
 80198fe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019902:	f240 1291 	movw	r2, #401	; 0x191
 8019906:	213b      	movs	r1, #59	; 0x3b
 8019908:	2028      	movs	r0, #40	; 0x28
 801990a:	f001 fee9 	bl	801b6e0 <HLine>
		uint32_t vol_pos = (float)volume/100*400;
 801990e:	4b96      	ldr	r3, [pc, #600]	; (8019b68 <DrawMenu+0x7a4>)
 8019910:	781b      	ldrb	r3, [r3, #0]
 8019912:	ee07 3a90 	vmov	s15, r3
 8019916:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801991a:	eddf 6a97 	vldr	s13, [pc, #604]	; 8019b78 <DrawMenu+0x7b4>
 801991e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019922:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8019b7c <DrawMenu+0x7b8>
 8019926:	ee67 7a87 	vmul.f32	s15, s15, s14
 801992a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801992e:	ee17 3a90 	vmov	r3, s15
 8019932:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if(vol_pos != 0) Rectangle(40, 42, vol_pos, 17, 0x00FFFFFF);
 8019936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801993a:	2b00      	cmp	r3, #0
 801993c:	d00a      	beq.n	8019954 <DrawMenu+0x590>
 801993e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8019942:	b29a      	uxth	r2, r3
 8019944:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019948:	9300      	str	r3, [sp, #0]
 801994a:	2311      	movs	r3, #17
 801994c:	212a      	movs	r1, #42	; 0x2a
 801994e:	2028      	movs	r0, #40	; 0x28
 8019950:	f001 ff26 	bl	801b7a0 <Rectangle>
		backcolor += 0x00202020;
 8019954:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8019958:	4b82      	ldr	r3, [pc, #520]	; (8019b64 <DrawMenu+0x7a0>)
 801995a:	4413      	add	r3, r2
 801995c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 8019960:	4b87      	ldr	r3, [pc, #540]	; (8019b80 <DrawMenu+0x7bc>)
 8019962:	edd3 7a00 	vldr	s15, [r3]
 8019966:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8019b84 <DrawMenu+0x7c0>
 801996a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801996e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019972:	ee17 3a90 	vmov	r3, s15
 8019976:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 801997a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801997e:	4638      	mov	r0, r7
 8019980:	4a7a      	ldr	r2, [pc, #488]	; (8019b6c <DrawMenu+0x7a8>)
 8019982:	9200      	str	r2, [sp, #0]
 8019984:	4a80      	ldr	r2, [pc, #512]	; (8019b88 <DrawMenu+0x7c4>)
 8019986:	497b      	ldr	r1, [pc, #492]	; (8019b74 <DrawMenu+0x7b0>)
 8019988:	f00c fbee 	bl	8026168 <siprintf>
		DrawString(stri, 0, 80, 0x00FFFFFF, backcolor);
 801998c:	4638      	mov	r0, r7
 801998e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019992:	9300      	str	r3, [sp, #0]
 8019994:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019998:	2250      	movs	r2, #80	; 0x50
 801999a:	2100      	movs	r1, #0
 801999c:	f002 fe00 	bl	801c5a0 <DrawString>
		VLine(40, 81, 18, 0x00FFFFFF);
 80199a0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80199a4:	2212      	movs	r2, #18
 80199a6:	2151      	movs	r1, #81	; 0x51
 80199a8:	2028      	movs	r0, #40	; 0x28
 80199aa:	f001 fe2f 	bl	801b60c <VLine>
		VLine(440, 81, 18, 0x00FFFFFF);
 80199ae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80199b2:	2212      	movs	r2, #18
 80199b4:	2151      	movs	r1, #81	; 0x51
 80199b6:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80199ba:	f001 fe27 	bl	801b60c <VLine>
		HLine(40, 81, 400, 0x00FFFFFF);
 80199be:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80199c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80199c6:	2151      	movs	r1, #81	; 0x51
 80199c8:	2028      	movs	r0, #40	; 0x28
 80199ca:	f001 fe89 	bl	801b6e0 <HLine>
		HLine(40, 99, 401, 0x00FFFFFF);
 80199ce:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80199d2:	f240 1291 	movw	r2, #401	; 0x191
 80199d6:	2163      	movs	r1, #99	; 0x63
 80199d8:	2028      	movs	r0, #40	; 0x28
 80199da:	f001 fe81 	bl	801b6e0 <HLine>
		jogsens_pos *= 4;
 80199de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80199e2:	009b      	lsls	r3, r3, #2
 80199e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(jogsens_pos != 0) Rectangle(40, 82, jogsens_pos, 17, 0x00FFFFFF);
 80199e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d00a      	beq.n	8019a06 <DrawMenu+0x642>
 80199f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80199f4:	b29a      	uxth	r2, r3
 80199f6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80199fa:	9300      	str	r3, [sp, #0]
 80199fc:	2311      	movs	r3, #17
 80199fe:	2152      	movs	r1, #82	; 0x52
 8019a00:	2028      	movs	r0, #40	; 0x28
 8019a02:	f001 fecd 	bl	801b7a0 <Rectangle>
		backcolor += 0x00202020;
 8019a06:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8019a0a:	4b56      	ldr	r3, [pc, #344]	; (8019b64 <DrawMenu+0x7a0>)
 8019a0c:	4413      	add	r3, r2
 8019a0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		sprintf(stri, "%s %d %s", " Auto cue sensitivity", (int)((float)acue_sensitivity/250*100), "%");
 8019a12:	4b5e      	ldr	r3, [pc, #376]	; (8019b8c <DrawMenu+0x7c8>)
 8019a14:	781b      	ldrb	r3, [r3, #0]
 8019a16:	ee07 3a90 	vmov	s15, r3
 8019a1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8019a1e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8019b90 <DrawMenu+0x7cc>
 8019a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019a26:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8019b78 <DrawMenu+0x7b4>
 8019a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a32:	4638      	mov	r0, r7
 8019a34:	4b4d      	ldr	r3, [pc, #308]	; (8019b6c <DrawMenu+0x7a8>)
 8019a36:	9300      	str	r3, [sp, #0]
 8019a38:	ee17 3a90 	vmov	r3, s15
 8019a3c:	4a55      	ldr	r2, [pc, #340]	; (8019b94 <DrawMenu+0x7d0>)
 8019a3e:	494d      	ldr	r1, [pc, #308]	; (8019b74 <DrawMenu+0x7b0>)
 8019a40:	f00c fb92 	bl	8026168 <siprintf>
		DrawString(stri, 0, 120, 0x00FFFFFF, backcolor);
 8019a44:	4638      	mov	r0, r7
 8019a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019a4a:	9300      	str	r3, [sp, #0]
 8019a4c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019a50:	2278      	movs	r2, #120	; 0x78
 8019a52:	2100      	movs	r1, #0
 8019a54:	f002 fda4 	bl	801c5a0 <DrawString>
		VLine(40, 121, 18, 0x00FFFFFF);
 8019a58:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019a5c:	2212      	movs	r2, #18
 8019a5e:	2179      	movs	r1, #121	; 0x79
 8019a60:	2028      	movs	r0, #40	; 0x28
 8019a62:	f001 fdd3 	bl	801b60c <VLine>
		VLine(440, 121, 18, 0x00FFFFFF);
 8019a66:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019a6a:	2212      	movs	r2, #18
 8019a6c:	2179      	movs	r1, #121	; 0x79
 8019a6e:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8019a72:	f001 fdcb 	bl	801b60c <VLine>
		HLine(40, 121, 400, 0x00FFFFFF);
 8019a76:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019a7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8019a7e:	2179      	movs	r1, #121	; 0x79
 8019a80:	2028      	movs	r0, #40	; 0x28
 8019a82:	f001 fe2d 	bl	801b6e0 <HLine>
		HLine(40, 139, 401, 0x00FFFFFF);
 8019a86:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019a8a:	f240 1291 	movw	r2, #401	; 0x191
 8019a8e:	218b      	movs	r1, #139	; 0x8b
 8019a90:	2028      	movs	r0, #40	; 0x28
 8019a92:	f001 fe25 	bl	801b6e0 <HLine>
		uint32_t acu_pos = (float)acue_sensitivity/250*400;
 8019a96:	4b3d      	ldr	r3, [pc, #244]	; (8019b8c <DrawMenu+0x7c8>)
 8019a98:	781b      	ldrb	r3, [r3, #0]
 8019a9a:	ee07 3a90 	vmov	s15, r3
 8019a9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8019aa2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8019b90 <DrawMenu+0x7cc>
 8019aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019aaa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019b7c <DrawMenu+0x7b8>
 8019aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019ab6:	ee17 3a90 	vmov	r3, s15
 8019aba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		if(acu_pos != 0) Rectangle(40, 122, acu_pos, 17, 0x00FFFFFF);
 8019abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d045      	beq.n	8019b52 <DrawMenu+0x78e>
 8019ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8019aca:	b29a      	uxth	r2, r3
 8019acc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019ad0:	9300      	str	r3, [sp, #0]
 8019ad2:	2311      	movs	r3, #17
 8019ad4:	217a      	movs	r1, #122	; 0x7a
 8019ad6:	2028      	movs	r0, #40	; 0x28
 8019ad8:	f001 fe62 	bl	801b7a0 <Rectangle>
}
 8019adc:	e039      	b.n	8019b52 <DrawMenu+0x78e>
	else if(menu_mode == 3) {
 8019ade:	4b1f      	ldr	r3, [pc, #124]	; (8019b5c <DrawMenu+0x798>)
 8019ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8019ae4:	2b03      	cmp	r3, #3
 8019ae6:	d134      	bne.n	8019b52 <DrawMenu+0x78e>
		DrawString("ERROR! INSERT SD CARD or USB storage!", 0, 20, 0x00FFFFFF, 0x00FF0000);
 8019ae8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8019aec:	9300      	str	r3, [sp, #0]
 8019aee:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019af2:	2214      	movs	r2, #20
 8019af4:	2100      	movs	r1, #0
 8019af6:	4828      	ldr	r0, [pc, #160]	; (8019b98 <DrawMenu+0x7d4>)
 8019af8:	f002 fd52 	bl	801c5a0 <DrawString>
		uint8_t i=0;
 8019afc:	2300      	movs	r3, #0
 8019afe:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		while (i<DebugLines){
 8019b02:	e020      	b.n	8019b46 <DrawMenu+0x782>
			DrawString(DebugText[i], 10, 21+20*(i+1), 0x00FFFFFF, backcolor);
 8019b04:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8019b08:	4613      	mov	r3, r2
 8019b0a:	009b      	lsls	r3, r3, #2
 8019b0c:	4413      	add	r3, r2
 8019b0e:	009a      	lsls	r2, r3, #2
 8019b10:	4413      	add	r3, r2
 8019b12:	4a22      	ldr	r2, [pc, #136]	; (8019b9c <DrawMenu+0x7d8>)
 8019b14:	1898      	adds	r0, r3, r2
 8019b16:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8019b1a:	3301      	adds	r3, #1
 8019b1c:	b29b      	uxth	r3, r3
 8019b1e:	461a      	mov	r2, r3
 8019b20:	0092      	lsls	r2, r2, #2
 8019b22:	4413      	add	r3, r2
 8019b24:	009b      	lsls	r3, r3, #2
 8019b26:	b29b      	uxth	r3, r3
 8019b28:	3315      	adds	r3, #21
 8019b2a:	b29a      	uxth	r2, r3
 8019b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019b30:	9300      	str	r3, [sp, #0]
 8019b32:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019b36:	210a      	movs	r1, #10
 8019b38:	f002 fd32 	bl	801c5a0 <DrawString>
			i++;
 8019b3c:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8019b40:	3301      	adds	r3, #1
 8019b42:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		while (i<DebugLines){
 8019b46:	4b16      	ldr	r3, [pc, #88]	; (8019ba0 <DrawMenu+0x7dc>)
 8019b48:	781b      	ldrb	r3, [r3, #0]
 8019b4a:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8019b4e:	429a      	cmp	r2, r3
 8019b50:	d3d8      	bcc.n	8019b04 <DrawMenu+0x740>
}
 8019b52:	bf00      	nop
 8019b54:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	bd80      	pop	{r7, pc}
 8019b5c:	200007e0 	.word	0x200007e0
 8019b60:	08026c40 	.word	0x08026c40
 8019b64:	00202020 	.word	0x00202020
 8019b68:	20000058 	.word	0x20000058
 8019b6c:	08026c60 	.word	0x08026c60
 8019b70:	08026c4c 	.word	0x08026c4c
 8019b74:	08026c54 	.word	0x08026c54
 8019b78:	42c80000 	.word	0x42c80000
 8019b7c:	43c80000 	.word	0x43c80000
 8019b80:	2000009c 	.word	0x2000009c
 8019b84:	461c4000 	.word	0x461c4000
 8019b88:	08026c64 	.word	0x08026c64
 8019b8c:	20000059 	.word	0x20000059
 8019b90:	437a0000 	.word	0x437a0000
 8019b94:	08026c78 	.word	0x08026c78
 8019b98:	08026c90 	.word	0x08026c90
 8019b9c:	200007e4 	.word	0x200007e4
 8019ba0:	200008de 	.word	0x200008de

08019ba4 <DrawLowSpectrum>:

// draws low resolution spectrum on the selected ActiveLayer
void DrawLowSpectrum()
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b088      	sub	sp, #32
 8019ba8:	af02      	add	r7, sp, #8
	uint32_t i, color, height;
	for(i = 0; i < 400; i++)
 8019baa:	2300      	movs	r3, #0
 8019bac:	617b      	str	r3, [r7, #20]
 8019bae:	e033      	b.n	8019c18 <DrawLowSpectrum+0x74>
	{
		color = (uint32_t)(lowp_wavebuffer[i] & 0xE0); // read color data - first 3 bits
 8019bb0:	4a92      	ldr	r2, [pc, #584]	; (8019dfc <DrawLowSpectrum+0x258>)
 8019bb2:	697b      	ldr	r3, [r7, #20]
 8019bb4:	4413      	add	r3, r2
 8019bb6:	781b      	ldrb	r3, [r3, #0]
 8019bb8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8019bbc:	607b      	str	r3, [r7, #4]
		color <<= 8;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	021b      	lsls	r3, r3, #8
 8019bc2:	607b      	str	r3, [r7, #4]
		color |= (uint32_t)(lowp_wavebuffer[i] & 0xE0);
 8019bc4:	4a8d      	ldr	r2, [pc, #564]	; (8019dfc <DrawLowSpectrum+0x258>)
 8019bc6:	697b      	ldr	r3, [r7, #20]
 8019bc8:	4413      	add	r3, r2
 8019bca:	781b      	ldrb	r3, [r3, #0]
 8019bcc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8019bd0:	687a      	ldr	r2, [r7, #4]
 8019bd2:	4313      	orrs	r3, r2
 8019bd4:	607b      	str	r3, [r7, #4]
		color <<= 8;
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	021b      	lsls	r3, r3, #8
 8019bda:	607b      	str	r3, [r7, #4]
		color |= 0x000000FF;
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8019be2:	607b      	str	r3, [r7, #4]
		height = (uint32_t)(lowp_wavebuffer[i]);
 8019be4:	4a85      	ldr	r2, [pc, #532]	; (8019dfc <DrawLowSpectrum+0x258>)
 8019be6:	697b      	ldr	r3, [r7, #20]
 8019be8:	4413      	add	r3, r2
 8019bea:	781b      	ldrb	r3, [r3, #0]
 8019bec:	603b      	str	r3, [r7, #0]
		height &= 0x1F; //read height data - last 5 bits
 8019bee:	683b      	ldr	r3, [r7, #0]
 8019bf0:	f003 031f 	and.w	r3, r3, #31
 8019bf4:	603b      	str	r3, [r7, #0]
		VLine(i + 40, 250 - height, height, color);
 8019bf6:	697b      	ldr	r3, [r7, #20]
 8019bf8:	b29b      	uxth	r3, r3
 8019bfa:	3328      	adds	r3, #40	; 0x28
 8019bfc:	b298      	uxth	r0, r3
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	b29b      	uxth	r3, r3
 8019c02:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8019c06:	b299      	uxth	r1, r3
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	b29a      	uxth	r2, r3
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	f001 fcfd 	bl	801b60c <VLine>
	for(i = 0; i < 400; i++)
 8019c12:	697b      	ldr	r3, [r7, #20]
 8019c14:	3301      	adds	r3, #1
 8019c16:	617b      	str	r3, [r7, #20]
 8019c18:	697b      	ldr	r3, [r7, #20]
 8019c1a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8019c1e:	d3c7      	bcc.n	8019bb0 <DrawLowSpectrum+0xc>
	}
	// draw bpm frame
	VLine(397, 174, 32, 0x00FFFFFF);
 8019c20:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019c24:	2220      	movs	r2, #32
 8019c26:	21ae      	movs	r1, #174	; 0xae
 8019c28:	f240 108d 	movw	r0, #397	; 0x18d
 8019c2c:	f001 fcee 	bl	801b60c <VLine>
	VLine(453, 174, 32, 0x00FFFFFF);
 8019c30:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019c34:	2220      	movs	r2, #32
 8019c36:	21ae      	movs	r1, #174	; 0xae
 8019c38:	f240 10c5 	movw	r0, #453	; 0x1c5
 8019c3c:	f001 fce6 	bl	801b60c <VLine>
	HLine(399, 172, 53, 0x00FFFFFF);
 8019c40:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019c44:	2235      	movs	r2, #53	; 0x35
 8019c46:	21ac      	movs	r1, #172	; 0xac
 8019c48:	f240 108f 	movw	r0, #399	; 0x18f
 8019c4c:	f001 fd48 	bl	801b6e0 <HLine>
	HLine(399, 207, 53, 0x00FFFFFF);
 8019c50:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019c54:	2235      	movs	r2, #53	; 0x35
 8019c56:	21cf      	movs	r1, #207	; 0xcf
 8019c58:	f240 108f 	movw	r0, #399	; 0x18f
 8019c5c:	f001 fd40 	bl	801b6e0 <HLine>
	Pixel(398, 173, 0xFFFF);
 8019c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019c64:	21ad      	movs	r1, #173	; 0xad
 8019c66:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8019c6a:	f001 fdf3 	bl	801b854 <Pixel>
	Pixel(452, 173, 0xFFFF);
 8019c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019c72:	21ad      	movs	r1, #173	; 0xad
 8019c74:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
 8019c78:	f001 fdec 	bl	801b854 <Pixel>
	Pixel(398, 206, 0xFFFF);
 8019c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019c80:	21ce      	movs	r1, #206	; 0xce
 8019c82:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8019c86:	f001 fde5 	bl	801b854 <Pixel>
	Pixel(452, 206, 0xFFFF);
 8019c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019c8e:	21ce      	movs	r1, #206	; 0xce
 8019c90:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
 8019c94:	f001 fdde 	bl	801b854 <Pixel>
	DrawElement(20, 5, 430, 205, 0x00FFFFFF, bpm);
 8019c98:	4b59      	ldr	r3, [pc, #356]	; (8019e00 <DrawLowSpectrum+0x25c>)
 8019c9a:	9301      	str	r3, [sp, #4]
 8019c9c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019ca0:	9300      	str	r3, [sp, #0]
 8019ca2:	23cd      	movs	r3, #205	; 0xcd
 8019ca4:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8019ca8:	2105      	movs	r1, #5
 8019caa:	2014      	movs	r0, #20
 8019cac:	f001 f812 	bl	801acd4 <DrawElement>

	// draw bottom frame
	// draw left border
	VLine(40, 252, 4, 0x00FFFFFF);
 8019cb0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019cb4:	2204      	movs	r2, #4
 8019cb6:	21fc      	movs	r1, #252	; 0xfc
 8019cb8:	2028      	movs	r0, #40	; 0x28
 8019cba:	f001 fca7 	bl	801b60c <VLine>
	// draw right border
	VLine(440, 252, 4, 0x00FFFFFF);
 8019cbe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019cc2:	2204      	movs	r2, #4
 8019cc4:	21fc      	movs	r1, #252	; 0xfc
 8019cc6:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8019cca:	f001 fc9f 	bl	801b60c <VLine>
	// draw upper border
	HLine(40, 252, 400, 0x00FFFFFF);
 8019cce:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019cd2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8019cd6:	21fc      	movs	r1, #252	; 0xfc
 8019cd8:	2028      	movs	r0, #40	; 0x28
 8019cda:	f001 fd01 	bl	801b6e0 <HLine>
	// draw bottom border
	HLine(40, 256, 401, 0x00FFFFFF);
 8019cde:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019ce2:	f240 1291 	movw	r2, #401	; 0x191
 8019ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019cea:	2028      	movs	r0, #40	; 0x28
 8019cec:	f001 fcf8 	bl	801b6e0 <HLine>
	if(display.timemode == 0) {
 8019cf0:	4b44      	ldr	r3, [pc, #272]	; (8019e04 <DrawLowSpectrum+0x260>)
 8019cf2:	781b      	ldrb	r3, [r3, #0]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d10a      	bne.n	8019d0e <DrawLowSpectrum+0x16a>
		// draw remain indicator
		DrawElement(37, 5, 84, 191, 0x00FFFFFF, remain);
 8019cf8:	4b43      	ldr	r3, [pc, #268]	; (8019e08 <DrawLowSpectrum+0x264>)
 8019cfa:	9301      	str	r3, [sp, #4]
 8019cfc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019d00:	9300      	str	r3, [sp, #0]
 8019d02:	23bf      	movs	r3, #191	; 0xbf
 8019d04:	2254      	movs	r2, #84	; 0x54
 8019d06:	2105      	movs	r1, #5
 8019d08:	2025      	movs	r0, #37	; 0x25
 8019d0a:	f000 ffe3 	bl	801acd4 <DrawElement>
	}
	if(display.trackbarmode == 0) {
 8019d0e:	4b3d      	ldr	r3, [pc, #244]	; (8019e04 <DrawLowSpectrum+0x260>)
 8019d10:	791b      	ldrb	r3, [r3, #4]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d112      	bne.n	8019d3c <DrawLowSpectrum+0x198>
		// remain
		Rectangle(file_pos+40, 253, 400-file_pos, 3, 0x00FFFFFF);
 8019d16:	4b3d      	ldr	r3, [pc, #244]	; (8019e0c <DrawLowSpectrum+0x268>)
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	b29b      	uxth	r3, r3
 8019d1c:	3328      	adds	r3, #40	; 0x28
 8019d1e:	b298      	uxth	r0, r3
 8019d20:	4b3a      	ldr	r3, [pc, #232]	; (8019e0c <DrawLowSpectrum+0x268>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	b29b      	uxth	r3, r3
 8019d26:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8019d2a:	b29a      	uxth	r2, r3
 8019d2c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019d30:	9300      	str	r3, [sp, #0]
 8019d32:	2303      	movs	r3, #3
 8019d34:	21fd      	movs	r1, #253	; 0xfd
 8019d36:	f001 fd33 	bl	801b7a0 <Rectangle>
 8019d3a:	e00a      	b.n	8019d52 <DrawLowSpectrum+0x1ae>
	}
	else {
		// elapsed
		Rectangle(40, 253, file_pos, 3, 0x00FFFFFF);
 8019d3c:	4b33      	ldr	r3, [pc, #204]	; (8019e0c <DrawLowSpectrum+0x268>)
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	b29a      	uxth	r2, r3
 8019d42:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019d46:	9300      	str	r3, [sp, #0]
 8019d48:	2303      	movs	r3, #3
 8019d4a:	21fd      	movs	r1, #253	; 0xfd
 8019d4c:	2028      	movs	r0, #40	; 0x28
 8019d4e:	f001 fd27 	bl	801b7a0 <Rectangle>
	}
	// draw minute ticks
	i = 0;
 8019d52:	2300      	movs	r3, #0
 8019d54:	617b      	str	r3, [r7, #20]
	while(i < rekordbox.minutes) {
 8019d56:	e027      	b.n	8019da8 <DrawLowSpectrum+0x204>
		if(display.timemode == 0) {
 8019d58:	4b2a      	ldr	r3, [pc, #168]	; (8019e04 <DrawLowSpectrum+0x260>)
 8019d5a:	781b      	ldrb	r3, [r3, #0]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d110      	bne.n	8019d82 <DrawLowSpectrum+0x1de>
			VLine(40 + rekordbox.remminticks[i], 260, 4, 0x00FFFFFF);
 8019d60:	492b      	ldr	r1, [pc, #172]	; (8019e10 <DrawLowSpectrum+0x26c>)
 8019d62:	697a      	ldr	r2, [r7, #20]
 8019d64:	f241 2328 	movw	r3, #4648	; 0x1228
 8019d68:	4413      	add	r3, r2
 8019d6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019d6e:	3328      	adds	r3, #40	; 0x28
 8019d70:	b298      	uxth	r0, r3
 8019d72:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019d76:	2204      	movs	r2, #4
 8019d78:	f44f 7182 	mov.w	r1, #260	; 0x104
 8019d7c:	f001 fc46 	bl	801b60c <VLine>
 8019d80:	e00f      	b.n	8019da2 <DrawLowSpectrum+0x1fe>
		}
		else {
			VLine(40 + rekordbox.elminticks[i], 260, 4, 0x00FFFFFF);
 8019d82:	4923      	ldr	r1, [pc, #140]	; (8019e10 <DrawLowSpectrum+0x26c>)
 8019d84:	697a      	ldr	r2, [r7, #20]
 8019d86:	f241 2368 	movw	r3, #4712	; 0x1268
 8019d8a:	4413      	add	r3, r2
 8019d8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019d90:	3328      	adds	r3, #40	; 0x28
 8019d92:	b298      	uxth	r0, r3
 8019d94:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019d98:	2204      	movs	r2, #4
 8019d9a:	f44f 7182 	mov.w	r1, #260	; 0x104
 8019d9e:	f001 fc35 	bl	801b60c <VLine>
		}
		i++;
 8019da2:	697b      	ldr	r3, [r7, #20]
 8019da4:	3301      	adds	r3, #1
 8019da6:	617b      	str	r3, [r7, #20]
	while(i < rekordbox.minutes) {
 8019da8:	4b19      	ldr	r3, [pc, #100]	; (8019e10 <DrawLowSpectrum+0x26c>)
 8019daa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8019dae:	f893 3550 	ldrb.w	r3, [r3, #1360]	; 0x550
 8019db2:	461a      	mov	r2, r3
 8019db4:	697b      	ldr	r3, [r7, #20]
 8019db6:	4293      	cmp	r3, r2
 8019db8:	d3ce      	bcc.n	8019d58 <DrawLowSpectrum+0x1b4>
	}
	// draw cue point
	//DrawElement(7, 4, 40, 264, 0x00FFFF00, cue_pointer);
	// draw percent
	DrawElement(7, 8, 375, 204, 0x00FFFFFF, percent);
 8019dba:	4b16      	ldr	r3, [pc, #88]	; (8019e14 <DrawLowSpectrum+0x270>)
 8019dbc:	9301      	str	r3, [sp, #4]
 8019dbe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019dc2:	9300      	str	r3, [sp, #0]
 8019dc4:	23cc      	movs	r3, #204	; 0xcc
 8019dc6:	f240 1277 	movw	r2, #375	; 0x177
 8019dca:	2108      	movs	r1, #8
 8019dcc:	2007      	movs	r0, #7
 8019dce:	f000 ff81 	bl	801acd4 <DrawElement>
	if(trak.percent < 0) DrawElement(10, 2, 308, 195, 0x00FFFFFF, minus);
 8019dd2:	4b11      	ldr	r3, [pc, #68]	; (8019e18 <DrawLowSpectrum+0x274>)
 8019dd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8019dd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019de0:	d51e      	bpl.n	8019e20 <DrawLowSpectrum+0x27c>
 8019de2:	4b0e      	ldr	r3, [pc, #56]	; (8019e1c <DrawLowSpectrum+0x278>)
 8019de4:	9301      	str	r3, [sp, #4]
 8019de6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019dea:	9300      	str	r3, [sp, #0]
 8019dec:	23c3      	movs	r3, #195	; 0xc3
 8019dee:	f44f 729a 	mov.w	r2, #308	; 0x134
 8019df2:	2102      	movs	r1, #2
 8019df4:	200a      	movs	r0, #10
 8019df6:	f000 ff6d 	bl	801acd4 <DrawElement>
 8019dfa:	e01d      	b.n	8019e38 <DrawLowSpectrum+0x294>
 8019dfc:	20001e04 	.word	0x20001e04
 8019e00:	0802adc0 	.word	0x0802adc0
 8019e04:	200008fc 	.word	0x200008fc
 8019e08:	0802ad74 	.word	0x0802ad74
 8019e0c:	20001dfc 	.word	0x20001dfc
 8019e10:	20015170 	.word	0x20015170
 8019e14:	0802af10 	.word	0x0802af10
 8019e18:	2000e6e0 	.word	0x2000e6e0
 8019e1c:	0802af64 	.word	0x0802af64
	else DrawElement(10, 10, 308, 199, 0x00FFFFFF, plus);
 8019e20:	4ba1      	ldr	r3, [pc, #644]	; (801a0a8 <DrawLowSpectrum+0x504>)
 8019e22:	9301      	str	r3, [sp, #4]
 8019e24:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019e28:	9300      	str	r3, [sp, #0]
 8019e2a:	23c7      	movs	r3, #199	; 0xc7
 8019e2c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8019e30:	210a      	movs	r1, #10
 8019e32:	200a      	movs	r0, #10
 8019e34:	f000 ff4e 	bl	801acd4 <DrawElement>
	uint16_t percent = (abs)(trak.percent * 10000);
 8019e38:	4b9c      	ldr	r3, [pc, #624]	; (801a0ac <DrawLowSpectrum+0x508>)
 8019e3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8019e3e:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 801a0b0 <DrawLowSpectrum+0x50c>
 8019e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e4a:	ee17 3a90 	vmov	r3, s15
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	bfb8      	it	lt
 8019e52:	425b      	neglt	r3, r3
 8019e54:	827b      	strh	r3, [r7, #18]
	if(display.pitchmode == 0) {
 8019e56:	4b97      	ldr	r3, [pc, #604]	; (801a0b4 <DrawLowSpectrum+0x510>)
 8019e58:	785b      	ldrb	r3, [r3, #1]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	f040 8094 	bne.w	8019f88 <DrawLowSpectrum+0x3e4>
		// draw wide pitch
		DrawElement(34, 7, 445, 230, 0x00FF0000, pitch_wide);
 8019e60:	4b95      	ldr	r3, [pc, #596]	; (801a0b8 <DrawLowSpectrum+0x514>)
 8019e62:	9301      	str	r3, [sp, #4]
 8019e64:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8019e68:	9300      	str	r3, [sp, #0]
 8019e6a:	23e6      	movs	r3, #230	; 0xe6
 8019e6c:	f240 12bd 	movw	r2, #445	; 0x1bd
 8019e70:	2107      	movs	r1, #7
 8019e72:	2022      	movs	r0, #34	; 0x22
 8019e74:	f000 ff2e 	bl	801acd4 <DrawElement>
		if(percent / 10000 > 0) {
 8019e78:	8a7b      	ldrh	r3, [r7, #18]
 8019e7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8019e7e:	4293      	cmp	r3, r2
 8019e80:	d90f      	bls.n	8019ea2 <DrawLowSpectrum+0x2fe>
			DrawDigit(percent / 10000, 315, 186, 10, 0x00FFFFFF);
 8019e82:	8a7b      	ldrh	r3, [r7, #18]
 8019e84:	4a8d      	ldr	r2, [pc, #564]	; (801a0bc <DrawLowSpectrum+0x518>)
 8019e86:	fba2 2303 	umull	r2, r3, r2, r3
 8019e8a:	0b5b      	lsrs	r3, r3, #13
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	b2d8      	uxtb	r0, r3
 8019e90:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019e94:	9300      	str	r3, [sp, #0]
 8019e96:	230a      	movs	r3, #10
 8019e98:	22ba      	movs	r2, #186	; 0xba
 8019e9a:	f240 113b 	movw	r1, #315	; 0x13b
 8019e9e:	f001 fd0b 	bl	801b8b8 <DrawDigit>
		}
		if(percent / 1000 > 0) {
 8019ea2:	8a7b      	ldrh	r3, [r7, #18]
 8019ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019ea8:	d31d      	bcc.n	8019ee6 <DrawLowSpectrum+0x342>
			DrawDigit(((percent / 100) % 100) / 10, 330, 186, 10, 0x00FFFFFF);
 8019eaa:	8a7b      	ldrh	r3, [r7, #18]
 8019eac:	4a84      	ldr	r2, [pc, #528]	; (801a0c0 <DrawLowSpectrum+0x51c>)
 8019eae:	fba2 2303 	umull	r2, r3, r2, r3
 8019eb2:	095b      	lsrs	r3, r3, #5
 8019eb4:	b29b      	uxth	r3, r3
 8019eb6:	4a82      	ldr	r2, [pc, #520]	; (801a0c0 <DrawLowSpectrum+0x51c>)
 8019eb8:	fba2 1203 	umull	r1, r2, r2, r3
 8019ebc:	0952      	lsrs	r2, r2, #5
 8019ebe:	2164      	movs	r1, #100	; 0x64
 8019ec0:	fb01 f202 	mul.w	r2, r1, r2
 8019ec4:	1a9b      	subs	r3, r3, r2
 8019ec6:	b29b      	uxth	r3, r3
 8019ec8:	4a7e      	ldr	r2, [pc, #504]	; (801a0c4 <DrawLowSpectrum+0x520>)
 8019eca:	fba2 2303 	umull	r2, r3, r2, r3
 8019ece:	08db      	lsrs	r3, r3, #3
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	b2d8      	uxtb	r0, r3
 8019ed4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019ed8:	9300      	str	r3, [sp, #0]
 8019eda:	230a      	movs	r3, #10
 8019edc:	22ba      	movs	r2, #186	; 0xba
 8019ede:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8019ee2:	f001 fce9 	bl	801b8b8 <DrawDigit>
		}
		DrawDigit(((percent / 100) % 100) % 10, 345, 186, 10, 0x00FFFFFF);
 8019ee6:	8a7b      	ldrh	r3, [r7, #18]
 8019ee8:	4a75      	ldr	r2, [pc, #468]	; (801a0c0 <DrawLowSpectrum+0x51c>)
 8019eea:	fba2 2303 	umull	r2, r3, r2, r3
 8019eee:	095b      	lsrs	r3, r3, #5
 8019ef0:	b29b      	uxth	r3, r3
 8019ef2:	4a73      	ldr	r2, [pc, #460]	; (801a0c0 <DrawLowSpectrum+0x51c>)
 8019ef4:	fba2 1203 	umull	r1, r2, r2, r3
 8019ef8:	0952      	lsrs	r2, r2, #5
 8019efa:	2164      	movs	r1, #100	; 0x64
 8019efc:	fb01 f202 	mul.w	r2, r1, r2
 8019f00:	1a9b      	subs	r3, r3, r2
 8019f02:	b29a      	uxth	r2, r3
 8019f04:	4b6f      	ldr	r3, [pc, #444]	; (801a0c4 <DrawLowSpectrum+0x520>)
 8019f06:	fba3 1302 	umull	r1, r3, r3, r2
 8019f0a:	08d9      	lsrs	r1, r3, #3
 8019f0c:	460b      	mov	r3, r1
 8019f0e:	009b      	lsls	r3, r3, #2
 8019f10:	440b      	add	r3, r1
 8019f12:	005b      	lsls	r3, r3, #1
 8019f14:	1ad3      	subs	r3, r2, r3
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	b2d8      	uxtb	r0, r3
 8019f1a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019f1e:	9300      	str	r3, [sp, #0]
 8019f20:	230a      	movs	r3, #10
 8019f22:	22ba      	movs	r2, #186	; 0xba
 8019f24:	f240 1159 	movw	r1, #345	; 0x159
 8019f28:	f001 fcc6 	bl	801b8b8 <DrawDigit>
		DrawElement(2, 2, 356, 204, 0x00FFFFFF, small_point);
 8019f2c:	4b66      	ldr	r3, [pc, #408]	; (801a0c8 <DrawLowSpectrum+0x524>)
 8019f2e:	9301      	str	r3, [sp, #4]
 8019f30:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019f34:	9300      	str	r3, [sp, #0]
 8019f36:	23cc      	movs	r3, #204	; 0xcc
 8019f38:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8019f3c:	2102      	movs	r1, #2
 8019f3e:	2002      	movs	r0, #2
 8019f40:	f000 fec8 	bl	801acd4 <DrawElement>
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 8019f44:	8a7b      	ldrh	r3, [r7, #18]
 8019f46:	4a5e      	ldr	r2, [pc, #376]	; (801a0c0 <DrawLowSpectrum+0x51c>)
 8019f48:	fba2 1203 	umull	r1, r2, r2, r3
 8019f4c:	0952      	lsrs	r2, r2, #5
 8019f4e:	2164      	movs	r1, #100	; 0x64
 8019f50:	fb01 f202 	mul.w	r2, r1, r2
 8019f54:	1a9b      	subs	r3, r3, r2
 8019f56:	b29b      	uxth	r3, r3
 8019f58:	2b04      	cmp	r3, #4
 8019f5a:	d90a      	bls.n	8019f72 <DrawLowSpectrum+0x3ce>
 8019f5c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019f60:	9300      	str	r3, [sp, #0]
 8019f62:	230a      	movs	r3, #10
 8019f64:	22ba      	movs	r2, #186	; 0xba
 8019f66:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8019f6a:	2005      	movs	r0, #5
 8019f6c:	f001 fca4 	bl	801b8b8 <DrawDigit>
 8019f70:	e1b8      	b.n	801a2e4 <DrawLowSpectrum+0x740>
		else DrawDigit(0, 360, 186, 10, 0x00FFFFFF);
 8019f72:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019f76:	9300      	str	r3, [sp, #0]
 8019f78:	230a      	movs	r3, #10
 8019f7a:	22ba      	movs	r2, #186	; 0xba
 8019f7c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8019f80:	2000      	movs	r0, #0
 8019f82:	f001 fc99 	bl	801b8b8 <DrawDigit>
 8019f86:	e1ad      	b.n	801a2e4 <DrawLowSpectrum+0x740>
	}
	else if(display.pitchmode == 1) {
 8019f88:	4b4a      	ldr	r3, [pc, #296]	; (801a0b4 <DrawLowSpectrum+0x510>)
 8019f8a:	785b      	ldrb	r3, [r3, #1]
 8019f8c:	2b01      	cmp	r3, #1
 8019f8e:	f040 809f 	bne.w	801a0d0 <DrawLowSpectrum+0x52c>
		// draw 16% pitch
		DrawElement(34, 9, 445, 241, 0x00FFFFFF, pitch16);
 8019f92:	4b4e      	ldr	r3, [pc, #312]	; (801a0cc <DrawLowSpectrum+0x528>)
 8019f94:	9301      	str	r3, [sp, #4]
 8019f96:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019f9a:	9300      	str	r3, [sp, #0]
 8019f9c:	23f1      	movs	r3, #241	; 0xf1
 8019f9e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8019fa2:	2109      	movs	r1, #9
 8019fa4:	2022      	movs	r0, #34	; 0x22
 8019fa6:	f000 fe95 	bl	801acd4 <DrawElement>
		if(percent / 1000 > 0) {
 8019faa:	8a7b      	ldrh	r3, [r7, #18]
 8019fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019fb0:	d31d      	bcc.n	8019fee <DrawLowSpectrum+0x44a>
			DrawDigit(((percent / 100) % 100) / 10, 315, 186, 10, 0x00FFFFFF);
 8019fb2:	8a7b      	ldrh	r3, [r7, #18]
 8019fb4:	4a42      	ldr	r2, [pc, #264]	; (801a0c0 <DrawLowSpectrum+0x51c>)
 8019fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8019fba:	095b      	lsrs	r3, r3, #5
 8019fbc:	b29b      	uxth	r3, r3
 8019fbe:	4a40      	ldr	r2, [pc, #256]	; (801a0c0 <DrawLowSpectrum+0x51c>)
 8019fc0:	fba2 1203 	umull	r1, r2, r2, r3
 8019fc4:	0952      	lsrs	r2, r2, #5
 8019fc6:	2164      	movs	r1, #100	; 0x64
 8019fc8:	fb01 f202 	mul.w	r2, r1, r2
 8019fcc:	1a9b      	subs	r3, r3, r2
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	4a3c      	ldr	r2, [pc, #240]	; (801a0c4 <DrawLowSpectrum+0x520>)
 8019fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8019fd6:	08db      	lsrs	r3, r3, #3
 8019fd8:	b29b      	uxth	r3, r3
 8019fda:	b2d8      	uxtb	r0, r3
 8019fdc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019fe0:	9300      	str	r3, [sp, #0]
 8019fe2:	230a      	movs	r3, #10
 8019fe4:	22ba      	movs	r2, #186	; 0xba
 8019fe6:	f240 113b 	movw	r1, #315	; 0x13b
 8019fea:	f001 fc65 	bl	801b8b8 <DrawDigit>
		}
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 8019fee:	8a7b      	ldrh	r3, [r7, #18]
 8019ff0:	4a33      	ldr	r2, [pc, #204]	; (801a0c0 <DrawLowSpectrum+0x51c>)
 8019ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8019ff6:	095b      	lsrs	r3, r3, #5
 8019ff8:	b29b      	uxth	r3, r3
 8019ffa:	4a31      	ldr	r2, [pc, #196]	; (801a0c0 <DrawLowSpectrum+0x51c>)
 8019ffc:	fba2 1203 	umull	r1, r2, r2, r3
 801a000:	0952      	lsrs	r2, r2, #5
 801a002:	2164      	movs	r1, #100	; 0x64
 801a004:	fb01 f202 	mul.w	r2, r1, r2
 801a008:	1a9b      	subs	r3, r3, r2
 801a00a:	b29a      	uxth	r2, r3
 801a00c:	4b2d      	ldr	r3, [pc, #180]	; (801a0c4 <DrawLowSpectrum+0x520>)
 801a00e:	fba3 1302 	umull	r1, r3, r3, r2
 801a012:	08d9      	lsrs	r1, r3, #3
 801a014:	460b      	mov	r3, r1
 801a016:	009b      	lsls	r3, r3, #2
 801a018:	440b      	add	r3, r1
 801a01a:	005b      	lsls	r3, r3, #1
 801a01c:	1ad3      	subs	r3, r2, r3
 801a01e:	b29b      	uxth	r3, r3
 801a020:	b2d8      	uxtb	r0, r3
 801a022:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a026:	9300      	str	r3, [sp, #0]
 801a028:	230a      	movs	r3, #10
 801a02a:	22ba      	movs	r2, #186	; 0xba
 801a02c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801a030:	f001 fc42 	bl	801b8b8 <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 801a034:	4b24      	ldr	r3, [pc, #144]	; (801a0c8 <DrawLowSpectrum+0x524>)
 801a036:	9301      	str	r3, [sp, #4]
 801a038:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a03c:	9300      	str	r3, [sp, #0]
 801a03e:	23cc      	movs	r3, #204	; 0xcc
 801a040:	f240 1255 	movw	r2, #341	; 0x155
 801a044:	2102      	movs	r1, #2
 801a046:	2002      	movs	r0, #2
 801a048:	f000 fe44 	bl	801acd4 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 801a04c:	8a7b      	ldrh	r3, [r7, #18]
 801a04e:	4a1d      	ldr	r2, [pc, #116]	; (801a0c4 <DrawLowSpectrum+0x520>)
 801a050:	fba2 2303 	umull	r2, r3, r2, r3
 801a054:	08db      	lsrs	r3, r3, #3
 801a056:	b29a      	uxth	r2, r3
 801a058:	4b1a      	ldr	r3, [pc, #104]	; (801a0c4 <DrawLowSpectrum+0x520>)
 801a05a:	fba3 1302 	umull	r1, r3, r3, r2
 801a05e:	08d9      	lsrs	r1, r3, #3
 801a060:	460b      	mov	r3, r1
 801a062:	009b      	lsls	r3, r3, #2
 801a064:	440b      	add	r3, r1
 801a066:	005b      	lsls	r3, r3, #1
 801a068:	1ad3      	subs	r3, r2, r3
 801a06a:	b29b      	uxth	r3, r3
 801a06c:	b2d8      	uxtb	r0, r3
 801a06e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a072:	9300      	str	r3, [sp, #0]
 801a074:	230a      	movs	r3, #10
 801a076:	22ba      	movs	r2, #186	; 0xba
 801a078:	f240 1159 	movw	r1, #345	; 0x159
 801a07c:	f001 fc1c 	bl	801b8b8 <DrawDigit>
		DrawDigit((percent % 2) * 5, 360, 186, 10, 0x00FFFFFF);
 801a080:	8a7b      	ldrh	r3, [r7, #18]
 801a082:	b2db      	uxtb	r3, r3
 801a084:	f003 0301 	and.w	r3, r3, #1
 801a088:	b2db      	uxtb	r3, r3
 801a08a:	461a      	mov	r2, r3
 801a08c:	0092      	lsls	r2, r2, #2
 801a08e:	4413      	add	r3, r2
 801a090:	b2d8      	uxtb	r0, r3
 801a092:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a096:	9300      	str	r3, [sp, #0]
 801a098:	230a      	movs	r3, #10
 801a09a:	22ba      	movs	r2, #186	; 0xba
 801a09c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801a0a0:	f001 fc0a 	bl	801b8b8 <DrawDigit>
 801a0a4:	e11e      	b.n	801a2e4 <DrawLowSpectrum+0x740>
 801a0a6:	bf00      	nop
 801a0a8:	0802af78 	.word	0x0802af78
 801a0ac:	2000e6e0 	.word	0x2000e6e0
 801a0b0:	461c4000 	.word	0x461c4000
 801a0b4:	200008fc 	.word	0x200008fc
 801a0b8:	0802acec 	.word	0x0802acec
 801a0bc:	d1b71759 	.word	0xd1b71759
 801a0c0:	51eb851f 	.word	0x51eb851f
 801a0c4:	cccccccd 	.word	0xcccccccd
 801a0c8:	0802af58 	.word	0x0802af58
 801a0cc:	0802ac18 	.word	0x0802ac18
	}
	else if(display.pitchmode == 2) {
 801a0d0:	4b47      	ldr	r3, [pc, #284]	; (801a1f0 <DrawLowSpectrum+0x64c>)
 801a0d2:	785b      	ldrb	r3, [r3, #1]
 801a0d4:	2b02      	cmp	r3, #2
 801a0d6:	f040 8095 	bne.w	801a204 <DrawLowSpectrum+0x660>
		// draw 10% pitch
		DrawElement(34, 9, 445, 252, 0x00FF0000, pitch10);
 801a0da:	4b46      	ldr	r3, [pc, #280]	; (801a1f4 <DrawLowSpectrum+0x650>)
 801a0dc:	9301      	str	r3, [sp, #4]
 801a0de:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801a0e2:	9300      	str	r3, [sp, #0]
 801a0e4:	23fc      	movs	r3, #252	; 0xfc
 801a0e6:	f240 12bd 	movw	r2, #445	; 0x1bd
 801a0ea:	2109      	movs	r1, #9
 801a0ec:	2022      	movs	r0, #34	; 0x22
 801a0ee:	f000 fdf1 	bl	801acd4 <DrawElement>
		if(percent / 1000 > 0) {
 801a0f2:	8a7b      	ldrh	r3, [r7, #18]
 801a0f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a0f8:	d31d      	bcc.n	801a136 <DrawLowSpectrum+0x592>
			DrawDigit(((percent / 100) % 100) / 10, 315, 186, 10, 0x00FFFFFF);
 801a0fa:	8a7b      	ldrh	r3, [r7, #18]
 801a0fc:	4a3e      	ldr	r2, [pc, #248]	; (801a1f8 <DrawLowSpectrum+0x654>)
 801a0fe:	fba2 2303 	umull	r2, r3, r2, r3
 801a102:	095b      	lsrs	r3, r3, #5
 801a104:	b29b      	uxth	r3, r3
 801a106:	4a3c      	ldr	r2, [pc, #240]	; (801a1f8 <DrawLowSpectrum+0x654>)
 801a108:	fba2 1203 	umull	r1, r2, r2, r3
 801a10c:	0952      	lsrs	r2, r2, #5
 801a10e:	2164      	movs	r1, #100	; 0x64
 801a110:	fb01 f202 	mul.w	r2, r1, r2
 801a114:	1a9b      	subs	r3, r3, r2
 801a116:	b29b      	uxth	r3, r3
 801a118:	4a38      	ldr	r2, [pc, #224]	; (801a1fc <DrawLowSpectrum+0x658>)
 801a11a:	fba2 2303 	umull	r2, r3, r2, r3
 801a11e:	08db      	lsrs	r3, r3, #3
 801a120:	b29b      	uxth	r3, r3
 801a122:	b2d8      	uxtb	r0, r3
 801a124:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a128:	9300      	str	r3, [sp, #0]
 801a12a:	230a      	movs	r3, #10
 801a12c:	22ba      	movs	r2, #186	; 0xba
 801a12e:	f240 113b 	movw	r1, #315	; 0x13b
 801a132:	f001 fbc1 	bl	801b8b8 <DrawDigit>
		}
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 801a136:	8a7b      	ldrh	r3, [r7, #18]
 801a138:	4a2f      	ldr	r2, [pc, #188]	; (801a1f8 <DrawLowSpectrum+0x654>)
 801a13a:	fba2 2303 	umull	r2, r3, r2, r3
 801a13e:	095b      	lsrs	r3, r3, #5
 801a140:	b29b      	uxth	r3, r3
 801a142:	4a2d      	ldr	r2, [pc, #180]	; (801a1f8 <DrawLowSpectrum+0x654>)
 801a144:	fba2 1203 	umull	r1, r2, r2, r3
 801a148:	0952      	lsrs	r2, r2, #5
 801a14a:	2164      	movs	r1, #100	; 0x64
 801a14c:	fb01 f202 	mul.w	r2, r1, r2
 801a150:	1a9b      	subs	r3, r3, r2
 801a152:	b29a      	uxth	r2, r3
 801a154:	4b29      	ldr	r3, [pc, #164]	; (801a1fc <DrawLowSpectrum+0x658>)
 801a156:	fba3 1302 	umull	r1, r3, r3, r2
 801a15a:	08d9      	lsrs	r1, r3, #3
 801a15c:	460b      	mov	r3, r1
 801a15e:	009b      	lsls	r3, r3, #2
 801a160:	440b      	add	r3, r1
 801a162:	005b      	lsls	r3, r3, #1
 801a164:	1ad3      	subs	r3, r2, r3
 801a166:	b29b      	uxth	r3, r3
 801a168:	b2d8      	uxtb	r0, r3
 801a16a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a16e:	9300      	str	r3, [sp, #0]
 801a170:	230a      	movs	r3, #10
 801a172:	22ba      	movs	r2, #186	; 0xba
 801a174:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801a178:	f001 fb9e 	bl	801b8b8 <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 801a17c:	4b20      	ldr	r3, [pc, #128]	; (801a200 <DrawLowSpectrum+0x65c>)
 801a17e:	9301      	str	r3, [sp, #4]
 801a180:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a184:	9300      	str	r3, [sp, #0]
 801a186:	23cc      	movs	r3, #204	; 0xcc
 801a188:	f240 1255 	movw	r2, #341	; 0x155
 801a18c:	2102      	movs	r1, #2
 801a18e:	2002      	movs	r0, #2
 801a190:	f000 fda0 	bl	801acd4 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 801a194:	8a7b      	ldrh	r3, [r7, #18]
 801a196:	4a19      	ldr	r2, [pc, #100]	; (801a1fc <DrawLowSpectrum+0x658>)
 801a198:	fba2 2303 	umull	r2, r3, r2, r3
 801a19c:	08db      	lsrs	r3, r3, #3
 801a19e:	b29a      	uxth	r2, r3
 801a1a0:	4b16      	ldr	r3, [pc, #88]	; (801a1fc <DrawLowSpectrum+0x658>)
 801a1a2:	fba3 1302 	umull	r1, r3, r3, r2
 801a1a6:	08d9      	lsrs	r1, r3, #3
 801a1a8:	460b      	mov	r3, r1
 801a1aa:	009b      	lsls	r3, r3, #2
 801a1ac:	440b      	add	r3, r1
 801a1ae:	005b      	lsls	r3, r3, #1
 801a1b0:	1ad3      	subs	r3, r2, r3
 801a1b2:	b29b      	uxth	r3, r3
 801a1b4:	b2d8      	uxtb	r0, r3
 801a1b6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a1ba:	9300      	str	r3, [sp, #0]
 801a1bc:	230a      	movs	r3, #10
 801a1be:	22ba      	movs	r2, #186	; 0xba
 801a1c0:	f240 1159 	movw	r1, #345	; 0x159
 801a1c4:	f001 fb78 	bl	801b8b8 <DrawDigit>
		DrawDigit((percent % 2) * 5, 360, 186, 10, 0x00FFFFFF);
 801a1c8:	8a7b      	ldrh	r3, [r7, #18]
 801a1ca:	b2db      	uxtb	r3, r3
 801a1cc:	f003 0301 	and.w	r3, r3, #1
 801a1d0:	b2db      	uxtb	r3, r3
 801a1d2:	461a      	mov	r2, r3
 801a1d4:	0092      	lsls	r2, r2, #2
 801a1d6:	4413      	add	r3, r2
 801a1d8:	b2d8      	uxtb	r0, r3
 801a1da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a1de:	9300      	str	r3, [sp, #0]
 801a1e0:	230a      	movs	r3, #10
 801a1e2:	22ba      	movs	r2, #186	; 0xba
 801a1e4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801a1e8:	f001 fb66 	bl	801b8b8 <DrawDigit>
 801a1ec:	e07a      	b.n	801a2e4 <DrawLowSpectrum+0x740>
 801a1ee:	bf00      	nop
 801a1f0:	200008fc 	.word	0x200008fc
 801a1f4:	0802abd4 	.word	0x0802abd4
 801a1f8:	51eb851f 	.word	0x51eb851f
 801a1fc:	cccccccd 	.word	0xcccccccd
 801a200:	0802af58 	.word	0x0802af58
	}
	else if(display.pitchmode == 3) {
 801a204:	4bc5      	ldr	r3, [pc, #788]	; (801a51c <DrawLowSpectrum+0x978>)
 801a206:	785b      	ldrb	r3, [r3, #1]
 801a208:	2b03      	cmp	r3, #3
 801a20a:	d16b      	bne.n	801a2e4 <DrawLowSpectrum+0x740>
		// draw 6% pitch
		DrawElement(34, 9, 445, 263, 0x0000FF00, pitch6);
 801a20c:	4bc4      	ldr	r3, [pc, #784]	; (801a520 <DrawLowSpectrum+0x97c>)
 801a20e:	9301      	str	r3, [sp, #4]
 801a210:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 801a214:	9300      	str	r3, [sp, #0]
 801a216:	f240 1307 	movw	r3, #263	; 0x107
 801a21a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801a21e:	2109      	movs	r1, #9
 801a220:	2022      	movs	r0, #34	; 0x22
 801a222:	f000 fd57 	bl	801acd4 <DrawElement>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 801a226:	8a7b      	ldrh	r3, [r7, #18]
 801a228:	4abe      	ldr	r2, [pc, #760]	; (801a524 <DrawLowSpectrum+0x980>)
 801a22a:	fba2 2303 	umull	r2, r3, r2, r3
 801a22e:	095b      	lsrs	r3, r3, #5
 801a230:	b29b      	uxth	r3, r3
 801a232:	4abc      	ldr	r2, [pc, #752]	; (801a524 <DrawLowSpectrum+0x980>)
 801a234:	fba2 1203 	umull	r1, r2, r2, r3
 801a238:	0952      	lsrs	r2, r2, #5
 801a23a:	2164      	movs	r1, #100	; 0x64
 801a23c:	fb01 f202 	mul.w	r2, r1, r2
 801a240:	1a9b      	subs	r3, r3, r2
 801a242:	b29a      	uxth	r2, r3
 801a244:	4bb8      	ldr	r3, [pc, #736]	; (801a528 <DrawLowSpectrum+0x984>)
 801a246:	fba3 1302 	umull	r1, r3, r3, r2
 801a24a:	08d9      	lsrs	r1, r3, #3
 801a24c:	460b      	mov	r3, r1
 801a24e:	009b      	lsls	r3, r3, #2
 801a250:	440b      	add	r3, r1
 801a252:	005b      	lsls	r3, r3, #1
 801a254:	1ad3      	subs	r3, r2, r3
 801a256:	b29b      	uxth	r3, r3
 801a258:	b2d8      	uxtb	r0, r3
 801a25a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a25e:	9300      	str	r3, [sp, #0]
 801a260:	230a      	movs	r3, #10
 801a262:	22ba      	movs	r2, #186	; 0xba
 801a264:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801a268:	f001 fb26 	bl	801b8b8 <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 801a26c:	4baf      	ldr	r3, [pc, #700]	; (801a52c <DrawLowSpectrum+0x988>)
 801a26e:	9301      	str	r3, [sp, #4]
 801a270:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a274:	9300      	str	r3, [sp, #0]
 801a276:	23cc      	movs	r3, #204	; 0xcc
 801a278:	f240 1255 	movw	r2, #341	; 0x155
 801a27c:	2102      	movs	r1, #2
 801a27e:	2002      	movs	r0, #2
 801a280:	f000 fd28 	bl	801acd4 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 801a284:	8a7b      	ldrh	r3, [r7, #18]
 801a286:	4aa8      	ldr	r2, [pc, #672]	; (801a528 <DrawLowSpectrum+0x984>)
 801a288:	fba2 2303 	umull	r2, r3, r2, r3
 801a28c:	08db      	lsrs	r3, r3, #3
 801a28e:	b29a      	uxth	r2, r3
 801a290:	4ba5      	ldr	r3, [pc, #660]	; (801a528 <DrawLowSpectrum+0x984>)
 801a292:	fba3 1302 	umull	r1, r3, r3, r2
 801a296:	08d9      	lsrs	r1, r3, #3
 801a298:	460b      	mov	r3, r1
 801a29a:	009b      	lsls	r3, r3, #2
 801a29c:	440b      	add	r3, r1
 801a29e:	005b      	lsls	r3, r3, #1
 801a2a0:	1ad3      	subs	r3, r2, r3
 801a2a2:	b29b      	uxth	r3, r3
 801a2a4:	b2d8      	uxtb	r0, r3
 801a2a6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a2aa:	9300      	str	r3, [sp, #0]
 801a2ac:	230a      	movs	r3, #10
 801a2ae:	22ba      	movs	r2, #186	; 0xba
 801a2b0:	f240 1159 	movw	r1, #345	; 0x159
 801a2b4:	f001 fb00 	bl	801b8b8 <DrawDigit>
		DrawDigit((percent % 5) * 2, 360, 186, 10, 0x00FFFFFF);
 801a2b8:	8a7a      	ldrh	r2, [r7, #18]
 801a2ba:	4b9b      	ldr	r3, [pc, #620]	; (801a528 <DrawLowSpectrum+0x984>)
 801a2bc:	fba3 1302 	umull	r1, r3, r3, r2
 801a2c0:	0899      	lsrs	r1, r3, #2
 801a2c2:	460b      	mov	r3, r1
 801a2c4:	009b      	lsls	r3, r3, #2
 801a2c6:	440b      	add	r3, r1
 801a2c8:	1ad3      	subs	r3, r2, r3
 801a2ca:	b29b      	uxth	r3, r3
 801a2cc:	b2db      	uxtb	r3, r3
 801a2ce:	005b      	lsls	r3, r3, #1
 801a2d0:	b2d8      	uxtb	r0, r3
 801a2d2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a2d6:	9300      	str	r3, [sp, #0]
 801a2d8:	230a      	movs	r3, #10
 801a2da:	22ba      	movs	r2, #186	; 0xba
 801a2dc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801a2e0:	f001 faea 	bl	801b8b8 <DrawDigit>
	}
	// draw track indicator
	DrawElement(34, 5, 40, 178, 0x00FFFFFF, track);
 801a2e4:	4b92      	ldr	r3, [pc, #584]	; (801a530 <DrawLowSpectrum+0x98c>)
 801a2e6:	9301      	str	r3, [sp, #4]
 801a2e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a2ec:	9300      	str	r3, [sp, #0]
 801a2ee:	23b2      	movs	r3, #178	; 0xb2
 801a2f0:	2228      	movs	r2, #40	; 0x28
 801a2f2:	2105      	movs	r1, #5
 801a2f4:	2022      	movs	r0, #34	; 0x22
 801a2f6:	f000 fced 	bl	801acd4 <DrawElement>
	// draw tempo indicator
	DrawElement(31, 5, 310, 178, 0x00FFFFFF, tempo);
 801a2fa:	4b8e      	ldr	r3, [pc, #568]	; (801a534 <DrawLowSpectrum+0x990>)
 801a2fc:	9301      	str	r3, [sp, #4]
 801a2fe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a302:	9300      	str	r3, [sp, #0]
 801a304:	23b2      	movs	r3, #178	; 0xb2
 801a306:	f44f 729b 	mov.w	r2, #310	; 0x136
 801a30a:	2105      	movs	r1, #5
 801a30c:	201f      	movs	r0, #31
 801a30e:	f000 fce1 	bl	801acd4 <DrawElement>
	// draw auto cue indicator
	if(display.cuemode == 1) {
 801a312:	4b82      	ldr	r3, [pc, #520]	; (801a51c <DrawLowSpectrum+0x978>)
 801a314:	789b      	ldrb	r3, [r3, #2]
 801a316:	2b01      	cmp	r3, #1
 801a318:	d10a      	bne.n	801a330 <DrawLowSpectrum+0x78c>
		DrawElement(34, 11, 86, 207, 0x00FF0000, auto_cue);
 801a31a:	4b87      	ldr	r3, [pc, #540]	; (801a538 <DrawLowSpectrum+0x994>)
 801a31c:	9301      	str	r3, [sp, #4]
 801a31e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801a322:	9300      	str	r3, [sp, #0]
 801a324:	23cf      	movs	r3, #207	; 0xcf
 801a326:	2256      	movs	r2, #86	; 0x56
 801a328:	210b      	movs	r1, #11
 801a32a:	2022      	movs	r0, #34	; 0x22
 801a32c:	f000 fcd2 	bl	801acd4 <DrawElement>
	}
	// draw quantize indicator
	if(display.quantize == 1) {
 801a330:	4b7a      	ldr	r3, [pc, #488]	; (801a51c <DrawLowSpectrum+0x978>)
 801a332:	7c5b      	ldrb	r3, [r3, #17]
 801a334:	2b01      	cmp	r3, #1
 801a336:	d10a      	bne.n	801a34e <DrawLowSpectrum+0x7aa>
		DrawElement(48, 5, 200, 178, 0x00FF0000, quantize);
 801a338:	4b80      	ldr	r3, [pc, #512]	; (801a53c <DrawLowSpectrum+0x998>)
 801a33a:	9301      	str	r3, [sp, #4]
 801a33c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801a340:	9300      	str	r3, [sp, #0]
 801a342:	23b2      	movs	r3, #178	; 0xb2
 801a344:	22c8      	movs	r2, #200	; 0xc8
 801a346:	2105      	movs	r1, #5
 801a348:	2030      	movs	r0, #48	; 0x30
 801a34a:	f000 fcc3 	bl	801acd4 <DrawElement>
	}
	// draw master tempo indicator
	if(display.mastertempomode == 1) {
 801a34e:	4b73      	ldr	r3, [pc, #460]	; (801a51c <DrawLowSpectrum+0x978>)
 801a350:	795b      	ldrb	r3, [r3, #5]
 801a352:	2b01      	cmp	r3, #1
 801a354:	d10b      	bne.n	801a36e <DrawLowSpectrum+0x7ca>
		DrawElement(34, 11, 355, 183, 0x00FF0000, master_tempo);
 801a356:	4b7a      	ldr	r3, [pc, #488]	; (801a540 <DrawLowSpectrum+0x99c>)
 801a358:	9301      	str	r3, [sp, #4]
 801a35a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801a35e:	9300      	str	r3, [sp, #0]
 801a360:	23b7      	movs	r3, #183	; 0xb7
 801a362:	f240 1263 	movw	r2, #355	; 0x163
 801a366:	210b      	movs	r1, #11
 801a368:	2022      	movs	r0, #34	; 0x22
 801a36a:	f000 fcb3 	bl	801acd4 <DrawElement>
	}
	// draw minutes
	DrawElement(15, 16, 165, 204, 0x00FFFFFF, minutes);
 801a36e:	4b75      	ldr	r3, [pc, #468]	; (801a544 <DrawLowSpectrum+0x9a0>)
 801a370:	9301      	str	r3, [sp, #4]
 801a372:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a376:	9300      	str	r3, [sp, #0]
 801a378:	23cc      	movs	r3, #204	; 0xcc
 801a37a:	22a5      	movs	r2, #165	; 0xa5
 801a37c:	2110      	movs	r1, #16
 801a37e:	200f      	movs	r0, #15
 801a380:	f000 fca8 	bl	801acd4 <DrawElement>
	// draw seconds
	DrawElement(6, 7, 213, 204, 0x00FFFFFF, seconds);
 801a384:	4b70      	ldr	r3, [pc, #448]	; (801a548 <DrawLowSpectrum+0x9a4>)
 801a386:	9301      	str	r3, [sp, #4]
 801a388:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a38c:	9300      	str	r3, [sp, #0]
 801a38e:	23cc      	movs	r3, #204	; 0xcc
 801a390:	22d5      	movs	r2, #213	; 0xd5
 801a392:	2107      	movs	r1, #7
 801a394:	2006      	movs	r0, #6
 801a396:	f000 fc9d 	bl	801acd4 <DrawElement>
	// draw frames
	DrawElement(5, 6, 252, 204, 0x00FFFFFF, frames);
 801a39a:	4b6c      	ldr	r3, [pc, #432]	; (801a54c <DrawLowSpectrum+0x9a8>)
 801a39c:	9301      	str	r3, [sp, #4]
 801a39e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a3a2:	9300      	str	r3, [sp, #0]
 801a3a4:	23cc      	movs	r3, #204	; 0xcc
 801a3a6:	22fc      	movs	r2, #252	; 0xfc
 801a3a8:	2106      	movs	r1, #6
 801a3aa:	2005      	movs	r0, #5
 801a3ac:	f000 fc92 	bl	801acd4 <DrawElement>
	DrawElement(3, 4, 252, 204, 0x00FFFFFF, point);
 801a3b0:	4b67      	ldr	r3, [pc, #412]	; (801a550 <DrawLowSpectrum+0x9ac>)
 801a3b2:	9301      	str	r3, [sp, #4]
 801a3b4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a3b8:	9300      	str	r3, [sp, #0]
 801a3ba:	23cc      	movs	r3, #204	; 0xcc
 801a3bc:	22fc      	movs	r2, #252	; 0xfc
 801a3be:	2104      	movs	r1, #4
 801a3c0:	2003      	movs	r0, #3
 801a3c2:	f000 fc87 	bl	801acd4 <DrawElement>

	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 801a3c6:	4b63      	ldr	r3, [pc, #396]	; (801a554 <DrawLowSpectrum+0x9b0>)
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	3301      	adds	r3, #1
 801a3cc:	4a62      	ldr	r2, [pc, #392]	; (801a558 <DrawLowSpectrum+0x9b4>)
 801a3ce:	fb82 1203 	smull	r1, r2, r2, r3
 801a3d2:	1092      	asrs	r2, r2, #2
 801a3d4:	17db      	asrs	r3, r3, #31
 801a3d6:	1ad3      	subs	r3, r2, r3
 801a3d8:	b2d8      	uxtb	r0, r3
 801a3da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a3de:	9300      	str	r3, [sp, #0]
 801a3e0:	230d      	movs	r3, #13
 801a3e2:	22b7      	movs	r2, #183	; 0xb7
 801a3e4:	2128      	movs	r1, #40	; 0x28
 801a3e6:	f001 fa67 	bl	801b8b8 <DrawDigit>
	DrawDigit((Track_number + 1) % 10, 60, 183, 13, 0x00FFFFFF);
 801a3ea:	4b5a      	ldr	r3, [pc, #360]	; (801a554 <DrawLowSpectrum+0x9b0>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	1c5a      	adds	r2, r3, #1
 801a3f0:	4b59      	ldr	r3, [pc, #356]	; (801a558 <DrawLowSpectrum+0x9b4>)
 801a3f2:	fb83 1302 	smull	r1, r3, r3, r2
 801a3f6:	1099      	asrs	r1, r3, #2
 801a3f8:	17d3      	asrs	r3, r2, #31
 801a3fa:	1ac9      	subs	r1, r1, r3
 801a3fc:	460b      	mov	r3, r1
 801a3fe:	009b      	lsls	r3, r3, #2
 801a400:	440b      	add	r3, r1
 801a402:	005b      	lsls	r3, r3, #1
 801a404:	1ad1      	subs	r1, r2, r3
 801a406:	b2c8      	uxtb	r0, r1
 801a408:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a40c:	9300      	str	r3, [sp, #0]
 801a40e:	230d      	movs	r3, #13
 801a410:	22b7      	movs	r2, #183	; 0xb7
 801a412:	213c      	movs	r1, #60	; 0x3c
 801a414:	f001 fa50 	bl	801b8b8 <DrawDigit>
	if(display.timemode == 0) {
 801a418:	4b40      	ldr	r3, [pc, #256]	; (801a51c <DrawLowSpectrum+0x978>)
 801a41a:	781b      	ldrb	r3, [r3, #0]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	f040 80af 	bne.w	801a580 <DrawLowSpectrum+0x9dc>
		DrawDigit(rmin / 10, 134, 184, 11, 0x00FFFFFF);
 801a422:	4b4e      	ldr	r3, [pc, #312]	; (801a55c <DrawLowSpectrum+0x9b8>)
 801a424:	f993 3000 	ldrsb.w	r3, [r3]
 801a428:	4a4b      	ldr	r2, [pc, #300]	; (801a558 <DrawLowSpectrum+0x9b4>)
 801a42a:	fb82 1203 	smull	r1, r2, r2, r3
 801a42e:	1092      	asrs	r2, r2, #2
 801a430:	17db      	asrs	r3, r3, #31
 801a432:	1ad3      	subs	r3, r2, r3
 801a434:	b25b      	sxtb	r3, r3
 801a436:	b2d8      	uxtb	r0, r3
 801a438:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a43c:	9300      	str	r3, [sp, #0]
 801a43e:	230b      	movs	r3, #11
 801a440:	22b8      	movs	r2, #184	; 0xb8
 801a442:	2186      	movs	r1, #134	; 0x86
 801a444:	f001 fa38 	bl	801b8b8 <DrawDigit>
		DrawDigit(rmin % 10, 148, 184, 11, 0x00FFFFFF);
 801a448:	4b44      	ldr	r3, [pc, #272]	; (801a55c <DrawLowSpectrum+0x9b8>)
 801a44a:	f993 2000 	ldrsb.w	r2, [r3]
 801a44e:	4b42      	ldr	r3, [pc, #264]	; (801a558 <DrawLowSpectrum+0x9b4>)
 801a450:	fb83 1302 	smull	r1, r3, r3, r2
 801a454:	1099      	asrs	r1, r3, #2
 801a456:	17d3      	asrs	r3, r2, #31
 801a458:	1ac9      	subs	r1, r1, r3
 801a45a:	460b      	mov	r3, r1
 801a45c:	009b      	lsls	r3, r3, #2
 801a45e:	440b      	add	r3, r1
 801a460:	005b      	lsls	r3, r3, #1
 801a462:	1ad3      	subs	r3, r2, r3
 801a464:	b25b      	sxtb	r3, r3
 801a466:	b2d8      	uxtb	r0, r3
 801a468:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a46c:	9300      	str	r3, [sp, #0]
 801a46e:	230b      	movs	r3, #11
 801a470:	22b8      	movs	r2, #184	; 0xb8
 801a472:	2194      	movs	r1, #148	; 0x94
 801a474:	f001 fa20 	bl	801b8b8 <DrawDigit>

		DrawDigit(rsec / 10, 185, 184, 11, 0x00FFFFFF);
 801a478:	4b39      	ldr	r3, [pc, #228]	; (801a560 <DrawLowSpectrum+0x9bc>)
 801a47a:	f993 3000 	ldrsb.w	r3, [r3]
 801a47e:	4a36      	ldr	r2, [pc, #216]	; (801a558 <DrawLowSpectrum+0x9b4>)
 801a480:	fb82 1203 	smull	r1, r2, r2, r3
 801a484:	1092      	asrs	r2, r2, #2
 801a486:	17db      	asrs	r3, r3, #31
 801a488:	1ad3      	subs	r3, r2, r3
 801a48a:	b25b      	sxtb	r3, r3
 801a48c:	b2d8      	uxtb	r0, r3
 801a48e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a492:	9300      	str	r3, [sp, #0]
 801a494:	230b      	movs	r3, #11
 801a496:	22b8      	movs	r2, #184	; 0xb8
 801a498:	21b9      	movs	r1, #185	; 0xb9
 801a49a:	f001 fa0d 	bl	801b8b8 <DrawDigit>
		DrawDigit(rsec % 10, 199, 184, 11, 0x00FFFFFF);
 801a49e:	4b30      	ldr	r3, [pc, #192]	; (801a560 <DrawLowSpectrum+0x9bc>)
 801a4a0:	f993 2000 	ldrsb.w	r2, [r3]
 801a4a4:	4b2c      	ldr	r3, [pc, #176]	; (801a558 <DrawLowSpectrum+0x9b4>)
 801a4a6:	fb83 1302 	smull	r1, r3, r3, r2
 801a4aa:	1099      	asrs	r1, r3, #2
 801a4ac:	17d3      	asrs	r3, r2, #31
 801a4ae:	1ac9      	subs	r1, r1, r3
 801a4b0:	460b      	mov	r3, r1
 801a4b2:	009b      	lsls	r3, r3, #2
 801a4b4:	440b      	add	r3, r1
 801a4b6:	005b      	lsls	r3, r3, #1
 801a4b8:	1ad3      	subs	r3, r2, r3
 801a4ba:	b25b      	sxtb	r3, r3
 801a4bc:	b2d8      	uxtb	r0, r3
 801a4be:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a4c2:	9300      	str	r3, [sp, #0]
 801a4c4:	230b      	movs	r3, #11
 801a4c6:	22b8      	movs	r2, #184	; 0xb8
 801a4c8:	21c7      	movs	r1, #199	; 0xc7
 801a4ca:	f001 f9f5 	bl	801b8b8 <DrawDigit>

		DrawDigit(rfr / 20, 224, 184, 11, 0x00FFFFFF);
 801a4ce:	4b25      	ldr	r3, [pc, #148]	; (801a564 <DrawLowSpectrum+0x9c0>)
 801a4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a4d4:	4a20      	ldr	r2, [pc, #128]	; (801a558 <DrawLowSpectrum+0x9b4>)
 801a4d6:	fb82 1203 	smull	r1, r2, r2, r3
 801a4da:	10d2      	asrs	r2, r2, #3
 801a4dc:	17db      	asrs	r3, r3, #31
 801a4de:	1ad3      	subs	r3, r2, r3
 801a4e0:	b21b      	sxth	r3, r3
 801a4e2:	b2d8      	uxtb	r0, r3
 801a4e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a4e8:	9300      	str	r3, [sp, #0]
 801a4ea:	230b      	movs	r3, #11
 801a4ec:	22b8      	movs	r2, #184	; 0xb8
 801a4ee:	21e0      	movs	r1, #224	; 0xe0
 801a4f0:	f001 f9e2 	bl	801b8b8 <DrawDigit>
		DrawDigit((rfr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 801a4f4:	4b1b      	ldr	r3, [pc, #108]	; (801a564 <DrawLowSpectrum+0x9c0>)
 801a4f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	da00      	bge.n	801a500 <DrawLowSpectrum+0x95c>
 801a4fe:	3301      	adds	r3, #1
 801a500:	105b      	asrs	r3, r3, #1
 801a502:	b21a      	sxth	r2, r3
 801a504:	4b14      	ldr	r3, [pc, #80]	; (801a558 <DrawLowSpectrum+0x9b4>)
 801a506:	fb83 1302 	smull	r1, r3, r3, r2
 801a50a:	1099      	asrs	r1, r3, #2
 801a50c:	17d3      	asrs	r3, r2, #31
 801a50e:	1ac9      	subs	r1, r1, r3
 801a510:	460b      	mov	r3, r1
 801a512:	009b      	lsls	r3, r3, #2
 801a514:	440b      	add	r3, r1
 801a516:	005b      	lsls	r3, r3, #1
 801a518:	e026      	b.n	801a568 <DrawLowSpectrum+0x9c4>
 801a51a:	bf00      	nop
 801a51c:	200008fc 	.word	0x200008fc
 801a520:	0802ab90 	.word	0x0802ab90
 801a524:	51eb851f 	.word	0x51eb851f
 801a528:	cccccccd 	.word	0xcccccccd
 801a52c:	0802af58 	.word	0x0802af58
 801a530:	0802ad30 	.word	0x0802ad30
 801a534:	0802ade8 	.word	0x0802ade8
 801a538:	0802ae88 	.word	0x0802ae88
 801a53c:	0802ae28 	.word	0x0802ae28
 801a540:	0802aecc 	.word	0x0802aecc
 801a544:	0802af20 	.word	0x0802af20
 801a548:	0802af40 	.word	0x0802af40
 801a54c:	0802af4c 	.word	0x0802af4c
 801a550:	0802af5c 	.word	0x0802af5c
 801a554:	20000aa8 	.word	0x20000aa8
 801a558:	66666667 	.word	0x66666667
 801a55c:	2000e6d7 	.word	0x2000e6d7
 801a560:	2000e6d6 	.word	0x2000e6d6
 801a564:	2000e6d4 	.word	0x2000e6d4
 801a568:	1ad3      	subs	r3, r2, r3
 801a56a:	b21b      	sxth	r3, r3
 801a56c:	b2d8      	uxtb	r0, r3
 801a56e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a572:	9300      	str	r3, [sp, #0]
 801a574:	230b      	movs	r3, #11
 801a576:	22b8      	movs	r2, #184	; 0xb8
 801a578:	21ee      	movs	r1, #238	; 0xee
 801a57a:	f001 f99d 	bl	801b8b8 <DrawDigit>
 801a57e:	e085      	b.n	801a68c <DrawLowSpectrum+0xae8>
	}
	else {
		DrawDigit(min / 10, 134, 184, 11, 0x00FFFFFF);
 801a580:	4bb9      	ldr	r3, [pc, #740]	; (801a868 <DrawLowSpectrum+0xcc4>)
 801a582:	f993 3000 	ldrsb.w	r3, [r3]
 801a586:	4ab9      	ldr	r2, [pc, #740]	; (801a86c <DrawLowSpectrum+0xcc8>)
 801a588:	fb82 1203 	smull	r1, r2, r2, r3
 801a58c:	1092      	asrs	r2, r2, #2
 801a58e:	17db      	asrs	r3, r3, #31
 801a590:	1ad3      	subs	r3, r2, r3
 801a592:	b25b      	sxtb	r3, r3
 801a594:	b2d8      	uxtb	r0, r3
 801a596:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a59a:	9300      	str	r3, [sp, #0]
 801a59c:	230b      	movs	r3, #11
 801a59e:	22b8      	movs	r2, #184	; 0xb8
 801a5a0:	2186      	movs	r1, #134	; 0x86
 801a5a2:	f001 f989 	bl	801b8b8 <DrawDigit>
		DrawDigit(min % 10, 148, 184, 11, 0x00FFFFFF);
 801a5a6:	4bb0      	ldr	r3, [pc, #704]	; (801a868 <DrawLowSpectrum+0xcc4>)
 801a5a8:	f993 2000 	ldrsb.w	r2, [r3]
 801a5ac:	4baf      	ldr	r3, [pc, #700]	; (801a86c <DrawLowSpectrum+0xcc8>)
 801a5ae:	fb83 1302 	smull	r1, r3, r3, r2
 801a5b2:	1099      	asrs	r1, r3, #2
 801a5b4:	17d3      	asrs	r3, r2, #31
 801a5b6:	1ac9      	subs	r1, r1, r3
 801a5b8:	460b      	mov	r3, r1
 801a5ba:	009b      	lsls	r3, r3, #2
 801a5bc:	440b      	add	r3, r1
 801a5be:	005b      	lsls	r3, r3, #1
 801a5c0:	1ad3      	subs	r3, r2, r3
 801a5c2:	b25b      	sxtb	r3, r3
 801a5c4:	b2d8      	uxtb	r0, r3
 801a5c6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a5ca:	9300      	str	r3, [sp, #0]
 801a5cc:	230b      	movs	r3, #11
 801a5ce:	22b8      	movs	r2, #184	; 0xb8
 801a5d0:	2194      	movs	r1, #148	; 0x94
 801a5d2:	f001 f971 	bl	801b8b8 <DrawDigit>

		DrawDigit(sec / 10, 185, 184, 11, 0x00FFFFFF);
 801a5d6:	4ba6      	ldr	r3, [pc, #664]	; (801a870 <DrawLowSpectrum+0xccc>)
 801a5d8:	f993 3000 	ldrsb.w	r3, [r3]
 801a5dc:	4aa3      	ldr	r2, [pc, #652]	; (801a86c <DrawLowSpectrum+0xcc8>)
 801a5de:	fb82 1203 	smull	r1, r2, r2, r3
 801a5e2:	1092      	asrs	r2, r2, #2
 801a5e4:	17db      	asrs	r3, r3, #31
 801a5e6:	1ad3      	subs	r3, r2, r3
 801a5e8:	b25b      	sxtb	r3, r3
 801a5ea:	b2d8      	uxtb	r0, r3
 801a5ec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a5f0:	9300      	str	r3, [sp, #0]
 801a5f2:	230b      	movs	r3, #11
 801a5f4:	22b8      	movs	r2, #184	; 0xb8
 801a5f6:	21b9      	movs	r1, #185	; 0xb9
 801a5f8:	f001 f95e 	bl	801b8b8 <DrawDigit>
		DrawDigit(sec % 10, 199, 184, 11, 0x00FFFFFF);
 801a5fc:	4b9c      	ldr	r3, [pc, #624]	; (801a870 <DrawLowSpectrum+0xccc>)
 801a5fe:	f993 2000 	ldrsb.w	r2, [r3]
 801a602:	4b9a      	ldr	r3, [pc, #616]	; (801a86c <DrawLowSpectrum+0xcc8>)
 801a604:	fb83 1302 	smull	r1, r3, r3, r2
 801a608:	1099      	asrs	r1, r3, #2
 801a60a:	17d3      	asrs	r3, r2, #31
 801a60c:	1ac9      	subs	r1, r1, r3
 801a60e:	460b      	mov	r3, r1
 801a610:	009b      	lsls	r3, r3, #2
 801a612:	440b      	add	r3, r1
 801a614:	005b      	lsls	r3, r3, #1
 801a616:	1ad3      	subs	r3, r2, r3
 801a618:	b25b      	sxtb	r3, r3
 801a61a:	b2d8      	uxtb	r0, r3
 801a61c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a620:	9300      	str	r3, [sp, #0]
 801a622:	230b      	movs	r3, #11
 801a624:	22b8      	movs	r2, #184	; 0xb8
 801a626:	21c7      	movs	r1, #199	; 0xc7
 801a628:	f001 f946 	bl	801b8b8 <DrawDigit>

		DrawDigit(fr / 20, 224, 184, 11, 0x00FFFFFF);
 801a62c:	4b91      	ldr	r3, [pc, #580]	; (801a874 <DrawLowSpectrum+0xcd0>)
 801a62e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a632:	4a8e      	ldr	r2, [pc, #568]	; (801a86c <DrawLowSpectrum+0xcc8>)
 801a634:	fb82 1203 	smull	r1, r2, r2, r3
 801a638:	10d2      	asrs	r2, r2, #3
 801a63a:	17db      	asrs	r3, r3, #31
 801a63c:	1ad3      	subs	r3, r2, r3
 801a63e:	b21b      	sxth	r3, r3
 801a640:	b2d8      	uxtb	r0, r3
 801a642:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a646:	9300      	str	r3, [sp, #0]
 801a648:	230b      	movs	r3, #11
 801a64a:	22b8      	movs	r2, #184	; 0xb8
 801a64c:	21e0      	movs	r1, #224	; 0xe0
 801a64e:	f001 f933 	bl	801b8b8 <DrawDigit>
		DrawDigit((fr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 801a652:	4b88      	ldr	r3, [pc, #544]	; (801a874 <DrawLowSpectrum+0xcd0>)
 801a654:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	da00      	bge.n	801a65e <DrawLowSpectrum+0xaba>
 801a65c:	3301      	adds	r3, #1
 801a65e:	105b      	asrs	r3, r3, #1
 801a660:	b21a      	sxth	r2, r3
 801a662:	4b82      	ldr	r3, [pc, #520]	; (801a86c <DrawLowSpectrum+0xcc8>)
 801a664:	fb83 1302 	smull	r1, r3, r3, r2
 801a668:	1099      	asrs	r1, r3, #2
 801a66a:	17d3      	asrs	r3, r2, #31
 801a66c:	1ac9      	subs	r1, r1, r3
 801a66e:	460b      	mov	r3, r1
 801a670:	009b      	lsls	r3, r3, #2
 801a672:	440b      	add	r3, r1
 801a674:	005b      	lsls	r3, r3, #1
 801a676:	1ad3      	subs	r3, r2, r3
 801a678:	b21b      	sxth	r3, r3
 801a67a:	b2d8      	uxtb	r0, r3
 801a67c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a680:	9300      	str	r3, [sp, #0]
 801a682:	230b      	movs	r3, #11
 801a684:	22b8      	movs	r2, #184	; 0xb8
 801a686:	21ee      	movs	r1, #238	; 0xee
 801a688:	f001 f916 	bl	801b8b8 <DrawDigit>
	}

	uint16_t bpm = rekordbox.bpm[beat] * (1 + trak.percent);
 801a68c:	4b7a      	ldr	r3, [pc, #488]	; (801a878 <DrawLowSpectrum+0xcd4>)
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	4a7a      	ldr	r2, [pc, #488]	; (801a87c <DrawLowSpectrum+0xcd8>)
 801a692:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801a696:	005b      	lsls	r3, r3, #1
 801a698:	4413      	add	r3, r2
 801a69a:	889b      	ldrh	r3, [r3, #4]
 801a69c:	ee07 3a90 	vmov	s15, r3
 801a6a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a6a4:	4b76      	ldr	r3, [pc, #472]	; (801a880 <DrawLowSpectrum+0xcdc>)
 801a6a6:	edd3 7a01 	vldr	s15, [r3, #4]
 801a6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a6b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a6ba:	ee17 3a90 	vmov	r3, s15
 801a6be:	823b      	strh	r3, [r7, #16]
	if(bpm / 10000 > 0) {
 801a6c0:	8a3b      	ldrh	r3, [r7, #16]
 801a6c2:	f242 720f 	movw	r2, #9999	; 0x270f
 801a6c6:	4293      	cmp	r3, r2
 801a6c8:	d90f      	bls.n	801a6ea <DrawLowSpectrum+0xb46>
		DrawDigit(bpm / 10000, 400, 176, 10, 0x00FFFFFF);
 801a6ca:	8a3b      	ldrh	r3, [r7, #16]
 801a6cc:	4a6d      	ldr	r2, [pc, #436]	; (801a884 <DrawLowSpectrum+0xce0>)
 801a6ce:	fba2 2303 	umull	r2, r3, r2, r3
 801a6d2:	0b5b      	lsrs	r3, r3, #13
 801a6d4:	b29b      	uxth	r3, r3
 801a6d6:	b2d8      	uxtb	r0, r3
 801a6d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a6dc:	9300      	str	r3, [sp, #0]
 801a6de:	230a      	movs	r3, #10
 801a6e0:	22b0      	movs	r2, #176	; 0xb0
 801a6e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a6e6:	f001 f8e7 	bl	801b8b8 <DrawDigit>
	}
	if(bpm / 1000 > 0) {
 801a6ea:	8a3b      	ldrh	r3, [r7, #16]
 801a6ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a6f0:	d31d      	bcc.n	801a72e <DrawLowSpectrum+0xb8a>
		DrawDigit(((bpm / 100) % 100) / 10, 415, 176, 10, 0x00FFFFFF);
 801a6f2:	8a3b      	ldrh	r3, [r7, #16]
 801a6f4:	4a64      	ldr	r2, [pc, #400]	; (801a888 <DrawLowSpectrum+0xce4>)
 801a6f6:	fba2 2303 	umull	r2, r3, r2, r3
 801a6fa:	095b      	lsrs	r3, r3, #5
 801a6fc:	b29b      	uxth	r3, r3
 801a6fe:	4a62      	ldr	r2, [pc, #392]	; (801a888 <DrawLowSpectrum+0xce4>)
 801a700:	fba2 1203 	umull	r1, r2, r2, r3
 801a704:	0952      	lsrs	r2, r2, #5
 801a706:	2164      	movs	r1, #100	; 0x64
 801a708:	fb01 f202 	mul.w	r2, r1, r2
 801a70c:	1a9b      	subs	r3, r3, r2
 801a70e:	b29b      	uxth	r3, r3
 801a710:	4a5e      	ldr	r2, [pc, #376]	; (801a88c <DrawLowSpectrum+0xce8>)
 801a712:	fba2 2303 	umull	r2, r3, r2, r3
 801a716:	08db      	lsrs	r3, r3, #3
 801a718:	b29b      	uxth	r3, r3
 801a71a:	b2d8      	uxtb	r0, r3
 801a71c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a720:	9300      	str	r3, [sp, #0]
 801a722:	230a      	movs	r3, #10
 801a724:	22b0      	movs	r2, #176	; 0xb0
 801a726:	f240 119f 	movw	r1, #415	; 0x19f
 801a72a:	f001 f8c5 	bl	801b8b8 <DrawDigit>
	}
	DrawDigit(((bpm / 100) % 100) % 10, 430, 176, 10, 0x00FFFFFF);
 801a72e:	8a3b      	ldrh	r3, [r7, #16]
 801a730:	4a55      	ldr	r2, [pc, #340]	; (801a888 <DrawLowSpectrum+0xce4>)
 801a732:	fba2 2303 	umull	r2, r3, r2, r3
 801a736:	095b      	lsrs	r3, r3, #5
 801a738:	b29b      	uxth	r3, r3
 801a73a:	4a53      	ldr	r2, [pc, #332]	; (801a888 <DrawLowSpectrum+0xce4>)
 801a73c:	fba2 1203 	umull	r1, r2, r2, r3
 801a740:	0952      	lsrs	r2, r2, #5
 801a742:	2164      	movs	r1, #100	; 0x64
 801a744:	fb01 f202 	mul.w	r2, r1, r2
 801a748:	1a9b      	subs	r3, r3, r2
 801a74a:	b29a      	uxth	r2, r3
 801a74c:	4b4f      	ldr	r3, [pc, #316]	; (801a88c <DrawLowSpectrum+0xce8>)
 801a74e:	fba3 1302 	umull	r1, r3, r3, r2
 801a752:	08d9      	lsrs	r1, r3, #3
 801a754:	460b      	mov	r3, r1
 801a756:	009b      	lsls	r3, r3, #2
 801a758:	440b      	add	r3, r1
 801a75a:	005b      	lsls	r3, r3, #1
 801a75c:	1ad3      	subs	r3, r2, r3
 801a75e:	b29b      	uxth	r3, r3
 801a760:	b2d8      	uxtb	r0, r3
 801a762:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a766:	9300      	str	r3, [sp, #0]
 801a768:	230a      	movs	r3, #10
 801a76a:	22b0      	movs	r2, #176	; 0xb0
 801a76c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a770:	f001 f8a2 	bl	801b8b8 <DrawDigit>
	DrawElement(2, 2, 442, 194, 0x00FFFFFF, small_point);
 801a774:	4b46      	ldr	r3, [pc, #280]	; (801a890 <DrawLowSpectrum+0xcec>)
 801a776:	9301      	str	r3, [sp, #4]
 801a778:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a77c:	9300      	str	r3, [sp, #0]
 801a77e:	23c2      	movs	r3, #194	; 0xc2
 801a780:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 801a784:	2102      	movs	r1, #2
 801a786:	2002      	movs	r0, #2
 801a788:	f000 faa4 	bl	801acd4 <DrawElement>
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 801a78c:	8a3b      	ldrh	r3, [r7, #16]
 801a78e:	4a3f      	ldr	r2, [pc, #252]	; (801a88c <DrawLowSpectrum+0xce8>)
 801a790:	fba2 2303 	umull	r2, r3, r2, r3
 801a794:	08db      	lsrs	r3, r3, #3
 801a796:	b29a      	uxth	r2, r3
 801a798:	4b3c      	ldr	r3, [pc, #240]	; (801a88c <DrawLowSpectrum+0xce8>)
 801a79a:	fba3 1302 	umull	r1, r3, r3, r2
 801a79e:	08d9      	lsrs	r1, r3, #3
 801a7a0:	460b      	mov	r3, r1
 801a7a2:	009b      	lsls	r3, r3, #2
 801a7a4:	440b      	add	r3, r1
 801a7a6:	005b      	lsls	r3, r3, #1
 801a7a8:	1ad3      	subs	r3, r2, r3
 801a7aa:	b29b      	uxth	r3, r3
 801a7ac:	b2d8      	uxtb	r0, r3
 801a7ae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a7b2:	9300      	str	r3, [sp, #0]
 801a7b4:	2307      	movs	r3, #7
 801a7b6:	22b6      	movs	r2, #182	; 0xb6
 801a7b8:	f240 11bd 	movw	r1, #445	; 0x1bd
 801a7bc:	f001 f87c 	bl	801b8b8 <DrawDigit>

	if(rekordbox.state == 1) {
 801a7c0:	4b2e      	ldr	r3, [pc, #184]	; (801a87c <DrawLowSpectrum+0xcd8>)
 801a7c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a7c6:	f893 3d94 	ldrb.w	r3, [r3, #3476]	; 0xd94
 801a7ca:	2b01      	cmp	r3, #1
 801a7cc:	d136      	bne.n	801a83c <DrawLowSpectrum+0xc98>
		if(rekordbox.cue_start_position[0] != 0) {
 801a7ce:	4b2b      	ldr	r3, [pc, #172]	; (801a87c <DrawLowSpectrum+0xcd8>)
 801a7d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a7d4:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d01c      	beq.n	801a816 <DrawLowSpectrum+0xc72>
			DrawElement(9, 5, 36+(rekordbox.cue_start_position[0]
 801a7dc:	4b27      	ldr	r3, [pc, #156]	; (801a87c <DrawLowSpectrum+0xcd8>)
 801a7de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a7e2:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
				*400/rekordbox.spectrum_size), 219, 0x00FFFF00, hot_cue);
 801a7e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a7ea:	fb02 f303 	mul.w	r3, r2, r3
 801a7ee:	461a      	mov	r2, r3
 801a7f0:	4b22      	ldr	r3, [pc, #136]	; (801a87c <DrawLowSpectrum+0xcd8>)
 801a7f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a7f6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801a7fa:	fbb2 f3f3 	udiv	r3, r2, r3
			DrawElement(9, 5, 36+(rekordbox.cue_start_position[0]
 801a7fe:	b29b      	uxth	r3, r3
 801a800:	3324      	adds	r3, #36	; 0x24
 801a802:	b29a      	uxth	r2, r3
 801a804:	4b23      	ldr	r3, [pc, #140]	; (801a894 <DrawLowSpectrum+0xcf0>)
 801a806:	9301      	str	r3, [sp, #4]
 801a808:	4b23      	ldr	r3, [pc, #140]	; (801a898 <DrawLowSpectrum+0xcf4>)
 801a80a:	9300      	str	r3, [sp, #0]
 801a80c:	23db      	movs	r3, #219	; 0xdb
 801a80e:	2105      	movs	r1, #5
 801a810:	2009      	movs	r0, #9
 801a812:	f000 fa5f 	bl	801acd4 <DrawElement>
		}
		// draw cue indicator
		if(rekordbox.cue_start_position[0] != 0) {
 801a816:	4b19      	ldr	r3, [pc, #100]	; (801a87c <DrawLowSpectrum+0xcd8>)
 801a818:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a81c:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
 801a820:	2b00      	cmp	r3, #0
 801a822:	d00b      	beq.n	801a83c <DrawLowSpectrum+0xc98>
			DrawElement(36, 11, 1, 260, 0x00FF0000, cue_ind);
 801a824:	4b1d      	ldr	r3, [pc, #116]	; (801a89c <DrawLowSpectrum+0xcf8>)
 801a826:	9301      	str	r3, [sp, #4]
 801a828:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801a82c:	9300      	str	r3, [sp, #0]
 801a82e:	f44f 7382 	mov.w	r3, #260	; 0x104
 801a832:	2201      	movs	r2, #1
 801a834:	210b      	movs	r1, #11
 801a836:	2024      	movs	r0, #36	; 0x24
 801a838:	f000 fa4c 	bl	801acd4 <DrawElement>
		}
	}

	if(rekordbox.cues > 1) {
 801a83c:	4b0f      	ldr	r3, [pc, #60]	; (801a87c <DrawLowSpectrum+0xcd8>)
 801a83e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a842:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 801a846:	2b01      	cmp	r3, #1
 801a848:	f340 80da 	ble.w	801aa00 <DrawLowSpectrum+0xe5c>
		// draw memory indicator
		DrawElement(36, 11, 1, 230, 0x00FF0000, memory_ind);
 801a84c:	4b14      	ldr	r3, [pc, #80]	; (801a8a0 <DrawLowSpectrum+0xcfc>)
 801a84e:	9301      	str	r3, [sp, #4]
 801a850:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801a854:	9300      	str	r3, [sp, #0]
 801a856:	23e6      	movs	r3, #230	; 0xe6
 801a858:	2201      	movs	r2, #1
 801a85a:	210b      	movs	r1, #11
 801a85c:	2024      	movs	r0, #36	; 0x24
 801a85e:	f000 fa39 	bl	801acd4 <DrawElement>
		for(i = 1; i < rekordbox.cues; i++) {
 801a862:	2301      	movs	r3, #1
 801a864:	617b      	str	r3, [r7, #20]
 801a866:	e0c1      	b.n	801a9ec <DrawLowSpectrum+0xe48>
 801a868:	2000e6d3 	.word	0x2000e6d3
 801a86c:	66666667 	.word	0x66666667
 801a870:	2000e6d2 	.word	0x2000e6d2
 801a874:	2000e6d0 	.word	0x2000e6d0
 801a878:	200008e0 	.word	0x200008e0
 801a87c:	20015170 	.word	0x20015170
 801a880:	2000e6e0 	.word	0x2000e6e0
 801a884:	d1b71759 	.word	0xd1b71759
 801a888:	51eb851f 	.word	0x51eb851f
 801a88c:	cccccccd 	.word	0xcccccccd
 801a890:	0802af58 	.word	0x0802af58
 801a894:	0802ab30 	.word	0x0802ab30
 801a898:	00ffff00 	.word	0x00ffff00
 801a89c:	0802ac5c 	.word	0x0802ac5c
 801a8a0:	0802aca4 	.word	0x0802aca4
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 801a8a4:	4ba9      	ldr	r3, [pc, #676]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801a8a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a8aa:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801a8ae:	ee07 3a90 	vmov	s15, r3
 801a8b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 801a8b6:	4aa5      	ldr	r2, [pc, #660]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801a8b8:	697b      	ldr	r3, [r7, #20]
 801a8ba:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 801a8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a8c2:	ee07 3a90 	vmov	s15, r3
 801a8c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 801a8ca:	ee67 6a27 	vmul.f32	s13, s14, s15
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 801a8ce:	4b9f      	ldr	r3, [pc, #636]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801a8d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a8d4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801a8d8:	ee07 3a90 	vmov	s15, r3
 801a8dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801a8e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 801a8e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a8e8:	ee17 3a90 	vmov	r3, s15
 801a8ec:	81fb      	strh	r3, [r7, #14]
			if(rekordbox.cue_singleloop[i] == 1) {
 801a8ee:	4a97      	ldr	r2, [pc, #604]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801a8f0:	697b      	ldr	r3, [r7, #20]
 801a8f2:	441a      	add	r2, r3
 801a8f4:	f642 5328 	movw	r3, #11560	; 0x2d28
 801a8f8:	4413      	add	r3, r2
 801a8fa:	781b      	ldrb	r3, [r3, #0]
 801a8fc:	2b01      	cmp	r3, #1
 801a8fe:	d10c      	bne.n	801a91a <DrawLowSpectrum+0xd76>
				DrawElement(9, 5, 37+start_pos, 219, 0x00FF0000, hot_cue);
 801a900:	89fb      	ldrh	r3, [r7, #14]
 801a902:	3325      	adds	r3, #37	; 0x25
 801a904:	b29a      	uxth	r2, r3
 801a906:	4b92      	ldr	r3, [pc, #584]	; (801ab50 <DrawLowSpectrum+0xfac>)
 801a908:	9301      	str	r3, [sp, #4]
 801a90a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801a90e:	9300      	str	r3, [sp, #0]
 801a910:	23db      	movs	r3, #219	; 0xdb
 801a912:	2105      	movs	r1, #5
 801a914:	2009      	movs	r0, #9
 801a916:	f000 f9dd 	bl	801acd4 <DrawElement>
			}
			if(rekordbox.cue_singleloop[i] == 2) {
 801a91a:	4a8c      	ldr	r2, [pc, #560]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801a91c:	697b      	ldr	r3, [r7, #20]
 801a91e:	441a      	add	r2, r3
 801a920:	f642 5328 	movw	r3, #11560	; 0x2d28
 801a924:	4413      	add	r3, r2
 801a926:	781b      	ldrb	r3, [r3, #0]
 801a928:	2b02      	cmp	r3, #2
 801a92a:	d15c      	bne.n	801a9e6 <DrawLowSpectrum+0xe42>
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 801a92c:	4b87      	ldr	r3, [pc, #540]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801a92e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a932:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801a936:	ee07 3a90 	vmov	s15, r3
 801a93a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 801a93e:	4a83      	ldr	r2, [pc, #524]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801a940:	697b      	ldr	r3, [r7, #20]
 801a942:	f603 23e6 	addw	r3, r3, #2790	; 0xae6
 801a946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a94a:	ee07 3a90 	vmov	s15, r3
 801a94e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 801a952:	ee67 6a27 	vmul.f32	s13, s14, s15
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 801a956:	4b7d      	ldr	r3, [pc, #500]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801a958:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a95c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801a960:	ee07 3a90 	vmov	s15, r3
 801a964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801a968:	eec6 7a87 	vdiv.f32	s15, s13, s14
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 801a96c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a970:	ee17 3a90 	vmov	r3, s15
 801a974:	81bb      	strh	r3, [r7, #12]
				VLine(40+start_pos, 220, 40, 0x0000FF00);
 801a976:	89fb      	ldrh	r3, [r7, #14]
 801a978:	3328      	adds	r3, #40	; 0x28
 801a97a:	b298      	uxth	r0, r3
 801a97c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 801a980:	2228      	movs	r2, #40	; 0x28
 801a982:	21dc      	movs	r1, #220	; 0xdc
 801a984:	f000 fe42 	bl	801b60c <VLine>
				Pixel(41+start_pos, 220, 0x0000FF00);
 801a988:	89fb      	ldrh	r3, [r7, #14]
 801a98a:	3329      	adds	r3, #41	; 0x29
 801a98c:	b29b      	uxth	r3, r3
 801a98e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801a992:	21dc      	movs	r1, #220	; 0xdc
 801a994:	4618      	mov	r0, r3
 801a996:	f000 ff5d 	bl	801b854 <Pixel>
				Pixel(41+start_pos, 259, 0x0000FF00);
 801a99a:	89fb      	ldrh	r3, [r7, #14]
 801a99c:	3329      	adds	r3, #41	; 0x29
 801a99e:	b29b      	uxth	r3, r3
 801a9a0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801a9a4:	f240 1103 	movw	r1, #259	; 0x103
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f000 ff53 	bl	801b854 <Pixel>
				VLine(40+end_pos, 220, 40, 0x0000FF00);
 801a9ae:	89bb      	ldrh	r3, [r7, #12]
 801a9b0:	3328      	adds	r3, #40	; 0x28
 801a9b2:	b298      	uxth	r0, r3
 801a9b4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 801a9b8:	2228      	movs	r2, #40	; 0x28
 801a9ba:	21dc      	movs	r1, #220	; 0xdc
 801a9bc:	f000 fe26 	bl	801b60c <VLine>
				Pixel(39+end_pos, 220, 0x0000FF00);
 801a9c0:	89bb      	ldrh	r3, [r7, #12]
 801a9c2:	3327      	adds	r3, #39	; 0x27
 801a9c4:	b29b      	uxth	r3, r3
 801a9c6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801a9ca:	21dc      	movs	r1, #220	; 0xdc
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f000 ff41 	bl	801b854 <Pixel>
				Pixel(39+end_pos, 259, 0x0000FF00);
 801a9d2:	89bb      	ldrh	r3, [r7, #12]
 801a9d4:	3327      	adds	r3, #39	; 0x27
 801a9d6:	b29b      	uxth	r3, r3
 801a9d8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801a9dc:	f240 1103 	movw	r1, #259	; 0x103
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f000 ff37 	bl	801b854 <Pixel>
		for(i = 1; i < rekordbox.cues; i++) {
 801a9e6:	697b      	ldr	r3, [r7, #20]
 801a9e8:	3301      	adds	r3, #1
 801a9ea:	617b      	str	r3, [r7, #20]
 801a9ec:	4b57      	ldr	r3, [pc, #348]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801a9ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a9f2:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 801a9f6:	461a      	mov	r2, r3
 801a9f8:	697b      	ldr	r3, [r7, #20]
 801a9fa:	4293      	cmp	r3, r2
 801a9fc:	f4ff af52 	bcc.w	801a8a4 <DrawLowSpectrum+0xd00>
			}
		}
	}
	// draw loop borders and loop indicator
	if(display.loop == 1) {
 801aa00:	4b54      	ldr	r3, [pc, #336]	; (801ab54 <DrawLowSpectrum+0xfb0>)
 801aa02:	7c1b      	ldrb	r3, [r3, #16]
 801aa04:	2b01      	cmp	r3, #1
 801aa06:	f040 8086 	bne.w	801ab16 <DrawLowSpectrum+0xf72>
		DrawElement(22, 11, 270, 199, 0x0000FF00, loop_l);
 801aa0a:	4b53      	ldr	r3, [pc, #332]	; (801ab58 <DrawLowSpectrum+0xfb4>)
 801aa0c:	9301      	str	r3, [sp, #4]
 801aa0e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 801aa12:	9300      	str	r3, [sp, #0]
 801aa14:	23c7      	movs	r3, #199	; 0xc7
 801aa16:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801aa1a:	210b      	movs	r1, #11
 801aa1c:	2016      	movs	r0, #22
 801aa1e:	f000 f959 	bl	801acd4 <DrawElement>
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 801aa22:	4b4a      	ldr	r3, [pc, #296]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801aa24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801aa28:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801aa2c:	ee07 3a90 	vmov	s15, r3
 801aa30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
				(float)display.loopstart/rekordbox.spectrum_size;
 801aa34:	4b47      	ldr	r3, [pc, #284]	; (801ab54 <DrawLowSpectrum+0xfb0>)
 801aa36:	689b      	ldr	r3, [r3, #8]
 801aa38:	ee07 3a90 	vmov	s15, r3
 801aa3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 801aa40:	ee67 6a27 	vmul.f32	s13, s14, s15
				(float)display.loopstart/rekordbox.spectrum_size;
 801aa44:	4b41      	ldr	r3, [pc, #260]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801aa46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801aa4a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801aa4e:	ee07 3a90 	vmov	s15, r3
 801aa52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801aa56:	eec6 7a87 	vdiv.f32	s15, s13, s14
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 801aa5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801aa5e:	ee17 3a90 	vmov	r3, s15
 801aa62:	817b      	strh	r3, [r7, #10]
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 801aa64:	4b39      	ldr	r3, [pc, #228]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801aa66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801aa6a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801aa6e:	ee07 3a90 	vmov	s15, r3
 801aa72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
				(float)display.loopend/rekordbox.spectrum_size;
 801aa76:	4b37      	ldr	r3, [pc, #220]	; (801ab54 <DrawLowSpectrum+0xfb0>)
 801aa78:	68db      	ldr	r3, [r3, #12]
 801aa7a:	ee07 3a90 	vmov	s15, r3
 801aa7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 801aa82:	ee67 6a27 	vmul.f32	s13, s14, s15
				(float)display.loopend/rekordbox.spectrum_size;
 801aa86:	4b31      	ldr	r3, [pc, #196]	; (801ab4c <DrawLowSpectrum+0xfa8>)
 801aa88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801aa8c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801aa90:	ee07 3a90 	vmov	s15, r3
 801aa94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801aa98:	eec6 7a87 	vdiv.f32	s15, s13, s14
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 801aa9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801aaa0:	ee17 3a90 	vmov	r3, s15
 801aaa4:	813b      	strh	r3, [r7, #8]
		VLine(40+start_pos, 220, 40, 0x0000FF00);
 801aaa6:	897b      	ldrh	r3, [r7, #10]
 801aaa8:	3328      	adds	r3, #40	; 0x28
 801aaaa:	b298      	uxth	r0, r3
 801aaac:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 801aab0:	2228      	movs	r2, #40	; 0x28
 801aab2:	21dc      	movs	r1, #220	; 0xdc
 801aab4:	f000 fdaa 	bl	801b60c <VLine>
		Pixel(41+start_pos, 220, 0x0000FF00);
 801aab8:	897b      	ldrh	r3, [r7, #10]
 801aaba:	3329      	adds	r3, #41	; 0x29
 801aabc:	b29b      	uxth	r3, r3
 801aabe:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801aac2:	21dc      	movs	r1, #220	; 0xdc
 801aac4:	4618      	mov	r0, r3
 801aac6:	f000 fec5 	bl	801b854 <Pixel>
		Pixel(41+start_pos, 259, 0x0000FF00);
 801aaca:	897b      	ldrh	r3, [r7, #10]
 801aacc:	3329      	adds	r3, #41	; 0x29
 801aace:	b29b      	uxth	r3, r3
 801aad0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801aad4:	f240 1103 	movw	r1, #259	; 0x103
 801aad8:	4618      	mov	r0, r3
 801aada:	f000 febb 	bl	801b854 <Pixel>
		VLine(40+end_pos, 220, 40, 0x0000FF00);
 801aade:	893b      	ldrh	r3, [r7, #8]
 801aae0:	3328      	adds	r3, #40	; 0x28
 801aae2:	b298      	uxth	r0, r3
 801aae4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 801aae8:	2228      	movs	r2, #40	; 0x28
 801aaea:	21dc      	movs	r1, #220	; 0xdc
 801aaec:	f000 fd8e 	bl	801b60c <VLine>
		Pixel(39+end_pos, 220, 0x0000FF00);
 801aaf0:	893b      	ldrh	r3, [r7, #8]
 801aaf2:	3327      	adds	r3, #39	; 0x27
 801aaf4:	b29b      	uxth	r3, r3
 801aaf6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801aafa:	21dc      	movs	r1, #220	; 0xdc
 801aafc:	4618      	mov	r0, r3
 801aafe:	f000 fea9 	bl	801b854 <Pixel>
		Pixel(39+end_pos, 259, 0x0000FF00);
 801ab02:	893b      	ldrh	r3, [r7, #8]
 801ab04:	3327      	adds	r3, #39	; 0x27
 801ab06:	b29b      	uxth	r3, r3
 801ab08:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801ab0c:	f240 1103 	movw	r1, #259	; 0x103
 801ab10:	4618      	mov	r0, r3
 801ab12:	f000 fe9f 	bl	801b854 <Pixel>
	}
	// draw cursor
	VLine(40 + file_pos, 220, 40, 0x00FFFFFF);
 801ab16:	4b11      	ldr	r3, [pc, #68]	; (801ab5c <DrawLowSpectrum+0xfb8>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	b29b      	uxth	r3, r3
 801ab1c:	3328      	adds	r3, #40	; 0x28
 801ab1e:	b298      	uxth	r0, r3
 801ab20:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801ab24:	2228      	movs	r2, #40	; 0x28
 801ab26:	21dc      	movs	r1, #220	; 0xdc
 801ab28:	f000 fd70 	bl	801b60c <VLine>
	VLine(41 + file_pos, 220, 40, 0x00FFFFFF);
 801ab2c:	4b0b      	ldr	r3, [pc, #44]	; (801ab5c <DrawLowSpectrum+0xfb8>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	b29b      	uxth	r3, r3
 801ab32:	3329      	adds	r3, #41	; 0x29
 801ab34:	b298      	uxth	r0, r3
 801ab36:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801ab3a:	2228      	movs	r2, #40	; 0x28
 801ab3c:	21dc      	movs	r1, #220	; 0xdc
 801ab3e:	f000 fd65 	bl	801b60c <VLine>
}
 801ab42:	bf00      	nop
 801ab44:	3718      	adds	r7, #24
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}
 801ab4a:	bf00      	nop
 801ab4c:	20015170 	.word	0x20015170
 801ab50:	0802ab30 	.word	0x0802ab30
 801ab54:	200008fc 	.word	0x200008fc
 801ab58:	0802ab64 	.word	0x0802ab64
 801ab5c:	20001dfc 	.word	0x20001dfc

0801ab60 <SetBeatGrid>:

void SetBeatGrid()
{
 801ab60:	b480      	push	{r7}
 801ab62:	b083      	sub	sp, #12
 801ab64:	af00      	add	r7, sp, #0
	if(position != file_pos_wide) {
 801ab66:	4b52      	ldr	r3, [pc, #328]	; (801acb0 <SetBeatGrid+0x150>)
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	4a52      	ldr	r2, [pc, #328]	; (801acb4 <SetBeatGrid+0x154>)
 801ab6c:	6812      	ldr	r2, [r2, #0]
 801ab6e:	4293      	cmp	r3, r2
 801ab70:	d032      	beq.n	801abd8 <SetBeatGrid+0x78>
		position = file_pos_wide;
 801ab72:	4b50      	ldr	r3, [pc, #320]	; (801acb4 <SetBeatGrid+0x154>)
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	461a      	mov	r2, r3
 801ab78:	4b4d      	ldr	r3, [pc, #308]	; (801acb0 <SetBeatGrid+0x150>)
 801ab7a:	601a      	str	r2, [r3, #0]
		if(stretch > 1) {
 801ab7c:	4b4e      	ldr	r3, [pc, #312]	; (801acb8 <SetBeatGrid+0x158>)
 801ab7e:	edd3 7a00 	vldr	s15, [r3]
 801ab82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ab86:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ab8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab8e:	dd23      	ble.n	801abd8 <SetBeatGrid+0x78>
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 801ab90:	e004      	b.n	801ab9c <SetBeatGrid+0x3c>
				position++;
 801ab92:	4b47      	ldr	r3, [pc, #284]	; (801acb0 <SetBeatGrid+0x150>)
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	3301      	adds	r3, #1
 801ab98:	4a45      	ldr	r2, [pc, #276]	; (801acb0 <SetBeatGrid+0x150>)
 801ab9a:	6013      	str	r3, [r2, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 801ab9c:	4b44      	ldr	r3, [pc, #272]	; (801acb0 <SetBeatGrid+0x150>)
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	4a45      	ldr	r2, [pc, #276]	; (801acb8 <SetBeatGrid+0x158>)
 801aba2:	edd2 7a00 	vldr	s15, [r2]
 801aba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801abaa:	ee17 1a90 	vmov	r1, s15
 801abae:	fb93 f2f1 	sdiv	r2, r3, r1
 801abb2:	fb01 f202 	mul.w	r2, r1, r2
 801abb6:	1a9a      	subs	r2, r3, r2
 801abb8:	4b40      	ldr	r3, [pc, #256]	; (801acbc <SetBeatGrid+0x15c>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	493e      	ldr	r1, [pc, #248]	; (801acb8 <SetBeatGrid+0x158>)
 801abbe:	edd1 7a00 	vldr	s15, [r1]
 801abc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801abc6:	ee17 0a90 	vmov	r0, s15
 801abca:	fb93 f1f0 	sdiv	r1, r3, r0
 801abce:	fb00 f101 	mul.w	r1, r0, r1
 801abd2:	1a5b      	subs	r3, r3, r1
 801abd4:	429a      	cmp	r2, r3
 801abd6:	d1dc      	bne.n	801ab92 <SetBeatGrid+0x32>
			}
		}
	}
	beat = 0;
 801abd8:	4b39      	ldr	r3, [pc, #228]	; (801acc0 <SetBeatGrid+0x160>)
 801abda:	2200      	movs	r2, #0
 801abdc:	601a      	str	r2, [r3, #0]
	first_beat = 0;
 801abde:	4b39      	ldr	r3, [pc, #228]	; (801acc4 <SetBeatGrid+0x164>)
 801abe0:	2200      	movs	r2, #0
 801abe2:	601a      	str	r2, [r3, #0]
	int32_t check = position + (-240)*stretch;
 801abe4:	4b32      	ldr	r3, [pc, #200]	; (801acb0 <SetBeatGrid+0x150>)
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	ee07 3a90 	vmov	s15, r3
 801abec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801abf0:	4b31      	ldr	r3, [pc, #196]	; (801acb8 <SetBeatGrid+0x158>)
 801abf2:	edd3 7a00 	vldr	s15, [r3]
 801abf6:	eddf 6a34 	vldr	s13, [pc, #208]	; 801acc8 <SetBeatGrid+0x168>
 801abfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801abfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ac06:	ee17 3a90 	vmov	r3, s15
 801ac0a:	607b      	str	r3, [r7, #4]
	if(check > 0) {
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	dd1e      	ble.n	801ac50 <SetBeatGrid+0xf0>
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
 801ac12:	e004      	b.n	801ac1e <SetBeatGrid+0xbe>
			first_beat++;
 801ac14:	4b2b      	ldr	r3, [pc, #172]	; (801acc4 <SetBeatGrid+0x164>)
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	3301      	adds	r3, #1
 801ac1a:	4a2a      	ldr	r2, [pc, #168]	; (801acc4 <SetBeatGrid+0x164>)
 801ac1c:	6013      	str	r3, [r2, #0]
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
 801ac1e:	4b29      	ldr	r3, [pc, #164]	; (801acc4 <SetBeatGrid+0x164>)
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	4a2a      	ldr	r2, [pc, #168]	; (801accc <SetBeatGrid+0x16c>)
 801ac24:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801ac28:	009b      	lsls	r3, r3, #2
 801ac2a:	4413      	add	r3, r2
 801ac2c:	685b      	ldr	r3, [r3, #4]
 801ac2e:	2296      	movs	r2, #150	; 0x96
 801ac30:	fb02 f303 	mul.w	r3, r2, r3
 801ac34:	4a26      	ldr	r2, [pc, #152]	; (801acd0 <SetBeatGrid+0x170>)
 801ac36:	fba2 2303 	umull	r2, r3, r2, r3
 801ac3a:	099a      	lsrs	r2, r3, #6
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	429a      	cmp	r2, r3
 801ac40:	d806      	bhi.n	801ac50 <SetBeatGrid+0xf0>
 801ac42:	4b22      	ldr	r3, [pc, #136]	; (801accc <SetBeatGrid+0x16c>)
 801ac44:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 801ac48:	4b1e      	ldr	r3, [pc, #120]	; (801acc4 <SetBeatGrid+0x164>)
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	d2e1      	bcs.n	801ac14 <SetBeatGrid+0xb4>
		}
	}
	if(position > 0) {
 801ac50:	4b17      	ldr	r3, [pc, #92]	; (801acb0 <SetBeatGrid+0x150>)
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	dd24      	ble.n	801aca2 <SetBeatGrid+0x142>
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
 801ac58:	e004      	b.n	801ac64 <SetBeatGrid+0x104>
			beat++;
 801ac5a:	4b19      	ldr	r3, [pc, #100]	; (801acc0 <SetBeatGrid+0x160>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	3301      	adds	r3, #1
 801ac60:	4a17      	ldr	r2, [pc, #92]	; (801acc0 <SetBeatGrid+0x160>)
 801ac62:	6013      	str	r3, [r2, #0]
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
 801ac64:	4b16      	ldr	r3, [pc, #88]	; (801acc0 <SetBeatGrid+0x160>)
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	4a18      	ldr	r2, [pc, #96]	; (801accc <SetBeatGrid+0x16c>)
 801ac6a:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801ac6e:	009b      	lsls	r3, r3, #2
 801ac70:	4413      	add	r3, r2
 801ac72:	685b      	ldr	r3, [r3, #4]
 801ac74:	2296      	movs	r2, #150	; 0x96
 801ac76:	fb02 f303 	mul.w	r3, r2, r3
 801ac7a:	4a15      	ldr	r2, [pc, #84]	; (801acd0 <SetBeatGrid+0x170>)
 801ac7c:	fba2 2303 	umull	r2, r3, r2, r3
 801ac80:	099b      	lsrs	r3, r3, #6
 801ac82:	4a0b      	ldr	r2, [pc, #44]	; (801acb0 <SetBeatGrid+0x150>)
 801ac84:	6812      	ldr	r2, [r2, #0]
 801ac86:	4293      	cmp	r3, r2
 801ac88:	d806      	bhi.n	801ac98 <SetBeatGrid+0x138>
 801ac8a:	4b10      	ldr	r3, [pc, #64]	; (801accc <SetBeatGrid+0x16c>)
 801ac8c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 801ac90:	4a0b      	ldr	r2, [pc, #44]	; (801acc0 <SetBeatGrid+0x160>)
 801ac92:	6812      	ldr	r2, [r2, #0]
 801ac94:	4293      	cmp	r3, r2
 801ac96:	d2e0      	bcs.n	801ac5a <SetBeatGrid+0xfa>
		}
		beat--;
 801ac98:	4b09      	ldr	r3, [pc, #36]	; (801acc0 <SetBeatGrid+0x160>)
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	3b01      	subs	r3, #1
 801ac9e:	4a08      	ldr	r2, [pc, #32]	; (801acc0 <SetBeatGrid+0x160>)
 801aca0:	6013      	str	r3, [r2, #0]
	}
}
 801aca2:	bf00      	nop
 801aca4:	370c      	adds	r7, #12
 801aca6:	46bd      	mov	sp, r7
 801aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acac:	4770      	bx	lr
 801acae:	bf00      	nop
 801acb0:	200008f4 	.word	0x200008f4
 801acb4:	20001e00 	.word	0x20001e00
 801acb8:	20000028 	.word	0x20000028
 801acbc:	200008f8 	.word	0x200008f8
 801acc0:	200008e0 	.word	0x200008e0
 801acc4:	200008e4 	.word	0x200008e4
 801acc8:	c3700000 	.word	0xc3700000
 801accc:	20015170 	.word	0x20015170
 801acd0:	10624dd3 	.word	0x10624dd3

0801acd4 <DrawElement>:

// draws element
void DrawElement(uint16_t width, uint16_t height, uint16_t xpos, uint16_t ypos, uint32_t color, const uint16_t* element)
{
 801acd4:	b590      	push	{r4, r7, lr}
 801acd6:	b085      	sub	sp, #20
 801acd8:	af00      	add	r7, sp, #0
 801acda:	4604      	mov	r4, r0
 801acdc:	4608      	mov	r0, r1
 801acde:	4611      	mov	r1, r2
 801ace0:	461a      	mov	r2, r3
 801ace2:	4623      	mov	r3, r4
 801ace4:	80fb      	strh	r3, [r7, #6]
 801ace6:	4603      	mov	r3, r0
 801ace8:	80bb      	strh	r3, [r7, #4]
 801acea:	460b      	mov	r3, r1
 801acec:	807b      	strh	r3, [r7, #2]
 801acee:	4613      	mov	r3, r2
 801acf0:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0;
 801acf2:	2300      	movs	r3, #0
 801acf4:	81fb      	strh	r3, [r7, #14]
	while(i < width) {
 801acf6:	e062      	b.n	801adbe <DrawElement+0xea>
		uint16_t k = 0;
 801acf8:	2300      	movs	r3, #0
 801acfa:	81bb      	strh	r3, [r7, #12]
		while(k < height) {
 801acfc:	e058      	b.n	801adb0 <DrawElement+0xdc>
			if(((element[i] >> k) & 1) == 1) {
 801acfe:	89fb      	ldrh	r3, [r7, #14]
 801ad00:	005b      	lsls	r3, r3, #1
 801ad02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad04:	4413      	add	r3, r2
 801ad06:	881b      	ldrh	r3, [r3, #0]
 801ad08:	461a      	mov	r2, r3
 801ad0a:	89bb      	ldrh	r3, [r7, #12]
 801ad0c:	fa42 f303 	asr.w	r3, r2, r3
 801ad10:	f003 0301 	and.w	r3, r3, #1
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d026      	beq.n	801ad66 <DrawElement+0x92>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801ad18:	4b2d      	ldr	r3, [pc, #180]	; (801add0 <DrawElement+0xfc>)
 801ad1a:	781b      	ldrb	r3, [r3, #0]
 801ad1c:	4619      	mov	r1, r3
 801ad1e:	4a2d      	ldr	r2, [pc, #180]	; (801add4 <DrawElement+0x100>)
 801ad20:	2334      	movs	r3, #52	; 0x34
 801ad22:	fb01 f303 	mul.w	r3, r1, r3
 801ad26:	4413      	add	r3, r2
 801ad28:	335c      	adds	r3, #92	; 0x5c
 801ad2a:	681a      	ldr	r2, [r3, #0]
 801ad2c:	8839      	ldrh	r1, [r7, #0]
 801ad2e:	89bb      	ldrh	r3, [r7, #12]
 801ad30:	1acb      	subs	r3, r1, r3
 801ad32:	4618      	mov	r0, r3
 801ad34:	4b26      	ldr	r3, [pc, #152]	; (801add0 <DrawElement+0xfc>)
 801ad36:	781b      	ldrb	r3, [r3, #0]
 801ad38:	461c      	mov	r4, r3
 801ad3a:	4926      	ldr	r1, [pc, #152]	; (801add4 <DrawElement+0x100>)
 801ad3c:	2334      	movs	r3, #52	; 0x34
 801ad3e:	fb04 f303 	mul.w	r3, r4, r3
 801ad42:	440b      	add	r3, r1
 801ad44:	3360      	adds	r3, #96	; 0x60
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	fb03 f100 	mul.w	r1, r3, r0
 801ad4c:	887b      	ldrh	r3, [r7, #2]
 801ad4e:	4419      	add	r1, r3
 801ad50:	89fb      	ldrh	r3, [r7, #14]
 801ad52:	440b      	add	r3, r1
 801ad54:	005b      	lsls	r3, r3, #1
 801ad56:	4413      	add	r3, r2
 801ad58:	461c      	mov	r4, r3
 801ad5a:	6a38      	ldr	r0, [r7, #32]
 801ad5c:	f7fe fa8a 	bl	8019274 <Color_Convertion>
 801ad60:	4603      	mov	r3, r0
 801ad62:	8023      	strh	r3, [r4, #0]
 801ad64:	e021      	b.n	801adaa <DrawElement+0xd6>
			}
			else {
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801ad66:	4b1a      	ldr	r3, [pc, #104]	; (801add0 <DrawElement+0xfc>)
 801ad68:	781b      	ldrb	r3, [r3, #0]
 801ad6a:	4619      	mov	r1, r3
 801ad6c:	4a19      	ldr	r2, [pc, #100]	; (801add4 <DrawElement+0x100>)
 801ad6e:	2334      	movs	r3, #52	; 0x34
 801ad70:	fb01 f303 	mul.w	r3, r1, r3
 801ad74:	4413      	add	r3, r2
 801ad76:	335c      	adds	r3, #92	; 0x5c
 801ad78:	681a      	ldr	r2, [r3, #0]
 801ad7a:	8839      	ldrh	r1, [r7, #0]
 801ad7c:	89bb      	ldrh	r3, [r7, #12]
 801ad7e:	1acb      	subs	r3, r1, r3
 801ad80:	4618      	mov	r0, r3
 801ad82:	4b13      	ldr	r3, [pc, #76]	; (801add0 <DrawElement+0xfc>)
 801ad84:	781b      	ldrb	r3, [r3, #0]
 801ad86:	461c      	mov	r4, r3
 801ad88:	4912      	ldr	r1, [pc, #72]	; (801add4 <DrawElement+0x100>)
 801ad8a:	2334      	movs	r3, #52	; 0x34
 801ad8c:	fb04 f303 	mul.w	r3, r4, r3
 801ad90:	440b      	add	r3, r1
 801ad92:	3360      	adds	r3, #96	; 0x60
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	fb03 f100 	mul.w	r1, r3, r0
 801ad9a:	887b      	ldrh	r3, [r7, #2]
 801ad9c:	4419      	add	r1, r3
 801ad9e:	89fb      	ldrh	r3, [r7, #14]
 801ada0:	440b      	add	r3, r1
 801ada2:	005b      	lsls	r3, r3, #1
 801ada4:	4413      	add	r3, r2
 801ada6:	2200      	movs	r2, #0
 801ada8:	801a      	strh	r2, [r3, #0]
			}
			k++;
 801adaa:	89bb      	ldrh	r3, [r7, #12]
 801adac:	3301      	adds	r3, #1
 801adae:	81bb      	strh	r3, [r7, #12]
		while(k < height) {
 801adb0:	89ba      	ldrh	r2, [r7, #12]
 801adb2:	88bb      	ldrh	r3, [r7, #4]
 801adb4:	429a      	cmp	r2, r3
 801adb6:	d3a2      	bcc.n	801acfe <DrawElement+0x2a>
		}
		i++;
 801adb8:	89fb      	ldrh	r3, [r7, #14]
 801adba:	3301      	adds	r3, #1
 801adbc:	81fb      	strh	r3, [r7, #14]
	while(i < width) {
 801adbe:	89fa      	ldrh	r2, [r7, #14]
 801adc0:	88fb      	ldrh	r3, [r7, #6]
 801adc2:	429a      	cmp	r2, r3
 801adc4:	d398      	bcc.n	801acf8 <DrawElement+0x24>
	}
}
 801adc6:	bf00      	nop
 801adc8:	bf00      	nop
 801adca:	3714      	adds	r7, #20
 801adcc:	46bd      	mov	sp, r7
 801adce:	bd90      	pop	{r4, r7, pc}
 801add0:	20000aa4 	.word	0x20000aa4
 801add4:	200009fc 	.word	0x200009fc

0801add8 <DrawSpectrum>:

// draws high resolution spectrum on the selected ActiveLayer
void DrawSpectrum()
{
 801add8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801addc:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 801ade0:	af02      	add	r7, sp, #8
 801ade2:	466b      	mov	r3, sp
 801ade4:	461e      	mov	r6, r3
	uint8_t spectrum_frame[480] = {0};
 801ade6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801adea:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801adee:	2200      	movs	r2, #0
 801adf0:	601a      	str	r2, [r3, #0]
 801adf2:	3304      	adds	r3, #4
 801adf4:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 801adf8:	2100      	movs	r1, #0
 801adfa:	4618      	mov	r0, r3
 801adfc:	f00b f8bc 	bl	8025f78 <memset>
	uint32_t new_cues[rekordbox.cues];
 801ae00:	4b8b      	ldr	r3, [pc, #556]	; (801b030 <DrawSpectrum+0x258>)
 801ae02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801ae06:	f8d3 1554 	ldr.w	r1, [r3, #1364]	; 0x554
 801ae0a:	1e4b      	subs	r3, r1, #1
 801ae0c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801ae10:	460a      	mov	r2, r1
 801ae12:	2300      	movs	r3, #0
 801ae14:	4690      	mov	r8, r2
 801ae16:	4699      	mov	r9, r3
 801ae18:	f04f 0200 	mov.w	r2, #0
 801ae1c:	f04f 0300 	mov.w	r3, #0
 801ae20:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801ae24:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 801ae28:	ea4f 1248 	mov.w	r2, r8, lsl #5
 801ae2c:	460a      	mov	r2, r1
 801ae2e:	2300      	movs	r3, #0
 801ae30:	4614      	mov	r4, r2
 801ae32:	461d      	mov	r5, r3
 801ae34:	f04f 0200 	mov.w	r2, #0
 801ae38:	f04f 0300 	mov.w	r3, #0
 801ae3c:	016b      	lsls	r3, r5, #5
 801ae3e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 801ae42:	0162      	lsls	r2, r4, #5
 801ae44:	460b      	mov	r3, r1
 801ae46:	009b      	lsls	r3, r3, #2
 801ae48:	3307      	adds	r3, #7
 801ae4a:	08db      	lsrs	r3, r3, #3
 801ae4c:	00db      	lsls	r3, r3, #3
 801ae4e:	ebad 0d03 	sub.w	sp, sp, r3
 801ae52:	ab02      	add	r3, sp, #8
 801ae54:	3303      	adds	r3, #3
 801ae56:	089b      	lsrs	r3, r3, #2
 801ae58:	009b      	lsls	r3, r3, #2
 801ae5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	int i, k;
	// set new high resolution spectrum start position
	if(position != file_pos_wide) {
 801ae5e:	4b75      	ldr	r3, [pc, #468]	; (801b034 <DrawSpectrum+0x25c>)
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	4a75      	ldr	r2, [pc, #468]	; (801b038 <DrawSpectrum+0x260>)
 801ae64:	6812      	ldr	r2, [r2, #0]
 801ae66:	4293      	cmp	r3, r2
 801ae68:	d032      	beq.n	801aed0 <DrawSpectrum+0xf8>
		position = file_pos_wide;
 801ae6a:	4b73      	ldr	r3, [pc, #460]	; (801b038 <DrawSpectrum+0x260>)
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	461a      	mov	r2, r3
 801ae70:	4b70      	ldr	r3, [pc, #448]	; (801b034 <DrawSpectrum+0x25c>)
 801ae72:	601a      	str	r2, [r3, #0]
		// synchronize old and new spectrum positions
		if(stretch > 1) {
 801ae74:	4b71      	ldr	r3, [pc, #452]	; (801b03c <DrawSpectrum+0x264>)
 801ae76:	edd3 7a00 	vldr	s15, [r3]
 801ae7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ae7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ae82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae86:	dd23      	ble.n	801aed0 <DrawSpectrum+0xf8>
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 801ae88:	e004      	b.n	801ae94 <DrawSpectrum+0xbc>
				position++;
 801ae8a:	4b6a      	ldr	r3, [pc, #424]	; (801b034 <DrawSpectrum+0x25c>)
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	3301      	adds	r3, #1
 801ae90:	4a68      	ldr	r2, [pc, #416]	; (801b034 <DrawSpectrum+0x25c>)
 801ae92:	6013      	str	r3, [r2, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 801ae94:	4b67      	ldr	r3, [pc, #412]	; (801b034 <DrawSpectrum+0x25c>)
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	4a68      	ldr	r2, [pc, #416]	; (801b03c <DrawSpectrum+0x264>)
 801ae9a:	edd2 7a00 	vldr	s15, [r2]
 801ae9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aea2:	ee17 1a90 	vmov	r1, s15
 801aea6:	fb93 f2f1 	sdiv	r2, r3, r1
 801aeaa:	fb01 f202 	mul.w	r2, r1, r2
 801aeae:	1a9a      	subs	r2, r3, r2
 801aeb0:	4b63      	ldr	r3, [pc, #396]	; (801b040 <DrawSpectrum+0x268>)
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	4961      	ldr	r1, [pc, #388]	; (801b03c <DrawSpectrum+0x264>)
 801aeb6:	edd1 7a00 	vldr	s15, [r1]
 801aeba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aebe:	ee17 0a90 	vmov	r0, s15
 801aec2:	fb93 f1f0 	sdiv	r1, r3, r0
 801aec6:	fb00 f101 	mul.w	r1, r0, r1
 801aeca:	1a5b      	subs	r3, r3, r1
 801aecc:	429a      	cmp	r2, r3
 801aece:	d1dc      	bne.n	801ae8a <DrawSpectrum+0xb2>
			}
		}
	}
	// fill new cue positions buffer
	for(k = 0; k < rekordbox.cues; k++) {
 801aed0:	2300      	movs	r3, #0
 801aed2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801aed6:	e067      	b.n	801afa8 <DrawSpectrum+0x1d0>
		new_cues[k] = 0;
 801aed8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801aedc:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801aee0:	2100      	movs	r1, #0
 801aee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		i = 0;
 801aee6:	2300      	movs	r3, #0
 801aee8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
		check = position + (int32_t)((i-240)*stretch);
 801aeec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801aef0:	3bf0      	subs	r3, #240	; 0xf0
 801aef2:	ee07 3a90 	vmov	s15, r3
 801aef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801aefa:	4b50      	ldr	r3, [pc, #320]	; (801b03c <DrawSpectrum+0x264>)
 801aefc:	edd3 7a00 	vldr	s15, [r3]
 801af00:	ee67 7a27 	vmul.f32	s15, s14, s15
 801af04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af08:	ee17 2a90 	vmov	r2, s15
 801af0c:	4b49      	ldr	r3, [pc, #292]	; (801b034 <DrawSpectrum+0x25c>)
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	4413      	add	r3, r2
 801af12:	4a4b      	ldr	r2, [pc, #300]	; (801b040 <DrawSpectrum+0x268>)
 801af14:	6013      	str	r3, [r2, #0]
		if(check < rekordbox.cue_start_position[k]) {
 801af16:	4a46      	ldr	r2, [pc, #280]	; (801b030 <DrawSpectrum+0x258>)
 801af18:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801af1c:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 801af20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801af24:	4b46      	ldr	r3, [pc, #280]	; (801b040 <DrawSpectrum+0x268>)
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	429a      	cmp	r2, r3
 801af2a:	dd38      	ble.n	801af9e <DrawSpectrum+0x1c6>
			while(check < rekordbox.cue_start_position[k]) {
 801af2c:	e019      	b.n	801af62 <DrawSpectrum+0x18a>
				i++;
 801af2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801af32:	3301      	adds	r3, #1
 801af34:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
				check = position + (int32_t)((i-240)*stretch);
 801af38:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801af3c:	3bf0      	subs	r3, #240	; 0xf0
 801af3e:	ee07 3a90 	vmov	s15, r3
 801af42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801af46:	4b3d      	ldr	r3, [pc, #244]	; (801b03c <DrawSpectrum+0x264>)
 801af48:	edd3 7a00 	vldr	s15, [r3]
 801af4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801af50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af54:	ee17 2a90 	vmov	r2, s15
 801af58:	4b36      	ldr	r3, [pc, #216]	; (801b034 <DrawSpectrum+0x25c>)
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	4413      	add	r3, r2
 801af5e:	4a38      	ldr	r2, [pc, #224]	; (801b040 <DrawSpectrum+0x268>)
 801af60:	6013      	str	r3, [r2, #0]
			while(check < rekordbox.cue_start_position[k]) {
 801af62:	4a33      	ldr	r2, [pc, #204]	; (801b030 <DrawSpectrum+0x258>)
 801af64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801af68:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 801af6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801af70:	4b33      	ldr	r3, [pc, #204]	; (801b040 <DrawSpectrum+0x268>)
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	429a      	cmp	r2, r3
 801af76:	dcda      	bgt.n	801af2e <DrawSpectrum+0x156>
			}
			if(new_cues[k] != check) new_cues[k] = check;
 801af78:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801af7c:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801af80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af84:	4a2e      	ldr	r2, [pc, #184]	; (801b040 <DrawSpectrum+0x268>)
 801af86:	6812      	ldr	r2, [r2, #0]
 801af88:	4293      	cmp	r3, r2
 801af8a:	d008      	beq.n	801af9e <DrawSpectrum+0x1c6>
 801af8c:	4b2c      	ldr	r3, [pc, #176]	; (801b040 <DrawSpectrum+0x268>)
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	4619      	mov	r1, r3
 801af92:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801af96:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801af9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(k = 0; k < rekordbox.cues; k++) {
 801af9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801afa2:	3301      	adds	r3, #1
 801afa4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801afa8:	4b21      	ldr	r3, [pc, #132]	; (801b030 <DrawSpectrum+0x258>)
 801afaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801afae:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 801afb2:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801afb6:	429a      	cmp	r2, r3
 801afb8:	db8e      	blt.n	801aed8 <DrawSpectrum+0x100>
		}
	}
	// fill the spectrum frame buffer
	for(i = 0; i < 480; i++) {
 801afba:	2300      	movs	r3, #0
 801afbc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801afc0:	e02d      	b.n	801b01e <DrawSpectrum+0x246>
		check = position + (int32_t)((i-240)*stretch);
 801afc2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801afc6:	3bf0      	subs	r3, #240	; 0xf0
 801afc8:	ee07 3a90 	vmov	s15, r3
 801afcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801afd0:	4b1a      	ldr	r3, [pc, #104]	; (801b03c <DrawSpectrum+0x264>)
 801afd2:	edd3 7a00 	vldr	s15, [r3]
 801afd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801afda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801afde:	ee17 2a90 	vmov	r2, s15
 801afe2:	4b14      	ldr	r3, [pc, #80]	; (801b034 <DrawSpectrum+0x25c>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	4413      	add	r3, r2
 801afe8:	4a15      	ldr	r2, [pc, #84]	; (801b040 <DrawSpectrum+0x268>)
 801afea:	6013      	str	r3, [r2, #0]
		if(check > 0) {
 801afec:	4b14      	ldr	r3, [pc, #80]	; (801b040 <DrawSpectrum+0x268>)
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	dd0f      	ble.n	801b014 <DrawSpectrum+0x23c>
			spectrum_frame[i] = *(__IO uint8_t*)(WAVE_BUFFER+check);
 801aff4:	4b12      	ldr	r3, [pc, #72]	; (801b040 <DrawSpectrum+0x268>)
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	461a      	mov	r2, r3
 801affa:	4b12      	ldr	r3, [pc, #72]	; (801b044 <DrawSpectrum+0x26c>)
 801affc:	4413      	add	r3, r2
 801affe:	781b      	ldrb	r3, [r3, #0]
 801b000:	b2d9      	uxtb	r1, r3
 801b002:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801b006:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801b00a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b00e:	4413      	add	r3, r2
 801b010:	460a      	mov	r2, r1
 801b012:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 480; i++) {
 801b014:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b018:	3301      	adds	r3, #1
 801b01a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801b01e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b022:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801b026:	dbcc      	blt.n	801afc2 <DrawSpectrum+0x1ea>
		}
	}
	// draw spectrum
	for(i = 0; i < 480; i++)
 801b028:	2300      	movs	r3, #0
 801b02a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801b02e:	e087      	b.n	801b140 <DrawSpectrum+0x368>
 801b030:	20015170 	.word	0x20015170
 801b034:	200008f4 	.word	0x200008f4
 801b038:	20001e00 	.word	0x20001e00
 801b03c:	20000028 	.word	0x20000028
 801b040:	200008f8 	.word	0x200008f8
 801b044:	c00ff000 	.word	0xc00ff000
	{
		check = position + (int32_t)((i-240)*stretch);
 801b048:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b04c:	3bf0      	subs	r3, #240	; 0xf0
 801b04e:	ee07 3a90 	vmov	s15, r3
 801b052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b056:	4b88      	ldr	r3, [pc, #544]	; (801b278 <DrawSpectrum+0x4a0>)
 801b058:	edd3 7a00 	vldr	s15, [r3]
 801b05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b064:	ee17 2a90 	vmov	r2, s15
 801b068:	4b84      	ldr	r3, [pc, #528]	; (801b27c <DrawSpectrum+0x4a4>)
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	4413      	add	r3, r2
 801b06e:	4a84      	ldr	r2, [pc, #528]	; (801b280 <DrawSpectrum+0x4a8>)
 801b070:	6013      	str	r3, [r2, #0]
		if(check > 0) {
 801b072:	4b83      	ldr	r3, [pc, #524]	; (801b280 <DrawSpectrum+0x4a8>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	2b00      	cmp	r3, #0
 801b078:	dd5d      	ble.n	801b136 <DrawSpectrum+0x35e>
			// draw loop above the high resolution spectrum
			if(display.loop == 1) {
 801b07a:	4b82      	ldr	r3, [pc, #520]	; (801b284 <DrawSpectrum+0x4ac>)
 801b07c:	7c1b      	ldrb	r3, [r3, #16]
 801b07e:	2b01      	cmp	r3, #1
 801b080:	d113      	bne.n	801b0aa <DrawSpectrum+0x2d2>
				if((check >= display.loopstart) && (check <= display.loopend)) {
 801b082:	4b80      	ldr	r3, [pc, #512]	; (801b284 <DrawSpectrum+0x4ac>)
 801b084:	689b      	ldr	r3, [r3, #8]
 801b086:	4a7e      	ldr	r2, [pc, #504]	; (801b280 <DrawSpectrum+0x4a8>)
 801b088:	6812      	ldr	r2, [r2, #0]
 801b08a:	4293      	cmp	r3, r2
 801b08c:	d80d      	bhi.n	801b0aa <DrawSpectrum+0x2d2>
 801b08e:	4b7d      	ldr	r3, [pc, #500]	; (801b284 <DrawSpectrum+0x4ac>)
 801b090:	68db      	ldr	r3, [r3, #12]
 801b092:	4a7b      	ldr	r2, [pc, #492]	; (801b280 <DrawSpectrum+0x4a8>)
 801b094:	6812      	ldr	r2, [r2, #0]
 801b096:	4293      	cmp	r3, r2
 801b098:	d307      	bcc.n	801b0aa <DrawSpectrum+0x2d2>
					VLine(i, 75, 90, 0x008F8F8F);
 801b09a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b09e:	b298      	uxth	r0, r3
 801b0a0:	4b79      	ldr	r3, [pc, #484]	; (801b288 <DrawSpectrum+0x4b0>)
 801b0a2:	225a      	movs	r2, #90	; 0x5a
 801b0a4:	214b      	movs	r1, #75	; 0x4b
 801b0a6:	f000 fab1 	bl	801b60c <VLine>
				}
			}
			color = spectrum_frame[i] & 0xE0; // read color data - first 3 bits
 801b0aa:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801b0ae:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801b0b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b0b6:	4413      	add	r3, r2
 801b0b8:	781b      	ldrb	r3, [r3, #0]
 801b0ba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801b0be:	4a73      	ldr	r2, [pc, #460]	; (801b28c <DrawSpectrum+0x4b4>)
 801b0c0:	6013      	str	r3, [r2, #0]
			color <<= 8;
 801b0c2:	4b72      	ldr	r3, [pc, #456]	; (801b28c <DrawSpectrum+0x4b4>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	021b      	lsls	r3, r3, #8
 801b0c8:	4a70      	ldr	r2, [pc, #448]	; (801b28c <DrawSpectrum+0x4b4>)
 801b0ca:	6013      	str	r3, [r2, #0]
			color = spectrum_frame[i] & 0xE0;
 801b0cc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801b0d0:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801b0d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b0d8:	4413      	add	r3, r2
 801b0da:	781b      	ldrb	r3, [r3, #0]
 801b0dc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801b0e0:	4a6a      	ldr	r2, [pc, #424]	; (801b28c <DrawSpectrum+0x4b4>)
 801b0e2:	6013      	str	r3, [r2, #0]
			color <<= 8;
 801b0e4:	4b69      	ldr	r3, [pc, #420]	; (801b28c <DrawSpectrum+0x4b4>)
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	021b      	lsls	r3, r3, #8
 801b0ea:	4a68      	ldr	r2, [pc, #416]	; (801b28c <DrawSpectrum+0x4b4>)
 801b0ec:	6013      	str	r3, [r2, #0]
			color |= 0x000000FF;
 801b0ee:	4b67      	ldr	r3, [pc, #412]	; (801b28c <DrawSpectrum+0x4b4>)
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 801b0f6:	4a65      	ldr	r2, [pc, #404]	; (801b28c <DrawSpectrum+0x4b4>)
 801b0f8:	6013      	str	r3, [r2, #0]
			height = spectrum_frame[i] & 0x1F; //read height data - last 5 bits
 801b0fa:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801b0fe:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801b102:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b106:	4413      	add	r3, r2
 801b108:	781b      	ldrb	r3, [r3, #0]
 801b10a:	f003 031f 	and.w	r3, r3, #31
 801b10e:	4a60      	ldr	r2, [pc, #384]	; (801b290 <DrawSpectrum+0x4b8>)
 801b110:	6013      	str	r3, [r2, #0]
			VLine(i, 120-height, height*2, color);
 801b112:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b116:	b298      	uxth	r0, r3
 801b118:	4b5d      	ldr	r3, [pc, #372]	; (801b290 <DrawSpectrum+0x4b8>)
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	b29b      	uxth	r3, r3
 801b11e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 801b122:	b299      	uxth	r1, r3
 801b124:	4b5a      	ldr	r3, [pc, #360]	; (801b290 <DrawSpectrum+0x4b8>)
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	b29b      	uxth	r3, r3
 801b12a:	005b      	lsls	r3, r3, #1
 801b12c:	b29a      	uxth	r2, r3
 801b12e:	4b57      	ldr	r3, [pc, #348]	; (801b28c <DrawSpectrum+0x4b4>)
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	f000 fa6b 	bl	801b60c <VLine>
	for(i = 0; i < 480; i++)
 801b136:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b13a:	3301      	adds	r3, #1
 801b13c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801b140:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b144:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801b148:	f6ff af7e 	blt.w	801b048 <DrawSpectrum+0x270>
		}
	}
	// draw beat grid and other signs
	for(i = 0; i < 480; i++)
 801b14c:	2300      	movs	r3, #0
 801b14e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801b152:	e0de      	b.n	801b312 <DrawSpectrum+0x53a>
	{
		check = position + (int32_t)((i-240)*stretch);
 801b154:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b158:	3bf0      	subs	r3, #240	; 0xf0
 801b15a:	ee07 3a90 	vmov	s15, r3
 801b15e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b162:	4b45      	ldr	r3, [pc, #276]	; (801b278 <DrawSpectrum+0x4a0>)
 801b164:	edd3 7a00 	vldr	s15, [r3]
 801b168:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b16c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b170:	ee17 2a90 	vmov	r2, s15
 801b174:	4b41      	ldr	r3, [pc, #260]	; (801b27c <DrawSpectrum+0x4a4>)
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	4413      	add	r3, r2
 801b17a:	4a41      	ldr	r2, [pc, #260]	; (801b280 <DrawSpectrum+0x4a8>)
 801b17c:	6013      	str	r3, [r2, #0]
		if(check > 0) {
 801b17e:	4b40      	ldr	r3, [pc, #256]	; (801b280 <DrawSpectrum+0x4a8>)
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	2b00      	cmp	r3, #0
 801b184:	f340 80c0 	ble.w	801b308 <DrawSpectrum+0x530>
			// draw beat ticks
			if(first_beat <= rekordbox.timezones) {
 801b188:	4b42      	ldr	r3, [pc, #264]	; (801b294 <DrawSpectrum+0x4bc>)
 801b18a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 801b18e:	4b42      	ldr	r3, [pc, #264]	; (801b298 <DrawSpectrum+0x4c0>)
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	429a      	cmp	r2, r3
 801b194:	d347      	bcc.n	801b226 <DrawSpectrum+0x44e>
				if(check >= (int32_t)(rekordbox.timeindex[first_beat]*150/1000)) {
 801b196:	4b40      	ldr	r3, [pc, #256]	; (801b298 <DrawSpectrum+0x4c0>)
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	4a3e      	ldr	r2, [pc, #248]	; (801b294 <DrawSpectrum+0x4bc>)
 801b19c:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801b1a0:	009b      	lsls	r3, r3, #2
 801b1a2:	4413      	add	r3, r2
 801b1a4:	685b      	ldr	r3, [r3, #4]
 801b1a6:	2296      	movs	r2, #150	; 0x96
 801b1a8:	fb02 f303 	mul.w	r3, r2, r3
 801b1ac:	4a3b      	ldr	r2, [pc, #236]	; (801b29c <DrawSpectrum+0x4c4>)
 801b1ae:	fba2 2303 	umull	r2, r3, r2, r3
 801b1b2:	099b      	lsrs	r3, r3, #6
 801b1b4:	461a      	mov	r2, r3
 801b1b6:	4b32      	ldr	r3, [pc, #200]	; (801b280 <DrawSpectrum+0x4a8>)
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	429a      	cmp	r2, r3
 801b1bc:	dc33      	bgt.n	801b226 <DrawSpectrum+0x44e>
					if(rekordbox.phase[first_beat] == 1) {
 801b1be:	4b36      	ldr	r3, [pc, #216]	; (801b298 <DrawSpectrum+0x4c0>)
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	4a34      	ldr	r2, [pc, #208]	; (801b294 <DrawSpectrum+0x4bc>)
 801b1c4:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801b1c8:	005b      	lsls	r3, r3, #1
 801b1ca:	4413      	add	r3, r2
 801b1cc:	889b      	ldrh	r3, [r3, #4]
 801b1ce:	2b01      	cmp	r3, #1
 801b1d0:	d112      	bne.n	801b1f8 <DrawSpectrum+0x420>
						VLine(i, 75, 4, 0x00FF0000);
 801b1d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b1d6:	b298      	uxth	r0, r3
 801b1d8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801b1dc:	2204      	movs	r2, #4
 801b1de:	214b      	movs	r1, #75	; 0x4b
 801b1e0:	f000 fa14 	bl	801b60c <VLine>
						VLine(i, 161, 4, 0x00FF0000);
 801b1e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b1e8:	b298      	uxth	r0, r3
 801b1ea:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801b1ee:	2204      	movs	r2, #4
 801b1f0:	21a1      	movs	r1, #161	; 0xa1
 801b1f2:	f000 fa0b 	bl	801b60c <VLine>
 801b1f6:	e011      	b.n	801b21c <DrawSpectrum+0x444>
					}
					else {
						VLine(i, 75, 4, 0x00FFFFFF);
 801b1f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b1fc:	b298      	uxth	r0, r3
 801b1fe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801b202:	2204      	movs	r2, #4
 801b204:	214b      	movs	r1, #75	; 0x4b
 801b206:	f000 fa01 	bl	801b60c <VLine>
						VLine(i, 161, 4, 0x00FFFFFF);
 801b20a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b20e:	b298      	uxth	r0, r3
 801b210:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801b214:	2204      	movs	r2, #4
 801b216:	21a1      	movs	r1, #161	; 0xa1
 801b218:	f000 f9f8 	bl	801b60c <VLine>
					}
					first_beat++;
 801b21c:	4b1e      	ldr	r3, [pc, #120]	; (801b298 <DrawSpectrum+0x4c0>)
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	3301      	adds	r3, #1
 801b222:	4a1d      	ldr	r2, [pc, #116]	; (801b298 <DrawSpectrum+0x4c0>)
 801b224:	6013      	str	r3, [r2, #0]
				}
			}
			if(rekordbox.state == 1) {
 801b226:	4b1b      	ldr	r3, [pc, #108]	; (801b294 <DrawSpectrum+0x4bc>)
 801b228:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801b22c:	f893 3d94 	ldrb.w	r3, [r3, #3476]	; 0xd94
 801b230:	2b01      	cmp	r3, #1
 801b232:	d11d      	bne.n	801b270 <DrawSpectrum+0x498>
				if(check == new_cues[0]) {
 801b234:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	4a11      	ldr	r2, [pc, #68]	; (801b280 <DrawSpectrum+0x4a8>)
 801b23c:	6812      	ldr	r2, [r2, #0]
 801b23e:	4293      	cmp	r3, r2
 801b240:	d116      	bne.n	801b270 <DrawSpectrum+0x498>
					if((i > 10) && (i < 472))
 801b242:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b246:	2b0a      	cmp	r3, #10
 801b248:	dd12      	ble.n	801b270 <DrawSpectrum+0x498>
 801b24a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b24e:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 801b252:	da0d      	bge.n	801b270 <DrawSpectrum+0x498>
						DrawElement(15, 5, i - 11, 72, 0x00FFFF00, hot_cue_wide);
 801b254:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b258:	b29b      	uxth	r3, r3
 801b25a:	3b0b      	subs	r3, #11
 801b25c:	b29a      	uxth	r2, r3
 801b25e:	4b10      	ldr	r3, [pc, #64]	; (801b2a0 <DrawSpectrum+0x4c8>)
 801b260:	9301      	str	r3, [sp, #4]
 801b262:	4b10      	ldr	r3, [pc, #64]	; (801b2a4 <DrawSpectrum+0x4cc>)
 801b264:	9300      	str	r3, [sp, #0]
 801b266:	2348      	movs	r3, #72	; 0x48
 801b268:	2105      	movs	r1, #5
 801b26a:	200f      	movs	r0, #15
 801b26c:	f7ff fd32 	bl	801acd4 <DrawElement>
				}
			}
			for(int k = 1; k < rekordbox.cues; k++) {
 801b270:	2301      	movs	r3, #1
 801b272:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801b276:	e03e      	b.n	801b2f6 <DrawSpectrum+0x51e>
 801b278:	20000028 	.word	0x20000028
 801b27c:	200008f4 	.word	0x200008f4
 801b280:	200008f8 	.word	0x200008f8
 801b284:	200008fc 	.word	0x200008fc
 801b288:	008f8f8f 	.word	0x008f8f8f
 801b28c:	200008ec 	.word	0x200008ec
 801b290:	200008f0 	.word	0x200008f0
 801b294:	20015170 	.word	0x20015170
 801b298:	200008e4 	.word	0x200008e4
 801b29c:	10624dd3 	.word	0x10624dd3
 801b2a0:	0802ab44 	.word	0x0802ab44
 801b2a4:	00ffff00 	.word	0x00ffff00
				if(check == new_cues[k]) {
 801b2a8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801b2ac:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801b2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2b4:	4acc      	ldr	r2, [pc, #816]	; (801b5e8 <DrawSpectrum+0x810>)
 801b2b6:	6812      	ldr	r2, [r2, #0]
 801b2b8:	4293      	cmp	r3, r2
 801b2ba:	d117      	bne.n	801b2ec <DrawSpectrum+0x514>
					if((i > 10) && (i < 472))
 801b2bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b2c0:	2b0a      	cmp	r3, #10
 801b2c2:	dd13      	ble.n	801b2ec <DrawSpectrum+0x514>
 801b2c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b2c8:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 801b2cc:	da0e      	bge.n	801b2ec <DrawSpectrum+0x514>
						DrawElement(15, 5, i - 11, 72, 0x00FF0000, hot_cue_wide);
 801b2ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b2d2:	b29b      	uxth	r3, r3
 801b2d4:	3b0b      	subs	r3, #11
 801b2d6:	b29a      	uxth	r2, r3
 801b2d8:	4bc4      	ldr	r3, [pc, #784]	; (801b5ec <DrawSpectrum+0x814>)
 801b2da:	9301      	str	r3, [sp, #4]
 801b2dc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801b2e0:	9300      	str	r3, [sp, #0]
 801b2e2:	2348      	movs	r3, #72	; 0x48
 801b2e4:	2105      	movs	r1, #5
 801b2e6:	200f      	movs	r0, #15
 801b2e8:	f7ff fcf4 	bl	801acd4 <DrawElement>
			for(int k = 1; k < rekordbox.cues; k++) {
 801b2ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801b2f0:	3301      	adds	r3, #1
 801b2f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801b2f6:	4bbe      	ldr	r3, [pc, #760]	; (801b5f0 <DrawSpectrum+0x818>)
 801b2f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801b2fc:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 801b300:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801b304:	429a      	cmp	r2, r3
 801b306:	dbcf      	blt.n	801b2a8 <DrawSpectrum+0x4d0>
	for(i = 0; i < 480; i++)
 801b308:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b30c:	3301      	adds	r3, #1
 801b30e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801b312:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b316:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801b31a:	f6ff af1b 	blt.w	801b154 <DrawSpectrum+0x37c>
				}
			}
		}
	}
	// draw central cursor
	VLine(239, 75, 90, 0x00FFFFFF);
 801b31e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801b322:	225a      	movs	r2, #90	; 0x5a
 801b324:	214b      	movs	r1, #75	; 0x4b
 801b326:	20ef      	movs	r0, #239	; 0xef
 801b328:	f000 f970 	bl	801b60c <VLine>
	VLine(240, 75, 90, 0x00FFFFFF);
 801b32c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801b330:	225a      	movs	r2, #90	; 0x5a
 801b332:	214b      	movs	r1, #75	; 0x4b
 801b334:	20f0      	movs	r0, #240	; 0xf0
 801b336:	f000 f969 	bl	801b60c <VLine>
	// draw bar display
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 801b33a:	4bad      	ldr	r3, [pc, #692]	; (801b5f0 <DrawSpectrum+0x818>)
 801b33c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801b340:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 801b344:	461a      	mov	r2, r3
 801b346:	4bab      	ldr	r3, [pc, #684]	; (801b5f4 <DrawSpectrum+0x81c>)
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	4413      	add	r3, r2
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	da00      	bge.n	801b352 <DrawSpectrum+0x57a>
 801b350:	3303      	adds	r3, #3
 801b352:	109b      	asrs	r3, r3, #2
 801b354:	461a      	mov	r2, r3
 801b356:	4ba8      	ldr	r3, [pc, #672]	; (801b5f8 <DrawSpectrum+0x820>)
 801b358:	601a      	str	r2, [r3, #0]
	if(bar / 100 > 0) {
 801b35a:	4ba7      	ldr	r3, [pc, #668]	; (801b5f8 <DrawSpectrum+0x820>)
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	2b63      	cmp	r3, #99	; 0x63
 801b360:	dd2c      	ble.n	801b3bc <DrawSpectrum+0x5e4>
		DrawDigit(bar / 100, 305, 51, 7, 0x000000FF);
 801b362:	4ba5      	ldr	r3, [pc, #660]	; (801b5f8 <DrawSpectrum+0x820>)
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	4aa5      	ldr	r2, [pc, #660]	; (801b5fc <DrawSpectrum+0x824>)
 801b368:	fb82 1203 	smull	r1, r2, r2, r3
 801b36c:	1152      	asrs	r2, r2, #5
 801b36e:	17db      	asrs	r3, r3, #31
 801b370:	1ad3      	subs	r3, r2, r3
 801b372:	b2d8      	uxtb	r0, r3
 801b374:	23ff      	movs	r3, #255	; 0xff
 801b376:	9300      	str	r3, [sp, #0]
 801b378:	2307      	movs	r3, #7
 801b37a:	2233      	movs	r2, #51	; 0x33
 801b37c:	f240 1131 	movw	r1, #305	; 0x131
 801b380:	f000 fa9a 	bl	801b8b8 <DrawDigit>
		DrawDigit(bar % 100 / 10 , 314, 51, 7, 0x000000FF);
 801b384:	4b9c      	ldr	r3, [pc, #624]	; (801b5f8 <DrawSpectrum+0x820>)
 801b386:	681a      	ldr	r2, [r3, #0]
 801b388:	4b9c      	ldr	r3, [pc, #624]	; (801b5fc <DrawSpectrum+0x824>)
 801b38a:	fb83 1302 	smull	r1, r3, r3, r2
 801b38e:	1159      	asrs	r1, r3, #5
 801b390:	17d3      	asrs	r3, r2, #31
 801b392:	1acb      	subs	r3, r1, r3
 801b394:	2164      	movs	r1, #100	; 0x64
 801b396:	fb01 f303 	mul.w	r3, r1, r3
 801b39a:	1ad3      	subs	r3, r2, r3
 801b39c:	4a98      	ldr	r2, [pc, #608]	; (801b600 <DrawSpectrum+0x828>)
 801b39e:	fb82 1203 	smull	r1, r2, r2, r3
 801b3a2:	1092      	asrs	r2, r2, #2
 801b3a4:	17db      	asrs	r3, r3, #31
 801b3a6:	1ad3      	subs	r3, r2, r3
 801b3a8:	b2d8      	uxtb	r0, r3
 801b3aa:	23ff      	movs	r3, #255	; 0xff
 801b3ac:	9300      	str	r3, [sp, #0]
 801b3ae:	2307      	movs	r3, #7
 801b3b0:	2233      	movs	r2, #51	; 0x33
 801b3b2:	f44f 719d 	mov.w	r1, #314	; 0x13a
 801b3b6:	f000 fa7f 	bl	801b8b8 <DrawDigit>
 801b3ba:	e014      	b.n	801b3e6 <DrawSpectrum+0x60e>
	}
	else if(bar / 10 > 0) DrawDigit(bar / 10, 314, 51, 7, 0x000000FF);
 801b3bc:	4b8e      	ldr	r3, [pc, #568]	; (801b5f8 <DrawSpectrum+0x820>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	2b09      	cmp	r3, #9
 801b3c2:	dd10      	ble.n	801b3e6 <DrawSpectrum+0x60e>
 801b3c4:	4b8c      	ldr	r3, [pc, #560]	; (801b5f8 <DrawSpectrum+0x820>)
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	4a8d      	ldr	r2, [pc, #564]	; (801b600 <DrawSpectrum+0x828>)
 801b3ca:	fb82 1203 	smull	r1, r2, r2, r3
 801b3ce:	1092      	asrs	r2, r2, #2
 801b3d0:	17db      	asrs	r3, r3, #31
 801b3d2:	1ad3      	subs	r3, r2, r3
 801b3d4:	b2d8      	uxtb	r0, r3
 801b3d6:	23ff      	movs	r3, #255	; 0xff
 801b3d8:	9300      	str	r3, [sp, #0]
 801b3da:	2307      	movs	r3, #7
 801b3dc:	2233      	movs	r2, #51	; 0x33
 801b3de:	f44f 719d 	mov.w	r1, #314	; 0x13a
 801b3e2:	f000 fa69 	bl	801b8b8 <DrawDigit>
	DrawDigit(bar % 10, 323, 51, 7, 0x000000FF);
 801b3e6:	4b84      	ldr	r3, [pc, #528]	; (801b5f8 <DrawSpectrum+0x820>)
 801b3e8:	681a      	ldr	r2, [r3, #0]
 801b3ea:	4b85      	ldr	r3, [pc, #532]	; (801b600 <DrawSpectrum+0x828>)
 801b3ec:	fb83 1302 	smull	r1, r3, r3, r2
 801b3f0:	1099      	asrs	r1, r3, #2
 801b3f2:	17d3      	asrs	r3, r2, #31
 801b3f4:	1ac9      	subs	r1, r1, r3
 801b3f6:	460b      	mov	r3, r1
 801b3f8:	009b      	lsls	r3, r3, #2
 801b3fa:	440b      	add	r3, r1
 801b3fc:	005b      	lsls	r3, r3, #1
 801b3fe:	1ad1      	subs	r1, r2, r3
 801b400:	b2c8      	uxtb	r0, r1
 801b402:	23ff      	movs	r3, #255	; 0xff
 801b404:	9300      	str	r3, [sp, #0]
 801b406:	2307      	movs	r3, #7
 801b408:	2233      	movs	r2, #51	; 0x33
 801b40a:	f240 1143 	movw	r1, #323	; 0x143
 801b40e:	f000 fa53 	bl	801b8b8 <DrawDigit>
	DrawElement(2, 2, 332, 63, 0x000000FF, small_point);
 801b412:	4b7c      	ldr	r3, [pc, #496]	; (801b604 <DrawSpectrum+0x82c>)
 801b414:	9301      	str	r3, [sp, #4]
 801b416:	23ff      	movs	r3, #255	; 0xff
 801b418:	9300      	str	r3, [sp, #0]
 801b41a:	233f      	movs	r3, #63	; 0x3f
 801b41c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801b420:	2102      	movs	r1, #2
 801b422:	2002      	movs	r0, #2
 801b424:	f7ff fc56 	bl	801acd4 <DrawElement>
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 801b428:	4b72      	ldr	r3, [pc, #456]	; (801b5f4 <DrawSpectrum+0x81c>)
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	4a70      	ldr	r2, [pc, #448]	; (801b5f0 <DrawSpectrum+0x818>)
 801b42e:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801b432:	005b      	lsls	r3, r3, #1
 801b434:	4413      	add	r3, r2
 801b436:	889b      	ldrh	r3, [r3, #4]
 801b438:	b2d8      	uxtb	r0, r3
 801b43a:	23ff      	movs	r3, #255	; 0xff
 801b43c:	9300      	str	r3, [sp, #0]
 801b43e:	2307      	movs	r3, #7
 801b440:	2233      	movs	r2, #51	; 0x33
 801b442:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801b446:	f000 fa37 	bl	801b8b8 <DrawDigit>
	DrawElement(19, 6, 348, 63, 0x000000FF, bars);
 801b44a:	4b6f      	ldr	r3, [pc, #444]	; (801b608 <DrawSpectrum+0x830>)
 801b44c:	9301      	str	r3, [sp, #4]
 801b44e:	23ff      	movs	r3, #255	; 0xff
 801b450:	9300      	str	r3, [sp, #0]
 801b452:	233f      	movs	r3, #63	; 0x3f
 801b454:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 801b458:	2106      	movs	r1, #6
 801b45a:	2013      	movs	r0, #19
 801b45c:	f7ff fc3a 	bl	801acd4 <DrawElement>
	// draw beatframes
	VLine(171, 54, 9, 0x000000FF);
 801b460:	23ff      	movs	r3, #255	; 0xff
 801b462:	2209      	movs	r2, #9
 801b464:	2136      	movs	r1, #54	; 0x36
 801b466:	20ab      	movs	r0, #171	; 0xab
 801b468:	f000 f8d0 	bl	801b60c <VLine>
	HLine(172, 54, 28, 0x000000FF);
 801b46c:	23ff      	movs	r3, #255	; 0xff
 801b46e:	221c      	movs	r2, #28
 801b470:	2136      	movs	r1, #54	; 0x36
 801b472:	20ac      	movs	r0, #172	; 0xac
 801b474:	f000 f934 	bl	801b6e0 <HLine>
	HLine(172, 62, 28, 0x000000FF);
 801b478:	23ff      	movs	r3, #255	; 0xff
 801b47a:	221c      	movs	r2, #28
 801b47c:	213e      	movs	r1, #62	; 0x3e
 801b47e:	20ac      	movs	r0, #172	; 0xac
 801b480:	f000 f92e 	bl	801b6e0 <HLine>
	VLine(200, 54, 9, 0x000000FF);
 801b484:	23ff      	movs	r3, #255	; 0xff
 801b486:	2209      	movs	r2, #9
 801b488:	2136      	movs	r1, #54	; 0x36
 801b48a:	20c8      	movs	r0, #200	; 0xc8
 801b48c:	f000 f8be 	bl	801b60c <VLine>
	VLine(201, 57, 3, 0x000000FF);
 801b490:	23ff      	movs	r3, #255	; 0xff
 801b492:	2203      	movs	r2, #3
 801b494:	2139      	movs	r1, #57	; 0x39
 801b496:	20c9      	movs	r0, #201	; 0xc9
 801b498:	f000 f8b8 	bl	801b60c <VLine>
	VLine(202, 57, 3, 0x000000FF);
 801b49c:	23ff      	movs	r3, #255	; 0xff
 801b49e:	2203      	movs	r2, #3
 801b4a0:	2139      	movs	r1, #57	; 0x39
 801b4a2:	20ca      	movs	r0, #202	; 0xca
 801b4a4:	f000 f8b2 	bl	801b60c <VLine>
	VLine(203, 57, 3, 0x000000FF);
 801b4a8:	23ff      	movs	r3, #255	; 0xff
 801b4aa:	2203      	movs	r2, #3
 801b4ac:	2139      	movs	r1, #57	; 0x39
 801b4ae:	20cb      	movs	r0, #203	; 0xcb
 801b4b0:	f000 f8ac 	bl	801b60c <VLine>
	VLine(204, 54, 9, 0x000000FF);
 801b4b4:	23ff      	movs	r3, #255	; 0xff
 801b4b6:	2209      	movs	r2, #9
 801b4b8:	2136      	movs	r1, #54	; 0x36
 801b4ba:	20cc      	movs	r0, #204	; 0xcc
 801b4bc:	f000 f8a6 	bl	801b60c <VLine>
	HLine(205, 54, 28, 0x000000FF);
 801b4c0:	23ff      	movs	r3, #255	; 0xff
 801b4c2:	221c      	movs	r2, #28
 801b4c4:	2136      	movs	r1, #54	; 0x36
 801b4c6:	20cd      	movs	r0, #205	; 0xcd
 801b4c8:	f000 f90a 	bl	801b6e0 <HLine>
	HLine(205, 62, 28, 0x000000FF);
 801b4cc:	23ff      	movs	r3, #255	; 0xff
 801b4ce:	221c      	movs	r2, #28
 801b4d0:	213e      	movs	r1, #62	; 0x3e
 801b4d2:	20cd      	movs	r0, #205	; 0xcd
 801b4d4:	f000 f904 	bl	801b6e0 <HLine>
	VLine(233, 54, 9, 0x000000FF);
 801b4d8:	23ff      	movs	r3, #255	; 0xff
 801b4da:	2209      	movs	r2, #9
 801b4dc:	2136      	movs	r1, #54	; 0x36
 801b4de:	20e9      	movs	r0, #233	; 0xe9
 801b4e0:	f000 f894 	bl	801b60c <VLine>
	VLine(234, 57, 3, 0x000000FF);
 801b4e4:	23ff      	movs	r3, #255	; 0xff
 801b4e6:	2203      	movs	r2, #3
 801b4e8:	2139      	movs	r1, #57	; 0x39
 801b4ea:	20ea      	movs	r0, #234	; 0xea
 801b4ec:	f000 f88e 	bl	801b60c <VLine>
	VLine(235, 57, 3, 0x000000FF);
 801b4f0:	23ff      	movs	r3, #255	; 0xff
 801b4f2:	2203      	movs	r2, #3
 801b4f4:	2139      	movs	r1, #57	; 0x39
 801b4f6:	20eb      	movs	r0, #235	; 0xeb
 801b4f8:	f000 f888 	bl	801b60c <VLine>
	VLine(236, 57, 3, 0x000000FF);
 801b4fc:	23ff      	movs	r3, #255	; 0xff
 801b4fe:	2203      	movs	r2, #3
 801b500:	2139      	movs	r1, #57	; 0x39
 801b502:	20ec      	movs	r0, #236	; 0xec
 801b504:	f000 f882 	bl	801b60c <VLine>
	VLine(237, 54, 9, 0x000000FF);
 801b508:	23ff      	movs	r3, #255	; 0xff
 801b50a:	2209      	movs	r2, #9
 801b50c:	2136      	movs	r1, #54	; 0x36
 801b50e:	20ed      	movs	r0, #237	; 0xed
 801b510:	f000 f87c 	bl	801b60c <VLine>
	HLine(238, 54, 28, 0x000000FF);
 801b514:	23ff      	movs	r3, #255	; 0xff
 801b516:	221c      	movs	r2, #28
 801b518:	2136      	movs	r1, #54	; 0x36
 801b51a:	20ee      	movs	r0, #238	; 0xee
 801b51c:	f000 f8e0 	bl	801b6e0 <HLine>
	HLine(238, 62, 28, 0x000000FF);
 801b520:	23ff      	movs	r3, #255	; 0xff
 801b522:	221c      	movs	r2, #28
 801b524:	213e      	movs	r1, #62	; 0x3e
 801b526:	20ee      	movs	r0, #238	; 0xee
 801b528:	f000 f8da 	bl	801b6e0 <HLine>
	VLine(266, 54, 9, 0x000000FF);
 801b52c:	23ff      	movs	r3, #255	; 0xff
 801b52e:	2209      	movs	r2, #9
 801b530:	2136      	movs	r1, #54	; 0x36
 801b532:	f44f 7085 	mov.w	r0, #266	; 0x10a
 801b536:	f000 f869 	bl	801b60c <VLine>
	VLine(267, 57, 3, 0x000000FF);
 801b53a:	23ff      	movs	r3, #255	; 0xff
 801b53c:	2203      	movs	r2, #3
 801b53e:	2139      	movs	r1, #57	; 0x39
 801b540:	f240 100b 	movw	r0, #267	; 0x10b
 801b544:	f000 f862 	bl	801b60c <VLine>
	VLine(268, 57, 3, 0x000000FF);
 801b548:	23ff      	movs	r3, #255	; 0xff
 801b54a:	2203      	movs	r2, #3
 801b54c:	2139      	movs	r1, #57	; 0x39
 801b54e:	f44f 7086 	mov.w	r0, #268	; 0x10c
 801b552:	f000 f85b 	bl	801b60c <VLine>
	VLine(269, 57, 3, 0x000000FF);
 801b556:	23ff      	movs	r3, #255	; 0xff
 801b558:	2203      	movs	r2, #3
 801b55a:	2139      	movs	r1, #57	; 0x39
 801b55c:	f240 100d 	movw	r0, #269	; 0x10d
 801b560:	f000 f854 	bl	801b60c <VLine>
	VLine(270, 54, 9, 0x000000FF);
 801b564:	23ff      	movs	r3, #255	; 0xff
 801b566:	2209      	movs	r2, #9
 801b568:	2136      	movs	r1, #54	; 0x36
 801b56a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 801b56e:	f000 f84d 	bl	801b60c <VLine>
	HLine(271, 54, 28, 0x000000FF);
 801b572:	23ff      	movs	r3, #255	; 0xff
 801b574:	221c      	movs	r2, #28
 801b576:	2136      	movs	r1, #54	; 0x36
 801b578:	f240 100f 	movw	r0, #271	; 0x10f
 801b57c:	f000 f8b0 	bl	801b6e0 <HLine>
	HLine(271, 62, 28, 0x000000FF);
 801b580:	23ff      	movs	r3, #255	; 0xff
 801b582:	221c      	movs	r2, #28
 801b584:	213e      	movs	r1, #62	; 0x3e
 801b586:	f240 100f 	movw	r0, #271	; 0x10f
 801b58a:	f000 f8a9 	bl	801b6e0 <HLine>
	VLine(299, 54, 9, 0x000000FF);
 801b58e:	23ff      	movs	r3, #255	; 0xff
 801b590:	2209      	movs	r2, #9
 801b592:	2136      	movs	r1, #54	; 0x36
 801b594:	f240 102b 	movw	r0, #299	; 0x12b
 801b598:	f000 f838 	bl	801b60c <VLine>
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 801b59c:	4b15      	ldr	r3, [pc, #84]	; (801b5f4 <DrawSpectrum+0x81c>)
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	4a13      	ldr	r2, [pc, #76]	; (801b5f0 <DrawSpectrum+0x818>)
 801b5a2:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801b5a6:	005b      	lsls	r3, r3, #1
 801b5a8:	4413      	add	r3, r2
 801b5aa:	889b      	ldrh	r3, [r3, #4]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d014      	beq.n	801b5da <DrawSpectrum+0x802>
 801b5b0:	4b10      	ldr	r3, [pc, #64]	; (801b5f4 <DrawSpectrum+0x81c>)
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	4a0e      	ldr	r2, [pc, #56]	; (801b5f0 <DrawSpectrum+0x818>)
 801b5b6:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801b5ba:	005b      	lsls	r3, r3, #1
 801b5bc:	4413      	add	r3, r2
 801b5be:	889b      	ldrh	r3, [r3, #4]
 801b5c0:	461a      	mov	r2, r3
 801b5c2:	0152      	lsls	r2, r2, #5
 801b5c4:	4413      	add	r3, r2
 801b5c6:	b29b      	uxth	r3, r3
 801b5c8:	338b      	adds	r3, #139	; 0x8b
 801b5ca:	b298      	uxth	r0, r3
 801b5cc:	23ff      	movs	r3, #255	; 0xff
 801b5ce:	9300      	str	r3, [sp, #0]
 801b5d0:	2307      	movs	r3, #7
 801b5d2:	221c      	movs	r2, #28
 801b5d4:	2137      	movs	r1, #55	; 0x37
 801b5d6:	f000 f8e3 	bl	801b7a0 <Rectangle>
 801b5da:	46b5      	mov	sp, r6
}
 801b5dc:	bf00      	nop
 801b5de:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 801b5e2:	46bd      	mov	sp, r7
 801b5e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5e8:	200008f8 	.word	0x200008f8
 801b5ec:	0802ab44 	.word	0x0802ab44
 801b5f0:	20015170 	.word	0x20015170
 801b5f4:	200008e0 	.word	0x200008e0
 801b5f8:	200008e8 	.word	0x200008e8
 801b5fc:	51eb851f 	.word	0x51eb851f
 801b600:	66666667 	.word	0x66666667
 801b604:	0802af58 	.word	0x0802af58
 801b608:	0802af8c 	.word	0x0802af8c

0801b60c <VLine>:

void VLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b088      	sub	sp, #32
 801b610:	af02      	add	r7, sp, #8
 801b612:	607b      	str	r3, [r7, #4]
 801b614:	4603      	mov	r3, r0
 801b616:	81fb      	strh	r3, [r7, #14]
 801b618:	460b      	mov	r3, r1
 801b61a:	81bb      	strh	r3, [r7, #12]
 801b61c:	4613      	mov	r3, r2
 801b61e:	817b      	strh	r3, [r7, #10]
	uint32_t Xaddress = 0;
 801b620:	2300      	movs	r3, #0
 801b622:	617b      	str	r3, [r7, #20]
    /* Get the line address */
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 801b624:	4b2a      	ldr	r3, [pc, #168]	; (801b6d0 <VLine+0xc4>)
 801b626:	781b      	ldrb	r3, [r3, #0]
 801b628:	4619      	mov	r1, r3
 801b62a:	4a2a      	ldr	r2, [pc, #168]	; (801b6d4 <VLine+0xc8>)
 801b62c:	2334      	movs	r3, #52	; 0x34
 801b62e:	fb01 f303 	mul.w	r3, r1, r3
 801b632:	4413      	add	r3, r2
 801b634:	335c      	adds	r3, #92	; 0x5c
 801b636:	681a      	ldr	r2, [r3, #0]
 801b638:	4b25      	ldr	r3, [pc, #148]	; (801b6d0 <VLine+0xc4>)
 801b63a:	781b      	ldrb	r3, [r3, #0]
 801b63c:	4618      	mov	r0, r3
 801b63e:	4925      	ldr	r1, [pc, #148]	; (801b6d4 <VLine+0xc8>)
 801b640:	2334      	movs	r3, #52	; 0x34
 801b642:	fb00 f303 	mul.w	r3, r0, r3
 801b646:	440b      	add	r3, r1
 801b648:	3360      	adds	r3, #96	; 0x60
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	89b9      	ldrh	r1, [r7, #12]
 801b64e:	fb03 f101 	mul.w	r1, r3, r1
 801b652:	89fb      	ldrh	r3, [r7, #14]
 801b654:	440b      	add	r3, r1
 801b656:	005b      	lsls	r3, r3, #1
 801b658:	4413      	add	r3, r2
 801b65a:	617b      	str	r3, [r7, #20]
    /* Write line */
    hdma2d.Init.Mode = DMA2D_R2M;
 801b65c:	4b1e      	ldr	r3, [pc, #120]	; (801b6d8 <VLine+0xcc>)
 801b65e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801b662:	605a      	str	r2, [r3, #4]
    /* RGB565 format */
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 801b664:	4b1c      	ldr	r3, [pc, #112]	; (801b6d8 <VLine+0xcc>)
 801b666:	2202      	movs	r2, #2
 801b668:	609a      	str	r2, [r3, #8]
    hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - 1;
 801b66a:	4b19      	ldr	r3, [pc, #100]	; (801b6d0 <VLine+0xc4>)
 801b66c:	781b      	ldrb	r3, [r3, #0]
 801b66e:	4619      	mov	r1, r3
 801b670:	4a18      	ldr	r2, [pc, #96]	; (801b6d4 <VLine+0xc8>)
 801b672:	2334      	movs	r3, #52	; 0x34
 801b674:	fb01 f303 	mul.w	r3, r1, r3
 801b678:	4413      	add	r3, r2
 801b67a:	3360      	adds	r3, #96	; 0x60
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	3b01      	subs	r3, #1
 801b680:	4a15      	ldr	r2, [pc, #84]	; (801b6d8 <VLine+0xcc>)
 801b682:	60d3      	str	r3, [r2, #12]
    hdma2d.Instance = DMA2D;
 801b684:	4b14      	ldr	r3, [pc, #80]	; (801b6d8 <VLine+0xcc>)
 801b686:	4a15      	ldr	r2, [pc, #84]	; (801b6dc <VLine+0xd0>)
 801b688:	601a      	str	r2, [r3, #0]
    /* DMA2D Initialization */
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 801b68a:	4813      	ldr	r0, [pc, #76]	; (801b6d8 <VLine+0xcc>)
 801b68c:	f7e6 fd58 	bl	8002140 <HAL_DMA2D_Init>
 801b690:	4603      	mov	r3, r0
 801b692:	2b00      	cmp	r3, #0
 801b694:	d117      	bne.n	801b6c6 <VLine+0xba>
    	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 801b696:	4b0e      	ldr	r3, [pc, #56]	; (801b6d0 <VLine+0xc4>)
 801b698:	781b      	ldrb	r3, [r3, #0]
 801b69a:	4619      	mov	r1, r3
 801b69c:	480e      	ldr	r0, [pc, #56]	; (801b6d8 <VLine+0xcc>)
 801b69e:	f7e6 ff07 	bl	80024b0 <HAL_DMA2D_ConfigLayer>
 801b6a2:	4603      	mov	r3, r0
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d10e      	bne.n	801b6c6 <VLine+0xba>
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 801b6a8:	897b      	ldrh	r3, [r7, #10]
 801b6aa:	9300      	str	r3, [sp, #0]
 801b6ac:	2301      	movs	r3, #1
 801b6ae:	697a      	ldr	r2, [r7, #20]
 801b6b0:	6879      	ldr	r1, [r7, #4]
 801b6b2:	4809      	ldr	r0, [pc, #36]	; (801b6d8 <VLine+0xcc>)
 801b6b4:	f7e6 fdd2 	bl	800225c <HAL_DMA2D_Start>
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d103      	bne.n	801b6c6 <VLine+0xba>
    			/* Polling For DMA transfer */
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801b6be:	210a      	movs	r1, #10
 801b6c0:	4805      	ldr	r0, [pc, #20]	; (801b6d8 <VLine+0xcc>)
 801b6c2:	f7e6 fe0b 	bl	80022dc <HAL_DMA2D_PollForTransfer>
    		}
    	}
    }
}
 801b6c6:	bf00      	nop
 801b6c8:	3718      	adds	r7, #24
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	bd80      	pop	{r7, pc}
 801b6ce:	bf00      	nop
 801b6d0:	20000aa4 	.word	0x20000aa4
 801b6d4:	200009fc 	.word	0x200009fc
 801b6d8:	20000910 	.word	0x20000910
 801b6dc:	4002b000 	.word	0x4002b000

0801b6e0 <HLine>:

void HLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b088      	sub	sp, #32
 801b6e4:	af02      	add	r7, sp, #8
 801b6e6:	607b      	str	r3, [r7, #4]
 801b6e8:	4603      	mov	r3, r0
 801b6ea:	81fb      	strh	r3, [r7, #14]
 801b6ec:	460b      	mov	r3, r1
 801b6ee:	81bb      	strh	r3, [r7, #12]
 801b6f0:	4613      	mov	r3, r2
 801b6f2:	817b      	strh	r3, [r7, #10]
	uint32_t Xaddress = 0;
 801b6f4:	2300      	movs	r3, #0
 801b6f6:	617b      	str	r3, [r7, #20]
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 801b6f8:	4b25      	ldr	r3, [pc, #148]	; (801b790 <HLine+0xb0>)
 801b6fa:	781b      	ldrb	r3, [r3, #0]
 801b6fc:	4619      	mov	r1, r3
 801b6fe:	4a25      	ldr	r2, [pc, #148]	; (801b794 <HLine+0xb4>)
 801b700:	2334      	movs	r3, #52	; 0x34
 801b702:	fb01 f303 	mul.w	r3, r1, r3
 801b706:	4413      	add	r3, r2
 801b708:	335c      	adds	r3, #92	; 0x5c
 801b70a:	681a      	ldr	r2, [r3, #0]
 801b70c:	4b20      	ldr	r3, [pc, #128]	; (801b790 <HLine+0xb0>)
 801b70e:	781b      	ldrb	r3, [r3, #0]
 801b710:	4618      	mov	r0, r3
 801b712:	4920      	ldr	r1, [pc, #128]	; (801b794 <HLine+0xb4>)
 801b714:	2334      	movs	r3, #52	; 0x34
 801b716:	fb00 f303 	mul.w	r3, r0, r3
 801b71a:	440b      	add	r3, r1
 801b71c:	3360      	adds	r3, #96	; 0x60
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	89b9      	ldrh	r1, [r7, #12]
 801b722:	fb03 f101 	mul.w	r1, r3, r1
 801b726:	89fb      	ldrh	r3, [r7, #14]
 801b728:	440b      	add	r3, r1
 801b72a:	005b      	lsls	r3, r3, #1
 801b72c:	4413      	add	r3, r2
 801b72e:	617b      	str	r3, [r7, #20]
	/* Write line */
	hdma2d.Init.Mode = DMA2D_R2M;
 801b730:	4b19      	ldr	r3, [pc, #100]	; (801b798 <HLine+0xb8>)
 801b732:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801b736:	605a      	str	r2, [r3, #4]
	/* RGB565 format */
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 801b738:	4b17      	ldr	r3, [pc, #92]	; (801b798 <HLine+0xb8>)
 801b73a:	2202      	movs	r2, #2
 801b73c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 801b73e:	4b16      	ldr	r3, [pc, #88]	; (801b798 <HLine+0xb8>)
 801b740:	2200      	movs	r2, #0
 801b742:	60da      	str	r2, [r3, #12]
	hdma2d.Instance = DMA2D;
 801b744:	4b14      	ldr	r3, [pc, #80]	; (801b798 <HLine+0xb8>)
 801b746:	4a15      	ldr	r2, [pc, #84]	; (801b79c <HLine+0xbc>)
 801b748:	601a      	str	r2, [r3, #0]
	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 801b74a:	4813      	ldr	r0, [pc, #76]	; (801b798 <HLine+0xb8>)
 801b74c:	f7e6 fcf8 	bl	8002140 <HAL_DMA2D_Init>
 801b750:	4603      	mov	r3, r0
 801b752:	2b00      	cmp	r3, #0
 801b754:	d117      	bne.n	801b786 <HLine+0xa6>
	 	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 801b756:	4b0e      	ldr	r3, [pc, #56]	; (801b790 <HLine+0xb0>)
 801b758:	781b      	ldrb	r3, [r3, #0]
 801b75a:	4619      	mov	r1, r3
 801b75c:	480e      	ldr	r0, [pc, #56]	; (801b798 <HLine+0xb8>)
 801b75e:	f7e6 fea7 	bl	80024b0 <HAL_DMA2D_ConfigLayer>
 801b762:	4603      	mov	r3, r0
 801b764:	2b00      	cmp	r3, #0
 801b766:	d10e      	bne.n	801b786 <HLine+0xa6>
	   		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, Length, 1) == HAL_OK) {
 801b768:	897b      	ldrh	r3, [r7, #10]
 801b76a:	2201      	movs	r2, #1
 801b76c:	9200      	str	r2, [sp, #0]
 801b76e:	697a      	ldr	r2, [r7, #20]
 801b770:	6879      	ldr	r1, [r7, #4]
 801b772:	4809      	ldr	r0, [pc, #36]	; (801b798 <HLine+0xb8>)
 801b774:	f7e6 fd72 	bl	800225c <HAL_DMA2D_Start>
 801b778:	4603      	mov	r3, r0
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d103      	bne.n	801b786 <HLine+0xa6>
	   			/* Polling For DMA transfer */
	   			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801b77e:	210a      	movs	r1, #10
 801b780:	4805      	ldr	r0, [pc, #20]	; (801b798 <HLine+0xb8>)
 801b782:	f7e6 fdab 	bl	80022dc <HAL_DMA2D_PollForTransfer>
	   		}
	   	}
	}
}
 801b786:	bf00      	nop
 801b788:	3718      	adds	r7, #24
 801b78a:	46bd      	mov	sp, r7
 801b78c:	bd80      	pop	{r7, pc}
 801b78e:	bf00      	nop
 801b790:	20000aa4 	.word	0x20000aa4
 801b794:	200009fc 	.word	0x200009fc
 801b798:	20000910 	.word	0x20000910
 801b79c:	4002b000 	.word	0x4002b000

0801b7a0 <Rectangle>:

void Rectangle(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint32_t color)
{
 801b7a0:	b590      	push	{r4, r7, lr}
 801b7a2:	b087      	sub	sp, #28
 801b7a4:	af02      	add	r7, sp, #8
 801b7a6:	4604      	mov	r4, r0
 801b7a8:	4608      	mov	r0, r1
 801b7aa:	4611      	mov	r1, r2
 801b7ac:	461a      	mov	r2, r3
 801b7ae:	4623      	mov	r3, r4
 801b7b0:	80fb      	strh	r3, [r7, #6]
 801b7b2:	4603      	mov	r3, r0
 801b7b4:	80bb      	strh	r3, [r7, #4]
 801b7b6:	460b      	mov	r3, r1
 801b7b8:	807b      	strh	r3, [r7, #2]
 801b7ba:	4613      	mov	r3, r2
 801b7bc:	803b      	strh	r3, [r7, #0]
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 801b7be:	4b22      	ldr	r3, [pc, #136]	; (801b848 <Rectangle+0xa8>)
 801b7c0:	781b      	ldrb	r3, [r3, #0]
 801b7c2:	4619      	mov	r1, r3
 801b7c4:	4a21      	ldr	r2, [pc, #132]	; (801b84c <Rectangle+0xac>)
 801b7c6:	2334      	movs	r3, #52	; 0x34
 801b7c8:	fb01 f303 	mul.w	r3, r1, r3
 801b7cc:	4413      	add	r3, r2
 801b7ce:	335c      	adds	r3, #92	; 0x5c
 801b7d0:	681a      	ldr	r2, [r3, #0]
 801b7d2:	4b1d      	ldr	r3, [pc, #116]	; (801b848 <Rectangle+0xa8>)
 801b7d4:	781b      	ldrb	r3, [r3, #0]
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	491c      	ldr	r1, [pc, #112]	; (801b84c <Rectangle+0xac>)
 801b7da:	2334      	movs	r3, #52	; 0x34
 801b7dc:	fb00 f303 	mul.w	r3, r0, r3
 801b7e0:	440b      	add	r3, r1
 801b7e2:	3360      	adds	r3, #96	; 0x60
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	88b9      	ldrh	r1, [r7, #4]
 801b7e8:	fb03 f101 	mul.w	r1, r3, r1
 801b7ec:	88fb      	ldrh	r3, [r7, #6]
 801b7ee:	440b      	add	r3, r1
 801b7f0:	005b      	lsls	r3, r3, #1
 801b7f2:	4413      	add	r3, r2
 801b7f4:	60fb      	str	r3, [r7, #12]
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 801b7f6:	4b14      	ldr	r3, [pc, #80]	; (801b848 <Rectangle+0xa8>)
 801b7f8:	781b      	ldrb	r3, [r3, #0]
 801b7fa:	4619      	mov	r1, r3
 801b7fc:	4a13      	ldr	r2, [pc, #76]	; (801b84c <Rectangle+0xac>)
 801b7fe:	2334      	movs	r3, #52	; 0x34
 801b800:	fb01 f303 	mul.w	r3, r1, r3
 801b804:	4413      	add	r3, r2
 801b806:	3360      	adds	r3, #96	; 0x60
 801b808:	681a      	ldr	r2, [r3, #0]
 801b80a:	887b      	ldrh	r3, [r7, #2]
 801b80c:	1ad3      	subs	r3, r2, r3
 801b80e:	4a10      	ldr	r2, [pc, #64]	; (801b850 <Rectangle+0xb0>)
 801b810:	60d3      	str	r3, [r2, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 801b812:	480f      	ldr	r0, [pc, #60]	; (801b850 <Rectangle+0xb0>)
 801b814:	f7e6 fc94 	bl	8002140 <HAL_DMA2D_Init>
 801b818:	4603      	mov	r3, r0
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d10f      	bne.n	801b83e <Rectangle+0x9e>
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 801b81e:	887a      	ldrh	r2, [r7, #2]
 801b820:	883b      	ldrh	r3, [r7, #0]
 801b822:	9300      	str	r3, [sp, #0]
 801b824:	4613      	mov	r3, r2
 801b826:	68fa      	ldr	r2, [r7, #12]
 801b828:	6a39      	ldr	r1, [r7, #32]
 801b82a:	4809      	ldr	r0, [pc, #36]	; (801b850 <Rectangle+0xb0>)
 801b82c:	f7e6 fd16 	bl	800225c <HAL_DMA2D_Start>
 801b830:	4603      	mov	r3, r0
 801b832:	2b00      	cmp	r3, #0
 801b834:	d103      	bne.n	801b83e <Rectangle+0x9e>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 801b836:	2164      	movs	r1, #100	; 0x64
 801b838:	4805      	ldr	r0, [pc, #20]	; (801b850 <Rectangle+0xb0>)
 801b83a:	f7e6 fd4f 	bl	80022dc <HAL_DMA2D_PollForTransfer>
		}
	}

}
 801b83e:	bf00      	nop
 801b840:	3714      	adds	r7, #20
 801b842:	46bd      	mov	sp, r7
 801b844:	bd90      	pop	{r4, r7, pc}
 801b846:	bf00      	nop
 801b848:	20000aa4 	.word	0x20000aa4
 801b84c:	200009fc 	.word	0x200009fc
 801b850:	20000910 	.word	0x20000910

0801b854 <Pixel>:

void Pixel(uint16_t Xpos, uint16_t Ypos, uint32_t color)
{
 801b854:	b590      	push	{r4, r7, lr}
 801b856:	b083      	sub	sp, #12
 801b858:	af00      	add	r7, sp, #0
 801b85a:	4603      	mov	r3, r0
 801b85c:	603a      	str	r2, [r7, #0]
 801b85e:	80fb      	strh	r3, [r7, #6]
 801b860:	460b      	mov	r3, r1
 801b862:	80bb      	strh	r3, [r7, #4]
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 801b864:	4b12      	ldr	r3, [pc, #72]	; (801b8b0 <Pixel+0x5c>)
 801b866:	781b      	ldrb	r3, [r3, #0]
 801b868:	4619      	mov	r1, r3
 801b86a:	4a12      	ldr	r2, [pc, #72]	; (801b8b4 <Pixel+0x60>)
 801b86c:	2334      	movs	r3, #52	; 0x34
 801b86e:	fb01 f303 	mul.w	r3, r1, r3
 801b872:	4413      	add	r3, r2
 801b874:	335c      	adds	r3, #92	; 0x5c
 801b876:	681a      	ldr	r2, [r3, #0]
 801b878:	88bb      	ldrh	r3, [r7, #4]
 801b87a:	490d      	ldr	r1, [pc, #52]	; (801b8b0 <Pixel+0x5c>)
 801b87c:	7809      	ldrb	r1, [r1, #0]
 801b87e:	460c      	mov	r4, r1
 801b880:	480c      	ldr	r0, [pc, #48]	; (801b8b4 <Pixel+0x60>)
 801b882:	2134      	movs	r1, #52	; 0x34
 801b884:	fb04 f101 	mul.w	r1, r4, r1
 801b888:	4401      	add	r1, r0
 801b88a:	3160      	adds	r1, #96	; 0x60
 801b88c:	6809      	ldr	r1, [r1, #0]
 801b88e:	fb03 f101 	mul.w	r1, r3, r1
 801b892:	88fb      	ldrh	r3, [r7, #6]
 801b894:	440b      	add	r3, r1
 801b896:	005b      	lsls	r3, r3, #1
 801b898:	4413      	add	r3, r2
 801b89a:	461c      	mov	r4, r3
 801b89c:	6838      	ldr	r0, [r7, #0]
 801b89e:	f7fd fce9 	bl	8019274 <Color_Convertion>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	8023      	strh	r3, [r4, #0]
}
 801b8a6:	bf00      	nop
 801b8a8:	370c      	adds	r7, #12
 801b8aa:	46bd      	mov	sp, r7
 801b8ac:	bd90      	pop	{r4, r7, pc}
 801b8ae:	bf00      	nop
 801b8b0:	20000aa4 	.word	0x20000aa4
 801b8b4:	200009fc 	.word	0x200009fc

0801b8b8 <DrawDigit>:

void DrawDigit(uint8_t digit, uint16_t Xpos, uint16_t Ypos, uint8_t width, uint32_t color)
{
 801b8b8:	b590      	push	{r4, r7, lr}
 801b8ba:	b083      	sub	sp, #12
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	4604      	mov	r4, r0
 801b8c0:	4608      	mov	r0, r1
 801b8c2:	4611      	mov	r1, r2
 801b8c4:	461a      	mov	r2, r3
 801b8c6:	4623      	mov	r3, r4
 801b8c8:	71fb      	strb	r3, [r7, #7]
 801b8ca:	4603      	mov	r3, r0
 801b8cc:	80bb      	strh	r3, [r7, #4]
 801b8ce:	460b      	mov	r3, r1
 801b8d0:	807b      	strh	r3, [r7, #2]
 801b8d2:	4613      	mov	r3, r2
 801b8d4:	71bb      	strb	r3, [r7, #6]
	switch(digit) {
 801b8d6:	79fb      	ldrb	r3, [r7, #7]
 801b8d8:	2b09      	cmp	r3, #9
 801b8da:	f200 865c 	bhi.w	801c596 <DrawDigit+0xcde>
 801b8de:	a201      	add	r2, pc, #4	; (adr r2, 801b8e4 <DrawDigit+0x2c>)
 801b8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8e4:	0801b90d 	.word	0x0801b90d
 801b8e8:	0801ba8d 	.word	0x0801ba8d
 801b8ec:	0801bb25 	.word	0x0801bb25
 801b8f0:	0801bc69 	.word	0x0801bc69
 801b8f4:	0801bdbf 	.word	0x0801bdbf
 801b8f8:	0801bec9 	.word	0x0801bec9
 801b8fc:	0801c00b 	.word	0x0801c00b
 801b900:	0801c189 	.word	0x0801c189
 801b904:	0801c24f 	.word	0x0801c24f
 801b908:	0801c411 	.word	0x0801c411
	case 0: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 801b90c:	88bb      	ldrh	r3, [r7, #4]
 801b90e:	3301      	adds	r3, #1
 801b910:	b298      	uxth	r0, r3
 801b912:	79bb      	ldrb	r3, [r7, #6]
 801b914:	b29b      	uxth	r3, r3
 801b916:	3b02      	subs	r3, #2
 801b918:	b29a      	uxth	r2, r3
 801b91a:	8879      	ldrh	r1, [r7, #2]
 801b91c:	69bb      	ldr	r3, [r7, #24]
 801b91e:	f7ff fedf 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801b922:	88bb      	ldrh	r3, [r7, #4]
 801b924:	3302      	adds	r3, #2
 801b926:	b298      	uxth	r0, r3
 801b928:	887b      	ldrh	r3, [r7, #2]
 801b92a:	3301      	adds	r3, #1
 801b92c:	b299      	uxth	r1, r3
 801b92e:	79bb      	ldrb	r3, [r7, #6]
 801b930:	b29b      	uxth	r3, r3
 801b932:	3b04      	subs	r3, #4
 801b934:	b29a      	uxth	r2, r3
 801b936:	69bb      	ldr	r3, [r7, #24]
 801b938:	f7ff fed2 	bl	801b6e0 <HLine>
		// f
		VLine(Xpos, Ypos + 1, width - 2, color);
 801b93c:	887b      	ldrh	r3, [r7, #2]
 801b93e:	3301      	adds	r3, #1
 801b940:	b299      	uxth	r1, r3
 801b942:	79bb      	ldrb	r3, [r7, #6]
 801b944:	b29b      	uxth	r3, r3
 801b946:	3b02      	subs	r3, #2
 801b948:	b29a      	uxth	r2, r3
 801b94a:	88b8      	ldrh	r0, [r7, #4]
 801b94c:	69bb      	ldr	r3, [r7, #24]
 801b94e:	f7ff fe5d 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 801b952:	88bb      	ldrh	r3, [r7, #4]
 801b954:	3301      	adds	r3, #1
 801b956:	b298      	uxth	r0, r3
 801b958:	887b      	ldrh	r3, [r7, #2]
 801b95a:	3302      	adds	r3, #2
 801b95c:	b299      	uxth	r1, r3
 801b95e:	79bb      	ldrb	r3, [r7, #6]
 801b960:	b29b      	uxth	r3, r3
 801b962:	3b04      	subs	r3, #4
 801b964:	b29a      	uxth	r2, r3
 801b966:	69bb      	ldr	r3, [r7, #24]
 801b968:	f7ff fe50 	bl	801b60c <VLine>
		// e
		VLine(Xpos, Ypos + width, width - 2, color);
 801b96c:	79bb      	ldrb	r3, [r7, #6]
 801b96e:	b29a      	uxth	r2, r3
 801b970:	887b      	ldrh	r3, [r7, #2]
 801b972:	4413      	add	r3, r2
 801b974:	b299      	uxth	r1, r3
 801b976:	79bb      	ldrb	r3, [r7, #6]
 801b978:	b29b      	uxth	r3, r3
 801b97a:	3b02      	subs	r3, #2
 801b97c:	b29a      	uxth	r2, r3
 801b97e:	88b8      	ldrh	r0, [r7, #4]
 801b980:	69bb      	ldr	r3, [r7, #24]
 801b982:	f7ff fe43 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 801b986:	88bb      	ldrh	r3, [r7, #4]
 801b988:	3301      	adds	r3, #1
 801b98a:	b298      	uxth	r0, r3
 801b98c:	79bb      	ldrb	r3, [r7, #6]
 801b98e:	b29a      	uxth	r2, r3
 801b990:	887b      	ldrh	r3, [r7, #2]
 801b992:	4413      	add	r3, r2
 801b994:	b29b      	uxth	r3, r3
 801b996:	3301      	adds	r3, #1
 801b998:	b299      	uxth	r1, r3
 801b99a:	79bb      	ldrb	r3, [r7, #6]
 801b99c:	b29b      	uxth	r3, r3
 801b99e:	3b04      	subs	r3, #4
 801b9a0:	b29a      	uxth	r2, r3
 801b9a2:	69bb      	ldr	r3, [r7, #24]
 801b9a4:	f7ff fe32 	bl	801b60c <VLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 801b9a8:	88bb      	ldrh	r3, [r7, #4]
 801b9aa:	3301      	adds	r3, #1
 801b9ac:	b298      	uxth	r0, r3
 801b9ae:	79bb      	ldrb	r3, [r7, #6]
 801b9b0:	b29b      	uxth	r3, r3
 801b9b2:	005b      	lsls	r3, r3, #1
 801b9b4:	b29a      	uxth	r2, r3
 801b9b6:	887b      	ldrh	r3, [r7, #2]
 801b9b8:	4413      	add	r3, r2
 801b9ba:	b29b      	uxth	r3, r3
 801b9bc:	3b02      	subs	r3, #2
 801b9be:	b299      	uxth	r1, r3
 801b9c0:	79bb      	ldrb	r3, [r7, #6]
 801b9c2:	b29b      	uxth	r3, r3
 801b9c4:	3b02      	subs	r3, #2
 801b9c6:	b29a      	uxth	r2, r3
 801b9c8:	69bb      	ldr	r3, [r7, #24]
 801b9ca:	f7ff fe89 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 801b9ce:	88bb      	ldrh	r3, [r7, #4]
 801b9d0:	3302      	adds	r3, #2
 801b9d2:	b298      	uxth	r0, r3
 801b9d4:	79bb      	ldrb	r3, [r7, #6]
 801b9d6:	b29b      	uxth	r3, r3
 801b9d8:	005b      	lsls	r3, r3, #1
 801b9da:	b29a      	uxth	r2, r3
 801b9dc:	887b      	ldrh	r3, [r7, #2]
 801b9de:	4413      	add	r3, r2
 801b9e0:	b29b      	uxth	r3, r3
 801b9e2:	3b03      	subs	r3, #3
 801b9e4:	b299      	uxth	r1, r3
 801b9e6:	79bb      	ldrb	r3, [r7, #6]
 801b9e8:	b29b      	uxth	r3, r3
 801b9ea:	3b04      	subs	r3, #4
 801b9ec:	b29a      	uxth	r2, r3
 801b9ee:	69bb      	ldr	r3, [r7, #24]
 801b9f0:	f7ff fe76 	bl	801b6e0 <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801b9f4:	79bb      	ldrb	r3, [r7, #6]
 801b9f6:	b29a      	uxth	r2, r3
 801b9f8:	88bb      	ldrh	r3, [r7, #4]
 801b9fa:	4413      	add	r3, r2
 801b9fc:	b29b      	uxth	r3, r3
 801b9fe:	3b01      	subs	r3, #1
 801ba00:	b298      	uxth	r0, r3
 801ba02:	79bb      	ldrb	r3, [r7, #6]
 801ba04:	b29a      	uxth	r2, r3
 801ba06:	887b      	ldrh	r3, [r7, #2]
 801ba08:	4413      	add	r3, r2
 801ba0a:	b299      	uxth	r1, r3
 801ba0c:	79bb      	ldrb	r3, [r7, #6]
 801ba0e:	b29b      	uxth	r3, r3
 801ba10:	3b02      	subs	r3, #2
 801ba12:	b29a      	uxth	r2, r3
 801ba14:	69bb      	ldr	r3, [r7, #24]
 801ba16:	f7ff fdf9 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801ba1a:	79bb      	ldrb	r3, [r7, #6]
 801ba1c:	b29a      	uxth	r2, r3
 801ba1e:	88bb      	ldrh	r3, [r7, #4]
 801ba20:	4413      	add	r3, r2
 801ba22:	b29b      	uxth	r3, r3
 801ba24:	3b02      	subs	r3, #2
 801ba26:	b298      	uxth	r0, r3
 801ba28:	79bb      	ldrb	r3, [r7, #6]
 801ba2a:	b29a      	uxth	r2, r3
 801ba2c:	887b      	ldrh	r3, [r7, #2]
 801ba2e:	4413      	add	r3, r2
 801ba30:	b29b      	uxth	r3, r3
 801ba32:	3301      	adds	r3, #1
 801ba34:	b299      	uxth	r1, r3
 801ba36:	79bb      	ldrb	r3, [r7, #6]
 801ba38:	b29b      	uxth	r3, r3
 801ba3a:	3b04      	subs	r3, #4
 801ba3c:	b29a      	uxth	r2, r3
 801ba3e:	69bb      	ldr	r3, [r7, #24]
 801ba40:	f7ff fde4 	bl	801b60c <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801ba44:	79bb      	ldrb	r3, [r7, #6]
 801ba46:	b29a      	uxth	r2, r3
 801ba48:	88bb      	ldrh	r3, [r7, #4]
 801ba4a:	4413      	add	r3, r2
 801ba4c:	b29b      	uxth	r3, r3
 801ba4e:	3b01      	subs	r3, #1
 801ba50:	b298      	uxth	r0, r3
 801ba52:	887b      	ldrh	r3, [r7, #2]
 801ba54:	3301      	adds	r3, #1
 801ba56:	b299      	uxth	r1, r3
 801ba58:	79bb      	ldrb	r3, [r7, #6]
 801ba5a:	b29b      	uxth	r3, r3
 801ba5c:	3b02      	subs	r3, #2
 801ba5e:	b29a      	uxth	r2, r3
 801ba60:	69bb      	ldr	r3, [r7, #24]
 801ba62:	f7ff fdd3 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801ba66:	79bb      	ldrb	r3, [r7, #6]
 801ba68:	b29a      	uxth	r2, r3
 801ba6a:	88bb      	ldrh	r3, [r7, #4]
 801ba6c:	4413      	add	r3, r2
 801ba6e:	b29b      	uxth	r3, r3
 801ba70:	3b02      	subs	r3, #2
 801ba72:	b298      	uxth	r0, r3
 801ba74:	887b      	ldrh	r3, [r7, #2]
 801ba76:	3302      	adds	r3, #2
 801ba78:	b299      	uxth	r1, r3
 801ba7a:	79bb      	ldrb	r3, [r7, #6]
 801ba7c:	b29b      	uxth	r3, r3
 801ba7e:	3b04      	subs	r3, #4
 801ba80:	b29a      	uxth	r2, r3
 801ba82:	69bb      	ldr	r3, [r7, #24]
 801ba84:	f7ff fdc2 	bl	801b60c <VLine>
		break;
 801ba88:	f000 bd85 	b.w	801c596 <DrawDigit+0xcde>
	}
	case 1: {
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801ba8c:	79bb      	ldrb	r3, [r7, #6]
 801ba8e:	b29a      	uxth	r2, r3
 801ba90:	88bb      	ldrh	r3, [r7, #4]
 801ba92:	4413      	add	r3, r2
 801ba94:	b29b      	uxth	r3, r3
 801ba96:	3b01      	subs	r3, #1
 801ba98:	b298      	uxth	r0, r3
 801ba9a:	79bb      	ldrb	r3, [r7, #6]
 801ba9c:	b29a      	uxth	r2, r3
 801ba9e:	887b      	ldrh	r3, [r7, #2]
 801baa0:	4413      	add	r3, r2
 801baa2:	b299      	uxth	r1, r3
 801baa4:	79bb      	ldrb	r3, [r7, #6]
 801baa6:	b29b      	uxth	r3, r3
 801baa8:	3b02      	subs	r3, #2
 801baaa:	b29a      	uxth	r2, r3
 801baac:	69bb      	ldr	r3, [r7, #24]
 801baae:	f7ff fdad 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801bab2:	79bb      	ldrb	r3, [r7, #6]
 801bab4:	b29a      	uxth	r2, r3
 801bab6:	88bb      	ldrh	r3, [r7, #4]
 801bab8:	4413      	add	r3, r2
 801baba:	b29b      	uxth	r3, r3
 801babc:	3b02      	subs	r3, #2
 801babe:	b298      	uxth	r0, r3
 801bac0:	79bb      	ldrb	r3, [r7, #6]
 801bac2:	b29a      	uxth	r2, r3
 801bac4:	887b      	ldrh	r3, [r7, #2]
 801bac6:	4413      	add	r3, r2
 801bac8:	b29b      	uxth	r3, r3
 801baca:	3301      	adds	r3, #1
 801bacc:	b299      	uxth	r1, r3
 801bace:	79bb      	ldrb	r3, [r7, #6]
 801bad0:	b29b      	uxth	r3, r3
 801bad2:	3b04      	subs	r3, #4
 801bad4:	b29a      	uxth	r2, r3
 801bad6:	69bb      	ldr	r3, [r7, #24]
 801bad8:	f7ff fd98 	bl	801b60c <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801badc:	79bb      	ldrb	r3, [r7, #6]
 801bade:	b29a      	uxth	r2, r3
 801bae0:	88bb      	ldrh	r3, [r7, #4]
 801bae2:	4413      	add	r3, r2
 801bae4:	b29b      	uxth	r3, r3
 801bae6:	3b01      	subs	r3, #1
 801bae8:	b298      	uxth	r0, r3
 801baea:	887b      	ldrh	r3, [r7, #2]
 801baec:	3301      	adds	r3, #1
 801baee:	b299      	uxth	r1, r3
 801baf0:	79bb      	ldrb	r3, [r7, #6]
 801baf2:	b29b      	uxth	r3, r3
 801baf4:	3b02      	subs	r3, #2
 801baf6:	b29a      	uxth	r2, r3
 801baf8:	69bb      	ldr	r3, [r7, #24]
 801bafa:	f7ff fd87 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801bafe:	79bb      	ldrb	r3, [r7, #6]
 801bb00:	b29a      	uxth	r2, r3
 801bb02:	88bb      	ldrh	r3, [r7, #4]
 801bb04:	4413      	add	r3, r2
 801bb06:	b29b      	uxth	r3, r3
 801bb08:	3b02      	subs	r3, #2
 801bb0a:	b298      	uxth	r0, r3
 801bb0c:	887b      	ldrh	r3, [r7, #2]
 801bb0e:	3302      	adds	r3, #2
 801bb10:	b299      	uxth	r1, r3
 801bb12:	79bb      	ldrb	r3, [r7, #6]
 801bb14:	b29b      	uxth	r3, r3
 801bb16:	3b04      	subs	r3, #4
 801bb18:	b29a      	uxth	r2, r3
 801bb1a:	69bb      	ldr	r3, [r7, #24]
 801bb1c:	f7ff fd76 	bl	801b60c <VLine>
		break;
 801bb20:	f000 bd39 	b.w	801c596 <DrawDigit+0xcde>
	}
	case 2: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 801bb24:	88bb      	ldrh	r3, [r7, #4]
 801bb26:	3301      	adds	r3, #1
 801bb28:	b298      	uxth	r0, r3
 801bb2a:	79bb      	ldrb	r3, [r7, #6]
 801bb2c:	b29b      	uxth	r3, r3
 801bb2e:	3b02      	subs	r3, #2
 801bb30:	b29a      	uxth	r2, r3
 801bb32:	8879      	ldrh	r1, [r7, #2]
 801bb34:	69bb      	ldr	r3, [r7, #24]
 801bb36:	f7ff fdd3 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801bb3a:	88bb      	ldrh	r3, [r7, #4]
 801bb3c:	3302      	adds	r3, #2
 801bb3e:	b298      	uxth	r0, r3
 801bb40:	887b      	ldrh	r3, [r7, #2]
 801bb42:	3301      	adds	r3, #1
 801bb44:	b299      	uxth	r1, r3
 801bb46:	79bb      	ldrb	r3, [r7, #6]
 801bb48:	b29b      	uxth	r3, r3
 801bb4a:	3b04      	subs	r3, #4
 801bb4c:	b29a      	uxth	r2, r3
 801bb4e:	69bb      	ldr	r3, [r7, #24]
 801bb50:	f7ff fdc6 	bl	801b6e0 <HLine>
		// e
		VLine(Xpos, Ypos + width, width - 2, color);
 801bb54:	79bb      	ldrb	r3, [r7, #6]
 801bb56:	b29a      	uxth	r2, r3
 801bb58:	887b      	ldrh	r3, [r7, #2]
 801bb5a:	4413      	add	r3, r2
 801bb5c:	b299      	uxth	r1, r3
 801bb5e:	79bb      	ldrb	r3, [r7, #6]
 801bb60:	b29b      	uxth	r3, r3
 801bb62:	3b02      	subs	r3, #2
 801bb64:	b29a      	uxth	r2, r3
 801bb66:	88b8      	ldrh	r0, [r7, #4]
 801bb68:	69bb      	ldr	r3, [r7, #24]
 801bb6a:	f7ff fd4f 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 801bb6e:	88bb      	ldrh	r3, [r7, #4]
 801bb70:	3301      	adds	r3, #1
 801bb72:	b298      	uxth	r0, r3
 801bb74:	79bb      	ldrb	r3, [r7, #6]
 801bb76:	b29a      	uxth	r2, r3
 801bb78:	887b      	ldrh	r3, [r7, #2]
 801bb7a:	4413      	add	r3, r2
 801bb7c:	b29b      	uxth	r3, r3
 801bb7e:	3301      	adds	r3, #1
 801bb80:	b299      	uxth	r1, r3
 801bb82:	79bb      	ldrb	r3, [r7, #6]
 801bb84:	b29b      	uxth	r3, r3
 801bb86:	3b04      	subs	r3, #4
 801bb88:	b29a      	uxth	r2, r3
 801bb8a:	69bb      	ldr	r3, [r7, #24]
 801bb8c:	f7ff fd3e 	bl	801b60c <VLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 801bb90:	88bb      	ldrh	r3, [r7, #4]
 801bb92:	3301      	adds	r3, #1
 801bb94:	b298      	uxth	r0, r3
 801bb96:	79bb      	ldrb	r3, [r7, #6]
 801bb98:	b29b      	uxth	r3, r3
 801bb9a:	005b      	lsls	r3, r3, #1
 801bb9c:	b29a      	uxth	r2, r3
 801bb9e:	887b      	ldrh	r3, [r7, #2]
 801bba0:	4413      	add	r3, r2
 801bba2:	b29b      	uxth	r3, r3
 801bba4:	3b02      	subs	r3, #2
 801bba6:	b299      	uxth	r1, r3
 801bba8:	79bb      	ldrb	r3, [r7, #6]
 801bbaa:	b29b      	uxth	r3, r3
 801bbac:	3b02      	subs	r3, #2
 801bbae:	b29a      	uxth	r2, r3
 801bbb0:	69bb      	ldr	r3, [r7, #24]
 801bbb2:	f7ff fd95 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 801bbb6:	88bb      	ldrh	r3, [r7, #4]
 801bbb8:	3302      	adds	r3, #2
 801bbba:	b298      	uxth	r0, r3
 801bbbc:	79bb      	ldrb	r3, [r7, #6]
 801bbbe:	b29b      	uxth	r3, r3
 801bbc0:	005b      	lsls	r3, r3, #1
 801bbc2:	b29a      	uxth	r2, r3
 801bbc4:	887b      	ldrh	r3, [r7, #2]
 801bbc6:	4413      	add	r3, r2
 801bbc8:	b29b      	uxth	r3, r3
 801bbca:	3b03      	subs	r3, #3
 801bbcc:	b299      	uxth	r1, r3
 801bbce:	79bb      	ldrb	r3, [r7, #6]
 801bbd0:	b29b      	uxth	r3, r3
 801bbd2:	3b04      	subs	r3, #4
 801bbd4:	b29a      	uxth	r2, r3
 801bbd6:	69bb      	ldr	r3, [r7, #24]
 801bbd8:	f7ff fd82 	bl	801b6e0 <HLine>
		// g
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 801bbdc:	88bb      	ldrh	r3, [r7, #4]
 801bbde:	3301      	adds	r3, #1
 801bbe0:	b298      	uxth	r0, r3
 801bbe2:	79bb      	ldrb	r3, [r7, #6]
 801bbe4:	b29a      	uxth	r2, r3
 801bbe6:	887b      	ldrh	r3, [r7, #2]
 801bbe8:	4413      	add	r3, r2
 801bbea:	b29b      	uxth	r3, r3
 801bbec:	3b01      	subs	r3, #1
 801bbee:	b299      	uxth	r1, r3
 801bbf0:	79bb      	ldrb	r3, [r7, #6]
 801bbf2:	b29b      	uxth	r3, r3
 801bbf4:	3b02      	subs	r3, #2
 801bbf6:	b29a      	uxth	r2, r3
 801bbf8:	69bb      	ldr	r3, [r7, #24]
 801bbfa:	f7ff fd71 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 801bbfe:	88bb      	ldrh	r3, [r7, #4]
 801bc00:	3302      	adds	r3, #2
 801bc02:	b298      	uxth	r0, r3
 801bc04:	79bb      	ldrb	r3, [r7, #6]
 801bc06:	b29a      	uxth	r2, r3
 801bc08:	887b      	ldrh	r3, [r7, #2]
 801bc0a:	4413      	add	r3, r2
 801bc0c:	b29b      	uxth	r3, r3
 801bc0e:	3b02      	subs	r3, #2
 801bc10:	b299      	uxth	r1, r3
 801bc12:	79bb      	ldrb	r3, [r7, #6]
 801bc14:	b29b      	uxth	r3, r3
 801bc16:	3b04      	subs	r3, #4
 801bc18:	b29a      	uxth	r2, r3
 801bc1a:	69bb      	ldr	r3, [r7, #24]
 801bc1c:	f7ff fd60 	bl	801b6e0 <HLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801bc20:	79bb      	ldrb	r3, [r7, #6]
 801bc22:	b29a      	uxth	r2, r3
 801bc24:	88bb      	ldrh	r3, [r7, #4]
 801bc26:	4413      	add	r3, r2
 801bc28:	b29b      	uxth	r3, r3
 801bc2a:	3b01      	subs	r3, #1
 801bc2c:	b298      	uxth	r0, r3
 801bc2e:	887b      	ldrh	r3, [r7, #2]
 801bc30:	3301      	adds	r3, #1
 801bc32:	b299      	uxth	r1, r3
 801bc34:	79bb      	ldrb	r3, [r7, #6]
 801bc36:	b29b      	uxth	r3, r3
 801bc38:	3b02      	subs	r3, #2
 801bc3a:	b29a      	uxth	r2, r3
 801bc3c:	69bb      	ldr	r3, [r7, #24]
 801bc3e:	f7ff fce5 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801bc42:	79bb      	ldrb	r3, [r7, #6]
 801bc44:	b29a      	uxth	r2, r3
 801bc46:	88bb      	ldrh	r3, [r7, #4]
 801bc48:	4413      	add	r3, r2
 801bc4a:	b29b      	uxth	r3, r3
 801bc4c:	3b02      	subs	r3, #2
 801bc4e:	b298      	uxth	r0, r3
 801bc50:	887b      	ldrh	r3, [r7, #2]
 801bc52:	3302      	adds	r3, #2
 801bc54:	b299      	uxth	r1, r3
 801bc56:	79bb      	ldrb	r3, [r7, #6]
 801bc58:	b29b      	uxth	r3, r3
 801bc5a:	3b04      	subs	r3, #4
 801bc5c:	b29a      	uxth	r2, r3
 801bc5e:	69bb      	ldr	r3, [r7, #24]
 801bc60:	f7ff fcd4 	bl	801b60c <VLine>
		break;
 801bc64:	f000 bc97 	b.w	801c596 <DrawDigit+0xcde>
	}
	case 3: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 801bc68:	88bb      	ldrh	r3, [r7, #4]
 801bc6a:	3301      	adds	r3, #1
 801bc6c:	b298      	uxth	r0, r3
 801bc6e:	79bb      	ldrb	r3, [r7, #6]
 801bc70:	b29b      	uxth	r3, r3
 801bc72:	3b02      	subs	r3, #2
 801bc74:	b29a      	uxth	r2, r3
 801bc76:	8879      	ldrh	r1, [r7, #2]
 801bc78:	69bb      	ldr	r3, [r7, #24]
 801bc7a:	f7ff fd31 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801bc7e:	88bb      	ldrh	r3, [r7, #4]
 801bc80:	3302      	adds	r3, #2
 801bc82:	b298      	uxth	r0, r3
 801bc84:	887b      	ldrh	r3, [r7, #2]
 801bc86:	3301      	adds	r3, #1
 801bc88:	b299      	uxth	r1, r3
 801bc8a:	79bb      	ldrb	r3, [r7, #6]
 801bc8c:	b29b      	uxth	r3, r3
 801bc8e:	3b04      	subs	r3, #4
 801bc90:	b29a      	uxth	r2, r3
 801bc92:	69bb      	ldr	r3, [r7, #24]
 801bc94:	f7ff fd24 	bl	801b6e0 <HLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 801bc98:	88bb      	ldrh	r3, [r7, #4]
 801bc9a:	3301      	adds	r3, #1
 801bc9c:	b298      	uxth	r0, r3
 801bc9e:	79bb      	ldrb	r3, [r7, #6]
 801bca0:	b29b      	uxth	r3, r3
 801bca2:	005b      	lsls	r3, r3, #1
 801bca4:	b29a      	uxth	r2, r3
 801bca6:	887b      	ldrh	r3, [r7, #2]
 801bca8:	4413      	add	r3, r2
 801bcaa:	b29b      	uxth	r3, r3
 801bcac:	3b02      	subs	r3, #2
 801bcae:	b299      	uxth	r1, r3
 801bcb0:	79bb      	ldrb	r3, [r7, #6]
 801bcb2:	b29b      	uxth	r3, r3
 801bcb4:	3b02      	subs	r3, #2
 801bcb6:	b29a      	uxth	r2, r3
 801bcb8:	69bb      	ldr	r3, [r7, #24]
 801bcba:	f7ff fd11 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 801bcbe:	88bb      	ldrh	r3, [r7, #4]
 801bcc0:	3302      	adds	r3, #2
 801bcc2:	b298      	uxth	r0, r3
 801bcc4:	79bb      	ldrb	r3, [r7, #6]
 801bcc6:	b29b      	uxth	r3, r3
 801bcc8:	005b      	lsls	r3, r3, #1
 801bcca:	b29a      	uxth	r2, r3
 801bccc:	887b      	ldrh	r3, [r7, #2]
 801bcce:	4413      	add	r3, r2
 801bcd0:	b29b      	uxth	r3, r3
 801bcd2:	3b03      	subs	r3, #3
 801bcd4:	b299      	uxth	r1, r3
 801bcd6:	79bb      	ldrb	r3, [r7, #6]
 801bcd8:	b29b      	uxth	r3, r3
 801bcda:	3b04      	subs	r3, #4
 801bcdc:	b29a      	uxth	r2, r3
 801bcde:	69bb      	ldr	r3, [r7, #24]
 801bce0:	f7ff fcfe 	bl	801b6e0 <HLine>
		// g
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 801bce4:	88bb      	ldrh	r3, [r7, #4]
 801bce6:	3301      	adds	r3, #1
 801bce8:	b298      	uxth	r0, r3
 801bcea:	79bb      	ldrb	r3, [r7, #6]
 801bcec:	b29a      	uxth	r2, r3
 801bcee:	887b      	ldrh	r3, [r7, #2]
 801bcf0:	4413      	add	r3, r2
 801bcf2:	b29b      	uxth	r3, r3
 801bcf4:	3b01      	subs	r3, #1
 801bcf6:	b299      	uxth	r1, r3
 801bcf8:	79bb      	ldrb	r3, [r7, #6]
 801bcfa:	b29b      	uxth	r3, r3
 801bcfc:	3b02      	subs	r3, #2
 801bcfe:	b29a      	uxth	r2, r3
 801bd00:	69bb      	ldr	r3, [r7, #24]
 801bd02:	f7ff fced 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 801bd06:	88bb      	ldrh	r3, [r7, #4]
 801bd08:	3302      	adds	r3, #2
 801bd0a:	b298      	uxth	r0, r3
 801bd0c:	79bb      	ldrb	r3, [r7, #6]
 801bd0e:	b29a      	uxth	r2, r3
 801bd10:	887b      	ldrh	r3, [r7, #2]
 801bd12:	4413      	add	r3, r2
 801bd14:	b29b      	uxth	r3, r3
 801bd16:	3b02      	subs	r3, #2
 801bd18:	b299      	uxth	r1, r3
 801bd1a:	79bb      	ldrb	r3, [r7, #6]
 801bd1c:	b29b      	uxth	r3, r3
 801bd1e:	3b04      	subs	r3, #4
 801bd20:	b29a      	uxth	r2, r3
 801bd22:	69bb      	ldr	r3, [r7, #24]
 801bd24:	f7ff fcdc 	bl	801b6e0 <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801bd28:	79bb      	ldrb	r3, [r7, #6]
 801bd2a:	b29a      	uxth	r2, r3
 801bd2c:	88bb      	ldrh	r3, [r7, #4]
 801bd2e:	4413      	add	r3, r2
 801bd30:	b29b      	uxth	r3, r3
 801bd32:	3b01      	subs	r3, #1
 801bd34:	b298      	uxth	r0, r3
 801bd36:	79bb      	ldrb	r3, [r7, #6]
 801bd38:	b29a      	uxth	r2, r3
 801bd3a:	887b      	ldrh	r3, [r7, #2]
 801bd3c:	4413      	add	r3, r2
 801bd3e:	b299      	uxth	r1, r3
 801bd40:	79bb      	ldrb	r3, [r7, #6]
 801bd42:	b29b      	uxth	r3, r3
 801bd44:	3b02      	subs	r3, #2
 801bd46:	b29a      	uxth	r2, r3
 801bd48:	69bb      	ldr	r3, [r7, #24]
 801bd4a:	f7ff fc5f 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801bd4e:	79bb      	ldrb	r3, [r7, #6]
 801bd50:	b29a      	uxth	r2, r3
 801bd52:	88bb      	ldrh	r3, [r7, #4]
 801bd54:	4413      	add	r3, r2
 801bd56:	b29b      	uxth	r3, r3
 801bd58:	3b02      	subs	r3, #2
 801bd5a:	b298      	uxth	r0, r3
 801bd5c:	79bb      	ldrb	r3, [r7, #6]
 801bd5e:	b29a      	uxth	r2, r3
 801bd60:	887b      	ldrh	r3, [r7, #2]
 801bd62:	4413      	add	r3, r2
 801bd64:	b29b      	uxth	r3, r3
 801bd66:	3301      	adds	r3, #1
 801bd68:	b299      	uxth	r1, r3
 801bd6a:	79bb      	ldrb	r3, [r7, #6]
 801bd6c:	b29b      	uxth	r3, r3
 801bd6e:	3b04      	subs	r3, #4
 801bd70:	b29a      	uxth	r2, r3
 801bd72:	69bb      	ldr	r3, [r7, #24]
 801bd74:	f7ff fc4a 	bl	801b60c <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801bd78:	79bb      	ldrb	r3, [r7, #6]
 801bd7a:	b29a      	uxth	r2, r3
 801bd7c:	88bb      	ldrh	r3, [r7, #4]
 801bd7e:	4413      	add	r3, r2
 801bd80:	b29b      	uxth	r3, r3
 801bd82:	3b01      	subs	r3, #1
 801bd84:	b298      	uxth	r0, r3
 801bd86:	887b      	ldrh	r3, [r7, #2]
 801bd88:	3301      	adds	r3, #1
 801bd8a:	b299      	uxth	r1, r3
 801bd8c:	79bb      	ldrb	r3, [r7, #6]
 801bd8e:	b29b      	uxth	r3, r3
 801bd90:	3b02      	subs	r3, #2
 801bd92:	b29a      	uxth	r2, r3
 801bd94:	69bb      	ldr	r3, [r7, #24]
 801bd96:	f7ff fc39 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801bd9a:	79bb      	ldrb	r3, [r7, #6]
 801bd9c:	b29a      	uxth	r2, r3
 801bd9e:	88bb      	ldrh	r3, [r7, #4]
 801bda0:	4413      	add	r3, r2
 801bda2:	b29b      	uxth	r3, r3
 801bda4:	3b02      	subs	r3, #2
 801bda6:	b298      	uxth	r0, r3
 801bda8:	887b      	ldrh	r3, [r7, #2]
 801bdaa:	3302      	adds	r3, #2
 801bdac:	b299      	uxth	r1, r3
 801bdae:	79bb      	ldrb	r3, [r7, #6]
 801bdb0:	b29b      	uxth	r3, r3
 801bdb2:	3b04      	subs	r3, #4
 801bdb4:	b29a      	uxth	r2, r3
 801bdb6:	69bb      	ldr	r3, [r7, #24]
 801bdb8:	f7ff fc28 	bl	801b60c <VLine>
		break;
 801bdbc:	e3eb      	b.n	801c596 <DrawDigit+0xcde>
	}
	case 4: {
		// f
		VLine(Xpos, Ypos + 1, width - 2, color);
 801bdbe:	887b      	ldrh	r3, [r7, #2]
 801bdc0:	3301      	adds	r3, #1
 801bdc2:	b299      	uxth	r1, r3
 801bdc4:	79bb      	ldrb	r3, [r7, #6]
 801bdc6:	b29b      	uxth	r3, r3
 801bdc8:	3b02      	subs	r3, #2
 801bdca:	b29a      	uxth	r2, r3
 801bdcc:	88b8      	ldrh	r0, [r7, #4]
 801bdce:	69bb      	ldr	r3, [r7, #24]
 801bdd0:	f7ff fc1c 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 801bdd4:	88bb      	ldrh	r3, [r7, #4]
 801bdd6:	3301      	adds	r3, #1
 801bdd8:	b298      	uxth	r0, r3
 801bdda:	887b      	ldrh	r3, [r7, #2]
 801bddc:	3302      	adds	r3, #2
 801bdde:	b299      	uxth	r1, r3
 801bde0:	79bb      	ldrb	r3, [r7, #6]
 801bde2:	b29b      	uxth	r3, r3
 801bde4:	3b04      	subs	r3, #4
 801bde6:	b29a      	uxth	r2, r3
 801bde8:	69bb      	ldr	r3, [r7, #24]
 801bdea:	f7ff fc0f 	bl	801b60c <VLine>
		// g
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 801bdee:	88bb      	ldrh	r3, [r7, #4]
 801bdf0:	3301      	adds	r3, #1
 801bdf2:	b298      	uxth	r0, r3
 801bdf4:	79bb      	ldrb	r3, [r7, #6]
 801bdf6:	b29a      	uxth	r2, r3
 801bdf8:	887b      	ldrh	r3, [r7, #2]
 801bdfa:	4413      	add	r3, r2
 801bdfc:	b29b      	uxth	r3, r3
 801bdfe:	3b01      	subs	r3, #1
 801be00:	b299      	uxth	r1, r3
 801be02:	79bb      	ldrb	r3, [r7, #6]
 801be04:	b29b      	uxth	r3, r3
 801be06:	3b02      	subs	r3, #2
 801be08:	b29a      	uxth	r2, r3
 801be0a:	69bb      	ldr	r3, [r7, #24]
 801be0c:	f7ff fc68 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 801be10:	88bb      	ldrh	r3, [r7, #4]
 801be12:	3302      	adds	r3, #2
 801be14:	b298      	uxth	r0, r3
 801be16:	79bb      	ldrb	r3, [r7, #6]
 801be18:	b29a      	uxth	r2, r3
 801be1a:	887b      	ldrh	r3, [r7, #2]
 801be1c:	4413      	add	r3, r2
 801be1e:	b29b      	uxth	r3, r3
 801be20:	3b02      	subs	r3, #2
 801be22:	b299      	uxth	r1, r3
 801be24:	79bb      	ldrb	r3, [r7, #6]
 801be26:	b29b      	uxth	r3, r3
 801be28:	3b04      	subs	r3, #4
 801be2a:	b29a      	uxth	r2, r3
 801be2c:	69bb      	ldr	r3, [r7, #24]
 801be2e:	f7ff fc57 	bl	801b6e0 <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801be32:	79bb      	ldrb	r3, [r7, #6]
 801be34:	b29a      	uxth	r2, r3
 801be36:	88bb      	ldrh	r3, [r7, #4]
 801be38:	4413      	add	r3, r2
 801be3a:	b29b      	uxth	r3, r3
 801be3c:	3b01      	subs	r3, #1
 801be3e:	b298      	uxth	r0, r3
 801be40:	79bb      	ldrb	r3, [r7, #6]
 801be42:	b29a      	uxth	r2, r3
 801be44:	887b      	ldrh	r3, [r7, #2]
 801be46:	4413      	add	r3, r2
 801be48:	b299      	uxth	r1, r3
 801be4a:	79bb      	ldrb	r3, [r7, #6]
 801be4c:	b29b      	uxth	r3, r3
 801be4e:	3b02      	subs	r3, #2
 801be50:	b29a      	uxth	r2, r3
 801be52:	69bb      	ldr	r3, [r7, #24]
 801be54:	f7ff fbda 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801be58:	79bb      	ldrb	r3, [r7, #6]
 801be5a:	b29a      	uxth	r2, r3
 801be5c:	88bb      	ldrh	r3, [r7, #4]
 801be5e:	4413      	add	r3, r2
 801be60:	b29b      	uxth	r3, r3
 801be62:	3b02      	subs	r3, #2
 801be64:	b298      	uxth	r0, r3
 801be66:	79bb      	ldrb	r3, [r7, #6]
 801be68:	b29a      	uxth	r2, r3
 801be6a:	887b      	ldrh	r3, [r7, #2]
 801be6c:	4413      	add	r3, r2
 801be6e:	b29b      	uxth	r3, r3
 801be70:	3301      	adds	r3, #1
 801be72:	b299      	uxth	r1, r3
 801be74:	79bb      	ldrb	r3, [r7, #6]
 801be76:	b29b      	uxth	r3, r3
 801be78:	3b04      	subs	r3, #4
 801be7a:	b29a      	uxth	r2, r3
 801be7c:	69bb      	ldr	r3, [r7, #24]
 801be7e:	f7ff fbc5 	bl	801b60c <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801be82:	79bb      	ldrb	r3, [r7, #6]
 801be84:	b29a      	uxth	r2, r3
 801be86:	88bb      	ldrh	r3, [r7, #4]
 801be88:	4413      	add	r3, r2
 801be8a:	b29b      	uxth	r3, r3
 801be8c:	3b01      	subs	r3, #1
 801be8e:	b298      	uxth	r0, r3
 801be90:	887b      	ldrh	r3, [r7, #2]
 801be92:	3301      	adds	r3, #1
 801be94:	b299      	uxth	r1, r3
 801be96:	79bb      	ldrb	r3, [r7, #6]
 801be98:	b29b      	uxth	r3, r3
 801be9a:	3b02      	subs	r3, #2
 801be9c:	b29a      	uxth	r2, r3
 801be9e:	69bb      	ldr	r3, [r7, #24]
 801bea0:	f7ff fbb4 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801bea4:	79bb      	ldrb	r3, [r7, #6]
 801bea6:	b29a      	uxth	r2, r3
 801bea8:	88bb      	ldrh	r3, [r7, #4]
 801beaa:	4413      	add	r3, r2
 801beac:	b29b      	uxth	r3, r3
 801beae:	3b02      	subs	r3, #2
 801beb0:	b298      	uxth	r0, r3
 801beb2:	887b      	ldrh	r3, [r7, #2]
 801beb4:	3302      	adds	r3, #2
 801beb6:	b299      	uxth	r1, r3
 801beb8:	79bb      	ldrb	r3, [r7, #6]
 801beba:	b29b      	uxth	r3, r3
 801bebc:	3b04      	subs	r3, #4
 801bebe:	b29a      	uxth	r2, r3
 801bec0:	69bb      	ldr	r3, [r7, #24]
 801bec2:	f7ff fba3 	bl	801b60c <VLine>
		break;
 801bec6:	e366      	b.n	801c596 <DrawDigit+0xcde>
	}
	case 5: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 801bec8:	88bb      	ldrh	r3, [r7, #4]
 801beca:	3301      	adds	r3, #1
 801becc:	b298      	uxth	r0, r3
 801bece:	79bb      	ldrb	r3, [r7, #6]
 801bed0:	b29b      	uxth	r3, r3
 801bed2:	3b02      	subs	r3, #2
 801bed4:	b29a      	uxth	r2, r3
 801bed6:	8879      	ldrh	r1, [r7, #2]
 801bed8:	69bb      	ldr	r3, [r7, #24]
 801beda:	f7ff fc01 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801bede:	88bb      	ldrh	r3, [r7, #4]
 801bee0:	3302      	adds	r3, #2
 801bee2:	b298      	uxth	r0, r3
 801bee4:	887b      	ldrh	r3, [r7, #2]
 801bee6:	3301      	adds	r3, #1
 801bee8:	b299      	uxth	r1, r3
 801beea:	79bb      	ldrb	r3, [r7, #6]
 801beec:	b29b      	uxth	r3, r3
 801beee:	3b04      	subs	r3, #4
 801bef0:	b29a      	uxth	r2, r3
 801bef2:	69bb      	ldr	r3, [r7, #24]
 801bef4:	f7ff fbf4 	bl	801b6e0 <HLine>
		// f
		VLine(Xpos, Ypos + 1, width - 2, color);
 801bef8:	887b      	ldrh	r3, [r7, #2]
 801befa:	3301      	adds	r3, #1
 801befc:	b299      	uxth	r1, r3
 801befe:	79bb      	ldrb	r3, [r7, #6]
 801bf00:	b29b      	uxth	r3, r3
 801bf02:	3b02      	subs	r3, #2
 801bf04:	b29a      	uxth	r2, r3
 801bf06:	88b8      	ldrh	r0, [r7, #4]
 801bf08:	69bb      	ldr	r3, [r7, #24]
 801bf0a:	f7ff fb7f 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 801bf0e:	88bb      	ldrh	r3, [r7, #4]
 801bf10:	3301      	adds	r3, #1
 801bf12:	b298      	uxth	r0, r3
 801bf14:	887b      	ldrh	r3, [r7, #2]
 801bf16:	3302      	adds	r3, #2
 801bf18:	b299      	uxth	r1, r3
 801bf1a:	79bb      	ldrb	r3, [r7, #6]
 801bf1c:	b29b      	uxth	r3, r3
 801bf1e:	3b04      	subs	r3, #4
 801bf20:	b29a      	uxth	r2, r3
 801bf22:	69bb      	ldr	r3, [r7, #24]
 801bf24:	f7ff fb72 	bl	801b60c <VLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 801bf28:	88bb      	ldrh	r3, [r7, #4]
 801bf2a:	3301      	adds	r3, #1
 801bf2c:	b298      	uxth	r0, r3
 801bf2e:	79bb      	ldrb	r3, [r7, #6]
 801bf30:	b29b      	uxth	r3, r3
 801bf32:	005b      	lsls	r3, r3, #1
 801bf34:	b29a      	uxth	r2, r3
 801bf36:	887b      	ldrh	r3, [r7, #2]
 801bf38:	4413      	add	r3, r2
 801bf3a:	b29b      	uxth	r3, r3
 801bf3c:	3b02      	subs	r3, #2
 801bf3e:	b299      	uxth	r1, r3
 801bf40:	79bb      	ldrb	r3, [r7, #6]
 801bf42:	b29b      	uxth	r3, r3
 801bf44:	3b02      	subs	r3, #2
 801bf46:	b29a      	uxth	r2, r3
 801bf48:	69bb      	ldr	r3, [r7, #24]
 801bf4a:	f7ff fbc9 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 801bf4e:	88bb      	ldrh	r3, [r7, #4]
 801bf50:	3302      	adds	r3, #2
 801bf52:	b298      	uxth	r0, r3
 801bf54:	79bb      	ldrb	r3, [r7, #6]
 801bf56:	b29b      	uxth	r3, r3
 801bf58:	005b      	lsls	r3, r3, #1
 801bf5a:	b29a      	uxth	r2, r3
 801bf5c:	887b      	ldrh	r3, [r7, #2]
 801bf5e:	4413      	add	r3, r2
 801bf60:	b29b      	uxth	r3, r3
 801bf62:	3b03      	subs	r3, #3
 801bf64:	b299      	uxth	r1, r3
 801bf66:	79bb      	ldrb	r3, [r7, #6]
 801bf68:	b29b      	uxth	r3, r3
 801bf6a:	3b04      	subs	r3, #4
 801bf6c:	b29a      	uxth	r2, r3
 801bf6e:	69bb      	ldr	r3, [r7, #24]
 801bf70:	f7ff fbb6 	bl	801b6e0 <HLine>
		// g
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 801bf74:	88bb      	ldrh	r3, [r7, #4]
 801bf76:	3301      	adds	r3, #1
 801bf78:	b298      	uxth	r0, r3
 801bf7a:	79bb      	ldrb	r3, [r7, #6]
 801bf7c:	b29a      	uxth	r2, r3
 801bf7e:	887b      	ldrh	r3, [r7, #2]
 801bf80:	4413      	add	r3, r2
 801bf82:	b29b      	uxth	r3, r3
 801bf84:	3b01      	subs	r3, #1
 801bf86:	b299      	uxth	r1, r3
 801bf88:	79bb      	ldrb	r3, [r7, #6]
 801bf8a:	b29b      	uxth	r3, r3
 801bf8c:	3b02      	subs	r3, #2
 801bf8e:	b29a      	uxth	r2, r3
 801bf90:	69bb      	ldr	r3, [r7, #24]
 801bf92:	f7ff fba5 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 801bf96:	88bb      	ldrh	r3, [r7, #4]
 801bf98:	3302      	adds	r3, #2
 801bf9a:	b298      	uxth	r0, r3
 801bf9c:	79bb      	ldrb	r3, [r7, #6]
 801bf9e:	b29a      	uxth	r2, r3
 801bfa0:	887b      	ldrh	r3, [r7, #2]
 801bfa2:	4413      	add	r3, r2
 801bfa4:	b29b      	uxth	r3, r3
 801bfa6:	3b02      	subs	r3, #2
 801bfa8:	b299      	uxth	r1, r3
 801bfaa:	79bb      	ldrb	r3, [r7, #6]
 801bfac:	b29b      	uxth	r3, r3
 801bfae:	3b04      	subs	r3, #4
 801bfb0:	b29a      	uxth	r2, r3
 801bfb2:	69bb      	ldr	r3, [r7, #24]
 801bfb4:	f7ff fb94 	bl	801b6e0 <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801bfb8:	79bb      	ldrb	r3, [r7, #6]
 801bfba:	b29a      	uxth	r2, r3
 801bfbc:	88bb      	ldrh	r3, [r7, #4]
 801bfbe:	4413      	add	r3, r2
 801bfc0:	b29b      	uxth	r3, r3
 801bfc2:	3b01      	subs	r3, #1
 801bfc4:	b298      	uxth	r0, r3
 801bfc6:	79bb      	ldrb	r3, [r7, #6]
 801bfc8:	b29a      	uxth	r2, r3
 801bfca:	887b      	ldrh	r3, [r7, #2]
 801bfcc:	4413      	add	r3, r2
 801bfce:	b299      	uxth	r1, r3
 801bfd0:	79bb      	ldrb	r3, [r7, #6]
 801bfd2:	b29b      	uxth	r3, r3
 801bfd4:	3b02      	subs	r3, #2
 801bfd6:	b29a      	uxth	r2, r3
 801bfd8:	69bb      	ldr	r3, [r7, #24]
 801bfda:	f7ff fb17 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801bfde:	79bb      	ldrb	r3, [r7, #6]
 801bfe0:	b29a      	uxth	r2, r3
 801bfe2:	88bb      	ldrh	r3, [r7, #4]
 801bfe4:	4413      	add	r3, r2
 801bfe6:	b29b      	uxth	r3, r3
 801bfe8:	3b02      	subs	r3, #2
 801bfea:	b298      	uxth	r0, r3
 801bfec:	79bb      	ldrb	r3, [r7, #6]
 801bfee:	b29a      	uxth	r2, r3
 801bff0:	887b      	ldrh	r3, [r7, #2]
 801bff2:	4413      	add	r3, r2
 801bff4:	b29b      	uxth	r3, r3
 801bff6:	3301      	adds	r3, #1
 801bff8:	b299      	uxth	r1, r3
 801bffa:	79bb      	ldrb	r3, [r7, #6]
 801bffc:	b29b      	uxth	r3, r3
 801bffe:	3b04      	subs	r3, #4
 801c000:	b29a      	uxth	r2, r3
 801c002:	69bb      	ldr	r3, [r7, #24]
 801c004:	f7ff fb02 	bl	801b60c <VLine>
		break;
 801c008:	e2c5      	b.n	801c596 <DrawDigit+0xcde>
	}
	case 6: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 801c00a:	88bb      	ldrh	r3, [r7, #4]
 801c00c:	3301      	adds	r3, #1
 801c00e:	b298      	uxth	r0, r3
 801c010:	79bb      	ldrb	r3, [r7, #6]
 801c012:	b29b      	uxth	r3, r3
 801c014:	3b02      	subs	r3, #2
 801c016:	b29a      	uxth	r2, r3
 801c018:	8879      	ldrh	r1, [r7, #2]
 801c01a:	69bb      	ldr	r3, [r7, #24]
 801c01c:	f7ff fb60 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801c020:	88bb      	ldrh	r3, [r7, #4]
 801c022:	3302      	adds	r3, #2
 801c024:	b298      	uxth	r0, r3
 801c026:	887b      	ldrh	r3, [r7, #2]
 801c028:	3301      	adds	r3, #1
 801c02a:	b299      	uxth	r1, r3
 801c02c:	79bb      	ldrb	r3, [r7, #6]
 801c02e:	b29b      	uxth	r3, r3
 801c030:	3b04      	subs	r3, #4
 801c032:	b29a      	uxth	r2, r3
 801c034:	69bb      	ldr	r3, [r7, #24]
 801c036:	f7ff fb53 	bl	801b6e0 <HLine>
		// f
		VLine(Xpos, Ypos + 1, width - 2, color);
 801c03a:	887b      	ldrh	r3, [r7, #2]
 801c03c:	3301      	adds	r3, #1
 801c03e:	b299      	uxth	r1, r3
 801c040:	79bb      	ldrb	r3, [r7, #6]
 801c042:	b29b      	uxth	r3, r3
 801c044:	3b02      	subs	r3, #2
 801c046:	b29a      	uxth	r2, r3
 801c048:	88b8      	ldrh	r0, [r7, #4]
 801c04a:	69bb      	ldr	r3, [r7, #24]
 801c04c:	f7ff fade 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 801c050:	88bb      	ldrh	r3, [r7, #4]
 801c052:	3301      	adds	r3, #1
 801c054:	b298      	uxth	r0, r3
 801c056:	887b      	ldrh	r3, [r7, #2]
 801c058:	3302      	adds	r3, #2
 801c05a:	b299      	uxth	r1, r3
 801c05c:	79bb      	ldrb	r3, [r7, #6]
 801c05e:	b29b      	uxth	r3, r3
 801c060:	3b04      	subs	r3, #4
 801c062:	b29a      	uxth	r2, r3
 801c064:	69bb      	ldr	r3, [r7, #24]
 801c066:	f7ff fad1 	bl	801b60c <VLine>
		// e
		VLine(Xpos, Ypos + width, width - 2, color);
 801c06a:	79bb      	ldrb	r3, [r7, #6]
 801c06c:	b29a      	uxth	r2, r3
 801c06e:	887b      	ldrh	r3, [r7, #2]
 801c070:	4413      	add	r3, r2
 801c072:	b299      	uxth	r1, r3
 801c074:	79bb      	ldrb	r3, [r7, #6]
 801c076:	b29b      	uxth	r3, r3
 801c078:	3b02      	subs	r3, #2
 801c07a:	b29a      	uxth	r2, r3
 801c07c:	88b8      	ldrh	r0, [r7, #4]
 801c07e:	69bb      	ldr	r3, [r7, #24]
 801c080:	f7ff fac4 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 801c084:	88bb      	ldrh	r3, [r7, #4]
 801c086:	3301      	adds	r3, #1
 801c088:	b298      	uxth	r0, r3
 801c08a:	79bb      	ldrb	r3, [r7, #6]
 801c08c:	b29a      	uxth	r2, r3
 801c08e:	887b      	ldrh	r3, [r7, #2]
 801c090:	4413      	add	r3, r2
 801c092:	b29b      	uxth	r3, r3
 801c094:	3301      	adds	r3, #1
 801c096:	b299      	uxth	r1, r3
 801c098:	79bb      	ldrb	r3, [r7, #6]
 801c09a:	b29b      	uxth	r3, r3
 801c09c:	3b04      	subs	r3, #4
 801c09e:	b29a      	uxth	r2, r3
 801c0a0:	69bb      	ldr	r3, [r7, #24]
 801c0a2:	f7ff fab3 	bl	801b60c <VLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 801c0a6:	88bb      	ldrh	r3, [r7, #4]
 801c0a8:	3301      	adds	r3, #1
 801c0aa:	b298      	uxth	r0, r3
 801c0ac:	79bb      	ldrb	r3, [r7, #6]
 801c0ae:	b29b      	uxth	r3, r3
 801c0b0:	005b      	lsls	r3, r3, #1
 801c0b2:	b29a      	uxth	r2, r3
 801c0b4:	887b      	ldrh	r3, [r7, #2]
 801c0b6:	4413      	add	r3, r2
 801c0b8:	b29b      	uxth	r3, r3
 801c0ba:	3b02      	subs	r3, #2
 801c0bc:	b299      	uxth	r1, r3
 801c0be:	79bb      	ldrb	r3, [r7, #6]
 801c0c0:	b29b      	uxth	r3, r3
 801c0c2:	3b02      	subs	r3, #2
 801c0c4:	b29a      	uxth	r2, r3
 801c0c6:	69bb      	ldr	r3, [r7, #24]
 801c0c8:	f7ff fb0a 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 801c0cc:	88bb      	ldrh	r3, [r7, #4]
 801c0ce:	3302      	adds	r3, #2
 801c0d0:	b298      	uxth	r0, r3
 801c0d2:	79bb      	ldrb	r3, [r7, #6]
 801c0d4:	b29b      	uxth	r3, r3
 801c0d6:	005b      	lsls	r3, r3, #1
 801c0d8:	b29a      	uxth	r2, r3
 801c0da:	887b      	ldrh	r3, [r7, #2]
 801c0dc:	4413      	add	r3, r2
 801c0de:	b29b      	uxth	r3, r3
 801c0e0:	3b03      	subs	r3, #3
 801c0e2:	b299      	uxth	r1, r3
 801c0e4:	79bb      	ldrb	r3, [r7, #6]
 801c0e6:	b29b      	uxth	r3, r3
 801c0e8:	3b04      	subs	r3, #4
 801c0ea:	b29a      	uxth	r2, r3
 801c0ec:	69bb      	ldr	r3, [r7, #24]
 801c0ee:	f7ff faf7 	bl	801b6e0 <HLine>
		// g
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 801c0f2:	88bb      	ldrh	r3, [r7, #4]
 801c0f4:	3301      	adds	r3, #1
 801c0f6:	b298      	uxth	r0, r3
 801c0f8:	79bb      	ldrb	r3, [r7, #6]
 801c0fa:	b29a      	uxth	r2, r3
 801c0fc:	887b      	ldrh	r3, [r7, #2]
 801c0fe:	4413      	add	r3, r2
 801c100:	b29b      	uxth	r3, r3
 801c102:	3b01      	subs	r3, #1
 801c104:	b299      	uxth	r1, r3
 801c106:	79bb      	ldrb	r3, [r7, #6]
 801c108:	b29b      	uxth	r3, r3
 801c10a:	3b02      	subs	r3, #2
 801c10c:	b29a      	uxth	r2, r3
 801c10e:	69bb      	ldr	r3, [r7, #24]
 801c110:	f7ff fae6 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 801c114:	88bb      	ldrh	r3, [r7, #4]
 801c116:	3302      	adds	r3, #2
 801c118:	b298      	uxth	r0, r3
 801c11a:	79bb      	ldrb	r3, [r7, #6]
 801c11c:	b29a      	uxth	r2, r3
 801c11e:	887b      	ldrh	r3, [r7, #2]
 801c120:	4413      	add	r3, r2
 801c122:	b29b      	uxth	r3, r3
 801c124:	3b02      	subs	r3, #2
 801c126:	b299      	uxth	r1, r3
 801c128:	79bb      	ldrb	r3, [r7, #6]
 801c12a:	b29b      	uxth	r3, r3
 801c12c:	3b04      	subs	r3, #4
 801c12e:	b29a      	uxth	r2, r3
 801c130:	69bb      	ldr	r3, [r7, #24]
 801c132:	f7ff fad5 	bl	801b6e0 <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801c136:	79bb      	ldrb	r3, [r7, #6]
 801c138:	b29a      	uxth	r2, r3
 801c13a:	88bb      	ldrh	r3, [r7, #4]
 801c13c:	4413      	add	r3, r2
 801c13e:	b29b      	uxth	r3, r3
 801c140:	3b01      	subs	r3, #1
 801c142:	b298      	uxth	r0, r3
 801c144:	79bb      	ldrb	r3, [r7, #6]
 801c146:	b29a      	uxth	r2, r3
 801c148:	887b      	ldrh	r3, [r7, #2]
 801c14a:	4413      	add	r3, r2
 801c14c:	b299      	uxth	r1, r3
 801c14e:	79bb      	ldrb	r3, [r7, #6]
 801c150:	b29b      	uxth	r3, r3
 801c152:	3b02      	subs	r3, #2
 801c154:	b29a      	uxth	r2, r3
 801c156:	69bb      	ldr	r3, [r7, #24]
 801c158:	f7ff fa58 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801c15c:	79bb      	ldrb	r3, [r7, #6]
 801c15e:	b29a      	uxth	r2, r3
 801c160:	88bb      	ldrh	r3, [r7, #4]
 801c162:	4413      	add	r3, r2
 801c164:	b29b      	uxth	r3, r3
 801c166:	3b02      	subs	r3, #2
 801c168:	b298      	uxth	r0, r3
 801c16a:	79bb      	ldrb	r3, [r7, #6]
 801c16c:	b29a      	uxth	r2, r3
 801c16e:	887b      	ldrh	r3, [r7, #2]
 801c170:	4413      	add	r3, r2
 801c172:	b29b      	uxth	r3, r3
 801c174:	3301      	adds	r3, #1
 801c176:	b299      	uxth	r1, r3
 801c178:	79bb      	ldrb	r3, [r7, #6]
 801c17a:	b29b      	uxth	r3, r3
 801c17c:	3b04      	subs	r3, #4
 801c17e:	b29a      	uxth	r2, r3
 801c180:	69bb      	ldr	r3, [r7, #24]
 801c182:	f7ff fa43 	bl	801b60c <VLine>
		break;
 801c186:	e206      	b.n	801c596 <DrawDigit+0xcde>
	}
	case 7: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 801c188:	88bb      	ldrh	r3, [r7, #4]
 801c18a:	3301      	adds	r3, #1
 801c18c:	b298      	uxth	r0, r3
 801c18e:	79bb      	ldrb	r3, [r7, #6]
 801c190:	b29b      	uxth	r3, r3
 801c192:	3b02      	subs	r3, #2
 801c194:	b29a      	uxth	r2, r3
 801c196:	8879      	ldrh	r1, [r7, #2]
 801c198:	69bb      	ldr	r3, [r7, #24]
 801c19a:	f7ff faa1 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801c19e:	88bb      	ldrh	r3, [r7, #4]
 801c1a0:	3302      	adds	r3, #2
 801c1a2:	b298      	uxth	r0, r3
 801c1a4:	887b      	ldrh	r3, [r7, #2]
 801c1a6:	3301      	adds	r3, #1
 801c1a8:	b299      	uxth	r1, r3
 801c1aa:	79bb      	ldrb	r3, [r7, #6]
 801c1ac:	b29b      	uxth	r3, r3
 801c1ae:	3b04      	subs	r3, #4
 801c1b0:	b29a      	uxth	r2, r3
 801c1b2:	69bb      	ldr	r3, [r7, #24]
 801c1b4:	f7ff fa94 	bl	801b6e0 <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801c1b8:	79bb      	ldrb	r3, [r7, #6]
 801c1ba:	b29a      	uxth	r2, r3
 801c1bc:	88bb      	ldrh	r3, [r7, #4]
 801c1be:	4413      	add	r3, r2
 801c1c0:	b29b      	uxth	r3, r3
 801c1c2:	3b01      	subs	r3, #1
 801c1c4:	b298      	uxth	r0, r3
 801c1c6:	79bb      	ldrb	r3, [r7, #6]
 801c1c8:	b29a      	uxth	r2, r3
 801c1ca:	887b      	ldrh	r3, [r7, #2]
 801c1cc:	4413      	add	r3, r2
 801c1ce:	b299      	uxth	r1, r3
 801c1d0:	79bb      	ldrb	r3, [r7, #6]
 801c1d2:	b29b      	uxth	r3, r3
 801c1d4:	3b02      	subs	r3, #2
 801c1d6:	b29a      	uxth	r2, r3
 801c1d8:	69bb      	ldr	r3, [r7, #24]
 801c1da:	f7ff fa17 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801c1de:	79bb      	ldrb	r3, [r7, #6]
 801c1e0:	b29a      	uxth	r2, r3
 801c1e2:	88bb      	ldrh	r3, [r7, #4]
 801c1e4:	4413      	add	r3, r2
 801c1e6:	b29b      	uxth	r3, r3
 801c1e8:	3b02      	subs	r3, #2
 801c1ea:	b298      	uxth	r0, r3
 801c1ec:	79bb      	ldrb	r3, [r7, #6]
 801c1ee:	b29a      	uxth	r2, r3
 801c1f0:	887b      	ldrh	r3, [r7, #2]
 801c1f2:	4413      	add	r3, r2
 801c1f4:	b29b      	uxth	r3, r3
 801c1f6:	3301      	adds	r3, #1
 801c1f8:	b299      	uxth	r1, r3
 801c1fa:	79bb      	ldrb	r3, [r7, #6]
 801c1fc:	b29b      	uxth	r3, r3
 801c1fe:	3b04      	subs	r3, #4
 801c200:	b29a      	uxth	r2, r3
 801c202:	69bb      	ldr	r3, [r7, #24]
 801c204:	f7ff fa02 	bl	801b60c <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801c208:	79bb      	ldrb	r3, [r7, #6]
 801c20a:	b29a      	uxth	r2, r3
 801c20c:	88bb      	ldrh	r3, [r7, #4]
 801c20e:	4413      	add	r3, r2
 801c210:	b29b      	uxth	r3, r3
 801c212:	3b01      	subs	r3, #1
 801c214:	b298      	uxth	r0, r3
 801c216:	887b      	ldrh	r3, [r7, #2]
 801c218:	3301      	adds	r3, #1
 801c21a:	b299      	uxth	r1, r3
 801c21c:	79bb      	ldrb	r3, [r7, #6]
 801c21e:	b29b      	uxth	r3, r3
 801c220:	3b02      	subs	r3, #2
 801c222:	b29a      	uxth	r2, r3
 801c224:	69bb      	ldr	r3, [r7, #24]
 801c226:	f7ff f9f1 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801c22a:	79bb      	ldrb	r3, [r7, #6]
 801c22c:	b29a      	uxth	r2, r3
 801c22e:	88bb      	ldrh	r3, [r7, #4]
 801c230:	4413      	add	r3, r2
 801c232:	b29b      	uxth	r3, r3
 801c234:	3b02      	subs	r3, #2
 801c236:	b298      	uxth	r0, r3
 801c238:	887b      	ldrh	r3, [r7, #2]
 801c23a:	3302      	adds	r3, #2
 801c23c:	b299      	uxth	r1, r3
 801c23e:	79bb      	ldrb	r3, [r7, #6]
 801c240:	b29b      	uxth	r3, r3
 801c242:	3b04      	subs	r3, #4
 801c244:	b29a      	uxth	r2, r3
 801c246:	69bb      	ldr	r3, [r7, #24]
 801c248:	f7ff f9e0 	bl	801b60c <VLine>
		break;
 801c24c:	e1a3      	b.n	801c596 <DrawDigit+0xcde>
	}
	case 8: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 801c24e:	88bb      	ldrh	r3, [r7, #4]
 801c250:	3301      	adds	r3, #1
 801c252:	b298      	uxth	r0, r3
 801c254:	79bb      	ldrb	r3, [r7, #6]
 801c256:	b29b      	uxth	r3, r3
 801c258:	3b02      	subs	r3, #2
 801c25a:	b29a      	uxth	r2, r3
 801c25c:	8879      	ldrh	r1, [r7, #2]
 801c25e:	69bb      	ldr	r3, [r7, #24]
 801c260:	f7ff fa3e 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801c264:	88bb      	ldrh	r3, [r7, #4]
 801c266:	3302      	adds	r3, #2
 801c268:	b298      	uxth	r0, r3
 801c26a:	887b      	ldrh	r3, [r7, #2]
 801c26c:	3301      	adds	r3, #1
 801c26e:	b299      	uxth	r1, r3
 801c270:	79bb      	ldrb	r3, [r7, #6]
 801c272:	b29b      	uxth	r3, r3
 801c274:	3b04      	subs	r3, #4
 801c276:	b29a      	uxth	r2, r3
 801c278:	69bb      	ldr	r3, [r7, #24]
 801c27a:	f7ff fa31 	bl	801b6e0 <HLine>
		// f
		VLine(Xpos, Ypos + 1, width - 2, color);
 801c27e:	887b      	ldrh	r3, [r7, #2]
 801c280:	3301      	adds	r3, #1
 801c282:	b299      	uxth	r1, r3
 801c284:	79bb      	ldrb	r3, [r7, #6]
 801c286:	b29b      	uxth	r3, r3
 801c288:	3b02      	subs	r3, #2
 801c28a:	b29a      	uxth	r2, r3
 801c28c:	88b8      	ldrh	r0, [r7, #4]
 801c28e:	69bb      	ldr	r3, [r7, #24]
 801c290:	f7ff f9bc 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 801c294:	88bb      	ldrh	r3, [r7, #4]
 801c296:	3301      	adds	r3, #1
 801c298:	b298      	uxth	r0, r3
 801c29a:	887b      	ldrh	r3, [r7, #2]
 801c29c:	3302      	adds	r3, #2
 801c29e:	b299      	uxth	r1, r3
 801c2a0:	79bb      	ldrb	r3, [r7, #6]
 801c2a2:	b29b      	uxth	r3, r3
 801c2a4:	3b04      	subs	r3, #4
 801c2a6:	b29a      	uxth	r2, r3
 801c2a8:	69bb      	ldr	r3, [r7, #24]
 801c2aa:	f7ff f9af 	bl	801b60c <VLine>
		// e
		VLine(Xpos, Ypos + width, width - 2, color);
 801c2ae:	79bb      	ldrb	r3, [r7, #6]
 801c2b0:	b29a      	uxth	r2, r3
 801c2b2:	887b      	ldrh	r3, [r7, #2]
 801c2b4:	4413      	add	r3, r2
 801c2b6:	b299      	uxth	r1, r3
 801c2b8:	79bb      	ldrb	r3, [r7, #6]
 801c2ba:	b29b      	uxth	r3, r3
 801c2bc:	3b02      	subs	r3, #2
 801c2be:	b29a      	uxth	r2, r3
 801c2c0:	88b8      	ldrh	r0, [r7, #4]
 801c2c2:	69bb      	ldr	r3, [r7, #24]
 801c2c4:	f7ff f9a2 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 801c2c8:	88bb      	ldrh	r3, [r7, #4]
 801c2ca:	3301      	adds	r3, #1
 801c2cc:	b298      	uxth	r0, r3
 801c2ce:	79bb      	ldrb	r3, [r7, #6]
 801c2d0:	b29a      	uxth	r2, r3
 801c2d2:	887b      	ldrh	r3, [r7, #2]
 801c2d4:	4413      	add	r3, r2
 801c2d6:	b29b      	uxth	r3, r3
 801c2d8:	3301      	adds	r3, #1
 801c2da:	b299      	uxth	r1, r3
 801c2dc:	79bb      	ldrb	r3, [r7, #6]
 801c2de:	b29b      	uxth	r3, r3
 801c2e0:	3b04      	subs	r3, #4
 801c2e2:	b29a      	uxth	r2, r3
 801c2e4:	69bb      	ldr	r3, [r7, #24]
 801c2e6:	f7ff f991 	bl	801b60c <VLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 801c2ea:	88bb      	ldrh	r3, [r7, #4]
 801c2ec:	3301      	adds	r3, #1
 801c2ee:	b298      	uxth	r0, r3
 801c2f0:	79bb      	ldrb	r3, [r7, #6]
 801c2f2:	b29b      	uxth	r3, r3
 801c2f4:	005b      	lsls	r3, r3, #1
 801c2f6:	b29a      	uxth	r2, r3
 801c2f8:	887b      	ldrh	r3, [r7, #2]
 801c2fa:	4413      	add	r3, r2
 801c2fc:	b29b      	uxth	r3, r3
 801c2fe:	3b02      	subs	r3, #2
 801c300:	b299      	uxth	r1, r3
 801c302:	79bb      	ldrb	r3, [r7, #6]
 801c304:	b29b      	uxth	r3, r3
 801c306:	3b02      	subs	r3, #2
 801c308:	b29a      	uxth	r2, r3
 801c30a:	69bb      	ldr	r3, [r7, #24]
 801c30c:	f7ff f9e8 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 801c310:	88bb      	ldrh	r3, [r7, #4]
 801c312:	3302      	adds	r3, #2
 801c314:	b298      	uxth	r0, r3
 801c316:	79bb      	ldrb	r3, [r7, #6]
 801c318:	b29b      	uxth	r3, r3
 801c31a:	005b      	lsls	r3, r3, #1
 801c31c:	b29a      	uxth	r2, r3
 801c31e:	887b      	ldrh	r3, [r7, #2]
 801c320:	4413      	add	r3, r2
 801c322:	b29b      	uxth	r3, r3
 801c324:	3b03      	subs	r3, #3
 801c326:	b299      	uxth	r1, r3
 801c328:	79bb      	ldrb	r3, [r7, #6]
 801c32a:	b29b      	uxth	r3, r3
 801c32c:	3b04      	subs	r3, #4
 801c32e:	b29a      	uxth	r2, r3
 801c330:	69bb      	ldr	r3, [r7, #24]
 801c332:	f7ff f9d5 	bl	801b6e0 <HLine>
		// g
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 801c336:	88bb      	ldrh	r3, [r7, #4]
 801c338:	3301      	adds	r3, #1
 801c33a:	b298      	uxth	r0, r3
 801c33c:	79bb      	ldrb	r3, [r7, #6]
 801c33e:	b29a      	uxth	r2, r3
 801c340:	887b      	ldrh	r3, [r7, #2]
 801c342:	4413      	add	r3, r2
 801c344:	b29b      	uxth	r3, r3
 801c346:	3b01      	subs	r3, #1
 801c348:	b299      	uxth	r1, r3
 801c34a:	79bb      	ldrb	r3, [r7, #6]
 801c34c:	b29b      	uxth	r3, r3
 801c34e:	3b02      	subs	r3, #2
 801c350:	b29a      	uxth	r2, r3
 801c352:	69bb      	ldr	r3, [r7, #24]
 801c354:	f7ff f9c4 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 801c358:	88bb      	ldrh	r3, [r7, #4]
 801c35a:	3302      	adds	r3, #2
 801c35c:	b298      	uxth	r0, r3
 801c35e:	79bb      	ldrb	r3, [r7, #6]
 801c360:	b29a      	uxth	r2, r3
 801c362:	887b      	ldrh	r3, [r7, #2]
 801c364:	4413      	add	r3, r2
 801c366:	b29b      	uxth	r3, r3
 801c368:	3b02      	subs	r3, #2
 801c36a:	b299      	uxth	r1, r3
 801c36c:	79bb      	ldrb	r3, [r7, #6]
 801c36e:	b29b      	uxth	r3, r3
 801c370:	3b04      	subs	r3, #4
 801c372:	b29a      	uxth	r2, r3
 801c374:	69bb      	ldr	r3, [r7, #24]
 801c376:	f7ff f9b3 	bl	801b6e0 <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801c37a:	79bb      	ldrb	r3, [r7, #6]
 801c37c:	b29a      	uxth	r2, r3
 801c37e:	88bb      	ldrh	r3, [r7, #4]
 801c380:	4413      	add	r3, r2
 801c382:	b29b      	uxth	r3, r3
 801c384:	3b01      	subs	r3, #1
 801c386:	b298      	uxth	r0, r3
 801c388:	79bb      	ldrb	r3, [r7, #6]
 801c38a:	b29a      	uxth	r2, r3
 801c38c:	887b      	ldrh	r3, [r7, #2]
 801c38e:	4413      	add	r3, r2
 801c390:	b299      	uxth	r1, r3
 801c392:	79bb      	ldrb	r3, [r7, #6]
 801c394:	b29b      	uxth	r3, r3
 801c396:	3b02      	subs	r3, #2
 801c398:	b29a      	uxth	r2, r3
 801c39a:	69bb      	ldr	r3, [r7, #24]
 801c39c:	f7ff f936 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801c3a0:	79bb      	ldrb	r3, [r7, #6]
 801c3a2:	b29a      	uxth	r2, r3
 801c3a4:	88bb      	ldrh	r3, [r7, #4]
 801c3a6:	4413      	add	r3, r2
 801c3a8:	b29b      	uxth	r3, r3
 801c3aa:	3b02      	subs	r3, #2
 801c3ac:	b298      	uxth	r0, r3
 801c3ae:	79bb      	ldrb	r3, [r7, #6]
 801c3b0:	b29a      	uxth	r2, r3
 801c3b2:	887b      	ldrh	r3, [r7, #2]
 801c3b4:	4413      	add	r3, r2
 801c3b6:	b29b      	uxth	r3, r3
 801c3b8:	3301      	adds	r3, #1
 801c3ba:	b299      	uxth	r1, r3
 801c3bc:	79bb      	ldrb	r3, [r7, #6]
 801c3be:	b29b      	uxth	r3, r3
 801c3c0:	3b04      	subs	r3, #4
 801c3c2:	b29a      	uxth	r2, r3
 801c3c4:	69bb      	ldr	r3, [r7, #24]
 801c3c6:	f7ff f921 	bl	801b60c <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801c3ca:	79bb      	ldrb	r3, [r7, #6]
 801c3cc:	b29a      	uxth	r2, r3
 801c3ce:	88bb      	ldrh	r3, [r7, #4]
 801c3d0:	4413      	add	r3, r2
 801c3d2:	b29b      	uxth	r3, r3
 801c3d4:	3b01      	subs	r3, #1
 801c3d6:	b298      	uxth	r0, r3
 801c3d8:	887b      	ldrh	r3, [r7, #2]
 801c3da:	3301      	adds	r3, #1
 801c3dc:	b299      	uxth	r1, r3
 801c3de:	79bb      	ldrb	r3, [r7, #6]
 801c3e0:	b29b      	uxth	r3, r3
 801c3e2:	3b02      	subs	r3, #2
 801c3e4:	b29a      	uxth	r2, r3
 801c3e6:	69bb      	ldr	r3, [r7, #24]
 801c3e8:	f7ff f910 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801c3ec:	79bb      	ldrb	r3, [r7, #6]
 801c3ee:	b29a      	uxth	r2, r3
 801c3f0:	88bb      	ldrh	r3, [r7, #4]
 801c3f2:	4413      	add	r3, r2
 801c3f4:	b29b      	uxth	r3, r3
 801c3f6:	3b02      	subs	r3, #2
 801c3f8:	b298      	uxth	r0, r3
 801c3fa:	887b      	ldrh	r3, [r7, #2]
 801c3fc:	3302      	adds	r3, #2
 801c3fe:	b299      	uxth	r1, r3
 801c400:	79bb      	ldrb	r3, [r7, #6]
 801c402:	b29b      	uxth	r3, r3
 801c404:	3b04      	subs	r3, #4
 801c406:	b29a      	uxth	r2, r3
 801c408:	69bb      	ldr	r3, [r7, #24]
 801c40a:	f7ff f8ff 	bl	801b60c <VLine>
		break;
 801c40e:	e0c2      	b.n	801c596 <DrawDigit+0xcde>
	}
	case 9: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 801c410:	88bb      	ldrh	r3, [r7, #4]
 801c412:	3301      	adds	r3, #1
 801c414:	b298      	uxth	r0, r3
 801c416:	79bb      	ldrb	r3, [r7, #6]
 801c418:	b29b      	uxth	r3, r3
 801c41a:	3b02      	subs	r3, #2
 801c41c:	b29a      	uxth	r2, r3
 801c41e:	8879      	ldrh	r1, [r7, #2]
 801c420:	69bb      	ldr	r3, [r7, #24]
 801c422:	f7ff f95d 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801c426:	88bb      	ldrh	r3, [r7, #4]
 801c428:	3302      	adds	r3, #2
 801c42a:	b298      	uxth	r0, r3
 801c42c:	887b      	ldrh	r3, [r7, #2]
 801c42e:	3301      	adds	r3, #1
 801c430:	b299      	uxth	r1, r3
 801c432:	79bb      	ldrb	r3, [r7, #6]
 801c434:	b29b      	uxth	r3, r3
 801c436:	3b04      	subs	r3, #4
 801c438:	b29a      	uxth	r2, r3
 801c43a:	69bb      	ldr	r3, [r7, #24]
 801c43c:	f7ff f950 	bl	801b6e0 <HLine>
		// f
		VLine(Xpos, Ypos + 1, width - 2, color);
 801c440:	887b      	ldrh	r3, [r7, #2]
 801c442:	3301      	adds	r3, #1
 801c444:	b299      	uxth	r1, r3
 801c446:	79bb      	ldrb	r3, [r7, #6]
 801c448:	b29b      	uxth	r3, r3
 801c44a:	3b02      	subs	r3, #2
 801c44c:	b29a      	uxth	r2, r3
 801c44e:	88b8      	ldrh	r0, [r7, #4]
 801c450:	69bb      	ldr	r3, [r7, #24]
 801c452:	f7ff f8db 	bl	801b60c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 801c456:	88bb      	ldrh	r3, [r7, #4]
 801c458:	3301      	adds	r3, #1
 801c45a:	b298      	uxth	r0, r3
 801c45c:	887b      	ldrh	r3, [r7, #2]
 801c45e:	3302      	adds	r3, #2
 801c460:	b299      	uxth	r1, r3
 801c462:	79bb      	ldrb	r3, [r7, #6]
 801c464:	b29b      	uxth	r3, r3
 801c466:	3b04      	subs	r3, #4
 801c468:	b29a      	uxth	r2, r3
 801c46a:	69bb      	ldr	r3, [r7, #24]
 801c46c:	f7ff f8ce 	bl	801b60c <VLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 801c470:	88bb      	ldrh	r3, [r7, #4]
 801c472:	3301      	adds	r3, #1
 801c474:	b298      	uxth	r0, r3
 801c476:	79bb      	ldrb	r3, [r7, #6]
 801c478:	b29b      	uxth	r3, r3
 801c47a:	005b      	lsls	r3, r3, #1
 801c47c:	b29a      	uxth	r2, r3
 801c47e:	887b      	ldrh	r3, [r7, #2]
 801c480:	4413      	add	r3, r2
 801c482:	b29b      	uxth	r3, r3
 801c484:	3b02      	subs	r3, #2
 801c486:	b299      	uxth	r1, r3
 801c488:	79bb      	ldrb	r3, [r7, #6]
 801c48a:	b29b      	uxth	r3, r3
 801c48c:	3b02      	subs	r3, #2
 801c48e:	b29a      	uxth	r2, r3
 801c490:	69bb      	ldr	r3, [r7, #24]
 801c492:	f7ff f925 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 801c496:	88bb      	ldrh	r3, [r7, #4]
 801c498:	3302      	adds	r3, #2
 801c49a:	b298      	uxth	r0, r3
 801c49c:	79bb      	ldrb	r3, [r7, #6]
 801c49e:	b29b      	uxth	r3, r3
 801c4a0:	005b      	lsls	r3, r3, #1
 801c4a2:	b29a      	uxth	r2, r3
 801c4a4:	887b      	ldrh	r3, [r7, #2]
 801c4a6:	4413      	add	r3, r2
 801c4a8:	b29b      	uxth	r3, r3
 801c4aa:	3b03      	subs	r3, #3
 801c4ac:	b299      	uxth	r1, r3
 801c4ae:	79bb      	ldrb	r3, [r7, #6]
 801c4b0:	b29b      	uxth	r3, r3
 801c4b2:	3b04      	subs	r3, #4
 801c4b4:	b29a      	uxth	r2, r3
 801c4b6:	69bb      	ldr	r3, [r7, #24]
 801c4b8:	f7ff f912 	bl	801b6e0 <HLine>
		// g
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 801c4bc:	88bb      	ldrh	r3, [r7, #4]
 801c4be:	3301      	adds	r3, #1
 801c4c0:	b298      	uxth	r0, r3
 801c4c2:	79bb      	ldrb	r3, [r7, #6]
 801c4c4:	b29a      	uxth	r2, r3
 801c4c6:	887b      	ldrh	r3, [r7, #2]
 801c4c8:	4413      	add	r3, r2
 801c4ca:	b29b      	uxth	r3, r3
 801c4cc:	3b01      	subs	r3, #1
 801c4ce:	b299      	uxth	r1, r3
 801c4d0:	79bb      	ldrb	r3, [r7, #6]
 801c4d2:	b29b      	uxth	r3, r3
 801c4d4:	3b02      	subs	r3, #2
 801c4d6:	b29a      	uxth	r2, r3
 801c4d8:	69bb      	ldr	r3, [r7, #24]
 801c4da:	f7ff f901 	bl	801b6e0 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 801c4de:	88bb      	ldrh	r3, [r7, #4]
 801c4e0:	3302      	adds	r3, #2
 801c4e2:	b298      	uxth	r0, r3
 801c4e4:	79bb      	ldrb	r3, [r7, #6]
 801c4e6:	b29a      	uxth	r2, r3
 801c4e8:	887b      	ldrh	r3, [r7, #2]
 801c4ea:	4413      	add	r3, r2
 801c4ec:	b29b      	uxth	r3, r3
 801c4ee:	3b02      	subs	r3, #2
 801c4f0:	b299      	uxth	r1, r3
 801c4f2:	79bb      	ldrb	r3, [r7, #6]
 801c4f4:	b29b      	uxth	r3, r3
 801c4f6:	3b04      	subs	r3, #4
 801c4f8:	b29a      	uxth	r2, r3
 801c4fa:	69bb      	ldr	r3, [r7, #24]
 801c4fc:	f7ff f8f0 	bl	801b6e0 <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801c500:	79bb      	ldrb	r3, [r7, #6]
 801c502:	b29a      	uxth	r2, r3
 801c504:	88bb      	ldrh	r3, [r7, #4]
 801c506:	4413      	add	r3, r2
 801c508:	b29b      	uxth	r3, r3
 801c50a:	3b01      	subs	r3, #1
 801c50c:	b298      	uxth	r0, r3
 801c50e:	79bb      	ldrb	r3, [r7, #6]
 801c510:	b29a      	uxth	r2, r3
 801c512:	887b      	ldrh	r3, [r7, #2]
 801c514:	4413      	add	r3, r2
 801c516:	b299      	uxth	r1, r3
 801c518:	79bb      	ldrb	r3, [r7, #6]
 801c51a:	b29b      	uxth	r3, r3
 801c51c:	3b02      	subs	r3, #2
 801c51e:	b29a      	uxth	r2, r3
 801c520:	69bb      	ldr	r3, [r7, #24]
 801c522:	f7ff f873 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801c526:	79bb      	ldrb	r3, [r7, #6]
 801c528:	b29a      	uxth	r2, r3
 801c52a:	88bb      	ldrh	r3, [r7, #4]
 801c52c:	4413      	add	r3, r2
 801c52e:	b29b      	uxth	r3, r3
 801c530:	3b02      	subs	r3, #2
 801c532:	b298      	uxth	r0, r3
 801c534:	79bb      	ldrb	r3, [r7, #6]
 801c536:	b29a      	uxth	r2, r3
 801c538:	887b      	ldrh	r3, [r7, #2]
 801c53a:	4413      	add	r3, r2
 801c53c:	b29b      	uxth	r3, r3
 801c53e:	3301      	adds	r3, #1
 801c540:	b299      	uxth	r1, r3
 801c542:	79bb      	ldrb	r3, [r7, #6]
 801c544:	b29b      	uxth	r3, r3
 801c546:	3b04      	subs	r3, #4
 801c548:	b29a      	uxth	r2, r3
 801c54a:	69bb      	ldr	r3, [r7, #24]
 801c54c:	f7ff f85e 	bl	801b60c <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801c550:	79bb      	ldrb	r3, [r7, #6]
 801c552:	b29a      	uxth	r2, r3
 801c554:	88bb      	ldrh	r3, [r7, #4]
 801c556:	4413      	add	r3, r2
 801c558:	b29b      	uxth	r3, r3
 801c55a:	3b01      	subs	r3, #1
 801c55c:	b298      	uxth	r0, r3
 801c55e:	887b      	ldrh	r3, [r7, #2]
 801c560:	3301      	adds	r3, #1
 801c562:	b299      	uxth	r1, r3
 801c564:	79bb      	ldrb	r3, [r7, #6]
 801c566:	b29b      	uxth	r3, r3
 801c568:	3b02      	subs	r3, #2
 801c56a:	b29a      	uxth	r2, r3
 801c56c:	69bb      	ldr	r3, [r7, #24]
 801c56e:	f7ff f84d 	bl	801b60c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801c572:	79bb      	ldrb	r3, [r7, #6]
 801c574:	b29a      	uxth	r2, r3
 801c576:	88bb      	ldrh	r3, [r7, #4]
 801c578:	4413      	add	r3, r2
 801c57a:	b29b      	uxth	r3, r3
 801c57c:	3b02      	subs	r3, #2
 801c57e:	b298      	uxth	r0, r3
 801c580:	887b      	ldrh	r3, [r7, #2]
 801c582:	3302      	adds	r3, #2
 801c584:	b299      	uxth	r1, r3
 801c586:	79bb      	ldrb	r3, [r7, #6]
 801c588:	b29b      	uxth	r3, r3
 801c58a:	3b04      	subs	r3, #4
 801c58c:	b29a      	uxth	r2, r3
 801c58e:	69bb      	ldr	r3, [r7, #24]
 801c590:	f7ff f83c 	bl	801b60c <VLine>
		break;
 801c594:	bf00      	nop
	}
	}
}
 801c596:	bf00      	nop
 801c598:	370c      	adds	r7, #12
 801c59a:	46bd      	mov	sp, r7
 801c59c:	bd90      	pop	{r4, r7, pc}
 801c59e:	bf00      	nop

0801c5a0 <DrawString>:

void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
{
 801c5a0:	b590      	push	{r4, r7, lr}
 801c5a2:	b08b      	sub	sp, #44	; 0x2c
 801c5a4:	af02      	add	r7, sp, #8
 801c5a6:	60f8      	str	r0, [r7, #12]
 801c5a8:	607b      	str	r3, [r7, #4]
 801c5aa:	460b      	mov	r3, r1
 801c5ac:	817b      	strh	r3, [r7, #10]
 801c5ae:	4613      	mov	r3, r2
 801c5b0:	813b      	strh	r3, [r7, #8]
	hdma2d.Init.Mode = DMA2D_R2M;
 801c5b2:	4baa      	ldr	r3, [pc, #680]	; (801c85c <DrawString+0x2bc>)
 801c5b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801c5b8:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 801c5ba:	4ba8      	ldr	r3, [pc, #672]	; (801c85c <DrawString+0x2bc>)
 801c5bc:	2202      	movs	r2, #2
 801c5be:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = Xpos;
 801c5c0:	897b      	ldrh	r3, [r7, #10]
 801c5c2:	4aa6      	ldr	r2, [pc, #664]	; (801c85c <DrawString+0x2bc>)
 801c5c4:	60d3      	str	r3, [r2, #12]
	hdma2d.Instance = DMA2D;
 801c5c6:	4ba5      	ldr	r3, [pc, #660]	; (801c85c <DrawString+0x2bc>)
 801c5c8:	4aa5      	ldr	r2, [pc, #660]	; (801c860 <DrawString+0x2c0>)
 801c5ca:	601a      	str	r2, [r3, #0]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c5cc:	48a3      	ldr	r0, [pc, #652]	; (801c85c <DrawString+0x2bc>)
 801c5ce:	f7e5 fdb7 	bl	8002140 <HAL_DMA2D_Init>
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d130      	bne.n	801c63a <DrawString+0x9a>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK)
 801c5d8:	4ba2      	ldr	r3, [pc, #648]	; (801c864 <DrawString+0x2c4>)
 801c5da:	781b      	ldrb	r3, [r3, #0]
 801c5dc:	4619      	mov	r1, r3
 801c5de:	489f      	ldr	r0, [pc, #636]	; (801c85c <DrawString+0x2bc>)
 801c5e0:	f7e5 ff66 	bl	80024b0 <HAL_DMA2D_ConfigLayer>
 801c5e4:	4603      	mov	r3, r0
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d127      	bne.n	801c63a <DrawString+0x9a>
		{
			if (HAL_DMA2D_Start(&hdma2d, fontcolor, hltdc.LayerCfg[ActiveLayer].FBStartAdress + 2*(480*(Ypos-20)+Xpos),
 801c5ea:	4b9e      	ldr	r3, [pc, #632]	; (801c864 <DrawString+0x2c4>)
 801c5ec:	781b      	ldrb	r3, [r3, #0]
 801c5ee:	4619      	mov	r1, r3
 801c5f0:	4a9d      	ldr	r2, [pc, #628]	; (801c868 <DrawString+0x2c8>)
 801c5f2:	2334      	movs	r3, #52	; 0x34
 801c5f4:	fb01 f303 	mul.w	r3, r1, r3
 801c5f8:	4413      	add	r3, r2
 801c5fa:	335c      	adds	r3, #92	; 0x5c
 801c5fc:	6819      	ldr	r1, [r3, #0]
 801c5fe:	893b      	ldrh	r3, [r7, #8]
 801c600:	f1a3 0214 	sub.w	r2, r3, #20
 801c604:	4613      	mov	r3, r2
 801c606:	011b      	lsls	r3, r3, #4
 801c608:	1a9b      	subs	r3, r3, r2
 801c60a:	015b      	lsls	r3, r3, #5
 801c60c:	461a      	mov	r2, r3
 801c60e:	897b      	ldrh	r3, [r7, #10]
 801c610:	4413      	add	r3, r2
 801c612:	005b      	lsls	r3, r3, #1
 801c614:	18ca      	adds	r2, r1, r3
					480-Xpos, 20) == HAL_OK)
 801c616:	897b      	ldrh	r3, [r7, #10]
 801c618:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
			if (HAL_DMA2D_Start(&hdma2d, fontcolor, hltdc.LayerCfg[ActiveLayer].FBStartAdress + 2*(480*(Ypos-20)+Xpos),
 801c61c:	4619      	mov	r1, r3
 801c61e:	2314      	movs	r3, #20
 801c620:	9300      	str	r3, [sp, #0]
 801c622:	460b      	mov	r3, r1
 801c624:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c626:	488d      	ldr	r0, [pc, #564]	; (801c85c <DrawString+0x2bc>)
 801c628:	f7e5 fe18 	bl	800225c <HAL_DMA2D_Start>
 801c62c:	4603      	mov	r3, r0
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d103      	bne.n	801c63a <DrawString+0x9a>
			{
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801c632:	210a      	movs	r1, #10
 801c634:	4889      	ldr	r0, [pc, #548]	; (801c85c <DrawString+0x2bc>)
 801c636:	f7e5 fe51 	bl	80022dc <HAL_DMA2D_PollForTransfer>
			}
		}
	}
	int xpos = Xpos + 5;
 801c63a:	897b      	ldrh	r3, [r7, #10]
 801c63c:	3305      	adds	r3, #5
 801c63e:	61fb      	str	r3, [r7, #28]
	Ypos -= 4;
 801c640:	893b      	ldrh	r3, [r7, #8]
 801c642:	3b04      	subs	r3, #4
 801c644:	813b      	strh	r3, [r7, #8]
	uint16_t k = 0;
 801c646:	2300      	movs	r3, #0
 801c648:	837b      	strh	r3, [r7, #26]
	int i = 0;
 801c64a:	2300      	movs	r3, #0
 801c64c:	617b      	str	r3, [r7, #20]
	int l = 0;
 801c64e:	2300      	movs	r3, #0
 801c650:	613b      	str	r3, [r7, #16]
	while(str[l] != 0) {
 801c652:	e17f      	b.n	801c954 <DrawString+0x3b4>
		if((str[l] > 32) && (str[l] < 128)) {
 801c654:	693b      	ldr	r3, [r7, #16]
 801c656:	68fa      	ldr	r2, [r7, #12]
 801c658:	4413      	add	r3, r2
 801c65a:	781b      	ldrb	r3, [r3, #0]
 801c65c:	2b20      	cmp	r3, #32
 801c65e:	f240 80b1 	bls.w	801c7c4 <DrawString+0x224>
 801c662:	693b      	ldr	r3, [r7, #16]
 801c664:	68fa      	ldr	r2, [r7, #12]
 801c666:	4413      	add	r3, r2
 801c668:	781b      	ldrb	r3, [r3, #0]
 801c66a:	b25b      	sxtb	r3, r3
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	f2c0 80a9 	blt.w	801c7c4 <DrawString+0x224>
			i = 0;
 801c672:	2300      	movs	r3, #0
 801c674:	617b      	str	r3, [r7, #20]
			do {
				k = 0;
 801c676:	2300      	movs	r3, #0
 801c678:	837b      	strh	r3, [r7, #26]
				if(xpos < 470) {
 801c67a:	69fb      	ldr	r3, [r7, #28]
 801c67c:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 801c680:	da68      	bge.n	801c754 <DrawString+0x1b4>
					while(k < 13) {
 801c682:	e064      	b.n	801c74e <DrawString+0x1ae>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 801c684:	693b      	ldr	r3, [r7, #16]
 801c686:	68fa      	ldr	r2, [r7, #12]
 801c688:	4413      	add	r3, r2
 801c68a:	781b      	ldrb	r3, [r3, #0]
 801c68c:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 801c690:	4613      	mov	r3, r2
 801c692:	005b      	lsls	r3, r3, #1
 801c694:	4413      	add	r3, r2
 801c696:	009b      	lsls	r3, r3, #2
 801c698:	461a      	mov	r2, r3
 801c69a:	697b      	ldr	r3, [r7, #20]
 801c69c:	4413      	add	r3, r2
 801c69e:	4a73      	ldr	r2, [pc, #460]	; (801c86c <DrawString+0x2cc>)
 801c6a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c6a4:	461a      	mov	r2, r3
 801c6a6:	8b7b      	ldrh	r3, [r7, #26]
 801c6a8:	fa42 f303 	asr.w	r3, r2, r3
 801c6ac:	f003 0301 	and.w	r3, r3, #1
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d023      	beq.n	801c6fc <DrawString+0x15c>
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801c6b4:	4b6b      	ldr	r3, [pc, #428]	; (801c864 <DrawString+0x2c4>)
 801c6b6:	781b      	ldrb	r3, [r3, #0]
 801c6b8:	4619      	mov	r1, r3
 801c6ba:	4a6b      	ldr	r2, [pc, #428]	; (801c868 <DrawString+0x2c8>)
 801c6bc:	2334      	movs	r3, #52	; 0x34
 801c6be:	fb01 f303 	mul.w	r3, r1, r3
 801c6c2:	4413      	add	r3, r2
 801c6c4:	335c      	adds	r3, #92	; 0x5c
 801c6c6:	681a      	ldr	r2, [r3, #0]
 801c6c8:	8939      	ldrh	r1, [r7, #8]
 801c6ca:	8b7b      	ldrh	r3, [r7, #26]
 801c6cc:	1acb      	subs	r3, r1, r3
 801c6ce:	4618      	mov	r0, r3
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801c6d0:	4b64      	ldr	r3, [pc, #400]	; (801c864 <DrawString+0x2c4>)
 801c6d2:	781b      	ldrb	r3, [r3, #0]
 801c6d4:	461c      	mov	r4, r3
 801c6d6:	4964      	ldr	r1, [pc, #400]	; (801c868 <DrawString+0x2c8>)
 801c6d8:	2334      	movs	r3, #52	; 0x34
 801c6da:	fb04 f303 	mul.w	r3, r4, r3
 801c6de:	440b      	add	r3, r1
 801c6e0:	3360      	adds	r3, #96	; 0x60
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	fb03 f100 	mul.w	r1, r3, r0
 801c6e8:	69fb      	ldr	r3, [r7, #28]
 801c6ea:	4419      	add	r1, r3
 801c6ec:	697b      	ldr	r3, [r7, #20]
 801c6ee:	440b      	add	r3, r1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801c6f0:	005b      	lsls	r3, r3, #1
 801c6f2:	4413      	add	r3, r2
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801c6f4:	687a      	ldr	r2, [r7, #4]
 801c6f6:	b292      	uxth	r2, r2
 801c6f8:	801a      	strh	r2, [r3, #0]
 801c6fa:	e025      	b.n	801c748 <DrawString+0x1a8>
						}
						else {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801c6fc:	4b59      	ldr	r3, [pc, #356]	; (801c864 <DrawString+0x2c4>)
 801c6fe:	781b      	ldrb	r3, [r3, #0]
 801c700:	4619      	mov	r1, r3
 801c702:	4a59      	ldr	r2, [pc, #356]	; (801c868 <DrawString+0x2c8>)
 801c704:	2334      	movs	r3, #52	; 0x34
 801c706:	fb01 f303 	mul.w	r3, r1, r3
 801c70a:	4413      	add	r3, r2
 801c70c:	335c      	adds	r3, #92	; 0x5c
 801c70e:	681a      	ldr	r2, [r3, #0]
 801c710:	8939      	ldrh	r1, [r7, #8]
 801c712:	8b7b      	ldrh	r3, [r7, #26]
 801c714:	1acb      	subs	r3, r1, r3
 801c716:	4618      	mov	r0, r3
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 801c718:	4b52      	ldr	r3, [pc, #328]	; (801c864 <DrawString+0x2c4>)
 801c71a:	781b      	ldrb	r3, [r3, #0]
 801c71c:	461c      	mov	r4, r3
 801c71e:	4952      	ldr	r1, [pc, #328]	; (801c868 <DrawString+0x2c8>)
 801c720:	2334      	movs	r3, #52	; 0x34
 801c722:	fb04 f303 	mul.w	r3, r4, r3
 801c726:	440b      	add	r3, r1
 801c728:	3360      	adds	r3, #96	; 0x60
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	fb03 f100 	mul.w	r1, r3, r0
 801c730:	69fb      	ldr	r3, [r7, #28]
 801c732:	4419      	add	r1, r3
 801c734:	697b      	ldr	r3, [r7, #20]
 801c736:	440b      	add	r3, r1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801c738:	005b      	lsls	r3, r3, #1
 801c73a:	4413      	add	r3, r2
 801c73c:	461c      	mov	r4, r3
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 801c73e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c740:	f7fc fd98 	bl	8019274 <Color_Convertion>
 801c744:	4603      	mov	r3, r0
 801c746:	8023      	strh	r3, [r4, #0]
						}
						k++;
 801c748:	8b7b      	ldrh	r3, [r7, #26]
 801c74a:	3301      	adds	r3, #1
 801c74c:	837b      	strh	r3, [r7, #26]
					while(k < 13) {
 801c74e:	8b7b      	ldrh	r3, [r7, #26]
 801c750:	2b0c      	cmp	r3, #12
 801c752:	d997      	bls.n	801c684 <DrawString+0xe4>
					}
				}
				if(font[(str[l]-33)*12+i] == 0) {
 801c754:	693b      	ldr	r3, [r7, #16]
 801c756:	68fa      	ldr	r2, [r7, #12]
 801c758:	4413      	add	r3, r2
 801c75a:	781b      	ldrb	r3, [r3, #0]
 801c75c:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 801c760:	4613      	mov	r3, r2
 801c762:	005b      	lsls	r3, r3, #1
 801c764:	4413      	add	r3, r2
 801c766:	009b      	lsls	r3, r3, #2
 801c768:	461a      	mov	r2, r3
 801c76a:	697b      	ldr	r3, [r7, #20]
 801c76c:	4413      	add	r3, r2
 801c76e:	4a3f      	ldr	r2, [pc, #252]	; (801c86c <DrawString+0x2cc>)
 801c770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c774:	2b00      	cmp	r3, #0
 801c776:	d11a      	bne.n	801c7ae <DrawString+0x20e>
					if(font[(str[l]-33)*12+i+1] == 0) {
 801c778:	693b      	ldr	r3, [r7, #16]
 801c77a:	68fa      	ldr	r2, [r7, #12]
 801c77c:	4413      	add	r3, r2
 801c77e:	781b      	ldrb	r3, [r3, #0]
 801c780:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 801c784:	4613      	mov	r3, r2
 801c786:	005b      	lsls	r3, r3, #1
 801c788:	4413      	add	r3, r2
 801c78a:	009b      	lsls	r3, r3, #2
 801c78c:	461a      	mov	r2, r3
 801c78e:	697b      	ldr	r3, [r7, #20]
 801c790:	4413      	add	r3, r2
 801c792:	3301      	adds	r3, #1
 801c794:	4a35      	ldr	r2, [pc, #212]	; (801c86c <DrawString+0x2cc>)
 801c796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d103      	bne.n	801c7a6 <DrawString+0x206>
						i++;
 801c79e:	697b      	ldr	r3, [r7, #20]
 801c7a0:	3301      	adds	r3, #1
 801c7a2:	617b      	str	r3, [r7, #20]
						break;
 801c7a4:	e00a      	b.n	801c7bc <DrawString+0x21c>
					}
					i++;
 801c7a6:	697b      	ldr	r3, [r7, #20]
 801c7a8:	3301      	adds	r3, #1
 801c7aa:	617b      	str	r3, [r7, #20]
 801c7ac:	e002      	b.n	801c7b4 <DrawString+0x214>
				}
				else {
					i++;
 801c7ae:	697b      	ldr	r3, [r7, #20]
 801c7b0:	3301      	adds	r3, #1
 801c7b2:	617b      	str	r3, [r7, #20]
				}
			}
			while(i < 12);
 801c7b4:	697b      	ldr	r3, [r7, #20]
 801c7b6:	2b0b      	cmp	r3, #11
 801c7b8:	f77f af5d 	ble.w	801c676 <DrawString+0xd6>
			xpos += i;
 801c7bc:	69fa      	ldr	r2, [r7, #28]
 801c7be:	697b      	ldr	r3, [r7, #20]
 801c7c0:	4413      	add	r3, r2
 801c7c2:	61fb      	str	r3, [r7, #28]
		}
		if(str[l] > 191) {
 801c7c4:	693b      	ldr	r3, [r7, #16]
 801c7c6:	68fa      	ldr	r2, [r7, #12]
 801c7c8:	4413      	add	r3, r2
 801c7ca:	781b      	ldrb	r3, [r3, #0]
 801c7cc:	2bbf      	cmp	r3, #191	; 0xbf
 801c7ce:	f240 80b5 	bls.w	801c93c <DrawString+0x39c>
			i = 0;
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	617b      	str	r3, [r7, #20]
			do {
				k = 0;
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	837b      	strh	r3, [r7, #26]
				if(xpos < 470) {
 801c7da:	69fb      	ldr	r3, [r7, #28]
 801c7dc:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 801c7e0:	da74      	bge.n	801c8cc <DrawString+0x32c>
					while(k < 13) {
 801c7e2:	e070      	b.n	801c8c6 <DrawString+0x326>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 801c7e4:	693b      	ldr	r3, [r7, #16]
 801c7e6:	68fa      	ldr	r2, [r7, #12]
 801c7e8:	4413      	add	r3, r2
 801c7ea:	781b      	ldrb	r3, [r3, #0]
 801c7ec:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 801c7f0:	4613      	mov	r3, r2
 801c7f2:	005b      	lsls	r3, r3, #1
 801c7f4:	4413      	add	r3, r2
 801c7f6:	009b      	lsls	r3, r3, #2
 801c7f8:	461a      	mov	r2, r3
 801c7fa:	697b      	ldr	r3, [r7, #20]
 801c7fc:	4413      	add	r3, r2
 801c7fe:	4a1c      	ldr	r2, [pc, #112]	; (801c870 <DrawString+0x2d0>)
 801c800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c804:	461a      	mov	r2, r3
 801c806:	8b7b      	ldrh	r3, [r7, #26]
 801c808:	fa42 f303 	asr.w	r3, r2, r3
 801c80c:	f003 0301 	and.w	r3, r3, #1
 801c810:	2b00      	cmp	r3, #0
 801c812:	d02f      	beq.n	801c874 <DrawString+0x2d4>
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801c814:	4b13      	ldr	r3, [pc, #76]	; (801c864 <DrawString+0x2c4>)
 801c816:	781b      	ldrb	r3, [r3, #0]
 801c818:	4619      	mov	r1, r3
 801c81a:	4a13      	ldr	r2, [pc, #76]	; (801c868 <DrawString+0x2c8>)
 801c81c:	2334      	movs	r3, #52	; 0x34
 801c81e:	fb01 f303 	mul.w	r3, r1, r3
 801c822:	4413      	add	r3, r2
 801c824:	335c      	adds	r3, #92	; 0x5c
 801c826:	681a      	ldr	r2, [r3, #0]
 801c828:	8939      	ldrh	r1, [r7, #8]
 801c82a:	8b7b      	ldrh	r3, [r7, #26]
 801c82c:	1acb      	subs	r3, r1, r3
 801c82e:	4618      	mov	r0, r3
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801c830:	4b0c      	ldr	r3, [pc, #48]	; (801c864 <DrawString+0x2c4>)
 801c832:	781b      	ldrb	r3, [r3, #0]
 801c834:	461c      	mov	r4, r3
 801c836:	490c      	ldr	r1, [pc, #48]	; (801c868 <DrawString+0x2c8>)
 801c838:	2334      	movs	r3, #52	; 0x34
 801c83a:	fb04 f303 	mul.w	r3, r4, r3
 801c83e:	440b      	add	r3, r1
 801c840:	3360      	adds	r3, #96	; 0x60
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	fb03 f100 	mul.w	r1, r3, r0
 801c848:	69fb      	ldr	r3, [r7, #28]
 801c84a:	4419      	add	r1, r3
 801c84c:	697b      	ldr	r3, [r7, #20]
 801c84e:	440b      	add	r3, r1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801c850:	005b      	lsls	r3, r3, #1
 801c852:	4413      	add	r3, r2
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801c854:	687a      	ldr	r2, [r7, #4]
 801c856:	b292      	uxth	r2, r2
 801c858:	801a      	strh	r2, [r3, #0]
 801c85a:	e031      	b.n	801c8c0 <DrawString+0x320>
 801c85c:	20000910 	.word	0x20000910
 801c860:	4002b000 	.word	0x4002b000
 801c864:	20000aa4 	.word	0x20000aa4
 801c868:	200009fc 	.word	0x200009fc
 801c86c:	0802afb4 	.word	0x0802afb4
 801c870:	0802b83c 	.word	0x0802b83c
						}
						else {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801c874:	4b3d      	ldr	r3, [pc, #244]	; (801c96c <DrawString+0x3cc>)
 801c876:	781b      	ldrb	r3, [r3, #0]
 801c878:	4619      	mov	r1, r3
 801c87a:	4a3d      	ldr	r2, [pc, #244]	; (801c970 <DrawString+0x3d0>)
 801c87c:	2334      	movs	r3, #52	; 0x34
 801c87e:	fb01 f303 	mul.w	r3, r1, r3
 801c882:	4413      	add	r3, r2
 801c884:	335c      	adds	r3, #92	; 0x5c
 801c886:	681a      	ldr	r2, [r3, #0]
 801c888:	8939      	ldrh	r1, [r7, #8]
 801c88a:	8b7b      	ldrh	r3, [r7, #26]
 801c88c:	1acb      	subs	r3, r1, r3
 801c88e:	4618      	mov	r0, r3
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 801c890:	4b36      	ldr	r3, [pc, #216]	; (801c96c <DrawString+0x3cc>)
 801c892:	781b      	ldrb	r3, [r3, #0]
 801c894:	461c      	mov	r4, r3
 801c896:	4936      	ldr	r1, [pc, #216]	; (801c970 <DrawString+0x3d0>)
 801c898:	2334      	movs	r3, #52	; 0x34
 801c89a:	fb04 f303 	mul.w	r3, r4, r3
 801c89e:	440b      	add	r3, r1
 801c8a0:	3360      	adds	r3, #96	; 0x60
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	fb03 f100 	mul.w	r1, r3, r0
 801c8a8:	69fb      	ldr	r3, [r7, #28]
 801c8aa:	4419      	add	r1, r3
 801c8ac:	697b      	ldr	r3, [r7, #20]
 801c8ae:	440b      	add	r3, r1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801c8b0:	005b      	lsls	r3, r3, #1
 801c8b2:	4413      	add	r3, r2
 801c8b4:	461c      	mov	r4, r3
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 801c8b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c8b8:	f7fc fcdc 	bl	8019274 <Color_Convertion>
 801c8bc:	4603      	mov	r3, r0
 801c8be:	8023      	strh	r3, [r4, #0]
						}
						k++;
 801c8c0:	8b7b      	ldrh	r3, [r7, #26]
 801c8c2:	3301      	adds	r3, #1
 801c8c4:	837b      	strh	r3, [r7, #26]
					while(k < 13) {
 801c8c6:	8b7b      	ldrh	r3, [r7, #26]
 801c8c8:	2b0c      	cmp	r3, #12
 801c8ca:	d98b      	bls.n	801c7e4 <DrawString+0x244>
					}
				}
				if(ru_font[(str[l]-192)*12+i] == 0) {
 801c8cc:	693b      	ldr	r3, [r7, #16]
 801c8ce:	68fa      	ldr	r2, [r7, #12]
 801c8d0:	4413      	add	r3, r2
 801c8d2:	781b      	ldrb	r3, [r3, #0]
 801c8d4:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 801c8d8:	4613      	mov	r3, r2
 801c8da:	005b      	lsls	r3, r3, #1
 801c8dc:	4413      	add	r3, r2
 801c8de:	009b      	lsls	r3, r3, #2
 801c8e0:	461a      	mov	r2, r3
 801c8e2:	697b      	ldr	r3, [r7, #20]
 801c8e4:	4413      	add	r3, r2
 801c8e6:	4a23      	ldr	r2, [pc, #140]	; (801c974 <DrawString+0x3d4>)
 801c8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d11a      	bne.n	801c926 <DrawString+0x386>
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
 801c8f0:	693b      	ldr	r3, [r7, #16]
 801c8f2:	68fa      	ldr	r2, [r7, #12]
 801c8f4:	4413      	add	r3, r2
 801c8f6:	781b      	ldrb	r3, [r3, #0]
 801c8f8:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 801c8fc:	4613      	mov	r3, r2
 801c8fe:	005b      	lsls	r3, r3, #1
 801c900:	4413      	add	r3, r2
 801c902:	009b      	lsls	r3, r3, #2
 801c904:	461a      	mov	r2, r3
 801c906:	697b      	ldr	r3, [r7, #20]
 801c908:	4413      	add	r3, r2
 801c90a:	3301      	adds	r3, #1
 801c90c:	4a19      	ldr	r2, [pc, #100]	; (801c974 <DrawString+0x3d4>)
 801c90e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c912:	2b00      	cmp	r3, #0
 801c914:	d103      	bne.n	801c91e <DrawString+0x37e>
						i++;
 801c916:	697b      	ldr	r3, [r7, #20]
 801c918:	3301      	adds	r3, #1
 801c91a:	617b      	str	r3, [r7, #20]
						break;
 801c91c:	e00a      	b.n	801c934 <DrawString+0x394>
					}
					i++;
 801c91e:	697b      	ldr	r3, [r7, #20]
 801c920:	3301      	adds	r3, #1
 801c922:	617b      	str	r3, [r7, #20]
 801c924:	e002      	b.n	801c92c <DrawString+0x38c>
				}
				else {
					i++;
 801c926:	697b      	ldr	r3, [r7, #20]
 801c928:	3301      	adds	r3, #1
 801c92a:	617b      	str	r3, [r7, #20]
				}
			}
			while(i < 12);
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	2b0b      	cmp	r3, #11
 801c930:	f77f af51 	ble.w	801c7d6 <DrawString+0x236>
			xpos += i;
 801c934:	69fa      	ldr	r2, [r7, #28]
 801c936:	697b      	ldr	r3, [r7, #20]
 801c938:	4413      	add	r3, r2
 801c93a:	61fb      	str	r3, [r7, #28]
		}
		if(str[l] == 32) {
 801c93c:	693b      	ldr	r3, [r7, #16]
 801c93e:	68fa      	ldr	r2, [r7, #12]
 801c940:	4413      	add	r3, r2
 801c942:	781b      	ldrb	r3, [r3, #0]
 801c944:	2b20      	cmp	r3, #32
 801c946:	d102      	bne.n	801c94e <DrawString+0x3ae>
			xpos += 5;
 801c948:	69fb      	ldr	r3, [r7, #28]
 801c94a:	3305      	adds	r3, #5
 801c94c:	61fb      	str	r3, [r7, #28]
		}
		l++;
 801c94e:	693b      	ldr	r3, [r7, #16]
 801c950:	3301      	adds	r3, #1
 801c952:	613b      	str	r3, [r7, #16]
	while(str[l] != 0) {
 801c954:	693b      	ldr	r3, [r7, #16]
 801c956:	68fa      	ldr	r2, [r7, #12]
 801c958:	4413      	add	r3, r2
 801c95a:	781b      	ldrb	r3, [r3, #0]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	f47f ae79 	bne.w	801c654 <DrawString+0xb4>
	}
}
 801c962:	bf00      	nop
 801c964:	bf00      	nop
 801c966:	3724      	adds	r7, #36	; 0x24
 801c968:	46bd      	mov	sp, r7
 801c96a:	bd90      	pop	{r4, r7, pc}
 801c96c:	20000aa4 	.word	0x20000aa4
 801c970:	200009fc 	.word	0x200009fc
 801c974:	0802b83c 	.word	0x0802b83c

0801c978 <QuantizePosition>:

// snaps file position on the spectra to the nearest beat
uint32_t QuantizePosition(int beat_offset) {
 801c978:	b480      	push	{r7}
 801c97a:	b087      	sub	sp, #28
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
	uint32_t quantized_pos = file_pos_wide;
 801c980:	4b2d      	ldr	r3, [pc, #180]	; (801ca38 <QuantizePosition+0xc0>)
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	617b      	str	r3, [r7, #20]
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 801c986:	4b2c      	ldr	r3, [pc, #176]	; (801ca38 <QuantizePosition+0xc0>)
 801c988:	681a      	ldr	r2, [r3, #0]
 801c98a:	4b2c      	ldr	r3, [pc, #176]	; (801ca3c <QuantizePosition+0xc4>)
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	492c      	ldr	r1, [pc, #176]	; (801ca40 <QuantizePosition+0xc8>)
 801c990:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801c994:	009b      	lsls	r3, r3, #2
 801c996:	440b      	add	r3, r1
 801c998:	685b      	ldr	r3, [r3, #4]
 801c99a:	2196      	movs	r1, #150	; 0x96
 801c99c:	fb01 f303 	mul.w	r3, r1, r3
 801c9a0:	4928      	ldr	r1, [pc, #160]	; (801ca44 <QuantizePosition+0xcc>)
 801c9a2:	fba1 1303 	umull	r1, r3, r1, r3
 801c9a6:	099b      	lsrs	r3, r3, #6
 801c9a8:	1ad3      	subs	r3, r2, r3
 801c9aa:	613b      	str	r3, [r7, #16]
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 801c9ac:	4b23      	ldr	r3, [pc, #140]	; (801ca3c <QuantizePosition+0xc4>)
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	3301      	adds	r3, #1
 801c9b2:	4a23      	ldr	r2, [pc, #140]	; (801ca40 <QuantizePosition+0xc8>)
 801c9b4:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801c9b8:	009b      	lsls	r3, r3, #2
 801c9ba:	4413      	add	r3, r2
 801c9bc:	685b      	ldr	r3, [r3, #4]
 801c9be:	2296      	movs	r2, #150	; 0x96
 801c9c0:	fb02 f303 	mul.w	r3, r2, r3
 801c9c4:	4a1f      	ldr	r2, [pc, #124]	; (801ca44 <QuantizePosition+0xcc>)
 801c9c6:	fba2 2303 	umull	r2, r3, r2, r3
 801c9ca:	099a      	lsrs	r2, r3, #6
 801c9cc:	4b1a      	ldr	r3, [pc, #104]	; (801ca38 <QuantizePosition+0xc0>)
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	1ad3      	subs	r3, r2, r3
 801c9d2:	60fb      	str	r3, [r7, #12]
	if(time1 > time2) {
 801c9d4:	693a      	ldr	r2, [r7, #16]
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	429a      	cmp	r2, r3
 801c9da:	dd13      	ble.n	801ca04 <QuantizePosition+0x8c>
		quantized_pos = rekordbox.timeindex[beat+beat_offset+1]*150/1000;							;
 801c9dc:	4b17      	ldr	r3, [pc, #92]	; (801ca3c <QuantizePosition+0xc4>)
 801c9de:	681a      	ldr	r2, [r3, #0]
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	4413      	add	r3, r2
 801c9e4:	3301      	adds	r3, #1
 801c9e6:	4a16      	ldr	r2, [pc, #88]	; (801ca40 <QuantizePosition+0xc8>)
 801c9e8:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801c9ec:	009b      	lsls	r3, r3, #2
 801c9ee:	4413      	add	r3, r2
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	2296      	movs	r2, #150	; 0x96
 801c9f4:	fb02 f303 	mul.w	r3, r2, r3
 801c9f8:	4a12      	ldr	r2, [pc, #72]	; (801ca44 <QuantizePosition+0xcc>)
 801c9fa:	fba2 2303 	umull	r2, r3, r2, r3
 801c9fe:	099b      	lsrs	r3, r3, #6
 801ca00:	617b      	str	r3, [r7, #20]
 801ca02:	e011      	b.n	801ca28 <QuantizePosition+0xb0>
	}
	else {
		quantized_pos = rekordbox.timeindex[beat+beat_offset]*150/1000;
 801ca04:	4b0d      	ldr	r3, [pc, #52]	; (801ca3c <QuantizePosition+0xc4>)
 801ca06:	681a      	ldr	r2, [r3, #0]
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	4413      	add	r3, r2
 801ca0c:	4a0c      	ldr	r2, [pc, #48]	; (801ca40 <QuantizePosition+0xc8>)
 801ca0e:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801ca12:	009b      	lsls	r3, r3, #2
 801ca14:	4413      	add	r3, r2
 801ca16:	685b      	ldr	r3, [r3, #4]
 801ca18:	2296      	movs	r2, #150	; 0x96
 801ca1a:	fb02 f303 	mul.w	r3, r2, r3
 801ca1e:	4a09      	ldr	r2, [pc, #36]	; (801ca44 <QuantizePosition+0xcc>)
 801ca20:	fba2 2303 	umull	r2, r3, r2, r3
 801ca24:	099b      	lsrs	r3, r3, #6
 801ca26:	617b      	str	r3, [r7, #20]
	}
	return quantized_pos;
 801ca28:	697b      	ldr	r3, [r7, #20]
}
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	371c      	adds	r7, #28
 801ca2e:	46bd      	mov	sp, r7
 801ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca34:	4770      	bx	lr
 801ca36:	bf00      	nop
 801ca38:	20001e00 	.word	0x20001e00
 801ca3c:	200008e0 	.word	0x200008e0
 801ca40:	20015170 	.word	0x20015170
 801ca44:	10624dd3 	.word	0x10624dd3

0801ca48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 801ca48:	b580      	push	{r7, lr}
 801ca4a:	b082      	sub	sp, #8
 801ca4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801ca4e:	4b0c      	ldr	r3, [pc, #48]	; (801ca80 <MX_DMA_Init+0x38>)
 801ca50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca52:	4a0b      	ldr	r2, [pc, #44]	; (801ca80 <MX_DMA_Init+0x38>)
 801ca54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801ca58:	6313      	str	r3, [r2, #48]	; 0x30
 801ca5a:	4b09      	ldr	r3, [pc, #36]	; (801ca80 <MX_DMA_Init+0x38>)
 801ca5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ca62:	607b      	str	r3, [r7, #4]
 801ca64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 801ca66:	2200      	movs	r2, #0
 801ca68:	2100      	movs	r1, #0
 801ca6a:	203c      	movs	r0, #60	; 0x3c
 801ca6c:	f7e4 fd44 	bl	80014f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 801ca70:	203c      	movs	r0, #60	; 0x3c
 801ca72:	f7e4 fd6d 	bl	8001550 <HAL_NVIC_EnableIRQ>

}
 801ca76:	bf00      	nop
 801ca78:	3708      	adds	r7, #8
 801ca7a:	46bd      	mov	sp, r7
 801ca7c:	bd80      	pop	{r7, pc}
 801ca7e:	bf00      	nop
 801ca80:	40023800 	.word	0x40023800

0801ca84 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 801ca88:	4b0b      	ldr	r3, [pc, #44]	; (801cab8 <MX_DMA2D_Init+0x34>)
 801ca8a:	4a0c      	ldr	r2, [pc, #48]	; (801cabc <MX_DMA2D_Init+0x38>)
 801ca8c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 801ca8e:	4b0a      	ldr	r3, [pc, #40]	; (801cab8 <MX_DMA2D_Init+0x34>)
 801ca90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801ca94:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801ca96:	4b08      	ldr	r3, [pc, #32]	; (801cab8 <MX_DMA2D_Init+0x34>)
 801ca98:	2202      	movs	r2, #2
 801ca9a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 801ca9c:	4b06      	ldr	r3, [pc, #24]	; (801cab8 <MX_DMA2D_Init+0x34>)
 801ca9e:	2200      	movs	r2, #0
 801caa0:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801caa2:	4805      	ldr	r0, [pc, #20]	; (801cab8 <MX_DMA2D_Init+0x34>)
 801caa4:	f7e5 fb4c 	bl	8002140 <HAL_DMA2D_Init>
 801caa8:	4603      	mov	r3, r0
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d001      	beq.n	801cab2 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 801caae:	f001 fdb0 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 801cab2:	bf00      	nop
 801cab4:	bd80      	pop	{r7, pc}
 801cab6:	bf00      	nop
 801cab8:	20000910 	.word	0x20000910
 801cabc:	4002b000 	.word	0x4002b000

0801cac0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 801cac0:	b480      	push	{r7}
 801cac2:	b085      	sub	sp, #20
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	4a10      	ldr	r2, [pc, #64]	; (801cb10 <HAL_DMA2D_MspInit+0x50>)
 801cace:	4293      	cmp	r3, r2
 801cad0:	d118      	bne.n	801cb04 <HAL_DMA2D_MspInit+0x44>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */
	__HAL_DMA2D_ENABLE_IT(&hdma2d, DMA2D_IT_TC);
 801cad2:	4b10      	ldr	r3, [pc, #64]	; (801cb14 <HAL_DMA2D_MspInit+0x54>)
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	681a      	ldr	r2, [r3, #0]
 801cad8:	4b0e      	ldr	r3, [pc, #56]	; (801cb14 <HAL_DMA2D_MspInit+0x54>)
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801cae0:	601a      	str	r2, [r3, #0]
	__HAL_DMA2D_CLEAR_FLAG(&hdma2d, DMA2D_IT_TC);
 801cae2:	4b0c      	ldr	r3, [pc, #48]	; (801cb14 <HAL_DMA2D_MspInit+0x54>)
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801caea:	609a      	str	r2, [r3, #8]
  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801caec:	4b0a      	ldr	r3, [pc, #40]	; (801cb18 <HAL_DMA2D_MspInit+0x58>)
 801caee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801caf0:	4a09      	ldr	r2, [pc, #36]	; (801cb18 <HAL_DMA2D_MspInit+0x58>)
 801caf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801caf6:	6313      	str	r3, [r2, #48]	; 0x30
 801caf8:	4b07      	ldr	r3, [pc, #28]	; (801cb18 <HAL_DMA2D_MspInit+0x58>)
 801cafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cafc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801cb00:	60fb      	str	r3, [r7, #12]
 801cb02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 801cb04:	bf00      	nop
 801cb06:	3714      	adds	r7, #20
 801cb08:	46bd      	mov	sp, r7
 801cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb0e:	4770      	bx	lr
 801cb10:	4002b000 	.word	0x4002b000
 801cb14:	20000910 	.word	0x20000910
 801cb18:	40023800 	.word	0x40023800

0801cb1c <MX_FATFS_Init>:
#include "ff.h"

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801cb1c:	b580      	push	{r7, lr}
 801cb1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  //retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 801cb20:	4904      	ldr	r1, [pc, #16]	; (801cb34 <MX_FATFS_Init+0x18>)
 801cb22:	4805      	ldr	r0, [pc, #20]	; (801cb38 <MX_FATFS_Init+0x1c>)
 801cb24:	f7f4 fd94 	bl	8011650 <FATFS_LinkDriver>
 801cb28:	4603      	mov	r3, r0
 801cb2a:	461a      	mov	r2, r3
 801cb2c:	4b03      	ldr	r3, [pc, #12]	; (801cb3c <MX_FATFS_Init+0x20>)
 801cb2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 801cb30:	bf00      	nop
 801cb32:	bd80      	pop	{r7, pc}
 801cb34:	20000958 	.word	0x20000958
 801cb38:	0802be50 	.word	0x0802be50
 801cb3c:	20000954 	.word	0x20000954

0801cb40 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b082      	sub	sp, #8
 801cb44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801cb46:	2301      	movs	r3, #1
 801cb48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801cb4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801cb4e:	4806      	ldr	r0, [pc, #24]	; (801cb68 <BSP_PlatformIsDetected+0x28>)
 801cb50:	f7e6 f9ee 	bl	8002f30 <HAL_GPIO_ReadPin>
 801cb54:	4603      	mov	r3, r0
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d001      	beq.n	801cb5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801cb5e:	79fb      	ldrb	r3, [r7, #7]
}
 801cb60:	4618      	mov	r0, r3
 801cb62:	3708      	adds	r7, #8
 801cb64:	46bd      	mov	sp, r7
 801cb66:	bd80      	pop	{r7, pc}
 801cb68:	40020800 	.word	0x40020800

0801cb6c <SDRAM_Init>:
/* USER CODE BEGIN 0 */
FMC_SDRAM_CommandTypeDef command;
HAL_StatusTypeDef hal_stat;

void SDRAM_Init(void)
{
 801cb6c:	b580      	push	{r7, lr}
 801cb6e:	b082      	sub	sp, #8
 801cb70:	af00      	add	r7, sp, #0
	__IO uint32_t tmpmrd = 0;
 801cb72:	2300      	movs	r3, #0
 801cb74:	607b      	str	r3, [r7, #4]
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 801cb76:	4b36      	ldr	r3, [pc, #216]	; (801cc50 <SDRAM_Init+0xe4>)
 801cb78:	2201      	movs	r2, #1
 801cb7a:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801cb7c:	4b34      	ldr	r3, [pc, #208]	; (801cc50 <SDRAM_Init+0xe4>)
 801cb7e:	2210      	movs	r2, #16
 801cb80:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 801cb82:	4b33      	ldr	r3, [pc, #204]	; (801cc50 <SDRAM_Init+0xe4>)
 801cb84:	2201      	movs	r2, #1
 801cb86:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 801cb88:	4b31      	ldr	r3, [pc, #196]	; (801cc50 <SDRAM_Init+0xe4>)
 801cb8a:	2200      	movs	r2, #0
 801cb8c:	60da      	str	r2, [r3, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 801cb8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cb92:	492f      	ldr	r1, [pc, #188]	; (801cc50 <SDRAM_Init+0xe4>)
 801cb94:	482f      	ldr	r0, [pc, #188]	; (801cc54 <SDRAM_Init+0xe8>)
 801cb96:	f7eb ffbc 	bl	8008b12 <HAL_SDRAM_SendCommand>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	461a      	mov	r2, r3
 801cb9e:	4b2e      	ldr	r3, [pc, #184]	; (801cc58 <SDRAM_Init+0xec>)
 801cba0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 801cba2:	2001      	movs	r0, #1
 801cba4:	f7e4 fb70 	bl	8001288 <HAL_Delay>

	command.CommandMode = FMC_SDRAM_CMD_PALL;
 801cba8:	4b29      	ldr	r3, [pc, #164]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbaa:	2202      	movs	r2, #2
 801cbac:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801cbae:	4b28      	ldr	r3, [pc, #160]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbb0:	2210      	movs	r2, #16
 801cbb2:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 801cbb4:	4b26      	ldr	r3, [pc, #152]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbb6:	2201      	movs	r2, #1
 801cbb8:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 801cbba:	4b25      	ldr	r3, [pc, #148]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbbc:	2200      	movs	r2, #0
 801cbbe:	60da      	str	r2, [r3, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 801cbc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cbc4:	4922      	ldr	r1, [pc, #136]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbc6:	4823      	ldr	r0, [pc, #140]	; (801cc54 <SDRAM_Init+0xe8>)
 801cbc8:	f7eb ffa3 	bl	8008b12 <HAL_SDRAM_SendCommand>
 801cbcc:	4603      	mov	r3, r0
 801cbce:	461a      	mov	r2, r3
 801cbd0:	4b21      	ldr	r3, [pc, #132]	; (801cc58 <SDRAM_Init+0xec>)
 801cbd2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 801cbd4:	2001      	movs	r0, #1
 801cbd6:	f7e4 fb57 	bl	8001288 <HAL_Delay>

	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801cbda:	4b1d      	ldr	r3, [pc, #116]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbdc:	2203      	movs	r2, #3
 801cbde:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801cbe0:	4b1b      	ldr	r3, [pc, #108]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbe2:	2210      	movs	r2, #16
 801cbe4:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 801cbe6:	4b1a      	ldr	r3, [pc, #104]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbe8:	2208      	movs	r2, #8
 801cbea:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 801cbec:	4b18      	ldr	r3, [pc, #96]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbee:	2200      	movs	r2, #0
 801cbf0:	60da      	str	r2, [r3, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 801cbf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cbf6:	4916      	ldr	r1, [pc, #88]	; (801cc50 <SDRAM_Init+0xe4>)
 801cbf8:	4816      	ldr	r0, [pc, #88]	; (801cc54 <SDRAM_Init+0xe8>)
 801cbfa:	f7eb ff8a 	bl	8008b12 <HAL_SDRAM_SendCommand>
 801cbfe:	4603      	mov	r3, r0
 801cc00:	461a      	mov	r2, r3
 801cc02:	4b15      	ldr	r3, [pc, #84]	; (801cc58 <SDRAM_Init+0xec>)
 801cc04:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 801cc06:	2001      	movs	r0, #1
 801cc08:	f7e4 fb3e 	bl	8001288 <HAL_Delay>

	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |
 801cc0c:	f44f 7308 	mov.w	r3, #544	; 0x220
 801cc10:	607b      	str	r3, [r7, #4]
		  SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
		  SDRAM_MODEREG_CAS_LATENCY_2 |
		  SDRAM_MODEREG_OPERATING_MODE_STANDARD |
		  SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 801cc12:	4b0f      	ldr	r3, [pc, #60]	; (801cc50 <SDRAM_Init+0xe4>)
 801cc14:	2204      	movs	r2, #4
 801cc16:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801cc18:	4b0d      	ldr	r3, [pc, #52]	; (801cc50 <SDRAM_Init+0xe4>)
 801cc1a:	2210      	movs	r2, #16
 801cc1c:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 801cc1e:	4b0c      	ldr	r3, [pc, #48]	; (801cc50 <SDRAM_Init+0xe4>)
 801cc20:	2201      	movs	r2, #1
 801cc22:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpmrd;
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	4a0a      	ldr	r2, [pc, #40]	; (801cc50 <SDRAM_Init+0xe4>)
 801cc28:	60d3      	str	r3, [r2, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 801cc2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cc2e:	4908      	ldr	r1, [pc, #32]	; (801cc50 <SDRAM_Init+0xe4>)
 801cc30:	4808      	ldr	r0, [pc, #32]	; (801cc54 <SDRAM_Init+0xe8>)
 801cc32:	f7eb ff6e 	bl	8008b12 <HAL_SDRAM_SendCommand>
 801cc36:	4603      	mov	r3, r0
 801cc38:	461a      	mov	r2, r3
 801cc3a:	4b07      	ldr	r3, [pc, #28]	; (801cc58 <SDRAM_Init+0xec>)
 801cc3c:	701a      	strb	r2, [r3, #0]
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 801cc3e:	f240 6103 	movw	r1, #1539	; 0x603
 801cc42:	4804      	ldr	r0, [pc, #16]	; (801cc54 <SDRAM_Init+0xe8>)
 801cc44:	f7eb ff90 	bl	8008b68 <HAL_SDRAM_ProgramRefreshRate>
}
 801cc48:	bf00      	nop
 801cc4a:	3708      	adds	r7, #8
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	bd80      	pop	{r7, pc}
 801cc50:	2000095c 	.word	0x2000095c
 801cc54:	20000970 	.word	0x20000970
 801cc58:	2000096c 	.word	0x2000096c

0801cc5c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	b088      	sub	sp, #32
 801cc60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 801cc62:	1d3b      	adds	r3, r7, #4
 801cc64:	2200      	movs	r2, #0
 801cc66:	601a      	str	r2, [r3, #0]
 801cc68:	605a      	str	r2, [r3, #4]
 801cc6a:	609a      	str	r2, [r3, #8]
 801cc6c:	60da      	str	r2, [r3, #12]
 801cc6e:	611a      	str	r2, [r3, #16]
 801cc70:	615a      	str	r2, [r3, #20]
 801cc72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 801cc74:	4b1f      	ldr	r3, [pc, #124]	; (801ccf4 <MX_FMC_Init+0x98>)
 801cc76:	4a20      	ldr	r2, [pc, #128]	; (801ccf8 <MX_FMC_Init+0x9c>)
 801cc78:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 801cc7a:	4b1e      	ldr	r3, [pc, #120]	; (801ccf4 <MX_FMC_Init+0x98>)
 801cc7c:	2200      	movs	r2, #0
 801cc7e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 801cc80:	4b1c      	ldr	r3, [pc, #112]	; (801ccf4 <MX_FMC_Init+0x98>)
 801cc82:	2200      	movs	r2, #0
 801cc84:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801cc86:	4b1b      	ldr	r3, [pc, #108]	; (801ccf4 <MX_FMC_Init+0x98>)
 801cc88:	2204      	movs	r2, #4
 801cc8a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 801cc8c:	4b19      	ldr	r3, [pc, #100]	; (801ccf4 <MX_FMC_Init+0x98>)
 801cc8e:	2210      	movs	r2, #16
 801cc90:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 801cc92:	4b18      	ldr	r3, [pc, #96]	; (801ccf4 <MX_FMC_Init+0x98>)
 801cc94:	2200      	movs	r2, #0
 801cc96:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 801cc98:	4b16      	ldr	r3, [pc, #88]	; (801ccf4 <MX_FMC_Init+0x98>)
 801cc9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801cc9e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 801cca0:	4b14      	ldr	r3, [pc, #80]	; (801ccf4 <MX_FMC_Init+0x98>)
 801cca2:	2200      	movs	r2, #0
 801cca4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801cca6:	4b13      	ldr	r3, [pc, #76]	; (801ccf4 <MX_FMC_Init+0x98>)
 801cca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ccac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801ccae:	4b11      	ldr	r3, [pc, #68]	; (801ccf4 <MX_FMC_Init+0x98>)
 801ccb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ccb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801ccb6:	4b0f      	ldr	r3, [pc, #60]	; (801ccf4 <MX_FMC_Init+0x98>)
 801ccb8:	2200      	movs	r2, #0
 801ccba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 801ccbc:	2302      	movs	r3, #2
 801ccbe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 801ccc0:	2306      	movs	r3, #6
 801ccc2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 801ccc4:	2304      	movs	r3, #4
 801ccc6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 801ccc8:	2306      	movs	r3, #6
 801ccca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 801cccc:	2302      	movs	r3, #2
 801ccce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 801ccd0:	2302      	movs	r3, #2
 801ccd2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 801ccd4:	2302      	movs	r3, #2
 801ccd6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 801ccd8:	1d3b      	adds	r3, r7, #4
 801ccda:	4619      	mov	r1, r3
 801ccdc:	4805      	ldr	r0, [pc, #20]	; (801ccf4 <MX_FMC_Init+0x98>)
 801ccde:	f7eb fee4 	bl	8008aaa <HAL_SDRAM_Init>
 801cce2:	4603      	mov	r3, r0
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d001      	beq.n	801ccec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 801cce8:	f001 fc93 	bl	801e612 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 801ccec:	bf00      	nop
 801ccee:	3720      	adds	r7, #32
 801ccf0:	46bd      	mov	sp, r7
 801ccf2:	bd80      	pop	{r7, pc}
 801ccf4:	20000970 	.word	0x20000970
 801ccf8:	a0000140 	.word	0xa0000140

0801ccfc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 801ccfc:	b580      	push	{r7, lr}
 801ccfe:	b086      	sub	sp, #24
 801cd00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cd02:	1d3b      	adds	r3, r7, #4
 801cd04:	2200      	movs	r2, #0
 801cd06:	601a      	str	r2, [r3, #0]
 801cd08:	605a      	str	r2, [r3, #4]
 801cd0a:	609a      	str	r2, [r3, #8]
 801cd0c:	60da      	str	r2, [r3, #12]
 801cd0e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 801cd10:	4b3a      	ldr	r3, [pc, #232]	; (801cdfc <HAL_FMC_MspInit+0x100>)
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d16d      	bne.n	801cdf4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 801cd18:	4b38      	ldr	r3, [pc, #224]	; (801cdfc <HAL_FMC_MspInit+0x100>)
 801cd1a:	2201      	movs	r2, #1
 801cd1c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 801cd1e:	4b38      	ldr	r3, [pc, #224]	; (801ce00 <HAL_FMC_MspInit+0x104>)
 801cd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd22:	4a37      	ldr	r2, [pc, #220]	; (801ce00 <HAL_FMC_MspInit+0x104>)
 801cd24:	f043 0301 	orr.w	r3, r3, #1
 801cd28:	6393      	str	r3, [r2, #56]	; 0x38
 801cd2a:	4b35      	ldr	r3, [pc, #212]	; (801ce00 <HAL_FMC_MspInit+0x104>)
 801cd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd2e:	f003 0301 	and.w	r3, r3, #1
 801cd32:	603b      	str	r3, [r7, #0]
 801cd34:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 801cd36:	f64f 7383 	movw	r3, #65411	; 0xff83
 801cd3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cd3c:	2302      	movs	r3, #2
 801cd3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cd40:	2300      	movs	r3, #0
 801cd42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cd44:	2303      	movs	r3, #3
 801cd46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801cd48:	230c      	movs	r3, #12
 801cd4a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801cd4c:	1d3b      	adds	r3, r7, #4
 801cd4e:	4619      	mov	r1, r3
 801cd50:	482c      	ldr	r0, [pc, #176]	; (801ce04 <HAL_FMC_MspInit+0x108>)
 801cd52:	f7e5 fd73 	bl	800283c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 801cd56:	f248 1313 	movw	r3, #33043	; 0x8113
 801cd5a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cd5c:	2302      	movs	r3, #2
 801cd5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cd60:	2300      	movs	r3, #0
 801cd62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cd64:	2303      	movs	r3, #3
 801cd66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801cd68:	230c      	movs	r3, #12
 801cd6a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801cd6c:	1d3b      	adds	r3, r7, #4
 801cd6e:	4619      	mov	r1, r3
 801cd70:	4825      	ldr	r0, [pc, #148]	; (801ce08 <HAL_FMC_MspInit+0x10c>)
 801cd72:	f7e5 fd63 	bl	800283c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 801cd76:	f24c 7303 	movw	r3, #50947	; 0xc703
 801cd7a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cd7c:	2302      	movs	r3, #2
 801cd7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cd80:	2300      	movs	r3, #0
 801cd82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cd84:	2303      	movs	r3, #3
 801cd86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801cd88:	230c      	movs	r3, #12
 801cd8a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801cd8c:	1d3b      	adds	r3, r7, #4
 801cd8e:	4619      	mov	r1, r3
 801cd90:	481e      	ldr	r0, [pc, #120]	; (801ce0c <HAL_FMC_MspInit+0x110>)
 801cd92:	f7e5 fd53 	bl	800283c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 801cd96:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801cd9a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cd9c:	2302      	movs	r3, #2
 801cd9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cda0:	2300      	movs	r3, #0
 801cda2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cda4:	2303      	movs	r3, #3
 801cda6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801cda8:	230c      	movs	r3, #12
 801cdaa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801cdac:	1d3b      	adds	r3, r7, #4
 801cdae:	4619      	mov	r1, r3
 801cdb0:	4817      	ldr	r0, [pc, #92]	; (801ce10 <HAL_FMC_MspInit+0x114>)
 801cdb2:	f7e5 fd43 	bl	800283c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 801cdb6:	2328      	movs	r3, #40	; 0x28
 801cdb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cdba:	2302      	movs	r3, #2
 801cdbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cdc2:	2303      	movs	r3, #3
 801cdc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801cdc6:	230c      	movs	r3, #12
 801cdc8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801cdca:	1d3b      	adds	r3, r7, #4
 801cdcc:	4619      	mov	r1, r3
 801cdce:	4811      	ldr	r0, [pc, #68]	; (801ce14 <HAL_FMC_MspInit+0x118>)
 801cdd0:	f7e5 fd34 	bl	800283c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 801cdd4:	2308      	movs	r3, #8
 801cdd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cdd8:	2302      	movs	r3, #2
 801cdda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cddc:	2300      	movs	r3, #0
 801cdde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cde0:	2303      	movs	r3, #3
 801cde2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801cde4:	230c      	movs	r3, #12
 801cde6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801cde8:	1d3b      	adds	r3, r7, #4
 801cdea:	4619      	mov	r1, r3
 801cdec:	480a      	ldr	r0, [pc, #40]	; (801ce18 <HAL_FMC_MspInit+0x11c>)
 801cdee:	f7e5 fd25 	bl	800283c <HAL_GPIO_Init>
 801cdf2:	e000      	b.n	801cdf6 <HAL_FMC_MspInit+0xfa>
    return;
 801cdf4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 801cdf6:	3718      	adds	r7, #24
 801cdf8:	46bd      	mov	sp, r7
 801cdfa:	bd80      	pop	{r7, pc}
 801cdfc:	200009a4 	.word	0x200009a4
 801ce00:	40023800 	.word	0x40023800
 801ce04:	40021000 	.word	0x40021000
 801ce08:	40021800 	.word	0x40021800
 801ce0c:	40020c00 	.word	0x40020c00
 801ce10:	40021400 	.word	0x40021400
 801ce14:	40021c00 	.word	0x40021c00
 801ce18:	40020800 	.word	0x40020800

0801ce1c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b082      	sub	sp, #8
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 801ce24:	f7ff ff6a 	bl	801ccfc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801ce28:	bf00      	nop
 801ce2a:	3708      	adds	r7, #8
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd80      	pop	{r7, pc}

0801ce30 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b082      	sub	sp, #8
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	4603      	mov	r3, r0
 801ce38:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 801ce3a:	20c8      	movs	r0, #200	; 0xc8
 801ce3c:	f004 fd00 	bl	8021840 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801ce40:	f000 fa7a 	bl	801d338 <ft5336_I2C_InitializeIfRequired>
}
 801ce44:	bf00      	nop
 801ce46:	3708      	adds	r7, #8
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	bd80      	pop	{r7, pc}

0801ce4c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 801ce4c:	b480      	push	{r7}
 801ce4e:	b083      	sub	sp, #12
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	4603      	mov	r3, r0
 801ce54:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 801ce56:	bf00      	nop
 801ce58:	370c      	adds	r7, #12
 801ce5a:	46bd      	mov	sp, r7
 801ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce60:	4770      	bx	lr

0801ce62 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 801ce62:	b580      	push	{r7, lr}
 801ce64:	b084      	sub	sp, #16
 801ce66:	af00      	add	r7, sp, #0
 801ce68:	4603      	mov	r3, r0
 801ce6a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 801ce70:	2300      	movs	r3, #0
 801ce72:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 801ce74:	2300      	movs	r3, #0
 801ce76:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801ce78:	f000 fa5e 	bl	801d338 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	73fb      	strb	r3, [r7, #15]
 801ce80:	e010      	b.n	801cea4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 801ce82:	88fb      	ldrh	r3, [r7, #6]
 801ce84:	b2db      	uxtb	r3, r3
 801ce86:	21a8      	movs	r1, #168	; 0xa8
 801ce88:	4618      	mov	r0, r3
 801ce8a:	f004 fcb7 	bl	80217fc <TS_IO_Read>
 801ce8e:	4603      	mov	r3, r0
 801ce90:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 801ce92:	7b7b      	ldrb	r3, [r7, #13]
 801ce94:	b2db      	uxtb	r3, r3
 801ce96:	2b51      	cmp	r3, #81	; 0x51
 801ce98:	d101      	bne.n	801ce9e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 801ce9a:	2301      	movs	r3, #1
 801ce9c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801ce9e:	7bfb      	ldrb	r3, [r7, #15]
 801cea0:	3301      	adds	r3, #1
 801cea2:	73fb      	strb	r3, [r7, #15]
 801cea4:	7bfb      	ldrb	r3, [r7, #15]
 801cea6:	2b02      	cmp	r3, #2
 801cea8:	d802      	bhi.n	801ceb0 <ft5336_ReadID+0x4e>
 801ceaa:	7bbb      	ldrb	r3, [r7, #14]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d0e8      	beq.n	801ce82 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 801ceb0:	7b7b      	ldrb	r3, [r7, #13]
 801ceb2:	b2db      	uxtb	r3, r3
 801ceb4:	b29b      	uxth	r3, r3
}
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	3710      	adds	r7, #16
 801ceba:	46bd      	mov	sp, r7
 801cebc:	bd80      	pop	{r7, pc}

0801cebe <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 801cebe:	b580      	push	{r7, lr}
 801cec0:	b082      	sub	sp, #8
 801cec2:	af00      	add	r7, sp, #0
 801cec4:	4603      	mov	r3, r0
 801cec6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 801cec8:	88fb      	ldrh	r3, [r7, #6]
 801ceca:	4618      	mov	r0, r3
 801cecc:	f000 fa44 	bl	801d358 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 801ced0:	88fb      	ldrh	r3, [r7, #6]
 801ced2:	4618      	mov	r0, r3
 801ced4:	f000 f932 	bl	801d13c <ft5336_TS_DisableIT>
}
 801ced8:	bf00      	nop
 801ceda:	3708      	adds	r7, #8
 801cedc:	46bd      	mov	sp, r7
 801cede:	bd80      	pop	{r7, pc}

0801cee0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 801cee0:	b580      	push	{r7, lr}
 801cee2:	b084      	sub	sp, #16
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	4603      	mov	r3, r0
 801cee8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 801ceea:	2300      	movs	r3, #0
 801ceec:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 801ceee:	88fb      	ldrh	r3, [r7, #6]
 801cef0:	b2db      	uxtb	r3, r3
 801cef2:	2102      	movs	r1, #2
 801cef4:	4618      	mov	r0, r3
 801cef6:	f004 fc81 	bl	80217fc <TS_IO_Read>
 801cefa:	4603      	mov	r3, r0
 801cefc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 801cefe:	7bfb      	ldrb	r3, [r7, #15]
 801cf00:	b2db      	uxtb	r3, r3
 801cf02:	f003 030f 	and.w	r3, r3, #15
 801cf06:	b2db      	uxtb	r3, r3
 801cf08:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 801cf0a:	7bfb      	ldrb	r3, [r7, #15]
 801cf0c:	b2db      	uxtb	r3, r3
 801cf0e:	2b05      	cmp	r3, #5
 801cf10:	d901      	bls.n	801cf16 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 801cf12:	2300      	movs	r3, #0
 801cf14:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 801cf16:	7bfb      	ldrb	r3, [r7, #15]
 801cf18:	b2da      	uxtb	r2, r3
 801cf1a:	4b05      	ldr	r3, [pc, #20]	; (801cf30 <ft5336_TS_DetectTouch+0x50>)
 801cf1c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 801cf1e:	4b04      	ldr	r3, [pc, #16]	; (801cf30 <ft5336_TS_DetectTouch+0x50>)
 801cf20:	2200      	movs	r2, #0
 801cf22:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 801cf24:	7bfb      	ldrb	r3, [r7, #15]
 801cf26:	b2db      	uxtb	r3, r3
}
 801cf28:	4618      	mov	r0, r3
 801cf2a:	3710      	adds	r7, #16
 801cf2c:	46bd      	mov	sp, r7
 801cf2e:	bd80      	pop	{r7, pc}
 801cf30:	200009a8 	.word	0x200009a8

0801cf34 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801cf34:	b580      	push	{r7, lr}
 801cf36:	b086      	sub	sp, #24
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	4603      	mov	r3, r0
 801cf3c:	60b9      	str	r1, [r7, #8]
 801cf3e:	607a      	str	r2, [r7, #4]
 801cf40:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801cf42:	2300      	movs	r3, #0
 801cf44:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 801cf46:	2300      	movs	r3, #0
 801cf48:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 801cf4a:	2300      	movs	r3, #0
 801cf4c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 801cf4e:	2300      	movs	r3, #0
 801cf50:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 801cf52:	2300      	movs	r3, #0
 801cf54:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 801cf56:	4b6d      	ldr	r3, [pc, #436]	; (801d10c <ft5336_TS_GetXY+0x1d8>)
 801cf58:	789a      	ldrb	r2, [r3, #2]
 801cf5a:	4b6c      	ldr	r3, [pc, #432]	; (801d10c <ft5336_TS_GetXY+0x1d8>)
 801cf5c:	785b      	ldrb	r3, [r3, #1]
 801cf5e:	429a      	cmp	r2, r3
 801cf60:	f080 80cf 	bcs.w	801d102 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 801cf64:	4b69      	ldr	r3, [pc, #420]	; (801d10c <ft5336_TS_GetXY+0x1d8>)
 801cf66:	789b      	ldrb	r3, [r3, #2]
 801cf68:	2b09      	cmp	r3, #9
 801cf6a:	d871      	bhi.n	801d050 <ft5336_TS_GetXY+0x11c>
 801cf6c:	a201      	add	r2, pc, #4	; (adr r2, 801cf74 <ft5336_TS_GetXY+0x40>)
 801cf6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf72:	bf00      	nop
 801cf74:	0801cf9d 	.word	0x0801cf9d
 801cf78:	0801cfaf 	.word	0x0801cfaf
 801cf7c:	0801cfc1 	.word	0x0801cfc1
 801cf80:	0801cfd3 	.word	0x0801cfd3
 801cf84:	0801cfe5 	.word	0x0801cfe5
 801cf88:	0801cff7 	.word	0x0801cff7
 801cf8c:	0801d009 	.word	0x0801d009
 801cf90:	0801d01b 	.word	0x0801d01b
 801cf94:	0801d02d 	.word	0x0801d02d
 801cf98:	0801d03f 	.word	0x0801d03f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 801cf9c:	2304      	movs	r3, #4
 801cf9e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 801cfa0:	2303      	movs	r3, #3
 801cfa2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 801cfa4:	2306      	movs	r3, #6
 801cfa6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 801cfa8:	2305      	movs	r3, #5
 801cfaa:	753b      	strb	r3, [r7, #20]
      break;
 801cfac:	e051      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 801cfae:	230a      	movs	r3, #10
 801cfb0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 801cfb2:	2309      	movs	r3, #9
 801cfb4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 801cfb6:	230c      	movs	r3, #12
 801cfb8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 801cfba:	230b      	movs	r3, #11
 801cfbc:	753b      	strb	r3, [r7, #20]
      break;
 801cfbe:	e048      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 801cfc0:	2310      	movs	r3, #16
 801cfc2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 801cfc4:	230f      	movs	r3, #15
 801cfc6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 801cfc8:	2312      	movs	r3, #18
 801cfca:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 801cfcc:	2311      	movs	r3, #17
 801cfce:	753b      	strb	r3, [r7, #20]
      break;
 801cfd0:	e03f      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 801cfd2:	2316      	movs	r3, #22
 801cfd4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 801cfd6:	2315      	movs	r3, #21
 801cfd8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 801cfda:	2318      	movs	r3, #24
 801cfdc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 801cfde:	2317      	movs	r3, #23
 801cfe0:	753b      	strb	r3, [r7, #20]
      break;
 801cfe2:	e036      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 801cfe4:	231c      	movs	r3, #28
 801cfe6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 801cfe8:	231b      	movs	r3, #27
 801cfea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 801cfec:	231e      	movs	r3, #30
 801cfee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 801cff0:	231d      	movs	r3, #29
 801cff2:	753b      	strb	r3, [r7, #20]
      break;
 801cff4:	e02d      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 801cff6:	2322      	movs	r3, #34	; 0x22
 801cff8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 801cffa:	2321      	movs	r3, #33	; 0x21
 801cffc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 801cffe:	2324      	movs	r3, #36	; 0x24
 801d000:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 801d002:	2323      	movs	r3, #35	; 0x23
 801d004:	753b      	strb	r3, [r7, #20]
      break;
 801d006:	e024      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 801d008:	2328      	movs	r3, #40	; 0x28
 801d00a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 801d00c:	2327      	movs	r3, #39	; 0x27
 801d00e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 801d010:	232a      	movs	r3, #42	; 0x2a
 801d012:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 801d014:	2329      	movs	r3, #41	; 0x29
 801d016:	753b      	strb	r3, [r7, #20]
      break;
 801d018:	e01b      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 801d01a:	232e      	movs	r3, #46	; 0x2e
 801d01c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 801d01e:	232d      	movs	r3, #45	; 0x2d
 801d020:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 801d022:	2330      	movs	r3, #48	; 0x30
 801d024:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 801d026:	232f      	movs	r3, #47	; 0x2f
 801d028:	753b      	strb	r3, [r7, #20]
      break;
 801d02a:	e012      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 801d02c:	2334      	movs	r3, #52	; 0x34
 801d02e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 801d030:	2333      	movs	r3, #51	; 0x33
 801d032:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 801d034:	2336      	movs	r3, #54	; 0x36
 801d036:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 801d038:	2335      	movs	r3, #53	; 0x35
 801d03a:	753b      	strb	r3, [r7, #20]
      break;
 801d03c:	e009      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 801d03e:	233a      	movs	r3, #58	; 0x3a
 801d040:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 801d042:	2339      	movs	r3, #57	; 0x39
 801d044:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 801d046:	233c      	movs	r3, #60	; 0x3c
 801d048:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 801d04a:	233b      	movs	r3, #59	; 0x3b
 801d04c:	753b      	strb	r3, [r7, #20]
      break;
 801d04e:	e000      	b.n	801d052 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 801d050:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 801d052:	89fb      	ldrh	r3, [r7, #14]
 801d054:	b2db      	uxtb	r3, r3
 801d056:	7dfa      	ldrb	r2, [r7, #23]
 801d058:	4611      	mov	r1, r2
 801d05a:	4618      	mov	r0, r3
 801d05c:	f004 fbce 	bl	80217fc <TS_IO_Read>
 801d060:	4603      	mov	r3, r0
 801d062:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801d064:	7cfb      	ldrb	r3, [r7, #19]
 801d066:	b2db      	uxtb	r3, r3
 801d068:	b29a      	uxth	r2, r3
 801d06a:	4b29      	ldr	r3, [pc, #164]	; (801d110 <ft5336_TS_GetXY+0x1dc>)
 801d06c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801d06e:	89fb      	ldrh	r3, [r7, #14]
 801d070:	b2db      	uxtb	r3, r3
 801d072:	7dba      	ldrb	r2, [r7, #22]
 801d074:	4611      	mov	r1, r2
 801d076:	4618      	mov	r0, r3
 801d078:	f004 fbc0 	bl	80217fc <TS_IO_Read>
 801d07c:	4603      	mov	r3, r0
 801d07e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801d080:	7cfb      	ldrb	r3, [r7, #19]
 801d082:	b2db      	uxtb	r3, r3
 801d084:	021b      	lsls	r3, r3, #8
 801d086:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d08a:	b21a      	sxth	r2, r3
 801d08c:	4b20      	ldr	r3, [pc, #128]	; (801d110 <ft5336_TS_GetXY+0x1dc>)
 801d08e:	881b      	ldrh	r3, [r3, #0]
 801d090:	b21b      	sxth	r3, r3
 801d092:	4313      	orrs	r3, r2
 801d094:	b21b      	sxth	r3, r3
 801d096:	b29a      	uxth	r2, r3
 801d098:	4b1d      	ldr	r3, [pc, #116]	; (801d110 <ft5336_TS_GetXY+0x1dc>)
 801d09a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 801d09c:	4b1c      	ldr	r3, [pc, #112]	; (801d110 <ft5336_TS_GetXY+0x1dc>)
 801d09e:	881a      	ldrh	r2, [r3, #0]
 801d0a0:	68bb      	ldr	r3, [r7, #8]
 801d0a2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 801d0a4:	89fb      	ldrh	r3, [r7, #14]
 801d0a6:	b2db      	uxtb	r3, r3
 801d0a8:	7d7a      	ldrb	r2, [r7, #21]
 801d0aa:	4611      	mov	r1, r2
 801d0ac:	4618      	mov	r0, r3
 801d0ae:	f004 fba5 	bl	80217fc <TS_IO_Read>
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801d0b6:	7cfb      	ldrb	r3, [r7, #19]
 801d0b8:	b2db      	uxtb	r3, r3
 801d0ba:	b29a      	uxth	r2, r3
 801d0bc:	4b14      	ldr	r3, [pc, #80]	; (801d110 <ft5336_TS_GetXY+0x1dc>)
 801d0be:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 801d0c0:	89fb      	ldrh	r3, [r7, #14]
 801d0c2:	b2db      	uxtb	r3, r3
 801d0c4:	7d3a      	ldrb	r2, [r7, #20]
 801d0c6:	4611      	mov	r1, r2
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	f004 fb97 	bl	80217fc <TS_IO_Read>
 801d0ce:	4603      	mov	r3, r0
 801d0d0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801d0d2:	7cfb      	ldrb	r3, [r7, #19]
 801d0d4:	b2db      	uxtb	r3, r3
 801d0d6:	021b      	lsls	r3, r3, #8
 801d0d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d0dc:	b21a      	sxth	r2, r3
 801d0de:	4b0c      	ldr	r3, [pc, #48]	; (801d110 <ft5336_TS_GetXY+0x1dc>)
 801d0e0:	881b      	ldrh	r3, [r3, #0]
 801d0e2:	b21b      	sxth	r3, r3
 801d0e4:	4313      	orrs	r3, r2
 801d0e6:	b21b      	sxth	r3, r3
 801d0e8:	b29a      	uxth	r2, r3
 801d0ea:	4b09      	ldr	r3, [pc, #36]	; (801d110 <ft5336_TS_GetXY+0x1dc>)
 801d0ec:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 801d0ee:	4b08      	ldr	r3, [pc, #32]	; (801d110 <ft5336_TS_GetXY+0x1dc>)
 801d0f0:	881a      	ldrh	r2, [r3, #0]
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 801d0f6:	4b05      	ldr	r3, [pc, #20]	; (801d10c <ft5336_TS_GetXY+0x1d8>)
 801d0f8:	789b      	ldrb	r3, [r3, #2]
 801d0fa:	3301      	adds	r3, #1
 801d0fc:	b2da      	uxtb	r2, r3
 801d0fe:	4b03      	ldr	r3, [pc, #12]	; (801d10c <ft5336_TS_GetXY+0x1d8>)
 801d100:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 801d102:	bf00      	nop
 801d104:	3718      	adds	r7, #24
 801d106:	46bd      	mov	sp, r7
 801d108:	bd80      	pop	{r7, pc}
 801d10a:	bf00      	nop
 801d10c:	200009a8 	.word	0x200009a8
 801d110:	200009ac 	.word	0x200009ac

0801d114 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 801d114:	b580      	push	{r7, lr}
 801d116:	b084      	sub	sp, #16
 801d118:	af00      	add	r7, sp, #0
 801d11a:	4603      	mov	r3, r0
 801d11c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 801d11e:	2300      	movs	r3, #0
 801d120:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801d122:	2301      	movs	r3, #1
 801d124:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801d126:	88fb      	ldrh	r3, [r7, #6]
 801d128:	b2db      	uxtb	r3, r3
 801d12a:	7bfa      	ldrb	r2, [r7, #15]
 801d12c:	21a4      	movs	r1, #164	; 0xa4
 801d12e:	4618      	mov	r0, r3
 801d130:	f004 fb46 	bl	80217c0 <TS_IO_Write>
}
 801d134:	bf00      	nop
 801d136:	3710      	adds	r7, #16
 801d138:	46bd      	mov	sp, r7
 801d13a:	bd80      	pop	{r7, pc}

0801d13c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 801d13c:	b580      	push	{r7, lr}
 801d13e:	b084      	sub	sp, #16
 801d140:	af00      	add	r7, sp, #0
 801d142:	4603      	mov	r3, r0
 801d144:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 801d146:	2300      	movs	r3, #0
 801d148:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801d14a:	2300      	movs	r3, #0
 801d14c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801d14e:	88fb      	ldrh	r3, [r7, #6]
 801d150:	b2db      	uxtb	r3, r3
 801d152:	7bfa      	ldrb	r2, [r7, #15]
 801d154:	21a4      	movs	r1, #164	; 0xa4
 801d156:	4618      	mov	r0, r3
 801d158:	f004 fb32 	bl	80217c0 <TS_IO_Write>
}
 801d15c:	bf00      	nop
 801d15e:	3710      	adds	r7, #16
 801d160:	46bd      	mov	sp, r7
 801d162:	bd80      	pop	{r7, pc}

0801d164 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 801d164:	b480      	push	{r7}
 801d166:	b083      	sub	sp, #12
 801d168:	af00      	add	r7, sp, #0
 801d16a:	4603      	mov	r3, r0
 801d16c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 801d16e:	2300      	movs	r3, #0
}
 801d170:	4618      	mov	r0, r3
 801d172:	370c      	adds	r7, #12
 801d174:	46bd      	mov	sp, r7
 801d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d17a:	4770      	bx	lr

0801d17c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 801d17c:	b480      	push	{r7}
 801d17e:	b083      	sub	sp, #12
 801d180:	af00      	add	r7, sp, #0
 801d182:	4603      	mov	r3, r0
 801d184:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 801d186:	bf00      	nop
 801d188:	370c      	adds	r7, #12
 801d18a:	46bd      	mov	sp, r7
 801d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d190:	4770      	bx	lr

0801d192 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 801d192:	b580      	push	{r7, lr}
 801d194:	b084      	sub	sp, #16
 801d196:	af00      	add	r7, sp, #0
 801d198:	4603      	mov	r3, r0
 801d19a:	6039      	str	r1, [r7, #0]
 801d19c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 801d19e:	2300      	movs	r3, #0
 801d1a0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 801d1a2:	88fb      	ldrh	r3, [r7, #6]
 801d1a4:	b2db      	uxtb	r3, r3
 801d1a6:	2101      	movs	r1, #1
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	f004 fb27 	bl	80217fc <TS_IO_Read>
 801d1ae:	4603      	mov	r3, r0
 801d1b0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 801d1b2:	7bfb      	ldrb	r3, [r7, #15]
 801d1b4:	b2db      	uxtb	r3, r3
 801d1b6:	461a      	mov	r2, r3
 801d1b8:	683b      	ldr	r3, [r7, #0]
 801d1ba:	601a      	str	r2, [r3, #0]
}
 801d1bc:	bf00      	nop
 801d1be:	3710      	adds	r7, #16
 801d1c0:	46bd      	mov	sp, r7
 801d1c2:	bd80      	pop	{r7, pc}

0801d1c4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 801d1c4:	b580      	push	{r7, lr}
 801d1c6:	b086      	sub	sp, #24
 801d1c8:	af00      	add	r7, sp, #0
 801d1ca:	60b9      	str	r1, [r7, #8]
 801d1cc:	607a      	str	r2, [r7, #4]
 801d1ce:	603b      	str	r3, [r7, #0]
 801d1d0:	4603      	mov	r3, r0
 801d1d2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801d1d4:	2300      	movs	r3, #0
 801d1d6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 801d1d8:	2300      	movs	r3, #0
 801d1da:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 801d1dc:	2300      	movs	r3, #0
 801d1de:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 801d1e4:	4b4d      	ldr	r3, [pc, #308]	; (801d31c <ft5336_TS_GetTouchInfo+0x158>)
 801d1e6:	785b      	ldrb	r3, [r3, #1]
 801d1e8:	461a      	mov	r2, r3
 801d1ea:	68bb      	ldr	r3, [r7, #8]
 801d1ec:	4293      	cmp	r3, r2
 801d1ee:	f080 8090 	bcs.w	801d312 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 801d1f2:	68bb      	ldr	r3, [r7, #8]
 801d1f4:	2b09      	cmp	r3, #9
 801d1f6:	d85d      	bhi.n	801d2b4 <ft5336_TS_GetTouchInfo+0xf0>
 801d1f8:	a201      	add	r2, pc, #4	; (adr r2, 801d200 <ft5336_TS_GetTouchInfo+0x3c>)
 801d1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1fe:	bf00      	nop
 801d200:	0801d229 	.word	0x0801d229
 801d204:	0801d237 	.word	0x0801d237
 801d208:	0801d245 	.word	0x0801d245
 801d20c:	0801d253 	.word	0x0801d253
 801d210:	0801d261 	.word	0x0801d261
 801d214:	0801d26f 	.word	0x0801d26f
 801d218:	0801d27d 	.word	0x0801d27d
 801d21c:	0801d28b 	.word	0x0801d28b
 801d220:	0801d299 	.word	0x0801d299
 801d224:	0801d2a7 	.word	0x0801d2a7
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 801d228:	2303      	movs	r3, #3
 801d22a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 801d22c:	2307      	movs	r3, #7
 801d22e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 801d230:	2308      	movs	r3, #8
 801d232:	757b      	strb	r3, [r7, #21]
      break;
 801d234:	e03f      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 801d236:	2309      	movs	r3, #9
 801d238:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 801d23a:	230d      	movs	r3, #13
 801d23c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 801d23e:	230e      	movs	r3, #14
 801d240:	757b      	strb	r3, [r7, #21]
      break;
 801d242:	e038      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 801d244:	230f      	movs	r3, #15
 801d246:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 801d248:	2313      	movs	r3, #19
 801d24a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 801d24c:	2314      	movs	r3, #20
 801d24e:	757b      	strb	r3, [r7, #21]
      break;
 801d250:	e031      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 801d252:	2315      	movs	r3, #21
 801d254:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 801d256:	2319      	movs	r3, #25
 801d258:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 801d25a:	231a      	movs	r3, #26
 801d25c:	757b      	strb	r3, [r7, #21]
      break;
 801d25e:	e02a      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 801d260:	231b      	movs	r3, #27
 801d262:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 801d264:	231f      	movs	r3, #31
 801d266:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 801d268:	2320      	movs	r3, #32
 801d26a:	757b      	strb	r3, [r7, #21]
      break;
 801d26c:	e023      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 801d26e:	2321      	movs	r3, #33	; 0x21
 801d270:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 801d272:	2325      	movs	r3, #37	; 0x25
 801d274:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 801d276:	2326      	movs	r3, #38	; 0x26
 801d278:	757b      	strb	r3, [r7, #21]
      break;
 801d27a:	e01c      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 801d27c:	2327      	movs	r3, #39	; 0x27
 801d27e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 801d280:	232b      	movs	r3, #43	; 0x2b
 801d282:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 801d284:	232c      	movs	r3, #44	; 0x2c
 801d286:	757b      	strb	r3, [r7, #21]
      break;
 801d288:	e015      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 801d28a:	232d      	movs	r3, #45	; 0x2d
 801d28c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 801d28e:	2331      	movs	r3, #49	; 0x31
 801d290:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 801d292:	2332      	movs	r3, #50	; 0x32
 801d294:	757b      	strb	r3, [r7, #21]
      break;
 801d296:	e00e      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 801d298:	2333      	movs	r3, #51	; 0x33
 801d29a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 801d29c:	2337      	movs	r3, #55	; 0x37
 801d29e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 801d2a0:	2338      	movs	r3, #56	; 0x38
 801d2a2:	757b      	strb	r3, [r7, #21]
      break;
 801d2a4:	e007      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 801d2a6:	2339      	movs	r3, #57	; 0x39
 801d2a8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 801d2aa:	233d      	movs	r3, #61	; 0x3d
 801d2ac:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 801d2ae:	233e      	movs	r3, #62	; 0x3e
 801d2b0:	757b      	strb	r3, [r7, #21]
      break;
 801d2b2:	e000      	b.n	801d2b6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 801d2b4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801d2b6:	89fb      	ldrh	r3, [r7, #14]
 801d2b8:	b2db      	uxtb	r3, r3
 801d2ba:	7dfa      	ldrb	r2, [r7, #23]
 801d2bc:	4611      	mov	r1, r2
 801d2be:	4618      	mov	r0, r3
 801d2c0:	f004 fa9c 	bl	80217fc <TS_IO_Read>
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 801d2c8:	7d3b      	ldrb	r3, [r7, #20]
 801d2ca:	b2db      	uxtb	r3, r3
 801d2cc:	119b      	asrs	r3, r3, #6
 801d2ce:	f003 0203 	and.w	r2, r3, #3
 801d2d2:	6a3b      	ldr	r3, [r7, #32]
 801d2d4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 801d2d6:	89fb      	ldrh	r3, [r7, #14]
 801d2d8:	b2db      	uxtb	r3, r3
 801d2da:	7dba      	ldrb	r2, [r7, #22]
 801d2dc:	4611      	mov	r1, r2
 801d2de:	4618      	mov	r0, r3
 801d2e0:	f004 fa8c 	bl	80217fc <TS_IO_Read>
 801d2e4:	4603      	mov	r3, r0
 801d2e6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 801d2e8:	7d3b      	ldrb	r3, [r7, #20]
 801d2ea:	b2db      	uxtb	r3, r3
 801d2ec:	461a      	mov	r2, r3
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 801d2f2:	89fb      	ldrh	r3, [r7, #14]
 801d2f4:	b2db      	uxtb	r3, r3
 801d2f6:	7d7a      	ldrb	r2, [r7, #21]
 801d2f8:	4611      	mov	r1, r2
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f004 fa7e 	bl	80217fc <TS_IO_Read>
 801d300:	4603      	mov	r3, r0
 801d302:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 801d304:	7d3b      	ldrb	r3, [r7, #20]
 801d306:	b2db      	uxtb	r3, r3
 801d308:	111b      	asrs	r3, r3, #4
 801d30a:	f003 0204 	and.w	r2, r3, #4
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 801d312:	bf00      	nop
 801d314:	3718      	adds	r7, #24
 801d316:	46bd      	mov	sp, r7
 801d318:	bd80      	pop	{r7, pc}
 801d31a:	bf00      	nop
 801d31c:	200009a8 	.word	0x200009a8

0801d320 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 801d320:	b480      	push	{r7}
 801d322:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 801d324:	4b03      	ldr	r3, [pc, #12]	; (801d334 <ft5336_Get_I2C_InitializedStatus+0x14>)
 801d326:	781b      	ldrb	r3, [r3, #0]
}
 801d328:	4618      	mov	r0, r3
 801d32a:	46bd      	mov	sp, r7
 801d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d330:	4770      	bx	lr
 801d332:	bf00      	nop
 801d334:	200009a8 	.word	0x200009a8

0801d338 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 801d338:	b580      	push	{r7, lr}
 801d33a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 801d33c:	f7ff fff0 	bl	801d320 <ft5336_Get_I2C_InitializedStatus>
 801d340:	4603      	mov	r3, r0
 801d342:	2b00      	cmp	r3, #0
 801d344:	d104      	bne.n	801d350 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 801d346:	f004 fa31 	bl	80217ac <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 801d34a:	4b02      	ldr	r3, [pc, #8]	; (801d354 <ft5336_I2C_InitializeIfRequired+0x1c>)
 801d34c:	2201      	movs	r2, #1
 801d34e:	701a      	strb	r2, [r3, #0]
  }
}
 801d350:	bf00      	nop
 801d352:	bd80      	pop	{r7, pc}
 801d354:	200009a8 	.word	0x200009a8

0801d358 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 801d358:	b480      	push	{r7}
 801d35a:	b085      	sub	sp, #20
 801d35c:	af00      	add	r7, sp, #0
 801d35e:	4603      	mov	r3, r0
 801d360:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 801d362:	2300      	movs	r3, #0
 801d364:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 801d366:	68fb      	ldr	r3, [r7, #12]
}
 801d368:	4618      	mov	r0, r3
 801d36a:	3714      	adds	r7, #20
 801d36c:	46bd      	mov	sp, r7
 801d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d372:	4770      	bx	lr

0801d374 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 801d374:	b580      	push	{r7, lr}
 801d376:	b090      	sub	sp, #64	; 0x40
 801d378:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d37a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d37e:	2200      	movs	r2, #0
 801d380:	601a      	str	r2, [r3, #0]
 801d382:	605a      	str	r2, [r3, #4]
 801d384:	609a      	str	r2, [r3, #8]
 801d386:	60da      	str	r2, [r3, #12]
 801d388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801d38a:	4baf      	ldr	r3, [pc, #700]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d38e:	4aae      	ldr	r2, [pc, #696]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d390:	f043 0310 	orr.w	r3, r3, #16
 801d394:	6313      	str	r3, [r2, #48]	; 0x30
 801d396:	4bac      	ldr	r3, [pc, #688]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d39a:	f003 0310 	and.w	r3, r3, #16
 801d39e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801d3a2:	4ba9      	ldr	r3, [pc, #676]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3a6:	4aa8      	ldr	r2, [pc, #672]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d3ac:	6313      	str	r3, [r2, #48]	; 0x30
 801d3ae:	4ba6      	ldr	r3, [pc, #664]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3b6:	627b      	str	r3, [r7, #36]	; 0x24
 801d3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801d3ba:	4ba3      	ldr	r3, [pc, #652]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3be:	4aa2      	ldr	r2, [pc, #648]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3c0:	f043 0302 	orr.w	r3, r3, #2
 801d3c4:	6313      	str	r3, [r2, #48]	; 0x30
 801d3c6:	4ba0      	ldr	r3, [pc, #640]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3ca:	f003 0302 	and.w	r3, r3, #2
 801d3ce:	623b      	str	r3, [r7, #32]
 801d3d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801d3d2:	4b9d      	ldr	r3, [pc, #628]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3d6:	4a9c      	ldr	r2, [pc, #624]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3d8:	f043 0308 	orr.w	r3, r3, #8
 801d3dc:	6313      	str	r3, [r2, #48]	; 0x30
 801d3de:	4b9a      	ldr	r3, [pc, #616]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3e2:	f003 0308 	and.w	r3, r3, #8
 801d3e6:	61fb      	str	r3, [r7, #28]
 801d3e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801d3ea:	4b97      	ldr	r3, [pc, #604]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3ee:	4a96      	ldr	r2, [pc, #600]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3f0:	f043 0304 	orr.w	r3, r3, #4
 801d3f4:	6313      	str	r3, [r2, #48]	; 0x30
 801d3f6:	4b94      	ldr	r3, [pc, #592]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3fa:	f003 0304 	and.w	r3, r3, #4
 801d3fe:	61bb      	str	r3, [r7, #24]
 801d400:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801d402:	4b91      	ldr	r3, [pc, #580]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d406:	4a90      	ldr	r2, [pc, #576]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d408:	f043 0301 	orr.w	r3, r3, #1
 801d40c:	6313      	str	r3, [r2, #48]	; 0x30
 801d40e:	4b8e      	ldr	r3, [pc, #568]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d412:	f003 0301 	and.w	r3, r3, #1
 801d416:	617b      	str	r3, [r7, #20]
 801d418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801d41a:	4b8b      	ldr	r3, [pc, #556]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d41e:	4a8a      	ldr	r2, [pc, #552]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801d424:	6313      	str	r3, [r2, #48]	; 0x30
 801d426:	4b88      	ldr	r3, [pc, #544]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d42a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d42e:	613b      	str	r3, [r7, #16]
 801d430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801d432:	4b85      	ldr	r3, [pc, #532]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d436:	4a84      	ldr	r2, [pc, #528]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d43c:	6313      	str	r3, [r2, #48]	; 0x30
 801d43e:	4b82      	ldr	r3, [pc, #520]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d446:	60fb      	str	r3, [r7, #12]
 801d448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801d44a:	4b7f      	ldr	r3, [pc, #508]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d44e:	4a7e      	ldr	r2, [pc, #504]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801d454:	6313      	str	r3, [r2, #48]	; 0x30
 801d456:	4b7c      	ldr	r3, [pc, #496]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d45a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d45e:	60bb      	str	r3, [r7, #8]
 801d460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801d462:	4b79      	ldr	r3, [pc, #484]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d466:	4a78      	ldr	r2, [pc, #480]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d468:	f043 0320 	orr.w	r3, r3, #32
 801d46c:	6313      	str	r3, [r2, #48]	; 0x30
 801d46e:	4b76      	ldr	r3, [pc, #472]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d472:	f003 0320 	and.w	r3, r3, #32
 801d476:	607b      	str	r3, [r7, #4]
 801d478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801d47a:	4b73      	ldr	r3, [pc, #460]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d47e:	4a72      	ldr	r2, [pc, #456]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d484:	6313      	str	r3, [r2, #48]	; 0x30
 801d486:	4b70      	ldr	r3, [pc, #448]	; (801d648 <MX_GPIO_Init+0x2d4>)
 801d488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d48e:	603b      	str	r3, [r7, #0]
 801d490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FS_PowerSwitchOn_GPIO_Port, FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 801d492:	2200      	movs	r2, #0
 801d494:	2120      	movs	r1, #32
 801d496:	486d      	ldr	r0, [pc, #436]	; (801d64c <MX_GPIO_Init+0x2d8>)
 801d498:	f7e5 fd6a 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 801d49c:	2201      	movs	r2, #1
 801d49e:	2108      	movs	r1, #8
 801d4a0:	486b      	ldr	r0, [pc, #428]	; (801d650 <MX_GPIO_Init+0x2dc>)
 801d4a2:	f7e5 fd65 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 801d4a6:	2201      	movs	r2, #1
 801d4a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801d4ac:	4869      	ldr	r0, [pc, #420]	; (801d654 <MX_GPIO_Init+0x2e0>)
 801d4ae:	f7e5 fd5f 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 801d4b2:	236c      	movs	r3, #108	; 0x6c
 801d4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d4b6:	2303      	movs	r3, #3
 801d4b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801d4be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d4c2:	4619      	mov	r1, r3
 801d4c4:	4864      	ldr	r0, [pc, #400]	; (801d658 <MX_GPIO_Init+0x2e4>)
 801d4c6:	f7e5 f9b9 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 PG10
                           PG9 PG7 PG6 PG3
                           PG2 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10
 801d4ca:	f646 63ec 	movw	r3, #28396	; 0x6eec
 801d4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d4d0:	2303      	movs	r3, #3
 801d4d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801d4d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d4dc:	4619      	mov	r1, r3
 801d4de:	485f      	ldr	r0, [pc, #380]	; (801d65c <MX_GPIO_Init+0x2e8>)
 801d4e0:	f7e5 f9ac 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 801d4e4:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 801d4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d4ea:	2303      	movs	r3, #3
 801d4ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d4ee:	2300      	movs	r3, #0
 801d4f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801d4f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d4f6:	4619      	mov	r1, r3
 801d4f8:	4859      	ldr	r0, [pc, #356]	; (801d660 <MX_GPIO_Init+0x2ec>)
 801d4fa:	f7e5 f99f 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD3 PD4
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 801d4fe:	f643 03d8 	movw	r3, #14552	; 0x38d8
 801d502:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d504:	2303      	movs	r3, #3
 801d506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d508:	2300      	movs	r3, #0
 801d50a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801d50c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d510:	4619      	mov	r1, r3
 801d512:	484e      	ldr	r0, [pc, #312]	; (801d64c <MX_GPIO_Init+0x2d8>)
 801d514:	f7e5 f992 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA8
                           PA1 PA0 PA4 PA2
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
 801d518:	f248 73d7 	movw	r3, #34775	; 0x87d7
 801d51c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d51e:	2303      	movs	r3, #3
 801d520:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d522:	2300      	movs	r3, #0
 801d524:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d52a:	4619      	mov	r1, r3
 801d52c:	484d      	ldr	r0, [pc, #308]	; (801d664 <MX_GPIO_Init+0x2f0>)
 801d52e:	f7e5 f985 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 801d532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d536:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d538:	2303      	movs	r3, #3
 801d53a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d53c:	2300      	movs	r3, #0
 801d53e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801d540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d544:	4619      	mov	r1, r3
 801d546:	4848      	ldr	r0, [pc, #288]	; (801d668 <MX_GPIO_Init+0x2f4>)
 801d548:	f7e5 f978 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3;
 801d54c:	f44f 7384 	mov.w	r3, #264	; 0x108
 801d550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d552:	2303      	movs	r3, #3
 801d554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d556:	2300      	movs	r3, #0
 801d558:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801d55a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d55e:	4619      	mov	r1, r3
 801d560:	483c      	ldr	r0, [pc, #240]	; (801d654 <MX_GPIO_Init+0x2e0>)
 801d562:	f7e5 f96b 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FS_PowerSwitchOn_Pin;
 801d566:	2320      	movs	r3, #32
 801d568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d56a:	2301      	movs	r3, #1
 801d56c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d56e:	2300      	movs	r3, #0
 801d570:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d572:	2300      	movs	r3, #0
 801d574:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 801d576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d57a:	4619      	mov	r1, r3
 801d57c:	4833      	ldr	r0, [pc, #204]	; (801d64c <MX_GPIO_Init+0x2d8>)
 801d57e:	f7e5 f95d 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = KBD_INT_Pin|LCD_INT_Pin;
 801d582:	f242 0304 	movw	r3, #8196	; 0x2004
 801d586:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d588:	4b38      	ldr	r3, [pc, #224]	; (801d66c <MX_GPIO_Init+0x2f8>)
 801d58a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d58c:	2300      	movs	r3, #0
 801d58e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801d590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d594:	4619      	mov	r1, r3
 801d596:	482f      	ldr	r0, [pc, #188]	; (801d654 <MX_GPIO_Init+0x2e0>)
 801d598:	f7e5 f950 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 801d59c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801d5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801d5a2:	2300      	movs	r3, #0
 801d5a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d5a6:	2301      	movs	r3, #1
 801d5a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 801d5aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d5ae:	4619      	mov	r1, r3
 801d5b0:	482f      	ldr	r0, [pc, #188]	; (801d670 <MX_GPIO_Init+0x2fc>)
 801d5b2:	f7e5 f943 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 801d5b6:	2308      	movs	r3, #8
 801d5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d5ba:	2301      	movs	r3, #1
 801d5bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d5be:	2300      	movs	r3, #0
 801d5c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801d5c2:	2302      	movs	r3, #2
 801d5c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 801d5c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d5ca:	4619      	mov	r1, r3
 801d5cc:	4820      	ldr	r0, [pc, #128]	; (801d650 <MX_GPIO_Init+0x2dc>)
 801d5ce:	f7e5 f935 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH2
                           PH12 PH9 PH11 PH6
                           PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 801d5d2:	f64f 6344 	movw	r3, #65092	; 0xfe44
 801d5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d5d8:	2303      	movs	r3, #3
 801d5da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d5dc:	2300      	movs	r3, #0
 801d5de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801d5e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d5e4:	4619      	mov	r1, r3
 801d5e6:	4823      	ldr	r0, [pc, #140]	; (801d674 <MX_GPIO_Init+0x300>)
 801d5e8:	f7e5 f928 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 801d5ec:	f24c 03f6 	movw	r3, #49398	; 0xc0f6
 801d5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d5f2:	2303      	movs	r3, #3
 801d5f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d5fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d5fe:	4619      	mov	r1, r3
 801d600:	481b      	ldr	r0, [pc, #108]	; (801d670 <MX_GPIO_Init+0x2fc>)
 801d602:	f7e5 f91b 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 801d606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d60a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d60c:	2301      	movs	r3, #1
 801d60e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d610:	2300      	movs	r3, #0
 801d612:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801d614:	2302      	movs	r3, #2
 801d616:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 801d618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d61c:	4619      	mov	r1, r3
 801d61e:	480d      	ldr	r0, [pc, #52]	; (801d654 <MX_GPIO_Init+0x2e0>)
 801d620:	f7e5 f90c 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 801d624:	2301      	movs	r3, #1
 801d626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d628:	4b13      	ldr	r3, [pc, #76]	; (801d678 <MX_GPIO_Init+0x304>)
 801d62a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d62c:	2301      	movs	r3, #1
 801d62e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 801d630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d634:	4619      	mov	r1, r3
 801d636:	4807      	ldr	r0, [pc, #28]	; (801d654 <MX_GPIO_Init+0x2e0>)
 801d638:	f7e5 f900 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 801d63c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801d640:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d642:	2303      	movs	r3, #3
 801d644:	633b      	str	r3, [r7, #48]	; 0x30
 801d646:	e019      	b.n	801d67c <MX_GPIO_Init+0x308>
 801d648:	40023800 	.word	0x40023800
 801d64c:	40020c00 	.word	0x40020c00
 801d650:	40022800 	.word	0x40022800
 801d654:	40022000 	.word	0x40022000
 801d658:	40021000 	.word	0x40021000
 801d65c:	40021800 	.word	0x40021800
 801d660:	40020400 	.word	0x40020400
 801d664:	40020000 	.word	0x40020000
 801d668:	40022400 	.word	0x40022400
 801d66c:	10110000 	.word	0x10110000
 801d670:	40020800 	.word	0x40020800
 801d674:	40021c00 	.word	0x40021c00
 801d678:	10210000 	.word	0x10210000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d67c:	2300      	movs	r3, #0
 801d67e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d684:	4619      	mov	r1, r3
 801d686:	480f      	ldr	r0, [pc, #60]	; (801d6c4 <MX_GPIO_Init+0x350>)
 801d688:	f7e5 f8d8 	bl	800283c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 801d68c:	2200      	movs	r2, #0
 801d68e:	2102      	movs	r1, #2
 801d690:	2006      	movs	r0, #6
 801d692:	f7e3 ff31 	bl	80014f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 801d696:	2006      	movs	r0, #6
 801d698:	f7e3 ff5a 	bl	8001550 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 801d69c:	2200      	movs	r2, #0
 801d69e:	2102      	movs	r1, #2
 801d6a0:	2008      	movs	r0, #8
 801d6a2:	f7e3 ff29 	bl	80014f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 801d6a6:	2008      	movs	r0, #8
 801d6a8:	f7e3 ff52 	bl	8001550 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 801d6ac:	2200      	movs	r2, #0
 801d6ae:	2103      	movs	r1, #3
 801d6b0:	2028      	movs	r0, #40	; 0x28
 801d6b2:	f7e3 ff21 	bl	80014f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801d6b6:	2028      	movs	r0, #40	; 0x28
 801d6b8:	f7e3 ff4a 	bl	8001550 <HAL_NVIC_EnableIRQ>

}
 801d6bc:	bf00      	nop
 801d6be:	3740      	adds	r7, #64	; 0x40
 801d6c0:	46bd      	mov	sp, r7
 801d6c2:	bd80      	pop	{r7, pc}
 801d6c4:	40021400 	.word	0x40021400

0801d6c8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 801d6c8:	b580      	push	{r7, lr}
 801d6ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 801d6cc:	4b1b      	ldr	r3, [pc, #108]	; (801d73c <MX_I2C3_Init+0x74>)
 801d6ce:	4a1c      	ldr	r2, [pc, #112]	; (801d740 <MX_I2C3_Init+0x78>)
 801d6d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 801d6d2:	4b1a      	ldr	r3, [pc, #104]	; (801d73c <MX_I2C3_Init+0x74>)
 801d6d4:	4a1b      	ldr	r2, [pc, #108]	; (801d744 <MX_I2C3_Init+0x7c>)
 801d6d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 801d6d8:	4b18      	ldr	r3, [pc, #96]	; (801d73c <MX_I2C3_Init+0x74>)
 801d6da:	2200      	movs	r2, #0
 801d6dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801d6de:	4b17      	ldr	r3, [pc, #92]	; (801d73c <MX_I2C3_Init+0x74>)
 801d6e0:	2201      	movs	r2, #1
 801d6e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801d6e4:	4b15      	ldr	r3, [pc, #84]	; (801d73c <MX_I2C3_Init+0x74>)
 801d6e6:	2200      	movs	r2, #0
 801d6e8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 801d6ea:	4b14      	ldr	r3, [pc, #80]	; (801d73c <MX_I2C3_Init+0x74>)
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801d6f0:	4b12      	ldr	r3, [pc, #72]	; (801d73c <MX_I2C3_Init+0x74>)
 801d6f2:	2200      	movs	r2, #0
 801d6f4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801d6f6:	4b11      	ldr	r3, [pc, #68]	; (801d73c <MX_I2C3_Init+0x74>)
 801d6f8:	2200      	movs	r2, #0
 801d6fa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801d6fc:	4b0f      	ldr	r3, [pc, #60]	; (801d73c <MX_I2C3_Init+0x74>)
 801d6fe:	2200      	movs	r2, #0
 801d700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 801d702:	480e      	ldr	r0, [pc, #56]	; (801d73c <MX_I2C3_Init+0x74>)
 801d704:	f7e7 f8ec 	bl	80048e0 <HAL_I2C_Init>
 801d708:	4603      	mov	r3, r0
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d001      	beq.n	801d712 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 801d70e:	f000 ff80 	bl	801e612 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801d712:	2100      	movs	r1, #0
 801d714:	4809      	ldr	r0, [pc, #36]	; (801d73c <MX_I2C3_Init+0x74>)
 801d716:	f7e7 feb5 	bl	8005484 <HAL_I2CEx_ConfigAnalogFilter>
 801d71a:	4603      	mov	r3, r0
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d001      	beq.n	801d724 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 801d720:	f000 ff77 	bl	801e612 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 801d724:	2100      	movs	r1, #0
 801d726:	4805      	ldr	r0, [pc, #20]	; (801d73c <MX_I2C3_Init+0x74>)
 801d728:	f7e7 ff22 	bl	8005570 <HAL_I2CEx_ConfigDigitalFilter>
 801d72c:	4603      	mov	r3, r0
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d001      	beq.n	801d736 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 801d732:	f000 ff6e 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 801d736:	bf00      	nop
 801d738:	bd80      	pop	{r7, pc}
 801d73a:	bf00      	nop
 801d73c:	200009b0 	.word	0x200009b0
 801d740:	40005c00 	.word	0x40005c00
 801d744:	20303e5d 	.word	0x20303e5d

0801d748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801d748:	b580      	push	{r7, lr}
 801d74a:	b0aa      	sub	sp, #168	; 0xa8
 801d74c:	af00      	add	r7, sp, #0
 801d74e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d750:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801d754:	2200      	movs	r2, #0
 801d756:	601a      	str	r2, [r3, #0]
 801d758:	605a      	str	r2, [r3, #4]
 801d75a:	609a      	str	r2, [r3, #8]
 801d75c:	60da      	str	r2, [r3, #12]
 801d75e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801d760:	f107 0310 	add.w	r3, r7, #16
 801d764:	2284      	movs	r2, #132	; 0x84
 801d766:	2100      	movs	r1, #0
 801d768:	4618      	mov	r0, r3
 801d76a:	f008 fc05 	bl	8025f78 <memset>
  if(i2cHandle->Instance==I2C3)
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	4a22      	ldr	r2, [pc, #136]	; (801d7fc <HAL_I2C_MspInit+0xb4>)
 801d774:	4293      	cmp	r3, r2
 801d776:	d13c      	bne.n	801d7f2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 801d778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801d77c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 801d77e:	2300      	movs	r3, #0
 801d780:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801d782:	f107 0310 	add.w	r3, r7, #16
 801d786:	4618      	mov	r0, r3
 801d788:	f7e9 f9d4 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 801d78c:	4603      	mov	r3, r0
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d001      	beq.n	801d796 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 801d792:	f000 ff3e 	bl	801e612 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 801d796:	4b1a      	ldr	r3, [pc, #104]	; (801d800 <HAL_I2C_MspInit+0xb8>)
 801d798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d79a:	4a19      	ldr	r2, [pc, #100]	; (801d800 <HAL_I2C_MspInit+0xb8>)
 801d79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d7a0:	6313      	str	r3, [r2, #48]	; 0x30
 801d7a2:	4b17      	ldr	r3, [pc, #92]	; (801d800 <HAL_I2C_MspInit+0xb8>)
 801d7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d7aa:	60fb      	str	r3, [r7, #12]
 801d7ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 801d7ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801d7b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801d7b6:	2312      	movs	r3, #18
 801d7b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d7bc:	2301      	movs	r3, #1
 801d7be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d7c2:	2303      	movs	r3, #3
 801d7c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801d7c8:	2304      	movs	r3, #4
 801d7ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801d7ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801d7d2:	4619      	mov	r1, r3
 801d7d4:	480b      	ldr	r0, [pc, #44]	; (801d804 <HAL_I2C_MspInit+0xbc>)
 801d7d6:	f7e5 f831 	bl	800283c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 801d7da:	4b09      	ldr	r3, [pc, #36]	; (801d800 <HAL_I2C_MspInit+0xb8>)
 801d7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d7de:	4a08      	ldr	r2, [pc, #32]	; (801d800 <HAL_I2C_MspInit+0xb8>)
 801d7e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801d7e4:	6413      	str	r3, [r2, #64]	; 0x40
 801d7e6:	4b06      	ldr	r3, [pc, #24]	; (801d800 <HAL_I2C_MspInit+0xb8>)
 801d7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d7ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d7ee:	60bb      	str	r3, [r7, #8]
 801d7f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 801d7f2:	bf00      	nop
 801d7f4:	37a8      	adds	r7, #168	; 0xa8
 801d7f6:	46bd      	mov	sp, r7
 801d7f8:	bd80      	pop	{r7, pc}
 801d7fa:	bf00      	nop
 801d7fc:	40005c00 	.word	0x40005c00
 801d800:	40023800 	.word	0x40023800
 801d804:	40021c00 	.word	0x40021c00

0801d808 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 801d808:	b580      	push	{r7, lr}
 801d80a:	b09a      	sub	sp, #104	; 0x68
 801d80c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 801d80e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d812:	2234      	movs	r2, #52	; 0x34
 801d814:	2100      	movs	r1, #0
 801d816:	4618      	mov	r0, r3
 801d818:	f008 fbae 	bl	8025f78 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 801d81c:	463b      	mov	r3, r7
 801d81e:	2234      	movs	r2, #52	; 0x34
 801d820:	2100      	movs	r1, #0
 801d822:	4618      	mov	r0, r3
 801d824:	f008 fba8 	bl	8025f78 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 801d828:	4b52      	ldr	r3, [pc, #328]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d82a:	4a53      	ldr	r2, [pc, #332]	; (801d978 <MX_LTDC_Init+0x170>)
 801d82c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801d82e:	4b51      	ldr	r3, [pc, #324]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d830:	2200      	movs	r2, #0
 801d832:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801d834:	4b4f      	ldr	r3, [pc, #316]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d836:	2200      	movs	r2, #0
 801d838:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801d83a:	4b4e      	ldr	r3, [pc, #312]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d83c:	2200      	movs	r2, #0
 801d83e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801d840:	4b4c      	ldr	r3, [pc, #304]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d842:	2200      	movs	r2, #0
 801d844:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 801d846:	4b4b      	ldr	r3, [pc, #300]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d848:	2200      	movs	r2, #0
 801d84a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 801d84c:	4b49      	ldr	r3, [pc, #292]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d84e:	2209      	movs	r2, #9
 801d850:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 801d852:	4b48      	ldr	r3, [pc, #288]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d854:	222b      	movs	r2, #43	; 0x2b
 801d856:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 29;
 801d858:	4b46      	ldr	r3, [pc, #280]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d85a:	221d      	movs	r2, #29
 801d85c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 801d85e:	4b45      	ldr	r3, [pc, #276]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d860:	f240 220b 	movw	r2, #523	; 0x20b
 801d864:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 301;
 801d866:	4b43      	ldr	r3, [pc, #268]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d868:	f240 122d 	movw	r2, #301	; 0x12d
 801d86c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 801d86e:	4b41      	ldr	r3, [pc, #260]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d870:	f240 2213 	movw	r2, #531	; 0x213
 801d874:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 305;
 801d876:	4b3f      	ldr	r3, [pc, #252]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d878:	f240 1231 	movw	r2, #305	; 0x131
 801d87c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801d87e:	4b3d      	ldr	r3, [pc, #244]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d880:	2200      	movs	r2, #0
 801d882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801d886:	4b3b      	ldr	r3, [pc, #236]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d888:	2200      	movs	r2, #0
 801d88a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801d88e:	4b39      	ldr	r3, [pc, #228]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d890:	2200      	movs	r2, #0
 801d892:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801d896:	4837      	ldr	r0, [pc, #220]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d898:	f7e7 fede 	bl	8005658 <HAL_LTDC_Init>
 801d89c:	4603      	mov	r3, r0
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d001      	beq.n	801d8a6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 801d8a2:	f000 feb6 	bl	801e612 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 801d8a6:	2300      	movs	r3, #0
 801d8a8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 801d8aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801d8ae:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 801d8b0:	2300      	movs	r3, #0
 801d8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 801d8b4:	f44f 7388 	mov.w	r3, #272	; 0x110
 801d8b8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801d8ba:	2302      	movs	r3, #2
 801d8bc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 801d8be:	2300      	movs	r3, #0
 801d8c0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801d8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d8ca:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 801d8cc:	2305      	movs	r3, #5
 801d8ce:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 801d8d0:	2300      	movs	r3, #0
 801d8d2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 801d8d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801d8d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 801d8da:	f44f 7388 	mov.w	r3, #272	; 0x110
 801d8de:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 801d8e0:	2300      	movs	r3, #0
 801d8e2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 801d8e6:	2300      	movs	r3, #0
 801d8e8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 801d8ec:	2300      	movs	r3, #0
 801d8ee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801d8f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d8f6:	2200      	movs	r2, #0
 801d8f8:	4619      	mov	r1, r3
 801d8fa:	481e      	ldr	r0, [pc, #120]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d8fc:	f7e8 f806 	bl	800590c <HAL_LTDC_ConfigLayer>
 801d900:	4603      	mov	r3, r0
 801d902:	2b00      	cmp	r3, #0
 801d904:	d001      	beq.n	801d90a <MX_LTDC_Init+0x102>
  {
    Error_Handler();
 801d906:	f000 fe84 	bl	801e612 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 801d90a:	2300      	movs	r3, #0
 801d90c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 480;
 801d90e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801d912:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 801d914:	2300      	movs	r3, #0
 801d916:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 272;
 801d918:	f44f 7388 	mov.w	r3, #272	; 0x110
 801d91c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801d91e:	2302      	movs	r3, #2
 801d920:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 801d922:	2300      	movs	r3, #0
 801d924:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 801d926:	2300      	movs	r3, #0
 801d928:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801d92a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d92e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 801d930:	2305      	movs	r3, #5
 801d932:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 801d934:	2300      	movs	r3, #0
 801d936:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 801d938:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801d93c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 801d93e:	f44f 7388 	mov.w	r3, #272	; 0x110
 801d942:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 801d944:	2300      	movs	r3, #0
 801d946:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 801d94a:	2300      	movs	r3, #0
 801d94c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 801d950:	2300      	movs	r3, #0
 801d952:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 801d956:	463b      	mov	r3, r7
 801d958:	2201      	movs	r2, #1
 801d95a:	4619      	mov	r1, r3
 801d95c:	4805      	ldr	r0, [pc, #20]	; (801d974 <MX_LTDC_Init+0x16c>)
 801d95e:	f7e7 ffd5 	bl	800590c <HAL_LTDC_ConfigLayer>
 801d962:	4603      	mov	r3, r0
 801d964:	2b00      	cmp	r3, #0
 801d966:	d001      	beq.n	801d96c <MX_LTDC_Init+0x164>
  {
    Error_Handler();
 801d968:	f000 fe53 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 801d96c:	bf00      	nop
 801d96e:	3768      	adds	r7, #104	; 0x68
 801d970:	46bd      	mov	sp, r7
 801d972:	bd80      	pop	{r7, pc}
 801d974:	200009fc 	.word	0x200009fc
 801d978:	40016800 	.word	0x40016800

0801d97c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 801d97c:	b580      	push	{r7, lr}
 801d97e:	b0ae      	sub	sp, #184	; 0xb8
 801d980:	af00      	add	r7, sp, #0
 801d982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d984:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d988:	2200      	movs	r2, #0
 801d98a:	601a      	str	r2, [r3, #0]
 801d98c:	605a      	str	r2, [r3, #4]
 801d98e:	609a      	str	r2, [r3, #8]
 801d990:	60da      	str	r2, [r3, #12]
 801d992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801d994:	f107 0320 	add.w	r3, r7, #32
 801d998:	2284      	movs	r2, #132	; 0x84
 801d99a:	2100      	movs	r1, #0
 801d99c:	4618      	mov	r0, r3
 801d99e:	f008 faeb 	bl	8025f78 <memset>
  if(ltdcHandle->Instance==LTDC)
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	4a6a      	ldr	r2, [pc, #424]	; (801db50 <HAL_LTDC_MspInit+0x1d4>)
 801d9a8:	4293      	cmp	r3, r2
 801d9aa:	f040 80cd 	bne.w	801db48 <HAL_LTDC_MspInit+0x1cc>
	//__HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI);
  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 801d9ae:	2308      	movs	r3, #8
 801d9b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 240;
 801d9b2:	23f0      	movs	r3, #240	; 0xf0
 801d9b4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 6;
 801d9b6:	2306      	movs	r3, #6
 801d9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 801d9ba:	2302      	movs	r3, #2
 801d9bc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 801d9be:	2302      	movs	r3, #2
 801d9c0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 801d9c2:	2301      	movs	r3, #1
 801d9c4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 801d9c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801d9ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801d9cc:	f107 0320 	add.w	r3, r7, #32
 801d9d0:	4618      	mov	r0, r3
 801d9d2:	f7e9 f8af 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 801d9d6:	4603      	mov	r3, r0
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d001      	beq.n	801d9e0 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 801d9dc:	f000 fe19 	bl	801e612 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801d9e0:	4b5c      	ldr	r3, [pc, #368]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801d9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9e4:	4a5b      	ldr	r2, [pc, #364]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801d9e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d9ea:	6453      	str	r3, [r2, #68]	; 0x44
 801d9ec:	4b59      	ldr	r3, [pc, #356]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801d9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d9f4:	61fb      	str	r3, [r7, #28]
 801d9f6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 801d9f8:	4b56      	ldr	r3, [pc, #344]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801d9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9fc:	4a55      	ldr	r2, [pc, #340]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801d9fe:	f043 0310 	orr.w	r3, r3, #16
 801da02:	6313      	str	r3, [r2, #48]	; 0x30
 801da04:	4b53      	ldr	r3, [pc, #332]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da08:	f003 0310 	and.w	r3, r3, #16
 801da0c:	61bb      	str	r3, [r7, #24]
 801da0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 801da10:	4b50      	ldr	r3, [pc, #320]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da14:	4a4f      	ldr	r2, [pc, #316]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801da1a:	6313      	str	r3, [r2, #48]	; 0x30
 801da1c:	4b4d      	ldr	r3, [pc, #308]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801da24:	617b      	str	r3, [r7, #20]
 801da26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 801da28:	4b4a      	ldr	r3, [pc, #296]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da2c:	4a49      	ldr	r2, [pc, #292]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801da32:	6313      	str	r3, [r2, #48]	; 0x30
 801da34:	4b47      	ldr	r3, [pc, #284]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801da3c:	613b      	str	r3, [r7, #16]
 801da3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801da40:	4b44      	ldr	r3, [pc, #272]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da44:	4a43      	ldr	r2, [pc, #268]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da4a:	6313      	str	r3, [r2, #48]	; 0x30
 801da4c:	4b41      	ldr	r3, [pc, #260]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801da54:	60fb      	str	r3, [r7, #12]
 801da56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801da58:	4b3e      	ldr	r3, [pc, #248]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da5c:	4a3d      	ldr	r2, [pc, #244]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801da62:	6313      	str	r3, [r2, #48]	; 0x30
 801da64:	4b3b      	ldr	r3, [pc, #236]	; (801db54 <HAL_LTDC_MspInit+0x1d8>)
 801da66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801da6c:	60bb      	str	r3, [r7, #8]
 801da6e:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 801da70:	2310      	movs	r3, #16
 801da72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801da76:	2302      	movs	r3, #2
 801da78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da7c:	2300      	movs	r3, #0
 801da7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801da82:	2303      	movs	r3, #3
 801da84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801da88:	230e      	movs	r3, #14
 801da8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801da8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801da92:	4619      	mov	r1, r3
 801da94:	4830      	ldr	r0, [pc, #192]	; (801db58 <HAL_LTDC_MspInit+0x1dc>)
 801da96:	f7e4 fed1 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 801da9a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 801da9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801daa2:	2302      	movs	r3, #2
 801daa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801daa8:	2300      	movs	r3, #0
 801daaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801daae:	2303      	movs	r3, #3
 801dab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801dab4:	230e      	movs	r3, #14
 801dab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801daba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801dabe:	4619      	mov	r1, r3
 801dac0:	4826      	ldr	r0, [pc, #152]	; (801db5c <HAL_LTDC_MspInit+0x1e0>)
 801dac2:	f7e4 febb 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 801dac6:	23f7      	movs	r3, #247	; 0xf7
 801dac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dacc:	2302      	movs	r3, #2
 801dace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dad2:	2300      	movs	r3, #0
 801dad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dad8:	2303      	movs	r3, #3
 801dada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801dade:	230e      	movs	r3, #14
 801dae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801dae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801dae8:	4619      	mov	r1, r3
 801daea:	481d      	ldr	r0, [pc, #116]	; (801db60 <HAL_LTDC_MspInit+0x1e4>)
 801daec:	f7e4 fea6 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801daf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801daf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801daf8:	2302      	movs	r3, #2
 801dafa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dafe:	2300      	movs	r3, #0
 801db00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801db04:	2303      	movs	r3, #3
 801db06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801db0a:	2309      	movs	r3, #9
 801db0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801db10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801db14:	4619      	mov	r1, r3
 801db16:	4813      	ldr	r0, [pc, #76]	; (801db64 <HAL_LTDC_MspInit+0x1e8>)
 801db18:	f7e4 fe90 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 801db1c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 801db20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801db24:	2302      	movs	r3, #2
 801db26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801db2a:	2300      	movs	r3, #0
 801db2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801db30:	2303      	movs	r3, #3
 801db32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801db36:	230e      	movs	r3, #14
 801db38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801db3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801db40:	4619      	mov	r1, r3
 801db42:	4809      	ldr	r0, [pc, #36]	; (801db68 <HAL_LTDC_MspInit+0x1ec>)
 801db44:	f7e4 fe7a 	bl	800283c <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 801db48:	bf00      	nop
 801db4a:	37b8      	adds	r7, #184	; 0xb8
 801db4c:	46bd      	mov	sp, r7
 801db4e:	bd80      	pop	{r7, pc}
 801db50:	40016800 	.word	0x40016800
 801db54:	40023800 	.word	0x40023800
 801db58:	40021000 	.word	0x40021000
 801db5c:	40022400 	.word	0x40022400
 801db60:	40022800 	.word	0x40022800
 801db64:	40021800 	.word	0x40021800
 801db68:	40022000 	.word	0x40022000

0801db6c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 801db6c:	b580      	push	{r7, lr}
 801db6e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hltdc);
 801db70:	4b0a      	ldr	r3, [pc, #40]	; (801db9c <BSP_LCD_DisplayOn+0x30>)
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	699a      	ldr	r2, [r3, #24]
 801db76:	4b09      	ldr	r3, [pc, #36]	; (801db9c <BSP_LCD_DisplayOn+0x30>)
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	f042 0201 	orr.w	r2, r2, #1
 801db7e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 801db80:	2201      	movs	r2, #1
 801db82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801db86:	4806      	ldr	r0, [pc, #24]	; (801dba0 <BSP_LCD_DisplayOn+0x34>)
 801db88:	f7e5 f9f2 	bl	8002f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 801db8c:	2201      	movs	r2, #1
 801db8e:	2108      	movs	r1, #8
 801db90:	4804      	ldr	r0, [pc, #16]	; (801dba4 <BSP_LCD_DisplayOn+0x38>)
 801db92:	f7e5 f9ed 	bl	8002f70 <HAL_GPIO_WritePin>
}
 801db96:	bf00      	nop
 801db98:	bd80      	pop	{r7, pc}
 801db9a:	bf00      	nop
 801db9c:	200009fc 	.word	0x200009fc
 801dba0:	40022000 	.word	0x40022000
 801dba4:	40022800 	.word	0x40022800

0801dba8 <BSP_LCD_DisplayOff>:
/**
  * @brief  Disables the display.
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	af00      	add	r7, sp, #0
  /* Display Off */
  __HAL_LTDC_DISABLE(&hltdc);
 801dbac:	4b0a      	ldr	r3, [pc, #40]	; (801dbd8 <BSP_LCD_DisplayOff+0x30>)
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	699a      	ldr	r2, [r3, #24]
 801dbb2:	4b09      	ldr	r3, [pc, #36]	; (801dbd8 <BSP_LCD_DisplayOff+0x30>)
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	f022 0201 	bic.w	r2, r2, #1
 801dbba:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
 801dbbc:	2200      	movs	r2, #0
 801dbbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801dbc2:	4806      	ldr	r0, [pc, #24]	; (801dbdc <BSP_LCD_DisplayOff+0x34>)
 801dbc4:	f7e5 f9d4 	bl	8002f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
 801dbc8:	2200      	movs	r2, #0
 801dbca:	2108      	movs	r1, #8
 801dbcc:	4804      	ldr	r0, [pc, #16]	; (801dbe0 <BSP_LCD_DisplayOff+0x38>)
 801dbce:	f7e5 f9cf 	bl	8002f70 <HAL_GPIO_WritePin>
}
 801dbd2:	bf00      	nop
 801dbd4:	bd80      	pop	{r7, pc}
 801dbd6:	bf00      	nop
 801dbd8:	200009fc 	.word	0x200009fc
 801dbdc:	40022000 	.word	0x40022000
 801dbe0:	40022800 	.word	0x40022800

0801dbe4 <SCB_EnableICache>:
{
 801dbe4:	b480      	push	{r7}
 801dbe6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801dbe8:	f3bf 8f4f 	dsb	sy
}
 801dbec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801dbee:	f3bf 8f6f 	isb	sy
}
 801dbf2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 801dbf4:	4b0d      	ldr	r3, [pc, #52]	; (801dc2c <SCB_EnableICache+0x48>)
 801dbf6:	2200      	movs	r2, #0
 801dbf8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 801dbfc:	f3bf 8f4f 	dsb	sy
}
 801dc00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801dc02:	f3bf 8f6f 	isb	sy
}
 801dc06:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 801dc08:	4b08      	ldr	r3, [pc, #32]	; (801dc2c <SCB_EnableICache+0x48>)
 801dc0a:	695b      	ldr	r3, [r3, #20]
 801dc0c:	4a07      	ldr	r2, [pc, #28]	; (801dc2c <SCB_EnableICache+0x48>)
 801dc0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801dc12:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801dc14:	f3bf 8f4f 	dsb	sy
}
 801dc18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801dc1a:	f3bf 8f6f 	isb	sy
}
 801dc1e:	bf00      	nop
}
 801dc20:	bf00      	nop
 801dc22:	46bd      	mov	sp, r7
 801dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc28:	4770      	bx	lr
 801dc2a:	bf00      	nop
 801dc2c:	e000ed00 	.word	0xe000ed00

0801dc30 <SCB_EnableDCache>:
{
 801dc30:	b480      	push	{r7}
 801dc32:	b085      	sub	sp, #20
 801dc34:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801dc36:	4b1f      	ldr	r3, [pc, #124]	; (801dcb4 <SCB_EnableDCache+0x84>)
 801dc38:	2200      	movs	r2, #0
 801dc3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801dc3e:	f3bf 8f4f 	dsb	sy
}
 801dc42:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 801dc44:	4b1b      	ldr	r3, [pc, #108]	; (801dcb4 <SCB_EnableDCache+0x84>)
 801dc46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801dc4a:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	0b5b      	lsrs	r3, r3, #13
 801dc50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801dc54:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	08db      	lsrs	r3, r3, #3
 801dc5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801dc5e:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	015a      	lsls	r2, r3, #5
 801dc64:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801dc68:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 801dc6a:	68ba      	ldr	r2, [r7, #8]
 801dc6c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801dc6e:	4911      	ldr	r1, [pc, #68]	; (801dcb4 <SCB_EnableDCache+0x84>)
 801dc70:	4313      	orrs	r3, r2
 801dc72:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 801dc76:	68bb      	ldr	r3, [r7, #8]
 801dc78:	1e5a      	subs	r2, r3, #1
 801dc7a:	60ba      	str	r2, [r7, #8]
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	d1ef      	bne.n	801dc60 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	1e5a      	subs	r2, r3, #1
 801dc84:	60fa      	str	r2, [r7, #12]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d1e5      	bne.n	801dc56 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 801dc8a:	f3bf 8f4f 	dsb	sy
}
 801dc8e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 801dc90:	4b08      	ldr	r3, [pc, #32]	; (801dcb4 <SCB_EnableDCache+0x84>)
 801dc92:	695b      	ldr	r3, [r3, #20]
 801dc94:	4a07      	ldr	r2, [pc, #28]	; (801dcb4 <SCB_EnableDCache+0x84>)
 801dc96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801dc9a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801dc9c:	f3bf 8f4f 	dsb	sy
}
 801dca0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801dca2:	f3bf 8f6f 	isb	sy
}
 801dca6:	bf00      	nop
}
 801dca8:	bf00      	nop
 801dcaa:	3714      	adds	r7, #20
 801dcac:	46bd      	mov	sp, r7
 801dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcb2:	4770      	bx	lr
 801dcb4:	e000ed00 	.word	0xe000ed00

0801dcb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801dcb8:	b580      	push	{r7, lr}
 801dcba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 801dcbc:	f000 fca0 	bl	801e600 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 801dcc0:	f7ff ff90 	bl	801dbe4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 801dcc4:	f7ff ffb4 	bl	801dc30 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801dcc8:	f7e3 fa78 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801dccc:	f000 fa22 	bl	801e114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801dcd0:	f7ff fb50 	bl	801d374 <MX_GPIO_Init>
  MX_DMA_Init();
 801dcd4:	f7fe feb8 	bl	801ca48 <MX_DMA_Init>
  MX_LTDC_Init();
 801dcd8:	f7ff fd96 	bl	801d808 <MX_LTDC_Init>
  MX_FMC_Init();
 801dcdc:	f7fe ffbe 	bl	801cc5c <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 801dce0:	f002 fe92 	bl	8020a08 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 801dce4:	f7fe ff1a 	bl	801cb1c <MX_FATFS_Init>
  MX_DMA2D_Init();
 801dce8:	f7fe fecc 	bl	801ca84 <MX_DMA2D_Init>
  MX_SAI2_Init();
 801dcec:	f002 fd94 	bl	8020818 <MX_SAI2_Init>
  MX_I2C3_Init();
 801dcf0:	f7ff fcea 	bl	801d6c8 <MX_I2C3_Init>
  MX_TIM4_Init();
 801dcf4:	f005 f9a8 	bl	8023048 <MX_TIM4_Init>
  MX_TIM6_Init();
 801dcf8:	f005 fa46 	bl	8023188 <MX_TIM6_Init>
  MX_TIM7_Init();
 801dcfc:	f005 fa7c 	bl	80231f8 <MX_TIM7_Init>
  MX_TIM8_Init();
 801dd00:	f005 fab2 	bl	8023268 <MX_TIM8_Init>
  MX_SPI2_Init();
 801dd04:	f002 fea2 	bl	8020a4c <MX_SPI2_Init>
  MX_TIM5_Init();
 801dd08:	f005 f9ee 	bl	80230e8 <MX_TIM5_Init>
  MX_TIM9_Init();
 801dd0c:	f005 fb00 	bl	8023310 <MX_TIM9_Init>
  MX_USB_HOST_Init();
 801dd10:	f005 fc30 	bl	8023574 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_Init(); // MT48LC4M32B2B5-6A SDRAM initialization
 801dd14:	f7fe ff2a 	bl	801cb6c <SDRAM_Init>
  menu_mode=3;
 801dd18:	4b8f      	ldr	r3, [pc, #572]	; (801df58 <main+0x2a0>)
 801dd1a:	2203      	movs	r2, #3
 801dd1c:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim4); // starft display refresh timer
 801dd1e:	488f      	ldr	r0, [pc, #572]	; (801df5c <main+0x2a4>)
 801dd20:	f7eb fe06 	bl	8009930 <HAL_TIM_Base_Start_IT>
  BSP_LCD_DisplayOff();
 801dd24:	f7ff ff40 	bl	801dba8 <BSP_LCD_DisplayOff>

  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_0, 0); // set layer 0 framebuffer address
 801dd28:	2200      	movs	r2, #0
 801dd2a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801dd2e:	488c      	ldr	r0, [pc, #560]	; (801df60 <main+0x2a8>)
 801dd30:	f7e7 fec4 	bl	8005abc <HAL_LTDC_SetAddress>
  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_1, 1); // set layer 1 framebuffer address
 801dd34:	2201      	movs	r2, #1
 801dd36:	498b      	ldr	r1, [pc, #556]	; (801df64 <main+0x2ac>)
 801dd38:	4889      	ldr	r0, [pc, #548]	; (801df60 <main+0x2a8>)
 801dd3a:	f7e7 febf 	bl	8005abc <HAL_LTDC_SetAddress>
  ClearLayer(); // clear framebuffer 0
 801dd3e:	f7fb fac9 	bl	80192d4 <ClearLayer>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer++);
 801dd42:	4b89      	ldr	r3, [pc, #548]	; (801df68 <main+0x2b0>)
 801dd44:	781b      	ldrb	r3, [r3, #0]
 801dd46:	1c5a      	adds	r2, r3, #1
 801dd48:	b2d1      	uxtb	r1, r2
 801dd4a:	4a87      	ldr	r2, [pc, #540]	; (801df68 <main+0x2b0>)
 801dd4c:	7011      	strb	r1, [r2, #0]
 801dd4e:	461a      	mov	r2, r3
 801dd50:	2100      	movs	r1, #0
 801dd52:	4883      	ldr	r0, [pc, #524]	; (801df60 <main+0x2a8>)
 801dd54:	f7e7 ff2c 	bl	8005bb0 <HAL_LTDC_SetAlpha_NoReload>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 801dd58:	4b83      	ldr	r3, [pc, #524]	; (801df68 <main+0x2b0>)
 801dd5a:	781b      	ldrb	r3, [r3, #0]
 801dd5c:	1e5a      	subs	r2, r3, #1
 801dd5e:	b2d1      	uxtb	r1, r2
 801dd60:	4a81      	ldr	r2, [pc, #516]	; (801df68 <main+0x2b0>)
 801dd62:	7011      	strb	r1, [r2, #0]
 801dd64:	461a      	mov	r2, r3
 801dd66:	21ff      	movs	r1, #255	; 0xff
 801dd68:	487d      	ldr	r0, [pc, #500]	; (801df60 <main+0x2a8>)
 801dd6a:	f7e7 ff21 	bl	8005bb0 <HAL_LTDC_SetAlpha_NoReload>
  ChangeLayers();
 801dd6e:	f7fb faf3 	bl	8019358 <ChangeLayers>
  ClearLayer(); // clear framebuffer 1
 801dd72:	f7fb faaf 	bl	80192d4 <ClearLayer>
  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 801dd76:	497d      	ldr	r1, [pc, #500]	; (801df6c <main+0x2b4>)
 801dd78:	487d      	ldr	r0, [pc, #500]	; (801df70 <main+0x2b8>)
 801dd7a:	f005 fc35 	bl	80235e8 <MX_USB_HOST_Process>
  dbgAddText("host init");
 801dd7e:	487d      	ldr	r0, [pc, #500]	; (801df74 <main+0x2bc>)
 801dd80:	f7fb fa62 	bl	8019248 <dbgAddText>
  while(((BSP_SD_IsDetected() != SD_PRESENT))&&(Appli_HS_state != APPLICATION_READY)){   //&&(Appli_FS_state != APPLICATION_START))   {
 801dd84:	e008      	b.n	801dd98 <main+0xe0>
	  menu_mode = 3;
 801dd86:	4b74      	ldr	r3, [pc, #464]	; (801df58 <main+0x2a0>)
 801dd88:	2203      	movs	r2, #3
 801dd8a:	701a      	strb	r2, [r3, #0]
	  BSP_LCD_DisplayOn();
 801dd8c:	f7ff feee 	bl	801db6c <BSP_LCD_DisplayOn>
	  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 801dd90:	4976      	ldr	r1, [pc, #472]	; (801df6c <main+0x2b4>)
 801dd92:	4877      	ldr	r0, [pc, #476]	; (801df70 <main+0x2b8>)
 801dd94:	f005 fc28 	bl	80235e8 <MX_USB_HOST_Process>
  while(((BSP_SD_IsDetected() != SD_PRESENT))&&(Appli_HS_state != APPLICATION_READY)){   //&&(Appli_FS_state != APPLICATION_START))   {
 801dd98:	f7fb fa44 	bl	8019224 <BSP_SD_IsDetected>
 801dd9c:	4603      	mov	r3, r0
 801dd9e:	2b01      	cmp	r3, #1
 801dda0:	d003      	beq.n	801ddaa <main+0xf2>
 801dda2:	4b75      	ldr	r3, [pc, #468]	; (801df78 <main+0x2c0>)
 801dda4:	781b      	ldrb	r3, [r3, #0]
 801dda6:	2b02      	cmp	r3, #2
 801dda8:	d1ed      	bne.n	801dd86 <main+0xce>
	  //HAL_Delay(2000);
  }
  dbgAddText("post usb");
 801ddaa:	4874      	ldr	r0, [pc, #464]	; (801df7c <main+0x2c4>)
 801ddac:	f7fb fa4c 	bl	8019248 <dbgAddText>

  BSP_TS_Init(480, 272); // touchscreen initialization
 801ddb0:	f44f 7188 	mov.w	r1, #272	; 0x110
 801ddb4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801ddb8:	f003 fa00 	bl	80211bc <BSP_TS_Init>
  BSP_TS_ITClear();
 801ddbc:	f003 fca6 	bl	802170c <BSP_TS_ITClear>
  BSP_TS_ITConfig();
 801ddc0:	f003 fa3c 	bl	802123c <BSP_TS_ITConfig>
  if (BSP_SD_IsDetected() == SD_PRESENT){
 801ddc4:	f7fb fa2e 	bl	8019224 <BSP_SD_IsDetected>
 801ddc8:	4603      	mov	r3, r0
 801ddca:	2b01      	cmp	r3, #1
 801ddcc:	d108      	bne.n	801dde0 <main+0x128>
	  dbgAddText("sd present");
 801ddce:	486c      	ldr	r0, [pc, #432]	; (801df80 <main+0x2c8>)
 801ddd0:	f7fb fa3a 	bl	8019248 <dbgAddText>
  	  f_mount(&SDFatFs, (TCHAR const*)SDPath, 0); // SD card disk mount
 801ddd4:	2200      	movs	r2, #0
 801ddd6:	496b      	ldr	r1, [pc, #428]	; (801df84 <main+0x2cc>)
 801ddd8:	486b      	ldr	r0, [pc, #428]	; (801df88 <main+0x2d0>)
 801ddda:	f7f2 fde3 	bl	80109a4 <f_mount>
 801ddde:	e019      	b.n	801de14 <main+0x15c>
  }
  else if ((Appli_HS_state != APPLICATION_READY)) //&& (Appli_FS_state != APPLICATION_START))   //shouldn't be true if it got here, but just to be safe  --- USB already mounts
 801dde0:	4b65      	ldr	r3, [pc, #404]	; (801df78 <main+0x2c0>)
 801dde2:	781b      	ldrb	r3, [r3, #0]
 801dde4:	2b02      	cmp	r3, #2
 801dde6:	d00c      	beq.n	801de02 <main+0x14a>
  {
	  menu_mode = 3;
 801dde8:	4b5b      	ldr	r3, [pc, #364]	; (801df58 <main+0x2a0>)
 801ddea:	2203      	movs	r2, #3
 801ddec:	701a      	strb	r2, [r3, #0]
	  BSP_LCD_DisplayOn();
 801ddee:	f7ff febd 	bl	801db6c <BSP_LCD_DisplayOn>
	  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 801ddf2:	495e      	ldr	r1, [pc, #376]	; (801df6c <main+0x2b4>)
 801ddf4:	485e      	ldr	r0, [pc, #376]	; (801df70 <main+0x2b8>)
 801ddf6:	f005 fbf7 	bl	80235e8 <MX_USB_HOST_Process>
	  dbgAddText("usb halt");
 801ddfa:	4864      	ldr	r0, [pc, #400]	; (801df8c <main+0x2d4>)
 801ddfc:	f7fb fa24 	bl	8019248 <dbgAddText>
	  while(1);
 801de00:	e7fe      	b.n	801de00 <main+0x148>
  }
  else if (Appli_HS_state == APPLICATION_READY)	//mount USB
 801de02:	4b5d      	ldr	r3, [pc, #372]	; (801df78 <main+0x2c0>)
 801de04:	781b      	ldrb	r3, [r3, #0]
 801de06:	2b02      	cmp	r3, #2
 801de08:	d104      	bne.n	801de14 <main+0x15c>
  {
  	  f_mount(&USBHFatFs, (TCHAR const*)USBHPath, 0); // USB disk mount
 801de0a:	2200      	movs	r2, #0
 801de0c:	4957      	ldr	r1, [pc, #348]	; (801df6c <main+0x2b4>)
 801de0e:	4858      	ldr	r0, [pc, #352]	; (801df70 <main+0x2b8>)
 801de10:	f7f2 fdc8 	bl	80109a4 <f_mount>
  }

  hMP3Decoder = MP3InitDecoder(); // mp3 decoder initialization
 801de14:	f7f3 fcee 	bl	80117f4 <MP3InitDecoder>
 801de18:	4603      	mov	r3, r0
 801de1a:	4a5d      	ldr	r2, [pc, #372]	; (801df90 <main+0x2d8>)
 801de1c:	6013      	str	r3, [r2, #0]

  dbgAddText("pre scan");
 801de1e:	485d      	ldr	r0, [pc, #372]	; (801df94 <main+0x2dc>)
 801de20:	f7fb fa12 	bl	8019248 <dbgAddText>
  scan_files(); // get total track number
 801de24:	f000 f9e4 	bl	801e1f0 <scan_files>
  dbgAddText("post scan");
 801de28:	485b      	ldr	r0, [pc, #364]	; (801df98 <main+0x2e0>)
 801de2a:	f7fb fa0d 	bl	8019248 <dbgAddText>

  HAL_TIM_Base_Start_IT(&htim5); // start jog speed counting timer
 801de2e:	485b      	ldr	r0, [pc, #364]	; (801df9c <main+0x2e4>)
 801de30:	f7eb fd7e 	bl	8009930 <HAL_TIM_Base_Start_IT>
  HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 801de34:	2304      	movs	r3, #4
 801de36:	4a5a      	ldr	r2, [pc, #360]	; (801dfa0 <main+0x2e8>)
 801de38:	495a      	ldr	r1, [pc, #360]	; (801dfa4 <main+0x2ec>)
 801de3a:	485b      	ldr	r0, [pc, #364]	; (801dfa8 <main+0x2f0>)
 801de3c:	f7eb f85e 	bl	8008efc <HAL_SPI_TransmitReceive_IT>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, volume, (uint32_t)(AUDIO_FREQUENCY_22K)*(1 + trak.percent));
 801de40:	4b5a      	ldr	r3, [pc, #360]	; (801dfac <main+0x2f4>)
 801de42:	781b      	ldrb	r3, [r3, #0]
 801de44:	4a5a      	ldr	r2, [pc, #360]	; (801dfb0 <main+0x2f8>)
 801de46:	edd2 7a01 	vldr	s15, [r2, #4]
 801de4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de52:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801dfb4 <main+0x2fc>
 801de56:	ee67 7a87 	vmul.f32	s15, s15, s14
 801de5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801de5e:	ee17 2a90 	vmov	r2, s15
 801de62:	4619      	mov	r1, r3
 801de64:	2002      	movs	r0, #2
 801de66:	f002 fe95 	bl	8020b94 <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetVolume(0);
 801de6a:	2000      	movs	r0, #0
 801de6c:	f002 ff32 	bl	8020cd4 <BSP_AUDIO_OUT_SetVolume>
  BSP_LCD_DisplayOn();
 801de70:	f7ff fe7c 	bl	801db6c <BSP_LCD_DisplayOn>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  find_file(Track_number);
 801de74:	4b50      	ldr	r3, [pc, #320]	; (801dfb8 <main+0x300>)
 801de76:	681b      	ldr	r3, [r3, #0]
 801de78:	b29b      	uxth	r3, r3
 801de7a:	4618      	mov	r0, r3
 801de7c:	f000 fb56 	bl	801e52c <find_file>
	  fr = 0;
 801de80:	4b4e      	ldr	r3, [pc, #312]	; (801dfbc <main+0x304>)
 801de82:	2200      	movs	r2, #0
 801de84:	801a      	strh	r2, [r3, #0]
	  sec = 0;
 801de86:	4b4e      	ldr	r3, [pc, #312]	; (801dfc0 <main+0x308>)
 801de88:	2200      	movs	r2, #0
 801de8a:	701a      	strb	r2, [r3, #0]
	  min = 0;
 801de8c:	4b4d      	ldr	r3, [pc, #308]	; (801dfc4 <main+0x30c>)
 801de8e:	2200      	movs	r2, #0
 801de90:	701a      	strb	r2, [r3, #0]
	  rfr = 0;
 801de92:	4b4d      	ldr	r3, [pc, #308]	; (801dfc8 <main+0x310>)
 801de94:	2200      	movs	r2, #0
 801de96:	801a      	strh	r2, [r3, #0]
	  rsec = 0;
 801de98:	4b4c      	ldr	r3, [pc, #304]	; (801dfcc <main+0x314>)
 801de9a:	2200      	movs	r2, #0
 801de9c:	701a      	strb	r2, [r3, #0]
	  rmin = 0;
 801de9e:	4b4c      	ldr	r3, [pc, #304]	; (801dfd0 <main+0x318>)
 801dea0:	2200      	movs	r2, #0
 801dea2:	701a      	strb	r2, [r3, #0]
	  file_pos_wide = 0;
 801dea4:	4b4b      	ldr	r3, [pc, #300]	; (801dfd4 <main+0x31c>)
 801dea6:	2200      	movs	r2, #0
 801dea8:	601a      	str	r2, [r3, #0]
	  position = 0;
 801deaa:	4b4b      	ldr	r3, [pc, #300]	; (801dfd8 <main+0x320>)
 801deac:	2200      	movs	r2, #0
 801deae:	601a      	str	r2, [r3, #0]
	  rekordbox.state = 0;
 801deb0:	4b4a      	ldr	r3, [pc, #296]	; (801dfdc <main+0x324>)
 801deb2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801deb6:	2200      	movs	r2, #0
 801deb8:	f883 2d94 	strb.w	r2, [r3, #3476]	; 0xd94
	  display.loop = 0;
 801debc:	4b48      	ldr	r3, [pc, #288]	; (801dfe0 <main+0x328>)
 801debe:	2200      	movs	r2, #0
 801dec0:	741a      	strb	r2, [r3, #16]
	  if(display.cuemode == 1) rekordbox.autocue = 1;
 801dec2:	4b47      	ldr	r3, [pc, #284]	; (801dfe0 <main+0x328>)
 801dec4:	789b      	ldrb	r3, [r3, #2]
 801dec6:	2b01      	cmp	r3, #1
 801dec8:	d106      	bne.n	801ded8 <main+0x220>
 801deca:	4b44      	ldr	r3, [pc, #272]	; (801dfdc <main+0x324>)
 801decc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801ded0:	2201      	movs	r2, #1
 801ded2:	f883 2d8c 	strb.w	r2, [r3, #3468]	; 0xd8c
 801ded6:	e005      	b.n	801dee4 <main+0x22c>
	  else rekordbox.autocue = 0;
 801ded8:	4b40      	ldr	r3, [pc, #256]	; (801dfdc <main+0x324>)
 801deda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801dede:	2200      	movs	r2, #0
 801dee0:	f883 2d8c 	strb.w	r2, [r3, #3468]	; 0xd8c
	  rekordbox.currentcue = 0;
 801dee4:	4b3d      	ldr	r3, [pc, #244]	; (801dfdc <main+0x324>)
 801dee6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801deea:	461a      	mov	r2, r3
 801deec:	2300      	movs	r3, #0
 801deee:	f8c2 3d90 	str.w	r3, [r2, #3472]	; 0xd90
	  DecodeRekordboxFiles(new_path);
 801def2:	483c      	ldr	r0, [pc, #240]	; (801dfe4 <main+0x32c>)
 801def4:	f000 ffda 	bl	801eeac <DecodeRekordboxFiles>
	  menu_mode = 0;
 801def8:	4b17      	ldr	r3, [pc, #92]	; (801df58 <main+0x2a0>)
 801defa:	2200      	movs	r2, #0
 801defc:	701a      	strb	r2, [r3, #0]
	  bar = 0;
 801defe:	4b3a      	ldr	r3, [pc, #232]	; (801dfe8 <main+0x330>)
 801df00:	2200      	movs	r2, #0
 801df02:	601a      	str	r2, [r3, #0]
	  beat = 0;
 801df04:	4b39      	ldr	r3, [pc, #228]	; (801dfec <main+0x334>)
 801df06:	2200      	movs	r2, #0
 801df08:	601a      	str	r2, [r3, #0]
	  res = f_open(&MyFile, rekordbox.filename, FA_READ);
 801df0a:	2201      	movs	r2, #1
 801df0c:	4933      	ldr	r1, [pc, #204]	; (801dfdc <main+0x324>)
 801df0e:	4838      	ldr	r0, [pc, #224]	; (801dff0 <main+0x338>)
 801df10:	f7f2 fd8c 	bl	8010a2c <f_open>
 801df14:	4603      	mov	r3, r0
 801df16:	461a      	mov	r2, r3
 801df18:	4b36      	ldr	r3, [pc, #216]	; (801dff4 <main+0x33c>)
 801df1a:	701a      	strb	r2, [r3, #0]
	  if(res == FR_OK)
 801df1c:	4b35      	ldr	r3, [pc, #212]	; (801dff4 <main+0x33c>)
 801df1e:	781b      	ldrb	r3, [r3, #0]
 801df20:	2b00      	cmp	r3, #0
 801df22:	f040 80a4 	bne.w	801e06e <main+0x3b6>
	  {
		  trak.state = PLAYING;
 801df26:	4b22      	ldr	r3, [pc, #136]	; (801dfb0 <main+0x2f8>)
 801df28:	2200      	movs	r2, #0
 801df2a:	701a      	strb	r2, [r3, #0]
		  spi_tx[2] &= ~(1 << 0);
 801df2c:	4b1d      	ldr	r3, [pc, #116]	; (801dfa4 <main+0x2ec>)
 801df2e:	789b      	ldrb	r3, [r3, #2]
 801df30:	f023 0301 	bic.w	r3, r3, #1
 801df34:	b2da      	uxtb	r2, r3
 801df36:	4b1b      	ldr	r3, [pc, #108]	; (801dfa4 <main+0x2ec>)
 801df38:	709a      	strb	r2, [r3, #2]
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 801df3a:	4b28      	ldr	r3, [pc, #160]	; (801dfdc <main+0x324>)
 801df3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801df40:	f893 3d8c 	ldrb.w	r3, [r3, #3468]	; 0xd8c
 801df44:	2b02      	cmp	r3, #2
 801df46:	d157      	bne.n	801dff8 <main+0x340>
 801df48:	4b16      	ldr	r3, [pc, #88]	; (801dfa4 <main+0x2ec>)
 801df4a:	789b      	ldrb	r3, [r3, #2]
 801df4c:	f023 0302 	bic.w	r3, r3, #2
 801df50:	b2da      	uxtb	r2, r3
 801df52:	4b14      	ldr	r3, [pc, #80]	; (801dfa4 <main+0x2ec>)
 801df54:	709a      	strb	r2, [r3, #2]
 801df56:	e056      	b.n	801e006 <main+0x34e>
 801df58:	200007e0 	.word	0x200007e0
 801df5c:	200181b0 	.word	0x200181b0
 801df60:	200009fc 	.word	0x200009fc
 801df64:	c007f800 	.word	0xc007f800
 801df68:	20000aa4 	.word	0x20000aa4
 801df6c:	20000958 	.word	0x20000958
 801df70:	20000cdc 	.word	0x20000cdc
 801df74:	08026cb8 	.word	0x08026cb8
 801df78:	200188c8 	.word	0x200188c8
 801df7c:	08026cc4 	.word	0x08026cc4
 801df80:	08026cd0 	.word	0x08026cd0
 801df84:	20000950 	.word	0x20000950
 801df88:	20000aac 	.word	0x20000aac
 801df8c:	08026cdc 	.word	0x08026cdc
 801df90:	2000e6ec 	.word	0x2000e6ec
 801df94:	08026ce8 	.word	0x08026ce8
 801df98:	08026cf4 	.word	0x08026cf4
 801df9c:	200181f0 	.word	0x200181f0
 801dfa0:	2000e6dc 	.word	0x2000e6dc
 801dfa4:	20000054 	.word	0x20000054
 801dfa8:	20018074 	.word	0x20018074
 801dfac:	20000058 	.word	0x20000058
 801dfb0:	2000e6e0 	.word	0x2000e6e0
 801dfb4:	46ac4400 	.word	0x46ac4400
 801dfb8:	20000aa8 	.word	0x20000aa8
 801dfbc:	2000e6d0 	.word	0x2000e6d0
 801dfc0:	2000e6d2 	.word	0x2000e6d2
 801dfc4:	2000e6d3 	.word	0x2000e6d3
 801dfc8:	2000e6d4 	.word	0x2000e6d4
 801dfcc:	2000e6d6 	.word	0x2000e6d6
 801dfd0:	2000e6d7 	.word	0x2000e6d7
 801dfd4:	20001e00 	.word	0x20001e00
 801dfd8:	200008f4 	.word	0x200008f4
 801dfdc:	20015170 	.word	0x20015170
 801dfe0:	200008fc 	.word	0x200008fc
 801dfe4:	20001600 	.word	0x20001600
 801dfe8:	200008e8 	.word	0x200008e8
 801dfec:	200008e0 	.word	0x200008e0
 801dff0:	20000f10 	.word	0x20000f10
 801dff4:	20001160 	.word	0x20001160
		  else spi_tx[2] |= (1 << 1);
 801dff8:	4b36      	ldr	r3, [pc, #216]	; (801e0d4 <main+0x41c>)
 801dffa:	789b      	ldrb	r3, [r3, #2]
 801dffc:	f043 0302 	orr.w	r3, r3, #2
 801e000:	b2da      	uxtb	r2, r3
 801e002:	4b34      	ldr	r3, [pc, #208]	; (801e0d4 <main+0x41c>)
 801e004:	709a      	strb	r2, [r3, #2]
		  spi_tx[2] &= ~(1 << 3);
 801e006:	4b33      	ldr	r3, [pc, #204]	; (801e0d4 <main+0x41c>)
 801e008:	789b      	ldrb	r3, [r3, #2]
 801e00a:	f023 0308 	bic.w	r3, r3, #8
 801e00e:	b2da      	uxtb	r2, r3
 801e010:	4b30      	ldr	r3, [pc, #192]	; (801e0d4 <main+0x41c>)
 801e012:	709a      	strb	r2, [r3, #2]
		  if((strcmp(rekordbox.filetype, ".wav") == 0) || (strcmp(rekordbox.filetype, ".WAV") == 0)) {
 801e014:	4930      	ldr	r1, [pc, #192]	; (801e0d8 <main+0x420>)
 801e016:	4831      	ldr	r0, [pc, #196]	; (801e0dc <main+0x424>)
 801e018:	f7e2 f8fa 	bl	8000210 <strcmp>
 801e01c:	4603      	mov	r3, r0
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d006      	beq.n	801e030 <main+0x378>
 801e022:	492f      	ldr	r1, [pc, #188]	; (801e0e0 <main+0x428>)
 801e024:	482d      	ldr	r0, [pc, #180]	; (801e0dc <main+0x424>)
 801e026:	f7e2 f8f3 	bl	8000210 <strcmp>
 801e02a:	4603      	mov	r3, r0
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d101      	bne.n	801e034 <main+0x37c>
			  PlayWavFile();
 801e030:	f006 f9d4 	bl	80243dc <PlayWavFile>
		  }
		  if((strcmp(rekordbox.filetype, ".mp3") == 0) || (strcmp(rekordbox.filetype, ".MP3") == 0)) {
 801e034:	492b      	ldr	r1, [pc, #172]	; (801e0e4 <main+0x42c>)
 801e036:	4829      	ldr	r0, [pc, #164]	; (801e0dc <main+0x424>)
 801e038:	f7e2 f8ea 	bl	8000210 <strcmp>
 801e03c:	4603      	mov	r3, r0
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d006      	beq.n	801e050 <main+0x398>
 801e042:	4929      	ldr	r1, [pc, #164]	; (801e0e8 <main+0x430>)
 801e044:	4825      	ldr	r0, [pc, #148]	; (801e0dc <main+0x424>)
 801e046:	f7e2 f8e3 	bl	8000210 <strcmp>
 801e04a:	4603      	mov	r3, r0
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	d101      	bne.n	801e054 <main+0x39c>
			  PlayMp3File();
 801e050:	f000 fcd6 	bl	801ea00 <PlayMp3File>
		  }
		  spi_tx[2] |= (1 << 3);
 801e054:	4b1f      	ldr	r3, [pc, #124]	; (801e0d4 <main+0x41c>)
 801e056:	789b      	ldrb	r3, [r3, #2]
 801e058:	f043 0308 	orr.w	r3, r3, #8
 801e05c:	b2da      	uxtb	r2, r3
 801e05e:	4b1d      	ldr	r3, [pc, #116]	; (801e0d4 <main+0x41c>)
 801e060:	709a      	strb	r2, [r3, #2]
		  trak.state = STOPPED;
 801e062:	4b22      	ldr	r3, [pc, #136]	; (801e0ec <main+0x434>)
 801e064:	2201      	movs	r2, #1
 801e066:	701a      	strb	r2, [r3, #0]
		  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 801e068:	2002      	movs	r0, #2
 801e06a:	f002 fe11 	bl	8020c90 <BSP_AUDIO_OUT_Stop>
	  }
	  if(file_pos_wide >= rekordbox.spectrum_size) {
 801e06e:	4b20      	ldr	r3, [pc, #128]	; (801e0f0 <main+0x438>)
 801e070:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801e074:	f8d3 244c 	ldr.w	r2, [r3, #1100]	; 0x44c
 801e078:	4b1e      	ldr	r3, [pc, #120]	; (801e0f4 <main+0x43c>)
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	429a      	cmp	r2, r3
 801e07e:	d804      	bhi.n	801e08a <main+0x3d2>
		  Track_number++;
 801e080:	4b1d      	ldr	r3, [pc, #116]	; (801e0f8 <main+0x440>)
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	3301      	adds	r3, #1
 801e086:	4a1c      	ldr	r2, [pc, #112]	; (801e0f8 <main+0x440>)
 801e088:	6013      	str	r3, [r2, #0]
	  }
	  file_pos_wide = 0;
 801e08a:	4b1a      	ldr	r3, [pc, #104]	; (801e0f4 <main+0x43c>)
 801e08c:	2200      	movs	r2, #0
 801e08e:	601a      	str	r2, [r3, #0]
	  menu_mode = 4;
 801e090:	4b1a      	ldr	r3, [pc, #104]	; (801e0fc <main+0x444>)
 801e092:	2204      	movs	r2, #4
 801e094:	701a      	strb	r2, [r3, #0]
	  f_close(&MyFile);
 801e096:	481a      	ldr	r0, [pc, #104]	; (801e100 <main+0x448>)
 801e098:	f7f2 feb7 	bl	8010e0a <f_close>
	  f_closedir(&dir);
 801e09c:	4819      	ldr	r0, [pc, #100]	; (801e104 <main+0x44c>)
 801e09e:	f7f3 fa36 	bl	801150e <f_closedir>
	  if(Track_number >= Total_tracks) Track_number = 0;
 801e0a2:	4b19      	ldr	r3, [pc, #100]	; (801e108 <main+0x450>)
 801e0a4:	881b      	ldrh	r3, [r3, #0]
 801e0a6:	461a      	mov	r2, r3
 801e0a8:	4b13      	ldr	r3, [pc, #76]	; (801e0f8 <main+0x440>)
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	429a      	cmp	r2, r3
 801e0ae:	dc02      	bgt.n	801e0b6 <main+0x3fe>
 801e0b0:	4b11      	ldr	r3, [pc, #68]	; (801e0f8 <main+0x440>)
 801e0b2:	2200      	movs	r2, #0
 801e0b4:	601a      	str	r2, [r3, #0]
	  if(Track_number < 0) Track_number = Total_tracks - 1;
 801e0b6:	4b10      	ldr	r3, [pc, #64]	; (801e0f8 <main+0x440>)
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	da04      	bge.n	801e0c8 <main+0x410>
 801e0be:	4b12      	ldr	r3, [pc, #72]	; (801e108 <main+0x450>)
 801e0c0:	881b      	ldrh	r3, [r3, #0]
 801e0c2:	3b01      	subs	r3, #1
 801e0c4:	4a0c      	ldr	r2, [pc, #48]	; (801e0f8 <main+0x440>)
 801e0c6:	6013      	str	r3, [r2, #0]

	  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 801e0c8:	4910      	ldr	r1, [pc, #64]	; (801e10c <main+0x454>)
 801e0ca:	4811      	ldr	r0, [pc, #68]	; (801e110 <main+0x458>)
 801e0cc:	f005 fa8c 	bl	80235e8 <MX_USB_HOST_Process>
	  find_file(Track_number);
 801e0d0:	e6d0      	b.n	801de74 <main+0x1bc>
 801e0d2:	bf00      	nop
 801e0d4:	20000054 	.word	0x20000054
 801e0d8:	08026d00 	.word	0x08026d00
 801e0dc:	2001566b 	.word	0x2001566b
 801e0e0:	08026d08 	.word	0x08026d08
 801e0e4:	08026d10 	.word	0x08026d10
 801e0e8:	08026d18 	.word	0x08026d18
 801e0ec:	2000e6e0 	.word	0x2000e6e0
 801e0f0:	20015170 	.word	0x20015170
 801e0f4:	20001e00 	.word	0x20001e00
 801e0f8:	20000aa8 	.word	0x20000aa8
 801e0fc:	200007e0 	.word	0x200007e0
 801e100:	20000f10 	.word	0x20000f10
 801e104:	20001168 	.word	0x20001168
 801e108:	20001f94 	.word	0x20001f94
 801e10c:	20000958 	.word	0x20000958
 801e110:	20000cdc 	.word	0x20000cdc

0801e114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801e114:	b580      	push	{r7, lr}
 801e116:	b094      	sub	sp, #80	; 0x50
 801e118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801e11a:	f107 0320 	add.w	r3, r7, #32
 801e11e:	2230      	movs	r2, #48	; 0x30
 801e120:	2100      	movs	r1, #0
 801e122:	4618      	mov	r0, r3
 801e124:	f007 ff28 	bl	8025f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801e128:	f107 030c 	add.w	r3, r7, #12
 801e12c:	2200      	movs	r2, #0
 801e12e:	601a      	str	r2, [r3, #0]
 801e130:	605a      	str	r2, [r3, #4]
 801e132:	609a      	str	r2, [r3, #8]
 801e134:	60da      	str	r2, [r3, #12]
 801e136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801e138:	4b2b      	ldr	r3, [pc, #172]	; (801e1e8 <SystemClock_Config+0xd4>)
 801e13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e13c:	4a2a      	ldr	r2, [pc, #168]	; (801e1e8 <SystemClock_Config+0xd4>)
 801e13e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e142:	6413      	str	r3, [r2, #64]	; 0x40
 801e144:	4b28      	ldr	r3, [pc, #160]	; (801e1e8 <SystemClock_Config+0xd4>)
 801e146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e14c:	60bb      	str	r3, [r7, #8]
 801e14e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801e150:	4b26      	ldr	r3, [pc, #152]	; (801e1ec <SystemClock_Config+0xd8>)
 801e152:	681b      	ldr	r3, [r3, #0]
 801e154:	4a25      	ldr	r2, [pc, #148]	; (801e1ec <SystemClock_Config+0xd8>)
 801e156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801e15a:	6013      	str	r3, [r2, #0]
 801e15c:	4b23      	ldr	r3, [pc, #140]	; (801e1ec <SystemClock_Config+0xd8>)
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801e164:	607b      	str	r3, [r7, #4]
 801e166:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801e168:	2301      	movs	r3, #1
 801e16a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801e16c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e170:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801e172:	2302      	movs	r3, #2
 801e174:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801e176:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801e17a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 801e17c:	2319      	movs	r3, #25
 801e17e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 801e180:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801e184:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801e186:	2302      	movs	r3, #2
 801e188:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 801e18a:	2308      	movs	r3, #8
 801e18c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801e18e:	f107 0320 	add.w	r3, r7, #32
 801e192:	4618      	mov	r0, r3
 801e194:	f7e7 ff3a 	bl	800600c <HAL_RCC_OscConfig>
 801e198:	4603      	mov	r3, r0
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d001      	beq.n	801e1a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 801e19e:	f000 fa38 	bl	801e612 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801e1a2:	f7e7 fee3 	bl	8005f6c <HAL_PWREx_EnableOverDrive>
 801e1a6:	4603      	mov	r3, r0
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d001      	beq.n	801e1b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 801e1ac:	f000 fa31 	bl	801e612 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801e1b0:	230f      	movs	r3, #15
 801e1b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801e1b4:	2302      	movs	r3, #2
 801e1b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801e1bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e1c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801e1c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801e1c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 801e1c8:	f107 030c 	add.w	r3, r7, #12
 801e1cc:	2106      	movs	r1, #6
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	f7e8 fa46 	bl	8006660 <HAL_RCC_ClockConfig>
 801e1d4:	4603      	mov	r3, r0
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d001      	beq.n	801e1de <SystemClock_Config+0xca>
  {
    Error_Handler();
 801e1da:	f000 fa1a 	bl	801e612 <Error_Handler>
  }
}
 801e1de:	bf00      	nop
 801e1e0:	3750      	adds	r7, #80	; 0x50
 801e1e2:	46bd      	mov	sp, r7
 801e1e4:	bd80      	pop	{r7, pc}
 801e1e6:	bf00      	nop
 801e1e8:	40023800 	.word	0x40023800
 801e1ec:	40007000 	.word	0x40007000

0801e1f0 <scan_files>:

/* USER CODE BEGIN 4 */
FRESULT scan_files()
{
 801e1f0:	b580      	push	{r7, lr}
 801e1f2:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 801e1f6:	af00      	add	r7, sp, #0
    DIR folder;
    UINT i = 0;
 801e1f8:	2300      	movs	r3, #0
 801e1fa:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
    UINT folders = 0;
 801e1fe:	2300      	movs	r3, #0
 801e200:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
    UINT subfolders = 0;
 801e204:	2300      	movs	r3, #0
 801e206:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
    TCHAR relative_path[255] = {0};
 801e20a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801e20e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 801e212:	4618      	mov	r0, r3
 801e214:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 801e218:	461a      	mov	r2, r3
 801e21a:	2100      	movs	r1, #0
 801e21c:	f007 feac 	bl	8025f78 <memset>
    //TCHAR pio_dir[20] = {0};
    //wcscpy(pio_dir,L"/PIONEER/USBANLZ/"+'\0'+'\0');
    while(1) {
    	res = f_opendir(&folder, L"/PIONEER/USBANLZ");	/* Open the directory */
 801e220:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e224:	49b5      	ldr	r1, [pc, #724]	; (801e4fc <scan_files+0x30c>)
 801e226:	4618      	mov	r0, r3
 801e228:	f7f3 f8e1 	bl	80113ee <f_opendir>
 801e22c:	4603      	mov	r3, r0
 801e22e:	461a      	mov	r2, r3
 801e230:	4bb3      	ldr	r3, [pc, #716]	; (801e500 <scan_files+0x310>)
 801e232:	701a      	strb	r2, [r3, #0]
    	if (res != FR_OK) {
 801e234:	4bb2      	ldr	r3, [pc, #712]	; (801e500 <scan_files+0x310>)
 801e236:	781b      	ldrb	r3, [r3, #0]
 801e238:	2b00      	cmp	r3, #0
 801e23a:	f040 8156 	bne.w	801e4ea <scan_files+0x2fa>
    		break;	/* Break on error or no dir */
    	}
    	i = 0;
 801e23e:	2300      	movs	r3, #0
 801e240:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
    	do {
    		res = f_readdir(&folder, &fno);	/* Read a new, unknown directory item */
 801e244:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e248:	49ae      	ldr	r1, [pc, #696]	; (801e504 <scan_files+0x314>)
 801e24a:	4618      	mov	r0, r3
 801e24c:	f7f3 f977 	bl	801153e <f_readdir>
 801e250:	4603      	mov	r3, r0
 801e252:	461a      	mov	r2, r3
 801e254:	4baa      	ldr	r3, [pc, #680]	; (801e500 <scan_files+0x310>)
 801e256:	701a      	strb	r2, [r3, #0]
    	}while(i++ < folders);
 801e258:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e25c:	1c5a      	adds	r2, r3, #1
 801e25e:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 801e262:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 801e266:	429a      	cmp	r2, r3
 801e268:	d8ec      	bhi.n	801e244 <scan_files+0x54>

    	if (res != FR_OK || fno.fname[0] == 0) {
 801e26a:	4ba5      	ldr	r3, [pc, #660]	; (801e500 <scan_files+0x310>)
 801e26c:	781b      	ldrb	r3, [r3, #0]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d103      	bne.n	801e27a <scan_files+0x8a>
 801e272:	4ba4      	ldr	r3, [pc, #656]	; (801e504 <scan_files+0x314>)
 801e274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e276:	2b00      	cmp	r3, #0
 801e278:	d105      	bne.n	801e286 <scan_files+0x96>
    		f_closedir(&folder);
 801e27a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e27e:	4618      	mov	r0, r3
 801e280:	f7f3 f945 	bl	801150e <f_closedir>
    		break;	/* Break on error or end of dir */
 801e284:	e132      	b.n	801e4ec <scan_files+0x2fc>
    	}
    	if (fno.fattrib & AM_DIR) {	/* It is a directory */
 801e286:	4b9f      	ldr	r3, [pc, #636]	; (801e504 <scan_files+0x314>)
 801e288:	7b1b      	ldrb	r3, [r3, #12]
 801e28a:	f003 0310 	and.w	r3, r3, #16
 801e28e:	2b00      	cmp	r3, #0
 801e290:	d0c6      	beq.n	801e220 <scan_files+0x30>
    		folders++;
 801e292:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 801e296:	3301      	adds	r3, #1
 801e298:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
    		for(i = 0; i < 255; i++) new_path[i] = 0;		//clr new_path
 801e29c:	2300      	movs	r3, #0
 801e29e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e2a2:	e00a      	b.n	801e2ba <scan_files+0xca>
 801e2a4:	4a98      	ldr	r2, [pc, #608]	; (801e508 <scan_files+0x318>)
 801e2a6:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e2aa:	2100      	movs	r1, #0
 801e2ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801e2b0:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e2b4:	3301      	adds	r3, #1
 801e2b6:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e2ba:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e2be:	2bfe      	cmp	r3, #254	; 0xfe
 801e2c0:	d9f0      	bls.n	801e2a4 <scan_files+0xb4>
    		wcscpy(new_path, L"/PIONEER/USBANLZ/");
 801e2c2:	4992      	ldr	r1, [pc, #584]	; (801e50c <scan_files+0x31c>)
 801e2c4:	4890      	ldr	r0, [pc, #576]	; (801e508 <scan_files+0x318>)
 801e2c6:	f007 ffa2 	bl	802620e <wcscpy>

    		for(i = 0; i < 255; i++) relative_path[i] = 0;	//clr rel_path
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e2d0:	e00d      	b.n	801e2ee <scan_files+0xfe>
 801e2d2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801e2d6:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 801e2da:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 801e2de:	2100      	movs	r1, #0
 801e2e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801e2e4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e2e8:	3301      	adds	r3, #1
 801e2ea:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e2ee:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e2f2:	2bfe      	cmp	r3, #254	; 0xfe
 801e2f4:	d9ed      	bls.n	801e2d2 <scan_files+0xe2>
    		wcscpy(relative_path, fno.fname);				//rel_path= [directory]
 801e2f6:	1d3b      	adds	r3, r7, #4
 801e2f8:	4985      	ldr	r1, [pc, #532]	; (801e510 <scan_files+0x320>)
 801e2fa:	4618      	mov	r0, r3
 801e2fc:	f007 ff87 	bl	802620e <wcscpy>

    		wcscat(new_path, relative_path);					//step in new_path=  /PIONEER/USBANLZ/ + [directory]
 801e300:	1d3b      	adds	r3, r7, #4
 801e302:	4619      	mov	r1, r3
 801e304:	4880      	ldr	r0, [pc, #512]	; (801e508 <scan_files+0x318>)
 801e306:	f007 ff72 	bl	80261ee <wcscat>
    		wcscpy(old_path, new_path);						//old_path=new_path
 801e30a:	497f      	ldr	r1, [pc, #508]	; (801e508 <scan_files+0x318>)
 801e30c:	4881      	ldr	r0, [pc, #516]	; (801e514 <scan_files+0x324>)
 801e30e:	f007 ff7e 	bl	802620e <wcscpy>
    		f_closedir(&folder);
 801e312:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e316:	4618      	mov	r0, r3
 801e318:	f7f3 f8f9 	bl	801150e <f_closedir>
    		subfolders = 0;
 801e31c:	2300      	movs	r3, #0
 801e31e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
    		while(1) {
    			res = f_opendir(&folder, old_path);			//we have to go deeper
 801e322:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e326:	497b      	ldr	r1, [pc, #492]	; (801e514 <scan_files+0x324>)
 801e328:	4618      	mov	r0, r3
 801e32a:	f7f3 f860 	bl	80113ee <f_opendir>
 801e32e:	4603      	mov	r3, r0
 801e330:	461a      	mov	r2, r3
 801e332:	4b73      	ldr	r3, [pc, #460]	; (801e500 <scan_files+0x310>)
 801e334:	701a      	strb	r2, [r3, #0]
    			for(i = 0; i < 255; i++) new_path[i] = 0;	//clr new_path
 801e336:	2300      	movs	r3, #0
 801e338:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e33c:	e00a      	b.n	801e354 <scan_files+0x164>
 801e33e:	4a72      	ldr	r2, [pc, #456]	; (801e508 <scan_files+0x318>)
 801e340:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e344:	2100      	movs	r1, #0
 801e346:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801e34a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e34e:	3301      	adds	r3, #1
 801e350:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e354:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e358:	2bfe      	cmp	r3, #254	; 0xfe
 801e35a:	d9f0      	bls.n	801e33e <scan_files+0x14e>
    			wcscpy(new_path, old_path);					//re-use new_path=  /PIONEER/USBANLZ/ + [directory]
 801e35c:	496d      	ldr	r1, [pc, #436]	; (801e514 <scan_files+0x324>)
 801e35e:	486a      	ldr	r0, [pc, #424]	; (801e508 <scan_files+0x318>)
 801e360:	f007 ff55 	bl	802620e <wcscpy>
    			i = 0;
 801e364:	2300      	movs	r3, #0
 801e366:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
    			do {
    				res = f_readdir(&folder, &fno);	/* Read a new directory item */
 801e36a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e36e:	4965      	ldr	r1, [pc, #404]	; (801e504 <scan_files+0x314>)
 801e370:	4618      	mov	r0, r3
 801e372:	f7f3 f8e4 	bl	801153e <f_readdir>
 801e376:	4603      	mov	r3, r0
 801e378:	461a      	mov	r2, r3
 801e37a:	4b61      	ldr	r3, [pc, #388]	; (801e500 <scan_files+0x310>)
 801e37c:	701a      	strb	r2, [r3, #0]
    			}while(i++ < subfolders);
 801e37e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e382:	1c5a      	adds	r2, r3, #1
 801e384:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 801e388:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 801e38c:	429a      	cmp	r2, r3
 801e38e:	d8ec      	bhi.n	801e36a <scan_files+0x17a>

    			if (res != FR_OK || fno.fname[0] == 0) {
 801e390:	4b5b      	ldr	r3, [pc, #364]	; (801e500 <scan_files+0x310>)
 801e392:	781b      	ldrb	r3, [r3, #0]
 801e394:	2b00      	cmp	r3, #0
 801e396:	d103      	bne.n	801e3a0 <scan_files+0x1b0>
 801e398:	4b5a      	ldr	r3, [pc, #360]	; (801e504 <scan_files+0x314>)
 801e39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d105      	bne.n	801e3ac <scan_files+0x1bc>
    				f_closedir(&folder);
 801e3a0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e3a4:	4618      	mov	r0, r3
 801e3a6:	f7f3 f8b2 	bl	801150e <f_closedir>
    				break;  /* Break on error or end of dir */
 801e3aa:	e09d      	b.n	801e4e8 <scan_files+0x2f8>
    			}
    			if (fno.fattrib & AM_DIR) {	/* It is a directory */
 801e3ac:	4b55      	ldr	r3, [pc, #340]	; (801e504 <scan_files+0x314>)
 801e3ae:	7b1b      	ldrb	r3, [r3, #12]
 801e3b0:	f003 0310 	and.w	r3, r3, #16
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d0b4      	beq.n	801e322 <scan_files+0x132>
    				subfolders++;
 801e3b8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 801e3bc:	3301      	adds	r3, #1
 801e3be:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
    				wcscat(new_path, L"/");
 801e3c2:	4955      	ldr	r1, [pc, #340]	; (801e518 <scan_files+0x328>)
 801e3c4:	4850      	ldr	r0, [pc, #320]	; (801e508 <scan_files+0x318>)
 801e3c6:	f007 ff12 	bl	80261ee <wcscat>
    				wcscat(new_path, fno.fname);			// new_path=  /PIONEER/USBANLZ/ + [directory] + /[subdir]
 801e3ca:	4951      	ldr	r1, [pc, #324]	; (801e510 <scan_files+0x320>)
 801e3cc:	484e      	ldr	r0, [pc, #312]	; (801e508 <scan_files+0x318>)
 801e3ce:	f007 ff0e 	bl	80261ee <wcscat>
    				wcscat(relative_path, L"/");
 801e3d2:	1d3b      	adds	r3, r7, #4
 801e3d4:	4950      	ldr	r1, [pc, #320]	; (801e518 <scan_files+0x328>)
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	f007 ff09 	bl	80261ee <wcscat>
    				wcscat(relative_path, fno.fname);		// rel_path= [directory] + /[subdir]
 801e3dc:	1d3b      	adds	r3, r7, #4
 801e3de:	494c      	ldr	r1, [pc, #304]	; (801e510 <scan_files+0x320>)
 801e3e0:	4618      	mov	r0, r3
 801e3e2:	f007 ff04 	bl	80261ee <wcscat>
    				f_closedir(&folder);
 801e3e6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e3ea:	4618      	mov	r0, r3
 801e3ec:	f7f3 f88f 	bl	801150e <f_closedir>
    				res = f_opendir(&folder, new_path);		//one more level deeper
 801e3f0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e3f4:	4944      	ldr	r1, [pc, #272]	; (801e508 <scan_files+0x318>)
 801e3f6:	4618      	mov	r0, r3
 801e3f8:	f7f2 fff9 	bl	80113ee <f_opendir>
 801e3fc:	4603      	mov	r3, r0
 801e3fe:	461a      	mov	r2, r3
 801e400:	4b3f      	ldr	r3, [pc, #252]	; (801e500 <scan_files+0x310>)
 801e402:	701a      	strb	r2, [r3, #0]
    				if(res == FR_OK) {
 801e404:	4b3e      	ldr	r3, [pc, #248]	; (801e500 <scan_files+0x310>)
 801e406:	781b      	ldrb	r3, [r3, #0]
 801e408:	2b00      	cmp	r3, #0
 801e40a:	d18a      	bne.n	801e322 <scan_files+0x132>
    					res = f_readdir(&folder, &fno);		//there should be files!
 801e40c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e410:	493c      	ldr	r1, [pc, #240]	; (801e504 <scan_files+0x314>)
 801e412:	4618      	mov	r0, r3
 801e414:	f7f3 f893 	bl	801153e <f_readdir>
 801e418:	4603      	mov	r3, r0
 801e41a:	461a      	mov	r2, r3
 801e41c:	4b38      	ldr	r3, [pc, #224]	; (801e500 <scan_files+0x310>)
 801e41e:	701a      	strb	r2, [r3, #0]
    					if (!(fno.fattrib & AM_DIR)) {
 801e420:	4b38      	ldr	r3, [pc, #224]	; (801e504 <scan_files+0x314>)
 801e422:	7b1b      	ldrb	r3, [r3, #12]
 801e424:	f003 0310 	and.w	r3, r3, #16
 801e428:	2b00      	cmp	r3, #0
 801e42a:	f47f af7a 	bne.w	801e322 <scan_files+0x132>
    						for(i=0; i<255; i++) TrackPaths[Total_tracks][i] = ff_convert(new_path[i], 0);		//populate database
 801e42e:	2300      	movs	r3, #0
 801e430:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e434:	e01c      	b.n	801e470 <scan_files+0x280>
 801e436:	4a34      	ldr	r2, [pc, #208]	; (801e508 <scan_files+0x318>)
 801e438:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e440:	2100      	movs	r1, #0
 801e442:	4618      	mov	r0, r3
 801e444:	f7f3 f914 	bl	8011670 <ff_convert>
 801e448:	4602      	mov	r2, r0
 801e44a:	4b34      	ldr	r3, [pc, #208]	; (801e51c <scan_files+0x32c>)
 801e44c:	881b      	ldrh	r3, [r3, #0]
 801e44e:	4619      	mov	r1, r3
 801e450:	b2d0      	uxtb	r0, r2
 801e452:	4a33      	ldr	r2, [pc, #204]	; (801e520 <scan_files+0x330>)
 801e454:	460b      	mov	r3, r1
 801e456:	021b      	lsls	r3, r3, #8
 801e458:	1a5b      	subs	r3, r3, r1
 801e45a:	441a      	add	r2, r3
 801e45c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e460:	4413      	add	r3, r2
 801e462:	4602      	mov	r2, r0
 801e464:	701a      	strb	r2, [r3, #0]
 801e466:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e46a:	3301      	adds	r3, #1
 801e46c:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e470:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e474:	2bfe      	cmp	r3, #254	; 0xfe
 801e476:	d9de      	bls.n	801e436 <scan_files+0x246>
    						wcscat(new_path, L"/");
 801e478:	4927      	ldr	r1, [pc, #156]	; (801e518 <scan_files+0x328>)
 801e47a:	4823      	ldr	r0, [pc, #140]	; (801e508 <scan_files+0x318>)
 801e47c:	f007 feb7 	bl	80261ee <wcscat>
    						wcscat(new_path, fno.fname);			//one of the files --- does not matter -- all starts with the main header then the mediafile
 801e480:	4923      	ldr	r1, [pc, #140]	; (801e510 <scan_files+0x320>)
 801e482:	4821      	ldr	r0, [pc, #132]	; (801e508 <scan_files+0x318>)
 801e484:	f007 feb3 	bl	80261ee <wcscat>
    						GetFileName(new_path);
 801e488:	481f      	ldr	r0, [pc, #124]	; (801e508 <scan_files+0x318>)
 801e48a:	f002 f83b 	bl	8020504 <GetFileName>
    						for(i = 0; i < 255; i++) TrackTable[Total_tracks][i] = rekordbox.file[i];
 801e48e:	2300      	movs	r3, #0
 801e490:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e494:	e018      	b.n	801e4c8 <scan_files+0x2d8>
 801e496:	4b21      	ldr	r3, [pc, #132]	; (801e51c <scan_files+0x32c>)
 801e498:	881b      	ldrh	r3, [r3, #0]
 801e49a:	4619      	mov	r1, r3
 801e49c:	4a21      	ldr	r2, [pc, #132]	; (801e524 <scan_files+0x334>)
 801e49e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e4a2:	4413      	add	r3, r2
 801e4a4:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 801e4a8:	7818      	ldrb	r0, [r3, #0]
 801e4aa:	4a1f      	ldr	r2, [pc, #124]	; (801e528 <scan_files+0x338>)
 801e4ac:	460b      	mov	r3, r1
 801e4ae:	021b      	lsls	r3, r3, #8
 801e4b0:	1a5b      	subs	r3, r3, r1
 801e4b2:	441a      	add	r2, r3
 801e4b4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e4b8:	4413      	add	r3, r2
 801e4ba:	4602      	mov	r2, r0
 801e4bc:	701a      	strb	r2, [r3, #0]
 801e4be:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e4c2:	3301      	adds	r3, #1
 801e4c4:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e4c8:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e4cc:	2bfe      	cmp	r3, #254	; 0xfe
 801e4ce:	d9e2      	bls.n	801e496 <scan_files+0x2a6>
    						Total_tracks++;
 801e4d0:	4b12      	ldr	r3, [pc, #72]	; (801e51c <scan_files+0x32c>)
 801e4d2:	881b      	ldrh	r3, [r3, #0]
 801e4d4:	3301      	adds	r3, #1
 801e4d6:	b29a      	uxth	r2, r3
 801e4d8:	4b10      	ldr	r3, [pc, #64]	; (801e51c <scan_files+0x32c>)
 801e4da:	801a      	strh	r2, [r3, #0]
    						f_closedir(&folder);
 801e4dc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	f7f3 f814 	bl	801150e <f_closedir>
    			res = f_opendir(&folder, old_path);			//we have to go deeper
 801e4e6:	e71c      	b.n	801e322 <scan_files+0x132>
    	res = f_opendir(&folder, L"/PIONEER/USBANLZ");	/* Open the directory */
 801e4e8:	e69a      	b.n	801e220 <scan_files+0x30>
    		break;	/* Break on error or no dir */
 801e4ea:	bf00      	nop
    				}
    			}
    		}
    	}
    }
    return res;
 801e4ec:	4b04      	ldr	r3, [pc, #16]	; (801e500 <scan_files+0x310>)
 801e4ee:	781b      	ldrb	r3, [r3, #0]
}
 801e4f0:	4618      	mov	r0, r3
 801e4f2:	f507 678c 	add.w	r7, r7, #1120	; 0x460
 801e4f6:	46bd      	mov	sp, r7
 801e4f8:	bd80      	pop	{r7, pc}
 801e4fa:	bf00      	nop
 801e4fc:	08026d20 	.word	0x08026d20
 801e500:	20001160 	.word	0x20001160
 801e504:	200011b8 	.word	0x200011b8
 801e508:	20001600 	.word	0x20001600
 801e50c:	08026d64 	.word	0x08026d64
 801e510:	200011fc 	.word	0x200011fc
 801e514:	200019fc 	.word	0x200019fc
 801e518:	08026dac 	.word	0x08026dac
 801e51c:	20001f94 	.word	0x20001f94
 801e520:	20008334 	.word	0x20008334
 801e524:	20015170 	.word	0x20015170
 801e528:	20001f98 	.word	0x20001f98

0801e52c <find_file>:

FRESULT find_file(uint16_t track_number)
{
 801e52c:	b580      	push	{r7, lr}
 801e52e:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 801e532:	af00      	add	r7, sp, #0
 801e534:	4602      	mov	r2, r0
 801e536:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801e53a:	f2a3 435a 	subw	r3, r3, #1114	; 0x45a
 801e53e:	801a      	strh	r2, [r3, #0]
    DIR folder;
    TCHAR path[255] = {0};
 801e540:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801e544:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 801e548:	4618      	mov	r0, r3
 801e54a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 801e54e:	461a      	mov	r2, r3
 801e550:	2100      	movs	r1, #0
 801e552:	f007 fd11 	bl	8025f78 <memset>
    for(int i=0; i<255; i++) path[i] = ff_convert(TrackPaths[Track_number][i], 1);
 801e556:	2300      	movs	r3, #0
 801e558:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e55c:	e01c      	b.n	801e598 <find_file+0x6c>
 801e55e:	4b23      	ldr	r3, [pc, #140]	; (801e5ec <find_file+0xc0>)
 801e560:	681a      	ldr	r2, [r3, #0]
 801e562:	4923      	ldr	r1, [pc, #140]	; (801e5f0 <find_file+0xc4>)
 801e564:	4613      	mov	r3, r2
 801e566:	021b      	lsls	r3, r3, #8
 801e568:	1a9b      	subs	r3, r3, r2
 801e56a:	18ca      	adds	r2, r1, r3
 801e56c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e570:	4413      	add	r3, r2
 801e572:	781b      	ldrb	r3, [r3, #0]
 801e574:	2101      	movs	r1, #1
 801e576:	4618      	mov	r0, r3
 801e578:	f7f3 f87a 	bl	8011670 <ff_convert>
 801e57c:	4601      	mov	r1, r0
 801e57e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801e582:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 801e586:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 801e58a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801e58e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e592:	3301      	adds	r3, #1
 801e594:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 801e598:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801e59c:	2bfe      	cmp	r3, #254	; 0xfe
 801e59e:	ddde      	ble.n	801e55e <find_file+0x32>
    wcscpy(new_path, path);
 801e5a0:	f107 030c 	add.w	r3, r7, #12
 801e5a4:	4619      	mov	r1, r3
 801e5a6:	4813      	ldr	r0, [pc, #76]	; (801e5f4 <find_file+0xc8>)
 801e5a8:	f007 fe31 	bl	802620e <wcscpy>
	res = f_opendir(&folder, new_path);
 801e5ac:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801e5b0:	4910      	ldr	r1, [pc, #64]	; (801e5f4 <find_file+0xc8>)
 801e5b2:	4618      	mov	r0, r3
 801e5b4:	f7f2 ff1b 	bl	80113ee <f_opendir>
 801e5b8:	4603      	mov	r3, r0
 801e5ba:	461a      	mov	r2, r3
 801e5bc:	4b0e      	ldr	r3, [pc, #56]	; (801e5f8 <find_file+0xcc>)
 801e5be:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK) {
 801e5c0:	4b0d      	ldr	r3, [pc, #52]	; (801e5f8 <find_file+0xcc>)
 801e5c2:	781b      	ldrb	r3, [r3, #0]
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	d109      	bne.n	801e5dc <find_file+0xb0>
		res = f_readdir(&folder, &fno);
 801e5c8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801e5cc:	490b      	ldr	r1, [pc, #44]	; (801e5fc <find_file+0xd0>)
 801e5ce:	4618      	mov	r0, r3
 801e5d0:	f7f2 ffb5 	bl	801153e <f_readdir>
 801e5d4:	4603      	mov	r3, r0
 801e5d6:	461a      	mov	r2, r3
 801e5d8:	4b07      	ldr	r3, [pc, #28]	; (801e5f8 <find_file+0xcc>)
 801e5da:	701a      	strb	r2, [r3, #0]
		if (!(fno.fattrib & AM_DIR)) {
		}
	}
    return res;
 801e5dc:	4b06      	ldr	r3, [pc, #24]	; (801e5f8 <find_file+0xcc>)
 801e5de:	781b      	ldrb	r3, [r3, #0]
}
 801e5e0:	4618      	mov	r0, r3
 801e5e2:	f507 678c 	add.w	r7, r7, #1120	; 0x460
 801e5e6:	46bd      	mov	sp, r7
 801e5e8:	bd80      	pop	{r7, pc}
 801e5ea:	bf00      	nop
 801e5ec:	20000aa8 	.word	0x20000aa8
 801e5f0:	20008334 	.word	0x20008334
 801e5f4:	20001600 	.word	0x20001600
 801e5f8:	20001160 	.word	0x20001160
 801e5fc:	200011b8 	.word	0x200011b8

0801e600 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 801e600:	b580      	push	{r7, lr}
 801e602:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 801e604:	f7e2 ffe0 	bl	80015c8 <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 801e608:	2004      	movs	r0, #4
 801e60a:	f7e2 fff5 	bl	80015f8 <HAL_MPU_Enable>

}
 801e60e:	bf00      	nop
 801e610:	bd80      	pop	{r7, pc}

0801e612 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801e612:	b480      	push	{r7}
 801e614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 801e616:	e7fe      	b.n	801e616 <Error_Handler+0x4>

0801e618 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 801e618:	b480      	push	{r7}
 801e61a:	b083      	sub	sp, #12
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	6078      	str	r0, [r7, #4]
 801e620:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 801e622:	bf00      	nop
 801e624:	370c      	adds	r7, #12
 801e626:	46bd      	mov	sp, r7
 801e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e62c:	4770      	bx	lr

0801e62e <Mp3ReadId3V2Text>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Text(FIL* pInFile, uint32_t unDataLen, char* pszBuffer, uint32_t unBufferSize)
{
 801e62e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e632:	b088      	sub	sp, #32
 801e634:	af00      	add	r7, sp, #0
 801e636:	60f8      	str	r0, [r7, #12]
 801e638:	60b9      	str	r1, [r7, #8]
 801e63a:	607a      	str	r2, [r7, #4]
 801e63c:	603b      	str	r3, [r7, #0]
	UINT unRead = 0;
 801e63e:	2300      	movs	r3, #0
 801e640:	617b      	str	r3, [r7, #20]
	BYTE byEncoding = 0;
 801e642:	2300      	movs	r3, #0
 801e644:	74fb      	strb	r3, [r7, #19]
	if((f_read(pInFile, &byEncoding, 1, &unRead) == FR_OK) && (unRead == 1))
 801e646:	f107 0314 	add.w	r3, r7, #20
 801e64a:	f107 0113 	add.w	r1, r7, #19
 801e64e:	2201      	movs	r2, #1
 801e650:	68f8      	ldr	r0, [r7, #12]
 801e652:	f7f2 fa9f 	bl	8010b94 <f_read>
 801e656:	4603      	mov	r3, r0
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d168      	bne.n	801e72e <Mp3ReadId3V2Text+0x100>
 801e65c:	697b      	ldr	r3, [r7, #20]
 801e65e:	2b01      	cmp	r3, #1
 801e660:	d165      	bne.n	801e72e <Mp3ReadId3V2Text+0x100>
	{
		unDataLen--;
 801e662:	68bb      	ldr	r3, [r7, #8]
 801e664:	3b01      	subs	r3, #1
 801e666:	60bb      	str	r3, [r7, #8]
		if(unDataLen <= (unBufferSize - 1))
 801e668:	683b      	ldr	r3, [r7, #0]
 801e66a:	3b01      	subs	r3, #1
 801e66c:	68ba      	ldr	r2, [r7, #8]
 801e66e:	429a      	cmp	r2, r3
 801e670:	d846      	bhi.n	801e700 <Mp3ReadId3V2Text+0xd2>
		{
			if((f_read(pInFile, pszBuffer, unDataLen, &unRead) == FR_OK) ||
 801e672:	f107 0314 	add.w	r3, r7, #20
 801e676:	68ba      	ldr	r2, [r7, #8]
 801e678:	6879      	ldr	r1, [r7, #4]
 801e67a:	68f8      	ldr	r0, [r7, #12]
 801e67c:	f7f2 fa8a 	bl	8010b94 <f_read>
 801e680:	4603      	mov	r3, r0
 801e682:	2b00      	cmp	r3, #0
 801e684:	d003      	beq.n	801e68e <Mp3ReadId3V2Text+0x60>
					(unRead == unDataLen))
 801e686:	697b      	ldr	r3, [r7, #20]
			if((f_read(pInFile, pszBuffer, unDataLen, &unRead) == FR_OK) ||
 801e688:	68ba      	ldr	r2, [r7, #8]
 801e68a:	429a      	cmp	r2, r3
 801e68c:	d136      	bne.n	801e6fc <Mp3ReadId3V2Text+0xce>
			{
				if(byEncoding == 0)
 801e68e:	7cfb      	ldrb	r3, [r7, #19]
 801e690:	2b00      	cmp	r3, #0
 801e692:	d105      	bne.n	801e6a0 <Mp3ReadId3V2Text+0x72>
				{
					// ISO-8859-1 multibyte
					// just add a terminating zero
					pszBuffer[unDataLen] = 0;
 801e694:	687a      	ldr	r2, [r7, #4]
 801e696:	68bb      	ldr	r3, [r7, #8]
 801e698:	4413      	add	r3, r2
 801e69a:	2200      	movs	r2, #0
 801e69c:	701a      	strb	r2, [r3, #0]
				if(byEncoding == 0)
 801e69e:	e044      	b.n	801e72a <Mp3ReadId3V2Text+0xfc>
				}
				else if(byEncoding == 1)
 801e6a0:	7cfb      	ldrb	r3, [r7, #19]
 801e6a2:	2b01      	cmp	r3, #1
 801e6a4:	d141      	bne.n	801e72a <Mp3ReadId3V2Text+0xfc>
				{
					// UTF16LE unicode
					uint32_t r = 0;
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	61fb      	str	r3, [r7, #28]
					uint32_t w = 0;
 801e6aa:	2300      	movs	r3, #0
 801e6ac:	61bb      	str	r3, [r7, #24]
					if((unDataLen > 2) && (pszBuffer[0] == 0xFF) && (pszBuffer[1] == 0xFE))
 801e6ae:	68bb      	ldr	r3, [r7, #8]
 801e6b0:	2b02      	cmp	r3, #2
 801e6b2:	d919      	bls.n	801e6e8 <Mp3ReadId3V2Text+0xba>
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	781b      	ldrb	r3, [r3, #0]
 801e6b8:	2bff      	cmp	r3, #255	; 0xff
 801e6ba:	d115      	bne.n	801e6e8 <Mp3ReadId3V2Text+0xba>
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	3301      	adds	r3, #1
 801e6c0:	781b      	ldrb	r3, [r3, #0]
 801e6c2:	2bfe      	cmp	r3, #254	; 0xfe
 801e6c4:	d110      	bne.n	801e6e8 <Mp3ReadId3V2Text+0xba>
					{
						// ignore BOM, assume LE
						r = 2;
 801e6c6:	2302      	movs	r3, #2
 801e6c8:	61fb      	str	r3, [r7, #28]
					}
					for(; r < unDataLen; r += 2, w += 1)
 801e6ca:	e00d      	b.n	801e6e8 <Mp3ReadId3V2Text+0xba>
					{
						// should be acceptable for 7 bit ascii
						pszBuffer[w] = pszBuffer[r];
 801e6cc:	687a      	ldr	r2, [r7, #4]
 801e6ce:	69fb      	ldr	r3, [r7, #28]
 801e6d0:	441a      	add	r2, r3
 801e6d2:	6879      	ldr	r1, [r7, #4]
 801e6d4:	69bb      	ldr	r3, [r7, #24]
 801e6d6:	440b      	add	r3, r1
 801e6d8:	7812      	ldrb	r2, [r2, #0]
 801e6da:	701a      	strb	r2, [r3, #0]
					for(; r < unDataLen; r += 2, w += 1)
 801e6dc:	69fb      	ldr	r3, [r7, #28]
 801e6de:	3302      	adds	r3, #2
 801e6e0:	61fb      	str	r3, [r7, #28]
 801e6e2:	69bb      	ldr	r3, [r7, #24]
 801e6e4:	3301      	adds	r3, #1
 801e6e6:	61bb      	str	r3, [r7, #24]
 801e6e8:	69fa      	ldr	r2, [r7, #28]
 801e6ea:	68bb      	ldr	r3, [r7, #8]
 801e6ec:	429a      	cmp	r2, r3
 801e6ee:	d3ed      	bcc.n	801e6cc <Mp3ReadId3V2Text+0x9e>
					}
					pszBuffer[w] = 0;
 801e6f0:	687a      	ldr	r2, [r7, #4]
 801e6f2:	69bb      	ldr	r3, [r7, #24]
 801e6f4:	4413      	add	r3, r2
 801e6f6:	2200      	movs	r2, #0
 801e6f8:	701a      	strb	r2, [r3, #0]
				if(byEncoding == 0)
 801e6fa:	e016      	b.n	801e72a <Mp3ReadId3V2Text+0xfc>
				}
			}
			else
			{
				return 1;
 801e6fc:	2301      	movs	r3, #1
 801e6fe:	e01a      	b.n	801e736 <Mp3ReadId3V2Text+0x108>
			}
		}
		else
		{
			// we won't read a partial text
			if(f_lseek(pInFile, f_tell(pInFile) + unDataLen) != FR_OK)
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801e706:	68b9      	ldr	r1, [r7, #8]
 801e708:	2000      	movs	r0, #0
 801e70a:	460c      	mov	r4, r1
 801e70c:	4605      	mov	r5, r0
 801e70e:	eb12 0804 	adds.w	r8, r2, r4
 801e712:	eb43 0905 	adc.w	r9, r3, r5
 801e716:	4642      	mov	r2, r8
 801e718:	464b      	mov	r3, r9
 801e71a:	68f8      	ldr	r0, [r7, #12]
 801e71c:	f7f2 fb8d 	bl	8010e3a <f_lseek>
 801e720:	4603      	mov	r3, r0
 801e722:	2b00      	cmp	r3, #0
 801e724:	d005      	beq.n	801e732 <Mp3ReadId3V2Text+0x104>
			{
				return 1;
 801e726:	2301      	movs	r3, #1
 801e728:	e005      	b.n	801e736 <Mp3ReadId3V2Text+0x108>
				if(byEncoding == 0)
 801e72a:	bf00      	nop
		if(unDataLen <= (unBufferSize - 1))
 801e72c:	e001      	b.n	801e732 <Mp3ReadId3V2Text+0x104>
			}
		}
	}
	else
	{
		return 1;
 801e72e:	2301      	movs	r3, #1
 801e730:	e001      	b.n	801e736 <Mp3ReadId3V2Text+0x108>
		if(unDataLen <= (unBufferSize - 1))
 801e732:	bf00      	nop
	}
	return 0;
 801e734:	2300      	movs	r3, #0
}
 801e736:	4618      	mov	r0, r3
 801e738:	3720      	adds	r7, #32
 801e73a:	46bd      	mov	sp, r7
 801e73c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801e740 <Mp3ReadId3V2Tag>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Tag(FIL* pInFile, char* pszArtist, uint32_t unArtistSize, char* pszTitle, uint32_t unTitleSize)
{
 801e740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e744:	b098      	sub	sp, #96	; 0x60
 801e746:	af00      	add	r7, sp, #0
 801e748:	61f8      	str	r0, [r7, #28]
 801e74a:	61b9      	str	r1, [r7, #24]
 801e74c:	617a      	str	r2, [r7, #20]
 801e74e:	613b      	str	r3, [r7, #16]
	pszArtist[0] = 0;
 801e750:	69bb      	ldr	r3, [r7, #24]
 801e752:	2200      	movs	r2, #0
 801e754:	701a      	strb	r2, [r3, #0]
	pszTitle[0] = 0;
 801e756:	693b      	ldr	r3, [r7, #16]
 801e758:	2200      	movs	r2, #0
 801e75a:	701a      	strb	r2, [r3, #0]

	BYTE id3hd[10];
	UINT unRead = 0;
 801e75c:	2300      	movs	r3, #0
 801e75e:	63bb      	str	r3, [r7, #56]	; 0x38
	// read ID3 tag header (10 bytes)
	if((f_read(pInFile, id3hd, 10, &unRead) != FR_OK) || (unRead != 10))
 801e760:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e764:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801e768:	220a      	movs	r2, #10
 801e76a:	69f8      	ldr	r0, [r7, #28]
 801e76c:	f7f2 fa12 	bl	8010b94 <f_read>
 801e770:	4603      	mov	r3, r0
 801e772:	2b00      	cmp	r3, #0
 801e774:	d102      	bne.n	801e77c <Mp3ReadId3V2Tag+0x3c>
 801e776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e778:	2b0a      	cmp	r3, #10
 801e77a:	d001      	beq.n	801e780 <Mp3ReadId3V2Tag+0x40>
	{
		return 1;
 801e77c:	2301      	movs	r3, #1
 801e77e:	e12f      	b.n	801e9e0 <Mp3ReadId3V2Tag+0x2a0>
	}
	else
	{
		uint32_t unSkip = 0;
 801e780:	2300      	movs	r3, #0
 801e782:	65fb      	str	r3, [r7, #92]	; 0x5c
		id3tagsize = 0;
 801e784:	4b99      	ldr	r3, [pc, #612]	; (801e9ec <Mp3ReadId3V2Tag+0x2ac>)
 801e786:	2200      	movs	r2, #0
 801e788:	601a      	str	r2, [r3, #0]
		if((unRead == 10) &&
 801e78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e78c:	2b0a      	cmp	r3, #10
 801e78e:	f040 8118 	bne.w	801e9c2 <Mp3ReadId3V2Tag+0x282>
				(id3hd[0] == 'I') &&
 801e792:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
		if((unRead == 10) &&
 801e796:	2b49      	cmp	r3, #73	; 0x49
 801e798:	f040 8113 	bne.w	801e9c2 <Mp3ReadId3V2Tag+0x282>
				(id3hd[1] == 'D') &&
 801e79c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
				(id3hd[0] == 'I') &&
 801e7a0:	2b44      	cmp	r3, #68	; 0x44
 801e7a2:	f040 810e 	bne.w	801e9c2 <Mp3ReadId3V2Tag+0x282>
				(id3hd[2] == '3'))
 801e7a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
				(id3hd[1] == 'D') &&
 801e7aa:	2b33      	cmp	r3, #51	; 0x33
 801e7ac:	f040 8109 	bne.w	801e9c2 <Mp3ReadId3V2Tag+0x282>
		{
			// include ID3 header size (10 bytes)
			unSkip += 10;
 801e7b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e7b2:	330a      	adds	r3, #10
 801e7b4:	65fb      	str	r3, [r7, #92]	; 0x5c
			// ID3 tag full size
			unSkip = ((id3hd[6] & 0x7f) << 21) | ((id3hd[7] & 0x7f) << 14) | ((id3hd[8] & 0x7f) << 7) | (id3hd[9] & 0x7f);
 801e7b6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801e7ba:	055b      	lsls	r3, r3, #21
 801e7bc:	f003 627e 	and.w	r2, r3, #266338304	; 0xfe00000
 801e7c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801e7c4:	039b      	lsls	r3, r3, #14
 801e7c6:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
 801e7ca:	431a      	orrs	r2, r3
 801e7cc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801e7d0:	01db      	lsls	r3, r3, #7
 801e7d2:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 801e7d6:	431a      	orrs	r2, r3
 801e7d8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801e7dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e7e0:	4313      	orrs	r3, r2
 801e7e2:	65fb      	str	r3, [r7, #92]	; 0x5c
			id3tagsize = unSkip;
 801e7e4:	4a81      	ldr	r2, [pc, #516]	; (801e9ec <Mp3ReadId3V2Tag+0x2ac>)
 801e7e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e7e8:	6013      	str	r3, [r2, #0]
			// try to get some information from the tag
			// skip the extended header, if present
			uint8_t unVersion = id3hd[3];
 801e7ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801e7ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if(id3hd[5] & 0x40)
 801e7f2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801e7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d038      	beq.n	801e870 <Mp3ReadId3V2Tag+0x130>
			{
				BYTE exhd[4];
				f_read(pInFile, exhd, 4, &unRead);
 801e7fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e802:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801e806:	2204      	movs	r2, #4
 801e808:	69f8      	ldr	r0, [r7, #28]
 801e80a:	f7f2 f9c3 	bl	8010b94 <f_read>
				size_t unExHdrSkip = ((exhd[0] & 0x7f) << 21) | ((exhd[1] & 0x7f) << 14) | ((exhd[2] & 0x7f) << 7) | (exhd[3] & 0x7f);
 801e80e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801e812:	055b      	lsls	r3, r3, #21
 801e814:	f003 627e 	and.w	r2, r3, #266338304	; 0xfe00000
 801e818:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801e81c:	039b      	lsls	r3, r3, #14
 801e81e:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
 801e822:	431a      	orrs	r2, r3
 801e824:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801e828:	01db      	lsls	r3, r3, #7
 801e82a:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 801e82e:	431a      	orrs	r2, r3
 801e830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801e834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e838:	4313      	orrs	r3, r2
 801e83a:	64bb      	str	r3, [r7, #72]	; 0x48
				unExHdrSkip -= 4;
 801e83c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e83e:	3b04      	subs	r3, #4
 801e840:	64bb      	str	r3, [r7, #72]	; 0x48
				if(f_lseek(pInFile, f_tell(pInFile) + unExHdrSkip) != FR_OK)
 801e842:	69fb      	ldr	r3, [r7, #28]
 801e844:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801e848:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801e84a:	2000      	movs	r0, #0
 801e84c:	4688      	mov	r8, r1
 801e84e:	4681      	mov	r9, r0
 801e850:	eb12 0108 	adds.w	r1, r2, r8
 801e854:	60b9      	str	r1, [r7, #8]
 801e856:	eb43 0309 	adc.w	r3, r3, r9
 801e85a:	60fb      	str	r3, [r7, #12]
 801e85c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801e860:	69f8      	ldr	r0, [r7, #28]
 801e862:	f7f2 faea 	bl	8010e3a <f_lseek>
 801e866:	4603      	mov	r3, r0
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d001      	beq.n	801e870 <Mp3ReadId3V2Tag+0x130>
				{
					return 1;
 801e86c:	2301      	movs	r3, #1
 801e86e:	e0b7      	b.n	801e9e0 <Mp3ReadId3V2Tag+0x2a0>
				}
			}
			uint32_t nFramesToRead = 2;
 801e870:	2302      	movs	r3, #2
 801e872:	65bb      	str	r3, [r7, #88]	; 0x58
			while(nFramesToRead > 0)
 801e874:	e09d      	b.n	801e9b2 <Mp3ReadId3V2Tag+0x272>
			{
				char frhd[10];
				if((f_read(pInFile, frhd, 10, &unRead) != FR_OK) || (unRead != 10))
 801e876:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e87a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801e87e:	220a      	movs	r2, #10
 801e880:	69f8      	ldr	r0, [r7, #28]
 801e882:	f7f2 f987 	bl	8010b94 <f_read>
 801e886:	4603      	mov	r3, r0
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d102      	bne.n	801e892 <Mp3ReadId3V2Tag+0x152>
 801e88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e88e:	2b0a      	cmp	r3, #10
 801e890:	d001      	beq.n	801e896 <Mp3ReadId3V2Tag+0x156>
				{
					return 1;
 801e892:	2301      	movs	r3, #1
 801e894:	e0a4      	b.n	801e9e0 <Mp3ReadId3V2Tag+0x2a0>
				}
				if((frhd[0] == 0) || (strncmp(frhd, "3DI", 3) == 0))
 801e896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e89a:	2b00      	cmp	r3, #0
 801e89c:	f000 8091 	beq.w	801e9c2 <Mp3ReadId3V2Tag+0x282>
 801e8a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e8a4:	2203      	movs	r2, #3
 801e8a6:	4952      	ldr	r1, [pc, #328]	; (801e9f0 <Mp3ReadId3V2Tag+0x2b0>)
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	f007 fc8c 	bl	80261c6 <strncmp>
 801e8ae:	4603      	mov	r3, r0
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	f000 8086 	beq.w	801e9c2 <Mp3ReadId3V2Tag+0x282>
				{
					break;
				}
				char szFrameId[5] = {0, 0, 0, 0, 0};
 801e8b6:	4a4f      	ldr	r2, [pc, #316]	; (801e9f4 <Mp3ReadId3V2Tag+0x2b4>)
 801e8b8:	f107 0320 	add.w	r3, r7, #32
 801e8bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e8c0:	6018      	str	r0, [r3, #0]
 801e8c2:	3304      	adds	r3, #4
 801e8c4:	7019      	strb	r1, [r3, #0]
 801e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
				memcpy(szFrameId, frhd, 4);
 801e8c8:	623b      	str	r3, [r7, #32]
				uint32_t unFrameSize = 0;
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	657b      	str	r3, [r7, #84]	; 0x54
				uint32_t i = 0;
 801e8ce:	2300      	movs	r3, #0
 801e8d0:	653b      	str	r3, [r7, #80]	; 0x50
				for(; i < 4; i++)
 801e8d2:	e029      	b.n	801e928 <Mp3ReadId3V2Tag+0x1e8>
				{
					if(unVersion == 3)
 801e8d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801e8d8:	2b03      	cmp	r3, #3
 801e8da:	d10e      	bne.n	801e8fa <Mp3ReadId3V2Tag+0x1ba>
					{
						// ID3v2.3
						unFrameSize <<= 8;
 801e8dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e8de:	021b      	lsls	r3, r3, #8
 801e8e0:	657b      	str	r3, [r7, #84]	; 0x54
						unFrameSize += frhd[i + 4];
 801e8e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e8e4:	3304      	adds	r3, #4
 801e8e6:	3350      	adds	r3, #80	; 0x50
 801e8e8:	f107 0210 	add.w	r2, r7, #16
 801e8ec:	4413      	add	r3, r2
 801e8ee:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 801e8f2:	461a      	mov	r2, r3
 801e8f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e8f6:	4413      	add	r3, r2
 801e8f8:	657b      	str	r3, [r7, #84]	; 0x54
					}
					if(unVersion == 4)
 801e8fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801e8fe:	2b04      	cmp	r3, #4
 801e900:	d10f      	bne.n	801e922 <Mp3ReadId3V2Tag+0x1e2>
					{
						// ID3v2.4
						unFrameSize <<= 7;
 801e902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e904:	01db      	lsls	r3, r3, #7
 801e906:	657b      	str	r3, [r7, #84]	; 0x54
						unFrameSize += frhd[i + 4] & 0x7F;
 801e908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e90a:	3304      	adds	r3, #4
 801e90c:	3350      	adds	r3, #80	; 0x50
 801e90e:	f107 0210 	add.w	r2, r7, #16
 801e912:	4413      	add	r3, r2
 801e914:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 801e918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e91c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e91e:	4413      	add	r3, r2
 801e920:	657b      	str	r3, [r7, #84]	; 0x54
				for(; i < 4; i++)
 801e922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e924:	3301      	adds	r3, #1
 801e926:	653b      	str	r3, [r7, #80]	; 0x50
 801e928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e92a:	2b03      	cmp	r3, #3
 801e92c:	d9d2      	bls.n	801e8d4 <Mp3ReadId3V2Tag+0x194>
					}
				}

				if(strcmp(szFrameId, "TPE1") == 0)
 801e92e:	f107 0320 	add.w	r3, r7, #32
 801e932:	4931      	ldr	r1, [pc, #196]	; (801e9f8 <Mp3ReadId3V2Tag+0x2b8>)
 801e934:	4618      	mov	r0, r3
 801e936:	f7e1 fc6b 	bl	8000210 <strcmp>
 801e93a:	4603      	mov	r3, r0
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d10c      	bne.n	801e95a <Mp3ReadId3V2Tag+0x21a>
				{
					// artist
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszArtist, unArtistSize) != 0)
 801e940:	697b      	ldr	r3, [r7, #20]
 801e942:	69ba      	ldr	r2, [r7, #24]
 801e944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e946:	69f8      	ldr	r0, [r7, #28]
 801e948:	f7ff fe71 	bl	801e62e <Mp3ReadId3V2Text>
 801e94c:	4603      	mov	r3, r0
 801e94e:	2b00      	cmp	r3, #0
 801e950:	d134      	bne.n	801e9bc <Mp3ReadId3V2Tag+0x27c>
					{
						break;
					}
					nFramesToRead--;
 801e952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e954:	3b01      	subs	r3, #1
 801e956:	65bb      	str	r3, [r7, #88]	; 0x58
 801e958:	e02b      	b.n	801e9b2 <Mp3ReadId3V2Tag+0x272>
				}
				else if(strcmp(szFrameId, "TIT2") == 0)
 801e95a:	f107 0320 	add.w	r3, r7, #32
 801e95e:	4927      	ldr	r1, [pc, #156]	; (801e9fc <Mp3ReadId3V2Tag+0x2bc>)
 801e960:	4618      	mov	r0, r3
 801e962:	f7e1 fc55 	bl	8000210 <strcmp>
 801e966:	4603      	mov	r3, r0
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d10d      	bne.n	801e988 <Mp3ReadId3V2Tag+0x248>
				{
					// title
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszTitle, unTitleSize) != 0)
 801e96c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e970:	693a      	ldr	r2, [r7, #16]
 801e972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e974:	69f8      	ldr	r0, [r7, #28]
 801e976:	f7ff fe5a 	bl	801e62e <Mp3ReadId3V2Text>
 801e97a:	4603      	mov	r3, r0
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d11f      	bne.n	801e9c0 <Mp3ReadId3V2Tag+0x280>
					{
						break;
					}
					nFramesToRead--;
 801e980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e982:	3b01      	subs	r3, #1
 801e984:	65bb      	str	r3, [r7, #88]	; 0x58
 801e986:	e014      	b.n	801e9b2 <Mp3ReadId3V2Tag+0x272>
				}
				else
				{
					if(f_lseek(pInFile, f_tell(pInFile) + unFrameSize) != FR_OK)
 801e988:	69fb      	ldr	r3, [r7, #28]
 801e98a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801e98e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e990:	2000      	movs	r0, #0
 801e992:	460c      	mov	r4, r1
 801e994:	4605      	mov	r5, r0
 801e996:	eb12 0a04 	adds.w	sl, r2, r4
 801e99a:	eb43 0b05 	adc.w	fp, r3, r5
 801e99e:	4652      	mov	r2, sl
 801e9a0:	465b      	mov	r3, fp
 801e9a2:	69f8      	ldr	r0, [r7, #28]
 801e9a4:	f7f2 fa49 	bl	8010e3a <f_lseek>
 801e9a8:	4603      	mov	r3, r0
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d001      	beq.n	801e9b2 <Mp3ReadId3V2Tag+0x272>
					{
						return 1;
 801e9ae:	2301      	movs	r3, #1
 801e9b0:	e016      	b.n	801e9e0 <Mp3ReadId3V2Tag+0x2a0>
			while(nFramesToRead > 0)
 801e9b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	f47f af5e 	bne.w	801e876 <Mp3ReadId3V2Tag+0x136>
 801e9ba:	e002      	b.n	801e9c2 <Mp3ReadId3V2Tag+0x282>
						break;
 801e9bc:	bf00      	nop
 801e9be:	e000      	b.n	801e9c2 <Mp3ReadId3V2Tag+0x282>
						break;
 801e9c0:	bf00      	nop
					}
				}
			}
		}
		if(f_lseek(pInFile, unSkip) != FR_OK)
 801e9c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e9c4:	2200      	movs	r2, #0
 801e9c6:	603b      	str	r3, [r7, #0]
 801e9c8:	607a      	str	r2, [r7, #4]
 801e9ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e9ce:	69f8      	ldr	r0, [r7, #28]
 801e9d0:	f7f2 fa33 	bl	8010e3a <f_lseek>
 801e9d4:	4603      	mov	r3, r0
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d001      	beq.n	801e9de <Mp3ReadId3V2Tag+0x29e>
		{
			return 1;
 801e9da:	2301      	movs	r3, #1
 801e9dc:	e000      	b.n	801e9e0 <Mp3ReadId3V2Tag+0x2a0>
		}
	}

	return 0;
 801e9de:	2300      	movs	r3, #0
}
 801e9e0:	4618      	mov	r0, r3
 801e9e2:	3760      	adds	r7, #96	; 0x60
 801e9e4:	46bd      	mov	sp, r7
 801e9e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e9ea:	bf00      	nop
 801e9ec:	2000f730 	.word	0x2000f730
 801e9f0:	08026db4 	.word	0x08026db4
 801e9f4:	08026dc8 	.word	0x08026dc8
 801e9f8:	08026db8 	.word	0x08026db8
 801e9fc:	08026dc0 	.word	0x08026dc0

0801ea00 <PlayMp3File>:
		}
	}
	return res;
}

void PlayMp3File() {
 801ea00:	b580      	push	{r7, lr}
 801ea02:	b0c4      	sub	sp, #272	; 0x110
 801ea04:	af02      	add	r7, sp, #8
	BufferCtl.filetype = 1;
 801ea06:	4bac      	ldr	r3, [pc, #688]	; (801ecb8 <PlayMp3File+0x2b8>)
 801ea08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ea0c:	2201      	movs	r2, #1
 801ea0e:	721a      	strb	r2, [r3, #8]
	char szArtist[120];
	char szTitle[120];
	id3tagsize = 0;
 801ea10:	4baa      	ldr	r3, [pc, #680]	; (801ecbc <PlayMp3File+0x2bc>)
 801ea12:	2200      	movs	r2, #0
 801ea14:	601a      	str	r2, [r3, #0]
	Mp3ReadId3V2Tag(&MyFile, szArtist, sizeof(szArtist), szTitle, sizeof(szTitle));
 801ea16:	1d3b      	adds	r3, r7, #4
 801ea18:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801ea1c:	2278      	movs	r2, #120	; 0x78
 801ea1e:	9200      	str	r2, [sp, #0]
 801ea20:	2278      	movs	r2, #120	; 0x78
 801ea22:	48a7      	ldr	r0, [pc, #668]	; (801ecc0 <PlayMp3File+0x2c0>)
 801ea24:	f7ff fe8c 	bl	801e740 <Mp3ReadId3V2Tag>
	bOutOfData = 0;
 801ea28:	4ba6      	ldr	r3, [pc, #664]	; (801ecc4 <PlayMp3File+0x2c4>)
 801ea2a:	2200      	movs	r2, #0
 801ea2c:	601a      	str	r2, [r3, #0]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 801ea2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ea32:	2100      	movs	r1, #0
 801ea34:	48a0      	ldr	r0, [pc, #640]	; (801ecb8 <PlayMp3File+0x2b8>)
 801ea36:	f007 fa9f 	bl	8025f78 <memset>
	//memset(g_pMp3DmaBuffer, 0, MP3_DMA_BUFFER_SIZE);
	g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 801ea3a:	4ba3      	ldr	r3, [pc, #652]	; (801ecc8 <PlayMp3File+0x2c8>)
 801ea3c:	4aa3      	ldr	r2, [pc, #652]	; (801eccc <PlayMp3File+0x2cc>)
 801ea3e:	601a      	str	r2, [r3, #0]
	unInDataLeft = 0;
 801ea40:	4ba3      	ldr	r3, [pc, #652]	; (801ecd0 <PlayMp3File+0x2d0>)
 801ea42:	2200      	movs	r2, #0
 801ea44:	601a      	str	r2, [r3, #0]
	unDmaBufferSpace = 0;
 801ea46:	4ba3      	ldr	r3, [pc, #652]	; (801ecd4 <PlayMp3File+0x2d4>)
 801ea48:	2200      	movs	r2, #0
 801ea4a:	601a      	str	r2, [r3, #0]
	unFramesDecoded = 0;
 801ea4c:	4ba2      	ldr	r3, [pc, #648]	; (801ecd8 <PlayMp3File+0x2d8>)
 801ea4e:	2200      	movs	r2, #0
 801ea50:	601a      	str	r2, [r3, #0]
	nDecodeRes = ERR_MP3_INDATA_UNDERFLOW;
 801ea52:	4ba2      	ldr	r3, [pc, #648]	; (801ecdc <PlayMp3File+0x2dc>)
 801ea54:	f04f 32ff 	mov.w	r2, #4294967295
 801ea58:	601a      	str	r2, [r3, #0]
	unDmaBufMode = 0;
 801ea5a:	4ba1      	ldr	r3, [pc, #644]	; (801ece0 <PlayMp3File+0x2e0>)
 801ea5c:	2200      	movs	r2, #0
 801ea5e:	601a      	str	r2, [r3, #0]
	do {
		// fill the whole buffer for the first time
		if(unInDataLeft < (2 * MAINBUF_SIZE)) {
 801ea60:	4b9b      	ldr	r3, [pc, #620]	; (801ecd0 <PlayMp3File+0x2d0>)
 801ea62:	681b      	ldr	r3, [r3, #0]
 801ea64:	f640 7227 	movw	r2, #3879	; 0xf27
 801ea68:	4293      	cmp	r3, r2
 801ea6a:	dc16      	bgt.n	801ea9a <PlayMp3File+0x9a>
			UINT unRead = Mp3FillReadBuffer(pInData, unInDataLeft, &MyFile);
 801ea6c:	4b9d      	ldr	r3, [pc, #628]	; (801ece4 <PlayMp3File+0x2e4>)
 801ea6e:	681b      	ldr	r3, [r3, #0]
 801ea70:	4a97      	ldr	r2, [pc, #604]	; (801ecd0 <PlayMp3File+0x2d0>)
 801ea72:	6812      	ldr	r2, [r2, #0]
 801ea74:	4611      	mov	r1, r2
 801ea76:	4a92      	ldr	r2, [pc, #584]	; (801ecc0 <PlayMp3File+0x2c0>)
 801ea78:	4618      	mov	r0, r3
 801ea7a:	f002 fb67 	bl	802114c <Mp3FillReadBuffer>
 801ea7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
			unInDataLeft += unRead;
 801ea82:	4b93      	ldr	r3, [pc, #588]	; (801ecd0 <PlayMp3File+0x2d0>)
 801ea84:	681b      	ldr	r3, [r3, #0]
 801ea86:	461a      	mov	r2, r3
 801ea88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ea8c:	4413      	add	r3, r2
 801ea8e:	461a      	mov	r2, r3
 801ea90:	4b8f      	ldr	r3, [pc, #572]	; (801ecd0 <PlayMp3File+0x2d0>)
 801ea92:	601a      	str	r2, [r3, #0]
			pInData = BufferCtl.buff;
 801ea94:	4b93      	ldr	r3, [pc, #588]	; (801ece4 <PlayMp3File+0x2e4>)
 801ea96:	4a88      	ldr	r2, [pc, #544]	; (801ecb8 <PlayMp3File+0x2b8>)
 801ea98:	601a      	str	r2, [r3, #0]
		}
		// find start of next MP3 frame - assume EOF if no sync found
		int nOffset = MP3FindSyncWord(pInData, unInDataLeft);
 801ea9a:	4b92      	ldr	r3, [pc, #584]	; (801ece4 <PlayMp3File+0x2e4>)
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	4a8c      	ldr	r2, [pc, #560]	; (801ecd0 <PlayMp3File+0x2d0>)
 801eaa0:	6812      	ldr	r2, [r2, #0]
 801eaa2:	4611      	mov	r1, r2
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	f7f2 feb0 	bl	801180a <MP3FindSyncWord>
 801eaaa:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
		if(nOffset < 0) {
 801eaae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	da03      	bge.n	801eabe <PlayMp3File+0xbe>
			unInDataLeft = 0;
 801eab6:	4b86      	ldr	r3, [pc, #536]	; (801ecd0 <PlayMp3File+0x2d0>)
 801eab8:	2200      	movs	r2, #0
 801eaba:	601a      	str	r2, [r3, #0]
 801eabc:	e140      	b.n	801ed40 <PlayMp3File+0x340>
			//bOutOfData = 1;
			//break;
		}
		else {
			pInData += nOffset;
 801eabe:	4b89      	ldr	r3, [pc, #548]	; (801ece4 <PlayMp3File+0x2e4>)
 801eac0:	681a      	ldr	r2, [r3, #0]
 801eac2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801eac6:	4413      	add	r3, r2
 801eac8:	4a86      	ldr	r2, [pc, #536]	; (801ece4 <PlayMp3File+0x2e4>)
 801eaca:	6013      	str	r3, [r2, #0]
			unInDataLeft -= nOffset;
 801eacc:	4b80      	ldr	r3, [pc, #512]	; (801ecd0 <PlayMp3File+0x2d0>)
 801eace:	681a      	ldr	r2, [r3, #0]
 801ead0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ead4:	1ad3      	subs	r3, r2, r3
 801ead6:	4a7e      	ldr	r2, [pc, #504]	; (801ecd0 <PlayMp3File+0x2d0>)
 801ead8:	6013      	str	r3, [r2, #0]
			// decode one MP3 frame - if offset < 0 then bytesLeft was less than a full frame
			nDecodeRes = MP3Decode(hMP3Decoder, &pInData, (int*)&unInDataLeft, (short*)g_pMp3OutBuffer, 0);
 801eada:	4b83      	ldr	r3, [pc, #524]	; (801ece8 <PlayMp3File+0x2e8>)
 801eadc:	6818      	ldr	r0, [r3, #0]
 801eade:	2300      	movs	r3, #0
 801eae0:	9300      	str	r3, [sp, #0]
 801eae2:	4b82      	ldr	r3, [pc, #520]	; (801ecec <PlayMp3File+0x2ec>)
 801eae4:	4a7a      	ldr	r2, [pc, #488]	; (801ecd0 <PlayMp3File+0x2d0>)
 801eae6:	497f      	ldr	r1, [pc, #508]	; (801ece4 <PlayMp3File+0x2e4>)
 801eae8:	f7f2 ff93 	bl	8011a12 <MP3Decode>
 801eaec:	4603      	mov	r3, r0
 801eaee:	4a7b      	ldr	r2, [pc, #492]	; (801ecdc <PlayMp3File+0x2dc>)
 801eaf0:	6013      	str	r3, [r2, #0]
			switch(nDecodeRes) {
 801eaf2:	4b7a      	ldr	r3, [pc, #488]	; (801ecdc <PlayMp3File+0x2dc>)
 801eaf4:	681b      	ldr	r3, [r3, #0]
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	d00b      	beq.n	801eb12 <PlayMp3File+0x112>
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	f300 810e 	bgt.w	801ed1c <PlayMp3File+0x31c>
 801eb00:	f113 0f02 	cmn.w	r3, #2
 801eb04:	f000 8119 	beq.w	801ed3a <PlayMp3File+0x33a>
 801eb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eb0c:	f000 80cc 	beq.w	801eca8 <PlayMp3File+0x2a8>
 801eb10:	e104      	b.n	801ed1c <PlayMp3File+0x31c>
			case ERR_MP3_NONE:
			{
				MP3GetLastFrameInfo(hMP3Decoder, &mp3FrameInfo);
 801eb12:	4b75      	ldr	r3, [pc, #468]	; (801ece8 <PlayMp3File+0x2e8>)
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	4976      	ldr	r1, [pc, #472]	; (801ecf0 <PlayMp3File+0x2f0>)
 801eb18:	4618      	mov	r0, r3
 801eb1a:	f7f2 feef 	bl	80118fc <MP3GetLastFrameInfo>
				unFramesDecoded++;
 801eb1e:	4b6e      	ldr	r3, [pc, #440]	; (801ecd8 <PlayMp3File+0x2d8>)
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	3301      	adds	r3, #1
 801eb24:	4a6c      	ldr	r2, [pc, #432]	; (801ecd8 <PlayMp3File+0x2d8>)
 801eb26:	6013      	str	r3, [r2, #0]
				g_pMp3OutBufferPtr = g_pMp3OutBuffer;
 801eb28:	4b72      	ldr	r3, [pc, #456]	; (801ecf4 <PlayMp3File+0x2f4>)
 801eb2a:	4a70      	ldr	r2, [pc, #448]	; (801ecec <PlayMp3File+0x2ec>)
 801eb2c:	601a      	str	r2, [r3, #0]
				uint32_t unOutBufferAvail = mp3FrameInfo.outputSamps;
 801eb2e:	4b70      	ldr	r3, [pc, #448]	; (801ecf0 <PlayMp3File+0x2f0>)
 801eb30:	691b      	ldr	r3, [r3, #16]
 801eb32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				while(unOutBufferAvail > 0) {
 801eb36:	e0b1      	b.n	801ec9c <PlayMp3File+0x29c>
					// fill up the whole dma buffer
					uint32_t unDmaBufferSpace = 0;
 801eb38:	2300      	movs	r3, #0
 801eb3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
					if(unDmaBufMode == 0) {
 801eb3e:	4b68      	ldr	r3, [pc, #416]	; (801ece0 <PlayMp3File+0x2e0>)
 801eb40:	681b      	ldr	r3, [r3, #0]
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d107      	bne.n	801eb56 <PlayMp3File+0x156>
						// fill the whole buffer
						// dma buf ptr was reset to beginning of the buffer
						unDmaBufferSpace = g_pMp3DmaBuffer + MP3_DMA_BUFFER_SIZE - g_pMp3DmaBufferPtr;
 801eb46:	4a6c      	ldr	r2, [pc, #432]	; (801ecf8 <PlayMp3File+0x2f8>)
 801eb48:	4b5f      	ldr	r3, [pc, #380]	; (801ecc8 <PlayMp3File+0x2c8>)
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	1ad3      	subs	r3, r2, r3
 801eb4e:	105b      	asrs	r3, r3, #1
 801eb50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801eb54:	e012      	b.n	801eb7c <PlayMp3File+0x17c>
					}
					else if(unDmaBufMode == 1) {
 801eb56:	4b62      	ldr	r3, [pc, #392]	; (801ece0 <PlayMp3File+0x2e0>)
 801eb58:	681b      	ldr	r3, [r3, #0]
 801eb5a:	2b01      	cmp	r3, #1
 801eb5c:	d107      	bne.n	801eb6e <PlayMp3File+0x16e>
						// fill the first half of the buffer
						// dma buf ptr was reset to beginning of the buffer
						unDmaBufferSpace = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2) - g_pMp3DmaBufferPtr;
 801eb5e:	4a67      	ldr	r2, [pc, #412]	; (801ecfc <PlayMp3File+0x2fc>)
 801eb60:	4b59      	ldr	r3, [pc, #356]	; (801ecc8 <PlayMp3File+0x2c8>)
 801eb62:	681b      	ldr	r3, [r3, #0]
 801eb64:	1ad3      	subs	r3, r2, r3
 801eb66:	105b      	asrs	r3, r3, #1
 801eb68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801eb6c:	e006      	b.n	801eb7c <PlayMp3File+0x17c>
					}
					else {
						// fill the last half of the buffer
						// dma buf ptr was reset to middle of the buffer
						unDmaBufferSpace = g_pMp3DmaBuffer + MP3_DMA_BUFFER_SIZE - g_pMp3DmaBufferPtr;
 801eb6e:	4a62      	ldr	r2, [pc, #392]	; (801ecf8 <PlayMp3File+0x2f8>)
 801eb70:	4b55      	ldr	r3, [pc, #340]	; (801ecc8 <PlayMp3File+0x2c8>)
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	1ad3      	subs	r3, r2, r3
 801eb76:	105b      	asrs	r3, r3, #1
 801eb78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
					}
					uint32_t unCopy = unDmaBufferSpace > unOutBufferAvail ? unOutBufferAvail : unDmaBufferSpace;
 801eb7c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801eb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801eb84:	4293      	cmp	r3, r2
 801eb86:	bf28      	it	cs
 801eb88:	4613      	movcs	r3, r2
 801eb8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
					if(unCopy > 0) {
 801eb8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	d027      	beq.n	801ebe6 <PlayMp3File+0x1e6>
						memcpy(g_pMp3DmaBufferPtr, g_pMp3OutBufferPtr, unCopy * sizeof(uint16_t));
 801eb96:	4b4c      	ldr	r3, [pc, #304]	; (801ecc8 <PlayMp3File+0x2c8>)
 801eb98:	6818      	ldr	r0, [r3, #0]
 801eb9a:	4b56      	ldr	r3, [pc, #344]	; (801ecf4 <PlayMp3File+0x2f4>)
 801eb9c:	6819      	ldr	r1, [r3, #0]
 801eb9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801eba2:	005b      	lsls	r3, r3, #1
 801eba4:	461a      	mov	r2, r3
 801eba6:	f007 f9bf 	bl	8025f28 <memcpy>
						unOutBufferAvail -= unCopy;
 801ebaa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801ebae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ebb2:	1ad3      	subs	r3, r2, r3
 801ebb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
						g_pMp3OutBufferPtr += unCopy;
 801ebb8:	4b4e      	ldr	r3, [pc, #312]	; (801ecf4 <PlayMp3File+0x2f4>)
 801ebba:	681a      	ldr	r2, [r3, #0]
 801ebbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ebc0:	005b      	lsls	r3, r3, #1
 801ebc2:	4413      	add	r3, r2
 801ebc4:	4a4b      	ldr	r2, [pc, #300]	; (801ecf4 <PlayMp3File+0x2f4>)
 801ebc6:	6013      	str	r3, [r2, #0]
						unDmaBufferSpace -= unCopy;
 801ebc8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801ebcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ebd0:	1ad3      	subs	r3, r2, r3
 801ebd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
						g_pMp3DmaBufferPtr += unCopy;
 801ebd6:	4b3c      	ldr	r3, [pc, #240]	; (801ecc8 <PlayMp3File+0x2c8>)
 801ebd8:	681a      	ldr	r2, [r3, #0]
 801ebda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ebde:	005b      	lsls	r3, r3, #1
 801ebe0:	4413      	add	r3, r2
 801ebe2:	4a39      	ldr	r2, [pc, #228]	; (801ecc8 <PlayMp3File+0x2c8>)
 801ebe4:	6013      	str	r3, [r2, #0]
					}
					if(unDmaBufferSpace == 0) {
 801ebe6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d156      	bne.n	801ec9c <PlayMp3File+0x29c>
						// dma buffer full
						// see if this was the first run
						if(unDmaBufMode == 0) {
 801ebee:	4b3c      	ldr	r3, [pc, #240]	; (801ece0 <PlayMp3File+0x2e0>)
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	2b00      	cmp	r3, #0
 801ebf4:	d14d      	bne.n	801ec92 <PlayMp3File+0x292>
							// on the first buffer fill up,
							// start the dma transfer
							if(mp3FrameInfo.samprate > 0) trak.bitrate = mp3FrameInfo.samprate;
 801ebf6:	4b3e      	ldr	r3, [pc, #248]	; (801ecf0 <PlayMp3File+0x2f0>)
 801ebf8:	689b      	ldr	r3, [r3, #8]
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	dd05      	ble.n	801ec0a <PlayMp3File+0x20a>
 801ebfe:	4b3c      	ldr	r3, [pc, #240]	; (801ecf0 <PlayMp3File+0x2f0>)
 801ec00:	689b      	ldr	r3, [r3, #8]
 801ec02:	b29a      	uxth	r2, r3
 801ec04:	4b3e      	ldr	r3, [pc, #248]	; (801ed00 <PlayMp3File+0x300>)
 801ec06:	811a      	strh	r2, [r3, #8]
 801ec08:	e003      	b.n	801ec12 <PlayMp3File+0x212>
							else trak.bitrate = AUDIO_FREQUENCY_44K;
 801ec0a:	4b3d      	ldr	r3, [pc, #244]	; (801ed00 <PlayMp3File+0x300>)
 801ec0c:	f64a 4244 	movw	r2, #44100	; 0xac44
 801ec10:	811a      	strh	r2, [r3, #8]
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 801ec12:	4b3b      	ldr	r3, [pc, #236]	; (801ed00 <PlayMp3File+0x300>)
 801ec14:	891b      	ldrh	r3, [r3, #8]
									*(1 + trak.percent), NULL);
 801ec16:	085b      	lsrs	r3, r3, #1
 801ec18:	b29b      	uxth	r3, r3
 801ec1a:	ee07 3a90 	vmov	s15, r3
 801ec1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ec22:	4b37      	ldr	r3, [pc, #220]	; (801ed00 <PlayMp3File+0x300>)
 801ec24:	edd3 7a01 	vldr	s15, [r3, #4]
 801ec28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec30:	ee67 7a27 	vmul.f32	s15, s14, s15
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 801ec34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ec38:	2200      	movs	r2, #0
 801ec3a:	ee17 1a90 	vmov	r1, s15
 801ec3e:	4831      	ldr	r0, [pc, #196]	; (801ed04 <PlayMp3File+0x304>)
 801ec40:	f002 f930 	bl	8020ea4 <BSP_AUDIO_OUT_ClockConfig>
							BSP_AUDIO_OUT_Play(g_pMp3DmaBuffer, MP3_DMA_BUFFER_SIZE * sizeof(uint16_t));
 801ec44:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 801ec48:	4820      	ldr	r0, [pc, #128]	; (801eccc <PlayMp3File+0x2cc>)
 801ec4a:	f001 ffe3 	bl	8020c14 <BSP_AUDIO_OUT_Play>
							BSP_AUDIO_OUT_SetVolume(volume);
 801ec4e:	4b2e      	ldr	r3, [pc, #184]	; (801ed08 <PlayMp3File+0x308>)
 801ec50:	781b      	ldrb	r3, [r3, #0]
 801ec52:	4618      	mov	r0, r3
 801ec54:	f002 f83e 	bl	8020cd4 <BSP_AUDIO_OUT_SetVolume>
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801ec58:	4b2c      	ldr	r3, [pc, #176]	; (801ed0c <PlayMp3File+0x30c>)
 801ec5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801ec5e:	f893 3d8c 	ldrb.w	r3, [r3, #3468]	; 0xd8c
 801ec62:	2b02      	cmp	r3, #2
 801ec64:	d115      	bne.n	801ec92 <PlayMp3File+0x292>
 801ec66:	4b26      	ldr	r3, [pc, #152]	; (801ed00 <PlayMp3File+0x300>)
 801ec68:	781b      	ldrb	r3, [r3, #0]
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d111      	bne.n	801ec92 <PlayMp3File+0x292>
								BSP_AUDIO_OUT_Pause();
 801ec6e:	f001 fffb 	bl	8020c68 <BSP_AUDIO_OUT_Pause>
								trak.state = STOPPED;
 801ec72:	4b23      	ldr	r3, [pc, #140]	; (801ed00 <PlayMp3File+0x300>)
 801ec74:	2201      	movs	r2, #1
 801ec76:	701a      	strb	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim8);
 801ec78:	4825      	ldr	r0, [pc, #148]	; (801ed10 <PlayMp3File+0x310>)
 801ec7a:	f7ea fe59 	bl	8009930 <HAL_TIM_Base_Start_IT>
								GoToPosition(rekordbox.cue_start_position[0]);
 801ec7e:	4b23      	ldr	r3, [pc, #140]	; (801ed0c <PlayMp3File+0x30c>)
 801ec80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801ec84:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
 801ec88:	4618      	mov	r0, r3
 801ec8a:	f005 fd1f 	bl	80246cc <GoToPosition>
								TrackTime();
 801ec8e:	f005 fb15 	bl	80242bc <TrackTime>
							}
						}
						// we must wait for the dma stream tx interrupt here
						while(unDmaBufMode == 0);
 801ec92:	bf00      	nop
 801ec94:	4b12      	ldr	r3, [pc, #72]	; (801ece0 <PlayMp3File+0x2e0>)
 801ec96:	681b      	ldr	r3, [r3, #0]
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d0fb      	beq.n	801ec94 <PlayMp3File+0x294>
				while(unOutBufferAvail > 0) {
 801ec9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	f47f af49 	bne.w	801eb38 <PlayMp3File+0x138>
					}
				}
				break;
 801eca6:	e04b      	b.n	801ed40 <PlayMp3File+0x340>
				// do nothing - next call to decode will provide more mainData
				break;
			}
			case ERR_MP3_INDATA_UNDERFLOW:
			{
				if(nOffset == 0)
 801eca8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	d131      	bne.n	801ed14 <PlayMp3File+0x314>
				// something's really wrong here, frame had to fit
					bOutOfData = 1;
 801ecb0:	4b04      	ldr	r3, [pc, #16]	; (801ecc4 <PlayMp3File+0x2c4>)
 801ecb2:	2201      	movs	r2, #1
 801ecb4:	601a      	str	r2, [r3, #0]
				else {
					unInDataLeft = 0;
				}
				break;
 801ecb6:	e043      	b.n	801ed40 <PlayMp3File+0x340>
 801ecb8:	2000e71c 	.word	0x2000e71c
 801ecbc:	2000f730 	.word	0x2000f730
 801ecc0:	20000f10 	.word	0x20000f10
 801ecc4:	2000f728 	.word	0x2000f728
 801ecc8:	20015154 	.word	0x20015154
 801eccc:	20010954 	.word	0x20010954
 801ecd0:	20015158 	.word	0x20015158
 801ecd4:	2001515c 	.word	0x2001515c
 801ecd8:	20015160 	.word	0x20015160
 801ecdc:	20015164 	.word	0x20015164
 801ece0:	2000f72c 	.word	0x2000f72c
 801ece4:	2000005c 	.word	0x2000005c
 801ece8:	2000e6ec 	.word	0x2000e6ec
 801ecec:	2000f750 	.word	0x2000f750
 801ecf0:	2000f734 	.word	0x2000f734
 801ecf4:	20010950 	.word	0x20010950
 801ecf8:	20015154 	.word	0x20015154
 801ecfc:	20012d54 	.word	0x20012d54
 801ed00:	2000e6e0 	.word	0x2000e6e0
 801ed04:	20017f08 	.word	0x20017f08
 801ed08:	20000058 	.word	0x20000058
 801ed0c:	20015170 	.word	0x20015170
 801ed10:	200182b0 	.word	0x200182b0
					unInDataLeft = 0;
 801ed14:	4b14      	ldr	r3, [pc, #80]	; (801ed68 <PlayMp3File+0x368>)
 801ed16:	2200      	movs	r2, #0
 801ed18:	601a      	str	r2, [r3, #0]
				break;
 801ed1a:	e011      	b.n	801ed40 <PlayMp3File+0x340>
			}
			default:
			{
				// just try to skip the offending frame...
				if(unInDataLeft > 0) {
 801ed1c:	4b12      	ldr	r3, [pc, #72]	; (801ed68 <PlayMp3File+0x368>)
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	dd0c      	ble.n	801ed3e <PlayMp3File+0x33e>
					unInDataLeft-=MP3_BYTES_SKIP;
 801ed24:	4b10      	ldr	r3, [pc, #64]	; (801ed68 <PlayMp3File+0x368>)
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	3b01      	subs	r3, #1
 801ed2a:	4a0f      	ldr	r2, [pc, #60]	; (801ed68 <PlayMp3File+0x368>)
 801ed2c:	6013      	str	r3, [r2, #0]
					pInData+=MP3_BYTES_SKIP;
 801ed2e:	4b0f      	ldr	r3, [pc, #60]	; (801ed6c <PlayMp3File+0x36c>)
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	3301      	adds	r3, #1
 801ed34:	4a0d      	ldr	r2, [pc, #52]	; (801ed6c <PlayMp3File+0x36c>)
 801ed36:	6013      	str	r3, [r2, #0]
				}
				break;
 801ed38:	e001      	b.n	801ed3e <PlayMp3File+0x33e>
				break;
 801ed3a:	bf00      	nop
 801ed3c:	e000      	b.n	801ed40 <PlayMp3File+0x340>
				break;
 801ed3e:	bf00      	nop
			}
			}
		}
	}
	while(!bOutOfData);
 801ed40:	4b0b      	ldr	r3, [pc, #44]	; (801ed70 <PlayMp3File+0x370>)
 801ed42:	681b      	ldr	r3, [r3, #0]
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	f43f ae8b 	beq.w	801ea60 <PlayMp3File+0x60>
	BSP_AUDIO_OUT_SetVolume(0);
 801ed4a:	2000      	movs	r0, #0
 801ed4c:	f001 ffc2 	bl	8020cd4 <BSP_AUDIO_OUT_SetVolume>
	while(unDmaBufMode < 3);
 801ed50:	bf00      	nop
 801ed52:	4b08      	ldr	r3, [pc, #32]	; (801ed74 <PlayMp3File+0x374>)
 801ed54:	681b      	ldr	r3, [r3, #0]
 801ed56:	2b02      	cmp	r3, #2
 801ed58:	d9fb      	bls.n	801ed52 <PlayMp3File+0x352>
}
 801ed5a:	bf00      	nop
 801ed5c:	bf00      	nop
 801ed5e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801ed62:	46bd      	mov	sp, r7
 801ed64:	bd80      	pop	{r7, pc}
 801ed66:	bf00      	nop
 801ed68:	20015158 	.word	0x20015158
 801ed6c:	2000005c 	.word	0x2000005c
 801ed70:	2000f728 	.word	0x2000f728
 801ed74:	2000f72c 	.word	0x2000f72c

0801ed78 <FindToken>:
static uint8_t FindToken (char *token);
static int32_t GetLongNumber ();
static int32_t GetBigEndianLongNumber ();

// finds section token in the file. 0 - token is found, 1 - end of file
static uint8_t FindToken (char *token) {
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	b084      	sub	sp, #16
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801ed80:	2300      	movs	r3, #0
 801ed82:	60fb      	str	r3, [r7, #12]
 801ed84:	e007      	b.n	801ed96 <FindToken+0x1e>
 801ed86:	4a25      	ldr	r2, [pc, #148]	; (801ee1c <FindToken+0xa4>)
 801ed88:	68fb      	ldr	r3, [r7, #12]
 801ed8a:	4413      	add	r3, r2
 801ed8c:	2200      	movs	r2, #0
 801ed8e:	701a      	strb	r2, [r3, #0]
 801ed90:	68fb      	ldr	r3, [r7, #12]
 801ed92:	3301      	adds	r3, #1
 801ed94:	60fb      	str	r3, [r7, #12]
 801ed96:	68fb      	ldr	r3, [r7, #12]
 801ed98:	2b04      	cmp	r3, #4
 801ed9a:	ddf4      	ble.n	801ed86 <FindToken+0xe>
	while(f_tell(&MyFile) < f_size(&MyFile)) {
 801ed9c:	e02f      	b.n	801edfe <FindToken+0x86>
		while(f_tell(&MyFile) < f_size(&MyFile)) {
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 801ed9e:	bf00      	nop
 801eda0:	4b1f      	ldr	r3, [pc, #124]	; (801ee20 <FindToken+0xa8>)
 801eda2:	2201      	movs	r2, #1
 801eda4:	491d      	ldr	r1, [pc, #116]	; (801ee1c <FindToken+0xa4>)
 801eda6:	481f      	ldr	r0, [pc, #124]	; (801ee24 <FindToken+0xac>)
 801eda8:	f7f1 fef4 	bl	8010b94 <f_read>
 801edac:	4603      	mov	r3, r0
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d1f6      	bne.n	801eda0 <FindToken+0x28>
			if(tag[0] == 'P') break;
 801edb2:	4b1a      	ldr	r3, [pc, #104]	; (801ee1c <FindToken+0xa4>)
 801edb4:	781b      	ldrb	r3, [r3, #0]
 801edb6:	2b50      	cmp	r3, #80	; 0x50
 801edb8:	d00a      	beq.n	801edd0 <FindToken+0x58>
		while(f_tell(&MyFile) < f_size(&MyFile)) {
 801edba:	4b1a      	ldr	r3, [pc, #104]	; (801ee24 <FindToken+0xac>)
 801edbc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801edc0:	4b18      	ldr	r3, [pc, #96]	; (801ee24 <FindToken+0xac>)
 801edc2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801edc6:	4290      	cmp	r0, r2
 801edc8:	eb71 0303 	sbcs.w	r3, r1, r3
 801edcc:	d3e7      	bcc.n	801ed9e <FindToken+0x26>
 801edce:	e000      	b.n	801edd2 <FindToken+0x5a>
			if(tag[0] == 'P') break;
 801edd0:	bf00      	nop
		}
		while(f_read(&MyFile, &tag[1], 3, (void *)&bytesread) != FR_OK);
 801edd2:	bf00      	nop
 801edd4:	4b12      	ldr	r3, [pc, #72]	; (801ee20 <FindToken+0xa8>)
 801edd6:	2203      	movs	r2, #3
 801edd8:	4913      	ldr	r1, [pc, #76]	; (801ee28 <FindToken+0xb0>)
 801edda:	4812      	ldr	r0, [pc, #72]	; (801ee24 <FindToken+0xac>)
 801eddc:	f7f1 feda 	bl	8010b94 <f_read>
 801ede0:	4603      	mov	r3, r0
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d1f6      	bne.n	801edd4 <FindToken+0x5c>
		tag[4] = '\0';
 801ede6:	4b0d      	ldr	r3, [pc, #52]	; (801ee1c <FindToken+0xa4>)
 801ede8:	2200      	movs	r2, #0
 801edea:	711a      	strb	r2, [r3, #4]
		if(strcmp(tag, token) == 0) return 0;
 801edec:	6879      	ldr	r1, [r7, #4]
 801edee:	480b      	ldr	r0, [pc, #44]	; (801ee1c <FindToken+0xa4>)
 801edf0:	f7e1 fa0e 	bl	8000210 <strcmp>
 801edf4:	4603      	mov	r3, r0
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d101      	bne.n	801edfe <FindToken+0x86>
 801edfa:	2300      	movs	r3, #0
 801edfc:	e00a      	b.n	801ee14 <FindToken+0x9c>
	while(f_tell(&MyFile) < f_size(&MyFile)) {
 801edfe:	4b09      	ldr	r3, [pc, #36]	; (801ee24 <FindToken+0xac>)
 801ee00:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801ee04:	4b07      	ldr	r3, [pc, #28]	; (801ee24 <FindToken+0xac>)
 801ee06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801ee0a:	4290      	cmp	r0, r2
 801ee0c:	eb71 0303 	sbcs.w	r3, r1, r3
 801ee10:	d3d3      	bcc.n	801edba <FindToken+0x42>
	}
	return 1;
 801ee12:	2301      	movs	r3, #1
}
 801ee14:	4618      	mov	r0, r3
 801ee16:	3710      	adds	r7, #16
 801ee18:	46bd      	mov	sp, r7
 801ee1a:	bd80      	pop	{r7, pc}
 801ee1c:	20015168 	.word	0x20015168
 801ee20:	20001df8 	.word	0x20001df8
 801ee24:	20000f10 	.word	0x20000f10
 801ee28:	20015169 	.word	0x20015169

0801ee2c <GetLongNumber>:

static int32_t GetLongNumber () {
 801ee2c:	b580      	push	{r7, lr}
 801ee2e:	b084      	sub	sp, #16
 801ee30:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 801ee32:	2300      	movs	r3, #0
 801ee34:	73fb      	strb	r3, [r7, #15]
	int32_t out_data = 0;
 801ee36:	2300      	movs	r3, #0
 801ee38:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801ee3a:	2300      	movs	r3, #0
 801ee3c:	607b      	str	r3, [r7, #4]
 801ee3e:	e007      	b.n	801ee50 <GetLongNumber+0x24>
 801ee40:	4a17      	ldr	r2, [pc, #92]	; (801eea0 <GetLongNumber+0x74>)
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	4413      	add	r3, r2
 801ee46:	2200      	movs	r2, #0
 801ee48:	701a      	strb	r2, [r3, #0]
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	3301      	adds	r3, #1
 801ee4e:	607b      	str	r3, [r7, #4]
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	2b04      	cmp	r3, #4
 801ee54:	ddf4      	ble.n	801ee40 <GetLongNumber+0x14>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801ee56:	bf00      	nop
 801ee58:	4b12      	ldr	r3, [pc, #72]	; (801eea4 <GetLongNumber+0x78>)
 801ee5a:	2204      	movs	r2, #4
 801ee5c:	4910      	ldr	r1, [pc, #64]	; (801eea0 <GetLongNumber+0x74>)
 801ee5e:	4812      	ldr	r0, [pc, #72]	; (801eea8 <GetLongNumber+0x7c>)
 801ee60:	f7f1 fe98 	bl	8010b94 <f_read>
 801ee64:	4603      	mov	r3, r0
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	d1f6      	bne.n	801ee58 <GetLongNumber+0x2c>
	for(i = 0; i < 4; i++) {
 801ee6a:	2300      	movs	r3, #0
 801ee6c:	73fb      	strb	r3, [r7, #15]
 801ee6e:	e00c      	b.n	801ee8a <GetLongNumber+0x5e>
		out_data |= tag[i];
 801ee70:	7bfb      	ldrb	r3, [r7, #15]
 801ee72:	4a0b      	ldr	r2, [pc, #44]	; (801eea0 <GetLongNumber+0x74>)
 801ee74:	5cd3      	ldrb	r3, [r2, r3]
 801ee76:	461a      	mov	r2, r3
 801ee78:	68bb      	ldr	r3, [r7, #8]
 801ee7a:	4313      	orrs	r3, r2
 801ee7c:	60bb      	str	r3, [r7, #8]
		out_data <<= 8;
 801ee7e:	68bb      	ldr	r3, [r7, #8]
 801ee80:	021b      	lsls	r3, r3, #8
 801ee82:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < 4; i++) {
 801ee84:	7bfb      	ldrb	r3, [r7, #15]
 801ee86:	3301      	adds	r3, #1
 801ee88:	73fb      	strb	r3, [r7, #15]
 801ee8a:	7bfb      	ldrb	r3, [r7, #15]
 801ee8c:	2b03      	cmp	r3, #3
 801ee8e:	d9ef      	bls.n	801ee70 <GetLongNumber+0x44>
	}
	out_data >>= 8;
 801ee90:	68bb      	ldr	r3, [r7, #8]
 801ee92:	121b      	asrs	r3, r3, #8
 801ee94:	60bb      	str	r3, [r7, #8]
	return out_data;
 801ee96:	68bb      	ldr	r3, [r7, #8]
}
 801ee98:	4618      	mov	r0, r3
 801ee9a:	3710      	adds	r7, #16
 801ee9c:	46bd      	mov	sp, r7
 801ee9e:	bd80      	pop	{r7, pc}
 801eea0:	20015168 	.word	0x20015168
 801eea4:	20001df8 	.word	0x20001df8
 801eea8:	20000f10 	.word	0x20000f10

0801eeac <DecodeRekordboxFiles>:
	}
	out_data >>= 8;
	return out_data;
}

uint8_t DecodeRekordboxFiles(TCHAR *path) {
 801eeac:	b590      	push	{r4, r7, lr}
 801eeae:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 801eeb2:	af00      	add	r7, sp, #0
 801eeb4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801eeb8:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801eebc:	6018      	str	r0, [r3, #0]
	uint32_t data_size = 0;
 801eebe:	2300      	movs	r3, #0
 801eec0:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
	uint8_t k;
	uint32_t i;
	uint8_t res = FR_OK;
 801eec4:	2300      	movs	r3, #0
 801eec6:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
	for(i = 0; i < 1000; i++) {
 801eeca:	2300      	movs	r3, #0
 801eecc:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801eed0:	e01f      	b.n	801ef12 <DecodeRekordboxFiles+0x66>
		rekordbox.bpm[i] = 0;
 801eed2:	4ac8      	ldr	r2, [pc, #800]	; (801f1f4 <DecodeRekordboxFiles+0x348>)
 801eed4:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801eed8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801eedc:	005b      	lsls	r3, r3, #1
 801eede:	4413      	add	r3, r2
 801eee0:	2200      	movs	r2, #0
 801eee2:	809a      	strh	r2, [r3, #4]
		rekordbox.phase[i] = 0;
 801eee4:	4ac3      	ldr	r2, [pc, #780]	; (801f1f4 <DecodeRekordboxFiles+0x348>)
 801eee6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801eeea:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801eeee:	005b      	lsls	r3, r3, #1
 801eef0:	4413      	add	r3, r2
 801eef2:	2200      	movs	r2, #0
 801eef4:	809a      	strh	r2, [r3, #4]
		rekordbox.timeindex[i] = 0;
 801eef6:	4abf      	ldr	r2, [pc, #764]	; (801f1f4 <DecodeRekordboxFiles+0x348>)
 801eef8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801eefc:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801ef00:	009b      	lsls	r3, r3, #2
 801ef02:	4413      	add	r3, r2
 801ef04:	2200      	movs	r2, #0
 801ef06:	605a      	str	r2, [r3, #4]
	for(i = 0; i < 1000; i++) {
 801ef08:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801ef0c:	3301      	adds	r3, #1
 801ef0e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801ef12:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801ef16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ef1a:	d3da      	bcc.n	801eed2 <DecodeRekordboxFiles+0x26>
	}
	rekordbox.cues = 0;
 801ef1c:	4bb5      	ldr	r3, [pc, #724]	; (801f1f4 <DecodeRekordboxFiles+0x348>)
 801ef1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801ef22:	461a      	mov	r2, r3
 801ef24:	2300      	movs	r3, #0
 801ef26:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
	// Clear SDRAM or fill with some pattern/color
	for(i = 0; i < 1000000; i++) *(__IO uint8_t*)(WAVE_BUFFER+i) = 0;
 801ef2a:	2300      	movs	r3, #0
 801ef2c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801ef30:	e00a      	b.n	801ef48 <DecodeRekordboxFiles+0x9c>
 801ef32:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801ef36:	4bb0      	ldr	r3, [pc, #704]	; (801f1f8 <DecodeRekordboxFiles+0x34c>)
 801ef38:	4413      	add	r3, r2
 801ef3a:	2200      	movs	r2, #0
 801ef3c:	701a      	strb	r2, [r3, #0]
 801ef3e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801ef42:	3301      	adds	r3, #1
 801ef44:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801ef48:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801ef4c:	4aab      	ldr	r2, [pc, #684]	; (801f1fc <DecodeRekordboxFiles+0x350>)
 801ef4e:	4293      	cmp	r3, r2
 801ef50:	d9ef      	bls.n	801ef32 <DecodeRekordboxFiles+0x86>
	for(i = 0; i < 255; i++) rekordbox.filename[i] = 0;
 801ef52:	2300      	movs	r3, #0
 801ef54:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801ef58:	e00a      	b.n	801ef70 <DecodeRekordboxFiles+0xc4>
 801ef5a:	4aa6      	ldr	r2, [pc, #664]	; (801f1f4 <DecodeRekordboxFiles+0x348>)
 801ef5c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801ef60:	2100      	movs	r1, #0
 801ef62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801ef66:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801ef6a:	3301      	adds	r3, #1
 801ef6c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801ef70:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801ef74:	2bfe      	cmp	r3, #254	; 0xfe
 801ef76:	d9f0      	bls.n	801ef5a <DecodeRekordboxFiles+0xae>
	char filename[255] = {0};
 801ef78:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801ef7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801ef80:	2200      	movs	r2, #0
 801ef82:	601a      	str	r2, [r3, #0]
 801ef84:	3304      	adds	r3, #4
 801ef86:	22fb      	movs	r2, #251	; 0xfb
 801ef88:	2100      	movs	r1, #0
 801ef8a:	4618      	mov	r0, r3
 801ef8c:	f006 fff4 	bl	8025f78 <memset>
	TCHAR my_path[255] = {0};
 801ef90:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801ef94:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801ef98:	4618      	mov	r0, r3
 801ef9a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 801ef9e:	461a      	mov	r2, r3
 801efa0:	2100      	movs	r1, #0
 801efa2:	f006 ffe9 	bl	8025f78 <memset>
	wcscpy(my_path, path);
 801efa6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801efaa:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801efae:	f107 0208 	add.w	r2, r7, #8
 801efb2:	6819      	ldr	r1, [r3, #0]
 801efb4:	4610      	mov	r0, r2
 801efb6:	f007 f92a 	bl	802620e <wcscpy>
	wcscat(my_path, L"/ANLZ0000.DAT");
 801efba:	f107 0308 	add.w	r3, r7, #8
 801efbe:	4990      	ldr	r1, [pc, #576]	; (801f200 <DecodeRekordboxFiles+0x354>)
 801efc0:	4618      	mov	r0, r3
 801efc2:	f007 f914 	bl	80261ee <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 801efc6:	f107 0308 	add.w	r3, r7, #8
 801efca:	2201      	movs	r2, #1
 801efcc:	4619      	mov	r1, r3
 801efce:	488d      	ldr	r0, [pc, #564]	; (801f204 <DecodeRekordboxFiles+0x358>)
 801efd0:	f7f1 fd2c 	bl	8010a2c <f_open>
 801efd4:	4603      	mov	r3, r0
 801efd6:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
	if(res == FR_OK)
 801efda:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 801efde:	2b00      	cmp	r3, #0
 801efe0:	f040 8427 	bne.w	801f832 <DecodeRekordboxFiles+0x986>
	{
		if(FindToken(path_token) != 0) return 1;
 801efe4:	4888      	ldr	r0, [pc, #544]	; (801f208 <DecodeRekordboxFiles+0x35c>)
 801efe6:	f7ff fec7 	bl	801ed78 <FindToken>
 801efea:	4603      	mov	r3, r0
 801efec:	2b00      	cmp	r3, #0
 801efee:	d002      	beq.n	801eff6 <DecodeRekordboxFiles+0x14a>
 801eff0:	2301      	movs	r3, #1
 801eff2:	f001 ba7e 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801eff6:	bf00      	nop
 801eff8:	4b84      	ldr	r3, [pc, #528]	; (801f20c <DecodeRekordboxFiles+0x360>)
 801effa:	2208      	movs	r2, #8
 801effc:	4984      	ldr	r1, [pc, #528]	; (801f210 <DecodeRekordboxFiles+0x364>)
 801effe:	4881      	ldr	r0, [pc, #516]	; (801f204 <DecodeRekordboxFiles+0x358>)
 801f000:	f7f1 fdc8 	bl	8010b94 <f_read>
 801f004:	4603      	mov	r3, r0
 801f006:	2b00      	cmp	r3, #0
 801f008:	d1f6      	bne.n	801eff8 <DecodeRekordboxFiles+0x14c>
		data_size = GetLongNumber();
 801f00a:	f7ff ff0f 	bl	801ee2c <GetLongNumber>
 801f00e:	4603      	mov	r3, r0
 801f010:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 801f014:	bf00      	nop
 801f016:	f207 4104 	addw	r1, r7, #1028	; 0x404
 801f01a:	4b7c      	ldr	r3, [pc, #496]	; (801f20c <DecodeRekordboxFiles+0x360>)
 801f01c:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 801f020:	4878      	ldr	r0, [pc, #480]	; (801f204 <DecodeRekordboxFiles+0x358>)
 801f022:	f7f1 fdb7 	bl	8010b94 <f_read>
 801f026:	4603      	mov	r3, r0
 801f028:	2b00      	cmp	r3, #0
 801f02a:	d1f4      	bne.n	801f016 <DecodeRekordboxFiles+0x16a>
		i = 0;
 801f02c:	2300      	movs	r3, #0
 801f02e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		k = 0;
 801f032:	2300      	movs	r3, #0
 801f034:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		while(i < data_size) {
 801f038:	e040      	b.n	801f0bc <DecodeRekordboxFiles+0x210>
			WCHAR c = filename[i];
 801f03a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f03e:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801f042:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f046:	4413      	add	r3, r2
 801f048:	781b      	ldrb	r3, [r3, #0]
 801f04a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			c <<= 8;
 801f04e:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 801f052:	021b      	lsls	r3, r3, #8
 801f054:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			i++;
 801f058:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f05c:	3301      	adds	r3, #1
 801f05e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
			c |= filename[i];
 801f062:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f066:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801f06a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f06e:	4413      	add	r3, r2
 801f070:	781b      	ldrb	r3, [r3, #0]
 801f072:	461a      	mov	r2, r3
 801f074:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 801f078:	4313      	orrs	r3, r2
 801f07a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			i++;
 801f07e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f082:	3301      	adds	r3, #1
 801f084:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
			rekordbox.filename[k] = c;
 801f088:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f08c:	4959      	ldr	r1, [pc, #356]	; (801f1f4 <DecodeRekordboxFiles+0x348>)
 801f08e:	f8d7 2508 	ldr.w	r2, [r7, #1288]	; 0x508
 801f092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			filename[k] = ff_convert(c, 0);
 801f096:	2100      	movs	r1, #0
 801f098:	f8d7 0508 	ldr.w	r0, [r7, #1288]	; 0x508
 801f09c:	f7f2 fae8 	bl	8011670 <ff_convert>
 801f0a0:	4602      	mov	r2, r0
 801f0a2:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f0a6:	b2d1      	uxtb	r1, r2
 801f0a8:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 801f0ac:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 801f0b0:	54d1      	strb	r1, [r2, r3]
			k++;
 801f0b2:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f0b6:	3301      	adds	r3, #1
 801f0b8:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		while(i < data_size) {
 801f0bc:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f0c0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801f0c4:	429a      	cmp	r2, r3
 801f0c6:	d3b8      	bcc.n	801f03a <DecodeRekordboxFiles+0x18e>
		}
		for(i = k; i < data_size; i++) filename[i] = 0;
 801f0c8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f0cc:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f0d0:	e00d      	b.n	801f0ee <DecodeRekordboxFiles+0x242>
 801f0d2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f0d6:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801f0da:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f0de:	4413      	add	r3, r2
 801f0e0:	2200      	movs	r2, #0
 801f0e2:	701a      	strb	r2, [r3, #0]
 801f0e4:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f0e8:	3301      	adds	r3, #1
 801f0ea:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f0ee:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f0f2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801f0f6:	429a      	cmp	r2, r3
 801f0f8:	d3eb      	bcc.n	801f0d2 <DecodeRekordboxFiles+0x226>
		i = data_size;
 801f0fa:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801f0fe:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while((i > 0) && (filename[i] != '.')) i--;
 801f102:	e004      	b.n	801f10e <DecodeRekordboxFiles+0x262>
 801f104:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f108:	3b01      	subs	r3, #1
 801f10a:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f10e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f112:	2b00      	cmp	r3, #0
 801f114:	d009      	beq.n	801f12a <DecodeRekordboxFiles+0x27e>
 801f116:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f11a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801f11e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f122:	4413      	add	r3, r2
 801f124:	781b      	ldrb	r3, [r3, #0]
 801f126:	2b2e      	cmp	r3, #46	; 0x2e
 801f128:	d1ec      	bne.n	801f104 <DecodeRekordboxFiles+0x258>
		k = 0;
 801f12a:	2300      	movs	r3, #0
 801f12c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		while(k < 5)
 801f130:	e022      	b.n	801f178 <DecodeRekordboxFiles+0x2cc>
		{
			if(filename[i] >= 32) {
 801f132:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f136:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801f13a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f13e:	4413      	add	r3, r2
 801f140:	781b      	ldrb	r3, [r3, #0]
 801f142:	2b1f      	cmp	r3, #31
 801f144:	d913      	bls.n	801f16e <DecodeRekordboxFiles+0x2c2>
				rekordbox.filetype[k] = filename[i];
 801f146:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f14a:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 801f14e:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 801f152:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f156:	440a      	add	r2, r1
 801f158:	7811      	ldrb	r1, [r2, #0]
 801f15a:	4a26      	ldr	r2, [pc, #152]	; (801f1f4 <DecodeRekordboxFiles+0x348>)
 801f15c:	4413      	add	r3, r2
 801f15e:	460a      	mov	r2, r1
 801f160:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
				k++;
 801f164:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f168:	3301      	adds	r3, #1
 801f16a:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
			}
			i++;
 801f16e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f172:	3301      	adds	r3, #1
 801f174:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while(k < 5)
 801f178:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f17c:	2b04      	cmp	r3, #4
 801f17e:	d9d8      	bls.n	801f132 <DecodeRekordboxFiles+0x286>
		}
		rekordbox.filetype[4] = 0;
 801f180:	4b1c      	ldr	r3, [pc, #112]	; (801f1f4 <DecodeRekordboxFiles+0x348>)
 801f182:	2200      	movs	r2, #0
 801f184:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff

		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 801f188:	2300      	movs	r3, #0
 801f18a:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f18e:	e00c      	b.n	801f1aa <DecodeRekordboxFiles+0x2fe>
 801f190:	4a18      	ldr	r2, [pc, #96]	; (801f1f4 <DecodeRekordboxFiles+0x348>)
 801f192:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f196:	4413      	add	r3, r2
 801f198:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 801f19c:	2200      	movs	r2, #0
 801f19e:	701a      	strb	r2, [r3, #0]
 801f1a0:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f1a4:	3301      	adds	r3, #1
 801f1a6:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f1aa:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f1ae:	2bfe      	cmp	r3, #254	; 0xfe
 801f1b0:	d9ee      	bls.n	801f190 <DecodeRekordboxFiles+0x2e4>
		i = data_size;
 801f1b2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801f1b6:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while((i > 0) && (filename[i] != '/')) i--;
 801f1ba:	e004      	b.n	801f1c6 <DecodeRekordboxFiles+0x31a>
 801f1bc:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f1c0:	3b01      	subs	r3, #1
 801f1c2:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f1c6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	d009      	beq.n	801f1e2 <DecodeRekordboxFiles+0x336>
 801f1ce:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f1d2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801f1d6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f1da:	4413      	add	r3, r2
 801f1dc:	781b      	ldrb	r3, [r3, #0]
 801f1de:	2b2f      	cmp	r3, #47	; 0x2f
 801f1e0:	d1ec      	bne.n	801f1bc <DecodeRekordboxFiles+0x310>
		k = 0;
 801f1e2:	2300      	movs	r3, #0
 801f1e4:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		i++;
 801f1e8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f1ec:	3301      	adds	r3, #1
 801f1ee:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while(i < data_size)
 801f1f2:	e032      	b.n	801f25a <DecodeRekordboxFiles+0x3ae>
 801f1f4:	20015170 	.word	0x20015170
 801f1f8:	c00ff000 	.word	0xc00ff000
 801f1fc:	000f423f 	.word	0x000f423f
 801f200:	08026dd0 	.word	0x08026dd0
 801f204:	20000f10 	.word	0x20000f10
 801f208:	20000080 	.word	0x20000080
 801f20c:	20001df8 	.word	0x20001df8
 801f210:	2000e71c 	.word	0x2000e71c
		{
			if(filename[i] >= 32) {
 801f214:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f218:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801f21c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f220:	4413      	add	r3, r2
 801f222:	781b      	ldrb	r3, [r3, #0]
 801f224:	2b1f      	cmp	r3, #31
 801f226:	d913      	bls.n	801f250 <DecodeRekordboxFiles+0x3a4>
				rekordbox.file[k] = filename[i];
 801f228:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f22c:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 801f230:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 801f234:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f238:	440a      	add	r2, r1
 801f23a:	7811      	ldrb	r1, [r2, #0]
 801f23c:	4abe      	ldr	r2, [pc, #760]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f23e:	4413      	add	r3, r2
 801f240:	460a      	mov	r2, r1
 801f242:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
				k++;
 801f246:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f24a:	3301      	adds	r3, #1
 801f24c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
			}
			i++;
 801f250:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f254:	3301      	adds	r3, #1
 801f256:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while(i < data_size)
 801f25a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f25e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801f262:	429a      	cmp	r2, r3
 801f264:	d3d6      	bcc.n	801f214 <DecodeRekordboxFiles+0x368>
		}
		rekordbox.file[i] = 0;
 801f266:	4ab4      	ldr	r2, [pc, #720]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f268:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f26c:	4413      	add	r3, r2
 801f26e:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 801f272:	2200      	movs	r2, #0
 801f274:	701a      	strb	r2, [r3, #0]

		if(FindToken(qtz_token) != 0) return 1;
 801f276:	48b1      	ldr	r0, [pc, #708]	; (801f53c <DecodeRekordboxFiles+0x690>)
 801f278:	f7ff fd7e 	bl	801ed78 <FindToken>
 801f27c:	4603      	mov	r3, r0
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d002      	beq.n	801f288 <DecodeRekordboxFiles+0x3dc>
 801f282:	2301      	movs	r3, #1
 801f284:	f001 b935 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 16 bytes
 801f288:	bf00      	nop
 801f28a:	4bad      	ldr	r3, [pc, #692]	; (801f540 <DecodeRekordboxFiles+0x694>)
 801f28c:	2210      	movs	r2, #16
 801f28e:	49ad      	ldr	r1, [pc, #692]	; (801f544 <DecodeRekordboxFiles+0x698>)
 801f290:	48ad      	ldr	r0, [pc, #692]	; (801f548 <DecodeRekordboxFiles+0x69c>)
 801f292:	f7f1 fc7f 	bl	8010b94 <f_read>
 801f296:	4603      	mov	r3, r0
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d1f6      	bne.n	801f28a <DecodeRekordboxFiles+0x3de>
		data_size = GetLongNumber();
 801f29c:	f7ff fdc6 	bl	801ee2c <GetLongNumber>
 801f2a0:	4603      	mov	r3, r0
 801f2a2:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
		rekordbox.timezones = data_size;
 801f2a6:	4aa4      	ldr	r2, [pc, #656]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f2a8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801f2ac:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
		for(i=0; i<rekordbox.timezones; i++) {
 801f2b0:	2300      	movs	r3, #0
 801f2b2:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f2b6:	e0c2      	b.n	801f43e <DecodeRekordboxFiles+0x592>
			for(k=0; k<2; k++) {
 801f2b8:	2300      	movs	r3, #0
 801f2ba:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801f2be:	e011      	b.n	801f2e4 <DecodeRekordboxFiles+0x438>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 801f2c0:	bf00      	nop
 801f2c2:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f2c6:	4aa1      	ldr	r2, [pc, #644]	; (801f54c <DecodeRekordboxFiles+0x6a0>)
 801f2c8:	1899      	adds	r1, r3, r2
 801f2ca:	4b9d      	ldr	r3, [pc, #628]	; (801f540 <DecodeRekordboxFiles+0x694>)
 801f2cc:	2201      	movs	r2, #1
 801f2ce:	489e      	ldr	r0, [pc, #632]	; (801f548 <DecodeRekordboxFiles+0x69c>)
 801f2d0:	f7f1 fc60 	bl	8010b94 <f_read>
 801f2d4:	4603      	mov	r3, r0
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d1f3      	bne.n	801f2c2 <DecodeRekordboxFiles+0x416>
			for(k=0; k<2; k++) {
 801f2da:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f2de:	3301      	adds	r3, #1
 801f2e0:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801f2e4:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f2e8:	2b01      	cmp	r3, #1
 801f2ea:	d9e9      	bls.n	801f2c0 <DecodeRekordboxFiles+0x414>
			}
			rekordbox.phase[i] |= tag[0];
 801f2ec:	4a92      	ldr	r2, [pc, #584]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f2ee:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f2f2:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801f2f6:	005b      	lsls	r3, r3, #1
 801f2f8:	4413      	add	r3, r2
 801f2fa:	889a      	ldrh	r2, [r3, #4]
 801f2fc:	4b93      	ldr	r3, [pc, #588]	; (801f54c <DecodeRekordboxFiles+0x6a0>)
 801f2fe:	781b      	ldrb	r3, [r3, #0]
 801f300:	b29b      	uxth	r3, r3
 801f302:	4313      	orrs	r3, r2
 801f304:	b299      	uxth	r1, r3
 801f306:	4a8c      	ldr	r2, [pc, #560]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f308:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f30c:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801f310:	005b      	lsls	r3, r3, #1
 801f312:	4413      	add	r3, r2
 801f314:	460a      	mov	r2, r1
 801f316:	809a      	strh	r2, [r3, #4]
			rekordbox.phase[i] <<= 8;
 801f318:	4a87      	ldr	r2, [pc, #540]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f31a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f31e:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801f322:	005b      	lsls	r3, r3, #1
 801f324:	4413      	add	r3, r2
 801f326:	889b      	ldrh	r3, [r3, #4]
 801f328:	021b      	lsls	r3, r3, #8
 801f32a:	b299      	uxth	r1, r3
 801f32c:	4a82      	ldr	r2, [pc, #520]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f32e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f332:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801f336:	005b      	lsls	r3, r3, #1
 801f338:	4413      	add	r3, r2
 801f33a:	460a      	mov	r2, r1
 801f33c:	809a      	strh	r2, [r3, #4]
			rekordbox.phase[i] |= tag[1];
 801f33e:	4a7e      	ldr	r2, [pc, #504]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f340:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f344:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801f348:	005b      	lsls	r3, r3, #1
 801f34a:	4413      	add	r3, r2
 801f34c:	889a      	ldrh	r2, [r3, #4]
 801f34e:	4b7f      	ldr	r3, [pc, #508]	; (801f54c <DecodeRekordboxFiles+0x6a0>)
 801f350:	785b      	ldrb	r3, [r3, #1]
 801f352:	b29b      	uxth	r3, r3
 801f354:	4313      	orrs	r3, r2
 801f356:	b299      	uxth	r1, r3
 801f358:	4a77      	ldr	r2, [pc, #476]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f35a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f35e:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801f362:	005b      	lsls	r3, r3, #1
 801f364:	4413      	add	r3, r2
 801f366:	460a      	mov	r2, r1
 801f368:	809a      	strh	r2, [r3, #4]
			for(k=0; k<2; k++) {
 801f36a:	2300      	movs	r3, #0
 801f36c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801f370:	e011      	b.n	801f396 <DecodeRekordboxFiles+0x4ea>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 801f372:	bf00      	nop
 801f374:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f378:	4a74      	ldr	r2, [pc, #464]	; (801f54c <DecodeRekordboxFiles+0x6a0>)
 801f37a:	1899      	adds	r1, r3, r2
 801f37c:	4b70      	ldr	r3, [pc, #448]	; (801f540 <DecodeRekordboxFiles+0x694>)
 801f37e:	2201      	movs	r2, #1
 801f380:	4871      	ldr	r0, [pc, #452]	; (801f548 <DecodeRekordboxFiles+0x69c>)
 801f382:	f7f1 fc07 	bl	8010b94 <f_read>
 801f386:	4603      	mov	r3, r0
 801f388:	2b00      	cmp	r3, #0
 801f38a:	d1f3      	bne.n	801f374 <DecodeRekordboxFiles+0x4c8>
			for(k=0; k<2; k++) {
 801f38c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f390:	3301      	adds	r3, #1
 801f392:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801f396:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f39a:	2b01      	cmp	r3, #1
 801f39c:	d9e9      	bls.n	801f372 <DecodeRekordboxFiles+0x4c6>
			}
			rekordbox.bpm[i] |= tag[0];
 801f39e:	4a66      	ldr	r2, [pc, #408]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f3a0:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f3a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801f3a8:	005b      	lsls	r3, r3, #1
 801f3aa:	4413      	add	r3, r2
 801f3ac:	889a      	ldrh	r2, [r3, #4]
 801f3ae:	4b67      	ldr	r3, [pc, #412]	; (801f54c <DecodeRekordboxFiles+0x6a0>)
 801f3b0:	781b      	ldrb	r3, [r3, #0]
 801f3b2:	b29b      	uxth	r3, r3
 801f3b4:	4313      	orrs	r3, r2
 801f3b6:	b299      	uxth	r1, r3
 801f3b8:	4a5f      	ldr	r2, [pc, #380]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f3ba:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f3be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801f3c2:	005b      	lsls	r3, r3, #1
 801f3c4:	4413      	add	r3, r2
 801f3c6:	460a      	mov	r2, r1
 801f3c8:	809a      	strh	r2, [r3, #4]
			rekordbox.bpm[i] <<= 8;
 801f3ca:	4a5b      	ldr	r2, [pc, #364]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f3cc:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f3d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801f3d4:	005b      	lsls	r3, r3, #1
 801f3d6:	4413      	add	r3, r2
 801f3d8:	889b      	ldrh	r3, [r3, #4]
 801f3da:	021b      	lsls	r3, r3, #8
 801f3dc:	b299      	uxth	r1, r3
 801f3de:	4a56      	ldr	r2, [pc, #344]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f3e0:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f3e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801f3e8:	005b      	lsls	r3, r3, #1
 801f3ea:	4413      	add	r3, r2
 801f3ec:	460a      	mov	r2, r1
 801f3ee:	809a      	strh	r2, [r3, #4]
			rekordbox.bpm[i] |= tag[1];
 801f3f0:	4a51      	ldr	r2, [pc, #324]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f3f2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f3f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801f3fa:	005b      	lsls	r3, r3, #1
 801f3fc:	4413      	add	r3, r2
 801f3fe:	889a      	ldrh	r2, [r3, #4]
 801f400:	4b52      	ldr	r3, [pc, #328]	; (801f54c <DecodeRekordboxFiles+0x6a0>)
 801f402:	785b      	ldrb	r3, [r3, #1]
 801f404:	b29b      	uxth	r3, r3
 801f406:	4313      	orrs	r3, r2
 801f408:	b299      	uxth	r1, r3
 801f40a:	4a4b      	ldr	r2, [pc, #300]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f40c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f410:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801f414:	005b      	lsls	r3, r3, #1
 801f416:	4413      	add	r3, r2
 801f418:	460a      	mov	r2, r1
 801f41a:	809a      	strh	r2, [r3, #4]
			rekordbox.timeindex[i] = GetLongNumber();
 801f41c:	f7ff fd06 	bl	801ee2c <GetLongNumber>
 801f420:	4603      	mov	r3, r0
 801f422:	4619      	mov	r1, r3
 801f424:	4a44      	ldr	r2, [pc, #272]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f426:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f42a:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801f42e:	009b      	lsls	r3, r3, #2
 801f430:	4413      	add	r3, r2
 801f432:	6059      	str	r1, [r3, #4]
		for(i=0; i<rekordbox.timezones; i++) {
 801f434:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f438:	3301      	adds	r3, #1
 801f43a:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f43e:	4b3e      	ldr	r3, [pc, #248]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f440:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 801f444:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f448:	429a      	cmp	r2, r3
 801f44a:	f4ff af35 	bcc.w	801f2b8 <DecodeRekordboxFiles+0x40c>
		}
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 801f44e:	4b3a      	ldr	r3, [pc, #232]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f450:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
 801f454:	2b01      	cmp	r3, #1
 801f456:	d106      	bne.n	801f466 <DecodeRekordboxFiles+0x5ba>
 801f458:	4b37      	ldr	r3, [pc, #220]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f45a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f45e:	2204      	movs	r2, #4
 801f460:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 801f464:	e00a      	b.n	801f47c <DecodeRekordboxFiles+0x5d0>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 801f466:	4b34      	ldr	r3, [pc, #208]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f468:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
 801f46c:	b2db      	uxtb	r3, r3
 801f46e:	3b01      	subs	r3, #1
 801f470:	b2da      	uxtb	r2, r3
 801f472:	4b31      	ldr	r3, [pc, #196]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f474:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f478:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
		if(FindToken(wave_token) != 0) return 1;
 801f47c:	4834      	ldr	r0, [pc, #208]	; (801f550 <DecodeRekordboxFiles+0x6a4>)
 801f47e:	f7ff fc7b 	bl	801ed78 <FindToken>
 801f482:	4603      	mov	r3, r0
 801f484:	2b00      	cmp	r3, #0
 801f486:	d002      	beq.n	801f48e <DecodeRekordboxFiles+0x5e2>
 801f488:	2301      	movs	r3, #1
 801f48a:	f001 b832 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801f48e:	bf00      	nop
 801f490:	4b2b      	ldr	r3, [pc, #172]	; (801f540 <DecodeRekordboxFiles+0x694>)
 801f492:	2208      	movs	r2, #8
 801f494:	492b      	ldr	r1, [pc, #172]	; (801f544 <DecodeRekordboxFiles+0x698>)
 801f496:	482c      	ldr	r0, [pc, #176]	; (801f548 <DecodeRekordboxFiles+0x69c>)
 801f498:	f7f1 fb7c 	bl	8010b94 <f_read>
 801f49c:	4603      	mov	r3, r0
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d1f6      	bne.n	801f490 <DecodeRekordboxFiles+0x5e4>
		rekordbox.lowp_spectrum_size = GetLongNumber();
 801f4a2:	f7ff fcc3 	bl	801ee2c <GetLongNumber>
 801f4a6:	4603      	mov	r3, r0
 801f4a8:	461a      	mov	r2, r3
 801f4aa:	4b23      	ldr	r3, [pc, #140]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f4ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f4b0:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801f4b4:	bf00      	nop
 801f4b6:	4b22      	ldr	r3, [pc, #136]	; (801f540 <DecodeRekordboxFiles+0x694>)
 801f4b8:	2204      	movs	r2, #4
 801f4ba:	4922      	ldr	r1, [pc, #136]	; (801f544 <DecodeRekordboxFiles+0x698>)
 801f4bc:	4822      	ldr	r0, [pc, #136]	; (801f548 <DecodeRekordboxFiles+0x69c>)
 801f4be:	f7f1 fb69 	bl	8010b94 <f_read>
 801f4c2:	4603      	mov	r3, r0
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d1f6      	bne.n	801f4b6 <DecodeRekordboxFiles+0x60a>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 801f4c8:	bf00      	nop
 801f4ca:	4b1b      	ldr	r3, [pc, #108]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f4cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f4d0:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 801f4d4:	4b1a      	ldr	r3, [pc, #104]	; (801f540 <DecodeRekordboxFiles+0x694>)
 801f4d6:	491f      	ldr	r1, [pc, #124]	; (801f554 <DecodeRekordboxFiles+0x6a8>)
 801f4d8:	481b      	ldr	r0, [pc, #108]	; (801f548 <DecodeRekordboxFiles+0x69c>)
 801f4da:	f7f1 fb5b 	bl	8010b94 <f_read>
 801f4de:	4603      	mov	r3, r0
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	d1f2      	bne.n	801f4ca <DecodeRekordboxFiles+0x61e>

		if(FindToken(cob_token) != 0) return 1;
 801f4e4:	481c      	ldr	r0, [pc, #112]	; (801f558 <DecodeRekordboxFiles+0x6ac>)
 801f4e6:	f7ff fc47 	bl	801ed78 <FindToken>
 801f4ea:	4603      	mov	r3, r0
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d002      	beq.n	801f4f6 <DecodeRekordboxFiles+0x64a>
 801f4f0:	2301      	movs	r3, #1
 801f4f2:	f000 bffe 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801f4f6:	bf00      	nop
 801f4f8:	4b11      	ldr	r3, [pc, #68]	; (801f540 <DecodeRekordboxFiles+0x694>)
 801f4fa:	220c      	movs	r2, #12
 801f4fc:	4911      	ldr	r1, [pc, #68]	; (801f544 <DecodeRekordboxFiles+0x698>)
 801f4fe:	4812      	ldr	r0, [pc, #72]	; (801f548 <DecodeRekordboxFiles+0x69c>)
 801f500:	f7f1 fb48 	bl	8010b94 <f_read>
 801f504:	4603      	mov	r3, r0
 801f506:	2b00      	cmp	r3, #0
 801f508:	d1f6      	bne.n	801f4f8 <DecodeRekordboxFiles+0x64c>
		rekordbox.cues = GetLongNumber() + 1;
 801f50a:	f7ff fc8f 	bl	801ee2c <GetLongNumber>
 801f50e:	4603      	mov	r3, r0
 801f510:	3301      	adds	r3, #1
 801f512:	4a09      	ldr	r2, [pc, #36]	; (801f538 <DecodeRekordboxFiles+0x68c>)
 801f514:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 801f518:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
		for(i = 1; i < rekordbox.cues; i++) {
 801f51c:	2301      	movs	r3, #1
 801f51e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f522:	e0ac      	b.n	801f67e <DecodeRekordboxFiles+0x7d2>
			if(FindToken(cue_token) != 0) return 1;
 801f524:	480d      	ldr	r0, [pc, #52]	; (801f55c <DecodeRekordboxFiles+0x6b0>)
 801f526:	f7ff fc27 	bl	801ed78 <FindToken>
 801f52a:	4603      	mov	r3, r0
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d017      	beq.n	801f560 <DecodeRekordboxFiles+0x6b4>
 801f530:	2301      	movs	r3, #1
 801f532:	f000 bfde 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
 801f536:	bf00      	nop
 801f538:	20015170 	.word	0x20015170
 801f53c:	20000088 	.word	0x20000088
 801f540:	20001df8 	.word	0x20001df8
 801f544:	2000e71c 	.word	0x2000e71c
 801f548:	20000f10 	.word	0x20000f10
 801f54c:	20015168 	.word	0x20015168
 801f550:	20000060 	.word	0x20000060
 801f554:	20001e04 	.word	0x20001e04
 801f558:	20000070 	.word	0x20000070
 801f55c:	20000078 	.word	0x20000078
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801f560:	bf00      	nop
 801f562:	4bb6      	ldr	r3, [pc, #728]	; (801f83c <DecodeRekordboxFiles+0x990>)
 801f564:	2208      	movs	r2, #8
 801f566:	49b6      	ldr	r1, [pc, #728]	; (801f840 <DecodeRekordboxFiles+0x994>)
 801f568:	48b6      	ldr	r0, [pc, #728]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f56a:	f7f1 fb13 	bl	8010b94 <f_read>
 801f56e:	4603      	mov	r3, r0
 801f570:	2b00      	cmp	r3, #0
 801f572:	d1f6      	bne.n	801f562 <DecodeRekordboxFiles+0x6b6>
			rekordbox.cue_number[i] = GetLongNumber();
 801f574:	f7ff fc5a 	bl	801ee2c <GetLongNumber>
 801f578:	4603      	mov	r3, r0
 801f57a:	4619      	mov	r1, r3
 801f57c:	4ab2      	ldr	r2, [pc, #712]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f57e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f582:	f603 1356 	addw	r3, r3, #2390	; 0x956
 801f586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			rekordbox.cue_active[i] = GetLongNumber();
 801f58a:	f7ff fc4f 	bl	801ee2c <GetLongNumber>
 801f58e:	4603      	mov	r3, r0
 801f590:	4619      	mov	r1, r3
 801f592:	4aad      	ldr	r2, [pc, #692]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f594:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f598:	f603 13ba 	addw	r3, r3, #2490	; 0x9ba
 801f59c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801f5a0:	bf00      	nop
 801f5a2:	4ba6      	ldr	r3, [pc, #664]	; (801f83c <DecodeRekordboxFiles+0x990>)
 801f5a4:	2204      	movs	r2, #4
 801f5a6:	49a6      	ldr	r1, [pc, #664]	; (801f840 <DecodeRekordboxFiles+0x994>)
 801f5a8:	48a6      	ldr	r0, [pc, #664]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f5aa:	f7f1 faf3 	bl	8010b94 <f_read>
 801f5ae:	4603      	mov	r3, r0
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d1f6      	bne.n	801f5a2 <DecodeRekordboxFiles+0x6f6>
			rekordbox.cue_type[i] = GetLongNumber();
 801f5b4:	f7ff fc3a 	bl	801ee2c <GetLongNumber>
 801f5b8:	4602      	mov	r2, r0
 801f5ba:	49a3      	ldr	r1, [pc, #652]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f5bc:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f5c0:	f603 231e 	addw	r3, r3, #2590	; 0xa1e
 801f5c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 801f5c8:	bf00      	nop
 801f5ca:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f5ce:	f642 5328 	movw	r3, #11560	; 0x2d28
 801f5d2:	4413      	add	r3, r2
 801f5d4:	4a9c      	ldr	r2, [pc, #624]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f5d6:	1899      	adds	r1, r3, r2
 801f5d8:	4b98      	ldr	r3, [pc, #608]	; (801f83c <DecodeRekordboxFiles+0x990>)
 801f5da:	2201      	movs	r2, #1
 801f5dc:	4899      	ldr	r0, [pc, #612]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f5de:	f7f1 fad9 	bl	8010b94 <f_read>
 801f5e2:	4603      	mov	r3, r0
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d1f0      	bne.n	801f5ca <DecodeRekordboxFiles+0x71e>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 801f5e8:	bf00      	nop
 801f5ea:	4b94      	ldr	r3, [pc, #592]	; (801f83c <DecodeRekordboxFiles+0x990>)
 801f5ec:	2203      	movs	r2, #3
 801f5ee:	4994      	ldr	r1, [pc, #592]	; (801f840 <DecodeRekordboxFiles+0x994>)
 801f5f0:	4894      	ldr	r0, [pc, #592]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f5f2:	f7f1 facf 	bl	8010b94 <f_read>
 801f5f6:	4603      	mov	r3, r0
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	d1f6      	bne.n	801f5ea <DecodeRekordboxFiles+0x73e>
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801f5fc:	f7ff fc16 	bl	801ee2c <GetLongNumber>
 801f600:	ee07 0a90 	vmov	s15, r0
 801f604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f608:	ed9f 7a90 	vldr	s14, [pc, #576]	; 801f84c <DecodeRekordboxFiles+0x9a0>
 801f60c:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f610:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801f850 <DecodeRekordboxFiles+0x9a4>
 801f614:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801f618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f61c:	ee17 1a90 	vmov	r1, s15
 801f620:	4a89      	ldr	r2, [pc, #548]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f622:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f626:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 801f62a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801f62e:	4a86      	ldr	r2, [pc, #536]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f630:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f634:	441a      	add	r2, r3
 801f636:	f642 5328 	movw	r3, #11560	; 0x2d28
 801f63a:	4413      	add	r3, r2
 801f63c:	781b      	ldrb	r3, [r3, #0]
 801f63e:	2b02      	cmp	r3, #2
 801f640:	d118      	bne.n	801f674 <DecodeRekordboxFiles+0x7c8>
 801f642:	f7ff fbf3 	bl	801ee2c <GetLongNumber>
 801f646:	ee07 0a90 	vmov	s15, r0
 801f64a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f64e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801f84c <DecodeRekordboxFiles+0x9a0>
 801f652:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f656:	eddf 6a7e 	vldr	s13, [pc, #504]	; 801f850 <DecodeRekordboxFiles+0x9a4>
 801f65a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801f65e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f662:	ee17 1a90 	vmov	r1, s15
 801f666:	4a78      	ldr	r2, [pc, #480]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f668:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f66c:	f603 23e6 	addw	r3, r3, #2790	; 0xae6
 801f670:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i = 1; i < rekordbox.cues; i++) {
 801f674:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f678:	3301      	adds	r3, #1
 801f67a:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f67e:	4b72      	ldr	r3, [pc, #456]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f680:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f684:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 801f688:	461a      	mov	r2, r3
 801f68a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f68e:	4293      	cmp	r3, r2
 801f690:	f4ff af48 	bcc.w	801f524 <DecodeRekordboxFiles+0x678>
		}
		if(FindToken(cob_token) != 0) return 1;
 801f694:	486f      	ldr	r0, [pc, #444]	; (801f854 <DecodeRekordboxFiles+0x9a8>)
 801f696:	f7ff fb6f 	bl	801ed78 <FindToken>
 801f69a:	4603      	mov	r3, r0
 801f69c:	2b00      	cmp	r3, #0
 801f69e:	d002      	beq.n	801f6a6 <DecodeRekordboxFiles+0x7fa>
 801f6a0:	2301      	movs	r3, #1
 801f6a2:	f000 bf26 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801f6a6:	bf00      	nop
 801f6a8:	4b64      	ldr	r3, [pc, #400]	; (801f83c <DecodeRekordboxFiles+0x990>)
 801f6aa:	220c      	movs	r2, #12
 801f6ac:	4964      	ldr	r1, [pc, #400]	; (801f840 <DecodeRekordboxFiles+0x994>)
 801f6ae:	4865      	ldr	r0, [pc, #404]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f6b0:	f7f1 fa70 	bl	8010b94 <f_read>
 801f6b4:	4603      	mov	r3, r0
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d1f6      	bne.n	801f6a8 <DecodeRekordboxFiles+0x7fc>
		rekordbox.cues += GetLongNumber();
 801f6ba:	f7ff fbb7 	bl	801ee2c <GetLongNumber>
 801f6be:	4602      	mov	r2, r0
 801f6c0:	4b61      	ldr	r3, [pc, #388]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f6c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f6c6:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 801f6ca:	4413      	add	r3, r2
 801f6cc:	4a5e      	ldr	r2, [pc, #376]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f6ce:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 801f6d2:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
		k = i;
 801f6d6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f6da:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		for(k = i; k < rekordbox.cues; k++) {
 801f6de:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f6e2:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801f6e6:	e097      	b.n	801f818 <DecodeRekordboxFiles+0x96c>
			if(FindToken(cue_token) != 0) return 1;
 801f6e8:	485b      	ldr	r0, [pc, #364]	; (801f858 <DecodeRekordboxFiles+0x9ac>)
 801f6ea:	f7ff fb45 	bl	801ed78 <FindToken>
 801f6ee:	4603      	mov	r3, r0
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	d002      	beq.n	801f6fa <DecodeRekordboxFiles+0x84e>
 801f6f4:	2301      	movs	r3, #1
 801f6f6:	f000 befc 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801f6fa:	bf00      	nop
 801f6fc:	4b4f      	ldr	r3, [pc, #316]	; (801f83c <DecodeRekordboxFiles+0x990>)
 801f6fe:	2208      	movs	r2, #8
 801f700:	494f      	ldr	r1, [pc, #316]	; (801f840 <DecodeRekordboxFiles+0x994>)
 801f702:	4850      	ldr	r0, [pc, #320]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f704:	f7f1 fa46 	bl	8010b94 <f_read>
 801f708:	4603      	mov	r3, r0
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d1f6      	bne.n	801f6fc <DecodeRekordboxFiles+0x850>
			rekordbox.cue_number[k] = GetLongNumber();
 801f70e:	f7ff fb8d 	bl	801ee2c <GetLongNumber>
 801f712:	4602      	mov	r2, r0
 801f714:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f718:	4611      	mov	r1, r2
 801f71a:	4a4b      	ldr	r2, [pc, #300]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f71c:	f603 1356 	addw	r3, r3, #2390	; 0x956
 801f720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			rekordbox.cue_active[k] = GetLongNumber();
 801f724:	f7ff fb82 	bl	801ee2c <GetLongNumber>
 801f728:	4602      	mov	r2, r0
 801f72a:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f72e:	4611      	mov	r1, r2
 801f730:	4a45      	ldr	r2, [pc, #276]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f732:	f603 13ba 	addw	r3, r3, #2490	; 0x9ba
 801f736:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801f73a:	bf00      	nop
 801f73c:	4b3f      	ldr	r3, [pc, #252]	; (801f83c <DecodeRekordboxFiles+0x990>)
 801f73e:	2204      	movs	r2, #4
 801f740:	493f      	ldr	r1, [pc, #252]	; (801f840 <DecodeRekordboxFiles+0x994>)
 801f742:	4840      	ldr	r0, [pc, #256]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f744:	f7f1 fa26 	bl	8010b94 <f_read>
 801f748:	4603      	mov	r3, r0
 801f74a:	2b00      	cmp	r3, #0
 801f74c:	d1f6      	bne.n	801f73c <DecodeRekordboxFiles+0x890>
			rekordbox.cue_type[k] = GetLongNumber();
 801f74e:	f897 451f 	ldrb.w	r4, [r7, #1311]	; 0x51f
 801f752:	f7ff fb6b 	bl	801ee2c <GetLongNumber>
 801f756:	4602      	mov	r2, r0
 801f758:	493b      	ldr	r1, [pc, #236]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f75a:	f604 231e 	addw	r3, r4, #2590	; 0xa1e
 801f75e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801f762:	bf00      	nop
 801f764:	f897 251f 	ldrb.w	r2, [r7, #1311]	; 0x51f
 801f768:	f642 5328 	movw	r3, #11560	; 0x2d28
 801f76c:	4413      	add	r3, r2
 801f76e:	4a36      	ldr	r2, [pc, #216]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f770:	1899      	adds	r1, r3, r2
 801f772:	4b32      	ldr	r3, [pc, #200]	; (801f83c <DecodeRekordboxFiles+0x990>)
 801f774:	2201      	movs	r2, #1
 801f776:	4833      	ldr	r0, [pc, #204]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f778:	f7f1 fa0c 	bl	8010b94 <f_read>
 801f77c:	4603      	mov	r3, r0
 801f77e:	2b00      	cmp	r3, #0
 801f780:	d1f0      	bne.n	801f764 <DecodeRekordboxFiles+0x8b8>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 801f782:	bf00      	nop
 801f784:	4b2d      	ldr	r3, [pc, #180]	; (801f83c <DecodeRekordboxFiles+0x990>)
 801f786:	2203      	movs	r2, #3
 801f788:	492d      	ldr	r1, [pc, #180]	; (801f840 <DecodeRekordboxFiles+0x994>)
 801f78a:	482e      	ldr	r0, [pc, #184]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f78c:	f7f1 fa02 	bl	8010b94 <f_read>
 801f790:	4603      	mov	r3, r0
 801f792:	2b00      	cmp	r3, #0
 801f794:	d1f6      	bne.n	801f784 <DecodeRekordboxFiles+0x8d8>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801f796:	f7ff fb49 	bl	801ee2c <GetLongNumber>
 801f79a:	ee07 0a90 	vmov	s15, r0
 801f79e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f7a2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 801f84c <DecodeRekordboxFiles+0x9a0>
 801f7a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f7aa:	eddf 6a29 	vldr	s13, [pc, #164]	; 801f850 <DecodeRekordboxFiles+0x9a4>
 801f7ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801f7b2:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f7b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f7ba:	ee17 1a90 	vmov	r1, s15
 801f7be:	4a22      	ldr	r2, [pc, #136]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f7c0:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 801f7c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801f7c8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f7cc:	4a1e      	ldr	r2, [pc, #120]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f7ce:	441a      	add	r2, r3
 801f7d0:	f642 5328 	movw	r3, #11560	; 0x2d28
 801f7d4:	4413      	add	r3, r2
 801f7d6:	781b      	ldrb	r3, [r3, #0]
 801f7d8:	2b02      	cmp	r3, #2
 801f7da:	d118      	bne.n	801f80e <DecodeRekordboxFiles+0x962>
 801f7dc:	f7ff fb26 	bl	801ee2c <GetLongNumber>
 801f7e0:	ee07 0a90 	vmov	s15, r0
 801f7e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f7e8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801f84c <DecodeRekordboxFiles+0x9a0>
 801f7ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f7f0:	eddf 6a17 	vldr	s13, [pc, #92]	; 801f850 <DecodeRekordboxFiles+0x9a4>
 801f7f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801f7f8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f7fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f800:	ee17 1a90 	vmov	r1, s15
 801f804:	4a10      	ldr	r2, [pc, #64]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f806:	f603 23e6 	addw	r3, r3, #2790	; 0xae6
 801f80a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(k = i; k < rekordbox.cues; k++) {
 801f80e:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801f812:	3301      	adds	r3, #1
 801f814:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801f818:	f897 251f 	ldrb.w	r2, [r7, #1311]	; 0x51f
 801f81c:	4b0a      	ldr	r3, [pc, #40]	; (801f848 <DecodeRekordboxFiles+0x99c>)
 801f81e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f822:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 801f826:	429a      	cmp	r2, r3
 801f828:	f6ff af5e 	blt.w	801f6e8 <DecodeRekordboxFiles+0x83c>
		}
		f_close(&MyFile);
 801f82c:	4805      	ldr	r0, [pc, #20]	; (801f844 <DecodeRekordboxFiles+0x998>)
 801f82e:	f7f1 faec 	bl	8010e0a <f_close>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 801f832:	2300      	movs	r3, #0
 801f834:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f838:	e01e      	b.n	801f878 <DecodeRekordboxFiles+0x9cc>
 801f83a:	bf00      	nop
 801f83c:	20001df8 	.word	0x20001df8
 801f840:	2000e71c 	.word	0x2000e71c
 801f844:	20000f10 	.word	0x20000f10
 801f848:	20015170 	.word	0x20015170
 801f84c:	43160000 	.word	0x43160000
 801f850:	447a0000 	.word	0x447a0000
 801f854:	20000070 	.word	0x20000070
 801f858:	20000078 	.word	0x20000078
 801f85c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f860:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801f864:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f868:	2100      	movs	r1, #0
 801f86a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801f86e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f872:	3301      	adds	r3, #1
 801f874:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f878:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f87c:	2bfe      	cmp	r3, #254	; 0xfe
 801f87e:	d9ed      	bls.n	801f85c <DecodeRekordboxFiles+0x9b0>
	wcscpy(my_path, path);
 801f880:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f884:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801f888:	f107 0208 	add.w	r2, r7, #8
 801f88c:	6819      	ldr	r1, [r3, #0]
 801f88e:	4610      	mov	r0, r2
 801f890:	f006 fcbd 	bl	802620e <wcscpy>
	wcscat(my_path, L"/ANLZ0000.EXT");
 801f894:	f107 0308 	add.w	r3, r7, #8
 801f898:	49cb      	ldr	r1, [pc, #812]	; (801fbc8 <DecodeRekordboxFiles+0xd1c>)
 801f89a:	4618      	mov	r0, r3
 801f89c:	f006 fca7 	bl	80261ee <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 801f8a0:	f107 0308 	add.w	r3, r7, #8
 801f8a4:	2201      	movs	r2, #1
 801f8a6:	4619      	mov	r1, r3
 801f8a8:	48c8      	ldr	r0, [pc, #800]	; (801fbcc <DecodeRekordboxFiles+0xd20>)
 801f8aa:	f7f1 f8bf 	bl	8010a2c <f_open>
 801f8ae:	4603      	mov	r3, r0
 801f8b0:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
	if(res == FR_OK) {
 801f8b4:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 801f8b8:	2b00      	cmp	r3, #0
 801f8ba:	d17a      	bne.n	801f9b2 <DecodeRekordboxFiles+0xb06>
		if(FindToken(wv3_token) != 0) return 1;
 801f8bc:	48c4      	ldr	r0, [pc, #784]	; (801fbd0 <DecodeRekordboxFiles+0xd24>)
 801f8be:	f7ff fa5b 	bl	801ed78 <FindToken>
 801f8c2:	4603      	mov	r3, r0
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d002      	beq.n	801f8ce <DecodeRekordboxFiles+0xa22>
 801f8c8:	2301      	movs	r3, #1
 801f8ca:	f000 be12 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 801f8ce:	bf00      	nop
 801f8d0:	4bc0      	ldr	r3, [pc, #768]	; (801fbd4 <DecodeRekordboxFiles+0xd28>)
 801f8d2:	220c      	movs	r2, #12
 801f8d4:	49c0      	ldr	r1, [pc, #768]	; (801fbd8 <DecodeRekordboxFiles+0xd2c>)
 801f8d6:	48bd      	ldr	r0, [pc, #756]	; (801fbcc <DecodeRekordboxFiles+0xd20>)
 801f8d8:	f7f1 f95c 	bl	8010b94 <f_read>
 801f8dc:	4603      	mov	r3, r0
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	d1f6      	bne.n	801f8d0 <DecodeRekordboxFiles+0xa24>
		rekordbox.spectrum_size = GetLongNumber();
 801f8e2:	f7ff faa3 	bl	801ee2c <GetLongNumber>
 801f8e6:	4603      	mov	r3, r0
 801f8e8:	461a      	mov	r2, r3
 801f8ea:	4bbc      	ldr	r3, [pc, #752]	; (801fbdc <DecodeRekordboxFiles+0xd30>)
 801f8ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f8f0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801f8f4:	bf00      	nop
 801f8f6:	4bb7      	ldr	r3, [pc, #732]	; (801fbd4 <DecodeRekordboxFiles+0xd28>)
 801f8f8:	2204      	movs	r2, #4
 801f8fa:	49b7      	ldr	r1, [pc, #732]	; (801fbd8 <DecodeRekordboxFiles+0xd2c>)
 801f8fc:	48b3      	ldr	r0, [pc, #716]	; (801fbcc <DecodeRekordboxFiles+0xd20>)
 801f8fe:	f7f1 f949 	bl	8010b94 <f_read>
 801f902:	4603      	mov	r3, r0
 801f904:	2b00      	cmp	r3, #0
 801f906:	d1f6      	bne.n	801f8f6 <DecodeRekordboxFiles+0xa4a>
		rekordbox.cue_start_position[0] = 0;
 801f908:	4bb4      	ldr	r3, [pc, #720]	; (801fbdc <DecodeRekordboxFiles+0xd30>)
 801f90a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f90e:	461a      	mov	r2, r3
 801f910:	2300      	movs	r3, #0
 801f912:	f8c2 3a08 	str.w	r3, [r2, #2568]	; 0xa08
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801f916:	2300      	movs	r3, #0
 801f918:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f91c:	e03d      	b.n	801f99a <DecodeRekordboxFiles+0xaee>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 801f91e:	bf00      	nop
 801f920:	4bac      	ldr	r3, [pc, #688]	; (801fbd4 <DecodeRekordboxFiles+0xd28>)
 801f922:	2201      	movs	r2, #1
 801f924:	49ae      	ldr	r1, [pc, #696]	; (801fbe0 <DecodeRekordboxFiles+0xd34>)
 801f926:	48a9      	ldr	r0, [pc, #676]	; (801fbcc <DecodeRekordboxFiles+0xd20>)
 801f928:	f7f1 f934 	bl	8010b94 <f_read>
 801f92c:	4603      	mov	r3, r0
 801f92e:	2b00      	cmp	r3, #0
 801f930:	d1f6      	bne.n	801f920 <DecodeRekordboxFiles+0xa74>
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 801f932:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f936:	4bab      	ldr	r3, [pc, #684]	; (801fbe4 <DecodeRekordboxFiles+0xd38>)
 801f938:	4413      	add	r3, r2
 801f93a:	461a      	mov	r2, r3
 801f93c:	4ba8      	ldr	r3, [pc, #672]	; (801fbe0 <DecodeRekordboxFiles+0xd34>)
 801f93e:	781b      	ldrb	r3, [r3, #0]
 801f940:	7013      	strb	r3, [r2, #0]
			if(rekordbox.autocue == 1) {
 801f942:	4ba6      	ldr	r3, [pc, #664]	; (801fbdc <DecodeRekordboxFiles+0xd30>)
 801f944:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f948:	f893 3d8c 	ldrb.w	r3, [r3, #3468]	; 0xd8c
 801f94c:	2b01      	cmp	r3, #1
 801f94e:	d11f      	bne.n	801f990 <DecodeRekordboxFiles+0xae4>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 801f950:	4ba3      	ldr	r3, [pc, #652]	; (801fbe0 <DecodeRekordboxFiles+0xd34>)
 801f952:	781b      	ldrb	r3, [r3, #0]
 801f954:	f003 031f 	and.w	r3, r3, #31
 801f958:	4aa3      	ldr	r2, [pc, #652]	; (801fbe8 <DecodeRekordboxFiles+0xd3c>)
 801f95a:	7812      	ldrb	r2, [r2, #0]
 801f95c:	49a3      	ldr	r1, [pc, #652]	; (801fbec <DecodeRekordboxFiles+0xd40>)
 801f95e:	fba1 1202 	umull	r1, r2, r1, r2
 801f962:	08d2      	lsrs	r2, r2, #3
 801f964:	b2d2      	uxtb	r2, r2
 801f966:	4293      	cmp	r3, r2
 801f968:	dd12      	ble.n	801f990 <DecodeRekordboxFiles+0xae4>
 801f96a:	4b9d      	ldr	r3, [pc, #628]	; (801fbe0 <DecodeRekordboxFiles+0xd34>)
 801f96c:	781b      	ldrb	r3, [r3, #0]
 801f96e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801f972:	2b7f      	cmp	r3, #127	; 0x7f
 801f974:	dc0c      	bgt.n	801f990 <DecodeRekordboxFiles+0xae4>
					rekordbox.autocue = 2;
 801f976:	4b99      	ldr	r3, [pc, #612]	; (801fbdc <DecodeRekordboxFiles+0xd30>)
 801f978:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f97c:	2202      	movs	r2, #2
 801f97e:	f883 2d8c 	strb.w	r2, [r3, #3468]	; 0xd8c
					rekordbox.cue_start_position[0] = i;
 801f982:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f986:	4a95      	ldr	r2, [pc, #596]	; (801fbdc <DecodeRekordboxFiles+0xd30>)
 801f988:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 801f98c:	f8c2 3a08 	str.w	r3, [r2, #2568]	; 0xa08
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801f990:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f994:	3301      	adds	r3, #1
 801f996:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f99a:	4b90      	ldr	r3, [pc, #576]	; (801fbdc <DecodeRekordboxFiles+0xd30>)
 801f99c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801f9a0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801f9a4:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f9a8:	429a      	cmp	r2, r3
 801f9aa:	d3b8      	bcc.n	801f91e <DecodeRekordboxFiles+0xa72>
				}
			}
		}
		f_close(&MyFile);
 801f9ac:	4887      	ldr	r0, [pc, #540]	; (801fbcc <DecodeRekordboxFiles+0xd20>)
 801f9ae:	f7f1 fa2c 	bl	8010e0a <f_close>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f9b8:	e00d      	b.n	801f9d6 <DecodeRekordboxFiles+0xb2a>
 801f9ba:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f9be:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801f9c2:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801f9c6:	2100      	movs	r1, #0
 801f9c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801f9cc:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f9d0:	3301      	adds	r3, #1
 801f9d2:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801f9d6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801f9da:	2bfe      	cmp	r3, #254	; 0xfe
 801f9dc:	d9ed      	bls.n	801f9ba <DecodeRekordboxFiles+0xb0e>
	wcscpy(my_path, path);
 801f9de:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801f9e2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801f9e6:	f107 0208 	add.w	r2, r7, #8
 801f9ea:	6819      	ldr	r1, [r3, #0]
 801f9ec:	4610      	mov	r0, r2
 801f9ee:	f006 fc0e 	bl	802620e <wcscpy>
	wcscat(my_path, L"/ANLZ0001.DAT");
 801f9f2:	f107 0308 	add.w	r3, r7, #8
 801f9f6:	497e      	ldr	r1, [pc, #504]	; (801fbf0 <DecodeRekordboxFiles+0xd44>)
 801f9f8:	4618      	mov	r0, r3
 801f9fa:	f006 fbf8 	bl	80261ee <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 801f9fe:	f107 0308 	add.w	r3, r7, #8
 801fa02:	2201      	movs	r2, #1
 801fa04:	4619      	mov	r1, r3
 801fa06:	4871      	ldr	r0, [pc, #452]	; (801fbcc <DecodeRekordboxFiles+0xd20>)
 801fa08:	f7f1 f810 	bl	8010a2c <f_open>
 801fa0c:	4603      	mov	r3, r0
 801fa0e:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
	if(res == FR_OK)
 801fa12:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	f040 8436 	bne.w	8020288 <DecodeRekordboxFiles+0x13dc>
	{
		if(FindToken(path_token) != 0) return 1;
 801fa1c:	4875      	ldr	r0, [pc, #468]	; (801fbf4 <DecodeRekordboxFiles+0xd48>)
 801fa1e:	f7ff f9ab 	bl	801ed78 <FindToken>
 801fa22:	4603      	mov	r3, r0
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	d002      	beq.n	801fa2e <DecodeRekordboxFiles+0xb82>
 801fa28:	2301      	movs	r3, #1
 801fa2a:	f000 bd62 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801fa2e:	bf00      	nop
 801fa30:	4b68      	ldr	r3, [pc, #416]	; (801fbd4 <DecodeRekordboxFiles+0xd28>)
 801fa32:	2208      	movs	r2, #8
 801fa34:	4968      	ldr	r1, [pc, #416]	; (801fbd8 <DecodeRekordboxFiles+0xd2c>)
 801fa36:	4865      	ldr	r0, [pc, #404]	; (801fbcc <DecodeRekordboxFiles+0xd20>)
 801fa38:	f7f1 f8ac 	bl	8010b94 <f_read>
 801fa3c:	4603      	mov	r3, r0
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	d1f6      	bne.n	801fa30 <DecodeRekordboxFiles+0xb84>
		data_size = GetLongNumber();
 801fa42:	f7ff f9f3 	bl	801ee2c <GetLongNumber>
 801fa46:	4603      	mov	r3, r0
 801fa48:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 801fa4c:	bf00      	nop
 801fa4e:	f207 4104 	addw	r1, r7, #1028	; 0x404
 801fa52:	4b60      	ldr	r3, [pc, #384]	; (801fbd4 <DecodeRekordboxFiles+0xd28>)
 801fa54:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 801fa58:	485c      	ldr	r0, [pc, #368]	; (801fbcc <DecodeRekordboxFiles+0xd20>)
 801fa5a:	f7f1 f89b 	bl	8010b94 <f_read>
 801fa5e:	4603      	mov	r3, r0
 801fa60:	2b00      	cmp	r3, #0
 801fa62:	d1f4      	bne.n	801fa4e <DecodeRekordboxFiles+0xba2>
		i = 0;
 801fa64:	2300      	movs	r3, #0
 801fa66:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		k = 0;
 801fa6a:	2300      	movs	r3, #0
 801fa6c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		while(i < data_size) {
 801fa70:	e040      	b.n	801faf4 <DecodeRekordboxFiles+0xc48>
			WCHAR c = filename[i];
 801fa72:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fa76:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801fa7a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fa7e:	4413      	add	r3, r2
 801fa80:	781b      	ldrb	r3, [r3, #0]
 801fa82:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
			c <<= 8;
 801fa86:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 801fa8a:	021b      	lsls	r3, r3, #8
 801fa8c:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
			i++;
 801fa90:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fa94:	3301      	adds	r3, #1
 801fa96:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
			c |= filename[i];
 801fa9a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fa9e:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801faa2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801faa6:	4413      	add	r3, r2
 801faa8:	781b      	ldrb	r3, [r3, #0]
 801faaa:	461a      	mov	r2, r3
 801faac:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 801fab0:	4313      	orrs	r3, r2
 801fab2:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
			i++;
 801fab6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801faba:	3301      	adds	r3, #1
 801fabc:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
			rekordbox.filename[k] = c;
 801fac0:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fac4:	4945      	ldr	r1, [pc, #276]	; (801fbdc <DecodeRekordboxFiles+0xd30>)
 801fac6:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 801faca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			filename[k] = ff_convert(c, 0);
 801face:	2100      	movs	r1, #0
 801fad0:	f8d7 0504 	ldr.w	r0, [r7, #1284]	; 0x504
 801fad4:	f7f1 fdcc 	bl	8011670 <ff_convert>
 801fad8:	4602      	mov	r2, r0
 801fada:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fade:	b2d1      	uxtb	r1, r2
 801fae0:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 801fae4:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 801fae8:	54d1      	strb	r1, [r2, r3]
			k++;
 801faea:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801faee:	3301      	adds	r3, #1
 801faf0:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		while(i < data_size) {
 801faf4:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801faf8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801fafc:	429a      	cmp	r2, r3
 801fafe:	d3b8      	bcc.n	801fa72 <DecodeRekordboxFiles+0xbc6>
		}
		for(i = k; i < data_size; i++) filename[i] = 0;
 801fb00:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fb04:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801fb08:	e00d      	b.n	801fb26 <DecodeRekordboxFiles+0xc7a>
 801fb0a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fb0e:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801fb12:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fb16:	4413      	add	r3, r2
 801fb18:	2200      	movs	r2, #0
 801fb1a:	701a      	strb	r2, [r3, #0]
 801fb1c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fb20:	3301      	adds	r3, #1
 801fb22:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801fb26:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801fb2a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801fb2e:	429a      	cmp	r2, r3
 801fb30:	d3eb      	bcc.n	801fb0a <DecodeRekordboxFiles+0xc5e>
		i = data_size;
 801fb32:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801fb36:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while((i > 0) && (filename[i] != '.')) i--;
 801fb3a:	e004      	b.n	801fb46 <DecodeRekordboxFiles+0xc9a>
 801fb3c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fb40:	3b01      	subs	r3, #1
 801fb42:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801fb46:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d009      	beq.n	801fb62 <DecodeRekordboxFiles+0xcb6>
 801fb4e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fb52:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801fb56:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fb5a:	4413      	add	r3, r2
 801fb5c:	781b      	ldrb	r3, [r3, #0]
 801fb5e:	2b2e      	cmp	r3, #46	; 0x2e
 801fb60:	d1ec      	bne.n	801fb3c <DecodeRekordboxFiles+0xc90>
		k = 0;
 801fb62:	2300      	movs	r3, #0
 801fb64:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		while(k < 5)
 801fb68:	e022      	b.n	801fbb0 <DecodeRekordboxFiles+0xd04>
		{
			if(filename[i] >= 32) {
 801fb6a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fb6e:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801fb72:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fb76:	4413      	add	r3, r2
 801fb78:	781b      	ldrb	r3, [r3, #0]
 801fb7a:	2b1f      	cmp	r3, #31
 801fb7c:	d913      	bls.n	801fba6 <DecodeRekordboxFiles+0xcfa>
				rekordbox.filetype[k] = filename[i];
 801fb7e:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fb82:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 801fb86:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 801fb8a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801fb8e:	440a      	add	r2, r1
 801fb90:	7811      	ldrb	r1, [r2, #0]
 801fb92:	4a12      	ldr	r2, [pc, #72]	; (801fbdc <DecodeRekordboxFiles+0xd30>)
 801fb94:	4413      	add	r3, r2
 801fb96:	460a      	mov	r2, r1
 801fb98:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
				k++;
 801fb9c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fba0:	3301      	adds	r3, #1
 801fba2:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
			}
			i++;
 801fba6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fbaa:	3301      	adds	r3, #1
 801fbac:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while(k < 5)
 801fbb0:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fbb4:	2b04      	cmp	r3, #4
 801fbb6:	d9d8      	bls.n	801fb6a <DecodeRekordboxFiles+0xcbe>
		}
		rekordbox.filetype[4] = 0;
 801fbb8:	4b08      	ldr	r3, [pc, #32]	; (801fbdc <DecodeRekordboxFiles+0xd30>)
 801fbba:	2200      	movs	r2, #0
 801fbbc:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff

		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 801fbc0:	2300      	movs	r3, #0
 801fbc2:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801fbc6:	e024      	b.n	801fc12 <DecodeRekordboxFiles+0xd66>
 801fbc8:	08026e08 	.word	0x08026e08
 801fbcc:	20000f10 	.word	0x20000f10
 801fbd0:	20000068 	.word	0x20000068
 801fbd4:	20001df8 	.word	0x20001df8
 801fbd8:	2000e71c 	.word	0x2000e71c
 801fbdc:	20015170 	.word	0x20015170
 801fbe0:	20015168 	.word	0x20015168
 801fbe4:	c00ff000 	.word	0xc00ff000
 801fbe8:	20000059 	.word	0x20000059
 801fbec:	cccccccd 	.word	0xcccccccd
 801fbf0:	08026e40 	.word	0x08026e40
 801fbf4:	20000080 	.word	0x20000080
 801fbf8:	4ab6      	ldr	r2, [pc, #728]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fbfa:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fbfe:	4413      	add	r3, r2
 801fc00:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 801fc04:	2200      	movs	r2, #0
 801fc06:	701a      	strb	r2, [r3, #0]
 801fc08:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fc0c:	3301      	adds	r3, #1
 801fc0e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801fc12:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fc16:	2bfe      	cmp	r3, #254	; 0xfe
 801fc18:	d9ee      	bls.n	801fbf8 <DecodeRekordboxFiles+0xd4c>
		i = data_size;
 801fc1a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801fc1e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while((i > 0) && (filename[i] != '/')) i--;
 801fc22:	e004      	b.n	801fc2e <DecodeRekordboxFiles+0xd82>
 801fc24:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fc28:	3b01      	subs	r3, #1
 801fc2a:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801fc2e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	d009      	beq.n	801fc4a <DecodeRekordboxFiles+0xd9e>
 801fc36:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fc3a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801fc3e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fc42:	4413      	add	r3, r2
 801fc44:	781b      	ldrb	r3, [r3, #0]
 801fc46:	2b2f      	cmp	r3, #47	; 0x2f
 801fc48:	d1ec      	bne.n	801fc24 <DecodeRekordboxFiles+0xd78>
		k = 0;
 801fc4a:	2300      	movs	r3, #0
 801fc4c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		i++;
 801fc50:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fc54:	3301      	adds	r3, #1
 801fc56:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while(i < data_size)
 801fc5a:	e022      	b.n	801fca2 <DecodeRekordboxFiles+0xdf6>
		{
			if(filename[i] >= 32) {
 801fc5c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801fc60:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801fc64:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fc68:	4413      	add	r3, r2
 801fc6a:	781b      	ldrb	r3, [r3, #0]
 801fc6c:	2b1f      	cmp	r3, #31
 801fc6e:	d913      	bls.n	801fc98 <DecodeRekordboxFiles+0xdec>
				rekordbox.file[k] = filename[i];
 801fc70:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fc74:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 801fc78:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 801fc7c:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801fc80:	440a      	add	r2, r1
 801fc82:	7811      	ldrb	r1, [r2, #0]
 801fc84:	4a93      	ldr	r2, [pc, #588]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fc86:	4413      	add	r3, r2
 801fc88:	460a      	mov	r2, r1
 801fc8a:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
				k++;
 801fc8e:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fc92:	3301      	adds	r3, #1
 801fc94:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
			}
			i++;
 801fc98:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fc9c:	3301      	adds	r3, #1
 801fc9e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
		while(i < data_size)
 801fca2:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801fca6:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801fcaa:	429a      	cmp	r2, r3
 801fcac:	d3d6      	bcc.n	801fc5c <DecodeRekordboxFiles+0xdb0>
		}
		rekordbox.file[i] = 0;
 801fcae:	4a89      	ldr	r2, [pc, #548]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fcb0:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fcb4:	4413      	add	r3, r2
 801fcb6:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 801fcba:	2200      	movs	r2, #0
 801fcbc:	701a      	strb	r2, [r3, #0]

		if(FindToken(qtz_token) != 0) return 1;
 801fcbe:	4886      	ldr	r0, [pc, #536]	; (801fed8 <DecodeRekordboxFiles+0x102c>)
 801fcc0:	f7ff f85a 	bl	801ed78 <FindToken>
 801fcc4:	4603      	mov	r3, r0
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d002      	beq.n	801fcd0 <DecodeRekordboxFiles+0xe24>
 801fcca:	2301      	movs	r3, #1
 801fccc:	f000 bc11 	b.w	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 22 bytes
 801fcd0:	bf00      	nop
 801fcd2:	4b82      	ldr	r3, [pc, #520]	; (801fedc <DecodeRekordboxFiles+0x1030>)
 801fcd4:	2210      	movs	r2, #16
 801fcd6:	4982      	ldr	r1, [pc, #520]	; (801fee0 <DecodeRekordboxFiles+0x1034>)
 801fcd8:	4882      	ldr	r0, [pc, #520]	; (801fee4 <DecodeRekordboxFiles+0x1038>)
 801fcda:	f7f0 ff5b 	bl	8010b94 <f_read>
 801fcde:	4603      	mov	r3, r0
 801fce0:	2b00      	cmp	r3, #0
 801fce2:	d1f6      	bne.n	801fcd2 <DecodeRekordboxFiles+0xe26>
		data_size = GetLongNumber();
 801fce4:	f7ff f8a2 	bl	801ee2c <GetLongNumber>
 801fce8:	4603      	mov	r3, r0
 801fcea:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
		rekordbox.timezones = data_size;
 801fcee:	4a79      	ldr	r2, [pc, #484]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fcf0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 801fcf4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
		for(i=0; i<rekordbox.timezones; i++) {
 801fcf8:	2300      	movs	r3, #0
 801fcfa:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801fcfe:	e0c2      	b.n	801fe86 <DecodeRekordboxFiles+0xfda>
			for(k=0; k<2; k++) {
 801fd00:	2300      	movs	r3, #0
 801fd02:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801fd06:	e011      	b.n	801fd2c <DecodeRekordboxFiles+0xe80>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 801fd08:	bf00      	nop
 801fd0a:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fd0e:	4a76      	ldr	r2, [pc, #472]	; (801fee8 <DecodeRekordboxFiles+0x103c>)
 801fd10:	1899      	adds	r1, r3, r2
 801fd12:	4b72      	ldr	r3, [pc, #456]	; (801fedc <DecodeRekordboxFiles+0x1030>)
 801fd14:	2201      	movs	r2, #1
 801fd16:	4873      	ldr	r0, [pc, #460]	; (801fee4 <DecodeRekordboxFiles+0x1038>)
 801fd18:	f7f0 ff3c 	bl	8010b94 <f_read>
 801fd1c:	4603      	mov	r3, r0
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	d1f3      	bne.n	801fd0a <DecodeRekordboxFiles+0xe5e>
			for(k=0; k<2; k++) {
 801fd22:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fd26:	3301      	adds	r3, #1
 801fd28:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801fd2c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fd30:	2b01      	cmp	r3, #1
 801fd32:	d9e9      	bls.n	801fd08 <DecodeRekordboxFiles+0xe5c>
			}
			rekordbox.phase[i] |= tag[0];
 801fd34:	4a67      	ldr	r2, [pc, #412]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fd36:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fd3a:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801fd3e:	005b      	lsls	r3, r3, #1
 801fd40:	4413      	add	r3, r2
 801fd42:	889a      	ldrh	r2, [r3, #4]
 801fd44:	4b68      	ldr	r3, [pc, #416]	; (801fee8 <DecodeRekordboxFiles+0x103c>)
 801fd46:	781b      	ldrb	r3, [r3, #0]
 801fd48:	b29b      	uxth	r3, r3
 801fd4a:	4313      	orrs	r3, r2
 801fd4c:	b299      	uxth	r1, r3
 801fd4e:	4a61      	ldr	r2, [pc, #388]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fd50:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fd54:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801fd58:	005b      	lsls	r3, r3, #1
 801fd5a:	4413      	add	r3, r2
 801fd5c:	460a      	mov	r2, r1
 801fd5e:	809a      	strh	r2, [r3, #4]
			rekordbox.phase[i] <<= 8;
 801fd60:	4a5c      	ldr	r2, [pc, #368]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fd62:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fd66:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801fd6a:	005b      	lsls	r3, r3, #1
 801fd6c:	4413      	add	r3, r2
 801fd6e:	889b      	ldrh	r3, [r3, #4]
 801fd70:	021b      	lsls	r3, r3, #8
 801fd72:	b299      	uxth	r1, r3
 801fd74:	4a57      	ldr	r2, [pc, #348]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fd76:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fd7a:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801fd7e:	005b      	lsls	r3, r3, #1
 801fd80:	4413      	add	r3, r2
 801fd82:	460a      	mov	r2, r1
 801fd84:	809a      	strh	r2, [r3, #4]
			rekordbox.phase[i] |= tag[1];
 801fd86:	4a53      	ldr	r2, [pc, #332]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fd88:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fd8c:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801fd90:	005b      	lsls	r3, r3, #1
 801fd92:	4413      	add	r3, r2
 801fd94:	889a      	ldrh	r2, [r3, #4]
 801fd96:	4b54      	ldr	r3, [pc, #336]	; (801fee8 <DecodeRekordboxFiles+0x103c>)
 801fd98:	785b      	ldrb	r3, [r3, #1]
 801fd9a:	b29b      	uxth	r3, r3
 801fd9c:	4313      	orrs	r3, r2
 801fd9e:	b299      	uxth	r1, r3
 801fda0:	4a4c      	ldr	r2, [pc, #304]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fda2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fda6:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801fdaa:	005b      	lsls	r3, r3, #1
 801fdac:	4413      	add	r3, r2
 801fdae:	460a      	mov	r2, r1
 801fdb0:	809a      	strh	r2, [r3, #4]
			for(k=0; k<2; k++) {
 801fdb2:	2300      	movs	r3, #0
 801fdb4:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801fdb8:	e011      	b.n	801fdde <DecodeRekordboxFiles+0xf32>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 801fdba:	bf00      	nop
 801fdbc:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fdc0:	4a49      	ldr	r2, [pc, #292]	; (801fee8 <DecodeRekordboxFiles+0x103c>)
 801fdc2:	1899      	adds	r1, r3, r2
 801fdc4:	4b45      	ldr	r3, [pc, #276]	; (801fedc <DecodeRekordboxFiles+0x1030>)
 801fdc6:	2201      	movs	r2, #1
 801fdc8:	4846      	ldr	r0, [pc, #280]	; (801fee4 <DecodeRekordboxFiles+0x1038>)
 801fdca:	f7f0 fee3 	bl	8010b94 <f_read>
 801fdce:	4603      	mov	r3, r0
 801fdd0:	2b00      	cmp	r3, #0
 801fdd2:	d1f3      	bne.n	801fdbc <DecodeRekordboxFiles+0xf10>
			for(k=0; k<2; k++) {
 801fdd4:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fdd8:	3301      	adds	r3, #1
 801fdda:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 801fdde:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 801fde2:	2b01      	cmp	r3, #1
 801fde4:	d9e9      	bls.n	801fdba <DecodeRekordboxFiles+0xf0e>
			}
			rekordbox.bpm[i] |= tag[0];
 801fde6:	4a3b      	ldr	r2, [pc, #236]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fde8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fdec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801fdf0:	005b      	lsls	r3, r3, #1
 801fdf2:	4413      	add	r3, r2
 801fdf4:	889a      	ldrh	r2, [r3, #4]
 801fdf6:	4b3c      	ldr	r3, [pc, #240]	; (801fee8 <DecodeRekordboxFiles+0x103c>)
 801fdf8:	781b      	ldrb	r3, [r3, #0]
 801fdfa:	b29b      	uxth	r3, r3
 801fdfc:	4313      	orrs	r3, r2
 801fdfe:	b299      	uxth	r1, r3
 801fe00:	4a34      	ldr	r2, [pc, #208]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fe02:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fe06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801fe0a:	005b      	lsls	r3, r3, #1
 801fe0c:	4413      	add	r3, r2
 801fe0e:	460a      	mov	r2, r1
 801fe10:	809a      	strh	r2, [r3, #4]
			rekordbox.bpm[i] <<= 8;
 801fe12:	4a30      	ldr	r2, [pc, #192]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fe14:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fe18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801fe1c:	005b      	lsls	r3, r3, #1
 801fe1e:	4413      	add	r3, r2
 801fe20:	889b      	ldrh	r3, [r3, #4]
 801fe22:	021b      	lsls	r3, r3, #8
 801fe24:	b299      	uxth	r1, r3
 801fe26:	4a2b      	ldr	r2, [pc, #172]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fe28:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fe2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801fe30:	005b      	lsls	r3, r3, #1
 801fe32:	4413      	add	r3, r2
 801fe34:	460a      	mov	r2, r1
 801fe36:	809a      	strh	r2, [r3, #4]
			rekordbox.bpm[i] |= tag[1];
 801fe38:	4a26      	ldr	r2, [pc, #152]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fe3a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fe3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801fe42:	005b      	lsls	r3, r3, #1
 801fe44:	4413      	add	r3, r2
 801fe46:	889a      	ldrh	r2, [r3, #4]
 801fe48:	4b27      	ldr	r3, [pc, #156]	; (801fee8 <DecodeRekordboxFiles+0x103c>)
 801fe4a:	785b      	ldrb	r3, [r3, #1]
 801fe4c:	b29b      	uxth	r3, r3
 801fe4e:	4313      	orrs	r3, r2
 801fe50:	b299      	uxth	r1, r3
 801fe52:	4a20      	ldr	r2, [pc, #128]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fe54:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fe58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801fe5c:	005b      	lsls	r3, r3, #1
 801fe5e:	4413      	add	r3, r2
 801fe60:	460a      	mov	r2, r1
 801fe62:	809a      	strh	r2, [r3, #4]
			rekordbox.timeindex[i] = GetLongNumber();
 801fe64:	f7fe ffe2 	bl	801ee2c <GetLongNumber>
 801fe68:	4603      	mov	r3, r0
 801fe6a:	4619      	mov	r1, r3
 801fe6c:	4a19      	ldr	r2, [pc, #100]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fe6e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fe72:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 801fe76:	009b      	lsls	r3, r3, #2
 801fe78:	4413      	add	r3, r2
 801fe7a:	6059      	str	r1, [r3, #4]
		for(i=0; i<rekordbox.timezones; i++) {
 801fe7c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fe80:	3301      	adds	r3, #1
 801fe82:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801fe86:	4b13      	ldr	r3, [pc, #76]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fe88:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 801fe8c:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 801fe90:	429a      	cmp	r2, r3
 801fe92:	f4ff af35 	bcc.w	801fd00 <DecodeRekordboxFiles+0xe54>
		}
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 801fe96:	4b0f      	ldr	r3, [pc, #60]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fe98:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
 801fe9c:	2b01      	cmp	r3, #1
 801fe9e:	d106      	bne.n	801feae <DecodeRekordboxFiles+0x1002>
 801fea0:	4b0c      	ldr	r3, [pc, #48]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801fea2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801fea6:	2204      	movs	r2, #4
 801fea8:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 801feac:	e00a      	b.n	801fec4 <DecodeRekordboxFiles+0x1018>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 801feae:	4b09      	ldr	r3, [pc, #36]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801feb0:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
 801feb4:	b2db      	uxtb	r3, r3
 801feb6:	3b01      	subs	r3, #1
 801feb8:	b2da      	uxtb	r2, r3
 801feba:	4b06      	ldr	r3, [pc, #24]	; (801fed4 <DecodeRekordboxFiles+0x1028>)
 801febc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801fec0:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
		if(FindToken(wave_token) != 0) return 1;
 801fec4:	4809      	ldr	r0, [pc, #36]	; (801feec <DecodeRekordboxFiles+0x1040>)
 801fec6:	f7fe ff57 	bl	801ed78 <FindToken>
 801feca:	4603      	mov	r3, r0
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d00f      	beq.n	801fef0 <DecodeRekordboxFiles+0x1044>
 801fed0:	2301      	movs	r3, #1
 801fed2:	e30e      	b.n	80204f2 <DecodeRekordboxFiles+0x1646>
 801fed4:	20015170 	.word	0x20015170
 801fed8:	20000088 	.word	0x20000088
 801fedc:	20001df8 	.word	0x20001df8
 801fee0:	2000e71c 	.word	0x2000e71c
 801fee4:	20000f10 	.word	0x20000f10
 801fee8:	20015168 	.word	0x20015168
 801feec:	20000060 	.word	0x20000060
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801fef0:	bf00      	nop
 801fef2:	4b8e      	ldr	r3, [pc, #568]	; (802012c <DecodeRekordboxFiles+0x1280>)
 801fef4:	2208      	movs	r2, #8
 801fef6:	498e      	ldr	r1, [pc, #568]	; (8020130 <DecodeRekordboxFiles+0x1284>)
 801fef8:	488e      	ldr	r0, [pc, #568]	; (8020134 <DecodeRekordboxFiles+0x1288>)
 801fefa:	f7f0 fe4b 	bl	8010b94 <f_read>
 801fefe:	4603      	mov	r3, r0
 801ff00:	2b00      	cmp	r3, #0
 801ff02:	d1f6      	bne.n	801fef2 <DecodeRekordboxFiles+0x1046>
		rekordbox.lowp_spectrum_size = GetLongNumber();
 801ff04:	f7fe ff92 	bl	801ee2c <GetLongNumber>
 801ff08:	4603      	mov	r3, r0
 801ff0a:	461a      	mov	r2, r3
 801ff0c:	4b8a      	ldr	r3, [pc, #552]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 801ff0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801ff12:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801ff16:	bf00      	nop
 801ff18:	4b84      	ldr	r3, [pc, #528]	; (802012c <DecodeRekordboxFiles+0x1280>)
 801ff1a:	2204      	movs	r2, #4
 801ff1c:	4984      	ldr	r1, [pc, #528]	; (8020130 <DecodeRekordboxFiles+0x1284>)
 801ff1e:	4885      	ldr	r0, [pc, #532]	; (8020134 <DecodeRekordboxFiles+0x1288>)
 801ff20:	f7f0 fe38 	bl	8010b94 <f_read>
 801ff24:	4603      	mov	r3, r0
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d1f6      	bne.n	801ff18 <DecodeRekordboxFiles+0x106c>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 801ff2a:	bf00      	nop
 801ff2c:	4b82      	ldr	r3, [pc, #520]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 801ff2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801ff32:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 801ff36:	4b7d      	ldr	r3, [pc, #500]	; (802012c <DecodeRekordboxFiles+0x1280>)
 801ff38:	4980      	ldr	r1, [pc, #512]	; (802013c <DecodeRekordboxFiles+0x1290>)
 801ff3a:	487e      	ldr	r0, [pc, #504]	; (8020134 <DecodeRekordboxFiles+0x1288>)
 801ff3c:	f7f0 fe2a 	bl	8010b94 <f_read>
 801ff40:	4603      	mov	r3, r0
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	d1f2      	bne.n	801ff2c <DecodeRekordboxFiles+0x1080>
		if(FindToken(cob_token) != 0) return 1;
 801ff46:	487e      	ldr	r0, [pc, #504]	; (8020140 <DecodeRekordboxFiles+0x1294>)
 801ff48:	f7fe ff16 	bl	801ed78 <FindToken>
 801ff4c:	4603      	mov	r3, r0
 801ff4e:	2b00      	cmp	r3, #0
 801ff50:	d001      	beq.n	801ff56 <DecodeRekordboxFiles+0x10aa>
 801ff52:	2301      	movs	r3, #1
 801ff54:	e2cd      	b.n	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801ff56:	bf00      	nop
 801ff58:	4b74      	ldr	r3, [pc, #464]	; (802012c <DecodeRekordboxFiles+0x1280>)
 801ff5a:	220c      	movs	r2, #12
 801ff5c:	4974      	ldr	r1, [pc, #464]	; (8020130 <DecodeRekordboxFiles+0x1284>)
 801ff5e:	4875      	ldr	r0, [pc, #468]	; (8020134 <DecodeRekordboxFiles+0x1288>)
 801ff60:	f7f0 fe18 	bl	8010b94 <f_read>
 801ff64:	4603      	mov	r3, r0
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d1f6      	bne.n	801ff58 <DecodeRekordboxFiles+0x10ac>
		rekordbox.cues = GetLongNumber() + 1;
 801ff6a:	f7fe ff5f 	bl	801ee2c <GetLongNumber>
 801ff6e:	4603      	mov	r3, r0
 801ff70:	3301      	adds	r3, #1
 801ff72:	4a71      	ldr	r2, [pc, #452]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 801ff74:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 801ff78:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
		for(i = 1; i < rekordbox.cues; i++) {
 801ff7c:	2301      	movs	r3, #1
 801ff7e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801ff82:	e096      	b.n	80200b2 <DecodeRekordboxFiles+0x1206>
			if(FindToken(cue_token) != 0) return 1;
 801ff84:	486f      	ldr	r0, [pc, #444]	; (8020144 <DecodeRekordboxFiles+0x1298>)
 801ff86:	f7fe fef7 	bl	801ed78 <FindToken>
 801ff8a:	4603      	mov	r3, r0
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	d001      	beq.n	801ff94 <DecodeRekordboxFiles+0x10e8>
 801ff90:	2301      	movs	r3, #1
 801ff92:	e2ae      	b.n	80204f2 <DecodeRekordboxFiles+0x1646>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801ff94:	bf00      	nop
 801ff96:	4b65      	ldr	r3, [pc, #404]	; (802012c <DecodeRekordboxFiles+0x1280>)
 801ff98:	2208      	movs	r2, #8
 801ff9a:	4965      	ldr	r1, [pc, #404]	; (8020130 <DecodeRekordboxFiles+0x1284>)
 801ff9c:	4865      	ldr	r0, [pc, #404]	; (8020134 <DecodeRekordboxFiles+0x1288>)
 801ff9e:	f7f0 fdf9 	bl	8010b94 <f_read>
 801ffa2:	4603      	mov	r3, r0
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d1f6      	bne.n	801ff96 <DecodeRekordboxFiles+0x10ea>
			rekordbox.cue_number[i] = GetLongNumber();
 801ffa8:	f7fe ff40 	bl	801ee2c <GetLongNumber>
 801ffac:	4603      	mov	r3, r0
 801ffae:	4619      	mov	r1, r3
 801ffb0:	4a61      	ldr	r2, [pc, #388]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 801ffb2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801ffb6:	f603 1356 	addw	r3, r3, #2390	; 0x956
 801ffba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			rekordbox.cue_active[i] = GetLongNumber();
 801ffbe:	f7fe ff35 	bl	801ee2c <GetLongNumber>
 801ffc2:	4603      	mov	r3, r0
 801ffc4:	4619      	mov	r1, r3
 801ffc6:	4a5c      	ldr	r2, [pc, #368]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 801ffc8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801ffcc:	f603 13ba 	addw	r3, r3, #2490	; 0x9ba
 801ffd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801ffd4:	bf00      	nop
 801ffd6:	4b55      	ldr	r3, [pc, #340]	; (802012c <DecodeRekordboxFiles+0x1280>)
 801ffd8:	2204      	movs	r2, #4
 801ffda:	4955      	ldr	r1, [pc, #340]	; (8020130 <DecodeRekordboxFiles+0x1284>)
 801ffdc:	4855      	ldr	r0, [pc, #340]	; (8020134 <DecodeRekordboxFiles+0x1288>)
 801ffde:	f7f0 fdd9 	bl	8010b94 <f_read>
 801ffe2:	4603      	mov	r3, r0
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d1f6      	bne.n	801ffd6 <DecodeRekordboxFiles+0x112a>
			rekordbox.cue_type[i] = GetLongNumber();
 801ffe8:	f7fe ff20 	bl	801ee2c <GetLongNumber>
 801ffec:	4602      	mov	r2, r0
 801ffee:	4952      	ldr	r1, [pc, #328]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 801fff0:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 801fff4:	f603 231e 	addw	r3, r3, #2590	; 0xa1e
 801fff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 801fffc:	bf00      	nop
 801fffe:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8020002:	f642 5328 	movw	r3, #11560	; 0x2d28
 8020006:	4413      	add	r3, r2
 8020008:	4a4b      	ldr	r2, [pc, #300]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 802000a:	1899      	adds	r1, r3, r2
 802000c:	4b47      	ldr	r3, [pc, #284]	; (802012c <DecodeRekordboxFiles+0x1280>)
 802000e:	2201      	movs	r2, #1
 8020010:	4848      	ldr	r0, [pc, #288]	; (8020134 <DecodeRekordboxFiles+0x1288>)
 8020012:	f7f0 fdbf 	bl	8010b94 <f_read>
 8020016:	4603      	mov	r3, r0
 8020018:	2b00      	cmp	r3, #0
 802001a:	d1f0      	bne.n	801fffe <DecodeRekordboxFiles+0x1152>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 802001c:	bf00      	nop
 802001e:	4b43      	ldr	r3, [pc, #268]	; (802012c <DecodeRekordboxFiles+0x1280>)
 8020020:	2203      	movs	r2, #3
 8020022:	4943      	ldr	r1, [pc, #268]	; (8020130 <DecodeRekordboxFiles+0x1284>)
 8020024:	4843      	ldr	r0, [pc, #268]	; (8020134 <DecodeRekordboxFiles+0x1288>)
 8020026:	f7f0 fdb5 	bl	8010b94 <f_read>
 802002a:	4603      	mov	r3, r0
 802002c:	2b00      	cmp	r3, #0
 802002e:	d1f6      	bne.n	802001e <DecodeRekordboxFiles+0x1172>
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8020030:	f7fe fefc 	bl	801ee2c <GetLongNumber>
 8020034:	ee07 0a90 	vmov	s15, r0
 8020038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802003c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8020148 <DecodeRekordboxFiles+0x129c>
 8020040:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020044:	eddf 6a41 	vldr	s13, [pc, #260]	; 802014c <DecodeRekordboxFiles+0x12a0>
 8020048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802004c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020050:	ee17 1a90 	vmov	r1, s15
 8020054:	4a38      	ldr	r2, [pc, #224]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 8020056:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 802005a:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 802005e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8020062:	4a35      	ldr	r2, [pc, #212]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 8020064:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8020068:	441a      	add	r2, r3
 802006a:	f642 5328 	movw	r3, #11560	; 0x2d28
 802006e:	4413      	add	r3, r2
 8020070:	781b      	ldrb	r3, [r3, #0]
 8020072:	2b02      	cmp	r3, #2
 8020074:	d118      	bne.n	80200a8 <DecodeRekordboxFiles+0x11fc>
 8020076:	f7fe fed9 	bl	801ee2c <GetLongNumber>
 802007a:	ee07 0a90 	vmov	s15, r0
 802007e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020082:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8020148 <DecodeRekordboxFiles+0x129c>
 8020086:	ee27 7a87 	vmul.f32	s14, s15, s14
 802008a:	eddf 6a30 	vldr	s13, [pc, #192]	; 802014c <DecodeRekordboxFiles+0x12a0>
 802008e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020096:	ee17 1a90 	vmov	r1, s15
 802009a:	4a27      	ldr	r2, [pc, #156]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 802009c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80200a0:	f603 23e6 	addw	r3, r3, #2790	; 0xae6
 80200a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i = 1; i < rekordbox.cues; i++) {
 80200a8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80200ac:	3301      	adds	r3, #1
 80200ae:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80200b2:	4b21      	ldr	r3, [pc, #132]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 80200b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80200b8:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 80200bc:	461a      	mov	r2, r3
 80200be:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80200c2:	4293      	cmp	r3, r2
 80200c4:	f4ff af5e 	bcc.w	801ff84 <DecodeRekordboxFiles+0x10d8>
		}
		if(FindToken(cob_token) != 0) return 1;
 80200c8:	481d      	ldr	r0, [pc, #116]	; (8020140 <DecodeRekordboxFiles+0x1294>)
 80200ca:	f7fe fe55 	bl	801ed78 <FindToken>
 80200ce:	4603      	mov	r3, r0
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	d001      	beq.n	80200d8 <DecodeRekordboxFiles+0x122c>
 80200d4:	2301      	movs	r3, #1
 80200d6:	e20c      	b.n	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 80200d8:	bf00      	nop
 80200da:	4b14      	ldr	r3, [pc, #80]	; (802012c <DecodeRekordboxFiles+0x1280>)
 80200dc:	220c      	movs	r2, #12
 80200de:	4914      	ldr	r1, [pc, #80]	; (8020130 <DecodeRekordboxFiles+0x1284>)
 80200e0:	4814      	ldr	r0, [pc, #80]	; (8020134 <DecodeRekordboxFiles+0x1288>)
 80200e2:	f7f0 fd57 	bl	8010b94 <f_read>
 80200e6:	4603      	mov	r3, r0
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d1f6      	bne.n	80200da <DecodeRekordboxFiles+0x122e>
		rekordbox.cues += GetLongNumber();
 80200ec:	f7fe fe9e 	bl	801ee2c <GetLongNumber>
 80200f0:	4602      	mov	r2, r0
 80200f2:	4b11      	ldr	r3, [pc, #68]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 80200f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80200f8:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 80200fc:	4413      	add	r3, r2
 80200fe:	4a0e      	ldr	r2, [pc, #56]	; (8020138 <DecodeRekordboxFiles+0x128c>)
 8020100:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8020104:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
		k = i;
 8020108:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 802010c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
		for(k = i; k < rekordbox.cues; k++) {
 8020110:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8020114:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 8020118:	e0a9      	b.n	802026e <DecodeRekordboxFiles+0x13c2>
			if(FindToken(cue_token) != 0) return 1;
 802011a:	480a      	ldr	r0, [pc, #40]	; (8020144 <DecodeRekordboxFiles+0x1298>)
 802011c:	f7fe fe2c 	bl	801ed78 <FindToken>
 8020120:	4603      	mov	r3, r0
 8020122:	2b00      	cmp	r3, #0
 8020124:	d014      	beq.n	8020150 <DecodeRekordboxFiles+0x12a4>
 8020126:	2301      	movs	r3, #1
 8020128:	e1e3      	b.n	80204f2 <DecodeRekordboxFiles+0x1646>
 802012a:	bf00      	nop
 802012c:	20001df8 	.word	0x20001df8
 8020130:	2000e71c 	.word	0x2000e71c
 8020134:	20000f10 	.word	0x20000f10
 8020138:	20015170 	.word	0x20015170
 802013c:	20001e04 	.word	0x20001e04
 8020140:	20000070 	.word	0x20000070
 8020144:	20000078 	.word	0x20000078
 8020148:	43160000 	.word	0x43160000
 802014c:	447a0000 	.word	0x447a0000
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8020150:	bf00      	nop
 8020152:	4ba8      	ldr	r3, [pc, #672]	; (80203f4 <DecodeRekordboxFiles+0x1548>)
 8020154:	2208      	movs	r2, #8
 8020156:	49a8      	ldr	r1, [pc, #672]	; (80203f8 <DecodeRekordboxFiles+0x154c>)
 8020158:	48a8      	ldr	r0, [pc, #672]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 802015a:	f7f0 fd1b 	bl	8010b94 <f_read>
 802015e:	4603      	mov	r3, r0
 8020160:	2b00      	cmp	r3, #0
 8020162:	d1f6      	bne.n	8020152 <DecodeRekordboxFiles+0x12a6>
			rekordbox.cue_number[k] = GetLongNumber();
 8020164:	f7fe fe62 	bl	801ee2c <GetLongNumber>
 8020168:	4602      	mov	r2, r0
 802016a:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 802016e:	4611      	mov	r1, r2
 8020170:	4aa3      	ldr	r2, [pc, #652]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 8020172:	f603 1356 	addw	r3, r3, #2390	; 0x956
 8020176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			rekordbox.cue_active[k] = GetLongNumber();
 802017a:	f7fe fe57 	bl	801ee2c <GetLongNumber>
 802017e:	4602      	mov	r2, r0
 8020180:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8020184:	4611      	mov	r1, r2
 8020186:	4a9e      	ldr	r2, [pc, #632]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 8020188:	f603 13ba 	addw	r3, r3, #2490	; 0x9ba
 802018c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8020190:	bf00      	nop
 8020192:	4b98      	ldr	r3, [pc, #608]	; (80203f4 <DecodeRekordboxFiles+0x1548>)
 8020194:	2204      	movs	r2, #4
 8020196:	4998      	ldr	r1, [pc, #608]	; (80203f8 <DecodeRekordboxFiles+0x154c>)
 8020198:	4898      	ldr	r0, [pc, #608]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 802019a:	f7f0 fcfb 	bl	8010b94 <f_read>
 802019e:	4603      	mov	r3, r0
 80201a0:	2b00      	cmp	r3, #0
 80201a2:	d1f6      	bne.n	8020192 <DecodeRekordboxFiles+0x12e6>
			rekordbox.cue_type[k] = GetLongNumber();
 80201a4:	f897 451f 	ldrb.w	r4, [r7, #1311]	; 0x51f
 80201a8:	f7fe fe40 	bl	801ee2c <GetLongNumber>
 80201ac:	4602      	mov	r2, r0
 80201ae:	4994      	ldr	r1, [pc, #592]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 80201b0:	f604 231e 	addw	r3, r4, #2590	; 0xa1e
 80201b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 80201b8:	bf00      	nop
 80201ba:	f897 251f 	ldrb.w	r2, [r7, #1311]	; 0x51f
 80201be:	f642 5328 	movw	r3, #11560	; 0x2d28
 80201c2:	4413      	add	r3, r2
 80201c4:	4a8e      	ldr	r2, [pc, #568]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 80201c6:	1899      	adds	r1, r3, r2
 80201c8:	4b8a      	ldr	r3, [pc, #552]	; (80203f4 <DecodeRekordboxFiles+0x1548>)
 80201ca:	2201      	movs	r2, #1
 80201cc:	488b      	ldr	r0, [pc, #556]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 80201ce:	f7f0 fce1 	bl	8010b94 <f_read>
 80201d2:	4603      	mov	r3, r0
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d1f0      	bne.n	80201ba <DecodeRekordboxFiles+0x130e>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 80201d8:	bf00      	nop
 80201da:	4b86      	ldr	r3, [pc, #536]	; (80203f4 <DecodeRekordboxFiles+0x1548>)
 80201dc:	2203      	movs	r2, #3
 80201de:	4986      	ldr	r1, [pc, #536]	; (80203f8 <DecodeRekordboxFiles+0x154c>)
 80201e0:	4886      	ldr	r0, [pc, #536]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 80201e2:	f7f0 fcd7 	bl	8010b94 <f_read>
 80201e6:	4603      	mov	r3, r0
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d1f6      	bne.n	80201da <DecodeRekordboxFiles+0x132e>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 80201ec:	f7fe fe1e 	bl	801ee2c <GetLongNumber>
 80201f0:	ee07 0a90 	vmov	s15, r0
 80201f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80201f8:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8020404 <DecodeRekordboxFiles+0x1558>
 80201fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020200:	eddf 6a81 	vldr	s13, [pc, #516]	; 8020408 <DecodeRekordboxFiles+0x155c>
 8020204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020208:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 802020c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020210:	ee17 1a90 	vmov	r1, s15
 8020214:	4a7a      	ldr	r2, [pc, #488]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 8020216:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 802021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 802021e:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8020222:	4a77      	ldr	r2, [pc, #476]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 8020224:	441a      	add	r2, r3
 8020226:	f642 5328 	movw	r3, #11560	; 0x2d28
 802022a:	4413      	add	r3, r2
 802022c:	781b      	ldrb	r3, [r3, #0]
 802022e:	2b02      	cmp	r3, #2
 8020230:	d118      	bne.n	8020264 <DecodeRekordboxFiles+0x13b8>
 8020232:	f7fe fdfb 	bl	801ee2c <GetLongNumber>
 8020236:	ee07 0a90 	vmov	s15, r0
 802023a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802023e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8020404 <DecodeRekordboxFiles+0x1558>
 8020242:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020246:	eddf 6a70 	vldr	s13, [pc, #448]	; 8020408 <DecodeRekordboxFiles+0x155c>
 802024a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802024e:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8020252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020256:	ee17 1a90 	vmov	r1, s15
 802025a:	4a69      	ldr	r2, [pc, #420]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 802025c:	f603 23e6 	addw	r3, r3, #2790	; 0xae6
 8020260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(k = i; k < rekordbox.cues; k++) {
 8020264:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8020268:	3301      	adds	r3, #1
 802026a:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 802026e:	f897 251f 	ldrb.w	r2, [r7, #1311]	; 0x51f
 8020272:	4b63      	ldr	r3, [pc, #396]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 8020274:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8020278:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 802027c:	429a      	cmp	r2, r3
 802027e:	f6ff af4c 	blt.w	802011a <DecodeRekordboxFiles+0x126e>
		}
		f_close(&MyFile);
 8020282:	485e      	ldr	r0, [pc, #376]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 8020284:	f7f0 fdc1 	bl	8010e0a <f_close>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 8020288:	2300      	movs	r3, #0
 802028a:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 802028e:	e00d      	b.n	80202ac <DecodeRekordboxFiles+0x1400>
 8020290:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8020294:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8020298:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 802029c:	2100      	movs	r1, #0
 802029e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80202a2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80202a6:	3301      	adds	r3, #1
 80202a8:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80202ac:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80202b0:	2bfe      	cmp	r3, #254	; 0xfe
 80202b2:	d9ed      	bls.n	8020290 <DecodeRekordboxFiles+0x13e4>
	wcscpy(my_path, path);
 80202b4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80202b8:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80202bc:	f107 0208 	add.w	r2, r7, #8
 80202c0:	6819      	ldr	r1, [r3, #0]
 80202c2:	4610      	mov	r0, r2
 80202c4:	f005 ffa3 	bl	802620e <wcscpy>
	wcscat(my_path, L"/ANLZ0001.EXT");
 80202c8:	f107 0308 	add.w	r3, r7, #8
 80202cc:	494f      	ldr	r1, [pc, #316]	; (802040c <DecodeRekordboxFiles+0x1560>)
 80202ce:	4618      	mov	r0, r3
 80202d0:	f005 ff8d 	bl	80261ee <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 80202d4:	f107 0308 	add.w	r3, r7, #8
 80202d8:	2201      	movs	r2, #1
 80202da:	4619      	mov	r1, r3
 80202dc:	4847      	ldr	r0, [pc, #284]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 80202de:	f7f0 fba5 	bl	8010a2c <f_open>
 80202e2:	4603      	mov	r3, r0
 80202e4:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
	if(res == FR_OK) {
 80202e8:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	d179      	bne.n	80203e4 <DecodeRekordboxFiles+0x1538>
		if(FindToken(wv3_token) != 0) return 1;
 80202f0:	4847      	ldr	r0, [pc, #284]	; (8020410 <DecodeRekordboxFiles+0x1564>)
 80202f2:	f7fe fd41 	bl	801ed78 <FindToken>
 80202f6:	4603      	mov	r3, r0
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d001      	beq.n	8020300 <DecodeRekordboxFiles+0x1454>
 80202fc:	2301      	movs	r3, #1
 80202fe:	e0f8      	b.n	80204f2 <DecodeRekordboxFiles+0x1646>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 8020300:	bf00      	nop
 8020302:	4b3c      	ldr	r3, [pc, #240]	; (80203f4 <DecodeRekordboxFiles+0x1548>)
 8020304:	220c      	movs	r2, #12
 8020306:	493c      	ldr	r1, [pc, #240]	; (80203f8 <DecodeRekordboxFiles+0x154c>)
 8020308:	483c      	ldr	r0, [pc, #240]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 802030a:	f7f0 fc43 	bl	8010b94 <f_read>
 802030e:	4603      	mov	r3, r0
 8020310:	2b00      	cmp	r3, #0
 8020312:	d1f6      	bne.n	8020302 <DecodeRekordboxFiles+0x1456>
		rekordbox.spectrum_size = GetLongNumber();
 8020314:	f7fe fd8a 	bl	801ee2c <GetLongNumber>
 8020318:	4603      	mov	r3, r0
 802031a:	461a      	mov	r2, r3
 802031c:	4b38      	ldr	r3, [pc, #224]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 802031e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8020322:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8020326:	bf00      	nop
 8020328:	4b32      	ldr	r3, [pc, #200]	; (80203f4 <DecodeRekordboxFiles+0x1548>)
 802032a:	2204      	movs	r2, #4
 802032c:	4932      	ldr	r1, [pc, #200]	; (80203f8 <DecodeRekordboxFiles+0x154c>)
 802032e:	4833      	ldr	r0, [pc, #204]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 8020330:	f7f0 fc30 	bl	8010b94 <f_read>
 8020334:	4603      	mov	r3, r0
 8020336:	2b00      	cmp	r3, #0
 8020338:	d1f6      	bne.n	8020328 <DecodeRekordboxFiles+0x147c>
		rekordbox.cue_start_position[0] = 0;
 802033a:	4b31      	ldr	r3, [pc, #196]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 802033c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8020340:	461a      	mov	r2, r3
 8020342:	2300      	movs	r3, #0
 8020344:	f8c2 3a08 	str.w	r3, [r2, #2568]	; 0xa08
		for(i=0; i<rekordbox.spectrum_size; i++) {
 8020348:	2300      	movs	r3, #0
 802034a:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 802034e:	e03d      	b.n	80203cc <DecodeRekordboxFiles+0x1520>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 8020350:	bf00      	nop
 8020352:	4b28      	ldr	r3, [pc, #160]	; (80203f4 <DecodeRekordboxFiles+0x1548>)
 8020354:	2201      	movs	r2, #1
 8020356:	492f      	ldr	r1, [pc, #188]	; (8020414 <DecodeRekordboxFiles+0x1568>)
 8020358:	4828      	ldr	r0, [pc, #160]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 802035a:	f7f0 fc1b 	bl	8010b94 <f_read>
 802035e:	4603      	mov	r3, r0
 8020360:	2b00      	cmp	r3, #0
 8020362:	d1f6      	bne.n	8020352 <DecodeRekordboxFiles+0x14a6>
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 8020364:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8020368:	4b2b      	ldr	r3, [pc, #172]	; (8020418 <DecodeRekordboxFiles+0x156c>)
 802036a:	4413      	add	r3, r2
 802036c:	461a      	mov	r2, r3
 802036e:	4b29      	ldr	r3, [pc, #164]	; (8020414 <DecodeRekordboxFiles+0x1568>)
 8020370:	781b      	ldrb	r3, [r3, #0]
 8020372:	7013      	strb	r3, [r2, #0]
			if(rekordbox.autocue == 1) {
 8020374:	4b22      	ldr	r3, [pc, #136]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 8020376:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802037a:	f893 3d8c 	ldrb.w	r3, [r3, #3468]	; 0xd8c
 802037e:	2b01      	cmp	r3, #1
 8020380:	d11f      	bne.n	80203c2 <DecodeRekordboxFiles+0x1516>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 8020382:	4b24      	ldr	r3, [pc, #144]	; (8020414 <DecodeRekordboxFiles+0x1568>)
 8020384:	781b      	ldrb	r3, [r3, #0]
 8020386:	f003 031f 	and.w	r3, r3, #31
 802038a:	4a24      	ldr	r2, [pc, #144]	; (802041c <DecodeRekordboxFiles+0x1570>)
 802038c:	7812      	ldrb	r2, [r2, #0]
 802038e:	4924      	ldr	r1, [pc, #144]	; (8020420 <DecodeRekordboxFiles+0x1574>)
 8020390:	fba1 1202 	umull	r1, r2, r1, r2
 8020394:	08d2      	lsrs	r2, r2, #3
 8020396:	b2d2      	uxtb	r2, r2
 8020398:	4293      	cmp	r3, r2
 802039a:	dd12      	ble.n	80203c2 <DecodeRekordboxFiles+0x1516>
 802039c:	4b1d      	ldr	r3, [pc, #116]	; (8020414 <DecodeRekordboxFiles+0x1568>)
 802039e:	781b      	ldrb	r3, [r3, #0]
 80203a0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80203a4:	2b7f      	cmp	r3, #127	; 0x7f
 80203a6:	dc0c      	bgt.n	80203c2 <DecodeRekordboxFiles+0x1516>
					rekordbox.autocue = 2;
 80203a8:	4b15      	ldr	r3, [pc, #84]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 80203aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80203ae:	2202      	movs	r2, #2
 80203b0:	f883 2d8c 	strb.w	r2, [r3, #3468]	; 0xd8c
					rekordbox.cue_start_position[0] = i;
 80203b4:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80203b8:	4a11      	ldr	r2, [pc, #68]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 80203ba:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80203be:	f8c2 3a08 	str.w	r3, [r2, #2568]	; 0xa08
		for(i=0; i<rekordbox.spectrum_size; i++) {
 80203c2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80203c6:	3301      	adds	r3, #1
 80203c8:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80203cc:	4b0c      	ldr	r3, [pc, #48]	; (8020400 <DecodeRekordboxFiles+0x1554>)
 80203ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80203d2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80203d6:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 80203da:	429a      	cmp	r2, r3
 80203dc:	d3b8      	bcc.n	8020350 <DecodeRekordboxFiles+0x14a4>
				}
			}
		}
		f_close(&MyFile);
 80203de:	4807      	ldr	r0, [pc, #28]	; (80203fc <DecodeRekordboxFiles+0x1550>)
 80203e0:	f7f0 fd13 	bl	8010e0a <f_close>
	}
	i = 0;
 80203e4:	2300      	movs	r3, #0
 80203e6:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
	uint8_t l = 0;
 80203ea:	2300      	movs	r3, #0
 80203ec:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517
	while(i++  < rekordbox.spectrum_size) {
 80203f0:	e064      	b.n	80204bc <DecodeRekordboxFiles+0x1610>
 80203f2:	bf00      	nop
 80203f4:	20001df8 	.word	0x20001df8
 80203f8:	2000e71c 	.word	0x2000e71c
 80203fc:	20000f10 	.word	0x20000f10
 8020400:	20015170 	.word	0x20015170
 8020404:	43160000 	.word	0x43160000
 8020408:	447a0000 	.word	0x447a0000
 802040c:	08026e78 	.word	0x08026e78
 8020410:	20000068 	.word	0x20000068
 8020414:	20015168 	.word	0x20015168
 8020418:	c00ff000 	.word	0xc00ff000
 802041c:	20000059 	.word	0x20000059
 8020420:	cccccccd 	.word	0xcccccccd
		if((i % 9000) == 0) {
 8020424:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8020428:	4b34      	ldr	r3, [pc, #208]	; (80204fc <DecodeRekordboxFiles+0x1650>)
 802042a:	fba3 1302 	umull	r1, r3, r3, r2
 802042e:	0b5b      	lsrs	r3, r3, #13
 8020430:	f242 3128 	movw	r1, #9000	; 0x2328
 8020434:	fb01 f303 	mul.w	r3, r1, r3
 8020438:	1ad3      	subs	r3, r2, r3
 802043a:	2b00      	cmp	r3, #0
 802043c:	d13e      	bne.n	80204bc <DecodeRekordboxFiles+0x1610>
			rekordbox.remminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * (rekordbox.spectrum_size - i) / rekordbox.spectrum_size);
 802043e:	4b30      	ldr	r3, [pc, #192]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 8020440:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8020444:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8020448:	4a2d      	ldr	r2, [pc, #180]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 802044a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802044e:	f8d2 144c 	ldr.w	r1, [r2, #1100]	; 0x44c
 8020452:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8020456:	1a8a      	subs	r2, r1, r2
 8020458:	fb03 f202 	mul.w	r2, r3, r2
 802045c:	4b28      	ldr	r3, [pc, #160]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 802045e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8020462:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8020466:	fbb2 f3f3 	udiv	r3, r2, r3
 802046a:	f897 2517 	ldrb.w	r2, [r7, #1303]	; 0x517
 802046e:	b298      	uxth	r0, r3
 8020470:	4923      	ldr	r1, [pc, #140]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 8020472:	f241 2328 	movw	r3, #4648	; 0x1228
 8020476:	4413      	add	r3, r2
 8020478:	4602      	mov	r2, r0
 802047a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			rekordbox.elminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * i / rekordbox.spectrum_size);
 802047e:	4b20      	ldr	r3, [pc, #128]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 8020480:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8020484:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8020488:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 802048c:	fb03 f202 	mul.w	r2, r3, r2
 8020490:	4b1b      	ldr	r3, [pc, #108]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 8020492:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8020496:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 802049a:	fbb2 f3f3 	udiv	r3, r2, r3
 802049e:	f897 2517 	ldrb.w	r2, [r7, #1303]	; 0x517
 80204a2:	b298      	uxth	r0, r3
 80204a4:	4916      	ldr	r1, [pc, #88]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 80204a6:	f241 2368 	movw	r3, #4712	; 0x1268
 80204aa:	4413      	add	r3, r2
 80204ac:	4602      	mov	r2, r0
 80204ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			l++;
 80204b2:	f897 3517 	ldrb.w	r3, [r7, #1303]	; 0x517
 80204b6:	3301      	adds	r3, #1
 80204b8:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517
	while(i++  < rekordbox.spectrum_size) {
 80204bc:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80204c0:	1c5a      	adds	r2, r3, #1
 80204c2:	f8c7 2518 	str.w	r2, [r7, #1304]	; 0x518
 80204c6:	4a0e      	ldr	r2, [pc, #56]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 80204c8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80204cc:	f8d2 244c 	ldr.w	r2, [r2, #1100]	; 0x44c
 80204d0:	4293      	cmp	r3, r2
 80204d2:	d3a7      	bcc.n	8020424 <DecodeRekordboxFiles+0x1578>
		}
	}
	rekordbox.minutes = l;
 80204d4:	4b0a      	ldr	r3, [pc, #40]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 80204d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80204da:	461a      	mov	r2, r3
 80204dc:	f897 3517 	ldrb.w	r3, [r7, #1303]	; 0x517
 80204e0:	f882 3550 	strb.w	r3, [r2, #1360]	; 0x550
	rekordbox.state = 1;
 80204e4:	4b06      	ldr	r3, [pc, #24]	; (8020500 <DecodeRekordboxFiles+0x1654>)
 80204e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80204ea:	2201      	movs	r2, #1
 80204ec:	f883 2d94 	strb.w	r2, [r3, #3476]	; 0xd94
	return 0;
 80204f0:	2300      	movs	r3, #0
}
 80204f2:	4618      	mov	r0, r3
 80204f4:	f207 5724 	addw	r7, r7, #1316	; 0x524
 80204f8:	46bd      	mov	sp, r7
 80204fa:	bd90      	pop	{r4, r7, pc}
 80204fc:	e90452d5 	.word	0xe90452d5
 8020500:	20015170 	.word	0x20015170

08020504 <GetFileName>:

uint8_t GetFileName(TCHAR *path)
{
 8020504:	b580      	push	{r7, lr}
 8020506:	b0c8      	sub	sp, #288	; 0x120
 8020508:	af00      	add	r7, sp, #0
 802050a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 802050e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8020512:	6018      	str	r0, [r3, #0]
	uint32_t data_size = 0;
 8020514:	2300      	movs	r3, #0
 8020516:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint8_t k;
	uint32_t i;
	uint8_t res = FR_OK;
 802051a:	2300      	movs	r3, #0
 802051c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	for(i = 0; i < 255; i++) rekordbox.filename[i] = 0;
 8020520:	2300      	movs	r3, #0
 8020522:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8020526:	e00a      	b.n	802053e <GetFileName+0x3a>
 8020528:	4ab6      	ldr	r2, [pc, #728]	; (8020804 <GetFileName+0x300>)
 802052a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802052e:	2100      	movs	r1, #0
 8020530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8020534:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020538:	3301      	adds	r3, #1
 802053a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 802053e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020542:	2bfe      	cmp	r3, #254	; 0xfe
 8020544:	d9f0      	bls.n	8020528 <GetFileName+0x24>
	char filename[255] = {0};
 8020546:	f507 7390 	add.w	r3, r7, #288	; 0x120
 802054a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 802054e:	2200      	movs	r2, #0
 8020550:	601a      	str	r2, [r3, #0]
 8020552:	3304      	adds	r3, #4
 8020554:	22fb      	movs	r2, #251	; 0xfb
 8020556:	2100      	movs	r1, #0
 8020558:	4618      	mov	r0, r3
 802055a:	f005 fd0d 	bl	8025f78 <memset>

	res = f_open(&MyFile, path, FA_READ);
 802055e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020562:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8020566:	2201      	movs	r2, #1
 8020568:	6819      	ldr	r1, [r3, #0]
 802056a:	48a7      	ldr	r0, [pc, #668]	; (8020808 <GetFileName+0x304>)
 802056c:	f7f0 fa5e 	bl	8010a2c <f_open>
 8020570:	4603      	mov	r3, r0
 8020572:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	if(res == FR_OK)
 8020576:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 802057a:	2b00      	cmp	r3, #0
 802057c:	f040 8138 	bne.w	80207f0 <GetFileName+0x2ec>
	{
		if(FindToken(path_token) != 0) return 1;
 8020580:	48a2      	ldr	r0, [pc, #648]	; (802080c <GetFileName+0x308>)
 8020582:	f7fe fbf9 	bl	801ed78 <FindToken>
 8020586:	4603      	mov	r3, r0
 8020588:	2b00      	cmp	r3, #0
 802058a:	d001      	beq.n	8020590 <GetFileName+0x8c>
 802058c:	2301      	movs	r3, #1
 802058e:	e133      	b.n	80207f8 <GetFileName+0x2f4>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8020590:	bf00      	nop
 8020592:	4b9f      	ldr	r3, [pc, #636]	; (8020810 <GetFileName+0x30c>)
 8020594:	2208      	movs	r2, #8
 8020596:	499f      	ldr	r1, [pc, #636]	; (8020814 <GetFileName+0x310>)
 8020598:	489b      	ldr	r0, [pc, #620]	; (8020808 <GetFileName+0x304>)
 802059a:	f7f0 fafb 	bl	8010b94 <f_read>
 802059e:	4603      	mov	r3, r0
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d1f6      	bne.n	8020592 <GetFileName+0x8e>
		data_size = GetLongNumber();
 80205a4:	f7fe fc42 	bl	801ee2c <GetLongNumber>
 80205a8:	4603      	mov	r3, r0
 80205aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 80205ae:	bf00      	nop
 80205b0:	f107 010c 	add.w	r1, r7, #12
 80205b4:	4b96      	ldr	r3, [pc, #600]	; (8020810 <GetFileName+0x30c>)
 80205b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80205ba:	4893      	ldr	r0, [pc, #588]	; (8020808 <GetFileName+0x304>)
 80205bc:	f7f0 faea 	bl	8010b94 <f_read>
 80205c0:	4603      	mov	r3, r0
 80205c2:	2b00      	cmp	r3, #0
 80205c4:	d1f4      	bne.n	80205b0 <GetFileName+0xac>
		i = 0;
 80205c6:	2300      	movs	r3, #0
 80205c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		k = 0;
 80205cc:	2300      	movs	r3, #0
 80205ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while(i < data_size) {
 80205d2:	e040      	b.n	8020656 <GetFileName+0x152>
			WCHAR c = filename[i];
 80205d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80205d8:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80205dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80205e0:	4413      	add	r3, r2
 80205e2:	781b      	ldrb	r3, [r3, #0]
 80205e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			c <<= 8;
 80205e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80205ec:	021b      	lsls	r3, r3, #8
 80205ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			i++;
 80205f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80205f6:	3301      	adds	r3, #1
 80205f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			c |= filename[i];
 80205fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020600:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8020604:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020608:	4413      	add	r3, r2
 802060a:	781b      	ldrb	r3, [r3, #0]
 802060c:	461a      	mov	r2, r3
 802060e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8020612:	4313      	orrs	r3, r2
 8020614:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			i++;
 8020618:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802061c:	3301      	adds	r3, #1
 802061e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			rekordbox.filename[k] = c;
 8020622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8020626:	4977      	ldr	r1, [pc, #476]	; (8020804 <GetFileName+0x300>)
 8020628:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 802062c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			filename[k] = ff_convert(c, 0);
 8020630:	2100      	movs	r1, #0
 8020632:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8020636:	f7f1 f81b 	bl	8011670 <ff_convert>
 802063a:	4602      	mov	r2, r0
 802063c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8020640:	b2d1      	uxtb	r1, r2
 8020642:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8020646:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 802064a:	54d1      	strb	r1, [r2, r3]
			k++;
 802064c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8020650:	3301      	adds	r3, #1
 8020652:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while(i < data_size) {
 8020656:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802065a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802065e:	429a      	cmp	r2, r3
 8020660:	d3b8      	bcc.n	80205d4 <GetFileName+0xd0>
		}
		for(i = k; i < data_size; i++) filename[i] = 0;
 8020662:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8020666:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 802066a:	e00d      	b.n	8020688 <GetFileName+0x184>
 802066c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020670:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8020674:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020678:	4413      	add	r3, r2
 802067a:	2200      	movs	r2, #0
 802067c:	701a      	strb	r2, [r3, #0]
 802067e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020682:	3301      	adds	r3, #1
 8020684:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8020688:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802068c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8020690:	429a      	cmp	r2, r3
 8020692:	d3eb      	bcc.n	802066c <GetFileName+0x168>
		i = data_size;
 8020694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8020698:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		while((i > 0) && (filename[i] != '.')) i--;
 802069c:	e004      	b.n	80206a8 <GetFileName+0x1a4>
 802069e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80206a2:	3b01      	subs	r3, #1
 80206a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80206a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	d009      	beq.n	80206c4 <GetFileName+0x1c0>
 80206b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80206b4:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80206b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80206bc:	4413      	add	r3, r2
 80206be:	781b      	ldrb	r3, [r3, #0]
 80206c0:	2b2e      	cmp	r3, #46	; 0x2e
 80206c2:	d1ec      	bne.n	802069e <GetFileName+0x19a>
		k = 0;
 80206c4:	2300      	movs	r3, #0
 80206c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while(k < 5)
 80206ca:	e022      	b.n	8020712 <GetFileName+0x20e>
		{
			if(filename[i] >= 32) {
 80206cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80206d0:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80206d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80206d8:	4413      	add	r3, r2
 80206da:	781b      	ldrb	r3, [r3, #0]
 80206dc:	2b1f      	cmp	r3, #31
 80206de:	d913      	bls.n	8020708 <GetFileName+0x204>
				rekordbox.filetype[k] = filename[i];
 80206e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80206e4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80206e8:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 80206ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80206f0:	440a      	add	r2, r1
 80206f2:	7811      	ldrb	r1, [r2, #0]
 80206f4:	4a43      	ldr	r2, [pc, #268]	; (8020804 <GetFileName+0x300>)
 80206f6:	4413      	add	r3, r2
 80206f8:	460a      	mov	r2, r1
 80206fa:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
				k++;
 80206fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8020702:	3301      	adds	r3, #1
 8020704:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			}
			i++;
 8020708:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802070c:	3301      	adds	r3, #1
 802070e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		while(k < 5)
 8020712:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8020716:	2b04      	cmp	r3, #4
 8020718:	d9d8      	bls.n	80206cc <GetFileName+0x1c8>
		}
		rekordbox.filetype[4] = 0;
 802071a:	4b3a      	ldr	r3, [pc, #232]	; (8020804 <GetFileName+0x300>)
 802071c:	2200      	movs	r2, #0
 802071e:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff

		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 8020722:	2300      	movs	r3, #0
 8020724:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8020728:	e00c      	b.n	8020744 <GetFileName+0x240>
 802072a:	4a36      	ldr	r2, [pc, #216]	; (8020804 <GetFileName+0x300>)
 802072c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020730:	4413      	add	r3, r2
 8020732:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8020736:	2200      	movs	r2, #0
 8020738:	701a      	strb	r2, [r3, #0]
 802073a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802073e:	3301      	adds	r3, #1
 8020740:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8020744:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020748:	2bfe      	cmp	r3, #254	; 0xfe
 802074a:	d9ee      	bls.n	802072a <GetFileName+0x226>
		i = data_size;
 802074c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8020750:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		while((i > 0) && (filename[i] != '/')) i--;
 8020754:	e004      	b.n	8020760 <GetFileName+0x25c>
 8020756:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802075a:	3b01      	subs	r3, #1
 802075c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8020760:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020764:	2b00      	cmp	r3, #0
 8020766:	d009      	beq.n	802077c <GetFileName+0x278>
 8020768:	f507 7390 	add.w	r3, r7, #288	; 0x120
 802076c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8020770:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020774:	4413      	add	r3, r2
 8020776:	781b      	ldrb	r3, [r3, #0]
 8020778:	2b2f      	cmp	r3, #47	; 0x2f
 802077a:	d1ec      	bne.n	8020756 <GetFileName+0x252>
		k = 0;
 802077c:	2300      	movs	r3, #0
 802077e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		i++;
 8020782:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020786:	3301      	adds	r3, #1
 8020788:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		while(i < data_size)
 802078c:	e022      	b.n	80207d4 <GetFileName+0x2d0>
		{
			if(filename[i] >= 32) {
 802078e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020792:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8020796:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802079a:	4413      	add	r3, r2
 802079c:	781b      	ldrb	r3, [r3, #0]
 802079e:	2b1f      	cmp	r3, #31
 80207a0:	d913      	bls.n	80207ca <GetFileName+0x2c6>
				rekordbox.file[k] = filename[i];
 80207a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80207a6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80207aa:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 80207ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80207b2:	440a      	add	r2, r1
 80207b4:	7811      	ldrb	r1, [r2, #0]
 80207b6:	4a13      	ldr	r2, [pc, #76]	; (8020804 <GetFileName+0x300>)
 80207b8:	4413      	add	r3, r2
 80207ba:	460a      	mov	r2, r1
 80207bc:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
				k++;
 80207c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80207c4:	3301      	adds	r3, #1
 80207c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			}
			i++;
 80207ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80207ce:	3301      	adds	r3, #1
 80207d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		while(i < data_size)
 80207d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80207d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80207dc:	429a      	cmp	r2, r3
 80207de:	d3d6      	bcc.n	802078e <GetFileName+0x28a>
		}
		rekordbox.file[i] = 0;
 80207e0:	4a08      	ldr	r2, [pc, #32]	; (8020804 <GetFileName+0x300>)
 80207e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80207e6:	4413      	add	r3, r2
 80207e8:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80207ec:	2200      	movs	r2, #0
 80207ee:	701a      	strb	r2, [r3, #0]
	}
	f_close(&MyFile);
 80207f0:	4805      	ldr	r0, [pc, #20]	; (8020808 <GetFileName+0x304>)
 80207f2:	f7f0 fb0a 	bl	8010e0a <f_close>
	return 0;
 80207f6:	2300      	movs	r3, #0
}
 80207f8:	4618      	mov	r0, r3
 80207fa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80207fe:	46bd      	mov	sp, r7
 8020800:	bd80      	pop	{r7, pc}
 8020802:	bf00      	nop
 8020804:	20015170 	.word	0x20015170
 8020808:	20000f10 	.word	0x20000f10
 802080c:	20000080 	.word	0x20000080
 8020810:	20001df8 	.word	0x20001df8
 8020814:	2000e71c 	.word	0x2000e71c

08020818 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
DMA_HandleTypeDef hdma_sai2_a;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8020818:	b580      	push	{r7, lr}
 802081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 802081c:	4b2a      	ldr	r3, [pc, #168]	; (80208c8 <MX_SAI2_Init+0xb0>)
 802081e:	4a2b      	ldr	r2, [pc, #172]	; (80208cc <MX_SAI2_Init+0xb4>)
 8020820:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8020822:	4b29      	ldr	r3, [pc, #164]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020824:	2200      	movs	r2, #0
 8020826:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8020828:	4b27      	ldr	r3, [pc, #156]	; (80208c8 <MX_SAI2_Init+0xb0>)
 802082a:	2200      	movs	r2, #0
 802082c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 802082e:	4b26      	ldr	r3, [pc, #152]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020830:	2280      	movs	r2, #128	; 0x80
 8020832:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8020834:	4b24      	ldr	r3, [pc, #144]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020836:	2200      	movs	r2, #0
 8020838:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 802083a:	4b23      	ldr	r3, [pc, #140]	; (80208c8 <MX_SAI2_Init+0xb0>)
 802083c:	2201      	movs	r2, #1
 802083e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8020840:	4b21      	ldr	r3, [pc, #132]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020842:	2200      	movs	r2, #0
 8020844:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8020846:	4b20      	ldr	r3, [pc, #128]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020848:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802084c:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 802084e:	4b1e      	ldr	r3, [pc, #120]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020850:	2200      	movs	r2, #0
 8020852:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8020854:	4b1c      	ldr	r3, [pc, #112]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020856:	2201      	movs	r2, #1
 8020858:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 802085a:	4b1b      	ldr	r3, [pc, #108]	; (80208c8 <MX_SAI2_Init+0xb0>)
 802085c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8020860:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8020862:	4b19      	ldr	r3, [pc, #100]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020864:	2200      	movs	r2, #0
 8020866:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8020868:	4b17      	ldr	r3, [pc, #92]	; (80208c8 <MX_SAI2_Init+0xb0>)
 802086a:	2200      	movs	r2, #0
 802086c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 802086e:	4b16      	ldr	r3, [pc, #88]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020870:	2200      	movs	r2, #0
 8020872:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8020874:	4b14      	ldr	r3, [pc, #80]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020876:	2200      	movs	r2, #0
 8020878:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 802087a:	4b13      	ldr	r3, [pc, #76]	; (80208c8 <MX_SAI2_Init+0xb0>)
 802087c:	2240      	movs	r2, #64	; 0x40
 802087e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8020880:	4b11      	ldr	r3, [pc, #68]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020882:	2220      	movs	r2, #32
 8020884:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8020886:	4b10      	ldr	r3, [pc, #64]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020888:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802088c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 802088e:	4b0e      	ldr	r3, [pc, #56]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020890:	2200      	movs	r2, #0
 8020892:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8020894:	4b0c      	ldr	r3, [pc, #48]	; (80208c8 <MX_SAI2_Init+0xb0>)
 8020896:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 802089a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 802089c:	4b0a      	ldr	r3, [pc, #40]	; (80208c8 <MX_SAI2_Init+0xb0>)
 802089e:	2200      	movs	r2, #0
 80208a0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80208a2:	4b09      	ldr	r3, [pc, #36]	; (80208c8 <MX_SAI2_Init+0xb0>)
 80208a4:	2200      	movs	r2, #0
 80208a6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 80208a8:	4b07      	ldr	r3, [pc, #28]	; (80208c8 <MX_SAI2_Init+0xb0>)
 80208aa:	2204      	movs	r2, #4
 80208ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x0000000F;
 80208ae:	4b06      	ldr	r3, [pc, #24]	; (80208c8 <MX_SAI2_Init+0xb0>)
 80208b0:	220f      	movs	r2, #15
 80208b2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80208b4:	4804      	ldr	r0, [pc, #16]	; (80208c8 <MX_SAI2_Init+0xb0>)
 80208b6:	f7e7 fb71 	bl	8007f9c <HAL_SAI_Init>
 80208ba:	4603      	mov	r3, r0
 80208bc:	2b00      	cmp	r3, #0
 80208be:	d001      	beq.n	80208c4 <MX_SAI2_Init+0xac>
  {
    Error_Handler();
 80208c0:	f7fd fea7 	bl	801e612 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80208c4:	bf00      	nop
 80208c6:	bd80      	pop	{r7, pc}
 80208c8:	20017f08 	.word	0x20017f08
 80208cc:	40015c04 	.word	0x40015c04

080208d0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80208d0:	b580      	push	{r7, lr}
 80208d2:	b0aa      	sub	sp, #168	; 0xa8
 80208d4:	af00      	add	r7, sp, #0
 80208d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80208d8:	f107 0310 	add.w	r3, r7, #16
 80208dc:	2284      	movs	r2, #132	; 0x84
 80208de:	2100      	movs	r1, #0
 80208e0:	4618      	mov	r0, r3
 80208e2:	f005 fb49 	bl	8025f78 <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80208e6:	687b      	ldr	r3, [r7, #4]
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	4a41      	ldr	r2, [pc, #260]	; (80209f0 <HAL_SAI_MspInit+0x120>)
 80208ec:	4293      	cmp	r3, r2
 80208ee:	d17a      	bne.n	80209e6 <HAL_SAI_MspInit+0x116>
    {
    /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80208f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80208f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80208f6:	2364      	movs	r3, #100	; 0x64
 80208f8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80208fa:	2302      	movs	r3, #2
 80208fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80208fe:	2302      	movs	r3, #2
 8020900:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8020902:	2302      	movs	r3, #2
 8020904:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8020906:	2301      	movs	r3, #1
 8020908:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 802090a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802090e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020910:	f107 0310 	add.w	r3, r7, #16
 8020914:	4618      	mov	r0, r3
 8020916:	f7e6 f90d 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 802091a:	4603      	mov	r3, r0
 802091c:	2b00      	cmp	r3, #0
 802091e:	d001      	beq.n	8020924 <HAL_SAI_MspInit+0x54>
    {
      Error_Handler();
 8020920:	f7fd fe77 	bl	801e612 <Error_Handler>
    }

    if (SAI2_client == 0)
 8020924:	4b33      	ldr	r3, [pc, #204]	; (80209f4 <HAL_SAI_MspInit+0x124>)
 8020926:	681b      	ldr	r3, [r3, #0]
 8020928:	2b00      	cmp	r3, #0
 802092a:	d10b      	bne.n	8020944 <HAL_SAI_MspInit+0x74>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 802092c:	4b32      	ldr	r3, [pc, #200]	; (80209f8 <HAL_SAI_MspInit+0x128>)
 802092e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020930:	4a31      	ldr	r2, [pc, #196]	; (80209f8 <HAL_SAI_MspInit+0x128>)
 8020932:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8020936:	6453      	str	r3, [r2, #68]	; 0x44
 8020938:	4b2f      	ldr	r3, [pc, #188]	; (80209f8 <HAL_SAI_MspInit+0x128>)
 802093a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802093c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8020940:	60fb      	str	r3, [r7, #12]
 8020942:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8020944:	4b2b      	ldr	r3, [pc, #172]	; (80209f4 <HAL_SAI_MspInit+0x124>)
 8020946:	681b      	ldr	r3, [r3, #0]
 8020948:	3301      	adds	r3, #1
 802094a:	4a2a      	ldr	r2, [pc, #168]	; (80209f4 <HAL_SAI_MspInit+0x124>)
 802094c:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 802094e:	23f0      	movs	r3, #240	; 0xf0
 8020950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020954:	2302      	movs	r3, #2
 8020956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802095a:	2300      	movs	r3, #0
 802095c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020960:	2302      	movs	r3, #2
 8020962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8020966:	230a      	movs	r3, #10
 8020968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 802096c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8020970:	4619      	mov	r1, r3
 8020972:	4822      	ldr	r0, [pc, #136]	; (80209fc <HAL_SAI_MspInit+0x12c>)
 8020974:	f7e1 ff62 	bl	800283c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8020978:	4b21      	ldr	r3, [pc, #132]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 802097a:	4a22      	ldr	r2, [pc, #136]	; (8020a04 <HAL_SAI_MspInit+0x134>)
 802097c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 802097e:	4b20      	ldr	r3, [pc, #128]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 8020980:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8020984:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8020986:	4b1e      	ldr	r3, [pc, #120]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 8020988:	2240      	movs	r2, #64	; 0x40
 802098a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 802098c:	4b1c      	ldr	r3, [pc, #112]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 802098e:	2200      	movs	r2, #0
 8020990:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8020992:	4b1b      	ldr	r3, [pc, #108]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 8020994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020998:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 802099a:	4b19      	ldr	r3, [pc, #100]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 802099c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80209a0:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80209a2:	4b17      	ldr	r3, [pc, #92]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 80209a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80209a8:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80209aa:	4b15      	ldr	r3, [pc, #84]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 80209ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80209b0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80209b2:	4b13      	ldr	r3, [pc, #76]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 80209b4:	2200      	movs	r2, #0
 80209b6:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80209b8:	4b11      	ldr	r3, [pc, #68]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 80209ba:	2200      	movs	r2, #0
 80209bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80209be:	4810      	ldr	r0, [pc, #64]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 80209c0:	f7e0 fe3a 	bl	8001638 <HAL_DMA_Init>
 80209c4:	4603      	mov	r3, r0
 80209c6:	2b00      	cmp	r3, #0
 80209c8:	d001      	beq.n	80209ce <HAL_SAI_MspInit+0xfe>
    {
      Error_Handler();
 80209ca:	f7fd fe22 	bl	801e612 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	4a0b      	ldr	r2, [pc, #44]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 80209d2:	671a      	str	r2, [r3, #112]	; 0x70
 80209d4:	4a0a      	ldr	r2, [pc, #40]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	4a08      	ldr	r2, [pc, #32]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 80209de:	66da      	str	r2, [r3, #108]	; 0x6c
 80209e0:	4a07      	ldr	r2, [pc, #28]	; (8020a00 <HAL_SAI_MspInit+0x130>)
 80209e2:	687b      	ldr	r3, [r7, #4]
 80209e4:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80209e6:	bf00      	nop
 80209e8:	37a8      	adds	r7, #168	; 0xa8
 80209ea:	46bd      	mov	sp, r7
 80209ec:	bd80      	pop	{r7, pc}
 80209ee:	bf00      	nop
 80209f0:	40015c04 	.word	0x40015c04
 80209f4:	20017fec 	.word	0x20017fec
 80209f8:	40023800 	.word	0x40023800
 80209fc:	40022000 	.word	0x40022000
 8020a00:	20017f8c 	.word	0x20017f8c
 8020a04:	40026470 	.word	0x40026470

08020a08 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8020a08:	b480      	push	{r7}
 8020a0a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8020a0c:	4b0d      	ldr	r3, [pc, #52]	; (8020a44 <MX_SDMMC1_SD_Init+0x3c>)
 8020a0e:	4a0e      	ldr	r2, [pc, #56]	; (8020a48 <MX_SDMMC1_SD_Init+0x40>)
 8020a10:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8020a12:	4b0c      	ldr	r3, [pc, #48]	; (8020a44 <MX_SDMMC1_SD_Init+0x3c>)
 8020a14:	2200      	movs	r2, #0
 8020a16:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8020a18:	4b0a      	ldr	r3, [pc, #40]	; (8020a44 <MX_SDMMC1_SD_Init+0x3c>)
 8020a1a:	2200      	movs	r2, #0
 8020a1c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8020a1e:	4b09      	ldr	r3, [pc, #36]	; (8020a44 <MX_SDMMC1_SD_Init+0x3c>)
 8020a20:	2200      	movs	r2, #0
 8020a22:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8020a24:	4b07      	ldr	r3, [pc, #28]	; (8020a44 <MX_SDMMC1_SD_Init+0x3c>)
 8020a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020a2a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8020a2c:	4b05      	ldr	r3, [pc, #20]	; (8020a44 <MX_SDMMC1_SD_Init+0x3c>)
 8020a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8020a32:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 2;
 8020a34:	4b03      	ldr	r3, [pc, #12]	; (8020a44 <MX_SDMMC1_SD_Init+0x3c>)
 8020a36:	2202      	movs	r2, #2
 8020a38:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8020a3a:	bf00      	nop
 8020a3c:	46bd      	mov	sp, r7
 8020a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a42:	4770      	bx	lr
 8020a44:	20017ff0 	.word	0x20017ff0
 8020a48:	40012c00 	.word	0x40012c00

08020a4c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8020a4c:	b580      	push	{r7, lr}
 8020a4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8020a50:	4b19      	ldr	r3, [pc, #100]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a52:	4a1a      	ldr	r2, [pc, #104]	; (8020abc <MX_SPI2_Init+0x70>)
 8020a54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8020a56:	4b18      	ldr	r3, [pc, #96]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a58:	2200      	movs	r2, #0
 8020a5a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8020a5c:	4b16      	ldr	r3, [pc, #88]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a5e:	2200      	movs	r2, #0
 8020a60:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8020a62:	4b15      	ldr	r3, [pc, #84]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8020a68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8020a6a:	4b13      	ldr	r3, [pc, #76]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a6c:	2202      	movs	r2, #2
 8020a6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8020a70:	4b11      	ldr	r3, [pc, #68]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a72:	2201      	movs	r2, #1
 8020a74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8020a76:	4b10      	ldr	r3, [pc, #64]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020a7e:	4b0e      	ldr	r3, [pc, #56]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a80:	2200      	movs	r2, #0
 8020a82:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8020a84:	4b0c      	ldr	r3, [pc, #48]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a86:	2200      	movs	r2, #0
 8020a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020a8a:	4b0b      	ldr	r3, [pc, #44]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a8c:	2200      	movs	r2, #0
 8020a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8020a90:	4b09      	ldr	r3, [pc, #36]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a92:	2207      	movs	r2, #7
 8020a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8020a96:	4b08      	ldr	r3, [pc, #32]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a98:	2200      	movs	r2, #0
 8020a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8020a9c:	4b06      	ldr	r3, [pc, #24]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020a9e:	2200      	movs	r2, #0
 8020aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8020aa2:	4805      	ldr	r0, [pc, #20]	; (8020ab8 <MX_SPI2_Init+0x6c>)
 8020aa4:	f7e8 f880 	bl	8008ba8 <HAL_SPI_Init>
 8020aa8:	4603      	mov	r3, r0
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d001      	beq.n	8020ab2 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8020aae:	f7fd fdb0 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8020ab2:	bf00      	nop
 8020ab4:	bd80      	pop	{r7, pc}
 8020ab6:	bf00      	nop
 8020ab8:	20018074 	.word	0x20018074
 8020abc:	40003800 	.word	0x40003800

08020ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8020ac0:	b580      	push	{r7, lr}
 8020ac2:	b08a      	sub	sp, #40	; 0x28
 8020ac4:	af00      	add	r7, sp, #0
 8020ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020ac8:	f107 0314 	add.w	r3, r7, #20
 8020acc:	2200      	movs	r2, #0
 8020ace:	601a      	str	r2, [r3, #0]
 8020ad0:	605a      	str	r2, [r3, #4]
 8020ad2:	609a      	str	r2, [r3, #8]
 8020ad4:	60da      	str	r2, [r3, #12]
 8020ad6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	4a29      	ldr	r2, [pc, #164]	; (8020b84 <HAL_SPI_MspInit+0xc4>)
 8020ade:	4293      	cmp	r3, r2
 8020ae0:	d14c      	bne.n	8020b7c <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8020ae2:	4b29      	ldr	r3, [pc, #164]	; (8020b88 <HAL_SPI_MspInit+0xc8>)
 8020ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ae6:	4a28      	ldr	r2, [pc, #160]	; (8020b88 <HAL_SPI_MspInit+0xc8>)
 8020ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020aec:	6413      	str	r3, [r2, #64]	; 0x40
 8020aee:	4b26      	ldr	r3, [pc, #152]	; (8020b88 <HAL_SPI_MspInit+0xc8>)
 8020af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020af6:	613b      	str	r3, [r7, #16]
 8020af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8020afa:	4b23      	ldr	r3, [pc, #140]	; (8020b88 <HAL_SPI_MspInit+0xc8>)
 8020afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020afe:	4a22      	ldr	r2, [pc, #136]	; (8020b88 <HAL_SPI_MspInit+0xc8>)
 8020b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020b04:	6313      	str	r3, [r2, #48]	; 0x30
 8020b06:	4b20      	ldr	r3, [pc, #128]	; (8020b88 <HAL_SPI_MspInit+0xc8>)
 8020b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020b0e:	60fb      	str	r3, [r7, #12]
 8020b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020b12:	4b1d      	ldr	r3, [pc, #116]	; (8020b88 <HAL_SPI_MspInit+0xc8>)
 8020b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b16:	4a1c      	ldr	r2, [pc, #112]	; (8020b88 <HAL_SPI_MspInit+0xc8>)
 8020b18:	f043 0302 	orr.w	r3, r3, #2
 8020b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8020b1e:	4b1a      	ldr	r3, [pc, #104]	; (8020b88 <HAL_SPI_MspInit+0xc8>)
 8020b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b22:	f003 0302 	and.w	r3, r3, #2
 8020b26:	60bb      	str	r3, [r7, #8]
 8020b28:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8020b2a:	2302      	movs	r3, #2
 8020b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020b2e:	2302      	movs	r3, #2
 8020b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020b32:	2300      	movs	r3, #0
 8020b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020b36:	2303      	movs	r3, #3
 8020b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8020b3a:	2305      	movs	r3, #5
 8020b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8020b3e:	f107 0314 	add.w	r3, r7, #20
 8020b42:	4619      	mov	r1, r3
 8020b44:	4811      	ldr	r0, [pc, #68]	; (8020b8c <HAL_SPI_MspInit+0xcc>)
 8020b46:	f7e1 fe79 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8020b4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8020b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020b50:	2302      	movs	r3, #2
 8020b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020b54:	2300      	movs	r3, #0
 8020b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020b58:	2303      	movs	r3, #3
 8020b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8020b5c:	2305      	movs	r3, #5
 8020b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020b60:	f107 0314 	add.w	r3, r7, #20
 8020b64:	4619      	mov	r1, r3
 8020b66:	480a      	ldr	r0, [pc, #40]	; (8020b90 <HAL_SPI_MspInit+0xd0>)
 8020b68:	f7e1 fe68 	bl	800283c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8020b6c:	2200      	movs	r2, #0
 8020b6e:	2102      	movs	r1, #2
 8020b70:	2024      	movs	r0, #36	; 0x24
 8020b72:	f7e0 fcc1 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8020b76:	2024      	movs	r0, #36	; 0x24
 8020b78:	f7e0 fcea 	bl	8001550 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8020b7c:	bf00      	nop
 8020b7e:	3728      	adds	r7, #40	; 0x28
 8020b80:	46bd      	mov	sp, r7
 8020b82:	bd80      	pop	{r7, pc}
 8020b84:	40003800 	.word	0x40003800
 8020b88:	40023800 	.word	0x40023800
 8020b8c:	40022000 	.word	0x40022000
 8020b90:	40020400 	.word	0x40020400

08020b94 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 8020b94:	b590      	push	{r4, r7, lr}
 8020b96:	b085      	sub	sp, #20
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	4603      	mov	r3, r0
 8020b9c:	603a      	str	r2, [r7, #0]
 8020b9e:	80fb      	strh	r3, [r7, #6]
 8020ba0:	460b      	mov	r3, r1
 8020ba2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 8020ba4:	2301      	movs	r3, #1
 8020ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 8020ba8:	2300      	movs	r3, #0
 8020baa:	60bb      	str	r3, [r7, #8]

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, AudioFreq, NULL);
 8020bac:	2200      	movs	r2, #0
 8020bae:	6839      	ldr	r1, [r7, #0]
 8020bb0:	4815      	ldr	r0, [pc, #84]	; (8020c08 <BSP_AUDIO_OUT_Init+0x74>)
 8020bb2:	f000 f977 	bl	8020ea4 <BSP_AUDIO_OUT_ClockConfig>

    SAIx_Out_Init(AudioFreq);
 8020bb6:	6838      	ldr	r0, [r7, #0]
 8020bb8:	f000 f9ee 	bl	8020f98 <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8020bbc:	4b13      	ldr	r3, [pc, #76]	; (8020c0c <BSP_AUDIO_OUT_Init+0x78>)
 8020bbe:	689b      	ldr	r3, [r3, #8]
 8020bc0:	2034      	movs	r0, #52	; 0x34
 8020bc2:	4798      	blx	r3
 8020bc4:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8020bc6:	68bb      	ldr	r3, [r7, #8]
 8020bc8:	f648 1294 	movw	r2, #35220	; 0x8994
 8020bcc:	4293      	cmp	r3, r2
 8020bce:	d109      	bne.n	8020be4 <BSP_AUDIO_OUT_Init+0x50>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8020bd0:	4b0e      	ldr	r3, [pc, #56]	; (8020c0c <BSP_AUDIO_OUT_Init+0x78>)
 8020bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020bd4:	2034      	movs	r0, #52	; 0x34
 8020bd6:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 8020bd8:	4b0d      	ldr	r3, [pc, #52]	; (8020c10 <BSP_AUDIO_OUT_Init+0x7c>)
 8020bda:	4a0c      	ldr	r2, [pc, #48]	; (8020c0c <BSP_AUDIO_OUT_Init+0x78>)
 8020bdc:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 8020bde:	2300      	movs	r3, #0
 8020be0:	73fb      	strb	r3, [r7, #15]
 8020be2:	e001      	b.n	8020be8 <BSP_AUDIO_OUT_Init+0x54>
  }
  else
  {
    ret = AUDIO_ERROR;
 8020be4:	2301      	movs	r3, #1
 8020be6:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8020be8:	7bfb      	ldrb	r3, [r7, #15]
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	d107      	bne.n	8020bfe <BSP_AUDIO_OUT_Init+0x6a>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8020bee:	4b08      	ldr	r3, [pc, #32]	; (8020c10 <BSP_AUDIO_OUT_Init+0x7c>)
 8020bf0:	681b      	ldr	r3, [r3, #0]
 8020bf2:	681c      	ldr	r4, [r3, #0]
 8020bf4:	797a      	ldrb	r2, [r7, #5]
 8020bf6:	88f9      	ldrh	r1, [r7, #6]
 8020bf8:	683b      	ldr	r3, [r7, #0]
 8020bfa:	2034      	movs	r0, #52	; 0x34
 8020bfc:	47a0      	blx	r4
  }
 
  return ret;
 8020bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8020c00:	4618      	mov	r0, r3
 8020c02:	3714      	adds	r7, #20
 8020c04:	46bd      	mov	sp, r7
 8020c06:	bd90      	pop	{r4, r7, pc}
 8020c08:	20017f08 	.word	0x20017f08
 8020c0c:	200000a8 	.word	0x200000a8
 8020c10:	200180d8 	.word	0x200180d8

08020c14 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8020c14:	b580      	push	{r7, lr}
 8020c16:	b082      	sub	sp, #8
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
 8020c1c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8020c1e:	4b10      	ldr	r3, [pc, #64]	; (8020c60 <BSP_AUDIO_OUT_Play+0x4c>)
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	68db      	ldr	r3, [r3, #12]
 8020c24:	683a      	ldr	r2, [r7, #0]
 8020c26:	b292      	uxth	r2, r2
 8020c28:	6879      	ldr	r1, [r7, #4]
 8020c2a:	2034      	movs	r0, #52	; 0x34
 8020c2c:	4798      	blx	r3
 8020c2e:	4603      	mov	r3, r0
 8020c30:	2b00      	cmp	r3, #0
 8020c32:	d001      	beq.n	8020c38 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8020c34:	2301      	movs	r3, #1
 8020c36:	e00f      	b.n	8020c58 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */
    HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8020c38:	683b      	ldr	r3, [r7, #0]
 8020c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8020c3e:	d203      	bcs.n	8020c48 <BSP_AUDIO_OUT_Play+0x34>
 8020c40:	683b      	ldr	r3, [r7, #0]
 8020c42:	085b      	lsrs	r3, r3, #1
 8020c44:	b29b      	uxth	r3, r3
 8020c46:	e001      	b.n	8020c4c <BSP_AUDIO_OUT_Play+0x38>
 8020c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020c4c:	461a      	mov	r2, r3
 8020c4e:	6879      	ldr	r1, [r7, #4]
 8020c50:	4804      	ldr	r0, [pc, #16]	; (8020c64 <BSP_AUDIO_OUT_Play+0x50>)
 8020c52:	f7e7 fdaf 	bl	80087b4 <HAL_SAI_Transmit_DMA>

    return AUDIO_OK;
 8020c56:	2300      	movs	r3, #0
  }
}
 8020c58:	4618      	mov	r0, r3
 8020c5a:	3708      	adds	r7, #8
 8020c5c:	46bd      	mov	sp, r7
 8020c5e:	bd80      	pop	{r7, pc}
 8020c60:	200180d8 	.word	0x200180d8
 8020c64:	20017f08 	.word	0x20017f08

08020c68 <BSP_AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behaviour).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Pause(void)
{    
 8020c68:	b580      	push	{r7, lr}
 8020c6a:	af00      	add	r7, sp, #0
    //return AUDIO_ERROR;
  //}
  //else
  //{
    /* Call the Media layer pause function */
    HAL_SAI_DMAPause(&hsai_BlockA2);
 8020c6c:	4802      	ldr	r0, [pc, #8]	; (8020c78 <BSP_AUDIO_OUT_Pause+0x10>)
 8020c6e:	f7e7 fcdb 	bl	8008628 <HAL_SAI_DMAPause>
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8020c72:	2300      	movs	r3, #0
  //}
}
 8020c74:	4618      	mov	r0, r3
 8020c76:	bd80      	pop	{r7, pc}
 8020c78:	20017f08 	.word	0x20017f08

08020c7c <BSP_AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behaviour).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Resume(void)
{    
 8020c7c:	b580      	push	{r7, lr}
 8020c7e:	af00      	add	r7, sp, #0
   // return AUDIO_ERROR;
 // }
 // else
  //{
    /* Call the Media layer pause/resume function */
    HAL_SAI_DMAResume(&hsai_BlockA2);
 8020c80:	4802      	ldr	r0, [pc, #8]	; (8020c8c <BSP_AUDIO_OUT_Resume+0x10>)
 8020c82:	f7e7 fcf3 	bl	800866c <HAL_SAI_DMAResume>
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8020c86:	2300      	movs	r3, #0
  //}
}
 8020c88:	4618      	mov	r0, r3
 8020c8a:	bd80      	pop	{r7, pc}
 8020c8c:	20017f08 	.word	0x20017f08

08020c90 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8020c90:	b580      	push	{r7, lr}
 8020c92:	b082      	sub	sp, #8
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&hsai_BlockA2);
 8020c98:	480c      	ldr	r0, [pc, #48]	; (8020ccc <BSP_AUDIO_OUT_Stop+0x3c>)
 8020c9a:	f7e7 fd18 	bl	80086ce <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8020c9e:	4b0c      	ldr	r3, [pc, #48]	; (8020cd0 <BSP_AUDIO_OUT_Stop+0x40>)
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	699b      	ldr	r3, [r3, #24]
 8020ca4:	6879      	ldr	r1, [r7, #4]
 8020ca6:	2034      	movs	r0, #52	; 0x34
 8020ca8:	4798      	blx	r3
 8020caa:	4603      	mov	r3, r0
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d001      	beq.n	8020cb4 <BSP_AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8020cb0:	2301      	movs	r3, #1
 8020cb2:	e006      	b.n	8020cc2 <BSP_AUDIO_OUT_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	2b01      	cmp	r3, #1
 8020cb8:	d102      	bne.n	8020cc0 <BSP_AUDIO_OUT_Stop+0x30>
    { 
      /* Wait at least 100us */
      HAL_Delay(1);
 8020cba:	2001      	movs	r0, #1
 8020cbc:	f7e0 fae4 	bl	8001288 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8020cc0:	2300      	movs	r3, #0
  }
}
 8020cc2:	4618      	mov	r0, r3
 8020cc4:	3708      	adds	r7, #8
 8020cc6:	46bd      	mov	sp, r7
 8020cc8:	bd80      	pop	{r7, pc}
 8020cca:	bf00      	nop
 8020ccc:	20017f08 	.word	0x20017f08
 8020cd0:	200180d8 	.word	0x200180d8

08020cd4 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8020cd4:	b580      	push	{r7, lr}
 8020cd6:	b082      	sub	sp, #8
 8020cd8:	af00      	add	r7, sp, #0
 8020cda:	4603      	mov	r3, r0
 8020cdc:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8020cde:	4b08      	ldr	r3, [pc, #32]	; (8020d00 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	6a1b      	ldr	r3, [r3, #32]
 8020ce4:	79fa      	ldrb	r2, [r7, #7]
 8020ce6:	4611      	mov	r1, r2
 8020ce8:	2034      	movs	r0, #52	; 0x34
 8020cea:	4798      	blx	r3
 8020cec:	4603      	mov	r3, r0
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	d001      	beq.n	8020cf6 <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8020cf2:	2301      	movs	r3, #1
 8020cf4:	e000      	b.n	8020cf8 <BSP_AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8020cf6:	2300      	movs	r3, #0
  }
}
 8020cf8:	4618      	mov	r0, r3
 8020cfa:	3708      	adds	r7, #8
 8020cfc:	46bd      	mov	sp, r7
 8020cfe:	bd80      	pop	{r7, pc}
 8020d00:	200180d8 	.word	0x200180d8

08020d04 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8020d04:	b580      	push	{r7, lr}
 8020d06:	b082      	sub	sp, #8
 8020d08:	af00      	add	r7, sp, #0
 8020d0a:	6078      	str	r0, [r7, #4]
	if(BufferCtl.filetype == 0) {
 8020d0c:	4b1e      	ldr	r3, [pc, #120]	; (8020d88 <HAL_SAI_TxCpltCallback+0x84>)
 8020d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020d12:	7a1b      	ldrb	r3, [r3, #8]
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	d114      	bne.n	8020d42 <HAL_SAI_TxCpltCallback+0x3e>
		while(f_read(&MyFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE / 2],
 8020d18:	bf00      	nop
 8020d1a:	4b1c      	ldr	r3, [pc, #112]	; (8020d8c <HAL_SAI_TxCpltCallback+0x88>)
 8020d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020d20:	491b      	ldr	r1, [pc, #108]	; (8020d90 <HAL_SAI_TxCpltCallback+0x8c>)
 8020d22:	481c      	ldr	r0, [pc, #112]	; (8020d94 <HAL_SAI_TxCpltCallback+0x90>)
 8020d24:	f7ef ff36 	bl	8010b94 <f_read>
 8020d28:	4603      	mov	r3, r0
 8020d2a:	2b00      	cmp	r3, #0
 8020d2c:	d1f5      	bne.n	8020d1a <HAL_SAI_TxCpltCallback+0x16>
				AUDIO_OUT_BUFFER_SIZE / 2, (void *)&bytesread) != FR_OK);
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 8020d2e:	4b16      	ldr	r3, [pc, #88]	; (8020d88 <HAL_SAI_TxCpltCallback+0x84>)
 8020d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020d34:	685b      	ldr	r3, [r3, #4]
 8020d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020d3a:	4a13      	ldr	r2, [pc, #76]	; (8020d88 <HAL_SAI_TxCpltCallback+0x84>)
 8020d3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8020d40:	6053      	str	r3, [r2, #4]
	}
	if(BufferCtl.filetype == 1) {
 8020d42:	4b11      	ldr	r3, [pc, #68]	; (8020d88 <HAL_SAI_TxCpltCallback+0x84>)
 8020d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020d48:	7a1b      	ldrb	r3, [r3, #8]
 8020d4a:	2b01      	cmp	r3, #1
 8020d4c:	d105      	bne.n	8020d5a <HAL_SAI_TxCpltCallback+0x56>
		// set up last half mode
        unDmaBufMode = 2;
 8020d4e:	4b12      	ldr	r3, [pc, #72]	; (8020d98 <HAL_SAI_TxCpltCallback+0x94>)
 8020d50:	2202      	movs	r2, #2
 8020d52:	601a      	str	r2, [r3, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2);
 8020d54:	4a11      	ldr	r2, [pc, #68]	; (8020d9c <HAL_SAI_TxCpltCallback+0x98>)
 8020d56:	4b12      	ldr	r3, [pc, #72]	; (8020da0 <HAL_SAI_TxCpltCallback+0x9c>)
 8020d58:	601a      	str	r2, [r3, #0]
	}
	GetTrackTime();
 8020d5a:	f003 fa13 	bl	8024184 <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 8020d5e:	4b0d      	ldr	r3, [pc, #52]	; (8020d94 <HAL_SAI_TxCpltCallback+0x90>)
 8020d60:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8020d64:	4b0b      	ldr	r3, [pc, #44]	; (8020d94 <HAL_SAI_TxCpltCallback+0x90>)
 8020d66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020d6a:	4299      	cmp	r1, r3
 8020d6c:	bf08      	it	eq
 8020d6e:	4290      	cmpeq	r0, r2
 8020d70:	d105      	bne.n	8020d7e <HAL_SAI_TxCpltCallback+0x7a>
		bOutOfData = 1;
 8020d72:	4b0c      	ldr	r3, [pc, #48]	; (8020da4 <HAL_SAI_TxCpltCallback+0xa0>)
 8020d74:	2201      	movs	r2, #1
 8020d76:	601a      	str	r2, [r3, #0]
		unDmaBufMode = 3;
 8020d78:	4b07      	ldr	r3, [pc, #28]	; (8020d98 <HAL_SAI_TxCpltCallback+0x94>)
 8020d7a:	2203      	movs	r2, #3
 8020d7c:	601a      	str	r2, [r3, #0]
	}
}
 8020d7e:	bf00      	nop
 8020d80:	3708      	adds	r7, #8
 8020d82:	46bd      	mov	sp, r7
 8020d84:	bd80      	pop	{r7, pc}
 8020d86:	bf00      	nop
 8020d88:	2000e71c 	.word	0x2000e71c
 8020d8c:	20001df8 	.word	0x20001df8
 8020d90:	2000ef1c 	.word	0x2000ef1c
 8020d94:	20000f10 	.word	0x20000f10
 8020d98:	2000f72c 	.word	0x2000f72c
 8020d9c:	20012d54 	.word	0x20012d54
 8020da0:	20015154 	.word	0x20015154
 8020da4:	2000f728 	.word	0x2000f728

08020da8 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8020da8:	b580      	push	{r7, lr}
 8020daa:	b082      	sub	sp, #8
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	6078      	str	r0, [r7, #4]
	if(BufferCtl.filetype == 0) {
 8020db0:	4b1e      	ldr	r3, [pc, #120]	; (8020e2c <HAL_SAI_TxHalfCpltCallback+0x84>)
 8020db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020db6:	7a1b      	ldrb	r3, [r3, #8]
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d114      	bne.n	8020de6 <HAL_SAI_TxHalfCpltCallback+0x3e>
		while(f_read(&MyFile, &BufferCtl.buff[0],
 8020dbc:	bf00      	nop
 8020dbe:	4b1c      	ldr	r3, [pc, #112]	; (8020e30 <HAL_SAI_TxHalfCpltCallback+0x88>)
 8020dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020dc4:	4919      	ldr	r1, [pc, #100]	; (8020e2c <HAL_SAI_TxHalfCpltCallback+0x84>)
 8020dc6:	481b      	ldr	r0, [pc, #108]	; (8020e34 <HAL_SAI_TxHalfCpltCallback+0x8c>)
 8020dc8:	f7ef fee4 	bl	8010b94 <f_read>
 8020dcc:	4603      	mov	r3, r0
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	d1f5      	bne.n	8020dbe <HAL_SAI_TxHalfCpltCallback+0x16>
				AUDIO_OUT_BUFFER_SIZE / 2, (void *)&bytesread) != FR_OK);
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 8020dd2:	4b16      	ldr	r3, [pc, #88]	; (8020e2c <HAL_SAI_TxHalfCpltCallback+0x84>)
 8020dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020dd8:	685b      	ldr	r3, [r3, #4]
 8020dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020dde:	4a13      	ldr	r2, [pc, #76]	; (8020e2c <HAL_SAI_TxHalfCpltCallback+0x84>)
 8020de0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8020de4:	6053      	str	r3, [r2, #4]
	}
	if(BufferCtl.filetype == 1) {
 8020de6:	4b11      	ldr	r3, [pc, #68]	; (8020e2c <HAL_SAI_TxHalfCpltCallback+0x84>)
 8020de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020dec:	7a1b      	ldrb	r3, [r3, #8]
 8020dee:	2b01      	cmp	r3, #1
 8020df0:	d105      	bne.n	8020dfe <HAL_SAI_TxHalfCpltCallback+0x56>
		// set up first half mode
        unDmaBufMode = 1;
 8020df2:	4b11      	ldr	r3, [pc, #68]	; (8020e38 <HAL_SAI_TxHalfCpltCallback+0x90>)
 8020df4:	2201      	movs	r2, #1
 8020df6:	601a      	str	r2, [r3, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 8020df8:	4b10      	ldr	r3, [pc, #64]	; (8020e3c <HAL_SAI_TxHalfCpltCallback+0x94>)
 8020dfa:	4a11      	ldr	r2, [pc, #68]	; (8020e40 <HAL_SAI_TxHalfCpltCallback+0x98>)
 8020dfc:	601a      	str	r2, [r3, #0]
	}
	GetTrackTime();
 8020dfe:	f003 f9c1 	bl	8024184 <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 8020e02:	4b0c      	ldr	r3, [pc, #48]	; (8020e34 <HAL_SAI_TxHalfCpltCallback+0x8c>)
 8020e04:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8020e08:	4b0a      	ldr	r3, [pc, #40]	; (8020e34 <HAL_SAI_TxHalfCpltCallback+0x8c>)
 8020e0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020e0e:	4299      	cmp	r1, r3
 8020e10:	bf08      	it	eq
 8020e12:	4290      	cmpeq	r0, r2
 8020e14:	d105      	bne.n	8020e22 <HAL_SAI_TxHalfCpltCallback+0x7a>
		bOutOfData = 1;
 8020e16:	4b0b      	ldr	r3, [pc, #44]	; (8020e44 <HAL_SAI_TxHalfCpltCallback+0x9c>)
 8020e18:	2201      	movs	r2, #1
 8020e1a:	601a      	str	r2, [r3, #0]
		unDmaBufMode = 3;
 8020e1c:	4b06      	ldr	r3, [pc, #24]	; (8020e38 <HAL_SAI_TxHalfCpltCallback+0x90>)
 8020e1e:	2203      	movs	r2, #3
 8020e20:	601a      	str	r2, [r3, #0]
	}
}
 8020e22:	bf00      	nop
 8020e24:	3708      	adds	r7, #8
 8020e26:	46bd      	mov	sp, r7
 8020e28:	bd80      	pop	{r7, pc}
 8020e2a:	bf00      	nop
 8020e2c:	2000e71c 	.word	0x2000e71c
 8020e30:	20001df8 	.word	0x20001df8
 8020e34:	20000f10 	.word	0x20000f10
 8020e38:	2000f72c 	.word	0x2000f72c
 8020e3c:	20015154 	.word	0x20015154
 8020e40:	20010954 	.word	0x20010954
 8020e44:	2000f728 	.word	0x2000f728

08020e48 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8020e48:	b580      	push	{r7, lr}
 8020e4a:	b084      	sub	sp, #16
 8020e4c:	af00      	add	r7, sp, #0
 8020e4e:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&hsai_BlockA2);
 8020e50:	480e      	ldr	r0, [pc, #56]	; (8020e8c <HAL_SAI_ErrorCallback+0x44>)
 8020e52:	f7e7 fd3d 	bl	80088d0 <HAL_SAI_GetState>
 8020e56:	4603      	mov	r3, r0
 8020e58:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8020e5a:	480d      	ldr	r0, [pc, #52]	; (8020e90 <HAL_SAI_ErrorCallback+0x48>)
 8020e5c:	f7e7 fd38 	bl	80088d0 <HAL_SAI_GetState>
 8020e60:	4603      	mov	r3, r0
 8020e62:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8020e64:	7bfb      	ldrb	r3, [r7, #15]
 8020e66:	2b02      	cmp	r3, #2
 8020e68:	d002      	beq.n	8020e70 <HAL_SAI_ErrorCallback+0x28>
 8020e6a:	7bfb      	ldrb	r3, [r7, #15]
 8020e6c:	2b12      	cmp	r3, #18
 8020e6e:	d101      	bne.n	8020e74 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8020e70:	f000 f810 	bl	8020e94 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8020e74:	7bbb      	ldrb	r3, [r7, #14]
 8020e76:	2b02      	cmp	r3, #2
 8020e78:	d002      	beq.n	8020e80 <HAL_SAI_ErrorCallback+0x38>
 8020e7a:	7bbb      	ldrb	r3, [r7, #14]
 8020e7c:	2b22      	cmp	r3, #34	; 0x22
 8020e7e:	d101      	bne.n	8020e84 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8020e80:	f000 f8e0 	bl	8021044 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8020e84:	bf00      	nop
 8020e86:	3710      	adds	r7, #16
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	bd80      	pop	{r7, pc}
 8020e8c:	20017f08 	.word	0x20017f08
 8020e90:	200180dc 	.word	0x200180dc

08020e94 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8020e94:	b480      	push	{r7}
 8020e96:	af00      	add	r7, sp, #0
}
 8020e98:	bf00      	nop
 8020e9a:	46bd      	mov	sp, r7
 8020e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ea0:	4770      	bx	lr
	...

08020ea4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8020ea4:	b580      	push	{r7, lr}
 8020ea6:	b0aa      	sub	sp, #168	; 0xa8
 8020ea8:	af00      	add	r7, sp, #0
 8020eaa:	60f8      	str	r0, [r7, #12]
 8020eac:	60b9      	str	r1, [r7, #8]
 8020eae:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8020eb0:	f107 0314 	add.w	r3, r7, #20
 8020eb4:	4618      	mov	r0, r3
 8020eb6:	f7e6 fe21 	bl	8007afc <HAL_RCCEx_GetPeriphCLKConfig>
  
  uint32_t I2SDivQ = 33;
 8020eba:	2321      	movs	r3, #33	; 0x21
 8020ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t I2SN = 49;
 8020ec0:	2331      	movs	r3, #49	; 0x31
 8020ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t new_frequency_Hz = (203000000 / 9 * (float)AudioFreq /
 8020ec6:	68bb      	ldr	r3, [r7, #8]
 8020ec8:	ee07 3a90 	vmov	s15, r3
 8020ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020ed0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8020f8c <BSP_AUDIO_OUT_ClockConfig+0xe8>
 8020ed4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020ed8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8020f90 <BSP_AUDIO_OUT_ClockConfig+0xec>
 8020edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020ee4:	ee17 3a90 	vmov	r3, s15
 8020ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		(float) AUDIO_FREQUENCY_22K);
  uint32_t set_frequency_Hz = 0;
 8020eec:	2300      	movs	r3, #0
 8020eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 8020ef2:	2320      	movs	r3, #32
 8020ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8020ef8:	e02b      	b.n	8020f52 <BSP_AUDIO_OUT_ClockConfig+0xae>
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 8020efa:	2332      	movs	r3, #50	; 0x32
 8020efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8020f00:	e015      	b.n	8020f2e <BSP_AUDIO_OUT_ClockConfig+0x8a>
		  set_frequency_Hz = I2SN * 1000000 / I2SDivQ;
 8020f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020f06:	4a23      	ldr	r2, [pc, #140]	; (8020f94 <BSP_AUDIO_OUT_ClockConfig+0xf0>)
 8020f08:	fb03 f202 	mul.w	r2, r3, r2
 8020f0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8020f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8020f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		  if(set_frequency_Hz >= new_frequency_Hz) break;
 8020f18:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8020f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020f20:	429a      	cmp	r2, r3
 8020f22:	d20a      	bcs.n	8020f3a <BSP_AUDIO_OUT_ClockConfig+0x96>
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 8020f24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020f28:	3301      	adds	r3, #1
 8020f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8020f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020f32:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8020f36:	d3e4      	bcc.n	8020f02 <BSP_AUDIO_OUT_ClockConfig+0x5e>
 8020f38:	e000      	b.n	8020f3c <BSP_AUDIO_OUT_ClockConfig+0x98>
		  if(set_frequency_Hz >= new_frequency_Hz) break;
 8020f3a:	bf00      	nop
	  }
	  if(set_frequency_Hz >= new_frequency_Hz) break;
 8020f3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8020f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020f44:	429a      	cmp	r2, r3
 8020f46:	d209      	bcs.n	8020f5c <BSP_AUDIO_OUT_ClockConfig+0xb8>
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 8020f48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8020f4c:	3b01      	subs	r3, #1
 8020f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8020f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8020f56:	2b01      	cmp	r3, #1
 8020f58:	d8cf      	bhi.n	8020efa <BSP_AUDIO_OUT_ClockConfig+0x56>
 8020f5a:	e000      	b.n	8020f5e <BSP_AUDIO_OUT_ClockConfig+0xba>
	  if(set_frequency_Hz >= new_frequency_Hz) break;
 8020f5c:	bf00      	nop
  }
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8020f5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8020f62:	617b      	str	r3, [r7, #20]
  rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8020f64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020f68:	657b      	str	r3, [r7, #84]	; 0x54

  rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = I2SN;
 8020f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020f6e:	61bb      	str	r3, [r7, #24]
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8020f70:	2302      	movs	r3, #2
 8020f72:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLLI2SDivQ = I2SDivQ;
 8020f74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8020f78:	63bb      	str	r3, [r7, #56]	; 0x38
    
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8020f7a:	f107 0314 	add.w	r3, r7, #20
 8020f7e:	4618      	mov	r0, r3
 8020f80:	f7e5 fdd8 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
}
 8020f84:	bf00      	nop
 8020f86:	37a8      	adds	r7, #168	; 0xa8
 8020f88:	46bd      	mov	sp, r7
 8020f8a:	bd80      	pop	{r7, pc}
 8020f8c:	4bac15d2 	.word	0x4bac15d2
 8020f90:	46ac4400 	.word	0x46ac4400
 8020f94:	000f4240 	.word	0x000f4240

08020f98 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8020f98:	b580      	push	{r7, lr}
 8020f9a:	b082      	sub	sp, #8
 8020f9c:	af00      	add	r7, sp, #0
 8020f9e:	6078      	str	r0, [r7, #4]
  /* Initialize the hsai_BlockA2 Instance parameter */
  hsai_BlockA2.Instance = AUDIO_OUT_SAIx;
 8020fa0:	4b26      	ldr	r3, [pc, #152]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fa2:	4a27      	ldr	r2, [pc, #156]	; (8021040 <SAIx_Out_Init+0xa8>)
 8020fa4:	601a      	str	r2, [r3, #0]
  //__HAL_SAI_DISABLE(&hsai_BlockA2);
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  hsai_BlockA2.Init.AudioFrequency = AudioFreq;
 8020fa6:	4a25      	ldr	r2, [pc, #148]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fa8:	687b      	ldr	r3, [r7, #4]
 8020faa:	61d3      	str	r3, [r2, #28]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8020fac:	4b23      	ldr	r3, [pc, #140]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fae:	2200      	movs	r2, #0
 8020fb0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8020fb2:	4b22      	ldr	r3, [pc, #136]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fb4:	2200      	movs	r2, #0
 8020fb6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8020fb8:	4b20      	ldr	r3, [pc, #128]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fba:	2200      	movs	r2, #0
 8020fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8020fbe:	4b1f      	ldr	r3, [pc, #124]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fc0:	2280      	movs	r2, #128	; 0x80
 8020fc2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8020fc4:	4b1d      	ldr	r3, [pc, #116]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fc6:	2200      	movs	r2, #0
 8020fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8020fca:	4b1c      	ldr	r3, [pc, #112]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fcc:	2201      	movs	r2, #1
 8020fce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8020fd0:	4b1a      	ldr	r3, [pc, #104]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fd2:	2200      	movs	r2, #0
 8020fd4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8020fd6:	4b19      	ldr	r3, [pc, #100]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020fdc:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8020fde:	4b17      	ldr	r3, [pc, #92]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fe0:	2201      	movs	r2, #1
 8020fe2:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  hsai_BlockA2.FrameInit.FrameLength = 64;
 8020fe4:	4b15      	ldr	r3, [pc, #84]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fe6:	2240      	movs	r2, #64	; 0x40
 8020fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8020fea:	4b14      	ldr	r3, [pc, #80]	; (802103c <SAIx_Out_Init+0xa4>)
 8020fec:	2220      	movs	r2, #32
 8020fee:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8020ff0:	4b12      	ldr	r3, [pc, #72]	; (802103c <SAIx_Out_Init+0xa4>)
 8020ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8020ff6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8020ff8:	4b10      	ldr	r3, [pc, #64]	; (802103c <SAIx_Out_Init+0xa4>)
 8020ffa:	2200      	movs	r2, #0
 8020ffc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8020ffe:	4b0f      	ldr	r3, [pc, #60]	; (802103c <SAIx_Out_Init+0xa4>)
 8021000:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8021004:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8021006:	4b0d      	ldr	r3, [pc, #52]	; (802103c <SAIx_Out_Init+0xa4>)
 8021008:	2200      	movs	r2, #0
 802100a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 802100c:	4b0b      	ldr	r3, [pc, #44]	; (802103c <SAIx_Out_Init+0xa4>)
 802100e:	2200      	movs	r2, #0
 8021010:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 8021012:	4b0a      	ldr	r3, [pc, #40]	; (802103c <SAIx_Out_Init+0xa4>)
 8021014:	2204      	movs	r2, #4
 8021016:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8021018:	4b08      	ldr	r3, [pc, #32]	; (802103c <SAIx_Out_Init+0xa4>)
 802101a:	220f      	movs	r2, #15
 802101c:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&hsai_BlockA2);
 802101e:	4807      	ldr	r0, [pc, #28]	; (802103c <SAIx_Out_Init+0xa4>)
 8021020:	f7e6 ffbc 	bl	8007f9c <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 8021024:	4b05      	ldr	r3, [pc, #20]	; (802103c <SAIx_Out_Init+0xa4>)
 8021026:	681b      	ldr	r3, [r3, #0]
 8021028:	681a      	ldr	r2, [r3, #0]
 802102a:	4b04      	ldr	r3, [pc, #16]	; (802103c <SAIx_Out_Init+0xa4>)
 802102c:	681b      	ldr	r3, [r3, #0]
 802102e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8021032:	601a      	str	r2, [r3, #0]
}
 8021034:	bf00      	nop
 8021036:	3708      	adds	r7, #8
 8021038:	46bd      	mov	sp, r7
 802103a:	bd80      	pop	{r7, pc}
 802103c:	20017f08 	.word	0x20017f08
 8021040:	40015c04 	.word	0x40015c04

08021044 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8021044:	b480      	push	{r7}
 8021046:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8021048:	bf00      	nop
 802104a:	46bd      	mov	sp, r7
 802104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021050:	4770      	bx	lr
	...

08021054 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8021054:	b580      	push	{r7, lr}
 8021056:	af00      	add	r7, sp, #0
	HAL_I2C_Init(&hi2c3);
 8021058:	4802      	ldr	r0, [pc, #8]	; (8021064 <AUDIO_IO_Init+0x10>)
 802105a:	f7e3 fc41 	bl	80048e0 <HAL_I2C_Init>
}
 802105e:	bf00      	nop
 8021060:	bd80      	pop	{r7, pc}
 8021062:	bf00      	nop
 8021064:	200009b0 	.word	0x200009b0

08021068 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8021068:	b480      	push	{r7}
 802106a:	af00      	add	r7, sp, #0
}
 802106c:	bf00      	nop
 802106e:	46bd      	mov	sp, r7
 8021070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021074:	4770      	bx	lr
	...

08021078 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8021078:	b580      	push	{r7, lr}
 802107a:	b088      	sub	sp, #32
 802107c:	af04      	add	r7, sp, #16
 802107e:	4603      	mov	r3, r0
 8021080:	71fb      	strb	r3, [r7, #7]
 8021082:	460b      	mov	r3, r1
 8021084:	80bb      	strh	r3, [r7, #4]
 8021086:	4613      	mov	r3, r2
 8021088:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 802108a:	887b      	ldrh	r3, [r7, #2]
 802108c:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 802108e:	89fb      	ldrh	r3, [r7, #14]
 8021090:	0a1b      	lsrs	r3, r3, #8
 8021092:	b29b      	uxth	r3, r3
 8021094:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8021096:	89fb      	ldrh	r3, [r7, #14]
 8021098:	021b      	lsls	r3, r3, #8
 802109a:	b29b      	uxth	r3, r3
 802109c:	b21a      	sxth	r2, r3
 802109e:	887b      	ldrh	r3, [r7, #2]
 80210a0:	b21b      	sxth	r3, r3
 80210a2:	4313      	orrs	r3, r2
 80210a4:	b21b      	sxth	r3, r3
 80210a6:	b29b      	uxth	r3, r3
 80210a8:	807b      	strh	r3, [r7, #2]

  HAL_I2C_Mem_Write(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2, 1000);
 80210aa:	79fb      	ldrb	r3, [r7, #7]
 80210ac:	b299      	uxth	r1, r3
 80210ae:	88ba      	ldrh	r2, [r7, #4]
 80210b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80210b4:	9302      	str	r3, [sp, #8]
 80210b6:	2302      	movs	r3, #2
 80210b8:	9301      	str	r3, [sp, #4]
 80210ba:	1cbb      	adds	r3, r7, #2
 80210bc:	9300      	str	r3, [sp, #0]
 80210be:	2302      	movs	r3, #2
 80210c0:	4803      	ldr	r0, [pc, #12]	; (80210d0 <AUDIO_IO_Write+0x58>)
 80210c2:	f7e3 fd2f 	bl	8004b24 <HAL_I2C_Mem_Write>
}
 80210c6:	bf00      	nop
 80210c8:	3710      	adds	r7, #16
 80210ca:	46bd      	mov	sp, r7
 80210cc:	bd80      	pop	{r7, pc}
 80210ce:	bf00      	nop
 80210d0:	200009b0 	.word	0x200009b0

080210d4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80210d4:	b580      	push	{r7, lr}
 80210d6:	b088      	sub	sp, #32
 80210d8:	af04      	add	r7, sp, #16
 80210da:	4603      	mov	r3, r0
 80210dc:	460a      	mov	r2, r1
 80210de:	71fb      	strb	r3, [r7, #7]
 80210e0:	4613      	mov	r3, r2
 80210e2:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80210e4:	2300      	movs	r3, #0
 80210e6:	81bb      	strh	r3, [r7, #12]
 80210e8:	2300      	movs	r3, #0
 80210ea:	81fb      	strh	r3, [r7, #14]

  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2, 1000);
 80210ec:	79fb      	ldrb	r3, [r7, #7]
 80210ee:	b299      	uxth	r1, r3
 80210f0:	88ba      	ldrh	r2, [r7, #4]
 80210f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80210f6:	9302      	str	r3, [sp, #8]
 80210f8:	2302      	movs	r3, #2
 80210fa:	9301      	str	r3, [sp, #4]
 80210fc:	f107 030c 	add.w	r3, r7, #12
 8021100:	9300      	str	r3, [sp, #0]
 8021102:	2302      	movs	r3, #2
 8021104:	480a      	ldr	r0, [pc, #40]	; (8021130 <AUDIO_IO_Read+0x5c>)
 8021106:	f7e3 fe2f 	bl	8004d68 <HAL_I2C_Mem_Read>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 802110a:	89bb      	ldrh	r3, [r7, #12]
 802110c:	0a1b      	lsrs	r3, r3, #8
 802110e:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8021110:	89bb      	ldrh	r3, [r7, #12]
 8021112:	021b      	lsls	r3, r3, #8
 8021114:	b29b      	uxth	r3, r3
 8021116:	b21a      	sxth	r2, r3
 8021118:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802111c:	4313      	orrs	r3, r2
 802111e:	b21b      	sxth	r3, r3
 8021120:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 8021122:	89fb      	ldrh	r3, [r7, #14]
 8021124:	81bb      	strh	r3, [r7, #12]

  return read_value;
 8021126:	89bb      	ldrh	r3, [r7, #12]
}
 8021128:	4618      	mov	r0, r3
 802112a:	3710      	adds	r7, #16
 802112c:	46bd      	mov	sp, r7
 802112e:	bd80      	pop	{r7, pc}
 8021130:	200009b0 	.word	0x200009b0

08021134 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8021134:	b580      	push	{r7, lr}
 8021136:	b082      	sub	sp, #8
 8021138:	af00      	add	r7, sp, #0
 802113a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802113c:	6878      	ldr	r0, [r7, #4]
 802113e:	f7e0 f8a3 	bl	8001288 <HAL_Delay>
}
 8021142:	bf00      	nop
 8021144:	3708      	adds	r7, #8
 8021146:	46bd      	mov	sp, r7
 8021148:	bd80      	pop	{r7, pc}
	...

0802114c <Mp3FillReadBuffer>:

UINT Mp3FillReadBuffer(BYTE* pInData, UINT unInDataLeft, FIL* pInFile)
{
 802114c:	b580      	push	{r7, lr}
 802114e:	b088      	sub	sp, #32
 8021150:	af00      	add	r7, sp, #0
 8021152:	60f8      	str	r0, [r7, #12]
 8021154:	60b9      	str	r1, [r7, #8]
 8021156:	607a      	str	r2, [r7, #4]
	// move last, small chunk from end of buffer to start, then fill with new data
	memmove(BufferCtl.buff, pInData, unInDataLeft);
 8021158:	68ba      	ldr	r2, [r7, #8]
 802115a:	68f9      	ldr	r1, [r7, #12]
 802115c:	4816      	ldr	r0, [pc, #88]	; (80211b8 <Mp3FillReadBuffer+0x6c>)
 802115e:	f004 fef1 	bl	8025f44 <memmove>

	UINT unSpaceLeft = MP3_INBUF_SIZE - unInDataLeft;
 8021162:	68bb      	ldr	r3, [r7, #8]
 8021164:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8021168:	61fb      	str	r3, [r7, #28]
	UINT unRead = 0;
 802116a:	2300      	movs	r3, #0
 802116c:	617b      	str	r3, [r7, #20]
	FRESULT fr = f_read(pInFile, BufferCtl.buff + unInDataLeft, unSpaceLeft, &unRead);
 802116e:	68bb      	ldr	r3, [r7, #8]
 8021170:	4a11      	ldr	r2, [pc, #68]	; (80211b8 <Mp3FillReadBuffer+0x6c>)
 8021172:	1899      	adds	r1, r3, r2
 8021174:	f107 0314 	add.w	r3, r7, #20
 8021178:	69fa      	ldr	r2, [r7, #28]
 802117a:	6878      	ldr	r0, [r7, #4]
 802117c:	f7ef fd0a 	bl	8010b94 <f_read>
 8021180:	4603      	mov	r3, r0
 8021182:	76fb      	strb	r3, [r7, #27]
	if(fr != FR_OK)
 8021184:	7efb      	ldrb	r3, [r7, #27]
 8021186:	2b00      	cmp	r3, #0
 8021188:	d001      	beq.n	802118e <Mp3FillReadBuffer+0x42>
	{
		unRead = 0;
 802118a:	2300      	movs	r3, #0
 802118c:	617b      	str	r3, [r7, #20]
	}
	if(unRead < unSpaceLeft)
 802118e:	697b      	ldr	r3, [r7, #20]
 8021190:	69fa      	ldr	r2, [r7, #28]
 8021192:	429a      	cmp	r2, r3
 8021194:	d90b      	bls.n	80211ae <Mp3FillReadBuffer+0x62>
	{
	    // zero-pad to avoid finding false sync word after last frame (from old data in readBuf)
	    memset(BufferCtl.buff + unInDataLeft + unRead, 0, unSpaceLeft - unRead);
 8021196:	697a      	ldr	r2, [r7, #20]
 8021198:	68bb      	ldr	r3, [r7, #8]
 802119a:	4413      	add	r3, r2
 802119c:	4a06      	ldr	r2, [pc, #24]	; (80211b8 <Mp3FillReadBuffer+0x6c>)
 802119e:	1898      	adds	r0, r3, r2
 80211a0:	697b      	ldr	r3, [r7, #20]
 80211a2:	69fa      	ldr	r2, [r7, #28]
 80211a4:	1ad3      	subs	r3, r2, r3
 80211a6:	461a      	mov	r2, r3
 80211a8:	2100      	movs	r1, #0
 80211aa:	f004 fee5 	bl	8025f78 <memset>
	}
	return unRead;
 80211ae:	697b      	ldr	r3, [r7, #20]
}
 80211b0:	4618      	mov	r0, r3
 80211b2:	3720      	adds	r7, #32
 80211b4:	46bd      	mov	sp, r7
 80211b6:	bd80      	pop	{r7, pc}
 80211b8:	2000e71c 	.word	0x2000e71c

080211bc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80211bc:	b580      	push	{r7, lr}
 80211be:	b084      	sub	sp, #16
 80211c0:	af00      	add	r7, sp, #0
 80211c2:	4603      	mov	r3, r0
 80211c4:	460a      	mov	r2, r1
 80211c6:	80fb      	strh	r3, [r7, #6]
 80211c8:	4613      	mov	r3, r2
 80211ca:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80211cc:	2300      	movs	r3, #0
 80211ce:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80211d0:	4a14      	ldr	r2, [pc, #80]	; (8021224 <BSP_TS_Init+0x68>)
 80211d2:	88fb      	ldrh	r3, [r7, #6]
 80211d4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80211d6:	4a14      	ldr	r2, [pc, #80]	; (8021228 <BSP_TS_Init+0x6c>)
 80211d8:	88bb      	ldrh	r3, [r7, #4]
 80211da:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80211dc:	4b13      	ldr	r3, [pc, #76]	; (802122c <BSP_TS_Init+0x70>)
 80211de:	681b      	ldr	r3, [r3, #0]
 80211e0:	2070      	movs	r0, #112	; 0x70
 80211e2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80211e4:	4b11      	ldr	r3, [pc, #68]	; (802122c <BSP_TS_Init+0x70>)
 80211e6:	685b      	ldr	r3, [r3, #4]
 80211e8:	2070      	movs	r0, #112	; 0x70
 80211ea:	4798      	blx	r3
 80211ec:	4603      	mov	r3, r0
 80211ee:	2b51      	cmp	r3, #81	; 0x51
 80211f0:	d111      	bne.n	8021216 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80211f2:	4b0f      	ldr	r3, [pc, #60]	; (8021230 <BSP_TS_Init+0x74>)
 80211f4:	4a0d      	ldr	r2, [pc, #52]	; (802122c <BSP_TS_Init+0x70>)
 80211f6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80211f8:	4b0e      	ldr	r3, [pc, #56]	; (8021234 <BSP_TS_Init+0x78>)
 80211fa:	2270      	movs	r2, #112	; 0x70
 80211fc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80211fe:	4b0e      	ldr	r3, [pc, #56]	; (8021238 <BSP_TS_Init+0x7c>)
 8021200:	2208      	movs	r2, #8
 8021202:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8021204:	4b0a      	ldr	r3, [pc, #40]	; (8021230 <BSP_TS_Init+0x74>)
 8021206:	681b      	ldr	r3, [r3, #0]
 8021208:	68db      	ldr	r3, [r3, #12]
 802120a:	4a0a      	ldr	r2, [pc, #40]	; (8021234 <BSP_TS_Init+0x78>)
 802120c:	7812      	ldrb	r2, [r2, #0]
 802120e:	b292      	uxth	r2, r2
 8021210:	4610      	mov	r0, r2
 8021212:	4798      	blx	r3
 8021214:	e001      	b.n	802121a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8021216:	2303      	movs	r3, #3
 8021218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802121a:	7bfb      	ldrb	r3, [r7, #15]
}
 802121c:	4618      	mov	r0, r3
 802121e:	3710      	adds	r7, #16
 8021220:	46bd      	mov	sp, r7
 8021222:	bd80      	pop	{r7, pc}
 8021224:	20018164 	.word	0x20018164
 8021228:	20018166 	.word	0x20018166
 802122c:	2000002c 	.word	0x2000002c
 8021230:	20018160 	.word	0x20018160
 8021234:	20018169 	.word	0x20018169
 8021238:	20018168 	.word	0x20018168

0802123c <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 802123c:	b580      	push	{r7, lr}
 802123e:	b086      	sub	sp, #24
 8021240:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_init_structure;

	/* Configure Interrupt mode for SD detection pin */
	gpio_init_structure.Pin = TS_INT_PIN;
 8021242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021246:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8021248:	2300      	movs	r3, #0
 802124a:	60fb      	str	r3, [r7, #12]
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 802124c:	2302      	movs	r3, #2
 802124e:	613b      	str	r3, [r7, #16]
	gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8021250:	4b0c      	ldr	r3, [pc, #48]	; (8021284 <BSP_TS_ITConfig+0x48>)
 8021252:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8021254:	1d3b      	adds	r3, r7, #4
 8021256:	4619      	mov	r1, r3
 8021258:	480b      	ldr	r0, [pc, #44]	; (8021288 <BSP_TS_ITConfig+0x4c>)
 802125a:	f7e1 faef 	bl	800283c <HAL_GPIO_Init>

	/* Enable and set Touch screen EXTI Interrupt to the lowest priority */
	HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 802125e:	2200      	movs	r2, #0
 8021260:	210f      	movs	r1, #15
 8021262:	2028      	movs	r0, #40	; 0x28
 8021264:	f7e0 f948 	bl	80014f8 <HAL_NVIC_SetPriority>
	/* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8021268:	4b08      	ldr	r3, [pc, #32]	; (802128c <BSP_TS_ITConfig+0x50>)
 802126a:	681b      	ldr	r3, [r3, #0]
 802126c:	699b      	ldr	r3, [r3, #24]
 802126e:	4a08      	ldr	r2, [pc, #32]	; (8021290 <BSP_TS_ITConfig+0x54>)
 8021270:	7812      	ldrb	r2, [r2, #0]
 8021272:	b292      	uxth	r2, r2
 8021274:	4610      	mov	r0, r2
 8021276:	4798      	blx	r3

  return TS_OK;  
 8021278:	2300      	movs	r3, #0
}
 802127a:	4618      	mov	r0, r3
 802127c:	3718      	adds	r7, #24
 802127e:	46bd      	mov	sp, r7
 8021280:	bd80      	pop	{r7, pc}
 8021282:	bf00      	nop
 8021284:	10110000 	.word	0x10110000
 8021288:	40022000 	.word	0x40022000
 802128c:	20018160 	.word	0x20018160
 8021290:	20018169 	.word	0x20018169

08021294 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8021294:	b590      	push	{r4, r7, lr}
 8021296:	b097      	sub	sp, #92	; 0x5c
 8021298:	af02      	add	r7, sp, #8
 802129a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 802129c:	2300      	movs	r3, #0
 802129e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80212a2:	2300      	movs	r3, #0
 80212a4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80212a6:	2300      	movs	r3, #0
 80212a8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80212aa:	2300      	movs	r3, #0
 80212ac:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80212ae:	4bb4      	ldr	r3, [pc, #720]	; (8021580 <BSP_TS_GetState+0x2ec>)
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	691b      	ldr	r3, [r3, #16]
 80212b4:	4ab3      	ldr	r2, [pc, #716]	; (8021584 <BSP_TS_GetState+0x2f0>)
 80212b6:	7812      	ldrb	r2, [r2, #0]
 80212b8:	b292      	uxth	r2, r2
 80212ba:	4610      	mov	r0, r2
 80212bc:	4798      	blx	r3
 80212be:	4603      	mov	r3, r0
 80212c0:	461a      	mov	r2, r3
 80212c2:	687b      	ldr	r3, [r7, #4]
 80212c4:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	781b      	ldrb	r3, [r3, #0]
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	f000 8196 	beq.w	80215fc <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80212d0:	2300      	movs	r3, #0
 80212d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80212d4:	e185      	b.n	80215e2 <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80212d6:	4baa      	ldr	r3, [pc, #680]	; (8021580 <BSP_TS_GetState+0x2ec>)
 80212d8:	681b      	ldr	r3, [r3, #0]
 80212da:	695b      	ldr	r3, [r3, #20]
 80212dc:	4aa9      	ldr	r2, [pc, #676]	; (8021584 <BSP_TS_GetState+0x2f0>)
 80212de:	7812      	ldrb	r2, [r2, #0]
 80212e0:	b290      	uxth	r0, r2
 80212e2:	f107 0120 	add.w	r1, r7, #32
 80212e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80212e8:	0052      	lsls	r2, r2, #1
 80212ea:	188c      	adds	r4, r1, r2
 80212ec:	f107 0114 	add.w	r1, r7, #20
 80212f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80212f2:	0052      	lsls	r2, r2, #1
 80212f4:	440a      	add	r2, r1
 80212f6:	4621      	mov	r1, r4
 80212f8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80212fa:	4ba3      	ldr	r3, [pc, #652]	; (8021588 <BSP_TS_GetState+0x2f4>)
 80212fc:	781b      	ldrb	r3, [r3, #0]
 80212fe:	2b01      	cmp	r3, #1
 8021300:	d117      	bne.n	8021332 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8021302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021304:	005b      	lsls	r3, r3, #1
 8021306:	3350      	adds	r3, #80	; 0x50
 8021308:	443b      	add	r3, r7
 802130a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 802130e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021310:	005b      	lsls	r3, r3, #1
 8021312:	3350      	adds	r3, #80	; 0x50
 8021314:	443b      	add	r3, r7
 8021316:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 802131a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802131c:	005b      	lsls	r3, r3, #1
 802131e:	3350      	adds	r3, #80	; 0x50
 8021320:	443b      	add	r3, r7
 8021322:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8021326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021328:	005b      	lsls	r3, r3, #1
 802132a:	3350      	adds	r3, #80	; 0x50
 802132c:	443b      	add	r3, r7
 802132e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8021332:	4b95      	ldr	r3, [pc, #596]	; (8021588 <BSP_TS_GetState+0x2f4>)
 8021334:	781b      	ldrb	r3, [r3, #0]
 8021336:	f003 0302 	and.w	r3, r3, #2
 802133a:	2b00      	cmp	r3, #0
 802133c:	d00e      	beq.n	802135c <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 802133e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021340:	005b      	lsls	r3, r3, #1
 8021342:	3350      	adds	r3, #80	; 0x50
 8021344:	443b      	add	r3, r7
 8021346:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 802134a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 802134e:	b29a      	uxth	r2, r3
 8021350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021352:	005b      	lsls	r3, r3, #1
 8021354:	3350      	adds	r3, #80	; 0x50
 8021356:	443b      	add	r3, r7
 8021358:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 802135c:	4b8a      	ldr	r3, [pc, #552]	; (8021588 <BSP_TS_GetState+0x2f4>)
 802135e:	781b      	ldrb	r3, [r3, #0]
 8021360:	f003 0304 	and.w	r3, r3, #4
 8021364:	2b00      	cmp	r3, #0
 8021366:	d00e      	beq.n	8021386 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8021368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802136a:	005b      	lsls	r3, r3, #1
 802136c:	3350      	adds	r3, #80	; 0x50
 802136e:	443b      	add	r3, r7
 8021370:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8021374:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8021378:	b29a      	uxth	r2, r3
 802137a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802137c:	005b      	lsls	r3, r3, #1
 802137e:	3350      	adds	r3, #80	; 0x50
 8021380:	443b      	add	r3, r7
 8021382:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8021386:	4b80      	ldr	r3, [pc, #512]	; (8021588 <BSP_TS_GetState+0x2f4>)
 8021388:	781b      	ldrb	r3, [r3, #0]
 802138a:	f003 0308 	and.w	r3, r3, #8
 802138e:	2b00      	cmp	r3, #0
 8021390:	d017      	beq.n	80213c2 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8021392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021394:	005b      	lsls	r3, r3, #1
 8021396:	3350      	adds	r3, #80	; 0x50
 8021398:	443b      	add	r3, r7
 802139a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 802139e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213a0:	005b      	lsls	r3, r3, #1
 80213a2:	3350      	adds	r3, #80	; 0x50
 80213a4:	443b      	add	r3, r7
 80213a6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80213aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213ac:	005b      	lsls	r3, r3, #1
 80213ae:	3350      	adds	r3, #80	; 0x50
 80213b0:	443b      	add	r3, r7
 80213b2:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80213b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213b8:	005b      	lsls	r3, r3, #1
 80213ba:	3350      	adds	r3, #80	; 0x50
 80213bc:	443b      	add	r3, r7
 80213be:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80213c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213c4:	005b      	lsls	r3, r3, #1
 80213c6:	3350      	adds	r3, #80	; 0x50
 80213c8:	443b      	add	r3, r7
 80213ca:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80213ce:	4619      	mov	r1, r3
 80213d0:	4a6e      	ldr	r2, [pc, #440]	; (802158c <BSP_TS_GetState+0x2f8>)
 80213d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80213d8:	4299      	cmp	r1, r3
 80213da:	d90d      	bls.n	80213f8 <BSP_TS_GetState+0x164>
 80213dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213de:	005b      	lsls	r3, r3, #1
 80213e0:	3350      	adds	r3, #80	; 0x50
 80213e2:	443b      	add	r3, r7
 80213e4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80213e8:	4968      	ldr	r1, [pc, #416]	; (802158c <BSP_TS_GetState+0x2f8>)
 80213ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80213f0:	b29b      	uxth	r3, r3
 80213f2:	1ad3      	subs	r3, r2, r3
 80213f4:	b29b      	uxth	r3, r3
 80213f6:	e00c      	b.n	8021412 <BSP_TS_GetState+0x17e>
 80213f8:	4a64      	ldr	r2, [pc, #400]	; (802158c <BSP_TS_GetState+0x2f8>)
 80213fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80213fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021400:	b29a      	uxth	r2, r3
 8021402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021404:	005b      	lsls	r3, r3, #1
 8021406:	3350      	adds	r3, #80	; 0x50
 8021408:	443b      	add	r3, r7
 802140a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 802140e:	1ad3      	subs	r3, r2, r3
 8021410:	b29b      	uxth	r3, r3
 8021412:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8021416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021418:	005b      	lsls	r3, r3, #1
 802141a:	3350      	adds	r3, #80	; 0x50
 802141c:	443b      	add	r3, r7
 802141e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8021422:	4619      	mov	r1, r3
 8021424:	4a5a      	ldr	r2, [pc, #360]	; (8021590 <BSP_TS_GetState+0x2fc>)
 8021426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802142c:	4299      	cmp	r1, r3
 802142e:	d90d      	bls.n	802144c <BSP_TS_GetState+0x1b8>
 8021430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021432:	005b      	lsls	r3, r3, #1
 8021434:	3350      	adds	r3, #80	; 0x50
 8021436:	443b      	add	r3, r7
 8021438:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 802143c:	4954      	ldr	r1, [pc, #336]	; (8021590 <BSP_TS_GetState+0x2fc>)
 802143e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021440:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021444:	b29b      	uxth	r3, r3
 8021446:	1ad3      	subs	r3, r2, r3
 8021448:	b29b      	uxth	r3, r3
 802144a:	e00c      	b.n	8021466 <BSP_TS_GetState+0x1d2>
 802144c:	4a50      	ldr	r2, [pc, #320]	; (8021590 <BSP_TS_GetState+0x2fc>)
 802144e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021454:	b29a      	uxth	r2, r3
 8021456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021458:	005b      	lsls	r3, r3, #1
 802145a:	3350      	adds	r3, #80	; 0x50
 802145c:	443b      	add	r3, r7
 802145e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8021462:	1ad3      	subs	r3, r2, r3
 8021464:	b29b      	uxth	r3, r3
 8021466:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 802146a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 802146e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021472:	4413      	add	r3, r2
 8021474:	2b05      	cmp	r3, #5
 8021476:	dd15      	ble.n	80214a4 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8021478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802147a:	005b      	lsls	r3, r3, #1
 802147c:	3350      	adds	r3, #80	; 0x50
 802147e:	443b      	add	r3, r7
 8021480:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8021484:	4619      	mov	r1, r3
 8021486:	4a41      	ldr	r2, [pc, #260]	; (802158c <BSP_TS_GetState+0x2f8>)
 8021488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802148a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 802148e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021490:	005b      	lsls	r3, r3, #1
 8021492:	3350      	adds	r3, #80	; 0x50
 8021494:	443b      	add	r3, r7
 8021496:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 802149a:	4619      	mov	r1, r3
 802149c:	4a3c      	ldr	r2, [pc, #240]	; (8021590 <BSP_TS_GetState+0x2fc>)
 802149e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80214a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80214a4:	4b37      	ldr	r3, [pc, #220]	; (8021584 <BSP_TS_GetState+0x2f0>)
 80214a6:	781b      	ldrb	r3, [r3, #0]
 80214a8:	2b70      	cmp	r3, #112	; 0x70
 80214aa:	d119      	bne.n	80214e0 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80214ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80214ae:	005b      	lsls	r3, r3, #1
 80214b0:	3350      	adds	r3, #80	; 0x50
 80214b2:	443b      	add	r3, r7
 80214b4:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80214b8:	687a      	ldr	r2, [r7, #4]
 80214ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80214bc:	005b      	lsls	r3, r3, #1
 80214be:	4413      	add	r3, r2
 80214c0:	460a      	mov	r2, r1
 80214c2:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80214c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80214c6:	005b      	lsls	r3, r3, #1
 80214c8:	3350      	adds	r3, #80	; 0x50
 80214ca:	443b      	add	r3, r7
 80214cc:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80214d0:	687a      	ldr	r2, [r7, #4]
 80214d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80214d4:	3304      	adds	r3, #4
 80214d6:	005b      	lsls	r3, r3, #1
 80214d8:	4413      	add	r3, r2
 80214da:	460a      	mov	r2, r1
 80214dc:	809a      	strh	r2, [r3, #4]
 80214de:	e022      	b.n	8021526 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80214e0:	4b2c      	ldr	r3, [pc, #176]	; (8021594 <BSP_TS_GetState+0x300>)
 80214e2:	881b      	ldrh	r3, [r3, #0]
 80214e4:	4619      	mov	r1, r3
 80214e6:	4a29      	ldr	r2, [pc, #164]	; (802158c <BSP_TS_GetState+0x2f8>)
 80214e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80214ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80214ee:	fb01 f303 	mul.w	r3, r1, r3
 80214f2:	0b1b      	lsrs	r3, r3, #12
 80214f4:	b299      	uxth	r1, r3
 80214f6:	687a      	ldr	r2, [r7, #4]
 80214f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80214fa:	005b      	lsls	r3, r3, #1
 80214fc:	4413      	add	r3, r2
 80214fe:	460a      	mov	r2, r1
 8021500:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8021502:	4b25      	ldr	r3, [pc, #148]	; (8021598 <BSP_TS_GetState+0x304>)
 8021504:	881b      	ldrh	r3, [r3, #0]
 8021506:	4619      	mov	r1, r3
 8021508:	4a21      	ldr	r2, [pc, #132]	; (8021590 <BSP_TS_GetState+0x2fc>)
 802150a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021510:	fb01 f303 	mul.w	r3, r1, r3
 8021514:	0b1b      	lsrs	r3, r3, #12
 8021516:	b299      	uxth	r1, r3
 8021518:	687a      	ldr	r2, [r7, #4]
 802151a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802151c:	3304      	adds	r3, #4
 802151e:	005b      	lsls	r3, r3, #1
 8021520:	4413      	add	r3, r2
 8021522:	460a      	mov	r2, r1
 8021524:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8021526:	4b17      	ldr	r3, [pc, #92]	; (8021584 <BSP_TS_GetState+0x2f0>)
 8021528:	781b      	ldrb	r3, [r3, #0]
 802152a:	b298      	uxth	r0, r3
 802152c:	f107 010c 	add.w	r1, r7, #12
 8021530:	f107 0210 	add.w	r2, r7, #16
 8021534:	f107 0308 	add.w	r3, r7, #8
 8021538:	9300      	str	r3, [sp, #0]
 802153a:	460b      	mov	r3, r1
 802153c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 802153e:	f7fb fe41 	bl	801d1c4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8021542:	693b      	ldr	r3, [r7, #16]
 8021544:	b2d9      	uxtb	r1, r3
 8021546:	687a      	ldr	r2, [r7, #4]
 8021548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802154a:	4413      	add	r3, r2
 802154c:	3316      	adds	r3, #22
 802154e:	460a      	mov	r2, r1
 8021550:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8021552:	68fb      	ldr	r3, [r7, #12]
 8021554:	b2d9      	uxtb	r1, r3
 8021556:	687a      	ldr	r2, [r7, #4]
 8021558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802155a:	4413      	add	r3, r2
 802155c:	3320      	adds	r3, #32
 802155e:	460a      	mov	r2, r1
 8021560:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8021562:	68bb      	ldr	r3, [r7, #8]
 8021564:	2b03      	cmp	r3, #3
 8021566:	d835      	bhi.n	80215d4 <BSP_TS_GetState+0x340>
 8021568:	a201      	add	r2, pc, #4	; (adr r2, 8021570 <BSP_TS_GetState+0x2dc>)
 802156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802156e:	bf00      	nop
 8021570:	0802159d 	.word	0x0802159d
 8021574:	080215ab 	.word	0x080215ab
 8021578:	080215b9 	.word	0x080215b9
 802157c:	080215c7 	.word	0x080215c7
 8021580:	20018160 	.word	0x20018160
 8021584:	20018169 	.word	0x20018169
 8021588:	20018168 	.word	0x20018168
 802158c:	2001816c 	.word	0x2001816c
 8021590:	20018180 	.word	0x20018180
 8021594:	20018164 	.word	0x20018164
 8021598:	20018166 	.word	0x20018166
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 802159c:	687a      	ldr	r2, [r7, #4]
 802159e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80215a0:	4413      	add	r3, r2
 80215a2:	331b      	adds	r3, #27
 80215a4:	2201      	movs	r2, #1
 80215a6:	701a      	strb	r2, [r3, #0]
          break;
 80215a8:	e018      	b.n	80215dc <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80215aa:	687a      	ldr	r2, [r7, #4]
 80215ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80215ae:	4413      	add	r3, r2
 80215b0:	331b      	adds	r3, #27
 80215b2:	2202      	movs	r2, #2
 80215b4:	701a      	strb	r2, [r3, #0]
          break;
 80215b6:	e011      	b.n	80215dc <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80215b8:	687a      	ldr	r2, [r7, #4]
 80215ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80215bc:	4413      	add	r3, r2
 80215be:	331b      	adds	r3, #27
 80215c0:	2203      	movs	r2, #3
 80215c2:	701a      	strb	r2, [r3, #0]
          break;
 80215c4:	e00a      	b.n	80215dc <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80215c6:	687a      	ldr	r2, [r7, #4]
 80215c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80215ca:	4413      	add	r3, r2
 80215cc:	331b      	adds	r3, #27
 80215ce:	2200      	movs	r2, #0
 80215d0:	701a      	strb	r2, [r3, #0]
          break;
 80215d2:	e003      	b.n	80215dc <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 80215d4:	2301      	movs	r3, #1
 80215d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80215da:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80215dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80215de:	3301      	adds	r3, #1
 80215e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	781b      	ldrb	r3, [r3, #0]
 80215e6:	461a      	mov	r2, r3
 80215e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80215ea:	4293      	cmp	r3, r2
 80215ec:	f4ff ae73 	bcc.w	80212d6 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80215f0:	6878      	ldr	r0, [r7, #4]
 80215f2:	f000 f809 	bl	8021608 <BSP_TS_Get_GestureId>
 80215f6:	4603      	mov	r3, r0
 80215f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80215fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8021600:	4618      	mov	r0, r3
 8021602:	3754      	adds	r7, #84	; 0x54
 8021604:	46bd      	mov	sp, r7
 8021606:	bd90      	pop	{r4, r7, pc}

08021608 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8021608:	b580      	push	{r7, lr}
 802160a:	b084      	sub	sp, #16
 802160c:	af00      	add	r7, sp, #0
 802160e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8021610:	2300      	movs	r3, #0
 8021612:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8021614:	2300      	movs	r3, #0
 8021616:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8021618:	4b3b      	ldr	r3, [pc, #236]	; (8021708 <BSP_TS_Get_GestureId+0x100>)
 802161a:	781b      	ldrb	r3, [r3, #0]
 802161c:	b29b      	uxth	r3, r3
 802161e:	f107 0208 	add.w	r2, r7, #8
 8021622:	4611      	mov	r1, r2
 8021624:	4618      	mov	r0, r3
 8021626:	f7fb fdb4 	bl	801d192 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 802162a:	68bb      	ldr	r3, [r7, #8]
 802162c:	2b49      	cmp	r3, #73	; 0x49
 802162e:	d05e      	beq.n	80216ee <BSP_TS_Get_GestureId+0xe6>
 8021630:	2b49      	cmp	r3, #73	; 0x49
 8021632:	d860      	bhi.n	80216f6 <BSP_TS_Get_GestureId+0xee>
 8021634:	2b1c      	cmp	r3, #28
 8021636:	d83f      	bhi.n	80216b8 <BSP_TS_Get_GestureId+0xb0>
 8021638:	2b1c      	cmp	r3, #28
 802163a:	d85c      	bhi.n	80216f6 <BSP_TS_Get_GestureId+0xee>
 802163c:	a201      	add	r2, pc, #4	; (adr r2, 8021644 <BSP_TS_Get_GestureId+0x3c>)
 802163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021642:	bf00      	nop
 8021644:	080216bf 	.word	0x080216bf
 8021648:	080216f7 	.word	0x080216f7
 802164c:	080216f7 	.word	0x080216f7
 8021650:	080216f7 	.word	0x080216f7
 8021654:	080216f7 	.word	0x080216f7
 8021658:	080216f7 	.word	0x080216f7
 802165c:	080216f7 	.word	0x080216f7
 8021660:	080216f7 	.word	0x080216f7
 8021664:	080216f7 	.word	0x080216f7
 8021668:	080216f7 	.word	0x080216f7
 802166c:	080216f7 	.word	0x080216f7
 8021670:	080216f7 	.word	0x080216f7
 8021674:	080216f7 	.word	0x080216f7
 8021678:	080216f7 	.word	0x080216f7
 802167c:	080216f7 	.word	0x080216f7
 8021680:	080216f7 	.word	0x080216f7
 8021684:	080216c7 	.word	0x080216c7
 8021688:	080216f7 	.word	0x080216f7
 802168c:	080216f7 	.word	0x080216f7
 8021690:	080216f7 	.word	0x080216f7
 8021694:	080216cf 	.word	0x080216cf
 8021698:	080216f7 	.word	0x080216f7
 802169c:	080216f7 	.word	0x080216f7
 80216a0:	080216f7 	.word	0x080216f7
 80216a4:	080216d7 	.word	0x080216d7
 80216a8:	080216f7 	.word	0x080216f7
 80216ac:	080216f7 	.word	0x080216f7
 80216b0:	080216f7 	.word	0x080216f7
 80216b4:	080216df 	.word	0x080216df
 80216b8:	2b40      	cmp	r3, #64	; 0x40
 80216ba:	d014      	beq.n	80216e6 <BSP_TS_Get_GestureId+0xde>
 80216bc:	e01b      	b.n	80216f6 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80216be:	687b      	ldr	r3, [r7, #4]
 80216c0:	2200      	movs	r2, #0
 80216c2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80216c4:	e01a      	b.n	80216fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80216c6:	687b      	ldr	r3, [r7, #4]
 80216c8:	2201      	movs	r2, #1
 80216ca:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80216cc:	e016      	b.n	80216fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	2202      	movs	r2, #2
 80216d2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80216d4:	e012      	b.n	80216fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80216d6:	687b      	ldr	r3, [r7, #4]
 80216d8:	2203      	movs	r2, #3
 80216da:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80216dc:	e00e      	b.n	80216fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	2204      	movs	r2, #4
 80216e2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80216e4:	e00a      	b.n	80216fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80216e6:	687b      	ldr	r3, [r7, #4]
 80216e8:	2205      	movs	r2, #5
 80216ea:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80216ec:	e006      	b.n	80216fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80216ee:	687b      	ldr	r3, [r7, #4]
 80216f0:	2206      	movs	r2, #6
 80216f2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80216f4:	e002      	b.n	80216fc <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80216f6:	2301      	movs	r3, #1
 80216f8:	73fb      	strb	r3, [r7, #15]
      break;
 80216fa:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80216fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80216fe:	4618      	mov	r0, r3
 8021700:	3710      	adds	r7, #16
 8021702:	46bd      	mov	sp, r7
 8021704:	bd80      	pop	{r7, pc}
 8021706:	bf00      	nop
 8021708:	20018169 	.word	0x20018169

0802170c <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */
void BSP_TS_ITClear(void)
{
 802170c:	b580      	push	{r7, lr}
 802170e:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  tsDriver->ClearIT(I2cAddress); 
 8021710:	4b04      	ldr	r3, [pc, #16]	; (8021724 <BSP_TS_ITClear+0x18>)
 8021712:	681b      	ldr	r3, [r3, #0]
 8021714:	69db      	ldr	r3, [r3, #28]
 8021716:	4a04      	ldr	r2, [pc, #16]	; (8021728 <BSP_TS_ITClear+0x1c>)
 8021718:	7812      	ldrb	r2, [r2, #0]
 802171a:	b292      	uxth	r2, r2
 802171c:	4610      	mov	r0, r2
 802171e:	4798      	blx	r3
}
 8021720:	bf00      	nop
 8021722:	bd80      	pop	{r7, pc}
 8021724:	20018160 	.word	0x20018160
 8021728:	20018169 	.word	0x20018169

0802172c <BSP_TS_ResetTouchData>:
  *         of touch information.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if OK, TE_ERROR if problem found.
  */
uint8_t BSP_TS_ResetTouchData(TS_StateTypeDef *TS_State)
{
 802172c:	b480      	push	{r7}
 802172e:	b085      	sub	sp, #20
 8021730:	af00      	add	r7, sp, #0
 8021732:	6078      	str	r0, [r7, #4]
  uint8_t ts_status = TS_ERROR;
 8021734:	2301      	movs	r3, #1
 8021736:	73fb      	strb	r3, [r7, #15]
  uint32_t index;

  if (TS_State != (TS_StateTypeDef *)NULL)
 8021738:	687b      	ldr	r3, [r7, #4]
 802173a:	2b00      	cmp	r3, #0
 802173c:	d02f      	beq.n	802179e <BSP_TS_ResetTouchData+0x72>
  {
    TS_State->gestureId = GEST_ID_NO_GESTURE;
 802173e:	687b      	ldr	r3, [r7, #4]
 8021740:	2200      	movs	r2, #0
 8021742:	629a      	str	r2, [r3, #40]	; 0x28
    TS_State->touchDetected = 0;
 8021744:	687b      	ldr	r3, [r7, #4]
 8021746:	2200      	movs	r2, #0
 8021748:	701a      	strb	r2, [r3, #0]

    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 802174a:	2300      	movs	r3, #0
 802174c:	60bb      	str	r3, [r7, #8]
 802174e:	e021      	b.n	8021794 <BSP_TS_ResetTouchData+0x68>
    {
      TS_State->touchX[index]       = 0;
 8021750:	687a      	ldr	r2, [r7, #4]
 8021752:	68bb      	ldr	r3, [r7, #8]
 8021754:	005b      	lsls	r3, r3, #1
 8021756:	4413      	add	r3, r2
 8021758:	2200      	movs	r2, #0
 802175a:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index]       = 0;
 802175c:	687a      	ldr	r2, [r7, #4]
 802175e:	68bb      	ldr	r3, [r7, #8]
 8021760:	3304      	adds	r3, #4
 8021762:	005b      	lsls	r3, r3, #1
 8021764:	4413      	add	r3, r2
 8021766:	2200      	movs	r2, #0
 8021768:	809a      	strh	r2, [r3, #4]
      TS_State->touchArea[index]    = 0;
 802176a:	687a      	ldr	r2, [r7, #4]
 802176c:	68bb      	ldr	r3, [r7, #8]
 802176e:	4413      	add	r3, r2
 8021770:	3320      	adds	r3, #32
 8021772:	2200      	movs	r2, #0
 8021774:	701a      	strb	r2, [r3, #0]
      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8021776:	687a      	ldr	r2, [r7, #4]
 8021778:	68bb      	ldr	r3, [r7, #8]
 802177a:	4413      	add	r3, r2
 802177c:	331b      	adds	r3, #27
 802177e:	2200      	movs	r2, #0
 8021780:	701a      	strb	r2, [r3, #0]
      TS_State->touchWeight[index]  = 0;
 8021782:	687a      	ldr	r2, [r7, #4]
 8021784:	68bb      	ldr	r3, [r7, #8]
 8021786:	4413      	add	r3, r2
 8021788:	3316      	adds	r3, #22
 802178a:	2200      	movs	r2, #0
 802178c:	701a      	strb	r2, [r3, #0]
    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 802178e:	68bb      	ldr	r3, [r7, #8]
 8021790:	3301      	adds	r3, #1
 8021792:	60bb      	str	r3, [r7, #8]
 8021794:	68bb      	ldr	r3, [r7, #8]
 8021796:	2b04      	cmp	r3, #4
 8021798:	d9da      	bls.n	8021750 <BSP_TS_ResetTouchData+0x24>
    }

    ts_status = TS_OK;
 802179a:	2300      	movs	r3, #0
 802179c:	73fb      	strb	r3, [r7, #15]

  } /* of if (TS_State != (TS_StateTypeDef *)NULL) */

  return (ts_status);
 802179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80217a0:	4618      	mov	r0, r3
 80217a2:	3714      	adds	r7, #20
 80217a4:	46bd      	mov	sp, r7
 80217a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217aa:	4770      	bx	lr

080217ac <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80217ac:	b580      	push	{r7, lr}
 80217ae:	af00      	add	r7, sp, #0
	HAL_I2C_Init(&hi2c3);
 80217b0:	4802      	ldr	r0, [pc, #8]	; (80217bc <TS_IO_Init+0x10>)
 80217b2:	f7e3 f895 	bl	80048e0 <HAL_I2C_Init>
}
 80217b6:	bf00      	nop
 80217b8:	bd80      	pop	{r7, pc}
 80217ba:	bf00      	nop
 80217bc:	200009b0 	.word	0x200009b0

080217c0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80217c0:	b580      	push	{r7, lr}
 80217c2:	b086      	sub	sp, #24
 80217c4:	af04      	add	r7, sp, #16
 80217c6:	4603      	mov	r3, r0
 80217c8:	71fb      	strb	r3, [r7, #7]
 80217ca:	460b      	mov	r3, r1
 80217cc:	71bb      	strb	r3, [r7, #6]
 80217ce:	4613      	mov	r3, r2
 80217d0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1, 1000);
 80217d2:	79fb      	ldrb	r3, [r7, #7]
 80217d4:	b299      	uxth	r1, r3
 80217d6:	79bb      	ldrb	r3, [r7, #6]
 80217d8:	b29a      	uxth	r2, r3
 80217da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80217de:	9302      	str	r3, [sp, #8]
 80217e0:	2301      	movs	r3, #1
 80217e2:	9301      	str	r3, [sp, #4]
 80217e4:	1d7b      	adds	r3, r7, #5
 80217e6:	9300      	str	r3, [sp, #0]
 80217e8:	2301      	movs	r3, #1
 80217ea:	4803      	ldr	r0, [pc, #12]	; (80217f8 <TS_IO_Write+0x38>)
 80217ec:	f7e3 f99a 	bl	8004b24 <HAL_I2C_Mem_Write>
}
 80217f0:	bf00      	nop
 80217f2:	3708      	adds	r7, #8
 80217f4:	46bd      	mov	sp, r7
 80217f6:	bd80      	pop	{r7, pc}
 80217f8:	200009b0 	.word	0x200009b0

080217fc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80217fc:	b580      	push	{r7, lr}
 80217fe:	b088      	sub	sp, #32
 8021800:	af04      	add	r7, sp, #16
 8021802:	4603      	mov	r3, r0
 8021804:	460a      	mov	r2, r1
 8021806:	71fb      	strb	r3, [r7, #7]
 8021808:	4613      	mov	r3, r2
 802180a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 802180c:	2300      	movs	r3, #0
 802180e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1, 1000);
 8021810:	79fb      	ldrb	r3, [r7, #7]
 8021812:	b299      	uxth	r1, r3
 8021814:	79bb      	ldrb	r3, [r7, #6]
 8021816:	b29a      	uxth	r2, r3
 8021818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802181c:	9302      	str	r3, [sp, #8]
 802181e:	2301      	movs	r3, #1
 8021820:	9301      	str	r3, [sp, #4]
 8021822:	f107 030f 	add.w	r3, r7, #15
 8021826:	9300      	str	r3, [sp, #0]
 8021828:	2301      	movs	r3, #1
 802182a:	4804      	ldr	r0, [pc, #16]	; (802183c <TS_IO_Read+0x40>)
 802182c:	f7e3 fa9c 	bl	8004d68 <HAL_I2C_Mem_Read>
  return read_value;
 8021830:	7bfb      	ldrb	r3, [r7, #15]
}
 8021832:	4618      	mov	r0, r3
 8021834:	3710      	adds	r7, #16
 8021836:	46bd      	mov	sp, r7
 8021838:	bd80      	pop	{r7, pc}
 802183a:	bf00      	nop
 802183c:	200009b0 	.word	0x200009b0

08021840 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8021840:	b580      	push	{r7, lr}
 8021842:	b082      	sub	sp, #8
 8021844:	af00      	add	r7, sp, #0
 8021846:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8021848:	6878      	ldr	r0, [r7, #4]
 802184a:	f7df fd1d 	bl	8001288 <HAL_Delay>
}
 802184e:	bf00      	nop
 8021850:	3708      	adds	r7, #8
 8021852:	46bd      	mov	sp, r7
 8021854:	bd80      	pop	{r7, pc}
	...

08021858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021858:	b480      	push	{r7}
 802185a:	b083      	sub	sp, #12
 802185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 802185e:	4b0f      	ldr	r3, [pc, #60]	; (802189c <HAL_MspInit+0x44>)
 8021860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021862:	4a0e      	ldr	r2, [pc, #56]	; (802189c <HAL_MspInit+0x44>)
 8021864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021868:	6413      	str	r3, [r2, #64]	; 0x40
 802186a:	4b0c      	ldr	r3, [pc, #48]	; (802189c <HAL_MspInit+0x44>)
 802186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021872:	607b      	str	r3, [r7, #4]
 8021874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021876:	4b09      	ldr	r3, [pc, #36]	; (802189c <HAL_MspInit+0x44>)
 8021878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802187a:	4a08      	ldr	r2, [pc, #32]	; (802189c <HAL_MspInit+0x44>)
 802187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021880:	6453      	str	r3, [r2, #68]	; 0x44
 8021882:	4b06      	ldr	r3, [pc, #24]	; (802189c <HAL_MspInit+0x44>)
 8021884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802188a:	603b      	str	r3, [r7, #0]
 802188c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802188e:	bf00      	nop
 8021890:	370c      	adds	r7, #12
 8021892:	46bd      	mov	sp, r7
 8021894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021898:	4770      	bx	lr
 802189a:	bf00      	nop
 802189c:	40023800 	.word	0x40023800

080218a0 <__NVIC_EnableIRQ>:
{
 80218a0:	b480      	push	{r7}
 80218a2:	b083      	sub	sp, #12
 80218a4:	af00      	add	r7, sp, #0
 80218a6:	4603      	mov	r3, r0
 80218a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80218aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80218ae:	2b00      	cmp	r3, #0
 80218b0:	db0b      	blt.n	80218ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80218b2:	79fb      	ldrb	r3, [r7, #7]
 80218b4:	f003 021f 	and.w	r2, r3, #31
 80218b8:	4907      	ldr	r1, [pc, #28]	; (80218d8 <__NVIC_EnableIRQ+0x38>)
 80218ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80218be:	095b      	lsrs	r3, r3, #5
 80218c0:	2001      	movs	r0, #1
 80218c2:	fa00 f202 	lsl.w	r2, r0, r2
 80218c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80218ca:	bf00      	nop
 80218cc:	370c      	adds	r7, #12
 80218ce:	46bd      	mov	sp, r7
 80218d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218d4:	4770      	bx	lr
 80218d6:	bf00      	nop
 80218d8:	e000e100 	.word	0xe000e100

080218dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80218dc:	b480      	push	{r7}
 80218de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80218e0:	bf00      	nop
 80218e2:	46bd      	mov	sp, r7
 80218e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218e8:	4770      	bx	lr

080218ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80218ea:	b480      	push	{r7}
 80218ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80218ee:	e7fe      	b.n	80218ee <HardFault_Handler+0x4>

080218f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80218f0:	b480      	push	{r7}
 80218f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80218f4:	e7fe      	b.n	80218f4 <MemManage_Handler+0x4>

080218f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80218f6:	b480      	push	{r7}
 80218f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80218fa:	e7fe      	b.n	80218fa <BusFault_Handler+0x4>

080218fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80218fc:	b480      	push	{r7}
 80218fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021900:	e7fe      	b.n	8021900 <UsageFault_Handler+0x4>

08021902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021902:	b480      	push	{r7}
 8021904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021906:	bf00      	nop
 8021908:	46bd      	mov	sp, r7
 802190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802190e:	4770      	bx	lr

08021910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021910:	b480      	push	{r7}
 8021912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021914:	bf00      	nop
 8021916:	46bd      	mov	sp, r7
 8021918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802191c:	4770      	bx	lr

0802191e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802191e:	b480      	push	{r7}
 8021920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021922:	bf00      	nop
 8021924:	46bd      	mov	sp, r7
 8021926:	f85d 7b04 	ldr.w	r7, [sp], #4
 802192a:	4770      	bx	lr

0802192c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802192c:	b580      	push	{r7, lr}
 802192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8021930:	f7df fc8a 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021934:	bf00      	nop
 8021936:	bd80      	pop	{r7, pc}

08021938 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8021938:	b580      	push	{r7, lr}
 802193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 802193c:	2304      	movs	r3, #4
 802193e:	4a05      	ldr	r2, [pc, #20]	; (8021954 <EXTI0_IRQHandler+0x1c>)
 8021940:	4905      	ldr	r1, [pc, #20]	; (8021958 <EXTI0_IRQHandler+0x20>)
 8021942:	4806      	ldr	r0, [pc, #24]	; (802195c <EXTI0_IRQHandler+0x24>)
 8021944:	f7e7 fada 	bl	8008efc <HAL_SPI_TransmitReceive_IT>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_NSS_Pin);
 8021948:	2001      	movs	r0, #1
 802194a:	f7e1 fb3d 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 802194e:	bf00      	nop
 8021950:	bd80      	pop	{r7, pc}
 8021952:	bf00      	nop
 8021954:	2000e6dc 	.word	0x2000e6dc
 8021958:	20000054 	.word	0x20000054
 802195c:	20018074 	.word	0x20018074

08021960 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8021960:	b580      	push	{r7, lr}
 8021962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KBD_INT_Pin);
 8021964:	2004      	movs	r0, #4
 8021966:	f7e1 fb2f 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 802196a:	bf00      	nop
 802196c:	bd80      	pop	{r7, pc}
	...

08021970 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8021970:	b580      	push	{r7, lr}
 8021972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if(button_flag & (1 << 0)) {
 8021974:	4b23      	ldr	r3, [pc, #140]	; (8021a04 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8021976:	881b      	ldrh	r3, [r3, #0]
 8021978:	f003 0301 	and.w	r3, r3, #1
 802197c:	2b00      	cmp	r3, #0
 802197e:	d012      	beq.n	80219a6 <TIM1_BRK_TIM9_IRQHandler+0x36>
		if(display.cuemode == 0) display.cuemode = 1;
 8021980:	4b21      	ldr	r3, [pc, #132]	; (8021a08 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 8021982:	789b      	ldrb	r3, [r3, #2]
 8021984:	2b00      	cmp	r3, #0
 8021986:	d103      	bne.n	8021990 <TIM1_BRK_TIM9_IRQHandler+0x20>
 8021988:	4b1f      	ldr	r3, [pc, #124]	; (8021a08 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 802198a:	2201      	movs	r2, #1
 802198c:	709a      	strb	r2, [r3, #2]
 802198e:	e002      	b.n	8021996 <TIM1_BRK_TIM9_IRQHandler+0x26>
		else display.cuemode = 0;
 8021990:	4b1d      	ldr	r3, [pc, #116]	; (8021a08 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 8021992:	2200      	movs	r2, #0
 8021994:	709a      	strb	r2, [r3, #2]
		button_flag ^= (1 << 0);
 8021996:	4b1b      	ldr	r3, [pc, #108]	; (8021a04 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8021998:	881b      	ldrh	r3, [r3, #0]
 802199a:	f083 0301 	eor.w	r3, r3, #1
 802199e:	b29a      	uxth	r2, r3
 80219a0:	4b18      	ldr	r3, [pc, #96]	; (8021a04 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 80219a2:	801a      	strh	r2, [r3, #0]
 80219a4:	e025      	b.n	80219f2 <TIM1_BRK_TIM9_IRQHandler+0x82>
	}
	else if(button_flag & (1 << 1)) {
 80219a6:	4b17      	ldr	r3, [pc, #92]	; (8021a04 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 80219a8:	881b      	ldrh	r3, [r3, #0]
 80219aa:	f003 0302 	and.w	r3, r3, #2
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	d007      	beq.n	80219c2 <TIM1_BRK_TIM9_IRQHandler+0x52>
		// turn on Master Tempo
		button_flag ^= (1 << 1);
 80219b2:	4b14      	ldr	r3, [pc, #80]	; (8021a04 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 80219b4:	881b      	ldrh	r3, [r3, #0]
 80219b6:	f083 0302 	eor.w	r3, r3, #2
 80219ba:	b29a      	uxth	r2, r3
 80219bc:	4b11      	ldr	r3, [pc, #68]	; (8021a04 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 80219be:	801a      	strh	r2, [r3, #0]
 80219c0:	e017      	b.n	80219f2 <TIM1_BRK_TIM9_IRQHandler+0x82>
	}
	else if(button_flag & (1 << 3)) {
 80219c2:	4b10      	ldr	r3, [pc, #64]	; (8021a04 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 80219c4:	881b      	ldrh	r3, [r3, #0]
 80219c6:	f003 0308 	and.w	r3, r3, #8
 80219ca:	2b00      	cmp	r3, #0
 80219cc:	d011      	beq.n	80219f2 <TIM1_BRK_TIM9_IRQHandler+0x82>
		if(display.quantize == 0) display.quantize = 1;
 80219ce:	4b0e      	ldr	r3, [pc, #56]	; (8021a08 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 80219d0:	7c5b      	ldrb	r3, [r3, #17]
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	d103      	bne.n	80219de <TIM1_BRK_TIM9_IRQHandler+0x6e>
 80219d6:	4b0c      	ldr	r3, [pc, #48]	; (8021a08 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 80219d8:	2201      	movs	r2, #1
 80219da:	745a      	strb	r2, [r3, #17]
 80219dc:	e002      	b.n	80219e4 <TIM1_BRK_TIM9_IRQHandler+0x74>
		else display.quantize = 0;
 80219de:	4b0a      	ldr	r3, [pc, #40]	; (8021a08 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 80219e0:	2200      	movs	r2, #0
 80219e2:	745a      	strb	r2, [r3, #17]
		button_flag ^= (1 << 3);
 80219e4:	4b07      	ldr	r3, [pc, #28]	; (8021a04 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 80219e6:	881b      	ldrh	r3, [r3, #0]
 80219e8:	f083 0308 	eor.w	r3, r3, #8
 80219ec:	b29a      	uxth	r2, r3
 80219ee:	4b05      	ldr	r3, [pc, #20]	; (8021a04 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 80219f0:	801a      	strh	r2, [r3, #0]
	}
	HAL_TIM_Base_Stop_IT(&htim9);
 80219f2:	4806      	ldr	r0, [pc, #24]	; (8021a0c <TIM1_BRK_TIM9_IRQHandler+0x9c>)
 80219f4:	f7e8 f82c 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80219f8:	4804      	ldr	r0, [pc, #16]	; (8021a0c <TIM1_BRK_TIM9_IRQHandler+0x9c>)
 80219fa:	f7e8 f8b9 	bl	8009b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80219fe:	bf00      	nop
 8021a00:	bd80      	pop	{r7, pc}
 8021a02:	bf00      	nop
 8021a04:	200181a0 	.word	0x200181a0
 8021a08:	200008fc 	.word	0x200008fc
 8021a0c:	200182f0 	.word	0x200182f0

08021a10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8021a10:	b580      	push	{r7, lr}
 8021a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	ClearLayer();
 8021a14:	f7f7 fc5e 	bl	80192d4 <ClearLayer>
	SetBeatGrid();
 8021a18:	f7f9 f8a2 	bl	801ab60 <SetBeatGrid>
	if(menu_mode == 0) DrawSpectrum();
 8021a1c:	4b0b      	ldr	r3, [pc, #44]	; (8021a4c <TIM4_IRQHandler+0x3c>)
 8021a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d101      	bne.n	8021a2a <TIM4_IRQHandler+0x1a>
 8021a26:	f7f9 f9d7 	bl	801add8 <DrawSpectrum>
	if(menu_mode != 3) 	DrawLowSpectrum();
 8021a2a:	4b08      	ldr	r3, [pc, #32]	; (8021a4c <TIM4_IRQHandler+0x3c>)
 8021a2c:	f993 3000 	ldrsb.w	r3, [r3]
 8021a30:	2b03      	cmp	r3, #3
 8021a32:	d001      	beq.n	8021a38 <TIM4_IRQHandler+0x28>
 8021a34:	f7f8 f8b6 	bl	8019ba4 <DrawLowSpectrum>
	DrawMenu();
 8021a38:	f7f7 fcc4 	bl	80193c4 <DrawMenu>
	//DrawFrequencySpectrum();
	ChangeLayers();
 8021a3c:	f7f7 fc8c 	bl	8019358 <ChangeLayers>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8021a40:	4803      	ldr	r0, [pc, #12]	; (8021a50 <TIM4_IRQHandler+0x40>)
 8021a42:	f7e8 f895 	bl	8009b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8021a46:	bf00      	nop
 8021a48:	bd80      	pop	{r7, pc}
 8021a4a:	bf00      	nop
 8021a4c:	200007e0 	.word	0x200007e0
 8021a50:	200181b0 	.word	0x200181b0

08021a54 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8021a54:	b580      	push	{r7, lr}
 8021a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8021a58:	4802      	ldr	r0, [pc, #8]	; (8021a64 <SPI2_IRQHandler+0x10>)
 8021a5a:	f7e7 fb09 	bl	8009070 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8021a5e:	bf00      	nop
 8021a60:	bd80      	pop	{r7, pc}
 8021a62:	bf00      	nop
 8021a64:	20018074 	.word	0x20018074

08021a68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8021a68:	b580      	push	{r7, lr}
 8021a6a:	b082      	sub	sp, #8
 8021a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	BSP_TS_GetState(&ts_State);
 8021a6e:	4894      	ldr	r0, [pc, #592]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021a70:	f7ff fc10 	bl	8021294 <BSP_TS_GetState>
	if(ts_State.touchDetected == 1) {
 8021a74:	4b92      	ldr	r3, [pc, #584]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021a76:	781b      	ldrb	r3, [r3, #0]
 8021a78:	2b01      	cmp	r3, #1
 8021a7a:	f040 830c 	bne.w	8022096 <EXTI15_10_IRQHandler+0x62e>
		if((ts_State.touchX[0] > 40) && (ts_State.touchX[0] < 440) && (ts_State.touchY[0] > 220) && (ts_State.touchY[0] < 260)) {
 8021a7e:	4b90      	ldr	r3, [pc, #576]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021a80:	885b      	ldrh	r3, [r3, #2]
 8021a82:	2b28      	cmp	r3, #40	; 0x28
 8021a84:	d958      	bls.n	8021b38 <EXTI15_10_IRQHandler+0xd0>
 8021a86:	4b8e      	ldr	r3, [pc, #568]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021a88:	885b      	ldrh	r3, [r3, #2]
 8021a8a:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8021a8e:	d253      	bcs.n	8021b38 <EXTI15_10_IRQHandler+0xd0>
 8021a90:	4b8b      	ldr	r3, [pc, #556]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021a92:	899b      	ldrh	r3, [r3, #12]
 8021a94:	2bdc      	cmp	r3, #220	; 0xdc
 8021a96:	d94f      	bls.n	8021b38 <EXTI15_10_IRQHandler+0xd0>
 8021a98:	4b89      	ldr	r3, [pc, #548]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021a9a:	899b      	ldrh	r3, [r3, #12]
 8021a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8021aa0:	d24a      	bcs.n	8021b38 <EXTI15_10_IRQHandler+0xd0>
			touch_count = 0;
 8021aa2:	4b88      	ldr	r3, [pc, #544]	; (8021cc4 <EXTI15_10_IRQHandler+0x25c>)
 8021aa4:	2200      	movs	r2, #0
 8021aa6:	701a      	strb	r2, [r3, #0]
			GoToPosition(((float)ts_State.touchX[0] - 40) * (float)rekordbox.spectrum_size / rekordbox.lowp_spectrum_size);
 8021aa8:	4b85      	ldr	r3, [pc, #532]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021aaa:	885b      	ldrh	r3, [r3, #2]
 8021aac:	ee07 3a90 	vmov	s15, r3
 8021ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ab4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8021cc8 <EXTI15_10_IRQHandler+0x260>
 8021ab8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8021abc:	4b83      	ldr	r3, [pc, #524]	; (8021ccc <EXTI15_10_IRQHandler+0x264>)
 8021abe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8021ac2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8021ac6:	ee07 3a90 	vmov	s15, r3
 8021aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ace:	ee67 6a27 	vmul.f32	s13, s14, s15
 8021ad2:	4b7e      	ldr	r3, [pc, #504]	; (8021ccc <EXTI15_10_IRQHandler+0x264>)
 8021ad4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8021ad8:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8021adc:	ee07 3a90 	vmov	s15, r3
 8021ae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8021ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021aec:	ee17 0a90 	vmov	r0, s15
 8021af0:	f002 fdec 	bl	80246cc <GoToPosition>
			if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 8021af4:	4b76      	ldr	r3, [pc, #472]	; (8021cd0 <EXTI15_10_IRQHandler+0x268>)
 8021af6:	781b      	ldrb	r3, [r3, #0]
 8021af8:	2b00      	cmp	r3, #0
 8021afa:	d102      	bne.n	8021b02 <EXTI15_10_IRQHandler+0x9a>
 8021afc:	f7ff f8be 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
 8021b00:	e2c9      	b.n	8022096 <EXTI15_10_IRQHandler+0x62e>
			else {
				GetTrackTime();
 8021b02:	f002 fb3f 	bl	8024184 <GetTrackTime>
				if(spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 8021b06:	4b73      	ldr	r3, [pc, #460]	; (8021cd4 <EXTI15_10_IRQHandler+0x26c>)
 8021b08:	789b      	ldrb	r3, [r3, #2]
 8021b0a:	f003 0301 	and.w	r3, r3, #1
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	d007      	beq.n	8021b22 <EXTI15_10_IRQHandler+0xba>
 8021b12:	4b70      	ldr	r3, [pc, #448]	; (8021cd4 <EXTI15_10_IRQHandler+0x26c>)
 8021b14:	789b      	ldrb	r3, [r3, #2]
 8021b16:	f043 0302 	orr.w	r3, r3, #2
 8021b1a:	b2da      	uxtb	r2, r3
 8021b1c:	4b6d      	ldr	r3, [pc, #436]	; (8021cd4 <EXTI15_10_IRQHandler+0x26c>)
 8021b1e:	709a      	strb	r2, [r3, #2]
 8021b20:	e006      	b.n	8021b30 <EXTI15_10_IRQHandler+0xc8>
				else spi_tx[2] &= ~(1 << 1);
 8021b22:	4b6c      	ldr	r3, [pc, #432]	; (8021cd4 <EXTI15_10_IRQHandler+0x26c>)
 8021b24:	789b      	ldrb	r3, [r3, #2]
 8021b26:	f023 0302 	bic.w	r3, r3, #2
 8021b2a:	b2da      	uxtb	r2, r3
 8021b2c:	4b69      	ldr	r3, [pc, #420]	; (8021cd4 <EXTI15_10_IRQHandler+0x26c>)
 8021b2e:	709a      	strb	r2, [r3, #2]
				trak.state = SETCUE;
 8021b30:	4b67      	ldr	r3, [pc, #412]	; (8021cd0 <EXTI15_10_IRQHandler+0x268>)
 8021b32:	2202      	movs	r2, #2
 8021b34:	701a      	strb	r2, [r3, #0]
			if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 8021b36:	e2ae      	b.n	8022096 <EXTI15_10_IRQHandler+0x62e>
			}
		}
		else if((ts_State.touchY[0] > 20) && (ts_State.touchY[0] < 165)) {
 8021b38:	4b61      	ldr	r3, [pc, #388]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021b3a:	899b      	ldrh	r3, [r3, #12]
 8021b3c:	2b14      	cmp	r3, #20
 8021b3e:	f240 8227 	bls.w	8021f90 <EXTI15_10_IRQHandler+0x528>
 8021b42:	4b5f      	ldr	r3, [pc, #380]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021b44:	899b      	ldrh	r3, [r3, #12]
 8021b46:	2ba4      	cmp	r3, #164	; 0xa4
 8021b48:	f200 8222 	bhi.w	8021f90 <EXTI15_10_IRQHandler+0x528>
			if(menu_mode == 0) {
 8021b4c:	4b62      	ldr	r3, [pc, #392]	; (8021cd8 <EXTI15_10_IRQHandler+0x270>)
 8021b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	f040 8084 	bne.w	8021c60 <EXTI15_10_IRQHandler+0x1f8>
				if((ts_State.touchY[0] > 75) && (ts_State.touchY[0] < 165)) {
 8021b58:	4b59      	ldr	r3, [pc, #356]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021b5a:	899b      	ldrh	r3, [r3, #12]
 8021b5c:	2b4b      	cmp	r3, #75	; 0x4b
 8021b5e:	d97f      	bls.n	8021c60 <EXTI15_10_IRQHandler+0x1f8>
 8021b60:	4b57      	ldr	r3, [pc, #348]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021b62:	899b      	ldrh	r3, [r3, #12]
 8021b64:	2ba4      	cmp	r3, #164	; 0xa4
 8021b66:	d87b      	bhi.n	8021c60 <EXTI15_10_IRQHandler+0x1f8>
					HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8021b68:	2028      	movs	r0, #40	; 0x28
 8021b6a:	f7df fd09 	bl	8001580 <HAL_NVIC_DisableIRQ>
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8021b6e:	4b5b      	ldr	r3, [pc, #364]	; (8021cdc <EXTI15_10_IRQHandler+0x274>)
 8021b70:	681b      	ldr	r3, [r3, #0]
 8021b72:	f06f 0201 	mvn.w	r2, #1
 8021b76:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8021b78:	4b58      	ldr	r3, [pc, #352]	; (8021cdc <EXTI15_10_IRQHandler+0x274>)
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	2200      	movs	r2, #0
 8021b7e:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 8021b80:	4856      	ldr	r0, [pc, #344]	; (8021cdc <EXTI15_10_IRQHandler+0x274>)
 8021b82:	f7e7 fed5 	bl	8009930 <HAL_TIM_Base_Start_IT>
					touch_count = 0;
 8021b86:	4b4f      	ldr	r3, [pc, #316]	; (8021cc4 <EXTI15_10_IRQHandler+0x25c>)
 8021b88:	2200      	movs	r2, #0
 8021b8a:	701a      	strb	r2, [r3, #0]
					if(ts_State.touchX[0] > 280) {
 8021b8c:	4b4c      	ldr	r3, [pc, #304]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021b8e:	885b      	ldrh	r3, [r3, #2]
 8021b90:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8021b94:	d930      	bls.n	8021bf8 <EXTI15_10_IRQHandler+0x190>
						if(stretch > 1) stretch--;
 8021b96:	4b52      	ldr	r3, [pc, #328]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021b98:	edd3 7a00 	vldr	s15, [r3]
 8021b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ba8:	dd0a      	ble.n	8021bc0 <EXTI15_10_IRQHandler+0x158>
 8021baa:	4b4d      	ldr	r3, [pc, #308]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021bac:	edd3 7a00 	vldr	s15, [r3]
 8021bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021bb8:	4b49      	ldr	r3, [pc, #292]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021bba:	edc3 7a00 	vstr	s15, [r3]
 8021bbe:	e009      	b.n	8021bd4 <EXTI15_10_IRQHandler+0x16c>
						else stretch /= 2;
 8021bc0:	4b47      	ldr	r3, [pc, #284]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021bc2:	ed93 7a00 	vldr	s14, [r3]
 8021bc6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8021bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021bce:	4b44      	ldr	r3, [pc, #272]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021bd0:	edc3 7a00 	vstr	s15, [r3]
						if(stretch < 0.1) stretch = 0.125;
 8021bd4:	4b42      	ldr	r3, [pc, #264]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021bd6:	681b      	ldr	r3, [r3, #0]
 8021bd8:	4618      	mov	r0, r3
 8021bda:	f7de fcdd 	bl	8000598 <__aeabi_f2d>
 8021bde:	a336      	add	r3, pc, #216	; (adr r3, 8021cb8 <EXTI15_10_IRQHandler+0x250>)
 8021be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021be4:	f7de ffa2 	bl	8000b2c <__aeabi_dcmplt>
 8021be8:	4603      	mov	r3, r0
 8021bea:	2b00      	cmp	r3, #0
 8021bec:	d038      	beq.n	8021c60 <EXTI15_10_IRQHandler+0x1f8>
 8021bee:	4b3c      	ldr	r3, [pc, #240]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021bf0:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8021bf4:	601a      	str	r2, [r3, #0]
 8021bf6:	e033      	b.n	8021c60 <EXTI15_10_IRQHandler+0x1f8>
					}
					else if(ts_State.touchX[0] < 200) {
 8021bf8:	4b31      	ldr	r3, [pc, #196]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021bfa:	885b      	ldrh	r3, [r3, #2]
 8021bfc:	2bc7      	cmp	r3, #199	; 0xc7
 8021bfe:	d82b      	bhi.n	8021c58 <EXTI15_10_IRQHandler+0x1f0>
						if(stretch >= 1) stretch++;
 8021c00:	4b37      	ldr	r3, [pc, #220]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021c02:	edd3 7a00 	vldr	s15, [r3]
 8021c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c12:	db0a      	blt.n	8021c2a <EXTI15_10_IRQHandler+0x1c2>
 8021c14:	4b32      	ldr	r3, [pc, #200]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021c16:	edd3 7a00 	vldr	s15, [r3]
 8021c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021c1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c22:	4b2f      	ldr	r3, [pc, #188]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021c24:	edc3 7a00 	vstr	s15, [r3]
 8021c28:	e007      	b.n	8021c3a <EXTI15_10_IRQHandler+0x1d2>
						else stretch *= 2;
 8021c2a:	4b2d      	ldr	r3, [pc, #180]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021c2c:	edd3 7a00 	vldr	s15, [r3]
 8021c30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021c34:	4b2a      	ldr	r3, [pc, #168]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021c36:	edc3 7a00 	vstr	s15, [r3]
						if(stretch > 4) stretch = 4;
 8021c3a:	4b29      	ldr	r3, [pc, #164]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021c3c:	edd3 7a00 	vldr	s15, [r3]
 8021c40:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8021c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c4c:	dd08      	ble.n	8021c60 <EXTI15_10_IRQHandler+0x1f8>
 8021c4e:	4b24      	ldr	r3, [pc, #144]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021c50:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8021c54:	601a      	str	r2, [r3, #0]
 8021c56:	e003      	b.n	8021c60 <EXTI15_10_IRQHandler+0x1f8>
					}
					else stretch = 1;
 8021c58:	4b21      	ldr	r3, [pc, #132]	; (8021ce0 <EXTI15_10_IRQHandler+0x278>)
 8021c5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8021c5e:	601a      	str	r2, [r3, #0]
				}
			}
			if(menu_mode == 1) {
 8021c60:	4b1d      	ldr	r3, [pc, #116]	; (8021cd8 <EXTI15_10_IRQHandler+0x270>)
 8021c62:	f993 3000 	ldrsb.w	r3, [r3]
 8021c66:	2b01      	cmp	r3, #1
 8021c68:	f040 80df 	bne.w	8021e2a <EXTI15_10_IRQHandler+0x3c2>
				if(touch_count == 0) {
 8021c6c:	4b15      	ldr	r3, [pc, #84]	; (8021cc4 <EXTI15_10_IRQHandler+0x25c>)
 8021c6e:	781b      	ldrb	r3, [r3, #0]
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d141      	bne.n	8021cf8 <EXTI15_10_IRQHandler+0x290>
					str_offset = 0;
 8021c74:	4b1b      	ldr	r3, [pc, #108]	; (8021ce4 <EXTI15_10_IRQHandler+0x27c>)
 8021c76:	2200      	movs	r2, #0
 8021c78:	601a      	str	r2, [r3, #0]
					prev_x = ts_State.touchX[0];
 8021c7a:	4b11      	ldr	r3, [pc, #68]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021c7c:	885a      	ldrh	r2, [r3, #2]
 8021c7e:	4b1a      	ldr	r3, [pc, #104]	; (8021ce8 <EXTI15_10_IRQHandler+0x280>)
 8021c80:	801a      	strh	r2, [r3, #0]
					String_number = ts_State.touchY[0] / 20 - 1;
 8021c82:	4b0f      	ldr	r3, [pc, #60]	; (8021cc0 <EXTI15_10_IRQHandler+0x258>)
 8021c84:	899b      	ldrh	r3, [r3, #12]
 8021c86:	4a19      	ldr	r2, [pc, #100]	; (8021cec <EXTI15_10_IRQHandler+0x284>)
 8021c88:	fba2 2303 	umull	r2, r3, r2, r3
 8021c8c:	091b      	lsrs	r3, r3, #4
 8021c8e:	b29b      	uxth	r3, r3
 8021c90:	3b01      	subs	r3, #1
 8021c92:	4a17      	ldr	r2, [pc, #92]	; (8021cf0 <EXTI15_10_IRQHandler+0x288>)
 8021c94:	6013      	str	r3, [r2, #0]
					Mark_number = String_number;
 8021c96:	4b16      	ldr	r3, [pc, #88]	; (8021cf0 <EXTI15_10_IRQHandler+0x288>)
 8021c98:	681b      	ldr	r3, [r3, #0]
 8021c9a:	4a16      	ldr	r2, [pc, #88]	; (8021cf4 <EXTI15_10_IRQHandler+0x28c>)
 8021c9c:	6013      	str	r3, [r2, #0]
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8021c9e:	4b0f      	ldr	r3, [pc, #60]	; (8021cdc <EXTI15_10_IRQHandler+0x274>)
 8021ca0:	681b      	ldr	r3, [r3, #0]
 8021ca2:	f06f 0201 	mvn.w	r2, #1
 8021ca6:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8021ca8:	4b0c      	ldr	r3, [pc, #48]	; (8021cdc <EXTI15_10_IRQHandler+0x274>)
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	2200      	movs	r2, #0
 8021cae:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 8021cb0:	480a      	ldr	r0, [pc, #40]	; (8021cdc <EXTI15_10_IRQHandler+0x274>)
 8021cb2:	f7e7 fe3d 	bl	8009930 <HAL_TIM_Base_Start_IT>
 8021cb6:	e02b      	b.n	8021d10 <EXTI15_10_IRQHandler+0x2a8>
 8021cb8:	9999999a 	.word	0x9999999a
 8021cbc:	3fb99999 	.word	0x3fb99999
 8021cc0:	2000e6f0 	.word	0x2000e6f0
 8021cc4:	20018195 	.word	0x20018195
 8021cc8:	42200000 	.word	0x42200000
 8021ccc:	20015170 	.word	0x20015170
 8021cd0:	2000e6e0 	.word	0x2000e6e0
 8021cd4:	20000054 	.word	0x20000054
 8021cd8:	200007e0 	.word	0x200007e0
 8021cdc:	20018230 	.word	0x20018230
 8021ce0:	20000028 	.word	0x20000028
 8021ce4:	20018198 	.word	0x20018198
 8021ce8:	20018196 	.word	0x20018196
 8021cec:	cccccccd 	.word	0xcccccccd
 8021cf0:	20000090 	.word	0x20000090
 8021cf4:	20000094 	.word	0x20000094
				}
				else {
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8021cf8:	4b91      	ldr	r3, [pc, #580]	; (8021f40 <EXTI15_10_IRQHandler+0x4d8>)
 8021cfa:	681b      	ldr	r3, [r3, #0]
 8021cfc:	2200      	movs	r2, #0
 8021cfe:	625a      	str	r2, [r3, #36]	; 0x24
					str_offset = ts_State.touchX[0] - prev_x;
 8021d00:	4b90      	ldr	r3, [pc, #576]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021d02:	885b      	ldrh	r3, [r3, #2]
 8021d04:	461a      	mov	r2, r3
 8021d06:	4b90      	ldr	r3, [pc, #576]	; (8021f48 <EXTI15_10_IRQHandler+0x4e0>)
 8021d08:	881b      	ldrh	r3, [r3, #0]
 8021d0a:	1ad3      	subs	r3, r2, r3
 8021d0c:	4a8f      	ldr	r2, [pc, #572]	; (8021f4c <EXTI15_10_IRQHandler+0x4e4>)
 8021d0e:	6013      	str	r3, [r2, #0]
				}
				touch_count++;
 8021d10:	4b8f      	ldr	r3, [pc, #572]	; (8021f50 <EXTI15_10_IRQHandler+0x4e8>)
 8021d12:	781b      	ldrb	r3, [r3, #0]
 8021d14:	3301      	adds	r3, #1
 8021d16:	b2da      	uxtb	r2, r3
 8021d18:	4b8d      	ldr	r3, [pc, #564]	; (8021f50 <EXTI15_10_IRQHandler+0x4e8>)
 8021d1a:	701a      	strb	r2, [r3, #0]
				if((String_number != ts_State.touchY[0] / 20 - 1)) {
 8021d1c:	4b89      	ldr	r3, [pc, #548]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021d1e:	899b      	ldrh	r3, [r3, #12]
 8021d20:	4a8c      	ldr	r2, [pc, #560]	; (8021f54 <EXTI15_10_IRQHandler+0x4ec>)
 8021d22:	fba2 2303 	umull	r2, r3, r2, r3
 8021d26:	091b      	lsrs	r3, r3, #4
 8021d28:	b29b      	uxth	r3, r3
 8021d2a:	1e5a      	subs	r2, r3, #1
 8021d2c:	4b8a      	ldr	r3, [pc, #552]	; (8021f58 <EXTI15_10_IRQHandler+0x4f0>)
 8021d2e:	681b      	ldr	r3, [r3, #0]
 8021d30:	429a      	cmp	r2, r3
 8021d32:	d054      	beq.n	8021dde <EXTI15_10_IRQHandler+0x376>
					if(Total_tracks > 7) {
 8021d34:	4b89      	ldr	r3, [pc, #548]	; (8021f5c <EXTI15_10_IRQHandler+0x4f4>)
 8021d36:	881b      	ldrh	r3, [r3, #0]
 8021d38:	2b07      	cmp	r3, #7
 8021d3a:	d946      	bls.n	8021dca <EXTI15_10_IRQHandler+0x362>
						if(String_number > (ts_State.touchY[0] / 20 - 1)) {
 8021d3c:	4b81      	ldr	r3, [pc, #516]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021d3e:	899b      	ldrh	r3, [r3, #12]
 8021d40:	4a84      	ldr	r2, [pc, #528]	; (8021f54 <EXTI15_10_IRQHandler+0x4ec>)
 8021d42:	fba2 2303 	umull	r2, r3, r2, r3
 8021d46:	091b      	lsrs	r3, r3, #4
 8021d48:	b29b      	uxth	r3, r3
 8021d4a:	461a      	mov	r2, r3
 8021d4c:	4b82      	ldr	r3, [pc, #520]	; (8021f58 <EXTI15_10_IRQHandler+0x4f0>)
 8021d4e:	681b      	ldr	r3, [r3, #0]
 8021d50:	429a      	cmp	r2, r3
 8021d52:	dc20      	bgt.n	8021d96 <EXTI15_10_IRQHandler+0x32e>
							str_increment += abs((ts_State.touchY[0] / 20 - 1) - String_number);
 8021d54:	4b7b      	ldr	r3, [pc, #492]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021d56:	899b      	ldrh	r3, [r3, #12]
 8021d58:	4a7e      	ldr	r2, [pc, #504]	; (8021f54 <EXTI15_10_IRQHandler+0x4ec>)
 8021d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8021d5e:	091b      	lsrs	r3, r3, #4
 8021d60:	b29b      	uxth	r3, r3
 8021d62:	1e5a      	subs	r2, r3, #1
 8021d64:	4b7c      	ldr	r3, [pc, #496]	; (8021f58 <EXTI15_10_IRQHandler+0x4f0>)
 8021d66:	681b      	ldr	r3, [r3, #0]
 8021d68:	1ad3      	subs	r3, r2, r3
 8021d6a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8021d6e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8021d72:	4b7b      	ldr	r3, [pc, #492]	; (8021f60 <EXTI15_10_IRQHandler+0x4f8>)
 8021d74:	681b      	ldr	r3, [r3, #0]
 8021d76:	4413      	add	r3, r2
 8021d78:	4a79      	ldr	r2, [pc, #484]	; (8021f60 <EXTI15_10_IRQHandler+0x4f8>)
 8021d7a:	6013      	str	r3, [r2, #0]
							if(str_increment > Total_tracks - 7) str_increment = Total_tracks - 7;
 8021d7c:	4b77      	ldr	r3, [pc, #476]	; (8021f5c <EXTI15_10_IRQHandler+0x4f4>)
 8021d7e:	881b      	ldrh	r3, [r3, #0]
 8021d80:	1f9a      	subs	r2, r3, #6
 8021d82:	4b77      	ldr	r3, [pc, #476]	; (8021f60 <EXTI15_10_IRQHandler+0x4f8>)
 8021d84:	681b      	ldr	r3, [r3, #0]
 8021d86:	429a      	cmp	r2, r3
 8021d88:	dc1f      	bgt.n	8021dca <EXTI15_10_IRQHandler+0x362>
 8021d8a:	4b74      	ldr	r3, [pc, #464]	; (8021f5c <EXTI15_10_IRQHandler+0x4f4>)
 8021d8c:	881b      	ldrh	r3, [r3, #0]
 8021d8e:	3b07      	subs	r3, #7
 8021d90:	4a73      	ldr	r2, [pc, #460]	; (8021f60 <EXTI15_10_IRQHandler+0x4f8>)
 8021d92:	6013      	str	r3, [r2, #0]
 8021d94:	e019      	b.n	8021dca <EXTI15_10_IRQHandler+0x362>
						}
						else {
							str_increment -= abs((ts_State.touchY[0] / 20 - 1) - String_number);
 8021d96:	4b72      	ldr	r3, [pc, #456]	; (8021f60 <EXTI15_10_IRQHandler+0x4f8>)
 8021d98:	681a      	ldr	r2, [r3, #0]
 8021d9a:	4b6a      	ldr	r3, [pc, #424]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021d9c:	899b      	ldrh	r3, [r3, #12]
 8021d9e:	496d      	ldr	r1, [pc, #436]	; (8021f54 <EXTI15_10_IRQHandler+0x4ec>)
 8021da0:	fba1 1303 	umull	r1, r3, r1, r3
 8021da4:	091b      	lsrs	r3, r3, #4
 8021da6:	b29b      	uxth	r3, r3
 8021da8:	1e59      	subs	r1, r3, #1
 8021daa:	4b6b      	ldr	r3, [pc, #428]	; (8021f58 <EXTI15_10_IRQHandler+0x4f0>)
 8021dac:	681b      	ldr	r3, [r3, #0]
 8021dae:	1acb      	subs	r3, r1, r3
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	bfb8      	it	lt
 8021db4:	425b      	neglt	r3, r3
 8021db6:	1ad3      	subs	r3, r2, r3
 8021db8:	4a69      	ldr	r2, [pc, #420]	; (8021f60 <EXTI15_10_IRQHandler+0x4f8>)
 8021dba:	6013      	str	r3, [r2, #0]
							if(str_increment < 0) str_increment = 0;
 8021dbc:	4b68      	ldr	r3, [pc, #416]	; (8021f60 <EXTI15_10_IRQHandler+0x4f8>)
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	da02      	bge.n	8021dca <EXTI15_10_IRQHandler+0x362>
 8021dc4:	4b66      	ldr	r3, [pc, #408]	; (8021f60 <EXTI15_10_IRQHandler+0x4f8>)
 8021dc6:	2200      	movs	r2, #0
 8021dc8:	601a      	str	r2, [r3, #0]
						}
					}
					str_offset = 0;
 8021dca:	4b60      	ldr	r3, [pc, #384]	; (8021f4c <EXTI15_10_IRQHandler+0x4e4>)
 8021dcc:	2200      	movs	r2, #0
 8021dce:	601a      	str	r2, [r3, #0]
					touch_count = 0;
 8021dd0:	4b5f      	ldr	r3, [pc, #380]	; (8021f50 <EXTI15_10_IRQHandler+0x4e8>)
 8021dd2:	2200      	movs	r2, #0
 8021dd4:	701a      	strb	r2, [r3, #0]
					String_number = -1;
 8021dd6:	4b60      	ldr	r3, [pc, #384]	; (8021f58 <EXTI15_10_IRQHandler+0x4f0>)
 8021dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8021ddc:	601a      	str	r2, [r3, #0]
				}
				if(ts_State.touchX[0] > 380) {
 8021dde:	4b59      	ldr	r3, [pc, #356]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021de0:	885b      	ldrh	r3, [r3, #2]
 8021de2:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8021de6:	d920      	bls.n	8021e2a <EXTI15_10_IRQHandler+0x3c2>
					str_offset = 0;
 8021de8:	4b58      	ldr	r3, [pc, #352]	; (8021f4c <EXTI15_10_IRQHandler+0x4e4>)
 8021dea:	2200      	movs	r2, #0
 8021dec:	601a      	str	r2, [r3, #0]
					touch_count = 0;
 8021dee:	4b58      	ldr	r3, [pc, #352]	; (8021f50 <EXTI15_10_IRQHandler+0x4e8>)
 8021df0:	2200      	movs	r2, #0
 8021df2:	701a      	strb	r2, [r3, #0]
					bOutOfData = 1;
 8021df4:	4b5b      	ldr	r3, [pc, #364]	; (8021f64 <EXTI15_10_IRQHandler+0x4fc>)
 8021df6:	2201      	movs	r2, #1
 8021df8:	601a      	str	r2, [r3, #0]
					unDmaBufMode = 3;
 8021dfa:	4b5b      	ldr	r3, [pc, #364]	; (8021f68 <EXTI15_10_IRQHandler+0x500>)
 8021dfc:	2203      	movs	r2, #3
 8021dfe:	601a      	str	r2, [r3, #0]
					Track_number = String_number + str_increment;
 8021e00:	4b55      	ldr	r3, [pc, #340]	; (8021f58 <EXTI15_10_IRQHandler+0x4f0>)
 8021e02:	681a      	ldr	r2, [r3, #0]
 8021e04:	4b56      	ldr	r3, [pc, #344]	; (8021f60 <EXTI15_10_IRQHandler+0x4f8>)
 8021e06:	681b      	ldr	r3, [r3, #0]
 8021e08:	4413      	add	r3, r2
 8021e0a:	4a58      	ldr	r2, [pc, #352]	; (8021f6c <EXTI15_10_IRQHandler+0x504>)
 8021e0c:	6013      	str	r3, [r2, #0]
					if(Track_number >= Total_tracks) Track_number = 0;
 8021e0e:	4b53      	ldr	r3, [pc, #332]	; (8021f5c <EXTI15_10_IRQHandler+0x4f4>)
 8021e10:	881b      	ldrh	r3, [r3, #0]
 8021e12:	461a      	mov	r2, r3
 8021e14:	4b55      	ldr	r3, [pc, #340]	; (8021f6c <EXTI15_10_IRQHandler+0x504>)
 8021e16:	681b      	ldr	r3, [r3, #0]
 8021e18:	429a      	cmp	r2, r3
 8021e1a:	dc02      	bgt.n	8021e22 <EXTI15_10_IRQHandler+0x3ba>
 8021e1c:	4b53      	ldr	r3, [pc, #332]	; (8021f6c <EXTI15_10_IRQHandler+0x504>)
 8021e1e:	2200      	movs	r2, #0
 8021e20:	601a      	str	r2, [r3, #0]
					String_number = -1;
 8021e22:	4b4d      	ldr	r3, [pc, #308]	; (8021f58 <EXTI15_10_IRQHandler+0x4f0>)
 8021e24:	f04f 32ff 	mov.w	r2, #4294967295
 8021e28:	601a      	str	r2, [r3, #0]
				}
			}
			if(menu_mode == 2) {
 8021e2a:	4b51      	ldr	r3, [pc, #324]	; (8021f70 <EXTI15_10_IRQHandler+0x508>)
 8021e2c:	f993 3000 	ldrsb.w	r3, [r3]
 8021e30:	2b02      	cmp	r3, #2
 8021e32:	f040 812d 	bne.w	8022090 <EXTI15_10_IRQHandler+0x628>
				touch_count = 0;
 8021e36:	4b46      	ldr	r3, [pc, #280]	; (8021f50 <EXTI15_10_IRQHandler+0x4e8>)
 8021e38:	2200      	movs	r2, #0
 8021e3a:	701a      	strb	r2, [r3, #0]
				if((ts_State.touchX[0] >= 40) && (ts_State.touchX[0] <= 440)) {
 8021e3c:	4b41      	ldr	r3, [pc, #260]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021e3e:	885b      	ldrh	r3, [r3, #2]
 8021e40:	2b27      	cmp	r3, #39	; 0x27
 8021e42:	f240 8125 	bls.w	8022090 <EXTI15_10_IRQHandler+0x628>
 8021e46:	4b3f      	ldr	r3, [pc, #252]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021e48:	885b      	ldrh	r3, [r3, #2]
 8021e4a:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8021e4e:	f200 811f 	bhi.w	8022090 <EXTI15_10_IRQHandler+0x628>
					if((ts_State.touchY[0] > 40) && (ts_State.touchY[0] < 60))	{
 8021e52:	4b3c      	ldr	r3, [pc, #240]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021e54:	899b      	ldrh	r3, [r3, #12]
 8021e56:	2b28      	cmp	r3, #40	; 0x28
 8021e58:	d91f      	bls.n	8021e9a <EXTI15_10_IRQHandler+0x432>
 8021e5a:	4b3a      	ldr	r3, [pc, #232]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021e5c:	899b      	ldrh	r3, [r3, #12]
 8021e5e:	2b3b      	cmp	r3, #59	; 0x3b
 8021e60:	d81b      	bhi.n	8021e9a <EXTI15_10_IRQHandler+0x432>
						volume = 100 * (float)(ts_State.touchX[0]-40) / 400;
 8021e62:	4b38      	ldr	r3, [pc, #224]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021e64:	885b      	ldrh	r3, [r3, #2]
 8021e66:	3b28      	subs	r3, #40	; 0x28
 8021e68:	ee07 3a90 	vmov	s15, r3
 8021e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021e70:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8021f74 <EXTI15_10_IRQHandler+0x50c>
 8021e74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8021e78:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8021f78 <EXTI15_10_IRQHandler+0x510>
 8021e7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021e84:	edc7 7a01 	vstr	s15, [r7, #4]
 8021e88:	793b      	ldrb	r3, [r7, #4]
 8021e8a:	b2da      	uxtb	r2, r3
 8021e8c:	4b3b      	ldr	r3, [pc, #236]	; (8021f7c <EXTI15_10_IRQHandler+0x514>)
 8021e8e:	701a      	strb	r2, [r3, #0]
						BSP_AUDIO_OUT_SetVolume(volume);
 8021e90:	4b3a      	ldr	r3, [pc, #232]	; (8021f7c <EXTI15_10_IRQHandler+0x514>)
 8021e92:	781b      	ldrb	r3, [r3, #0]
 8021e94:	4618      	mov	r0, r3
 8021e96:	f7fe ff1d 	bl	8020cd4 <BSP_AUDIO_OUT_SetVolume>
					}
					if((ts_State.touchY[0] > 80) && (ts_State.touchY[0] < 100)) {
 8021e9a:	4b2a      	ldr	r3, [pc, #168]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021e9c:	899b      	ldrh	r3, [r3, #12]
 8021e9e:	2b50      	cmp	r3, #80	; 0x50
 8021ea0:	d925      	bls.n	8021eee <EXTI15_10_IRQHandler+0x486>
 8021ea2:	4b28      	ldr	r3, [pc, #160]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021ea4:	899b      	ldrh	r3, [r3, #12]
 8021ea6:	2b63      	cmp	r3, #99	; 0x63
 8021ea8:	d821      	bhi.n	8021eee <EXTI15_10_IRQHandler+0x486>
						jog_sensitivity = 0.01 * (float)(ts_State.touchX[0]-40) / 400;
 8021eaa:	4b26      	ldr	r3, [pc, #152]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021eac:	885b      	ldrh	r3, [r3, #2]
 8021eae:	3b28      	subs	r3, #40	; 0x28
 8021eb0:	ee07 3a90 	vmov	s15, r3
 8021eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021eb8:	ee17 0a90 	vmov	r0, s15
 8021ebc:	f7de fb6c 	bl	8000598 <__aeabi_f2d>
 8021ec0:	a31d      	add	r3, pc, #116	; (adr r3, 8021f38 <EXTI15_10_IRQHandler+0x4d0>)
 8021ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ec6:	f7de fbbf 	bl	8000648 <__aeabi_dmul>
 8021eca:	4602      	mov	r2, r0
 8021ecc:	460b      	mov	r3, r1
 8021ece:	4610      	mov	r0, r2
 8021ed0:	4619      	mov	r1, r3
 8021ed2:	f04f 0200 	mov.w	r2, #0
 8021ed6:	4b2a      	ldr	r3, [pc, #168]	; (8021f80 <EXTI15_10_IRQHandler+0x518>)
 8021ed8:	f7de fce0 	bl	800089c <__aeabi_ddiv>
 8021edc:	4602      	mov	r2, r0
 8021ede:	460b      	mov	r3, r1
 8021ee0:	4610      	mov	r0, r2
 8021ee2:	4619      	mov	r1, r3
 8021ee4:	f7de fe6a 	bl	8000bbc <__aeabi_d2f>
 8021ee8:	4603      	mov	r3, r0
 8021eea:	4a26      	ldr	r2, [pc, #152]	; (8021f84 <EXTI15_10_IRQHandler+0x51c>)
 8021eec:	6013      	str	r3, [r2, #0]
					}
					if((ts_State.touchY[0] > 120) && (ts_State.touchY[0] < 140)) {
 8021eee:	4b15      	ldr	r3, [pc, #84]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021ef0:	899b      	ldrh	r3, [r3, #12]
 8021ef2:	2b78      	cmp	r3, #120	; 0x78
 8021ef4:	f240 80cc 	bls.w	8022090 <EXTI15_10_IRQHandler+0x628>
 8021ef8:	4b12      	ldr	r3, [pc, #72]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021efa:	899b      	ldrh	r3, [r3, #12]
 8021efc:	2b8b      	cmp	r3, #139	; 0x8b
 8021efe:	f200 80c7 	bhi.w	8022090 <EXTI15_10_IRQHandler+0x628>
						acue_sensitivity = 250 * (float)(ts_State.touchX[0]-40) / 400;
 8021f02:	4b10      	ldr	r3, [pc, #64]	; (8021f44 <EXTI15_10_IRQHandler+0x4dc>)
 8021f04:	885b      	ldrh	r3, [r3, #2]
 8021f06:	3b28      	subs	r3, #40	; 0x28
 8021f08:	ee07 3a90 	vmov	s15, r3
 8021f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f10:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8021f88 <EXTI15_10_IRQHandler+0x520>
 8021f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8021f18:	eddf 6a17 	vldr	s13, [pc, #92]	; 8021f78 <EXTI15_10_IRQHandler+0x510>
 8021f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021f24:	edc7 7a01 	vstr	s15, [r7, #4]
 8021f28:	793b      	ldrb	r3, [r7, #4]
 8021f2a:	b2da      	uxtb	r2, r3
 8021f2c:	4b17      	ldr	r3, [pc, #92]	; (8021f8c <EXTI15_10_IRQHandler+0x524>)
 8021f2e:	701a      	strb	r2, [r3, #0]
			if(menu_mode == 2) {
 8021f30:	e0ae      	b.n	8022090 <EXTI15_10_IRQHandler+0x628>
 8021f32:	bf00      	nop
 8021f34:	f3af 8000 	nop.w
 8021f38:	47ae147b 	.word	0x47ae147b
 8021f3c:	3f847ae1 	.word	0x3f847ae1
 8021f40:	20018230 	.word	0x20018230
 8021f44:	2000e6f0 	.word	0x2000e6f0
 8021f48:	20018196 	.word	0x20018196
 8021f4c:	20018198 	.word	0x20018198
 8021f50:	20018195 	.word	0x20018195
 8021f54:	cccccccd 	.word	0xcccccccd
 8021f58:	20000090 	.word	0x20000090
 8021f5c:	20001f94 	.word	0x20001f94
 8021f60:	2001819c 	.word	0x2001819c
 8021f64:	2000f728 	.word	0x2000f728
 8021f68:	2000f72c 	.word	0x2000f72c
 8021f6c:	20000aa8 	.word	0x20000aa8
 8021f70:	200007e0 	.word	0x200007e0
 8021f74:	42c80000 	.word	0x42c80000
 8021f78:	43c80000 	.word	0x43c80000
 8021f7c:	20000058 	.word	0x20000058
 8021f80:	40790000 	.word	0x40790000
 8021f84:	2000009c 	.word	0x2000009c
 8021f88:	437a0000 	.word	0x437a0000
 8021f8c:	20000059 	.word	0x20000059
					}
				}
			}
		}
		else if((ts_State.touchY[0] > 0) && (ts_State.touchY[0] < 20)) {
 8021f90:	4b47      	ldr	r3, [pc, #284]	; (80220b0 <EXTI15_10_IRQHandler+0x648>)
 8021f92:	899b      	ldrh	r3, [r3, #12]
 8021f94:	2b00      	cmp	r3, #0
 8021f96:	d042      	beq.n	802201e <EXTI15_10_IRQHandler+0x5b6>
 8021f98:	4b45      	ldr	r3, [pc, #276]	; (80220b0 <EXTI15_10_IRQHandler+0x648>)
 8021f9a:	899b      	ldrh	r3, [r3, #12]
 8021f9c:	2b13      	cmp	r3, #19
 8021f9e:	d83e      	bhi.n	802201e <EXTI15_10_IRQHandler+0x5b6>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8021fa0:	2028      	movs	r0, #40	; 0x28
 8021fa2:	f7df faed 	bl	8001580 <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8021fa6:	4b43      	ldr	r3, [pc, #268]	; (80220b4 <EXTI15_10_IRQHandler+0x64c>)
 8021fa8:	681b      	ldr	r3, [r3, #0]
 8021faa:	f06f 0201 	mvn.w	r2, #1
 8021fae:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8021fb0:	4b40      	ldr	r3, [pc, #256]	; (80220b4 <EXTI15_10_IRQHandler+0x64c>)
 8021fb2:	681b      	ldr	r3, [r3, #0]
 8021fb4:	2200      	movs	r2, #0
 8021fb6:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8021fb8:	483e      	ldr	r0, [pc, #248]	; (80220b4 <EXTI15_10_IRQHandler+0x64c>)
 8021fba:	f7e7 fcb9 	bl	8009930 <HAL_TIM_Base_Start_IT>
			touch_count = 0;
 8021fbe:	4b3e      	ldr	r3, [pc, #248]	; (80220b8 <EXTI15_10_IRQHandler+0x650>)
 8021fc0:	2200      	movs	r2, #0
 8021fc2:	701a      	strb	r2, [r3, #0]
			if(ts_State.touchX[0] < 200) {
 8021fc4:	4b3a      	ldr	r3, [pc, #232]	; (80220b0 <EXTI15_10_IRQHandler+0x648>)
 8021fc6:	885b      	ldrh	r3, [r3, #2]
 8021fc8:	2bc7      	cmp	r3, #199	; 0xc7
 8021fca:	d811      	bhi.n	8021ff0 <EXTI15_10_IRQHandler+0x588>
				menu_mode--;
 8021fcc:	4b3b      	ldr	r3, [pc, #236]	; (80220bc <EXTI15_10_IRQHandler+0x654>)
 8021fce:	f993 3000 	ldrsb.w	r3, [r3]
 8021fd2:	b2db      	uxtb	r3, r3
 8021fd4:	3b01      	subs	r3, #1
 8021fd6:	b2db      	uxtb	r3, r3
 8021fd8:	b25a      	sxtb	r2, r3
 8021fda:	4b38      	ldr	r3, [pc, #224]	; (80220bc <EXTI15_10_IRQHandler+0x654>)
 8021fdc:	701a      	strb	r2, [r3, #0]
				if(menu_mode < 0) menu_mode = 2;
 8021fde:	4b37      	ldr	r3, [pc, #220]	; (80220bc <EXTI15_10_IRQHandler+0x654>)
 8021fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8021fe4:	2b00      	cmp	r3, #0
 8021fe6:	da55      	bge.n	8022094 <EXTI15_10_IRQHandler+0x62c>
 8021fe8:	4b34      	ldr	r3, [pc, #208]	; (80220bc <EXTI15_10_IRQHandler+0x654>)
 8021fea:	2202      	movs	r2, #2
 8021fec:	701a      	strb	r2, [r3, #0]
			if(ts_State.touchX[0] < 200) {
 8021fee:	e051      	b.n	8022094 <EXTI15_10_IRQHandler+0x62c>
			}
			else if(ts_State.touchX[0] > 280) {
 8021ff0:	4b2f      	ldr	r3, [pc, #188]	; (80220b0 <EXTI15_10_IRQHandler+0x648>)
 8021ff2:	885b      	ldrh	r3, [r3, #2]
 8021ff4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8021ff8:	d94c      	bls.n	8022094 <EXTI15_10_IRQHandler+0x62c>
				menu_mode++;
 8021ffa:	4b30      	ldr	r3, [pc, #192]	; (80220bc <EXTI15_10_IRQHandler+0x654>)
 8021ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8022000:	b2db      	uxtb	r3, r3
 8022002:	3301      	adds	r3, #1
 8022004:	b2db      	uxtb	r3, r3
 8022006:	b25a      	sxtb	r2, r3
 8022008:	4b2c      	ldr	r3, [pc, #176]	; (80220bc <EXTI15_10_IRQHandler+0x654>)
 802200a:	701a      	strb	r2, [r3, #0]
				if(menu_mode > 2) menu_mode = 0;
 802200c:	4b2b      	ldr	r3, [pc, #172]	; (80220bc <EXTI15_10_IRQHandler+0x654>)
 802200e:	f993 3000 	ldrsb.w	r3, [r3]
 8022012:	2b02      	cmp	r3, #2
 8022014:	dd3e      	ble.n	8022094 <EXTI15_10_IRQHandler+0x62c>
 8022016:	4b29      	ldr	r3, [pc, #164]	; (80220bc <EXTI15_10_IRQHandler+0x654>)
 8022018:	2200      	movs	r2, #0
 802201a:	701a      	strb	r2, [r3, #0]
			if(ts_State.touchX[0] < 200) {
 802201c:	e03a      	b.n	8022094 <EXTI15_10_IRQHandler+0x62c>
			}
		}
		else if((ts_State.touchX[0] > 80) && (ts_State.touchX[0] < 280) && (ts_State.touchY[0] > 180) && (ts_State.touchY[0] < 210)) {
 802201e:	4b24      	ldr	r3, [pc, #144]	; (80220b0 <EXTI15_10_IRQHandler+0x648>)
 8022020:	885b      	ldrh	r3, [r3, #2]
 8022022:	2b50      	cmp	r3, #80	; 0x50
 8022024:	d930      	bls.n	8022088 <EXTI15_10_IRQHandler+0x620>
 8022026:	4b22      	ldr	r3, [pc, #136]	; (80220b0 <EXTI15_10_IRQHandler+0x648>)
 8022028:	885b      	ldrh	r3, [r3, #2]
 802202a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 802202e:	d22b      	bcs.n	8022088 <EXTI15_10_IRQHandler+0x620>
 8022030:	4b1f      	ldr	r3, [pc, #124]	; (80220b0 <EXTI15_10_IRQHandler+0x648>)
 8022032:	899b      	ldrh	r3, [r3, #12]
 8022034:	2bb4      	cmp	r3, #180	; 0xb4
 8022036:	d927      	bls.n	8022088 <EXTI15_10_IRQHandler+0x620>
 8022038:	4b1d      	ldr	r3, [pc, #116]	; (80220b0 <EXTI15_10_IRQHandler+0x648>)
 802203a:	899b      	ldrh	r3, [r3, #12]
 802203c:	2bd1      	cmp	r3, #209	; 0xd1
 802203e:	d823      	bhi.n	8022088 <EXTI15_10_IRQHandler+0x620>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8022040:	2028      	movs	r0, #40	; 0x28
 8022042:	f7df fa9d 	bl	8001580 <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8022046:	4b1b      	ldr	r3, [pc, #108]	; (80220b4 <EXTI15_10_IRQHandler+0x64c>)
 8022048:	681b      	ldr	r3, [r3, #0]
 802204a:	f06f 0201 	mvn.w	r2, #1
 802204e:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8022050:	4b18      	ldr	r3, [pc, #96]	; (80220b4 <EXTI15_10_IRQHandler+0x64c>)
 8022052:	681b      	ldr	r3, [r3, #0]
 8022054:	2200      	movs	r2, #0
 8022056:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8022058:	4816      	ldr	r0, [pc, #88]	; (80220b4 <EXTI15_10_IRQHandler+0x64c>)
 802205a:	f7e7 fc69 	bl	8009930 <HAL_TIM_Base_Start_IT>
			touch_count = 0;
 802205e:	4b16      	ldr	r3, [pc, #88]	; (80220b8 <EXTI15_10_IRQHandler+0x650>)
 8022060:	2200      	movs	r2, #0
 8022062:	701a      	strb	r2, [r3, #0]
			if(display.timemode == 0) {
 8022064:	4b16      	ldr	r3, [pc, #88]	; (80220c0 <EXTI15_10_IRQHandler+0x658>)
 8022066:	781b      	ldrb	r3, [r3, #0]
 8022068:	2b00      	cmp	r3, #0
 802206a:	d106      	bne.n	802207a <EXTI15_10_IRQHandler+0x612>
				display.timemode = 1;
 802206c:	4b14      	ldr	r3, [pc, #80]	; (80220c0 <EXTI15_10_IRQHandler+0x658>)
 802206e:	2201      	movs	r2, #1
 8022070:	701a      	strb	r2, [r3, #0]
				display.trackbarmode = 1;
 8022072:	4b13      	ldr	r3, [pc, #76]	; (80220c0 <EXTI15_10_IRQHandler+0x658>)
 8022074:	2201      	movs	r2, #1
 8022076:	711a      	strb	r2, [r3, #4]
			if(display.timemode == 0) {
 8022078:	e00d      	b.n	8022096 <EXTI15_10_IRQHandler+0x62e>
			}
			else {
				display.timemode = 0;
 802207a:	4b11      	ldr	r3, [pc, #68]	; (80220c0 <EXTI15_10_IRQHandler+0x658>)
 802207c:	2200      	movs	r2, #0
 802207e:	701a      	strb	r2, [r3, #0]
				display.trackbarmode = 0;
 8022080:	4b0f      	ldr	r3, [pc, #60]	; (80220c0 <EXTI15_10_IRQHandler+0x658>)
 8022082:	2200      	movs	r2, #0
 8022084:	711a      	strb	r2, [r3, #4]
			if(display.timemode == 0) {
 8022086:	e006      	b.n	8022096 <EXTI15_10_IRQHandler+0x62e>
			}
		}
		else {
			touch_count = 0;
 8022088:	4b0b      	ldr	r3, [pc, #44]	; (80220b8 <EXTI15_10_IRQHandler+0x650>)
 802208a:	2200      	movs	r2, #0
 802208c:	701a      	strb	r2, [r3, #0]
 802208e:	e002      	b.n	8022096 <EXTI15_10_IRQHandler+0x62e>
			if(menu_mode == 2) {
 8022090:	bf00      	nop
 8022092:	e000      	b.n	8022096 <EXTI15_10_IRQHandler+0x62e>
			if(ts_State.touchX[0] < 200) {
 8022094:	bf00      	nop
				if(stretch > 4) stretch = 4;
			}
			touch_count++;
		}
	}*/
	BSP_TS_ResetTouchData(&ts_State);
 8022096:	4806      	ldr	r0, [pc, #24]	; (80220b0 <EXTI15_10_IRQHandler+0x648>)
 8022098:	f7ff fb48 	bl	802172c <BSP_TS_ResetTouchData>
	BSP_TS_ITClear();
 802209c:	f7ff fb36 	bl	802170c <BSP_TS_ITClear>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80220a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80220a4:	f7e0 ff90 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80220a8:	bf00      	nop
 80220aa:	3708      	adds	r7, #8
 80220ac:	46bd      	mov	sp, r7
 80220ae:	bd80      	pop	{r7, pc}
 80220b0:	2000e6f0 	.word	0x2000e6f0
 80220b4:	20018230 	.word	0x20018230
 80220b8:	20018195 	.word	0x20018195
 80220bc:	200007e0 	.word	0x200007e0
 80220c0:	200008fc 	.word	0x200008fc

080220c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80220c4:	b580      	push	{r7, lr}
 80220c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(trak.state == STOPPED) {
 80220c8:	4b10      	ldr	r3, [pc, #64]	; (802210c <TIM8_UP_TIM13_IRQHandler+0x48>)
 80220ca:	781b      	ldrb	r3, [r3, #0]
 80220cc:	2b01      	cmp	r3, #1
 80220ce:	d106      	bne.n	80220de <TIM8_UP_TIM13_IRQHandler+0x1a>
		spi_tx[2] ^= (1 << 0);
 80220d0:	4b0f      	ldr	r3, [pc, #60]	; (8022110 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 80220d2:	789b      	ldrb	r3, [r3, #2]
 80220d4:	f083 0301 	eor.w	r3, r3, #1
 80220d8:	b2da      	uxtb	r2, r3
 80220da:	4b0d      	ldr	r3, [pc, #52]	; (8022110 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 80220dc:	709a      	strb	r2, [r3, #2]
	}
	if(trak.state == SETCUE) {
 80220de:	4b0b      	ldr	r3, [pc, #44]	; (802210c <TIM8_UP_TIM13_IRQHandler+0x48>)
 80220e0:	781b      	ldrb	r3, [r3, #0]
 80220e2:	2b02      	cmp	r3, #2
 80220e4:	d10d      	bne.n	8022102 <TIM8_UP_TIM13_IRQHandler+0x3e>
		spi_tx[2] ^= (1 << 0);
 80220e6:	4b0a      	ldr	r3, [pc, #40]	; (8022110 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 80220e8:	789b      	ldrb	r3, [r3, #2]
 80220ea:	f083 0301 	eor.w	r3, r3, #1
 80220ee:	b2da      	uxtb	r2, r3
 80220f0:	4b07      	ldr	r3, [pc, #28]	; (8022110 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 80220f2:	709a      	strb	r2, [r3, #2]
		spi_tx[2] ^= (1 << 1);
 80220f4:	4b06      	ldr	r3, [pc, #24]	; (8022110 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 80220f6:	789b      	ldrb	r3, [r3, #2]
 80220f8:	f083 0302 	eor.w	r3, r3, #2
 80220fc:	b2da      	uxtb	r2, r3
 80220fe:	4b04      	ldr	r3, [pc, #16]	; (8022110 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 8022100:	709a      	strb	r2, [r3, #2]
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8022102:	4804      	ldr	r0, [pc, #16]	; (8022114 <TIM8_UP_TIM13_IRQHandler+0x50>)
 8022104:	f7e7 fd34 	bl	8009b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8022108:	bf00      	nop
 802210a:	bd80      	pop	{r7, pc}
 802210c:	2000e6e0 	.word	0x2000e6e0
 8022110:	20000054 	.word	0x20000054
 8022114:	200182b0 	.word	0x200182b0

08022118 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8022118:	b580      	push	{r7, lr}
 802211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(pulses != old_pulses) {
 802211c:	4b2c      	ldr	r3, [pc, #176]	; (80221d0 <TIM5_IRQHandler+0xb8>)
 802211e:	681a      	ldr	r2, [r3, #0]
 8022120:	4b2c      	ldr	r3, [pc, #176]	; (80221d4 <TIM5_IRQHandler+0xbc>)
 8022122:	681b      	ldr	r3, [r3, #0]
 8022124:	429a      	cmp	r2, r3
 8022126:	d04a      	beq.n	80221be <TIM5_IRQHandler+0xa6>
		if(pulses != 0) {
 8022128:	4b29      	ldr	r3, [pc, #164]	; (80221d0 <TIM5_IRQHandler+0xb8>)
 802212a:	681b      	ldr	r3, [r3, #0]
 802212c:	2b00      	cmp	r3, #0
 802212e:	d024      	beq.n	802217a <TIM5_IRQHandler+0x62>
			New_frequency = (uint32_t)((trak.bitrate / 2)
 8022130:	4b29      	ldr	r3, [pc, #164]	; (80221d8 <TIM5_IRQHandler+0xc0>)
 8022132:	891b      	ldrh	r3, [r3, #8]
 8022134:	085b      	lsrs	r3, r3, #1
 8022136:	b29b      	uxth	r3, r3
 8022138:	ee07 3a90 	vmov	s15, r3
					*(1 + trak.percent + jog_sensitivity*pulses));
 802213c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022140:	4b25      	ldr	r3, [pc, #148]	; (80221d8 <TIM5_IRQHandler+0xc0>)
 8022142:	edd3 7a01 	vldr	s15, [r3, #4]
 8022146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802214a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 802214e:	4b20      	ldr	r3, [pc, #128]	; (80221d0 <TIM5_IRQHandler+0xb8>)
 8022150:	681b      	ldr	r3, [r3, #0]
 8022152:	ee07 3a90 	vmov	s15, r3
 8022156:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 802215a:	4b20      	ldr	r3, [pc, #128]	; (80221dc <TIM5_IRQHandler+0xc4>)
 802215c:	edd3 7a00 	vldr	s15, [r3]
 8022160:	ee66 7a27 	vmul.f32	s15, s12, s15
 8022164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022168:	ee67 7a27 	vmul.f32	s15, s14, s15
			New_frequency = (uint32_t)((trak.bitrate / 2)
 802216c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022170:	ee17 2a90 	vmov	r2, s15
 8022174:	4b1a      	ldr	r3, [pc, #104]	; (80221e0 <TIM5_IRQHandler+0xc8>)
 8022176:	601a      	str	r2, [r3, #0]
 8022178:	e016      	b.n	80221a8 <TIM5_IRQHandler+0x90>
		}
		else {
			New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 802217a:	4b17      	ldr	r3, [pc, #92]	; (80221d8 <TIM5_IRQHandler+0xc0>)
 802217c:	891b      	ldrh	r3, [r3, #8]
 802217e:	085b      	lsrs	r3, r3, #1
 8022180:	b29b      	uxth	r3, r3
 8022182:	ee07 3a90 	vmov	s15, r3
 8022186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802218a:	4b13      	ldr	r3, [pc, #76]	; (80221d8 <TIM5_IRQHandler+0xc0>)
 802218c:	edd3 7a01 	vldr	s15, [r3, #4]
 8022190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022198:	ee67 7a27 	vmul.f32	s15, s14, s15
 802219c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80221a0:	ee17 2a90 	vmov	r2, s15
 80221a4:	4b0e      	ldr	r3, [pc, #56]	; (80221e0 <TIM5_IRQHandler+0xc8>)
 80221a6:	601a      	str	r2, [r3, #0]
		}
		BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 80221a8:	4b0d      	ldr	r3, [pc, #52]	; (80221e0 <TIM5_IRQHandler+0xc8>)
 80221aa:	681b      	ldr	r3, [r3, #0]
 80221ac:	2200      	movs	r2, #0
 80221ae:	4619      	mov	r1, r3
 80221b0:	480c      	ldr	r0, [pc, #48]	; (80221e4 <TIM5_IRQHandler+0xcc>)
 80221b2:	f7fe fe77 	bl	8020ea4 <BSP_AUDIO_OUT_ClockConfig>
		old_pulses = pulses;
 80221b6:	4b06      	ldr	r3, [pc, #24]	; (80221d0 <TIM5_IRQHandler+0xb8>)
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	4a06      	ldr	r2, [pc, #24]	; (80221d4 <TIM5_IRQHandler+0xbc>)
 80221bc:	6013      	str	r3, [r2, #0]
	}
	pulses = 0;
 80221be:	4b04      	ldr	r3, [pc, #16]	; (80221d0 <TIM5_IRQHandler+0xb8>)
 80221c0:	2200      	movs	r2, #0
 80221c2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80221c4:	4808      	ldr	r0, [pc, #32]	; (80221e8 <TIM5_IRQHandler+0xd0>)
 80221c6:	f7e7 fcd3 	bl	8009b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80221ca:	bf00      	nop
 80221cc:	bd80      	pop	{r7, pc}
 80221ce:	bf00      	nop
 80221d0:	200181a4 	.word	0x200181a4
 80221d4:	200181a8 	.word	0x200181a8
 80221d8:	2000e6e0 	.word	0x2000e6e0
 80221dc:	2000009c 	.word	0x2000009c
 80221e0:	200000a0 	.word	0x200000a0
 80221e4:	20017f08 	.word	0x20017f08
 80221e8:	200181f0 	.word	0x200181f0

080221ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80221ec:	b580      	push	{r7, lr}
 80221ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80221f0:	2028      	movs	r0, #40	; 0x28
 80221f2:	f7ff fb55 	bl	80218a0 <__NVIC_EnableIRQ>
	HAL_TIM_Base_Stop_IT(&htim6);
 80221f6:	4805      	ldr	r0, [pc, #20]	; (802220c <TIM6_DAC_IRQHandler+0x20>)
 80221f8:	f7e7 fc2a 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
	touch_count = 0;
 80221fc:	4b04      	ldr	r3, [pc, #16]	; (8022210 <TIM6_DAC_IRQHandler+0x24>)
 80221fe:	2200      	movs	r2, #0
 8022200:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8022202:	4802      	ldr	r0, [pc, #8]	; (802220c <TIM6_DAC_IRQHandler+0x20>)
 8022204:	f7e7 fcb4 	bl	8009b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8022208:	bf00      	nop
 802220a:	bd80      	pop	{r7, pc}
 802220c:	20018230 	.word	0x20018230
 8022210:	20018195 	.word	0x20018195

08022214 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8022214:	b580      	push	{r7, lr}
 8022216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(display.trackbarmode == 0) display.trackbarmode = 1;
 8022218:	4b07      	ldr	r3, [pc, #28]	; (8022238 <TIM7_IRQHandler+0x24>)
 802221a:	791b      	ldrb	r3, [r3, #4]
 802221c:	2b00      	cmp	r3, #0
 802221e:	d103      	bne.n	8022228 <TIM7_IRQHandler+0x14>
 8022220:	4b05      	ldr	r3, [pc, #20]	; (8022238 <TIM7_IRQHandler+0x24>)
 8022222:	2201      	movs	r2, #1
 8022224:	711a      	strb	r2, [r3, #4]
 8022226:	e002      	b.n	802222e <TIM7_IRQHandler+0x1a>
	else display.trackbarmode = 0;
 8022228:	4b03      	ldr	r3, [pc, #12]	; (8022238 <TIM7_IRQHandler+0x24>)
 802222a:	2200      	movs	r2, #0
 802222c:	711a      	strb	r2, [r3, #4]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 802222e:	4803      	ldr	r0, [pc, #12]	; (802223c <TIM7_IRQHandler+0x28>)
 8022230:	f7e7 fc9e 	bl	8009b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8022234:	bf00      	nop
 8022236:	bd80      	pop	{r7, pc}
 8022238:	200008fc 	.word	0x200008fc
 802223c:	20018270 	.word	0x20018270

08022240 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8022240:	b580      	push	{r7, lr}
 8022242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8022244:	4802      	ldr	r0, [pc, #8]	; (8022250 <DMA2_Stream4_IRQHandler+0x10>)
 8022246:	f7df fd11 	bl	8001c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 802224a:	bf00      	nop
 802224c:	bd80      	pop	{r7, pc}
 802224e:	bf00      	nop
 8022250:	20017f8c 	.word	0x20017f8c

08022254 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8022254:	b480      	push	{r7}
 8022256:	af00      	add	r7, sp, #0
  /* USER CODE END OTG_FS_IRQn 0 */
  //HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8022258:	bf00      	nop
 802225a:	46bd      	mov	sp, r7
 802225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022260:	4770      	bx	lr
	...

08022264 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8022264:	b580      	push	{r7, lr}
 8022266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8022268:	4802      	ldr	r0, [pc, #8]	; (8022274 <OTG_HS_IRQHandler+0x10>)
 802226a:	f7e1 f95d 	bl	8003528 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 802226e:	bf00      	nop
 8022270:	bd80      	pop	{r7, pc}
 8022272:	bf00      	nop
 8022274:	20018b98 	.word	0x20018b98

08022278 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8022278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802227c:	ed2d 8b02 	vpush	{d8}
 8022280:	b094      	sub	sp, #80	; 0x50
 8022282:	af00      	add	r7, sp, #0
 8022284:	63f8      	str	r0, [r7, #60]	; 0x3c
	switch(spi_rx[1] & 0xF0) {
 8022286:	4b98      	ldr	r3, [pc, #608]	; (80224e8 <HAL_SPI_TxRxCpltCallback+0x270>)
 8022288:	785b      	ldrb	r3, [r3, #1]
 802228a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802228e:	2be0      	cmp	r3, #224	; 0xe0
 8022290:	f000 85bf 	beq.w	8022e12 <HAL_SPI_TxRxCpltCallback+0xb9a>
 8022294:	2be0      	cmp	r3, #224	; 0xe0
 8022296:	f300 8630 	bgt.w	8022efa <HAL_SPI_TxRxCpltCallback+0xc82>
 802229a:	2bb0      	cmp	r3, #176	; 0xb0
 802229c:	f000 84bb 	beq.w	8022c16 <HAL_SPI_TxRxCpltCallback+0x99e>
 80222a0:	2bb0      	cmp	r3, #176	; 0xb0
 80222a2:	f300 862a 	bgt.w	8022efa <HAL_SPI_TxRxCpltCallback+0xc82>
 80222a6:	2b80      	cmp	r3, #128	; 0x80
 80222a8:	f000 83b0 	beq.w	8022a0c <HAL_SPI_TxRxCpltCallback+0x794>
 80222ac:	2b90      	cmp	r3, #144	; 0x90
 80222ae:	f040 8624 	bne.w	8022efa <HAL_SPI_TxRxCpltCallback+0xc82>
	case 0x90: {
		switch(spi_rx[2]) {
 80222b2:	4b8d      	ldr	r3, [pc, #564]	; (80224e8 <HAL_SPI_TxRxCpltCallback+0x270>)
 80222b4:	789b      	ldrb	r3, [r3, #2]
 80222b6:	3b40      	subs	r3, #64	; 0x40
 80222b8:	2b0d      	cmp	r3, #13
 80222ba:	f200 839d 	bhi.w	80229f8 <HAL_SPI_TxRxCpltCallback+0x780>
 80222be:	a201      	add	r2, pc, #4	; (adr r2, 80222c4 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80222c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80222c4:	080223e3 	.word	0x080223e3
 80222c8:	0802240b 	.word	0x0802240b
 80222cc:	080229f9 	.word	0x080229f9
 80222d0:	08022433 	.word	0x08022433
 80222d4:	0802245b 	.word	0x0802245b
 80222d8:	080224c3 	.word	0x080224c3
 80222dc:	080222fd 	.word	0x080222fd
 80222e0:	0802237f 	.word	0x0802237f
 80222e4:	080223bb 	.word	0x080223bb
 80222e8:	080228c7 	.word	0x080228c7
 80222ec:	08022977 	.word	0x08022977
 80222f0:	08022557 	.word	0x08022557
 80222f4:	080226ff 	.word	0x080226ff
 80222f8:	0802231d 	.word	0x0802231d
		case JET: {
			if(display.quantize == 1) {
 80222fc:	4b7b      	ldr	r3, [pc, #492]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 80222fe:	7c5b      	ldrb	r3, [r3, #17]
 8022300:	2b01      	cmp	r3, #1
 8022302:	d106      	bne.n	8022312 <HAL_SPI_TxRxCpltCallback+0x9a>
				display.loopstart = QuantizePosition(0);
 8022304:	2000      	movs	r0, #0
 8022306:	f7fa fb37 	bl	801c978 <QuantizePosition>
 802230a:	4603      	mov	r3, r0
 802230c:	4a77      	ldr	r2, [pc, #476]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 802230e:	6093      	str	r3, [r2, #8]
			}
			else {
				display.loopstart = file_pos_wide;
			}
			break;
 8022310:	e37b      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
				display.loopstart = file_pos_wide;
 8022312:	4b77      	ldr	r3, [pc, #476]	; (80224f0 <HAL_SPI_TxRxCpltCallback+0x278>)
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	4a75      	ldr	r2, [pc, #468]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 8022318:	6093      	str	r3, [r2, #8]
			break;
 802231a:	e376      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
		}
		case JOG: {
			if(menu_mode == 1) {
 802231c:	4b75      	ldr	r3, [pc, #468]	; (80224f4 <HAL_SPI_TxRxCpltCallback+0x27c>)
 802231e:	f993 3000 	ldrsb.w	r3, [r3]
 8022322:	2b01      	cmp	r3, #1
 8022324:	f040 836a 	bne.w	80229fc <HAL_SPI_TxRxCpltCallback+0x784>
				bOutOfData = 1;
 8022328:	4b73      	ldr	r3, [pc, #460]	; (80224f8 <HAL_SPI_TxRxCpltCallback+0x280>)
 802232a:	2201      	movs	r2, #1
 802232c:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 802232e:	4b73      	ldr	r3, [pc, #460]	; (80224fc <HAL_SPI_TxRxCpltCallback+0x284>)
 8022330:	2203      	movs	r2, #3
 8022332:	601a      	str	r2, [r3, #0]
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8022334:	2028      	movs	r0, #40	; 0x28
 8022336:	f7df f923 	bl	8001580 <HAL_NVIC_DisableIRQ>
				__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 802233a:	4b71      	ldr	r3, [pc, #452]	; (8022500 <HAL_SPI_TxRxCpltCallback+0x288>)
 802233c:	681b      	ldr	r3, [r3, #0]
 802233e:	f06f 0201 	mvn.w	r2, #1
 8022342:	611a      	str	r2, [r3, #16]
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 8022344:	4b6e      	ldr	r3, [pc, #440]	; (8022500 <HAL_SPI_TxRxCpltCallback+0x288>)
 8022346:	681b      	ldr	r3, [r3, #0]
 8022348:	2200      	movs	r2, #0
 802234a:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim6);
 802234c:	486c      	ldr	r0, [pc, #432]	; (8022500 <HAL_SPI_TxRxCpltCallback+0x288>)
 802234e:	f7e7 faef 	bl	8009930 <HAL_TIM_Base_Start_IT>
				Track_number = Mark_number + str_increment;
 8022352:	4b6c      	ldr	r3, [pc, #432]	; (8022504 <HAL_SPI_TxRxCpltCallback+0x28c>)
 8022354:	681a      	ldr	r2, [r3, #0]
 8022356:	4b6c      	ldr	r3, [pc, #432]	; (8022508 <HAL_SPI_TxRxCpltCallback+0x290>)
 8022358:	681b      	ldr	r3, [r3, #0]
 802235a:	4413      	add	r3, r2
 802235c:	4a6b      	ldr	r2, [pc, #428]	; (802250c <HAL_SPI_TxRxCpltCallback+0x294>)
 802235e:	6013      	str	r3, [r2, #0]
				if(Track_number >= Total_tracks) Track_number = 0;
 8022360:	4b6b      	ldr	r3, [pc, #428]	; (8022510 <HAL_SPI_TxRxCpltCallback+0x298>)
 8022362:	881b      	ldrh	r3, [r3, #0]
 8022364:	461a      	mov	r2, r3
 8022366:	4b69      	ldr	r3, [pc, #420]	; (802250c <HAL_SPI_TxRxCpltCallback+0x294>)
 8022368:	681b      	ldr	r3, [r3, #0]
 802236a:	429a      	cmp	r2, r3
 802236c:	dc02      	bgt.n	8022374 <HAL_SPI_TxRxCpltCallback+0xfc>
 802236e:	4b67      	ldr	r3, [pc, #412]	; (802250c <HAL_SPI_TxRxCpltCallback+0x294>)
 8022370:	2200      	movs	r2, #0
 8022372:	601a      	str	r2, [r3, #0]
				String_number = -1;
 8022374:	4b67      	ldr	r3, [pc, #412]	; (8022514 <HAL_SPI_TxRxCpltCallback+0x29c>)
 8022376:	f04f 32ff 	mov.w	r2, #4294967295
 802237a:	601a      	str	r2, [r3, #0]
			}
			break;
 802237c:	e33e      	b.n	80229fc <HAL_SPI_TxRxCpltCallback+0x784>
		}
		case ZIP: {
			if(display.quantize == 1) {
 802237e:	4b5b      	ldr	r3, [pc, #364]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 8022380:	7c5b      	ldrb	r3, [r3, #17]
 8022382:	2b01      	cmp	r3, #1
 8022384:	d106      	bne.n	8022394 <HAL_SPI_TxRxCpltCallback+0x11c>
				display.loopend = QuantizePosition(0);
 8022386:	2000      	movs	r0, #0
 8022388:	f7fa faf6 	bl	801c978 <QuantizePosition>
 802238c:	4603      	mov	r3, r0
 802238e:	4a57      	ldr	r2, [pc, #348]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 8022390:	60d3      	str	r3, [r2, #12]
 8022392:	e003      	b.n	802239c <HAL_SPI_TxRxCpltCallback+0x124>
			}
			else {
				display.loopend = file_pos_wide;
 8022394:	4b56      	ldr	r3, [pc, #344]	; (80224f0 <HAL_SPI_TxRxCpltCallback+0x278>)
 8022396:	681b      	ldr	r3, [r3, #0]
 8022398:	4a54      	ldr	r2, [pc, #336]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 802239a:	60d3      	str	r3, [r2, #12]
			}
			if(display.loop == 0) display.loop = 1;
 802239c:	4b53      	ldr	r3, [pc, #332]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 802239e:	7c1b      	ldrb	r3, [r3, #16]
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	d102      	bne.n	80223aa <HAL_SPI_TxRxCpltCallback+0x132>
 80223a4:	4b51      	ldr	r3, [pc, #324]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 80223a6:	2201      	movs	r2, #1
 80223a8:	741a      	strb	r2, [r3, #16]
			GoToPosition(display.loopstart);
 80223aa:	4b50      	ldr	r3, [pc, #320]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 80223ac:	689b      	ldr	r3, [r3, #8]
 80223ae:	4618      	mov	r0, r3
 80223b0:	f002 f98c 	bl	80246cc <GoToPosition>
			BSP_AUDIO_OUT_Resume();
 80223b4:	f7fe fc62 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
			break;
 80223b8:	e327      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
		}
		case WAH: {
			button_flag ^= (1 << 2);
 80223ba:	4b57      	ldr	r3, [pc, #348]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80223bc:	881b      	ldrh	r3, [r3, #0]
 80223be:	f083 0304 	eor.w	r3, r3, #4
 80223c2:	b29a      	uxth	r2, r3
 80223c4:	4b54      	ldr	r3, [pc, #336]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80223c6:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 80223c8:	4b54      	ldr	r3, [pc, #336]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 80223ca:	681b      	ldr	r3, [r3, #0]
 80223cc:	f06f 0201 	mvn.w	r2, #1
 80223d0:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 80223d2:	4b52      	ldr	r3, [pc, #328]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 80223d4:	681b      	ldr	r3, [r3, #0]
 80223d6:	2200      	movs	r2, #0
 80223d8:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 80223da:	4850      	ldr	r0, [pc, #320]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 80223dc:	f7e7 faa8 	bl	8009930 <HAL_TIM_Base_Start_IT>
			break;
 80223e0:	e313      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
		}
		case HOLD: {
			button_flag ^= (1 << 3);
 80223e2:	4b4d      	ldr	r3, [pc, #308]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80223e4:	881b      	ldrh	r3, [r3, #0]
 80223e6:	f083 0308 	eor.w	r3, r3, #8
 80223ea:	b29a      	uxth	r2, r3
 80223ec:	4b4a      	ldr	r3, [pc, #296]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80223ee:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 80223f0:	4b4a      	ldr	r3, [pc, #296]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 80223f2:	681b      	ldr	r3, [r3, #0]
 80223f4:	f06f 0201 	mvn.w	r2, #1
 80223f8:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 80223fa:	4b48      	ldr	r3, [pc, #288]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	2200      	movs	r2, #0
 8022400:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 8022402:	4846      	ldr	r0, [pc, #280]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 8022404:	f7e7 fa94 	bl	8009930 <HAL_TIM_Base_Start_IT>
			break;
 8022408:	e2ff      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
		}
		case TIME: {
			button_flag ^= (1 << 0);
 802240a:	4b43      	ldr	r3, [pc, #268]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 802240c:	881b      	ldrh	r3, [r3, #0]
 802240e:	f083 0301 	eor.w	r3, r3, #1
 8022412:	b29a      	uxth	r2, r3
 8022414:	4b40      	ldr	r3, [pc, #256]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8022416:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 8022418:	4b40      	ldr	r3, [pc, #256]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	f06f 0201 	mvn.w	r2, #1
 8022420:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 8022422:	4b3e      	ldr	r3, [pc, #248]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	2200      	movs	r2, #0
 8022428:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 802242a:	483c      	ldr	r0, [pc, #240]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 802242c:	f7e7 fa80 	bl	8009930 <HAL_TIM_Base_Start_IT>
			break;
 8022430:	e2eb      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
		}
		case MASTERTEMPO: {
			button_flag ^= (1 << 1);
 8022432:	4b39      	ldr	r3, [pc, #228]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8022434:	881b      	ldrh	r3, [r3, #0]
 8022436:	f083 0302 	eor.w	r3, r3, #2
 802243a:	b29a      	uxth	r2, r3
 802243c:	4b36      	ldr	r3, [pc, #216]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 802243e:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 8022440:	4b36      	ldr	r3, [pc, #216]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 8022442:	681b      	ldr	r3, [r3, #0]
 8022444:	f06f 0201 	mvn.w	r2, #1
 8022448:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 802244a:	4b34      	ldr	r3, [pc, #208]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 802244c:	681b      	ldr	r3, [r3, #0]
 802244e:	2200      	movs	r2, #0
 8022450:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 8022452:	4832      	ldr	r0, [pc, #200]	; (802251c <HAL_SPI_TxRxCpltCallback+0x2a4>)
 8022454:	f7e7 fa6c 	bl	8009930 <HAL_TIM_Base_Start_IT>
			break;
 8022458:	e2d7      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
		}
		case TRACKBACK: {
			if(!(button_flag & (1 << 2))) {
 802245a:	4b2f      	ldr	r3, [pc, #188]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 802245c:	881b      	ldrh	r3, [r3, #0]
 802245e:	f003 0304 	and.w	r3, r3, #4
 8022462:	2b00      	cmp	r3, #0
 8022464:	d10b      	bne.n	802247e <HAL_SPI_TxRxCpltCallback+0x206>
				bOutOfData = 1;
 8022466:	4b24      	ldr	r3, [pc, #144]	; (80224f8 <HAL_SPI_TxRxCpltCallback+0x280>)
 8022468:	2201      	movs	r2, #1
 802246a:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 802246c:	4b23      	ldr	r3, [pc, #140]	; (80224fc <HAL_SPI_TxRxCpltCallback+0x284>)
 802246e:	2203      	movs	r2, #3
 8022470:	601a      	str	r2, [r3, #0]
				Track_number--;
 8022472:	4b26      	ldr	r3, [pc, #152]	; (802250c <HAL_SPI_TxRxCpltCallback+0x294>)
 8022474:	681b      	ldr	r3, [r3, #0]
 8022476:	3b01      	subs	r3, #1
 8022478:	4a24      	ldr	r2, [pc, #144]	; (802250c <HAL_SPI_TxRxCpltCallback+0x294>)
 802247a:	6013      	str	r3, [r2, #0]
				if(file_pos_wide >= display.loopend) {
					GoToPosition(display.loopstart);
					BSP_AUDIO_OUT_Resume();
				}
			}
			break;
 802247c:	e2c0      	b.n	8022a00 <HAL_SPI_TxRxCpltCallback+0x788>
				display.loopend = (display.loopend+display.loopstart)/2;
 802247e:	4b1b      	ldr	r3, [pc, #108]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 8022480:	68da      	ldr	r2, [r3, #12]
 8022482:	4b1a      	ldr	r3, [pc, #104]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 8022484:	689b      	ldr	r3, [r3, #8]
 8022486:	4413      	add	r3, r2
 8022488:	085b      	lsrs	r3, r3, #1
 802248a:	4a18      	ldr	r2, [pc, #96]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 802248c:	60d3      	str	r3, [r2, #12]
				if(display.loopend - display.loopstart < 1)
 802248e:	4b17      	ldr	r3, [pc, #92]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 8022490:	68da      	ldr	r2, [r3, #12]
 8022492:	4b16      	ldr	r3, [pc, #88]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 8022494:	689b      	ldr	r3, [r3, #8]
 8022496:	429a      	cmp	r2, r3
 8022498:	d104      	bne.n	80224a4 <HAL_SPI_TxRxCpltCallback+0x22c>
					display.loopend = display.loopstart + 1;
 802249a:	4b14      	ldr	r3, [pc, #80]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 802249c:	689b      	ldr	r3, [r3, #8]
 802249e:	3301      	adds	r3, #1
 80224a0:	4a12      	ldr	r2, [pc, #72]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 80224a2:	60d3      	str	r3, [r2, #12]
				if(file_pos_wide >= display.loopend) {
 80224a4:	4b11      	ldr	r3, [pc, #68]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 80224a6:	68da      	ldr	r2, [r3, #12]
 80224a8:	4b11      	ldr	r3, [pc, #68]	; (80224f0 <HAL_SPI_TxRxCpltCallback+0x278>)
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	429a      	cmp	r2, r3
 80224ae:	f200 82a7 	bhi.w	8022a00 <HAL_SPI_TxRxCpltCallback+0x788>
					GoToPosition(display.loopstart);
 80224b2:	4b0e      	ldr	r3, [pc, #56]	; (80224ec <HAL_SPI_TxRxCpltCallback+0x274>)
 80224b4:	689b      	ldr	r3, [r3, #8]
 80224b6:	4618      	mov	r0, r3
 80224b8:	f002 f908 	bl	80246cc <GoToPosition>
					BSP_AUDIO_OUT_Resume();
 80224bc:	f7fe fbde 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
			break;
 80224c0:	e29e      	b.n	8022a00 <HAL_SPI_TxRxCpltCallback+0x788>
		}
		case TRACKFORWARD: {
			if(!(button_flag & (1 << 2))) {
 80224c2:	4b15      	ldr	r3, [pc, #84]	; (8022518 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80224c4:	881b      	ldrh	r3, [r3, #0]
 80224c6:	f003 0304 	and.w	r3, r3, #4
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	d128      	bne.n	8022520 <HAL_SPI_TxRxCpltCallback+0x2a8>
				bOutOfData = 1;
 80224ce:	4b0a      	ldr	r3, [pc, #40]	; (80224f8 <HAL_SPI_TxRxCpltCallback+0x280>)
 80224d0:	2201      	movs	r2, #1
 80224d2:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 80224d4:	4b09      	ldr	r3, [pc, #36]	; (80224fc <HAL_SPI_TxRxCpltCallback+0x284>)
 80224d6:	2203      	movs	r2, #3
 80224d8:	601a      	str	r2, [r3, #0]
				Track_number++;
 80224da:	4b0c      	ldr	r3, [pc, #48]	; (802250c <HAL_SPI_TxRxCpltCallback+0x294>)
 80224dc:	681b      	ldr	r3, [r3, #0]
 80224de:	3301      	adds	r3, #1
 80224e0:	4a0a      	ldr	r2, [pc, #40]	; (802250c <HAL_SPI_TxRxCpltCallback+0x294>)
 80224e2:	6013      	str	r3, [r2, #0]
			else {
				display.loopend = display.loopend*2-display.loopstart;
				if(display.loopend >= rekordbox.spectrum_size)
					display.loopend = rekordbox.spectrum_size - 1;
			}
			break;
 80224e4:	e28e      	b.n	8022a04 <HAL_SPI_TxRxCpltCallback+0x78c>
 80224e6:	bf00      	nop
 80224e8:	2000e6dc 	.word	0x2000e6dc
 80224ec:	200008fc 	.word	0x200008fc
 80224f0:	20001e00 	.word	0x20001e00
 80224f4:	200007e0 	.word	0x200007e0
 80224f8:	2000f728 	.word	0x2000f728
 80224fc:	2000f72c 	.word	0x2000f72c
 8022500:	20018230 	.word	0x20018230
 8022504:	20000094 	.word	0x20000094
 8022508:	2001819c 	.word	0x2001819c
 802250c:	20000aa8 	.word	0x20000aa8
 8022510:	20001f94 	.word	0x20001f94
 8022514:	20000090 	.word	0x20000090
 8022518:	200181a0 	.word	0x200181a0
 802251c:	200182f0 	.word	0x200182f0
				display.loopend = display.loopend*2-display.loopstart;
 8022520:	4bb2      	ldr	r3, [pc, #712]	; (80227ec <HAL_SPI_TxRxCpltCallback+0x574>)
 8022522:	68db      	ldr	r3, [r3, #12]
 8022524:	005a      	lsls	r2, r3, #1
 8022526:	4bb1      	ldr	r3, [pc, #708]	; (80227ec <HAL_SPI_TxRxCpltCallback+0x574>)
 8022528:	689b      	ldr	r3, [r3, #8]
 802252a:	1ad3      	subs	r3, r2, r3
 802252c:	4aaf      	ldr	r2, [pc, #700]	; (80227ec <HAL_SPI_TxRxCpltCallback+0x574>)
 802252e:	60d3      	str	r3, [r2, #12]
				if(display.loopend >= rekordbox.spectrum_size)
 8022530:	4bae      	ldr	r3, [pc, #696]	; (80227ec <HAL_SPI_TxRxCpltCallback+0x574>)
 8022532:	68da      	ldr	r2, [r3, #12]
 8022534:	4bae      	ldr	r3, [pc, #696]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 8022536:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802253a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 802253e:	429a      	cmp	r2, r3
 8022540:	f0c0 8260 	bcc.w	8022a04 <HAL_SPI_TxRxCpltCallback+0x78c>
					display.loopend = rekordbox.spectrum_size - 1;
 8022544:	4baa      	ldr	r3, [pc, #680]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 8022546:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802254a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 802254e:	3b01      	subs	r3, #1
 8022550:	4aa6      	ldr	r2, [pc, #664]	; (80227ec <HAL_SPI_TxRxCpltCallback+0x574>)
 8022552:	60d3      	str	r3, [r2, #12]
			break;
 8022554:	e256      	b.n	8022a04 <HAL_SPI_TxRxCpltCallback+0x78c>
		}
		case SCANBACK: {
			if(!(button_flag & (1 << 2))) {
 8022556:	4ba7      	ldr	r3, [pc, #668]	; (80227f4 <HAL_SPI_TxRxCpltCallback+0x57c>)
 8022558:	881b      	ldrh	r3, [r3, #0]
 802255a:	f003 0304 	and.w	r3, r3, #4
 802255e:	2b00      	cmp	r3, #0
 8022560:	d173      	bne.n	802264a <HAL_SPI_TxRxCpltCallback+0x3d2>
				if(display.quantize == 1) {
 8022562:	4ba2      	ldr	r3, [pc, #648]	; (80227ec <HAL_SPI_TxRxCpltCallback+0x574>)
 8022564:	7c5b      	ldrb	r3, [r3, #17]
 8022566:	2b01      	cmp	r3, #1
 8022568:	d108      	bne.n	802257c <HAL_SPI_TxRxCpltCallback+0x304>
					GoToPosition(QuantizePosition(-1));
 802256a:	f04f 30ff 	mov.w	r0, #4294967295
 802256e:	f7fa fa03 	bl	801c978 <QuantizePosition>
 8022572:	4603      	mov	r3, r0
 8022574:	4618      	mov	r0, r3
 8022576:	f002 f8a9 	bl	80246cc <GoToPosition>
 802257a:	e046      	b.n	802260a <HAL_SPI_TxRxCpltCallback+0x392>
				}
				else {
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 802257c:	4b9e      	ldr	r3, [pc, #632]	; (80227f8 <HAL_SPI_TxRxCpltCallback+0x580>)
 802257e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8022582:	499e      	ldr	r1, [pc, #632]	; (80227fc <HAL_SPI_TxRxCpltCallback+0x584>)
 8022584:	1851      	adds	r1, r2, r1
 8022586:	6339      	str	r1, [r7, #48]	; 0x30
 8022588:	f143 33ff 	adc.w	r3, r3, #4294967295
 802258c:	637b      	str	r3, [r7, #52]	; 0x34
 802258e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022592:	f7de fc2b 	bl	8000dec <__aeabi_ul2f>
 8022596:	ee08 0a10 	vmov	s16, r0
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 802259a:	4b97      	ldr	r3, [pc, #604]	; (80227f8 <HAL_SPI_TxRxCpltCallback+0x580>)
 802259c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80225a0:	4997      	ldr	r1, [pc, #604]	; (8022800 <HAL_SPI_TxRxCpltCallback+0x588>)
 80225a2:	6809      	ldr	r1, [r1, #0]
 80225a4:	2000      	movs	r0, #0
 80225a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80225a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80225aa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80225ae:	4621      	mov	r1, r4
 80225b0:	ebb2 0801 	subs.w	r8, r2, r1
 80225b4:	4629      	mov	r1, r5
 80225b6:	eb63 0901 	sbc.w	r9, r3, r1
 80225ba:	4b92      	ldr	r3, [pc, #584]	; (8022804 <HAL_SPI_TxRxCpltCallback+0x58c>)
 80225bc:	681b      	ldr	r3, [r3, #0]
 80225be:	2200      	movs	r2, #0
 80225c0:	623b      	str	r3, [r7, #32]
 80225c2:	627a      	str	r2, [r7, #36]	; 0x24
 80225c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80225c8:	460b      	mov	r3, r1
 80225ca:	ebb8 0303 	subs.w	r3, r8, r3
 80225ce:	61bb      	str	r3, [r7, #24]
 80225d0:	4613      	mov	r3, r2
 80225d2:	eb69 0303 	sbc.w	r3, r9, r3
 80225d6:	61fb      	str	r3, [r7, #28]
 80225d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80225dc:	f7de fc06 	bl	8000dec <__aeabi_ul2f>
 80225e0:	ee07 0a90 	vmov	s15, r0
 80225e4:	ee88 7a27 	vdiv.f32	s14, s16, s15
							*rekordbox.spectrum_size);
 80225e8:	4b81      	ldr	r3, [pc, #516]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 80225ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80225ee:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80225f2:	ee07 3a90 	vmov	s15, r3
 80225f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80225fa:	ee67 7a27 	vmul.f32	s15, s14, s15
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 80225fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022602:	ee17 0a90 	vmov	r0, s15
 8022606:	f002 f861 	bl	80246cc <GoToPosition>
				}
				if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 802260a:	4b7f      	ldr	r3, [pc, #508]	; (8022808 <HAL_SPI_TxRxCpltCallback+0x590>)
 802260c:	781b      	ldrb	r3, [r3, #0]
 802260e:	2b00      	cmp	r3, #0
 8022610:	d102      	bne.n	8022618 <HAL_SPI_TxRxCpltCallback+0x3a0>
 8022612:	f7fe fb33 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
				}
				else {
					spi_tx[2] |= (1 << 1); //turn off CUE led
				}
			}
			break;
 8022616:	e1f8      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
					GetTrackTime();
 8022618:	f001 fdb4 	bl	8024184 <GetTrackTime>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 802261c:	4b7b      	ldr	r3, [pc, #492]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 802261e:	789b      	ldrb	r3, [r3, #2]
 8022620:	2b00      	cmp	r3, #0
 8022622:	d107      	bne.n	8022634 <HAL_SPI_TxRxCpltCallback+0x3bc>
 8022624:	4b79      	ldr	r3, [pc, #484]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 8022626:	789b      	ldrb	r3, [r3, #2]
 8022628:	f043 0302 	orr.w	r3, r3, #2
 802262c:	b2da      	uxtb	r2, r3
 802262e:	4b77      	ldr	r3, [pc, #476]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 8022630:	709a      	strb	r2, [r3, #2]
 8022632:	e006      	b.n	8022642 <HAL_SPI_TxRxCpltCallback+0x3ca>
					else spi_tx[2] &= ~(1 << 1);
 8022634:	4b75      	ldr	r3, [pc, #468]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 8022636:	789b      	ldrb	r3, [r3, #2]
 8022638:	f023 0302 	bic.w	r3, r3, #2
 802263c:	b2da      	uxtb	r2, r3
 802263e:	4b73      	ldr	r3, [pc, #460]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 8022640:	709a      	strb	r2, [r3, #2]
					trak.state = SETCUE;
 8022642:	4b71      	ldr	r3, [pc, #452]	; (8022808 <HAL_SPI_TxRxCpltCallback+0x590>)
 8022644:	2202      	movs	r2, #2
 8022646:	701a      	strb	r2, [r3, #0]
			break;
 8022648:	e1df      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
				rekordbox.currentcue++;
 802264a:	4b69      	ldr	r3, [pc, #420]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 802264c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8022650:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 8022654:	3301      	adds	r3, #1
 8022656:	4a66      	ldr	r2, [pc, #408]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 8022658:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802265c:	f8c2 3d90 	str.w	r3, [r2, #3472]	; 0xd90
				if(rekordbox.currentcue >= rekordbox.cues)
 8022660:	4b63      	ldr	r3, [pc, #396]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 8022662:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8022666:	f8d3 2d90 	ldr.w	r2, [r3, #3472]	; 0xd90
 802266a:	4b61      	ldr	r3, [pc, #388]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 802266c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8022670:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 8022674:	429a      	cmp	r2, r3
 8022676:	db06      	blt.n	8022686 <HAL_SPI_TxRxCpltCallback+0x40e>
					rekordbox.currentcue = 0;
 8022678:	4b5d      	ldr	r3, [pc, #372]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 802267a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802267e:	461a      	mov	r2, r3
 8022680:	2300      	movs	r3, #0
 8022682:	f8c2 3d90 	str.w	r3, [r2, #3472]	; 0xd90
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 8022686:	4b5a      	ldr	r3, [pc, #360]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 8022688:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802268c:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 8022690:	4a57      	ldr	r2, [pc, #348]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 8022692:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 8022696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802269a:	4618      	mov	r0, r3
 802269c:	f002 f816 	bl	80246cc <GoToPosition>
				if(trak.state == PLAYING) {
 80226a0:	4b59      	ldr	r3, [pc, #356]	; (8022808 <HAL_SPI_TxRxCpltCallback+0x590>)
 80226a2:	781b      	ldrb	r3, [r3, #0]
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	d10c      	bne.n	80226c2 <HAL_SPI_TxRxCpltCallback+0x44a>
					BSP_AUDIO_OUT_Resume();
 80226a8:	f7fe fae8 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
					HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 80226ac:	4858      	ldr	r0, [pc, #352]	; (8022810 <HAL_SPI_TxRxCpltCallback+0x598>)
 80226ae:	f7e7 f9cf 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
					spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 80226b2:	4b56      	ldr	r3, [pc, #344]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80226b4:	789b      	ldrb	r3, [r3, #2]
 80226b6:	f023 0301 	bic.w	r3, r3, #1
 80226ba:	b2da      	uxtb	r2, r3
 80226bc:	4b53      	ldr	r3, [pc, #332]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80226be:	709a      	strb	r2, [r3, #2]
 80226c0:	e001      	b.n	80226c6 <HAL_SPI_TxRxCpltCallback+0x44e>
					GetTrackTime();
 80226c2:	f001 fd5f 	bl	8024184 <GetTrackTime>
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 80226c6:	4b4a      	ldr	r3, [pc, #296]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 80226c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80226cc:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 80226d0:	4a47      	ldr	r2, [pc, #284]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 80226d2:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 80226d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80226da:	2b00      	cmp	r3, #0
 80226dc:	d007      	beq.n	80226ee <HAL_SPI_TxRxCpltCallback+0x476>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 80226de:	4b4b      	ldr	r3, [pc, #300]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80226e0:	789b      	ldrb	r3, [r3, #2]
 80226e2:	f023 0302 	bic.w	r3, r3, #2
 80226e6:	b2da      	uxtb	r2, r3
 80226e8:	4b48      	ldr	r3, [pc, #288]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80226ea:	709a      	strb	r2, [r3, #2]
			break;
 80226ec:	e18d      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 80226ee:	4b47      	ldr	r3, [pc, #284]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80226f0:	789b      	ldrb	r3, [r3, #2]
 80226f2:	f043 0302 	orr.w	r3, r3, #2
 80226f6:	b2da      	uxtb	r2, r3
 80226f8:	4b44      	ldr	r3, [pc, #272]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80226fa:	709a      	strb	r2, [r3, #2]
			break;
 80226fc:	e185      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
		}
		case SCANFORWARD: {
			if(!(button_flag & (1 << 2))) {
 80226fe:	4b3d      	ldr	r3, [pc, #244]	; (80227f4 <HAL_SPI_TxRxCpltCallback+0x57c>)
 8022700:	881b      	ldrh	r3, [r3, #0]
 8022702:	f003 0304 	and.w	r3, r3, #4
 8022706:	2b00      	cmp	r3, #0
 8022708:	f040 8084 	bne.w	8022814 <HAL_SPI_TxRxCpltCallback+0x59c>
				if(display.quantize == 1) {
 802270c:	4b37      	ldr	r3, [pc, #220]	; (80227ec <HAL_SPI_TxRxCpltCallback+0x574>)
 802270e:	7c5b      	ldrb	r3, [r3, #17]
 8022710:	2b01      	cmp	r3, #1
 8022712:	d107      	bne.n	8022724 <HAL_SPI_TxRxCpltCallback+0x4ac>
					GoToPosition(QuantizePosition(1));
 8022714:	2001      	movs	r0, #1
 8022716:	f7fa f92f 	bl	801c978 <QuantizePosition>
 802271a:	4603      	mov	r3, r0
 802271c:	4618      	mov	r0, r3
 802271e:	f001 ffd5 	bl	80246cc <GoToPosition>
 8022722:	e042      	b.n	80227aa <HAL_SPI_TxRxCpltCallback+0x532>
				}
				else {
					GoToPosition((float)(f_tell(&MyFile) + 60000)
 8022724:	4b34      	ldr	r3, [pc, #208]	; (80227f8 <HAL_SPI_TxRxCpltCallback+0x580>)
 8022726:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 802272a:	f64e 2160 	movw	r1, #60000	; 0xea60
 802272e:	1851      	adds	r1, r2, r1
 8022730:	6139      	str	r1, [r7, #16]
 8022732:	f143 0300 	adc.w	r3, r3, #0
 8022736:	617b      	str	r3, [r7, #20]
 8022738:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802273c:	f7de fb56 	bl	8000dec <__aeabi_ul2f>
 8022740:	ee08 0a10 	vmov	s16, r0
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8022744:	4b2c      	ldr	r3, [pc, #176]	; (80227f8 <HAL_SPI_TxRxCpltCallback+0x580>)
 8022746:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802274a:	492d      	ldr	r1, [pc, #180]	; (8022800 <HAL_SPI_TxRxCpltCallback+0x588>)
 802274c:	6809      	ldr	r1, [r1, #0]
 802274e:	2000      	movs	r0, #0
 8022750:	60b9      	str	r1, [r7, #8]
 8022752:	60f8      	str	r0, [r7, #12]
 8022754:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8022758:	4641      	mov	r1, r8
 802275a:	1a54      	subs	r4, r2, r1
 802275c:	4649      	mov	r1, r9
 802275e:	eb63 0501 	sbc.w	r5, r3, r1
 8022762:	4b28      	ldr	r3, [pc, #160]	; (8022804 <HAL_SPI_TxRxCpltCallback+0x58c>)
 8022764:	681b      	ldr	r3, [r3, #0]
 8022766:	2200      	movs	r2, #0
 8022768:	469a      	mov	sl, r3
 802276a:	4693      	mov	fp, r2
 802276c:	ebb4 030a 	subs.w	r3, r4, sl
 8022770:	603b      	str	r3, [r7, #0]
 8022772:	eb65 030b 	sbc.w	r3, r5, fp
 8022776:	607b      	str	r3, [r7, #4]
 8022778:	e9d7 0100 	ldrd	r0, r1, [r7]
 802277c:	f7de fb36 	bl	8000dec <__aeabi_ul2f>
 8022780:	ee07 0a90 	vmov	s15, r0
 8022784:	ee88 7a27 	vdiv.f32	s14, s16, s15
							*rekordbox.spectrum_size);
 8022788:	4b19      	ldr	r3, [pc, #100]	; (80227f0 <HAL_SPI_TxRxCpltCallback+0x578>)
 802278a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802278e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8022792:	ee07 3a90 	vmov	s15, r3
 8022796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802279a:	ee67 7a27 	vmul.f32	s15, s14, s15
					GoToPosition((float)(f_tell(&MyFile) + 60000)
 802279e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80227a2:	ee17 0a90 	vmov	r0, s15
 80227a6:	f001 ff91 	bl	80246cc <GoToPosition>
				}
				if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 80227aa:	4b17      	ldr	r3, [pc, #92]	; (8022808 <HAL_SPI_TxRxCpltCallback+0x590>)
 80227ac:	781b      	ldrb	r3, [r3, #0]
 80227ae:	2b00      	cmp	r3, #0
 80227b0:	d102      	bne.n	80227b8 <HAL_SPI_TxRxCpltCallback+0x540>
 80227b2:	f7fe fa63 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
				}
				else {
					spi_tx[2] |= (1 << 1); //turn off CUE led
				}
			}
			break;
 80227b6:	e128      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
					GetTrackTime();
 80227b8:	f001 fce4 	bl	8024184 <GetTrackTime>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 80227bc:	4b13      	ldr	r3, [pc, #76]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80227be:	789b      	ldrb	r3, [r3, #2]
 80227c0:	2b00      	cmp	r3, #0
 80227c2:	d107      	bne.n	80227d4 <HAL_SPI_TxRxCpltCallback+0x55c>
 80227c4:	4b11      	ldr	r3, [pc, #68]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80227c6:	789b      	ldrb	r3, [r3, #2]
 80227c8:	f043 0302 	orr.w	r3, r3, #2
 80227cc:	b2da      	uxtb	r2, r3
 80227ce:	4b0f      	ldr	r3, [pc, #60]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80227d0:	709a      	strb	r2, [r3, #2]
 80227d2:	e006      	b.n	80227e2 <HAL_SPI_TxRxCpltCallback+0x56a>
					else spi_tx[2] &= ~(1 << 1);
 80227d4:	4b0d      	ldr	r3, [pc, #52]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80227d6:	789b      	ldrb	r3, [r3, #2]
 80227d8:	f023 0302 	bic.w	r3, r3, #2
 80227dc:	b2da      	uxtb	r2, r3
 80227de:	4b0b      	ldr	r3, [pc, #44]	; (802280c <HAL_SPI_TxRxCpltCallback+0x594>)
 80227e0:	709a      	strb	r2, [r3, #2]
					trak.state = SETCUE;
 80227e2:	4b09      	ldr	r3, [pc, #36]	; (8022808 <HAL_SPI_TxRxCpltCallback+0x590>)
 80227e4:	2202      	movs	r2, #2
 80227e6:	701a      	strb	r2, [r3, #0]
			break;
 80227e8:	e10f      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
 80227ea:	bf00      	nop
 80227ec:	200008fc 	.word	0x200008fc
 80227f0:	20015170 	.word	0x20015170
 80227f4:	200181a0 	.word	0x200181a0
 80227f8:	20000f10 	.word	0x20000f10
 80227fc:	fffe2b40 	.word	0xfffe2b40
 8022800:	2000f730 	.word	0x2000f730
 8022804:	20018e5c 	.word	0x20018e5c
 8022808:	2000e6e0 	.word	0x2000e6e0
 802280c:	20000054 	.word	0x20000054
 8022810:	200182b0 	.word	0x200182b0
				rekordbox.currentcue--;
 8022814:	4bad      	ldr	r3, [pc, #692]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 8022816:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802281a:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 802281e:	3b01      	subs	r3, #1
 8022820:	4aaa      	ldr	r2, [pc, #680]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 8022822:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8022826:	f8c2 3d90 	str.w	r3, [r2, #3472]	; 0xd90
				if(rekordbox.currentcue < 0)
 802282a:	4ba8      	ldr	r3, [pc, #672]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 802282c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8022830:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 8022834:	2b00      	cmp	r3, #0
 8022836:	da0a      	bge.n	802284e <HAL_SPI_TxRxCpltCallback+0x5d6>
					rekordbox.currentcue = rekordbox.cues - 1;
 8022838:	4ba4      	ldr	r3, [pc, #656]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 802283a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802283e:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 8022842:	3b01      	subs	r3, #1
 8022844:	4aa1      	ldr	r2, [pc, #644]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 8022846:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802284a:	f8c2 3d90 	str.w	r3, [r2, #3472]	; 0xd90
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 802284e:	4b9f      	ldr	r3, [pc, #636]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 8022850:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8022854:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 8022858:	4a9c      	ldr	r2, [pc, #624]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 802285a:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 802285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022862:	4618      	mov	r0, r3
 8022864:	f001 ff32 	bl	80246cc <GoToPosition>
				if(trak.state == PLAYING) {
 8022868:	4b99      	ldr	r3, [pc, #612]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 802286a:	781b      	ldrb	r3, [r3, #0]
 802286c:	2b00      	cmp	r3, #0
 802286e:	d10c      	bne.n	802288a <HAL_SPI_TxRxCpltCallback+0x612>
					BSP_AUDIO_OUT_Resume();
 8022870:	f7fe fa04 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
					HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8022874:	4897      	ldr	r0, [pc, #604]	; (8022ad4 <HAL_SPI_TxRxCpltCallback+0x85c>)
 8022876:	f7e7 f8eb 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
					spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 802287a:	4b97      	ldr	r3, [pc, #604]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 802287c:	789b      	ldrb	r3, [r3, #2]
 802287e:	f023 0301 	bic.w	r3, r3, #1
 8022882:	b2da      	uxtb	r2, r3
 8022884:	4b94      	ldr	r3, [pc, #592]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 8022886:	709a      	strb	r2, [r3, #2]
 8022888:	e001      	b.n	802288e <HAL_SPI_TxRxCpltCallback+0x616>
					GetTrackTime();
 802288a:	f001 fc7b 	bl	8024184 <GetTrackTime>
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 802288e:	4b8f      	ldr	r3, [pc, #572]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 8022890:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8022894:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 8022898:	4a8c      	ldr	r2, [pc, #560]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 802289a:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 802289e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80228a2:	2b00      	cmp	r3, #0
 80228a4:	d007      	beq.n	80228b6 <HAL_SPI_TxRxCpltCallback+0x63e>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 80228a6:	4b8c      	ldr	r3, [pc, #560]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80228a8:	789b      	ldrb	r3, [r3, #2]
 80228aa:	f023 0302 	bic.w	r3, r3, #2
 80228ae:	b2da      	uxtb	r2, r3
 80228b0:	4b89      	ldr	r3, [pc, #548]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80228b2:	709a      	strb	r2, [r3, #2]
			break;
 80228b4:	e0a9      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 80228b6:	4b88      	ldr	r3, [pc, #544]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80228b8:	789b      	ldrb	r3, [r3, #2]
 80228ba:	f043 0302 	orr.w	r3, r3, #2
 80228be:	b2da      	uxtb	r2, r3
 80228c0:	4b85      	ldr	r3, [pc, #532]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80228c2:	709a      	strb	r2, [r3, #2]
			break;
 80228c4:	e0a1      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
		}
		case PLAY: {
			if(trak.state == PLAYING) {
 80228c6:	4b82      	ldr	r3, [pc, #520]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 80228c8:	781b      	ldrb	r3, [r3, #0]
 80228ca:	2b00      	cmp	r3, #0
 80228cc:	d128      	bne.n	8022920 <HAL_SPI_TxRxCpltCallback+0x6a8>
				BSP_AUDIO_OUT_Pause();
 80228ce:	f7fe f9cb 	bl	8020c68 <BSP_AUDIO_OUT_Pause>
				if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 80228d2:	4b81      	ldr	r3, [pc, #516]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80228d4:	789b      	ldrb	r3, [r3, #2]
 80228d6:	2b00      	cmp	r3, #0
 80228d8:	d107      	bne.n	80228ea <HAL_SPI_TxRxCpltCallback+0x672>
 80228da:	4b7f      	ldr	r3, [pc, #508]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80228dc:	789b      	ldrb	r3, [r3, #2]
 80228de:	f043 0302 	orr.w	r3, r3, #2
 80228e2:	b2da      	uxtb	r2, r3
 80228e4:	4b7c      	ldr	r3, [pc, #496]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80228e6:	709a      	strb	r2, [r3, #2]
 80228e8:	e006      	b.n	80228f8 <HAL_SPI_TxRxCpltCallback+0x680>
				else spi_tx[2] &= ~(1 << 1);
 80228ea:	4b7b      	ldr	r3, [pc, #492]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80228ec:	789b      	ldrb	r3, [r3, #2]
 80228ee:	f023 0302 	bic.w	r3, r3, #2
 80228f2:	b2da      	uxtb	r2, r3
 80228f4:	4b78      	ldr	r3, [pc, #480]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80228f6:	709a      	strb	r2, [r3, #2]
				HAL_TIM_Base_Start_IT(&htim8); //start blinking
 80228f8:	4876      	ldr	r0, [pc, #472]	; (8022ad4 <HAL_SPI_TxRxCpltCallback+0x85c>)
 80228fa:	f7e7 f819 	bl	8009930 <HAL_TIM_Base_Start_IT>
				if(file_pos_wide != rekordbox.cue_start_position[0]) {
 80228fe:	4b73      	ldr	r3, [pc, #460]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 8022900:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8022904:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
 8022908:	4a74      	ldr	r2, [pc, #464]	; (8022adc <HAL_SPI_TxRxCpltCallback+0x864>)
 802290a:	6812      	ldr	r2, [r2, #0]
 802290c:	4293      	cmp	r3, r2
 802290e:	d003      	beq.n	8022918 <HAL_SPI_TxRxCpltCallback+0x6a0>
					trak.state = SETCUE;
 8022910:	4b6f      	ldr	r3, [pc, #444]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 8022912:	2202      	movs	r2, #2
 8022914:	701a      	strb	r2, [r3, #0]
				}
				else {
					spi_tx[2] |= (1 << 1); //turn off CUE led
				}
			}
			break;
 8022916:	e078      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
					trak.state = STOPPED;
 8022918:	4b6d      	ldr	r3, [pc, #436]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 802291a:	2201      	movs	r2, #1
 802291c:	701a      	strb	r2, [r3, #0]
			break;
 802291e:	e074      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
				BSP_AUDIO_OUT_Resume();
 8022920:	f7fe f9ac 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 8022924:	4b6a      	ldr	r3, [pc, #424]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 8022926:	2200      	movs	r2, #0
 8022928:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 802292a:	486a      	ldr	r0, [pc, #424]	; (8022ad4 <HAL_SPI_TxRxCpltCallback+0x85c>)
 802292c:	f7e7 f890 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 8022930:	4b69      	ldr	r3, [pc, #420]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 8022932:	789b      	ldrb	r3, [r3, #2]
 8022934:	f023 0301 	bic.w	r3, r3, #1
 8022938:	b2da      	uxtb	r2, r3
 802293a:	4b67      	ldr	r3, [pc, #412]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 802293c:	709a      	strb	r2, [r3, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 802293e:	4b63      	ldr	r3, [pc, #396]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 8022940:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8022944:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 8022948:	4a60      	ldr	r2, [pc, #384]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 802294a:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 802294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022952:	2b00      	cmp	r3, #0
 8022954:	d007      	beq.n	8022966 <HAL_SPI_TxRxCpltCallback+0x6ee>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8022956:	4b60      	ldr	r3, [pc, #384]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 8022958:	789b      	ldrb	r3, [r3, #2]
 802295a:	f023 0302 	bic.w	r3, r3, #2
 802295e:	b2da      	uxtb	r2, r3
 8022960:	4b5d      	ldr	r3, [pc, #372]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 8022962:	709a      	strb	r2, [r3, #2]
			break;
 8022964:	e051      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8022966:	4b5c      	ldr	r3, [pc, #368]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 8022968:	789b      	ldrb	r3, [r3, #2]
 802296a:	f043 0302 	orr.w	r3, r3, #2
 802296e:	b2da      	uxtb	r2, r3
 8022970:	4b59      	ldr	r3, [pc, #356]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 8022972:	709a      	strb	r2, [r3, #2]
			break;
 8022974:	e049      	b.n	8022a0a <HAL_SPI_TxRxCpltCallback+0x792>
		}
		case CUE: {
			if(trak.state == STOPPED) {
 8022976:	4b56      	ldr	r3, [pc, #344]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 8022978:	781b      	ldrb	r3, [r3, #0]
 802297a:	2b01      	cmp	r3, #1
 802297c:	d10f      	bne.n	802299e <HAL_SPI_TxRxCpltCallback+0x726>
				BSP_AUDIO_OUT_Resume();
 802297e:	f7fe f97d 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 8022982:	4b53      	ldr	r3, [pc, #332]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 8022984:	2200      	movs	r2, #0
 8022986:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8022988:	4852      	ldr	r0, [pc, #328]	; (8022ad4 <HAL_SPI_TxRxCpltCallback+0x85c>)
 802298a:	f7e7 f861 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 802298e:	4b52      	ldr	r3, [pc, #328]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 8022990:	789b      	ldrb	r3, [r3, #2]
 8022992:	f023 0301 	bic.w	r3, r3, #1
 8022996:	b2da      	uxtb	r2, r3
 8022998:	4b4f      	ldr	r3, [pc, #316]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 802299a:	709a      	strb	r2, [r3, #2]
				}
				rekordbox.currentcue = 0;
				spi_tx[2] &= ~(1 << 1); //turn on CUE led
				trak.state = STOPPED;
			}
			break;
 802299c:	e034      	b.n	8022a08 <HAL_SPI_TxRxCpltCallback+0x790>
			else if(trak.state == SETCUE) {
 802299e:	4b4c      	ldr	r3, [pc, #304]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 80229a0:	781b      	ldrb	r3, [r3, #0]
 80229a2:	2b02      	cmp	r3, #2
 80229a4:	d130      	bne.n	8022a08 <HAL_SPI_TxRxCpltCallback+0x790>
				if(display.quantize == 1) {
 80229a6:	4b4e      	ldr	r3, [pc, #312]	; (8022ae0 <HAL_SPI_TxRxCpltCallback+0x868>)
 80229a8:	7c5b      	ldrb	r3, [r3, #17]
 80229aa:	2b01      	cmp	r3, #1
 80229ac:	d10a      	bne.n	80229c4 <HAL_SPI_TxRxCpltCallback+0x74c>
					rekordbox.cue_start_position[0] = QuantizePosition(0);
 80229ae:	2000      	movs	r0, #0
 80229b0:	f7f9 ffe2 	bl	801c978 <QuantizePosition>
 80229b4:	4603      	mov	r3, r0
 80229b6:	461a      	mov	r2, r3
 80229b8:	4b44      	ldr	r3, [pc, #272]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 80229ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80229be:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
 80229c2:	e007      	b.n	80229d4 <HAL_SPI_TxRxCpltCallback+0x75c>
					rekordbox.cue_start_position[0] = file_pos_wide;
 80229c4:	4b45      	ldr	r3, [pc, #276]	; (8022adc <HAL_SPI_TxRxCpltCallback+0x864>)
 80229c6:	681b      	ldr	r3, [r3, #0]
 80229c8:	461a      	mov	r2, r3
 80229ca:	4b40      	ldr	r3, [pc, #256]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 80229cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80229d0:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
				rekordbox.currentcue = 0;
 80229d4:	4b3d      	ldr	r3, [pc, #244]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 80229d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80229da:	461a      	mov	r2, r3
 80229dc:	2300      	movs	r3, #0
 80229de:	f8c2 3d90 	str.w	r3, [r2, #3472]	; 0xd90
				spi_tx[2] &= ~(1 << 1); //turn on CUE led
 80229e2:	4b3d      	ldr	r3, [pc, #244]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80229e4:	789b      	ldrb	r3, [r3, #2]
 80229e6:	f023 0302 	bic.w	r3, r3, #2
 80229ea:	b2da      	uxtb	r2, r3
 80229ec:	4b3a      	ldr	r3, [pc, #232]	; (8022ad8 <HAL_SPI_TxRxCpltCallback+0x860>)
 80229ee:	709a      	strb	r2, [r3, #2]
				trak.state = STOPPED;
 80229f0:	4b37      	ldr	r3, [pc, #220]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 80229f2:	2201      	movs	r2, #1
 80229f4:	701a      	strb	r2, [r3, #0]
			break;
 80229f6:	e007      	b.n	8022a08 <HAL_SPI_TxRxCpltCallback+0x790>
		}
		default: break;
 80229f8:	bf00      	nop
 80229fa:	e283      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
			break;
 80229fc:	bf00      	nop
 80229fe:	e281      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
			break;
 8022a00:	bf00      	nop
 8022a02:	e27f      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
			break;
 8022a04:	bf00      	nop
 8022a06:	e27d      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
			break;
 8022a08:	bf00      	nop
		}
		break;
 8022a0a:	e27b      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
		}
		case 0x80: {
			switch(spi_rx[2]) {
 8022a0c:	4b35      	ldr	r3, [pc, #212]	; (8022ae4 <HAL_SPI_TxRxCpltCallback+0x86c>)
 8022a0e:	789b      	ldrb	r3, [r3, #2]
 8022a10:	3b40      	subs	r3, #64	; 0x40
 8022a12:	2b0a      	cmp	r3, #10
 8022a14:	f200 80f7 	bhi.w	8022c06 <HAL_SPI_TxRxCpltCallback+0x98e>
 8022a18:	a201      	add	r2, pc, #4	; (adr r2, 8022a20 <HAL_SPI_TxRxCpltCallback+0x7a8>)
 8022a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022a1e:	bf00      	nop
 8022a20:	08022bd3 	.word	0x08022bd3
 8022a24:	08022a87 	.word	0x08022a87
 8022a28:	08022c07 	.word	0x08022c07
 8022a2c:	08022aed 	.word	0x08022aed
 8022a30:	08022c07 	.word	0x08022c07
 8022a34:	08022c07 	.word	0x08022c07
 8022a38:	08022c07 	.word	0x08022c07
 8022a3c:	08022c07 	.word	0x08022c07
 8022a40:	08022bff 	.word	0x08022bff
 8022a44:	08022c07 	.word	0x08022c07
 8022a48:	08022a4d 	.word	0x08022a4d
			case CUE: {
				if(trak.state == PLAYING) {
 8022a4c:	4b20      	ldr	r3, [pc, #128]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 8022a4e:	781b      	ldrb	r3, [r3, #0]
 8022a50:	2b00      	cmp	r3, #0
 8022a52:	f040 80da 	bne.w	8022c0a <HAL_SPI_TxRxCpltCallback+0x992>
					BSP_AUDIO_OUT_Pause();
 8022a56:	f7fe f907 	bl	8020c68 <BSP_AUDIO_OUT_Pause>
					trak.state = STOPPED;
 8022a5a:	4b1d      	ldr	r3, [pc, #116]	; (8022ad0 <HAL_SPI_TxRxCpltCallback+0x858>)
 8022a5c:	2201      	movs	r2, #1
 8022a5e:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim8); //start blinking
 8022a60:	481c      	ldr	r0, [pc, #112]	; (8022ad4 <HAL_SPI_TxRxCpltCallback+0x85c>)
 8022a62:	f7e6 ff65 	bl	8009930 <HAL_TIM_Base_Start_IT>
					GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 8022a66:	4b19      	ldr	r3, [pc, #100]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 8022a68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8022a6c:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 8022a70:	4a16      	ldr	r2, [pc, #88]	; (8022acc <HAL_SPI_TxRxCpltCallback+0x854>)
 8022a72:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 8022a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022a7a:	4618      	mov	r0, r3
 8022a7c:	f001 fe26 	bl	80246cc <GoToPosition>
					TrackTime();
 8022a80:	f001 fc1c 	bl	80242bc <TrackTime>
				}
				break;
 8022a84:	e0c1      	b.n	8022c0a <HAL_SPI_TxRxCpltCallback+0x992>
			}
			case TIME: {
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 8022a86:	4b18      	ldr	r3, [pc, #96]	; (8022ae8 <HAL_SPI_TxRxCpltCallback+0x870>)
 8022a88:	681b      	ldr	r3, [r3, #0]
 8022a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8022a90:	4293      	cmp	r3, r2
 8022a92:	f200 80bc 	bhi.w	8022c0e <HAL_SPI_TxRxCpltCallback+0x996>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 8022a96:	4b14      	ldr	r3, [pc, #80]	; (8022ae8 <HAL_SPI_TxRxCpltCallback+0x870>)
 8022a98:	681b      	ldr	r3, [r3, #0]
 8022a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a9c:	2b00      	cmp	r3, #0
 8022a9e:	f000 80b6 	beq.w	8022c0e <HAL_SPI_TxRxCpltCallback+0x996>
					HAL_TIM_Base_Stop_IT(&htim9);
 8022aa2:	4811      	ldr	r0, [pc, #68]	; (8022ae8 <HAL_SPI_TxRxCpltCallback+0x870>)
 8022aa4:	f7e6 ffd4 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
					if(display.timemode == 0) {
 8022aa8:	4b0d      	ldr	r3, [pc, #52]	; (8022ae0 <HAL_SPI_TxRxCpltCallback+0x868>)
 8022aaa:	781b      	ldrb	r3, [r3, #0]
 8022aac:	2b00      	cmp	r3, #0
 8022aae:	d106      	bne.n	8022abe <HAL_SPI_TxRxCpltCallback+0x846>
						display.timemode = 1;
 8022ab0:	4b0b      	ldr	r3, [pc, #44]	; (8022ae0 <HAL_SPI_TxRxCpltCallback+0x868>)
 8022ab2:	2201      	movs	r2, #1
 8022ab4:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 1;
 8022ab6:	4b0a      	ldr	r3, [pc, #40]	; (8022ae0 <HAL_SPI_TxRxCpltCallback+0x868>)
 8022ab8:	2201      	movs	r2, #1
 8022aba:	711a      	strb	r2, [r3, #4]
					else {
						display.timemode = 0;
						display.trackbarmode = 0;
					}
				}
				break;
 8022abc:	e0a7      	b.n	8022c0e <HAL_SPI_TxRxCpltCallback+0x996>
						display.timemode = 0;
 8022abe:	4b08      	ldr	r3, [pc, #32]	; (8022ae0 <HAL_SPI_TxRxCpltCallback+0x868>)
 8022ac0:	2200      	movs	r2, #0
 8022ac2:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 0;
 8022ac4:	4b06      	ldr	r3, [pc, #24]	; (8022ae0 <HAL_SPI_TxRxCpltCallback+0x868>)
 8022ac6:	2200      	movs	r2, #0
 8022ac8:	711a      	strb	r2, [r3, #4]
				break;
 8022aca:	e0a0      	b.n	8022c0e <HAL_SPI_TxRxCpltCallback+0x996>
 8022acc:	20015170 	.word	0x20015170
 8022ad0:	2000e6e0 	.word	0x2000e6e0
 8022ad4:	200182b0 	.word	0x200182b0
 8022ad8:	20000054 	.word	0x20000054
 8022adc:	20001e00 	.word	0x20001e00
 8022ae0:	200008fc 	.word	0x200008fc
 8022ae4:	2000e6dc 	.word	0x2000e6dc
 8022ae8:	200182f0 	.word	0x200182f0
			}
			case MASTERTEMPO: {
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 8022aec:	4b81      	ldr	r3, [pc, #516]	; (8022cf4 <HAL_SPI_TxRxCpltCallback+0xa7c>)
 8022aee:	681b      	ldr	r3, [r3, #0]
 8022af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022af2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8022af6:	4293      	cmp	r3, r2
 8022af8:	f200 808b 	bhi.w	8022c12 <HAL_SPI_TxRxCpltCallback+0x99a>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 8022afc:	4b7d      	ldr	r3, [pc, #500]	; (8022cf4 <HAL_SPI_TxRxCpltCallback+0xa7c>)
 8022afe:	681b      	ldr	r3, [r3, #0]
 8022b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	f000 8085 	beq.w	8022c12 <HAL_SPI_TxRxCpltCallback+0x99a>
					HAL_TIM_Base_Stop_IT(&htim9);
 8022b08:	487a      	ldr	r0, [pc, #488]	; (8022cf4 <HAL_SPI_TxRxCpltCallback+0xa7c>)
 8022b0a:	f7e6 ffa1 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
					display.pitchmode++;
 8022b0e:	4b7a      	ldr	r3, [pc, #488]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022b10:	785b      	ldrb	r3, [r3, #1]
 8022b12:	3301      	adds	r3, #1
 8022b14:	b2da      	uxtb	r2, r3
 8022b16:	4b78      	ldr	r3, [pc, #480]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022b18:	705a      	strb	r2, [r3, #1]
					if(display.pitchmode > 3) display.pitchmode = 0;
 8022b1a:	4b77      	ldr	r3, [pc, #476]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022b1c:	785b      	ldrb	r3, [r3, #1]
 8022b1e:	2b03      	cmp	r3, #3
 8022b20:	d902      	bls.n	8022b28 <HAL_SPI_TxRxCpltCallback+0x8b0>
 8022b22:	4b75      	ldr	r3, [pc, #468]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022b24:	2200      	movs	r2, #0
 8022b26:	705a      	strb	r2, [r3, #1]
					if(display.pitchmode == 0) scale_pitch = 1; //wide
 8022b28:	4b73      	ldr	r3, [pc, #460]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022b2a:	785b      	ldrb	r3, [r3, #1]
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	d104      	bne.n	8022b3a <HAL_SPI_TxRxCpltCallback+0x8c2>
 8022b30:	4b72      	ldr	r3, [pc, #456]	; (8022cfc <HAL_SPI_TxRxCpltCallback+0xa84>)
 8022b32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022b36:	601a      	str	r2, [r3, #0]
 8022b38:	e016      	b.n	8022b68 <HAL_SPI_TxRxCpltCallback+0x8f0>
					else if(display.pitchmode == 1) scale_pitch = 0.16; //16%
 8022b3a:	4b6f      	ldr	r3, [pc, #444]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022b3c:	785b      	ldrb	r3, [r3, #1]
 8022b3e:	2b01      	cmp	r3, #1
 8022b40:	d103      	bne.n	8022b4a <HAL_SPI_TxRxCpltCallback+0x8d2>
 8022b42:	4b6e      	ldr	r3, [pc, #440]	; (8022cfc <HAL_SPI_TxRxCpltCallback+0xa84>)
 8022b44:	4a6e      	ldr	r2, [pc, #440]	; (8022d00 <HAL_SPI_TxRxCpltCallback+0xa88>)
 8022b46:	601a      	str	r2, [r3, #0]
 8022b48:	e00e      	b.n	8022b68 <HAL_SPI_TxRxCpltCallback+0x8f0>
					else if(display.pitchmode == 2) scale_pitch = 0.1; //10%
 8022b4a:	4b6b      	ldr	r3, [pc, #428]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022b4c:	785b      	ldrb	r3, [r3, #1]
 8022b4e:	2b02      	cmp	r3, #2
 8022b50:	d103      	bne.n	8022b5a <HAL_SPI_TxRxCpltCallback+0x8e2>
 8022b52:	4b6a      	ldr	r3, [pc, #424]	; (8022cfc <HAL_SPI_TxRxCpltCallback+0xa84>)
 8022b54:	4a6b      	ldr	r2, [pc, #428]	; (8022d04 <HAL_SPI_TxRxCpltCallback+0xa8c>)
 8022b56:	601a      	str	r2, [r3, #0]
 8022b58:	e006      	b.n	8022b68 <HAL_SPI_TxRxCpltCallback+0x8f0>
					else if(display.pitchmode == 3) scale_pitch = 0.06; //6%
 8022b5a:	4b67      	ldr	r3, [pc, #412]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022b5c:	785b      	ldrb	r3, [r3, #1]
 8022b5e:	2b03      	cmp	r3, #3
 8022b60:	d102      	bne.n	8022b68 <HAL_SPI_TxRxCpltCallback+0x8f0>
 8022b62:	4b66      	ldr	r3, [pc, #408]	; (8022cfc <HAL_SPI_TxRxCpltCallback+0xa84>)
 8022b64:	4a68      	ldr	r2, [pc, #416]	; (8022d08 <HAL_SPI_TxRxCpltCallback+0xa90>)
 8022b66:	601a      	str	r2, [r3, #0]
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 8022b68:	4b68      	ldr	r3, [pc, #416]	; (8022d0c <HAL_SPI_TxRxCpltCallback+0xa94>)
 8022b6a:	885b      	ldrh	r3, [r3, #2]
 8022b6c:	ee07 3a90 	vmov	s15, r3
 8022b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022b74:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8022d10 <HAL_SPI_TxRxCpltCallback+0xa98>
 8022b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022b7c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8022d10 <HAL_SPI_TxRxCpltCallback+0xa98>
 8022b80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8022b84:	4b5d      	ldr	r3, [pc, #372]	; (8022cfc <HAL_SPI_TxRxCpltCallback+0xa84>)
 8022b86:	edd3 7a00 	vldr	s15, [r3]
 8022b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022b8e:	4b5f      	ldr	r3, [pc, #380]	; (8022d0c <HAL_SPI_TxRxCpltCallback+0xa94>)
 8022b90:	edc3 7a01 	vstr	s15, [r3, #4]
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 8022b94:	4b5d      	ldr	r3, [pc, #372]	; (8022d0c <HAL_SPI_TxRxCpltCallback+0xa94>)
 8022b96:	891b      	ldrh	r3, [r3, #8]
 8022b98:	085b      	lsrs	r3, r3, #1
 8022b9a:	b29b      	uxth	r3, r3
 8022b9c:	ee07 3a90 	vmov	s15, r3
 8022ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022ba4:	4b59      	ldr	r3, [pc, #356]	; (8022d0c <HAL_SPI_TxRxCpltCallback+0xa94>)
 8022ba6:	edd3 7a01 	vldr	s15, [r3, #4]
 8022baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022bba:	ee17 2a90 	vmov	r2, s15
 8022bbe:	4b55      	ldr	r3, [pc, #340]	; (8022d14 <HAL_SPI_TxRxCpltCallback+0xa9c>)
 8022bc0:	601a      	str	r2, [r3, #0]
					BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 8022bc2:	4b54      	ldr	r3, [pc, #336]	; (8022d14 <HAL_SPI_TxRxCpltCallback+0xa9c>)
 8022bc4:	681b      	ldr	r3, [r3, #0]
 8022bc6:	2200      	movs	r2, #0
 8022bc8:	4619      	mov	r1, r3
 8022bca:	4853      	ldr	r0, [pc, #332]	; (8022d18 <HAL_SPI_TxRxCpltCallback+0xaa0>)
 8022bcc:	f7fe f96a 	bl	8020ea4 <BSP_AUDIO_OUT_ClockConfig>
				}
				break;
 8022bd0:	e01f      	b.n	8022c12 <HAL_SPI_TxRxCpltCallback+0x99a>
			}
			case HOLD: {
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 8022bd2:	4b48      	ldr	r3, [pc, #288]	; (8022cf4 <HAL_SPI_TxRxCpltCallback+0xa7c>)
 8022bd4:	681b      	ldr	r3, [r3, #0]
 8022bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022bd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8022bdc:	4293      	cmp	r3, r2
 8022bde:	d80e      	bhi.n	8022bfe <HAL_SPI_TxRxCpltCallback+0x986>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 8022be0:	4b44      	ldr	r3, [pc, #272]	; (8022cf4 <HAL_SPI_TxRxCpltCallback+0xa7c>)
 8022be2:	681b      	ldr	r3, [r3, #0]
 8022be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022be6:	2b00      	cmp	r3, #0
 8022be8:	d009      	beq.n	8022bfe <HAL_SPI_TxRxCpltCallback+0x986>
					HAL_TIM_Base_Stop_IT(&htim9);
 8022bea:	4842      	ldr	r0, [pc, #264]	; (8022cf4 <HAL_SPI_TxRxCpltCallback+0xa7c>)
 8022bec:	f7e6 ff30 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
					if(display.loop == 1) display.loop = 0;
 8022bf0:	4b41      	ldr	r3, [pc, #260]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022bf2:	7c1b      	ldrb	r3, [r3, #16]
 8022bf4:	2b01      	cmp	r3, #1
 8022bf6:	d102      	bne.n	8022bfe <HAL_SPI_TxRxCpltCallback+0x986>
 8022bf8:	4b3f      	ldr	r3, [pc, #252]	; (8022cf8 <HAL_SPI_TxRxCpltCallback+0xa80>)
 8022bfa:	2200      	movs	r2, #0
 8022bfc:	741a      	strb	r2, [r3, #16]
				}
			}
			case WAH: {
				button_flag &= (0 << 2);
 8022bfe:	4b47      	ldr	r3, [pc, #284]	; (8022d1c <HAL_SPI_TxRxCpltCallback+0xaa4>)
 8022c00:	2200      	movs	r2, #0
 8022c02:	801a      	strh	r2, [r3, #0]
				break;
 8022c04:	e006      	b.n	8022c14 <HAL_SPI_TxRxCpltCallback+0x99c>
			}
			default: break;
 8022c06:	bf00      	nop
 8022c08:	e17c      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
				break;
 8022c0a:	bf00      	nop
 8022c0c:	e17a      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
				break;
 8022c0e:	bf00      	nop
 8022c10:	e178      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
				break;
 8022c12:	bf00      	nop
			}
			break;
 8022c14:	e176      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
		}
		case 0xB0: {
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8022c16:	2028      	movs	r0, #40	; 0x28
 8022c18:	f7de fcb2 	bl	8001580 <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8022c1c:	4b40      	ldr	r3, [pc, #256]	; (8022d20 <HAL_SPI_TxRxCpltCallback+0xaa8>)
 8022c1e:	681b      	ldr	r3, [r3, #0]
 8022c20:	f06f 0201 	mvn.w	r2, #1
 8022c24:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8022c26:	4b3e      	ldr	r3, [pc, #248]	; (8022d20 <HAL_SPI_TxRxCpltCallback+0xaa8>)
 8022c28:	681b      	ldr	r3, [r3, #0]
 8022c2a:	2200      	movs	r2, #0
 8022c2c:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8022c2e:	483c      	ldr	r0, [pc, #240]	; (8022d20 <HAL_SPI_TxRxCpltCallback+0xaa8>)
 8022c30:	f7e6 fe7e 	bl	8009930 <HAL_TIM_Base_Start_IT>
			if(spi_rx[2] == 0x24) {
 8022c34:	4b3b      	ldr	r3, [pc, #236]	; (8022d24 <HAL_SPI_TxRxCpltCallback+0xaac>)
 8022c36:	789b      	ldrb	r3, [r3, #2]
 8022c38:	2b24      	cmp	r3, #36	; 0x24
 8022c3a:	f040 8160 	bne.w	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
				if(spi_rx[3] == 0x01) {
 8022c3e:	4b39      	ldr	r3, [pc, #228]	; (8022d24 <HAL_SPI_TxRxCpltCallback+0xaac>)
 8022c40:	78db      	ldrb	r3, [r3, #3]
 8022c42:	2b01      	cmp	r3, #1
 8022c44:	d17e      	bne.n	8022d44 <HAL_SPI_TxRxCpltCallback+0xacc>
					if(menu_mode == 1) {
 8022c46:	4b38      	ldr	r3, [pc, #224]	; (8022d28 <HAL_SPI_TxRxCpltCallback+0xab0>)
 8022c48:	f993 3000 	ldrsb.w	r3, [r3]
 8022c4c:	2b01      	cmp	r3, #1
 8022c4e:	d139      	bne.n	8022cc4 <HAL_SPI_TxRxCpltCallback+0xa4c>
						String_number++;
 8022c50:	4b36      	ldr	r3, [pc, #216]	; (8022d2c <HAL_SPI_TxRxCpltCallback+0xab4>)
 8022c52:	681b      	ldr	r3, [r3, #0]
 8022c54:	3301      	adds	r3, #1
 8022c56:	4a35      	ldr	r2, [pc, #212]	; (8022d2c <HAL_SPI_TxRxCpltCallback+0xab4>)
 8022c58:	6013      	str	r3, [r2, #0]
						Mark_number = String_number;
 8022c5a:	4b34      	ldr	r3, [pc, #208]	; (8022d2c <HAL_SPI_TxRxCpltCallback+0xab4>)
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	4a34      	ldr	r2, [pc, #208]	; (8022d30 <HAL_SPI_TxRxCpltCallback+0xab8>)
 8022c60:	6013      	str	r3, [r2, #0]
						if(Total_tracks < 7) {
 8022c62:	4b34      	ldr	r3, [pc, #208]	; (8022d34 <HAL_SPI_TxRxCpltCallback+0xabc>)
 8022c64:	881b      	ldrh	r3, [r3, #0]
 8022c66:	2b06      	cmp	r3, #6
 8022c68:	d80e      	bhi.n	8022c88 <HAL_SPI_TxRxCpltCallback+0xa10>
							if(String_number + 1 > Total_tracks) {
 8022c6a:	4b32      	ldr	r3, [pc, #200]	; (8022d34 <HAL_SPI_TxRxCpltCallback+0xabc>)
 8022c6c:	881b      	ldrh	r3, [r3, #0]
 8022c6e:	461a      	mov	r2, r3
 8022c70:	4b2e      	ldr	r3, [pc, #184]	; (8022d2c <HAL_SPI_TxRxCpltCallback+0xab4>)
 8022c72:	681b      	ldr	r3, [r3, #0]
 8022c74:	429a      	cmp	r2, r3
 8022c76:	f300 8142 	bgt.w	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
								String_number = 0;
 8022c7a:	4b2c      	ldr	r3, [pc, #176]	; (8022d2c <HAL_SPI_TxRxCpltCallback+0xab4>)
 8022c7c:	2200      	movs	r2, #0
 8022c7e:	601a      	str	r2, [r3, #0]
								Mark_number = 0;
 8022c80:	4b2b      	ldr	r3, [pc, #172]	; (8022d30 <HAL_SPI_TxRxCpltCallback+0xab8>)
 8022c82:	2200      	movs	r2, #0
 8022c84:	601a      	str	r2, [r3, #0]
							GetTrackTime();
						}
					}
				}
			}
			break;
 8022c86:	e13a      	b.n	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
							if(String_number > 6) {
 8022c88:	4b28      	ldr	r3, [pc, #160]	; (8022d2c <HAL_SPI_TxRxCpltCallback+0xab4>)
 8022c8a:	681b      	ldr	r3, [r3, #0]
 8022c8c:	2b06      	cmp	r3, #6
 8022c8e:	f340 8136 	ble.w	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
								String_number = 0;
 8022c92:	4b26      	ldr	r3, [pc, #152]	; (8022d2c <HAL_SPI_TxRxCpltCallback+0xab4>)
 8022c94:	2200      	movs	r2, #0
 8022c96:	601a      	str	r2, [r3, #0]
								Mark_number = 0;
 8022c98:	4b25      	ldr	r3, [pc, #148]	; (8022d30 <HAL_SPI_TxRxCpltCallback+0xab8>)
 8022c9a:	2200      	movs	r2, #0
 8022c9c:	601a      	str	r2, [r3, #0]
								str_increment += 7;
 8022c9e:	4b26      	ldr	r3, [pc, #152]	; (8022d38 <HAL_SPI_TxRxCpltCallback+0xac0>)
 8022ca0:	681b      	ldr	r3, [r3, #0]
 8022ca2:	3307      	adds	r3, #7
 8022ca4:	4a24      	ldr	r2, [pc, #144]	; (8022d38 <HAL_SPI_TxRxCpltCallback+0xac0>)
 8022ca6:	6013      	str	r3, [r2, #0]
								if(str_increment >= Total_tracks - 7)
 8022ca8:	4b22      	ldr	r3, [pc, #136]	; (8022d34 <HAL_SPI_TxRxCpltCallback+0xabc>)
 8022caa:	881b      	ldrh	r3, [r3, #0]
 8022cac:	1fda      	subs	r2, r3, #7
 8022cae:	4b22      	ldr	r3, [pc, #136]	; (8022d38 <HAL_SPI_TxRxCpltCallback+0xac0>)
 8022cb0:	681b      	ldr	r3, [r3, #0]
 8022cb2:	429a      	cmp	r2, r3
 8022cb4:	f300 8123 	bgt.w	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
									str_increment = Total_tracks - 7;
 8022cb8:	4b1e      	ldr	r3, [pc, #120]	; (8022d34 <HAL_SPI_TxRxCpltCallback+0xabc>)
 8022cba:	881b      	ldrh	r3, [r3, #0]
 8022cbc:	3b07      	subs	r3, #7
 8022cbe:	4a1e      	ldr	r2, [pc, #120]	; (8022d38 <HAL_SPI_TxRxCpltCallback+0xac0>)
 8022cc0:	6013      	str	r3, [r2, #0]
			break;
 8022cc2:	e11c      	b.n	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
						if(trak.state == PLAYING) {
 8022cc4:	4b11      	ldr	r3, [pc, #68]	; (8022d0c <HAL_SPI_TxRxCpltCallback+0xa94>)
 8022cc6:	781b      	ldrb	r3, [r3, #0]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d105      	bne.n	8022cd8 <HAL_SPI_TxRxCpltCallback+0xa60>
							pulses++;
 8022ccc:	4b1b      	ldr	r3, [pc, #108]	; (8022d3c <HAL_SPI_TxRxCpltCallback+0xac4>)
 8022cce:	681b      	ldr	r3, [r3, #0]
 8022cd0:	3301      	adds	r3, #1
 8022cd2:	4a1a      	ldr	r2, [pc, #104]	; (8022d3c <HAL_SPI_TxRxCpltCallback+0xac4>)
 8022cd4:	6013      	str	r3, [r2, #0]
			break;
 8022cd6:	e112      	b.n	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
						else if(trak.state == SETCUE) {
 8022cd8:	4b0c      	ldr	r3, [pc, #48]	; (8022d0c <HAL_SPI_TxRxCpltCallback+0xa94>)
 8022cda:	781b      	ldrb	r3, [r3, #0]
 8022cdc:	2b02      	cmp	r3, #2
 8022cde:	f040 810e 	bne.w	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
							GoToPosition(file_pos_wide + 2);
 8022ce2:	4b17      	ldr	r3, [pc, #92]	; (8022d40 <HAL_SPI_TxRxCpltCallback+0xac8>)
 8022ce4:	681b      	ldr	r3, [r3, #0]
 8022ce6:	3302      	adds	r3, #2
 8022ce8:	4618      	mov	r0, r3
 8022cea:	f001 fcef 	bl	80246cc <GoToPosition>
							GetTrackTime();
 8022cee:	f001 fa49 	bl	8024184 <GetTrackTime>
			break;
 8022cf2:	e104      	b.n	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
 8022cf4:	200182f0 	.word	0x200182f0
 8022cf8:	200008fc 	.word	0x200008fc
 8022cfc:	20000098 	.word	0x20000098
 8022d00:	3e23d70a 	.word	0x3e23d70a
 8022d04:	3dcccccd 	.word	0x3dcccccd
 8022d08:	3d75c28f 	.word	0x3d75c28f
 8022d0c:	2000e6e0 	.word	0x2000e6e0
 8022d10:	46800000 	.word	0x46800000
 8022d14:	200000a0 	.word	0x200000a0
 8022d18:	20017f08 	.word	0x20017f08
 8022d1c:	200181a0 	.word	0x200181a0
 8022d20:	20018230 	.word	0x20018230
 8022d24:	2000e6dc 	.word	0x2000e6dc
 8022d28:	200007e0 	.word	0x200007e0
 8022d2c:	20000090 	.word	0x20000090
 8022d30:	20000094 	.word	0x20000094
 8022d34:	20001f94 	.word	0x20001f94
 8022d38:	2001819c 	.word	0x2001819c
 8022d3c:	200181a4 	.word	0x200181a4
 8022d40:	20001e00 	.word	0x20001e00
				else if(spi_rx[3] == 0x7F) {
 8022d44:	4b7d      	ldr	r3, [pc, #500]	; (8022f3c <HAL_SPI_TxRxCpltCallback+0xcc4>)
 8022d46:	78db      	ldrb	r3, [r3, #3]
 8022d48:	2b7f      	cmp	r3, #127	; 0x7f
 8022d4a:	f040 80d8 	bne.w	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
					if(menu_mode == 1) {
 8022d4e:	4b7c      	ldr	r3, [pc, #496]	; (8022f40 <HAL_SPI_TxRxCpltCallback+0xcc8>)
 8022d50:	f993 3000 	ldrsb.w	r3, [r3]
 8022d54:	2b01      	cmp	r3, #1
 8022d56:	d145      	bne.n	8022de4 <HAL_SPI_TxRxCpltCallback+0xb6c>
						String_number--;
 8022d58:	4b7a      	ldr	r3, [pc, #488]	; (8022f44 <HAL_SPI_TxRxCpltCallback+0xccc>)
 8022d5a:	681b      	ldr	r3, [r3, #0]
 8022d5c:	3b01      	subs	r3, #1
 8022d5e:	4a79      	ldr	r2, [pc, #484]	; (8022f44 <HAL_SPI_TxRxCpltCallback+0xccc>)
 8022d60:	6013      	str	r3, [r2, #0]
						Mark_number = String_number;
 8022d62:	4b78      	ldr	r3, [pc, #480]	; (8022f44 <HAL_SPI_TxRxCpltCallback+0xccc>)
 8022d64:	681b      	ldr	r3, [r3, #0]
 8022d66:	4a78      	ldr	r2, [pc, #480]	; (8022f48 <HAL_SPI_TxRxCpltCallback+0xcd0>)
 8022d68:	6013      	str	r3, [r2, #0]
						if(String_number < 0) {
 8022d6a:	4b76      	ldr	r3, [pc, #472]	; (8022f44 <HAL_SPI_TxRxCpltCallback+0xccc>)
 8022d6c:	681b      	ldr	r3, [r3, #0]
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	f280 80c5 	bge.w	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
							if(Total_tracks > 7) {
 8022d74:	4b75      	ldr	r3, [pc, #468]	; (8022f4c <HAL_SPI_TxRxCpltCallback+0xcd4>)
 8022d76:	881b      	ldrh	r3, [r3, #0]
 8022d78:	2b07      	cmp	r3, #7
 8022d7a:	d928      	bls.n	8022dce <HAL_SPI_TxRxCpltCallback+0xb56>
								String_number = 6;
 8022d7c:	4b71      	ldr	r3, [pc, #452]	; (8022f44 <HAL_SPI_TxRxCpltCallback+0xccc>)
 8022d7e:	2206      	movs	r2, #6
 8022d80:	601a      	str	r2, [r3, #0]
								Mark_number = 6;
 8022d82:	4b71      	ldr	r3, [pc, #452]	; (8022f48 <HAL_SPI_TxRxCpltCallback+0xcd0>)
 8022d84:	2206      	movs	r2, #6
 8022d86:	601a      	str	r2, [r3, #0]
								str_increment -= 7;
 8022d88:	4b71      	ldr	r3, [pc, #452]	; (8022f50 <HAL_SPI_TxRxCpltCallback+0xcd8>)
 8022d8a:	681b      	ldr	r3, [r3, #0]
 8022d8c:	3b07      	subs	r3, #7
 8022d8e:	4a70      	ldr	r2, [pc, #448]	; (8022f50 <HAL_SPI_TxRxCpltCallback+0xcd8>)
 8022d90:	6013      	str	r3, [r2, #0]
								if(str_increment == Total_tracks - 7)
 8022d92:	4b6e      	ldr	r3, [pc, #440]	; (8022f4c <HAL_SPI_TxRxCpltCallback+0xcd4>)
 8022d94:	881b      	ldrh	r3, [r3, #0]
 8022d96:	1fda      	subs	r2, r3, #7
 8022d98:	4b6d      	ldr	r3, [pc, #436]	; (8022f50 <HAL_SPI_TxRxCpltCallback+0xcd8>)
 8022d9a:	681b      	ldr	r3, [r3, #0]
 8022d9c:	429a      	cmp	r2, r3
 8022d9e:	d10d      	bne.n	8022dbc <HAL_SPI_TxRxCpltCallback+0xb44>
									str_increment = (str_increment / 7) * 7;
 8022da0:	4b6b      	ldr	r3, [pc, #428]	; (8022f50 <HAL_SPI_TxRxCpltCallback+0xcd8>)
 8022da2:	681b      	ldr	r3, [r3, #0]
 8022da4:	4a6b      	ldr	r2, [pc, #428]	; (8022f54 <HAL_SPI_TxRxCpltCallback+0xcdc>)
 8022da6:	fb82 1203 	smull	r1, r2, r2, r3
 8022daa:	441a      	add	r2, r3
 8022dac:	1092      	asrs	r2, r2, #2
 8022dae:	17db      	asrs	r3, r3, #31
 8022db0:	1ad2      	subs	r2, r2, r3
 8022db2:	4613      	mov	r3, r2
 8022db4:	00db      	lsls	r3, r3, #3
 8022db6:	1a9b      	subs	r3, r3, r2
 8022db8:	4a65      	ldr	r2, [pc, #404]	; (8022f50 <HAL_SPI_TxRxCpltCallback+0xcd8>)
 8022dba:	6013      	str	r3, [r2, #0]
								if(str_increment <= 0)
 8022dbc:	4b64      	ldr	r3, [pc, #400]	; (8022f50 <HAL_SPI_TxRxCpltCallback+0xcd8>)
 8022dbe:	681b      	ldr	r3, [r3, #0]
 8022dc0:	2b00      	cmp	r3, #0
 8022dc2:	f300 809c 	bgt.w	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
									str_increment = 0;
 8022dc6:	4b62      	ldr	r3, [pc, #392]	; (8022f50 <HAL_SPI_TxRxCpltCallback+0xcd8>)
 8022dc8:	2200      	movs	r2, #0
 8022dca:	601a      	str	r2, [r3, #0]
			break;
 8022dcc:	e097      	b.n	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
								String_number = Total_tracks - 1;
 8022dce:	4b5f      	ldr	r3, [pc, #380]	; (8022f4c <HAL_SPI_TxRxCpltCallback+0xcd4>)
 8022dd0:	881b      	ldrh	r3, [r3, #0]
 8022dd2:	3b01      	subs	r3, #1
 8022dd4:	4a5b      	ldr	r2, [pc, #364]	; (8022f44 <HAL_SPI_TxRxCpltCallback+0xccc>)
 8022dd6:	6013      	str	r3, [r2, #0]
								Mark_number = Total_tracks - 1;;
 8022dd8:	4b5c      	ldr	r3, [pc, #368]	; (8022f4c <HAL_SPI_TxRxCpltCallback+0xcd4>)
 8022dda:	881b      	ldrh	r3, [r3, #0]
 8022ddc:	3b01      	subs	r3, #1
 8022dde:	4a5a      	ldr	r2, [pc, #360]	; (8022f48 <HAL_SPI_TxRxCpltCallback+0xcd0>)
 8022de0:	6013      	str	r3, [r2, #0]
			break;
 8022de2:	e08c      	b.n	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
						if(trak.state == PLAYING) {
 8022de4:	4b5c      	ldr	r3, [pc, #368]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022de6:	781b      	ldrb	r3, [r3, #0]
 8022de8:	2b00      	cmp	r3, #0
 8022dea:	d105      	bne.n	8022df8 <HAL_SPI_TxRxCpltCallback+0xb80>
							pulses--;
 8022dec:	4b5b      	ldr	r3, [pc, #364]	; (8022f5c <HAL_SPI_TxRxCpltCallback+0xce4>)
 8022dee:	681b      	ldr	r3, [r3, #0]
 8022df0:	3b01      	subs	r3, #1
 8022df2:	4a5a      	ldr	r2, [pc, #360]	; (8022f5c <HAL_SPI_TxRxCpltCallback+0xce4>)
 8022df4:	6013      	str	r3, [r2, #0]
			break;
 8022df6:	e082      	b.n	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
						else if(trak.state == SETCUE) {
 8022df8:	4b57      	ldr	r3, [pc, #348]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022dfa:	781b      	ldrb	r3, [r3, #0]
 8022dfc:	2b02      	cmp	r3, #2
 8022dfe:	d17e      	bne.n	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
							GoToPosition(file_pos_wide - 2);
 8022e00:	4b57      	ldr	r3, [pc, #348]	; (8022f60 <HAL_SPI_TxRxCpltCallback+0xce8>)
 8022e02:	681b      	ldr	r3, [r3, #0]
 8022e04:	3b02      	subs	r3, #2
 8022e06:	4618      	mov	r0, r3
 8022e08:	f001 fc60 	bl	80246cc <GoToPosition>
							GetTrackTime();
 8022e0c:	f001 f9ba 	bl	8024184 <GetTrackTime>
			break;
 8022e10:	e075      	b.n	8022efe <HAL_SPI_TxRxCpltCallback+0xc86>
		}
		case 0xE0: {
			uint16_t pitch_rx = spi_rx[3];
 8022e12:	4b4a      	ldr	r3, [pc, #296]	; (8022f3c <HAL_SPI_TxRxCpltCallback+0xcc4>)
 8022e14:	78db      	ldrb	r3, [r3, #3]
 8022e16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pitch_rx <<= 8;
 8022e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8022e1e:	021b      	lsls	r3, r3, #8
 8022e20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pitch_rx |= spi_rx[2];
 8022e24:	4b45      	ldr	r3, [pc, #276]	; (8022f3c <HAL_SPI_TxRxCpltCallback+0xcc4>)
 8022e26:	789b      	ldrb	r3, [r3, #2]
 8022e28:	b29a      	uxth	r2, r3
 8022e2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8022e2e:	4313      	orrs	r3, r2
 8022e30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			if(flag == 0) {
 8022e34:	4b4b      	ldr	r3, [pc, #300]	; (8022f64 <HAL_SPI_TxRxCpltCallback+0xcec>)
 8022e36:	781b      	ldrb	r3, [r3, #0]
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	d10a      	bne.n	8022e52 <HAL_SPI_TxRxCpltCallback+0xbda>
				if(trak.pitch == 0) trak.pitch = pitch_rx;
 8022e3c:	4b46      	ldr	r3, [pc, #280]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022e3e:	885b      	ldrh	r3, [r3, #2]
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	d103      	bne.n	8022e4c <HAL_SPI_TxRxCpltCallback+0xbd4>
 8022e44:	4a44      	ldr	r2, [pc, #272]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022e46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8022e4a:	8053      	strh	r3, [r2, #2]
				flag = 1;
 8022e4c:	4b45      	ldr	r3, [pc, #276]	; (8022f64 <HAL_SPI_TxRxCpltCallback+0xcec>)
 8022e4e:	2201      	movs	r2, #1
 8022e50:	701a      	strb	r2, [r3, #0]
			}
			int delta = trak.pitch - pitch_rx;
 8022e52:	4b41      	ldr	r3, [pc, #260]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022e54:	885b      	ldrh	r3, [r3, #2]
 8022e56:	461a      	mov	r2, r3
 8022e58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8022e5c:	1ad3      	subs	r3, r2, r3
 8022e5e:	64bb      	str	r3, [r7, #72]	; 0x48
			if(delta < 0) delta = pitch_rx - trak.pitch;
 8022e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	da05      	bge.n	8022e72 <HAL_SPI_TxRxCpltCallback+0xbfa>
 8022e66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8022e6a:	4a3b      	ldr	r2, [pc, #236]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022e6c:	8852      	ldrh	r2, [r2, #2]
 8022e6e:	1a9b      	subs	r3, r3, r2
 8022e70:	64bb      	str	r3, [r7, #72]	; 0x48
			if(pitch_rx < 64) pitch_rx = 64;
 8022e72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8022e76:	2b3f      	cmp	r3, #63	; 0x3f
 8022e78:	d802      	bhi.n	8022e80 <HAL_SPI_TxRxCpltCallback+0xc08>
 8022e7a:	2340      	movs	r3, #64	; 0x40
 8022e7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			if(delta < 16384) {
 8022e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8022e86:	da3c      	bge.n	8022f02 <HAL_SPI_TxRxCpltCallback+0xc8a>
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 8022e88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8022e8c:	ee07 3a90 	vmov	s15, r3
 8022e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022e94:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8022f68 <HAL_SPI_TxRxCpltCallback+0xcf0>
 8022e98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022e9c:	eddf 6a33 	vldr	s13, [pc, #204]	; 8022f6c <HAL_SPI_TxRxCpltCallback+0xcf4>
 8022ea0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8022ea4:	4b32      	ldr	r3, [pc, #200]	; (8022f70 <HAL_SPI_TxRxCpltCallback+0xcf8>)
 8022ea6:	edd3 7a00 	vldr	s15, [r3]
 8022eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022eae:	4b2a      	ldr	r3, [pc, #168]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022eb0:	edc3 7a01 	vstr	s15, [r3, #4]
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 8022eb4:	4b28      	ldr	r3, [pc, #160]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022eb6:	891b      	ldrh	r3, [r3, #8]
 8022eb8:	085b      	lsrs	r3, r3, #1
 8022eba:	b29b      	uxth	r3, r3
 8022ebc:	ee07 3a90 	vmov	s15, r3
 8022ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022ec4:	4b24      	ldr	r3, [pc, #144]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022ec6:	edd3 7a01 	vldr	s15, [r3, #4]
 8022eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022eda:	ee17 2a90 	vmov	r2, s15
 8022ede:	4b25      	ldr	r3, [pc, #148]	; (8022f74 <HAL_SPI_TxRxCpltCallback+0xcfc>)
 8022ee0:	601a      	str	r2, [r3, #0]
				BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 8022ee2:	4b24      	ldr	r3, [pc, #144]	; (8022f74 <HAL_SPI_TxRxCpltCallback+0xcfc>)
 8022ee4:	681b      	ldr	r3, [r3, #0]
 8022ee6:	2200      	movs	r2, #0
 8022ee8:	4619      	mov	r1, r3
 8022eea:	4823      	ldr	r0, [pc, #140]	; (8022f78 <HAL_SPI_TxRxCpltCallback+0xd00>)
 8022eec:	f7fd ffda 	bl	8020ea4 <BSP_AUDIO_OUT_ClockConfig>
				trak.pitch = pitch_rx;
 8022ef0:	4a19      	ldr	r2, [pc, #100]	; (8022f58 <HAL_SPI_TxRxCpltCallback+0xce0>)
 8022ef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8022ef6:	8053      	strh	r3, [r2, #2]
			}
			break;
 8022ef8:	e003      	b.n	8022f02 <HAL_SPI_TxRxCpltCallback+0xc8a>
		}
		default: break;
 8022efa:	bf00      	nop
 8022efc:	e002      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
			break;
 8022efe:	bf00      	nop
 8022f00:	e000      	b.n	8022f04 <HAL_SPI_TxRxCpltCallback+0xc8c>
			break;
 8022f02:	bf00      	nop
		}
	for(int i = 0; i < 4; i++) spi_rx[i] = 0;
 8022f04:	2300      	movs	r3, #0
 8022f06:	647b      	str	r3, [r7, #68]	; 0x44
 8022f08:	e007      	b.n	8022f1a <HAL_SPI_TxRxCpltCallback+0xca2>
 8022f0a:	4a0c      	ldr	r2, [pc, #48]	; (8022f3c <HAL_SPI_TxRxCpltCallback+0xcc4>)
 8022f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022f0e:	4413      	add	r3, r2
 8022f10:	2200      	movs	r2, #0
 8022f12:	701a      	strb	r2, [r3, #0]
 8022f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022f16:	3301      	adds	r3, #1
 8022f18:	647b      	str	r3, [r7, #68]	; 0x44
 8022f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022f1c:	2b03      	cmp	r3, #3
 8022f1e:	ddf4      	ble.n	8022f0a <HAL_SPI_TxRxCpltCallback+0xc92>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 8022f20:	2304      	movs	r3, #4
 8022f22:	4a06      	ldr	r2, [pc, #24]	; (8022f3c <HAL_SPI_TxRxCpltCallback+0xcc4>)
 8022f24:	4915      	ldr	r1, [pc, #84]	; (8022f7c <HAL_SPI_TxRxCpltCallback+0xd04>)
 8022f26:	4816      	ldr	r0, [pc, #88]	; (8022f80 <HAL_SPI_TxRxCpltCallback+0xd08>)
 8022f28:	f7e5 ffe8 	bl	8008efc <HAL_SPI_TransmitReceive_IT>
}
 8022f2c:	bf00      	nop
 8022f2e:	3750      	adds	r7, #80	; 0x50
 8022f30:	46bd      	mov	sp, r7
 8022f32:	ecbd 8b02 	vpop	{d8}
 8022f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022f3a:	bf00      	nop
 8022f3c:	2000e6dc 	.word	0x2000e6dc
 8022f40:	200007e0 	.word	0x200007e0
 8022f44:	20000090 	.word	0x20000090
 8022f48:	20000094 	.word	0x20000094
 8022f4c:	20001f94 	.word	0x20001f94
 8022f50:	2001819c 	.word	0x2001819c
 8022f54:	92492493 	.word	0x92492493
 8022f58:	2000e6e0 	.word	0x2000e6e0
 8022f5c:	200181a4 	.word	0x200181a4
 8022f60:	20001e00 	.word	0x20001e00
 8022f64:	20018194 	.word	0x20018194
 8022f68:	467ffc00 	.word	0x467ffc00
 8022f6c:	46800000 	.word	0x46800000
 8022f70:	20000098 	.word	0x20000098
 8022f74:	200000a0 	.word	0x200000a0
 8022f78:	20017f08 	.word	0x20017f08
 8022f7c:	20000054 	.word	0x20000054
 8022f80:	20018074 	.word	0x20018074

08022f84 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8022f84:	b580      	push	{r7, lr}
 8022f86:	b084      	sub	sp, #16
 8022f88:	af00      	add	r7, sp, #0
 8022f8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8022f8c:	4b11      	ldr	r3, [pc, #68]	; (8022fd4 <_sbrk+0x50>)
 8022f8e:	681b      	ldr	r3, [r3, #0]
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	d102      	bne.n	8022f9a <_sbrk+0x16>
		heap_end = &end;
 8022f94:	4b0f      	ldr	r3, [pc, #60]	; (8022fd4 <_sbrk+0x50>)
 8022f96:	4a10      	ldr	r2, [pc, #64]	; (8022fd8 <_sbrk+0x54>)
 8022f98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8022f9a:	4b0e      	ldr	r3, [pc, #56]	; (8022fd4 <_sbrk+0x50>)
 8022f9c:	681b      	ldr	r3, [r3, #0]
 8022f9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8022fa0:	4b0c      	ldr	r3, [pc, #48]	; (8022fd4 <_sbrk+0x50>)
 8022fa2:	681a      	ldr	r2, [r3, #0]
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	4413      	add	r3, r2
 8022fa8:	466a      	mov	r2, sp
 8022faa:	4293      	cmp	r3, r2
 8022fac:	d907      	bls.n	8022fbe <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8022fae:	f002 ff81 	bl	8025eb4 <__errno>
 8022fb2:	4603      	mov	r3, r0
 8022fb4:	220c      	movs	r2, #12
 8022fb6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8022fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8022fbc:	e006      	b.n	8022fcc <_sbrk+0x48>
	}

	heap_end += incr;
 8022fbe:	4b05      	ldr	r3, [pc, #20]	; (8022fd4 <_sbrk+0x50>)
 8022fc0:	681a      	ldr	r2, [r3, #0]
 8022fc2:	687b      	ldr	r3, [r7, #4]
 8022fc4:	4413      	add	r3, r2
 8022fc6:	4a03      	ldr	r2, [pc, #12]	; (8022fd4 <_sbrk+0x50>)
 8022fc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8022fca:	68fb      	ldr	r3, [r7, #12]
}
 8022fcc:	4618      	mov	r0, r3
 8022fce:	3710      	adds	r7, #16
 8022fd0:	46bd      	mov	sp, r7
 8022fd2:	bd80      	pop	{r7, pc}
 8022fd4:	200181ac 	.word	0x200181ac
 8022fd8:	20018ea8 	.word	0x20018ea8

08022fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8022fdc:	b480      	push	{r7}
 8022fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8022fe0:	4b15      	ldr	r3, [pc, #84]	; (8023038 <SystemInit+0x5c>)
 8022fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022fe6:	4a14      	ldr	r2, [pc, #80]	; (8023038 <SystemInit+0x5c>)
 8022fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8022fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8022ff0:	4b12      	ldr	r3, [pc, #72]	; (802303c <SystemInit+0x60>)
 8022ff2:	681b      	ldr	r3, [r3, #0]
 8022ff4:	4a11      	ldr	r2, [pc, #68]	; (802303c <SystemInit+0x60>)
 8022ff6:	f043 0301 	orr.w	r3, r3, #1
 8022ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8022ffc:	4b0f      	ldr	r3, [pc, #60]	; (802303c <SystemInit+0x60>)
 8022ffe:	2200      	movs	r2, #0
 8023000:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8023002:	4b0e      	ldr	r3, [pc, #56]	; (802303c <SystemInit+0x60>)
 8023004:	681a      	ldr	r2, [r3, #0]
 8023006:	490d      	ldr	r1, [pc, #52]	; (802303c <SystemInit+0x60>)
 8023008:	4b0d      	ldr	r3, [pc, #52]	; (8023040 <SystemInit+0x64>)
 802300a:	4013      	ands	r3, r2
 802300c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 802300e:	4b0b      	ldr	r3, [pc, #44]	; (802303c <SystemInit+0x60>)
 8023010:	4a0c      	ldr	r2, [pc, #48]	; (8023044 <SystemInit+0x68>)
 8023012:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8023014:	4b09      	ldr	r3, [pc, #36]	; (802303c <SystemInit+0x60>)
 8023016:	681b      	ldr	r3, [r3, #0]
 8023018:	4a08      	ldr	r2, [pc, #32]	; (802303c <SystemInit+0x60>)
 802301a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802301e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8023020:	4b06      	ldr	r3, [pc, #24]	; (802303c <SystemInit+0x60>)
 8023022:	2200      	movs	r2, #0
 8023024:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8023026:	4b04      	ldr	r3, [pc, #16]	; (8023038 <SystemInit+0x5c>)
 8023028:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802302c:	609a      	str	r2, [r3, #8]
#endif
}
 802302e:	bf00      	nop
 8023030:	46bd      	mov	sp, r7
 8023032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023036:	4770      	bx	lr
 8023038:	e000ed00 	.word	0xe000ed00
 802303c:	40023800 	.word	0x40023800
 8023040:	fef6ffff 	.word	0xfef6ffff
 8023044:	24003010 	.word	0x24003010

08023048 <MX_TIM4_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8023048:	b580      	push	{r7, lr}
 802304a:	b088      	sub	sp, #32
 802304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802304e:	f107 0310 	add.w	r3, r7, #16
 8023052:	2200      	movs	r2, #0
 8023054:	601a      	str	r2, [r3, #0]
 8023056:	605a      	str	r2, [r3, #4]
 8023058:	609a      	str	r2, [r3, #8]
 802305a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802305c:	1d3b      	adds	r3, r7, #4
 802305e:	2200      	movs	r2, #0
 8023060:	601a      	str	r2, [r3, #0]
 8023062:	605a      	str	r2, [r3, #4]
 8023064:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8023066:	4b1e      	ldr	r3, [pc, #120]	; (80230e0 <MX_TIM4_Init+0x98>)
 8023068:	4a1e      	ldr	r2, [pc, #120]	; (80230e4 <MX_TIM4_Init+0x9c>)
 802306a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 802306c:	4b1c      	ldr	r3, [pc, #112]	; (80230e0 <MX_TIM4_Init+0x98>)
 802306e:	f242 720f 	movw	r2, #9999	; 0x270f
 8023072:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023074:	4b1a      	ldr	r3, [pc, #104]	; (80230e0 <MX_TIM4_Init+0x98>)
 8023076:	2200      	movs	r2, #0
 8023078:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 802307a:	4b19      	ldr	r3, [pc, #100]	; (80230e0 <MX_TIM4_Init+0x98>)
 802307c:	f240 128f 	movw	r2, #399	; 0x18f
 8023080:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023082:	4b17      	ldr	r3, [pc, #92]	; (80230e0 <MX_TIM4_Init+0x98>)
 8023084:	2200      	movs	r2, #0
 8023086:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023088:	4b15      	ldr	r3, [pc, #84]	; (80230e0 <MX_TIM4_Init+0x98>)
 802308a:	2200      	movs	r2, #0
 802308c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802308e:	4814      	ldr	r0, [pc, #80]	; (80230e0 <MX_TIM4_Init+0x98>)
 8023090:	f7e6 fb82 	bl	8009798 <HAL_TIM_Base_Init>
 8023094:	4603      	mov	r3, r0
 8023096:	2b00      	cmp	r3, #0
 8023098:	d001      	beq.n	802309e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 802309a:	f7fb faba 	bl	801e612 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802309e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80230a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80230a4:	f107 0310 	add.w	r3, r7, #16
 80230a8:	4619      	mov	r1, r3
 80230aa:	480d      	ldr	r0, [pc, #52]	; (80230e0 <MX_TIM4_Init+0x98>)
 80230ac:	f7e6 fe80 	bl	8009db0 <HAL_TIM_ConfigClockSource>
 80230b0:	4603      	mov	r3, r0
 80230b2:	2b00      	cmp	r3, #0
 80230b4:	d001      	beq.n	80230ba <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80230b6:	f7fb faac 	bl	801e612 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80230ba:	2300      	movs	r3, #0
 80230bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80230be:	2300      	movs	r3, #0
 80230c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80230c2:	1d3b      	adds	r3, r7, #4
 80230c4:	4619      	mov	r1, r3
 80230c6:	4806      	ldr	r0, [pc, #24]	; (80230e0 <MX_TIM4_Init+0x98>)
 80230c8:	f7e7 fb2c 	bl	800a724 <HAL_TIMEx_MasterConfigSynchronization>
 80230cc:	4603      	mov	r3, r0
 80230ce:	2b00      	cmp	r3, #0
 80230d0:	d001      	beq.n	80230d6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80230d2:	f7fb fa9e 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80230d6:	bf00      	nop
 80230d8:	3720      	adds	r7, #32
 80230da:	46bd      	mov	sp, r7
 80230dc:	bd80      	pop	{r7, pc}
 80230de:	bf00      	nop
 80230e0:	200181b0 	.word	0x200181b0
 80230e4:	40000800 	.word	0x40000800

080230e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80230e8:	b580      	push	{r7, lr}
 80230ea:	b088      	sub	sp, #32
 80230ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80230ee:	f107 0310 	add.w	r3, r7, #16
 80230f2:	2200      	movs	r2, #0
 80230f4:	601a      	str	r2, [r3, #0]
 80230f6:	605a      	str	r2, [r3, #4]
 80230f8:	609a      	str	r2, [r3, #8]
 80230fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80230fc:	1d3b      	adds	r3, r7, #4
 80230fe:	2200      	movs	r2, #0
 8023100:	601a      	str	r2, [r3, #0]
 8023102:	605a      	str	r2, [r3, #4]
 8023104:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8023106:	4b1e      	ldr	r3, [pc, #120]	; (8023180 <MX_TIM5_Init+0x98>)
 8023108:	4a1e      	ldr	r2, [pc, #120]	; (8023184 <MX_TIM5_Init+0x9c>)
 802310a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 19199;
 802310c:	4b1c      	ldr	r3, [pc, #112]	; (8023180 <MX_TIM5_Init+0x98>)
 802310e:	f644 22ff 	movw	r2, #19199	; 0x4aff
 8023112:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023114:	4b1a      	ldr	r3, [pc, #104]	; (8023180 <MX_TIM5_Init+0x98>)
 8023116:	2200      	movs	r2, #0
 8023118:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 802311a:	4b19      	ldr	r3, [pc, #100]	; (8023180 <MX_TIM5_Init+0x98>)
 802311c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8023120:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023122:	4b17      	ldr	r3, [pc, #92]	; (8023180 <MX_TIM5_Init+0x98>)
 8023124:	2200      	movs	r2, #0
 8023126:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023128:	4b15      	ldr	r3, [pc, #84]	; (8023180 <MX_TIM5_Init+0x98>)
 802312a:	2200      	movs	r2, #0
 802312c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 802312e:	4814      	ldr	r0, [pc, #80]	; (8023180 <MX_TIM5_Init+0x98>)
 8023130:	f7e6 fb32 	bl	8009798 <HAL_TIM_Base_Init>
 8023134:	4603      	mov	r3, r0
 8023136:	2b00      	cmp	r3, #0
 8023138:	d001      	beq.n	802313e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 802313a:	f7fb fa6a 	bl	801e612 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802313e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023142:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8023144:	f107 0310 	add.w	r3, r7, #16
 8023148:	4619      	mov	r1, r3
 802314a:	480d      	ldr	r0, [pc, #52]	; (8023180 <MX_TIM5_Init+0x98>)
 802314c:	f7e6 fe30 	bl	8009db0 <HAL_TIM_ConfigClockSource>
 8023150:	4603      	mov	r3, r0
 8023152:	2b00      	cmp	r3, #0
 8023154:	d001      	beq.n	802315a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8023156:	f7fb fa5c 	bl	801e612 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802315a:	2300      	movs	r3, #0
 802315c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802315e:	2300      	movs	r3, #0
 8023160:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8023162:	1d3b      	adds	r3, r7, #4
 8023164:	4619      	mov	r1, r3
 8023166:	4806      	ldr	r0, [pc, #24]	; (8023180 <MX_TIM5_Init+0x98>)
 8023168:	f7e7 fadc 	bl	800a724 <HAL_TIMEx_MasterConfigSynchronization>
 802316c:	4603      	mov	r3, r0
 802316e:	2b00      	cmp	r3, #0
 8023170:	d001      	beq.n	8023176 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8023172:	f7fb fa4e 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8023176:	bf00      	nop
 8023178:	3720      	adds	r7, #32
 802317a:	46bd      	mov	sp, r7
 802317c:	bd80      	pop	{r7, pc}
 802317e:	bf00      	nop
 8023180:	200181f0 	.word	0x200181f0
 8023184:	40000c00 	.word	0x40000c00

08023188 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8023188:	b580      	push	{r7, lr}
 802318a:	b084      	sub	sp, #16
 802318c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802318e:	1d3b      	adds	r3, r7, #4
 8023190:	2200      	movs	r2, #0
 8023192:	601a      	str	r2, [r3, #0]
 8023194:	605a      	str	r2, [r3, #4]
 8023196:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8023198:	4b15      	ldr	r3, [pc, #84]	; (80231f0 <MX_TIM6_Init+0x68>)
 802319a:	4a16      	ldr	r2, [pc, #88]	; (80231f4 <MX_TIM6_Init+0x6c>)
 802319c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 802319e:	4b14      	ldr	r3, [pc, #80]	; (80231f0 <MX_TIM6_Init+0x68>)
 80231a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80231a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80231a6:	4b12      	ldr	r3, [pc, #72]	; (80231f0 <MX_TIM6_Init+0x68>)
 80231a8:	2200      	movs	r2, #0
 80231aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80231ac:	4b10      	ldr	r3, [pc, #64]	; (80231f0 <MX_TIM6_Init+0x68>)
 80231ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80231b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80231b4:	4b0e      	ldr	r3, [pc, #56]	; (80231f0 <MX_TIM6_Init+0x68>)
 80231b6:	2200      	movs	r2, #0
 80231b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80231ba:	480d      	ldr	r0, [pc, #52]	; (80231f0 <MX_TIM6_Init+0x68>)
 80231bc:	f7e6 faec 	bl	8009798 <HAL_TIM_Base_Init>
 80231c0:	4603      	mov	r3, r0
 80231c2:	2b00      	cmp	r3, #0
 80231c4:	d001      	beq.n	80231ca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80231c6:	f7fb fa24 	bl	801e612 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80231ca:	2300      	movs	r3, #0
 80231cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80231ce:	2300      	movs	r3, #0
 80231d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80231d2:	1d3b      	adds	r3, r7, #4
 80231d4:	4619      	mov	r1, r3
 80231d6:	4806      	ldr	r0, [pc, #24]	; (80231f0 <MX_TIM6_Init+0x68>)
 80231d8:	f7e7 faa4 	bl	800a724 <HAL_TIMEx_MasterConfigSynchronization>
 80231dc:	4603      	mov	r3, r0
 80231de:	2b00      	cmp	r3, #0
 80231e0:	d001      	beq.n	80231e6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80231e2:	f7fb fa16 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80231e6:	bf00      	nop
 80231e8:	3710      	adds	r7, #16
 80231ea:	46bd      	mov	sp, r7
 80231ec:	bd80      	pop	{r7, pc}
 80231ee:	bf00      	nop
 80231f0:	20018230 	.word	0x20018230
 80231f4:	40001000 	.word	0x40001000

080231f8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80231f8:	b580      	push	{r7, lr}
 80231fa:	b084      	sub	sp, #16
 80231fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80231fe:	1d3b      	adds	r3, r7, #4
 8023200:	2200      	movs	r2, #0
 8023202:	601a      	str	r2, [r3, #0]
 8023204:	605a      	str	r2, [r3, #4]
 8023206:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8023208:	4b15      	ldr	r3, [pc, #84]	; (8023260 <MX_TIM7_Init+0x68>)
 802320a:	4a16      	ldr	r2, [pc, #88]	; (8023264 <MX_TIM7_Init+0x6c>)
 802320c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 802320e:	4b14      	ldr	r3, [pc, #80]	; (8023260 <MX_TIM7_Init+0x68>)
 8023210:	f242 720f 	movw	r2, #9999	; 0x270f
 8023214:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023216:	4b12      	ldr	r3, [pc, #72]	; (8023260 <MX_TIM7_Init+0x68>)
 8023218:	2200      	movs	r2, #0
 802321a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 802321c:	4b10      	ldr	r3, [pc, #64]	; (8023260 <MX_TIM7_Init+0x68>)
 802321e:	f241 3287 	movw	r2, #4999	; 0x1387
 8023222:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023224:	4b0e      	ldr	r3, [pc, #56]	; (8023260 <MX_TIM7_Init+0x68>)
 8023226:	2200      	movs	r2, #0
 8023228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 802322a:	480d      	ldr	r0, [pc, #52]	; (8023260 <MX_TIM7_Init+0x68>)
 802322c:	f7e6 fab4 	bl	8009798 <HAL_TIM_Base_Init>
 8023230:	4603      	mov	r3, r0
 8023232:	2b00      	cmp	r3, #0
 8023234:	d001      	beq.n	802323a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8023236:	f7fb f9ec 	bl	801e612 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802323a:	2300      	movs	r3, #0
 802323c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802323e:	2300      	movs	r3, #0
 8023240:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8023242:	1d3b      	adds	r3, r7, #4
 8023244:	4619      	mov	r1, r3
 8023246:	4806      	ldr	r0, [pc, #24]	; (8023260 <MX_TIM7_Init+0x68>)
 8023248:	f7e7 fa6c 	bl	800a724 <HAL_TIMEx_MasterConfigSynchronization>
 802324c:	4603      	mov	r3, r0
 802324e:	2b00      	cmp	r3, #0
 8023250:	d001      	beq.n	8023256 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8023252:	f7fb f9de 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8023256:	bf00      	nop
 8023258:	3710      	adds	r7, #16
 802325a:	46bd      	mov	sp, r7
 802325c:	bd80      	pop	{r7, pc}
 802325e:	bf00      	nop
 8023260:	20018270 	.word	0x20018270
 8023264:	40001400 	.word	0x40001400

08023268 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8023268:	b580      	push	{r7, lr}
 802326a:	b088      	sub	sp, #32
 802326c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802326e:	f107 0310 	add.w	r3, r7, #16
 8023272:	2200      	movs	r2, #0
 8023274:	601a      	str	r2, [r3, #0]
 8023276:	605a      	str	r2, [r3, #4]
 8023278:	609a      	str	r2, [r3, #8]
 802327a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802327c:	1d3b      	adds	r3, r7, #4
 802327e:	2200      	movs	r2, #0
 8023280:	601a      	str	r2, [r3, #0]
 8023282:	605a      	str	r2, [r3, #4]
 8023284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8023286:	4b20      	ldr	r3, [pc, #128]	; (8023308 <MX_TIM8_Init+0xa0>)
 8023288:	4a20      	ldr	r2, [pc, #128]	; (802330c <MX_TIM8_Init+0xa4>)
 802328a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9599;
 802328c:	4b1e      	ldr	r3, [pc, #120]	; (8023308 <MX_TIM8_Init+0xa0>)
 802328e:	f242 527f 	movw	r2, #9599	; 0x257f
 8023292:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023294:	4b1c      	ldr	r3, [pc, #112]	; (8023308 <MX_TIM8_Init+0xa0>)
 8023296:	2200      	movs	r2, #0
 8023298:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 802329a:	4b1b      	ldr	r3, [pc, #108]	; (8023308 <MX_TIM8_Init+0xa0>)
 802329c:	f242 720f 	movw	r2, #9999	; 0x270f
 80232a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80232a2:	4b19      	ldr	r3, [pc, #100]	; (8023308 <MX_TIM8_Init+0xa0>)
 80232a4:	2200      	movs	r2, #0
 80232a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80232a8:	4b17      	ldr	r3, [pc, #92]	; (8023308 <MX_TIM8_Init+0xa0>)
 80232aa:	2200      	movs	r2, #0
 80232ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80232ae:	4b16      	ldr	r3, [pc, #88]	; (8023308 <MX_TIM8_Init+0xa0>)
 80232b0:	2200      	movs	r2, #0
 80232b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80232b4:	4814      	ldr	r0, [pc, #80]	; (8023308 <MX_TIM8_Init+0xa0>)
 80232b6:	f7e6 fa6f 	bl	8009798 <HAL_TIM_Base_Init>
 80232ba:	4603      	mov	r3, r0
 80232bc:	2b00      	cmp	r3, #0
 80232be:	d001      	beq.n	80232c4 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 80232c0:	f7fb f9a7 	bl	801e612 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80232c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80232c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80232ca:	f107 0310 	add.w	r3, r7, #16
 80232ce:	4619      	mov	r1, r3
 80232d0:	480d      	ldr	r0, [pc, #52]	; (8023308 <MX_TIM8_Init+0xa0>)
 80232d2:	f7e6 fd6d 	bl	8009db0 <HAL_TIM_ConfigClockSource>
 80232d6:	4603      	mov	r3, r0
 80232d8:	2b00      	cmp	r3, #0
 80232da:	d001      	beq.n	80232e0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80232dc:	f7fb f999 	bl	801e612 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80232e0:	2300      	movs	r3, #0
 80232e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80232e4:	2300      	movs	r3, #0
 80232e6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80232e8:	2300      	movs	r3, #0
 80232ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80232ec:	1d3b      	adds	r3, r7, #4
 80232ee:	4619      	mov	r1, r3
 80232f0:	4805      	ldr	r0, [pc, #20]	; (8023308 <MX_TIM8_Init+0xa0>)
 80232f2:	f7e7 fa17 	bl	800a724 <HAL_TIMEx_MasterConfigSynchronization>
 80232f6:	4603      	mov	r3, r0
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	d001      	beq.n	8023300 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80232fc:	f7fb f989 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8023300:	bf00      	nop
 8023302:	3720      	adds	r7, #32
 8023304:	46bd      	mov	sp, r7
 8023306:	bd80      	pop	{r7, pc}
 8023308:	200182b0 	.word	0x200182b0
 802330c:	40010400 	.word	0x40010400

08023310 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8023310:	b580      	push	{r7, lr}
 8023312:	b084      	sub	sp, #16
 8023314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023316:	463b      	mov	r3, r7
 8023318:	2200      	movs	r2, #0
 802331a:	601a      	str	r2, [r3, #0]
 802331c:	605a      	str	r2, [r3, #4]
 802331e:	609a      	str	r2, [r3, #8]
 8023320:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8023322:	4b16      	ldr	r3, [pc, #88]	; (802337c <MX_TIM9_Init+0x6c>)
 8023324:	4a16      	ldr	r2, [pc, #88]	; (8023380 <MX_TIM9_Init+0x70>)
 8023326:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9599;
 8023328:	4b14      	ldr	r3, [pc, #80]	; (802337c <MX_TIM9_Init+0x6c>)
 802332a:	f242 527f 	movw	r2, #9599	; 0x257f
 802332e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023330:	4b12      	ldr	r3, [pc, #72]	; (802337c <MX_TIM9_Init+0x6c>)
 8023332:	2200      	movs	r2, #0
 8023334:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 8023336:	4b11      	ldr	r3, [pc, #68]	; (802337c <MX_TIM9_Init+0x6c>)
 8023338:	f644 621f 	movw	r2, #19999	; 0x4e1f
 802333c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802333e:	4b0f      	ldr	r3, [pc, #60]	; (802337c <MX_TIM9_Init+0x6c>)
 8023340:	2200      	movs	r2, #0
 8023342:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023344:	4b0d      	ldr	r3, [pc, #52]	; (802337c <MX_TIM9_Init+0x6c>)
 8023346:	2200      	movs	r2, #0
 8023348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 802334a:	480c      	ldr	r0, [pc, #48]	; (802337c <MX_TIM9_Init+0x6c>)
 802334c:	f7e6 fa24 	bl	8009798 <HAL_TIM_Base_Init>
 8023350:	4603      	mov	r3, r0
 8023352:	2b00      	cmp	r3, #0
 8023354:	d001      	beq.n	802335a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8023356:	f7fb f95c 	bl	801e612 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802335a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802335e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8023360:	463b      	mov	r3, r7
 8023362:	4619      	mov	r1, r3
 8023364:	4805      	ldr	r0, [pc, #20]	; (802337c <MX_TIM9_Init+0x6c>)
 8023366:	f7e6 fd23 	bl	8009db0 <HAL_TIM_ConfigClockSource>
 802336a:	4603      	mov	r3, r0
 802336c:	2b00      	cmp	r3, #0
 802336e:	d001      	beq.n	8023374 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8023370:	f7fb f94f 	bl	801e612 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8023374:	bf00      	nop
 8023376:	3710      	adds	r7, #16
 8023378:	46bd      	mov	sp, r7
 802337a:	bd80      	pop	{r7, pc}
 802337c:	200182f0 	.word	0x200182f0
 8023380:	40014000 	.word	0x40014000

08023384 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8023384:	b580      	push	{r7, lr}
 8023386:	b088      	sub	sp, #32
 8023388:	af00      	add	r7, sp, #0
 802338a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 802338c:	687b      	ldr	r3, [r7, #4]
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	4a6c      	ldr	r2, [pc, #432]	; (8023544 <HAL_TIM_Base_MspInit+0x1c0>)
 8023392:	4293      	cmp	r3, r2
 8023394:	d150      	bne.n	8023438 <HAL_TIM_Base_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */
	  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_IT_UPDATE);
 8023396:	4b6c      	ldr	r3, [pc, #432]	; (8023548 <HAL_TIM_Base_MspInit+0x1c4>)
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	f06f 0201 	mvn.w	r2, #1
 802339e:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_IT_UPDATE);
 80233a0:	4b6a      	ldr	r3, [pc, #424]	; (802354c <HAL_TIM_Base_MspInit+0x1c8>)
 80233a2:	681b      	ldr	r3, [r3, #0]
 80233a4:	f06f 0201 	mvn.w	r2, #1
 80233a8:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 80233aa:	4b69      	ldr	r3, [pc, #420]	; (8023550 <HAL_TIM_Base_MspInit+0x1cc>)
 80233ac:	681b      	ldr	r3, [r3, #0]
 80233ae:	f06f 0201 	mvn.w	r2, #1
 80233b2:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_IT_UPDATE);
 80233b4:	4b67      	ldr	r3, [pc, #412]	; (8023554 <HAL_TIM_Base_MspInit+0x1d0>)
 80233b6:	681b      	ldr	r3, [r3, #0]
 80233b8:	f06f 0201 	mvn.w	r2, #1
 80233bc:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80233be:	4b62      	ldr	r3, [pc, #392]	; (8023548 <HAL_TIM_Base_MspInit+0x1c4>)
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	68da      	ldr	r2, [r3, #12]
 80233c4:	4b60      	ldr	r3, [pc, #384]	; (8023548 <HAL_TIM_Base_MspInit+0x1c4>)
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	f042 0201 	orr.w	r2, r2, #1
 80233cc:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 80233ce:	4b5f      	ldr	r3, [pc, #380]	; (802354c <HAL_TIM_Base_MspInit+0x1c8>)
 80233d0:	681b      	ldr	r3, [r3, #0]
 80233d2:	68da      	ldr	r2, [r3, #12]
 80233d4:	4b5d      	ldr	r3, [pc, #372]	; (802354c <HAL_TIM_Base_MspInit+0x1c8>)
 80233d6:	681b      	ldr	r3, [r3, #0]
 80233d8:	f042 0201 	orr.w	r2, r2, #1
 80233dc:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80233de:	4b5c      	ldr	r3, [pc, #368]	; (8023550 <HAL_TIM_Base_MspInit+0x1cc>)
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	68da      	ldr	r2, [r3, #12]
 80233e4:	4b5a      	ldr	r3, [pc, #360]	; (8023550 <HAL_TIM_Base_MspInit+0x1cc>)
 80233e6:	681b      	ldr	r3, [r3, #0]
 80233e8:	f042 0201 	orr.w	r2, r2, #1
 80233ec:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 80233ee:	4b59      	ldr	r3, [pc, #356]	; (8023554 <HAL_TIM_Base_MspInit+0x1d0>)
 80233f0:	681b      	ldr	r3, [r3, #0]
 80233f2:	68da      	ldr	r2, [r3, #12]
 80233f4:	4b57      	ldr	r3, [pc, #348]	; (8023554 <HAL_TIM_Base_MspInit+0x1d0>)
 80233f6:	681b      	ldr	r3, [r3, #0]
 80233f8:	f042 0201 	orr.w	r2, r2, #1
 80233fc:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_ENABLE_IT(&htim9, TIM_IT_UPDATE);
 80233fe:	4b56      	ldr	r3, [pc, #344]	; (8023558 <HAL_TIM_Base_MspInit+0x1d4>)
 8023400:	681b      	ldr	r3, [r3, #0]
 8023402:	68da      	ldr	r2, [r3, #12]
 8023404:	4b54      	ldr	r3, [pc, #336]	; (8023558 <HAL_TIM_Base_MspInit+0x1d4>)
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	f042 0201 	orr.w	r2, r2, #1
 802340c:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 802340e:	4b53      	ldr	r3, [pc, #332]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023412:	4a52      	ldr	r2, [pc, #328]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023414:	f043 0304 	orr.w	r3, r3, #4
 8023418:	6413      	str	r3, [r2, #64]	; 0x40
 802341a:	4b50      	ldr	r3, [pc, #320]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 802341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802341e:	f003 0304 	and.w	r3, r3, #4
 8023422:	61fb      	str	r3, [r7, #28]
 8023424:	69fb      	ldr	r3, [r7, #28]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8023426:	2200      	movs	r2, #0
 8023428:	2101      	movs	r1, #1
 802342a:	201e      	movs	r0, #30
 802342c:	f7de f864 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8023430:	201e      	movs	r0, #30
 8023432:	f7de f88d 	bl	8001550 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8023436:	e080      	b.n	802353a <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 8023438:	687b      	ldr	r3, [r7, #4]
 802343a:	681b      	ldr	r3, [r3, #0]
 802343c:	4a48      	ldr	r2, [pc, #288]	; (8023560 <HAL_TIM_Base_MspInit+0x1dc>)
 802343e:	4293      	cmp	r3, r2
 8023440:	d114      	bne.n	802346c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8023442:	4b46      	ldr	r3, [pc, #280]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023446:	4a45      	ldr	r2, [pc, #276]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023448:	f043 0308 	orr.w	r3, r3, #8
 802344c:	6413      	str	r3, [r2, #64]	; 0x40
 802344e:	4b43      	ldr	r3, [pc, #268]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023452:	f003 0308 	and.w	r3, r3, #8
 8023456:	61bb      	str	r3, [r7, #24]
 8023458:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 802345a:	2200      	movs	r2, #0
 802345c:	2103      	movs	r1, #3
 802345e:	2032      	movs	r0, #50	; 0x32
 8023460:	f7de f84a 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8023464:	2032      	movs	r0, #50	; 0x32
 8023466:	f7de f873 	bl	8001550 <HAL_NVIC_EnableIRQ>
}
 802346a:	e066      	b.n	802353a <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM6)
 802346c:	687b      	ldr	r3, [r7, #4]
 802346e:	681b      	ldr	r3, [r3, #0]
 8023470:	4a3c      	ldr	r2, [pc, #240]	; (8023564 <HAL_TIM_Base_MspInit+0x1e0>)
 8023472:	4293      	cmp	r3, r2
 8023474:	d114      	bne.n	80234a0 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8023476:	4b39      	ldr	r3, [pc, #228]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802347a:	4a38      	ldr	r2, [pc, #224]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 802347c:	f043 0310 	orr.w	r3, r3, #16
 8023480:	6413      	str	r3, [r2, #64]	; 0x40
 8023482:	4b36      	ldr	r3, [pc, #216]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023486:	f003 0310 	and.w	r3, r3, #16
 802348a:	617b      	str	r3, [r7, #20]
 802348c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 802348e:	2200      	movs	r2, #0
 8023490:	2101      	movs	r1, #1
 8023492:	2036      	movs	r0, #54	; 0x36
 8023494:	f7de f830 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8023498:	2036      	movs	r0, #54	; 0x36
 802349a:	f7de f859 	bl	8001550 <HAL_NVIC_EnableIRQ>
}
 802349e:	e04c      	b.n	802353a <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 80234a0:	687b      	ldr	r3, [r7, #4]
 80234a2:	681b      	ldr	r3, [r3, #0]
 80234a4:	4a30      	ldr	r2, [pc, #192]	; (8023568 <HAL_TIM_Base_MspInit+0x1e4>)
 80234a6:	4293      	cmp	r3, r2
 80234a8:	d114      	bne.n	80234d4 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80234aa:	4b2c      	ldr	r3, [pc, #176]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 80234ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234ae:	4a2b      	ldr	r2, [pc, #172]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 80234b0:	f043 0320 	orr.w	r3, r3, #32
 80234b4:	6413      	str	r3, [r2, #64]	; 0x40
 80234b6:	4b29      	ldr	r3, [pc, #164]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 80234b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234ba:	f003 0320 	and.w	r3, r3, #32
 80234be:	613b      	str	r3, [r7, #16]
 80234c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 80234c2:	2200      	movs	r2, #0
 80234c4:	2104      	movs	r1, #4
 80234c6:	2037      	movs	r0, #55	; 0x37
 80234c8:	f7de f816 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80234cc:	2037      	movs	r0, #55	; 0x37
 80234ce:	f7de f83f 	bl	8001550 <HAL_NVIC_EnableIRQ>
}
 80234d2:	e032      	b.n	802353a <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM8)
 80234d4:	687b      	ldr	r3, [r7, #4]
 80234d6:	681b      	ldr	r3, [r3, #0]
 80234d8:	4a24      	ldr	r2, [pc, #144]	; (802356c <HAL_TIM_Base_MspInit+0x1e8>)
 80234da:	4293      	cmp	r3, r2
 80234dc:	d114      	bne.n	8023508 <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80234de:	4b1f      	ldr	r3, [pc, #124]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 80234e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234e2:	4a1e      	ldr	r2, [pc, #120]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 80234e4:	f043 0302 	orr.w	r3, r3, #2
 80234e8:	6453      	str	r3, [r2, #68]	; 0x44
 80234ea:	4b1c      	ldr	r3, [pc, #112]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 80234ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234ee:	f003 0302 	and.w	r3, r3, #2
 80234f2:	60fb      	str	r3, [r7, #12]
 80234f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80234f6:	2200      	movs	r2, #0
 80234f8:	2101      	movs	r1, #1
 80234fa:	202c      	movs	r0, #44	; 0x2c
 80234fc:	f7dd fffc 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8023500:	202c      	movs	r0, #44	; 0x2c
 8023502:	f7de f825 	bl	8001550 <HAL_NVIC_EnableIRQ>
}
 8023506:	e018      	b.n	802353a <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM9)
 8023508:	687b      	ldr	r3, [r7, #4]
 802350a:	681b      	ldr	r3, [r3, #0]
 802350c:	4a18      	ldr	r2, [pc, #96]	; (8023570 <HAL_TIM_Base_MspInit+0x1ec>)
 802350e:	4293      	cmp	r3, r2
 8023510:	d113      	bne.n	802353a <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8023512:	4b12      	ldr	r3, [pc, #72]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023516:	4a11      	ldr	r2, [pc, #68]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802351c:	6453      	str	r3, [r2, #68]	; 0x44
 802351e:	4b0f      	ldr	r3, [pc, #60]	; (802355c <HAL_TIM_Base_MspInit+0x1d8>)
 8023520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023526:	60bb      	str	r3, [r7, #8]
 8023528:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 802352a:	2200      	movs	r2, #0
 802352c:	2102      	movs	r1, #2
 802352e:	2018      	movs	r0, #24
 8023530:	f7dd ffe2 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8023534:	2018      	movs	r0, #24
 8023536:	f7de f80b 	bl	8001550 <HAL_NVIC_EnableIRQ>
}
 802353a:	bf00      	nop
 802353c:	3720      	adds	r7, #32
 802353e:	46bd      	mov	sp, r7
 8023540:	bd80      	pop	{r7, pc}
 8023542:	bf00      	nop
 8023544:	40000800 	.word	0x40000800
 8023548:	200181b0 	.word	0x200181b0
 802354c:	200181f0 	.word	0x200181f0
 8023550:	20018230 	.word	0x20018230
 8023554:	20018270 	.word	0x20018270
 8023558:	200182f0 	.word	0x200182f0
 802355c:	40023800 	.word	0x40023800
 8023560:	40000c00 	.word	0x40000c00
 8023564:	40001000 	.word	0x40001000
 8023568:	40001400 	.word	0x40001400
 802356c:	40010400 	.word	0x40010400
 8023570:	40014000 	.word	0x40014000

08023574 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8023574:	b580      	push	{r7, lr}
 8023576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess1, HOST_HS) != USBH_OK)
 8023578:	2200      	movs	r2, #0
 802357a:	4914      	ldr	r1, [pc, #80]	; (80235cc <MX_USB_HOST_Init+0x58>)
 802357c:	4814      	ldr	r0, [pc, #80]	; (80235d0 <MX_USB_HOST_Init+0x5c>)
 802357e:	f7e9 ff9b 	bl	800d4b8 <USBH_Init>
 8023582:	4603      	mov	r3, r0
 8023584:	2b00      	cmp	r3, #0
 8023586:	d004      	beq.n	8023592 <MX_USB_HOST_Init+0x1e>
  {
	  dbgAddText("EUSBH_Init");
 8023588:	4812      	ldr	r0, [pc, #72]	; (80235d4 <MX_USB_HOST_Init+0x60>)
 802358a:	f7f5 fe5d 	bl	8019248 <dbgAddText>
    Error_Handler();
 802358e:	f7fb f840 	bl	801e612 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8023592:	4911      	ldr	r1, [pc, #68]	; (80235d8 <MX_USB_HOST_Init+0x64>)
 8023594:	480e      	ldr	r0, [pc, #56]	; (80235d0 <MX_USB_HOST_Init+0x5c>)
 8023596:	f7ea f801 	bl	800d59c <USBH_RegisterClass>
 802359a:	4603      	mov	r3, r0
 802359c:	2b00      	cmp	r3, #0
 802359e:	d004      	beq.n	80235aa <MX_USB_HOST_Init+0x36>
  {
	  dbgAddText("EUSBH_RegisterClass");
 80235a0:	480e      	ldr	r0, [pc, #56]	; (80235dc <MX_USB_HOST_Init+0x68>)
 80235a2:	f7f5 fe51 	bl	8019248 <dbgAddText>
    Error_Handler();
 80235a6:	f7fb f834 	bl	801e612 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80235aa:	4809      	ldr	r0, [pc, #36]	; (80235d0 <MX_USB_HOST_Init+0x5c>)
 80235ac:	f7ea f883 	bl	800d6b6 <USBH_Start>
 80235b0:	4603      	mov	r3, r0
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	d004      	beq.n	80235c0 <MX_USB_HOST_Init+0x4c>
  {
	  dbgAddText("EUSBH_Start");
 80235b6:	480a      	ldr	r0, [pc, #40]	; (80235e0 <MX_USB_HOST_Init+0x6c>)
 80235b8:	f7f5 fe46 	bl	8019248 <dbgAddText>
    Error_Handler();
 80235bc:	f7fb f829 	bl	801e612 <Error_Handler>
  }
  dbgAddText("uInitOK");
 80235c0:	4808      	ldr	r0, [pc, #32]	; (80235e4 <MX_USB_HOST_Init+0x70>)
 80235c2:	f7f5 fe41 	bl	8019248 <dbgAddText>
  }
  ---*/
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80235c6:	bf00      	nop
 80235c8:	bd80      	pop	{r7, pc}
 80235ca:	bf00      	nop
 80235cc:	08023665 	.word	0x08023665
 80235d0:	20018330 	.word	0x20018330
 80235d4:	08026eb0 	.word	0x08026eb0
 80235d8:	20000008 	.word	0x20000008
 80235dc:	08026ebc 	.word	0x08026ebc
 80235e0:	08026ed0 	.word	0x08026ed0
 80235e4:	08026edc 	.word	0x08026edc

080235e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(FATFS* USBHfs, TCHAR const* USBHPath)
{
 80235e8:	b580      	push	{r7, lr}
 80235ea:	b084      	sub	sp, #16
 80235ec:	af00      	add	r7, sp, #0
 80235ee:	6078      	str	r0, [r7, #4]
 80235f0:	6039      	str	r1, [r7, #0]
  /* USB Host Background task */
  locUSBHfs=USBHfs;
 80235f2:	4a18      	ldr	r2, [pc, #96]	; (8023654 <MX_USB_HOST_Process+0x6c>)
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	6013      	str	r3, [r2, #0]
  locUSBHPath=USBHPath;
 80235f8:	4a17      	ldr	r2, [pc, #92]	; (8023658 <MX_USB_HOST_Process+0x70>)
 80235fa:	683b      	ldr	r3, [r7, #0]
 80235fc:	6013      	str	r3, [r2, #0]
  //handle USB enumeration
  while //(Appli_HS_state != APPLICATION_READY)
	  ((hUsbHostHS.gState != HOST_CLASS) && (hUsbHostHS.gState != HOST_DEV_DISCONNECTED)
 80235fe:	e002      	b.n	8023606 <MX_USB_HOST_Process+0x1e>
		  && (hUsbHostHS.gState != HOST_ABORT_STATE) )
  {
	  USBH_Process(&hUsbHostHS);
 8023600:	4816      	ldr	r0, [pc, #88]	; (802365c <MX_USB_HOST_Process+0x74>)
 8023602:	f7ea f869 	bl	800d6d8 <USBH_Process>
	  ((hUsbHostHS.gState != HOST_CLASS) && (hUsbHostHS.gState != HOST_DEV_DISCONNECTED)
 8023606:	4b15      	ldr	r3, [pc, #84]	; (802365c <MX_USB_HOST_Process+0x74>)
 8023608:	781b      	ldrb	r3, [r3, #0]
 802360a:	b2db      	uxtb	r3, r3
 802360c:	2b0b      	cmp	r3, #11
 802360e:	d009      	beq.n	8023624 <MX_USB_HOST_Process+0x3c>
 8023610:	4b12      	ldr	r3, [pc, #72]	; (802365c <MX_USB_HOST_Process+0x74>)
 8023612:	781b      	ldrb	r3, [r3, #0]
 8023614:	b2db      	uxtb	r3, r3
 8023616:	2b03      	cmp	r3, #3
 8023618:	d004      	beq.n	8023624 <MX_USB_HOST_Process+0x3c>
		  && (hUsbHostHS.gState != HOST_ABORT_STATE) )
 802361a:	4b10      	ldr	r3, [pc, #64]	; (802365c <MX_USB_HOST_Process+0x74>)
 802361c:	781b      	ldrb	r3, [r3, #0]
 802361e:	b2db      	uxtb	r3, r3
 8023620:	2b0d      	cmp	r3, #13
 8023622:	d1ed      	bne.n	8023600 <MX_USB_HOST_Process+0x18>
  }

  //handle MSC init
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) hUsbHostHS.pActiveClass->pData;
 8023624:	4b0d      	ldr	r3, [pc, #52]	; (802365c <MX_USB_HOST_Process+0x74>)
 8023626:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 802362a:	69db      	ldr	r3, [r3, #28]
 802362c:	60fb      	str	r3, [r7, #12]

  while((MSC_Handle->state != MSC_IDLE) && (MSC_Handle->state != MSC_UNRECOVERED_ERROR))
 802362e:	e002      	b.n	8023636 <MX_USB_HOST_Process+0x4e>
  {
	  USBH_Process(&hUsbHostHS);
 8023630:	480a      	ldr	r0, [pc, #40]	; (802365c <MX_USB_HOST_Process+0x74>)
 8023632:	f7ea f851 	bl	800d6d8 <USBH_Process>
  while((MSC_Handle->state != MSC_IDLE) && (MSC_Handle->state != MSC_UNRECOVERED_ERROR))
 8023636:	68fb      	ldr	r3, [r7, #12]
 8023638:	7b1b      	ldrb	r3, [r3, #12]
 802363a:	2b01      	cmp	r3, #1
 802363c:	d003      	beq.n	8023646 <MX_USB_HOST_Process+0x5e>
 802363e:	68fb      	ldr	r3, [r7, #12]
 8023640:	7b1b      	ldrb	r3, [r3, #12]
 8023642:	2b08      	cmp	r3, #8
 8023644:	d1f4      	bne.n	8023630 <MX_USB_HOST_Process+0x48>
  }

  USBH_Process(&hUsbHostFS);
 8023646:	4806      	ldr	r0, [pc, #24]	; (8023660 <MX_USB_HOST_Process+0x78>)
 8023648:	f7ea f846 	bl	800d6d8 <USBH_Process>
}
 802364c:	bf00      	nop
 802364e:	3710      	adds	r7, #16
 8023650:	46bd      	mov	sp, r7
 8023652:	bd80      	pop	{r7, pc}
 8023654:	200188cc 	.word	0x200188cc
 8023658:	200188d0 	.word	0x200188d0
 802365c:	20018330 	.word	0x20018330
 8023660:	200185fc 	.word	0x200185fc

08023664 <USBH_UserProcess1>:
/*
 * user callback definition
 */
static void USBH_UserProcess1  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8023664:	b580      	push	{r7, lr}
 8023666:	b082      	sub	sp, #8
 8023668:	af00      	add	r7, sp, #0
 802366a:	6078      	str	r0, [r7, #4]
 802366c:	460b      	mov	r3, r1
 802366e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_2 */
	 dbgAddText("userProc");
 8023670:	4812      	ldr	r0, [pc, #72]	; (80236bc <USBH_UserProcess1+0x58>)
 8023672:	f7f5 fde9 	bl	8019248 <dbgAddText>
  switch(id)
 8023676:	78fb      	ldrb	r3, [r7, #3]
 8023678:	3b01      	subs	r3, #1
 802367a:	2b04      	cmp	r3, #4
 802367c:	d818      	bhi.n	80236b0 <USBH_UserProcess1+0x4c>
 802367e:	a201      	add	r2, pc, #4	; (adr r2, 8023684 <USBH_UserProcess1+0x20>)
 8023680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023684:	080236b1 	.word	0x080236b1
 8023688:	080236a1 	.word	0x080236a1
 802368c:	080236b1 	.word	0x080236b1
 8023690:	080236a9 	.word	0x080236a9
 8023694:	08023699 	.word	0x08023699
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_HS_state = APPLICATION_DISCONNECT;
 8023698:	4b09      	ldr	r3, [pc, #36]	; (80236c0 <USBH_UserProcess1+0x5c>)
 802369a:	2203      	movs	r2, #3
 802369c:	701a      	strb	r2, [r3, #0]
  break;
 802369e:	e008      	b.n	80236b2 <USBH_UserProcess1+0x4e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_HS_state = APPLICATION_READY;
 80236a0:	4b07      	ldr	r3, [pc, #28]	; (80236c0 <USBH_UserProcess1+0x5c>)
 80236a2:	2202      	movs	r2, #2
 80236a4:	701a      	strb	r2, [r3, #0]
  break;
 80236a6:	e004      	b.n	80236b2 <USBH_UserProcess1+0x4e>

  case HOST_USER_CONNECTION:
  Appli_HS_state = APPLICATION_START;
 80236a8:	4b05      	ldr	r3, [pc, #20]	; (80236c0 <USBH_UserProcess1+0x5c>)
 80236aa:	2201      	movs	r2, #1
 80236ac:	701a      	strb	r2, [r3, #0]
  break;
 80236ae:	e000      	b.n	80236b2 <USBH_UserProcess1+0x4e>

  default:
  break;
 80236b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_2 */
}
 80236b2:	bf00      	nop
 80236b4:	3708      	adds	r7, #8
 80236b6:	46bd      	mov	sp, r7
 80236b8:	bd80      	pop	{r7, pc}
 80236ba:	bf00      	nop
 80236bc:	08026ee4 	.word	0x08026ee4
 80236c0:	200188c8 	.word	0x200188c8

080236c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80236c4:	b580      	push	{r7, lr}
 80236c6:	b0b2      	sub	sp, #200	; 0xc8
 80236c8:	af00      	add	r7, sp, #0
 80236ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80236cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80236d0:	2200      	movs	r2, #0
 80236d2:	601a      	str	r2, [r3, #0]
 80236d4:	605a      	str	r2, [r3, #4]
 80236d6:	609a      	str	r2, [r3, #8]
 80236d8:	60da      	str	r2, [r3, #12]
 80236da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80236dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80236e0:	2284      	movs	r2, #132	; 0x84
 80236e2:	2100      	movs	r1, #0
 80236e4:	4618      	mov	r0, r3
 80236e6:	f002 fc47 	bl	8025f78 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80236ea:	687b      	ldr	r3, [r7, #4]
 80236ec:	681b      	ldr	r3, [r3, #0]
 80236ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80236f2:	d14a      	bne.n	802378a <HAL_HCD_MspInit+0xc6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80236f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80236f8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80236fa:	2300      	movs	r3, #0
 80236fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8023700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8023704:	4618      	mov	r0, r3
 8023706:	f7e3 fa15 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 802370a:	4603      	mov	r3, r0
 802370c:	2b00      	cmp	r3, #0
 802370e:	d001      	beq.n	8023714 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8023710:	f7fa ff7f 	bl	801e612 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023714:	4b83      	ldr	r3, [pc, #524]	; (8023924 <HAL_HCD_MspInit+0x260>)
 8023716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023718:	4a82      	ldr	r2, [pc, #520]	; (8023924 <HAL_HCD_MspInit+0x260>)
 802371a:	f043 0301 	orr.w	r3, r3, #1
 802371e:	6313      	str	r3, [r2, #48]	; 0x30
 8023720:	4b80      	ldr	r3, [pc, #512]	; (8023924 <HAL_HCD_MspInit+0x260>)
 8023722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023724:	f003 0301 	and.w	r3, r3, #1
 8023728:	62fb      	str	r3, [r7, #44]	; 0x2c
 802372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 802372c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8023730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023734:	2302      	movs	r3, #2
 8023736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802373a:	2300      	movs	r3, #0
 802373c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023740:	2303      	movs	r3, #3
 8023742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8023746:	230a      	movs	r3, #10
 8023748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802374c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8023750:	4619      	mov	r1, r3
 8023752:	4875      	ldr	r0, [pc, #468]	; (8023928 <HAL_HCD_MspInit+0x264>)
 8023754:	f7df f872 	bl	800283c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023758:	4b72      	ldr	r3, [pc, #456]	; (8023924 <HAL_HCD_MspInit+0x260>)
 802375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802375c:	4a71      	ldr	r2, [pc, #452]	; (8023924 <HAL_HCD_MspInit+0x260>)
 802375e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023762:	6353      	str	r3, [r2, #52]	; 0x34
 8023764:	4b6f      	ldr	r3, [pc, #444]	; (8023924 <HAL_HCD_MspInit+0x260>)
 8023766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802376c:	62bb      	str	r3, [r7, #40]	; 0x28
 802376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023770:	4b6c      	ldr	r3, [pc, #432]	; (8023924 <HAL_HCD_MspInit+0x260>)
 8023772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023774:	4a6b      	ldr	r2, [pc, #428]	; (8023924 <HAL_HCD_MspInit+0x260>)
 8023776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802377a:	6453      	str	r3, [r2, #68]	; 0x44
 802377c:	4b69      	ldr	r3, [pc, #420]	; (8023924 <HAL_HCD_MspInit+0x260>)
 802377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023784:	627b      	str	r3, [r7, #36]	; 0x24
 8023786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8023788:	e0c8      	b.n	802391c <HAL_HCD_MspInit+0x258>
  else if(hcdHandle->Instance==USB_OTG_HS)
 802378a:	687b      	ldr	r3, [r7, #4]
 802378c:	681b      	ldr	r3, [r3, #0]
 802378e:	4a67      	ldr	r2, [pc, #412]	; (802392c <HAL_HCD_MspInit+0x268>)
 8023790:	4293      	cmp	r3, r2
 8023792:	f040 80c3 	bne.w	802391c <HAL_HCD_MspInit+0x258>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8023796:	4b63      	ldr	r3, [pc, #396]	; (8023924 <HAL_HCD_MspInit+0x260>)
 8023798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802379a:	4a62      	ldr	r2, [pc, #392]	; (8023924 <HAL_HCD_MspInit+0x260>)
 802379c:	f043 0301 	orr.w	r3, r3, #1
 80237a0:	6313      	str	r3, [r2, #48]	; 0x30
 80237a2:	4b60      	ldr	r3, [pc, #384]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237a6:	f003 0301 	and.w	r3, r3, #1
 80237aa:	623b      	str	r3, [r7, #32]
 80237ac:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80237ae:	4b5d      	ldr	r3, [pc, #372]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237b2:	4a5c      	ldr	r2, [pc, #368]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237b4:	f043 0302 	orr.w	r3, r3, #2
 80237b8:	6313      	str	r3, [r2, #48]	; 0x30
 80237ba:	4b5a      	ldr	r3, [pc, #360]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237be:	f003 0302 	and.w	r3, r3, #2
 80237c2:	61fb      	str	r3, [r7, #28]
 80237c4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80237c6:	4b57      	ldr	r3, [pc, #348]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237ca:	4a56      	ldr	r2, [pc, #344]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237cc:	f043 0304 	orr.w	r3, r3, #4
 80237d0:	6313      	str	r3, [r2, #48]	; 0x30
 80237d2:	4b54      	ldr	r3, [pc, #336]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237d6:	f003 0304 	and.w	r3, r3, #4
 80237da:	61bb      	str	r3, [r7, #24]
 80237dc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80237de:	4b51      	ldr	r3, [pc, #324]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237e2:	4a50      	ldr	r2, [pc, #320]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80237e8:	6313      	str	r3, [r2, #48]	; 0x30
 80237ea:	4b4e      	ldr	r3, [pc, #312]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80237ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80237f2:	617b      	str	r3, [r7, #20]
 80237f4:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80237f6:	2320      	movs	r3, #32
 80237f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80237fc:	2302      	movs	r3, #2
 80237fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023802:	2300      	movs	r3, #0
 8023804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8023808:	2303      	movs	r3, #3
 802380a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 802380e:	230a      	movs	r3, #10
 8023810:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023814:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8023818:	4619      	mov	r1, r3
 802381a:	4843      	ldr	r0, [pc, #268]	; (8023928 <HAL_HCD_MspInit+0x264>)
 802381c:	f7df f80e 	bl	800283c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8023820:	2308      	movs	r3, #8
 8023822:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023826:	2302      	movs	r3, #2
 8023828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 802382c:	2300      	movs	r3, #0
 802382e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8023832:	2303      	movs	r3, #3
 8023834:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8023838:	230a      	movs	r3, #10
 802383a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802383e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8023842:	4619      	mov	r1, r3
 8023844:	4838      	ldr	r0, [pc, #224]	; (8023928 <HAL_HCD_MspInit+0x264>)
 8023846:	f7de fff9 	bl	800283c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 |
 802384a:	f643 4323 	movw	r3, #15395	; 0x3c23
 802384e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023852:	2302      	movs	r3, #2
 8023854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023858:	2300      	movs	r3, #0
 802385a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 802385e:	230a      	movs	r3, #10
 8023860:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023864:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8023868:	4619      	mov	r1, r3
 802386a:	4831      	ldr	r0, [pc, #196]	; (8023930 <HAL_HCD_MspInit+0x26c>)
 802386c:	f7de ffe6 	bl	800283c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8023870:	2301      	movs	r3, #1
 8023872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023876:	2302      	movs	r3, #2
 8023878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 802387c:	2300      	movs	r3, #0
 802387e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8023882:	230a      	movs	r3, #10
 8023884:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023888:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802388c:	4619      	mov	r1, r3
 802388e:	4829      	ldr	r0, [pc, #164]	; (8023934 <HAL_HCD_MspInit+0x270>)
 8023890:	f7de ffd4 	bl	800283c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8023894:	2310      	movs	r3, #16
 8023896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802389a:	2302      	movs	r3, #2
 802389c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80238a0:	2300      	movs	r3, #0
 80238a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80238a6:	230a      	movs	r3, #10
 80238a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80238ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80238b0:	4619      	mov	r1, r3
 80238b2:	4821      	ldr	r0, [pc, #132]	; (8023938 <HAL_HCD_MspInit+0x274>)
 80238b4:	f7de ffc2 	bl	800283c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80238b8:	2304      	movs	r3, #4
 80238ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80238be:	2302      	movs	r3, #2
 80238c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80238c4:	2300      	movs	r3, #0
 80238c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80238ca:	230a      	movs	r3, #10
 80238cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80238d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80238d4:	4619      	mov	r1, r3
 80238d6:	4817      	ldr	r0, [pc, #92]	; (8023934 <HAL_HCD_MspInit+0x270>)
 80238d8:	f7de ffb0 	bl	800283c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80238dc:	4b11      	ldr	r3, [pc, #68]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80238de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238e0:	4a10      	ldr	r2, [pc, #64]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80238e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80238e6:	6313      	str	r3, [r2, #48]	; 0x30
 80238e8:	4b0e      	ldr	r3, [pc, #56]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80238ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80238f0:	613b      	str	r3, [r7, #16]
 80238f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80238f4:	4b0b      	ldr	r3, [pc, #44]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80238f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238f8:	4a0a      	ldr	r2, [pc, #40]	; (8023924 <HAL_HCD_MspInit+0x260>)
 80238fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80238fe:	6313      	str	r3, [r2, #48]	; 0x30
 8023900:	4b08      	ldr	r3, [pc, #32]	; (8023924 <HAL_HCD_MspInit+0x260>)
 8023902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8023908:	60fb      	str	r3, [r7, #12]
 802390a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 802390c:	2200      	movs	r2, #0
 802390e:	2106      	movs	r1, #6
 8023910:	204d      	movs	r0, #77	; 0x4d
 8023912:	f7dd fdf1 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8023916:	204d      	movs	r0, #77	; 0x4d
 8023918:	f7dd fe1a 	bl	8001550 <HAL_NVIC_EnableIRQ>
}
 802391c:	bf00      	nop
 802391e:	37c8      	adds	r7, #200	; 0xc8
 8023920:	46bd      	mov	sp, r7
 8023922:	bd80      	pop	{r7, pc}
 8023924:	40023800 	.word	0x40023800
 8023928:	40020000 	.word	0x40020000
 802392c:	40040000 	.word	0x40040000
 8023930:	40020400 	.word	0x40020400
 8023934:	40020800 	.word	0x40020800
 8023938:	40021c00 	.word	0x40021c00

0802393c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802393c:	b580      	push	{r7, lr}
 802393e:	b082      	sub	sp, #8
 8023940:	af00      	add	r7, sp, #0
 8023942:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802394a:	4618      	mov	r0, r3
 802394c:	f7ea f975 	bl	800dc3a <USBH_LL_IncTimer>
}
 8023950:	bf00      	nop
 8023952:	3708      	adds	r7, #8
 8023954:	46bd      	mov	sp, r7
 8023956:	bd80      	pop	{r7, pc}

08023958 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8023958:	b580      	push	{r7, lr}
 802395a:	b082      	sub	sp, #8
 802395c:	af00      	add	r7, sp, #0
 802395e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8023966:	4618      	mov	r0, r3
 8023968:	f7ea f9ba 	bl	800dce0 <USBH_LL_Connect>
}
 802396c:	bf00      	nop
 802396e:	3708      	adds	r7, #8
 8023970:	46bd      	mov	sp, r7
 8023972:	bd80      	pop	{r7, pc}

08023974 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8023974:	b580      	push	{r7, lr}
 8023976:	b082      	sub	sp, #8
 8023978:	af00      	add	r7, sp, #0
 802397a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8023982:	4618      	mov	r0, r3
 8023984:	f7ea f9d2 	bl	800dd2c <USBH_LL_Disconnect>
}
 8023988:	bf00      	nop
 802398a:	3708      	adds	r7, #8
 802398c:	46bd      	mov	sp, r7
 802398e:	bd80      	pop	{r7, pc}

08023990 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8023990:	b480      	push	{r7}
 8023992:	b083      	sub	sp, #12
 8023994:	af00      	add	r7, sp, #0
 8023996:	6078      	str	r0, [r7, #4]
 8023998:	460b      	mov	r3, r1
 802399a:	70fb      	strb	r3, [r7, #3]
 802399c:	4613      	mov	r3, r2
 802399e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80239a0:	bf00      	nop
 80239a2:	370c      	adds	r7, #12
 80239a4:	46bd      	mov	sp, r7
 80239a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239aa:	4770      	bx	lr

080239ac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80239ac:	b580      	push	{r7, lr}
 80239ae:	b082      	sub	sp, #8
 80239b0:	af00      	add	r7, sp, #0
 80239b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80239ba:	4618      	mov	r0, r3
 80239bc:	f7ea f967 	bl	800dc8e <USBH_LL_PortEnabled>
}
 80239c0:	bf00      	nop
 80239c2:	3708      	adds	r7, #8
 80239c4:	46bd      	mov	sp, r7
 80239c6:	bd80      	pop	{r7, pc}

080239c8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80239c8:	b580      	push	{r7, lr}
 80239ca:	b082      	sub	sp, #8
 80239cc:	af00      	add	r7, sp, #0
 80239ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80239d0:	687b      	ldr	r3, [r7, #4]
 80239d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80239d6:	4618      	mov	r0, r3
 80239d8:	f7ea f967 	bl	800dcaa <USBH_LL_PortDisabled>
}
 80239dc:	bf00      	nop
 80239de:	3708      	adds	r7, #8
 80239e0:	46bd      	mov	sp, r7
 80239e2:	bd80      	pop	{r7, pc}

080239e4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80239e4:	b580      	push	{r7, lr}
 80239e6:	b082      	sub	sp, #8
 80239e8:	af00      	add	r7, sp, #0
 80239ea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 80239f2:	2b01      	cmp	r3, #1
 80239f4:	d12d      	bne.n	8023a52 <USBH_LL_Init+0x6e>
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80239f6:	4b35      	ldr	r3, [pc, #212]	; (8023acc <USBH_LL_Init+0xe8>)
 80239f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80239fc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80239fe:	4b33      	ldr	r3, [pc, #204]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a00:	2208      	movs	r2, #8
 8023a02:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8023a04:	4b31      	ldr	r3, [pc, #196]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a06:	2203      	movs	r2, #3
 8023a08:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8023a0a:	4b30      	ldr	r3, [pc, #192]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a0c:	2200      	movs	r2, #0
 8023a0e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8023a10:	4b2e      	ldr	r3, [pc, #184]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a12:	2202      	movs	r2, #2
 8023a14:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8023a16:	4b2d      	ldr	r3, [pc, #180]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a18:	2200      	movs	r2, #0
 8023a1a:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8023a1c:	4b2b      	ldr	r3, [pc, #172]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a1e:	2200      	movs	r2, #0
 8023a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8023a22:	4a2a      	ldr	r2, [pc, #168]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a24:	687b      	ldr	r3, [r7, #4]
 8023a26:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8023a2a:	687b      	ldr	r3, [r7, #4]
 8023a2c:	4a27      	ldr	r2, [pc, #156]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a2e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8023a32:	4826      	ldr	r0, [pc, #152]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a34:	f7df faec 	bl	8003010 <HAL_HCD_Init>
 8023a38:	4603      	mov	r3, r0
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	d001      	beq.n	8023a42 <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 8023a3e:	f7fa fde8 	bl	801e612 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8023a42:	4822      	ldr	r0, [pc, #136]	; (8023acc <USBH_LL_Init+0xe8>)
 8023a44:	f7df feee 	bl	8003824 <HAL_HCD_GetCurrentFrame>
 8023a48:	4603      	mov	r3, r0
 8023a4a:	4619      	mov	r1, r3
 8023a4c:	6878      	ldr	r0, [r7, #4]
 8023a4e:	f7ea f8e5 	bl	800dc1c <USBH_LL_SetTimer>
  }
  if (phost->id == HOST_HS) {
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8023a58:	2b00      	cmp	r3, #0
 8023a5a:	d132      	bne.n	8023ac2 <USBH_LL_Init+0xde>
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8023a5c:	4b1c      	ldr	r3, [pc, #112]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a5e:	4a1d      	ldr	r2, [pc, #116]	; (8023ad4 <USBH_LL_Init+0xf0>)
 8023a60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8023a62:	4b1b      	ldr	r3, [pc, #108]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a64:	220c      	movs	r2, #12
 8023a66:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8023a68:	4b19      	ldr	r3, [pc, #100]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a6a:	2200      	movs	r2, #0
 8023a6c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8023a6e:	4b18      	ldr	r3, [pc, #96]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a70:	2200      	movs	r2, #0
 8023a72:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8023a74:	4b16      	ldr	r3, [pc, #88]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a76:	2201      	movs	r2, #1
 8023a78:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8023a7a:	4b15      	ldr	r3, [pc, #84]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a7c:	2200      	movs	r2, #0
 8023a7e:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8023a80:	4b13      	ldr	r3, [pc, #76]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a82:	2200      	movs	r2, #0
 8023a84:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 8023a86:	4b12      	ldr	r3, [pc, #72]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a88:	2201      	movs	r2, #1
 8023a8a:	635a      	str	r2, [r3, #52]	; 0x34
  hhcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8023a8c:	4b10      	ldr	r3, [pc, #64]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a8e:	2200      	movs	r2, #0
 8023a90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8023a92:	4a0f      	ldr	r2, [pc, #60]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a94:	687b      	ldr	r3, [r7, #4]
 8023a96:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	4a0c      	ldr	r2, [pc, #48]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023a9e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8023aa2:	480b      	ldr	r0, [pc, #44]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023aa4:	f7df fab4 	bl	8003010 <HAL_HCD_Init>
 8023aa8:	4603      	mov	r3, r0
 8023aaa:	2b00      	cmp	r3, #0
 8023aac:	d001      	beq.n	8023ab2 <USBH_LL_Init+0xce>
  {
    Error_Handler( );
 8023aae:	f7fa fdb0 	bl	801e612 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8023ab2:	4807      	ldr	r0, [pc, #28]	; (8023ad0 <USBH_LL_Init+0xec>)
 8023ab4:	f7df feb6 	bl	8003824 <HAL_HCD_GetCurrentFrame>
 8023ab8:	4603      	mov	r3, r0
 8023aba:	4619      	mov	r1, r3
 8023abc:	6878      	ldr	r0, [r7, #4]
 8023abe:	f7ea f8ad 	bl	800dc1c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8023ac2:	2300      	movs	r3, #0
}
 8023ac4:	4618      	mov	r0, r3
 8023ac6:	3708      	adds	r7, #8
 8023ac8:	46bd      	mov	sp, r7
 8023aca:	bd80      	pop	{r7, pc}
 8023acc:	200188d4 	.word	0x200188d4
 8023ad0:	20018b98 	.word	0x20018b98
 8023ad4:	40040000 	.word	0x40040000

08023ad8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8023ad8:	b580      	push	{r7, lr}
 8023ada:	b084      	sub	sp, #16
 8023adc:	af00      	add	r7, sp, #0
 8023ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023ae0:	2300      	movs	r3, #0
 8023ae2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023ae4:	2300      	movs	r3, #0
 8023ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023aee:	4618      	mov	r0, r3
 8023af0:	f7df fe20 	bl	8003734 <HAL_HCD_Start>
 8023af4:	4603      	mov	r3, r0
 8023af6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023af8:	7bfb      	ldrb	r3, [r7, #15]
 8023afa:	4618      	mov	r0, r3
 8023afc:	f000 f99a 	bl	8023e34 <USBH_Get_USB_Status>
 8023b00:	4603      	mov	r3, r0
 8023b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8023b06:	4618      	mov	r0, r3
 8023b08:	3710      	adds	r7, #16
 8023b0a:	46bd      	mov	sp, r7
 8023b0c:	bd80      	pop	{r7, pc}

08023b0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8023b0e:	b580      	push	{r7, lr}
 8023b10:	b084      	sub	sp, #16
 8023b12:	af00      	add	r7, sp, #0
 8023b14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023b16:	2300      	movs	r3, #0
 8023b18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023b1a:	2300      	movs	r3, #0
 8023b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023b24:	4618      	mov	r0, r3
 8023b26:	f7df fe28 	bl	800377a <HAL_HCD_Stop>
 8023b2a:	4603      	mov	r3, r0
 8023b2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023b2e:	7bfb      	ldrb	r3, [r7, #15]
 8023b30:	4618      	mov	r0, r3
 8023b32:	f000 f97f 	bl	8023e34 <USBH_Get_USB_Status>
 8023b36:	4603      	mov	r3, r0
 8023b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8023b3c:	4618      	mov	r0, r3
 8023b3e:	3710      	adds	r7, #16
 8023b40:	46bd      	mov	sp, r7
 8023b42:	bd80      	pop	{r7, pc}

08023b44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8023b44:	b580      	push	{r7, lr}
 8023b46:	b084      	sub	sp, #16
 8023b48:	af00      	add	r7, sp, #0
 8023b4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8023b4c:	2301      	movs	r3, #1
 8023b4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8023b50:	687b      	ldr	r3, [r7, #4]
 8023b52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023b56:	4618      	mov	r0, r3
 8023b58:	f7df fe72 	bl	8003840 <HAL_HCD_GetCurrentSpeed>
 8023b5c:	4603      	mov	r3, r0
 8023b5e:	2b02      	cmp	r3, #2
 8023b60:	d00c      	beq.n	8023b7c <USBH_LL_GetSpeed+0x38>
 8023b62:	2b02      	cmp	r3, #2
 8023b64:	d80d      	bhi.n	8023b82 <USBH_LL_GetSpeed+0x3e>
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	d002      	beq.n	8023b70 <USBH_LL_GetSpeed+0x2c>
 8023b6a:	2b01      	cmp	r3, #1
 8023b6c:	d003      	beq.n	8023b76 <USBH_LL_GetSpeed+0x32>
 8023b6e:	e008      	b.n	8023b82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8023b70:	2300      	movs	r3, #0
 8023b72:	73fb      	strb	r3, [r7, #15]
    break;
 8023b74:	e008      	b.n	8023b88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8023b76:	2301      	movs	r3, #1
 8023b78:	73fb      	strb	r3, [r7, #15]
    break;
 8023b7a:	e005      	b.n	8023b88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8023b7c:	2302      	movs	r3, #2
 8023b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8023b80:	e002      	b.n	8023b88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8023b82:	2301      	movs	r3, #1
 8023b84:	73fb      	strb	r3, [r7, #15]
    break;
 8023b86:	bf00      	nop
  }
  return  speed;
 8023b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8023b8a:	4618      	mov	r0, r3
 8023b8c:	3710      	adds	r7, #16
 8023b8e:	46bd      	mov	sp, r7
 8023b90:	bd80      	pop	{r7, pc}

08023b92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8023b92:	b580      	push	{r7, lr}
 8023b94:	b084      	sub	sp, #16
 8023b96:	af00      	add	r7, sp, #0
 8023b98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023b9a:	2300      	movs	r3, #0
 8023b9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023b9e:	2300      	movs	r3, #0
 8023ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8023ba2:	687b      	ldr	r3, [r7, #4]
 8023ba4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023ba8:	4618      	mov	r0, r3
 8023baa:	f7df fe03 	bl	80037b4 <HAL_HCD_ResetPort>
 8023bae:	4603      	mov	r3, r0
 8023bb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023bb2:	7bfb      	ldrb	r3, [r7, #15]
 8023bb4:	4618      	mov	r0, r3
 8023bb6:	f000 f93d 	bl	8023e34 <USBH_Get_USB_Status>
 8023bba:	4603      	mov	r3, r0
 8023bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8023bc0:	4618      	mov	r0, r3
 8023bc2:	3710      	adds	r7, #16
 8023bc4:	46bd      	mov	sp, r7
 8023bc6:	bd80      	pop	{r7, pc}

08023bc8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8023bc8:	b580      	push	{r7, lr}
 8023bca:	b082      	sub	sp, #8
 8023bcc:	af00      	add	r7, sp, #0
 8023bce:	6078      	str	r0, [r7, #4]
 8023bd0:	460b      	mov	r3, r1
 8023bd2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8023bd4:	687b      	ldr	r3, [r7, #4]
 8023bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023bda:	78fa      	ldrb	r2, [r7, #3]
 8023bdc:	4611      	mov	r1, r2
 8023bde:	4618      	mov	r0, r3
 8023be0:	f7df fe0b 	bl	80037fa <HAL_HCD_HC_GetXferCount>
 8023be4:	4603      	mov	r3, r0
}
 8023be6:	4618      	mov	r0, r3
 8023be8:	3708      	adds	r7, #8
 8023bea:	46bd      	mov	sp, r7
 8023bec:	bd80      	pop	{r7, pc}

08023bee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8023bee:	b590      	push	{r4, r7, lr}
 8023bf0:	b089      	sub	sp, #36	; 0x24
 8023bf2:	af04      	add	r7, sp, #16
 8023bf4:	6078      	str	r0, [r7, #4]
 8023bf6:	4608      	mov	r0, r1
 8023bf8:	4611      	mov	r1, r2
 8023bfa:	461a      	mov	r2, r3
 8023bfc:	4603      	mov	r3, r0
 8023bfe:	70fb      	strb	r3, [r7, #3]
 8023c00:	460b      	mov	r3, r1
 8023c02:	70bb      	strb	r3, [r7, #2]
 8023c04:	4613      	mov	r3, r2
 8023c06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023c08:	2300      	movs	r3, #0
 8023c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023c0c:	2300      	movs	r3, #0
 8023c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8023c10:	687b      	ldr	r3, [r7, #4]
 8023c12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8023c16:	787c      	ldrb	r4, [r7, #1]
 8023c18:	78ba      	ldrb	r2, [r7, #2]
 8023c1a:	78f9      	ldrb	r1, [r7, #3]
 8023c1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023c1e:	9302      	str	r3, [sp, #8]
 8023c20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8023c24:	9301      	str	r3, [sp, #4]
 8023c26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8023c2a:	9300      	str	r3, [sp, #0]
 8023c2c:	4623      	mov	r3, r4
 8023c2e:	f7df fa57 	bl	80030e0 <HAL_HCD_HC_Init>
 8023c32:	4603      	mov	r3, r0
 8023c34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8023c36:	7bfb      	ldrb	r3, [r7, #15]
 8023c38:	4618      	mov	r0, r3
 8023c3a:	f000 f8fb 	bl	8023e34 <USBH_Get_USB_Status>
 8023c3e:	4603      	mov	r3, r0
 8023c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8023c44:	4618      	mov	r0, r3
 8023c46:	3714      	adds	r7, #20
 8023c48:	46bd      	mov	sp, r7
 8023c4a:	bd90      	pop	{r4, r7, pc}

08023c4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8023c4c:	b580      	push	{r7, lr}
 8023c4e:	b084      	sub	sp, #16
 8023c50:	af00      	add	r7, sp, #0
 8023c52:	6078      	str	r0, [r7, #4]
 8023c54:	460b      	mov	r3, r1
 8023c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023c58:	2300      	movs	r3, #0
 8023c5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023c5c:	2300      	movs	r3, #0
 8023c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023c66:	78fa      	ldrb	r2, [r7, #3]
 8023c68:	4611      	mov	r1, r2
 8023c6a:	4618      	mov	r0, r3
 8023c6c:	f7df fad0 	bl	8003210 <HAL_HCD_HC_Halt>
 8023c70:	4603      	mov	r3, r0
 8023c72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023c74:	7bfb      	ldrb	r3, [r7, #15]
 8023c76:	4618      	mov	r0, r3
 8023c78:	f000 f8dc 	bl	8023e34 <USBH_Get_USB_Status>
 8023c7c:	4603      	mov	r3, r0
 8023c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8023c82:	4618      	mov	r0, r3
 8023c84:	3710      	adds	r7, #16
 8023c86:	46bd      	mov	sp, r7
 8023c88:	bd80      	pop	{r7, pc}

08023c8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8023c8a:	b590      	push	{r4, r7, lr}
 8023c8c:	b089      	sub	sp, #36	; 0x24
 8023c8e:	af04      	add	r7, sp, #16
 8023c90:	6078      	str	r0, [r7, #4]
 8023c92:	4608      	mov	r0, r1
 8023c94:	4611      	mov	r1, r2
 8023c96:	461a      	mov	r2, r3
 8023c98:	4603      	mov	r3, r0
 8023c9a:	70fb      	strb	r3, [r7, #3]
 8023c9c:	460b      	mov	r3, r1
 8023c9e:	70bb      	strb	r3, [r7, #2]
 8023ca0:	4613      	mov	r3, r2
 8023ca2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023ca4:	2300      	movs	r3, #0
 8023ca6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023ca8:	2300      	movs	r3, #0
 8023caa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8023cb2:	787c      	ldrb	r4, [r7, #1]
 8023cb4:	78ba      	ldrb	r2, [r7, #2]
 8023cb6:	78f9      	ldrb	r1, [r7, #3]
 8023cb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8023cbc:	9303      	str	r3, [sp, #12]
 8023cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023cc0:	9302      	str	r3, [sp, #8]
 8023cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023cc4:	9301      	str	r3, [sp, #4]
 8023cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8023cca:	9300      	str	r3, [sp, #0]
 8023ccc:	4623      	mov	r3, r4
 8023cce:	f7df fac3 	bl	8003258 <HAL_HCD_HC_SubmitRequest>
 8023cd2:	4603      	mov	r3, r0
 8023cd4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8023cd6:	7bfb      	ldrb	r3, [r7, #15]
 8023cd8:	4618      	mov	r0, r3
 8023cda:	f000 f8ab 	bl	8023e34 <USBH_Get_USB_Status>
 8023cde:	4603      	mov	r3, r0
 8023ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8023ce4:	4618      	mov	r0, r3
 8023ce6:	3714      	adds	r7, #20
 8023ce8:	46bd      	mov	sp, r7
 8023cea:	bd90      	pop	{r4, r7, pc}

08023cec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8023cec:	b580      	push	{r7, lr}
 8023cee:	b082      	sub	sp, #8
 8023cf0:	af00      	add	r7, sp, #0
 8023cf2:	6078      	str	r0, [r7, #4]
 8023cf4:	460b      	mov	r3, r1
 8023cf6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8023cf8:	687b      	ldr	r3, [r7, #4]
 8023cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023cfe:	78fa      	ldrb	r2, [r7, #3]
 8023d00:	4611      	mov	r1, r2
 8023d02:	4618      	mov	r0, r3
 8023d04:	f7df fd64 	bl	80037d0 <HAL_HCD_HC_GetURBState>
 8023d08:	4603      	mov	r3, r0
}
 8023d0a:	4618      	mov	r0, r3
 8023d0c:	3708      	adds	r7, #8
 8023d0e:	46bd      	mov	sp, r7
 8023d10:	bd80      	pop	{r7, pc}

08023d12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8023d12:	b580      	push	{r7, lr}
 8023d14:	b082      	sub	sp, #8
 8023d16:	af00      	add	r7, sp, #0
 8023d18:	6078      	str	r0, [r7, #4]
 8023d1a:	460b      	mov	r3, r1
 8023d1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8023d1e:	687b      	ldr	r3, [r7, #4]
 8023d20:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8023d24:	2b01      	cmp	r3, #1
 8023d26:	d103      	bne.n	8023d30 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8023d28:	78fb      	ldrb	r3, [r7, #3]
 8023d2a:	4618      	mov	r0, r3
 8023d2c:	f000 f9be 	bl	80240ac <MX_DriverVbusFS>
  }
  if (phost->id == HOST_HS) {
 8023d30:	687b      	ldr	r3, [r7, #4]
 8023d32:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8023d36:	2b00      	cmp	r3, #0
 8023d38:	d103      	bne.n	8023d42 <USBH_LL_DriverVBUS+0x30>
    MX_DriverVbusHS(state);
 8023d3a:	78fb      	ldrb	r3, [r7, #3]
 8023d3c:	4618      	mov	r0, r3
 8023d3e:	f000 f9d1 	bl	80240e4 <MX_DriverVbusHS>
  }

  HAL_Delay(200);
 8023d42:	20c8      	movs	r0, #200	; 0xc8
 8023d44:	f7dd faa0 	bl	8001288 <HAL_Delay>
  return USBH_OK;
 8023d48:	2300      	movs	r3, #0
}
 8023d4a:	4618      	mov	r0, r3
 8023d4c:	3708      	adds	r7, #8
 8023d4e:	46bd      	mov	sp, r7
 8023d50:	bd80      	pop	{r7, pc}

08023d52 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8023d52:	b480      	push	{r7}
 8023d54:	b085      	sub	sp, #20
 8023d56:	af00      	add	r7, sp, #0
 8023d58:	6078      	str	r0, [r7, #4]
 8023d5a:	460b      	mov	r3, r1
 8023d5c:	70fb      	strb	r3, [r7, #3]
 8023d5e:	4613      	mov	r3, r2
 8023d60:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023d68:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8023d6a:	78fa      	ldrb	r2, [r7, #3]
 8023d6c:	68f9      	ldr	r1, [r7, #12]
 8023d6e:	4613      	mov	r3, r2
 8023d70:	009b      	lsls	r3, r3, #2
 8023d72:	4413      	add	r3, r2
 8023d74:	00db      	lsls	r3, r3, #3
 8023d76:	440b      	add	r3, r1
 8023d78:	333b      	adds	r3, #59	; 0x3b
 8023d7a:	781b      	ldrb	r3, [r3, #0]
 8023d7c:	2b00      	cmp	r3, #0
 8023d7e:	d00a      	beq.n	8023d96 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8023d80:	78fa      	ldrb	r2, [r7, #3]
 8023d82:	68f9      	ldr	r1, [r7, #12]
 8023d84:	4613      	mov	r3, r2
 8023d86:	009b      	lsls	r3, r3, #2
 8023d88:	4413      	add	r3, r2
 8023d8a:	00db      	lsls	r3, r3, #3
 8023d8c:	440b      	add	r3, r1
 8023d8e:	3350      	adds	r3, #80	; 0x50
 8023d90:	78ba      	ldrb	r2, [r7, #2]
 8023d92:	701a      	strb	r2, [r3, #0]
 8023d94:	e009      	b.n	8023daa <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8023d96:	78fa      	ldrb	r2, [r7, #3]
 8023d98:	68f9      	ldr	r1, [r7, #12]
 8023d9a:	4613      	mov	r3, r2
 8023d9c:	009b      	lsls	r3, r3, #2
 8023d9e:	4413      	add	r3, r2
 8023da0:	00db      	lsls	r3, r3, #3
 8023da2:	440b      	add	r3, r1
 8023da4:	3351      	adds	r3, #81	; 0x51
 8023da6:	78ba      	ldrb	r2, [r7, #2]
 8023da8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8023daa:	2300      	movs	r3, #0
}
 8023dac:	4618      	mov	r0, r3
 8023dae:	3714      	adds	r7, #20
 8023db0:	46bd      	mov	sp, r7
 8023db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023db6:	4770      	bx	lr

08023db8 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8023db8:	b480      	push	{r7}
 8023dba:	b085      	sub	sp, #20
 8023dbc:	af00      	add	r7, sp, #0
 8023dbe:	6078      	str	r0, [r7, #4]
 8023dc0:	460b      	mov	r3, r1
 8023dc2:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8023dc4:	2300      	movs	r3, #0
 8023dc6:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8023dc8:	687b      	ldr	r3, [r7, #4]
 8023dca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8023dce:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8023dd0:	78fa      	ldrb	r2, [r7, #3]
 8023dd2:	68b9      	ldr	r1, [r7, #8]
 8023dd4:	4613      	mov	r3, r2
 8023dd6:	009b      	lsls	r3, r3, #2
 8023dd8:	4413      	add	r3, r2
 8023dda:	00db      	lsls	r3, r3, #3
 8023ddc:	440b      	add	r3, r1
 8023dde:	333b      	adds	r3, #59	; 0x3b
 8023de0:	781b      	ldrb	r3, [r3, #0]
 8023de2:	2b00      	cmp	r3, #0
 8023de4:	d00a      	beq.n	8023dfc <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8023de6:	78fa      	ldrb	r2, [r7, #3]
 8023de8:	68b9      	ldr	r1, [r7, #8]
 8023dea:	4613      	mov	r3, r2
 8023dec:	009b      	lsls	r3, r3, #2
 8023dee:	4413      	add	r3, r2
 8023df0:	00db      	lsls	r3, r3, #3
 8023df2:	440b      	add	r3, r1
 8023df4:	3350      	adds	r3, #80	; 0x50
 8023df6:	781b      	ldrb	r3, [r3, #0]
 8023df8:	73fb      	strb	r3, [r7, #15]
 8023dfa:	e009      	b.n	8023e10 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8023dfc:	78fa      	ldrb	r2, [r7, #3]
 8023dfe:	68b9      	ldr	r1, [r7, #8]
 8023e00:	4613      	mov	r3, r2
 8023e02:	009b      	lsls	r3, r3, #2
 8023e04:	4413      	add	r3, r2
 8023e06:	00db      	lsls	r3, r3, #3
 8023e08:	440b      	add	r3, r1
 8023e0a:	3351      	adds	r3, #81	; 0x51
 8023e0c:	781b      	ldrb	r3, [r3, #0]
 8023e0e:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8023e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8023e12:	4618      	mov	r0, r3
 8023e14:	3714      	adds	r7, #20
 8023e16:	46bd      	mov	sp, r7
 8023e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e1c:	4770      	bx	lr

08023e1e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8023e1e:	b580      	push	{r7, lr}
 8023e20:	b082      	sub	sp, #8
 8023e22:	af00      	add	r7, sp, #0
 8023e24:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8023e26:	6878      	ldr	r0, [r7, #4]
 8023e28:	f7dd fa2e 	bl	8001288 <HAL_Delay>
}
 8023e2c:	bf00      	nop
 8023e2e:	3708      	adds	r7, #8
 8023e30:	46bd      	mov	sp, r7
 8023e32:	bd80      	pop	{r7, pc}

08023e34 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023e34:	b480      	push	{r7}
 8023e36:	b085      	sub	sp, #20
 8023e38:	af00      	add	r7, sp, #0
 8023e3a:	4603      	mov	r3, r0
 8023e3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023e3e:	2300      	movs	r3, #0
 8023e40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8023e42:	79fb      	ldrb	r3, [r7, #7]
 8023e44:	2b03      	cmp	r3, #3
 8023e46:	d817      	bhi.n	8023e78 <USBH_Get_USB_Status+0x44>
 8023e48:	a201      	add	r2, pc, #4	; (adr r2, 8023e50 <USBH_Get_USB_Status+0x1c>)
 8023e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023e4e:	bf00      	nop
 8023e50:	08023e61 	.word	0x08023e61
 8023e54:	08023e67 	.word	0x08023e67
 8023e58:	08023e6d 	.word	0x08023e6d
 8023e5c:	08023e73 	.word	0x08023e73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8023e60:	2300      	movs	r3, #0
 8023e62:	73fb      	strb	r3, [r7, #15]
    break;
 8023e64:	e00b      	b.n	8023e7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8023e66:	2302      	movs	r3, #2
 8023e68:	73fb      	strb	r3, [r7, #15]
    break;
 8023e6a:	e008      	b.n	8023e7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8023e6c:	2301      	movs	r3, #1
 8023e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8023e70:	e005      	b.n	8023e7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8023e72:	2302      	movs	r3, #2
 8023e74:	73fb      	strb	r3, [r7, #15]
    break;
 8023e76:	e002      	b.n	8023e7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8023e78:	2302      	movs	r3, #2
 8023e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8023e7c:	bf00      	nop
  }
  return usb_status;
 8023e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023e80:	4618      	mov	r0, r3
 8023e82:	3714      	adds	r7, #20
 8023e84:	46bd      	mov	sp, r7
 8023e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e8a:	4770      	bx	lr

08023e8c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8023e8c:	b480      	push	{r7}
 8023e8e:	b083      	sub	sp, #12
 8023e90:	af00      	add	r7, sp, #0
 8023e92:	4603      	mov	r3, r0
 8023e94:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8023e96:	2300      	movs	r3, #0
}
 8023e98:	4618      	mov	r0, r3
 8023e9a:	370c      	adds	r7, #12
 8023e9c:	46bd      	mov	sp, r7
 8023e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ea2:	4770      	bx	lr

08023ea4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8023ea4:	b580      	push	{r7, lr}
 8023ea6:	b084      	sub	sp, #16
 8023ea8:	af00      	add	r7, sp, #0
 8023eaa:	4603      	mov	r3, r0
 8023eac:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8023eae:	2301      	movs	r3, #1
 8023eb0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8023eb2:	79fb      	ldrb	r3, [r7, #7]
 8023eb4:	4619      	mov	r1, r3
 8023eb6:	4808      	ldr	r0, [pc, #32]	; (8023ed8 <USBH_status+0x34>)
 8023eb8:	f7e8 fc94 	bl	800c7e4 <USBH_MSC_UnitIsReady>
 8023ebc:	4603      	mov	r3, r0
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	d002      	beq.n	8023ec8 <USBH_status+0x24>
  {
    res = RES_OK;
 8023ec2:	2300      	movs	r3, #0
 8023ec4:	73fb      	strb	r3, [r7, #15]
 8023ec6:	e001      	b.n	8023ecc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8023ec8:	2301      	movs	r3, #1
 8023eca:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8023ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8023ece:	4618      	mov	r0, r3
 8023ed0:	3710      	adds	r7, #16
 8023ed2:	46bd      	mov	sp, r7
 8023ed4:	bd80      	pop	{r7, pc}
 8023ed6:	bf00      	nop
 8023ed8:	20018330 	.word	0x20018330

08023edc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8023edc:	b580      	push	{r7, lr}
 8023ede:	b094      	sub	sp, #80	; 0x50
 8023ee0:	af02      	add	r7, sp, #8
 8023ee2:	60b9      	str	r1, [r7, #8]
 8023ee4:	607a      	str	r2, [r7, #4]
 8023ee6:	603b      	str	r3, [r7, #0]
 8023ee8:	4603      	mov	r3, r0
 8023eea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8023eec:	2301      	movs	r3, #1
 8023eee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8023ef2:	7bf9      	ldrb	r1, [r7, #15]
 8023ef4:	683b      	ldr	r3, [r7, #0]
 8023ef6:	9300      	str	r3, [sp, #0]
 8023ef8:	68bb      	ldr	r3, [r7, #8]
 8023efa:	687a      	ldr	r2, [r7, #4]
 8023efc:	4813      	ldr	r0, [pc, #76]	; (8023f4c <USBH_read+0x70>)
 8023efe:	f7e8 fcbb 	bl	800c878 <USBH_MSC_Read>
 8023f02:	4603      	mov	r3, r0
 8023f04:	2b00      	cmp	r3, #0
 8023f06:	d103      	bne.n	8023f10 <USBH_read+0x34>
  {
    res = RES_OK;
 8023f08:	2300      	movs	r3, #0
 8023f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8023f0e:	e017      	b.n	8023f40 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8023f10:	f107 0210 	add.w	r2, r7, #16
 8023f14:	7bfb      	ldrb	r3, [r7, #15]
 8023f16:	4619      	mov	r1, r3
 8023f18:	480c      	ldr	r0, [pc, #48]	; (8023f4c <USBH_read+0x70>)
 8023f1a:	f7e8 fc89 	bl	800c830 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8023f1e:	7f7b      	ldrb	r3, [r7, #29]
 8023f20:	2b3a      	cmp	r3, #58	; 0x3a
 8023f22:	d005      	beq.n	8023f30 <USBH_read+0x54>
 8023f24:	2b3a      	cmp	r3, #58	; 0x3a
 8023f26:	dc07      	bgt.n	8023f38 <USBH_read+0x5c>
 8023f28:	2b04      	cmp	r3, #4
 8023f2a:	d001      	beq.n	8023f30 <USBH_read+0x54>
 8023f2c:	2b28      	cmp	r3, #40	; 0x28
 8023f2e:	d103      	bne.n	8023f38 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8023f30:	2303      	movs	r3, #3
 8023f32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8023f36:	e003      	b.n	8023f40 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8023f38:	2301      	movs	r3, #1
 8023f3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8023f3e:	bf00      	nop
    }
  }

  return res;
 8023f40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8023f44:	4618      	mov	r0, r3
 8023f46:	3748      	adds	r7, #72	; 0x48
 8023f48:	46bd      	mov	sp, r7
 8023f4a:	bd80      	pop	{r7, pc}
 8023f4c:	20018330 	.word	0x20018330

08023f50 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8023f50:	b580      	push	{r7, lr}
 8023f52:	b094      	sub	sp, #80	; 0x50
 8023f54:	af02      	add	r7, sp, #8
 8023f56:	60b9      	str	r1, [r7, #8]
 8023f58:	607a      	str	r2, [r7, #4]
 8023f5a:	603b      	str	r3, [r7, #0]
 8023f5c:	4603      	mov	r3, r0
 8023f5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8023f60:	2301      	movs	r3, #1
 8023f62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8023f66:	7bf9      	ldrb	r1, [r7, #15]
 8023f68:	683b      	ldr	r3, [r7, #0]
 8023f6a:	9300      	str	r3, [sp, #0]
 8023f6c:	68bb      	ldr	r3, [r7, #8]
 8023f6e:	687a      	ldr	r2, [r7, #4]
 8023f70:	4817      	ldr	r0, [pc, #92]	; (8023fd0 <USBH_write+0x80>)
 8023f72:	f7e8 fcea 	bl	800c94a <USBH_MSC_Write>
 8023f76:	4603      	mov	r3, r0
 8023f78:	2b00      	cmp	r3, #0
 8023f7a:	d103      	bne.n	8023f84 <USBH_write+0x34>
  {
    res = RES_OK;
 8023f7c:	2300      	movs	r3, #0
 8023f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8023f82:	e01f      	b.n	8023fc4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8023f84:	f107 0210 	add.w	r2, r7, #16
 8023f88:	7bfb      	ldrb	r3, [r7, #15]
 8023f8a:	4619      	mov	r1, r3
 8023f8c:	4810      	ldr	r0, [pc, #64]	; (8023fd0 <USBH_write+0x80>)
 8023f8e:	f7e8 fc4f 	bl	800c830 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8023f92:	7f7b      	ldrb	r3, [r7, #29]
 8023f94:	2b3a      	cmp	r3, #58	; 0x3a
 8023f96:	d00d      	beq.n	8023fb4 <USBH_write+0x64>
 8023f98:	2b3a      	cmp	r3, #58	; 0x3a
 8023f9a:	dc0f      	bgt.n	8023fbc <USBH_write+0x6c>
 8023f9c:	2b28      	cmp	r3, #40	; 0x28
 8023f9e:	d009      	beq.n	8023fb4 <USBH_write+0x64>
 8023fa0:	2b28      	cmp	r3, #40	; 0x28
 8023fa2:	dc0b      	bgt.n	8023fbc <USBH_write+0x6c>
 8023fa4:	2b04      	cmp	r3, #4
 8023fa6:	d005      	beq.n	8023fb4 <USBH_write+0x64>
 8023fa8:	2b27      	cmp	r3, #39	; 0x27
 8023faa:	d107      	bne.n	8023fbc <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8023fac:	2302      	movs	r3, #2
 8023fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8023fb2:	e007      	b.n	8023fc4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8023fb4:	2303      	movs	r3, #3
 8023fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8023fba:	e003      	b.n	8023fc4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8023fbc:	2301      	movs	r3, #1
 8023fbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8023fc2:	bf00      	nop
    }
  }

  return res;
 8023fc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8023fc8:	4618      	mov	r0, r3
 8023fca:	3748      	adds	r7, #72	; 0x48
 8023fcc:	46bd      	mov	sp, r7
 8023fce:	bd80      	pop	{r7, pc}
 8023fd0:	20018330 	.word	0x20018330

08023fd4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8023fd4:	b580      	push	{r7, lr}
 8023fd6:	b090      	sub	sp, #64	; 0x40
 8023fd8:	af00      	add	r7, sp, #0
 8023fda:	4603      	mov	r3, r0
 8023fdc:	603a      	str	r2, [r7, #0]
 8023fde:	71fb      	strb	r3, [r7, #7]
 8023fe0:	460b      	mov	r3, r1
 8023fe2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8023fe4:	2301      	movs	r3, #1
 8023fe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8023fea:	79bb      	ldrb	r3, [r7, #6]
 8023fec:	2b03      	cmp	r3, #3
 8023fee:	d852      	bhi.n	8024096 <USBH_ioctl+0xc2>
 8023ff0:	a201      	add	r2, pc, #4	; (adr r2, 8023ff8 <USBH_ioctl+0x24>)
 8023ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023ff6:	bf00      	nop
 8023ff8:	08024009 	.word	0x08024009
 8023ffc:	08024011 	.word	0x08024011
 8024000:	0802403b 	.word	0x0802403b
 8024004:	08024067 	.word	0x08024067
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8024008:	2300      	movs	r3, #0
 802400a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 802400e:	e045      	b.n	802409c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8024010:	f107 0208 	add.w	r2, r7, #8
 8024014:	79fb      	ldrb	r3, [r7, #7]
 8024016:	4619      	mov	r1, r3
 8024018:	4823      	ldr	r0, [pc, #140]	; (80240a8 <USBH_ioctl+0xd4>)
 802401a:	f7e8 fc09 	bl	800c830 <USBH_MSC_GetLUNInfo>
 802401e:	4603      	mov	r3, r0
 8024020:	2b00      	cmp	r3, #0
 8024022:	d106      	bne.n	8024032 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8024024:	68fa      	ldr	r2, [r7, #12]
 8024026:	683b      	ldr	r3, [r7, #0]
 8024028:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 802402a:	2300      	movs	r3, #0
 802402c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8024030:	e034      	b.n	802409c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8024032:	2301      	movs	r3, #1
 8024034:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8024038:	e030      	b.n	802409c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 802403a:	f107 0208 	add.w	r2, r7, #8
 802403e:	79fb      	ldrb	r3, [r7, #7]
 8024040:	4619      	mov	r1, r3
 8024042:	4819      	ldr	r0, [pc, #100]	; (80240a8 <USBH_ioctl+0xd4>)
 8024044:	f7e8 fbf4 	bl	800c830 <USBH_MSC_GetLUNInfo>
 8024048:	4603      	mov	r3, r0
 802404a:	2b00      	cmp	r3, #0
 802404c:	d107      	bne.n	802405e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 802404e:	8a3b      	ldrh	r3, [r7, #16]
 8024050:	461a      	mov	r2, r3
 8024052:	683b      	ldr	r3, [r7, #0]
 8024054:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8024056:	2300      	movs	r3, #0
 8024058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802405c:	e01e      	b.n	802409c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802405e:	2301      	movs	r3, #1
 8024060:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8024064:	e01a      	b.n	802409c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8024066:	f107 0208 	add.w	r2, r7, #8
 802406a:	79fb      	ldrb	r3, [r7, #7]
 802406c:	4619      	mov	r1, r3
 802406e:	480e      	ldr	r0, [pc, #56]	; (80240a8 <USBH_ioctl+0xd4>)
 8024070:	f7e8 fbde 	bl	800c830 <USBH_MSC_GetLUNInfo>
 8024074:	4603      	mov	r3, r0
 8024076:	2b00      	cmp	r3, #0
 8024078:	d109      	bne.n	802408e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 802407a:	8a3b      	ldrh	r3, [r7, #16]
 802407c:	0a5b      	lsrs	r3, r3, #9
 802407e:	b29b      	uxth	r3, r3
 8024080:	461a      	mov	r2, r3
 8024082:	683b      	ldr	r3, [r7, #0]
 8024084:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8024086:	2300      	movs	r3, #0
 8024088:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 802408c:	e006      	b.n	802409c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 802408e:	2301      	movs	r3, #1
 8024090:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8024094:	e002      	b.n	802409c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8024096:	2304      	movs	r3, #4
 8024098:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 802409c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80240a0:	4618      	mov	r0, r3
 80240a2:	3740      	adds	r7, #64	; 0x40
 80240a4:	46bd      	mov	sp, r7
 80240a6:	bd80      	pop	{r7, pc}
 80240a8:	20018330 	.word	0x20018330

080240ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80240ac:	b580      	push	{r7, lr}
 80240ae:	b084      	sub	sp, #16
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	4603      	mov	r3, r0
 80240b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80240b6:	79fb      	ldrb	r3, [r7, #7]
 80240b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80240ba:	79fb      	ldrb	r3, [r7, #7]
 80240bc:	2b00      	cmp	r3, #0
 80240be:	d102      	bne.n	80240c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80240c0:	2300      	movs	r3, #0
 80240c2:	73fb      	strb	r3, [r7, #15]
 80240c4:	e001      	b.n	80240ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80240c6:	2301      	movs	r3, #1
 80240c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80240ca:	7bfb      	ldrb	r3, [r7, #15]
 80240cc:	461a      	mov	r2, r3
 80240ce:	2120      	movs	r1, #32
 80240d0:	4803      	ldr	r0, [pc, #12]	; (80240e0 <MX_DriverVbusFS+0x34>)
 80240d2:	f7de ff4d 	bl	8002f70 <HAL_GPIO_WritePin>
}
 80240d6:	bf00      	nop
 80240d8:	3710      	adds	r7, #16
 80240da:	46bd      	mov	sp, r7
 80240dc:	bd80      	pop	{r7, pc}
 80240de:	bf00      	nop
 80240e0:	40020c00 	.word	0x40020c00

080240e4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 80240e4:	b580      	push	{r7, lr}
 80240e6:	b088      	sub	sp, #32
 80240e8:	af04      	add	r7, sp, #16
 80240ea:	4603      	mov	r3, r0
 80240ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_HS */
  uint8_t Component_Reg  = 0;
 80240ee:	2300      	movs	r3, #0
 80240f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_HS */
  HAL_StatusTypeDef status = HAL_OK;
 80240f2:	2300      	movs	r3, #0
 80240f4:	73bb      	strb	r3, [r7, #14]
   /* USER CODE BEGIN PREPARE_I2C_ADDR_VBUS_HS */
  uint8_t Component_Addr = 0 << 1;
 80240f6:	2300      	movs	r3, #0
 80240f8:	737b      	strb	r3, [r7, #13]
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_HS */
  /* USER CODE BEGIN PREPARE_DATA_VBUS_HS */
  uint8_t data = state;
 80240fa:	79fb      	ldrb	r3, [r7, #7]
 80240fc:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_DATA_VBUS_HS */
  uint8_t data_tmp = 0;
 80240fe:	2300      	movs	r3, #0
 8024100:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 8024102:	7b7b      	ldrb	r3, [r7, #13]
 8024104:	b299      	uxth	r1, r3
 8024106:	7bfb      	ldrb	r3, [r7, #15]
 8024108:	b29a      	uxth	r2, r3
 802410a:	2364      	movs	r3, #100	; 0x64
 802410c:	9302      	str	r3, [sp, #8]
 802410e:	2301      	movs	r3, #1
 8024110:	9301      	str	r3, [sp, #4]
 8024112:	f107 030b 	add.w	r3, r7, #11
 8024116:	9300      	str	r3, [sp, #0]
 8024118:	2301      	movs	r3, #1
 802411a:	480f      	ldr	r0, [pc, #60]	; (8024158 <MX_DriverVbusHS+0x74>)
 802411c:	f7e0 fe24 	bl	8004d68 <HAL_I2C_Mem_Read>
 8024120:	4603      	mov	r3, r0
 8024122:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 8024124:	7b3a      	ldrb	r2, [r7, #12]
 8024126:	7afb      	ldrb	r3, [r7, #11]
 8024128:	4313      	orrs	r3, r2
 802412a:	b2db      	uxtb	r3, r3
 802412c:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 802412e:	7b7b      	ldrb	r3, [r7, #13]
 8024130:	b299      	uxth	r1, r3
 8024132:	7bfb      	ldrb	r3, [r7, #15]
 8024134:	b29a      	uxth	r2, r3
 8024136:	2364      	movs	r3, #100	; 0x64
 8024138:	9302      	str	r3, [sp, #8]
 802413a:	2301      	movs	r3, #1
 802413c:	9301      	str	r3, [sp, #4]
 802413e:	f107 030c 	add.w	r3, r7, #12
 8024142:	9300      	str	r3, [sp, #0]
 8024144:	2301      	movs	r3, #1
 8024146:	4804      	ldr	r0, [pc, #16]	; (8024158 <MX_DriverVbusHS+0x74>)
 8024148:	f7e0 fcec 	bl	8004b24 <HAL_I2C_Mem_Write>
 802414c:	4603      	mov	r3, r0
 802414e:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_HS */
}
 8024150:	bf00      	nop
 8024152:	3710      	adds	r7, #16
 8024154:	46bd      	mov	sp, r7
 8024156:	bd80      	pop	{r7, pc}
 8024158:	200009b0 	.word	0x200009b0

0802415c <ReadWavHeader>:

extern uint8_t volume;
uint32_t wavtagsize = 0;
WavHeaderTypeDef wavfile;

uint8_t ReadWavHeader(WavHeaderTypeDef *waveformat) {
 802415c:	b580      	push	{r7, lr}
 802415e:	b084      	sub	sp, #16
 8024160:	af00      	add	r7, sp, #0
 8024162:	6078      	str	r0, [r7, #4]
	uint32_t bytesread;
	FRESULT res;
	/* Fill the buffer to Send */
	res = f_read(&MyFile, waveformat, sizeof(wavfile), (void*)&bytesread);
 8024164:	f107 0308 	add.w	r3, r7, #8
 8024168:	222c      	movs	r2, #44	; 0x2c
 802416a:	6879      	ldr	r1, [r7, #4]
 802416c:	4804      	ldr	r0, [pc, #16]	; (8024180 <ReadWavHeader+0x24>)
 802416e:	f7ec fd11 	bl	8010b94 <f_read>
 8024172:	4603      	mov	r3, r0
 8024174:	73fb      	strb	r3, [r7, #15]
	return res;
 8024176:	7bfb      	ldrb	r3, [r7, #15]
}
 8024178:	4618      	mov	r0, r3
 802417a:	3710      	adds	r7, #16
 802417c:	46bd      	mov	sp, r7
 802417e:	bd80      	pop	{r7, pc}
 8024180:	20000f10 	.word	0x20000f10

08024184 <GetTrackTime>:

void GetTrackTime() {
 8024184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024188:	ed2d 8b02 	vpush	{d8}
 802418c:	b088      	sub	sp, #32
 802418e:	af00      	add	r7, sp, #0
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 8024190:	4b41      	ldr	r3, [pc, #260]	; (8024298 <GetTrackTime+0x114>)
 8024192:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8024196:	4941      	ldr	r1, [pc, #260]	; (802429c <GetTrackTime+0x118>)
 8024198:	6809      	ldr	r1, [r1, #0]
 802419a:	2000      	movs	r0, #0
 802419c:	6139      	str	r1, [r7, #16]
 802419e:	6178      	str	r0, [r7, #20]
 80241a0:	6939      	ldr	r1, [r7, #16]
 80241a2:	1a51      	subs	r1, r2, r1
 80241a4:	60b9      	str	r1, [r7, #8]
 80241a6:	6979      	ldr	r1, [r7, #20]
 80241a8:	eb63 0301 	sbc.w	r3, r3, r1
 80241ac:	60fb      	str	r3, [r7, #12]
 80241ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80241b2:	f7dc fe1b 	bl	8000dec <__aeabi_ul2f>
 80241b6:	ee08 0a10 	vmov	s16, r0
			(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 80241ba:	4b37      	ldr	r3, [pc, #220]	; (8024298 <GetTrackTime+0x114>)
 80241bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80241c0:	4936      	ldr	r1, [pc, #216]	; (802429c <GetTrackTime+0x118>)
 80241c2:	6809      	ldr	r1, [r1, #0]
 80241c4:	2000      	movs	r0, #0
 80241c6:	468a      	mov	sl, r1
 80241c8:	4683      	mov	fp, r0
 80241ca:	ebb2 040a 	subs.w	r4, r2, sl
 80241ce:	eb63 050b 	sbc.w	r5, r3, fp
 80241d2:	4b33      	ldr	r3, [pc, #204]	; (80242a0 <GetTrackTime+0x11c>)
 80241d4:	681b      	ldr	r3, [r3, #0]
 80241d6:	2200      	movs	r2, #0
 80241d8:	4698      	mov	r8, r3
 80241da:	4691      	mov	r9, r2
 80241dc:	ebb4 0308 	subs.w	r3, r4, r8
 80241e0:	603b      	str	r3, [r7, #0]
 80241e2:	eb65 0309 	sbc.w	r3, r5, r9
 80241e6:	607b      	str	r3, [r7, #4]
 80241e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80241ec:	f7dc fdfe 	bl	8000dec <__aeabi_ul2f>
 80241f0:	ee07 0a90 	vmov	s15, r0
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 80241f4:	ee88 7a27 	vdiv.f32	s14, s16, s15
			*rekordbox.spectrum_size;
 80241f8:	4b2a      	ldr	r3, [pc, #168]	; (80242a4 <GetTrackTime+0x120>)
 80241fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80241fe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8024202:	ee07 3a90 	vmov	s15, r3
 8024206:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 802420a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802420e:	edc7 7a07 	vstr	s15, [r7, #28]
	file_pos_wide = (track_lenght + 0.5);
 8024212:	69f8      	ldr	r0, [r7, #28]
 8024214:	f7dc f9c0 	bl	8000598 <__aeabi_f2d>
 8024218:	f04f 0200 	mov.w	r2, #0
 802421c:	4b22      	ldr	r3, [pc, #136]	; (80242a8 <GetTrackTime+0x124>)
 802421e:	f7dc f85d 	bl	80002dc <__adddf3>
 8024222:	4602      	mov	r2, r0
 8024224:	460b      	mov	r3, r1
 8024226:	4610      	mov	r0, r2
 8024228:	4619      	mov	r1, r3
 802422a:	f7dc fca7 	bl	8000b7c <__aeabi_d2uiz>
 802422e:	4603      	mov	r3, r0
 8024230:	4a1e      	ldr	r2, [pc, #120]	; (80242ac <GetTrackTime+0x128>)
 8024232:	6013      	str	r3, [r2, #0]
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 8024234:	4b1b      	ldr	r3, [pc, #108]	; (80242a4 <GetTrackTime+0x120>)
 8024236:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802423a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 802423e:	4a1b      	ldr	r2, [pc, #108]	; (80242ac <GetTrackTime+0x128>)
 8024240:	6812      	ldr	r2, [r2, #0]
 8024242:	fb03 f202 	mul.w	r2, r3, r2
			rekordbox.spectrum_size);
 8024246:	4b17      	ldr	r3, [pc, #92]	; (80242a4 <GetTrackTime+0x120>)
 8024248:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802424c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 8024250:	fbb2 f3f3 	udiv	r3, r2, r3
 8024254:	b29b      	uxth	r3, r3
 8024256:	461a      	mov	r2, r3
 8024258:	4b15      	ldr	r3, [pc, #84]	; (80242b0 <GetTrackTime+0x12c>)
 802425a:	601a      	str	r2, [r3, #0]
	TrackTime();
 802425c:	f000 f82e 	bl	80242bc <TrackTime>
	if(display.loop == 1) {
 8024260:	4b14      	ldr	r3, [pc, #80]	; (80242b4 <GetTrackTime+0x130>)
 8024262:	7c1b      	ldrb	r3, [r3, #16]
 8024264:	2b01      	cmp	r3, #1
 8024266:	d110      	bne.n	802428a <GetTrackTime+0x106>
		if(trak.state == PLAYING) {
 8024268:	4b13      	ldr	r3, [pc, #76]	; (80242b8 <GetTrackTime+0x134>)
 802426a:	781b      	ldrb	r3, [r3, #0]
 802426c:	2b00      	cmp	r3, #0
 802426e:	d10c      	bne.n	802428a <GetTrackTime+0x106>
			if(file_pos_wide >= display.loopend) {
 8024270:	4b10      	ldr	r3, [pc, #64]	; (80242b4 <GetTrackTime+0x130>)
 8024272:	68da      	ldr	r2, [r3, #12]
 8024274:	4b0d      	ldr	r3, [pc, #52]	; (80242ac <GetTrackTime+0x128>)
 8024276:	681b      	ldr	r3, [r3, #0]
 8024278:	429a      	cmp	r2, r3
 802427a:	d806      	bhi.n	802428a <GetTrackTime+0x106>
				GoToPosition(display.loopstart);
 802427c:	4b0d      	ldr	r3, [pc, #52]	; (80242b4 <GetTrackTime+0x130>)
 802427e:	689b      	ldr	r3, [r3, #8]
 8024280:	4618      	mov	r0, r3
 8024282:	f000 fa23 	bl	80246cc <GoToPosition>
				BSP_AUDIO_OUT_Resume();
 8024286:	f7fc fcf9 	bl	8020c7c <BSP_AUDIO_OUT_Resume>
			}
		}
	}
}
 802428a:	bf00      	nop
 802428c:	3720      	adds	r7, #32
 802428e:	46bd      	mov	sp, r7
 8024290:	ecbd 8b02 	vpop	{d8}
 8024294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024298:	20000f10 	.word	0x20000f10
 802429c:	2000f730 	.word	0x2000f730
 80242a0:	20018e5c 	.word	0x20018e5c
 80242a4:	20015170 	.word	0x20015170
 80242a8:	3fe00000 	.word	0x3fe00000
 80242ac:	20001e00 	.word	0x20001e00
 80242b0:	20001dfc 	.word	0x20001dfc
 80242b4:	200008fc 	.word	0x200008fc
 80242b8:	2000e6e0 	.word	0x2000e6e0

080242bc <TrackTime>:

void TrackTime() {
 80242bc:	b480      	push	{r7}
 80242be:	af00      	add	r7, sp, #0
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 80242c0:	4b3c      	ldr	r3, [pc, #240]	; (80243b4 <TrackTime+0xf8>)
 80242c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80242c6:	f8d3 244c 	ldr.w	r2, [r3, #1100]	; 0x44c
 80242ca:	4b3b      	ldr	r3, [pc, #236]	; (80243b8 <TrackTime+0xfc>)
 80242cc:	681b      	ldr	r3, [r3, #0]
 80242ce:	1ad2      	subs	r2, r2, r3
 80242d0:	4b3a      	ldr	r3, [pc, #232]	; (80243bc <TrackTime+0x100>)
 80242d2:	fba3 1302 	umull	r1, r3, r3, r2
 80242d6:	0b5b      	lsrs	r3, r3, #13
 80242d8:	f242 3128 	movw	r1, #9000	; 0x2328
 80242dc:	fb01 f303 	mul.w	r3, r1, r3
 80242e0:	1ad3      	subs	r3, r2, r3
 80242e2:	4a37      	ldr	r2, [pc, #220]	; (80243c0 <TrackTime+0x104>)
 80242e4:	fba2 1203 	umull	r1, r2, r2, r3
 80242e8:	0912      	lsrs	r2, r2, #4
 80242ea:	2196      	movs	r1, #150	; 0x96
 80242ec:	fb01 f202 	mul.w	r2, r1, r2
 80242f0:	1a9a      	subs	r2, r3, r2
 80242f2:	b212      	sxth	r2, r2
 80242f4:	4b33      	ldr	r3, [pc, #204]	; (80243c4 <TrackTime+0x108>)
 80242f6:	801a      	strh	r2, [r3, #0]
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 80242f8:	4b2e      	ldr	r3, [pc, #184]	; (80243b4 <TrackTime+0xf8>)
 80242fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80242fe:	f8d3 244c 	ldr.w	r2, [r3, #1100]	; 0x44c
 8024302:	4b2d      	ldr	r3, [pc, #180]	; (80243b8 <TrackTime+0xfc>)
 8024304:	681b      	ldr	r3, [r3, #0]
 8024306:	1ad2      	subs	r2, r2, r3
 8024308:	4b2c      	ldr	r3, [pc, #176]	; (80243bc <TrackTime+0x100>)
 802430a:	fba3 1302 	umull	r1, r3, r3, r2
 802430e:	0b5b      	lsrs	r3, r3, #13
 8024310:	f242 3128 	movw	r1, #9000	; 0x2328
 8024314:	fb01 f303 	mul.w	r3, r1, r3
 8024318:	1ad3      	subs	r3, r2, r3
 802431a:	4a29      	ldr	r2, [pc, #164]	; (80243c0 <TrackTime+0x104>)
 802431c:	fba2 2303 	umull	r2, r3, r2, r3
 8024320:	091b      	lsrs	r3, r3, #4
 8024322:	b25a      	sxtb	r2, r3
 8024324:	4b28      	ldr	r3, [pc, #160]	; (80243c8 <TrackTime+0x10c>)
 8024326:	701a      	strb	r2, [r3, #0]
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 8024328:	4b22      	ldr	r3, [pc, #136]	; (80243b4 <TrackTime+0xf8>)
 802432a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802432e:	f8d3 244c 	ldr.w	r2, [r3, #1100]	; 0x44c
 8024332:	4b21      	ldr	r3, [pc, #132]	; (80243b8 <TrackTime+0xfc>)
 8024334:	681b      	ldr	r3, [r3, #0]
 8024336:	1ad3      	subs	r3, r2, r3
 8024338:	4a20      	ldr	r2, [pc, #128]	; (80243bc <TrackTime+0x100>)
 802433a:	fba2 2303 	umull	r2, r3, r2, r3
 802433e:	0b5b      	lsrs	r3, r3, #13
 8024340:	b25a      	sxtb	r2, r3
 8024342:	4b22      	ldr	r3, [pc, #136]	; (80243cc <TrackTime+0x110>)
 8024344:	701a      	strb	r2, [r3, #0]
	fr = ((file_pos_wide) % 9000) % 150;
 8024346:	4b1c      	ldr	r3, [pc, #112]	; (80243b8 <TrackTime+0xfc>)
 8024348:	681a      	ldr	r2, [r3, #0]
 802434a:	4b1c      	ldr	r3, [pc, #112]	; (80243bc <TrackTime+0x100>)
 802434c:	fba3 1302 	umull	r1, r3, r3, r2
 8024350:	0b5b      	lsrs	r3, r3, #13
 8024352:	f242 3128 	movw	r1, #9000	; 0x2328
 8024356:	fb01 f303 	mul.w	r3, r1, r3
 802435a:	1ad3      	subs	r3, r2, r3
 802435c:	4a18      	ldr	r2, [pc, #96]	; (80243c0 <TrackTime+0x104>)
 802435e:	fba2 1203 	umull	r1, r2, r2, r3
 8024362:	0912      	lsrs	r2, r2, #4
 8024364:	2196      	movs	r1, #150	; 0x96
 8024366:	fb01 f202 	mul.w	r2, r1, r2
 802436a:	1a9a      	subs	r2, r3, r2
 802436c:	b212      	sxth	r2, r2
 802436e:	4b18      	ldr	r3, [pc, #96]	; (80243d0 <TrackTime+0x114>)
 8024370:	801a      	strh	r2, [r3, #0]
	sec = ((file_pos_wide) % 9000) / 150;
 8024372:	4b11      	ldr	r3, [pc, #68]	; (80243b8 <TrackTime+0xfc>)
 8024374:	681a      	ldr	r2, [r3, #0]
 8024376:	4b11      	ldr	r3, [pc, #68]	; (80243bc <TrackTime+0x100>)
 8024378:	fba3 1302 	umull	r1, r3, r3, r2
 802437c:	0b5b      	lsrs	r3, r3, #13
 802437e:	f242 3128 	movw	r1, #9000	; 0x2328
 8024382:	fb01 f303 	mul.w	r3, r1, r3
 8024386:	1ad3      	subs	r3, r2, r3
 8024388:	4a0d      	ldr	r2, [pc, #52]	; (80243c0 <TrackTime+0x104>)
 802438a:	fba2 2303 	umull	r2, r3, r2, r3
 802438e:	091b      	lsrs	r3, r3, #4
 8024390:	b25a      	sxtb	r2, r3
 8024392:	4b10      	ldr	r3, [pc, #64]	; (80243d4 <TrackTime+0x118>)
 8024394:	701a      	strb	r2, [r3, #0]
	min = (file_pos_wide) / 9000;
 8024396:	4b08      	ldr	r3, [pc, #32]	; (80243b8 <TrackTime+0xfc>)
 8024398:	681b      	ldr	r3, [r3, #0]
 802439a:	4a08      	ldr	r2, [pc, #32]	; (80243bc <TrackTime+0x100>)
 802439c:	fba2 2303 	umull	r2, r3, r2, r3
 80243a0:	0b5b      	lsrs	r3, r3, #13
 80243a2:	b25a      	sxtb	r2, r3
 80243a4:	4b0c      	ldr	r3, [pc, #48]	; (80243d8 <TrackTime+0x11c>)
 80243a6:	701a      	strb	r2, [r3, #0]
}
 80243a8:	bf00      	nop
 80243aa:	46bd      	mov	sp, r7
 80243ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243b0:	4770      	bx	lr
 80243b2:	bf00      	nop
 80243b4:	20015170 	.word	0x20015170
 80243b8:	20001e00 	.word	0x20001e00
 80243bc:	e90452d5 	.word	0xe90452d5
 80243c0:	1b4e81b5 	.word	0x1b4e81b5
 80243c4:	2000e6d4 	.word	0x2000e6d4
 80243c8:	2000e6d6 	.word	0x2000e6d6
 80243cc:	2000e6d7 	.word	0x2000e6d7
 80243d0:	2000e6d0 	.word	0x2000e6d0
 80243d4:	2000e6d2 	.word	0x2000e6d2
 80243d8:	2000e6d3 	.word	0x2000e6d3

080243dc <PlayWavFile>:

void PlayWavFile() {
 80243dc:	b580      	push	{r7, lr}
 80243de:	b082      	sub	sp, #8
 80243e0:	af00      	add	r7, sp, #0
	wavtagsize = 0;
 80243e2:	4ba5      	ldr	r3, [pc, #660]	; (8024678 <PlayWavFile+0x29c>)
 80243e4:	2200      	movs	r2, #0
 80243e6:	601a      	str	r2, [r3, #0]
	BufferCtl.filetype = 0;
 80243e8:	4ba4      	ldr	r3, [pc, #656]	; (802467c <PlayWavFile+0x2a0>)
 80243ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80243ee:	2200      	movs	r2, #0
 80243f0:	721a      	strb	r2, [r3, #8]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 80243f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80243f6:	2100      	movs	r1, #0
 80243f8:	48a0      	ldr	r0, [pc, #640]	; (802467c <PlayWavFile+0x2a0>)
 80243fa:	f001 fdbd 	bl	8025f78 <memset>
	bOutOfData = 0;
 80243fe:	4ba0      	ldr	r3, [pc, #640]	; (8024680 <PlayWavFile+0x2a4>)
 8024400:	2200      	movs	r2, #0
 8024402:	601a      	str	r2, [r3, #0]
	uint16_t bytesread = 0;
 8024404:	2300      	movs	r3, #0
 8024406:	80fb      	strh	r3, [r7, #6]
	ReadWavHeader(&wavfile);
 8024408:	489e      	ldr	r0, [pc, #632]	; (8024684 <PlayWavFile+0x2a8>)
 802440a:	f7ff fea7 	bl	802415c <ReadWavHeader>
	wavtagsize = wavfile.FileSize - wavfile.SubChunk2Size;
 802440e:	4b9d      	ldr	r3, [pc, #628]	; (8024684 <PlayWavFile+0x2a8>)
 8024410:	685a      	ldr	r2, [r3, #4]
 8024412:	4b9c      	ldr	r3, [pc, #624]	; (8024684 <PlayWavFile+0x2a8>)
 8024414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024416:	1ad3      	subs	r3, r2, r3
 8024418:	4a97      	ldr	r2, [pc, #604]	; (8024678 <PlayWavFile+0x29c>)
 802441a:	6013      	str	r3, [r2, #0]
	if(wavfile.SampleRate > 0) trak.bitrate = wavfile.SampleRate;
 802441c:	4b99      	ldr	r3, [pc, #612]	; (8024684 <PlayWavFile+0x2a8>)
 802441e:	699b      	ldr	r3, [r3, #24]
 8024420:	2b00      	cmp	r3, #0
 8024422:	d005      	beq.n	8024430 <PlayWavFile+0x54>
 8024424:	4b97      	ldr	r3, [pc, #604]	; (8024684 <PlayWavFile+0x2a8>)
 8024426:	699b      	ldr	r3, [r3, #24]
 8024428:	b29a      	uxth	r2, r3
 802442a:	4b97      	ldr	r3, [pc, #604]	; (8024688 <PlayWavFile+0x2ac>)
 802442c:	811a      	strh	r2, [r3, #8]
 802442e:	e003      	b.n	8024438 <PlayWavFile+0x5c>
	else trak.bitrate = AUDIO_FREQUENCY_44K;
 8024430:	4b95      	ldr	r3, [pc, #596]	; (8024688 <PlayWavFile+0x2ac>)
 8024432:	f64a 4244 	movw	r2, #44100	; 0xac44
 8024436:	811a      	strh	r2, [r3, #8]
	BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)*(1 + trak.percent), NULL);
 8024438:	4b93      	ldr	r3, [pc, #588]	; (8024688 <PlayWavFile+0x2ac>)
 802443a:	891b      	ldrh	r3, [r3, #8]
 802443c:	085b      	lsrs	r3, r3, #1
 802443e:	b29b      	uxth	r3, r3
 8024440:	ee07 3a90 	vmov	s15, r3
 8024444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8024448:	4b8f      	ldr	r3, [pc, #572]	; (8024688 <PlayWavFile+0x2ac>)
 802444a:	edd3 7a01 	vldr	s15, [r3, #4]
 802444e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024456:	ee67 7a27 	vmul.f32	s15, s14, s15
 802445a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802445e:	2200      	movs	r2, #0
 8024460:	ee17 1a90 	vmov	r1, s15
 8024464:	4889      	ldr	r0, [pc, #548]	; (802468c <PlayWavFile+0x2b0>)
 8024466:	f7fc fd1d 	bl	8020ea4 <BSP_AUDIO_OUT_ClockConfig>
	/* Fill whole buffer at first time */
	while(f_read(&MyFile, &BufferCtl.buff[0], 2048, (void *)&bytesread) != FR_OK);
 802446a:	bf00      	nop
 802446c:	1dbb      	adds	r3, r7, #6
 802446e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8024472:	4982      	ldr	r1, [pc, #520]	; (802467c <PlayWavFile+0x2a0>)
 8024474:	4886      	ldr	r0, [pc, #536]	; (8024690 <PlayWavFile+0x2b4>)
 8024476:	f7ec fb8d 	bl	8010b94 <f_read>
 802447a:	4603      	mov	r3, r0
 802447c:	2b00      	cmp	r3, #0
 802447e:	d1f5      	bne.n	802446c <PlayWavFile+0x90>
	if(bytesread != 0) {
 8024480:	88fb      	ldrh	r3, [r7, #6]
 8024482:	2b00      	cmp	r3, #0
 8024484:	d00f      	beq.n	80244a6 <PlayWavFile+0xca>
		BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8024486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802448a:	487c      	ldr	r0, [pc, #496]	; (802467c <PlayWavFile+0x2a0>)
 802448c:	f7fc fbc2 	bl	8020c14 <BSP_AUDIO_OUT_Play>
		BufferCtl.fptr = bytesread;
 8024490:	88fb      	ldrh	r3, [r7, #6]
 8024492:	461a      	mov	r2, r3
 8024494:	4b79      	ldr	r3, [pc, #484]	; (802467c <PlayWavFile+0x2a0>)
 8024496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802449a:	605a      	str	r2, [r3, #4]
		BSP_AUDIO_OUT_SetVolume(volume);
 802449c:	4b7d      	ldr	r3, [pc, #500]	; (8024694 <PlayWavFile+0x2b8>)
 802449e:	781b      	ldrb	r3, [r3, #0]
 80244a0:	4618      	mov	r0, r3
 80244a2:	f7fc fc17 	bl	8020cd4 <BSP_AUDIO_OUT_SetVolume>
	}
	if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 80244a6:	4b7c      	ldr	r3, [pc, #496]	; (8024698 <PlayWavFile+0x2bc>)
 80244a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80244ac:	f893 3d8c 	ldrb.w	r3, [r3, #3468]	; 0xd8c
 80244b0:	b2db      	uxtb	r3, r3
 80244b2:	2b02      	cmp	r3, #2
 80244b4:	f040 80b5 	bne.w	8024622 <PlayWavFile+0x246>
 80244b8:	4b73      	ldr	r3, [pc, #460]	; (8024688 <PlayWavFile+0x2ac>)
 80244ba:	781b      	ldrb	r3, [r3, #0]
 80244bc:	2b00      	cmp	r3, #0
 80244be:	f040 80b0 	bne.w	8024622 <PlayWavFile+0x246>
		BSP_AUDIO_OUT_Pause();
 80244c2:	f7fc fbd1 	bl	8020c68 <BSP_AUDIO_OUT_Pause>
		trak.state = STOPPED;
 80244c6:	4b70      	ldr	r3, [pc, #448]	; (8024688 <PlayWavFile+0x2ac>)
 80244c8:	2201      	movs	r2, #1
 80244ca:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim8);
 80244cc:	4873      	ldr	r0, [pc, #460]	; (802469c <PlayWavFile+0x2c0>)
 80244ce:	f7e5 fa2f 	bl	8009930 <HAL_TIM_Base_Start_IT>
		GoToPosition(rekordbox.cue_start_position[0]);
 80244d2:	4b71      	ldr	r3, [pc, #452]	; (8024698 <PlayWavFile+0x2bc>)
 80244d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80244d8:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
 80244dc:	4618      	mov	r0, r3
 80244de:	f000 f8f5 	bl	80246cc <GoToPosition>
		TrackTime();
 80244e2:	f7ff feeb 	bl	80242bc <TrackTime>
	}
	while((!bOutOfData) && (file_pos_wide < rekordbox.spectrum_size)) {
 80244e6:	e09c      	b.n	8024622 <PlayWavFile+0x246>
		if(file_pos_wide >= 0) {
			if((rmin == 0) && (rsec < 30) && (rsec > 10)) {
 80244e8:	4b6d      	ldr	r3, [pc, #436]	; (80246a0 <PlayWavFile+0x2c4>)
 80244ea:	f993 3000 	ldrsb.w	r3, [r3]
 80244ee:	2b00      	cmp	r3, #0
 80244f0:	d13c      	bne.n	802456c <PlayWavFile+0x190>
 80244f2:	4b6c      	ldr	r3, [pc, #432]	; (80246a4 <PlayWavFile+0x2c8>)
 80244f4:	f993 3000 	ldrsb.w	r3, [r3]
 80244f8:	2b1d      	cmp	r3, #29
 80244fa:	dc37      	bgt.n	802456c <PlayWavFile+0x190>
 80244fc:	4b69      	ldr	r3, [pc, #420]	; (80246a4 <PlayWavFile+0x2c8>)
 80244fe:	f993 3000 	ldrsb.w	r3, [r3]
 8024502:	2b0a      	cmp	r3, #10
 8024504:	dd32      	ble.n	802456c <PlayWavFile+0x190>
				if(tim7_flag == 0) {
 8024506:	4b68      	ldr	r3, [pc, #416]	; (80246a8 <PlayWavFile+0x2cc>)
 8024508:	781b      	ldrb	r3, [r3, #0]
 802450a:	2b00      	cmp	r3, #0
 802450c:	d10e      	bne.n	802452c <PlayWavFile+0x150>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 802450e:	4b67      	ldr	r3, [pc, #412]	; (80246ac <PlayWavFile+0x2d0>)
 8024510:	681b      	ldr	r3, [r3, #0]
 8024512:	f241 3287 	movw	r2, #4999	; 0x1387
 8024516:	62da      	str	r2, [r3, #44]	; 0x2c
 8024518:	4b64      	ldr	r3, [pc, #400]	; (80246ac <PlayWavFile+0x2d0>)
 802451a:	f241 3287 	movw	r2, #4999	; 0x1387
 802451e:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 8024520:	4862      	ldr	r0, [pc, #392]	; (80246ac <PlayWavFile+0x2d0>)
 8024522:	f7e5 fa05 	bl	8009930 <HAL_TIM_Base_Start_IT>
					tim7_flag =  1;
 8024526:	4b60      	ldr	r3, [pc, #384]	; (80246a8 <PlayWavFile+0x2cc>)
 8024528:	2201      	movs	r2, #1
 802452a:	701a      	strb	r2, [r3, #0]
				}
				if(tim7_flag == 2) {
 802452c:	4b5e      	ldr	r3, [pc, #376]	; (80246a8 <PlayWavFile+0x2cc>)
 802452e:	781b      	ldrb	r3, [r3, #0]
 8024530:	2b02      	cmp	r3, #2
 8024532:	d176      	bne.n	8024622 <PlayWavFile+0x246>
					HAL_TIM_Base_Stop_IT(&htim7);
 8024534:	485d      	ldr	r0, [pc, #372]	; (80246ac <PlayWavFile+0x2d0>)
 8024536:	f7e5 fa8b 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 802453a:	4b5c      	ldr	r3, [pc, #368]	; (80246ac <PlayWavFile+0x2d0>)
 802453c:	681b      	ldr	r3, [r3, #0]
 802453e:	f06f 0201 	mvn.w	r2, #1
 8024542:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 8024544:	4b59      	ldr	r3, [pc, #356]	; (80246ac <PlayWavFile+0x2d0>)
 8024546:	681b      	ldr	r3, [r3, #0]
 8024548:	2200      	movs	r2, #0
 802454a:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 802454c:	4b57      	ldr	r3, [pc, #348]	; (80246ac <PlayWavFile+0x2d0>)
 802454e:	681b      	ldr	r3, [r3, #0]
 8024550:	f241 3287 	movw	r2, #4999	; 0x1387
 8024554:	62da      	str	r2, [r3, #44]	; 0x2c
 8024556:	4b55      	ldr	r3, [pc, #340]	; (80246ac <PlayWavFile+0x2d0>)
 8024558:	f241 3287 	movw	r2, #4999	; 0x1387
 802455c:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 802455e:	4853      	ldr	r0, [pc, #332]	; (80246ac <PlayWavFile+0x2d0>)
 8024560:	f7e5 f9e6 	bl	8009930 <HAL_TIM_Base_Start_IT>
					tim7_flag = 1;
 8024564:	4b50      	ldr	r3, [pc, #320]	; (80246a8 <PlayWavFile+0x2cc>)
 8024566:	2201      	movs	r2, #1
 8024568:	701a      	strb	r2, [r3, #0]
				if(tim7_flag == 2) {
 802456a:	e05a      	b.n	8024622 <PlayWavFile+0x246>
				}
			}
			else if((rmin == 0) && (rsec <= 10)) {
 802456c:	4b4c      	ldr	r3, [pc, #304]	; (80246a0 <PlayWavFile+0x2c4>)
 802456e:	f993 3000 	ldrsb.w	r3, [r3]
 8024572:	2b00      	cmp	r3, #0
 8024574:	d137      	bne.n	80245e6 <PlayWavFile+0x20a>
 8024576:	4b4b      	ldr	r3, [pc, #300]	; (80246a4 <PlayWavFile+0x2c8>)
 8024578:	f993 3000 	ldrsb.w	r3, [r3]
 802457c:	2b0a      	cmp	r3, #10
 802457e:	dc32      	bgt.n	80245e6 <PlayWavFile+0x20a>
				if(tim7_flag == 0) {
 8024580:	4b49      	ldr	r3, [pc, #292]	; (80246a8 <PlayWavFile+0x2cc>)
 8024582:	781b      	ldrb	r3, [r3, #0]
 8024584:	2b00      	cmp	r3, #0
 8024586:	d10e      	bne.n	80245a6 <PlayWavFile+0x1ca>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 8024588:	4b48      	ldr	r3, [pc, #288]	; (80246ac <PlayWavFile+0x2d0>)
 802458a:	681b      	ldr	r3, [r3, #0]
 802458c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8024590:	62da      	str	r2, [r3, #44]	; 0x2c
 8024592:	4b46      	ldr	r3, [pc, #280]	; (80246ac <PlayWavFile+0x2d0>)
 8024594:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8024598:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 802459a:	4844      	ldr	r0, [pc, #272]	; (80246ac <PlayWavFile+0x2d0>)
 802459c:	f7e5 f9c8 	bl	8009930 <HAL_TIM_Base_Start_IT>
					tim7_flag =  2;
 80245a0:	4b41      	ldr	r3, [pc, #260]	; (80246a8 <PlayWavFile+0x2cc>)
 80245a2:	2202      	movs	r2, #2
 80245a4:	701a      	strb	r2, [r3, #0]
				}
				if(tim7_flag == 1) {
 80245a6:	4b40      	ldr	r3, [pc, #256]	; (80246a8 <PlayWavFile+0x2cc>)
 80245a8:	781b      	ldrb	r3, [r3, #0]
 80245aa:	2b01      	cmp	r3, #1
 80245ac:	d139      	bne.n	8024622 <PlayWavFile+0x246>
					HAL_TIM_Base_Stop_IT(&htim7);
 80245ae:	483f      	ldr	r0, [pc, #252]	; (80246ac <PlayWavFile+0x2d0>)
 80245b0:	f7e5 fa4e 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80245b4:	4b3d      	ldr	r3, [pc, #244]	; (80246ac <PlayWavFile+0x2d0>)
 80245b6:	681b      	ldr	r3, [r3, #0]
 80245b8:	f06f 0201 	mvn.w	r2, #1
 80245bc:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 80245be:	4b3b      	ldr	r3, [pc, #236]	; (80246ac <PlayWavFile+0x2d0>)
 80245c0:	681b      	ldr	r3, [r3, #0]
 80245c2:	2200      	movs	r2, #0
 80245c4:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 80245c6:	4b39      	ldr	r3, [pc, #228]	; (80246ac <PlayWavFile+0x2d0>)
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80245ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80245d0:	4b36      	ldr	r3, [pc, #216]	; (80246ac <PlayWavFile+0x2d0>)
 80245d2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80245d6:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 80245d8:	4834      	ldr	r0, [pc, #208]	; (80246ac <PlayWavFile+0x2d0>)
 80245da:	f7e5 f9a9 	bl	8009930 <HAL_TIM_Base_Start_IT>
					tim7_flag = 2;
 80245de:	4b32      	ldr	r3, [pc, #200]	; (80246a8 <PlayWavFile+0x2cc>)
 80245e0:	2202      	movs	r2, #2
 80245e2:	701a      	strb	r2, [r3, #0]
				if(tim7_flag == 1) {
 80245e4:	e01d      	b.n	8024622 <PlayWavFile+0x246>
				}
			}
			else {
				if(tim7_flag > 0) {
 80245e6:	4b30      	ldr	r3, [pc, #192]	; (80246a8 <PlayWavFile+0x2cc>)
 80245e8:	781b      	ldrb	r3, [r3, #0]
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	d019      	beq.n	8024622 <PlayWavFile+0x246>
					HAL_TIM_Base_Stop_IT(&htim7);
 80245ee:	482f      	ldr	r0, [pc, #188]	; (80246ac <PlayWavFile+0x2d0>)
 80245f0:	f7e5 fa2e 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80245f4:	4b2d      	ldr	r3, [pc, #180]	; (80246ac <PlayWavFile+0x2d0>)
 80245f6:	681b      	ldr	r3, [r3, #0]
 80245f8:	f06f 0201 	mvn.w	r2, #1
 80245fc:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 80245fe:	4b2b      	ldr	r3, [pc, #172]	; (80246ac <PlayWavFile+0x2d0>)
 8024600:	681b      	ldr	r3, [r3, #0]
 8024602:	2200      	movs	r2, #0
 8024604:	625a      	str	r2, [r3, #36]	; 0x24
					tim7_flag = 0;
 8024606:	4b28      	ldr	r3, [pc, #160]	; (80246a8 <PlayWavFile+0x2cc>)
 8024608:	2200      	movs	r2, #0
 802460a:	701a      	strb	r2, [r3, #0]
					if(display.timemode == 0) {
 802460c:	4b28      	ldr	r3, [pc, #160]	; (80246b0 <PlayWavFile+0x2d4>)
 802460e:	781b      	ldrb	r3, [r3, #0]
 8024610:	2b00      	cmp	r3, #0
 8024612:	d103      	bne.n	802461c <PlayWavFile+0x240>
						display.trackbarmode = 0;
 8024614:	4b26      	ldr	r3, [pc, #152]	; (80246b0 <PlayWavFile+0x2d4>)
 8024616:	2200      	movs	r2, #0
 8024618:	711a      	strb	r2, [r3, #4]
 802461a:	e002      	b.n	8024622 <PlayWavFile+0x246>
					}
					else {
						display.trackbarmode = 1;
 802461c:	4b24      	ldr	r3, [pc, #144]	; (80246b0 <PlayWavFile+0x2d4>)
 802461e:	2201      	movs	r2, #1
 8024620:	711a      	strb	r2, [r3, #4]
	while((!bOutOfData) && (file_pos_wide < rekordbox.spectrum_size)) {
 8024622:	4b17      	ldr	r3, [pc, #92]	; (8024680 <PlayWavFile+0x2a4>)
 8024624:	681b      	ldr	r3, [r3, #0]
 8024626:	2b00      	cmp	r3, #0
 8024628:	d109      	bne.n	802463e <PlayWavFile+0x262>
 802462a:	4b1b      	ldr	r3, [pc, #108]	; (8024698 <PlayWavFile+0x2bc>)
 802462c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024630:	f8d3 244c 	ldr.w	r2, [r3, #1100]	; 0x44c
 8024634:	4b1f      	ldr	r3, [pc, #124]	; (80246b4 <PlayWavFile+0x2d8>)
 8024636:	681b      	ldr	r3, [r3, #0]
 8024638:	429a      	cmp	r2, r3
 802463a:	f63f af55 	bhi.w	80244e8 <PlayWavFile+0x10c>
					}
				}
			}
		}
	}
	BSP_AUDIO_OUT_SetVolume(0);
 802463e:	2000      	movs	r0, #0
 8024640:	f7fc fb48 	bl	8020cd4 <BSP_AUDIO_OUT_SetVolume>
	wavtagsize = 0;
 8024644:	4b0c      	ldr	r3, [pc, #48]	; (8024678 <PlayWavFile+0x29c>)
 8024646:	2200      	movs	r2, #0
 8024648:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim7);
 802464a:	4818      	ldr	r0, [pc, #96]	; (80246ac <PlayWavFile+0x2d0>)
 802464c:	f7e5 fa00 	bl	8009a50 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8024650:	4b16      	ldr	r3, [pc, #88]	; (80246ac <PlayWavFile+0x2d0>)
 8024652:	681b      	ldr	r3, [r3, #0]
 8024654:	f06f 0201 	mvn.w	r2, #1
 8024658:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 802465a:	4b14      	ldr	r3, [pc, #80]	; (80246ac <PlayWavFile+0x2d0>)
 802465c:	681b      	ldr	r3, [r3, #0]
 802465e:	2200      	movs	r2, #0
 8024660:	625a      	str	r2, [r3, #36]	; 0x24
	tim7_flag = 0;
 8024662:	4b11      	ldr	r3, [pc, #68]	; (80246a8 <PlayWavFile+0x2cc>)
 8024664:	2200      	movs	r2, #0
 8024666:	701a      	strb	r2, [r3, #0]
	if(display.timemode == 0) display.trackbarmode = 0;
 8024668:	4b11      	ldr	r3, [pc, #68]	; (80246b0 <PlayWavFile+0x2d4>)
 802466a:	781b      	ldrb	r3, [r3, #0]
 802466c:	2b00      	cmp	r3, #0
 802466e:	d123      	bne.n	80246b8 <PlayWavFile+0x2dc>
 8024670:	4b0f      	ldr	r3, [pc, #60]	; (80246b0 <PlayWavFile+0x2d4>)
 8024672:	2200      	movs	r2, #0
 8024674:	711a      	strb	r2, [r3, #4]
	else display.trackbarmode = 1;
}
 8024676:	e022      	b.n	80246be <PlayWavFile+0x2e2>
 8024678:	20018e5c 	.word	0x20018e5c
 802467c:	2000e71c 	.word	0x2000e71c
 8024680:	2000f728 	.word	0x2000f728
 8024684:	20018e60 	.word	0x20018e60
 8024688:	2000e6e0 	.word	0x2000e6e0
 802468c:	20017f08 	.word	0x20017f08
 8024690:	20000f10 	.word	0x20000f10
 8024694:	20000058 	.word	0x20000058
 8024698:	20015170 	.word	0x20015170
 802469c:	200182b0 	.word	0x200182b0
 80246a0:	2000e6d7 	.word	0x2000e6d7
 80246a4:	2000e6d6 	.word	0x2000e6d6
 80246a8:	2000e6d8 	.word	0x2000e6d8
 80246ac:	20018270 	.word	0x20018270
 80246b0:	200008fc 	.word	0x200008fc
 80246b4:	20001e00 	.word	0x20001e00
	else display.trackbarmode = 1;
 80246b8:	4b03      	ldr	r3, [pc, #12]	; (80246c8 <PlayWavFile+0x2ec>)
 80246ba:	2201      	movs	r2, #1
 80246bc:	711a      	strb	r2, [r3, #4]
}
 80246be:	bf00      	nop
 80246c0:	3708      	adds	r7, #8
 80246c2:	46bd      	mov	sp, r7
 80246c4:	bd80      	pop	{r7, pc}
 80246c6:	bf00      	nop
 80246c8:	200008fc 	.word	0x200008fc

080246cc <GoToPosition>:

void GoToPosition(uint32_t position) {
 80246cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80246d0:	ed2d 8b02 	vpush	{d8}
 80246d4:	b094      	sub	sp, #80	; 0x50
 80246d6:	af00      	add	r7, sp, #0
 80246d8:	6478      	str	r0, [r7, #68]	; 0x44
	BSP_AUDIO_OUT_Pause();
 80246da:	f7fc fac5 	bl	8020c68 <BSP_AUDIO_OUT_Pause>
	file_pos_wide = position;
 80246de:	4a75      	ldr	r2, [pc, #468]	; (80248b4 <GoToPosition+0x1e8>)
 80246e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80246e2:	6013      	str	r3, [r2, #0]
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 80246e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80246e6:	ee07 3a90 	vmov	s15, r3
 80246ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80246ee:	4b72      	ldr	r3, [pc, #456]	; (80248b8 <GoToPosition+0x1ec>)
 80246f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80246f4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80246f8:	ee07 3a90 	vmov	s15, r3
 80246fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			rekordbox.lowp_spectrum_size;
 8024704:	4b6c      	ldr	r3, [pc, #432]	; (80248b8 <GoToPosition+0x1ec>)
 8024706:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802470a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 802470e:	ee07 3a90 	vmov	s15, r3
 8024712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024716:	ee67 7a27 	vmul.f32	s15, s14, s15
 802471a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802471e:	ee17 2a90 	vmov	r2, s15
 8024722:	4b66      	ldr	r3, [pc, #408]	; (80248bc <GoToPosition+0x1f0>)
 8024724:	601a      	str	r2, [r3, #0]
	if(BufferCtl.filetype == 0)	{
 8024726:	4b66      	ldr	r3, [pc, #408]	; (80248c0 <GoToPosition+0x1f4>)
 8024728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802472c:	7a1b      	ldrb	r3, [r3, #8]
 802472e:	2b00      	cmp	r3, #0
 8024730:	d16e      	bne.n	8024810 <GoToPosition+0x144>
		uint16_t i = 0;
 8024732:	2300      	movs	r3, #0
 8024734:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		do {
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8024738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802473a:	ee07 3a90 	vmov	s15, r3
 802473e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8024742:	4b60      	ldr	r3, [pc, #384]	; (80248c4 <GoToPosition+0x1f8>)
 8024744:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8024748:	4b5f      	ldr	r3, [pc, #380]	; (80248c8 <GoToPosition+0x1fc>)
 802474a:	681b      	ldr	r3, [r3, #0]
 802474c:	2200      	movs	r2, #0
 802474e:	63bb      	str	r3, [r7, #56]	; 0x38
 8024750:	63fa      	str	r2, [r7, #60]	; 0x3c
 8024752:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8024756:	4623      	mov	r3, r4
 8024758:	1ac3      	subs	r3, r0, r3
 802475a:	633b      	str	r3, [r7, #48]	; 0x30
 802475c:	462b      	mov	r3, r5
 802475e:	eb61 0303 	sbc.w	r3, r1, r3
 8024762:	637b      	str	r3, [r7, #52]	; 0x34
 8024764:	4b59      	ldr	r3, [pc, #356]	; (80248cc <GoToPosition+0x200>)
 8024766:	681b      	ldr	r3, [r3, #0]
 8024768:	2200      	movs	r2, #0
 802476a:	62bb      	str	r3, [r7, #40]	; 0x28
 802476c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802476e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8024772:	4623      	mov	r3, r4
 8024774:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8024778:	4602      	mov	r2, r0
 802477a:	1a9b      	subs	r3, r3, r2
 802477c:	623b      	str	r3, [r7, #32]
 802477e:	462b      	mov	r3, r5
 8024780:	460a      	mov	r2, r1
 8024782:	eb63 0302 	sbc.w	r3, r3, r2
 8024786:	627b      	str	r3, [r7, #36]	; 0x24
 8024788:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802478c:	f7dc fb2e 	bl	8000dec <__aeabi_ul2f>
 8024790:	ee07 0a90 	vmov	s15, r0
 8024794:	ee68 6a27 	vmul.f32	s13, s16, s15
				/rekordbox.spectrum_size + i));
 8024798:	4b47      	ldr	r3, [pc, #284]	; (80248b8 <GoToPosition+0x1ec>)
 802479a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802479e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80247a2:	ee07 3a90 	vmov	s15, r3
 80247a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80247aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80247ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80247b2:	ee07 3a90 	vmov	s15, r3
 80247b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80247ba:	ee77 7a27 	vadd.f32	s15, s14, s15
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 80247be:	ee17 0a90 	vmov	r0, s15
 80247c2:	f7dc fb71 	bl	8000ea8 <__aeabi_f2ulz>
 80247c6:	4602      	mov	r2, r0
 80247c8:	460b      	mov	r3, r1
 80247ca:	483e      	ldr	r0, [pc, #248]	; (80248c4 <GoToPosition+0x1f8>)
 80247cc:	f7ec fb35 	bl	8010e3a <f_lseek>
			i++;
 80247d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80247d4:	3301      	adds	r3, #1
 80247d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}
		while(((UINT)BufferCtl.buff & 1) != (f_tell(&MyFile) & 1));
 80247da:	4b3a      	ldr	r3, [pc, #232]	; (80248c4 <GoToPosition+0x1f8>)
 80247dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80247e0:	4837      	ldr	r0, [pc, #220]	; (80248c0 <GoToPosition+0x1f4>)
 80247e2:	2100      	movs	r1, #0
 80247e4:	61b8      	str	r0, [r7, #24]
 80247e6:	61f9      	str	r1, [r7, #28]
 80247e8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80247ec:	4621      	mov	r1, r4
 80247ee:	4051      	eors	r1, r2
 80247f0:	6139      	str	r1, [r7, #16]
 80247f2:	4629      	mov	r1, r5
 80247f4:	404b      	eors	r3, r1
 80247f6:	617b      	str	r3, [r7, #20]
 80247f8:	693b      	ldr	r3, [r7, #16]
 80247fa:	f003 0301 	and.w	r3, r3, #1
 80247fe:	60bb      	str	r3, [r7, #8]
 8024800:	2300      	movs	r3, #0
 8024802:	60fb      	str	r3, [r7, #12]
 8024804:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8024808:	460b      	mov	r3, r1
 802480a:	4313      	orrs	r3, r2
 802480c:	d194      	bne.n	8024738 <GoToPosition+0x6c>
 802480e:	e037      	b.n	8024880 <GoToPosition+0x1b4>
	}
	else {
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8024810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024812:	ee07 3a90 	vmov	s15, r3
 8024816:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 802481a:	4b2a      	ldr	r3, [pc, #168]	; (80248c4 <GoToPosition+0x1f8>)
 802481c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8024820:	4929      	ldr	r1, [pc, #164]	; (80248c8 <GoToPosition+0x1fc>)
 8024822:	6809      	ldr	r1, [r1, #0]
 8024824:	2000      	movs	r0, #0
 8024826:	468a      	mov	sl, r1
 8024828:	4683      	mov	fp, r0
 802482a:	ebb2 040a 	subs.w	r4, r2, sl
 802482e:	eb63 050b 	sbc.w	r5, r3, fp
 8024832:	4b26      	ldr	r3, [pc, #152]	; (80248cc <GoToPosition+0x200>)
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	2200      	movs	r2, #0
 8024838:	4698      	mov	r8, r3
 802483a:	4691      	mov	r9, r2
 802483c:	ebb4 0308 	subs.w	r3, r4, r8
 8024840:	603b      	str	r3, [r7, #0]
 8024842:	eb65 0309 	sbc.w	r3, r5, r9
 8024846:	607b      	str	r3, [r7, #4]
 8024848:	e9d7 0100 	ldrd	r0, r1, [r7]
 802484c:	f7dc face 	bl	8000dec <__aeabi_ul2f>
 8024850:	ee07 0a90 	vmov	s15, r0
 8024854:	ee28 7a27 	vmul.f32	s14, s16, s15
						/rekordbox.spectrum_size));
 8024858:	4b17      	ldr	r3, [pc, #92]	; (80248b8 <GoToPosition+0x1ec>)
 802485a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802485e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8024862:	ee07 3a90 	vmov	s15, r3
 8024866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802486a:	eec7 6a27 	vdiv.f32	s13, s14, s15
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 802486e:	ee16 0a90 	vmov	r0, s13
 8024872:	f7dc fb19 	bl	8000ea8 <__aeabi_f2ulz>
 8024876:	4602      	mov	r2, r0
 8024878:	460b      	mov	r3, r1
 802487a:	4812      	ldr	r0, [pc, #72]	; (80248c4 <GoToPosition+0x1f8>)
 802487c:	f7ec fadd 	bl	8010e3a <f_lseek>
	}
	if(BufferCtl.filetype == 1) {
 8024880:	4b0f      	ldr	r3, [pc, #60]	; (80248c0 <GoToPosition+0x1f4>)
 8024882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024886:	7a1b      	ldrb	r3, [r3, #8]
 8024888:	2b01      	cmp	r3, #1
 802488a:	d10b      	bne.n	80248a4 <GoToPosition+0x1d8>
		unInDataLeft = 0;
 802488c:	4b10      	ldr	r3, [pc, #64]	; (80248d0 <GoToPosition+0x204>)
 802488e:	2200      	movs	r2, #0
 8024890:	601a      	str	r2, [r3, #0]
		unDmaBufferSpace = 0;
 8024892:	4b10      	ldr	r3, [pc, #64]	; (80248d4 <GoToPosition+0x208>)
 8024894:	2200      	movs	r2, #0
 8024896:	601a      	str	r2, [r3, #0]
		unFramesDecoded = 0;
 8024898:	4b0f      	ldr	r3, [pc, #60]	; (80248d8 <GoToPosition+0x20c>)
 802489a:	2200      	movs	r2, #0
 802489c:	601a      	str	r2, [r3, #0]
		unDmaBufMode = 0;
 802489e:	4b0f      	ldr	r3, [pc, #60]	; (80248dc <GoToPosition+0x210>)
 80248a0:	2200      	movs	r2, #0
 80248a2:	601a      	str	r2, [r3, #0]
	}
}
 80248a4:	bf00      	nop
 80248a6:	3750      	adds	r7, #80	; 0x50
 80248a8:	46bd      	mov	sp, r7
 80248aa:	ecbd 8b02 	vpop	{d8}
 80248ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80248b2:	bf00      	nop
 80248b4:	20001e00 	.word	0x20001e00
 80248b8:	20015170 	.word	0x20015170
 80248bc:	20001dfc 	.word	0x20001dfc
 80248c0:	2000e71c 	.word	0x2000e71c
 80248c4:	20000f10 	.word	0x20000f10
 80248c8:	2000f730 	.word	0x2000f730
 80248cc:	20018e5c 	.word	0x20018e5c
 80248d0:	20015158 	.word	0x20015158
 80248d4:	2001515c 	.word	0x2001515c
 80248d8:	20015160 	.word	0x20015160
 80248dc:	2000f72c 	.word	0x2000f72c

080248e0 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80248e0:	b580      	push	{r7, lr}
 80248e2:	b088      	sub	sp, #32
 80248e4:	af00      	add	r7, sp, #0
 80248e6:	607b      	str	r3, [r7, #4]
 80248e8:	4603      	mov	r3, r0
 80248ea:	81fb      	strh	r3, [r7, #14]
 80248ec:	460b      	mov	r3, r1
 80248ee:	81bb      	strh	r3, [r7, #12]
 80248f0:	4613      	mov	r3, r2
 80248f2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80248f4:	2300      	movs	r3, #0
 80248f6:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80248f8:	89bb      	ldrh	r3, [r7, #12]
 80248fa:	b2db      	uxtb	r3, r3
 80248fc:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80248fe:	89bb      	ldrh	r3, [r7, #12]
 8024900:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8024904:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8024906:	2300      	movs	r3, #0
 8024908:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 802490a:	f7fc fba3 	bl	8021054 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 802490e:	89fb      	ldrh	r3, [r7, #14]
 8024910:	b2db      	uxtb	r3, r3
 8024912:	2203      	movs	r2, #3
 8024914:	f44f 7181 	mov.w	r1, #258	; 0x102
 8024918:	4618      	mov	r0, r3
 802491a:	f001 fa89 	bl	8025e30 <CODEC_IO_Write>
 802491e:	4603      	mov	r3, r0
 8024920:	461a      	mov	r2, r3
 8024922:	69fb      	ldr	r3, [r7, #28]
 8024924:	4413      	add	r3, r2
 8024926:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8024928:	89fb      	ldrh	r3, [r7, #14]
 802492a:	b2db      	uxtb	r3, r3
 802492c:	2200      	movs	r2, #0
 802492e:	f640 0117 	movw	r1, #2071	; 0x817
 8024932:	4618      	mov	r0, r3
 8024934:	f001 fa7c 	bl	8025e30 <CODEC_IO_Write>
 8024938:	4603      	mov	r3, r0
 802493a:	461a      	mov	r2, r3
 802493c:	69fb      	ldr	r3, [r7, #28]
 802493e:	4413      	add	r3, r2
 8024940:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8024942:	89fb      	ldrh	r3, [r7, #14]
 8024944:	b2db      	uxtb	r3, r3
 8024946:	2200      	movs	r2, #0
 8024948:	f44f 7181 	mov.w	r1, #258	; 0x102
 802494c:	4618      	mov	r0, r3
 802494e:	f001 fa6f 	bl	8025e30 <CODEC_IO_Write>
 8024952:	4603      	mov	r3, r0
 8024954:	461a      	mov	r2, r3
 8024956:	69fb      	ldr	r3, [r7, #28]
 8024958:	4413      	add	r3, r2
 802495a:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 802495c:	89fb      	ldrh	r3, [r7, #14]
 802495e:	b2db      	uxtb	r3, r3
 8024960:	226c      	movs	r2, #108	; 0x6c
 8024962:	2139      	movs	r1, #57	; 0x39
 8024964:	4618      	mov	r0, r3
 8024966:	f001 fa63 	bl	8025e30 <CODEC_IO_Write>
 802496a:	4603      	mov	r3, r0
 802496c:	461a      	mov	r2, r3
 802496e:	69fb      	ldr	r3, [r7, #28]
 8024970:	4413      	add	r3, r2
 8024972:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8024974:	8afb      	ldrh	r3, [r7, #22]
 8024976:	2b00      	cmp	r3, #0
 8024978:	d00c      	beq.n	8024994 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 802497a:	89fb      	ldrh	r3, [r7, #14]
 802497c:	b2db      	uxtb	r3, r3
 802497e:	2213      	movs	r2, #19
 8024980:	2101      	movs	r1, #1
 8024982:	4618      	mov	r0, r3
 8024984:	f001 fa54 	bl	8025e30 <CODEC_IO_Write>
 8024988:	4603      	mov	r3, r0
 802498a:	461a      	mov	r2, r3
 802498c:	69fb      	ldr	r3, [r7, #28]
 802498e:	4413      	add	r3, r2
 8024990:	61fb      	str	r3, [r7, #28]
 8024992:	e00b      	b.n	80249ac <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8024994:	89fb      	ldrh	r3, [r7, #14]
 8024996:	b2db      	uxtb	r3, r3
 8024998:	2203      	movs	r2, #3
 802499a:	2101      	movs	r1, #1
 802499c:	4618      	mov	r0, r3
 802499e:	f001 fa47 	bl	8025e30 <CODEC_IO_Write>
 80249a2:	4603      	mov	r3, r0
 80249a4:	461a      	mov	r2, r3
 80249a6:	69fb      	ldr	r3, [r7, #28]
 80249a8:	4413      	add	r3, r2
 80249aa:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80249ac:	2032      	movs	r0, #50	; 0x32
 80249ae:	f7fc fbc1 	bl	8021134 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80249b2:	8b3b      	ldrh	r3, [r7, #24]
 80249b4:	2b00      	cmp	r3, #0
 80249b6:	f000 815f 	beq.w	8024c78 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80249ba:	4bae      	ldr	r3, [pc, #696]	; (8024c74 <wm8994_Init+0x394>)
 80249bc:	2201      	movs	r2, #1
 80249be:	601a      	str	r2, [r3, #0]
    switch (output_device)
 80249c0:	8b3b      	ldrh	r3, [r7, #24]
 80249c2:	2b03      	cmp	r3, #3
 80249c4:	f000 808c 	beq.w	8024ae0 <wm8994_Init+0x200>
 80249c8:	2b03      	cmp	r3, #3
 80249ca:	f300 8111 	bgt.w	8024bf0 <wm8994_Init+0x310>
 80249ce:	2b01      	cmp	r3, #1
 80249d0:	d002      	beq.n	80249d8 <wm8994_Init+0xf8>
 80249d2:	2b02      	cmp	r3, #2
 80249d4:	d042      	beq.n	8024a5c <wm8994_Init+0x17c>
 80249d6:	e10b      	b.n	8024bf0 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80249d8:	89fb      	ldrh	r3, [r7, #14]
 80249da:	b2db      	uxtb	r3, r3
 80249dc:	f640 420c 	movw	r2, #3084	; 0xc0c
 80249e0:	2105      	movs	r1, #5
 80249e2:	4618      	mov	r0, r3
 80249e4:	f001 fa24 	bl	8025e30 <CODEC_IO_Write>
 80249e8:	4603      	mov	r3, r0
 80249ea:	461a      	mov	r2, r3
 80249ec:	69fb      	ldr	r3, [r7, #28]
 80249ee:	4413      	add	r3, r2
 80249f0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80249f2:	89fb      	ldrh	r3, [r7, #14]
 80249f4:	b2db      	uxtb	r3, r3
 80249f6:	2200      	movs	r2, #0
 80249f8:	f240 6101 	movw	r1, #1537	; 0x601
 80249fc:	4618      	mov	r0, r3
 80249fe:	f001 fa17 	bl	8025e30 <CODEC_IO_Write>
 8024a02:	4603      	mov	r3, r0
 8024a04:	461a      	mov	r2, r3
 8024a06:	69fb      	ldr	r3, [r7, #28]
 8024a08:	4413      	add	r3, r2
 8024a0a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8024a0c:	89fb      	ldrh	r3, [r7, #14]
 8024a0e:	b2db      	uxtb	r3, r3
 8024a10:	2200      	movs	r2, #0
 8024a12:	f240 6102 	movw	r1, #1538	; 0x602
 8024a16:	4618      	mov	r0, r3
 8024a18:	f001 fa0a 	bl	8025e30 <CODEC_IO_Write>
 8024a1c:	4603      	mov	r3, r0
 8024a1e:	461a      	mov	r2, r3
 8024a20:	69fb      	ldr	r3, [r7, #28]
 8024a22:	4413      	add	r3, r2
 8024a24:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8024a26:	89fb      	ldrh	r3, [r7, #14]
 8024a28:	b2db      	uxtb	r3, r3
 8024a2a:	2202      	movs	r2, #2
 8024a2c:	f240 6104 	movw	r1, #1540	; 0x604
 8024a30:	4618      	mov	r0, r3
 8024a32:	f001 f9fd 	bl	8025e30 <CODEC_IO_Write>
 8024a36:	4603      	mov	r3, r0
 8024a38:	461a      	mov	r2, r3
 8024a3a:	69fb      	ldr	r3, [r7, #28]
 8024a3c:	4413      	add	r3, r2
 8024a3e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8024a40:	89fb      	ldrh	r3, [r7, #14]
 8024a42:	b2db      	uxtb	r3, r3
 8024a44:	2202      	movs	r2, #2
 8024a46:	f240 6105 	movw	r1, #1541	; 0x605
 8024a4a:	4618      	mov	r0, r3
 8024a4c:	f001 f9f0 	bl	8025e30 <CODEC_IO_Write>
 8024a50:	4603      	mov	r3, r0
 8024a52:	461a      	mov	r2, r3
 8024a54:	69fb      	ldr	r3, [r7, #28]
 8024a56:	4413      	add	r3, r2
 8024a58:	61fb      	str	r3, [r7, #28]
      break;
 8024a5a:	e110      	b.n	8024c7e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8024a5c:	89fb      	ldrh	r3, [r7, #14]
 8024a5e:	b2db      	uxtb	r3, r3
 8024a60:	f240 3203 	movw	r2, #771	; 0x303
 8024a64:	2105      	movs	r1, #5
 8024a66:	4618      	mov	r0, r3
 8024a68:	f001 f9e2 	bl	8025e30 <CODEC_IO_Write>
 8024a6c:	4603      	mov	r3, r0
 8024a6e:	461a      	mov	r2, r3
 8024a70:	69fb      	ldr	r3, [r7, #28]
 8024a72:	4413      	add	r3, r2
 8024a74:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8024a76:	89fb      	ldrh	r3, [r7, #14]
 8024a78:	b2db      	uxtb	r3, r3
 8024a7a:	2201      	movs	r2, #1
 8024a7c:	f240 6101 	movw	r1, #1537	; 0x601
 8024a80:	4618      	mov	r0, r3
 8024a82:	f001 f9d5 	bl	8025e30 <CODEC_IO_Write>
 8024a86:	4603      	mov	r3, r0
 8024a88:	461a      	mov	r2, r3
 8024a8a:	69fb      	ldr	r3, [r7, #28]
 8024a8c:	4413      	add	r3, r2
 8024a8e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8024a90:	89fb      	ldrh	r3, [r7, #14]
 8024a92:	b2db      	uxtb	r3, r3
 8024a94:	2201      	movs	r2, #1
 8024a96:	f240 6102 	movw	r1, #1538	; 0x602
 8024a9a:	4618      	mov	r0, r3
 8024a9c:	f001 f9c8 	bl	8025e30 <CODEC_IO_Write>
 8024aa0:	4603      	mov	r3, r0
 8024aa2:	461a      	mov	r2, r3
 8024aa4:	69fb      	ldr	r3, [r7, #28]
 8024aa6:	4413      	add	r3, r2
 8024aa8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8024aaa:	89fb      	ldrh	r3, [r7, #14]
 8024aac:	b2db      	uxtb	r3, r3
 8024aae:	2200      	movs	r2, #0
 8024ab0:	f240 6104 	movw	r1, #1540	; 0x604
 8024ab4:	4618      	mov	r0, r3
 8024ab6:	f001 f9bb 	bl	8025e30 <CODEC_IO_Write>
 8024aba:	4603      	mov	r3, r0
 8024abc:	461a      	mov	r2, r3
 8024abe:	69fb      	ldr	r3, [r7, #28]
 8024ac0:	4413      	add	r3, r2
 8024ac2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8024ac4:	89fb      	ldrh	r3, [r7, #14]
 8024ac6:	b2db      	uxtb	r3, r3
 8024ac8:	2200      	movs	r2, #0
 8024aca:	f240 6105 	movw	r1, #1541	; 0x605
 8024ace:	4618      	mov	r0, r3
 8024ad0:	f001 f9ae 	bl	8025e30 <CODEC_IO_Write>
 8024ad4:	4603      	mov	r3, r0
 8024ad6:	461a      	mov	r2, r3
 8024ad8:	69fb      	ldr	r3, [r7, #28]
 8024ada:	4413      	add	r3, r2
 8024adc:	61fb      	str	r3, [r7, #28]
      break;
 8024ade:	e0ce      	b.n	8024c7e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8024ae0:	8afb      	ldrh	r3, [r7, #22]
 8024ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8024ae6:	d141      	bne.n	8024b6c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8024ae8:	89fb      	ldrh	r3, [r7, #14]
 8024aea:	b2db      	uxtb	r3, r3
 8024aec:	f640 720f 	movw	r2, #3855	; 0xf0f
 8024af0:	2105      	movs	r1, #5
 8024af2:	4618      	mov	r0, r3
 8024af4:	f001 f99c 	bl	8025e30 <CODEC_IO_Write>
 8024af8:	4603      	mov	r3, r0
 8024afa:	461a      	mov	r2, r3
 8024afc:	69fb      	ldr	r3, [r7, #28]
 8024afe:	4413      	add	r3, r2
 8024b00:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8024b02:	89fb      	ldrh	r3, [r7, #14]
 8024b04:	b2db      	uxtb	r3, r3
 8024b06:	2203      	movs	r2, #3
 8024b08:	f240 6101 	movw	r1, #1537	; 0x601
 8024b0c:	4618      	mov	r0, r3
 8024b0e:	f001 f98f 	bl	8025e30 <CODEC_IO_Write>
 8024b12:	4603      	mov	r3, r0
 8024b14:	461a      	mov	r2, r3
 8024b16:	69fb      	ldr	r3, [r7, #28]
 8024b18:	4413      	add	r3, r2
 8024b1a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8024b1c:	89fb      	ldrh	r3, [r7, #14]
 8024b1e:	b2db      	uxtb	r3, r3
 8024b20:	2203      	movs	r2, #3
 8024b22:	f240 6102 	movw	r1, #1538	; 0x602
 8024b26:	4618      	mov	r0, r3
 8024b28:	f001 f982 	bl	8025e30 <CODEC_IO_Write>
 8024b2c:	4603      	mov	r3, r0
 8024b2e:	461a      	mov	r2, r3
 8024b30:	69fb      	ldr	r3, [r7, #28]
 8024b32:	4413      	add	r3, r2
 8024b34:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8024b36:	89fb      	ldrh	r3, [r7, #14]
 8024b38:	b2db      	uxtb	r3, r3
 8024b3a:	2203      	movs	r2, #3
 8024b3c:	f240 6104 	movw	r1, #1540	; 0x604
 8024b40:	4618      	mov	r0, r3
 8024b42:	f001 f975 	bl	8025e30 <CODEC_IO_Write>
 8024b46:	4603      	mov	r3, r0
 8024b48:	461a      	mov	r2, r3
 8024b4a:	69fb      	ldr	r3, [r7, #28]
 8024b4c:	4413      	add	r3, r2
 8024b4e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8024b50:	89fb      	ldrh	r3, [r7, #14]
 8024b52:	b2db      	uxtb	r3, r3
 8024b54:	2203      	movs	r2, #3
 8024b56:	f240 6105 	movw	r1, #1541	; 0x605
 8024b5a:	4618      	mov	r0, r3
 8024b5c:	f001 f968 	bl	8025e30 <CODEC_IO_Write>
 8024b60:	4603      	mov	r3, r0
 8024b62:	461a      	mov	r2, r3
 8024b64:	69fb      	ldr	r3, [r7, #28]
 8024b66:	4413      	add	r3, r2
 8024b68:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8024b6a:	e088      	b.n	8024c7e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8024b6c:	89fb      	ldrh	r3, [r7, #14]
 8024b6e:	b2db      	uxtb	r3, r3
 8024b70:	f640 720f 	movw	r2, #3855	; 0xf0f
 8024b74:	2105      	movs	r1, #5
 8024b76:	4618      	mov	r0, r3
 8024b78:	f001 f95a 	bl	8025e30 <CODEC_IO_Write>
 8024b7c:	4603      	mov	r3, r0
 8024b7e:	461a      	mov	r2, r3
 8024b80:	69fb      	ldr	r3, [r7, #28]
 8024b82:	4413      	add	r3, r2
 8024b84:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8024b86:	89fb      	ldrh	r3, [r7, #14]
 8024b88:	b2db      	uxtb	r3, r3
 8024b8a:	2201      	movs	r2, #1
 8024b8c:	f240 6101 	movw	r1, #1537	; 0x601
 8024b90:	4618      	mov	r0, r3
 8024b92:	f001 f94d 	bl	8025e30 <CODEC_IO_Write>
 8024b96:	4603      	mov	r3, r0
 8024b98:	461a      	mov	r2, r3
 8024b9a:	69fb      	ldr	r3, [r7, #28]
 8024b9c:	4413      	add	r3, r2
 8024b9e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8024ba0:	89fb      	ldrh	r3, [r7, #14]
 8024ba2:	b2db      	uxtb	r3, r3
 8024ba4:	2201      	movs	r2, #1
 8024ba6:	f240 6102 	movw	r1, #1538	; 0x602
 8024baa:	4618      	mov	r0, r3
 8024bac:	f001 f940 	bl	8025e30 <CODEC_IO_Write>
 8024bb0:	4603      	mov	r3, r0
 8024bb2:	461a      	mov	r2, r3
 8024bb4:	69fb      	ldr	r3, [r7, #28]
 8024bb6:	4413      	add	r3, r2
 8024bb8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8024bba:	89fb      	ldrh	r3, [r7, #14]
 8024bbc:	b2db      	uxtb	r3, r3
 8024bbe:	2202      	movs	r2, #2
 8024bc0:	f240 6104 	movw	r1, #1540	; 0x604
 8024bc4:	4618      	mov	r0, r3
 8024bc6:	f001 f933 	bl	8025e30 <CODEC_IO_Write>
 8024bca:	4603      	mov	r3, r0
 8024bcc:	461a      	mov	r2, r3
 8024bce:	69fb      	ldr	r3, [r7, #28]
 8024bd0:	4413      	add	r3, r2
 8024bd2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8024bd4:	89fb      	ldrh	r3, [r7, #14]
 8024bd6:	b2db      	uxtb	r3, r3
 8024bd8:	2202      	movs	r2, #2
 8024bda:	f240 6105 	movw	r1, #1541	; 0x605
 8024bde:	4618      	mov	r0, r3
 8024be0:	f001 f926 	bl	8025e30 <CODEC_IO_Write>
 8024be4:	4603      	mov	r3, r0
 8024be6:	461a      	mov	r2, r3
 8024be8:	69fb      	ldr	r3, [r7, #28]
 8024bea:	4413      	add	r3, r2
 8024bec:	61fb      	str	r3, [r7, #28]
      break;
 8024bee:	e046      	b.n	8024c7e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8024bf0:	89fb      	ldrh	r3, [r7, #14]
 8024bf2:	b2db      	uxtb	r3, r3
 8024bf4:	f240 3203 	movw	r2, #771	; 0x303
 8024bf8:	2105      	movs	r1, #5
 8024bfa:	4618      	mov	r0, r3
 8024bfc:	f001 f918 	bl	8025e30 <CODEC_IO_Write>
 8024c00:	4603      	mov	r3, r0
 8024c02:	461a      	mov	r2, r3
 8024c04:	69fb      	ldr	r3, [r7, #28]
 8024c06:	4413      	add	r3, r2
 8024c08:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8024c0a:	89fb      	ldrh	r3, [r7, #14]
 8024c0c:	b2db      	uxtb	r3, r3
 8024c0e:	2201      	movs	r2, #1
 8024c10:	f240 6101 	movw	r1, #1537	; 0x601
 8024c14:	4618      	mov	r0, r3
 8024c16:	f001 f90b 	bl	8025e30 <CODEC_IO_Write>
 8024c1a:	4603      	mov	r3, r0
 8024c1c:	461a      	mov	r2, r3
 8024c1e:	69fb      	ldr	r3, [r7, #28]
 8024c20:	4413      	add	r3, r2
 8024c22:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8024c24:	89fb      	ldrh	r3, [r7, #14]
 8024c26:	b2db      	uxtb	r3, r3
 8024c28:	2201      	movs	r2, #1
 8024c2a:	f240 6102 	movw	r1, #1538	; 0x602
 8024c2e:	4618      	mov	r0, r3
 8024c30:	f001 f8fe 	bl	8025e30 <CODEC_IO_Write>
 8024c34:	4603      	mov	r3, r0
 8024c36:	461a      	mov	r2, r3
 8024c38:	69fb      	ldr	r3, [r7, #28]
 8024c3a:	4413      	add	r3, r2
 8024c3c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8024c3e:	89fb      	ldrh	r3, [r7, #14]
 8024c40:	b2db      	uxtb	r3, r3
 8024c42:	2200      	movs	r2, #0
 8024c44:	f240 6104 	movw	r1, #1540	; 0x604
 8024c48:	4618      	mov	r0, r3
 8024c4a:	f001 f8f1 	bl	8025e30 <CODEC_IO_Write>
 8024c4e:	4603      	mov	r3, r0
 8024c50:	461a      	mov	r2, r3
 8024c52:	69fb      	ldr	r3, [r7, #28]
 8024c54:	4413      	add	r3, r2
 8024c56:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8024c58:	89fb      	ldrh	r3, [r7, #14]
 8024c5a:	b2db      	uxtb	r3, r3
 8024c5c:	2200      	movs	r2, #0
 8024c5e:	f240 6105 	movw	r1, #1541	; 0x605
 8024c62:	4618      	mov	r0, r3
 8024c64:	f001 f8e4 	bl	8025e30 <CODEC_IO_Write>
 8024c68:	4603      	mov	r3, r0
 8024c6a:	461a      	mov	r2, r3
 8024c6c:	69fb      	ldr	r3, [r7, #28]
 8024c6e:	4413      	add	r3, r2
 8024c70:	61fb      	str	r3, [r7, #28]
      break;
 8024c72:	e004      	b.n	8024c7e <wm8994_Init+0x39e>
 8024c74:	20018e8c 	.word	0x20018e8c
    }
  }
  else
  {
    outputEnabled = 0;
 8024c78:	4b99      	ldr	r3, [pc, #612]	; (8024ee0 <wm8994_Init+0x600>)
 8024c7a:	2200      	movs	r2, #0
 8024c7c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8024c7e:	8afb      	ldrh	r3, [r7, #22]
 8024c80:	2b00      	cmp	r3, #0
 8024c82:	f000 81ab 	beq.w	8024fdc <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8024c86:	4b97      	ldr	r3, [pc, #604]	; (8024ee4 <wm8994_Init+0x604>)
 8024c88:	2201      	movs	r2, #1
 8024c8a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8024c8c:	8afb      	ldrh	r3, [r7, #22]
 8024c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8024c92:	f000 8129 	beq.w	8024ee8 <wm8994_Init+0x608>
 8024c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8024c9a:	f300 819b 	bgt.w	8024fd4 <wm8994_Init+0x6f4>
 8024c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8024ca2:	d05a      	beq.n	8024d5a <wm8994_Init+0x47a>
 8024ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8024ca8:	f300 8194 	bgt.w	8024fd4 <wm8994_Init+0x6f4>
 8024cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024cb0:	f000 80c6 	beq.w	8024e40 <wm8994_Init+0x560>
 8024cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024cb8:	f040 818c 	bne.w	8024fd4 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8024cbc:	89fb      	ldrh	r3, [r7, #14]
 8024cbe:	b2db      	uxtb	r3, r3
 8024cc0:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8024cc4:	2104      	movs	r1, #4
 8024cc6:	4618      	mov	r0, r3
 8024cc8:	f001 f8b2 	bl	8025e30 <CODEC_IO_Write>
 8024ccc:	4603      	mov	r3, r0
 8024cce:	461a      	mov	r2, r3
 8024cd0:	69fb      	ldr	r3, [r7, #28]
 8024cd2:	4413      	add	r3, r2
 8024cd4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8024cd6:	89fb      	ldrh	r3, [r7, #14]
 8024cd8:	b2db      	uxtb	r3, r3
 8024cda:	22db      	movs	r2, #219	; 0xdb
 8024cdc:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8024ce0:	4618      	mov	r0, r3
 8024ce2:	f001 f8a5 	bl	8025e30 <CODEC_IO_Write>
 8024ce6:	4603      	mov	r3, r0
 8024ce8:	461a      	mov	r2, r3
 8024cea:	69fb      	ldr	r3, [r7, #28]
 8024cec:	4413      	add	r3, r2
 8024cee:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8024cf0:	89fb      	ldrh	r3, [r7, #14]
 8024cf2:	b2db      	uxtb	r3, r3
 8024cf4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8024cf8:	2102      	movs	r1, #2
 8024cfa:	4618      	mov	r0, r3
 8024cfc:	f001 f898 	bl	8025e30 <CODEC_IO_Write>
 8024d00:	4603      	mov	r3, r0
 8024d02:	461a      	mov	r2, r3
 8024d04:	69fb      	ldr	r3, [r7, #28]
 8024d06:	4413      	add	r3, r2
 8024d08:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8024d0a:	89fb      	ldrh	r3, [r7, #14]
 8024d0c:	b2db      	uxtb	r3, r3
 8024d0e:	2202      	movs	r2, #2
 8024d10:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8024d14:	4618      	mov	r0, r3
 8024d16:	f001 f88b 	bl	8025e30 <CODEC_IO_Write>
 8024d1a:	4603      	mov	r3, r0
 8024d1c:	461a      	mov	r2, r3
 8024d1e:	69fb      	ldr	r3, [r7, #28]
 8024d20:	4413      	add	r3, r2
 8024d22:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8024d24:	89fb      	ldrh	r3, [r7, #14]
 8024d26:	b2db      	uxtb	r3, r3
 8024d28:	2202      	movs	r2, #2
 8024d2a:	f240 6109 	movw	r1, #1545	; 0x609
 8024d2e:	4618      	mov	r0, r3
 8024d30:	f001 f87e 	bl	8025e30 <CODEC_IO_Write>
 8024d34:	4603      	mov	r3, r0
 8024d36:	461a      	mov	r2, r3
 8024d38:	69fb      	ldr	r3, [r7, #28]
 8024d3a:	4413      	add	r3, r2
 8024d3c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8024d3e:	89fb      	ldrh	r3, [r7, #14]
 8024d40:	b2db      	uxtb	r3, r3
 8024d42:	220e      	movs	r2, #14
 8024d44:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8024d48:	4618      	mov	r0, r3
 8024d4a:	f001 f871 	bl	8025e30 <CODEC_IO_Write>
 8024d4e:	4603      	mov	r3, r0
 8024d50:	461a      	mov	r2, r3
 8024d52:	69fb      	ldr	r3, [r7, #28]
 8024d54:	4413      	add	r3, r2
 8024d56:	61fb      	str	r3, [r7, #28]
      break;
 8024d58:	e143      	b.n	8024fe2 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8024d5a:	89fb      	ldrh	r3, [r7, #14]
 8024d5c:	b2db      	uxtb	r3, r3
 8024d5e:	2211      	movs	r2, #17
 8024d60:	2128      	movs	r1, #40	; 0x28
 8024d62:	4618      	mov	r0, r3
 8024d64:	f001 f864 	bl	8025e30 <CODEC_IO_Write>
 8024d68:	4603      	mov	r3, r0
 8024d6a:	461a      	mov	r2, r3
 8024d6c:	69fb      	ldr	r3, [r7, #28]
 8024d6e:	4413      	add	r3, r2
 8024d70:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8024d72:	89fb      	ldrh	r3, [r7, #14]
 8024d74:	b2db      	uxtb	r3, r3
 8024d76:	2235      	movs	r2, #53	; 0x35
 8024d78:	2129      	movs	r1, #41	; 0x29
 8024d7a:	4618      	mov	r0, r3
 8024d7c:	f001 f858 	bl	8025e30 <CODEC_IO_Write>
 8024d80:	4603      	mov	r3, r0
 8024d82:	461a      	mov	r2, r3
 8024d84:	69fb      	ldr	r3, [r7, #28]
 8024d86:	4413      	add	r3, r2
 8024d88:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8024d8a:	89fb      	ldrh	r3, [r7, #14]
 8024d8c:	b2db      	uxtb	r3, r3
 8024d8e:	2235      	movs	r2, #53	; 0x35
 8024d90:	212a      	movs	r1, #42	; 0x2a
 8024d92:	4618      	mov	r0, r3
 8024d94:	f001 f84c 	bl	8025e30 <CODEC_IO_Write>
 8024d98:	4603      	mov	r3, r0
 8024d9a:	461a      	mov	r2, r3
 8024d9c:	69fb      	ldr	r3, [r7, #28]
 8024d9e:	4413      	add	r3, r2
 8024da0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8024da2:	89fb      	ldrh	r3, [r7, #14]
 8024da4:	b2db      	uxtb	r3, r3
 8024da6:	f240 3203 	movw	r2, #771	; 0x303
 8024daa:	2104      	movs	r1, #4
 8024dac:	4618      	mov	r0, r3
 8024dae:	f001 f83f 	bl	8025e30 <CODEC_IO_Write>
 8024db2:	4603      	mov	r3, r0
 8024db4:	461a      	mov	r2, r3
 8024db6:	69fb      	ldr	r3, [r7, #28]
 8024db8:	4413      	add	r3, r2
 8024dba:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8024dbc:	89fb      	ldrh	r3, [r7, #14]
 8024dbe:	b2db      	uxtb	r3, r3
 8024dc0:	22db      	movs	r2, #219	; 0xdb
 8024dc2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8024dc6:	4618      	mov	r0, r3
 8024dc8:	f001 f832 	bl	8025e30 <CODEC_IO_Write>
 8024dcc:	4603      	mov	r3, r0
 8024dce:	461a      	mov	r2, r3
 8024dd0:	69fb      	ldr	r3, [r7, #28]
 8024dd2:	4413      	add	r3, r2
 8024dd4:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8024dd6:	89fb      	ldrh	r3, [r7, #14]
 8024dd8:	b2db      	uxtb	r3, r3
 8024dda:	f246 3250 	movw	r2, #25424	; 0x6350
 8024dde:	2102      	movs	r1, #2
 8024de0:	4618      	mov	r0, r3
 8024de2:	f001 f825 	bl	8025e30 <CODEC_IO_Write>
 8024de6:	4603      	mov	r3, r0
 8024de8:	461a      	mov	r2, r3
 8024dea:	69fb      	ldr	r3, [r7, #28]
 8024dec:	4413      	add	r3, r2
 8024dee:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8024df0:	89fb      	ldrh	r3, [r7, #14]
 8024df2:	b2db      	uxtb	r3, r3
 8024df4:	2202      	movs	r2, #2
 8024df6:	f240 6106 	movw	r1, #1542	; 0x606
 8024dfa:	4618      	mov	r0, r3
 8024dfc:	f001 f818 	bl	8025e30 <CODEC_IO_Write>
 8024e00:	4603      	mov	r3, r0
 8024e02:	461a      	mov	r2, r3
 8024e04:	69fb      	ldr	r3, [r7, #28]
 8024e06:	4413      	add	r3, r2
 8024e08:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8024e0a:	89fb      	ldrh	r3, [r7, #14]
 8024e0c:	b2db      	uxtb	r3, r3
 8024e0e:	2202      	movs	r2, #2
 8024e10:	f240 6107 	movw	r1, #1543	; 0x607
 8024e14:	4618      	mov	r0, r3
 8024e16:	f001 f80b 	bl	8025e30 <CODEC_IO_Write>
 8024e1a:	4603      	mov	r3, r0
 8024e1c:	461a      	mov	r2, r3
 8024e1e:	69fb      	ldr	r3, [r7, #28]
 8024e20:	4413      	add	r3, r2
 8024e22:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8024e24:	89fb      	ldrh	r3, [r7, #14]
 8024e26:	b2db      	uxtb	r3, r3
 8024e28:	220d      	movs	r2, #13
 8024e2a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8024e2e:	4618      	mov	r0, r3
 8024e30:	f000 fffe 	bl	8025e30 <CODEC_IO_Write>
 8024e34:	4603      	mov	r3, r0
 8024e36:	461a      	mov	r2, r3
 8024e38:	69fb      	ldr	r3, [r7, #28]
 8024e3a:	4413      	add	r3, r2
 8024e3c:	61fb      	str	r3, [r7, #28]
      break;
 8024e3e:	e0d0      	b.n	8024fe2 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8024e40:	89fb      	ldrh	r3, [r7, #14]
 8024e42:	b2db      	uxtb	r3, r3
 8024e44:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8024e48:	2104      	movs	r1, #4
 8024e4a:	4618      	mov	r0, r3
 8024e4c:	f000 fff0 	bl	8025e30 <CODEC_IO_Write>
 8024e50:	4603      	mov	r3, r0
 8024e52:	461a      	mov	r2, r3
 8024e54:	69fb      	ldr	r3, [r7, #28]
 8024e56:	4413      	add	r3, r2
 8024e58:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8024e5a:	89fb      	ldrh	r3, [r7, #14]
 8024e5c:	b2db      	uxtb	r3, r3
 8024e5e:	22db      	movs	r2, #219	; 0xdb
 8024e60:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8024e64:	4618      	mov	r0, r3
 8024e66:	f000 ffe3 	bl	8025e30 <CODEC_IO_Write>
 8024e6a:	4603      	mov	r3, r0
 8024e6c:	461a      	mov	r2, r3
 8024e6e:	69fb      	ldr	r3, [r7, #28]
 8024e70:	4413      	add	r3, r2
 8024e72:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8024e74:	89fb      	ldrh	r3, [r7, #14]
 8024e76:	b2db      	uxtb	r3, r3
 8024e78:	f246 3250 	movw	r2, #25424	; 0x6350
 8024e7c:	2102      	movs	r1, #2
 8024e7e:	4618      	mov	r0, r3
 8024e80:	f000 ffd6 	bl	8025e30 <CODEC_IO_Write>
 8024e84:	4603      	mov	r3, r0
 8024e86:	461a      	mov	r2, r3
 8024e88:	69fb      	ldr	r3, [r7, #28]
 8024e8a:	4413      	add	r3, r2
 8024e8c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8024e8e:	89fb      	ldrh	r3, [r7, #14]
 8024e90:	b2db      	uxtb	r3, r3
 8024e92:	2202      	movs	r2, #2
 8024e94:	f240 6106 	movw	r1, #1542	; 0x606
 8024e98:	4618      	mov	r0, r3
 8024e9a:	f000 ffc9 	bl	8025e30 <CODEC_IO_Write>
 8024e9e:	4603      	mov	r3, r0
 8024ea0:	461a      	mov	r2, r3
 8024ea2:	69fb      	ldr	r3, [r7, #28]
 8024ea4:	4413      	add	r3, r2
 8024ea6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8024ea8:	89fb      	ldrh	r3, [r7, #14]
 8024eaa:	b2db      	uxtb	r3, r3
 8024eac:	2202      	movs	r2, #2
 8024eae:	f240 6107 	movw	r1, #1543	; 0x607
 8024eb2:	4618      	mov	r0, r3
 8024eb4:	f000 ffbc 	bl	8025e30 <CODEC_IO_Write>
 8024eb8:	4603      	mov	r3, r0
 8024eba:	461a      	mov	r2, r3
 8024ebc:	69fb      	ldr	r3, [r7, #28]
 8024ebe:	4413      	add	r3, r2
 8024ec0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8024ec2:	89fb      	ldrh	r3, [r7, #14]
 8024ec4:	b2db      	uxtb	r3, r3
 8024ec6:	220d      	movs	r2, #13
 8024ec8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8024ecc:	4618      	mov	r0, r3
 8024ece:	f000 ffaf 	bl	8025e30 <CODEC_IO_Write>
 8024ed2:	4603      	mov	r3, r0
 8024ed4:	461a      	mov	r2, r3
 8024ed6:	69fb      	ldr	r3, [r7, #28]
 8024ed8:	4413      	add	r3, r2
 8024eda:	61fb      	str	r3, [r7, #28]
      break; 
 8024edc:	e081      	b.n	8024fe2 <wm8994_Init+0x702>
 8024ede:	bf00      	nop
 8024ee0:	20018e8c 	.word	0x20018e8c
 8024ee4:	20018e90 	.word	0x20018e90
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8024ee8:	89fb      	ldrh	r3, [r7, #14]
 8024eea:	b2db      	uxtb	r3, r3
 8024eec:	f640 723c 	movw	r2, #3900	; 0xf3c
 8024ef0:	2104      	movs	r1, #4
 8024ef2:	4618      	mov	r0, r3
 8024ef4:	f000 ff9c 	bl	8025e30 <CODEC_IO_Write>
 8024ef8:	4603      	mov	r3, r0
 8024efa:	461a      	mov	r2, r3
 8024efc:	69fb      	ldr	r3, [r7, #28]
 8024efe:	4413      	add	r3, r2
 8024f00:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8024f02:	89fb      	ldrh	r3, [r7, #14]
 8024f04:	b2db      	uxtb	r3, r3
 8024f06:	22db      	movs	r2, #219	; 0xdb
 8024f08:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8024f0c:	4618      	mov	r0, r3
 8024f0e:	f000 ff8f 	bl	8025e30 <CODEC_IO_Write>
 8024f12:	4603      	mov	r3, r0
 8024f14:	461a      	mov	r2, r3
 8024f16:	69fb      	ldr	r3, [r7, #28]
 8024f18:	4413      	add	r3, r2
 8024f1a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8024f1c:	89fb      	ldrh	r3, [r7, #14]
 8024f1e:	b2db      	uxtb	r3, r3
 8024f20:	22db      	movs	r2, #219	; 0xdb
 8024f22:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8024f26:	4618      	mov	r0, r3
 8024f28:	f000 ff82 	bl	8025e30 <CODEC_IO_Write>
 8024f2c:	4603      	mov	r3, r0
 8024f2e:	461a      	mov	r2, r3
 8024f30:	69fb      	ldr	r3, [r7, #28]
 8024f32:	4413      	add	r3, r2
 8024f34:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8024f36:	89fb      	ldrh	r3, [r7, #14]
 8024f38:	b2db      	uxtb	r3, r3
 8024f3a:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8024f3e:	2102      	movs	r1, #2
 8024f40:	4618      	mov	r0, r3
 8024f42:	f000 ff75 	bl	8025e30 <CODEC_IO_Write>
 8024f46:	4603      	mov	r3, r0
 8024f48:	461a      	mov	r2, r3
 8024f4a:	69fb      	ldr	r3, [r7, #28]
 8024f4c:	4413      	add	r3, r2
 8024f4e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8024f50:	89fb      	ldrh	r3, [r7, #14]
 8024f52:	b2db      	uxtb	r3, r3
 8024f54:	2202      	movs	r2, #2
 8024f56:	f240 6106 	movw	r1, #1542	; 0x606
 8024f5a:	4618      	mov	r0, r3
 8024f5c:	f000 ff68 	bl	8025e30 <CODEC_IO_Write>
 8024f60:	4603      	mov	r3, r0
 8024f62:	461a      	mov	r2, r3
 8024f64:	69fb      	ldr	r3, [r7, #28]
 8024f66:	4413      	add	r3, r2
 8024f68:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8024f6a:	89fb      	ldrh	r3, [r7, #14]
 8024f6c:	b2db      	uxtb	r3, r3
 8024f6e:	2202      	movs	r2, #2
 8024f70:	f240 6107 	movw	r1, #1543	; 0x607
 8024f74:	4618      	mov	r0, r3
 8024f76:	f000 ff5b 	bl	8025e30 <CODEC_IO_Write>
 8024f7a:	4603      	mov	r3, r0
 8024f7c:	461a      	mov	r2, r3
 8024f7e:	69fb      	ldr	r3, [r7, #28]
 8024f80:	4413      	add	r3, r2
 8024f82:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8024f84:	89fb      	ldrh	r3, [r7, #14]
 8024f86:	b2db      	uxtb	r3, r3
 8024f88:	2202      	movs	r2, #2
 8024f8a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8024f8e:	4618      	mov	r0, r3
 8024f90:	f000 ff4e 	bl	8025e30 <CODEC_IO_Write>
 8024f94:	4603      	mov	r3, r0
 8024f96:	461a      	mov	r2, r3
 8024f98:	69fb      	ldr	r3, [r7, #28]
 8024f9a:	4413      	add	r3, r2
 8024f9c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8024f9e:	89fb      	ldrh	r3, [r7, #14]
 8024fa0:	b2db      	uxtb	r3, r3
 8024fa2:	2202      	movs	r2, #2
 8024fa4:	f240 6109 	movw	r1, #1545	; 0x609
 8024fa8:	4618      	mov	r0, r3
 8024faa:	f000 ff41 	bl	8025e30 <CODEC_IO_Write>
 8024fae:	4603      	mov	r3, r0
 8024fb0:	461a      	mov	r2, r3
 8024fb2:	69fb      	ldr	r3, [r7, #28]
 8024fb4:	4413      	add	r3, r2
 8024fb6:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8024fb8:	89fb      	ldrh	r3, [r7, #14]
 8024fba:	b2db      	uxtb	r3, r3
 8024fbc:	220d      	movs	r2, #13
 8024fbe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8024fc2:	4618      	mov	r0, r3
 8024fc4:	f000 ff34 	bl	8025e30 <CODEC_IO_Write>
 8024fc8:	4603      	mov	r3, r0
 8024fca:	461a      	mov	r2, r3
 8024fcc:	69fb      	ldr	r3, [r7, #28]
 8024fce:	4413      	add	r3, r2
 8024fd0:	61fb      	str	r3, [r7, #28]
      break;    
 8024fd2:	e006      	b.n	8024fe2 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8024fd4:	69fb      	ldr	r3, [r7, #28]
 8024fd6:	3301      	adds	r3, #1
 8024fd8:	61fb      	str	r3, [r7, #28]
      break;
 8024fda:	e002      	b.n	8024fe2 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8024fdc:	4bb1      	ldr	r3, [pc, #708]	; (80252a4 <wm8994_Init+0x9c4>)
 8024fde:	2200      	movs	r2, #0
 8024fe0:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8024fe2:	687b      	ldr	r3, [r7, #4]
 8024fe4:	4ab0      	ldr	r2, [pc, #704]	; (80252a8 <wm8994_Init+0x9c8>)
 8024fe6:	4293      	cmp	r3, r2
 8024fe8:	d079      	beq.n	80250de <wm8994_Init+0x7fe>
 8024fea:	687b      	ldr	r3, [r7, #4]
 8024fec:	4aae      	ldr	r2, [pc, #696]	; (80252a8 <wm8994_Init+0x9c8>)
 8024fee:	4293      	cmp	r3, r2
 8024ff0:	f200 80ad 	bhi.w	802514e <wm8994_Init+0x86e>
 8024ff4:	687b      	ldr	r3, [r7, #4]
 8024ff6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8024ffa:	4293      	cmp	r3, r2
 8024ffc:	d061      	beq.n	80250c2 <wm8994_Init+0x7e2>
 8024ffe:	687b      	ldr	r3, [r7, #4]
 8025000:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8025004:	4293      	cmp	r3, r2
 8025006:	f200 80a2 	bhi.w	802514e <wm8994_Init+0x86e>
 802500a:	687b      	ldr	r3, [r7, #4]
 802500c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8025010:	4293      	cmp	r3, r2
 8025012:	f000 808e 	beq.w	8025132 <wm8994_Init+0x852>
 8025016:	687b      	ldr	r3, [r7, #4]
 8025018:	f64a 4244 	movw	r2, #44100	; 0xac44
 802501c:	4293      	cmp	r3, r2
 802501e:	f200 8096 	bhi.w	802514e <wm8994_Init+0x86e>
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8025028:	d03d      	beq.n	80250a6 <wm8994_Init+0x7c6>
 802502a:	687b      	ldr	r3, [r7, #4]
 802502c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8025030:	f200 808d 	bhi.w	802514e <wm8994_Init+0x86e>
 8025034:	687b      	ldr	r3, [r7, #4]
 8025036:	f245 6222 	movw	r2, #22050	; 0x5622
 802503a:	4293      	cmp	r3, r2
 802503c:	d06b      	beq.n	8025116 <wm8994_Init+0x836>
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	f245 6222 	movw	r2, #22050	; 0x5622
 8025044:	4293      	cmp	r3, r2
 8025046:	f200 8082 	bhi.w	802514e <wm8994_Init+0x86e>
 802504a:	687b      	ldr	r3, [r7, #4]
 802504c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8025050:	d01b      	beq.n	802508a <wm8994_Init+0x7aa>
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8025058:	d879      	bhi.n	802514e <wm8994_Init+0x86e>
 802505a:	687b      	ldr	r3, [r7, #4]
 802505c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8025060:	d005      	beq.n	802506e <wm8994_Init+0x78e>
 8025062:	687b      	ldr	r3, [r7, #4]
 8025064:	f642 3211 	movw	r2, #11025	; 0x2b11
 8025068:	4293      	cmp	r3, r2
 802506a:	d046      	beq.n	80250fa <wm8994_Init+0x81a>
 802506c:	e06f      	b.n	802514e <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 802506e:	89fb      	ldrh	r3, [r7, #14]
 8025070:	b2db      	uxtb	r3, r3
 8025072:	2203      	movs	r2, #3
 8025074:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025078:	4618      	mov	r0, r3
 802507a:	f000 fed9 	bl	8025e30 <CODEC_IO_Write>
 802507e:	4603      	mov	r3, r0
 8025080:	461a      	mov	r2, r3
 8025082:	69fb      	ldr	r3, [r7, #28]
 8025084:	4413      	add	r3, r2
 8025086:	61fb      	str	r3, [r7, #28]
    break;
 8025088:	e06f      	b.n	802516a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 802508a:	89fb      	ldrh	r3, [r7, #14]
 802508c:	b2db      	uxtb	r3, r3
 802508e:	2233      	movs	r2, #51	; 0x33
 8025090:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025094:	4618      	mov	r0, r3
 8025096:	f000 fecb 	bl	8025e30 <CODEC_IO_Write>
 802509a:	4603      	mov	r3, r0
 802509c:	461a      	mov	r2, r3
 802509e:	69fb      	ldr	r3, [r7, #28]
 80250a0:	4413      	add	r3, r2
 80250a2:	61fb      	str	r3, [r7, #28]
    break;
 80250a4:	e061      	b.n	802516a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80250a6:	89fb      	ldrh	r3, [r7, #14]
 80250a8:	b2db      	uxtb	r3, r3
 80250aa:	2263      	movs	r2, #99	; 0x63
 80250ac:	f44f 7104 	mov.w	r1, #528	; 0x210
 80250b0:	4618      	mov	r0, r3
 80250b2:	f000 febd 	bl	8025e30 <CODEC_IO_Write>
 80250b6:	4603      	mov	r3, r0
 80250b8:	461a      	mov	r2, r3
 80250ba:	69fb      	ldr	r3, [r7, #28]
 80250bc:	4413      	add	r3, r2
 80250be:	61fb      	str	r3, [r7, #28]
    break;
 80250c0:	e053      	b.n	802516a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80250c2:	89fb      	ldrh	r3, [r7, #14]
 80250c4:	b2db      	uxtb	r3, r3
 80250c6:	2283      	movs	r2, #131	; 0x83
 80250c8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80250cc:	4618      	mov	r0, r3
 80250ce:	f000 feaf 	bl	8025e30 <CODEC_IO_Write>
 80250d2:	4603      	mov	r3, r0
 80250d4:	461a      	mov	r2, r3
 80250d6:	69fb      	ldr	r3, [r7, #28]
 80250d8:	4413      	add	r3, r2
 80250da:	61fb      	str	r3, [r7, #28]
    break;
 80250dc:	e045      	b.n	802516a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80250de:	89fb      	ldrh	r3, [r7, #14]
 80250e0:	b2db      	uxtb	r3, r3
 80250e2:	22a3      	movs	r2, #163	; 0xa3
 80250e4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80250e8:	4618      	mov	r0, r3
 80250ea:	f000 fea1 	bl	8025e30 <CODEC_IO_Write>
 80250ee:	4603      	mov	r3, r0
 80250f0:	461a      	mov	r2, r3
 80250f2:	69fb      	ldr	r3, [r7, #28]
 80250f4:	4413      	add	r3, r2
 80250f6:	61fb      	str	r3, [r7, #28]
    break;
 80250f8:	e037      	b.n	802516a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80250fa:	89fb      	ldrh	r3, [r7, #14]
 80250fc:	b2db      	uxtb	r3, r3
 80250fe:	2213      	movs	r2, #19
 8025100:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025104:	4618      	mov	r0, r3
 8025106:	f000 fe93 	bl	8025e30 <CODEC_IO_Write>
 802510a:	4603      	mov	r3, r0
 802510c:	461a      	mov	r2, r3
 802510e:	69fb      	ldr	r3, [r7, #28]
 8025110:	4413      	add	r3, r2
 8025112:	61fb      	str	r3, [r7, #28]
    break;
 8025114:	e029      	b.n	802516a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8025116:	89fb      	ldrh	r3, [r7, #14]
 8025118:	b2db      	uxtb	r3, r3
 802511a:	2243      	movs	r2, #67	; 0x43
 802511c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025120:	4618      	mov	r0, r3
 8025122:	f000 fe85 	bl	8025e30 <CODEC_IO_Write>
 8025126:	4603      	mov	r3, r0
 8025128:	461a      	mov	r2, r3
 802512a:	69fb      	ldr	r3, [r7, #28]
 802512c:	4413      	add	r3, r2
 802512e:	61fb      	str	r3, [r7, #28]
    break;
 8025130:	e01b      	b.n	802516a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8025132:	89fb      	ldrh	r3, [r7, #14]
 8025134:	b2db      	uxtb	r3, r3
 8025136:	2273      	movs	r2, #115	; 0x73
 8025138:	f44f 7104 	mov.w	r1, #528	; 0x210
 802513c:	4618      	mov	r0, r3
 802513e:	f000 fe77 	bl	8025e30 <CODEC_IO_Write>
 8025142:	4603      	mov	r3, r0
 8025144:	461a      	mov	r2, r3
 8025146:	69fb      	ldr	r3, [r7, #28]
 8025148:	4413      	add	r3, r2
 802514a:	61fb      	str	r3, [r7, #28]
    break; 
 802514c:	e00d      	b.n	802516a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 802514e:	89fb      	ldrh	r3, [r7, #14]
 8025150:	b2db      	uxtb	r3, r3
 8025152:	2283      	movs	r2, #131	; 0x83
 8025154:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025158:	4618      	mov	r0, r3
 802515a:	f000 fe69 	bl	8025e30 <CODEC_IO_Write>
 802515e:	4603      	mov	r3, r0
 8025160:	461a      	mov	r2, r3
 8025162:	69fb      	ldr	r3, [r7, #28]
 8025164:	4413      	add	r3, r2
 8025166:	61fb      	str	r3, [r7, #28]
    break; 
 8025168:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 802516a:	8afb      	ldrh	r3, [r7, #22]
 802516c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8025170:	d10e      	bne.n	8025190 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8025172:	89fb      	ldrh	r3, [r7, #14]
 8025174:	b2db      	uxtb	r3, r3
 8025176:	f244 0218 	movw	r2, #16408	; 0x4018
 802517a:	f44f 7140 	mov.w	r1, #768	; 0x300
 802517e:	4618      	mov	r0, r3
 8025180:	f000 fe56 	bl	8025e30 <CODEC_IO_Write>
 8025184:	4603      	mov	r3, r0
 8025186:	461a      	mov	r2, r3
 8025188:	69fb      	ldr	r3, [r7, #28]
 802518a:	4413      	add	r3, r2
 802518c:	61fb      	str	r3, [r7, #28]
 802518e:	e00d      	b.n	80251ac <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8025190:	89fb      	ldrh	r3, [r7, #14]
 8025192:	b2db      	uxtb	r3, r3
 8025194:	f244 0210 	movw	r2, #16400	; 0x4010
 8025198:	f44f 7140 	mov.w	r1, #768	; 0x300
 802519c:	4618      	mov	r0, r3
 802519e:	f000 fe47 	bl	8025e30 <CODEC_IO_Write>
 80251a2:	4603      	mov	r3, r0
 80251a4:	461a      	mov	r2, r3
 80251a6:	69fb      	ldr	r3, [r7, #28]
 80251a8:	4413      	add	r3, r2
 80251aa:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80251ac:	89fb      	ldrh	r3, [r7, #14]
 80251ae:	b2db      	uxtb	r3, r3
 80251b0:	2200      	movs	r2, #0
 80251b2:	f240 3102 	movw	r1, #770	; 0x302
 80251b6:	4618      	mov	r0, r3
 80251b8:	f000 fe3a 	bl	8025e30 <CODEC_IO_Write>
 80251bc:	4603      	mov	r3, r0
 80251be:	461a      	mov	r2, r3
 80251c0:	69fb      	ldr	r3, [r7, #28]
 80251c2:	4413      	add	r3, r2
 80251c4:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80251c6:	89fb      	ldrh	r3, [r7, #14]
 80251c8:	b2db      	uxtb	r3, r3
 80251ca:	220a      	movs	r2, #10
 80251cc:	f44f 7102 	mov.w	r1, #520	; 0x208
 80251d0:	4618      	mov	r0, r3
 80251d2:	f000 fe2d 	bl	8025e30 <CODEC_IO_Write>
 80251d6:	4603      	mov	r3, r0
 80251d8:	461a      	mov	r2, r3
 80251da:	69fb      	ldr	r3, [r7, #28]
 80251dc:	4413      	add	r3, r2
 80251de:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80251e0:	89fb      	ldrh	r3, [r7, #14]
 80251e2:	b2db      	uxtb	r3, r3
 80251e4:	2201      	movs	r2, #1
 80251e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80251ea:	4618      	mov	r0, r3
 80251ec:	f000 fe20 	bl	8025e30 <CODEC_IO_Write>
 80251f0:	4603      	mov	r3, r0
 80251f2:	461a      	mov	r2, r3
 80251f4:	69fb      	ldr	r3, [r7, #28]
 80251f6:	4413      	add	r3, r2
 80251f8:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80251fa:	8b3b      	ldrh	r3, [r7, #24]
 80251fc:	2b00      	cmp	r3, #0
 80251fe:	f000 8123 	beq.w	8025448 <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8025202:	89fb      	ldrh	r3, [r7, #14]
 8025204:	b2db      	uxtb	r3, r3
 8025206:	f44f 7240 	mov.w	r2, #768	; 0x300
 802520a:	2103      	movs	r1, #3
 802520c:	4618      	mov	r0, r3
 802520e:	f000 fe0f 	bl	8025e30 <CODEC_IO_Write>
 8025212:	4603      	mov	r3, r0
 8025214:	461a      	mov	r2, r3
 8025216:	69fb      	ldr	r3, [r7, #28]
 8025218:	4413      	add	r3, r2
 802521a:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 802521c:	89fb      	ldrh	r3, [r7, #14]
 802521e:	b2db      	uxtb	r3, r3
 8025220:	2200      	movs	r2, #0
 8025222:	2122      	movs	r1, #34	; 0x22
 8025224:	4618      	mov	r0, r3
 8025226:	f000 fe03 	bl	8025e30 <CODEC_IO_Write>
 802522a:	4603      	mov	r3, r0
 802522c:	461a      	mov	r2, r3
 802522e:	69fb      	ldr	r3, [r7, #28]
 8025230:	4413      	add	r3, r2
 8025232:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8025234:	89fb      	ldrh	r3, [r7, #14]
 8025236:	b2db      	uxtb	r3, r3
 8025238:	2200      	movs	r2, #0
 802523a:	2123      	movs	r1, #35	; 0x23
 802523c:	4618      	mov	r0, r3
 802523e:	f000 fdf7 	bl	8025e30 <CODEC_IO_Write>
 8025242:	4603      	mov	r3, r0
 8025244:	461a      	mov	r2, r3
 8025246:	69fb      	ldr	r3, [r7, #28]
 8025248:	4413      	add	r3, r2
 802524a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 802524c:	89fb      	ldrh	r3, [r7, #14]
 802524e:	b2db      	uxtb	r3, r3
 8025250:	f44f 7240 	mov.w	r2, #768	; 0x300
 8025254:	2136      	movs	r1, #54	; 0x36
 8025256:	4618      	mov	r0, r3
 8025258:	f000 fdea 	bl	8025e30 <CODEC_IO_Write>
 802525c:	4603      	mov	r3, r0
 802525e:	461a      	mov	r2, r3
 8025260:	69fb      	ldr	r3, [r7, #28]
 8025262:	4413      	add	r3, r2
 8025264:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8025266:	89fb      	ldrh	r3, [r7, #14]
 8025268:	b2db      	uxtb	r3, r3
 802526a:	f243 0203 	movw	r2, #12291	; 0x3003
 802526e:	2101      	movs	r1, #1
 8025270:	4618      	mov	r0, r3
 8025272:	f000 fddd 	bl	8025e30 <CODEC_IO_Write>
 8025276:	4603      	mov	r3, r0
 8025278:	461a      	mov	r2, r3
 802527a:	69fb      	ldr	r3, [r7, #28]
 802527c:	4413      	add	r3, r2
 802527e:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8025280:	8afb      	ldrh	r3, [r7, #22]
 8025282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8025286:	d111      	bne.n	80252ac <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8025288:	89fb      	ldrh	r3, [r7, #14]
 802528a:	b2db      	uxtb	r3, r3
 802528c:	f240 2205 	movw	r2, #517	; 0x205
 8025290:	2151      	movs	r1, #81	; 0x51
 8025292:	4618      	mov	r0, r3
 8025294:	f000 fdcc 	bl	8025e30 <CODEC_IO_Write>
 8025298:	4603      	mov	r3, r0
 802529a:	461a      	mov	r2, r3
 802529c:	69fb      	ldr	r3, [r7, #28]
 802529e:	4413      	add	r3, r2
 80252a0:	61fb      	str	r3, [r7, #28]
 80252a2:	e00f      	b.n	80252c4 <wm8994_Init+0x9e4>
 80252a4:	20018e90 	.word	0x20018e90
 80252a8:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80252ac:	89fb      	ldrh	r3, [r7, #14]
 80252ae:	b2db      	uxtb	r3, r3
 80252b0:	2205      	movs	r2, #5
 80252b2:	2151      	movs	r1, #81	; 0x51
 80252b4:	4618      	mov	r0, r3
 80252b6:	f000 fdbb 	bl	8025e30 <CODEC_IO_Write>
 80252ba:	4603      	mov	r3, r0
 80252bc:	461a      	mov	r2, r3
 80252be:	69fb      	ldr	r3, [r7, #28]
 80252c0:	4413      	add	r3, r2
 80252c2:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80252c4:	8b7b      	ldrh	r3, [r7, #26]
 80252c6:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80252ca:	f043 0303 	orr.w	r3, r3, #3
 80252ce:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80252d0:	89fb      	ldrh	r3, [r7, #14]
 80252d2:	b2db      	uxtb	r3, r3
 80252d4:	8b7a      	ldrh	r2, [r7, #26]
 80252d6:	2101      	movs	r1, #1
 80252d8:	4618      	mov	r0, r3
 80252da:	f000 fda9 	bl	8025e30 <CODEC_IO_Write>
 80252de:	4603      	mov	r3, r0
 80252e0:	461a      	mov	r2, r3
 80252e2:	69fb      	ldr	r3, [r7, #28]
 80252e4:	4413      	add	r3, r2
 80252e6:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80252e8:	89fb      	ldrh	r3, [r7, #14]
 80252ea:	b2db      	uxtb	r3, r3
 80252ec:	2222      	movs	r2, #34	; 0x22
 80252ee:	2160      	movs	r1, #96	; 0x60
 80252f0:	4618      	mov	r0, r3
 80252f2:	f000 fd9d 	bl	8025e30 <CODEC_IO_Write>
 80252f6:	4603      	mov	r3, r0
 80252f8:	461a      	mov	r2, r3
 80252fa:	69fb      	ldr	r3, [r7, #28]
 80252fc:	4413      	add	r3, r2
 80252fe:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8025300:	89fb      	ldrh	r3, [r7, #14]
 8025302:	b2db      	uxtb	r3, r3
 8025304:	f649 7225 	movw	r2, #40741	; 0x9f25
 8025308:	214c      	movs	r1, #76	; 0x4c
 802530a:	4618      	mov	r0, r3
 802530c:	f000 fd90 	bl	8025e30 <CODEC_IO_Write>
 8025310:	4603      	mov	r3, r0
 8025312:	461a      	mov	r2, r3
 8025314:	69fb      	ldr	r3, [r7, #28]
 8025316:	4413      	add	r3, r2
 8025318:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 802531a:	200f      	movs	r0, #15
 802531c:	f7fb ff0a 	bl	8021134 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8025320:	89fb      	ldrh	r3, [r7, #14]
 8025322:	b2db      	uxtb	r3, r3
 8025324:	2201      	movs	r2, #1
 8025326:	212d      	movs	r1, #45	; 0x2d
 8025328:	4618      	mov	r0, r3
 802532a:	f000 fd81 	bl	8025e30 <CODEC_IO_Write>
 802532e:	4603      	mov	r3, r0
 8025330:	461a      	mov	r2, r3
 8025332:	69fb      	ldr	r3, [r7, #28]
 8025334:	4413      	add	r3, r2
 8025336:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8025338:	89fb      	ldrh	r3, [r7, #14]
 802533a:	b2db      	uxtb	r3, r3
 802533c:	2201      	movs	r2, #1
 802533e:	212e      	movs	r1, #46	; 0x2e
 8025340:	4618      	mov	r0, r3
 8025342:	f000 fd75 	bl	8025e30 <CODEC_IO_Write>
 8025346:	4603      	mov	r3, r0
 8025348:	461a      	mov	r2, r3
 802534a:	69fb      	ldr	r3, [r7, #28]
 802534c:	4413      	add	r3, r2
 802534e:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8025350:	89fb      	ldrh	r3, [r7, #14]
 8025352:	b2db      	uxtb	r3, r3
 8025354:	f44f 724c 	mov.w	r2, #816	; 0x330
 8025358:	2103      	movs	r1, #3
 802535a:	4618      	mov	r0, r3
 802535c:	f000 fd68 	bl	8025e30 <CODEC_IO_Write>
 8025360:	4603      	mov	r3, r0
 8025362:	461a      	mov	r2, r3
 8025364:	69fb      	ldr	r3, [r7, #28]
 8025366:	4413      	add	r3, r2
 8025368:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 802536a:	89fb      	ldrh	r3, [r7, #14]
 802536c:	b2db      	uxtb	r3, r3
 802536e:	2233      	movs	r2, #51	; 0x33
 8025370:	2154      	movs	r1, #84	; 0x54
 8025372:	4618      	mov	r0, r3
 8025374:	f000 fd5c 	bl	8025e30 <CODEC_IO_Write>
 8025378:	4603      	mov	r3, r0
 802537a:	461a      	mov	r2, r3
 802537c:	69fb      	ldr	r3, [r7, #28]
 802537e:	4413      	add	r3, r2
 8025380:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8025382:	20fa      	movs	r0, #250	; 0xfa
 8025384:	f7fb fed6 	bl	8021134 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8025388:	89fb      	ldrh	r3, [r7, #14]
 802538a:	b2db      	uxtb	r3, r3
 802538c:	22ee      	movs	r2, #238	; 0xee
 802538e:	2160      	movs	r1, #96	; 0x60
 8025390:	4618      	mov	r0, r3
 8025392:	f000 fd4d 	bl	8025e30 <CODEC_IO_Write>
 8025396:	4603      	mov	r3, r0
 8025398:	461a      	mov	r2, r3
 802539a:	69fb      	ldr	r3, [r7, #28]
 802539c:	4413      	add	r3, r2
 802539e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80253a0:	89fb      	ldrh	r3, [r7, #14]
 80253a2:	b2db      	uxtb	r3, r3
 80253a4:	22c0      	movs	r2, #192	; 0xc0
 80253a6:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80253aa:	4618      	mov	r0, r3
 80253ac:	f000 fd40 	bl	8025e30 <CODEC_IO_Write>
 80253b0:	4603      	mov	r3, r0
 80253b2:	461a      	mov	r2, r3
 80253b4:	69fb      	ldr	r3, [r7, #28]
 80253b6:	4413      	add	r3, r2
 80253b8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80253ba:	89fb      	ldrh	r3, [r7, #14]
 80253bc:	b2db      	uxtb	r3, r3
 80253be:	22c0      	movs	r2, #192	; 0xc0
 80253c0:	f240 6111 	movw	r1, #1553	; 0x611
 80253c4:	4618      	mov	r0, r3
 80253c6:	f000 fd33 	bl	8025e30 <CODEC_IO_Write>
 80253ca:	4603      	mov	r3, r0
 80253cc:	461a      	mov	r2, r3
 80253ce:	69fb      	ldr	r3, [r7, #28]
 80253d0:	4413      	add	r3, r2
 80253d2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80253d4:	89fb      	ldrh	r3, [r7, #14]
 80253d6:	b2db      	uxtb	r3, r3
 80253d8:	2200      	movs	r2, #0
 80253da:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80253de:	4618      	mov	r0, r3
 80253e0:	f000 fd26 	bl	8025e30 <CODEC_IO_Write>
 80253e4:	4603      	mov	r3, r0
 80253e6:	461a      	mov	r2, r3
 80253e8:	69fb      	ldr	r3, [r7, #28]
 80253ea:	4413      	add	r3, r2
 80253ec:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80253ee:	89fb      	ldrh	r3, [r7, #14]
 80253f0:	b2db      	uxtb	r3, r3
 80253f2:	22c0      	movs	r2, #192	; 0xc0
 80253f4:	f240 6112 	movw	r1, #1554	; 0x612
 80253f8:	4618      	mov	r0, r3
 80253fa:	f000 fd19 	bl	8025e30 <CODEC_IO_Write>
 80253fe:	4603      	mov	r3, r0
 8025400:	461a      	mov	r2, r3
 8025402:	69fb      	ldr	r3, [r7, #28]
 8025404:	4413      	add	r3, r2
 8025406:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8025408:	89fb      	ldrh	r3, [r7, #14]
 802540a:	b2db      	uxtb	r3, r3
 802540c:	22c0      	movs	r2, #192	; 0xc0
 802540e:	f240 6113 	movw	r1, #1555	; 0x613
 8025412:	4618      	mov	r0, r3
 8025414:	f000 fd0c 	bl	8025e30 <CODEC_IO_Write>
 8025418:	4603      	mov	r3, r0
 802541a:	461a      	mov	r2, r3
 802541c:	69fb      	ldr	r3, [r7, #28]
 802541e:	4413      	add	r3, r2
 8025420:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8025422:	89fb      	ldrh	r3, [r7, #14]
 8025424:	b2db      	uxtb	r3, r3
 8025426:	2200      	movs	r2, #0
 8025428:	f240 4122 	movw	r1, #1058	; 0x422
 802542c:	4618      	mov	r0, r3
 802542e:	f000 fcff 	bl	8025e30 <CODEC_IO_Write>
 8025432:	4603      	mov	r3, r0
 8025434:	461a      	mov	r2, r3
 8025436:	69fb      	ldr	r3, [r7, #28]
 8025438:	4413      	add	r3, r2
 802543a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 802543c:	7afa      	ldrb	r2, [r7, #11]
 802543e:	89fb      	ldrh	r3, [r7, #14]
 8025440:	4611      	mov	r1, r2
 8025442:	4618      	mov	r0, r3
 8025444:	f000 f984 	bl	8025750 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8025448:	8afb      	ldrh	r3, [r7, #22]
 802544a:	2b00      	cmp	r3, #0
 802544c:	f000 80a6 	beq.w	802559c <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8025450:	8afb      	ldrh	r3, [r7, #22]
 8025452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025456:	d003      	beq.n	8025460 <wm8994_Init+0xb80>
 8025458:	8afb      	ldrh	r3, [r7, #22]
 802545a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802545e:	d12b      	bne.n	80254b8 <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8025460:	8b7b      	ldrh	r3, [r7, #26]
 8025462:	f043 0313 	orr.w	r3, r3, #19
 8025466:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8025468:	89fb      	ldrh	r3, [r7, #14]
 802546a:	b2db      	uxtb	r3, r3
 802546c:	8b7a      	ldrh	r2, [r7, #26]
 802546e:	2101      	movs	r1, #1
 8025470:	4618      	mov	r0, r3
 8025472:	f000 fcdd 	bl	8025e30 <CODEC_IO_Write>
 8025476:	4603      	mov	r3, r0
 8025478:	461a      	mov	r2, r3
 802547a:	69fb      	ldr	r3, [r7, #28]
 802547c:	4413      	add	r3, r2
 802547e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8025480:	89fb      	ldrh	r3, [r7, #14]
 8025482:	b2db      	uxtb	r3, r3
 8025484:	2202      	movs	r2, #2
 8025486:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 802548a:	4618      	mov	r0, r3
 802548c:	f000 fcd0 	bl	8025e30 <CODEC_IO_Write>
 8025490:	4603      	mov	r3, r0
 8025492:	461a      	mov	r2, r3
 8025494:	69fb      	ldr	r3, [r7, #28]
 8025496:	4413      	add	r3, r2
 8025498:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 802549a:	89fb      	ldrh	r3, [r7, #14]
 802549c:	b2db      	uxtb	r3, r3
 802549e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80254a2:	f240 4111 	movw	r1, #1041	; 0x411
 80254a6:	4618      	mov	r0, r3
 80254a8:	f000 fcc2 	bl	8025e30 <CODEC_IO_Write>
 80254ac:	4603      	mov	r3, r0
 80254ae:	461a      	mov	r2, r3
 80254b0:	69fb      	ldr	r3, [r7, #28]
 80254b2:	4413      	add	r3, r2
 80254b4:	61fb      	str	r3, [r7, #28]
 80254b6:	e06b      	b.n	8025590 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80254b8:	8afb      	ldrh	r3, [r7, #22]
 80254ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80254be:	d139      	bne.n	8025534 <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80254c0:	8b7b      	ldrh	r3, [r7, #26]
 80254c2:	f043 0313 	orr.w	r3, r3, #19
 80254c6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80254c8:	89fb      	ldrh	r3, [r7, #14]
 80254ca:	b2db      	uxtb	r3, r3
 80254cc:	8b7a      	ldrh	r2, [r7, #26]
 80254ce:	2101      	movs	r1, #1
 80254d0:	4618      	mov	r0, r3
 80254d2:	f000 fcad 	bl	8025e30 <CODEC_IO_Write>
 80254d6:	4603      	mov	r3, r0
 80254d8:	461a      	mov	r2, r3
 80254da:	69fb      	ldr	r3, [r7, #28]
 80254dc:	4413      	add	r3, r2
 80254de:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80254e0:	89fb      	ldrh	r3, [r7, #14]
 80254e2:	b2db      	uxtb	r3, r3
 80254e4:	2202      	movs	r2, #2
 80254e6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80254ea:	4618      	mov	r0, r3
 80254ec:	f000 fca0 	bl	8025e30 <CODEC_IO_Write>
 80254f0:	4603      	mov	r3, r0
 80254f2:	461a      	mov	r2, r3
 80254f4:	69fb      	ldr	r3, [r7, #28]
 80254f6:	4413      	add	r3, r2
 80254f8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80254fa:	89fb      	ldrh	r3, [r7, #14]
 80254fc:	b2db      	uxtb	r3, r3
 80254fe:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8025502:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8025506:	4618      	mov	r0, r3
 8025508:	f000 fc92 	bl	8025e30 <CODEC_IO_Write>
 802550c:	4603      	mov	r3, r0
 802550e:	461a      	mov	r2, r3
 8025510:	69fb      	ldr	r3, [r7, #28]
 8025512:	4413      	add	r3, r2
 8025514:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8025516:	89fb      	ldrh	r3, [r7, #14]
 8025518:	b2db      	uxtb	r3, r3
 802551a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 802551e:	f240 4111 	movw	r1, #1041	; 0x411
 8025522:	4618      	mov	r0, r3
 8025524:	f000 fc84 	bl	8025e30 <CODEC_IO_Write>
 8025528:	4603      	mov	r3, r0
 802552a:	461a      	mov	r2, r3
 802552c:	69fb      	ldr	r3, [r7, #28]
 802552e:	4413      	add	r3, r2
 8025530:	61fb      	str	r3, [r7, #28]
 8025532:	e02d      	b.n	8025590 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8025534:	8afb      	ldrh	r3, [r7, #22]
 8025536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802553a:	d003      	beq.n	8025544 <wm8994_Init+0xc64>
 802553c:	8afb      	ldrh	r3, [r7, #22]
 802553e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025542:	d125      	bne.n	8025590 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8025544:	89fb      	ldrh	r3, [r7, #14]
 8025546:	b2db      	uxtb	r3, r3
 8025548:	220b      	movs	r2, #11
 802554a:	2118      	movs	r1, #24
 802554c:	4618      	mov	r0, r3
 802554e:	f000 fc6f 	bl	8025e30 <CODEC_IO_Write>
 8025552:	4603      	mov	r3, r0
 8025554:	461a      	mov	r2, r3
 8025556:	69fb      	ldr	r3, [r7, #28]
 8025558:	4413      	add	r3, r2
 802555a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 802555c:	89fb      	ldrh	r3, [r7, #14]
 802555e:	b2db      	uxtb	r3, r3
 8025560:	220b      	movs	r2, #11
 8025562:	211a      	movs	r1, #26
 8025564:	4618      	mov	r0, r3
 8025566:	f000 fc63 	bl	8025e30 <CODEC_IO_Write>
 802556a:	4603      	mov	r3, r0
 802556c:	461a      	mov	r2, r3
 802556e:	69fb      	ldr	r3, [r7, #28]
 8025570:	4413      	add	r3, r2
 8025572:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8025574:	89fb      	ldrh	r3, [r7, #14]
 8025576:	b2db      	uxtb	r3, r3
 8025578:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 802557c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8025580:	4618      	mov	r0, r3
 8025582:	f000 fc55 	bl	8025e30 <CODEC_IO_Write>
 8025586:	4603      	mov	r3, r0
 8025588:	461a      	mov	r2, r3
 802558a:	69fb      	ldr	r3, [r7, #28]
 802558c:	4413      	add	r3, r2
 802558e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8025590:	7afa      	ldrb	r2, [r7, #11]
 8025592:	89fb      	ldrh	r3, [r7, #14]
 8025594:	4611      	mov	r1, r2
 8025596:	4618      	mov	r0, r3
 8025598:	f000 f8da 	bl	8025750 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 802559c:	69fb      	ldr	r3, [r7, #28]
}
 802559e:	4618      	mov	r0, r3
 80255a0:	3720      	adds	r7, #32
 80255a2:	46bd      	mov	sp, r7
 80255a4:	bd80      	pop	{r7, pc}
 80255a6:	bf00      	nop

080255a8 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80255a8:	b580      	push	{r7, lr}
 80255aa:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */  AUDIO_IO_DeInit();
 80255ac:	f7fb fd5c 	bl	8021068 <AUDIO_IO_DeInit>
}
 80255b0:	bf00      	nop
 80255b2:	bd80      	pop	{r7, pc}

080255b4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80255b4:	b580      	push	{r7, lr}
 80255b6:	b082      	sub	sp, #8
 80255b8:	af00      	add	r7, sp, #0
 80255ba:	4603      	mov	r3, r0
 80255bc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80255be:	f7fb fd49 	bl	8021054 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80255c2:	88fb      	ldrh	r3, [r7, #6]
 80255c4:	b2db      	uxtb	r3, r3
 80255c6:	2100      	movs	r1, #0
 80255c8:	4618      	mov	r0, r3
 80255ca:	f7fb fd83 	bl	80210d4 <AUDIO_IO_Read>
 80255ce:	4603      	mov	r3, r0
}
 80255d0:	4618      	mov	r0, r3
 80255d2:	3708      	adds	r7, #8
 80255d4:	46bd      	mov	sp, r7
 80255d6:	bd80      	pop	{r7, pc}

080255d8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80255d8:	b580      	push	{r7, lr}
 80255da:	b084      	sub	sp, #16
 80255dc:	af00      	add	r7, sp, #0
 80255de:	4603      	mov	r3, r0
 80255e0:	6039      	str	r1, [r7, #0]
 80255e2:	80fb      	strh	r3, [r7, #6]
 80255e4:	4613      	mov	r3, r2
 80255e6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80255e8:	2300      	movs	r3, #0
 80255ea:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80255ec:	88fb      	ldrh	r3, [r7, #6]
 80255ee:	2100      	movs	r1, #0
 80255f0:	4618      	mov	r0, r3
 80255f2:	f000 f9d1 	bl	8025998 <wm8994_SetMute>
 80255f6:	4602      	mov	r2, r0
 80255f8:	68fb      	ldr	r3, [r7, #12]
 80255fa:	4413      	add	r3, r2
 80255fc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80255fe:	68fb      	ldr	r3, [r7, #12]
}
 8025600:	4618      	mov	r0, r3
 8025602:	3710      	adds	r7, #16
 8025604:	46bd      	mov	sp, r7
 8025606:	bd80      	pop	{r7, pc}

08025608 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8025608:	b580      	push	{r7, lr}
 802560a:	b084      	sub	sp, #16
 802560c:	af00      	add	r7, sp, #0
 802560e:	4603      	mov	r3, r0
 8025610:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8025612:	2300      	movs	r3, #0
 8025614:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8025616:	88fb      	ldrh	r3, [r7, #6]
 8025618:	2101      	movs	r1, #1
 802561a:	4618      	mov	r0, r3
 802561c:	f000 f9bc 	bl	8025998 <wm8994_SetMute>
 8025620:	4602      	mov	r2, r0
 8025622:	68fb      	ldr	r3, [r7, #12]
 8025624:	4413      	add	r3, r2
 8025626:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8025628:	88fb      	ldrh	r3, [r7, #6]
 802562a:	b2db      	uxtb	r3, r3
 802562c:	2201      	movs	r2, #1
 802562e:	2102      	movs	r1, #2
 8025630:	4618      	mov	r0, r3
 8025632:	f000 fbfd 	bl	8025e30 <CODEC_IO_Write>
 8025636:	4603      	mov	r3, r0
 8025638:	461a      	mov	r2, r3
 802563a:	68fb      	ldr	r3, [r7, #12]
 802563c:	4413      	add	r3, r2
 802563e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8025640:	68fb      	ldr	r3, [r7, #12]
}
 8025642:	4618      	mov	r0, r3
 8025644:	3710      	adds	r7, #16
 8025646:	46bd      	mov	sp, r7
 8025648:	bd80      	pop	{r7, pc}

0802564a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 802564a:	b580      	push	{r7, lr}
 802564c:	b084      	sub	sp, #16
 802564e:	af00      	add	r7, sp, #0
 8025650:	4603      	mov	r3, r0
 8025652:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8025654:	2300      	movs	r3, #0
 8025656:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8025658:	88fb      	ldrh	r3, [r7, #6]
 802565a:	2100      	movs	r1, #0
 802565c:	4618      	mov	r0, r3
 802565e:	f000 f99b 	bl	8025998 <wm8994_SetMute>
 8025662:	4602      	mov	r2, r0
 8025664:	68fb      	ldr	r3, [r7, #12]
 8025666:	4413      	add	r3, r2
 8025668:	60fb      	str	r3, [r7, #12]
  
  return counter;
 802566a:	68fb      	ldr	r3, [r7, #12]
}
 802566c:	4618      	mov	r0, r3
 802566e:	3710      	adds	r7, #16
 8025670:	46bd      	mov	sp, r7
 8025672:	bd80      	pop	{r7, pc}

08025674 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8025674:	b580      	push	{r7, lr}
 8025676:	b084      	sub	sp, #16
 8025678:	af00      	add	r7, sp, #0
 802567a:	4603      	mov	r3, r0
 802567c:	6039      	str	r1, [r7, #0]
 802567e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8025680:	2300      	movs	r3, #0
 8025682:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8025684:	4b31      	ldr	r3, [pc, #196]	; (802574c <wm8994_Stop+0xd8>)
 8025686:	681b      	ldr	r3, [r3, #0]
 8025688:	2b00      	cmp	r3, #0
 802568a:	d05a      	beq.n	8025742 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 802568c:	88fb      	ldrh	r3, [r7, #6]
 802568e:	2101      	movs	r1, #1
 8025690:	4618      	mov	r0, r3
 8025692:	f000 f981 	bl	8025998 <wm8994_SetMute>
 8025696:	4602      	mov	r2, r0
 8025698:	68fb      	ldr	r3, [r7, #12]
 802569a:	4413      	add	r3, r2
 802569c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 802569e:	683b      	ldr	r3, [r7, #0]
 80256a0:	2b02      	cmp	r3, #2
 80256a2:	d04e      	beq.n	8025742 <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80256a4:	88fb      	ldrh	r3, [r7, #6]
 80256a6:	b2db      	uxtb	r3, r3
 80256a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80256ac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80256b0:	4618      	mov	r0, r3
 80256b2:	f000 fbbd 	bl	8025e30 <CODEC_IO_Write>
 80256b6:	4603      	mov	r3, r0
 80256b8:	461a      	mov	r2, r3
 80256ba:	68fb      	ldr	r3, [r7, #12]
 80256bc:	4413      	add	r3, r2
 80256be:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80256c0:	88fb      	ldrh	r3, [r7, #6]
 80256c2:	b2db      	uxtb	r3, r3
 80256c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80256c8:	f240 4122 	movw	r1, #1058	; 0x422
 80256cc:	4618      	mov	r0, r3
 80256ce:	f000 fbaf 	bl	8025e30 <CODEC_IO_Write>
 80256d2:	4603      	mov	r3, r0
 80256d4:	461a      	mov	r2, r3
 80256d6:	68fb      	ldr	r3, [r7, #12]
 80256d8:	4413      	add	r3, r2
 80256da:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80256dc:	88fb      	ldrh	r3, [r7, #6]
 80256de:	b2db      	uxtb	r3, r3
 80256e0:	2200      	movs	r2, #0
 80256e2:	212d      	movs	r1, #45	; 0x2d
 80256e4:	4618      	mov	r0, r3
 80256e6:	f000 fba3 	bl	8025e30 <CODEC_IO_Write>
 80256ea:	4603      	mov	r3, r0
 80256ec:	461a      	mov	r2, r3
 80256ee:	68fb      	ldr	r3, [r7, #12]
 80256f0:	4413      	add	r3, r2
 80256f2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80256f4:	88fb      	ldrh	r3, [r7, #6]
 80256f6:	b2db      	uxtb	r3, r3
 80256f8:	2200      	movs	r2, #0
 80256fa:	212e      	movs	r1, #46	; 0x2e
 80256fc:	4618      	mov	r0, r3
 80256fe:	f000 fb97 	bl	8025e30 <CODEC_IO_Write>
 8025702:	4603      	mov	r3, r0
 8025704:	461a      	mov	r2, r3
 8025706:	68fb      	ldr	r3, [r7, #12]
 8025708:	4413      	add	r3, r2
 802570a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 802570c:	88fb      	ldrh	r3, [r7, #6]
 802570e:	b2db      	uxtb	r3, r3
 8025710:	2200      	movs	r2, #0
 8025712:	2105      	movs	r1, #5
 8025714:	4618      	mov	r0, r3
 8025716:	f000 fb8b 	bl	8025e30 <CODEC_IO_Write>
 802571a:	4603      	mov	r3, r0
 802571c:	461a      	mov	r2, r3
 802571e:	68fb      	ldr	r3, [r7, #12]
 8025720:	4413      	add	r3, r2
 8025722:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8025724:	88fb      	ldrh	r3, [r7, #6]
 8025726:	b2db      	uxtb	r3, r3
 8025728:	2200      	movs	r2, #0
 802572a:	2100      	movs	r1, #0
 802572c:	4618      	mov	r0, r3
 802572e:	f000 fb7f 	bl	8025e30 <CODEC_IO_Write>
 8025732:	4603      	mov	r3, r0
 8025734:	461a      	mov	r2, r3
 8025736:	68fb      	ldr	r3, [r7, #12]
 8025738:	4413      	add	r3, r2
 802573a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 802573c:	4b03      	ldr	r3, [pc, #12]	; (802574c <wm8994_Stop+0xd8>)
 802573e:	2200      	movs	r2, #0
 8025740:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8025742:	68fb      	ldr	r3, [r7, #12]
}
 8025744:	4618      	mov	r0, r3
 8025746:	3710      	adds	r7, #16
 8025748:	46bd      	mov	sp, r7
 802574a:	bd80      	pop	{r7, pc}
 802574c:	20018e8c 	.word	0x20018e8c

08025750 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8025750:	b580      	push	{r7, lr}
 8025752:	b084      	sub	sp, #16
 8025754:	af00      	add	r7, sp, #0
 8025756:	4603      	mov	r3, r0
 8025758:	460a      	mov	r2, r1
 802575a:	80fb      	strh	r3, [r7, #6]
 802575c:	4613      	mov	r3, r2
 802575e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8025760:	2300      	movs	r3, #0
 8025762:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8025764:	797b      	ldrb	r3, [r7, #5]
 8025766:	2b64      	cmp	r3, #100	; 0x64
 8025768:	d80b      	bhi.n	8025782 <wm8994_SetVolume+0x32>
 802576a:	797a      	ldrb	r2, [r7, #5]
 802576c:	4613      	mov	r3, r2
 802576e:	019b      	lsls	r3, r3, #6
 8025770:	1a9b      	subs	r3, r3, r2
 8025772:	4a86      	ldr	r2, [pc, #536]	; (802598c <wm8994_SetVolume+0x23c>)
 8025774:	fb82 1203 	smull	r1, r2, r2, r3
 8025778:	1152      	asrs	r2, r2, #5
 802577a:	17db      	asrs	r3, r3, #31
 802577c:	1ad3      	subs	r3, r2, r3
 802577e:	b2db      	uxtb	r3, r3
 8025780:	e000      	b.n	8025784 <wm8994_SetVolume+0x34>
 8025782:	2364      	movs	r3, #100	; 0x64
 8025784:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8025786:	4b82      	ldr	r3, [pc, #520]	; (8025990 <wm8994_SetVolume+0x240>)
 8025788:	681b      	ldr	r3, [r3, #0]
 802578a:	2b00      	cmp	r3, #0
 802578c:	f000 809b 	beq.w	80258c6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8025790:	7afb      	ldrb	r3, [r7, #11]
 8025792:	2b3e      	cmp	r3, #62	; 0x3e
 8025794:	d93d      	bls.n	8025812 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8025796:	88fb      	ldrh	r3, [r7, #6]
 8025798:	2100      	movs	r1, #0
 802579a:	4618      	mov	r0, r3
 802579c:	f000 f8fc 	bl	8025998 <wm8994_SetMute>
 80257a0:	4602      	mov	r2, r0
 80257a2:	68fb      	ldr	r3, [r7, #12]
 80257a4:	4413      	add	r3, r2
 80257a6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80257a8:	88fb      	ldrh	r3, [r7, #6]
 80257aa:	b2db      	uxtb	r3, r3
 80257ac:	f240 127f 	movw	r2, #383	; 0x17f
 80257b0:	211c      	movs	r1, #28
 80257b2:	4618      	mov	r0, r3
 80257b4:	f000 fb3c 	bl	8025e30 <CODEC_IO_Write>
 80257b8:	4603      	mov	r3, r0
 80257ba:	461a      	mov	r2, r3
 80257bc:	68fb      	ldr	r3, [r7, #12]
 80257be:	4413      	add	r3, r2
 80257c0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80257c2:	88fb      	ldrh	r3, [r7, #6]
 80257c4:	b2db      	uxtb	r3, r3
 80257c6:	f240 127f 	movw	r2, #383	; 0x17f
 80257ca:	211d      	movs	r1, #29
 80257cc:	4618      	mov	r0, r3
 80257ce:	f000 fb2f 	bl	8025e30 <CODEC_IO_Write>
 80257d2:	4603      	mov	r3, r0
 80257d4:	461a      	mov	r2, r3
 80257d6:	68fb      	ldr	r3, [r7, #12]
 80257d8:	4413      	add	r3, r2
 80257da:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80257dc:	88fb      	ldrh	r3, [r7, #6]
 80257de:	b2db      	uxtb	r3, r3
 80257e0:	f240 127f 	movw	r2, #383	; 0x17f
 80257e4:	2126      	movs	r1, #38	; 0x26
 80257e6:	4618      	mov	r0, r3
 80257e8:	f000 fb22 	bl	8025e30 <CODEC_IO_Write>
 80257ec:	4603      	mov	r3, r0
 80257ee:	461a      	mov	r2, r3
 80257f0:	68fb      	ldr	r3, [r7, #12]
 80257f2:	4413      	add	r3, r2
 80257f4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80257f6:	88fb      	ldrh	r3, [r7, #6]
 80257f8:	b2db      	uxtb	r3, r3
 80257fa:	f240 127f 	movw	r2, #383	; 0x17f
 80257fe:	2127      	movs	r1, #39	; 0x27
 8025800:	4618      	mov	r0, r3
 8025802:	f000 fb15 	bl	8025e30 <CODEC_IO_Write>
 8025806:	4603      	mov	r3, r0
 8025808:	461a      	mov	r2, r3
 802580a:	68fb      	ldr	r3, [r7, #12]
 802580c:	4413      	add	r3, r2
 802580e:	60fb      	str	r3, [r7, #12]
 8025810:	e059      	b.n	80258c6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8025812:	797b      	ldrb	r3, [r7, #5]
 8025814:	2b00      	cmp	r3, #0
 8025816:	d109      	bne.n	802582c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8025818:	88fb      	ldrh	r3, [r7, #6]
 802581a:	2101      	movs	r1, #1
 802581c:	4618      	mov	r0, r3
 802581e:	f000 f8bb 	bl	8025998 <wm8994_SetMute>
 8025822:	4602      	mov	r2, r0
 8025824:	68fb      	ldr	r3, [r7, #12]
 8025826:	4413      	add	r3, r2
 8025828:	60fb      	str	r3, [r7, #12]
 802582a:	e04c      	b.n	80258c6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 802582c:	88fb      	ldrh	r3, [r7, #6]
 802582e:	2100      	movs	r1, #0
 8025830:	4618      	mov	r0, r3
 8025832:	f000 f8b1 	bl	8025998 <wm8994_SetMute>
 8025836:	4602      	mov	r2, r0
 8025838:	68fb      	ldr	r3, [r7, #12]
 802583a:	4413      	add	r3, r2
 802583c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 802583e:	88fb      	ldrh	r3, [r7, #6]
 8025840:	b2d8      	uxtb	r0, r3
 8025842:	7afb      	ldrb	r3, [r7, #11]
 8025844:	b21b      	sxth	r3, r3
 8025846:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 802584a:	b21b      	sxth	r3, r3
 802584c:	b29b      	uxth	r3, r3
 802584e:	461a      	mov	r2, r3
 8025850:	211c      	movs	r1, #28
 8025852:	f000 faed 	bl	8025e30 <CODEC_IO_Write>
 8025856:	4603      	mov	r3, r0
 8025858:	461a      	mov	r2, r3
 802585a:	68fb      	ldr	r3, [r7, #12]
 802585c:	4413      	add	r3, r2
 802585e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8025860:	88fb      	ldrh	r3, [r7, #6]
 8025862:	b2d8      	uxtb	r0, r3
 8025864:	7afb      	ldrb	r3, [r7, #11]
 8025866:	b21b      	sxth	r3, r3
 8025868:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 802586c:	b21b      	sxth	r3, r3
 802586e:	b29b      	uxth	r3, r3
 8025870:	461a      	mov	r2, r3
 8025872:	211d      	movs	r1, #29
 8025874:	f000 fadc 	bl	8025e30 <CODEC_IO_Write>
 8025878:	4603      	mov	r3, r0
 802587a:	461a      	mov	r2, r3
 802587c:	68fb      	ldr	r3, [r7, #12]
 802587e:	4413      	add	r3, r2
 8025880:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8025882:	88fb      	ldrh	r3, [r7, #6]
 8025884:	b2d8      	uxtb	r0, r3
 8025886:	7afb      	ldrb	r3, [r7, #11]
 8025888:	b21b      	sxth	r3, r3
 802588a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 802588e:	b21b      	sxth	r3, r3
 8025890:	b29b      	uxth	r3, r3
 8025892:	461a      	mov	r2, r3
 8025894:	2126      	movs	r1, #38	; 0x26
 8025896:	f000 facb 	bl	8025e30 <CODEC_IO_Write>
 802589a:	4603      	mov	r3, r0
 802589c:	461a      	mov	r2, r3
 802589e:	68fb      	ldr	r3, [r7, #12]
 80258a0:	4413      	add	r3, r2
 80258a2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80258a4:	88fb      	ldrh	r3, [r7, #6]
 80258a6:	b2d8      	uxtb	r0, r3
 80258a8:	7afb      	ldrb	r3, [r7, #11]
 80258aa:	b21b      	sxth	r3, r3
 80258ac:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80258b0:	b21b      	sxth	r3, r3
 80258b2:	b29b      	uxth	r3, r3
 80258b4:	461a      	mov	r2, r3
 80258b6:	2127      	movs	r1, #39	; 0x27
 80258b8:	f000 faba 	bl	8025e30 <CODEC_IO_Write>
 80258bc:	4603      	mov	r3, r0
 80258be:	461a      	mov	r2, r3
 80258c0:	68fb      	ldr	r3, [r7, #12]
 80258c2:	4413      	add	r3, r2
 80258c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80258c6:	4b33      	ldr	r3, [pc, #204]	; (8025994 <wm8994_SetVolume+0x244>)
 80258c8:	681b      	ldr	r3, [r3, #0]
 80258ca:	2b00      	cmp	r3, #0
 80258cc:	d059      	beq.n	8025982 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80258ce:	797b      	ldrb	r3, [r7, #5]
 80258d0:	2b63      	cmp	r3, #99	; 0x63
 80258d2:	d80c      	bhi.n	80258ee <wm8994_SetVolume+0x19e>
 80258d4:	797a      	ldrb	r2, [r7, #5]
 80258d6:	4613      	mov	r3, r2
 80258d8:	011b      	lsls	r3, r3, #4
 80258da:	1a9b      	subs	r3, r3, r2
 80258dc:	011b      	lsls	r3, r3, #4
 80258de:	4a2b      	ldr	r2, [pc, #172]	; (802598c <wm8994_SetVolume+0x23c>)
 80258e0:	fb82 1203 	smull	r1, r2, r2, r3
 80258e4:	1152      	asrs	r2, r2, #5
 80258e6:	17db      	asrs	r3, r3, #31
 80258e8:	1ad3      	subs	r3, r2, r3
 80258ea:	b2db      	uxtb	r3, r3
 80258ec:	e000      	b.n	80258f0 <wm8994_SetVolume+0x1a0>
 80258ee:	23ef      	movs	r3, #239	; 0xef
 80258f0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80258f2:	88fb      	ldrh	r3, [r7, #6]
 80258f4:	b2d8      	uxtb	r0, r3
 80258f6:	7afb      	ldrb	r3, [r7, #11]
 80258f8:	b21b      	sxth	r3, r3
 80258fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80258fe:	b21b      	sxth	r3, r3
 8025900:	b29b      	uxth	r3, r3
 8025902:	461a      	mov	r2, r3
 8025904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025908:	f000 fa92 	bl	8025e30 <CODEC_IO_Write>
 802590c:	4603      	mov	r3, r0
 802590e:	461a      	mov	r2, r3
 8025910:	68fb      	ldr	r3, [r7, #12]
 8025912:	4413      	add	r3, r2
 8025914:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8025916:	88fb      	ldrh	r3, [r7, #6]
 8025918:	b2d8      	uxtb	r0, r3
 802591a:	7afb      	ldrb	r3, [r7, #11]
 802591c:	b21b      	sxth	r3, r3
 802591e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025922:	b21b      	sxth	r3, r3
 8025924:	b29b      	uxth	r3, r3
 8025926:	461a      	mov	r2, r3
 8025928:	f240 4101 	movw	r1, #1025	; 0x401
 802592c:	f000 fa80 	bl	8025e30 <CODEC_IO_Write>
 8025930:	4603      	mov	r3, r0
 8025932:	461a      	mov	r2, r3
 8025934:	68fb      	ldr	r3, [r7, #12]
 8025936:	4413      	add	r3, r2
 8025938:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 802593a:	88fb      	ldrh	r3, [r7, #6]
 802593c:	b2d8      	uxtb	r0, r3
 802593e:	7afb      	ldrb	r3, [r7, #11]
 8025940:	b21b      	sxth	r3, r3
 8025942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025946:	b21b      	sxth	r3, r3
 8025948:	b29b      	uxth	r3, r3
 802594a:	461a      	mov	r2, r3
 802594c:	f240 4104 	movw	r1, #1028	; 0x404
 8025950:	f000 fa6e 	bl	8025e30 <CODEC_IO_Write>
 8025954:	4603      	mov	r3, r0
 8025956:	461a      	mov	r2, r3
 8025958:	68fb      	ldr	r3, [r7, #12]
 802595a:	4413      	add	r3, r2
 802595c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 802595e:	88fb      	ldrh	r3, [r7, #6]
 8025960:	b2d8      	uxtb	r0, r3
 8025962:	7afb      	ldrb	r3, [r7, #11]
 8025964:	b21b      	sxth	r3, r3
 8025966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802596a:	b21b      	sxth	r3, r3
 802596c:	b29b      	uxth	r3, r3
 802596e:	461a      	mov	r2, r3
 8025970:	f240 4105 	movw	r1, #1029	; 0x405
 8025974:	f000 fa5c 	bl	8025e30 <CODEC_IO_Write>
 8025978:	4603      	mov	r3, r0
 802597a:	461a      	mov	r2, r3
 802597c:	68fb      	ldr	r3, [r7, #12]
 802597e:	4413      	add	r3, r2
 8025980:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8025982:	68fb      	ldr	r3, [r7, #12]
}
 8025984:	4618      	mov	r0, r3
 8025986:	3710      	adds	r7, #16
 8025988:	46bd      	mov	sp, r7
 802598a:	bd80      	pop	{r7, pc}
 802598c:	51eb851f 	.word	0x51eb851f
 8025990:	20018e8c 	.word	0x20018e8c
 8025994:	20018e90 	.word	0x20018e90

08025998 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8025998:	b580      	push	{r7, lr}
 802599a:	b084      	sub	sp, #16
 802599c:	af00      	add	r7, sp, #0
 802599e:	4603      	mov	r3, r0
 80259a0:	6039      	str	r1, [r7, #0]
 80259a2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80259a4:	2300      	movs	r3, #0
 80259a6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80259a8:	4b21      	ldr	r3, [pc, #132]	; (8025a30 <wm8994_SetMute+0x98>)
 80259aa:	681b      	ldr	r3, [r3, #0]
 80259ac:	2b00      	cmp	r3, #0
 80259ae:	d039      	beq.n	8025a24 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80259b0:	683b      	ldr	r3, [r7, #0]
 80259b2:	2b01      	cmp	r3, #1
 80259b4:	d11c      	bne.n	80259f0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80259b6:	88fb      	ldrh	r3, [r7, #6]
 80259b8:	b2db      	uxtb	r3, r3
 80259ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80259be:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80259c2:	4618      	mov	r0, r3
 80259c4:	f000 fa34 	bl	8025e30 <CODEC_IO_Write>
 80259c8:	4603      	mov	r3, r0
 80259ca:	461a      	mov	r2, r3
 80259cc:	68fb      	ldr	r3, [r7, #12]
 80259ce:	4413      	add	r3, r2
 80259d0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80259d2:	88fb      	ldrh	r3, [r7, #6]
 80259d4:	b2db      	uxtb	r3, r3
 80259d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80259da:	f240 4122 	movw	r1, #1058	; 0x422
 80259de:	4618      	mov	r0, r3
 80259e0:	f000 fa26 	bl	8025e30 <CODEC_IO_Write>
 80259e4:	4603      	mov	r3, r0
 80259e6:	461a      	mov	r2, r3
 80259e8:	68fb      	ldr	r3, [r7, #12]
 80259ea:	4413      	add	r3, r2
 80259ec:	60fb      	str	r3, [r7, #12]
 80259ee:	e019      	b.n	8025a24 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80259f0:	88fb      	ldrh	r3, [r7, #6]
 80259f2:	b2db      	uxtb	r3, r3
 80259f4:	2200      	movs	r2, #0
 80259f6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80259fa:	4618      	mov	r0, r3
 80259fc:	f000 fa18 	bl	8025e30 <CODEC_IO_Write>
 8025a00:	4603      	mov	r3, r0
 8025a02:	461a      	mov	r2, r3
 8025a04:	68fb      	ldr	r3, [r7, #12]
 8025a06:	4413      	add	r3, r2
 8025a08:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8025a0a:	88fb      	ldrh	r3, [r7, #6]
 8025a0c:	b2db      	uxtb	r3, r3
 8025a0e:	2200      	movs	r2, #0
 8025a10:	f240 4122 	movw	r1, #1058	; 0x422
 8025a14:	4618      	mov	r0, r3
 8025a16:	f000 fa0b 	bl	8025e30 <CODEC_IO_Write>
 8025a1a:	4603      	mov	r3, r0
 8025a1c:	461a      	mov	r2, r3
 8025a1e:	68fb      	ldr	r3, [r7, #12]
 8025a20:	4413      	add	r3, r2
 8025a22:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8025a24:	68fb      	ldr	r3, [r7, #12]
}
 8025a26:	4618      	mov	r0, r3
 8025a28:	3710      	adds	r7, #16
 8025a2a:	46bd      	mov	sp, r7
 8025a2c:	bd80      	pop	{r7, pc}
 8025a2e:	bf00      	nop
 8025a30:	20018e8c 	.word	0x20018e8c

08025a34 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8025a34:	b580      	push	{r7, lr}
 8025a36:	b084      	sub	sp, #16
 8025a38:	af00      	add	r7, sp, #0
 8025a3a:	4603      	mov	r3, r0
 8025a3c:	460a      	mov	r2, r1
 8025a3e:	80fb      	strh	r3, [r7, #6]
 8025a40:	4613      	mov	r3, r2
 8025a42:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8025a44:	2300      	movs	r3, #0
 8025a46:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8025a48:	797b      	ldrb	r3, [r7, #5]
 8025a4a:	2b03      	cmp	r3, #3
 8025a4c:	f000 808c 	beq.w	8025b68 <wm8994_SetOutputMode+0x134>
 8025a50:	2b03      	cmp	r3, #3
 8025a52:	f300 80cb 	bgt.w	8025bec <wm8994_SetOutputMode+0x1b8>
 8025a56:	2b01      	cmp	r3, #1
 8025a58:	d002      	beq.n	8025a60 <wm8994_SetOutputMode+0x2c>
 8025a5a:	2b02      	cmp	r3, #2
 8025a5c:	d042      	beq.n	8025ae4 <wm8994_SetOutputMode+0xb0>
 8025a5e:	e0c5      	b.n	8025bec <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8025a60:	88fb      	ldrh	r3, [r7, #6]
 8025a62:	b2db      	uxtb	r3, r3
 8025a64:	f640 420c 	movw	r2, #3084	; 0xc0c
 8025a68:	2105      	movs	r1, #5
 8025a6a:	4618      	mov	r0, r3
 8025a6c:	f000 f9e0 	bl	8025e30 <CODEC_IO_Write>
 8025a70:	4603      	mov	r3, r0
 8025a72:	461a      	mov	r2, r3
 8025a74:	68fb      	ldr	r3, [r7, #12]
 8025a76:	4413      	add	r3, r2
 8025a78:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8025a7a:	88fb      	ldrh	r3, [r7, #6]
 8025a7c:	b2db      	uxtb	r3, r3
 8025a7e:	2200      	movs	r2, #0
 8025a80:	f240 6101 	movw	r1, #1537	; 0x601
 8025a84:	4618      	mov	r0, r3
 8025a86:	f000 f9d3 	bl	8025e30 <CODEC_IO_Write>
 8025a8a:	4603      	mov	r3, r0
 8025a8c:	461a      	mov	r2, r3
 8025a8e:	68fb      	ldr	r3, [r7, #12]
 8025a90:	4413      	add	r3, r2
 8025a92:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8025a94:	88fb      	ldrh	r3, [r7, #6]
 8025a96:	b2db      	uxtb	r3, r3
 8025a98:	2200      	movs	r2, #0
 8025a9a:	f240 6102 	movw	r1, #1538	; 0x602
 8025a9e:	4618      	mov	r0, r3
 8025aa0:	f000 f9c6 	bl	8025e30 <CODEC_IO_Write>
 8025aa4:	4603      	mov	r3, r0
 8025aa6:	461a      	mov	r2, r3
 8025aa8:	68fb      	ldr	r3, [r7, #12]
 8025aaa:	4413      	add	r3, r2
 8025aac:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8025aae:	88fb      	ldrh	r3, [r7, #6]
 8025ab0:	b2db      	uxtb	r3, r3
 8025ab2:	2202      	movs	r2, #2
 8025ab4:	f240 6104 	movw	r1, #1540	; 0x604
 8025ab8:	4618      	mov	r0, r3
 8025aba:	f000 f9b9 	bl	8025e30 <CODEC_IO_Write>
 8025abe:	4603      	mov	r3, r0
 8025ac0:	461a      	mov	r2, r3
 8025ac2:	68fb      	ldr	r3, [r7, #12]
 8025ac4:	4413      	add	r3, r2
 8025ac6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8025ac8:	88fb      	ldrh	r3, [r7, #6]
 8025aca:	b2db      	uxtb	r3, r3
 8025acc:	2202      	movs	r2, #2
 8025ace:	f240 6105 	movw	r1, #1541	; 0x605
 8025ad2:	4618      	mov	r0, r3
 8025ad4:	f000 f9ac 	bl	8025e30 <CODEC_IO_Write>
 8025ad8:	4603      	mov	r3, r0
 8025ada:	461a      	mov	r2, r3
 8025adc:	68fb      	ldr	r3, [r7, #12]
 8025ade:	4413      	add	r3, r2
 8025ae0:	60fb      	str	r3, [r7, #12]
    break;
 8025ae2:	e0c5      	b.n	8025c70 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8025ae4:	88fb      	ldrh	r3, [r7, #6]
 8025ae6:	b2db      	uxtb	r3, r3
 8025ae8:	f240 3203 	movw	r2, #771	; 0x303
 8025aec:	2105      	movs	r1, #5
 8025aee:	4618      	mov	r0, r3
 8025af0:	f000 f99e 	bl	8025e30 <CODEC_IO_Write>
 8025af4:	4603      	mov	r3, r0
 8025af6:	461a      	mov	r2, r3
 8025af8:	68fb      	ldr	r3, [r7, #12]
 8025afa:	4413      	add	r3, r2
 8025afc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8025afe:	88fb      	ldrh	r3, [r7, #6]
 8025b00:	b2db      	uxtb	r3, r3
 8025b02:	2201      	movs	r2, #1
 8025b04:	f240 6101 	movw	r1, #1537	; 0x601
 8025b08:	4618      	mov	r0, r3
 8025b0a:	f000 f991 	bl	8025e30 <CODEC_IO_Write>
 8025b0e:	4603      	mov	r3, r0
 8025b10:	461a      	mov	r2, r3
 8025b12:	68fb      	ldr	r3, [r7, #12]
 8025b14:	4413      	add	r3, r2
 8025b16:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8025b18:	88fb      	ldrh	r3, [r7, #6]
 8025b1a:	b2db      	uxtb	r3, r3
 8025b1c:	2201      	movs	r2, #1
 8025b1e:	f240 6102 	movw	r1, #1538	; 0x602
 8025b22:	4618      	mov	r0, r3
 8025b24:	f000 f984 	bl	8025e30 <CODEC_IO_Write>
 8025b28:	4603      	mov	r3, r0
 8025b2a:	461a      	mov	r2, r3
 8025b2c:	68fb      	ldr	r3, [r7, #12]
 8025b2e:	4413      	add	r3, r2
 8025b30:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8025b32:	88fb      	ldrh	r3, [r7, #6]
 8025b34:	b2db      	uxtb	r3, r3
 8025b36:	2200      	movs	r2, #0
 8025b38:	f240 6104 	movw	r1, #1540	; 0x604
 8025b3c:	4618      	mov	r0, r3
 8025b3e:	f000 f977 	bl	8025e30 <CODEC_IO_Write>
 8025b42:	4603      	mov	r3, r0
 8025b44:	461a      	mov	r2, r3
 8025b46:	68fb      	ldr	r3, [r7, #12]
 8025b48:	4413      	add	r3, r2
 8025b4a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8025b4c:	88fb      	ldrh	r3, [r7, #6]
 8025b4e:	b2db      	uxtb	r3, r3
 8025b50:	2200      	movs	r2, #0
 8025b52:	f240 6105 	movw	r1, #1541	; 0x605
 8025b56:	4618      	mov	r0, r3
 8025b58:	f000 f96a 	bl	8025e30 <CODEC_IO_Write>
 8025b5c:	4603      	mov	r3, r0
 8025b5e:	461a      	mov	r2, r3
 8025b60:	68fb      	ldr	r3, [r7, #12]
 8025b62:	4413      	add	r3, r2
 8025b64:	60fb      	str	r3, [r7, #12]
    break;
 8025b66:	e083      	b.n	8025c70 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8025b68:	88fb      	ldrh	r3, [r7, #6]
 8025b6a:	b2db      	uxtb	r3, r3
 8025b6c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8025b70:	2105      	movs	r1, #5
 8025b72:	4618      	mov	r0, r3
 8025b74:	f000 f95c 	bl	8025e30 <CODEC_IO_Write>
 8025b78:	4603      	mov	r3, r0
 8025b7a:	461a      	mov	r2, r3
 8025b7c:	68fb      	ldr	r3, [r7, #12]
 8025b7e:	4413      	add	r3, r2
 8025b80:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8025b82:	88fb      	ldrh	r3, [r7, #6]
 8025b84:	b2db      	uxtb	r3, r3
 8025b86:	2201      	movs	r2, #1
 8025b88:	f240 6101 	movw	r1, #1537	; 0x601
 8025b8c:	4618      	mov	r0, r3
 8025b8e:	f000 f94f 	bl	8025e30 <CODEC_IO_Write>
 8025b92:	4603      	mov	r3, r0
 8025b94:	461a      	mov	r2, r3
 8025b96:	68fb      	ldr	r3, [r7, #12]
 8025b98:	4413      	add	r3, r2
 8025b9a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8025b9c:	88fb      	ldrh	r3, [r7, #6]
 8025b9e:	b2db      	uxtb	r3, r3
 8025ba0:	2201      	movs	r2, #1
 8025ba2:	f240 6102 	movw	r1, #1538	; 0x602
 8025ba6:	4618      	mov	r0, r3
 8025ba8:	f000 f942 	bl	8025e30 <CODEC_IO_Write>
 8025bac:	4603      	mov	r3, r0
 8025bae:	461a      	mov	r2, r3
 8025bb0:	68fb      	ldr	r3, [r7, #12]
 8025bb2:	4413      	add	r3, r2
 8025bb4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8025bb6:	88fb      	ldrh	r3, [r7, #6]
 8025bb8:	b2db      	uxtb	r3, r3
 8025bba:	2202      	movs	r2, #2
 8025bbc:	f240 6104 	movw	r1, #1540	; 0x604
 8025bc0:	4618      	mov	r0, r3
 8025bc2:	f000 f935 	bl	8025e30 <CODEC_IO_Write>
 8025bc6:	4603      	mov	r3, r0
 8025bc8:	461a      	mov	r2, r3
 8025bca:	68fb      	ldr	r3, [r7, #12]
 8025bcc:	4413      	add	r3, r2
 8025bce:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8025bd0:	88fb      	ldrh	r3, [r7, #6]
 8025bd2:	b2db      	uxtb	r3, r3
 8025bd4:	2202      	movs	r2, #2
 8025bd6:	f240 6105 	movw	r1, #1541	; 0x605
 8025bda:	4618      	mov	r0, r3
 8025bdc:	f000 f928 	bl	8025e30 <CODEC_IO_Write>
 8025be0:	4603      	mov	r3, r0
 8025be2:	461a      	mov	r2, r3
 8025be4:	68fb      	ldr	r3, [r7, #12]
 8025be6:	4413      	add	r3, r2
 8025be8:	60fb      	str	r3, [r7, #12]
    break;
 8025bea:	e041      	b.n	8025c70 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8025bec:	88fb      	ldrh	r3, [r7, #6]
 8025bee:	b2db      	uxtb	r3, r3
 8025bf0:	f240 3203 	movw	r2, #771	; 0x303
 8025bf4:	2105      	movs	r1, #5
 8025bf6:	4618      	mov	r0, r3
 8025bf8:	f000 f91a 	bl	8025e30 <CODEC_IO_Write>
 8025bfc:	4603      	mov	r3, r0
 8025bfe:	461a      	mov	r2, r3
 8025c00:	68fb      	ldr	r3, [r7, #12]
 8025c02:	4413      	add	r3, r2
 8025c04:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8025c06:	88fb      	ldrh	r3, [r7, #6]
 8025c08:	b2db      	uxtb	r3, r3
 8025c0a:	2201      	movs	r2, #1
 8025c0c:	f240 6101 	movw	r1, #1537	; 0x601
 8025c10:	4618      	mov	r0, r3
 8025c12:	f000 f90d 	bl	8025e30 <CODEC_IO_Write>
 8025c16:	4603      	mov	r3, r0
 8025c18:	461a      	mov	r2, r3
 8025c1a:	68fb      	ldr	r3, [r7, #12]
 8025c1c:	4413      	add	r3, r2
 8025c1e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8025c20:	88fb      	ldrh	r3, [r7, #6]
 8025c22:	b2db      	uxtb	r3, r3
 8025c24:	2201      	movs	r2, #1
 8025c26:	f240 6102 	movw	r1, #1538	; 0x602
 8025c2a:	4618      	mov	r0, r3
 8025c2c:	f000 f900 	bl	8025e30 <CODEC_IO_Write>
 8025c30:	4603      	mov	r3, r0
 8025c32:	461a      	mov	r2, r3
 8025c34:	68fb      	ldr	r3, [r7, #12]
 8025c36:	4413      	add	r3, r2
 8025c38:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8025c3a:	88fb      	ldrh	r3, [r7, #6]
 8025c3c:	b2db      	uxtb	r3, r3
 8025c3e:	2200      	movs	r2, #0
 8025c40:	f240 6104 	movw	r1, #1540	; 0x604
 8025c44:	4618      	mov	r0, r3
 8025c46:	f000 f8f3 	bl	8025e30 <CODEC_IO_Write>
 8025c4a:	4603      	mov	r3, r0
 8025c4c:	461a      	mov	r2, r3
 8025c4e:	68fb      	ldr	r3, [r7, #12]
 8025c50:	4413      	add	r3, r2
 8025c52:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8025c54:	88fb      	ldrh	r3, [r7, #6]
 8025c56:	b2db      	uxtb	r3, r3
 8025c58:	2200      	movs	r2, #0
 8025c5a:	f240 6105 	movw	r1, #1541	; 0x605
 8025c5e:	4618      	mov	r0, r3
 8025c60:	f000 f8e6 	bl	8025e30 <CODEC_IO_Write>
 8025c64:	4603      	mov	r3, r0
 8025c66:	461a      	mov	r2, r3
 8025c68:	68fb      	ldr	r3, [r7, #12]
 8025c6a:	4413      	add	r3, r2
 8025c6c:	60fb      	str	r3, [r7, #12]
    break;    
 8025c6e:	bf00      	nop
  }  
  return counter;
 8025c70:	68fb      	ldr	r3, [r7, #12]
}
 8025c72:	4618      	mov	r0, r3
 8025c74:	3710      	adds	r7, #16
 8025c76:	46bd      	mov	sp, r7
 8025c78:	bd80      	pop	{r7, pc}
	...

08025c7c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8025c7c:	b580      	push	{r7, lr}
 8025c7e:	b084      	sub	sp, #16
 8025c80:	af00      	add	r7, sp, #0
 8025c82:	4603      	mov	r3, r0
 8025c84:	6039      	str	r1, [r7, #0]
 8025c86:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8025c88:	2300      	movs	r3, #0
 8025c8a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8025c8c:	683b      	ldr	r3, [r7, #0]
 8025c8e:	4a57      	ldr	r2, [pc, #348]	; (8025dec <wm8994_SetFrequency+0x170>)
 8025c90:	4293      	cmp	r3, r2
 8025c92:	d05f      	beq.n	8025d54 <wm8994_SetFrequency+0xd8>
 8025c94:	683b      	ldr	r3, [r7, #0]
 8025c96:	4a55      	ldr	r2, [pc, #340]	; (8025dec <wm8994_SetFrequency+0x170>)
 8025c98:	4293      	cmp	r3, r2
 8025c9a:	f200 8093 	bhi.w	8025dc4 <wm8994_SetFrequency+0x148>
 8025c9e:	683b      	ldr	r3, [r7, #0]
 8025ca0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8025ca4:	4293      	cmp	r3, r2
 8025ca6:	d047      	beq.n	8025d38 <wm8994_SetFrequency+0xbc>
 8025ca8:	683b      	ldr	r3, [r7, #0]
 8025caa:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8025cae:	4293      	cmp	r3, r2
 8025cb0:	f200 8088 	bhi.w	8025dc4 <wm8994_SetFrequency+0x148>
 8025cb4:	683b      	ldr	r3, [r7, #0]
 8025cb6:	f64a 4244 	movw	r2, #44100	; 0xac44
 8025cba:	4293      	cmp	r3, r2
 8025cbc:	d074      	beq.n	8025da8 <wm8994_SetFrequency+0x12c>
 8025cbe:	683b      	ldr	r3, [r7, #0]
 8025cc0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8025cc4:	4293      	cmp	r3, r2
 8025cc6:	d87d      	bhi.n	8025dc4 <wm8994_SetFrequency+0x148>
 8025cc8:	683b      	ldr	r3, [r7, #0]
 8025cca:	f245 6222 	movw	r2, #22050	; 0x5622
 8025cce:	4293      	cmp	r3, r2
 8025cd0:	d05c      	beq.n	8025d8c <wm8994_SetFrequency+0x110>
 8025cd2:	683b      	ldr	r3, [r7, #0]
 8025cd4:	f245 6222 	movw	r2, #22050	; 0x5622
 8025cd8:	4293      	cmp	r3, r2
 8025cda:	d873      	bhi.n	8025dc4 <wm8994_SetFrequency+0x148>
 8025cdc:	683b      	ldr	r3, [r7, #0]
 8025cde:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8025ce2:	d01b      	beq.n	8025d1c <wm8994_SetFrequency+0xa0>
 8025ce4:	683b      	ldr	r3, [r7, #0]
 8025ce6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8025cea:	d86b      	bhi.n	8025dc4 <wm8994_SetFrequency+0x148>
 8025cec:	683b      	ldr	r3, [r7, #0]
 8025cee:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8025cf2:	d005      	beq.n	8025d00 <wm8994_SetFrequency+0x84>
 8025cf4:	683b      	ldr	r3, [r7, #0]
 8025cf6:	f642 3211 	movw	r2, #11025	; 0x2b11
 8025cfa:	4293      	cmp	r3, r2
 8025cfc:	d038      	beq.n	8025d70 <wm8994_SetFrequency+0xf4>
 8025cfe:	e061      	b.n	8025dc4 <wm8994_SetFrequency+0x148>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8025d00:	88fb      	ldrh	r3, [r7, #6]
 8025d02:	b2db      	uxtb	r3, r3
 8025d04:	2203      	movs	r2, #3
 8025d06:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025d0a:	4618      	mov	r0, r3
 8025d0c:	f000 f890 	bl	8025e30 <CODEC_IO_Write>
 8025d10:	4603      	mov	r3, r0
 8025d12:	461a      	mov	r2, r3
 8025d14:	68fb      	ldr	r3, [r7, #12]
 8025d16:	4413      	add	r3, r2
 8025d18:	60fb      	str	r3, [r7, #12]
    break;
 8025d1a:	e061      	b.n	8025de0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8025d1c:	88fb      	ldrh	r3, [r7, #6]
 8025d1e:	b2db      	uxtb	r3, r3
 8025d20:	2233      	movs	r2, #51	; 0x33
 8025d22:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025d26:	4618      	mov	r0, r3
 8025d28:	f000 f882 	bl	8025e30 <CODEC_IO_Write>
 8025d2c:	4603      	mov	r3, r0
 8025d2e:	461a      	mov	r2, r3
 8025d30:	68fb      	ldr	r3, [r7, #12]
 8025d32:	4413      	add	r3, r2
 8025d34:	60fb      	str	r3, [r7, #12]
    break;
 8025d36:	e053      	b.n	8025de0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8025d38:	88fb      	ldrh	r3, [r7, #6]
 8025d3a:	b2db      	uxtb	r3, r3
 8025d3c:	2283      	movs	r2, #131	; 0x83
 8025d3e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025d42:	4618      	mov	r0, r3
 8025d44:	f000 f874 	bl	8025e30 <CODEC_IO_Write>
 8025d48:	4603      	mov	r3, r0
 8025d4a:	461a      	mov	r2, r3
 8025d4c:	68fb      	ldr	r3, [r7, #12]
 8025d4e:	4413      	add	r3, r2
 8025d50:	60fb      	str	r3, [r7, #12]
    break;
 8025d52:	e045      	b.n	8025de0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8025d54:	88fb      	ldrh	r3, [r7, #6]
 8025d56:	b2db      	uxtb	r3, r3
 8025d58:	22a3      	movs	r2, #163	; 0xa3
 8025d5a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025d5e:	4618      	mov	r0, r3
 8025d60:	f000 f866 	bl	8025e30 <CODEC_IO_Write>
 8025d64:	4603      	mov	r3, r0
 8025d66:	461a      	mov	r2, r3
 8025d68:	68fb      	ldr	r3, [r7, #12]
 8025d6a:	4413      	add	r3, r2
 8025d6c:	60fb      	str	r3, [r7, #12]
    break;
 8025d6e:	e037      	b.n	8025de0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8025d70:	88fb      	ldrh	r3, [r7, #6]
 8025d72:	b2db      	uxtb	r3, r3
 8025d74:	2213      	movs	r2, #19
 8025d76:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025d7a:	4618      	mov	r0, r3
 8025d7c:	f000 f858 	bl	8025e30 <CODEC_IO_Write>
 8025d80:	4603      	mov	r3, r0
 8025d82:	461a      	mov	r2, r3
 8025d84:	68fb      	ldr	r3, [r7, #12]
 8025d86:	4413      	add	r3, r2
 8025d88:	60fb      	str	r3, [r7, #12]
    break;
 8025d8a:	e029      	b.n	8025de0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8025d8c:	88fb      	ldrh	r3, [r7, #6]
 8025d8e:	b2db      	uxtb	r3, r3
 8025d90:	2243      	movs	r2, #67	; 0x43
 8025d92:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025d96:	4618      	mov	r0, r3
 8025d98:	f000 f84a 	bl	8025e30 <CODEC_IO_Write>
 8025d9c:	4603      	mov	r3, r0
 8025d9e:	461a      	mov	r2, r3
 8025da0:	68fb      	ldr	r3, [r7, #12]
 8025da2:	4413      	add	r3, r2
 8025da4:	60fb      	str	r3, [r7, #12]
    break;
 8025da6:	e01b      	b.n	8025de0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8025da8:	88fb      	ldrh	r3, [r7, #6]
 8025daa:	b2db      	uxtb	r3, r3
 8025dac:	2273      	movs	r2, #115	; 0x73
 8025dae:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025db2:	4618      	mov	r0, r3
 8025db4:	f000 f83c 	bl	8025e30 <CODEC_IO_Write>
 8025db8:	4603      	mov	r3, r0
 8025dba:	461a      	mov	r2, r3
 8025dbc:	68fb      	ldr	r3, [r7, #12]
 8025dbe:	4413      	add	r3, r2
 8025dc0:	60fb      	str	r3, [r7, #12]
    break; 
 8025dc2:	e00d      	b.n	8025de0 <wm8994_SetFrequency+0x164>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8025dc4:	88fb      	ldrh	r3, [r7, #6]
 8025dc6:	b2db      	uxtb	r3, r3
 8025dc8:	2283      	movs	r2, #131	; 0x83
 8025dca:	f44f 7104 	mov.w	r1, #528	; 0x210
 8025dce:	4618      	mov	r0, r3
 8025dd0:	f000 f82e 	bl	8025e30 <CODEC_IO_Write>
 8025dd4:	4603      	mov	r3, r0
 8025dd6:	461a      	mov	r2, r3
 8025dd8:	68fb      	ldr	r3, [r7, #12]
 8025dda:	4413      	add	r3, r2
 8025ddc:	60fb      	str	r3, [r7, #12]
    break; 
 8025dde:	bf00      	nop
  }
  return counter;
 8025de0:	68fb      	ldr	r3, [r7, #12]
}
 8025de2:	4618      	mov	r0, r3
 8025de4:	3710      	adds	r7, #16
 8025de6:	46bd      	mov	sp, r7
 8025de8:	bd80      	pop	{r7, pc}
 8025dea:	bf00      	nop
 8025dec:	00017700 	.word	0x00017700

08025df0 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8025df0:	b580      	push	{r7, lr}
 8025df2:	b084      	sub	sp, #16
 8025df4:	af00      	add	r7, sp, #0
 8025df6:	4603      	mov	r3, r0
 8025df8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8025dfa:	2300      	movs	r3, #0
 8025dfc:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8025dfe:	88fb      	ldrh	r3, [r7, #6]
 8025e00:	b2db      	uxtb	r3, r3
 8025e02:	2200      	movs	r2, #0
 8025e04:	2100      	movs	r1, #0
 8025e06:	4618      	mov	r0, r3
 8025e08:	f000 f812 	bl	8025e30 <CODEC_IO_Write>
 8025e0c:	4603      	mov	r3, r0
 8025e0e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8025e10:	4b05      	ldr	r3, [pc, #20]	; (8025e28 <wm8994_Reset+0x38>)
 8025e12:	2200      	movs	r2, #0
 8025e14:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8025e16:	4b05      	ldr	r3, [pc, #20]	; (8025e2c <wm8994_Reset+0x3c>)
 8025e18:	2200      	movs	r2, #0
 8025e1a:	601a      	str	r2, [r3, #0]

  return counter;
 8025e1c:	68fb      	ldr	r3, [r7, #12]
}
 8025e1e:	4618      	mov	r0, r3
 8025e20:	3710      	adds	r7, #16
 8025e22:	46bd      	mov	sp, r7
 8025e24:	bd80      	pop	{r7, pc}
 8025e26:	bf00      	nop
 8025e28:	20018e8c 	.word	0x20018e8c
 8025e2c:	20018e90 	.word	0x20018e90

08025e30 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8025e30:	b580      	push	{r7, lr}
 8025e32:	b084      	sub	sp, #16
 8025e34:	af00      	add	r7, sp, #0
 8025e36:	4603      	mov	r3, r0
 8025e38:	71fb      	strb	r3, [r7, #7]
 8025e3a:	460b      	mov	r3, r1
 8025e3c:	80bb      	strh	r3, [r7, #4]
 8025e3e:	4613      	mov	r3, r2
 8025e40:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8025e42:	2300      	movs	r3, #0
 8025e44:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8025e46:	887a      	ldrh	r2, [r7, #2]
 8025e48:	88b9      	ldrh	r1, [r7, #4]
 8025e4a:	79fb      	ldrb	r3, [r7, #7]
 8025e4c:	4618      	mov	r0, r3
 8025e4e:	f7fb f913 	bl	8021078 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8025e52:	68fb      	ldr	r3, [r7, #12]
 8025e54:	b2db      	uxtb	r3, r3
}
 8025e56:	4618      	mov	r0, r3
 8025e58:	3710      	adds	r7, #16
 8025e5a:	46bd      	mov	sp, r7
 8025e5c:	bd80      	pop	{r7, pc}
	...

08025e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8025e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8025e98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8025e64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8025e66:	e003      	b.n	8025e70 <LoopCopyDataInit>

08025e68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8025e68:	4b0c      	ldr	r3, [pc, #48]	; (8025e9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8025e6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8025e6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8025e6e:	3104      	adds	r1, #4

08025e70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8025e70:	480b      	ldr	r0, [pc, #44]	; (8025ea0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8025e72:	4b0c      	ldr	r3, [pc, #48]	; (8025ea4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8025e74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8025e76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8025e78:	d3f6      	bcc.n	8025e68 <CopyDataInit>
  ldr  r2, =_sbss
 8025e7a:	4a0b      	ldr	r2, [pc, #44]	; (8025ea8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8025e7c:	e002      	b.n	8025e84 <LoopFillZerobss>

08025e7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8025e7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8025e80:	f842 3b04 	str.w	r3, [r2], #4

08025e84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8025e84:	4b09      	ldr	r3, [pc, #36]	; (8025eac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8025e86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8025e88:	d3f9      	bcc.n	8025e7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8025e8a:	f7fd f8a7 	bl	8022fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8025e8e:	f000 f817 	bl	8025ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8025e92:	f7f7 ff11 	bl	801dcb8 <main>
  bx  lr    
 8025e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8025e98:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8025e9c:	0802bea8 	.word	0x0802bea8
  ldr  r0, =_sdata
 8025ea0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8025ea4:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 8025ea8:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8025eac:	20018ea4 	.word	0x20018ea4

08025eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8025eb0:	e7fe      	b.n	8025eb0 <ADC_IRQHandler>
	...

08025eb4 <__errno>:
 8025eb4:	4b01      	ldr	r3, [pc, #4]	; (8025ebc <__errno+0x8>)
 8025eb6:	6818      	ldr	r0, [r3, #0]
 8025eb8:	4770      	bx	lr
 8025eba:	bf00      	nop
 8025ebc:	200000d8 	.word	0x200000d8

08025ec0 <__libc_init_array>:
 8025ec0:	b570      	push	{r4, r5, r6, lr}
 8025ec2:	4d0d      	ldr	r5, [pc, #52]	; (8025ef8 <__libc_init_array+0x38>)
 8025ec4:	4c0d      	ldr	r4, [pc, #52]	; (8025efc <__libc_init_array+0x3c>)
 8025ec6:	1b64      	subs	r4, r4, r5
 8025ec8:	10a4      	asrs	r4, r4, #2
 8025eca:	2600      	movs	r6, #0
 8025ecc:	42a6      	cmp	r6, r4
 8025ece:	d109      	bne.n	8025ee4 <__libc_init_array+0x24>
 8025ed0:	4d0b      	ldr	r5, [pc, #44]	; (8025f00 <__libc_init_array+0x40>)
 8025ed2:	4c0c      	ldr	r4, [pc, #48]	; (8025f04 <__libc_init_array+0x44>)
 8025ed4:	f000 fcde 	bl	8026894 <_init>
 8025ed8:	1b64      	subs	r4, r4, r5
 8025eda:	10a4      	asrs	r4, r4, #2
 8025edc:	2600      	movs	r6, #0
 8025ede:	42a6      	cmp	r6, r4
 8025ee0:	d105      	bne.n	8025eee <__libc_init_array+0x2e>
 8025ee2:	bd70      	pop	{r4, r5, r6, pc}
 8025ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8025ee8:	4798      	blx	r3
 8025eea:	3601      	adds	r6, #1
 8025eec:	e7ee      	b.n	8025ecc <__libc_init_array+0xc>
 8025eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8025ef2:	4798      	blx	r3
 8025ef4:	3601      	adds	r6, #1
 8025ef6:	e7f2      	b.n	8025ede <__libc_init_array+0x1e>
 8025ef8:	0802bea0 	.word	0x0802bea0
 8025efc:	0802bea0 	.word	0x0802bea0
 8025f00:	0802bea0 	.word	0x0802bea0
 8025f04:	0802bea4 	.word	0x0802bea4

08025f08 <malloc>:
 8025f08:	4b02      	ldr	r3, [pc, #8]	; (8025f14 <malloc+0xc>)
 8025f0a:	4601      	mov	r1, r0
 8025f0c:	6818      	ldr	r0, [r3, #0]
 8025f0e:	f000 b8a7 	b.w	8026060 <_malloc_r>
 8025f12:	bf00      	nop
 8025f14:	200000d8 	.word	0x200000d8

08025f18 <free>:
 8025f18:	4b02      	ldr	r3, [pc, #8]	; (8025f24 <free+0xc>)
 8025f1a:	4601      	mov	r1, r0
 8025f1c:	6818      	ldr	r0, [r3, #0]
 8025f1e:	f000 b833 	b.w	8025f88 <_free_r>
 8025f22:	bf00      	nop
 8025f24:	200000d8 	.word	0x200000d8

08025f28 <memcpy>:
 8025f28:	440a      	add	r2, r1
 8025f2a:	4291      	cmp	r1, r2
 8025f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8025f30:	d100      	bne.n	8025f34 <memcpy+0xc>
 8025f32:	4770      	bx	lr
 8025f34:	b510      	push	{r4, lr}
 8025f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025f3e:	4291      	cmp	r1, r2
 8025f40:	d1f9      	bne.n	8025f36 <memcpy+0xe>
 8025f42:	bd10      	pop	{r4, pc}

08025f44 <memmove>:
 8025f44:	4288      	cmp	r0, r1
 8025f46:	b510      	push	{r4, lr}
 8025f48:	eb01 0402 	add.w	r4, r1, r2
 8025f4c:	d902      	bls.n	8025f54 <memmove+0x10>
 8025f4e:	4284      	cmp	r4, r0
 8025f50:	4623      	mov	r3, r4
 8025f52:	d807      	bhi.n	8025f64 <memmove+0x20>
 8025f54:	1e43      	subs	r3, r0, #1
 8025f56:	42a1      	cmp	r1, r4
 8025f58:	d008      	beq.n	8025f6c <memmove+0x28>
 8025f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025f62:	e7f8      	b.n	8025f56 <memmove+0x12>
 8025f64:	4402      	add	r2, r0
 8025f66:	4601      	mov	r1, r0
 8025f68:	428a      	cmp	r2, r1
 8025f6a:	d100      	bne.n	8025f6e <memmove+0x2a>
 8025f6c:	bd10      	pop	{r4, pc}
 8025f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025f76:	e7f7      	b.n	8025f68 <memmove+0x24>

08025f78 <memset>:
 8025f78:	4402      	add	r2, r0
 8025f7a:	4603      	mov	r3, r0
 8025f7c:	4293      	cmp	r3, r2
 8025f7e:	d100      	bne.n	8025f82 <memset+0xa>
 8025f80:	4770      	bx	lr
 8025f82:	f803 1b01 	strb.w	r1, [r3], #1
 8025f86:	e7f9      	b.n	8025f7c <memset+0x4>

08025f88 <_free_r>:
 8025f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025f8a:	2900      	cmp	r1, #0
 8025f8c:	d044      	beq.n	8026018 <_free_r+0x90>
 8025f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025f92:	9001      	str	r0, [sp, #4]
 8025f94:	2b00      	cmp	r3, #0
 8025f96:	f1a1 0404 	sub.w	r4, r1, #4
 8025f9a:	bfb8      	it	lt
 8025f9c:	18e4      	addlt	r4, r4, r3
 8025f9e:	f000 f943 	bl	8026228 <__malloc_lock>
 8025fa2:	4a1e      	ldr	r2, [pc, #120]	; (802601c <_free_r+0x94>)
 8025fa4:	9801      	ldr	r0, [sp, #4]
 8025fa6:	6813      	ldr	r3, [r2, #0]
 8025fa8:	b933      	cbnz	r3, 8025fb8 <_free_r+0x30>
 8025faa:	6063      	str	r3, [r4, #4]
 8025fac:	6014      	str	r4, [r2, #0]
 8025fae:	b003      	add	sp, #12
 8025fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025fb4:	f000 b93e 	b.w	8026234 <__malloc_unlock>
 8025fb8:	42a3      	cmp	r3, r4
 8025fba:	d908      	bls.n	8025fce <_free_r+0x46>
 8025fbc:	6825      	ldr	r5, [r4, #0]
 8025fbe:	1961      	adds	r1, r4, r5
 8025fc0:	428b      	cmp	r3, r1
 8025fc2:	bf01      	itttt	eq
 8025fc4:	6819      	ldreq	r1, [r3, #0]
 8025fc6:	685b      	ldreq	r3, [r3, #4]
 8025fc8:	1949      	addeq	r1, r1, r5
 8025fca:	6021      	streq	r1, [r4, #0]
 8025fcc:	e7ed      	b.n	8025faa <_free_r+0x22>
 8025fce:	461a      	mov	r2, r3
 8025fd0:	685b      	ldr	r3, [r3, #4]
 8025fd2:	b10b      	cbz	r3, 8025fd8 <_free_r+0x50>
 8025fd4:	42a3      	cmp	r3, r4
 8025fd6:	d9fa      	bls.n	8025fce <_free_r+0x46>
 8025fd8:	6811      	ldr	r1, [r2, #0]
 8025fda:	1855      	adds	r5, r2, r1
 8025fdc:	42a5      	cmp	r5, r4
 8025fde:	d10b      	bne.n	8025ff8 <_free_r+0x70>
 8025fe0:	6824      	ldr	r4, [r4, #0]
 8025fe2:	4421      	add	r1, r4
 8025fe4:	1854      	adds	r4, r2, r1
 8025fe6:	42a3      	cmp	r3, r4
 8025fe8:	6011      	str	r1, [r2, #0]
 8025fea:	d1e0      	bne.n	8025fae <_free_r+0x26>
 8025fec:	681c      	ldr	r4, [r3, #0]
 8025fee:	685b      	ldr	r3, [r3, #4]
 8025ff0:	6053      	str	r3, [r2, #4]
 8025ff2:	4421      	add	r1, r4
 8025ff4:	6011      	str	r1, [r2, #0]
 8025ff6:	e7da      	b.n	8025fae <_free_r+0x26>
 8025ff8:	d902      	bls.n	8026000 <_free_r+0x78>
 8025ffa:	230c      	movs	r3, #12
 8025ffc:	6003      	str	r3, [r0, #0]
 8025ffe:	e7d6      	b.n	8025fae <_free_r+0x26>
 8026000:	6825      	ldr	r5, [r4, #0]
 8026002:	1961      	adds	r1, r4, r5
 8026004:	428b      	cmp	r3, r1
 8026006:	bf04      	itt	eq
 8026008:	6819      	ldreq	r1, [r3, #0]
 802600a:	685b      	ldreq	r3, [r3, #4]
 802600c:	6063      	str	r3, [r4, #4]
 802600e:	bf04      	itt	eq
 8026010:	1949      	addeq	r1, r1, r5
 8026012:	6021      	streq	r1, [r4, #0]
 8026014:	6054      	str	r4, [r2, #4]
 8026016:	e7ca      	b.n	8025fae <_free_r+0x26>
 8026018:	b003      	add	sp, #12
 802601a:	bd30      	pop	{r4, r5, pc}
 802601c:	20018e94 	.word	0x20018e94

08026020 <sbrk_aligned>:
 8026020:	b570      	push	{r4, r5, r6, lr}
 8026022:	4e0e      	ldr	r6, [pc, #56]	; (802605c <sbrk_aligned+0x3c>)
 8026024:	460c      	mov	r4, r1
 8026026:	6831      	ldr	r1, [r6, #0]
 8026028:	4605      	mov	r5, r0
 802602a:	b911      	cbnz	r1, 8026032 <sbrk_aligned+0x12>
 802602c:	f000 f88c 	bl	8026148 <_sbrk_r>
 8026030:	6030      	str	r0, [r6, #0]
 8026032:	4621      	mov	r1, r4
 8026034:	4628      	mov	r0, r5
 8026036:	f000 f887 	bl	8026148 <_sbrk_r>
 802603a:	1c43      	adds	r3, r0, #1
 802603c:	d00a      	beq.n	8026054 <sbrk_aligned+0x34>
 802603e:	1cc4      	adds	r4, r0, #3
 8026040:	f024 0403 	bic.w	r4, r4, #3
 8026044:	42a0      	cmp	r0, r4
 8026046:	d007      	beq.n	8026058 <sbrk_aligned+0x38>
 8026048:	1a21      	subs	r1, r4, r0
 802604a:	4628      	mov	r0, r5
 802604c:	f000 f87c 	bl	8026148 <_sbrk_r>
 8026050:	3001      	adds	r0, #1
 8026052:	d101      	bne.n	8026058 <sbrk_aligned+0x38>
 8026054:	f04f 34ff 	mov.w	r4, #4294967295
 8026058:	4620      	mov	r0, r4
 802605a:	bd70      	pop	{r4, r5, r6, pc}
 802605c:	20018e98 	.word	0x20018e98

08026060 <_malloc_r>:
 8026060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026064:	1ccd      	adds	r5, r1, #3
 8026066:	f025 0503 	bic.w	r5, r5, #3
 802606a:	3508      	adds	r5, #8
 802606c:	2d0c      	cmp	r5, #12
 802606e:	bf38      	it	cc
 8026070:	250c      	movcc	r5, #12
 8026072:	2d00      	cmp	r5, #0
 8026074:	4607      	mov	r7, r0
 8026076:	db01      	blt.n	802607c <_malloc_r+0x1c>
 8026078:	42a9      	cmp	r1, r5
 802607a:	d905      	bls.n	8026088 <_malloc_r+0x28>
 802607c:	230c      	movs	r3, #12
 802607e:	603b      	str	r3, [r7, #0]
 8026080:	2600      	movs	r6, #0
 8026082:	4630      	mov	r0, r6
 8026084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026088:	4e2e      	ldr	r6, [pc, #184]	; (8026144 <_malloc_r+0xe4>)
 802608a:	f000 f8cd 	bl	8026228 <__malloc_lock>
 802608e:	6833      	ldr	r3, [r6, #0]
 8026090:	461c      	mov	r4, r3
 8026092:	bb34      	cbnz	r4, 80260e2 <_malloc_r+0x82>
 8026094:	4629      	mov	r1, r5
 8026096:	4638      	mov	r0, r7
 8026098:	f7ff ffc2 	bl	8026020 <sbrk_aligned>
 802609c:	1c43      	adds	r3, r0, #1
 802609e:	4604      	mov	r4, r0
 80260a0:	d14d      	bne.n	802613e <_malloc_r+0xde>
 80260a2:	6834      	ldr	r4, [r6, #0]
 80260a4:	4626      	mov	r6, r4
 80260a6:	2e00      	cmp	r6, #0
 80260a8:	d140      	bne.n	802612c <_malloc_r+0xcc>
 80260aa:	6823      	ldr	r3, [r4, #0]
 80260ac:	4631      	mov	r1, r6
 80260ae:	4638      	mov	r0, r7
 80260b0:	eb04 0803 	add.w	r8, r4, r3
 80260b4:	f000 f848 	bl	8026148 <_sbrk_r>
 80260b8:	4580      	cmp	r8, r0
 80260ba:	d13a      	bne.n	8026132 <_malloc_r+0xd2>
 80260bc:	6821      	ldr	r1, [r4, #0]
 80260be:	3503      	adds	r5, #3
 80260c0:	1a6d      	subs	r5, r5, r1
 80260c2:	f025 0503 	bic.w	r5, r5, #3
 80260c6:	3508      	adds	r5, #8
 80260c8:	2d0c      	cmp	r5, #12
 80260ca:	bf38      	it	cc
 80260cc:	250c      	movcc	r5, #12
 80260ce:	4629      	mov	r1, r5
 80260d0:	4638      	mov	r0, r7
 80260d2:	f7ff ffa5 	bl	8026020 <sbrk_aligned>
 80260d6:	3001      	adds	r0, #1
 80260d8:	d02b      	beq.n	8026132 <_malloc_r+0xd2>
 80260da:	6823      	ldr	r3, [r4, #0]
 80260dc:	442b      	add	r3, r5
 80260de:	6023      	str	r3, [r4, #0]
 80260e0:	e00e      	b.n	8026100 <_malloc_r+0xa0>
 80260e2:	6822      	ldr	r2, [r4, #0]
 80260e4:	1b52      	subs	r2, r2, r5
 80260e6:	d41e      	bmi.n	8026126 <_malloc_r+0xc6>
 80260e8:	2a0b      	cmp	r2, #11
 80260ea:	d916      	bls.n	802611a <_malloc_r+0xba>
 80260ec:	1961      	adds	r1, r4, r5
 80260ee:	42a3      	cmp	r3, r4
 80260f0:	6025      	str	r5, [r4, #0]
 80260f2:	bf18      	it	ne
 80260f4:	6059      	strne	r1, [r3, #4]
 80260f6:	6863      	ldr	r3, [r4, #4]
 80260f8:	bf08      	it	eq
 80260fa:	6031      	streq	r1, [r6, #0]
 80260fc:	5162      	str	r2, [r4, r5]
 80260fe:	604b      	str	r3, [r1, #4]
 8026100:	4638      	mov	r0, r7
 8026102:	f104 060b 	add.w	r6, r4, #11
 8026106:	f000 f895 	bl	8026234 <__malloc_unlock>
 802610a:	f026 0607 	bic.w	r6, r6, #7
 802610e:	1d23      	adds	r3, r4, #4
 8026110:	1af2      	subs	r2, r6, r3
 8026112:	d0b6      	beq.n	8026082 <_malloc_r+0x22>
 8026114:	1b9b      	subs	r3, r3, r6
 8026116:	50a3      	str	r3, [r4, r2]
 8026118:	e7b3      	b.n	8026082 <_malloc_r+0x22>
 802611a:	6862      	ldr	r2, [r4, #4]
 802611c:	42a3      	cmp	r3, r4
 802611e:	bf0c      	ite	eq
 8026120:	6032      	streq	r2, [r6, #0]
 8026122:	605a      	strne	r2, [r3, #4]
 8026124:	e7ec      	b.n	8026100 <_malloc_r+0xa0>
 8026126:	4623      	mov	r3, r4
 8026128:	6864      	ldr	r4, [r4, #4]
 802612a:	e7b2      	b.n	8026092 <_malloc_r+0x32>
 802612c:	4634      	mov	r4, r6
 802612e:	6876      	ldr	r6, [r6, #4]
 8026130:	e7b9      	b.n	80260a6 <_malloc_r+0x46>
 8026132:	230c      	movs	r3, #12
 8026134:	603b      	str	r3, [r7, #0]
 8026136:	4638      	mov	r0, r7
 8026138:	f000 f87c 	bl	8026234 <__malloc_unlock>
 802613c:	e7a1      	b.n	8026082 <_malloc_r+0x22>
 802613e:	6025      	str	r5, [r4, #0]
 8026140:	e7de      	b.n	8026100 <_malloc_r+0xa0>
 8026142:	bf00      	nop
 8026144:	20018e94 	.word	0x20018e94

08026148 <_sbrk_r>:
 8026148:	b538      	push	{r3, r4, r5, lr}
 802614a:	4d06      	ldr	r5, [pc, #24]	; (8026164 <_sbrk_r+0x1c>)
 802614c:	2300      	movs	r3, #0
 802614e:	4604      	mov	r4, r0
 8026150:	4608      	mov	r0, r1
 8026152:	602b      	str	r3, [r5, #0]
 8026154:	f7fc ff16 	bl	8022f84 <_sbrk>
 8026158:	1c43      	adds	r3, r0, #1
 802615a:	d102      	bne.n	8026162 <_sbrk_r+0x1a>
 802615c:	682b      	ldr	r3, [r5, #0]
 802615e:	b103      	cbz	r3, 8026162 <_sbrk_r+0x1a>
 8026160:	6023      	str	r3, [r4, #0]
 8026162:	bd38      	pop	{r3, r4, r5, pc}
 8026164:	20018e9c 	.word	0x20018e9c

08026168 <siprintf>:
 8026168:	b40e      	push	{r1, r2, r3}
 802616a:	b500      	push	{lr}
 802616c:	b09c      	sub	sp, #112	; 0x70
 802616e:	ab1d      	add	r3, sp, #116	; 0x74
 8026170:	9002      	str	r0, [sp, #8]
 8026172:	9006      	str	r0, [sp, #24]
 8026174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026178:	4809      	ldr	r0, [pc, #36]	; (80261a0 <siprintf+0x38>)
 802617a:	9107      	str	r1, [sp, #28]
 802617c:	9104      	str	r1, [sp, #16]
 802617e:	4909      	ldr	r1, [pc, #36]	; (80261a4 <siprintf+0x3c>)
 8026180:	f853 2b04 	ldr.w	r2, [r3], #4
 8026184:	9105      	str	r1, [sp, #20]
 8026186:	6800      	ldr	r0, [r0, #0]
 8026188:	9301      	str	r3, [sp, #4]
 802618a:	a902      	add	r1, sp, #8
 802618c:	f000 f8b4 	bl	80262f8 <_svfiprintf_r>
 8026190:	9b02      	ldr	r3, [sp, #8]
 8026192:	2200      	movs	r2, #0
 8026194:	701a      	strb	r2, [r3, #0]
 8026196:	b01c      	add	sp, #112	; 0x70
 8026198:	f85d eb04 	ldr.w	lr, [sp], #4
 802619c:	b003      	add	sp, #12
 802619e:	4770      	bx	lr
 80261a0:	200000d8 	.word	0x200000d8
 80261a4:	ffff0208 	.word	0xffff0208

080261a8 <strcat>:
 80261a8:	b510      	push	{r4, lr}
 80261aa:	4602      	mov	r2, r0
 80261ac:	7814      	ldrb	r4, [r2, #0]
 80261ae:	4613      	mov	r3, r2
 80261b0:	3201      	adds	r2, #1
 80261b2:	2c00      	cmp	r4, #0
 80261b4:	d1fa      	bne.n	80261ac <strcat+0x4>
 80261b6:	3b01      	subs	r3, #1
 80261b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80261bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80261c0:	2a00      	cmp	r2, #0
 80261c2:	d1f9      	bne.n	80261b8 <strcat+0x10>
 80261c4:	bd10      	pop	{r4, pc}

080261c6 <strncmp>:
 80261c6:	b510      	push	{r4, lr}
 80261c8:	b17a      	cbz	r2, 80261ea <strncmp+0x24>
 80261ca:	4603      	mov	r3, r0
 80261cc:	3901      	subs	r1, #1
 80261ce:	1884      	adds	r4, r0, r2
 80261d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80261d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80261d8:	4290      	cmp	r0, r2
 80261da:	d101      	bne.n	80261e0 <strncmp+0x1a>
 80261dc:	42a3      	cmp	r3, r4
 80261de:	d101      	bne.n	80261e4 <strncmp+0x1e>
 80261e0:	1a80      	subs	r0, r0, r2
 80261e2:	bd10      	pop	{r4, pc}
 80261e4:	2800      	cmp	r0, #0
 80261e6:	d1f3      	bne.n	80261d0 <strncmp+0xa>
 80261e8:	e7fa      	b.n	80261e0 <strncmp+0x1a>
 80261ea:	4610      	mov	r0, r2
 80261ec:	e7f9      	b.n	80261e2 <strncmp+0x1c>

080261ee <wcscat>:
 80261ee:	b510      	push	{r4, lr}
 80261f0:	4602      	mov	r2, r0
 80261f2:	4613      	mov	r3, r2
 80261f4:	f852 4b04 	ldr.w	r4, [r2], #4
 80261f8:	2c00      	cmp	r4, #0
 80261fa:	d1fa      	bne.n	80261f2 <wcscat+0x4>
 80261fc:	3904      	subs	r1, #4
 80261fe:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8026202:	b90a      	cbnz	r2, 8026208 <wcscat+0x1a>
 8026204:	601a      	str	r2, [r3, #0]
 8026206:	bd10      	pop	{r4, pc}
 8026208:	f843 2b04 	str.w	r2, [r3], #4
 802620c:	e7f7      	b.n	80261fe <wcscat+0x10>

0802620e <wcscpy>:
 802620e:	2300      	movs	r3, #0
 8026210:	6003      	str	r3, [r0, #0]
 8026212:	3904      	subs	r1, #4
 8026214:	4603      	mov	r3, r0
 8026216:	f851 2f04 	ldr.w	r2, [r1, #4]!
 802621a:	b90a      	cbnz	r2, 8026220 <wcscpy+0x12>
 802621c:	601a      	str	r2, [r3, #0]
 802621e:	4770      	bx	lr
 8026220:	f843 2b04 	str.w	r2, [r3], #4
 8026224:	e7f7      	b.n	8026216 <wcscpy+0x8>
	...

08026228 <__malloc_lock>:
 8026228:	4801      	ldr	r0, [pc, #4]	; (8026230 <__malloc_lock+0x8>)
 802622a:	f000 baf9 	b.w	8026820 <__retarget_lock_acquire_recursive>
 802622e:	bf00      	nop
 8026230:	20018ea0 	.word	0x20018ea0

08026234 <__malloc_unlock>:
 8026234:	4801      	ldr	r0, [pc, #4]	; (802623c <__malloc_unlock+0x8>)
 8026236:	f000 baf4 	b.w	8026822 <__retarget_lock_release_recursive>
 802623a:	bf00      	nop
 802623c:	20018ea0 	.word	0x20018ea0

08026240 <__ssputs_r>:
 8026240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026244:	688e      	ldr	r6, [r1, #8]
 8026246:	429e      	cmp	r6, r3
 8026248:	4682      	mov	sl, r0
 802624a:	460c      	mov	r4, r1
 802624c:	4690      	mov	r8, r2
 802624e:	461f      	mov	r7, r3
 8026250:	d838      	bhi.n	80262c4 <__ssputs_r+0x84>
 8026252:	898a      	ldrh	r2, [r1, #12]
 8026254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026258:	d032      	beq.n	80262c0 <__ssputs_r+0x80>
 802625a:	6825      	ldr	r5, [r4, #0]
 802625c:	6909      	ldr	r1, [r1, #16]
 802625e:	eba5 0901 	sub.w	r9, r5, r1
 8026262:	6965      	ldr	r5, [r4, #20]
 8026264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802626c:	3301      	adds	r3, #1
 802626e:	444b      	add	r3, r9
 8026270:	106d      	asrs	r5, r5, #1
 8026272:	429d      	cmp	r5, r3
 8026274:	bf38      	it	cc
 8026276:	461d      	movcc	r5, r3
 8026278:	0553      	lsls	r3, r2, #21
 802627a:	d531      	bpl.n	80262e0 <__ssputs_r+0xa0>
 802627c:	4629      	mov	r1, r5
 802627e:	f7ff feef 	bl	8026060 <_malloc_r>
 8026282:	4606      	mov	r6, r0
 8026284:	b950      	cbnz	r0, 802629c <__ssputs_r+0x5c>
 8026286:	230c      	movs	r3, #12
 8026288:	f8ca 3000 	str.w	r3, [sl]
 802628c:	89a3      	ldrh	r3, [r4, #12]
 802628e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026292:	81a3      	strh	r3, [r4, #12]
 8026294:	f04f 30ff 	mov.w	r0, #4294967295
 8026298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802629c:	6921      	ldr	r1, [r4, #16]
 802629e:	464a      	mov	r2, r9
 80262a0:	f7ff fe42 	bl	8025f28 <memcpy>
 80262a4:	89a3      	ldrh	r3, [r4, #12]
 80262a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80262aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80262ae:	81a3      	strh	r3, [r4, #12]
 80262b0:	6126      	str	r6, [r4, #16]
 80262b2:	6165      	str	r5, [r4, #20]
 80262b4:	444e      	add	r6, r9
 80262b6:	eba5 0509 	sub.w	r5, r5, r9
 80262ba:	6026      	str	r6, [r4, #0]
 80262bc:	60a5      	str	r5, [r4, #8]
 80262be:	463e      	mov	r6, r7
 80262c0:	42be      	cmp	r6, r7
 80262c2:	d900      	bls.n	80262c6 <__ssputs_r+0x86>
 80262c4:	463e      	mov	r6, r7
 80262c6:	6820      	ldr	r0, [r4, #0]
 80262c8:	4632      	mov	r2, r6
 80262ca:	4641      	mov	r1, r8
 80262cc:	f7ff fe3a 	bl	8025f44 <memmove>
 80262d0:	68a3      	ldr	r3, [r4, #8]
 80262d2:	1b9b      	subs	r3, r3, r6
 80262d4:	60a3      	str	r3, [r4, #8]
 80262d6:	6823      	ldr	r3, [r4, #0]
 80262d8:	4433      	add	r3, r6
 80262da:	6023      	str	r3, [r4, #0]
 80262dc:	2000      	movs	r0, #0
 80262de:	e7db      	b.n	8026298 <__ssputs_r+0x58>
 80262e0:	462a      	mov	r2, r5
 80262e2:	f000 fa9f 	bl	8026824 <_realloc_r>
 80262e6:	4606      	mov	r6, r0
 80262e8:	2800      	cmp	r0, #0
 80262ea:	d1e1      	bne.n	80262b0 <__ssputs_r+0x70>
 80262ec:	6921      	ldr	r1, [r4, #16]
 80262ee:	4650      	mov	r0, sl
 80262f0:	f7ff fe4a 	bl	8025f88 <_free_r>
 80262f4:	e7c7      	b.n	8026286 <__ssputs_r+0x46>
	...

080262f8 <_svfiprintf_r>:
 80262f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262fc:	4698      	mov	r8, r3
 80262fe:	898b      	ldrh	r3, [r1, #12]
 8026300:	061b      	lsls	r3, r3, #24
 8026302:	b09d      	sub	sp, #116	; 0x74
 8026304:	4607      	mov	r7, r0
 8026306:	460d      	mov	r5, r1
 8026308:	4614      	mov	r4, r2
 802630a:	d50e      	bpl.n	802632a <_svfiprintf_r+0x32>
 802630c:	690b      	ldr	r3, [r1, #16]
 802630e:	b963      	cbnz	r3, 802632a <_svfiprintf_r+0x32>
 8026310:	2140      	movs	r1, #64	; 0x40
 8026312:	f7ff fea5 	bl	8026060 <_malloc_r>
 8026316:	6028      	str	r0, [r5, #0]
 8026318:	6128      	str	r0, [r5, #16]
 802631a:	b920      	cbnz	r0, 8026326 <_svfiprintf_r+0x2e>
 802631c:	230c      	movs	r3, #12
 802631e:	603b      	str	r3, [r7, #0]
 8026320:	f04f 30ff 	mov.w	r0, #4294967295
 8026324:	e0d1      	b.n	80264ca <_svfiprintf_r+0x1d2>
 8026326:	2340      	movs	r3, #64	; 0x40
 8026328:	616b      	str	r3, [r5, #20]
 802632a:	2300      	movs	r3, #0
 802632c:	9309      	str	r3, [sp, #36]	; 0x24
 802632e:	2320      	movs	r3, #32
 8026330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026334:	f8cd 800c 	str.w	r8, [sp, #12]
 8026338:	2330      	movs	r3, #48	; 0x30
 802633a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80264e4 <_svfiprintf_r+0x1ec>
 802633e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026342:	f04f 0901 	mov.w	r9, #1
 8026346:	4623      	mov	r3, r4
 8026348:	469a      	mov	sl, r3
 802634a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802634e:	b10a      	cbz	r2, 8026354 <_svfiprintf_r+0x5c>
 8026350:	2a25      	cmp	r2, #37	; 0x25
 8026352:	d1f9      	bne.n	8026348 <_svfiprintf_r+0x50>
 8026354:	ebba 0b04 	subs.w	fp, sl, r4
 8026358:	d00b      	beq.n	8026372 <_svfiprintf_r+0x7a>
 802635a:	465b      	mov	r3, fp
 802635c:	4622      	mov	r2, r4
 802635e:	4629      	mov	r1, r5
 8026360:	4638      	mov	r0, r7
 8026362:	f7ff ff6d 	bl	8026240 <__ssputs_r>
 8026366:	3001      	adds	r0, #1
 8026368:	f000 80aa 	beq.w	80264c0 <_svfiprintf_r+0x1c8>
 802636c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802636e:	445a      	add	r2, fp
 8026370:	9209      	str	r2, [sp, #36]	; 0x24
 8026372:	f89a 3000 	ldrb.w	r3, [sl]
 8026376:	2b00      	cmp	r3, #0
 8026378:	f000 80a2 	beq.w	80264c0 <_svfiprintf_r+0x1c8>
 802637c:	2300      	movs	r3, #0
 802637e:	f04f 32ff 	mov.w	r2, #4294967295
 8026382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026386:	f10a 0a01 	add.w	sl, sl, #1
 802638a:	9304      	str	r3, [sp, #16]
 802638c:	9307      	str	r3, [sp, #28]
 802638e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026392:	931a      	str	r3, [sp, #104]	; 0x68
 8026394:	4654      	mov	r4, sl
 8026396:	2205      	movs	r2, #5
 8026398:	f814 1b01 	ldrb.w	r1, [r4], #1
 802639c:	4851      	ldr	r0, [pc, #324]	; (80264e4 <_svfiprintf_r+0x1ec>)
 802639e:	f7d9 ff47 	bl	8000230 <memchr>
 80263a2:	9a04      	ldr	r2, [sp, #16]
 80263a4:	b9d8      	cbnz	r0, 80263de <_svfiprintf_r+0xe6>
 80263a6:	06d0      	lsls	r0, r2, #27
 80263a8:	bf44      	itt	mi
 80263aa:	2320      	movmi	r3, #32
 80263ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80263b0:	0711      	lsls	r1, r2, #28
 80263b2:	bf44      	itt	mi
 80263b4:	232b      	movmi	r3, #43	; 0x2b
 80263b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80263ba:	f89a 3000 	ldrb.w	r3, [sl]
 80263be:	2b2a      	cmp	r3, #42	; 0x2a
 80263c0:	d015      	beq.n	80263ee <_svfiprintf_r+0xf6>
 80263c2:	9a07      	ldr	r2, [sp, #28]
 80263c4:	4654      	mov	r4, sl
 80263c6:	2000      	movs	r0, #0
 80263c8:	f04f 0c0a 	mov.w	ip, #10
 80263cc:	4621      	mov	r1, r4
 80263ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80263d2:	3b30      	subs	r3, #48	; 0x30
 80263d4:	2b09      	cmp	r3, #9
 80263d6:	d94e      	bls.n	8026476 <_svfiprintf_r+0x17e>
 80263d8:	b1b0      	cbz	r0, 8026408 <_svfiprintf_r+0x110>
 80263da:	9207      	str	r2, [sp, #28]
 80263dc:	e014      	b.n	8026408 <_svfiprintf_r+0x110>
 80263de:	eba0 0308 	sub.w	r3, r0, r8
 80263e2:	fa09 f303 	lsl.w	r3, r9, r3
 80263e6:	4313      	orrs	r3, r2
 80263e8:	9304      	str	r3, [sp, #16]
 80263ea:	46a2      	mov	sl, r4
 80263ec:	e7d2      	b.n	8026394 <_svfiprintf_r+0x9c>
 80263ee:	9b03      	ldr	r3, [sp, #12]
 80263f0:	1d19      	adds	r1, r3, #4
 80263f2:	681b      	ldr	r3, [r3, #0]
 80263f4:	9103      	str	r1, [sp, #12]
 80263f6:	2b00      	cmp	r3, #0
 80263f8:	bfbb      	ittet	lt
 80263fa:	425b      	neglt	r3, r3
 80263fc:	f042 0202 	orrlt.w	r2, r2, #2
 8026400:	9307      	strge	r3, [sp, #28]
 8026402:	9307      	strlt	r3, [sp, #28]
 8026404:	bfb8      	it	lt
 8026406:	9204      	strlt	r2, [sp, #16]
 8026408:	7823      	ldrb	r3, [r4, #0]
 802640a:	2b2e      	cmp	r3, #46	; 0x2e
 802640c:	d10c      	bne.n	8026428 <_svfiprintf_r+0x130>
 802640e:	7863      	ldrb	r3, [r4, #1]
 8026410:	2b2a      	cmp	r3, #42	; 0x2a
 8026412:	d135      	bne.n	8026480 <_svfiprintf_r+0x188>
 8026414:	9b03      	ldr	r3, [sp, #12]
 8026416:	1d1a      	adds	r2, r3, #4
 8026418:	681b      	ldr	r3, [r3, #0]
 802641a:	9203      	str	r2, [sp, #12]
 802641c:	2b00      	cmp	r3, #0
 802641e:	bfb8      	it	lt
 8026420:	f04f 33ff 	movlt.w	r3, #4294967295
 8026424:	3402      	adds	r4, #2
 8026426:	9305      	str	r3, [sp, #20]
 8026428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80264f4 <_svfiprintf_r+0x1fc>
 802642c:	7821      	ldrb	r1, [r4, #0]
 802642e:	2203      	movs	r2, #3
 8026430:	4650      	mov	r0, sl
 8026432:	f7d9 fefd 	bl	8000230 <memchr>
 8026436:	b140      	cbz	r0, 802644a <_svfiprintf_r+0x152>
 8026438:	2340      	movs	r3, #64	; 0x40
 802643a:	eba0 000a 	sub.w	r0, r0, sl
 802643e:	fa03 f000 	lsl.w	r0, r3, r0
 8026442:	9b04      	ldr	r3, [sp, #16]
 8026444:	4303      	orrs	r3, r0
 8026446:	3401      	adds	r4, #1
 8026448:	9304      	str	r3, [sp, #16]
 802644a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802644e:	4826      	ldr	r0, [pc, #152]	; (80264e8 <_svfiprintf_r+0x1f0>)
 8026450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026454:	2206      	movs	r2, #6
 8026456:	f7d9 feeb 	bl	8000230 <memchr>
 802645a:	2800      	cmp	r0, #0
 802645c:	d038      	beq.n	80264d0 <_svfiprintf_r+0x1d8>
 802645e:	4b23      	ldr	r3, [pc, #140]	; (80264ec <_svfiprintf_r+0x1f4>)
 8026460:	bb1b      	cbnz	r3, 80264aa <_svfiprintf_r+0x1b2>
 8026462:	9b03      	ldr	r3, [sp, #12]
 8026464:	3307      	adds	r3, #7
 8026466:	f023 0307 	bic.w	r3, r3, #7
 802646a:	3308      	adds	r3, #8
 802646c:	9303      	str	r3, [sp, #12]
 802646e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026470:	4433      	add	r3, r6
 8026472:	9309      	str	r3, [sp, #36]	; 0x24
 8026474:	e767      	b.n	8026346 <_svfiprintf_r+0x4e>
 8026476:	fb0c 3202 	mla	r2, ip, r2, r3
 802647a:	460c      	mov	r4, r1
 802647c:	2001      	movs	r0, #1
 802647e:	e7a5      	b.n	80263cc <_svfiprintf_r+0xd4>
 8026480:	2300      	movs	r3, #0
 8026482:	3401      	adds	r4, #1
 8026484:	9305      	str	r3, [sp, #20]
 8026486:	4619      	mov	r1, r3
 8026488:	f04f 0c0a 	mov.w	ip, #10
 802648c:	4620      	mov	r0, r4
 802648e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026492:	3a30      	subs	r2, #48	; 0x30
 8026494:	2a09      	cmp	r2, #9
 8026496:	d903      	bls.n	80264a0 <_svfiprintf_r+0x1a8>
 8026498:	2b00      	cmp	r3, #0
 802649a:	d0c5      	beq.n	8026428 <_svfiprintf_r+0x130>
 802649c:	9105      	str	r1, [sp, #20]
 802649e:	e7c3      	b.n	8026428 <_svfiprintf_r+0x130>
 80264a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80264a4:	4604      	mov	r4, r0
 80264a6:	2301      	movs	r3, #1
 80264a8:	e7f0      	b.n	802648c <_svfiprintf_r+0x194>
 80264aa:	ab03      	add	r3, sp, #12
 80264ac:	9300      	str	r3, [sp, #0]
 80264ae:	462a      	mov	r2, r5
 80264b0:	4b0f      	ldr	r3, [pc, #60]	; (80264f0 <_svfiprintf_r+0x1f8>)
 80264b2:	a904      	add	r1, sp, #16
 80264b4:	4638      	mov	r0, r7
 80264b6:	f3af 8000 	nop.w
 80264ba:	1c42      	adds	r2, r0, #1
 80264bc:	4606      	mov	r6, r0
 80264be:	d1d6      	bne.n	802646e <_svfiprintf_r+0x176>
 80264c0:	89ab      	ldrh	r3, [r5, #12]
 80264c2:	065b      	lsls	r3, r3, #25
 80264c4:	f53f af2c 	bmi.w	8026320 <_svfiprintf_r+0x28>
 80264c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80264ca:	b01d      	add	sp, #116	; 0x74
 80264cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264d0:	ab03      	add	r3, sp, #12
 80264d2:	9300      	str	r3, [sp, #0]
 80264d4:	462a      	mov	r2, r5
 80264d6:	4b06      	ldr	r3, [pc, #24]	; (80264f0 <_svfiprintf_r+0x1f8>)
 80264d8:	a904      	add	r1, sp, #16
 80264da:	4638      	mov	r0, r7
 80264dc:	f000 f87a 	bl	80265d4 <_printf_i>
 80264e0:	e7eb      	b.n	80264ba <_svfiprintf_r+0x1c2>
 80264e2:	bf00      	nop
 80264e4:	0802be64 	.word	0x0802be64
 80264e8:	0802be6e 	.word	0x0802be6e
 80264ec:	00000000 	.word	0x00000000
 80264f0:	08026241 	.word	0x08026241
 80264f4:	0802be6a 	.word	0x0802be6a

080264f8 <_printf_common>:
 80264f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80264fc:	4616      	mov	r6, r2
 80264fe:	4699      	mov	r9, r3
 8026500:	688a      	ldr	r2, [r1, #8]
 8026502:	690b      	ldr	r3, [r1, #16]
 8026504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026508:	4293      	cmp	r3, r2
 802650a:	bfb8      	it	lt
 802650c:	4613      	movlt	r3, r2
 802650e:	6033      	str	r3, [r6, #0]
 8026510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026514:	4607      	mov	r7, r0
 8026516:	460c      	mov	r4, r1
 8026518:	b10a      	cbz	r2, 802651e <_printf_common+0x26>
 802651a:	3301      	adds	r3, #1
 802651c:	6033      	str	r3, [r6, #0]
 802651e:	6823      	ldr	r3, [r4, #0]
 8026520:	0699      	lsls	r1, r3, #26
 8026522:	bf42      	ittt	mi
 8026524:	6833      	ldrmi	r3, [r6, #0]
 8026526:	3302      	addmi	r3, #2
 8026528:	6033      	strmi	r3, [r6, #0]
 802652a:	6825      	ldr	r5, [r4, #0]
 802652c:	f015 0506 	ands.w	r5, r5, #6
 8026530:	d106      	bne.n	8026540 <_printf_common+0x48>
 8026532:	f104 0a19 	add.w	sl, r4, #25
 8026536:	68e3      	ldr	r3, [r4, #12]
 8026538:	6832      	ldr	r2, [r6, #0]
 802653a:	1a9b      	subs	r3, r3, r2
 802653c:	42ab      	cmp	r3, r5
 802653e:	dc26      	bgt.n	802658e <_printf_common+0x96>
 8026540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026544:	1e13      	subs	r3, r2, #0
 8026546:	6822      	ldr	r2, [r4, #0]
 8026548:	bf18      	it	ne
 802654a:	2301      	movne	r3, #1
 802654c:	0692      	lsls	r2, r2, #26
 802654e:	d42b      	bmi.n	80265a8 <_printf_common+0xb0>
 8026550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026554:	4649      	mov	r1, r9
 8026556:	4638      	mov	r0, r7
 8026558:	47c0      	blx	r8
 802655a:	3001      	adds	r0, #1
 802655c:	d01e      	beq.n	802659c <_printf_common+0xa4>
 802655e:	6823      	ldr	r3, [r4, #0]
 8026560:	68e5      	ldr	r5, [r4, #12]
 8026562:	6832      	ldr	r2, [r6, #0]
 8026564:	f003 0306 	and.w	r3, r3, #6
 8026568:	2b04      	cmp	r3, #4
 802656a:	bf08      	it	eq
 802656c:	1aad      	subeq	r5, r5, r2
 802656e:	68a3      	ldr	r3, [r4, #8]
 8026570:	6922      	ldr	r2, [r4, #16]
 8026572:	bf0c      	ite	eq
 8026574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026578:	2500      	movne	r5, #0
 802657a:	4293      	cmp	r3, r2
 802657c:	bfc4      	itt	gt
 802657e:	1a9b      	subgt	r3, r3, r2
 8026580:	18ed      	addgt	r5, r5, r3
 8026582:	2600      	movs	r6, #0
 8026584:	341a      	adds	r4, #26
 8026586:	42b5      	cmp	r5, r6
 8026588:	d11a      	bne.n	80265c0 <_printf_common+0xc8>
 802658a:	2000      	movs	r0, #0
 802658c:	e008      	b.n	80265a0 <_printf_common+0xa8>
 802658e:	2301      	movs	r3, #1
 8026590:	4652      	mov	r2, sl
 8026592:	4649      	mov	r1, r9
 8026594:	4638      	mov	r0, r7
 8026596:	47c0      	blx	r8
 8026598:	3001      	adds	r0, #1
 802659a:	d103      	bne.n	80265a4 <_printf_common+0xac>
 802659c:	f04f 30ff 	mov.w	r0, #4294967295
 80265a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80265a4:	3501      	adds	r5, #1
 80265a6:	e7c6      	b.n	8026536 <_printf_common+0x3e>
 80265a8:	18e1      	adds	r1, r4, r3
 80265aa:	1c5a      	adds	r2, r3, #1
 80265ac:	2030      	movs	r0, #48	; 0x30
 80265ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80265b2:	4422      	add	r2, r4
 80265b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80265b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80265bc:	3302      	adds	r3, #2
 80265be:	e7c7      	b.n	8026550 <_printf_common+0x58>
 80265c0:	2301      	movs	r3, #1
 80265c2:	4622      	mov	r2, r4
 80265c4:	4649      	mov	r1, r9
 80265c6:	4638      	mov	r0, r7
 80265c8:	47c0      	blx	r8
 80265ca:	3001      	adds	r0, #1
 80265cc:	d0e6      	beq.n	802659c <_printf_common+0xa4>
 80265ce:	3601      	adds	r6, #1
 80265d0:	e7d9      	b.n	8026586 <_printf_common+0x8e>
	...

080265d4 <_printf_i>:
 80265d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80265d8:	7e0f      	ldrb	r7, [r1, #24]
 80265da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80265dc:	2f78      	cmp	r7, #120	; 0x78
 80265de:	4691      	mov	r9, r2
 80265e0:	4680      	mov	r8, r0
 80265e2:	460c      	mov	r4, r1
 80265e4:	469a      	mov	sl, r3
 80265e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80265ea:	d807      	bhi.n	80265fc <_printf_i+0x28>
 80265ec:	2f62      	cmp	r7, #98	; 0x62
 80265ee:	d80a      	bhi.n	8026606 <_printf_i+0x32>
 80265f0:	2f00      	cmp	r7, #0
 80265f2:	f000 80d8 	beq.w	80267a6 <_printf_i+0x1d2>
 80265f6:	2f58      	cmp	r7, #88	; 0x58
 80265f8:	f000 80a3 	beq.w	8026742 <_printf_i+0x16e>
 80265fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026604:	e03a      	b.n	802667c <_printf_i+0xa8>
 8026606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802660a:	2b15      	cmp	r3, #21
 802660c:	d8f6      	bhi.n	80265fc <_printf_i+0x28>
 802660e:	a101      	add	r1, pc, #4	; (adr r1, 8026614 <_printf_i+0x40>)
 8026610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026614:	0802666d 	.word	0x0802666d
 8026618:	08026681 	.word	0x08026681
 802661c:	080265fd 	.word	0x080265fd
 8026620:	080265fd 	.word	0x080265fd
 8026624:	080265fd 	.word	0x080265fd
 8026628:	080265fd 	.word	0x080265fd
 802662c:	08026681 	.word	0x08026681
 8026630:	080265fd 	.word	0x080265fd
 8026634:	080265fd 	.word	0x080265fd
 8026638:	080265fd 	.word	0x080265fd
 802663c:	080265fd 	.word	0x080265fd
 8026640:	0802678d 	.word	0x0802678d
 8026644:	080266b1 	.word	0x080266b1
 8026648:	0802676f 	.word	0x0802676f
 802664c:	080265fd 	.word	0x080265fd
 8026650:	080265fd 	.word	0x080265fd
 8026654:	080267af 	.word	0x080267af
 8026658:	080265fd 	.word	0x080265fd
 802665c:	080266b1 	.word	0x080266b1
 8026660:	080265fd 	.word	0x080265fd
 8026664:	080265fd 	.word	0x080265fd
 8026668:	08026777 	.word	0x08026777
 802666c:	682b      	ldr	r3, [r5, #0]
 802666e:	1d1a      	adds	r2, r3, #4
 8026670:	681b      	ldr	r3, [r3, #0]
 8026672:	602a      	str	r2, [r5, #0]
 8026674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802667c:	2301      	movs	r3, #1
 802667e:	e0a3      	b.n	80267c8 <_printf_i+0x1f4>
 8026680:	6820      	ldr	r0, [r4, #0]
 8026682:	6829      	ldr	r1, [r5, #0]
 8026684:	0606      	lsls	r6, r0, #24
 8026686:	f101 0304 	add.w	r3, r1, #4
 802668a:	d50a      	bpl.n	80266a2 <_printf_i+0xce>
 802668c:	680e      	ldr	r6, [r1, #0]
 802668e:	602b      	str	r3, [r5, #0]
 8026690:	2e00      	cmp	r6, #0
 8026692:	da03      	bge.n	802669c <_printf_i+0xc8>
 8026694:	232d      	movs	r3, #45	; 0x2d
 8026696:	4276      	negs	r6, r6
 8026698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802669c:	485e      	ldr	r0, [pc, #376]	; (8026818 <_printf_i+0x244>)
 802669e:	230a      	movs	r3, #10
 80266a0:	e019      	b.n	80266d6 <_printf_i+0x102>
 80266a2:	680e      	ldr	r6, [r1, #0]
 80266a4:	602b      	str	r3, [r5, #0]
 80266a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80266aa:	bf18      	it	ne
 80266ac:	b236      	sxthne	r6, r6
 80266ae:	e7ef      	b.n	8026690 <_printf_i+0xbc>
 80266b0:	682b      	ldr	r3, [r5, #0]
 80266b2:	6820      	ldr	r0, [r4, #0]
 80266b4:	1d19      	adds	r1, r3, #4
 80266b6:	6029      	str	r1, [r5, #0]
 80266b8:	0601      	lsls	r1, r0, #24
 80266ba:	d501      	bpl.n	80266c0 <_printf_i+0xec>
 80266bc:	681e      	ldr	r6, [r3, #0]
 80266be:	e002      	b.n	80266c6 <_printf_i+0xf2>
 80266c0:	0646      	lsls	r6, r0, #25
 80266c2:	d5fb      	bpl.n	80266bc <_printf_i+0xe8>
 80266c4:	881e      	ldrh	r6, [r3, #0]
 80266c6:	4854      	ldr	r0, [pc, #336]	; (8026818 <_printf_i+0x244>)
 80266c8:	2f6f      	cmp	r7, #111	; 0x6f
 80266ca:	bf0c      	ite	eq
 80266cc:	2308      	moveq	r3, #8
 80266ce:	230a      	movne	r3, #10
 80266d0:	2100      	movs	r1, #0
 80266d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80266d6:	6865      	ldr	r5, [r4, #4]
 80266d8:	60a5      	str	r5, [r4, #8]
 80266da:	2d00      	cmp	r5, #0
 80266dc:	bfa2      	ittt	ge
 80266de:	6821      	ldrge	r1, [r4, #0]
 80266e0:	f021 0104 	bicge.w	r1, r1, #4
 80266e4:	6021      	strge	r1, [r4, #0]
 80266e6:	b90e      	cbnz	r6, 80266ec <_printf_i+0x118>
 80266e8:	2d00      	cmp	r5, #0
 80266ea:	d04d      	beq.n	8026788 <_printf_i+0x1b4>
 80266ec:	4615      	mov	r5, r2
 80266ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80266f2:	fb03 6711 	mls	r7, r3, r1, r6
 80266f6:	5dc7      	ldrb	r7, [r0, r7]
 80266f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80266fc:	4637      	mov	r7, r6
 80266fe:	42bb      	cmp	r3, r7
 8026700:	460e      	mov	r6, r1
 8026702:	d9f4      	bls.n	80266ee <_printf_i+0x11a>
 8026704:	2b08      	cmp	r3, #8
 8026706:	d10b      	bne.n	8026720 <_printf_i+0x14c>
 8026708:	6823      	ldr	r3, [r4, #0]
 802670a:	07de      	lsls	r6, r3, #31
 802670c:	d508      	bpl.n	8026720 <_printf_i+0x14c>
 802670e:	6923      	ldr	r3, [r4, #16]
 8026710:	6861      	ldr	r1, [r4, #4]
 8026712:	4299      	cmp	r1, r3
 8026714:	bfde      	ittt	le
 8026716:	2330      	movle	r3, #48	; 0x30
 8026718:	f805 3c01 	strble.w	r3, [r5, #-1]
 802671c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026720:	1b52      	subs	r2, r2, r5
 8026722:	6122      	str	r2, [r4, #16]
 8026724:	f8cd a000 	str.w	sl, [sp]
 8026728:	464b      	mov	r3, r9
 802672a:	aa03      	add	r2, sp, #12
 802672c:	4621      	mov	r1, r4
 802672e:	4640      	mov	r0, r8
 8026730:	f7ff fee2 	bl	80264f8 <_printf_common>
 8026734:	3001      	adds	r0, #1
 8026736:	d14c      	bne.n	80267d2 <_printf_i+0x1fe>
 8026738:	f04f 30ff 	mov.w	r0, #4294967295
 802673c:	b004      	add	sp, #16
 802673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026742:	4835      	ldr	r0, [pc, #212]	; (8026818 <_printf_i+0x244>)
 8026744:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026748:	6829      	ldr	r1, [r5, #0]
 802674a:	6823      	ldr	r3, [r4, #0]
 802674c:	f851 6b04 	ldr.w	r6, [r1], #4
 8026750:	6029      	str	r1, [r5, #0]
 8026752:	061d      	lsls	r5, r3, #24
 8026754:	d514      	bpl.n	8026780 <_printf_i+0x1ac>
 8026756:	07df      	lsls	r7, r3, #31
 8026758:	bf44      	itt	mi
 802675a:	f043 0320 	orrmi.w	r3, r3, #32
 802675e:	6023      	strmi	r3, [r4, #0]
 8026760:	b91e      	cbnz	r6, 802676a <_printf_i+0x196>
 8026762:	6823      	ldr	r3, [r4, #0]
 8026764:	f023 0320 	bic.w	r3, r3, #32
 8026768:	6023      	str	r3, [r4, #0]
 802676a:	2310      	movs	r3, #16
 802676c:	e7b0      	b.n	80266d0 <_printf_i+0xfc>
 802676e:	6823      	ldr	r3, [r4, #0]
 8026770:	f043 0320 	orr.w	r3, r3, #32
 8026774:	6023      	str	r3, [r4, #0]
 8026776:	2378      	movs	r3, #120	; 0x78
 8026778:	4828      	ldr	r0, [pc, #160]	; (802681c <_printf_i+0x248>)
 802677a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802677e:	e7e3      	b.n	8026748 <_printf_i+0x174>
 8026780:	0659      	lsls	r1, r3, #25
 8026782:	bf48      	it	mi
 8026784:	b2b6      	uxthmi	r6, r6
 8026786:	e7e6      	b.n	8026756 <_printf_i+0x182>
 8026788:	4615      	mov	r5, r2
 802678a:	e7bb      	b.n	8026704 <_printf_i+0x130>
 802678c:	682b      	ldr	r3, [r5, #0]
 802678e:	6826      	ldr	r6, [r4, #0]
 8026790:	6961      	ldr	r1, [r4, #20]
 8026792:	1d18      	adds	r0, r3, #4
 8026794:	6028      	str	r0, [r5, #0]
 8026796:	0635      	lsls	r5, r6, #24
 8026798:	681b      	ldr	r3, [r3, #0]
 802679a:	d501      	bpl.n	80267a0 <_printf_i+0x1cc>
 802679c:	6019      	str	r1, [r3, #0]
 802679e:	e002      	b.n	80267a6 <_printf_i+0x1d2>
 80267a0:	0670      	lsls	r0, r6, #25
 80267a2:	d5fb      	bpl.n	802679c <_printf_i+0x1c8>
 80267a4:	8019      	strh	r1, [r3, #0]
 80267a6:	2300      	movs	r3, #0
 80267a8:	6123      	str	r3, [r4, #16]
 80267aa:	4615      	mov	r5, r2
 80267ac:	e7ba      	b.n	8026724 <_printf_i+0x150>
 80267ae:	682b      	ldr	r3, [r5, #0]
 80267b0:	1d1a      	adds	r2, r3, #4
 80267b2:	602a      	str	r2, [r5, #0]
 80267b4:	681d      	ldr	r5, [r3, #0]
 80267b6:	6862      	ldr	r2, [r4, #4]
 80267b8:	2100      	movs	r1, #0
 80267ba:	4628      	mov	r0, r5
 80267bc:	f7d9 fd38 	bl	8000230 <memchr>
 80267c0:	b108      	cbz	r0, 80267c6 <_printf_i+0x1f2>
 80267c2:	1b40      	subs	r0, r0, r5
 80267c4:	6060      	str	r0, [r4, #4]
 80267c6:	6863      	ldr	r3, [r4, #4]
 80267c8:	6123      	str	r3, [r4, #16]
 80267ca:	2300      	movs	r3, #0
 80267cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80267d0:	e7a8      	b.n	8026724 <_printf_i+0x150>
 80267d2:	6923      	ldr	r3, [r4, #16]
 80267d4:	462a      	mov	r2, r5
 80267d6:	4649      	mov	r1, r9
 80267d8:	4640      	mov	r0, r8
 80267da:	47d0      	blx	sl
 80267dc:	3001      	adds	r0, #1
 80267de:	d0ab      	beq.n	8026738 <_printf_i+0x164>
 80267e0:	6823      	ldr	r3, [r4, #0]
 80267e2:	079b      	lsls	r3, r3, #30
 80267e4:	d413      	bmi.n	802680e <_printf_i+0x23a>
 80267e6:	68e0      	ldr	r0, [r4, #12]
 80267e8:	9b03      	ldr	r3, [sp, #12]
 80267ea:	4298      	cmp	r0, r3
 80267ec:	bfb8      	it	lt
 80267ee:	4618      	movlt	r0, r3
 80267f0:	e7a4      	b.n	802673c <_printf_i+0x168>
 80267f2:	2301      	movs	r3, #1
 80267f4:	4632      	mov	r2, r6
 80267f6:	4649      	mov	r1, r9
 80267f8:	4640      	mov	r0, r8
 80267fa:	47d0      	blx	sl
 80267fc:	3001      	adds	r0, #1
 80267fe:	d09b      	beq.n	8026738 <_printf_i+0x164>
 8026800:	3501      	adds	r5, #1
 8026802:	68e3      	ldr	r3, [r4, #12]
 8026804:	9903      	ldr	r1, [sp, #12]
 8026806:	1a5b      	subs	r3, r3, r1
 8026808:	42ab      	cmp	r3, r5
 802680a:	dcf2      	bgt.n	80267f2 <_printf_i+0x21e>
 802680c:	e7eb      	b.n	80267e6 <_printf_i+0x212>
 802680e:	2500      	movs	r5, #0
 8026810:	f104 0619 	add.w	r6, r4, #25
 8026814:	e7f5      	b.n	8026802 <_printf_i+0x22e>
 8026816:	bf00      	nop
 8026818:	0802be75 	.word	0x0802be75
 802681c:	0802be86 	.word	0x0802be86

08026820 <__retarget_lock_acquire_recursive>:
 8026820:	4770      	bx	lr

08026822 <__retarget_lock_release_recursive>:
 8026822:	4770      	bx	lr

08026824 <_realloc_r>:
 8026824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026828:	4680      	mov	r8, r0
 802682a:	4614      	mov	r4, r2
 802682c:	460e      	mov	r6, r1
 802682e:	b921      	cbnz	r1, 802683a <_realloc_r+0x16>
 8026830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026834:	4611      	mov	r1, r2
 8026836:	f7ff bc13 	b.w	8026060 <_malloc_r>
 802683a:	b92a      	cbnz	r2, 8026848 <_realloc_r+0x24>
 802683c:	f7ff fba4 	bl	8025f88 <_free_r>
 8026840:	4625      	mov	r5, r4
 8026842:	4628      	mov	r0, r5
 8026844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026848:	f000 f81b 	bl	8026882 <_malloc_usable_size_r>
 802684c:	4284      	cmp	r4, r0
 802684e:	4607      	mov	r7, r0
 8026850:	d802      	bhi.n	8026858 <_realloc_r+0x34>
 8026852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8026856:	d812      	bhi.n	802687e <_realloc_r+0x5a>
 8026858:	4621      	mov	r1, r4
 802685a:	4640      	mov	r0, r8
 802685c:	f7ff fc00 	bl	8026060 <_malloc_r>
 8026860:	4605      	mov	r5, r0
 8026862:	2800      	cmp	r0, #0
 8026864:	d0ed      	beq.n	8026842 <_realloc_r+0x1e>
 8026866:	42bc      	cmp	r4, r7
 8026868:	4622      	mov	r2, r4
 802686a:	4631      	mov	r1, r6
 802686c:	bf28      	it	cs
 802686e:	463a      	movcs	r2, r7
 8026870:	f7ff fb5a 	bl	8025f28 <memcpy>
 8026874:	4631      	mov	r1, r6
 8026876:	4640      	mov	r0, r8
 8026878:	f7ff fb86 	bl	8025f88 <_free_r>
 802687c:	e7e1      	b.n	8026842 <_realloc_r+0x1e>
 802687e:	4635      	mov	r5, r6
 8026880:	e7df      	b.n	8026842 <_realloc_r+0x1e>

08026882 <_malloc_usable_size_r>:
 8026882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026886:	1f18      	subs	r0, r3, #4
 8026888:	2b00      	cmp	r3, #0
 802688a:	bfbc      	itt	lt
 802688c:	580b      	ldrlt	r3, [r1, r0]
 802688e:	18c0      	addlt	r0, r0, r3
 8026890:	4770      	bx	lr
	...

08026894 <_init>:
 8026894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026896:	bf00      	nop
 8026898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802689a:	bc08      	pop	{r3}
 802689c:	469e      	mov	lr, r3
 802689e:	4770      	bx	lr

080268a0 <_fini>:
 80268a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80268a2:	bf00      	nop
 80268a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80268a6:	bc08      	pop	{r3}
 80268a8:	469e      	mov	lr, r3
 80268aa:	4770      	bx	lr
