
CDJ_STM32F7_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017978  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005730  08017b48  08017b48  00027b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d278  0801d278  0002d278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d280  0801d280  0002d280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d284  0801d284  0002d284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000120  20000000  0801d288  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001839c  20000120  0801d3a8  00030120  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200184bc  0801d3a8  000384bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005752e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008e31  00000000  00000000  0008767e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00028a4d  00000000  00000000  000904af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002440  00000000  00000000  000b8f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002290  00000000  00000000  000bb340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002fa40  00000000  00000000  000bd5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0002cd35  00000000  00000000  000ed010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001008d9  00000000  00000000  00119d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0021a61e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000070f8  00000000  00000000  0021a69c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000120 	.word	0x20000120
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017b30 	.word	0x08017b30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000124 	.word	0x20000124
 800020c:	08017b30 	.word	0x08017b30

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d18:	f1a2 0201 	sub.w	r2, r2, #1
 8000d1c:	d1ed      	bne.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_uldivmod>:
 8000e78:	b953      	cbnz	r3, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7a:	b94a      	cbnz	r2, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	bf08      	it	eq
 8000e80:	2800      	cmpeq	r0, #0
 8000e82:	bf1c      	itt	ne
 8000e84:	f04f 31ff 	movne.w	r1, #4294967295
 8000e88:	f04f 30ff 	movne.w	r0, #4294967295
 8000e8c:	f000 b996 	b.w	80011bc <__aeabi_idiv0>
 8000e90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e98:	f000 f82a 	bl	8000ef0 <__udivmoddi4>
 8000e9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea4:	b004      	add	sp, #16
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_f2ulz>:
 8000ea8:	b5d0      	push	{r4, r6, r7, lr}
 8000eaa:	f7ff fb75 	bl	8000598 <__aeabi_f2d>
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <__aeabi_f2ulz+0x40>)
 8000eb2:	4606      	mov	r6, r0
 8000eb4:	460f      	mov	r7, r1
 8000eb6:	f7ff fbc7 	bl	8000648 <__aeabi_dmul>
 8000eba:	f7ff fe5f 	bl	8000b7c <__aeabi_d2uiz>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	f7ff fb48 	bl	8000554 <__aeabi_ui2d>
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <__aeabi_f2ulz+0x44>)
 8000ec8:	f7ff fbbe 	bl	8000648 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	4639      	mov	r1, r7
 8000ed4:	f7ff fa00 	bl	80002d8 <__aeabi_dsub>
 8000ed8:	f7ff fe50 	bl	8000b7c <__aeabi_d2uiz>
 8000edc:	2200      	movs	r2, #0
 8000ede:	4623      	mov	r3, r4
 8000ee0:	4310      	orrs	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	bdd0      	pop	{r4, r6, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	3df00000 	.word	0x3df00000
 8000eec:	41f00000 	.word	0x41f00000

08000ef0 <__udivmoddi4>:
 8000ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ef4:	9e08      	ldr	r6, [sp, #32]
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4688      	mov	r8, r1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d14b      	bne.n	8000f96 <__udivmoddi4+0xa6>
 8000efe:	428a      	cmp	r2, r1
 8000f00:	4615      	mov	r5, r2
 8000f02:	d967      	bls.n	8000fd4 <__udivmoddi4+0xe4>
 8000f04:	fab2 f282 	clz	r2, r2
 8000f08:	b14a      	cbz	r2, 8000f1e <__udivmoddi4+0x2e>
 8000f0a:	f1c2 0720 	rsb	r7, r2, #32
 8000f0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000f12:	fa20 f707 	lsr.w	r7, r0, r7
 8000f16:	4095      	lsls	r5, r2
 8000f18:	ea47 0803 	orr.w	r8, r7, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f22:	0c23      	lsrs	r3, r4, #16
 8000f24:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f28:	fa1f fc85 	uxth.w	ip, r5
 8000f2c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f30:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f34:	fb07 f10c 	mul.w	r1, r7, ip
 8000f38:	4299      	cmp	r1, r3
 8000f3a:	d909      	bls.n	8000f50 <__udivmoddi4+0x60>
 8000f3c:	18eb      	adds	r3, r5, r3
 8000f3e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f42:	f080 811b 	bcs.w	800117c <__udivmoddi4+0x28c>
 8000f46:	4299      	cmp	r1, r3
 8000f48:	f240 8118 	bls.w	800117c <__udivmoddi4+0x28c>
 8000f4c:	3f02      	subs	r7, #2
 8000f4e:	442b      	add	r3, r5
 8000f50:	1a5b      	subs	r3, r3, r1
 8000f52:	b2a4      	uxth	r4, r4
 8000f54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f60:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f64:	45a4      	cmp	ip, r4
 8000f66:	d909      	bls.n	8000f7c <__udivmoddi4+0x8c>
 8000f68:	192c      	adds	r4, r5, r4
 8000f6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f6e:	f080 8107 	bcs.w	8001180 <__udivmoddi4+0x290>
 8000f72:	45a4      	cmp	ip, r4
 8000f74:	f240 8104 	bls.w	8001180 <__udivmoddi4+0x290>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	442c      	add	r4, r5
 8000f7c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f80:	eba4 040c 	sub.w	r4, r4, ip
 8000f84:	2700      	movs	r7, #0
 8000f86:	b11e      	cbz	r6, 8000f90 <__udivmoddi4+0xa0>
 8000f88:	40d4      	lsrs	r4, r2
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e9c6 4300 	strd	r4, r3, [r6]
 8000f90:	4639      	mov	r1, r7
 8000f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d909      	bls.n	8000fae <__udivmoddi4+0xbe>
 8000f9a:	2e00      	cmp	r6, #0
 8000f9c:	f000 80eb 	beq.w	8001176 <__udivmoddi4+0x286>
 8000fa0:	2700      	movs	r7, #0
 8000fa2:	e9c6 0100 	strd	r0, r1, [r6]
 8000fa6:	4638      	mov	r0, r7
 8000fa8:	4639      	mov	r1, r7
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	fab3 f783 	clz	r7, r3
 8000fb2:	2f00      	cmp	r7, #0
 8000fb4:	d147      	bne.n	8001046 <__udivmoddi4+0x156>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d302      	bcc.n	8000fc0 <__udivmoddi4+0xd0>
 8000fba:	4282      	cmp	r2, r0
 8000fbc:	f200 80fa 	bhi.w	80011b4 <__udivmoddi4+0x2c4>
 8000fc0:	1a84      	subs	r4, r0, r2
 8000fc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	4698      	mov	r8, r3
 8000fca:	2e00      	cmp	r6, #0
 8000fcc:	d0e0      	beq.n	8000f90 <__udivmoddi4+0xa0>
 8000fce:	e9c6 4800 	strd	r4, r8, [r6]
 8000fd2:	e7dd      	b.n	8000f90 <__udivmoddi4+0xa0>
 8000fd4:	b902      	cbnz	r2, 8000fd8 <__udivmoddi4+0xe8>
 8000fd6:	deff      	udf	#255	; 0xff
 8000fd8:	fab2 f282 	clz	r2, r2
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	f040 808f 	bne.w	8001100 <__udivmoddi4+0x210>
 8000fe2:	1b49      	subs	r1, r1, r5
 8000fe4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fe8:	fa1f f885 	uxth.w	r8, r5
 8000fec:	2701      	movs	r7, #1
 8000fee:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ff2:	0c23      	lsrs	r3, r4, #16
 8000ff4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ff8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ffc:	fb08 f10c 	mul.w	r1, r8, ip
 8001000:	4299      	cmp	r1, r3
 8001002:	d907      	bls.n	8001014 <__udivmoddi4+0x124>
 8001004:	18eb      	adds	r3, r5, r3
 8001006:	f10c 30ff 	add.w	r0, ip, #4294967295
 800100a:	d202      	bcs.n	8001012 <__udivmoddi4+0x122>
 800100c:	4299      	cmp	r1, r3
 800100e:	f200 80cd 	bhi.w	80011ac <__udivmoddi4+0x2bc>
 8001012:	4684      	mov	ip, r0
 8001014:	1a59      	subs	r1, r3, r1
 8001016:	b2a3      	uxth	r3, r4
 8001018:	fbb1 f0fe 	udiv	r0, r1, lr
 800101c:	fb0e 1410 	mls	r4, lr, r0, r1
 8001020:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001024:	fb08 f800 	mul.w	r8, r8, r0
 8001028:	45a0      	cmp	r8, r4
 800102a:	d907      	bls.n	800103c <__udivmoddi4+0x14c>
 800102c:	192c      	adds	r4, r5, r4
 800102e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001032:	d202      	bcs.n	800103a <__udivmoddi4+0x14a>
 8001034:	45a0      	cmp	r8, r4
 8001036:	f200 80b6 	bhi.w	80011a6 <__udivmoddi4+0x2b6>
 800103a:	4618      	mov	r0, r3
 800103c:	eba4 0408 	sub.w	r4, r4, r8
 8001040:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001044:	e79f      	b.n	8000f86 <__udivmoddi4+0x96>
 8001046:	f1c7 0c20 	rsb	ip, r7, #32
 800104a:	40bb      	lsls	r3, r7
 800104c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001050:	ea4e 0e03 	orr.w	lr, lr, r3
 8001054:	fa01 f407 	lsl.w	r4, r1, r7
 8001058:	fa20 f50c 	lsr.w	r5, r0, ip
 800105c:	fa21 f30c 	lsr.w	r3, r1, ip
 8001060:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001064:	4325      	orrs	r5, r4
 8001066:	fbb3 f9f8 	udiv	r9, r3, r8
 800106a:	0c2c      	lsrs	r4, r5, #16
 800106c:	fb08 3319 	mls	r3, r8, r9, r3
 8001070:	fa1f fa8e 	uxth.w	sl, lr
 8001074:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001078:	fb09 f40a 	mul.w	r4, r9, sl
 800107c:	429c      	cmp	r4, r3
 800107e:	fa02 f207 	lsl.w	r2, r2, r7
 8001082:	fa00 f107 	lsl.w	r1, r0, r7
 8001086:	d90b      	bls.n	80010a0 <__udivmoddi4+0x1b0>
 8001088:	eb1e 0303 	adds.w	r3, lr, r3
 800108c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001090:	f080 8087 	bcs.w	80011a2 <__udivmoddi4+0x2b2>
 8001094:	429c      	cmp	r4, r3
 8001096:	f240 8084 	bls.w	80011a2 <__udivmoddi4+0x2b2>
 800109a:	f1a9 0902 	sub.w	r9, r9, #2
 800109e:	4473      	add	r3, lr
 80010a0:	1b1b      	subs	r3, r3, r4
 80010a2:	b2ad      	uxth	r5, r5
 80010a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80010a8:	fb08 3310 	mls	r3, r8, r0, r3
 80010ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80010b4:	45a2      	cmp	sl, r4
 80010b6:	d908      	bls.n	80010ca <__udivmoddi4+0x1da>
 80010b8:	eb1e 0404 	adds.w	r4, lr, r4
 80010bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80010c0:	d26b      	bcs.n	800119a <__udivmoddi4+0x2aa>
 80010c2:	45a2      	cmp	sl, r4
 80010c4:	d969      	bls.n	800119a <__udivmoddi4+0x2aa>
 80010c6:	3802      	subs	r0, #2
 80010c8:	4474      	add	r4, lr
 80010ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80010ce:	fba0 8902 	umull	r8, r9, r0, r2
 80010d2:	eba4 040a 	sub.w	r4, r4, sl
 80010d6:	454c      	cmp	r4, r9
 80010d8:	46c2      	mov	sl, r8
 80010da:	464b      	mov	r3, r9
 80010dc:	d354      	bcc.n	8001188 <__udivmoddi4+0x298>
 80010de:	d051      	beq.n	8001184 <__udivmoddi4+0x294>
 80010e0:	2e00      	cmp	r6, #0
 80010e2:	d069      	beq.n	80011b8 <__udivmoddi4+0x2c8>
 80010e4:	ebb1 050a 	subs.w	r5, r1, sl
 80010e8:	eb64 0403 	sbc.w	r4, r4, r3
 80010ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80010f0:	40fd      	lsrs	r5, r7
 80010f2:	40fc      	lsrs	r4, r7
 80010f4:	ea4c 0505 	orr.w	r5, ip, r5
 80010f8:	e9c6 5400 	strd	r5, r4, [r6]
 80010fc:	2700      	movs	r7, #0
 80010fe:	e747      	b.n	8000f90 <__udivmoddi4+0xa0>
 8001100:	f1c2 0320 	rsb	r3, r2, #32
 8001104:	fa20 f703 	lsr.w	r7, r0, r3
 8001108:	4095      	lsls	r5, r2
 800110a:	fa01 f002 	lsl.w	r0, r1, r2
 800110e:	fa21 f303 	lsr.w	r3, r1, r3
 8001112:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001116:	4338      	orrs	r0, r7
 8001118:	0c01      	lsrs	r1, r0, #16
 800111a:	fbb3 f7fe 	udiv	r7, r3, lr
 800111e:	fa1f f885 	uxth.w	r8, r5
 8001122:	fb0e 3317 	mls	r3, lr, r7, r3
 8001126:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800112a:	fb07 f308 	mul.w	r3, r7, r8
 800112e:	428b      	cmp	r3, r1
 8001130:	fa04 f402 	lsl.w	r4, r4, r2
 8001134:	d907      	bls.n	8001146 <__udivmoddi4+0x256>
 8001136:	1869      	adds	r1, r5, r1
 8001138:	f107 3cff 	add.w	ip, r7, #4294967295
 800113c:	d22f      	bcs.n	800119e <__udivmoddi4+0x2ae>
 800113e:	428b      	cmp	r3, r1
 8001140:	d92d      	bls.n	800119e <__udivmoddi4+0x2ae>
 8001142:	3f02      	subs	r7, #2
 8001144:	4429      	add	r1, r5
 8001146:	1acb      	subs	r3, r1, r3
 8001148:	b281      	uxth	r1, r0
 800114a:	fbb3 f0fe 	udiv	r0, r3, lr
 800114e:	fb0e 3310 	mls	r3, lr, r0, r3
 8001152:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001156:	fb00 f308 	mul.w	r3, r0, r8
 800115a:	428b      	cmp	r3, r1
 800115c:	d907      	bls.n	800116e <__udivmoddi4+0x27e>
 800115e:	1869      	adds	r1, r5, r1
 8001160:	f100 3cff 	add.w	ip, r0, #4294967295
 8001164:	d217      	bcs.n	8001196 <__udivmoddi4+0x2a6>
 8001166:	428b      	cmp	r3, r1
 8001168:	d915      	bls.n	8001196 <__udivmoddi4+0x2a6>
 800116a:	3802      	subs	r0, #2
 800116c:	4429      	add	r1, r5
 800116e:	1ac9      	subs	r1, r1, r3
 8001170:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001174:	e73b      	b.n	8000fee <__udivmoddi4+0xfe>
 8001176:	4637      	mov	r7, r6
 8001178:	4630      	mov	r0, r6
 800117a:	e709      	b.n	8000f90 <__udivmoddi4+0xa0>
 800117c:	4607      	mov	r7, r0
 800117e:	e6e7      	b.n	8000f50 <__udivmoddi4+0x60>
 8001180:	4618      	mov	r0, r3
 8001182:	e6fb      	b.n	8000f7c <__udivmoddi4+0x8c>
 8001184:	4541      	cmp	r1, r8
 8001186:	d2ab      	bcs.n	80010e0 <__udivmoddi4+0x1f0>
 8001188:	ebb8 0a02 	subs.w	sl, r8, r2
 800118c:	eb69 020e 	sbc.w	r2, r9, lr
 8001190:	3801      	subs	r0, #1
 8001192:	4613      	mov	r3, r2
 8001194:	e7a4      	b.n	80010e0 <__udivmoddi4+0x1f0>
 8001196:	4660      	mov	r0, ip
 8001198:	e7e9      	b.n	800116e <__udivmoddi4+0x27e>
 800119a:	4618      	mov	r0, r3
 800119c:	e795      	b.n	80010ca <__udivmoddi4+0x1da>
 800119e:	4667      	mov	r7, ip
 80011a0:	e7d1      	b.n	8001146 <__udivmoddi4+0x256>
 80011a2:	4681      	mov	r9, r0
 80011a4:	e77c      	b.n	80010a0 <__udivmoddi4+0x1b0>
 80011a6:	3802      	subs	r0, #2
 80011a8:	442c      	add	r4, r5
 80011aa:	e747      	b.n	800103c <__udivmoddi4+0x14c>
 80011ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80011b0:	442b      	add	r3, r5
 80011b2:	e72f      	b.n	8001014 <__udivmoddi4+0x124>
 80011b4:	4638      	mov	r0, r7
 80011b6:	e708      	b.n	8000fca <__udivmoddi4+0xda>
 80011b8:	4637      	mov	r7, r6
 80011ba:	e6e9      	b.n	8000f90 <__udivmoddi4+0xa0>

080011bc <__aeabi_idiv0>:
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b510      	push	{r4, lr}
 80011c2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_InitTick+0x40>)
 80011c6:	7818      	ldrb	r0, [r3, #0]
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80011d0:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <HAL_InitTick+0x44>)
 80011d2:	6810      	ldr	r0, [r2, #0]
 80011d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011d8:	f000 f8ea 	bl	80013b0 <HAL_SYSTICK_Config>
 80011dc:	b968      	cbnz	r0, 80011fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	2c0f      	cmp	r4, #15
 80011e0:	d901      	bls.n	80011e6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80011e2:	2001      	movs	r0, #1
 80011e4:	e00a      	b.n	80011fc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e6:	2200      	movs	r2, #0
 80011e8:	4621      	mov	r1, r4
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	f000 f867 	bl	80012c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_InitTick+0x48>)
 80011f4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2000      	movs	r0, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
}
 80011fc:	bd10      	pop	{r4, pc}
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000
 8001204:	20000088 	.word	0x20000088
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_Init>:
{
 800120c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_Init+0x28>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001216:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800121e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f82f 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff ffca 	bl	80011c0 <HAL_InitTick>
  HAL_MspInit();
 800122c:	f013 fc42 	bl	8014ab4 <HAL_MspInit>
}
 8001230:	2000      	movs	r0, #0
 8001232:	bd08      	pop	{r3, pc}
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IncTick+0x10>)
 800123a:	6811      	ldr	r1, [r2, #0]
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_IncTick+0x14>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	440b      	add	r3, r1
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	2000155c 	.word	0x2000155c
 800124c:	20000000 	.word	0x20000000

08001250 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001250:	4b01      	ldr	r3, [pc, #4]	; (8001258 <HAL_GetTick+0x8>)
 8001252:	6818      	ldr	r0, [r3, #0]
}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2000155c 	.word	0x2000155c

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff fff6 	bl	8001250 <HAL_GetTick>
 8001264:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	f1b4 3fff 	cmp.w	r4, #4294967295
 800126a:	d002      	beq.n	8001272 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_Delay+0x24>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001272:	f7ff ffed 	bl	8001250 <HAL_GetTick>
 8001276:	1b40      	subs	r0, r0, r5
 8001278:	42a0      	cmp	r0, r4
 800127a:	d3fa      	bcc.n	8001272 <HAL_Delay+0x16>
  {
  }
}
 800127c:	bd38      	pop	{r3, r4, r5, pc}
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b510      	push	{r4, lr}
 8001286:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001288:	1ec3      	subs	r3, r0, #3
 800128a:	2b04      	cmp	r3, #4
 800128c:	d80d      	bhi.n	80012aa <HAL_NVIC_SetPriorityGrouping+0x26>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8001290:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001296:	041b      	lsls	r3, r3, #16
 8001298:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129a:	0224      	lsls	r4, r4, #8
 800129c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	431c      	orrs	r4, r3
  reg_value  =  (reg_value                                   |
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80012a4:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 80012a6:	60d3      	str	r3, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012a8:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80012aa:	2192      	movs	r1, #146	; 0x92
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <HAL_NVIC_SetPriorityGrouping+0x38>)
 80012ae:	f011 fc21 	bl	8012af4 <assert_failed>
 80012b2:	e7ec      	b.n	800128e <HAL_NVIC_SetPriorityGrouping+0xa>
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	05fa0000 	.word	0x05fa0000
 80012bc:	08017b48 	.word	0x08017b48

080012c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	4605      	mov	r5, r0
 80012c4:	460c      	mov	r4, r1
 80012c6:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012c8:	2a0f      	cmp	r2, #15
 80012ca:	d821      	bhi.n	8001310 <HAL_NVIC_SetPriority+0x50>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80012cc:	2c0f      	cmp	r4, #15
 80012ce:	d824      	bhi.n	800131a <HAL_NVIC_SetPriority+0x5a>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_NVIC_SetPriority+0x78>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	f1c3 0207 	rsb	r2, r3, #7
 80012dc:	2a04      	cmp	r2, #4
 80012de:	bf28      	it	cs
 80012e0:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	1d19      	adds	r1, r3, #4
 80012e4:	2906      	cmp	r1, #6
 80012e6:	d91d      	bls.n	8001324 <HAL_NVIC_SetPriority+0x64>
 80012e8:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ea:	f04f 31ff 	mov.w	r1, #4294967295
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	ea24 0402 	bic.w	r4, r4, r2
 80012f6:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 8001302:	2d00      	cmp	r5, #0
 8001304:	db10      	blt.n	8001328 <HAL_NVIC_SetPriority+0x68>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	0124      	lsls	r4, r4, #4
 8001308:	b2e4      	uxtb	r4, r4
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_NVIC_SetPriority+0x7c>)
 800130c:	555c      	strb	r4, [r3, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800130e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001310:	21aa      	movs	r1, #170	; 0xaa
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_NVIC_SetPriority+0x80>)
 8001314:	f011 fbee 	bl	8012af4 <assert_failed>
 8001318:	e7d8      	b.n	80012cc <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800131a:	21ab      	movs	r1, #171	; 0xab
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <HAL_NVIC_SetPriority+0x80>)
 800131e:	f011 fbe9 	bl	8012af4 <assert_failed>
 8001322:	e7d5      	b.n	80012d0 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001324:	2300      	movs	r3, #0
 8001326:	e7e0      	b.n	80012ea <HAL_NVIC_SetPriority+0x2a>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	f005 050f 	and.w	r5, r5, #15
 800132c:	0124      	lsls	r4, r4, #4
 800132e:	b2e4      	uxtb	r4, r4
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <HAL_NVIC_SetPriority+0x84>)
 8001332:	555c      	strb	r4, [r3, r5]
}
 8001334:	e7eb      	b.n	800130e <HAL_NVIC_SetPriority+0x4e>
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	e000e400 	.word	0xe000e400
 8001340:	08017b48 	.word	0x08017b48
 8001344:	e000ed14 	.word	0xe000ed14

08001348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800134a:	1e04      	subs	r4, r0, #0
 800134c:	db0a      	blt.n	8001364 <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 800134e:	2c00      	cmp	r4, #0
 8001350:	db07      	blt.n	8001362 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	f004 021f 	and.w	r2, r4, #31
 8001356:	0964      	lsrs	r4, r4, #5
 8001358:	2301      	movs	r3, #1
 800135a:	4093      	lsls	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_NVIC_EnableIRQ+0x28>)
 800135e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001362:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001364:	21be      	movs	r1, #190	; 0xbe
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <HAL_NVIC_EnableIRQ+0x2c>)
 8001368:	f011 fbc4 	bl	8012af4 <assert_failed>
 800136c:	e7ef      	b.n	800134e <HAL_NVIC_EnableIRQ+0x6>
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100
 8001374:	08017b48 	.word	0x08017b48

08001378 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001378:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800137a:	1e04      	subs	r4, r0, #0
 800137c:	db0f      	blt.n	800139e <HAL_NVIC_DisableIRQ+0x26>
  if ((int32_t)(IRQn) >= 0)
 800137e:	2c00      	cmp	r4, #0
 8001380:	db0c      	blt.n	800139c <HAL_NVIC_DisableIRQ+0x24>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	f004 021f 	and.w	r2, r4, #31
 8001386:	0964      	lsrs	r4, r4, #5
 8001388:	2301      	movs	r3, #1
 800138a:	4093      	lsls	r3, r2
 800138c:	3420      	adds	r4, #32
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_NVIC_DisableIRQ+0x30>)
 8001390:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001398:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800139c:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800139e:	21ce      	movs	r1, #206	; 0xce
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <HAL_NVIC_DisableIRQ+0x34>)
 80013a2:	f011 fba7 	bl	8012af4 <assert_failed>
 80013a6:	e7ea      	b.n	800137e <HAL_NVIC_DisableIRQ+0x6>
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	08017b48 	.word	0x08017b48

080013b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	3801      	subs	r0, #1
 80013b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013b6:	d20a      	bcs.n	80013ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_SYSTICK_Config+0x24>)
 80013ba:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_SYSTICK_Config+0x28>)
 80013be:	21f0      	movs	r1, #240	; 0xf0
 80013c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	2000      	movs	r0, #0
 80013c6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013dc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_MPU_Disable+0x18>)
 80013e2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013ea:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_MPU_Disable+0x1c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	e000ed90 	.word	0xe000ed90

080013fc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013fc:	f040 0001 	orr.w	r0, r0, #1
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_MPU_Enable+0x1c>)
 8001402:	6058      	str	r0, [r3, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001404:	4a05      	ldr	r2, [pc, #20]	; (800141c <HAL_MPU_Enable+0x20>)
 8001406:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800140e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001412:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001416:	4770      	bx	lr
 8001418:	e000ed90 	.word	0xe000ed90
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001420:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001422:	6805      	ldr	r5, [r0, #0]
 8001424:	682c      	ldr	r4, [r5, #0]
 8001426:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800142a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800142c:	6804      	ldr	r4, [r0, #0]
 800142e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001430:	6883      	ldr	r3, [r0, #8]
 8001432:	2b40      	cmp	r3, #64	; 0x40
 8001434:	d005      	beq.n	8001442 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001436:	6803      	ldr	r3, [r0, #0]
 8001438:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800143a:	6803      	ldr	r3, [r0, #0]
 800143c:	60da      	str	r2, [r3, #12]
  }
}
 800143e:	bc30      	pop	{r4, r5}
 8001440:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001442:	6803      	ldr	r3, [r0, #0]
 8001444:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001446:	6803      	ldr	r3, [r0, #0]
 8001448:	60d9      	str	r1, [r3, #12]
 800144a:	e7f8      	b.n	800143e <DMA_SetConfig+0x1e>

0800144c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800144c:	6802      	ldr	r2, [r0, #0]
 800144e:	b2d3      	uxtb	r3, r2
 8001450:	3b10      	subs	r3, #16
 8001452:	4909      	ldr	r1, [pc, #36]	; (8001478 <DMA_CalcBaseAndBitshift+0x2c>)
 8001454:	fba1 1303 	umull	r1, r3, r1, r3
 8001458:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <DMA_CalcBaseAndBitshift+0x30>)
 800145c:	5cc9      	ldrb	r1, [r1, r3]
 800145e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001460:	2b03      	cmp	r3, #3
 8001462:	d804      	bhi.n	800146e <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <DMA_CalcBaseAndBitshift+0x34>)
 8001466:	4013      	ands	r3, r2
 8001468:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800146a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800146c:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <DMA_CalcBaseAndBitshift+0x34>)
 8001470:	4013      	ands	r3, r2
 8001472:	3304      	adds	r3, #4
 8001474:	6583      	str	r3, [r0, #88]	; 0x58
 8001476:	e7f8      	b.n	800146a <DMA_CalcBaseAndBitshift+0x1e>
 8001478:	aaaaaaab 	.word	0xaaaaaaab
 800147c:	08017bbc 	.word	0x08017bbc
 8001480:	fffffc00 	.word	0xfffffc00

08001484 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001484:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001486:	6982      	ldr	r2, [r0, #24]
 8001488:	b992      	cbnz	r2, 80014b0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800148a:	2b01      	cmp	r3, #1
 800148c:	d00a      	beq.n	80014a4 <DMA_CheckFifoParam+0x20>
 800148e:	b11b      	cbz	r3, 8001498 <DMA_CheckFifoParam+0x14>
 8001490:	2b02      	cmp	r3, #2
 8001492:	d001      	beq.n	8001498 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001494:	2000      	movs	r0, #0
 8001496:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001498:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800149a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800149e:	d12c      	bne.n	80014fa <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80014a0:	2000      	movs	r0, #0
 80014a2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014aa:	d028      	beq.n	80014fe <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80014ac:	2000      	movs	r0, #0
 80014ae:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014b0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80014b4:	d005      	beq.n	80014c2 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d929      	bls.n	800150e <DMA_CheckFifoParam+0x8a>
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d015      	beq.n	80014ea <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2000      	movs	r0, #0
 80014c0:	4770      	bx	lr
    switch (tmp)
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d803      	bhi.n	80014ce <DMA_CheckFifoParam+0x4a>
 80014c6:	e8df f003 	tbb	[pc, r3]
 80014ca:	041c      	.short	0x041c
 80014cc:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	2000      	movs	r0, #0
 80014d0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014d8:	d115      	bne.n	8001506 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2000      	movs	r0, #0
 80014dc:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014e4:	d011      	beq.n	800150a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80014e6:	2000      	movs	r0, #0
 80014e8:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014f0:	d001      	beq.n	80014f6 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80014f4:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80014f6:	2000      	movs	r0, #0
 80014f8:	4770      	bx	lr
        status = HAL_ERROR;
 80014fa:	2001      	movs	r0, #1
 80014fc:	4770      	bx	lr
        status = HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
 8001500:	4770      	bx	lr
      status = HAL_ERROR;
 8001502:	2001      	movs	r0, #1
 8001504:	4770      	bx	lr
        status = HAL_ERROR;
 8001506:	2001      	movs	r0, #1
 8001508:	4770      	bx	lr
        status = HAL_ERROR;
 800150a:	2001      	movs	r0, #1
 800150c:	4770      	bx	lr
      status = HAL_ERROR;
 800150e:	2001      	movs	r0, #1
 8001510:	4770      	bx	lr
	...

08001514 <HAL_DMA_Init>:
{
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff fe9a 	bl	8001250 <HAL_GetTick>
  if(hdma == NULL)
 800151c:	2c00      	cmp	r4, #0
 800151e:	f000 816c 	beq.w	80017fa <HAL_DMA_Init+0x2e6>
 8001522:	4605      	mov	r5, r0
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	49ab      	ldr	r1, [pc, #684]	; (80017d4 <HAL_DMA_Init+0x2c0>)
 8001528:	4aab      	ldr	r2, [pc, #684]	; (80017d8 <HAL_DMA_Init+0x2c4>)
 800152a:	428b      	cmp	r3, r1
 800152c:	bf18      	it	ne
 800152e:	4293      	cmpne	r3, r2
 8001530:	d02e      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001532:	3218      	adds	r2, #24
 8001534:	4293      	cmp	r3, r2
 8001536:	d02b      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001538:	3218      	adds	r2, #24
 800153a:	4293      	cmp	r3, r2
 800153c:	d028      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 800153e:	3218      	adds	r2, #24
 8001540:	4293      	cmp	r3, r2
 8001542:	d025      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001544:	3218      	adds	r2, #24
 8001546:	4293      	cmp	r3, r2
 8001548:	d022      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 800154a:	3218      	adds	r2, #24
 800154c:	4293      	cmp	r3, r2
 800154e:	d01f      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001550:	3218      	adds	r2, #24
 8001552:	4293      	cmp	r3, r2
 8001554:	d01c      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001556:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800155a:	4293      	cmp	r3, r2
 800155c:	d018      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 800155e:	3218      	adds	r2, #24
 8001560:	4293      	cmp	r3, r2
 8001562:	d015      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001564:	3218      	adds	r2, #24
 8001566:	4293      	cmp	r3, r2
 8001568:	d012      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 800156a:	3218      	adds	r2, #24
 800156c:	4293      	cmp	r3, r2
 800156e:	d00f      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001570:	3218      	adds	r2, #24
 8001572:	4293      	cmp	r3, r2
 8001574:	d00c      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001576:	3218      	adds	r2, #24
 8001578:	4293      	cmp	r3, r2
 800157a:	d009      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 800157c:	3218      	adds	r2, #24
 800157e:	4293      	cmp	r3, r2
 8001580:	d006      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001582:	3218      	adds	r2, #24
 8001584:	4293      	cmp	r3, r2
 8001586:	d003      	beq.n	8001590 <HAL_DMA_Init+0x7c>
 8001588:	21b9      	movs	r1, #185	; 0xb9
 800158a:	4894      	ldr	r0, [pc, #592]	; (80017dc <HAL_DMA_Init+0x2c8>)
 800158c:	f011 fab2 	bl	8012af4 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001590:	6863      	ldr	r3, [r4, #4]
 8001592:	f113 427e 	adds.w	r2, r3, #4261412864	; 0xfe000000
 8001596:	bf18      	it	ne
 8001598:	2201      	movne	r2, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf08      	it	eq
 800159e:	2200      	moveq	r2, #0
 80015a0:	b192      	cbz	r2, 80015c8 <HAL_DMA_Init+0xb4>
 80015a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015a6:	d00f      	beq.n	80015c8 <HAL_DMA_Init+0xb4>
 80015a8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80015ac:	d00c      	beq.n	80015c8 <HAL_DMA_Init+0xb4>
 80015ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015b2:	d009      	beq.n	80015c8 <HAL_DMA_Init+0xb4>
 80015b4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80015b8:	d006      	beq.n	80015c8 <HAL_DMA_Init+0xb4>
 80015ba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80015be:	d003      	beq.n	80015c8 <HAL_DMA_Init+0xb4>
 80015c0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80015c4:	f040 8094 	bne.w	80016f0 <HAL_DMA_Init+0x1dc>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80015c8:	68a2      	ldr	r2, [r4, #8]
 80015ca:	f1b2 0340 	subs.w	r3, r2, #64	; 0x40
 80015ce:	bf18      	it	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2a00      	cmp	r2, #0
 80015d4:	bf08      	it	eq
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b113      	cbz	r3, 80015e0 <HAL_DMA_Init+0xcc>
 80015da:	2a80      	cmp	r2, #128	; 0x80
 80015dc:	f040 808d 	bne.w	80016fa <HAL_DMA_Init+0x1e6>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80015e0:	68e3      	ldr	r3, [r4, #12]
 80015e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e6:	bf18      	it	ne
 80015e8:	2b00      	cmpne	r3, #0
 80015ea:	f040 808b 	bne.w	8001704 <HAL_DMA_Init+0x1f0>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80015ee:	6923      	ldr	r3, [r4, #16]
 80015f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f4:	bf18      	it	ne
 80015f6:	2b00      	cmpne	r3, #0
 80015f8:	f040 8089 	bne.w	800170e <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80015fc:	6962      	ldr	r2, [r4, #20]
 80015fe:	f5b2 6300 	subs.w	r3, r2, #2048	; 0x800
 8001602:	bf18      	it	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2a00      	cmp	r2, #0
 8001608:	bf08      	it	eq
 800160a:	2300      	moveq	r3, #0
 800160c:	b11b      	cbz	r3, 8001616 <HAL_DMA_Init+0x102>
 800160e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001612:	f040 8081 	bne.w	8001718 <HAL_DMA_Init+0x204>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001616:	69a2      	ldr	r2, [r4, #24]
 8001618:	f5b2 5300 	subs.w	r3, r2, #8192	; 0x2000
 800161c:	bf18      	it	ne
 800161e:	2301      	movne	r3, #1
 8001620:	2a00      	cmp	r2, #0
 8001622:	bf08      	it	eq
 8001624:	2300      	moveq	r3, #0
 8001626:	b113      	cbz	r3, 800162e <HAL_DMA_Init+0x11a>
 8001628:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800162c:	d179      	bne.n	8001722 <HAL_DMA_Init+0x20e>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800162e:	69e2      	ldr	r2, [r4, #28]
 8001630:	f5b2 7380 	subs.w	r3, r2, #256	; 0x100
 8001634:	bf18      	it	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2a00      	cmp	r2, #0
 800163a:	bf08      	it	eq
 800163c:	2300      	moveq	r3, #0
 800163e:	b10b      	cbz	r3, 8001644 <HAL_DMA_Init+0x130>
 8001640:	2a20      	cmp	r2, #32
 8001642:	d173      	bne.n	800172c <HAL_DMA_Init+0x218>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001644:	6a22      	ldr	r2, [r4, #32]
 8001646:	f5b2 3380 	subs.w	r3, r2, #65536	; 0x10000
 800164a:	bf18      	it	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2a00      	cmp	r2, #0
 8001650:	bf08      	it	eq
 8001652:	2300      	moveq	r3, #0
 8001654:	b12b      	cbz	r3, 8001662 <HAL_DMA_Init+0x14e>
 8001656:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800165a:	d002      	beq.n	8001662 <HAL_DMA_Init+0x14e>
 800165c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001660:	d169      	bne.n	8001736 <HAL_DMA_Init+0x222>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001662:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001664:	1f13      	subs	r3, r2, #4
 8001666:	bf18      	it	ne
 8001668:	2301      	movne	r3, #1
 800166a:	2a00      	cmp	r2, #0
 800166c:	bf08      	it	eq
 800166e:	2300      	moveq	r3, #0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d165      	bne.n	8001740 <HAL_DMA_Init+0x22c>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001676:	b303      	cbz	r3, 80016ba <HAL_DMA_Init+0x1a6>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800167a:	2b03      	cmp	r3, #3
 800167c:	d865      	bhi.n	800174a <HAL_DMA_Init+0x236>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800167e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001680:	f5b2 0300 	subs.w	r3, r2, #8388608	; 0x800000
 8001684:	bf18      	it	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2a00      	cmp	r2, #0
 800168a:	bf08      	it	eq
 800168c:	2300      	moveq	r3, #0
 800168e:	b12b      	cbz	r3, 800169c <HAL_DMA_Init+0x188>
 8001690:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8001694:	d002      	beq.n	800169c <HAL_DMA_Init+0x188>
 8001696:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 800169a:	d15b      	bne.n	8001754 <HAL_DMA_Init+0x240>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800169c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800169e:	f5b2 1300 	subs.w	r3, r2, #2097152	; 0x200000
 80016a2:	bf18      	it	ne
 80016a4:	2301      	movne	r3, #1
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	bf08      	it	eq
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b12b      	cbz	r3, 80016ba <HAL_DMA_Init+0x1a6>
 80016ae:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80016b2:	d002      	beq.n	80016ba <HAL_DMA_Init+0x1a6>
 80016b4:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80016b8:	d151      	bne.n	800175e <HAL_DMA_Init+0x24a>
  __HAL_UNLOCK(hdma);
 80016ba:	2300      	movs	r3, #0
 80016bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c0:	2302      	movs	r3, #2
 80016c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80016c6:	6822      	ldr	r2, [r4, #0]
 80016c8:	6813      	ldr	r3, [r2, #0]
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f012 0f01 	tst.w	r2, #1
 80016d8:	d046      	beq.n	8001768 <HAL_DMA_Init+0x254>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016da:	f7ff fdb9 	bl	8001250 <HAL_GetTick>
 80016de:	1b40      	subs	r0, r0, r5
 80016e0:	2805      	cmp	r0, #5
 80016e2:	d9f5      	bls.n	80016d0 <HAL_DMA_Init+0x1bc>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e4:	2320      	movs	r3, #32
 80016e6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e8:	2003      	movs	r0, #3
 80016ea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80016ee:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80016f0:	21ba      	movs	r1, #186	; 0xba
 80016f2:	483a      	ldr	r0, [pc, #232]	; (80017dc <HAL_DMA_Init+0x2c8>)
 80016f4:	f011 f9fe 	bl	8012af4 <assert_failed>
 80016f8:	e766      	b.n	80015c8 <HAL_DMA_Init+0xb4>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80016fa:	21bb      	movs	r1, #187	; 0xbb
 80016fc:	4837      	ldr	r0, [pc, #220]	; (80017dc <HAL_DMA_Init+0x2c8>)
 80016fe:	f011 f9f9 	bl	8012af4 <assert_failed>
 8001702:	e76d      	b.n	80015e0 <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001704:	21bc      	movs	r1, #188	; 0xbc
 8001706:	4835      	ldr	r0, [pc, #212]	; (80017dc <HAL_DMA_Init+0x2c8>)
 8001708:	f011 f9f4 	bl	8012af4 <assert_failed>
 800170c:	e76f      	b.n	80015ee <HAL_DMA_Init+0xda>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800170e:	21bd      	movs	r1, #189	; 0xbd
 8001710:	4832      	ldr	r0, [pc, #200]	; (80017dc <HAL_DMA_Init+0x2c8>)
 8001712:	f011 f9ef 	bl	8012af4 <assert_failed>
 8001716:	e771      	b.n	80015fc <HAL_DMA_Init+0xe8>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001718:	21be      	movs	r1, #190	; 0xbe
 800171a:	4830      	ldr	r0, [pc, #192]	; (80017dc <HAL_DMA_Init+0x2c8>)
 800171c:	f011 f9ea 	bl	8012af4 <assert_failed>
 8001720:	e779      	b.n	8001616 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001722:	21bf      	movs	r1, #191	; 0xbf
 8001724:	482d      	ldr	r0, [pc, #180]	; (80017dc <HAL_DMA_Init+0x2c8>)
 8001726:	f011 f9e5 	bl	8012af4 <assert_failed>
 800172a:	e780      	b.n	800162e <HAL_DMA_Init+0x11a>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800172c:	21c0      	movs	r1, #192	; 0xc0
 800172e:	482b      	ldr	r0, [pc, #172]	; (80017dc <HAL_DMA_Init+0x2c8>)
 8001730:	f011 f9e0 	bl	8012af4 <assert_failed>
 8001734:	e786      	b.n	8001644 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001736:	21c1      	movs	r1, #193	; 0xc1
 8001738:	4828      	ldr	r0, [pc, #160]	; (80017dc <HAL_DMA_Init+0x2c8>)
 800173a:	f011 f9db 	bl	8012af4 <assert_failed>
 800173e:	e790      	b.n	8001662 <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001740:	21c2      	movs	r1, #194	; 0xc2
 8001742:	4826      	ldr	r0, [pc, #152]	; (80017dc <HAL_DMA_Init+0x2c8>)
 8001744:	f011 f9d6 	bl	8012af4 <assert_failed>
 8001748:	e794      	b.n	8001674 <HAL_DMA_Init+0x160>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800174a:	21c7      	movs	r1, #199	; 0xc7
 800174c:	4823      	ldr	r0, [pc, #140]	; (80017dc <HAL_DMA_Init+0x2c8>)
 800174e:	f011 f9d1 	bl	8012af4 <assert_failed>
 8001752:	e794      	b.n	800167e <HAL_DMA_Init+0x16a>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001754:	21c8      	movs	r1, #200	; 0xc8
 8001756:	4821      	ldr	r0, [pc, #132]	; (80017dc <HAL_DMA_Init+0x2c8>)
 8001758:	f011 f9cc 	bl	8012af4 <assert_failed>
 800175c:	e79e      	b.n	800169c <HAL_DMA_Init+0x188>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800175e:	21c9      	movs	r1, #201	; 0xc9
 8001760:	481e      	ldr	r0, [pc, #120]	; (80017dc <HAL_DMA_Init+0x2c8>)
 8001762:	f011 f9c7 	bl	8012af4 <assert_failed>
 8001766:	e7a8      	b.n	80016ba <HAL_DMA_Init+0x1a6>
  tmp = hdma->Instance->CR;
 8001768:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800176a:	481d      	ldr	r0, [pc, #116]	; (80017e0 <HAL_DMA_Init+0x2cc>)
 800176c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176e:	6861      	ldr	r1, [r4, #4]
 8001770:	68a2      	ldr	r2, [r4, #8]
 8001772:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001774:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001776:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001778:	6921      	ldr	r1, [r4, #16]
 800177a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001780:	69a1      	ldr	r1, [r4, #24]
 8001782:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001784:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001786:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001788:	6a21      	ldr	r1, [r4, #32]
 800178a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800178e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001790:	2904      	cmp	r1, #4
 8001792:	d027      	beq.n	80017e4 <HAL_DMA_Init+0x2d0>
  hdma->Instance->CR = tmp;  
 8001794:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001796:	6826      	ldr	r6, [r4, #0]
 8001798:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800179a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800179e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017a0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d107      	bne.n	80017b6 <HAL_DMA_Init+0x2a2>
    tmp |= hdma->Init.FIFOThreshold;
 80017a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017a8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017ac:	b11b      	cbz	r3, 80017b6 <HAL_DMA_Init+0x2a2>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fe68 	bl	8001484 <DMA_CheckFifoParam>
 80017b4:	b9d8      	cbnz	r0, 80017ee <HAL_DMA_Init+0x2da>
  hdma->Instance->FCR = tmp;
 80017b6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017b8:	4620      	mov	r0, r4
 80017ba:	f7ff fe47 	bl	800144c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017c0:	233f      	movs	r3, #63	; 0x3f
 80017c2:	4093      	lsls	r3, r2
 80017c4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c6:	2000      	movs	r0, #0
 80017c8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80017d0:	e78d      	b.n	80016ee <HAL_DMA_Init+0x1da>
 80017d2:	bf00      	nop
 80017d4:	40026010 	.word	0x40026010
 80017d8:	40026028 	.word	0x40026028
 80017dc:	08017b84 	.word	0x08017b84
 80017e0:	f010803f 	.word	0xf010803f
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80017e8:	4301      	orrs	r1, r0
 80017ea:	430a      	orrs	r2, r1
 80017ec:	e7d2      	b.n	8001794 <HAL_DMA_Init+0x280>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017ee:	2340      	movs	r3, #64	; 0x40
 80017f0:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80017f2:	2001      	movs	r0, #1
 80017f4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80017f8:	e779      	b.n	80016ee <HAL_DMA_Init+0x1da>
    return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
 80017fc:	e777      	b.n	80016ee <HAL_DMA_Init+0x1da>
 80017fe:	bf00      	nop

08001800 <HAL_DMA_Start_IT>:
{
 8001800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001804:	4604      	mov	r4, r0
 8001806:	460f      	mov	r7, r1
 8001808:	4690      	mov	r8, r2
 800180a:	461d      	mov	r5, r3
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800180e:	1e5a      	subs	r2, r3, #1
 8001810:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001814:	429a      	cmp	r2, r3
 8001816:	d811      	bhi.n	800183c <HAL_DMA_Start_IT+0x3c>
  __HAL_LOCK(hdma);
 8001818:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800181c:	2b01      	cmp	r3, #1
 800181e:	d03a      	beq.n	8001896 <HAL_DMA_Start_IT+0x96>
 8001820:	2301      	movs	r3, #1
 8001822:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001826:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d00b      	beq.n	8001848 <HAL_DMA_Start_IT+0x48>
    __HAL_UNLOCK(hdma);	  
 8001830:	2300      	movs	r3, #0
 8001832:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001836:	2002      	movs	r0, #2
}
 8001838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800183c:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001840:	4816      	ldr	r0, [pc, #88]	; (800189c <HAL_DMA_Start_IT+0x9c>)
 8001842:	f011 f957 	bl	8012af4 <assert_failed>
 8001846:	e7e7      	b.n	8001818 <HAL_DMA_Start_IT+0x18>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001848:	2302      	movs	r3, #2
 800184a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184e:	2300      	movs	r3, #0
 8001850:	6563      	str	r3, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001852:	462b      	mov	r3, r5
 8001854:	4642      	mov	r2, r8
 8001856:	4639      	mov	r1, r7
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff fde1 	bl	8001420 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800185e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001860:	233f      	movs	r3, #63	; 0x3f
 8001862:	4093      	lsls	r3, r2
 8001864:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	6813      	ldr	r3, [r2, #0]
 800186a:	f043 0316 	orr.w	r3, r3, #22
 800186e:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	6953      	ldr	r3, [r2, #20]
 8001874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001878:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800187a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800187c:	b123      	cbz	r3, 8001888 <HAL_DMA_Start_IT+0x88>
      hdma->Instance->CR  |= DMA_IT_HT;
 800187e:	6822      	ldr	r2, [r4, #0]
 8001880:	6813      	ldr	r3, [r2, #0]
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	6813      	ldr	r3, [r2, #0]
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001892:	2000      	movs	r0, #0
 8001894:	e7d0      	b.n	8001838 <HAL_DMA_Start_IT+0x38>
  __HAL_LOCK(hdma);
 8001896:	2002      	movs	r0, #2
 8001898:	e7ce      	b.n	8001838 <HAL_DMA_Start_IT+0x38>
 800189a:	bf00      	nop
 800189c:	08017b84 	.word	0x08017b84

080018a0 <HAL_DMA_Abort>:
{
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80018a6:	f7ff fcd3 	bl	8001250 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018aa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d006      	beq.n	80018c2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80018b8:	2300      	movs	r3, #0
 80018ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
}
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
 80018c2:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	f023 0316 	bic.w	r3, r3, #22
 80018cc:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ce:	6822      	ldr	r2, [r4, #0]
 80018d0:	6953      	ldr	r3, [r2, #20]
 80018d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018d6:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018da:	b1e3      	cbz	r3, 8001916 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	6813      	ldr	r3, [r2, #0]
 80018e0:	f023 0308 	bic.w	r3, r3, #8
 80018e4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80018e6:	6822      	ldr	r2, [r4, #0]
 80018e8:	6813      	ldr	r3, [r2, #0]
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f013 0f01 	tst.w	r3, #1
 80018f8:	d011      	beq.n	800191e <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fa:	f7ff fca9 	bl	8001250 <HAL_GetTick>
 80018fe:	1b40      	subs	r0, r0, r5
 8001900:	2805      	cmp	r0, #5
 8001902:	d9f5      	bls.n	80018f0 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001904:	2320      	movs	r3, #32
 8001906:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8001908:	2300      	movs	r3, #0
 800190a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190e:	2003      	movs	r0, #3
 8001910:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001914:	e7d4      	b.n	80018c0 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001916:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1df      	bne.n	80018dc <HAL_DMA_Abort+0x3c>
 800191c:	e7e3      	b.n	80018e6 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800191e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001920:	233f      	movs	r3, #63	; 0x3f
 8001922:	4093      	lsls	r3, r2
 8001924:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8001926:	2000      	movs	r0, #0
 8001928:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800192c:	2301      	movs	r3, #1
 800192e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001932:	e7c5      	b.n	80018c0 <HAL_DMA_Abort+0x20>

08001934 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001934:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
 8001944:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001946:	2305      	movs	r3, #5
 8001948:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800194c:	6802      	ldr	r2, [r0, #0]
 800194e:	6813      	ldr	r3, [r2, #0]
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001956:	2000      	movs	r0, #0
}
 8001958:	4770      	bx	lr
	...

0800195c <HAL_DMA_IRQHandler>:
{
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	b083      	sub	sp, #12
 8001960:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8001966:	4b72      	ldr	r3, [pc, #456]	; (8001b30 <HAL_DMA_IRQHandler+0x1d4>)
 8001968:	681d      	ldr	r5, [r3, #0]
 800196a:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <HAL_DMA_IRQHandler+0x1d8>)
 800196c:	fba3 3505 	umull	r3, r5, r3, r5
 8001970:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001972:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001974:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001976:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001978:	2308      	movs	r3, #8
 800197a:	4093      	lsls	r3, r2
 800197c:	4233      	tst	r3, r6
 800197e:	d010      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001980:	6803      	ldr	r3, [r0, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	f012 0f04 	tst.w	r2, #4
 8001988:	d00b      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f022 0204 	bic.w	r2, r2, #4
 8001990:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001992:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001994:	2308      	movs	r3, #8
 8001996:	4093      	lsls	r3, r2
 8001998:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800199a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019a4:	2301      	movs	r3, #1
 80019a6:	4093      	lsls	r3, r2
 80019a8:	4233      	tst	r3, r6
 80019aa:	d009      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019ac:	6822      	ldr	r2, [r4, #0]
 80019ae:	6952      	ldr	r2, [r2, #20]
 80019b0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80019b4:	d004      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019b6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019c2:	2304      	movs	r3, #4
 80019c4:	4093      	lsls	r3, r2
 80019c6:	4233      	tst	r3, r6
 80019c8:	d009      	beq.n	80019de <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	f012 0f02 	tst.w	r2, #2
 80019d2:	d004      	beq.n	80019de <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019d4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019e0:	2310      	movs	r3, #16
 80019e2:	4093      	lsls	r3, r2
 80019e4:	4233      	tst	r3, r6
 80019e6:	d024      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	f012 0f08 	tst.w	r2, #8
 80019f0:	d01f      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019f2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80019fc:	d00d      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001a04:	d104      	bne.n	8001a10 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a08:	b19b      	cbz	r3, 8001a32 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4798      	blx	r3
 8001a0e:	e010      	b.n	8001a32 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a12:	b173      	cbz	r3, 8001a32 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001a14:	4620      	mov	r0, r4
 8001a16:	4798      	blx	r3
 8001a18:	e00b      	b.n	8001a32 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a20:	d103      	bne.n	8001a2a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f022 0208 	bic.w	r2, r2, #8
 8001a28:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a2c:	b10b      	cbz	r3, 8001a32 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001a2e:	4620      	mov	r0, r4
 8001a30:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a34:	2320      	movs	r3, #32
 8001a36:	4093      	lsls	r3, r2
 8001a38:	4233      	tst	r3, r6
 8001a3a:	d055      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a3c:	6822      	ldr	r2, [r4, #0]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	f012 0f10 	tst.w	r2, #16
 8001a44:	d050      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a46:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a48:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d00e      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001a5a:	d033      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001a62:	d12a      	bne.n	8001aba <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001a64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d03e      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4798      	blx	r3
 8001a6e:	e03b      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a70:	6822      	ldr	r2, [r4, #0]
 8001a72:	6813      	ldr	r3, [r2, #0]
 8001a74:	f023 0316 	bic.w	r3, r3, #22
 8001a78:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a7a:	6822      	ldr	r2, [r4, #0]
 8001a7c:	6953      	ldr	r3, [r2, #20]
 8001a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a82:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a86:	b1a3      	cbz	r3, 8001ab2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a88:	6822      	ldr	r2, [r4, #0]
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	f023 0308 	bic.w	r3, r3, #8
 8001a90:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a94:	233f      	movs	r3, #63	; 0x3f
 8001a96:	4093      	lsls	r3, r2
 8001a98:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001aa6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d03f      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001aac:	4620      	mov	r0, r4
 8001aae:	4798      	blx	r3
 8001ab0:	e03c      	b.n	8001b2c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ab2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e7      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x12c>
 8001ab8:	e7eb      	b.n	8001a92 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001aba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001abc:	b1a3      	cbz	r3, 8001ae8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001abe:	4620      	mov	r0, r4
 8001ac0:	4798      	blx	r3
 8001ac2:	e011      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001aca:	d109      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	f022 0210 	bic.w	r2, r2, #16
 8001ad2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001ae0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ae2:	b10b      	cbz	r3, 8001ae8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ae8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001aea:	b1fb      	cbz	r3, 8001b2c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001aec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001aee:	f013 0f01 	tst.w	r3, #1
 8001af2:	d017      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001af4:	2305      	movs	r3, #5
 8001af6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001afa:	6822      	ldr	r2, [r4, #0]
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001b04:	9b01      	ldr	r3, [sp, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	42ab      	cmp	r3, r5
 8001b0c:	d804      	bhi.n	8001b18 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f013 0f01 	tst.w	r3, #1
 8001b16:	d1f5      	bne.n	8001b04 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001b24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b26:	b10b      	cbz	r3, 8001b2c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4798      	blx	r3
}
 8001b2c:	b003      	add	sp, #12
 8001b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b30:	20000088 	.word	0x20000088
 8001b34:	1b4e81b5 	.word	0x1b4e81b5

08001b38 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001b38:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001b3a:	6806      	ldr	r6, [r0, #0]
 8001b3c:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8001b3e:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001b42:	9d03      	ldr	r5, [sp, #12]
 8001b44:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001b48:	431c      	orrs	r4, r3
 8001b4a:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001b4c:	6803      	ldr	r3, [r0, #0]
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001b50:	6843      	ldr	r3, [r0, #4]
 8001b52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001b56:	d003      	beq.n	8001b60 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001b58:	6803      	ldr	r3, [r0, #0]
 8001b5a:	60d9      	str	r1, [r3, #12]
  }
}
 8001b5c:	bc70      	pop	{r4, r5, r6}
 8001b5e:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001b60:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001b64:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001b68:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001b6c:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001b6e:	6884      	ldr	r4, [r0, #8]
 8001b70:	b194      	cbz	r4, 8001b98 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001b72:	2c01      	cmp	r4, #1
 8001b74:	d00e      	beq.n	8001b94 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001b76:	2c02      	cmp	r4, #2
 8001b78:	d011      	beq.n	8001b9e <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001b7a:	2c03      	cmp	r4, #3
 8001b7c:	d017      	beq.n	8001bae <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 8001b7e:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 8001b80:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001b82:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001b84:	0219      	lsls	r1, r3, #8
 8001b86:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001b8a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8001b8e:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8001b92:	e001      	b.n	8001b98 <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 8001b94:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001b98:	6803      	ldr	r3, [r0, #0]
 8001b9a:	6399      	str	r1, [r3, #56]	; 0x38
 8001b9c:	e7de      	b.n	8001b5c <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8001b9e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001ba0:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001ba2:	02d9      	lsls	r1, r3, #11
 8001ba4:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001ba8:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001bac:	e7f4      	b.n	8001b98 <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8001bae:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8001bb0:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8001bb2:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001bb4:	0299      	lsls	r1, r3, #10
 8001bb6:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001bba:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8001bbe:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001bc2:	e7e9      	b.n	8001b98 <DMA2D_SetConfig+0x60>

08001bc4 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d055      	beq.n	8001c74 <HAL_DMA2D_Init+0xb0>
{
 8001bc8:	b510      	push	{r4, lr}
 8001bca:	4604      	mov	r4, r0
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 8001bcc:	6802      	ldr	r2, [r0, #0]
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_DMA2D_Init+0xb4>)
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA2D_Init+0x18>
 8001bd4:	21f6      	movs	r1, #246	; 0xf6
 8001bd6:	4829      	ldr	r0, [pc, #164]	; (8001c7c <HAL_DMA2D_Init+0xb8>)
 8001bd8:	f010 ff8c 	bl	8012af4 <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8001bdc:	6862      	ldr	r2, [r4, #4]
 8001bde:	f5b2 3380 	subs.w	r3, r2, #65536	; 0x10000
 8001be2:	bf18      	it	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	bf08      	it	eq
 8001bea:	2300      	moveq	r3, #0
 8001bec:	b12b      	cbz	r3, 8001bfa <HAL_DMA2D_Init+0x36>
 8001bee:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001bf2:	d002      	beq.n	8001bfa <HAL_DMA2D_Init+0x36>
 8001bf4:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001bf8:	d127      	bne.n	8001c4a <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 8001bfa:	68a3      	ldr	r3, [r4, #8]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d829      	bhi.n	8001c54 <HAL_DMA2D_Init+0x90>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8001c00:	68e3      	ldr	r3, [r4, #12]
 8001c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c06:	d22a      	bcs.n	8001c5e <HAL_DMA2D_Init+0x9a>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001c08:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001c0c:	b363      	cbz	r3, 8001c68 <HAL_DMA2D_Init+0xa4>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c1c:	6861      	ldr	r1, [r4, #4]
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c22:	6822      	ldr	r2, [r4, #0]
 8001c24:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001c26:	f023 0307 	bic.w	r3, r3, #7
 8001c2a:	68a1      	ldr	r1, [r4, #8]
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c30:	6822      	ldr	r2, [r4, #0]
 8001c32:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_DMA2D_Init+0xbc>)
 8001c36:	400b      	ands	r3, r1
 8001c38:	68e1      	ldr	r1, [r4, #12]
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c3e:	2000      	movs	r0, #0
 8001c40:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001c48:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8001c4a:	21f7      	movs	r1, #247	; 0xf7
 8001c4c:	480b      	ldr	r0, [pc, #44]	; (8001c7c <HAL_DMA2D_Init+0xb8>)
 8001c4e:	f010 ff51 	bl	8012af4 <assert_failed>
 8001c52:	e7d2      	b.n	8001bfa <HAL_DMA2D_Init+0x36>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 8001c54:	21f8      	movs	r1, #248	; 0xf8
 8001c56:	4809      	ldr	r0, [pc, #36]	; (8001c7c <HAL_DMA2D_Init+0xb8>)
 8001c58:	f010 ff4c 	bl	8012af4 <assert_failed>
 8001c5c:	e7d0      	b.n	8001c00 <HAL_DMA2D_Init+0x3c>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8001c5e:	21f9      	movs	r1, #249	; 0xf9
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <HAL_DMA2D_Init+0xb8>)
 8001c62:	f010 ff47 	bl	8012af4 <assert_failed>
 8001c66:	e7cf      	b.n	8001c08 <HAL_DMA2D_Init+0x44>
    hdma2d->Lock = HAL_UNLOCKED;
 8001c68:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f00f fdd7 	bl	8011820 <HAL_DMA2D_MspInit>
 8001c72:	e7cc      	b.n	8001c0e <HAL_DMA2D_Init+0x4a>
     return HAL_ERROR;
 8001c74:	2001      	movs	r0, #1
}
 8001c76:	4770      	bx	lr
 8001c78:	4002b000 	.word	0x4002b000
 8001c7c:	08017bc4 	.word	0x08017bc4
 8001c80:	ffffc000 	.word	0xffffc000

08001c84 <HAL_DMA2D_Start>:
{
 8001c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	460f      	mov	r7, r1
 8001c8e:	4690      	mov	r8, r2
 8001c90:	461d      	mov	r5, r3
 8001c92:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DMA2D_LINE(Height));
 8001c94:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8001c98:	d21c      	bcs.n	8001cd4 <HAL_DMA2D_Start+0x50>
  assert_param(IS_DMA2D_PIXEL(Width));
 8001c9a:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8001c9e:	d21f      	bcs.n	8001ce0 <HAL_DMA2D_Start+0x5c>
  __HAL_LOCK(hdma2d);
 8001ca0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d021      	beq.n	8001cec <HAL_DMA2D_Start+0x68>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001cb4:	9600      	str	r6, [sp, #0]
 8001cb6:	462b      	mov	r3, r5
 8001cb8:	4642      	mov	r2, r8
 8001cba:	4639      	mov	r1, r7
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f7ff ff3b 	bl	8001b38 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001cc2:	6822      	ldr	r2, [r4, #0]
 8001cc4:	6813      	ldr	r3, [r2, #0]
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001ccc:	2000      	movs	r0, #0
}
 8001cce:	b002      	add	sp, #8
 8001cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA2D_LINE(Height));
 8001cd4:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_DMA2D_Start+0x6c>)
 8001cda:	f010 ff0b 	bl	8012af4 <assert_failed>
 8001cde:	e7dc      	b.n	8001c9a <HAL_DMA2D_Start+0x16>
  assert_param(IS_DMA2D_PIXEL(Width));
 8001ce0:	f240 21a5 	movw	r1, #677	; 0x2a5
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <HAL_DMA2D_Start+0x6c>)
 8001ce6:	f010 ff05 	bl	8012af4 <assert_failed>
 8001cea:	e7d9      	b.n	8001ca0 <HAL_DMA2D_Start+0x1c>
  __HAL_LOCK(hdma2d);
 8001cec:	2002      	movs	r0, #2
 8001cee:	e7ee      	b.n	8001cce <HAL_DMA2D_Start+0x4a>
 8001cf0:	08017bc4 	.word	0x08017bc4

08001cf4 <HAL_DMA2D_PollForTransfer>:
{
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	4604      	mov	r4, r0
 8001cfa:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001d00:	6803      	ldr	r3, [r0, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f013 0f01 	tst.w	r3, #1
 8001d08:	d111      	bne.n	8001d2e <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d10:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8001d12:	f013 0f20 	tst.w	r3, #32
 8001d16:	d147      	bne.n	8001da8 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	2212      	movs	r2, #18
 8001d1c:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8001d2e:	f7ff fa8f 	bl	8001250 <HAL_GetTick>
 8001d32:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	f012 0f02 	tst.w	r2, #2
 8001d3c:	d1e5      	bne.n	8001d0a <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001d42:	9a01      	ldr	r2, [sp, #4]
 8001d44:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001d48:	d114      	bne.n	8001d74 <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 8001d4a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d4e:	d0f1      	beq.n	8001d34 <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001d50:	f7ff fa7e 	bl	8001250 <HAL_GetTick>
 8001d54:	1b80      	subs	r0, r0, r6
 8001d56:	42a8      	cmp	r0, r5
 8001d58:	d801      	bhi.n	8001d5e <HAL_DMA2D_PollForTransfer+0x6a>
 8001d5a:	2d00      	cmp	r5, #0
 8001d5c:	d1ea      	bne.n	8001d34 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001d66:	2003      	movs	r0, #3
 8001d68:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001d72:	e7da      	b.n	8001d2a <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d74:	9a01      	ldr	r2, [sp, #4]
 8001d76:	f012 0f20 	tst.w	r2, #32
 8001d7a:	d003      	beq.n	8001d84 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d7e:	f042 0202 	orr.w	r2, r2, #2
 8001d82:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d84:	9a01      	ldr	r2, [sp, #4]
 8001d86:	f012 0f01 	tst.w	r2, #1
 8001d8a:	d003      	beq.n	8001d94 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d8c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d94:	2221      	movs	r2, #33	; 0x21
 8001d96:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
 8001da6:	e7c0      	b.n	8001d2a <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8001da8:	f7ff fa52 	bl	8001250 <HAL_GetTick>
 8001dac:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	f012 0f10 	tst.w	r2, #16
 8001db6:	d1af      	bne.n	8001d18 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001dbc:	9a01      	ldr	r2, [sp, #4]
 8001dbe:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001dc2:	d114      	bne.n	8001dee <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 8001dc4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001dc8:	d0f1      	beq.n	8001dae <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001dca:	f7ff fa41 	bl	8001250 <HAL_GetTick>
 8001dce:	1b80      	subs	r0, r0, r6
 8001dd0:	42a8      	cmp	r0, r5
 8001dd2:	d801      	bhi.n	8001dd8 <HAL_DMA2D_PollForTransfer+0xe4>
 8001dd4:	2d00      	cmp	r5, #0
 8001dd6:	d1ea      	bne.n	8001dae <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001dd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dda:	f043 0320 	orr.w	r3, r3, #32
 8001dde:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001de0:	2003      	movs	r0, #3
 8001de2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001de6:	2300      	movs	r3, #0
 8001de8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001dec:	e79d      	b.n	8001d2a <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001dee:	9a01      	ldr	r2, [sp, #4]
 8001df0:	f012 0f08 	tst.w	r2, #8
 8001df4:	d003      	beq.n	8001dfe <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001df6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001df8:	f042 0204 	orr.w	r2, r2, #4
 8001dfc:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001dfe:	9a01      	ldr	r2, [sp, #4]
 8001e00:	f012 0f20 	tst.w	r2, #32
 8001e04:	d003      	beq.n	8001e0e <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e08:	f042 0202 	orr.w	r2, r2, #2
 8001e0c:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001e0e:	9a01      	ldr	r2, [sp, #4]
 8001e10:	f012 0f01 	tst.w	r2, #1
 8001e14:	d003      	beq.n	8001e1e <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001e16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e1e:	2229      	movs	r2, #41	; 0x29
 8001e20:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001e22:	2304      	movs	r3, #4
 8001e24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001e2e:	2001      	movs	r0, #1
 8001e30:	e77b      	b.n	8001d2a <HAL_DMA2D_PollForTransfer+0x36>
	...

08001e34 <HAL_DMA2D_ConfigLayer>:
{
 8001e34:	b538      	push	{r3, r4, r5, lr}
 8001e36:	4604      	mov	r4, r0
 8001e38:	460d      	mov	r5, r1
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8001e3a:	2901      	cmp	r1, #1
 8001e3c:	d848      	bhi.n	8001ed0 <HAL_DMA2D_ConfigLayer+0x9c>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8001e3e:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e48:	d248      	bcs.n	8001edc <HAL_DMA2D_ConfigLayer+0xa8>
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001e4a:	6863      	ldr	r3, [r4, #4]
 8001e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e50:	d00b      	beq.n	8001e6a <HAL_DMA2D_ConfigLayer+0x36>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8001e52:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b0a      	cmp	r3, #10
 8001e5a:	d845      	bhi.n	8001ee8 <HAL_DMA2D_ConfigLayer+0xb4>
    if(hdma2d->Init.Mode != DMA2D_M2M)
 8001e5c:	6863      	ldr	r3, [r4, #4]
 8001e5e:	b123      	cbz	r3, 8001e6a <HAL_DMA2D_ConfigLayer+0x36>
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8001e60:	1cab      	adds	r3, r5, #2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	58e3      	ldr	r3, [r4, r3]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d844      	bhi.n	8001ef4 <HAL_DMA2D_ConfigLayer+0xc0>
  __HAL_LOCK(hdma2d);
 8001e6a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d06f      	beq.n	8001f52 <HAL_DMA2D_ConfigLayer+0x11e>
 8001e72:	2301      	movs	r3, #1
 8001e74:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e7e:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	1cab      	adds	r3, r5, #2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	58e3      	ldr	r3, [r4, r3]
 8001e8a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e8e:	3a09      	subs	r2, #9
 8001e90:	2a01      	cmp	r2, #1
 8001e92:	d935      	bls.n	8001f00 <HAL_DMA2D_ConfigLayer+0xcc>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e94:	1caa      	adds	r2, r5, #2
 8001e96:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8001e9a:	6852      	ldr	r2, [r2, #4]
 8001e9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001ea0:	2d00      	cmp	r5, #0
 8001ea2:	d13e      	bne.n	8001f22 <HAL_DMA2D_ConfigLayer+0xee>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001ea4:	6821      	ldr	r1, [r4, #0]
 8001ea6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001ea8:	4a2b      	ldr	r2, [pc, #172]	; (8001f58 <HAL_DMA2D_ConfigLayer+0x124>)
 8001eaa:	4002      	ands	r2, r0
 8001eac:	4313      	orrs	r3, r2
 8001eae:	624b      	str	r3, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001eb0:	6822      	ldr	r2, [r4, #0]
 8001eb2:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001eb6:	6999      	ldr	r1, [r3, #24]
 8001eb8:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	3b09      	subs	r3, #9
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d926      	bls.n	8001f10 <HAL_DMA2D_ConfigLayer+0xdc>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001ece:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8001ed0:	f240 614a 	movw	r1, #1610	; 0x64a
 8001ed4:	4821      	ldr	r0, [pc, #132]	; (8001f5c <HAL_DMA2D_ConfigLayer+0x128>)
 8001ed6:	f010 fe0d 	bl	8012af4 <assert_failed>
 8001eda:	e7b0      	b.n	8001e3e <HAL_DMA2D_ConfigLayer+0xa>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8001edc:	f240 614b 	movw	r1, #1611	; 0x64b
 8001ee0:	481e      	ldr	r0, [pc, #120]	; (8001f5c <HAL_DMA2D_ConfigLayer+0x128>)
 8001ee2:	f010 fe07 	bl	8012af4 <assert_failed>
 8001ee6:	e7b0      	b.n	8001e4a <HAL_DMA2D_ConfigLayer+0x16>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8001ee8:	f240 614e 	movw	r1, #1614	; 0x64e
 8001eec:	481b      	ldr	r0, [pc, #108]	; (8001f5c <HAL_DMA2D_ConfigLayer+0x128>)
 8001eee:	f010 fe01 	bl	8012af4 <assert_failed>
 8001ef2:	e7b3      	b.n	8001e5c <HAL_DMA2D_ConfigLayer+0x28>
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8001ef4:	f240 6151 	movw	r1, #1617	; 0x651
 8001ef8:	4818      	ldr	r0, [pc, #96]	; (8001f5c <HAL_DMA2D_ConfigLayer+0x128>)
 8001efa:	f010 fdfb 	bl	8012af4 <assert_failed>
 8001efe:	e7b4      	b.n	8001e6a <HAL_DMA2D_ConfigLayer+0x36>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001f00:	1caa      	adds	r2, r5, #2
 8001f02:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8001f06:	6852      	ldr	r2, [r2, #4]
 8001f08:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	e7c7      	b.n	8001ea0 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001f10:	3502      	adds	r5, #2
 8001f12:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8001f16:	686b      	ldr	r3, [r5, #4]
 8001f18:	6822      	ldr	r2, [r4, #0]
 8001f1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f1e:	6293      	str	r3, [r2, #40]	; 0x28
 8001f20:	e7cf      	b.n	8001ec2 <HAL_DMA2D_ConfigLayer+0x8e>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f22:	6821      	ldr	r1, [r4, #0]
 8001f24:	69c8      	ldr	r0, [r1, #28]
 8001f26:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <HAL_DMA2D_ConfigLayer+0x124>)
 8001f28:	4002      	ands	r2, r0
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61cb      	str	r3, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f2e:	6822      	ldr	r2, [r4, #0]
 8001f30:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001f34:	6999      	ldr	r1, [r3, #24]
 8001f36:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	3b09      	subs	r3, #9
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d8c0      	bhi.n	8001ec2 <HAL_DMA2D_ConfigLayer+0x8e>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001f40:	3502      	adds	r5, #2
 8001f42:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8001f46:	686b      	ldr	r3, [r5, #4]
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	e7b7      	b.n	8001ec2 <HAL_DMA2D_ConfigLayer+0x8e>
  __HAL_LOCK(hdma2d);
 8001f52:	2002      	movs	r0, #2
 8001f54:	e7bb      	b.n	8001ece <HAL_DMA2D_ConfigLayer+0x9a>
 8001f56:	bf00      	nop
 8001f58:	00fcfff0 	.word	0x00fcfff0
 8001f5c:	08017bc4 	.word	0x08017bc4

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	4680      	mov	r8, r0
 8001f68:	460e      	mov	r6, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f6a:	4ab5      	ldr	r2, [pc, #724]	; (8002240 <HAL_GPIO_Init+0x2e0>)
 8001f6c:	4bb5      	ldr	r3, [pc, #724]	; (8002244 <HAL_GPIO_Init+0x2e4>)
 8001f6e:	4290      	cmp	r0, r2
 8001f70:	bf18      	it	ne
 8001f72:	4298      	cmpne	r0, r3
 8001f74:	d02b      	beq.n	8001fce <HAL_GPIO_Init+0x6e>
 8001f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7a:	1ac3      	subs	r3, r0, r3
 8001f7c:	bf18      	it	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f84:	4290      	cmp	r0, r2
 8001f86:	d022      	beq.n	8001fce <HAL_GPIO_Init+0x6e>
 8001f88:	b30b      	cbz	r3, 8001fce <HAL_GPIO_Init+0x6e>
 8001f8a:	4baf      	ldr	r3, [pc, #700]	; (8002248 <HAL_GPIO_Init+0x2e8>)
 8001f8c:	1ac3      	subs	r3, r0, r3
 8001f8e:	bf18      	it	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f96:	4290      	cmp	r0, r2
 8001f98:	d019      	beq.n	8001fce <HAL_GPIO_Init+0x6e>
 8001f9a:	b1c3      	cbz	r3, 8001fce <HAL_GPIO_Init+0x6e>
 8001f9c:	4bab      	ldr	r3, [pc, #684]	; (800224c <HAL_GPIO_Init+0x2ec>)
 8001f9e:	1ac3      	subs	r3, r0, r3
 8001fa0:	bf18      	it	ne
 8001fa2:	2301      	movne	r3, #1
 8001fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa8:	4290      	cmp	r0, r2
 8001faa:	d010      	beq.n	8001fce <HAL_GPIO_Init+0x6e>
 8001fac:	b17b      	cbz	r3, 8001fce <HAL_GPIO_Init+0x6e>
 8001fae:	4ba8      	ldr	r3, [pc, #672]	; (8002250 <HAL_GPIO_Init+0x2f0>)
 8001fb0:	1ac3      	subs	r3, r0, r3
 8001fb2:	bf18      	it	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fba:	4290      	cmp	r0, r2
 8001fbc:	d007      	beq.n	8001fce <HAL_GPIO_Init+0x6e>
 8001fbe:	b133      	cbz	r3, 8001fce <HAL_GPIO_Init+0x6e>
 8001fc0:	4ba4      	ldr	r3, [pc, #656]	; (8002254 <HAL_GPIO_Init+0x2f4>)
 8001fc2:	4298      	cmp	r0, r3
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x6e>
 8001fc6:	21b1      	movs	r1, #177	; 0xb1
 8001fc8:	48a3      	ldr	r0, [pc, #652]	; (8002258 <HAL_GPIO_Init+0x2f8>)
 8001fca:	f010 fd93 	bl	8012af4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001fce:	8833      	ldrh	r3, [r6, #0]
 8001fd0:	b333      	cbz	r3, 8002020 <HAL_GPIO_Init+0xc0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001fd2:	6873      	ldr	r3, [r6, #4]
 8001fd4:	2b11      	cmp	r3, #17
 8001fd6:	bf18      	it	ne
 8001fd8:	2b01      	cmpne	r3, #1
 8001fda:	d91c      	bls.n	8002016 <HAL_GPIO_Init+0xb6>
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d01a      	beq.n	8002016 <HAL_GPIO_Init+0xb6>
 8001fe0:	2b12      	cmp	r3, #18
 8001fe2:	d018      	beq.n	8002016 <HAL_GPIO_Init+0xb6>
 8001fe4:	4a9d      	ldr	r2, [pc, #628]	; (800225c <HAL_GPIO_Init+0x2fc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d015      	beq.n	8002016 <HAL_GPIO_Init+0xb6>
 8001fea:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d011      	beq.n	8002016 <HAL_GPIO_Init+0xb6>
 8001ff2:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0xb6>
 8001ffa:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d009      	beq.n	8002016 <HAL_GPIO_Init+0xb6>
 8002002:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8002006:	4293      	cmp	r3, r2
 8002008:	d005      	beq.n	8002016 <HAL_GPIO_Init+0xb6>
 800200a:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800200e:	4293      	cmp	r3, r2
 8002010:	d001      	beq.n	8002016 <HAL_GPIO_Init+0xb6>
 8002012:	2b03      	cmp	r3, #3
 8002014:	d109      	bne.n	800202a <HAL_GPIO_Init+0xca>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002016:	68b3      	ldr	r3, [r6, #8]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d80b      	bhi.n	8002034 <HAL_GPIO_Init+0xd4>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800201c:	2400      	movs	r4, #0
 800201e:	e04f      	b.n	80020c0 <HAL_GPIO_Init+0x160>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002020:	21b2      	movs	r1, #178	; 0xb2
 8002022:	488d      	ldr	r0, [pc, #564]	; (8002258 <HAL_GPIO_Init+0x2f8>)
 8002024:	f010 fd66 	bl	8012af4 <assert_failed>
 8002028:	e7d3      	b.n	8001fd2 <HAL_GPIO_Init+0x72>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800202a:	21b3      	movs	r1, #179	; 0xb3
 800202c:	488a      	ldr	r0, [pc, #552]	; (8002258 <HAL_GPIO_Init+0x2f8>)
 800202e:	f010 fd61 	bl	8012af4 <assert_failed>
 8002032:	e7f0      	b.n	8002016 <HAL_GPIO_Init+0xb6>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002034:	21b4      	movs	r1, #180	; 0xb4
 8002036:	4888      	ldr	r0, [pc, #544]	; (8002258 <HAL_GPIO_Init+0x2f8>)
 8002038:	f010 fd5c 	bl	8012af4 <assert_failed>
 800203c:	e7ee      	b.n	800201c <HAL_GPIO_Init+0xbc>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800203e:	21c5      	movs	r1, #197	; 0xc5
 8002040:	4885      	ldr	r0, [pc, #532]	; (8002258 <HAL_GPIO_Init+0x2f8>)
 8002042:	f010 fd57 	bl	8012af4 <assert_failed>
 8002046:	e052      	b.n	80020ee <HAL_GPIO_Init+0x18e>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002048:	21d9      	movs	r1, #217	; 0xd9
 800204a:	4883      	ldr	r0, [pc, #524]	; (8002258 <HAL_GPIO_Init+0x2f8>)
 800204c:	f010 fd52 	bl	8012af4 <assert_failed>
 8002050:	e07d      	b.n	800214e <HAL_GPIO_Init+0x1ee>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002052:	2309      	movs	r3, #9
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0xf8>
 8002056:	2300      	movs	r3, #0
 8002058:	408b      	lsls	r3, r1
 800205a:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 800205c:	3202      	adds	r2, #2
 800205e:	4980      	ldr	r1, [pc, #512]	; (8002260 <HAL_GPIO_Init+0x300>)
 8002060:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002064:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_GPIO_Init+0x304>)
 8002066:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8002068:	43fb      	mvns	r3, r7
 800206a:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800206e:	6870      	ldr	r0, [r6, #4]
 8002070:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8002074:	d001      	beq.n	800207a <HAL_GPIO_Init+0x11a>
        {
          temp |= iocurrent;
 8002076:	ea47 0102 	orr.w	r1, r7, r2
        }
        EXTI->IMR = temp;
 800207a:	4a7a      	ldr	r2, [pc, #488]	; (8002264 <HAL_GPIO_Init+0x304>)
 800207c:	6011      	str	r1, [r2, #0]

        temp = EXTI->EMR;
 800207e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002080:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002084:	6870      	ldr	r0, [r6, #4]
 8002086:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800208a:	d001      	beq.n	8002090 <HAL_GPIO_Init+0x130>
        {
          temp |= iocurrent;
 800208c:	ea47 0102 	orr.w	r1, r7, r2
        }
        EXTI->EMR = temp;
 8002090:	4a74      	ldr	r2, [pc, #464]	; (8002264 <HAL_GPIO_Init+0x304>)
 8002092:	6051      	str	r1, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002094:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002096:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209a:	6870      	ldr	r0, [r6, #4]
 800209c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80020a0:	d001      	beq.n	80020a6 <HAL_GPIO_Init+0x146>
        {
          temp |= iocurrent;
 80020a2:	ea47 0102 	orr.w	r1, r7, r2
        }
        EXTI->RTSR = temp;
 80020a6:	4a6f      	ldr	r2, [pc, #444]	; (8002264 <HAL_GPIO_Init+0x304>)
 80020a8:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 80020aa:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ae:	6871      	ldr	r1, [r6, #4]
 80020b0:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 80020b4:	d001      	beq.n	80020ba <HAL_GPIO_Init+0x15a>
        {
          temp |= iocurrent;
 80020b6:	ea47 0302 	orr.w	r3, r7, r2
        }
        EXTI->FTSR = temp;
 80020ba:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <HAL_GPIO_Init+0x304>)
 80020bc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020be:	3401      	adds	r4, #1
 80020c0:	2c0f      	cmp	r4, #15
 80020c2:	f200 80b9 	bhi.w	8002238 <HAL_GPIO_Init+0x2d8>
    ioposition = ((uint32_t)0x01) << position;
 80020c6:	2501      	movs	r5, #1
 80020c8:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	6837      	ldr	r7, [r6, #0]
 80020cc:	402f      	ands	r7, r5
    if(iocurrent == ioposition)
 80020ce:	42bd      	cmp	r5, r7
 80020d0:	d1f5      	bne.n	80020be <HAL_GPIO_Init+0x15e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d2:	6873      	ldr	r3, [r6, #4]
 80020d4:	2b12      	cmp	r3, #18
 80020d6:	bf18      	it	ne
 80020d8:	2b02      	cmpne	r3, #2
 80020da:	d118      	bne.n	800210e <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80020dc:	6933      	ldr	r3, [r6, #16]
 80020de:	2b0f      	cmp	r3, #15
 80020e0:	bf18      	it	ne
 80020e2:	2b0c      	cmpne	r3, #12
 80020e4:	d903      	bls.n	80020ee <HAL_GPIO_Init+0x18e>
 80020e6:	2b0d      	cmp	r3, #13
 80020e8:	d001      	beq.n	80020ee <HAL_GPIO_Init+0x18e>
 80020ea:	2b0e      	cmp	r3, #14
 80020ec:	d1a7      	bne.n	800203e <HAL_GPIO_Init+0xde>
        temp = GPIOx->AFR[position >> 3];
 80020ee:	08e2      	lsrs	r2, r4, #3
 80020f0:	3208      	adds	r2, #8
 80020f2:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020f6:	f004 0307 	and.w	r3, r4, #7
 80020fa:	0099      	lsls	r1, r3, #2
 80020fc:	230f      	movs	r3, #15
 80020fe:	408b      	lsls	r3, r1
 8002100:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002104:	6933      	ldr	r3, [r6, #16]
 8002106:	408b      	lsls	r3, r1
 8002108:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 800210a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
      temp = GPIOx->MODER;
 800210e:	f8d8 2000 	ldr.w	r2, [r8]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002112:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8002116:	f04f 0903 	mov.w	r9, #3
 800211a:	fa09 f90a 	lsl.w	r9, r9, sl
 800211e:	ea6f 0909 	mvn.w	r9, r9
 8002122:	ea09 0202 	and.w	r2, r9, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002126:	6873      	ldr	r3, [r6, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	fa03 f30a 	lsl.w	r3, r3, sl
 8002130:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8002132:	f8c8 3000 	str.w	r3, [r8]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002136:	6873      	ldr	r3, [r6, #4]
 8002138:	1e5a      	subs	r2, r3, #1
 800213a:	2b11      	cmp	r3, #17
 800213c:	bf18      	it	ne
 800213e:	2a01      	cmpne	r2, #1
 8002140:	d901      	bls.n	8002146 <HAL_GPIO_Init+0x1e6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002142:	2b12      	cmp	r3, #18
 8002144:	d118      	bne.n	8002178 <HAL_GPIO_Init+0x218>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002146:	68f3      	ldr	r3, [r6, #12]
 8002148:	2b03      	cmp	r3, #3
 800214a:	f63f af7d 	bhi.w	8002048 <HAL_GPIO_Init+0xe8>
        temp = GPIOx->OSPEEDR; 
 800214e:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002152:	ea09 0202 	and.w	r2, r9, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8002156:	68f3      	ldr	r3, [r6, #12]
 8002158:	fa03 f30a 	lsl.w	r3, r3, sl
 800215c:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 800215e:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 8002162:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002166:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800216a:	6873      	ldr	r3, [r6, #4]
 800216c:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8002170:	40a5      	lsls	r5, r4
 8002172:	4315      	orrs	r5, r2
        GPIOx->OTYPER = temp;
 8002174:	f8c8 5004 	str.w	r5, [r8, #4]
      temp = GPIOx->PUPDR;
 8002178:	f8d8 300c 	ldr.w	r3, [r8, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800217c:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002180:	68b3      	ldr	r3, [r6, #8]
 8002182:	fa03 f30a 	lsl.w	r3, r3, sl
 8002186:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800218a:	f8c8 300c 	str.w	r3, [r8, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218e:	6873      	ldr	r3, [r6, #4]
 8002190:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002194:	d093      	beq.n	80020be <HAL_GPIO_Init+0x15e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <HAL_GPIO_Init+0x308>)
 8002198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800219a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800219e:	645a      	str	r2, [r3, #68]	; 0x44
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80021aa:	08a2      	lsrs	r2, r4, #2
 80021ac:	1c91      	adds	r1, r2, #2
 80021ae:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_GPIO_Init+0x300>)
 80021b0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021b4:	f004 0303 	and.w	r3, r4, #3
 80021b8:	0099      	lsls	r1, r3, #2
 80021ba:	230f      	movs	r3, #15
 80021bc:	408b      	lsls	r3, r1
 80021be:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_GPIO_Init+0x2e0>)
 80021c4:	4598      	cmp	r8, r3
 80021c6:	f43f af46 	beq.w	8002056 <HAL_GPIO_Init+0xf6>
 80021ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ce:	4598      	cmp	r8, r3
 80021d0:	d022      	beq.n	8002218 <HAL_GPIO_Init+0x2b8>
 80021d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021d6:	4598      	cmp	r8, r3
 80021d8:	d020      	beq.n	800221c <HAL_GPIO_Init+0x2bc>
 80021da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021de:	4598      	cmp	r8, r3
 80021e0:	d01e      	beq.n	8002220 <HAL_GPIO_Init+0x2c0>
 80021e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021e6:	4598      	cmp	r8, r3
 80021e8:	d01c      	beq.n	8002224 <HAL_GPIO_Init+0x2c4>
 80021ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ee:	4598      	cmp	r8, r3
 80021f0:	d01a      	beq.n	8002228 <HAL_GPIO_Init+0x2c8>
 80021f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021f6:	4598      	cmp	r8, r3
 80021f8:	d018      	beq.n	800222c <HAL_GPIO_Init+0x2cc>
 80021fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021fe:	4598      	cmp	r8, r3
 8002200:	d016      	beq.n	8002230 <HAL_GPIO_Init+0x2d0>
 8002202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002206:	4598      	cmp	r8, r3
 8002208:	d014      	beq.n	8002234 <HAL_GPIO_Init+0x2d4>
 800220a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800220e:	4598      	cmp	r8, r3
 8002210:	f43f af1f 	beq.w	8002052 <HAL_GPIO_Init+0xf2>
 8002214:	230a      	movs	r3, #10
 8002216:	e71f      	b.n	8002058 <HAL_GPIO_Init+0xf8>
 8002218:	2301      	movs	r3, #1
 800221a:	e71d      	b.n	8002058 <HAL_GPIO_Init+0xf8>
 800221c:	2302      	movs	r3, #2
 800221e:	e71b      	b.n	8002058 <HAL_GPIO_Init+0xf8>
 8002220:	2303      	movs	r3, #3
 8002222:	e719      	b.n	8002058 <HAL_GPIO_Init+0xf8>
 8002224:	2304      	movs	r3, #4
 8002226:	e717      	b.n	8002058 <HAL_GPIO_Init+0xf8>
 8002228:	2305      	movs	r3, #5
 800222a:	e715      	b.n	8002058 <HAL_GPIO_Init+0xf8>
 800222c:	2306      	movs	r3, #6
 800222e:	e713      	b.n	8002058 <HAL_GPIO_Init+0xf8>
 8002230:	2307      	movs	r3, #7
 8002232:	e711      	b.n	8002058 <HAL_GPIO_Init+0xf8>
 8002234:	2308      	movs	r3, #8
 8002236:	e70f      	b.n	8002058 <HAL_GPIO_Init+0xf8>
      }
    }
  }
}
 8002238:	b002      	add	sp, #8
 800223a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800223e:	bf00      	nop
 8002240:	40020000 	.word	0x40020000
 8002244:	40020400 	.word	0x40020400
 8002248:	40021400 	.word	0x40021400
 800224c:	40021c00 	.word	0x40021c00
 8002250:	40022400 	.word	0x40022400
 8002254:	40022800 	.word	0x40022800
 8002258:	08017c00 	.word	0x08017c00
 800225c:	10110000 	.word	0x10110000
 8002260:	40013800 	.word	0x40013800
 8002264:	40013c00 	.word	0x40013c00
 8002268:	40023800 	.word	0x40023800

0800226c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800226c:	b538      	push	{r3, r4, r5, lr}
 800226e:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002270:	460c      	mov	r4, r1
 8002272:	b121      	cbz	r1, 800227e <HAL_GPIO_ReadPin+0x12>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002274:	692b      	ldr	r3, [r5, #16]
 8002276:	421c      	tst	r4, r3
 8002278:	d107      	bne.n	800228a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800227a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800227c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800227e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <HAL_GPIO_ReadPin+0x24>)
 8002284:	f010 fc36 	bl	8012af4 <assert_failed>
 8002288:	e7f4      	b.n	8002274 <HAL_GPIO_ReadPin+0x8>
    bitstatus = GPIO_PIN_SET;
 800228a:	2001      	movs	r0, #1
 800228c:	e7f6      	b.n	800227c <HAL_GPIO_ReadPin+0x10>
 800228e:	bf00      	nop
 8002290:	08017c00 	.word	0x08017c00

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b570      	push	{r4, r5, r6, lr}
 8002296:	4606      	mov	r6, r0
 8002298:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800229a:	460c      	mov	r4, r1
 800229c:	b129      	cbz	r1, 80022aa <HAL_GPIO_WritePin+0x16>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800229e:	2d01      	cmp	r5, #1
 80022a0:	d809      	bhi.n	80022b6 <HAL_GPIO_WritePin+0x22>

  if(PinState != GPIO_PIN_RESET)
 80022a2:	b975      	cbnz	r5, 80022c2 <HAL_GPIO_WritePin+0x2e>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022a4:	0424      	lsls	r4, r4, #16
 80022a6:	61b4      	str	r4, [r6, #24]
  }
}
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80022aa:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80022ae:	4806      	ldr	r0, [pc, #24]	; (80022c8 <HAL_GPIO_WritePin+0x34>)
 80022b0:	f010 fc20 	bl	8012af4 <assert_failed>
 80022b4:	e7f3      	b.n	800229e <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80022b6:	f240 119b 	movw	r1, #411	; 0x19b
 80022ba:	4803      	ldr	r0, [pc, #12]	; (80022c8 <HAL_GPIO_WritePin+0x34>)
 80022bc:	f010 fc1a 	bl	8012af4 <assert_failed>
 80022c0:	e7ef      	b.n	80022a2 <HAL_GPIO_WritePin+0xe>
    GPIOx->BSRR = GPIO_Pin;
 80022c2:	61b4      	str	r4, [r6, #24]
 80022c4:	e7f0      	b.n	80022a8 <HAL_GPIO_WritePin+0x14>
 80022c6:	bf00      	nop
 80022c8:	08017c00 	.word	0x08017c00

080022cc <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80022d0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4203      	tst	r3, r0
 80022d8:	d100      	bne.n	80022dc <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80022da:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80022de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e0:	f7ff fff4 	bl	80022cc <HAL_GPIO_EXTI_Callback>
}
 80022e4:	e7f9      	b.n	80022da <HAL_GPIO_EXTI_IRQHandler+0xa>
 80022e6:	bf00      	nop
 80022e8:	40013c00 	.word	0x40013c00

080022ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022ec:	6803      	ldr	r3, [r0, #0]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	f012 0f02 	tst.w	r2, #2
 80022f4:	d001      	beq.n	80022fa <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022f6:	2200      	movs	r2, #0
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022fa:	6803      	ldr	r3, [r0, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	f012 0f01 	tst.w	r2, #1
 8002302:	d103      	bne.n	800230c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	619a      	str	r2, [r3, #24]
  }
}
 800230c:	4770      	bx	lr
	...

08002310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002314:	4680      	mov	r8, r0
 8002316:	460c      	mov	r4, r1
 8002318:	4617      	mov	r7, r2
 800231a:	461e      	mov	r6, r3
 800231c:	9d06      	ldr	r5, [sp, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800231e:	6803      	ldr	r3, [r0, #0]
 8002320:	4926      	ldr	r1, [pc, #152]	; (80023bc <I2C_TransferConfig+0xac>)
 8002322:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <I2C_TransferConfig+0xb0>)
 8002324:	428b      	cmp	r3, r1
 8002326:	bf18      	it	ne
 8002328:	4293      	cmpne	r3, r2
 800232a:	d00c      	beq.n	8002346 <I2C_TransferConfig+0x36>
 800232c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002330:	4293      	cmp	r3, r2
 8002332:	d008      	beq.n	8002346 <I2C_TransferConfig+0x36>
 8002334:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <I2C_TransferConfig+0x36>
 800233c:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8002340:	4820      	ldr	r0, [pc, #128]	; (80023c4 <I2C_TransferConfig+0xb4>)
 8002342:	f010 fbd7 	bl	8012af4 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8002346:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
 800234a:	bf18      	it	ne
 800234c:	f1b6 7f00 	cmpne.w	r6, #33554432	; 0x2000000
 8002350:	d000      	beq.n	8002354 <I2C_TransferConfig+0x44>
 8002352:	bb66      	cbnz	r6, 80023ae <I2C_TransferConfig+0x9e>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002354:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <I2C_TransferConfig+0xb8>)
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <I2C_TransferConfig+0xbc>)
 8002358:	4295      	cmp	r5, r2
 800235a:	bf18      	it	ne
 800235c:	429d      	cmpne	r5, r3
 800235e:	d00c      	beq.n	800237a <I2C_TransferConfig+0x6a>
 8002360:	1c2a      	adds	r2, r5, #0
 8002362:	bf18      	it	ne
 8002364:	2201      	movne	r2, #1
 8002366:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800236a:	429d      	cmp	r5, r3
 800236c:	d005      	beq.n	800237a <I2C_TransferConfig+0x6a>
 800236e:	b122      	cbz	r2, 800237a <I2C_TransferConfig+0x6a>
 8002370:	f641 01c3 	movw	r1, #6339	; 0x18c3
 8002374:	4813      	ldr	r0, [pc, #76]	; (80023c4 <I2C_TransferConfig+0xb4>)
 8002376:	f010 fbbd 	bl	8012af4 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800237a:	f8d8 1000 	ldr.w	r1, [r8]
 800237e:	684b      	ldr	r3, [r1, #4]
 8002380:	0d6a      	lsrs	r2, r5, #21
 8002382:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002386:	f042 727f 	orr.w	r2, r2, #66846720	; 0x3fc0000
 800238a:	f442 3258 	orr.w	r2, r2, #221184	; 0x36000
 800238e:	f442 727f 	orr.w	r2, r2, #1020	; 0x3fc
 8002392:	f042 0203 	orr.w	r2, r2, #3
 8002396:	ea23 0302 	bic.w	r3, r3, r2
 800239a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800239e:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80023a2:	4334      	orrs	r4, r6
 80023a4:	432c      	orrs	r4, r5
 80023a6:	431c      	orrs	r4, r3
 80023a8:	604c      	str	r4, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80023aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_TRANSFER_MODE(Mode));
 80023ae:	f641 01c2 	movw	r1, #6338	; 0x18c2
 80023b2:	4804      	ldr	r0, [pc, #16]	; (80023c4 <I2C_TransferConfig+0xb4>)
 80023b4:	f010 fb9e 	bl	8012af4 <assert_failed>
 80023b8:	e7cc      	b.n	8002354 <I2C_TransferConfig+0x44>
 80023ba:	bf00      	nop
 80023bc:	40005400 	.word	0x40005400
 80023c0:	40005800 	.word	0x40005800
 80023c4:	08017c3c 	.word	0x08017c3c
 80023c8:	80004000 	.word	0x80004000
 80023cc:	80002400 	.word	0x80002400

080023d0 <I2C_IsAcknowledgeFailed>:
{
 80023d0:	b570      	push	{r4, r5, r6, lr}
 80023d2:	4604      	mov	r4, r0
 80023d4:	460d      	mov	r5, r1
 80023d6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d8:	6803      	ldr	r3, [r0, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f013 0f10 	tst.w	r3, #16
 80023e0:	d01c      	beq.n	800241c <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	f012 0f20 	tst.w	r2, #32
 80023ea:	d119      	bne.n	8002420 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80023ec:	f1b5 3fff 	cmp.w	r5, #4294967295
 80023f0:	d0f7      	beq.n	80023e2 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7fe ff2d 	bl	8001250 <HAL_GetTick>
 80023f6:	1b80      	subs	r0, r0, r6
 80023f8:	42a8      	cmp	r0, r5
 80023fa:	d801      	bhi.n	8002400 <I2C_IsAcknowledgeFailed+0x30>
 80023fc:	2d00      	cmp	r5, #0
 80023fe:	d1f0      	bne.n	80023e2 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002400:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002402:	f043 0320 	orr.w	r3, r3, #32
 8002406:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002408:	2320      	movs	r3, #32
 800240a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800240e:	2300      	movs	r3, #0
 8002410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002414:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
 800241a:	e020      	b.n	800245e <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 800241c:	2000      	movs	r0, #0
 800241e:	e01e      	b.n	800245e <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	2210      	movs	r2, #16
 8002422:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	2520      	movs	r5, #32
 8002428:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff ff5e 	bl	80022ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002430:	6822      	ldr	r2, [r4, #0]
 8002432:	6853      	ldr	r3, [r2, #4]
 8002434:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002438:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800243c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002446:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800244e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002452:	2300      	movs	r3, #0
 8002454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002458:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
}
 800245e:	bd70      	pop	{r4, r5, r6, pc}

08002460 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	4604      	mov	r4, r0
 8002464:	460d      	mov	r5, r1
 8002466:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f013 0f02 	tst.w	r3, #2
 8002470:	d11d      	bne.n	80024ae <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002472:	4632      	mov	r2, r6
 8002474:	4629      	mov	r1, r5
 8002476:	4620      	mov	r0, r4
 8002478:	f7ff ffaa 	bl	80023d0 <I2C_IsAcknowledgeFailed>
 800247c:	b9c8      	cbnz	r0, 80024b2 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800247e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002482:	d0f1      	beq.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002484:	f7fe fee4 	bl	8001250 <HAL_GetTick>
 8002488:	1b80      	subs	r0, r0, r6
 800248a:	42a8      	cmp	r0, r5
 800248c:	d801      	bhi.n	8002492 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800248e:	2d00      	cmp	r5, #0
 8002490:	d1ea      	bne.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002492:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002494:	f043 0320 	orr.w	r3, r3, #32
 8002498:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800249a:	2320      	movs	r3, #32
 800249c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80024a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80024aa:	2001      	movs	r0, #1
 80024ac:	e000      	b.n	80024b0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80024ae:	2000      	movs	r0, #0
}
 80024b0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80024b2:	2001      	movs	r0, #1
 80024b4:	e7fc      	b.n	80024b0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080024b6 <I2C_WaitOnFlagUntilTimeout>:
{
 80024b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b8:	4605      	mov	r5, r0
 80024ba:	460f      	mov	r7, r1
 80024bc:	4616      	mov	r6, r2
 80024be:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	ea37 0303 	bics.w	r3, r7, r3
 80024c8:	bf0c      	ite	eq
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2300      	movne	r3, #0
 80024ce:	42b3      	cmp	r3, r6
 80024d0:	d118      	bne.n	8002504 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80024d6:	d0f3      	beq.n	80024c0 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d8:	f7fe feba 	bl	8001250 <HAL_GetTick>
 80024dc:	9b06      	ldr	r3, [sp, #24]
 80024de:	1ac0      	subs	r0, r0, r3
 80024e0:	42a0      	cmp	r0, r4
 80024e2:	d801      	bhi.n	80024e8 <I2C_WaitOnFlagUntilTimeout+0x32>
 80024e4:	2c00      	cmp	r4, #0
 80024e6:	d1eb      	bne.n	80024c0 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80024ea:	f043 0320 	orr.w	r3, r3, #32
 80024ee:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	2320      	movs	r3, #32
 80024f2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80024fc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002500:	2001      	movs	r0, #1
 8002502:	e000      	b.n	8002506 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8002504:	2000      	movs	r0, #0
}
 8002506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002508 <I2C_RequestMemoryWrite>:
{
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	4604      	mov	r4, r0
 800250e:	4616      	mov	r6, r2
 8002510:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <I2C_RequestMemoryWrite+0x6c>)
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800251a:	b2ea      	uxtb	r2, r5
 800251c:	f7ff fef8 	bl	8002310 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002520:	9a07      	ldr	r2, [sp, #28]
 8002522:	9906      	ldr	r1, [sp, #24]
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff ff9b 	bl	8002460 <I2C_WaitOnTXISFlagUntilTimeout>
 800252a:	b9e8      	cbnz	r0, 8002568 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800252c:	2d01      	cmp	r5, #1
 800252e:	d10e      	bne.n	800254e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	b2f6      	uxtb	r6, r6
 8002534:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002536:	9b07      	ldr	r3, [sp, #28]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	9b06      	ldr	r3, [sp, #24]
 800253c:	2200      	movs	r2, #0
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	4620      	mov	r0, r4
 8002542:	f7ff ffb8 	bl	80024b6 <I2C_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	b178      	cbz	r0, 800256a <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00d      	b.n	800256a <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	0a32      	lsrs	r2, r6, #8
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002554:	9a07      	ldr	r2, [sp, #28]
 8002556:	9906      	ldr	r1, [sp, #24]
 8002558:	4620      	mov	r0, r4
 800255a:	f7ff ff81 	bl	8002460 <I2C_WaitOnTXISFlagUntilTimeout>
 800255e:	b938      	cbnz	r0, 8002570 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	b2f6      	uxtb	r6, r6
 8002564:	629e      	str	r6, [r3, #40]	; 0x28
 8002566:	e7e6      	b.n	8002536 <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
}
 800256a:	4618      	mov	r0, r3
 800256c:	b002      	add	sp, #8
 800256e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e7fa      	b.n	800256a <I2C_RequestMemoryWrite+0x62>
 8002574:	80002000 	.word	0x80002000

08002578 <I2C_RequestMemoryRead>:
{
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	4604      	mov	r4, r0
 800257e:	4616      	mov	r6, r2
 8002580:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <I2C_RequestMemoryRead+0x6c>)
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2300      	movs	r3, #0
 8002588:	b2ea      	uxtb	r2, r5
 800258a:	f7ff fec1 	bl	8002310 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258e:	9a07      	ldr	r2, [sp, #28]
 8002590:	9906      	ldr	r1, [sp, #24]
 8002592:	4620      	mov	r0, r4
 8002594:	f7ff ff64 	bl	8002460 <I2C_WaitOnTXISFlagUntilTimeout>
 8002598:	b9e8      	cbnz	r0, 80025d6 <I2C_RequestMemoryRead+0x5e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800259a:	2d01      	cmp	r5, #1
 800259c:	d10e      	bne.n	80025bc <I2C_RequestMemoryRead+0x44>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	b2f6      	uxtb	r6, r6
 80025a2:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025a4:	9b07      	ldr	r3, [sp, #28]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	9b06      	ldr	r3, [sp, #24]
 80025aa:	2200      	movs	r2, #0
 80025ac:	2140      	movs	r1, #64	; 0x40
 80025ae:	4620      	mov	r0, r4
 80025b0:	f7ff ff81 	bl	80024b6 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	b178      	cbz	r0, 80025d8 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e00d      	b.n	80025d8 <I2C_RequestMemoryRead+0x60>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	0a32      	lsrs	r2, r6, #8
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c2:	9a07      	ldr	r2, [sp, #28]
 80025c4:	9906      	ldr	r1, [sp, #24]
 80025c6:	4620      	mov	r0, r4
 80025c8:	f7ff ff4a 	bl	8002460 <I2C_WaitOnTXISFlagUntilTimeout>
 80025cc:	b938      	cbnz	r0, 80025de <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	b2f6      	uxtb	r6, r6
 80025d2:	629e      	str	r6, [r3, #40]	; 0x28
 80025d4:	e7e6      	b.n	80025a4 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	b002      	add	sp, #8
 80025dc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e7fa      	b.n	80025d8 <I2C_RequestMemoryRead+0x60>
 80025e2:	bf00      	nop
 80025e4:	80002000 	.word	0x80002000

080025e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	4605      	mov	r5, r0
 80025ec:	460c      	mov	r4, r1
 80025ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f013 0f20 	tst.w	r3, #32
 80025f8:	d11a      	bne.n	8002630 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025fa:	4632      	mov	r2, r6
 80025fc:	4621      	mov	r1, r4
 80025fe:	4628      	mov	r0, r5
 8002600:	f7ff fee6 	bl	80023d0 <I2C_IsAcknowledgeFailed>
 8002604:	b9b0      	cbnz	r0, 8002634 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002606:	f7fe fe23 	bl	8001250 <HAL_GetTick>
 800260a:	1b80      	subs	r0, r0, r6
 800260c:	42a0      	cmp	r0, r4
 800260e:	d801      	bhi.n	8002614 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d1ed      	bne.n	80025f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002616:	f043 0320 	orr.w	r3, r3, #32
 800261a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800261c:	2320      	movs	r3, #32
 800261e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002622:	2300      	movs	r3, #0
 8002624:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002628:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
}
 800262e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002630:	2000      	movs	r0, #0
 8002632:	e7fc      	b.n	800262e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002634:	2001      	movs	r0, #1
 8002636:	e7fa      	b.n	800262e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002638 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002638:	2800      	cmp	r0, #0
 800263a:	f000 80c3 	beq.w	80027c4 <HAL_I2C_Init+0x18c>
{
 800263e:	b510      	push	{r4, lr}
 8002640:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002642:	6803      	ldr	r3, [r0, #0]
 8002644:	4960      	ldr	r1, [pc, #384]	; (80027c8 <HAL_I2C_Init+0x190>)
 8002646:	4a61      	ldr	r2, [pc, #388]	; (80027cc <HAL_I2C_Init+0x194>)
 8002648:	428b      	cmp	r3, r1
 800264a:	bf18      	it	ne
 800264c:	4293      	cmpne	r3, r2
 800264e:	d00c      	beq.n	800266a <HAL_I2C_Init+0x32>
 8002650:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002654:	4293      	cmp	r3, r2
 8002656:	d008      	beq.n	800266a <HAL_I2C_Init+0x32>
 8002658:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_I2C_Init+0x32>
 8002660:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002664:	485a      	ldr	r0, [pc, #360]	; (80027d0 <HAL_I2C_Init+0x198>)
 8002666:	f010 fa45 	bl	8012af4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800266a:	68a3      	ldr	r3, [r4, #8]
 800266c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002670:	d26d      	bcs.n	800274e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002672:	68e3      	ldr	r3, [r4, #12]
 8002674:	3b01      	subs	r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d86f      	bhi.n	800275a <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800267a:	6922      	ldr	r2, [r4, #16]
 800267c:	f5b2 4300 	subs.w	r3, r2, #32768	; 0x8000
 8002680:	bf18      	it	ne
 8002682:	2301      	movne	r3, #1
 8002684:	2a00      	cmp	r2, #0
 8002686:	bf08      	it	eq
 8002688:	2300      	moveq	r3, #0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d16b      	bne.n	8002766 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800268e:	6963      	ldr	r3, [r4, #20]
 8002690:	2bff      	cmp	r3, #255	; 0xff
 8002692:	d86e      	bhi.n	8002772 <HAL_I2C_Init+0x13a>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002694:	69a3      	ldr	r3, [r4, #24]
 8002696:	2b07      	cmp	r3, #7
 8002698:	d871      	bhi.n	800277e <HAL_I2C_Init+0x146>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800269a:	69e2      	ldr	r2, [r4, #28]
 800269c:	f5b2 2300 	subs.w	r3, r2, #524288	; 0x80000
 80026a0:	bf18      	it	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	bf08      	it	eq
 80026a8:	2300      	moveq	r3, #0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d16d      	bne.n	800278a <HAL_I2C_Init+0x152>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80026ae:	6a22      	ldr	r2, [r4, #32]
 80026b0:	f5b2 3300 	subs.w	r3, r2, #131072	; 0x20000
 80026b4:	bf18      	it	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	bf08      	it	eq
 80026bc:	2300      	moveq	r3, #0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d169      	bne.n	8002796 <HAL_I2C_Init+0x15e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d06b      	beq.n	80027a2 <HAL_I2C_Init+0x16a>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ca:	2324      	movs	r3, #36	; 0x24
 80026cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	6813      	ldr	r3, [r2, #0]
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026da:	6863      	ldr	r3, [r4, #4]
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80026e2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026e4:	6822      	ldr	r2, [r4, #0]
 80026e6:	6893      	ldr	r3, [r2, #8]
 80026e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026ec:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ee:	68e3      	ldr	r3, [r4, #12]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d05c      	beq.n	80027ae <HAL_I2C_Init+0x176>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026f4:	68a3      	ldr	r3, [r4, #8]
 80026f6:	6822      	ldr	r2, [r4, #0]
 80026f8:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80026fc:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026fe:	68e3      	ldr	r3, [r4, #12]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d05a      	beq.n	80027ba <HAL_I2C_Init+0x182>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002704:	6822      	ldr	r2, [r4, #0]
 8002706:	6851      	ldr	r1, [r2, #4]
 8002708:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_I2C_Init+0x19c>)
 800270a:	430b      	orrs	r3, r1
 800270c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	68d3      	ldr	r3, [r2, #12]
 8002712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002716:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002718:	6923      	ldr	r3, [r4, #16]
 800271a:	6962      	ldr	r2, [r4, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	69a1      	ldr	r1, [r4, #24]
 8002720:	6822      	ldr	r2, [r4, #0]
 8002722:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002726:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002728:	69e3      	ldr	r3, [r4, #28]
 800272a:	6a21      	ldr	r1, [r4, #32]
 800272c:	6822      	ldr	r2, [r4, #0]
 800272e:	430b      	orrs	r3, r1
 8002730:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002732:	6822      	ldr	r2, [r4, #0]
 8002734:	6813      	ldr	r3, [r2, #0]
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800273c:	2000      	movs	r0, #0
 800273e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002740:	2320      	movs	r3, #32
 8002742:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002746:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800274c:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800274e:	f240 11df 	movw	r1, #479	; 0x1df
 8002752:	481f      	ldr	r0, [pc, #124]	; (80027d0 <HAL_I2C_Init+0x198>)
 8002754:	f010 f9ce 	bl	8012af4 <assert_failed>
 8002758:	e78b      	b.n	8002672 <HAL_I2C_Init+0x3a>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800275a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800275e:	481c      	ldr	r0, [pc, #112]	; (80027d0 <HAL_I2C_Init+0x198>)
 8002760:	f010 f9c8 	bl	8012af4 <assert_failed>
 8002764:	e789      	b.n	800267a <HAL_I2C_Init+0x42>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002766:	f240 11e1 	movw	r1, #481	; 0x1e1
 800276a:	4819      	ldr	r0, [pc, #100]	; (80027d0 <HAL_I2C_Init+0x198>)
 800276c:	f010 f9c2 	bl	8012af4 <assert_failed>
 8002770:	e78d      	b.n	800268e <HAL_I2C_Init+0x56>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002772:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002776:	4816      	ldr	r0, [pc, #88]	; (80027d0 <HAL_I2C_Init+0x198>)
 8002778:	f010 f9bc 	bl	8012af4 <assert_failed>
 800277c:	e78a      	b.n	8002694 <HAL_I2C_Init+0x5c>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800277e:	f240 11e3 	movw	r1, #483	; 0x1e3
 8002782:	4813      	ldr	r0, [pc, #76]	; (80027d0 <HAL_I2C_Init+0x198>)
 8002784:	f010 f9b6 	bl	8012af4 <assert_failed>
 8002788:	e787      	b.n	800269a <HAL_I2C_Init+0x62>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800278a:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 800278e:	4810      	ldr	r0, [pc, #64]	; (80027d0 <HAL_I2C_Init+0x198>)
 8002790:	f010 f9b0 	bl	8012af4 <assert_failed>
 8002794:	e78b      	b.n	80026ae <HAL_I2C_Init+0x76>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002796:	f240 11e5 	movw	r1, #485	; 0x1e5
 800279a:	480d      	ldr	r0, [pc, #52]	; (80027d0 <HAL_I2C_Init+0x198>)
 800279c:	f010 f9aa 	bl	8012af4 <assert_failed>
 80027a0:	e78f      	b.n	80026c2 <HAL_I2C_Init+0x8a>
    hi2c->Lock = HAL_UNLOCKED;
 80027a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80027a6:	4620      	mov	r0, r4
 80027a8:	f00f fc90 	bl	80120cc <HAL_I2C_MspInit>
 80027ac:	e78d      	b.n	80026ca <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027ae:	68a3      	ldr	r3, [r4, #8]
 80027b0:	6822      	ldr	r2, [r4, #0]
 80027b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b6:	6093      	str	r3, [r2, #8]
 80027b8:	e7a1      	b.n	80026fe <HAL_I2C_Init+0xc6>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	e79f      	b.n	8002704 <HAL_I2C_Init+0xcc>
    return HAL_ERROR;
 80027c4:	2001      	movs	r0, #1
}
 80027c6:	4770      	bx	lr
 80027c8:	40005400 	.word	0x40005400
 80027cc:	40005800 	.word	0x40005800
 80027d0:	08017c3c 	.word	0x08017c3c
 80027d4:	02008000 	.word	0x02008000

080027d8 <HAL_I2C_Mem_Write>:
{
 80027d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	4604      	mov	r4, r0
 80027e0:	460f      	mov	r7, r1
 80027e2:	4690      	mov	r8, r2
 80027e4:	461d      	mov	r5, r3
 80027e6:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d824      	bhi.n	800283c <HAL_I2C_Mem_Write+0x64>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	f040 80c3 	bne.w	8002984 <HAL_I2C_Mem_Write+0x1ac>
    if ((pData == NULL) || (Size == 0U))
 80027fe:	fab6 f386 	clz	r3, r6
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002806:	2a00      	cmp	r2, #0
 8002808:	bf08      	it	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	b9e3      	cbnz	r3, 8002848 <HAL_I2C_Mem_Write+0x70>
    __HAL_LOCK(hi2c);
 800280e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002812:	2b01      	cmp	r3, #1
 8002814:	f000 80bb 	beq.w	800298e <HAL_I2C_Mem_Write+0x1b6>
 8002818:	f04f 0a01 	mov.w	sl, #1
 800281c:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002820:	f7fe fd16 	bl	8001250 <HAL_GetTick>
 8002824:	4681      	mov	r9, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002826:	9000      	str	r0, [sp, #0]
 8002828:	2319      	movs	r3, #25
 800282a:	4652      	mov	r2, sl
 800282c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002830:	4620      	mov	r0, r4
 8002832:	f7ff fe40 	bl	80024b6 <I2C_WaitOnFlagUntilTimeout>
 8002836:	b160      	cbz	r0, 8002852 <HAL_I2C_Mem_Write+0x7a>
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0a4      	b.n	8002986 <HAL_I2C_Mem_Write+0x1ae>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800283c:	f640 01ed 	movw	r1, #2285	; 0x8ed
 8002840:	4857      	ldr	r0, [pc, #348]	; (80029a0 <HAL_I2C_Mem_Write+0x1c8>)
 8002842:	f010 f957 	bl	8012af4 <assert_failed>
 8002846:	e7d4      	b.n	80027f2 <HAL_I2C_Mem_Write+0x1a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284c:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e099      	b.n	8002986 <HAL_I2C_Mem_Write+0x1ae>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002852:	2321      	movs	r3, #33	; 0x21
 8002854:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002858:	2340      	movs	r3, #64	; 0x40
 800285a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285e:	2300      	movs	r3, #0
 8002860:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002864:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002866:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002868:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800286a:	f8cd 9004 	str.w	r9, [sp, #4]
 800286e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	462b      	mov	r3, r5
 8002874:	4642      	mov	r2, r8
 8002876:	4639      	mov	r1, r7
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff fe45 	bl	8002508 <I2C_RequestMemoryWrite>
 800287e:	b970      	cbnz	r0, 800289e <HAL_I2C_Mem_Write+0xc6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002880:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d90f      	bls.n	80028a8 <HAL_I2C_Mem_Write+0xd0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002888:	22ff      	movs	r2, #255	; 0xff
 800288a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800288c:	2300      	movs	r3, #0
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002894:	4639      	mov	r1, r7
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff fd3a 	bl	8002310 <I2C_TransferConfig>
 800289c:	e021      	b.n	80028e2 <HAL_I2C_Mem_Write+0x10a>
      __HAL_UNLOCK(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80028a4:	4653      	mov	r3, sl
 80028a6:	e06e      	b.n	8002986 <HAL_I2C_Mem_Write+0x1ae>
      hi2c->XferSize = hi2c->XferCount;
 80028a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028aa:	b292      	uxth	r2, r2
 80028ac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028ae:	2300      	movs	r3, #0
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	4639      	mov	r1, r7
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff fd28 	bl	8002310 <I2C_TransferConfig>
 80028c0:	e00f      	b.n	80028e2 <HAL_I2C_Mem_Write+0x10a>
          hi2c->XferSize = hi2c->XferCount;
 80028c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028c4:	b292      	uxth	r2, r2
 80028c6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	4639      	mov	r1, r7
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7ff fd1b 	bl	8002310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80028da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d033      	beq.n	800294a <HAL_I2C_Mem_Write+0x172>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e2:	464a      	mov	r2, r9
 80028e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80028e6:	4620      	mov	r0, r4
 80028e8:	f7ff fdba 	bl	8002460 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d150      	bne.n	8002992 <HAL_I2C_Mem_Write+0x1ba>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80028f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028fa:	3301      	adds	r3, #1
 80028fc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80028fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002900:	3b01      	subs	r3, #1
 8002902:	b29b      	uxth	r3, r3
 8002904:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002906:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002908:	3b01      	subs	r3, #1
 800290a:	b29b      	uxth	r3, r3
 800290c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800290e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002910:	b292      	uxth	r2, r2
 8002912:	2a00      	cmp	r2, #0
 8002914:	d0e1      	beq.n	80028da <HAL_I2C_Mem_Write+0x102>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1df      	bne.n	80028da <HAL_I2C_Mem_Write+0x102>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800291a:	f8cd 9000 	str.w	r9, [sp]
 800291e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	4620      	mov	r0, r4
 8002926:	f7ff fdc6 	bl	80024b6 <I2C_WaitOnFlagUntilTimeout>
 800292a:	bba0      	cbnz	r0, 8002996 <HAL_I2C_Mem_Write+0x1be>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2bff      	cmp	r3, #255	; 0xff
 8002932:	d9c6      	bls.n	80028c2 <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002934:	22ff      	movs	r2, #255	; 0xff
 8002936:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002940:	4639      	mov	r1, r7
 8002942:	4620      	mov	r0, r4
 8002944:	f7ff fce4 	bl	8002310 <I2C_TransferConfig>
 8002948:	e7c7      	b.n	80028da <HAL_I2C_Mem_Write+0x102>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294a:	464a      	mov	r2, r9
 800294c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800294e:	4620      	mov	r0, r4
 8002950:	f7ff fe4a 	bl	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	bb00      	cbnz	r0, 800299a <HAL_I2C_Mem_Write+0x1c2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	2120      	movs	r1, #32
 800295c:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 800295e:	6820      	ldr	r0, [r4, #0]
 8002960:	6842      	ldr	r2, [r0, #4]
 8002962:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002966:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800296a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002978:	2200      	movs	r2, #0
 800297a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800297e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002982:	e000      	b.n	8002986 <HAL_I2C_Mem_Write+0x1ae>
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
}
 8002986:	4618      	mov	r0, r3
 8002988:	b002      	add	sp, #8
 800298a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800298e:	2302      	movs	r3, #2
 8002990:	e7f9      	b.n	8002986 <HAL_I2C_Mem_Write+0x1ae>
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e7f7      	b.n	8002986 <HAL_I2C_Mem_Write+0x1ae>
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e7f5      	b.n	8002986 <HAL_I2C_Mem_Write+0x1ae>
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e7f3      	b.n	8002986 <HAL_I2C_Mem_Write+0x1ae>
 800299e:	bf00      	nop
 80029a0:	08017c3c 	.word	0x08017c3c

080029a4 <HAL_I2C_Mem_Read>:
{
 80029a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	4604      	mov	r4, r0
 80029ac:	4689      	mov	r9, r1
 80029ae:	4690      	mov	r8, r2
 80029b0:	461d      	mov	r5, r3
 80029b2:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d824      	bhi.n	8002a08 <HAL_I2C_Mem_Read+0x64>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029be:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	f040 80c3 	bne.w	8002b50 <HAL_I2C_Mem_Read+0x1ac>
    if ((pData == NULL) || (Size == 0U))
 80029ca:	fab6 f386 	clz	r3, r6
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029d2:	2a00      	cmp	r2, #0
 80029d4:	bf08      	it	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	b9e3      	cbnz	r3, 8002a14 <HAL_I2C_Mem_Read+0x70>
    __HAL_LOCK(hi2c);
 80029da:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80029de:	2b01      	cmp	r3, #1
 80029e0:	f000 80bb 	beq.w	8002b5a <HAL_I2C_Mem_Read+0x1b6>
 80029e4:	f04f 0a01 	mov.w	sl, #1
 80029e8:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 80029ec:	f7fe fc30 	bl	8001250 <HAL_GetTick>
 80029f0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029f2:	9000      	str	r0, [sp, #0]
 80029f4:	2319      	movs	r3, #25
 80029f6:	4652      	mov	r2, sl
 80029f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7ff fd5a 	bl	80024b6 <I2C_WaitOnFlagUntilTimeout>
 8002a02:	b160      	cbz	r0, 8002a1e <HAL_I2C_Mem_Read+0x7a>
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0a4      	b.n	8002b52 <HAL_I2C_Mem_Read+0x1ae>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002a08:	f640 1174 	movw	r1, #2420	; 0x974
 8002a0c:	4857      	ldr	r0, [pc, #348]	; (8002b6c <HAL_I2C_Mem_Read+0x1c8>)
 8002a0e:	f010 f871 	bl	8012af4 <assert_failed>
 8002a12:	e7d4      	b.n	80029be <HAL_I2C_Mem_Read+0x1a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a18:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e099      	b.n	8002b52 <HAL_I2C_Mem_Read+0x1ae>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a1e:	2322      	movs	r3, #34	; 0x22
 8002a20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a24:	2340      	movs	r3, #64	; 0x40
 8002a26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a30:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a32:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a34:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a36:	9701      	str	r7, [sp, #4]
 8002a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	4642      	mov	r2, r8
 8002a40:	4649      	mov	r1, r9
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7ff fd98 	bl	8002578 <I2C_RequestMemoryRead>
 8002a48:	b970      	cbnz	r0, 8002a68 <HAL_I2C_Mem_Read+0xc4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2bff      	cmp	r3, #255	; 0xff
 8002a50:	d90f      	bls.n	8002a72 <HAL_I2C_Mem_Read+0xce>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a52:	22ff      	movs	r2, #255	; 0xff
 8002a54:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002a56:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <HAL_I2C_Mem_Read+0x1cc>)
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5e:	4649      	mov	r1, r9
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff fc55 	bl	8002310 <I2C_TransferConfig>
 8002a66:	e021      	b.n	8002aac <HAL_I2C_Mem_Read+0x108>
      __HAL_UNLOCK(hi2c);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002a6e:	4653      	mov	r3, sl
 8002a70:	e06f      	b.n	8002b52 <HAL_I2C_Mem_Read+0x1ae>
      hi2c->XferSize = hi2c->XferCount;
 8002a72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a74:	b292      	uxth	r2, r2
 8002a76:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a78:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_I2C_Mem_Read+0x1cc>)
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	4649      	mov	r1, r9
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff fc43 	bl	8002310 <I2C_TransferConfig>
 8002a8a:	e00f      	b.n	8002aac <HAL_I2C_Mem_Read+0x108>
          hi2c->XferSize = hi2c->XferCount;
 8002a8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a92:	2300      	movs	r3, #0
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff fc36 	bl	8002310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002aa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d034      	beq.n	8002b16 <HAL_I2C_Mem_Read+0x172>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002aac:	9700      	str	r7, [sp, #0]
 8002aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2104      	movs	r1, #4
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f7ff fcfe 	bl	80024b6 <I2C_WaitOnFlagUntilTimeout>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d14f      	bne.n	8002b5e <HAL_I2C_Mem_Read+0x1ba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ac4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ac8:	3301      	adds	r3, #1
 8002aca:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002acc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002ad4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ad6:	3a01      	subs	r2, #1
 8002ad8:	b292      	uxth	r2, r2
 8002ada:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002adc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ade:	b292      	uxth	r2, r2
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d0df      	beq.n	8002aa4 <HAL_I2C_Mem_Read+0x100>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1dd      	bne.n	8002aa4 <HAL_I2C_Mem_Read+0x100>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ae8:	9700      	str	r7, [sp, #0]
 8002aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002aec:	2200      	movs	r2, #0
 8002aee:	2180      	movs	r1, #128	; 0x80
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7ff fce0 	bl	80024b6 <I2C_WaitOnFlagUntilTimeout>
 8002af6:	bba0      	cbnz	r0, 8002b62 <HAL_I2C_Mem_Read+0x1be>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2bff      	cmp	r3, #255	; 0xff
 8002afe:	d9c5      	bls.n	8002a8c <HAL_I2C_Mem_Read+0xe8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b04:	2300      	movs	r3, #0
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f7ff fbfe 	bl	8002310 <I2C_TransferConfig>
 8002b14:	e7c6      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x100>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	463a      	mov	r2, r7
 8002b18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7ff fd64 	bl	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	bb00      	cbnz	r0, 8002b66 <HAL_I2C_Mem_Read+0x1c2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b24:	6822      	ldr	r2, [r4, #0]
 8002b26:	2120      	movs	r1, #32
 8002b28:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002b2a:	6820      	ldr	r0, [r4, #0]
 8002b2c:	6842      	ldr	r2, [r0, #4]
 8002b2e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002b32:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002b36:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b44:	2200      	movs	r2, #0
 8002b46:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002b4a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002b4e:	e000      	b.n	8002b52 <HAL_I2C_Mem_Read+0x1ae>
    return HAL_BUSY;
 8002b50:	2302      	movs	r3, #2
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	b002      	add	sp, #8
 8002b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e7f9      	b.n	8002b52 <HAL_I2C_Mem_Read+0x1ae>
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e7f7      	b.n	8002b52 <HAL_I2C_Mem_Read+0x1ae>
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e7f5      	b.n	8002b52 <HAL_I2C_Mem_Read+0x1ae>
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e7f3      	b.n	8002b52 <HAL_I2C_Mem_Read+0x1ae>
 8002b6a:	bf00      	nop
 8002b6c:	08017c3c 	.word	0x08017c3c
 8002b70:	80002400 	.word	0x80002400

08002b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4604      	mov	r4, r0
 8002b78:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002b7a:	6803      	ldr	r3, [r0, #0]
 8002b7c:	4925      	ldr	r1, [pc, #148]	; (8002c14 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 8002b7e:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
 8002b80:	428b      	cmp	r3, r1
 8002b82:	bf18      	it	ne
 8002b84:	4293      	cmpne	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8002b88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8002b90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8002b98:	215f      	movs	r1, #95	; 0x5f
 8002b9a:	4820      	ldr	r0, [pc, #128]	; (8002c1c <HAL_I2CEx_ConfigAnalogFilter+0xa8>)
 8002b9c:	f00f ffaa 	bl	8012af4 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8002ba0:	f5b5 5380 	subs.w	r3, r5, #4096	; 0x1000
 8002ba4:	bf18      	it	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2d00      	cmp	r5, #0
 8002baa:	bf08      	it	eq
 8002bac:	2300      	moveq	r3, #0
 8002bae:	bb43      	cbnz	r3, 8002c02 <HAL_I2CEx_ConfigAnalogFilter+0x8e>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d128      	bne.n	8002c0c <HAL_I2CEx_ConfigAnalogFilter+0x98>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d026      	beq.n	8002c10 <HAL_I2CEx_ConfigAnalogFilter+0x9c>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc8:	2324      	movs	r3, #36	; 0x24
 8002bca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	6813      	ldr	r3, [r2, #0]
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002be0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002be2:	6822      	ldr	r2, [r4, #0]
 8002be4:	6813      	ldr	r3, [r2, #0]
 8002be6:	431d      	orrs	r5, r3
 8002be8:	6015      	str	r5, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bea:	6822      	ldr	r2, [r4, #0]
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 8002c00:	e005      	b.n	8002c0e <HAL_I2CEx_ConfigAnalogFilter+0x9a>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8002c02:	2160      	movs	r1, #96	; 0x60
 8002c04:	4805      	ldr	r0, [pc, #20]	; (8002c1c <HAL_I2CEx_ConfigAnalogFilter+0xa8>)
 8002c06:	f00f ff75 	bl	8012af4 <assert_failed>
 8002c0a:	e7d1      	b.n	8002bb0 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2002      	movs	r0, #2
  }
}
 8002c0e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8002c10:	2002      	movs	r0, #2
 8002c12:	e7fc      	b.n	8002c0e <HAL_I2CEx_ConfigAnalogFilter+0x9a>
 8002c14:	40005400 	.word	0x40005400
 8002c18:	40005800 	.word	0x40005800
 8002c1c:	08017c74 	.word	0x08017c74

08002c20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4604      	mov	r4, r0
 8002c24:	460d      	mov	r5, r1
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002c26:	6803      	ldr	r3, [r0, #0]
 8002c28:	4921      	ldr	r1, [pc, #132]	; (8002cb0 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
 8002c2a:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c2c:	428b      	cmp	r3, r1
 8002c2e:	bf18      	it	ne
 8002c30:	4293      	cmpne	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8002c34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8002c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8002c44:	218d      	movs	r1, #141	; 0x8d
 8002c46:	481c      	ldr	r0, [pc, #112]	; (8002cb8 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8002c48:	f00f ff54 	bl	8012af4 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8002c4c:	2d0f      	cmp	r5, #15
 8002c4e:	d826      	bhi.n	8002c9e <HAL_I2CEx_ConfigDigitalFilter+0x7e>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c50:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d126      	bne.n	8002ca8 <HAL_I2CEx_ConfigDigitalFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d024      	beq.n	8002cac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c62:	2301      	movs	r3, #1
 8002c64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c68:	2324      	movs	r3, #36	; 0x24
 8002c6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	6813      	ldr	r3, [r2, #0]
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c7c:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c80:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c84:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c86:	6822      	ldr	r2, [r4, #0]
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	2320      	movs	r3, #32
 8002c92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 8002c9c:	e005      	b.n	8002caa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8002c9e:	218e      	movs	r1, #142	; 0x8e
 8002ca0:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8002ca2:	f00f ff27 	bl	8012af4 <assert_failed>
 8002ca6:	e7d3      	b.n	8002c50 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  }
  else
  {
    return HAL_BUSY;
 8002ca8:	2002      	movs	r0, #2
  }
}
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8002cac:	2002      	movs	r0, #2
 8002cae:	e7fc      	b.n	8002caa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8002cb0:	40005400 	.word	0x40005400
 8002cb4:	40005800 	.word	0x40005800
 8002cb8:	08017c74 	.word	0x08017c74

08002cbc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cbc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002cbe:	684d      	ldr	r5, [r1, #4]
 8002cc0:	6804      	ldr	r4, [r0, #0]
 8002cc2:	68e3      	ldr	r3, [r4, #12]
 8002cc4:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8002cc8:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002cca:	01d2      	lsls	r2, r2, #7
 8002ccc:	4414      	add	r4, r2
 8002cce:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002cd2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002cd6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002cda:	680b      	ldr	r3, [r1, #0]
 8002cdc:	6804      	ldr	r4, [r0, #0]
 8002cde:	68e6      	ldr	r6, [r4, #12]
 8002ce0:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8002ce4:	4433      	add	r3, r6
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	4414      	add	r4, r2
 8002cea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002cee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002cf2:	68cd      	ldr	r5, [r1, #12]
 8002cf4:	6804      	ldr	r4, [r0, #0]
 8002cf6:	68e3      	ldr	r3, [r4, #12]
 8002cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cfc:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002cfe:	4414      	add	r4, r2
 8002d00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002d04:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002d08:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002d0c:	688b      	ldr	r3, [r1, #8]
 8002d0e:	6804      	ldr	r4, [r0, #0]
 8002d10:	68e6      	ldr	r6, [r4, #12]
 8002d12:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002d16:	4433      	add	r3, r6
 8002d18:	3301      	adds	r3, #1
 8002d1a:	4414      	add	r4, r2
 8002d1c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002d20:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002d24:	6803      	ldr	r3, [r0, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8002d2c:	f024 0407 	bic.w	r4, r4, #7
 8002d30:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002d34:	6803      	ldr	r3, [r0, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	690c      	ldr	r4, [r1, #16]
 8002d3a:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002d3e:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002d42:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002d46:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002d48:	6805      	ldr	r5, [r0, #0]
 8002d4a:	4415      	add	r5, r2
 8002d4c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8002d50:	2400      	movs	r4, #0
 8002d52:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002d56:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8002d5a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002d5e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002d62:	6805      	ldr	r5, [r0, #0]
 8002d64:	4415      	add	r5, r2
 8002d66:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002d6a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002d6e:	6803      	ldr	r3, [r0, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8002d76:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002d7a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002d7e:	6803      	ldr	r3, [r0, #0]
 8002d80:	4413      	add	r3, r2
 8002d82:	694d      	ldr	r5, [r1, #20]
 8002d84:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002d88:	6803      	ldr	r3, [r0, #0]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8002d90:	4d2d      	ldr	r5, [pc, #180]	; (8002e48 <LTDC_SetConfig+0x18c>)
 8002d92:	4035      	ands	r5, r6
 8002d94:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002d98:	69cd      	ldr	r5, [r1, #28]
 8002d9a:	6a0e      	ldr	r6, [r1, #32]
 8002d9c:	6803      	ldr	r3, [r0, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4335      	orrs	r5, r6
 8002da2:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002da6:	6803      	ldr	r3, [r0, #0]
 8002da8:	4413      	add	r3, r2
 8002daa:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8002dae:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002db8:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002dbc:	690b      	ldr	r3, [r1, #16]
 8002dbe:	b16b      	cbz	r3, 8002ddc <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d03a      	beq.n	8002e3a <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	bf18      	it	ne
 8002dc8:	2b04      	cmpne	r3, #4
 8002dca:	d038      	beq.n	8002e3e <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d038      	beq.n	8002e42 <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002dd0:	2b07      	cmp	r3, #7
 8002dd2:	d001      	beq.n	8002dd8 <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e002      	b.n	8002dde <LTDC_SetConfig+0x122>
    tmp = 2U;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e000      	b.n	8002dde <LTDC_SetConfig+0x122>
    tmp = 4U;
 8002ddc:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002dde:	6804      	ldr	r4, [r0, #0]
 8002de0:	4414      	add	r4, r2
 8002de2:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8002de6:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8002dea:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002dee:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002df0:	fb03 f504 	mul.w	r5, r3, r4
 8002df4:	684c      	ldr	r4, [r1, #4]
 8002df6:	680e      	ldr	r6, [r1, #0]
 8002df8:	1ba4      	subs	r4, r4, r6
 8002dfa:	fb03 f304 	mul.w	r3, r3, r4
 8002dfe:	3303      	adds	r3, #3
 8002e00:	6804      	ldr	r4, [r0, #0]
 8002e02:	4414      	add	r4, r2
 8002e04:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002e08:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002e0c:	6803      	ldr	r3, [r0, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8002e14:	4c0d      	ldr	r4, [pc, #52]	; (8002e4c <LTDC_SetConfig+0x190>)
 8002e16:	402c      	ands	r4, r5
 8002e18:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002e1c:	6803      	ldr	r3, [r0, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002e22:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002e26:	6803      	ldr	r3, [r0, #0]
 8002e28:	441a      	add	r2, r3
 8002e2a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8002e36:	bcf0      	pop	{r4, r5, r6, r7}
 8002e38:	4770      	bx	lr
    tmp = 3U;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e7cf      	b.n	8002dde <LTDC_SetConfig+0x122>
    tmp = 2U;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e7cd      	b.n	8002dde <LTDC_SetConfig+0x122>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e7cb      	b.n	8002dde <LTDC_SetConfig+0x122>
 8002e46:	bf00      	nop
 8002e48:	fffff8f8 	.word	0xfffff8f8
 8002e4c:	fffff800 	.word	0xfffff800

08002e50 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8002e50:	2800      	cmp	r0, #0
 8002e52:	f000 810d 	beq.w	8003070 <HAL_LTDC_Init+0x220>
{
 8002e56:	b538      	push	{r3, r4, r5, lr}
 8002e58:	4604      	mov	r4, r0
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 8002e5a:	6802      	ldr	r2, [r0, #0]
 8002e5c:	4b85      	ldr	r3, [pc, #532]	; (8003074 <HAL_LTDC_Init+0x224>)
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d003      	beq.n	8002e6a <HAL_LTDC_Init+0x1a>
 8002e62:	21ca      	movs	r1, #202	; 0xca
 8002e64:	4884      	ldr	r0, [pc, #528]	; (8003078 <HAL_LTDC_Init+0x228>)
 8002e66:	f00f fe45 	bl	8012af4 <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 8002e6a:	6963      	ldr	r3, [r4, #20]
 8002e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e70:	f080 80bc 	bcs.w	8002fec <HAL_LTDC_Init+0x19c>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 8002e74:	69a3      	ldr	r3, [r4, #24]
 8002e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7a:	f080 80bc 	bcs.w	8002ff6 <HAL_LTDC_Init+0x1a6>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 8002e7e:	69e3      	ldr	r3, [r4, #28]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	f080 80bc 	bcs.w	8003000 <HAL_LTDC_Init+0x1b0>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 8002e88:	6a23      	ldr	r3, [r4, #32]
 8002e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8e:	f080 80bc 	bcs.w	800300a <HAL_LTDC_Init+0x1ba>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 8002e92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e98:	f080 80bc 	bcs.w	8003014 <HAL_LTDC_Init+0x1c4>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 8002e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea2:	f080 80bc 	bcs.w	800301e <HAL_LTDC_Init+0x1ce>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 8002ea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eac:	f080 80bc 	bcs.w	8003028 <HAL_LTDC_Init+0x1d8>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 8002eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb6:	f080 80bc 	bcs.w	8003032 <HAL_LTDC_Init+0x1e2>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 8002eba:	6862      	ldr	r2, [r4, #4]
 8002ebc:	f112 4300 	adds.w	r3, r2, #2147483648	; 0x80000000
 8002ec0:	bf18      	it	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2a00      	cmp	r2, #0
 8002ec6:	bf08      	it	eq
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 80b6 	bne.w	800303c <HAL_LTDC_Init+0x1ec>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8002ed0:	68a2      	ldr	r2, [r4, #8]
 8002ed2:	f112 4340 	adds.w	r3, r2, #3221225472	; 0xc0000000
 8002ed6:	bf18      	it	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2a00      	cmp	r2, #0
 8002edc:	bf08      	it	eq
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 80b0 	bne.w	8003046 <HAL_LTDC_Init+0x1f6>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8002ee6:	68e2      	ldr	r2, [r4, #12]
 8002ee8:	f112 4360 	adds.w	r3, r2, #3758096384	; 0xe0000000
 8002eec:	bf18      	it	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	2a00      	cmp	r2, #0
 8002ef2:	bf08      	it	eq
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 80aa 	bne.w	8003050 <HAL_LTDC_Init+0x200>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8002efc:	6922      	ldr	r2, [r4, #16]
 8002efe:	f112 4370 	adds.w	r3, r2, #4026531840	; 0xf0000000
 8002f02:	bf18      	it	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2a00      	cmp	r2, #0
 8002f08:	bf08      	it	eq
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 80a4 	bne.w	800305a <HAL_LTDC_Init+0x20a>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002f12:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80a4 	beq.w	8003064 <HAL_LTDC_Init+0x214>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002f22:	6822      	ldr	r2, [r4, #0]
 8002f24:	6993      	ldr	r3, [r2, #24]
 8002f26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f2a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f2c:	6821      	ldr	r1, [r4, #0]
 8002f2e:	698a      	ldr	r2, [r1, #24]
 8002f30:	6863      	ldr	r3, [r4, #4]
 8002f32:	68a0      	ldr	r0, [r4, #8]
 8002f34:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002f36:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f38:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002f3a:	6920      	ldr	r0, [r4, #16]
 8002f3c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002f42:	6821      	ldr	r1, [r4, #0]
 8002f44:	688a      	ldr	r2, [r1, #8]
 8002f46:	4b4d      	ldr	r3, [pc, #308]	; (800307c <HAL_LTDC_Init+0x22c>)
 8002f48:	401a      	ands	r2, r3
 8002f4a:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002f4c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002f4e:	6820      	ldr	r0, [r4, #0]
 8002f50:	6882      	ldr	r2, [r0, #8]
 8002f52:	69a1      	ldr	r1, [r4, #24]
 8002f54:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002f5c:	6821      	ldr	r1, [r4, #0]
 8002f5e:	68ca      	ldr	r2, [r1, #12]
 8002f60:	401a      	ands	r2, r3
 8002f62:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002f64:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002f66:	6820      	ldr	r0, [r4, #0]
 8002f68:	68c2      	ldr	r2, [r0, #12]
 8002f6a:	6a21      	ldr	r1, [r4, #32]
 8002f6c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002f74:	6821      	ldr	r1, [r4, #0]
 8002f76:	690a      	ldr	r2, [r1, #16]
 8002f78:	401a      	ands	r2, r3
 8002f7a:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002f7c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002f7e:	6820      	ldr	r0, [r4, #0]
 8002f80:	6902      	ldr	r2, [r0, #16]
 8002f82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f84:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002f8c:	6821      	ldr	r1, [r4, #0]
 8002f8e:	694a      	ldr	r2, [r1, #20]
 8002f90:	4013      	ands	r3, r2
 8002f92:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002f94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002f96:	6821      	ldr	r1, [r4, #0]
 8002f98:	694b      	ldr	r3, [r1, #20]
 8002f9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f9c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002fa4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002fa8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002fac:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002fae:	6821      	ldr	r1, [r4, #0]
 8002fb0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002fb2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002fb6:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002fb8:	6821      	ldr	r1, [r4, #0]
 8002fba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002fbc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002fc0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002fc4:	4303      	orrs	r3, r0
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002fce:	f043 0306 	orr.w	r3, r3, #6
 8002fd2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002fd4:	6822      	ldr	r2, [r4, #0]
 8002fd6:	6993      	ldr	r3, [r2, #24]
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 8002fec:	21cb      	movs	r1, #203	; 0xcb
 8002fee:	4822      	ldr	r0, [pc, #136]	; (8003078 <HAL_LTDC_Init+0x228>)
 8002ff0:	f00f fd80 	bl	8012af4 <assert_failed>
 8002ff4:	e73e      	b.n	8002e74 <HAL_LTDC_Init+0x24>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 8002ff6:	21cc      	movs	r1, #204	; 0xcc
 8002ff8:	481f      	ldr	r0, [pc, #124]	; (8003078 <HAL_LTDC_Init+0x228>)
 8002ffa:	f00f fd7b 	bl	8012af4 <assert_failed>
 8002ffe:	e73e      	b.n	8002e7e <HAL_LTDC_Init+0x2e>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 8003000:	21cd      	movs	r1, #205	; 0xcd
 8003002:	481d      	ldr	r0, [pc, #116]	; (8003078 <HAL_LTDC_Init+0x228>)
 8003004:	f00f fd76 	bl	8012af4 <assert_failed>
 8003008:	e73e      	b.n	8002e88 <HAL_LTDC_Init+0x38>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 800300a:	21ce      	movs	r1, #206	; 0xce
 800300c:	481a      	ldr	r0, [pc, #104]	; (8003078 <HAL_LTDC_Init+0x228>)
 800300e:	f00f fd71 	bl	8012af4 <assert_failed>
 8003012:	e73e      	b.n	8002e92 <HAL_LTDC_Init+0x42>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 8003014:	21cf      	movs	r1, #207	; 0xcf
 8003016:	4818      	ldr	r0, [pc, #96]	; (8003078 <HAL_LTDC_Init+0x228>)
 8003018:	f00f fd6c 	bl	8012af4 <assert_failed>
 800301c:	e73e      	b.n	8002e9c <HAL_LTDC_Init+0x4c>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 800301e:	21d0      	movs	r1, #208	; 0xd0
 8003020:	4815      	ldr	r0, [pc, #84]	; (8003078 <HAL_LTDC_Init+0x228>)
 8003022:	f00f fd67 	bl	8012af4 <assert_failed>
 8003026:	e73e      	b.n	8002ea6 <HAL_LTDC_Init+0x56>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 8003028:	21d1      	movs	r1, #209	; 0xd1
 800302a:	4813      	ldr	r0, [pc, #76]	; (8003078 <HAL_LTDC_Init+0x228>)
 800302c:	f00f fd62 	bl	8012af4 <assert_failed>
 8003030:	e73e      	b.n	8002eb0 <HAL_LTDC_Init+0x60>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 8003032:	21d2      	movs	r1, #210	; 0xd2
 8003034:	4810      	ldr	r0, [pc, #64]	; (8003078 <HAL_LTDC_Init+0x228>)
 8003036:	f00f fd5d 	bl	8012af4 <assert_failed>
 800303a:	e73e      	b.n	8002eba <HAL_LTDC_Init+0x6a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 800303c:	21d3      	movs	r1, #211	; 0xd3
 800303e:	480e      	ldr	r0, [pc, #56]	; (8003078 <HAL_LTDC_Init+0x228>)
 8003040:	f00f fd58 	bl	8012af4 <assert_failed>
 8003044:	e744      	b.n	8002ed0 <HAL_LTDC_Init+0x80>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8003046:	21d4      	movs	r1, #212	; 0xd4
 8003048:	480b      	ldr	r0, [pc, #44]	; (8003078 <HAL_LTDC_Init+0x228>)
 800304a:	f00f fd53 	bl	8012af4 <assert_failed>
 800304e:	e74a      	b.n	8002ee6 <HAL_LTDC_Init+0x96>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8003050:	21d5      	movs	r1, #213	; 0xd5
 8003052:	4809      	ldr	r0, [pc, #36]	; (8003078 <HAL_LTDC_Init+0x228>)
 8003054:	f00f fd4e 	bl	8012af4 <assert_failed>
 8003058:	e750      	b.n	8002efc <HAL_LTDC_Init+0xac>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 800305a:	21d6      	movs	r1, #214	; 0xd6
 800305c:	4806      	ldr	r0, [pc, #24]	; (8003078 <HAL_LTDC_Init+0x228>)
 800305e:	f00f fd49 	bl	8012af4 <assert_failed>
 8003062:	e756      	b.n	8002f12 <HAL_LTDC_Init+0xc2>
    hltdc->Lock = HAL_UNLOCKED;
 8003064:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003068:	4620      	mov	r0, r4
 800306a:	f00f f8eb 	bl	8012244 <HAL_LTDC_MspInit>
 800306e:	e755      	b.n	8002f1c <HAL_LTDC_Init+0xcc>
    return HAL_ERROR;
 8003070:	2001      	movs	r0, #1
}
 8003072:	4770      	bx	lr
 8003074:	40016800 	.word	0x40016800
 8003078:	08017cb0 	.word	0x08017cb0
 800307c:	f000f800 	.word	0xf000f800

08003080 <HAL_LTDC_ConfigLayer>:
{
 8003080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003084:	4607      	mov	r7, r0
 8003086:	460e      	mov	r6, r1
 8003088:	4690      	mov	r8, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 800308a:	2a01      	cmp	r2, #1
 800308c:	d853      	bhi.n	8003136 <HAL_LTDC_ConfigLayer+0xb6>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 800308e:	6833      	ldr	r3, [r6, #0]
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d255      	bcs.n	8003142 <HAL_LTDC_ConfigLayer+0xc2>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8003096:	6873      	ldr	r3, [r6, #4]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d257      	bcs.n	800314e <HAL_LTDC_ConfigLayer+0xce>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 800309e:	68b3      	ldr	r3, [r6, #8]
 80030a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a4:	d259      	bcs.n	800315a <HAL_LTDC_ConfigLayer+0xda>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 80030a6:	68f3      	ldr	r3, [r6, #12]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d25b      	bcs.n	8003166 <HAL_LTDC_ConfigLayer+0xe6>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 80030ae:	6933      	ldr	r3, [r6, #16]
 80030b0:	2b07      	cmp	r3, #7
 80030b2:	d85e      	bhi.n	8003172 <HAL_LTDC_ConfigLayer+0xf2>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 80030b4:	6973      	ldr	r3, [r6, #20]
 80030b6:	2bff      	cmp	r3, #255	; 0xff
 80030b8:	d861      	bhi.n	800317e <HAL_LTDC_ConfigLayer+0xfe>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 80030ba:	69b3      	ldr	r3, [r6, #24]
 80030bc:	2bff      	cmp	r3, #255	; 0xff
 80030be:	d864      	bhi.n	800318a <HAL_LTDC_ConfigLayer+0x10a>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 80030c0:	69f3      	ldr	r3, [r6, #28]
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c6:	bf18      	it	ne
 80030c8:	f5b3 6fc0 	cmpne.w	r3, #1536	; 0x600
 80030cc:	d163      	bne.n	8003196 <HAL_LTDC_ConfigLayer+0x116>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 80030ce:	6a33      	ldr	r3, [r6, #32]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	bf18      	it	ne
 80030d4:	2b07      	cmpne	r3, #7
 80030d6:	d164      	bne.n	80031a2 <HAL_LTDC_ConfigLayer+0x122>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 80030d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80030da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030de:	d266      	bcs.n	80031ae <HAL_LTDC_ConfigLayer+0x12e>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 80030e0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80030e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e6:	d268      	bcs.n	80031ba <HAL_LTDC_ConfigLayer+0x13a>
  __HAL_LOCK(hltdc);
 80030e8:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d06a      	beq.n	80031c6 <HAL_LTDC_ConfigLayer+0x146>
 80030f0:	f04f 0901 	mov.w	r9, #1
 80030f4:	f887 90a0 	strb.w	r9, [r7, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80030fe:	2434      	movs	r4, #52	; 0x34
 8003100:	fb04 7408 	mla	r4, r4, r8, r7
 8003104:	3438      	adds	r4, #56	; 0x38
 8003106:	4635      	mov	r5, r6
 8003108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800310a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800310c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800310e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003118:	4642      	mov	r2, r8
 800311a:	4631      	mov	r1, r6
 800311c:	4638      	mov	r0, r7
 800311e:	f7ff fdcd 	bl	8002cbc <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003128:	f887 90a1 	strb.w	r9, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800312c:	2000      	movs	r0, #0
 800312e:	f887 00a0 	strb.w	r0, [r7, #160]	; 0xa0
}
 8003132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003136:	f240 21fe 	movw	r1, #766	; 0x2fe
 800313a:	4824      	ldr	r0, [pc, #144]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 800313c:	f00f fcda 	bl	8012af4 <assert_failed>
 8003140:	e7a5      	b.n	800308e <HAL_LTDC_ConfigLayer+0xe>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8003142:	f240 21ff 	movw	r1, #767	; 0x2ff
 8003146:	4821      	ldr	r0, [pc, #132]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 8003148:	f00f fcd4 	bl	8012af4 <assert_failed>
 800314c:	e7a3      	b.n	8003096 <HAL_LTDC_ConfigLayer+0x16>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 800314e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003152:	481e      	ldr	r0, [pc, #120]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 8003154:	f00f fcce 	bl	8012af4 <assert_failed>
 8003158:	e7a1      	b.n	800309e <HAL_LTDC_ConfigLayer+0x1e>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 800315a:	f240 3101 	movw	r1, #769	; 0x301
 800315e:	481b      	ldr	r0, [pc, #108]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 8003160:	f00f fcc8 	bl	8012af4 <assert_failed>
 8003164:	e79f      	b.n	80030a6 <HAL_LTDC_ConfigLayer+0x26>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8003166:	f240 3102 	movw	r1, #770	; 0x302
 800316a:	4818      	ldr	r0, [pc, #96]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 800316c:	f00f fcc2 	bl	8012af4 <assert_failed>
 8003170:	e79d      	b.n	80030ae <HAL_LTDC_ConfigLayer+0x2e>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8003172:	f240 3103 	movw	r1, #771	; 0x303
 8003176:	4815      	ldr	r0, [pc, #84]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 8003178:	f00f fcbc 	bl	8012af4 <assert_failed>
 800317c:	e79a      	b.n	80030b4 <HAL_LTDC_ConfigLayer+0x34>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 800317e:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003182:	4812      	ldr	r0, [pc, #72]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 8003184:	f00f fcb6 	bl	8012af4 <assert_failed>
 8003188:	e797      	b.n	80030ba <HAL_LTDC_ConfigLayer+0x3a>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 800318a:	f240 3105 	movw	r1, #773	; 0x305
 800318e:	480f      	ldr	r0, [pc, #60]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 8003190:	f00f fcb0 	bl	8012af4 <assert_failed>
 8003194:	e794      	b.n	80030c0 <HAL_LTDC_ConfigLayer+0x40>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8003196:	f240 3106 	movw	r1, #774	; 0x306
 800319a:	480c      	ldr	r0, [pc, #48]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 800319c:	f00f fcaa 	bl	8012af4 <assert_failed>
 80031a0:	e795      	b.n	80030ce <HAL_LTDC_ConfigLayer+0x4e>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 80031a2:	f240 3107 	movw	r1, #775	; 0x307
 80031a6:	4809      	ldr	r0, [pc, #36]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 80031a8:	f00f fca4 	bl	8012af4 <assert_failed>
 80031ac:	e794      	b.n	80030d8 <HAL_LTDC_ConfigLayer+0x58>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 80031ae:	f44f 7142 	mov.w	r1, #776	; 0x308
 80031b2:	4806      	ldr	r0, [pc, #24]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 80031b4:	f00f fc9e 	bl	8012af4 <assert_failed>
 80031b8:	e792      	b.n	80030e0 <HAL_LTDC_ConfigLayer+0x60>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 80031ba:	f240 3109 	movw	r1, #777	; 0x309
 80031be:	4803      	ldr	r0, [pc, #12]	; (80031cc <HAL_LTDC_ConfigLayer+0x14c>)
 80031c0:	f00f fc98 	bl	8012af4 <assert_failed>
 80031c4:	e790      	b.n	80030e8 <HAL_LTDC_ConfigLayer+0x68>
  __HAL_LOCK(hltdc);
 80031c6:	2002      	movs	r0, #2
 80031c8:	e7b3      	b.n	8003132 <HAL_LTDC_ConfigLayer+0xb2>
 80031ca:	bf00      	nop
 80031cc:	08017cb0 	.word	0x08017cb0

080031d0 <HAL_LTDC_SetAddress>:
{
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	4604      	mov	r4, r0
 80031d4:	460f      	mov	r7, r1
 80031d6:	4615      	mov	r5, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 80031d8:	2a01      	cmp	r2, #1
 80031da:	d81d      	bhi.n	8003218 <HAL_LTDC_SetAddress+0x48>
  __HAL_LOCK(hltdc);
 80031dc:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d01f      	beq.n	8003224 <HAL_LTDC_SetAddress+0x54>
 80031e4:	2601      	movs	r6, #1
 80031e6:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031ea:	2302      	movs	r3, #2
 80031ec:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80031f0:	2334      	movs	r3, #52	; 0x34
 80031f2:	fb03 f305 	mul.w	r3, r3, r5
 80031f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 80031fa:	4423      	add	r3, r4
 80031fc:	65df      	str	r7, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80031fe:	462a      	mov	r2, r5
 8003200:	4421      	add	r1, r4
 8003202:	4620      	mov	r0, r4
 8003204:	f7ff fd5a 	bl	8002cbc <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	625e      	str	r6, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800320c:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003210:	2000      	movs	r0, #0
 8003212:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003218:	f240 5111 	movw	r1, #1297	; 0x511
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <HAL_LTDC_SetAddress+0x58>)
 800321e:	f00f fc69 	bl	8012af4 <assert_failed>
 8003222:	e7db      	b.n	80031dc <HAL_LTDC_SetAddress+0xc>
  __HAL_LOCK(hltdc);
 8003224:	2002      	movs	r0, #2
 8003226:	e7f6      	b.n	8003216 <HAL_LTDC_SetAddress+0x46>
 8003228:	08017cb0 	.word	0x08017cb0

0800322c <HAL_LTDC_Reload>:
{
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4604      	mov	r4, r0
 8003230:	460d      	mov	r5, r1
  assert_param(IS_LTDC_RELOAD(ReloadType));
 8003232:	1e4b      	subs	r3, r1, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d816      	bhi.n	8003266 <HAL_LTDC_Reload+0x3a>
  __HAL_LOCK(hltdc);
 8003238:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 800323c:	2b01      	cmp	r3, #1
 800323e:	d018      	beq.n	8003272 <HAL_LTDC_Reload+0x46>
 8003240:	2201      	movs	r2, #1
 8003242:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800324c:	6821      	ldr	r1, [r4, #0]
 800324e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800325a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800325e:	2000      	movs	r0, #0
 8003260:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003264:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LTDC_RELOAD(ReloadType));
 8003266:	f240 51aa 	movw	r1, #1450	; 0x5aa
 800326a:	4803      	ldr	r0, [pc, #12]	; (8003278 <HAL_LTDC_Reload+0x4c>)
 800326c:	f00f fc42 	bl	8012af4 <assert_failed>
 8003270:	e7e2      	b.n	8003238 <HAL_LTDC_Reload+0xc>
  __HAL_LOCK(hltdc);
 8003272:	2002      	movs	r0, #2
 8003274:	e7f6      	b.n	8003264 <HAL_LTDC_Reload+0x38>
 8003276:	bf00      	nop
 8003278:	08017cb0 	.word	0x08017cb0

0800327c <HAL_LTDC_SetAlpha_NoReload>:
{
 800327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327e:	4604      	mov	r4, r0
 8003280:	460e      	mov	r6, r1
 8003282:	4615      	mov	r5, r2
  assert_param(IS_LTDC_ALPHA(Alpha));
 8003284:	29ff      	cmp	r1, #255	; 0xff
 8003286:	d81d      	bhi.n	80032c4 <HAL_LTDC_SetAlpha_NoReload+0x48>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003288:	2d01      	cmp	r5, #1
 800328a:	d821      	bhi.n	80032d0 <HAL_LTDC_SetAlpha_NoReload+0x54>
  __HAL_LOCK(hltdc);
 800328c:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003290:	2b01      	cmp	r3, #1
 8003292:	d023      	beq.n	80032dc <HAL_LTDC_SetAlpha_NoReload+0x60>
 8003294:	2701      	movs	r7, #1
 8003296:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800329a:	2302      	movs	r3, #2
 800329c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80032a0:	2334      	movs	r3, #52	; 0x34
 80032a2:	fb03 f305 	mul.w	r3, r3, r5
 80032a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 80032aa:	4423      	add	r3, r4
 80032ac:	64de      	str	r6, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80032ae:	462a      	mov	r2, r5
 80032b0:	4421      	add	r1, r4
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7ff fd02 	bl	8002cbc <LTDC_SetConfig>
  hltdc->State = HAL_LTDC_STATE_READY;
 80032b8:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80032bc:	2000      	movs	r0, #0
 80032be:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80032c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LTDC_ALPHA(Alpha));
 80032c4:	f240 6196 	movw	r1, #1686	; 0x696
 80032c8:	4805      	ldr	r0, [pc, #20]	; (80032e0 <HAL_LTDC_SetAlpha_NoReload+0x64>)
 80032ca:	f00f fc13 	bl	8012af4 <assert_failed>
 80032ce:	e7db      	b.n	8003288 <HAL_LTDC_SetAlpha_NoReload+0xc>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 80032d0:	f240 6197 	movw	r1, #1687	; 0x697
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <HAL_LTDC_SetAlpha_NoReload+0x64>)
 80032d6:	f00f fc0d 	bl	8012af4 <assert_failed>
 80032da:	e7d7      	b.n	800328c <HAL_LTDC_SetAlpha_NoReload+0x10>
  __HAL_LOCK(hltdc);
 80032dc:	2002      	movs	r0, #2
 80032de:	e7f0      	b.n	80032c2 <HAL_LTDC_SetAlpha_NoReload+0x46>
 80032e0:	08017cb0 	.word	0x08017cb0

080032e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032e4:	b510      	push	{r4, lr}
 80032e6:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_PWREx_EnableOverDrive+0x74>)
 80032ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032fc:	4a17      	ldr	r2, [pc, #92]	; (800335c <HAL_PWREx_EnableOverDrive+0x78>)
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003306:	f7fd ffa3 	bl	8001250 <HAL_GetTick>
 800330a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <HAL_PWREx_EnableOverDrive+0x78>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003314:	d108      	bne.n	8003328 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003316:	f7fd ff9b 	bl	8001250 <HAL_GetTick>
 800331a:	1b00      	subs	r0, r0, r4
 800331c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003320:	d9f4      	bls.n	800330c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8003322:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003324:	b002      	add	sp, #8
 8003326:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003328:	4a0c      	ldr	r2, [pc, #48]	; (800335c <HAL_PWREx_EnableOverDrive+0x78>)
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003330:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003332:	f7fd ff8d 	bl	8001250 <HAL_GetTick>
 8003336:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_PWREx_EnableOverDrive+0x78>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003340:	d107      	bne.n	8003352 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003342:	f7fd ff85 	bl	8001250 <HAL_GetTick>
 8003346:	1b00      	subs	r0, r0, r4
 8003348:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800334c:	d9f4      	bls.n	8003338 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800334e:	2003      	movs	r0, #3
 8003350:	e7e8      	b.n	8003324 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003352:	2000      	movs	r0, #0
 8003354:	e7e6      	b.n	8003324 <HAL_PWREx_EnableOverDrive+0x40>
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	40007000 	.word	0x40007000

08003360 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003360:	2800      	cmp	r0, #0
 8003362:	f000 826c 	beq.w	800383e <HAL_RCC_OscConfig+0x4de>
{
 8003366:	b570      	push	{r4, r5, r6, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800336c:	6803      	ldr	r3, [r0, #0]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	d82b      	bhi.n	80033ca <HAL_RCC_OscConfig+0x6a>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	f013 0f01 	tst.w	r3, #1
 8003378:	d041      	beq.n	80033fe <HAL_RCC_OscConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800337a:	6862      	ldr	r2, [r4, #4]
 800337c:	f5b2 3380 	subs.w	r3, r2, #65536	; 0x10000
 8003380:	bf18      	it	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2a00      	cmp	r2, #0
 8003386:	bf08      	it	eq
 8003388:	2300      	moveq	r3, #0
 800338a:	b113      	cbz	r3, 8003392 <HAL_RCC_OscConfig+0x32>
 800338c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003390:	d121      	bne.n	80033d6 <HAL_RCC_OscConfig+0x76>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003392:	4ba7      	ldr	r3, [pc, #668]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d026      	beq.n	80033ec <HAL_RCC_OscConfig+0x8c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4ba4      	ldr	r3, [pc, #656]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d01b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x82>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033aa:	6863      	ldr	r3, [r4, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d054      	beq.n	800345c <HAL_RCC_OscConfig+0xfc>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d168      	bne.n	8003488 <HAL_RCC_OscConfig+0x128>
 80033b6:	4b9e      	ldr	r3, [pc, #632]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e04d      	b.n	8003466 <HAL_RCC_OscConfig+0x106>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80033ca:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80033ce:	4899      	ldr	r0, [pc, #612]	; (8003634 <HAL_RCC_OscConfig+0x2d4>)
 80033d0:	f00f fb90 	bl	8012af4 <assert_failed>
 80033d4:	e7cd      	b.n	8003372 <HAL_RCC_OscConfig+0x12>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80033d6:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80033da:	4896      	ldr	r0, [pc, #600]	; (8003634 <HAL_RCC_OscConfig+0x2d4>)
 80033dc:	f00f fb8a 	bl	8012af4 <assert_failed>
 80033e0:	e7d7      	b.n	8003392 <HAL_RCC_OscConfig+0x32>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4b93      	ldr	r3, [pc, #588]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80033ea:	d0de      	beq.n	80033aa <HAL_RCC_OscConfig+0x4a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b90      	ldr	r3, [pc, #576]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_OscConfig+0x9e>
 80033f6:	6863      	ldr	r3, [r4, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8222 	beq.w	8003842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	f013 0f02 	tst.w	r3, #2
 8003404:	f000 8089 	beq.w	800351a <HAL_RCC_OscConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003408:	68e3      	ldr	r3, [r4, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d862      	bhi.n	80034d4 <HAL_RCC_OscConfig+0x174>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800340e:	6923      	ldr	r3, [r4, #16]
 8003410:	2b1f      	cmp	r3, #31
 8003412:	d865      	bhi.n	80034e0 <HAL_RCC_OscConfig+0x180>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003414:	4b86      	ldr	r3, [pc, #536]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f013 0f0c 	tst.w	r3, #12
 800341c:	d06b      	beq.n	80034f6 <HAL_RCC_OscConfig+0x196>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b84      	ldr	r3, [pc, #528]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d060      	beq.n	80034ec <HAL_RCC_OscConfig+0x18c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 809b 	beq.w	8003568 <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003432:	4a7f      	ldr	r2, [pc, #508]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003434:	6813      	ldr	r3, [r2, #0]
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd ff08 	bl	8001250 <HAL_GetTick>
 8003440:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b7b      	ldr	r3, [pc, #492]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f013 0f02 	tst.w	r3, #2
 800344a:	f040 8084 	bne.w	8003556 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344e:	f7fd feff 	bl	8001250 <HAL_GetTick>
 8003452:	1b40      	subs	r0, r0, r5
 8003454:	2802      	cmp	r0, #2
 8003456:	d9f4      	bls.n	8003442 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8003458:	2003      	movs	r0, #3
 800345a:	e1f5      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345c:	4a74      	ldr	r2, [pc, #464]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003466:	6863      	ldr	r3, [r4, #4]
 8003468:	b32b      	cbz	r3, 80034b6 <HAL_RCC_OscConfig+0x156>
        tickstart = HAL_GetTick();
 800346a:	f7fd fef1 	bl	8001250 <HAL_GetTick>
 800346e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003470:	4b6f      	ldr	r3, [pc, #444]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003478:	d1c1      	bne.n	80033fe <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347a:	f7fd fee9 	bl	8001250 <HAL_GetTick>
 800347e:	1b40      	subs	r0, r0, r5
 8003480:	2864      	cmp	r0, #100	; 0x64
 8003482:	d9f5      	bls.n	8003470 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8003484:	2003      	movs	r0, #3
 8003486:	e1df      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800348c:	d009      	beq.n	80034a2 <HAL_RCC_OscConfig+0x142>
 800348e:	4b68      	ldr	r3, [pc, #416]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e7e1      	b.n	8003466 <HAL_RCC_OscConfig+0x106>
 80034a2:	4b63      	ldr	r3, [pc, #396]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e7d7      	b.n	8003466 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 80034b6:	f7fd fecb 	bl	8001250 <HAL_GetTick>
 80034ba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034bc:	4b5c      	ldr	r3, [pc, #368]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034c4:	d09b      	beq.n	80033fe <HAL_RCC_OscConfig+0x9e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c6:	f7fd fec3 	bl	8001250 <HAL_GetTick>
 80034ca:	1b40      	subs	r0, r0, r5
 80034cc:	2864      	cmp	r0, #100	; 0x64
 80034ce:	d9f5      	bls.n	80034bc <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 80034d0:	2003      	movs	r0, #3
 80034d2:	e1b9      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80034d4:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80034d8:	4856      	ldr	r0, [pc, #344]	; (8003634 <HAL_RCC_OscConfig+0x2d4>)
 80034da:	f00f fb0b 	bl	8012af4 <assert_failed>
 80034de:	e796      	b.n	800340e <HAL_RCC_OscConfig+0xae>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80034e0:	f240 119d 	movw	r1, #413	; 0x19d
 80034e4:	4853      	ldr	r0, [pc, #332]	; (8003634 <HAL_RCC_OscConfig+0x2d4>)
 80034e6:	f00f fb05 	bl	8012af4 <assert_failed>
 80034ea:	e793      	b.n	8003414 <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80034f4:	d199      	bne.n	800342a <HAL_RCC_OscConfig+0xca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	4b4e      	ldr	r3, [pc, #312]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f013 0f02 	tst.w	r3, #2
 80034fe:	d004      	beq.n	800350a <HAL_RCC_OscConfig+0x1aa>
 8003500:	68e3      	ldr	r3, [r4, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x1aa>
        return HAL_ERROR;
 8003506:	2001      	movs	r0, #1
 8003508:	e19e      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	4a49      	ldr	r2, [pc, #292]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 800350c:	6813      	ldr	r3, [r2, #0]
 800350e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003512:	6921      	ldr	r1, [r4, #16]
 8003514:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003518:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	f013 0f08 	tst.w	r3, #8
 8003520:	d050      	beq.n	80035c4 <HAL_RCC_OscConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003522:	6963      	ldr	r3, [r4, #20]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d833      	bhi.n	8003590 <HAL_RCC_OscConfig+0x230>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003528:	6963      	ldr	r3, [r4, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d036      	beq.n	800359c <HAL_RCC_OscConfig+0x23c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352e:	4a40      	ldr	r2, [pc, #256]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003530:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fd fe8a 	bl	8001250 <HAL_GetTick>
 800353c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	4b3c      	ldr	r3, [pc, #240]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003542:	f013 0f02 	tst.w	r3, #2
 8003546:	d13d      	bne.n	80035c4 <HAL_RCC_OscConfig+0x264>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003548:	f7fd fe82 	bl	8001250 <HAL_GetTick>
 800354c:	1b40      	subs	r0, r0, r5
 800354e:	2802      	cmp	r0, #2
 8003550:	d9f5      	bls.n	800353e <HAL_RCC_OscConfig+0x1de>
        {
          return HAL_TIMEOUT;
 8003552:	2003      	movs	r0, #3
 8003554:	e178      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4a36      	ldr	r2, [pc, #216]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 8003558:	6813      	ldr	r3, [r2, #0]
 800355a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800355e:	6921      	ldr	r1, [r4, #16]
 8003560:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e7d8      	b.n	800351a <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_DISABLE();
 8003568:	4a31      	ldr	r2, [pc, #196]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003572:	f7fd fe6d 	bl	8001250 <HAL_GetTick>
 8003576:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003578:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f013 0f02 	tst.w	r3, #2
 8003580:	d0cb      	beq.n	800351a <HAL_RCC_OscConfig+0x1ba>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003582:	f7fd fe65 	bl	8001250 <HAL_GetTick>
 8003586:	1b40      	subs	r0, r0, r5
 8003588:	2802      	cmp	r0, #2
 800358a:	d9f5      	bls.n	8003578 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 800358c:	2003      	movs	r0, #3
 800358e:	e15b      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003590:	f240 11dd 	movw	r1, #477	; 0x1dd
 8003594:	4827      	ldr	r0, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x2d4>)
 8003596:	f00f faad 	bl	8012af4 <assert_failed>
 800359a:	e7c5      	b.n	8003528 <HAL_RCC_OscConfig+0x1c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359c:	4a24      	ldr	r2, [pc, #144]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 800359e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fd fe53 	bl	8001250 <HAL_GetTick>
 80035aa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80035ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b0:	f013 0f02 	tst.w	r3, #2
 80035b4:	d006      	beq.n	80035c4 <HAL_RCC_OscConfig+0x264>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b6:	f7fd fe4b 	bl	8001250 <HAL_GetTick>
 80035ba:	1b40      	subs	r0, r0, r5
 80035bc:	2802      	cmp	r0, #2
 80035be:	d9f5      	bls.n	80035ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c0:	2003      	movs	r0, #3
 80035c2:	e141      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	f013 0f04 	tst.w	r3, #4
 80035ca:	f000 808c 	beq.w	80036e6 <HAL_RCC_OscConfig+0x386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	bf18      	it	ne
 80035d4:	2b01      	cmpne	r3, #1
 80035d6:	d823      	bhi.n	8003620 <HAL_RCC_OscConfig+0x2c0>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80035e0:	d124      	bne.n	800362c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 80035e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80035f6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f8:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <HAL_RCC_OscConfig+0x2d8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003600:	d01c      	beq.n	800363c <HAL_RCC_OscConfig+0x2dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003602:	68a3      	ldr	r3, [r4, #8]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d02d      	beq.n	8003664 <HAL_RCC_OscConfig+0x304>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d143      	bne.n	8003694 <HAL_RCC_OscConfig+0x334>
 800360c:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HAL_RCC_OscConfig+0x2d0>)
 800360e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	671a      	str	r2, [r3, #112]	; 0x70
 8003616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003618:	f022 0204 	bic.w	r2, r2, #4
 800361c:	671a      	str	r2, [r3, #112]	; 0x70
 800361e:	e026      	b.n	800366e <HAL_RCC_OscConfig+0x30e>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003620:	f240 2107 	movw	r1, #519	; 0x207
 8003624:	4803      	ldr	r0, [pc, #12]	; (8003634 <HAL_RCC_OscConfig+0x2d4>)
 8003626:	f00f fa65 	bl	8012af4 <assert_failed>
 800362a:	e7d5      	b.n	80035d8 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800362c:	2500      	movs	r5, #0
 800362e:	e7e3      	b.n	80035f8 <HAL_RCC_OscConfig+0x298>
 8003630:	40023800 	.word	0x40023800
 8003634:	08017cec 	.word	0x08017cec
 8003638:	40007000 	.word	0x40007000
      PWR->CR1 |= PWR_CR1_DBP;
 800363c:	4a84      	ldr	r2, [pc, #528]	; (8003850 <HAL_RCC_OscConfig+0x4f0>)
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003644:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003646:	f7fd fe03 	bl	8001250 <HAL_GetTick>
 800364a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364c:	4b80      	ldr	r3, [pc, #512]	; (8003850 <HAL_RCC_OscConfig+0x4f0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003654:	d1d5      	bne.n	8003602 <HAL_RCC_OscConfig+0x2a2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fd fdfb 	bl	8001250 <HAL_GetTick>
 800365a:	1b80      	subs	r0, r0, r6
 800365c:	2864      	cmp	r0, #100	; 0x64
 800365e:	d9f5      	bls.n	800364c <HAL_RCC_OscConfig+0x2ec>
          return HAL_TIMEOUT;
 8003660:	2003      	movs	r0, #3
 8003662:	e0f1      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003664:	4a7b      	ldr	r2, [pc, #492]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366e:	68a3      	ldr	r3, [r4, #8]
 8003670:	b333      	cbz	r3, 80036c0 <HAL_RCC_OscConfig+0x360>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003672:	f7fd fded 	bl	8001250 <HAL_GetTick>
 8003676:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	4b76      	ldr	r3, [pc, #472]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	f013 0f02 	tst.w	r3, #2
 8003680:	d12f      	bne.n	80036e2 <HAL_RCC_OscConfig+0x382>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd fde5 	bl	8001250 <HAL_GetTick>
 8003686:	1b80      	subs	r0, r0, r6
 8003688:	f241 3388 	movw	r3, #5000	; 0x1388
 800368c:	4298      	cmp	r0, r3
 800368e:	d9f3      	bls.n	8003678 <HAL_RCC_OscConfig+0x318>
        {
          return HAL_TIMEOUT;
 8003690:	2003      	movs	r0, #3
 8003692:	e0d9      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	2b05      	cmp	r3, #5
 8003696:	d009      	beq.n	80036ac <HAL_RCC_OscConfig+0x34c>
 8003698:	4b6e      	ldr	r3, [pc, #440]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	671a      	str	r2, [r3, #112]	; 0x70
 80036a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036a4:	f022 0204 	bic.w	r2, r2, #4
 80036a8:	671a      	str	r2, [r3, #112]	; 0x70
 80036aa:	e7e0      	b.n	800366e <HAL_RCC_OscConfig+0x30e>
 80036ac:	4b69      	ldr	r3, [pc, #420]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036b0:	f042 0204 	orr.w	r2, r2, #4
 80036b4:	671a      	str	r2, [r3, #112]	; 0x70
 80036b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	671a      	str	r2, [r3, #112]	; 0x70
 80036be:	e7d6      	b.n	800366e <HAL_RCC_OscConfig+0x30e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fd fdc6 	bl	8001250 <HAL_GetTick>
 80036c4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	4b63      	ldr	r3, [pc, #396]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	f013 0f02 	tst.w	r3, #2
 80036ce:	d008      	beq.n	80036e2 <HAL_RCC_OscConfig+0x382>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fd fdbe 	bl	8001250 <HAL_GetTick>
 80036d4:	1b80      	subs	r0, r0, r6
 80036d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80036da:	4298      	cmp	r0, r3
 80036dc:	d9f3      	bls.n	80036c6 <HAL_RCC_OscConfig+0x366>
        {
          return HAL_TIMEOUT;
 80036de:	2003      	movs	r0, #3
 80036e0:	e0b2      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e2:	2d00      	cmp	r5, #0
 80036e4:	d144      	bne.n	8003770 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80036e6:	69a3      	ldr	r3, [r4, #24]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d847      	bhi.n	800377c <HAL_RCC_OscConfig+0x41c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ec:	69a3      	ldr	r3, [r4, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80a9 	beq.w	8003846 <HAL_RCC_OscConfig+0x4e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f4:	4a57      	ldr	r2, [pc, #348]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	f002 020c 	and.w	r2, r2, #12
 80036fc:	2a08      	cmp	r2, #8
 80036fe:	f000 80a5 	beq.w	800384c <HAL_RCC_OscConfig+0x4ec>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003702:	2b02      	cmp	r3, #2
 8003704:	f040 8085 	bne.w	8003812 <HAL_RCC_OscConfig+0x4b2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003708:	69e2      	ldr	r2, [r4, #28]
 800370a:	f5b2 0380 	subs.w	r3, r2, #4194304	; 0x400000
 800370e:	bf18      	it	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2a00      	cmp	r2, #0
 8003714:	bf08      	it	eq
 8003716:	2300      	moveq	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d135      	bne.n	8003788 <HAL_RCC_OscConfig+0x428>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800371c:	6a23      	ldr	r3, [r4, #32]
 800371e:	3b02      	subs	r3, #2
 8003720:	2b3d      	cmp	r3, #61	; 0x3d
 8003722:	d837      	bhi.n	8003794 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003726:	3b32      	subs	r3, #50	; 0x32
 8003728:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800372c:	d838      	bhi.n	80037a0 <HAL_RCC_OscConfig+0x440>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800372e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003730:	2b02      	cmp	r3, #2
 8003732:	bf18      	it	ne
 8003734:	2b04      	cmpne	r3, #4
 8003736:	d003      	beq.n	8003740 <HAL_RCC_OscConfig+0x3e0>
 8003738:	2b06      	cmp	r3, #6
 800373a:	d001      	beq.n	8003740 <HAL_RCC_OscConfig+0x3e0>
 800373c:	2b08      	cmp	r3, #8
 800373e:	d135      	bne.n	80037ac <HAL_RCC_OscConfig+0x44c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003742:	3b02      	subs	r3, #2
 8003744:	2b0d      	cmp	r3, #13
 8003746:	d837      	bhi.n	80037b8 <HAL_RCC_OscConfig+0x458>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003748:	4a42      	ldr	r2, [pc, #264]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fd fd7d 	bl	8001250 <HAL_GetTick>
 8003756:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003758:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003760:	d030      	beq.n	80037c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd fd75 	bl	8001250 <HAL_GetTick>
 8003766:	1b40      	subs	r0, r0, r5
 8003768:	2802      	cmp	r0, #2
 800376a:	d9f5      	bls.n	8003758 <HAL_RCC_OscConfig+0x3f8>
          {
            return HAL_TIMEOUT;
 800376c:	2003      	movs	r0, #3
 800376e:	e06b      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003770:	4a38      	ldr	r2, [pc, #224]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 8003772:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	e7b4      	b.n	80036e6 <HAL_RCC_OscConfig+0x386>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800377c:	f240 214b 	movw	r1, #587	; 0x24b
 8003780:	4835      	ldr	r0, [pc, #212]	; (8003858 <HAL_RCC_OscConfig+0x4f8>)
 8003782:	f00f f9b7 	bl	8012af4 <assert_failed>
 8003786:	e7b1      	b.n	80036ec <HAL_RCC_OscConfig+0x38c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003788:	f44f 7115 	mov.w	r1, #596	; 0x254
 800378c:	4832      	ldr	r0, [pc, #200]	; (8003858 <HAL_RCC_OscConfig+0x4f8>)
 800378e:	f00f f9b1 	bl	8012af4 <assert_failed>
 8003792:	e7c3      	b.n	800371c <HAL_RCC_OscConfig+0x3bc>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003794:	f240 2155 	movw	r1, #597	; 0x255
 8003798:	482f      	ldr	r0, [pc, #188]	; (8003858 <HAL_RCC_OscConfig+0x4f8>)
 800379a:	f00f f9ab 	bl	8012af4 <assert_failed>
 800379e:	e7c1      	b.n	8003724 <HAL_RCC_OscConfig+0x3c4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80037a0:	f240 2156 	movw	r1, #598	; 0x256
 80037a4:	482c      	ldr	r0, [pc, #176]	; (8003858 <HAL_RCC_OscConfig+0x4f8>)
 80037a6:	f00f f9a5 	bl	8012af4 <assert_failed>
 80037aa:	e7c0      	b.n	800372e <HAL_RCC_OscConfig+0x3ce>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80037ac:	f240 2157 	movw	r1, #599	; 0x257
 80037b0:	4829      	ldr	r0, [pc, #164]	; (8003858 <HAL_RCC_OscConfig+0x4f8>)
 80037b2:	f00f f99f 	bl	8012af4 <assert_failed>
 80037b6:	e7c3      	b.n	8003740 <HAL_RCC_OscConfig+0x3e0>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80037b8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80037bc:	4826      	ldr	r0, [pc, #152]	; (8003858 <HAL_RCC_OscConfig+0x4f8>)
 80037be:	f00f f999 	bl	8012af4 <assert_failed>
 80037c2:	e7c1      	b.n	8003748 <HAL_RCC_OscConfig+0x3e8>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c4:	69e3      	ldr	r3, [r4, #28]
 80037c6:	6a22      	ldr	r2, [r4, #32]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80037d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037d2:	0852      	lsrs	r2, r2, #1
 80037d4:	3a01      	subs	r2, #1
 80037d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80037e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037e4:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 80037e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	6813      	ldr	r3, [r2, #0]
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fd fd2e 	bl	8001250 <HAL_GetTick>
 80037f4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x4ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003800:	f7fd fd26 	bl	8001250 <HAL_GetTick>
 8003804:	1b00      	subs	r0, r0, r4
 8003806:	2802      	cmp	r0, #2
 8003808:	d9f5      	bls.n	80037f6 <HAL_RCC_OscConfig+0x496>
          {
            return HAL_TIMEOUT;
 800380a:	2003      	movs	r0, #3
 800380c:	e01c      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800380e:	2000      	movs	r0, #0
 8003810:	e01a      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
        __HAL_RCC_PLL_DISABLE();
 8003812:	4a10      	ldr	r2, [pc, #64]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800381a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800381c:	f7fd fd18 	bl	8001250 <HAL_GetTick>
 8003820:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_RCC_OscConfig+0x4f4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800382a:	d006      	beq.n	800383a <HAL_RCC_OscConfig+0x4da>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382c:	f7fd fd10 	bl	8001250 <HAL_GetTick>
 8003830:	1b00      	subs	r0, r0, r4
 8003832:	2802      	cmp	r0, #2
 8003834:	d9f5      	bls.n	8003822 <HAL_RCC_OscConfig+0x4c2>
            return HAL_TIMEOUT;
 8003836:	2003      	movs	r0, #3
 8003838:	e006      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
  return HAL_OK;
 800383a:	2000      	movs	r0, #0
 800383c:	e004      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
    return HAL_ERROR;
 800383e:	2001      	movs	r0, #1
}
 8003840:	4770      	bx	lr
        return HAL_ERROR;
 8003842:	2001      	movs	r0, #1
 8003844:	e000      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
  return HAL_OK;
 8003846:	2000      	movs	r0, #0
}
 8003848:	b002      	add	sp, #8
 800384a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800384c:	2001      	movs	r0, #1
 800384e:	e7fb      	b.n	8003848 <HAL_RCC_OscConfig+0x4e8>
 8003850:	40007000 	.word	0x40007000
 8003854:	40023800 	.word	0x40023800
 8003858:	08017cec 	.word	0x08017cec

0800385c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800385c:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b04      	cmp	r3, #4
 8003866:	d044      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x96>
 8003868:	2b08      	cmp	r3, #8
 800386a:	d001      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4823      	ldr	r0, [pc, #140]	; (80038fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800386e:	4770      	bx	lr
{
 8003870:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003882:	d013      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003884:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800388c:	2300      	movs	r3, #0
 800388e:	481c      	ldr	r0, [pc, #112]	; (8003900 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003890:	fba1 0100 	umull	r0, r1, r1, r0
 8003894:	f7fd faf0 	bl	8000e78 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80038a0:	3301      	adds	r3, #1
 80038a2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80038a4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80038a8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80038b4:	461e      	mov	r6, r3
 80038b6:	2700      	movs	r7, #0
 80038b8:	015c      	lsls	r4, r3, #5
 80038ba:	2500      	movs	r5, #0
 80038bc:	1ae4      	subs	r4, r4, r3
 80038be:	eb65 0507 	sbc.w	r5, r5, r7
 80038c2:	01a9      	lsls	r1, r5, #6
 80038c4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80038c8:	01a0      	lsls	r0, r4, #6
 80038ca:	1b00      	subs	r0, r0, r4
 80038cc:	eb61 0105 	sbc.w	r1, r1, r5
 80038d0:	00cb      	lsls	r3, r1, #3
 80038d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80038d6:	00c4      	lsls	r4, r0, #3
 80038d8:	19a0      	adds	r0, r4, r6
 80038da:	eb43 0107 	adc.w	r1, r3, r7
 80038de:	028b      	lsls	r3, r1, #10
 80038e0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80038e4:	0284      	lsls	r4, r0, #10
 80038e6:	4620      	mov	r0, r4
 80038e8:	4619      	mov	r1, r3
 80038ea:	2300      	movs	r3, #0
 80038ec:	f7fd fac4 	bl	8000e78 <__aeabi_uldivmod>
 80038f0:	e7d2      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 80038f2:	4803      	ldr	r0, [pc, #12]	; (8003900 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	017d7840 	.word	0x017d7840

08003904 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003904:	2800      	cmp	r0, #0
 8003906:	f000 810b 	beq.w	8003b20 <HAL_RCC_ClockConfig+0x21c>
{
 800390a:	b570      	push	{r4, r5, r6, lr}
 800390c:	4604      	mov	r4, r0
 800390e:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003910:	6803      	ldr	r3, [r0, #0]
 8003912:	3b01      	subs	r3, #1
 8003914:	2b0e      	cmp	r3, #14
 8003916:	d814      	bhi.n	8003942 <HAL_RCC_ClockConfig+0x3e>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003918:	2d0f      	cmp	r5, #15
 800391a:	d818      	bhi.n	800394e <HAL_RCC_ClockConfig+0x4a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800391c:	4b82      	ldr	r3, [pc, #520]	; (8003b28 <HAL_RCC_ClockConfig+0x224>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	42ab      	cmp	r3, r5
 8003926:	d218      	bcs.n	800395a <HAL_RCC_ClockConfig+0x56>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003928:	4a7f      	ldr	r2, [pc, #508]	; (8003b28 <HAL_RCC_ClockConfig+0x224>)
 800392a:	6813      	ldr	r3, [r2, #0]
 800392c:	f023 030f 	bic.w	r3, r3, #15
 8003930:	432b      	orrs	r3, r5
 8003932:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003934:	6813      	ldr	r3, [r2, #0]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	42ab      	cmp	r3, r5
 800393c:	d00d      	beq.n	800395a <HAL_RCC_ClockConfig+0x56>
      return HAL_ERROR;
 800393e:	2001      	movs	r0, #1
}
 8003940:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003942:	f240 21ca 	movw	r1, #714	; 0x2ca
 8003946:	4879      	ldr	r0, [pc, #484]	; (8003b2c <HAL_RCC_ClockConfig+0x228>)
 8003948:	f00f f8d4 	bl	8012af4 <assert_failed>
 800394c:	e7e4      	b.n	8003918 <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800394e:	f240 21cb 	movw	r1, #715	; 0x2cb
 8003952:	4876      	ldr	r0, [pc, #472]	; (8003b2c <HAL_RCC_ClockConfig+0x228>)
 8003954:	f00f f8ce 	bl	8012af4 <assert_failed>
 8003958:	e7e0      	b.n	800391c <HAL_RCC_ClockConfig+0x18>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	f013 0f02 	tst.w	r3, #2
 8003960:	d02e      	beq.n	80039c0 <HAL_RCC_ClockConfig+0xbc>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003962:	f013 0f04 	tst.w	r3, #4
 8003966:	d004      	beq.n	8003972 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4a71      	ldr	r2, [pc, #452]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 800396a:	6893      	ldr	r3, [r2, #8]
 800396c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003970:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	f013 0f08 	tst.w	r3, #8
 8003978:	d004      	beq.n	8003984 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800397a:	4a6d      	ldr	r2, [pc, #436]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 800397c:	6893      	ldr	r3, [r2, #8]
 800397e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003982:	6093      	str	r3, [r2, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003984:	68a3      	ldr	r3, [r4, #8]
 8003986:	f1b3 0280 	subs.w	r2, r3, #128	; 0x80
 800398a:	bf18      	it	ne
 800398c:	2201      	movne	r2, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	bf08      	it	eq
 8003992:	2200      	moveq	r2, #0
 8003994:	b16a      	cbz	r2, 80039b2 <HAL_RCC_ClockConfig+0xae>
 8003996:	2b90      	cmp	r3, #144	; 0x90
 8003998:	d00b      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xae>
 800399a:	2ba0      	cmp	r3, #160	; 0xa0
 800399c:	d009      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xae>
 800399e:	2bb0      	cmp	r3, #176	; 0xb0
 80039a0:	d007      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xae>
 80039a2:	2bc0      	cmp	r3, #192	; 0xc0
 80039a4:	d005      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xae>
 80039a6:	2bd0      	cmp	r3, #208	; 0xd0
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xae>
 80039aa:	2be0      	cmp	r3, #224	; 0xe0
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xae>
 80039ae:	2bf0      	cmp	r3, #240	; 0xf0
 80039b0:	d132      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b2:	4a5f      	ldr	r2, [pc, #380]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 80039b4:	6893      	ldr	r3, [r2, #8]
 80039b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ba:	68a1      	ldr	r1, [r4, #8]
 80039bc:	430b      	orrs	r3, r1
 80039be:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	f013 0f01 	tst.w	r3, #1
 80039c6:	d041      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x148>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80039c8:	6863      	ldr	r3, [r4, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d82a      	bhi.n	8003a24 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ce:	6863      	ldr	r3, [r4, #4]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d02d      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x12c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d032      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	4a55      	ldr	r2, [pc, #340]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	f012 0f02 	tst.w	r2, #2
 80039e0:	f000 80a0 	beq.w	8003b24 <HAL_RCC_ClockConfig+0x220>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e4:	4952      	ldr	r1, [pc, #328]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 80039e6:	688a      	ldr	r2, [r1, #8]
 80039e8:	f022 0203 	bic.w	r2, r2, #3
 80039ec:	4313      	orrs	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80039f0:	f7fd fc2e 	bl	8001250 <HAL_GetTick>
 80039f4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	4b4e      	ldr	r3, [pc, #312]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	6862      	ldr	r2, [r4, #4]
 8003a00:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003a04:	d022      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x148>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a06:	f7fd fc23 	bl	8001250 <HAL_GetTick>
 8003a0a:	1b80      	subs	r0, r0, r6
 8003a0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a10:	4298      	cmp	r0, r3
 8003a12:	d9f0      	bls.n	80039f6 <HAL_RCC_ClockConfig+0xf2>
        return HAL_TIMEOUT;
 8003a14:	2003      	movs	r0, #3
 8003a16:	e793      	b.n	8003940 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003a18:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003a1c:	4843      	ldr	r0, [pc, #268]	; (8003b2c <HAL_RCC_ClockConfig+0x228>)
 8003a1e:	f00f f869 	bl	8012af4 <assert_failed>
 8003a22:	e7c6      	b.n	80039b2 <HAL_RCC_ClockConfig+0xae>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003a24:	f240 21f6 	movw	r1, #758	; 0x2f6
 8003a28:	4840      	ldr	r0, [pc, #256]	; (8003b2c <HAL_RCC_ClockConfig+0x228>)
 8003a2a:	f00f f863 	bl	8012af4 <assert_failed>
 8003a2e:	e7ce      	b.n	80039ce <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a30:	4a3f      	ldr	r2, [pc, #252]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003a38:	d1d4      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xe0>
        return HAL_ERROR;
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	e780      	b.n	8003940 <HAL_RCC_ClockConfig+0x3c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003a46:	d1cd      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xe0>
        return HAL_ERROR;
 8003a48:	2001      	movs	r0, #1
 8003a4a:	e779      	b.n	8003940 <HAL_RCC_ClockConfig+0x3c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_RCC_ClockConfig+0x224>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	42ab      	cmp	r3, r5
 8003a56:	d90c      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x16e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a58:	4a33      	ldr	r2, [pc, #204]	; (8003b28 <HAL_RCC_ClockConfig+0x224>)
 8003a5a:	6813      	ldr	r3, [r2, #0]
 8003a5c:	f023 030f 	bic.w	r3, r3, #15
 8003a60:	432b      	orrs	r3, r5
 8003a62:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a64:	6813      	ldr	r3, [r2, #0]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	42ab      	cmp	r3, r5
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x16e>
      return HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
 8003a70:	e766      	b.n	8003940 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f013 0f04 	tst.w	r3, #4
 8003a78:	d018      	beq.n	8003aac <HAL_RCC_ClockConfig+0x1a8>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003a7a:	68e3      	ldr	r3, [r4, #12]
 8003a7c:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8003a80:	bf18      	it	ne
 8003a82:	2201      	movne	r2, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf08      	it	eq
 8003a88:	2200      	moveq	r2, #0
 8003a8a:	b142      	cbz	r2, 8003a9e <HAL_RCC_ClockConfig+0x19a>
 8003a8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a90:	d005      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x19a>
 8003a92:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003a96:	d002      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x19a>
 8003a98:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003a9c:	d134      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x204>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9e:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 8003aa0:	6893      	ldr	r3, [r2, #8]
 8003aa2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003aa6:	68e1      	ldr	r1, [r4, #12]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f013 0f08 	tst.w	r3, #8
 8003ab2:	d019      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x1e4>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003ab4:	6923      	ldr	r3, [r4, #16]
 8003ab6:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8003aba:	bf18      	it	ne
 8003abc:	2201      	movne	r2, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	bf08      	it	eq
 8003ac2:	2200      	moveq	r2, #0
 8003ac4:	b142      	cbz	r2, 8003ad8 <HAL_RCC_ClockConfig+0x1d4>
 8003ac6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x1d4>
 8003acc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x1d4>
 8003ad2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003ad6:	d11d      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x210>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ad8:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 8003ada:	6893      	ldr	r3, [r2, #8]
 8003adc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ae0:	6921      	ldr	r1, [r4, #16]
 8003ae2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ae6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae8:	f7ff feb8 	bl	800385c <HAL_RCC_GetSysClockFreq>
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_RCC_ClockConfig+0x22c>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003af4:	4a0f      	ldr	r2, [pc, #60]	; (8003b34 <HAL_RCC_ClockConfig+0x230>)
 8003af6:	5cd3      	ldrb	r3, [r2, r3]
 8003af8:	40d8      	lsrs	r0, r3
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <HAL_RCC_ClockConfig+0x234>)
 8003afc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fd fb5e 	bl	80011c0 <HAL_InitTick>
  return HAL_OK;
 8003b04:	2000      	movs	r0, #0
 8003b06:	e71b      	b.n	8003940 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003b08:	f240 3133 	movw	r1, #819	; 0x333
 8003b0c:	4807      	ldr	r0, [pc, #28]	; (8003b2c <HAL_RCC_ClockConfig+0x228>)
 8003b0e:	f00e fff1 	bl	8012af4 <assert_failed>
 8003b12:	e7c4      	b.n	8003a9e <HAL_RCC_ClockConfig+0x19a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003b14:	f240 313a 	movw	r1, #826	; 0x33a
 8003b18:	4804      	ldr	r0, [pc, #16]	; (8003b2c <HAL_RCC_ClockConfig+0x228>)
 8003b1a:	f00e ffeb 	bl	8012af4 <assert_failed>
 8003b1e:	e7db      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x1d4>
    return HAL_ERROR;
 8003b20:	2001      	movs	r0, #1
}
 8003b22:	4770      	bx	lr
        return HAL_ERROR;
 8003b24:	2001      	movs	r0, #1
 8003b26:	e70b      	b.n	8003940 <HAL_RCC_ClockConfig+0x3c>
 8003b28:	40023c00 	.word	0x40023c00
 8003b2c:	08017cec 	.word	0x08017cec
 8003b30:	40023800 	.word	0x40023800
 8003b34:	0801d234 	.word	0x0801d234
 8003b38:	20000088 	.word	0x20000088

08003b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	4604      	mov	r4, r0
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003b42:	6802      	ldr	r2, [r0, #0]
 8003b44:	4b93      	ldr	r3, [pc, #588]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	b1cb      	cbz	r3, 8003b7e <HAL_RCCEx_PeriphCLKConfig+0x42>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	f013 0f01 	tst.w	r3, #1
 8003b50:	d01f      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003b52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b54:	f5b2 0300 	subs.w	r3, r2, #8388608	; 0x800000
 8003b58:	bf18      	it	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	bf08      	it	eq
 8003b60:	2300      	moveq	r3, #0
 8003b62:	b98b      	cbnz	r3, 8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4c>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b64:	4b8c      	ldr	r3, [pc, #560]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b78:	b373      	cbz	r3, 8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  uint32_t plli2sused = 0;
 8003b7a:	2700      	movs	r7, #0
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x58>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003b7e:	2174      	movs	r1, #116	; 0x74
 8003b80:	4886      	ldr	r0, [pc, #536]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	f00e ffb7 	bl	8012af4 <assert_failed>
 8003b86:	e7e0      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xe>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003b88:	217a      	movs	r1, #122	; 0x7a
 8003b8a:	4884      	ldr	r0, [pc, #528]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8c:	f00e ffb2 	bl	8012af4 <assert_failed>
 8003b90:	e7e8      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x28>
  uint32_t plli2sused = 0;
 8003b92:	2700      	movs	r7, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003b9a:	d026      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003b9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b9e:	f5b2 1380 	subs.w	r3, r2, #1048576	; 0x100000
 8003ba2:	bf18      	it	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	bf08      	it	eq
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b113      	cbz	r3, 8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003bae:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003bb2:	d113      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xa0>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb4:	4a78      	ldr	r2, [pc, #480]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bb6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003bba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003bbe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bcc:	d00b      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80d6 	beq.w	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  uint32_t pllsaiused = 0;
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	e009      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xb0>
      plli2sused = 1;
 8003bd8:	2701      	movs	r7, #1
 8003bda:	e7db      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x58>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003bdc:	218a      	movs	r1, #138	; 0x8a
 8003bde:	486f      	ldr	r0, [pc, #444]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	f00e ff88 	bl	8012af4 <assert_failed>
 8003be4:	e7e6      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1;
 8003be6:	2701      	movs	r7, #1
 8003be8:	e7f1      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x92>
  uint32_t pllsaiused = 0;
 8003bea:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003bf2:	d01c      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003bf4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003bf6:	f5b2 0380 	subs.w	r3, r2, #4194304	; 0x400000
 8003bfa:	bf18      	it	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2a00      	cmp	r2, #0
 8003c00:	bf08      	it	eq
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b11b      	cbz	r3, 8003c0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8003c06:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003c0a:	f040 80bb 	bne.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x248>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c0e:	4a62      	ldr	r2, [pc, #392]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c10:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003c14:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003c18:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c26:	f000 80b2 	beq.w	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c2a:	b903      	cbnz	r3, 8003c2e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    {
      pllsaiused = 1;
 8003c2c:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003c34:	d000      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
      plli2sused = 1;
 8003c36:	2701      	movs	r7, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c38:	f013 0f20 	tst.w	r3, #32
 8003c3c:	f000 80e3 	beq.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003c40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c46:	bf18      	it	ne
 8003c48:	f5b3 7f00 	cmpne.w	r3, #512	; 0x200
 8003c4c:	d07a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c4e:	4a54      	ldr	r2, [pc, #336]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d077      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c54:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d073      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c5c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d06f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c64:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d06b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c6c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d067      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c74:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d063      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c7c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d05f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c84:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d05b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c8c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d057      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c94:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d053      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c9c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d04f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003ca4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d04b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cac:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d047      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cb4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d043      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cbc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d03f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cc4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d03b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003ccc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d037      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cd4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d033      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cdc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d02f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003ce4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d02b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cec:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d027      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cf4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d023      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cfc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d01f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d04:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d01b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d0c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d017      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d14:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d1c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d24:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d2c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d34:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d3c:	21b9      	movs	r1, #185	; 0xb9
 8003d3e:	4817      	ldr	r0, [pc, #92]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	f00e fed8 	bl	8012af4 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	9b01      	ldr	r3, [sp, #4]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d58:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d62:	f7fd fa75 	bl	8001250 <HAL_GetTick>
 8003d66:	4606      	mov	r6, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d70:	d11a      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7fd fa6d 	bl	8001250 <HAL_GetTick>
 8003d76:	1b80      	subs	r0, r0, r6
 8003d78:	2864      	cmp	r0, #100	; 0x64
 8003d7a:	d9f5      	bls.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      {
        return HAL_TIMEOUT;
 8003d7c:	2003      	movs	r0, #3
 8003d7e:	e213      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      pllsaiused = 1;
 8003d80:	2501      	movs	r5, #1
 8003d82:	e733      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xb0>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003d84:	219e      	movs	r1, #158	; 0x9e
 8003d86:	4805      	ldr	r0, [pc, #20]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d88:	f00e feb4 	bl	8012af4 <assert_failed>
 8003d8c:	e73f      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      plli2sused = 1;
 8003d8e:	2701      	movs	r7, #1
 8003d90:	e74b      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003d92:	bf00      	nop
 8003d94:	01fffff9 	.word	0x01fffff9
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	08017d24 	.word	0x08017d24
 8003da0:	00020300 	.word	0x00020300
 8003da4:	40007000 	.word	0x40007000
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003da8:	4ba9      	ldr	r3, [pc, #676]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003db0:	d016      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8003db2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003db4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d011      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dbc:	4ba4      	ldr	r3, [pc, #656]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003dc6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003dca:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dcc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003dce:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003dd2:	6719      	str	r1, [r3, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dd4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	f013 0f01 	tst.w	r3, #1
 8003ddc:	f040 81e6 	bne.w	80041ac <HAL_RCCEx_PeriphCLKConfig+0x670>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003de2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003de6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003dea:	f000 81f1 	beq.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8003dee:	4a98      	ldr	r2, [pc, #608]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003df0:	6893      	ldr	r3, [r2, #8]
 8003df2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003df6:	6093      	str	r3, [r2, #8]
 8003df8:	4995      	ldr	r1, [pc, #596]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003dfa:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003dfc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003dfe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003e02:	4313      	orrs	r3, r2
 8003e04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	f013 0f10 	tst.w	r3, #16
 8003e0c:	d017      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8003e0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e10:	f112 437f 	adds.w	r3, r2, #4278190080	; 0xff000000
 8003e14:	bf18      	it	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2a00      	cmp	r2, #0
 8003e1a:	bf08      	it	eq
 8003e1c:	2300      	moveq	r3, #0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f040 81df 	bne.w	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e24:	4b8a      	ldr	r3, [pc, #552]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003e26:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003e32:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003e44:	d015      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e48:	f5b2 3380 	subs.w	r3, r2, #65536	; 0x10000
 8003e4c:	bf18      	it	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	bf08      	it	eq
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b11b      	cbz	r3, 8003e60 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003e58:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8003e5c:	f040 81c6 	bne.w	80041ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e60:	4a7b      	ldr	r2, [pc, #492]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003e62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e66:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e6a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003e78:	d015      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003e7a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003e7c:	f5b2 2380 	subs.w	r3, r2, #262144	; 0x40000
 8003e80:	bf18      	it	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2a00      	cmp	r2, #0
 8003e86:	bf08      	it	eq
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b11b      	cbz	r3, 8003e94 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003e8c:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8003e90:	f040 81b1 	bne.w	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e94:	4a6e      	ldr	r2, [pc, #440]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003e96:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e9a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003e9e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003eac:	d015      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003eae:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003eb0:	f5b2 1380 	subs.w	r3, r2, #1048576	; 0x100000
 8003eb4:	bf18      	it	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2a00      	cmp	r2, #0
 8003eba:	bf08      	it	eq
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b11b      	cbz	r3, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8003ec0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003ec4:	f040 819d 	bne.w	8004202 <HAL_RCCEx_PeriphCLKConfig+0x6c6>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec8:	4a61      	ldr	r2, [pc, #388]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003eca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ece:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ed2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ee0:	d015      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003ee2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003ee4:	f5b2 0380 	subs.w	r3, r2, #4194304	; 0x400000
 8003ee8:	bf18      	it	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	2a00      	cmp	r2, #0
 8003eee:	bf08      	it	eq
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b11b      	cbz	r3, 8003efc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003ef4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003ef8:	f040 8189 	bne.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x6d2>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003efc:	4a54      	ldr	r2, [pc, #336]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003efe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f02:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003f06:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f14:	d010      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003f16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	bf18      	it	ne
 8003f1c:	2b01      	cmpne	r3, #1
 8003f1e:	d902      	bls.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	f040 817a 	bne.w	800421a <HAL_RCCEx_PeriphCLKConfig+0x6de>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f26:	4a4a      	ldr	r2, [pc, #296]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f28:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f2c:	f023 0303 	bic.w	r3, r3, #3
 8003f30:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003f32:	430b      	orrs	r3, r1
 8003f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f3e:	d015      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003f40:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003f42:	1f13      	subs	r3, r2, #4
 8003f44:	bf18      	it	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2a00      	cmp	r2, #0
 8003f4a:	bf08      	it	eq
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b123      	cbz	r3, 8003f5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8003f50:	2a0c      	cmp	r2, #12
 8003f52:	d002      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8003f54:	2a08      	cmp	r2, #8
 8003f56:	f040 8166 	bne.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0x6ea>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f5a:	4a3d      	ldr	r2, [pc, #244]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f5c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f60:	f023 030c 	bic.w	r3, r3, #12
 8003f64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003f66:	430b      	orrs	r3, r1
 8003f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f72:	d016      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x466>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003f74:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003f76:	f1b2 0310 	subs.w	r3, r2, #16
 8003f7a:	bf18      	it	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	bf08      	it	eq
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b123      	cbz	r3, 8003f90 <HAL_RCCEx_PeriphCLKConfig+0x454>
 8003f86:	2a30      	cmp	r2, #48	; 0x30
 8003f88:	d002      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x454>
 8003f8a:	2a20      	cmp	r2, #32
 8003f8c:	f040 8151 	bne.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x6f6>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f90:	4a2f      	ldr	r2, [pc, #188]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f96:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f9a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003faa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003fac:	f1b2 0340 	subs.w	r3, r2, #64	; 0x40
 8003fb0:	bf18      	it	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	2a00      	cmp	r2, #0
 8003fb6:	bf08      	it	eq
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b123      	cbz	r3, 8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003fbc:	2ac0      	cmp	r2, #192	; 0xc0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003fc0:	2a80      	cmp	r2, #128	; 0x80
 8003fc2:	f040 813c 	bne.w	800423e <HAL_RCCEx_PeriphCLKConfig+0x702>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc6:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003fc8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003fcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fd0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003fde:	d018      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003fe0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003fe2:	f5b2 7380 	subs.w	r3, r2, #256	; 0x100
 8003fe6:	bf18      	it	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2a00      	cmp	r2, #0
 8003fec:	bf08      	it	eq
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b133      	cbz	r3, 8004000 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8003ff2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003ff6:	d003      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8003ff8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003ffc:	f040 8125 	bne.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x70e>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004002:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800400c:	430b      	orrs	r3, r1
 800400e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004018:	d01c      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x518>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800401a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800401c:	f5b2 6380 	subs.w	r3, r2, #1024	; 0x400
 8004020:	bf18      	it	ne
 8004022:	2301      	movne	r3, #1
 8004024:	2a00      	cmp	r2, #0
 8004026:	bf08      	it	eq
 8004028:	2300      	moveq	r3, #0
 800402a:	b133      	cbz	r3, 800403a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800402c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004030:	d003      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004032:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004036:	f040 810e 	bne.w	8004256 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800403a:	4a05      	ldr	r2, [pc, #20]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800403c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004040:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004044:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004046:	430b      	orrs	r3, r1
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800404c:	e002      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800405a:	d018      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x552>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800405c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800405e:	f5b2 5380 	subs.w	r3, r2, #4096	; 0x1000
 8004062:	bf18      	it	ne
 8004064:	2301      	movne	r3, #1
 8004066:	2a00      	cmp	r2, #0
 8004068:	bf08      	it	eq
 800406a:	2300      	moveq	r3, #0
 800406c:	b133      	cbz	r3, 800407c <HAL_RCCEx_PeriphCLKConfig+0x540>
 800406e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8004072:	d003      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x540>
 8004074:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004078:	f040 80f3 	bne.w	8004262 <HAL_RCCEx_PeriphCLKConfig+0x726>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800407c:	4a96      	ldr	r2, [pc, #600]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800407e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004082:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004086:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004088:	430b      	orrs	r3, r1
 800408a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004094:	d018      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004096:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004098:	f5b2 4380 	subs.w	r3, r2, #16384	; 0x4000
 800409c:	bf18      	it	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2a00      	cmp	r2, #0
 80040a2:	bf08      	it	eq
 80040a4:	2300      	moveq	r3, #0
 80040a6:	b133      	cbz	r3, 80040b6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80040a8:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80040ac:	d003      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80040ae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80040b2:	f040 80dc 	bne.w	800426e <HAL_RCCEx_PeriphCLKConfig+0x732>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040b6:	4a88      	ldr	r2, [pc, #544]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 80040b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80040bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80040c0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80040c2:	430b      	orrs	r3, r1
 80040c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80040ce:	d00f      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80040d0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80040d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d6:	bf18      	it	ne
 80040d8:	2b00      	cmpne	r3, #0
 80040da:	f040 80ce 	bne.w	800427a <HAL_RCCEx_PeriphCLKConfig+0x73e>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040de:	4a7e      	ldr	r2, [pc, #504]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 80040e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80040e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040e8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80040ea:	430b      	orrs	r3, r1
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80040f6:	d014      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80040f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80040fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fe:	bf18      	it	ne
 8004100:	2b00      	cmpne	r3, #0
 8004102:	f040 80c0 	bne.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0x74a>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004106:	4a74      	ldr	r2, [pc, #464]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8004108:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800410c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004110:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004112:	430b      	orrs	r3, r1
 8004114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004118:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800411a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800411e:	f000 80b8 	beq.w	8004292 <HAL_RCCEx_PeriphCLKConfig+0x756>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	f013 0f08 	tst.w	r3, #8
 8004128:	d000      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    pllsaiused = 1;
 800412a:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800412c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004130:	d018      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004132:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004134:	f112 437f 	adds.w	r3, r2, #4278190080	; 0xff000000
 8004138:	bf18      	it	ne
 800413a:	2301      	movne	r3, #1
 800413c:	2a00      	cmp	r2, #0
 800413e:	bf08      	it	eq
 8004140:	2300      	moveq	r3, #0
 8004142:	b133      	cbz	r3, 8004152 <HAL_RCCEx_PeriphCLKConfig+0x616>
 8004144:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8004148:	d003      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x616>
 800414a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800414e:	f040 80a2 	bne.w	8004296 <HAL_RCCEx_PeriphCLKConfig+0x75a>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004152:	4a61      	ldr	r2, [pc, #388]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8004154:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004158:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800415c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800415e:	430b      	orrs	r3, r1
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800416a:	d011      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x654>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800416c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004174:	bf18      	it	ne
 8004176:	2b00      	cmpne	r3, #0
 8004178:	f040 8093 	bne.w	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x766>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800417c:	4a56      	ldr	r2, [pc, #344]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800417e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004186:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800418a:	430b      	orrs	r3, r1
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004190:	2f00      	cmp	r7, #0
 8004192:	f040 808c 	bne.w	80042ae <HAL_RCCEx_PeriphCLKConfig+0x772>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800419c:	f000 8087 	beq.w	80042ae <HAL_RCCEx_PeriphCLKConfig+0x772>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041a0:	2d00      	cmp	r5, #0
 80041a2:	f040 816f 	bne.w	8004484 <HAL_RCCEx_PeriphCLKConfig+0x948>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80041a6:	2000      	movs	r0, #0
}
 80041a8:	b003      	add	sp, #12
 80041aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 80041ac:	f7fd f850 	bl	8001250 <HAL_GetTick>
 80041b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b2:	4b49      	ldr	r3, [pc, #292]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	f013 0f02 	tst.w	r3, #2
 80041ba:	f47f ae11 	bne.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041be:	f7fd f847 	bl	8001250 <HAL_GetTick>
 80041c2:	1b80      	subs	r0, r0, r6
 80041c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80041c8:	4298      	cmp	r0, r3
 80041ca:	d9f2      	bls.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
            return HAL_TIMEOUT;
 80041cc:	2003      	movs	r0, #3
 80041ce:	e7eb      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d0:	4841      	ldr	r0, [pc, #260]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 80041d2:	6882      	ldr	r2, [r0, #8]
 80041d4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80041d8:	4940      	ldr	r1, [pc, #256]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x7a0>)
 80041da:	4019      	ands	r1, r3
 80041dc:	430a      	orrs	r2, r1
 80041de:	6082      	str	r2, [r0, #8]
 80041e0:	e60a      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80041e2:	21f3      	movs	r1, #243	; 0xf3
 80041e4:	483e      	ldr	r0, [pc, #248]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 80041e6:	f00e fc85 	bl	8012af4 <assert_failed>
 80041ea:	e61b      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80041ec:	21fd      	movs	r1, #253	; 0xfd
 80041ee:	483c      	ldr	r0, [pc, #240]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 80041f0:	f00e fc80 	bl	8012af4 <assert_failed>
 80041f4:	e634      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x324>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80041f6:	f240 1107 	movw	r1, #263	; 0x107
 80041fa:	4839      	ldr	r0, [pc, #228]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 80041fc:	f00e fc7a 	bl	8012af4 <assert_failed>
 8004200:	e648      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x358>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004202:	f240 1111 	movw	r1, #273	; 0x111
 8004206:	4836      	ldr	r0, [pc, #216]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 8004208:	f00e fc74 	bl	8012af4 <assert_failed>
 800420c:	e65c      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800420e:	f240 111b 	movw	r1, #283	; 0x11b
 8004212:	4833      	ldr	r0, [pc, #204]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 8004214:	f00e fc6e 	bl	8012af4 <assert_failed>
 8004218:	e670      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800421a:	f240 1125 	movw	r1, #293	; 0x125
 800421e:	4830      	ldr	r0, [pc, #192]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 8004220:	f00e fc68 	bl	8012af4 <assert_failed>
 8004224:	e67f      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004226:	f240 112f 	movw	r1, #303	; 0x12f
 800422a:	482d      	ldr	r0, [pc, #180]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 800422c:	f00e fc62 	bl	8012af4 <assert_failed>
 8004230:	e693      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004232:	f240 1139 	movw	r1, #313	; 0x139
 8004236:	482a      	ldr	r0, [pc, #168]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 8004238:	f00e fc5c 	bl	8012af4 <assert_failed>
 800423c:	e6a8      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800423e:	f240 1143 	movw	r1, #323	; 0x143
 8004242:	4827      	ldr	r0, [pc, #156]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 8004244:	f00e fc56 	bl	8012af4 <assert_failed>
 8004248:	e6bd      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800424a:	f240 114d 	movw	r1, #333	; 0x14d
 800424e:	4824      	ldr	r0, [pc, #144]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 8004250:	f00e fc50 	bl	8012af4 <assert_failed>
 8004254:	e6d4      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004256:	f240 1157 	movw	r1, #343	; 0x157
 800425a:	4821      	ldr	r0, [pc, #132]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 800425c:	f00e fc4a 	bl	8012af4 <assert_failed>
 8004260:	e6eb      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004262:	f240 1161 	movw	r1, #353	; 0x161
 8004266:	481e      	ldr	r0, [pc, #120]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 8004268:	f00e fc44 	bl	8012af4 <assert_failed>
 800426c:	e706      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x540>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800426e:	f240 116b 	movw	r1, #363	; 0x16b
 8004272:	481b      	ldr	r0, [pc, #108]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 8004274:	f00e fc3e 	bl	8012af4 <assert_failed>
 8004278:	e71d      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800427a:	f240 1175 	movw	r1, #373	; 0x175
 800427e:	4818      	ldr	r0, [pc, #96]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 8004280:	f00e fc38 	bl	8012af4 <assert_failed>
 8004284:	e72b      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004286:	f240 117f 	movw	r1, #383	; 0x17f
 800428a:	4815      	ldr	r0, [pc, #84]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 800428c:	f00e fc32 	bl	8012af4 <assert_failed>
 8004290:	e739      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      pllsaiused = 1;
 8004292:	2501      	movs	r5, #1
 8004294:	e745      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004296:	f240 1197 	movw	r1, #407	; 0x197
 800429a:	4811      	ldr	r0, [pc, #68]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 800429c:	f00e fc2a 	bl	8012af4 <assert_failed>
 80042a0:	e757      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x616>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80042a2:	f240 11a1 	movw	r1, #417	; 0x1a1
 80042a6:	480e      	ldr	r0, [pc, #56]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>)
 80042a8:	f00e fc24 	bl	8012af4 <assert_failed>
 80042ac:	e766      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x640>
    __HAL_RCC_PLLI2S_DISABLE();
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 80042b0:	6813      	ldr	r3, [r2, #0]
 80042b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042b6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80042b8:	f7fc ffca 	bl	8001250 <HAL_GetTick>
 80042bc:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80042c6:	d00d      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042c8:	f7fc ffc2 	bl	8001250 <HAL_GetTick>
 80042cc:	1b80      	subs	r0, r0, r6
 80042ce:	2864      	cmp	r0, #100	; 0x64
 80042d0:	d9f5      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x782>
        return HAL_TIMEOUT;
 80042d2:	2003      	movs	r0, #3
 80042d4:	e768      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	0ffffcff 	.word	0x0ffffcff
 80042e0:	08017d24 	.word	0x08017d24
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80042e4:	6863      	ldr	r3, [r4, #4]
 80042e6:	3b32      	subs	r3, #50	; 0x32
 80042e8:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80042ec:	f200 809a 	bhi.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f013 0f01 	tst.w	r3, #1
 80042f6:	d018      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80042f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042fa:	b9b3      	cbnz	r3, 800432a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80042fc:	68a3      	ldr	r3, [r4, #8]
 80042fe:	3b02      	subs	r3, #2
 8004300:	2b05      	cmp	r3, #5
 8004302:	f200 8095 	bhi.w	8004430 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004306:	4ab6      	ldr	r2, [pc, #728]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004308:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800430c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004310:	6860      	ldr	r0, [r4, #4]
 8004312:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004316:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800431a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800431e:	430b      	orrs	r3, r1
 8004320:	68a1      	ldr	r1, [r4, #8]
 8004322:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004326:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004330:	d003      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004332:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004334:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004338:	d006      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800433a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800433e:	d026      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x852>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004346:	d122      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x852>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004348:	68e3      	ldr	r3, [r4, #12]
 800434a:	3b02      	subs	r3, #2
 800434c:	2b0d      	cmp	r3, #13
 800434e:	d875      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x900>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004352:	3b01      	subs	r3, #1
 8004354:	2b1f      	cmp	r3, #31
 8004356:	d877      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004358:	4aa1      	ldr	r2, [pc, #644]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800435a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800435e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004362:	6860      	ldr	r0, [r4, #4]
 8004364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004368:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800436c:	68e0      	ldr	r0, [r4, #12]
 800436e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004372:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004376:	430b      	orrs	r3, r1
 8004378:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800437c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004380:	f023 031f 	bic.w	r3, r3, #31
 8004384:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004386:	3901      	subs	r1, #1
 8004388:	430b      	orrs	r3, r1
 800438a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004394:	d014      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x884>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d85b      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x918>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800439c:	4a90      	ldr	r2, [pc, #576]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800439e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043a2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043a6:	6866      	ldr	r6, [r4, #4]
 80043a8:	6923      	ldr	r3, [r4, #16]
 80043aa:	041b      	lsls	r3, r3, #16
 80043ac:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80043b0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80043b4:	4303      	orrs	r3, r0
 80043b6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80043ba:	430b      	orrs	r3, r1
 80043bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80043c6:	d018      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x8be>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80043c8:	6923      	ldr	r3, [r4, #16]
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d848      	bhi.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x924>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80043ce:	68a3      	ldr	r3, [r4, #8]
 80043d0:	3b02      	subs	r3, #2
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d84a      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x930>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80043d6:	68e3      	ldr	r3, [r4, #12]
 80043d8:	3b02      	subs	r3, #2
 80043da:	2b0d      	cmp	r3, #13
 80043dc:	d84c      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043de:	6862      	ldr	r2, [r4, #4]
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80043e8:	68e2      	ldr	r2, [r4, #12]
 80043ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80043ee:	68a2      	ldr	r2, [r4, #8]
 80043f0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80043f4:	4a7a      	ldr	r2, [pc, #488]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80043fa:	4a79      	ldr	r2, [pc, #484]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043fc:	6813      	ldr	r3, [r2, #0]
 80043fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004402:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004404:	f7fc ff24 	bl	8001250 <HAL_GetTick>
 8004408:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800440a:	4b75      	ldr	r3, [pc, #468]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004412:	f47f aec5 	bne.w	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004416:	f7fc ff1b 	bl	8001250 <HAL_GetTick>
 800441a:	1b80      	subs	r0, r0, r6
 800441c:	2864      	cmp	r0, #100	; 0x64
 800441e:	d9f4      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
        return HAL_TIMEOUT;
 8004420:	2003      	movs	r0, #3
 8004422:	e6c1      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004424:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004428:	486e      	ldr	r0, [pc, #440]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 800442a:	f00e fb63 	bl	8012af4 <assert_failed>
 800442e:	e75f      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004430:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004434:	486b      	ldr	r0, [pc, #428]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8004436:	f00e fb5d 	bl	8012af4 <assert_failed>
 800443a:	e764      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800443c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004440:	4868      	ldr	r0, [pc, #416]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8004442:	f00e fb57 	bl	8012af4 <assert_failed>
 8004446:	e783      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x814>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004448:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800444c:	4865      	ldr	r0, [pc, #404]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 800444e:	f00e fb51 	bl	8012af4 <assert_failed>
 8004452:	e781      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004454:	f240 2107 	movw	r1, #519	; 0x207
 8004458:	4862      	ldr	r0, [pc, #392]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 800445a:	f00e fb4b 	bl	8012af4 <assert_failed>
 800445e:	e79d      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x860>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004460:	f240 2116 	movw	r1, #534	; 0x216
 8004464:	485f      	ldr	r0, [pc, #380]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8004466:	f00e fb45 	bl	8012af4 <assert_failed>
 800446a:	e7b0      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x892>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800446c:	f240 2117 	movw	r1, #535	; 0x217
 8004470:	485c      	ldr	r0, [pc, #368]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8004472:	f00e fb3f 	bl	8012af4 <assert_failed>
 8004476:	e7ae      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004478:	f44f 7106 	mov.w	r1, #536	; 0x218
 800447c:	4859      	ldr	r0, [pc, #356]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 800447e:	f00e fb39 	bl	8012af4 <assert_failed>
 8004482:	e7ac      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    __HAL_RCC_PLLSAI_DISABLE();
 8004484:	4a56      	ldr	r2, [pc, #344]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004486:	6813      	ldr	r3, [r2, #0]
 8004488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800448c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800448e:	f7fc fedf 	bl	8001250 <HAL_GetTick>
 8004492:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004494:	4b52      	ldr	r3, [pc, #328]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800449c:	d006      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800449e:	f7fc fed7 	bl	8001250 <HAL_GetTick>
 80044a2:	1b40      	subs	r0, r0, r5
 80044a4:	2864      	cmp	r0, #100	; 0x64
 80044a6:	d9f5      	bls.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x958>
        return HAL_TIMEOUT;
 80044a8:	2003      	movs	r0, #3
 80044aa:	e67d      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80044ac:	6963      	ldr	r3, [r4, #20]
 80044ae:	3b32      	subs	r3, #50	; 0x32
 80044b0:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80044b4:	f200 8081 	bhi.w	80045ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80044be:	d001      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80044c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80044c2:	b122      	cbz	r2, 80044ce <HAL_RCCEx_PeriphCLKConfig+0x992>
 80044c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80044c8:	d025      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x9da>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044cc:	bb1b      	cbnz	r3, 8004516 <HAL_RCCEx_PeriphCLKConfig+0x9da>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80044ce:	69a3      	ldr	r3, [r4, #24]
 80044d0:	3b02      	subs	r3, #2
 80044d2:	2b0d      	cmp	r3, #13
 80044d4:	d877      	bhi.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80044d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	2b1f      	cmp	r3, #31
 80044dc:	d879      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044de:	4a40      	ldr	r2, [pc, #256]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044e4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044e8:	6960      	ldr	r0, [r4, #20]
 80044ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044ee:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80044f2:	69a0      	ldr	r0, [r4, #24]
 80044f4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80044f8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80044fc:	430b      	orrs	r3, r1
 80044fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004502:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004506:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800450a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800450c:	3901      	subs	r1, #1
 800450e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004512:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800451c:	d003      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 800451e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004524:	d060      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	f013 0f08 	tst.w	r3, #8
 800452c:	d031      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800452e:	69e3      	ldr	r3, [r4, #28]
 8004530:	3b02      	subs	r3, #2
 8004532:	2b05      	cmp	r3, #5
 8004534:	d874      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xae4>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004536:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004538:	f5b2 3380 	subs.w	r3, r2, #65536	; 0x10000
 800453c:	bf18      	it	ne
 800453e:	2301      	movne	r3, #1
 8004540:	2a00      	cmp	r2, #0
 8004542:	bf08      	it	eq
 8004544:	2300      	moveq	r3, #0
 8004546:	b153      	cbz	r3, 800455e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8004548:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800454c:	d007      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800454e:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8004552:	d004      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8004554:	f240 2172 	movw	r1, #626	; 0x272
 8004558:	4822      	ldr	r0, [pc, #136]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 800455a:	f00e facb 	bl	8012af4 <assert_failed>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800455e:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004560:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004564:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004568:	6960      	ldr	r0, [r4, #20]
 800456a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800456e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004572:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004576:	430b      	orrs	r3, r1
 8004578:	69e1      	ldr	r1, [r4, #28]
 800457a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800457e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004582:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004586:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800458a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800458c:	430b      	orrs	r3, r1
 800458e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004592:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004594:	6813      	ldr	r3, [r2, #0]
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800459c:	f7fc fe58 	bl	8001250 <HAL_GetTick>
 80045a0:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80045aa:	d13f      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045ac:	f7fc fe50 	bl	8001250 <HAL_GetTick>
 80045b0:	1b00      	subs	r0, r0, r4
 80045b2:	2864      	cmp	r0, #100	; 0x64
 80045b4:	d9f5      	bls.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
        return HAL_TIMEOUT;
 80045b6:	2003      	movs	r0, #3
 80045b8:	e5f6      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80045ba:	f240 2146 	movw	r1, #582	; 0x246
 80045be:	4809      	ldr	r0, [pc, #36]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 80045c0:	f00e fa98 	bl	8012af4 <assert_failed>
 80045c4:	e778      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80045c6:	f240 214d 	movw	r1, #589	; 0x24d
 80045ca:	4806      	ldr	r0, [pc, #24]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 80045cc:	f00e fa92 	bl	8012af4 <assert_failed>
 80045d0:	e781      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80045d2:	f240 214f 	movw	r1, #591	; 0x24f
 80045d6:	4803      	ldr	r0, [pc, #12]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 80045d8:	f00e fa8c 	bl	8012af4 <assert_failed>
 80045dc:	e77f      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	08017d24 	.word	0x08017d24
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80045e8:	6a23      	ldr	r3, [r4, #32]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d812      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ee:	4a10      	ldr	r2, [pc, #64]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80045f0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045f4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045f8:	6965      	ldr	r5, [r4, #20]
 80045fa:	6a23      	ldr	r3, [r4, #32]
 80045fc:	041b      	lsls	r3, r3, #16
 80045fe:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004602:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004606:	4303      	orrs	r3, r0
 8004608:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800460c:	430b      	orrs	r3, r1
 800460e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004612:	e788      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004614:	f240 2162 	movw	r1, #610	; 0x262
 8004618:	4806      	ldr	r0, [pc, #24]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800461a:	f00e fa6b 	bl	8012af4 <assert_failed>
 800461e:	e7e6      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xab2>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004620:	f240 2171 	movw	r1, #625	; 0x271
 8004624:	4803      	ldr	r0, [pc, #12]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004626:	f00e fa65 	bl	8012af4 <assert_failed>
 800462a:	e784      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  return HAL_OK;
 800462c:	2000      	movs	r0, #0
 800462e:	e5bb      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004630:	40023800 	.word	0x40023800
 8004634:	08017d24 	.word	0x08017d24

08004638 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8004638:	4b56      	ldr	r3, [pc, #344]	; (8004794 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 800463a:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800463c:	4b56      	ldr	r3, [pc, #344]	; (8004798 <HAL_RCCEx_GetPeriphCLKConfig+0x160>)
 800463e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004642:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8004646:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004648:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800464c:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8004650:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004652:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004656:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800465a:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800465c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004660:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8004664:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8004666:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800466a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800466e:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004670:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004674:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8004678:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800467a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800467e:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8004682:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004684:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004688:	f3c2 7202 	ubfx	r2, r2, #28, #3
 800468c:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800468e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004692:	f002 021f 	and.w	r2, r2, #31
 8004696:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8004698:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800469c:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80046a0:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80046a2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046a6:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80046aa:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80046ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046b0:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80046b4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80046b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046ba:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80046be:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80046c6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80046c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046cc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80046d0:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80046d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046d6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80046da:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80046dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046e0:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80046e4:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80046e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046ea:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80046ee:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80046f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046f4:	f002 0203 	and.w	r2, r2, #3
 80046f8:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80046fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046fe:	f002 020c 	and.w	r2, r2, #12
 8004702:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8004704:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004708:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800470c:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800470e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004712:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004716:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8004718:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800471c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004720:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8004722:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004726:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800472a:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800472c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004730:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8004734:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8004736:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800473a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800473e:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004740:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004744:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8004748:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800474a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800474e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8004752:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8004754:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004758:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800475c:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800475e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004762:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004766:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800476a:	6899      	ldr	r1, [r3, #8]
 800476c:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004772:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004776:	430a      	orrs	r2, r1
 8004778:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800477a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004782:	d003      	beq.n	800478c <HAL_RCCEx_GetPeriphCLKConfig+0x154>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8004784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004788:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 800478a:	4770      	bx	lr
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800478c:	2300      	movs	r3, #0
 800478e:	6383      	str	r3, [r0, #56]	; 0x38
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	00fffff1 	.word	0x00fffff1
 8004798:	40023800 	.word	0x40023800

0800479c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800479c:	b410      	push	{r4}
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800479e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80047a2:	d007      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  uint32_t frequency = 0;
 80047a4:	2300      	movs	r3, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80047a6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80047aa:	d065      	beq.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      }
    }
  }

  return frequency;
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047b2:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 80047b4:	4b61      	ldr	r3, [pc, #388]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80047b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80047ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 80047be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c2:	d02e      	beq.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 80047c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047c8:	d054      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80047ca:	b10b      	cbz	r3, 80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
  uint32_t frequency = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e7ea      	b.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047d0:	4b5a      	ldr	r3, [pc, #360]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80047d8:	d11b      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047da:	4b58      	ldr	r3, [pc, #352]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80047e2:	4b57      	ldr	r3, [pc, #348]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80047e4:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80047e8:	4a54      	ldr	r2, [pc, #336]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80047ea:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80047ee:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80047f2:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 80047f6:	f3c4 1488 	ubfx	r4, r4, #6, #9
 80047fa:	fb03 f304 	mul.w	r3, r3, r4
 80047fe:	fbb3 f3f1 	udiv	r3, r3, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004802:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004806:	f3c2 2204 	ubfx	r2, r2, #8, #5
 800480a:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 800480c:	fbb3 f3f2 	udiv	r3, r3, r2
        break;
 8004810:	e7c9      	b.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004812:	4b4a      	ldr	r3, [pc, #296]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800481a:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800481c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004820:	e7e2      	b.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004822:	4b46      	ldr	r3, [pc, #280]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800482a:	d11b      	bne.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800482c:	4b43      	ldr	r3, [pc, #268]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004834:	4b42      	ldr	r3, [pc, #264]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8004836:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800483a:	4a40      	ldr	r2, [pc, #256]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800483c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8004840:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004844:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 8004848:	f3c4 1488 	ubfx	r4, r4, #6, #9
 800484c:	fb03 f304 	mul.w	r3, r3, r4
 8004850:	fbb3 f3f1 	udiv	r3, r3, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004854:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004858:	f002 021f 	and.w	r2, r2, #31
 800485c:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 800485e:	fbb3 f3f2 	udiv	r3, r3, r2
        break;
 8004862:	e7a0      	b.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004864:	4b35      	ldr	r3, [pc, #212]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800486c:	4b35      	ldr	r3, [pc, #212]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800486e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004872:	e7e2      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004874:	4b34      	ldr	r3, [pc, #208]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8004876:	e796      	b.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 8004878:	4a30      	ldr	r2, [pc, #192]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800487a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800487e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8004882:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004886:	d02d      	beq.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004888:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800488c:	d053      	beq.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800488e:	2a00      	cmp	r2, #0
 8004890:	d18c      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004892:	4b2a      	ldr	r3, [pc, #168]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800489a:	d11b      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800489c:	4b27      	ldr	r3, [pc, #156]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80048a4:	4b26      	ldr	r3, [pc, #152]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80048a6:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80048aa:	4a24      	ldr	r2, [pc, #144]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80048ac:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80048b0:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80048b4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80048b8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80048bc:	fb03 f301 	mul.w	r3, r3, r1
 80048c0:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80048c4:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80048c8:	f3c0 2004 	ubfx	r0, r0, #8, #5
 80048cc:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg);
 80048ce:	fbb3 f3f0 	udiv	r3, r3, r0
        break;
 80048d2:	e76b      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80048d4:	4b19      	ldr	r3, [pc, #100]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80048de:	fbb3 f3f2 	udiv	r3, r3, r2
 80048e2:	e7e2      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048e4:	4b15      	ldr	r3, [pc, #84]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80048ec:	d11b      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80048f8:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80048fc:	4a0f      	ldr	r2, [pc, #60]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80048fe:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8004902:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004906:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 800490a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800490e:	fb03 f301 	mul.w	r3, r3, r1
 8004912:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004916:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800491a:	f000 001f 	and.w	r0, r0, #31
 800491e:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg);
 8004920:	fbb3 f3f0 	udiv	r3, r3, r0
        break;
 8004924:	e742      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8004930:	fbb3 f3f2 	udiv	r3, r3, r2
 8004934:	e7e2      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
  return frequency;
 8004938:	e738      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	00f42400 	.word	0x00f42400
 8004944:	017d7840 	.word	0x017d7840
 8004948:	00bb8000 	.word	0x00bb8000

0800494c <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
 800494c:	2901      	cmp	r1, #1
 800494e:	d00a      	beq.n	8004966 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004950:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004952:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004954:	2a08      	cmp	r2, #8
 8004956:	d008      	beq.n	800496a <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004958:	6842      	ldr	r2, [r0, #4]
 800495a:	3a02      	subs	r2, #2
 800495c:	2a01      	cmp	r2, #1
 800495e:	d90c      	bls.n	800497a <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8004960:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8004964:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 8004966:	2309      	movs	r3, #9
 8004968:	e7f3      	b.n	8004952 <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800496a:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800496c:	2a01      	cmp	r2, #1
 800496e:	bf18      	it	ne
 8004970:	2a03      	cmpne	r2, #3
 8004972:	d1f1      	bne.n	8004958 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 8004974:	f043 0310 	orr.w	r3, r3, #16
 8004978:	e7ee      	b.n	8004958 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800497a:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 800497e:	4770      	bx	lr

08004980 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004980:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <SAI_Disable+0x3c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0e      	ldr	r2, [pc, #56]	; (80049c0 <SAI_Disable+0x40>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0b1b      	lsrs	r3, r3, #12
 800498c:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800498e:	6801      	ldr	r1, [r0, #0]
 8004990:	680a      	ldr	r2, [r1, #0]
 8004992:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004996:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004998:	1e5a      	subs	r2, r3, #1
 800499a:	b13b      	cbz	r3, 80049ac <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800499c:	6803      	ldr	r3, [r0, #0]
 800499e:	6819      	ldr	r1, [r3, #0]
    if (count-- == 0)
 80049a0:	4613      	mov	r3, r2
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80049a2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80049a6:	d1f7      	bne.n	8004998 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80049a8:	2000      	movs	r0, #0

  return status;
}
 80049aa:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80049ac:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80049b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80049b8:	2003      	movs	r0, #3
      break;
 80049ba:	4770      	bx	lr
 80049bc:	20000088 	.word	0x20000088
 80049c0:	95cbec1b 	.word	0x95cbec1b

080049c4 <HAL_SAI_Init>:
  if(hsai == NULL)
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f000 827d 	beq.w	8004ec4 <HAL_SAI_Init+0x500>
{
 80049ca:	b570      	push	{r4, r5, r6, lr}
 80049cc:	4604      	mov	r4, r0
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 80049ce:	6803      	ldr	r3, [r0, #0]
 80049d0:	49b7      	ldr	r1, [pc, #732]	; (8004cb0 <HAL_SAI_Init+0x2ec>)
 80049d2:	4ab8      	ldr	r2, [pc, #736]	; (8004cb4 <HAL_SAI_Init+0x2f0>)
 80049d4:	428b      	cmp	r3, r1
 80049d6:	bf18      	it	ne
 80049d8:	4293      	cmpne	r3, r2
 80049da:	d00b      	beq.n	80049f4 <HAL_SAI_Init+0x30>
 80049dc:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d007      	beq.n	80049f4 <HAL_SAI_Init+0x30>
 80049e4:	3220      	adds	r2, #32
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_SAI_Init+0x30>
 80049ea:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80049ee:	48b2      	ldr	r0, [pc, #712]	; (8004cb8 <HAL_SAI_Init+0x2f4>)
 80049f0:	f00e f880 	bl	8012af4 <assert_failed>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 80049f4:	69e3      	ldr	r3, [r4, #28]
 80049f6:	49b1      	ldr	r1, [pc, #708]	; (8004cbc <HAL_SAI_Init+0x2f8>)
 80049f8:	4ab1      	ldr	r2, [pc, #708]	; (8004cc0 <HAL_SAI_Init+0x2fc>)
 80049fa:	428b      	cmp	r3, r1
 80049fc:	bf18      	it	ne
 80049fe:	4293      	cmpne	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <HAL_SAI_Init+0x76>
 8004a02:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d017      	beq.n	8004a3a <HAL_SAI_Init+0x76>
 8004a0a:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <HAL_SAI_Init+0x76>
 8004a12:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004a16:	d010      	beq.n	8004a3a <HAL_SAI_Init+0x76>
 8004a18:	f245 6222 	movw	r2, #22050	; 0x5622
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00c      	beq.n	8004a3a <HAL_SAI_Init+0x76>
 8004a20:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004a24:	d009      	beq.n	8004a3a <HAL_SAI_Init+0x76>
 8004a26:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d005      	beq.n	8004a3a <HAL_SAI_Init+0x76>
 8004a2e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004a32:	d002      	beq.n	8004a3a <HAL_SAI_Init+0x76>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 818f 	bne.w	8004d58 <HAL_SAI_Init+0x394>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 8004a3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a3c:	f1b2 0308 	subs.w	r3, r2, #8
 8004a40:	bf18      	it	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	2a00      	cmp	r2, #0
 8004a46:	bf08      	it	eq
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b113      	cbz	r3, 8004a52 <HAL_SAI_Init+0x8e>
 8004a4c:	2a04      	cmp	r2, #4
 8004a4e:	f040 8189 	bne.w	8004d64 <HAL_SAI_Init+0x3a0>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	f200 818b 	bhi.w	8004d70 <HAL_SAI_Init+0x3ac>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 8004a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	bf18      	it	ne
 8004a60:	2b60      	cmpne	r3, #96	; 0x60
 8004a62:	d008      	beq.n	8004a76 <HAL_SAI_Init+0xb2>
 8004a64:	2b80      	cmp	r3, #128	; 0x80
 8004a66:	d006      	beq.n	8004a76 <HAL_SAI_Init+0xb2>
 8004a68:	2ba0      	cmp	r3, #160	; 0xa0
 8004a6a:	d004      	beq.n	8004a76 <HAL_SAI_Init+0xb2>
 8004a6c:	2bc0      	cmp	r3, #192	; 0xc0
 8004a6e:	d002      	beq.n	8004a76 <HAL_SAI_Init+0xb2>
 8004a70:	2be0      	cmp	r3, #224	; 0xe0
 8004a72:	f040 8183 	bne.w	8004d7c <HAL_SAI_Init+0x3b8>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 8004a76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a78:	f5b2 7380 	subs.w	r3, r2, #256	; 0x100
 8004a7c:	bf18      	it	ne
 8004a7e:	2301      	movne	r3, #1
 8004a80:	2a00      	cmp	r2, #0
 8004a82:	bf08      	it	eq
 8004a84:	2300      	moveq	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 817e 	bne.w	8004d88 <HAL_SAI_Init+0x3c4>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 8004a8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	f200 8180 	bhi.w	8004d94 <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 8004a94:	68a3      	ldr	r3, [r4, #8]
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	f200 8182 	bhi.w	8004da0 <HAL_SAI_Init+0x3dc>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8004a9c:	6922      	ldr	r2, [r4, #16]
 8004a9e:	f5b2 5300 	subs.w	r3, r2, #8192	; 0x2000
 8004aa2:	bf18      	it	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	bf08      	it	eq
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 817d 	bne.w	8004dac <HAL_SAI_Init+0x3e8>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 8004ab2:	6962      	ldr	r2, [r4, #20]
 8004ab4:	f5b2 2300 	subs.w	r3, r2, #524288	; 0x80000
 8004ab8:	bf18      	it	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2a00      	cmp	r2, #0
 8004abe:	bf08      	it	eq
 8004ac0:	2300      	moveq	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 8178 	bne.w	8004db8 <HAL_SAI_Init+0x3f4>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 8004ac8:	69a3      	ldr	r3, [r4, #24]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	f200 817a 	bhi.w	8004dc4 <HAL_SAI_Init+0x400>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8004ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad6:	bf18      	it	ne
 8004ad8:	2b00      	cmpne	r3, #0
 8004ada:	f040 8179 	bne.w	8004dd0 <HAL_SAI_Init+0x40c>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 8004ade:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ae0:	f5b3 4200 	subs.w	r2, r3, #32768	; 0x8000
 8004ae4:	bf18      	it	ne
 8004ae6:	2201      	movne	r2, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf08      	it	eq
 8004aec:	2200      	moveq	r2, #0
 8004aee:	b14a      	cbz	r2, 8004b04 <HAL_SAI_Init+0x140>
 8004af0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004af4:	d006      	beq.n	8004b04 <HAL_SAI_Init+0x140>
 8004af6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004afa:	d003      	beq.n	8004b04 <HAL_SAI_Init+0x140>
 8004afc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004b00:	f040 816c 	bne.w	8004ddc <HAL_SAI_Init+0x418>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 8004b04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b06:	f1b2 0310 	subs.w	r3, r2, #16
 8004b0a:	bf18      	it	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	bf08      	it	eq
 8004b12:	2300      	moveq	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f040 8167 	bne.w	8004de8 <HAL_SAI_Init+0x424>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8004b1a:	68e3      	ldr	r3, [r4, #12]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	f200 8169 	bhi.w	8004df4 <HAL_SAI_Init+0x430>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8004b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b24:	3b08      	subs	r3, #8
 8004b26:	2bf8      	cmp	r3, #248	; 0xf8
 8004b28:	f200 816a 	bhi.w	8004e00 <HAL_SAI_Init+0x43c>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 8004b2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	2b7f      	cmp	r3, #127	; 0x7f
 8004b32:	f200 816b 	bhi.w	8004e0c <HAL_SAI_Init+0x448>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 8004b36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004b38:	f5b2 3380 	subs.w	r3, r2, #65536	; 0x10000
 8004b3c:	bf18      	it	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	bf08      	it	eq
 8004b44:	2300      	moveq	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 8166 	bne.w	8004e18 <HAL_SAI_Init+0x454>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 8004b4c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004b4e:	f5b2 3300 	subs.w	r3, r2, #131072	; 0x20000
 8004b52:	bf18      	it	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	bf08      	it	eq
 8004b5a:	2300      	moveq	r3, #0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 8161 	bne.w	8004e24 <HAL_SAI_Init+0x460>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 8004b62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004b64:	f5b2 2380 	subs.w	r3, r2, #262144	; 0x40000
 8004b68:	bf18      	it	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2a00      	cmp	r2, #0
 8004b6e:	bf08      	it	eq
 8004b70:	2300      	moveq	r3, #0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f040 815c 	bne.w	8004e30 <HAL_SAI_Init+0x46c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 8004b78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b7a:	2b18      	cmp	r3, #24
 8004b7c:	f200 815e 	bhi.w	8004e3c <HAL_SAI_Init+0x478>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 8004b80:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004b82:	f1b2 0340 	subs.w	r3, r2, #64	; 0x40
 8004b86:	bf18      	it	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2a00      	cmp	r2, #0
 8004b8c:	bf08      	it	eq
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b113      	cbz	r3, 8004b98 <HAL_SAI_Init+0x1d4>
 8004b92:	2a80      	cmp	r2, #128	; 0x80
 8004b94:	f040 8158 	bne.w	8004e48 <HAL_SAI_Init+0x484>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 8004b98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	2b0f      	cmp	r3, #15
 8004b9e:	f200 8159 	bhi.w	8004e54 <HAL_SAI_Init+0x490>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 8004ba2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba8:	f080 815a 	bcs.w	8004e60 <HAL_SAI_Init+0x49c>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8004bac:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 815b 	beq.w	8004e6c <HAL_SAI_Init+0x4a8>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7ff fedf 	bl	8004980 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	f000 8159 	beq.w	8004e7c <HAL_SAI_Init+0x4b8>
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	f000 8154 	beq.w	8004e78 <HAL_SAI_Init+0x4b4>
  uint32_t tmpregisterGCR = 0;
 8004bd0:	2200      	movs	r2, #0
  switch(hsai->Init.Synchro)
 8004bd2:	68a3      	ldr	r3, [r4, #8]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	f000 8153 	beq.w	8004e80 <HAL_SAI_Init+0x4bc>
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	f000 8153 	beq.w	8004e86 <HAL_SAI_Init+0x4c2>
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	f000 8155 	beq.w	8004e90 <HAL_SAI_Init+0x4cc>
  uint32_t syncen_bits = 0;
 8004be6:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	4831      	ldr	r0, [pc, #196]	; (8004cb0 <HAL_SAI_Init+0x2ec>)
 8004bec:	4931      	ldr	r1, [pc, #196]	; (8004cb4 <HAL_SAI_Init+0x2f0>)
 8004bee:	428b      	cmp	r3, r1
 8004bf0:	bf18      	it	ne
 8004bf2:	4283      	cmpne	r3, r0
 8004bf4:	f040 814f 	bne.w	8004e96 <HAL_SAI_Init+0x4d2>
    SAI1->GCR = tmpregisterGCR;
 8004bf8:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <HAL_SAI_Init+0x300>)
 8004bfa:	601a      	str	r2, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004bfc:	69e3      	ldr	r3, [r4, #28]
 8004bfe:	b323      	cbz	r3, 8004c4a <HAL_SAI_Init+0x286>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	492b      	ldr	r1, [pc, #172]	; (8004cb0 <HAL_SAI_Init+0x2ec>)
 8004c04:	4a2b      	ldr	r2, [pc, #172]	; (8004cb4 <HAL_SAI_Init+0x2f0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bf18      	it	ne
 8004c0a:	428b      	cmpne	r3, r1
 8004c0c:	f000 8146 	beq.w	8004e9c <HAL_SAI_Init+0x4d8>
    uint32_t freq = 0;
 8004c10:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	492c      	ldr	r1, [pc, #176]	; (8004cc8 <HAL_SAI_Init+0x304>)
 8004c16:	4a2d      	ldr	r2, [pc, #180]	; (8004ccc <HAL_SAI_Init+0x308>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	bf18      	it	ne
 8004c1c:	428b      	cmpne	r3, r1
 8004c1e:	f000 8142 	beq.w	8004ea6 <HAL_SAI_Init+0x4e2>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004c22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c26:	0041      	lsls	r1, r0, #1
 8004c28:	69e3      	ldr	r3, [r4, #28]
 8004c2a:	025b      	lsls	r3, r3, #9
 8004c2c:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8004c30:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <HAL_SAI_Init+0x30c>)
 8004c32:	fba3 2301 	umull	r2, r3, r3, r1
 8004c36:	08db      	lsrs	r3, r3, #3
 8004c38:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 8004c3a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8004c3e:	0042      	lsls	r2, r0, #1
 8004c40:	1a8a      	subs	r2, r1, r2
 8004c42:	2a08      	cmp	r2, #8
 8004c44:	d901      	bls.n	8004c4a <HAL_SAI_Init+0x286>
      hsai->Init.Mckdiv+= 1;
 8004c46:	3301      	adds	r3, #1
 8004c48:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c4a:	6862      	ldr	r2, [r4, #4]
 8004c4c:	2a02      	cmp	r2, #2
 8004c4e:	bf14      	ite	ne
 8004c50:	2300      	movne	r3, #0
 8004c52:	2301      	moveq	r3, #1
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	bf08      	it	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 812a 	beq.w	8004eb4 <HAL_SAI_Init+0x4f0>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004c60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	f000 8124 	beq.w	8004eb0 <HAL_SAI_Init+0x4ec>
 8004c68:	f44f 7600 	mov.w	r6, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c6c:	6821      	ldr	r1, [r4, #0]
 8004c6e:	680b      	ldr	r3, [r1, #0]
 8004c70:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_SAI_Init+0x310>)
 8004c72:	401a      	ands	r2, r3
 8004c74:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	6811      	ldr	r1, [r2, #0]
 8004c7a:	6863      	ldr	r3, [r4, #4]
 8004c7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004c7e:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004c80:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c82:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004c84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c86:	4303      	orrs	r3, r0
 8004c88:	4333      	orrs	r3, r6
                        ckstr_bits | syncen_bits |                               \
 8004c8a:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8004c8e:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c90:	6920      	ldr	r0, [r4, #16]
 8004c92:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c94:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c96:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c98:	6a20      	ldr	r0, [r4, #32]
 8004c9a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	6851      	ldr	r1, [r2, #4]
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_SAI_Init+0x314>)
 8004ca8:	400b      	ands	r3, r1
 8004caa:	6053      	str	r3, [r2, #4]
 8004cac:	e016      	b.n	8004cdc <HAL_SAI_Init+0x318>
 8004cae:	bf00      	nop
 8004cb0:	40015804 	.word	0x40015804
 8004cb4:	40015824 	.word	0x40015824
 8004cb8:	08017d60 	.word	0x08017d60
 8004cbc:	0002ee00 	.word	0x0002ee00
 8004cc0:	00017700 	.word	0x00017700
 8004cc4:	40015800 	.word	0x40015800
 8004cc8:	40015c04 	.word	0x40015c04
 8004ccc:	40015c24 	.word	0x40015c24
 8004cd0:	cccccccd 	.word	0xcccccccd
 8004cd4:	ff05c010 	.word	0xff05c010
 8004cd8:	ffff1ff0 	.word	0xffff1ff0
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004cdc:	6821      	ldr	r1, [r4, #0]
 8004cde:	684a      	ldr	r2, [r1, #4]
 8004ce0:	69a3      	ldr	r3, [r4, #24]
 8004ce2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ce4:	4303      	orrs	r3, r0
 8004ce6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004ce8:	4303      	orrs	r3, r0
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	6891      	ldr	r1, [r2, #8]
 8004cf2:	4b75      	ldr	r3, [pc, #468]	; (8004ec8 <HAL_SAI_Init+0x504>)
 8004cf4:	400b      	ands	r3, r1
 8004cf6:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	6882      	ldr	r2, [r0, #8]
 8004cfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cfe:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8004d00:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004d02:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8004d04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8004d06:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8004d08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8004d0a:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004d0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004d0e:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8004d10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004d14:	4313      	orrs	r3, r2
 8004d16:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	68d3      	ldr	r3, [r2, #12]
 8004d1c:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8004d20:	f023 030f 	bic.w	r3, r3, #15
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	0c1b      	lsrs	r3, r3, #16
 8004d28:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004d2a:	6820      	ldr	r0, [r4, #0]
 8004d2c:	68c2      	ldr	r2, [r0, #12]
 8004d2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d30:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004d32:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004d34:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004d36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004d3a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d3c:	3901      	subs	r1, #1
 8004d3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004d46:	2000      	movs	r0, #0
 8004d48:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8004d52:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 8004d58:	f240 1173 	movw	r1, #371	; 0x173
 8004d5c:	485b      	ldr	r0, [pc, #364]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004d5e:	f00d fec9 	bl	8012af4 <assert_failed>
 8004d62:	e66a      	b.n	8004a3a <HAL_SAI_Init+0x76>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 8004d64:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8004d68:	4858      	ldr	r0, [pc, #352]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004d6a:	f00d fec3 	bl	8012af4 <assert_failed>
 8004d6e:	e670      	b.n	8004a52 <HAL_SAI_Init+0x8e>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 8004d70:	f240 1175 	movw	r1, #373	; 0x175
 8004d74:	4855      	ldr	r0, [pc, #340]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004d76:	f00d febd 	bl	8012af4 <assert_failed>
 8004d7a:	e66e      	b.n	8004a5a <HAL_SAI_Init+0x96>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 8004d7c:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8004d80:	4852      	ldr	r0, [pc, #328]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004d82:	f00d feb7 	bl	8012af4 <assert_failed>
 8004d86:	e676      	b.n	8004a76 <HAL_SAI_Init+0xb2>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 8004d88:	f240 1177 	movw	r1, #375	; 0x177
 8004d8c:	484f      	ldr	r0, [pc, #316]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004d8e:	f00d feb1 	bl	8012af4 <assert_failed>
 8004d92:	e67b      	b.n	8004a8c <HAL_SAI_Init+0xc8>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 8004d94:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8004d98:	484c      	ldr	r0, [pc, #304]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004d9a:	f00d feab 	bl	8012af4 <assert_failed>
 8004d9e:	e679      	b.n	8004a94 <HAL_SAI_Init+0xd0>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 8004da0:	f240 1179 	movw	r1, #377	; 0x179
 8004da4:	4849      	ldr	r0, [pc, #292]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004da6:	f00d fea5 	bl	8012af4 <assert_failed>
 8004daa:	e677      	b.n	8004a9c <HAL_SAI_Init+0xd8>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8004dac:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004db0:	4846      	ldr	r0, [pc, #280]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004db2:	f00d fe9f 	bl	8012af4 <assert_failed>
 8004db6:	e67c      	b.n	8004ab2 <HAL_SAI_Init+0xee>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 8004db8:	f240 117b 	movw	r1, #379	; 0x17b
 8004dbc:	4843      	ldr	r0, [pc, #268]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004dbe:	f00d fe99 	bl	8012af4 <assert_failed>
 8004dc2:	e681      	b.n	8004ac8 <HAL_SAI_Init+0x104>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 8004dc4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8004dc8:	4840      	ldr	r0, [pc, #256]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004dca:	f00d fe93 	bl	8012af4 <assert_failed>
 8004dce:	e67f      	b.n	8004ad0 <HAL_SAI_Init+0x10c>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8004dd0:	f240 117d 	movw	r1, #381	; 0x17d
 8004dd4:	483d      	ldr	r0, [pc, #244]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004dd6:	f00d fe8d 	bl	8012af4 <assert_failed>
 8004dda:	e680      	b.n	8004ade <HAL_SAI_Init+0x11a>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 8004ddc:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8004de0:	483a      	ldr	r0, [pc, #232]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004de2:	f00d fe87 	bl	8012af4 <assert_failed>
 8004de6:	e68d      	b.n	8004b04 <HAL_SAI_Init+0x140>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 8004de8:	f240 117f 	movw	r1, #383	; 0x17f
 8004dec:	4837      	ldr	r0, [pc, #220]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004dee:	f00d fe81 	bl	8012af4 <assert_failed>
 8004df2:	e692      	b.n	8004b1a <HAL_SAI_Init+0x156>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8004df4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004df8:	4834      	ldr	r0, [pc, #208]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004dfa:	f00d fe7b 	bl	8012af4 <assert_failed>
 8004dfe:	e690      	b.n	8004b22 <HAL_SAI_Init+0x15e>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8004e00:	f240 1183 	movw	r1, #387	; 0x183
 8004e04:	4831      	ldr	r0, [pc, #196]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004e06:	f00d fe75 	bl	8012af4 <assert_failed>
 8004e0a:	e68f      	b.n	8004b2c <HAL_SAI_Init+0x168>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 8004e0c:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8004e10:	482e      	ldr	r0, [pc, #184]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004e12:	f00d fe6f 	bl	8012af4 <assert_failed>
 8004e16:	e68e      	b.n	8004b36 <HAL_SAI_Init+0x172>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 8004e18:	f240 1185 	movw	r1, #389	; 0x185
 8004e1c:	482b      	ldr	r0, [pc, #172]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004e1e:	f00d fe69 	bl	8012af4 <assert_failed>
 8004e22:	e693      	b.n	8004b4c <HAL_SAI_Init+0x188>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 8004e24:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8004e28:	4828      	ldr	r0, [pc, #160]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004e2a:	f00d fe63 	bl	8012af4 <assert_failed>
 8004e2e:	e698      	b.n	8004b62 <HAL_SAI_Init+0x19e>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 8004e30:	f240 1187 	movw	r1, #391	; 0x187
 8004e34:	4825      	ldr	r0, [pc, #148]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004e36:	f00d fe5d 	bl	8012af4 <assert_failed>
 8004e3a:	e69d      	b.n	8004b78 <HAL_SAI_Init+0x1b4>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 8004e3c:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004e40:	4822      	ldr	r0, [pc, #136]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004e42:	f00d fe57 	bl	8012af4 <assert_failed>
 8004e46:	e69b      	b.n	8004b80 <HAL_SAI_Init+0x1bc>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 8004e48:	f240 118b 	movw	r1, #395	; 0x18b
 8004e4c:	481f      	ldr	r0, [pc, #124]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004e4e:	f00d fe51 	bl	8012af4 <assert_failed>
 8004e52:	e6a1      	b.n	8004b98 <HAL_SAI_Init+0x1d4>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 8004e54:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004e58:	481c      	ldr	r0, [pc, #112]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004e5a:	f00d fe4b 	bl	8012af4 <assert_failed>
 8004e5e:	e6a0      	b.n	8004ba2 <HAL_SAI_Init+0x1de>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 8004e60:	f240 118d 	movw	r1, #397	; 0x18d
 8004e64:	4819      	ldr	r0, [pc, #100]	; (8004ecc <HAL_SAI_Init+0x508>)
 8004e66:	f00d fe45 	bl	8012af4 <assert_failed>
 8004e6a:	e69f      	b.n	8004bac <HAL_SAI_Init+0x1e8>
    hsai->Lock = HAL_UNLOCKED;
 8004e6c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8004e70:	4620      	mov	r0, r4
 8004e72:	f00f f8b1 	bl	8013fd8 <HAL_SAI_MspInit>
 8004e76:	e69e      	b.n	8004bb6 <HAL_SAI_Init+0x1f2>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004e78:	2220      	movs	r2, #32
      break;
 8004e7a:	e6aa      	b.n	8004bd2 <HAL_SAI_Init+0x20e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	e6a8      	b.n	8004bd2 <HAL_SAI_Init+0x20e>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e80:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8004e84:	e6b0      	b.n	8004be8 <HAL_SAI_Init+0x224>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004e86:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e8a:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8004e8e:	e6ab      	b.n	8004be8 <HAL_SAI_Init+0x224>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8004e90:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004e94:	e6a8      	b.n	8004be8 <HAL_SAI_Init+0x224>
    SAI2->GCR = tmpregisterGCR;
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <HAL_SAI_Init+0x50c>)
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e6af      	b.n	8004bfc <HAL_SAI_Init+0x238>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ea0:	f7ff fc7c 	bl	800479c <HAL_RCCEx_GetPeriphCLKFreq>
 8004ea4:	e6b5      	b.n	8004c12 <HAL_SAI_Init+0x24e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004ea6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004eaa:	f7ff fc77 	bl	800479c <HAL_RCCEx_GetPeriphCLKFreq>
 8004eae:	e6b8      	b.n	8004c22 <HAL_SAI_Init+0x25e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	e6db      	b.n	8004c6c <HAL_SAI_Init+0x2a8>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004eb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d001      	beq.n	8004ebe <HAL_SAI_Init+0x4fa>
 8004eba:	2600      	movs	r6, #0
 8004ebc:	e6d6      	b.n	8004c6c <HAL_SAI_Init+0x2a8>
 8004ebe:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004ec2:	e6d3      	b.n	8004c6c <HAL_SAI_Init+0x2a8>
    return HAL_ERROR;
 8004ec4:	2001      	movs	r0, #1
}
 8004ec6:	4770      	bx	lr
 8004ec8:	fff88000 	.word	0xfff88000
 8004ecc:	08017d60 	.word	0x08017d60
 8004ed0:	40015c00 	.word	0x40015c00

08004ed4 <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
 8004ed4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d00c      	beq.n	8004ef6 <HAL_SAI_DMAPause+0x22>
 8004edc:	2301      	movs	r3, #1
 8004ede:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004ee2:	6802      	ldr	r2, [r0, #0]
 8004ee4:	6813      	ldr	r3, [r2, #0]
 8004ee6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004eea:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hsai);
 8004eec:	2300      	movs	r3, #0
 8004eee:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8004ef6:	2002      	movs	r0, #2
}
 8004ef8:	4770      	bx	lr

08004efa <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
 8004efa:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d015      	beq.n	8004f2e <HAL_SAI_DMAResume+0x34>
 8004f02:	2301      	movs	r3, #1
 8004f04:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004f08:	6802      	ldr	r2, [r0, #0]
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f10:	6013      	str	r3, [r2, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004f12:	6803      	ldr	r3, [r0, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004f1a:	d103      	bne.n	8004f24 <HAL_SAI_DMAResume+0x2a>
    __HAL_SAI_ENABLE(hsai);
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f22:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
 8004f24:	2300      	movs	r3, #0
 8004f26:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8004f2e:	2002      	movs	r0, #2
}
 8004f30:	4770      	bx	lr

08004f32 <HAL_SAI_DMAStop>:
{
 8004f32:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8004f34:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d04c      	beq.n	8004fd6 <HAL_SAI_DMAStop+0xa4>
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004f44:	6802      	ldr	r2, [r0, #0]
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f4c:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004f4e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8004f50:	b368      	cbz	r0, 8004fae <HAL_SAI_DMAStop+0x7c>
 8004f52:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b12      	cmp	r3, #18
 8004f5a:	d017      	beq.n	8004f8c <HAL_SAI_DMAStop+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8004f5c:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8004f5e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004f60:	b120      	cbz	r0, 8004f6c <HAL_SAI_DMAStop+0x3a>
 8004f62:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b22      	cmp	r3, #34	; 0x22
 8004f6a:	d024      	beq.n	8004fb6 <HAL_SAI_DMAStop+0x84>
  SAI_Disable(hsai);
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7ff fd07 	bl	8004980 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	6853      	ldr	r3, [r2, #4]
 8004f76:	f043 0308 	orr.w	r3, r3, #8
 8004f7a:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8004f82:	2300      	movs	r3, #0
 8004f84:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8004f88:	4628      	mov	r0, r5
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8004f8c:	f7fc fc88 	bl	80018a0 <HAL_DMA_Abort>
 8004f90:	4605      	mov	r5, r0
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d0e3      	beq.n	8004f5e <HAL_SAI_DMAStop+0x2c>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004f96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d009      	beq.n	8004fb2 <HAL_SAI_DMAStop+0x80>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f9e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8004faa:	2501      	movs	r5, #1
 8004fac:	e7d7      	b.n	8004f5e <HAL_SAI_DMAStop+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 8004fae:	2500      	movs	r5, #0
 8004fb0:	e7d5      	b.n	8004f5e <HAL_SAI_DMAStop+0x2c>
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	e7d3      	b.n	8004f5e <HAL_SAI_DMAStop+0x2c>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8004fb6:	f7fc fc73 	bl	80018a0 <HAL_DMA_Abort>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d0d6      	beq.n	8004f6c <HAL_SAI_DMAStop+0x3a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004fbe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d0d2      	beq.n	8004f6c <HAL_SAI_DMAStop+0x3a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004fc6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8004fd2:	2501      	movs	r5, #1
 8004fd4:	e7ca      	b.n	8004f6c <HAL_SAI_DMAStop+0x3a>
  __HAL_LOCK(hsai);
 8004fd6:	2502      	movs	r5, #2
 8004fd8:	e7d6      	b.n	8004f88 <HAL_SAI_DMAStop+0x56>
	...

08004fdc <HAL_SAI_Transmit_DMA>:
{
 8004fdc:	b538      	push	{r3, r4, r5, lr}
  if((pData == NULL) || (Size == 0))
 8004fde:	4614      	mov	r4, r2
 8004fe0:	fab2 f282 	clz	r2, r2
 8004fe4:	0952      	lsrs	r2, r2, #5
 8004fe6:	2900      	cmp	r1, #0
 8004fe8:	bf08      	it	eq
 8004fea:	2201      	moveq	r2, #1
 8004fec:	2a00      	cmp	r2, #0
 8004fee:	d14c      	bne.n	800508a <HAL_SAI_Transmit_DMA+0xae>
  if(hsai->State == HAL_SAI_STATE_READY)
 8004ff0:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d14a      	bne.n	8005090 <HAL_SAI_Transmit_DMA+0xb4>
    __HAL_LOCK(hsai);
 8004ffa:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d048      	beq.n	8005094 <HAL_SAI_Transmit_DMA+0xb8>
 8005002:	4623      	mov	r3, r4
 8005004:	4604      	mov	r4, r0
 8005006:	2201      	movs	r2, #1
 8005008:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 800500c:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 800500e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->XferCount = Size;
 8005012:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005016:	2300      	movs	r3, #0
 8005018:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800501c:	2212      	movs	r2, #18
 800501e:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005022:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005024:	491c      	ldr	r1, [pc, #112]	; (8005098 <HAL_SAI_Transmit_DMA+0xbc>)
 8005026:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005028:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800502a:	491c      	ldr	r1, [pc, #112]	; (800509c <HAL_SAI_Transmit_DMA+0xc0>)
 800502c:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800502e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005030:	491b      	ldr	r1, [pc, #108]	; (80050a0 <HAL_SAI_Transmit_DMA+0xc4>)
 8005032:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8005034:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005036:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005038:	6802      	ldr	r2, [r0, #0]
 800503a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800503e:	321c      	adds	r2, #28
 8005040:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8005042:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8005044:	f7fc fbdc 	bl	8001800 <HAL_DMA_Start_IT>
 8005048:	4605      	mov	r5, r0
 800504a:	b9c8      	cbnz	r0, 8005080 <HAL_SAI_Transmit_DMA+0xa4>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005054:	d103      	bne.n	800505e <HAL_SAI_Transmit_DMA+0x82>
      __HAL_SAI_ENABLE(hsai);
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800505c:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800505e:	2100      	movs	r1, #0
 8005060:	4620      	mov	r0, r4
 8005062:	f7ff fc73 	bl	800494c <SAI_InterruptFlag>
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	6913      	ldr	r3, [r2, #16]
 800506a:	4318      	orrs	r0, r3
 800506c:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	6813      	ldr	r3, [r2, #0]
 8005072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005076:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8005078:	2300      	movs	r3, #0
 800507a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 800507e:	e005      	b.n	800508c <HAL_SAI_Transmit_DMA+0xb0>
      __HAL_UNLOCK(hsai);
 8005080:	2300      	movs	r3, #0
 8005082:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8005086:	2501      	movs	r5, #1
 8005088:	e000      	b.n	800508c <HAL_SAI_Transmit_DMA+0xb0>
    return  HAL_ERROR;
 800508a:	2501      	movs	r5, #1
}
 800508c:	4628      	mov	r0, r5
 800508e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8005090:	2502      	movs	r5, #2
 8005092:	e7fb      	b.n	800508c <HAL_SAI_Transmit_DMA+0xb0>
    __HAL_LOCK(hsai);
 8005094:	2502      	movs	r5, #2
 8005096:	e7f9      	b.n	800508c <HAL_SAI_Transmit_DMA+0xb0>
 8005098:	080050e1 	.word	0x080050e1
 800509c:	080050a5 	.word	0x080050a5
 80050a0:	080050eb 	.word	0x080050eb

080050a4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80050a4:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80050a6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80050a8:	6803      	ldr	r3, [r0, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80050b0:	d112      	bne.n	80050d8 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 80050b2:	2100      	movs	r1, #0
 80050b4:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	6813      	ldr	r3, [r2, #0]
 80050bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7ff fc42 	bl	800494c <SAI_InterruptFlag>
 80050c8:	6822      	ldr	r2, [r4, #0]
 80050ca:	6913      	ldr	r3, [r2, #16]
 80050cc:	ea23 0000 	bic.w	r0, r3, r0
 80050d0:	6110      	str	r0, [r2, #16]

    hsai->State= HAL_SAI_STATE_READY;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80050d8:	4620      	mov	r0, r4
 80050da:	f00f f9a9 	bl	8014430 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80050de:	bd10      	pop	{r4, pc}

080050e0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050e0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80050e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80050e4:	f00f f9ea 	bl	80144bc <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80050e8:	bd08      	pop	{r3, pc}

080050ea <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80050ea:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050ec:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80050ee:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80050f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80050fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d003      	beq.n	800510a <SAI_DMAError+0x20>
 8005102:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	2b01      	cmp	r3, #1
 8005108:	d10d      	bne.n	8005126 <SAI_DMAError+0x3c>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	6813      	ldr	r3, [r2, #0]
 800510e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005112:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005114:	4620      	mov	r0, r4
 8005116:	f7ff fc33 	bl	8004980 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800511a:	2301      	movs	r3, #1
 800511c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005126:	4620      	mov	r0, r4
 8005128:	f00f fa0e 	bl	8014548 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800512c:	bd10      	pop	{r4, pc}

0800512e <HAL_SAI_GetState>:
  return hsai->State;
 800512e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 8005132:	4770      	bx	lr

08005134 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	9301      	str	r3, [sp, #4]
  uint32_t response = 0, validvoltage = 0;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800513e:	6800      	ldr	r0, [r0, #0]
 8005140:	f002 fdd2 	bl	8007ce8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005144:	4605      	mov	r5, r0
 8005146:	b110      	cbz	r0, 800514e <SD_PowerON+0x1a>
      hsd->SdCard.CardType = CARD_SDSC;
    }
  }
  
  return HAL_SD_ERROR_NONE;
}
 8005148:	4628      	mov	r0, r5
 800514a:	b002      	add	sp, #8
 800514c:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	f002 fddd 	bl	8007d0e <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005154:	4606      	mov	r6, r0
 8005156:	b1f8      	cbz	r0, 8005198 <SD_PowerON+0x64>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005158:	2300      	movs	r3, #0
 800515a:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 800515c:	4628      	mov	r0, r5
    while(validvoltage == 0)
 800515e:	b9c0      	cbnz	r0, 8005192 <SD_PowerON+0x5e>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005160:	9b01      	ldr	r3, [sp, #4]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	9201      	str	r2, [sp, #4]
 8005166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800516a:	4293      	cmp	r3, r2
 800516c:	d040      	beq.n	80051f0 <SD_PowerON+0xbc>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800516e:	2100      	movs	r1, #0
 8005170:	6820      	ldr	r0, [r4, #0]
 8005172:	f002 fde3 	bl	8007d3c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005176:	2800      	cmp	r0, #0
 8005178:	d13d      	bne.n	80051f6 <SD_PowerON+0xc2>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800517a:	2100      	movs	r1, #0
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	f002 fdf5 	bl	8007d6c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005182:	2800      	cmp	r0, #0
 8005184:	d13a      	bne.n	80051fc <SD_PowerON+0xc8>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005186:	2100      	movs	r1, #0
 8005188:	6820      	ldr	r0, [r4, #0]
 800518a:	f002 fb77 	bl	800787c <SDMMC_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800518e:	0fc0      	lsrs	r0, r0, #31
 8005190:	e7e5      	b.n	800515e <SD_PowerON+0x2a>
    hsd->SdCard.CardType = CARD_SDSC;
 8005192:	2300      	movs	r3, #0
 8005194:	6463      	str	r3, [r4, #68]	; 0x44
 8005196:	e7d7      	b.n	8005148 <SD_PowerON+0x14>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005198:	2301      	movs	r3, #1
 800519a:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 800519c:	4603      	mov	r3, r0
    while(validvoltage == 0)
 800519e:	b9e0      	cbnz	r0, 80051da <SD_PowerON+0xa6>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80051a0:	9b01      	ldr	r3, [sp, #4]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	9201      	str	r2, [sp, #4]
 80051a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d029      	beq.n	8005202 <SD_PowerON+0xce>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80051ae:	2100      	movs	r1, #0
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	f002 fdc3 	bl	8007d3c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80051b6:	4605      	mov	r5, r0
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1c5      	bne.n	8005148 <SD_PowerON+0x14>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80051bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	f002 fdd3 	bl	8007d6c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80051c6:	4605      	mov	r5, r0
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d1bd      	bne.n	8005148 <SD_PowerON+0x14>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80051cc:	2100      	movs	r1, #0
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	f002 fb54 	bl	800787c <SDMMC_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80051d4:	4603      	mov	r3, r0
 80051d6:	0fc0      	lsrs	r0, r0, #31
 80051d8:	e7e1      	b.n	800519e <SD_PowerON+0x6a>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80051da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80051de:	d103      	bne.n	80051e8 <SD_PowerON+0xb4>
      hsd->SdCard.CardType = CARD_SDSC;
 80051e0:	2300      	movs	r3, #0
 80051e2:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 80051e4:	4635      	mov	r5, r6
 80051e6:	e7af      	b.n	8005148 <SD_PowerON+0x14>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80051e8:	2301      	movs	r3, #1
 80051ea:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 80051ec:	4635      	mov	r5, r6
 80051ee:	e7ab      	b.n	8005148 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80051f0:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80051f4:	e7a8      	b.n	8005148 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051f6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80051fa:	e7a5      	b.n	8005148 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005200:	e7a2      	b.n	8005148 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005202:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005206:	e79f      	b.n	8005148 <SD_PowerON+0x14>

08005208 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	4604      	mov	r4, r0
 8005210:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8005212:	f7fc f81d 	bl	8001250 <HAL_GetTick>
 8005216:	4606      	mov	r6, r0
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8005218:	2300      	movs	r3, #0
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	9301      	str	r3, [sp, #4]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800521e:	2108      	movs	r1, #8
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	f002 fcb7 	bl	8007b94 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8005226:	4605      	mov	r5, r0
 8005228:	b118      	cbz	r0, 8005232 <SD_FindSCR+0x2a>
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 800522a:	4628      	mov	r0, r5
 800522c:	b008      	add	sp, #32
 800522e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8005232:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005234:	0409      	lsls	r1, r1, #16
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	f002 fd80 	bl	8007d3c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 800523c:	4605      	mov	r5, r0
 800523e:	2800      	cmp	r0, #0
 8005240:	d1f3      	bne.n	800522a <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005242:	f04f 33ff 	mov.w	r3, #4294967295
 8005246:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 8005248:	2308      	movs	r3, #8
 800524a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800524c:	2330      	movs	r3, #48	; 0x30
 800524e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005250:	2302      	movs	r3, #2
 8005252:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005254:	2300      	movs	r3, #0
 8005256:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005258:	2301      	movs	r3, #1
 800525a:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 800525c:	a902      	add	r1, sp, #8
 800525e:	6820      	ldr	r0, [r4, #0]
 8005260:	f002 fc2a 	bl	8007ab8 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005264:	6820      	ldr	r0, [r4, #0]
 8005266:	f002 fdb3 	bl	8007dd0 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 800526a:	4605      	mov	r5, r0
 800526c:	2800      	cmp	r0, #0
 800526e:	d1dc      	bne.n	800522a <SD_FindSCR+0x22>
  uint32_t index = 0;
 8005270:	4680      	mov	r8, r0
 8005272:	e005      	b.n	8005280 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005274:	f7fb ffec 	bl	8001250 <HAL_GetTick>
 8005278:	1b80      	subs	r0, r0, r6
 800527a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800527e:	d043      	beq.n	8005308 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005280:	6820      	ldr	r0, [r4, #0]
 8005282:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005284:	f240 432a 	movw	r3, #1066	; 0x42a
 8005288:	421a      	tst	r2, r3
 800528a:	d10a      	bne.n	80052a2 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800528c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800528e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005292:	d0ef      	beq.n	8005274 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005294:	f002 fa8c 	bl	80077b0 <SDMMC_ReadFIFO>
 8005298:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 800529c:	f108 0801 	add.w	r8, r8, #1
 80052a0:	e7e8      	b.n	8005274 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80052a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052a4:	f013 0f08 	tst.w	r3, #8
 80052a8:	d125      	bne.n	80052f6 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80052aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052ac:	f013 0f02 	tst.w	r3, #2
 80052b0:	d124      	bne.n	80052fc <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80052b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052b4:	f013 0f20 	tst.w	r3, #32
 80052b8:	d123      	bne.n	8005302 <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80052ba:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80052be:	6383      	str	r3, [r0, #56]	; 0x38
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052c0:	9a00      	ldr	r2, [sp, #0]
 80052c2:	0213      	lsls	r3, r2, #8
 80052c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80052cc:	0a11      	lsrs	r1, r2, #8
 80052ce:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052d2:	430b      	orrs	r3, r1
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80052d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052d8:	607b      	str	r3, [r7, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80052da:	9a01      	ldr	r2, [sp, #4]
 80052dc:	0213      	lsls	r3, r2, #8
 80052de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80052e6:	0a11      	lsrs	r1, r2, #8
 80052e8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80052ec:	430b      	orrs	r3, r1
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80052ee:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80052f2:	603b      	str	r3, [r7, #0]
  return HAL_SD_ERROR_NONE;
 80052f4:	e799      	b.n	800522a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80052f6:	2508      	movs	r5, #8
 80052f8:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80052fa:	e796      	b.n	800522a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80052fc:	2502      	movs	r5, #2
 80052fe:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005300:	e793      	b.n	800522a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005302:	2520      	movs	r5, #32
 8005304:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005306:	e790      	b.n	800522a <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8005308:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800530c:	e78d      	b.n	800522a <SD_FindSCR+0x22>

0800530e <SD_WideBus_Enable>:
{
 800530e:	b510      	push	{r4, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 8005314:	2100      	movs	r1, #0
 8005316:	9100      	str	r1, [sp, #0]
 8005318:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800531a:	6800      	ldr	r0, [r0, #0]
 800531c:	f002 faae 	bl	800787c <SDMMC_GetResponse>
 8005320:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005324:	d116      	bne.n	8005354 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8005326:	4669      	mov	r1, sp
 8005328:	4620      	mov	r0, r4
 800532a:	f7ff ff6d 	bl	8005208 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800532e:	4603      	mov	r3, r0
 8005330:	b990      	cbnz	r0, 8005358 <SD_WideBus_Enable+0x4a>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005332:	9b01      	ldr	r3, [sp, #4]
 8005334:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005338:	d011      	beq.n	800535e <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800533a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800533c:	0409      	lsls	r1, r1, #16
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	f002 fcfc 	bl	8007d3c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005344:	4603      	mov	r3, r0
 8005346:	b938      	cbnz	r0, 8005358 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005348:	2102      	movs	r1, #2
 800534a:	6820      	ldr	r0, [r4, #0]
 800534c:	f002 fd28 	bl	8007da0 <SDMMC_CmdBusWidth>
 8005350:	4603      	mov	r3, r0
 8005352:	e001      	b.n	8005358 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005354:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005358:	4618      	mov	r0, r3
 800535a:	b002      	add	sp, #8
 800535c:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800535e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005362:	e7f9      	b.n	8005358 <SD_WideBus_Enable+0x4a>

08005364 <SD_WideBus_Disable>:
{
 8005364:	b510      	push	{r4, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 800536a:	2100      	movs	r1, #0
 800536c:	9100      	str	r1, [sp, #0]
 800536e:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005370:	6800      	ldr	r0, [r0, #0]
 8005372:	f002 fa83 	bl	800787c <SDMMC_GetResponse>
 8005376:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800537a:	d116      	bne.n	80053aa <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 800537c:	4669      	mov	r1, sp
 800537e:	4620      	mov	r0, r4
 8005380:	f7ff ff42 	bl	8005208 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005384:	4603      	mov	r3, r0
 8005386:	b990      	cbnz	r0, 80053ae <SD_WideBus_Disable+0x4a>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800538e:	d011      	beq.n	80053b4 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005390:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005392:	0409      	lsls	r1, r1, #16
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	f002 fcd1 	bl	8007d3c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800539a:	4603      	mov	r3, r0
 800539c:	b938      	cbnz	r0, 80053ae <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800539e:	2100      	movs	r1, #0
 80053a0:	6820      	ldr	r0, [r4, #0]
 80053a2:	f002 fcfd 	bl	8007da0 <SDMMC_CmdBusWidth>
 80053a6:	4603      	mov	r3, r0
 80053a8:	e001      	b.n	80053ae <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80053aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	b002      	add	sp, #8
 80053b2:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80053b8:	e7f9      	b.n	80053ae <SD_WideBus_Disable+0x4a>

080053ba <SD_SendStatus>:
{
 80053ba:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80053bc:	b181      	cbz	r1, 80053e0 <SD_SendStatus+0x26>
 80053be:	460d      	mov	r5, r1
 80053c0:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80053c2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80053c4:	0409      	lsls	r1, r1, #16
 80053c6:	6800      	ldr	r0, [r0, #0]
 80053c8:	f002 fd5c 	bl	8007e84 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80053cc:	4606      	mov	r6, r0
 80053ce:	b108      	cbz	r0, 80053d4 <SD_SendStatus+0x1a>
}
 80053d0:	4630      	mov	r0, r6
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053d4:	2100      	movs	r1, #0
 80053d6:	6820      	ldr	r0, [r4, #0]
 80053d8:	f002 fa50 	bl	800787c <SDMMC_GetResponse>
 80053dc:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 80053de:	e7f7      	b.n	80053d0 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80053e0:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80053e4:	e7f4      	b.n	80053d0 <SD_SendStatus+0x16>

080053e6 <HAL_SD_ReadBlocks>:
{
 80053e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053ea:	b087      	sub	sp, #28
 80053ec:	4604      	mov	r4, r0
 80053ee:	460d      	mov	r5, r1
 80053f0:	4616      	mov	r6, r2
 80053f2:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80053f4:	f7fb ff2c 	bl	8001250 <HAL_GetTick>
  if(NULL == pData)
 80053f8:	b16d      	cbz	r5, 8005416 <HAL_SD_ReadBlocks+0x30>
 80053fa:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80053fc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b01      	cmp	r3, #1
 8005404:	d00d      	beq.n	8005422 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800540c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800540e:	2001      	movs	r0, #1
}
 8005410:	b007      	add	sp, #28
 8005412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005416:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005418:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800541c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800541e:	2001      	movs	r0, #1
 8005420:	e7f6      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005422:	2300      	movs	r3, #0
 8005424:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005426:	19f3      	adds	r3, r6, r7
 8005428:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800542a:	4293      	cmp	r3, r2
 800542c:	d81b      	bhi.n	8005466 <HAL_SD_ReadBlocks+0x80>
    hsd->State = HAL_SD_STATE_BUSY;
 800542e:	2303      	movs	r3, #3
 8005430:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0;
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800543a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800543c:	2b01      	cmp	r3, #1
 800543e:	d000      	beq.n	8005442 <HAL_SD_ReadBlocks+0x5c>
      BlockAdd *= 512;
 8005440:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005446:	6820      	ldr	r0, [r4, #0]
 8005448:	f002 fba4 	bl	8007b94 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800544c:	4603      	mov	r3, r0
 800544e:	b180      	cbz	r0, 8005472 <HAL_SD_ReadBlocks+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8005456:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005458:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800545a:	4318      	orrs	r0, r3
 800545c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800545e:	2001      	movs	r0, #1
 8005460:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005464:	e7d4      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005466:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005468:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800546c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800546e:	2001      	movs	r0, #1
 8005470:	e7ce      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295
 8005476:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005478:	027b      	lsls	r3, r7, #9
 800547a:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800547c:	2390      	movs	r3, #144	; 0x90
 800547e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005480:	2302      	movs	r3, #2
 8005482:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005484:	2300      	movs	r3, #0
 8005486:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005488:	2301      	movs	r3, #1
 800548a:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 800548c:	4669      	mov	r1, sp
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	f002 fb12 	bl	8007ab8 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1)
 8005494:	2f01      	cmp	r7, #1
 8005496:	d915      	bls.n	80054c4 <HAL_SD_ReadBlocks+0xde>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005498:	2302      	movs	r3, #2
 800549a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800549c:	4631      	mov	r1, r6
 800549e:	6820      	ldr	r0, [r4, #0]
 80054a0:	f002 fba8 	bl	8007bf4 <SDMMC_CmdReadMultiBlock>
 80054a4:	4681      	mov	r9, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80054a6:	f1b9 0f00 	cmp.w	r9, #0
 80054aa:	d025      	beq.n	80054f8 <HAL_SD_ReadBlocks+0x112>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80054b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054b6:	ea43 0309 	orr.w	r3, r3, r9
 80054ba:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054bc:	2001      	movs	r0, #1
 80054be:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80054c2:	e7a5      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80054c4:	2301      	movs	r3, #1
 80054c6:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80054c8:	4631      	mov	r1, r6
 80054ca:	6820      	ldr	r0, [r4, #0]
 80054cc:	f002 fb7a 	bl	8007bc4 <SDMMC_CmdReadSingleBlock>
 80054d0:	4681      	mov	r9, r0
 80054d2:	e7e8      	b.n	80054a6 <HAL_SD_ReadBlocks+0xc0>
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	f002 f96b 	bl	80077b0 <SDMMC_ReadFIFO>
 80054da:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
        for(count = 0U; count < 8U; count++)
 80054de:	3601      	adds	r6, #1
 80054e0:	2e07      	cmp	r6, #7
 80054e2:	d9f7      	bls.n	80054d4 <HAL_SD_ReadBlocks+0xee>
        tempbuff += 8U;
 80054e4:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80054e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054e8:	b18b      	cbz	r3, 800550e <HAL_SD_ReadBlocks+0x128>
 80054ea:	f7fb feb1 	bl	8001250 <HAL_GetTick>
 80054ee:	eba0 0008 	sub.w	r0, r0, r8
 80054f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054f4:	4298      	cmp	r0, r3
 80054f6:	d20a      	bcs.n	800550e <HAL_SD_ReadBlocks+0x128>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80054f8:	6820      	ldr	r0, [r4, #0]
 80054fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80054fc:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8005500:	d112      	bne.n	8005528 <HAL_SD_ReadBlocks+0x142>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005502:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005504:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005508:	d0ed      	beq.n	80054e6 <HAL_SD_ReadBlocks+0x100>
        for(count = 0U; count < 8U; count++)
 800550a:	464e      	mov	r6, r9
 800550c:	e7e8      	b.n	80054e0 <HAL_SD_ReadBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005518:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800551c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800551e:	2301      	movs	r3, #1
 8005520:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8005524:	2003      	movs	r0, #3
 8005526:	e773      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005528:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800552a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800552e:	d007      	beq.n	8005540 <HAL_SD_ReadBlocks+0x15a>
 8005530:	2f01      	cmp	r7, #1
 8005532:	d905      	bls.n	8005540 <HAL_SD_ReadBlocks+0x15a>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005534:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005536:	2b03      	cmp	r3, #3
 8005538:	d002      	beq.n	8005540 <HAL_SD_ReadBlocks+0x15a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800553a:	f002 fba3 	bl	8007c84 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800553e:	bb50      	cbnz	r0, 8005596 <HAL_SD_ReadBlocks+0x1b0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005544:	f012 0f08 	tst.w	r2, #8
 8005548:	d130      	bne.n	80055ac <HAL_SD_ReadBlocks+0x1c6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800554a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554c:	f012 0f02 	tst.w	r2, #2
 8005550:	d137      	bne.n	80055c2 <HAL_SD_ReadBlocks+0x1dc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005554:	f012 0f20 	tst.w	r2, #32
 8005558:	d13e      	bne.n	80055d8 <HAL_SD_ReadBlocks+0x1f2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 800555a:	6820      	ldr	r0, [r4, #0]
 800555c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800555e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005562:	d044      	beq.n	80055ee <HAL_SD_ReadBlocks+0x208>
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8005564:	f002 f924 	bl	80077b0 <SDMMC_ReadFIFO>
 8005568:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800556c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800556e:	b133      	cbz	r3, 800557e <HAL_SD_ReadBlocks+0x198>
 8005570:	f7fb fe6e 	bl	8001250 <HAL_GetTick>
 8005574:	eba0 0008 	sub.w	r0, r0, r8
 8005578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800557a:	4298      	cmp	r0, r3
 800557c:	d3ed      	bcc.n	800555a <HAL_SD_ReadBlocks+0x174>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800558c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800558e:	2001      	movs	r0, #1
 8005590:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8005594:	e73c      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f240 51ff 	movw	r1, #1535	; 0x5ff
 800559c:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800559e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055a0:	4303      	orrs	r3, r0
 80055a2:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80055a4:	2001      	movs	r0, #1
 80055a6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          return HAL_ERROR;
 80055aa:	e731      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80055b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055b4:	f043 0308 	orr.w	r3, r3, #8
 80055b8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055ba:	2001      	movs	r0, #1
 80055bc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80055c0:	e726      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055c2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80055c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055ca:	f043 0302 	orr.w	r3, r3, #2
 80055ce:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055d0:	2001      	movs	r0, #1
 80055d2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80055d6:	e71b      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055d8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80055de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055e0:	f043 0320 	orr.w	r3, r3, #32
 80055e4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055e6:	2001      	movs	r0, #1
 80055e8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80055ec:	e710      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055ee:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80055f2:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80055fa:	2000      	movs	r0, #0
 80055fc:	e708      	b.n	8005410 <HAL_SD_ReadBlocks+0x2a>

080055fe <HAL_SD_WriteBlocks>:
{
 80055fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005602:	b087      	sub	sp, #28
 8005604:	4604      	mov	r4, r0
 8005606:	460d      	mov	r5, r1
 8005608:	4616      	mov	r6, r2
 800560a:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800560c:	f7fb fe20 	bl	8001250 <HAL_GetTick>
  if(NULL == pData)
 8005610:	b16d      	cbz	r5, 800562e <HAL_SD_WriteBlocks+0x30>
 8005612:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005614:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d00d      	beq.n	800563a <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800561e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005620:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005624:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005626:	2001      	movs	r0, #1
}
 8005628:	b007      	add	sp, #28
 800562a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800562e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005634:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005636:	2001      	movs	r0, #1
 8005638:	e7f6      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800563a:	2300      	movs	r3, #0
 800563c:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800563e:	19f3      	adds	r3, r6, r7
 8005640:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005642:	4293      	cmp	r3, r2
 8005644:	d828      	bhi.n	8005698 <HAL_SD_WriteBlocks+0x9a>
    hsd->State = HAL_SD_STATE_BUSY;
 8005646:	2303      	movs	r3, #3
 8005648:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0;
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005652:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005654:	2b01      	cmp	r3, #1
 8005656:	d000      	beq.n	800565a <HAL_SD_WriteBlocks+0x5c>
      BlockAdd *= 512;
 8005658:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800565a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	f002 fa98 	bl	8007b94 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005664:	4603      	mov	r3, r0
 8005666:	b9e8      	cbnz	r0, 80056a4 <HAL_SD_WriteBlocks+0xa6>
    if(NumberOfBlocks > 1U)
 8005668:	2f01      	cmp	r7, #1
 800566a:	d926      	bls.n	80056ba <HAL_SD_WriteBlocks+0xbc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800566c:	2320      	movs	r3, #32
 800566e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8005670:	4631      	mov	r1, r6
 8005672:	6820      	ldr	r0, [r4, #0]
 8005674:	f002 faee 	bl	8007c54 <SDMMC_CmdWriteMultiBlock>
 8005678:	4681      	mov	r9, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 800567a:	f1b9 0f00 	cmp.w	r9, #0
 800567e:	d024      	beq.n	80056ca <HAL_SD_WriteBlocks+0xcc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800568a:	ea43 0309 	orr.w	r3, r3, r9
 800568e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005690:	2001      	movs	r0, #1
 8005692:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005696:	e7c7      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005698:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800569a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800569e:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80056a0:	2001      	movs	r0, #1
 80056a2:	e7c1      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80056a4:	6822      	ldr	r2, [r4, #0]
 80056a6:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80056aa:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80056ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80056ae:	4318      	orrs	r0, r3
 80056b0:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056b2:	2001      	movs	r0, #1
 80056b4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80056b8:	e7b6      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80056ba:	2310      	movs	r3, #16
 80056bc:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80056be:	4631      	mov	r1, r6
 80056c0:	6820      	ldr	r0, [r4, #0]
 80056c2:	f002 faaf 	bl	8007c24 <SDMMC_CmdWriteSingleBlock>
 80056c6:	4681      	mov	r9, r0
 80056c8:	e7d7      	b.n	800567a <HAL_SD_WriteBlocks+0x7c>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295
 80056ce:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80056d0:	027b      	lsls	r3, r7, #9
 80056d2:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80056d4:	2390      	movs	r3, #144	; 0x90
 80056d6:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80056d8:	2300      	movs	r3, #0
 80056da:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80056dc:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80056de:	2301      	movs	r3, #1
 80056e0:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 80056e2:	4669      	mov	r1, sp
 80056e4:	6820      	ldr	r0, [r4, #0]
 80056e6:	f002 f9e7 	bl	8007ab8 <SDMMC_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80056ea:	e011      	b.n	8005710 <HAL_SD_WriteBlocks+0x112>
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 80056ec:	eb05 0186 	add.w	r1, r5, r6, lsl #2
 80056f0:	6820      	ldr	r0, [r4, #0]
 80056f2:	f002 f860 	bl	80077b6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80056f6:	3601      	adds	r6, #1
 80056f8:	2e07      	cmp	r6, #7
 80056fa:	d9f7      	bls.n	80056ec <HAL_SD_WriteBlocks+0xee>
        tempbuff += 8U;
 80056fc:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80056fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005700:	b18b      	cbz	r3, 8005726 <HAL_SD_WriteBlocks+0x128>
 8005702:	f7fb fda5 	bl	8001250 <HAL_GetTick>
 8005706:	eba0 0008 	sub.w	r0, r0, r8
 800570a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800570c:	4298      	cmp	r0, r3
 800570e:	d20a      	bcs.n	8005726 <HAL_SD_WriteBlocks+0x128>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005710:	6820      	ldr	r0, [r4, #0]
 8005712:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005714:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8005718:	d112      	bne.n	8005740 <HAL_SD_WriteBlocks+0x142>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 800571a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800571c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005720:	d0ed      	beq.n	80056fe <HAL_SD_WriteBlocks+0x100>
        for(count = 0U; count < 8U; count++)
 8005722:	464e      	mov	r6, r9
 8005724:	e7e8      	b.n	80056f8 <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800572e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005730:	ea43 0309 	orr.w	r3, r3, r9
 8005734:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005736:	2301      	movs	r3, #1
 8005738:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800573c:	2003      	movs	r0, #3
 800573e:	e773      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005740:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005742:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005746:	d007      	beq.n	8005758 <HAL_SD_WriteBlocks+0x15a>
 8005748:	2f01      	cmp	r7, #1
 800574a:	d905      	bls.n	8005758 <HAL_SD_WriteBlocks+0x15a>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800574c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800574e:	2b03      	cmp	r3, #3
 8005750:	d002      	beq.n	8005758 <HAL_SD_WriteBlocks+0x15a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005752:	f002 fa97 	bl	8007c84 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005756:	b9b8      	cbnz	r0, 8005788 <HAL_SD_WriteBlocks+0x18a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575c:	f012 0f08 	tst.w	r2, #8
 8005760:	d11d      	bne.n	800579e <HAL_SD_WriteBlocks+0x1a0>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005764:	f012 0f02 	tst.w	r2, #2
 8005768:	d124      	bne.n	80057b4 <HAL_SD_WriteBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800576a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576c:	f012 0f10 	tst.w	r2, #16
 8005770:	d02b      	beq.n	80057ca <HAL_SD_WriteBlocks+0x1cc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005772:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800577a:	f043 0310 	orr.w	r3, r3, #16
 800577e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005780:	2001      	movs	r0, #1
 8005782:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005786:	e74f      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	f240 51ff 	movw	r1, #1535	; 0x5ff
 800578e:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005792:	4303      	orrs	r3, r0
 8005794:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005796:	2001      	movs	r0, #1
 8005798:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          return HAL_ERROR;
 800579c:	e744      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800579e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80057a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057a6:	f043 0308 	orr.w	r3, r3, #8
 80057aa:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057ac:	2001      	movs	r0, #1
 80057ae:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80057b2:	e739      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80057ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057bc:	f043 0302 	orr.w	r3, r3, #2
 80057c0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057c2:	2001      	movs	r0, #1
 80057c4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80057c8:	e72e      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80057d6:	2000      	movs	r0, #0
 80057d8:	e726      	b.n	8005628 <HAL_SD_WriteBlocks+0x2a>

080057da <HAL_SD_GetCardCSD>:
{
 80057da:	b430      	push	{r4, r5}
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 80057dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80057de:	0f9a      	lsrs	r2, r3, #30
 80057e0:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80057e2:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80057e6:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 80057e8:	f3c3 6301 	ubfx	r3, r3, #24, #2
 80057ec:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 80057ee:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80057f2:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 80057f4:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 80057f8:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80057fa:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80057fe:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8005800:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	80cb      	strh	r3, [r1, #6]
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8005808:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800580c:	88cc      	ldrh	r4, [r1, #6]
 800580e:	f3c3 1203 	ubfx	r2, r3, #4, #4
 8005812:	4322      	orrs	r2, r4
 8005814:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800581c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8005820:	09da      	lsrs	r2, r3, #7
 8005822:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8005824:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8005828:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800582a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800582e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8005830:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005834:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8005836:	2200      	movs	r2, #0
 8005838:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800583a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800583c:	2a00      	cmp	r2, #0
 800583e:	f040 8092 	bne.w	8005966 <HAL_SD_GetCardCSD+0x18c>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8005842:	029b      	lsls	r3, r3, #10
 8005844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005848:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800584a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp) << 2;
 800584c:	690a      	ldr	r2, [r1, #16]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8005854:	4313      	orrs	r3, r2
 8005856:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8005858:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800585a:	690a      	ldr	r2, [r1, #16]
 800585c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005860:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8005862:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 8005866:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8005868:	f3c3 6302 	ubfx	r3, r3, #24, #3
 800586c:	754b      	strb	r3, [r1, #21]
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800586e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005870:	f3c2 4307 	ubfx	r3, r2, #16, #8
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8005874:	f3c2 5442 	ubfx	r4, r2, #21, #3
 8005878:	758c      	strb	r4, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800587a:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800587e:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	f003 0306 	and.w	r3, r3, #6
 8005886:	760b      	strb	r3, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8005888:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800588a:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800588e:	7e0c      	ldrb	r4, [r1, #24]
 8005890:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005894:	4322      	orrs	r2, r4
 8005896:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8005898:	690a      	ldr	r2, [r1, #16]
 800589a:	3201      	adds	r2, #1
 800589c:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800589e:	7e0c      	ldrb	r4, [r1, #24]
 80058a0:	3402      	adds	r4, #2
 80058a2:	fa02 f404 	lsl.w	r4, r2, r4
 80058a6:	6544      	str	r4, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80058a8:	7a0a      	ldrb	r2, [r1, #8]
 80058aa:	b2d5      	uxtb	r5, r2
 80058ac:	2201      	movs	r2, #1
 80058ae:	40aa      	lsls	r2, r5
 80058b0:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80058b2:	0a52      	lsrs	r2, r2, #9
 80058b4:	fb02 f204 	mul.w	r2, r2, r4
 80058b8:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 80058ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058be:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80058c0:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80058c4:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80058cc:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80058ce:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80058d0:	7e8a      	ldrb	r2, [r1, #26]
 80058d2:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80058d6:	4322      	orrs	r2, r4
 80058d8:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80058da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058de:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 80058e0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80058e2:	0e1a      	lsrs	r2, r3, #24
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80058e4:	0fdc      	lsrs	r4, r3, #31
 80058e6:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80058e8:	f3c3 7441 	ubfx	r4, r3, #29, #2
 80058ec:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80058ee:	f3c3 6382 	ubfx	r3, r3, #26, #3
 80058f2:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80058f4:	0093      	lsls	r3, r2, #2
 80058f6:	f003 030c 	and.w	r3, r3, #12
 80058fa:	77cb      	strb	r3, [r1, #31]
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80058fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80058fe:	7fca      	ldrb	r2, [r1, #31]
 8005900:	f3c3 5481 	ubfx	r4, r3, #22, #2
 8005904:	4322      	orrs	r2, r4
 8005906:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005908:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800590c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 8005910:	2200      	movs	r2, #0
 8005912:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005916:	f3c3 4300 	ubfx	r3, r3, #16, #1
 800591a:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800591e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8005920:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8005924:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8005928:	f3c3 3480 	ubfx	r4, r3, #14, #1
 800592c:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8005930:	f3c3 3440 	ubfx	r4, r3, #13, #1
 8005934:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8005938:	f3c3 3400 	ubfx	r4, r3, #12, #1
 800593c:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8005940:	f3c3 2481 	ubfx	r4, r3, #10, #2
 8005944:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8005948:	f3c3 2301 	ubfx	r3, r3, #8, #2
 800594c:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8005950:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8005952:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8005956:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800595a:	2301      	movs	r3, #1
 800595c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  return HAL_OK;
 8005960:	4610      	mov	r0, r2
}
 8005962:	bc30      	pop	{r4, r5}
 8005964:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005966:	2a01      	cmp	r2, #1
 8005968:	d00c      	beq.n	8005984 <HAL_SD_GetCardCSD+0x1aa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800596a:	6803      	ldr	r3, [r0, #0]
 800596c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005972:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005978:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800597a:	2201      	movs	r2, #1
 800597c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    return HAL_ERROR;
 8005980:	4610      	mov	r0, r2
 8005982:	e7ee      	b.n	8005962 <HAL_SD_GetCardCSD+0x188>
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8005984:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800598c:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800598e:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    pCSD->DeviceSize |= (tmp << 8);
 8005992:	690b      	ldr	r3, [r1, #16]
 8005994:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005998:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 800599a:	690a      	ldr	r2, [r1, #16]
 800599c:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 80059a0:	4313      	orrs	r3, r2
 80059a2:	610b      	str	r3, [r1, #16]
 80059a4:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80059a8:	690a      	ldr	r2, [r1, #16]
 80059aa:	3201      	adds	r2, #1
 80059ac:	0292      	lsls	r2, r2, #10
 80059ae:	6542      	str	r2, [r0, #84]	; 0x54
 80059b0:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80059b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b6:	6582      	str	r2, [r0, #88]	; 0x58
 80059b8:	6602      	str	r2, [r0, #96]	; 0x60
 80059ba:	e781      	b.n	80058c0 <HAL_SD_GetCardCSD+0xe6>

080059bc <SD_InitCard>:
{
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	b090      	sub	sp, #64	; 0x40
 80059c0:	4604      	mov	r4, r0
  uint16_t sd_rca = 1;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80059c8:	6800      	ldr	r0, [r0, #0]
 80059ca:	f001 fefd 	bl	80077c8 <SDMMC_GetPowerState>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d06a      	beq.n	8005aa8 <SD_InitCard+0xec>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80059d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d143      	bne.n	8005a60 <SD_InitCard+0xa4>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80059d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d15b      	bne.n	8005a96 <SD_InitCard+0xda>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80059de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d01d      	beq.n	8005a20 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80059e4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80059e8:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059ea:	0409      	lsls	r1, r1, #16
 80059ec:	6820      	ldr	r0, [r4, #0]
 80059ee:	f002 fa1c 	bl	8007e2a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80059f2:	4605      	mov	r5, r0
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d159      	bne.n	8005aac <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80059f8:	2100      	movs	r1, #0
 80059fa:	6820      	ldr	r0, [r4, #0]
 80059fc:	f001 ff3e 	bl	800787c <SDMMC_GetResponse>
 8005a00:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a02:	2104      	movs	r1, #4
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	f001 ff39 	bl	800787c <SDMMC_GetResponse>
 8005a0a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a0c:	2108      	movs	r1, #8
 8005a0e:	6820      	ldr	r0, [r4, #0]
 8005a10:	f001 ff34 	bl	800787c <SDMMC_GetResponse>
 8005a14:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a16:	210c      	movs	r1, #12
 8005a18:	6820      	ldr	r0, [r4, #0]
 8005a1a:	f001 ff2f 	bl	800787c <SDMMC_GetResponse>
 8005a1e:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8005a20:	2104      	movs	r1, #4
 8005a22:	6820      	ldr	r0, [r4, #0]
 8005a24:	f001 ff2a 	bl	800787c <SDMMC_GetResponse>
 8005a28:	0d00      	lsrs	r0, r0, #20
 8005a2a:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005a2c:	a905      	add	r1, sp, #20
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f7ff fed3 	bl	80057da <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8005a34:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005a36:	0412      	lsls	r2, r2, #16
 8005a38:	2300      	movs	r3, #0
 8005a3a:	6820      	ldr	r0, [r4, #0]
 8005a3c:	f002 f93c 	bl	8007cb8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a40:	4605      	mov	r5, r0
 8005a42:	bb98      	cbnz	r0, 8005aac <SD_InitCard+0xf0>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8005a44:	4623      	mov	r3, r4
 8005a46:	f853 6b10 	ldr.w	r6, [r3], #16
 8005a4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005a52:	3404      	adds	r4, #4
 8005a54:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f001 fe29 	bl	80076b0 <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 8005a5e:	e025      	b.n	8005aac <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	f002 f9cd 	bl	8007e00 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a66:	4605      	mov	r5, r0
 8005a68:	bb00      	cbnz	r0, 8005aac <SD_InitCard+0xf0>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	6820      	ldr	r0, [r4, #0]
 8005a6e:	f001 ff05 	bl	800787c <SDMMC_GetResponse>
 8005a72:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a74:	2104      	movs	r1, #4
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	f001 ff00 	bl	800787c <SDMMC_GetResponse>
 8005a7c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a7e:	2108      	movs	r1, #8
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	f001 fefb 	bl	800787c <SDMMC_GetResponse>
 8005a86:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a88:	210c      	movs	r1, #12
 8005a8a:	6820      	ldr	r0, [r4, #0]
 8005a8c:	f001 fef6 	bl	800787c <SDMMC_GetResponse>
 8005a90:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8005a94:	e7a0      	b.n	80059d8 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a96:	f10d 0112 	add.w	r1, sp, #18
 8005a9a:	6820      	ldr	r0, [r4, #0]
 8005a9c:	f002 f9da 	bl	8007e54 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d09b      	beq.n	80059de <SD_InitCard+0x22>
 8005aa6:	e001      	b.n	8005aac <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005aa8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8005aac:	4628      	mov	r0, r5
 8005aae:	b010      	add	sp, #64	; 0x40
 8005ab0:	bd70      	pop	{r4, r5, r6, pc}

08005ab2 <HAL_SD_InitCard>:
{
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	b08a      	sub	sp, #40	; 0x28
 8005ab6:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005abc:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005abe:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005ac0:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005ac2:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005ac4:	2376      	movs	r3, #118	; 0x76
 8005ac6:	9309      	str	r3, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 8005ac8:	ab0a      	add	r3, sp, #40	; 0x28
 8005aca:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005ace:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005ad2:	ab04      	add	r3, sp, #16
 8005ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ad6:	6820      	ldr	r0, [r4, #0]
 8005ad8:	f001 fdea 	bl	80076b0 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	6853      	ldr	r3, [r2, #4]
 8005ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae4:	6053      	str	r3, [r2, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8005ae6:	6820      	ldr	r0, [r4, #0]
 8005ae8:	f001 fe6a 	bl	80077c0 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	6853      	ldr	r3, [r2, #4]
 8005af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af4:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8005af6:	2002      	movs	r0, #2
 8005af8:	f7fb fbb0 	bl	800125c <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8005afc:	4620      	mov	r0, r4
 8005afe:	f7ff fb19 	bl	8005134 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b02:	b140      	cbz	r0, 8005b16 <HAL_SD_InitCard+0x64>
 8005b04:	4602      	mov	r2, r0
    hsd->State = HAL_SD_STATE_READY;
 8005b06:	2001      	movs	r0, #1
 8005b08:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005b12:	b00a      	add	sp, #40	; 0x28
 8005b14:	bd10      	pop	{r4, pc}
  errorstate = SD_InitCard(hsd);
 8005b16:	4620      	mov	r0, r4
 8005b18:	f7ff ff50 	bl	80059bc <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	b130      	cbz	r0, 8005b2e <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8005b20:	2001      	movs	r0, #1
 8005b22:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005b26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005b2c:	e7f1      	b.n	8005b12 <HAL_SD_InitCard+0x60>
  return HAL_OK;
 8005b2e:	2000      	movs	r0, #0
 8005b30:	e7ef      	b.n	8005b12 <HAL_SD_InitCard+0x60>
	...

08005b34 <HAL_SD_Init>:
  if(hsd == NULL)
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d079      	beq.n	8005c2c <HAL_SD_Init+0xf8>
{
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 8005b3c:	6802      	ldr	r2, [r0, #0]
 8005b3e:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <HAL_SD_Init+0xfc>)
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d004      	beq.n	8005b4e <HAL_SD_Init+0x1a>
 8005b44:	f240 1155 	movw	r1, #341	; 0x155
 8005b48:	483a      	ldr	r0, [pc, #232]	; (8005c34 <HAL_SD_Init+0x100>)
 8005b4a:	f00c ffd3 	bl	8012af4 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 8005b4e:	6862      	ldr	r2, [r4, #4]
 8005b50:	f5b2 5300 	subs.w	r3, r2, #8192	; 0x2000
 8005b54:	bf18      	it	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	2a00      	cmp	r2, #0
 8005b5a:	bf08      	it	eq
 8005b5c:	2300      	moveq	r3, #0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d13b      	bne.n	8005bda <HAL_SD_Init+0xa6>
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8005b62:	68a2      	ldr	r2, [r4, #8]
 8005b64:	f5b2 6380 	subs.w	r3, r2, #1024	; 0x400
 8005b68:	bf18      	it	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	2a00      	cmp	r2, #0
 8005b6e:	bf08      	it	eq
 8005b70:	2300      	moveq	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d137      	bne.n	8005be6 <HAL_SD_Init+0xb2>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8005b76:	68e2      	ldr	r2, [r4, #12]
 8005b78:	f5b2 7300 	subs.w	r3, r2, #512	; 0x200
 8005b7c:	bf18      	it	ne
 8005b7e:	2301      	movne	r3, #1
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	bf08      	it	eq
 8005b84:	2300      	moveq	r3, #0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d133      	bne.n	8005bf2 <HAL_SD_Init+0xbe>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 8005b8a:	6922      	ldr	r2, [r4, #16]
 8005b8c:	f5b2 6300 	subs.w	r3, r2, #2048	; 0x800
 8005b90:	bf18      	it	ne
 8005b92:	2301      	movne	r3, #1
 8005b94:	2a00      	cmp	r2, #0
 8005b96:	bf08      	it	eq
 8005b98:	2300      	moveq	r3, #0
 8005b9a:	b113      	cbz	r3, 8005ba2 <HAL_SD_Init+0x6e>
 8005b9c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005ba0:	d12d      	bne.n	8005bfe <HAL_SD_Init+0xca>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8005ba2:	6962      	ldr	r2, [r4, #20]
 8005ba4:	f5b2 4380 	subs.w	r3, r2, #16384	; 0x4000
 8005ba8:	bf18      	it	ne
 8005baa:	2301      	movne	r3, #1
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	bf08      	it	eq
 8005bb0:	2300      	moveq	r3, #0
 8005bb2:	bb53      	cbnz	r3, 8005c0a <HAL_SD_Init+0xd6>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8005bb4:	69a3      	ldr	r3, [r4, #24]
 8005bb6:	2bff      	cmp	r3, #255	; 0xff
 8005bb8:	d82d      	bhi.n	8005c16 <HAL_SD_Init+0xe2>
  if(hsd->State == HAL_SD_STATE_RESET)
 8005bba:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005bbe:	b383      	cbz	r3, 8005c22 <HAL_SD_Init+0xee>
  hsd->State = HAL_SD_STATE_BUSY;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f7ff ff73 	bl	8005ab2 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bcc:	2000      	movs	r0, #0
 8005bce:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005bd0:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005bd8:	bd10      	pop	{r4, pc}
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 8005bda:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8005bde:	4815      	ldr	r0, [pc, #84]	; (8005c34 <HAL_SD_Init+0x100>)
 8005be0:	f00c ff88 	bl	8012af4 <assert_failed>
 8005be4:	e7bd      	b.n	8005b62 <HAL_SD_Init+0x2e>
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8005be6:	f240 1157 	movw	r1, #343	; 0x157
 8005bea:	4812      	ldr	r0, [pc, #72]	; (8005c34 <HAL_SD_Init+0x100>)
 8005bec:	f00c ff82 	bl	8012af4 <assert_failed>
 8005bf0:	e7c1      	b.n	8005b76 <HAL_SD_Init+0x42>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8005bf2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005bf6:	480f      	ldr	r0, [pc, #60]	; (8005c34 <HAL_SD_Init+0x100>)
 8005bf8:	f00c ff7c 	bl	8012af4 <assert_failed>
 8005bfc:	e7c5      	b.n	8005b8a <HAL_SD_Init+0x56>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 8005bfe:	f240 1159 	movw	r1, #345	; 0x159
 8005c02:	480c      	ldr	r0, [pc, #48]	; (8005c34 <HAL_SD_Init+0x100>)
 8005c04:	f00c ff76 	bl	8012af4 <assert_failed>
 8005c08:	e7cb      	b.n	8005ba2 <HAL_SD_Init+0x6e>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8005c0a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005c0e:	4809      	ldr	r0, [pc, #36]	; (8005c34 <HAL_SD_Init+0x100>)
 8005c10:	f00c ff70 	bl	8012af4 <assert_failed>
 8005c14:	e7ce      	b.n	8005bb4 <HAL_SD_Init+0x80>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8005c16:	f240 115b 	movw	r1, #347	; 0x15b
 8005c1a:	4806      	ldr	r0, [pc, #24]	; (8005c34 <HAL_SD_Init+0x100>)
 8005c1c:	f00c ff6a 	bl	8012af4 <assert_failed>
 8005c20:	e7cb      	b.n	8005bba <HAL_SD_Init+0x86>
    hsd->Lock = HAL_UNLOCKED;
 8005c22:	7723      	strb	r3, [r4, #28]
    HAL_SD_MspInit(hsd);
 8005c24:	4620      	mov	r0, r4
 8005c26:	f00e fab5 	bl	8014194 <HAL_SD_MspInit>
 8005c2a:	e7c9      	b.n	8005bc0 <HAL_SD_Init+0x8c>
    return HAL_ERROR;
 8005c2c:	2001      	movs	r0, #1
}
 8005c2e:	4770      	bx	lr
 8005c30:	40012c00 	.word	0x40012c00
 8005c34:	08017d98 	.word	0x08017d98

08005c38 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005c38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005c3a:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005c3c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005c3e:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005c40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005c42:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005c44:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005c46:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005c48:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005c4a:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005c4c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005c4e:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005c50:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005c52:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005c54:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005c56:	61cb      	str	r3, [r1, #28]
}
 8005c58:	2000      	movs	r0, #0
 8005c5a:	4770      	bx	lr

08005c5c <HAL_SD_ConfigWideBusOperation>:
{
 8005c5c:	b530      	push	{r4, r5, lr}
 8005c5e:	b08b      	sub	sp, #44	; 0x2c
 8005c60:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 8005c62:	460d      	mov	r5, r1
 8005c64:	f5b1 6300 	subs.w	r3, r1, #2048	; 0x800
 8005c68:	bf18      	it	ne
 8005c6a:	2301      	movne	r3, #1
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	bf14      	ite	ne
 8005c70:	4619      	movne	r1, r3
 8005c72:	2100      	moveq	r1, #0
 8005c74:	b111      	cbz	r1, 8005c7c <HAL_SD_ConfigWideBusOperation+0x20>
 8005c76:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005c7a:	d111      	bne.n	8005ca0 <HAL_SD_ConfigWideBusOperation+0x44>
  hsd->State = HAL_SD_STATE_BUSY;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005c82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d024      	beq.n	8005cd2 <HAL_SD_ConfigWideBusOperation+0x76>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005c88:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005c8c:	d00e      	beq.n	8005cac <HAL_SD_ConfigWideBusOperation+0x50>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005c8e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005c92:	d010      	beq.n	8005cb6 <HAL_SD_ConfigWideBusOperation+0x5a>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005c94:	b1b5      	cbz	r5, 8005cc4 <HAL_SD_ConfigWideBusOperation+0x68>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c9e:	e01c      	b.n	8005cda <HAL_SD_ConfigWideBusOperation+0x7e>
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 8005ca0:	f640 01b6 	movw	r1, #2230	; 0x8b6
 8005ca4:	481f      	ldr	r0, [pc, #124]	; (8005d24 <HAL_SD_ConfigWideBusOperation+0xc8>)
 8005ca6:	f00c ff25 	bl	8012af4 <assert_failed>
 8005caa:	e7e7      	b.n	8005c7c <HAL_SD_ConfigWideBusOperation+0x20>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8005cb4:	e011      	b.n	8005cda <HAL_SD_ConfigWideBusOperation+0x7e>
      errorstate = SD_WideBus_Enable(hsd);
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f7ff fb29 	bl	800530e <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8005cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cbe:	4318      	orrs	r0, r3
 8005cc0:	63a0      	str	r0, [r4, #56]	; 0x38
 8005cc2:	e00a      	b.n	8005cda <HAL_SD_ConfigWideBusOperation+0x7e>
      errorstate = SD_WideBus_Disable(hsd);
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f7ff fb4d 	bl	8005364 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8005cca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ccc:	4318      	orrs	r0, r3
 8005cce:	63a0      	str	r0, [r4, #56]	; 0x38
 8005cd0:	e003      	b.n	8005cda <HAL_SD_ConfigWideBusOperation+0x7e>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005cda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cdc:	b143      	cbz	r3, 8005cf0 <HAL_SD_ConfigWideBusOperation+0x94>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8005cec:	b00b      	add	sp, #44	; 0x2c
 8005cee:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005cf0:	6863      	ldr	r3, [r4, #4]
 8005cf2:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005cf4:	68a3      	ldr	r3, [r4, #8]
 8005cf6:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005cf8:	68e3      	ldr	r3, [r4, #12]
 8005cfa:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8005cfc:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005cfe:	6963      	ldr	r3, [r4, #20]
 8005d00:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005d02:	69a3      	ldr	r3, [r4, #24]
 8005d04:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 8005d06:	ab0a      	add	r3, sp, #40	; 0x28
 8005d08:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005d0c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005d10:	ab04      	add	r3, sp, #16
 8005d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d14:	6820      	ldr	r0, [r4, #0]
 8005d16:	f001 fccb 	bl	80076b0 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005d20:	2000      	movs	r0, #0
 8005d22:	e7e3      	b.n	8005cec <HAL_SD_ConfigWideBusOperation+0x90>
 8005d24:	08017d98 	.word	0x08017d98

08005d28 <HAL_SD_GetCardState>:
{
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8005d2e:	a902      	add	r1, sp, #8
 8005d30:	2300      	movs	r3, #0
 8005d32:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8005d36:	f7ff fb40 	bl	80053ba <SD_SendStatus>
  if(errorstate != HAL_OK)
 8005d3a:	b118      	cbz	r0, 8005d44 <HAL_SD_GetCardState+0x1c>
 8005d3c:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 8005d3e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005d40:	4318      	orrs	r0, r3
 8005d42:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005d44:	9801      	ldr	r0, [sp, #4]
 8005d46:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8005d4a:	b002      	add	sp, #8
 8005d4c:	bd10      	pop	{r4, pc}

08005d4e <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005d4e:	b1d8      	cbz	r0, 8005d88 <HAL_SDRAM_Init+0x3a>
{   
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4604      	mov	r4, r0
 8005d54:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005d56:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005d5a:	b183      	cbz	r3, 8005d7e <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005d62:	1d21      	adds	r1, r4, #4
 8005d64:	6820      	ldr	r0, [r4, #0]
 8005d66:	f001 fa17 	bl	8007198 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005d6a:	6862      	ldr	r2, [r4, #4]
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	6820      	ldr	r0, [r4, #0]
 8005d70:	f001 faf0 	bl	8007354 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8005d7a:	2000      	movs	r0, #0
}
 8005d7c:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005d7e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005d82:	f00b fe89 	bl	8011a98 <HAL_SDRAM_MspInit>
 8005d86:	e7e9      	b.n	8005d5c <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8005d88:	2001      	movs	r0, #1
}
 8005d8a:	4770      	bx	lr

08005d8c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005d8c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005d8e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d014      	beq.n	8005dc2 <HAL_SDRAM_SendCommand+0x36>
 8005d98:	460d      	mov	r5, r1
 8005d9a:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005da2:	6800      	ldr	r0, [r0, #0]
 8005da4:	f001 fb7e 	bl	80074a4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d004      	beq.n	8005db8 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005db4:	2000      	movs	r0, #0
}
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005db8:	2305      	movs	r3, #5
 8005dba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e7f9      	b.n	8005db6 <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 8005dc2:	2002      	movs	r0, #2
 8005dc4:	e7f7      	b.n	8005db6 <HAL_SDRAM_SendCommand+0x2a>

08005dc6 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005dc6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d00c      	beq.n	8005dea <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	f001 fbae 	bl	800753c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8005de6:	2000      	movs	r0, #0
}
 8005de8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005dea:	2002      	movs	r0, #2
}
 8005dec:	4770      	bx	lr

08005dee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df0:	4605      	mov	r5, r0
 8005df2:	460f      	mov	r7, r1
 8005df4:	4616      	mov	r6, r2
 8005df6:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	ea37 0303 	bics.w	r3, r7, r3
 8005e00:	bf0c      	ite	eq
 8005e02:	2301      	moveq	r3, #1
 8005e04:	2300      	movne	r3, #0
 8005e06:	42b3      	cmp	r3, r6
 8005e08:	d037      	beq.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e0a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005e0e:	d0f3      	beq.n	8005df8 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005e10:	f7fb fa1e 	bl	8001250 <HAL_GetTick>
 8005e14:	9b06      	ldr	r3, [sp, #24]
 8005e16:	1ac0      	subs	r0, r0, r3
 8005e18:	42a0      	cmp	r0, r4
 8005e1a:	d201      	bcs.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0x32>
 8005e1c:	2c00      	cmp	r4, #0
 8005e1e:	d1eb      	bne.n	8005df8 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e20:	682a      	ldr	r2, [r5, #0]
 8005e22:	6853      	ldr	r3, [r2, #4]
 8005e24:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005e28:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e2a:	686b      	ldr	r3, [r5, #4]
 8005e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e30:	d00b      	beq.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e32:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e38:	d014      	beq.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e40:	2300      	movs	r3, #0
 8005e42:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e46:	2003      	movs	r0, #3
 8005e48:	e018      	b.n	8005e7c <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e4a:	68ab      	ldr	r3, [r5, #8]
 8005e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e50:	bf18      	it	ne
 8005e52:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8005e56:	d1ec      	bne.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8005e58:	682a      	ldr	r2, [r5, #0]
 8005e5a:	6813      	ldr	r3, [r2, #0]
 8005e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e7e6      	b.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8005e64:	682a      	ldr	r2, [r5, #0]
 8005e66:	6813      	ldr	r3, [r2, #0]
 8005e68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	682a      	ldr	r2, [r5, #0]
 8005e70:	6813      	ldr	r3, [r2, #0]
 8005e72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e7df      	b.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8005e7a:	2000      	movs	r0, #0
}
 8005e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e7e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e80:	4607      	mov	r7, r0
 8005e82:	460d      	mov	r5, r1
 8005e84:	4614      	mov	r4, r2
 8005e86:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8005e88:	e002      	b.n	8005e90 <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e8a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005e8e:	d10b      	bne.n	8005ea8 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	6893      	ldr	r3, [r2, #8]
 8005e94:	402b      	ands	r3, r5
 8005e96:	42a3      	cmp	r3, r4
 8005e98:	d03b      	beq.n	8005f12 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e9a:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8005e9e:	bf08      	it	eq
 8005ea0:	2c00      	cmpeq	r4, #0
 8005ea2:	d1f2      	bne.n	8005e8a <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005ea4:	7b13      	ldrb	r3, [r2, #12]
 8005ea6:	e7f0      	b.n	8005e8a <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ea8:	f7fb f9d2 	bl	8001250 <HAL_GetTick>
 8005eac:	9b06      	ldr	r3, [sp, #24]
 8005eae:	1ac0      	subs	r0, r0, r3
 8005eb0:	42b0      	cmp	r0, r6
 8005eb2:	d201      	bcs.n	8005eb8 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8005eb4:	2e00      	cmp	r6, #0
 8005eb6:	d1eb      	bne.n	8005e90 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	6853      	ldr	r3, [r2, #4]
 8005ebc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005ec0:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec8:	d00b      	beq.n	8005ee2 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed0:	d014      	beq.n	8005efc <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ede:	2003      	movs	r0, #3
 8005ee0:	e018      	b.n	8005f14 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee8:	bf18      	it	ne
 8005eea:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8005eee:	d1ec      	bne.n	8005eca <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	e7e6      	b.n	8005eca <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	6813      	ldr	r3, [r2, #0]
 8005f00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	6813      	ldr	r3, [r2, #0]
 8005f0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	e7df      	b.n	8005ed2 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8005f12:	2000      	movs	r0, #0
}
 8005f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f16 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f16:	b570      	push	{r4, r5, r6, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	460d      	mov	r5, r1
 8005f1e:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f20:	9200      	str	r2, [sp, #0]
 8005f22:	460b      	mov	r3, r1
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f2a:	f7ff ffa8 	bl	8005e7e <SPI_WaitFifoStateUntilTimeout>
 8005f2e:	b9b8      	cbnz	r0, 8005f60 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f30:	9600      	str	r6, [sp, #0]
 8005f32:	462b      	mov	r3, r5
 8005f34:	2200      	movs	r2, #0
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f7ff ff58 	bl	8005dee <SPI_WaitFlagStateUntilTimeout>
 8005f3e:	b9b8      	cbnz	r0, 8005f70 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f40:	9600      	str	r6, [sp, #0]
 8005f42:	462b      	mov	r3, r5
 8005f44:	2200      	movs	r2, #0
 8005f46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f7ff ff97 	bl	8005e7e <SPI_WaitFifoStateUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	b150      	cbz	r0, 8005f6a <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f54:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f56:	f043 0320 	orr.w	r3, r3, #32
 8005f5a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e004      	b.n	8005f6a <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f60:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f62:	f043 0320 	orr.w	r3, r3, #32
 8005f66:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f70:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f72:	f043 0320 	orr.w	r3, r3, #32
 8005f76:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e7f6      	b.n	8005f6a <SPI_EndRxTxTransaction+0x54>

08005f7c <HAL_SPI_Init>:
  if (hspi == NULL)
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f000 8140 	beq.w	8006202 <HAL_SPI_Init+0x286>
{
 8005f82:	b510      	push	{r4, lr}
 8005f84:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005f86:	6803      	ldr	r3, [r0, #0]
 8005f88:	499f      	ldr	r1, [pc, #636]	; (8006208 <HAL_SPI_Init+0x28c>)
 8005f8a:	4aa0      	ldr	r2, [pc, #640]	; (800620c <HAL_SPI_Init+0x290>)
 8005f8c:	428b      	cmp	r3, r1
 8005f8e:	bf18      	it	ne
 8005f90:	4293      	cmpne	r3, r2
 8005f92:	d014      	beq.n	8005fbe <HAL_SPI_Init+0x42>
 8005f94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d010      	beq.n	8005fbe <HAL_SPI_Init+0x42>
 8005f9c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00c      	beq.n	8005fbe <HAL_SPI_Init+0x42>
 8005fa4:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d008      	beq.n	8005fbe <HAL_SPI_Init+0x42>
 8005fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_SPI_Init+0x42>
 8005fb4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005fb8:	4895      	ldr	r0, [pc, #596]	; (8006210 <HAL_SPI_Init+0x294>)
 8005fba:	f00c fd9b 	bl	8012af4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	f5b2 7382 	subs.w	r3, r2, #260	; 0x104
 8005fc4:	bf18      	it	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	bf08      	it	eq
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 80cf 	bne.w	8006172 <HAL_SPI_Init+0x1f6>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005fd4:	68a2      	ldr	r2, [r4, #8]
 8005fd6:	f5b2 6380 	subs.w	r3, r2, #1024	; 0x400
 8005fda:	bf18      	it	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	bf08      	it	eq
 8005fe2:	2300      	moveq	r3, #0
 8005fe4:	b11b      	cbz	r3, 8005fee <HAL_SPI_Init+0x72>
 8005fe6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005fea:	f040 80c8 	bne.w	800617e <HAL_SPI_Init+0x202>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005fee:	68e3      	ldr	r3, [r4, #12]
 8005ff0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ff4:	bf18      	it	ne
 8005ff6:	f5b3 6f60 	cmpne.w	r3, #3584	; 0xe00
 8005ffa:	d021      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 8005ffc:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8006000:	d01e      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 8006002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006006:	d01b      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 8006008:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800600c:	d018      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 800600e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006012:	d015      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 8006014:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8006018:	d012      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 800601a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601e:	d00f      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 8006020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006024:	d00c      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 8006026:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800602a:	d009      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 800602c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006030:	d006      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 8006032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006036:	d003      	beq.n	8006040 <HAL_SPI_Init+0xc4>
 8006038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603c:	f040 80a5 	bne.w	800618a <HAL_SPI_Init+0x20e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006040:	69a3      	ldr	r3, [r4, #24]
 8006042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006046:	bf18      	it	ne
 8006048:	2b00      	cmpne	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_SPI_Init+0xd8>
 800604c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006050:	f040 80a1 	bne.w	8006196 <HAL_SPI_Init+0x21a>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006054:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006056:	2b08      	cmp	r3, #8
 8006058:	bf18      	it	ne
 800605a:	2b00      	cmpne	r3, #0
 800605c:	f040 80a1 	bne.w	80061a2 <HAL_SPI_Init+0x226>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006060:	69e3      	ldr	r3, [r4, #28]
 8006062:	f1b3 0208 	subs.w	r2, r3, #8
 8006066:	bf18      	it	ne
 8006068:	2201      	movne	r2, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	bf08      	it	eq
 800606e:	2200      	moveq	r2, #0
 8006070:	b162      	cbz	r2, 800608c <HAL_SPI_Init+0x110>
 8006072:	2b10      	cmp	r3, #16
 8006074:	d00a      	beq.n	800608c <HAL_SPI_Init+0x110>
 8006076:	2b18      	cmp	r3, #24
 8006078:	d008      	beq.n	800608c <HAL_SPI_Init+0x110>
 800607a:	2b20      	cmp	r3, #32
 800607c:	d006      	beq.n	800608c <HAL_SPI_Init+0x110>
 800607e:	2b28      	cmp	r3, #40	; 0x28
 8006080:	d004      	beq.n	800608c <HAL_SPI_Init+0x110>
 8006082:	2b30      	cmp	r3, #48	; 0x30
 8006084:	d002      	beq.n	800608c <HAL_SPI_Init+0x110>
 8006086:	2b38      	cmp	r3, #56	; 0x38
 8006088:	f040 8091 	bne.w	80061ae <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800608c:	6a22      	ldr	r2, [r4, #32]
 800608e:	f1b2 0380 	subs.w	r3, r2, #128	; 0x80
 8006092:	bf18      	it	ne
 8006094:	2301      	movne	r3, #1
 8006096:	2a00      	cmp	r2, #0
 8006098:	bf08      	it	eq
 800609a:	2300      	moveq	r3, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	f040 808c 	bne.w	80061ba <HAL_SPI_Init+0x23e>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80060a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80060a4:	f1b2 0310 	subs.w	r3, r2, #16
 80060a8:	bf18      	it	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	2a00      	cmp	r2, #0
 80060ae:	bf08      	it	eq
 80060b0:	2300      	moveq	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f040 8087 	bne.w	80061c6 <HAL_SPI_Init+0x24a>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ba:	b96b      	cbnz	r3, 80060d8 <HAL_SPI_Init+0x15c>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80060bc:	6922      	ldr	r2, [r4, #16]
 80060be:	1e93      	subs	r3, r2, #2
 80060c0:	bf18      	it	ne
 80060c2:	2301      	movne	r3, #1
 80060c4:	2a00      	cmp	r2, #0
 80060c6:	bf08      	it	eq
 80060c8:	2300      	moveq	r3, #0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 8081 	bne.w	80061d2 <HAL_SPI_Init+0x256>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80060d0:	6963      	ldr	r3, [r4, #20]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	f200 8083 	bhi.w	80061de <HAL_SPI_Init+0x262>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060d8:	2300      	movs	r3, #0
 80060da:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80060dc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8082 	beq.w	80061ea <HAL_SPI_Init+0x26e>
  hspi->State = HAL_SPI_STATE_BUSY;
 80060e6:	2302      	movs	r3, #2
 80060e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060f6:	68e3      	ldr	r3, [r4, #12]
 80060f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060fc:	d97b      	bls.n	80061f6 <HAL_SPI_Init+0x27a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060fe:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006100:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006104:	bf18      	it	ne
 8006106:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 800610a:	d001      	beq.n	8006110 <HAL_SPI_Init+0x194>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800610c:	2100      	movs	r1, #0
 800610e:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006110:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006112:	b921      	cbnz	r1, 800611e <HAL_SPI_Init+0x1a2>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006118:	d970      	bls.n	80061fc <HAL_SPI_Init+0x280>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800611a:	2302      	movs	r3, #2
 800611c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	68a1      	ldr	r1, [r4, #8]
 8006122:	430b      	orrs	r3, r1
 8006124:	6921      	ldr	r1, [r4, #16]
 8006126:	430b      	orrs	r3, r1
 8006128:	6961      	ldr	r1, [r4, #20]
 800612a:	430b      	orrs	r3, r1
 800612c:	69a1      	ldr	r1, [r4, #24]
 800612e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8006132:	430b      	orrs	r3, r1
 8006134:	69e1      	ldr	r1, [r4, #28]
 8006136:	430b      	orrs	r3, r1
 8006138:	6a21      	ldr	r1, [r4, #32]
 800613a:	430b      	orrs	r3, r1
 800613c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800613e:	6821      	ldr	r1, [r4, #0]
 8006140:	4303      	orrs	r3, r0
 8006142:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006144:	8b63      	ldrh	r3, [r4, #26]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800614c:	430b      	orrs	r3, r1
 800614e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006150:	430b      	orrs	r3, r1
 8006152:	68e1      	ldr	r1, [r4, #12]
 8006154:	430b      	orrs	r3, r1
 8006156:	6821      	ldr	r1, [r4, #0]
 8006158:	4313      	orrs	r3, r2
 800615a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	69d3      	ldr	r3, [r2, #28]
 8006160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006164:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006166:	2000      	movs	r0, #0
 8006168:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800616a:	2301      	movs	r3, #1
 800616c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8006170:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006172:	f240 1145 	movw	r1, #325	; 0x145
 8006176:	4826      	ldr	r0, [pc, #152]	; (8006210 <HAL_SPI_Init+0x294>)
 8006178:	f00c fcbc 	bl	8012af4 <assert_failed>
 800617c:	e72a      	b.n	8005fd4 <HAL_SPI_Init+0x58>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800617e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006182:	4823      	ldr	r0, [pc, #140]	; (8006210 <HAL_SPI_Init+0x294>)
 8006184:	f00c fcb6 	bl	8012af4 <assert_failed>
 8006188:	e731      	b.n	8005fee <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800618a:	f240 1147 	movw	r1, #327	; 0x147
 800618e:	4820      	ldr	r0, [pc, #128]	; (8006210 <HAL_SPI_Init+0x294>)
 8006190:	f00c fcb0 	bl	8012af4 <assert_failed>
 8006194:	e754      	b.n	8006040 <HAL_SPI_Init+0xc4>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006196:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800619a:	481d      	ldr	r0, [pc, #116]	; (8006210 <HAL_SPI_Init+0x294>)
 800619c:	f00c fcaa 	bl	8012af4 <assert_failed>
 80061a0:	e758      	b.n	8006054 <HAL_SPI_Init+0xd8>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80061a2:	f240 1149 	movw	r1, #329	; 0x149
 80061a6:	481a      	ldr	r0, [pc, #104]	; (8006210 <HAL_SPI_Init+0x294>)
 80061a8:	f00c fca4 	bl	8012af4 <assert_failed>
 80061ac:	e758      	b.n	8006060 <HAL_SPI_Init+0xe4>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80061ae:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80061b2:	4817      	ldr	r0, [pc, #92]	; (8006210 <HAL_SPI_Init+0x294>)
 80061b4:	f00c fc9e 	bl	8012af4 <assert_failed>
 80061b8:	e768      	b.n	800608c <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80061ba:	f240 114b 	movw	r1, #331	; 0x14b
 80061be:	4814      	ldr	r0, [pc, #80]	; (8006210 <HAL_SPI_Init+0x294>)
 80061c0:	f00c fc98 	bl	8012af4 <assert_failed>
 80061c4:	e76d      	b.n	80060a2 <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80061c6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80061ca:	4811      	ldr	r0, [pc, #68]	; (8006210 <HAL_SPI_Init+0x294>)
 80061cc:	f00c fc92 	bl	8012af4 <assert_failed>
 80061d0:	e772      	b.n	80060b8 <HAL_SPI_Init+0x13c>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80061d2:	f240 114f 	movw	r1, #335	; 0x14f
 80061d6:	480e      	ldr	r0, [pc, #56]	; (8006210 <HAL_SPI_Init+0x294>)
 80061d8:	f00c fc8c 	bl	8012af4 <assert_failed>
 80061dc:	e778      	b.n	80060d0 <HAL_SPI_Init+0x154>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80061de:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80061e2:	480b      	ldr	r0, [pc, #44]	; (8006210 <HAL_SPI_Init+0x294>)
 80061e4:	f00c fc86 	bl	8012af4 <assert_failed>
 80061e8:	e776      	b.n	80060d8 <HAL_SPI_Init+0x15c>
    hspi->Lock = HAL_UNLOCKED;
 80061ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80061ee:	4620      	mov	r0, r4
 80061f0:	f00e f840 	bl	8014274 <HAL_SPI_MspInit>
 80061f4:	e777      	b.n	80060e6 <HAL_SPI_Init+0x16a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061fa:	e781      	b.n	8006100 <HAL_SPI_Init+0x184>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80061fc:	2301      	movs	r3, #1
 80061fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006200:	e78d      	b.n	800611e <HAL_SPI_Init+0x1a2>
    return HAL_ERROR;
 8006202:	2001      	movs	r0, #1
}
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40013000 	.word	0x40013000
 800620c:	40003800 	.word	0x40003800
 8006210:	08017dd0 	.word	0x08017dd0

08006214 <HAL_SPI_TransmitReceive_IT>:
{
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	4604      	mov	r4, r0
 8006218:	460f      	mov	r7, r1
 800621a:	4616      	mov	r6, r2
 800621c:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800621e:	6883      	ldr	r3, [r0, #8]
 8006220:	b9a3      	cbnz	r3, 800624c <HAL_SPI_TransmitReceive_IT+0x38>
  __HAL_LOCK(hspi);
 8006222:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d06f      	beq.n	800630a <HAL_SPI_TransmitReceive_IT+0xf6>
 800622a:	2301      	movs	r3, #1
 800622c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8006230:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006234:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8006236:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006238:	2b01      	cmp	r3, #1
 800623a:	d014      	beq.n	8006266 <HAL_SPI_TransmitReceive_IT+0x52>
 800623c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006240:	d00a      	beq.n	8006258 <HAL_SPI_TransmitReceive_IT+0x44>
    errorcode = HAL_BUSY;
 8006242:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8006244:	2300      	movs	r3, #0
 8006246:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800624c:	f240 619a 	movw	r1, #1690	; 0x69a
 8006250:	482f      	ldr	r0, [pc, #188]	; (8006310 <HAL_SPI_TransmitReceive_IT+0xfc>)
 8006252:	f00c fc4f 	bl	8012af4 <assert_failed>
 8006256:	e7e4      	b.n	8006222 <HAL_SPI_TransmitReceive_IT+0xe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006258:	68a2      	ldr	r2, [r4, #8]
 800625a:	2a00      	cmp	r2, #0
 800625c:	d14d      	bne.n	80062fa <HAL_SPI_TransmitReceive_IT+0xe6>
 800625e:	2b04      	cmp	r3, #4
 8006260:	d001      	beq.n	8006266 <HAL_SPI_TransmitReceive_IT+0x52>
    errorcode = HAL_BUSY;
 8006262:	2002      	movs	r0, #2
 8006264:	e7ee      	b.n	8006244 <HAL_SPI_TransmitReceive_IT+0x30>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006266:	fab6 f386 	clz	r3, r6
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	2f00      	cmp	r7, #0
 800626e:	bf08      	it	eq
 8006270:	2301      	moveq	r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d143      	bne.n	80062fe <HAL_SPI_TransmitReceive_IT+0xea>
 8006276:	2d00      	cmp	r5, #0
 8006278:	d043      	beq.n	8006302 <HAL_SPI_TransmitReceive_IT+0xee>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800627a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b04      	cmp	r3, #4
 8006282:	d002      	beq.n	800628a <HAL_SPI_TransmitReceive_IT+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006284:	2305      	movs	r3, #5
 8006286:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800628a:	2300      	movs	r3, #0
 800628c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800628e:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006290:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006292:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006294:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006296:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800629a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062a4:	d91e      	bls.n	80062e4 <HAL_SPI_TransmitReceive_IT+0xd0>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80062a6:	4b1b      	ldr	r3, [pc, #108]	; (8006314 <HAL_SPI_TransmitReceive_IT+0x100>)
 80062a8:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80062aa:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <HAL_SPI_TransmitReceive_IT+0x104>)
 80062ac:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062b4:	d801      	bhi.n	80062ba <HAL_SPI_TransmitReceive_IT+0xa6>
 80062b6:	2d01      	cmp	r5, #1
 80062b8:	d919      	bls.n	80062ee <HAL_SPI_TransmitReceive_IT+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	6853      	ldr	r3, [r2, #4]
 80062be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062c2:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	6853      	ldr	r3, [r2, #4]
 80062c8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80062cc:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80062d6:	d116      	bne.n	8006306 <HAL_SPI_TransmitReceive_IT+0xf2>
    __HAL_SPI_ENABLE(hspi);
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062de:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062e0:	2000      	movs	r0, #0
 80062e2:	e7af      	b.n	8006244 <HAL_SPI_TransmitReceive_IT+0x30>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80062e4:	4b0d      	ldr	r3, [pc, #52]	; (800631c <HAL_SPI_TransmitReceive_IT+0x108>)
 80062e6:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80062e8:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <HAL_SPI_TransmitReceive_IT+0x10c>)
 80062ea:	6523      	str	r3, [r4, #80]	; 0x50
 80062ec:	e7df      	b.n	80062ae <HAL_SPI_TransmitReceive_IT+0x9a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	6853      	ldr	r3, [r2, #4]
 80062f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062f6:	6053      	str	r3, [r2, #4]
 80062f8:	e7e4      	b.n	80062c4 <HAL_SPI_TransmitReceive_IT+0xb0>
    errorcode = HAL_BUSY;
 80062fa:	2002      	movs	r0, #2
 80062fc:	e7a2      	b.n	8006244 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_ERROR;
 80062fe:	2001      	movs	r0, #1
 8006300:	e7a0      	b.n	8006244 <HAL_SPI_TransmitReceive_IT+0x30>
 8006302:	2001      	movs	r0, #1
 8006304:	e79e      	b.n	8006244 <HAL_SPI_TransmitReceive_IT+0x30>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006306:	2000      	movs	r0, #0
 8006308:	e79c      	b.n	8006244 <HAL_SPI_TransmitReceive_IT+0x30>
  __HAL_LOCK(hspi);
 800630a:	2002      	movs	r0, #2
 800630c:	e79d      	b.n	800624a <HAL_SPI_TransmitReceive_IT+0x36>
 800630e:	bf00      	nop
 8006310:	08017dd0 	.word	0x08017dd0
 8006314:	0800648f 	.word	0x0800648f
 8006318:	08006457 	.word	0x08006457
 800631c:	080063df 	.word	0x080063df
 8006320:	08006387 	.word	0x08006387

08006324 <HAL_SPI_RxCpltCallback>:
}
 8006324:	4770      	bx	lr

08006326 <HAL_SPI_ErrorCallback>:
}
 8006326:	4770      	bx	lr

08006328 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006328:	b510      	push	{r4, lr}
 800632a:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800632c:	f7fa ff90 	bl	8001250 <HAL_GetTick>

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	6853      	ldr	r3, [r2, #4]
 8006334:	f023 0320 	bic.w	r3, r3, #32
 8006338:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800633a:	4602      	mov	r2, r0
 800633c:	2164      	movs	r1, #100	; 0x64
 800633e:	4620      	mov	r0, r4
 8006340:	f7ff fde9 	bl	8005f16 <SPI_EndRxTxTransaction>
 8006344:	b118      	cbz	r0, 800634e <SPI_CloseRxTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006346:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006348:	f043 0320 	orr.w	r3, r3, #32
 800634c:	6623      	str	r3, [r4, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800634e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006350:	b993      	cbnz	r3, 8006378 <SPI_CloseRxTx_ISR+0x50>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006352:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b04      	cmp	r3, #4
 800635a:	d006      	beq.n	800636a <SPI_CloseRxTx_ISR+0x42>
        HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
      else
      {
        hspi->State = HAL_SPI_STATE_READY;
 800635c:	2301      	movs	r3, #1
 800635e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->TxRxCpltCallback(hspi);
#else
        HAL_SPI_TxRxCpltCallback(hspi);
 8006362:	4620      	mov	r0, r4
 8006364:	f00e ff6a 	bl	801523c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006368:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800636a:	2301      	movs	r3, #1
 800636c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff ffd7 	bl	8006324 <HAL_SPI_RxCpltCallback>
 8006376:	e7f7      	b.n	8006368 <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 8006378:	2301      	movs	r3, #1
 800637a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800637e:	4620      	mov	r0, r4
 8006380:	f7ff ffd1 	bl	8006326 <HAL_SPI_ErrorCallback>
}
 8006384:	e7f0      	b.n	8006368 <SPI_CloseRxTx_ISR+0x40>

08006386 <SPI_2linesTxISR_8BIT>:
{
 8006386:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 8006388:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d917      	bls.n	80063c0 <SPI_2linesTxISR_8BIT+0x3a>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006390:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006392:	6803      	ldr	r3, [r0, #0]
 8006394:	8812      	ldrh	r2, [r2, #0]
 8006396:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006398:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800639a:	3302      	adds	r3, #2
 800639c:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800639e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80063a0:	3b02      	subs	r3, #2
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80063a6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	b943      	cbnz	r3, 80063be <SPI_2linesTxISR_8BIT+0x38>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80063ac:	6802      	ldr	r2, [r0, #0]
 80063ae:	6853      	ldr	r3, [r2, #4]
 80063b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b4:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80063b6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	b163      	cbz	r3, 80063d8 <SPI_2linesTxISR_8BIT+0x52>
}
 80063be:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80063c2:	6803      	ldr	r3, [r0, #0]
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	731a      	strb	r2, [r3, #12]
    hspi->pTxBuffPtr++;
 80063c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063ca:	3301      	adds	r3, #1
 80063cc:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 80063ce:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	87c3      	strh	r3, [r0, #62]	; 0x3e
 80063d6:	e7e6      	b.n	80063a6 <SPI_2linesTxISR_8BIT+0x20>
      SPI_CloseRxTx_ISR(hspi);
 80063d8:	f7ff ffa6 	bl	8006328 <SPI_CloseRxTx_ISR>
}
 80063dc:	e7ef      	b.n	80063be <SPI_2linesTxISR_8BIT+0x38>

080063de <SPI_2linesRxISR_8BIT>:
{
 80063de:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 80063e0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d924      	bls.n	8006434 <SPI_2linesRxISR_8BIT+0x56>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80063ea:	6803      	ldr	r3, [r0, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063f0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80063f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063f4:	3302      	adds	r3, #2
 80063f6:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80063f8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80063fc:	3b02      	subs	r3, #2
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006404:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d00c      	beq.n	8006428 <SPI_2linesRxISR_8BIT+0x4a>
  if (hspi->RxXferCount == 0U)
 800640e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006412:	b29b      	uxth	r3, r3
 8006414:	b93b      	cbnz	r3, 8006426 <SPI_2linesRxISR_8BIT+0x48>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006416:	6802      	ldr	r2, [r0, #0]
 8006418:	6853      	ldr	r3, [r2, #4]
 800641a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800641e:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8006420:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006422:	b29b      	uxth	r3, r3
 8006424:	b1a3      	cbz	r3, 8006450 <SPI_2linesRxISR_8BIT+0x72>
}
 8006426:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006428:	6802      	ldr	r2, [r0, #0]
 800642a:	6853      	ldr	r3, [r2, #4]
 800642c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006430:	6053      	str	r3, [r2, #4]
 8006432:	e7ec      	b.n	800640e <SPI_2linesRxISR_8BIT+0x30>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006434:	6802      	ldr	r2, [r0, #0]
 8006436:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006438:	7b12      	ldrb	r2, [r2, #12]
 800643a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800643c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800643e:	3301      	adds	r3, #1
 8006440:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8006442:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006446:	3b01      	subs	r3, #1
 8006448:	b29b      	uxth	r3, r3
 800644a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 800644e:	e7de      	b.n	800640e <SPI_2linesRxISR_8BIT+0x30>
      SPI_CloseRxTx_ISR(hspi);
 8006450:	f7ff ff6a 	bl	8006328 <SPI_CloseRxTx_ISR>
}
 8006454:	e7e7      	b.n	8006426 <SPI_2linesRxISR_8BIT+0x48>

08006456 <SPI_2linesTxISR_16BIT>:
{
 8006456:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006458:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800645a:	6803      	ldr	r3, [r0, #0]
 800645c:	8812      	ldrh	r2, [r2, #0]
 800645e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006460:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006462:	3302      	adds	r3, #2
 8006464:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8006466:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006468:	3b01      	subs	r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800646e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006470:	b29b      	uxth	r3, r3
 8006472:	b943      	cbnz	r3, 8006486 <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006474:	6802      	ldr	r2, [r0, #0]
 8006476:	6853      	ldr	r3, [r2, #4]
 8006478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800647c:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800647e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006482:	b29b      	uxth	r3, r3
 8006484:	b103      	cbz	r3, 8006488 <SPI_2linesTxISR_16BIT+0x32>
}
 8006486:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8006488:	f7ff ff4e 	bl	8006328 <SPI_CloseRxTx_ISR>
}
 800648c:	e7fb      	b.n	8006486 <SPI_2linesTxISR_16BIT+0x30>

0800648e <SPI_2linesRxISR_16BIT>:
{
 800648e:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006490:	6803      	ldr	r3, [r0, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006496:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006498:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800649a:	3302      	adds	r3, #2
 800649c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800649e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80064aa:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	b93b      	cbnz	r3, 80064c2 <SPI_2linesRxISR_16BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80064b2:	6802      	ldr	r2, [r0, #0]
 80064b4:	6853      	ldr	r3, [r2, #4]
 80064b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ba:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 80064bc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	b103      	cbz	r3, 80064c4 <SPI_2linesRxISR_16BIT+0x36>
}
 80064c2:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80064c4:	f7ff ff30 	bl	8006328 <SPI_CloseRxTx_ISR>
}
 80064c8:	e7fb      	b.n	80064c2 <SPI_2linesRxISR_16BIT+0x34>
	...

080064cc <HAL_SPI_IRQHandler>:
{
 80064cc:	b530      	push	{r4, r5, lr}
 80064ce:	b085      	sub	sp, #20
 80064d0:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80064d2:	6802      	ldr	r2, [r0, #0]
 80064d4:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80064d6:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064d8:	f3c3 1180 	ubfx	r1, r3, #6, #1
 80064dc:	b949      	cbnz	r1, 80064f2 <HAL_SPI_IRQHandler+0x26>
 80064de:	f013 0f01 	tst.w	r3, #1
 80064e2:	d006      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064e8:	d003      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 80064ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80064ec:	4620      	mov	r0, r4
 80064ee:	4798      	blx	r3
    return;
 80064f0:	e008      	b.n	8006504 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064f2:	f013 0f02 	tst.w	r3, #2
 80064f6:	d007      	beq.n	8006508 <HAL_SPI_IRQHandler+0x3c>
 80064f8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80064fc:	d004      	beq.n	8006508 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 80064fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006500:	4620      	mov	r0, r4
 8006502:	4798      	blx	r3
}
 8006504:	b005      	add	sp, #20
 8006506:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006508:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800650c:	b91d      	cbnz	r5, 8006516 <HAL_SPI_IRQHandler+0x4a>
 800650e:	b911      	cbnz	r1, 8006516 <HAL_SPI_IRQHandler+0x4a>
 8006510:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006514:	d0f6      	beq.n	8006504 <HAL_SPI_IRQHandler+0x38>
 8006516:	f010 0f20 	tst.w	r0, #32
 800651a:	d0f3      	beq.n	8006504 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800651c:	b179      	cbz	r1, 800653e <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800651e:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 8006522:	b2c9      	uxtb	r1, r1
 8006524:	2903      	cmp	r1, #3
 8006526:	d053      	beq.n	80065d0 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006528:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800652a:	f041 0104 	orr.w	r1, r1, #4
 800652e:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006530:	2100      	movs	r1, #0
 8006532:	9100      	str	r1, [sp, #0]
 8006534:	68d1      	ldr	r1, [r2, #12]
 8006536:	9100      	str	r1, [sp, #0]
 8006538:	6891      	ldr	r1, [r2, #8]
 800653a:	9100      	str	r1, [sp, #0]
 800653c:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800653e:	b165      	cbz	r5, 800655a <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006540:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006542:	f041 0101 	orr.w	r1, r1, #1
 8006546:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006548:	2100      	movs	r1, #0
 800654a:	9102      	str	r1, [sp, #8]
 800654c:	6891      	ldr	r1, [r2, #8]
 800654e:	9102      	str	r1, [sp, #8]
 8006550:	6811      	ldr	r1, [r2, #0]
 8006552:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006556:	6011      	str	r1, [r2, #0]
 8006558:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800655a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800655e:	d009      	beq.n	8006574 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006560:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006562:	f043 0308 	orr.w	r3, r3, #8
 8006566:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006568:	2300      	movs	r3, #0
 800656a:	9303      	str	r3, [sp, #12]
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	9303      	str	r3, [sp, #12]
 8006572:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006574:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0c4      	beq.n	8006504 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	6853      	ldr	r3, [r2, #4]
 800657e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006582:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8006584:	2301      	movs	r3, #1
 8006586:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800658a:	f010 0f03 	tst.w	r0, #3
 800658e:	d027      	beq.n	80065e0 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	6853      	ldr	r3, [r2, #4]
 8006594:	f023 0303 	bic.w	r3, r3, #3
 8006598:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800659a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800659c:	b14b      	cbz	r3, 80065b2 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800659e:	4a12      	ldr	r2, [pc, #72]	; (80065e8 <HAL_SPI_IRQHandler+0x11c>)
 80065a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80065a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a4:	f7fb f9c6 	bl	8001934 <HAL_DMA_Abort_IT>
 80065a8:	b118      	cbz	r0, 80065b2 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80065ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b0:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80065b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0a5      	beq.n	8006504 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80065b8:	4a0b      	ldr	r2, [pc, #44]	; (80065e8 <HAL_SPI_IRQHandler+0x11c>)
 80065ba:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80065bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065be:	f7fb f9b9 	bl	8001934 <HAL_DMA_Abort_IT>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d09e      	beq.n	8006504 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80065c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065cc:	6623      	str	r3, [r4, #96]	; 0x60
 80065ce:	e799      	b.n	8006504 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065d0:	2300      	movs	r3, #0
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	68d3      	ldr	r3, [r2, #12]
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6893      	ldr	r3, [r2, #8]
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	9b01      	ldr	r3, [sp, #4]
        return;
 80065de:	e791      	b.n	8006504 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7ff fea0 	bl	8006326 <HAL_SPI_ErrorCallback>
 80065e6:	e78d      	b.n	8006504 <HAL_SPI_IRQHandler+0x38>
 80065e8:	080065ed 	.word	0x080065ed

080065ec <SPI_DMAAbortOnError>:
{
 80065ec:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80065f6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80065f8:	f7ff fe95 	bl	8006326 <HAL_SPI_ErrorCallback>
}
 80065fc:	bd08      	pop	{r3, pc}

080065fe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fe:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006600:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006602:	6a04      	ldr	r4, [r0, #32]
 8006604:	f024 0401 	bic.w	r4, r4, #1
 8006608:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800660c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006610:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006614:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006618:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800661a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800661c:	6203      	str	r3, [r0, #32]
}
 800661e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006622:	4770      	bx	lr

08006624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006624:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006626:	6a03      	ldr	r3, [r0, #32]
 8006628:	f023 0310 	bic.w	r3, r3, #16
 800662c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006630:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006632:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006636:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800663a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800663e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006642:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006644:	6203      	str	r3, [r0, #32]
}
 8006646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800664a:	4770      	bx	lr

0800664c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800664c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006652:	4319      	orrs	r1, r3
 8006654:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006658:	6081      	str	r1, [r0, #8]
}
 800665a:	4770      	bx	lr

0800665c <HAL_TIM_Base_Start_IT>:
{
 800665c:	b510      	push	{r4, lr}
 800665e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006660:	6803      	ldr	r3, [r0, #0]
 8006662:	4a27      	ldr	r2, [pc, #156]	; (8006700 <HAL_TIM_Base_Start_IT+0xa4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	bf18      	it	ne
 8006668:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800666c:	d034      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 800666e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006672:	4293      	cmp	r3, r2
 8006674:	d030      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 8006676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800667a:	4293      	cmp	r3, r2
 800667c:	d02c      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 800667e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006682:	4293      	cmp	r3, r2
 8006684:	d028      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 8006686:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800668a:	4293      	cmp	r3, r2
 800668c:	d024      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 800668e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006692:	4293      	cmp	r3, r2
 8006694:	d020      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 8006696:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800669a:	4293      	cmp	r3, r2
 800669c:	d01c      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 800669e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d018      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 80066a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d014      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 80066ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d010      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 80066b6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00c      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 80066be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d008      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 80066c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d004      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
 80066ce:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80066d2:	480c      	ldr	r0, [pc, #48]	; (8006704 <HAL_TIM_Base_Start_IT+0xa8>)
 80066d4:	f00c fa0e 	bl	8012af4 <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	68d3      	ldr	r3, [r2, #12]
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	6891      	ldr	r1, [r2, #8]
 80066e6:	4b08      	ldr	r3, [pc, #32]	; (8006708 <HAL_TIM_Base_Start_IT+0xac>)
 80066e8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ea:	2b06      	cmp	r3, #6
 80066ec:	bf18      	it	ne
 80066ee:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80066f2:	d003      	beq.n	80066fc <HAL_TIM_Base_Start_IT+0xa0>
    __HAL_TIM_ENABLE(htim);
 80066f4:	6813      	ldr	r3, [r2, #0]
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	6013      	str	r3, [r2, #0]
}
 80066fc:	2000      	movs	r0, #0
 80066fe:	bd10      	pop	{r4, pc}
 8006700:	40010000 	.word	0x40010000
 8006704:	08017e08 	.word	0x08017e08
 8006708:	00010007 	.word	0x00010007

0800670c <HAL_TIM_Base_Stop_IT>:
{
 800670c:	b510      	push	{r4, lr}
 800670e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006710:	6803      	ldr	r3, [r0, #0]
 8006712:	4a28      	ldr	r2, [pc, #160]	; (80067b4 <HAL_TIM_Base_Stop_IT+0xa8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	bf18      	it	ne
 8006718:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800671c:	d034      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 800671e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006722:	4293      	cmp	r3, r2
 8006724:	d030      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 8006726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800672a:	4293      	cmp	r3, r2
 800672c:	d02c      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 800672e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006732:	4293      	cmp	r3, r2
 8006734:	d028      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 8006736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800673a:	4293      	cmp	r3, r2
 800673c:	d024      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 800673e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006742:	4293      	cmp	r3, r2
 8006744:	d020      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 8006746:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800674a:	4293      	cmp	r3, r2
 800674c:	d01c      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 800674e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006752:	4293      	cmp	r3, r2
 8006754:	d018      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 8006756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800675a:	4293      	cmp	r3, r2
 800675c:	d014      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 800675e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006762:	4293      	cmp	r3, r2
 8006764:	d010      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 8006766:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800676a:	4293      	cmp	r3, r2
 800676c:	d00c      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 800676e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006772:	4293      	cmp	r3, r2
 8006774:	d008      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 8006776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800677a:	4293      	cmp	r3, r2
 800677c:	d004      	beq.n	8006788 <HAL_TIM_Base_Stop_IT+0x7c>
 800677e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8006782:	480d      	ldr	r0, [pc, #52]	; (80067b8 <HAL_TIM_Base_Stop_IT+0xac>)
 8006784:	f00c f9b6 	bl	8012af4 <assert_failed>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006788:	6822      	ldr	r2, [r4, #0]
 800678a:	68d3      	ldr	r3, [r2, #12]
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	6a19      	ldr	r1, [r3, #32]
 8006796:	f241 1211 	movw	r2, #4369	; 0x1111
 800679a:	4211      	tst	r1, r2
 800679c:	d108      	bne.n	80067b0 <HAL_TIM_Base_Stop_IT+0xa4>
 800679e:	6a19      	ldr	r1, [r3, #32]
 80067a0:	f240 4244 	movw	r2, #1092	; 0x444
 80067a4:	4211      	tst	r1, r2
 80067a6:	d103      	bne.n	80067b0 <HAL_TIM_Base_Stop_IT+0xa4>
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
}
 80067b0:	2000      	movs	r0, #0
 80067b2:	bd10      	pop	{r4, pc}
 80067b4:	40010000 	.word	0x40010000
 80067b8:	08017e08 	.word	0x08017e08

080067bc <HAL_TIM_PeriodElapsedCallback>:
}
 80067bc:	4770      	bx	lr

080067be <HAL_TIM_OC_DelayElapsedCallback>:
}
 80067be:	4770      	bx	lr

080067c0 <HAL_TIM_IC_CaptureCallback>:
}
 80067c0:	4770      	bx	lr

080067c2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80067c2:	4770      	bx	lr

080067c4 <HAL_TIM_TriggerCallback>:
}
 80067c4:	4770      	bx	lr

080067c6 <HAL_TIM_IRQHandler>:
{
 80067c6:	b510      	push	{r4, lr}
 80067c8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067ca:	6803      	ldr	r3, [r0, #0]
 80067cc:	691a      	ldr	r2, [r3, #16]
 80067ce:	f012 0f02 	tst.w	r2, #2
 80067d2:	d011      	beq.n	80067f8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	f012 0f02 	tst.w	r2, #2
 80067da:	d00d      	beq.n	80067f8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067dc:	f06f 0202 	mvn.w	r2, #2
 80067e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e2:	2301      	movs	r3, #1
 80067e4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067e6:	6803      	ldr	r3, [r0, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f013 0f03 	tst.w	r3, #3
 80067ee:	d079      	beq.n	80068e4 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80067f0:	f7ff ffe6 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f4:	2300      	movs	r3, #0
 80067f6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	f012 0f04 	tst.w	r2, #4
 8006800:	d012      	beq.n	8006828 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	f012 0f04 	tst.w	r2, #4
 8006808:	d00e      	beq.n	8006828 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800680a:	f06f 0204 	mvn.w	r2, #4
 800680e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006810:	2302      	movs	r3, #2
 8006812:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f413 7f40 	tst.w	r3, #768	; 0x300
 800681c:	d068      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800681e:	4620      	mov	r0, r4
 8006820:	f7ff ffce 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006824:	2300      	movs	r3, #0
 8006826:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	f012 0f08 	tst.w	r2, #8
 8006830:	d012      	beq.n	8006858 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	f012 0f08 	tst.w	r2, #8
 8006838:	d00e      	beq.n	8006858 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800683a:	f06f 0208 	mvn.w	r2, #8
 800683e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006840:	2304      	movs	r3, #4
 8006842:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f013 0f03 	tst.w	r3, #3
 800684c:	d057      	beq.n	80068fe <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff ffb6 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006854:	2300      	movs	r3, #0
 8006856:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	f012 0f10 	tst.w	r2, #16
 8006860:	d012      	beq.n	8006888 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	f012 0f10 	tst.w	r2, #16
 8006868:	d00e      	beq.n	8006888 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800686a:	f06f 0210 	mvn.w	r2, #16
 800686e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006870:	2308      	movs	r3, #8
 8006872:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f413 7f40 	tst.w	r3, #768	; 0x300
 800687c:	d046      	beq.n	800690c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800687e:	4620      	mov	r0, r4
 8006880:	f7ff ff9e 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006884:	2300      	movs	r3, #0
 8006886:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	f012 0f01 	tst.w	r2, #1
 8006890:	d003      	beq.n	800689a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	f012 0f01 	tst.w	r2, #1
 8006898:	d13f      	bne.n	800691a <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80068a2:	d003      	beq.n	80068ac <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80068aa:	d13d      	bne.n	8006928 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80068bc:	d13b      	bne.n	8006936 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80068c6:	d003      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 80068ce:	d139      	bne.n	8006944 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	f012 0f20 	tst.w	r2, #32
 80068d8:	d003      	beq.n	80068e2 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	f012 0f20 	tst.w	r2, #32
 80068e0:	d137      	bne.n	8006952 <HAL_TIM_IRQHandler+0x18c>
}
 80068e2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e4:	f7ff ff6b 	bl	80067be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7ff ff6a 	bl	80067c2 <HAL_TIM_PWM_PulseFinishedCallback>
 80068ee:	e781      	b.n	80067f4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f0:	4620      	mov	r0, r4
 80068f2:	f7ff ff64 	bl	80067be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff ff63 	bl	80067c2 <HAL_TIM_PWM_PulseFinishedCallback>
 80068fc:	e792      	b.n	8006824 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fe:	4620      	mov	r0, r4
 8006900:	f7ff ff5d 	bl	80067be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006904:	4620      	mov	r0, r4
 8006906:	f7ff ff5c 	bl	80067c2 <HAL_TIM_PWM_PulseFinishedCallback>
 800690a:	e7a3      	b.n	8006854 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690c:	4620      	mov	r0, r4
 800690e:	f7ff ff56 	bl	80067be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff ff55 	bl	80067c2 <HAL_TIM_PWM_PulseFinishedCallback>
 8006918:	e7b4      	b.n	8006884 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800691a:	f06f 0201 	mvn.w	r2, #1
 800691e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006920:	4620      	mov	r0, r4
 8006922:	f7ff ff4b 	bl	80067bc <HAL_TIM_PeriodElapsedCallback>
 8006926:	e7b8      	b.n	800689a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800692c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800692e:	4620      	mov	r0, r4
 8006930:	f000 fc2f 	bl	8007192 <HAL_TIMEx_BreakCallback>
 8006934:	e7ba      	b.n	80068ac <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006936:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800693a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fc29 	bl	8007194 <HAL_TIMEx_Break2Callback>
 8006942:	e7bc      	b.n	80068be <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006944:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006948:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800694a:	4620      	mov	r0, r4
 800694c:	f7ff ff3a 	bl	80067c4 <HAL_TIM_TriggerCallback>
 8006950:	e7be      	b.n	80068d0 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006952:	f06f 0220 	mvn.w	r2, #32
 8006956:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fc19 	bl	8007190 <HAL_TIMEx_CommutCallback>
}
 800695e:	e7c0      	b.n	80068e2 <HAL_TIM_IRQHandler+0x11c>

08006960 <TIM_Base_SetConfig>:
{
 8006960:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8006962:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006964:	4c3a      	ldr	r4, [pc, #232]	; (8006a50 <TIM_Base_SetConfig+0xf0>)
 8006966:	42a0      	cmp	r0, r4
 8006968:	bf14      	ite	ne
 800696a:	2400      	movne	r4, #0
 800696c:	2401      	moveq	r4, #1
 800696e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006972:	bf14      	ite	ne
 8006974:	4622      	movne	r2, r4
 8006976:	f044 0201 	orreq.w	r2, r4, #1
 800697a:	b9aa      	cbnz	r2, 80069a8 <TIM_Base_SetConfig+0x48>
 800697c:	4d35      	ldr	r5, [pc, #212]	; (8006a54 <TIM_Base_SetConfig+0xf4>)
 800697e:	42a8      	cmp	r0, r5
 8006980:	bf14      	ite	ne
 8006982:	2500      	movne	r5, #0
 8006984:	2501      	moveq	r5, #1
 8006986:	4e34      	ldr	r6, [pc, #208]	; (8006a58 <TIM_Base_SetConfig+0xf8>)
 8006988:	42b0      	cmp	r0, r6
 800698a:	d00d      	beq.n	80069a8 <TIM_Base_SetConfig+0x48>
 800698c:	b965      	cbnz	r5, 80069a8 <TIM_Base_SetConfig+0x48>
 800698e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8006992:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8006996:	42a8      	cmp	r0, r5
 8006998:	bf14      	ite	ne
 800699a:	2500      	movne	r5, #0
 800699c:	2501      	moveq	r5, #1
 800699e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80069a2:	42b0      	cmp	r0, r6
 80069a4:	d000      	beq.n	80069a8 <TIM_Base_SetConfig+0x48>
 80069a6:	b11d      	cbz	r5, 80069b0 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80069ac:	684d      	ldr	r5, [r1, #4]
 80069ae:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069b0:	2a00      	cmp	r2, #0
 80069b2:	d133      	bne.n	8006a1c <TIM_Base_SetConfig+0xbc>
 80069b4:	4a27      	ldr	r2, [pc, #156]	; (8006a54 <TIM_Base_SetConfig+0xf4>)
 80069b6:	4290      	cmp	r0, r2
 80069b8:	bf14      	ite	ne
 80069ba:	2200      	movne	r2, #0
 80069bc:	2201      	moveq	r2, #1
 80069be:	4d26      	ldr	r5, [pc, #152]	; (8006a58 <TIM_Base_SetConfig+0xf8>)
 80069c0:	42a8      	cmp	r0, r5
 80069c2:	d02b      	beq.n	8006a1c <TIM_Base_SetConfig+0xbc>
 80069c4:	bb52      	cbnz	r2, 8006a1c <TIM_Base_SetConfig+0xbc>
 80069c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80069ca:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80069ce:	4290      	cmp	r0, r2
 80069d0:	bf14      	ite	ne
 80069d2:	2200      	movne	r2, #0
 80069d4:	2201      	moveq	r2, #1
 80069d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80069da:	42a8      	cmp	r0, r5
 80069dc:	d01e      	beq.n	8006a1c <TIM_Base_SetConfig+0xbc>
 80069de:	b9ea      	cbnz	r2, 8006a1c <TIM_Base_SetConfig+0xbc>
 80069e0:	4a1e      	ldr	r2, [pc, #120]	; (8006a5c <TIM_Base_SetConfig+0xfc>)
 80069e2:	4290      	cmp	r0, r2
 80069e4:	bf14      	ite	ne
 80069e6:	2200      	movne	r2, #0
 80069e8:	2201      	moveq	r2, #1
 80069ea:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80069ee:	42a8      	cmp	r0, r5
 80069f0:	d014      	beq.n	8006a1c <TIM_Base_SetConfig+0xbc>
 80069f2:	b99a      	cbnz	r2, 8006a1c <TIM_Base_SetConfig+0xbc>
 80069f4:	4a1a      	ldr	r2, [pc, #104]	; (8006a60 <TIM_Base_SetConfig+0x100>)
 80069f6:	4290      	cmp	r0, r2
 80069f8:	bf14      	ite	ne
 80069fa:	2200      	movne	r2, #0
 80069fc:	2201      	moveq	r2, #1
 80069fe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006a02:	42a8      	cmp	r0, r5
 8006a04:	d00a      	beq.n	8006a1c <TIM_Base_SetConfig+0xbc>
 8006a06:	b94a      	cbnz	r2, 8006a1c <TIM_Base_SetConfig+0xbc>
 8006a08:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <TIM_Base_SetConfig+0x104>)
 8006a0a:	4290      	cmp	r0, r2
 8006a0c:	bf14      	ite	ne
 8006a0e:	2200      	movne	r2, #0
 8006a10:	2201      	moveq	r2, #1
 8006a12:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8006a16:	42a8      	cmp	r0, r5
 8006a18:	d000      	beq.n	8006a1c <TIM_Base_SetConfig+0xbc>
 8006a1a:	b11a      	cbz	r2, 8006a24 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a20:	68ca      	ldr	r2, [r1, #12]
 8006a22:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a28:	694a      	ldr	r2, [r1, #20]
 8006a2a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006a2c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a2e:	688a      	ldr	r2, [r1, #8]
 8006a30:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006a32:	680a      	ldr	r2, [r1, #0]
 8006a34:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <TIM_Base_SetConfig+0x108>)
 8006a38:	4298      	cmp	r0, r3
 8006a3a:	bf14      	ite	ne
 8006a3c:	4623      	movne	r3, r4
 8006a3e:	f044 0301 	orreq.w	r3, r4, #1
 8006a42:	b10b      	cbz	r3, 8006a48 <TIM_Base_SetConfig+0xe8>
    TIMx->RCR = Structure->RepetitionCounter;
 8006a44:	690b      	ldr	r3, [r1, #16]
 8006a46:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	6143      	str	r3, [r0, #20]
}
 8006a4c:	bc70      	pop	{r4, r5, r6}
 8006a4e:	4770      	bx	lr
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40000800 	.word	0x40000800
 8006a58:	40000400 	.word	0x40000400
 8006a5c:	40014400 	.word	0x40014400
 8006a60:	40001800 	.word	0x40001800
 8006a64:	40002000 	.word	0x40002000
 8006a68:	40010400 	.word	0x40010400

08006a6c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f000 8089 	beq.w	8006b84 <HAL_TIM_Base_Init+0x118>
{
 8006a72:	b510      	push	{r4, lr}
 8006a74:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a76:	6803      	ldr	r3, [r0, #0]
 8006a78:	4a43      	ldr	r2, [pc, #268]	; (8006b88 <HAL_TIM_Base_Init+0x11c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bf18      	it	ne
 8006a7e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006a82:	d034      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006a84:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d030      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006a8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d02c      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006a94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d028      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006a9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d024      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006aa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d020      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006aac:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d01c      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006ab4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d018      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006abc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d014      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006ac4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d010      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006acc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00c      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006ad4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d008      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006adc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_TIM_Base_Init+0x82>
 8006ae4:	f240 110d 	movw	r1, #269	; 0x10d
 8006ae8:	4828      	ldr	r0, [pc, #160]	; (8006b8c <HAL_TIM_Base_Init+0x120>)
 8006aea:	f00c f803 	bl	8012af4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006aee:	68a3      	ldr	r3, [r4, #8]
 8006af0:	f1b3 0210 	subs.w	r2, r3, #16
 8006af4:	bf18      	it	ne
 8006af6:	2201      	movne	r2, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf08      	it	eq
 8006afc:	2200      	moveq	r2, #0
 8006afe:	b12a      	cbz	r2, 8006b0c <HAL_TIM_Base_Init+0xa0>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d003      	beq.n	8006b0c <HAL_TIM_Base_Init+0xa0>
 8006b04:	2b40      	cmp	r3, #64	; 0x40
 8006b06:	d001      	beq.n	8006b0c <HAL_TIM_Base_Init+0xa0>
 8006b08:	2b60      	cmp	r3, #96	; 0x60
 8006b0a:	d123      	bne.n	8006b54 <HAL_TIM_Base_Init+0xe8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006b0c:	6922      	ldr	r2, [r4, #16]
 8006b0e:	f5b2 7380 	subs.w	r3, r2, #256	; 0x100
 8006b12:	bf18      	it	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2a00      	cmp	r2, #0
 8006b18:	bf08      	it	eq
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b113      	cbz	r3, 8006b24 <HAL_TIM_Base_Init+0xb8>
 8006b1e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006b22:	d11d      	bne.n	8006b60 <HAL_TIM_Base_Init+0xf4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006b24:	69a2      	ldr	r2, [r4, #24]
 8006b26:	f1b2 0380 	subs.w	r3, r2, #128	; 0x80
 8006b2a:	bf18      	it	ne
 8006b2c:	2301      	movne	r3, #1
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	bf08      	it	eq
 8006b32:	2300      	moveq	r3, #0
 8006b34:	b9d3      	cbnz	r3, 8006b6c <HAL_TIM_Base_Init+0x100>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b36:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006b3a:	b1eb      	cbz	r3, 8006b78 <HAL_TIM_Base_Init+0x10c>
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b42:	1d21      	adds	r1, r4, #4
 8006b44:	6820      	ldr	r0, [r4, #0]
 8006b46:	f7ff ff0b 	bl	8006960 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006b50:	2000      	movs	r0, #0
}
 8006b52:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006b54:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006b58:	480c      	ldr	r0, [pc, #48]	; (8006b8c <HAL_TIM_Base_Init+0x120>)
 8006b5a:	f00b ffcb 	bl	8012af4 <assert_failed>
 8006b5e:	e7d5      	b.n	8006b0c <HAL_TIM_Base_Init+0xa0>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006b60:	f240 110f 	movw	r1, #271	; 0x10f
 8006b64:	4809      	ldr	r0, [pc, #36]	; (8006b8c <HAL_TIM_Base_Init+0x120>)
 8006b66:	f00b ffc5 	bl	8012af4 <assert_failed>
 8006b6a:	e7db      	b.n	8006b24 <HAL_TIM_Base_Init+0xb8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006b6c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006b70:	4806      	ldr	r0, [pc, #24]	; (8006b8c <HAL_TIM_Base_Init+0x120>)
 8006b72:	f00b ffbf 	bl	8012af4 <assert_failed>
 8006b76:	e7de      	b.n	8006b36 <HAL_TIM_Base_Init+0xca>
    htim->Lock = HAL_UNLOCKED;
 8006b78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f00f f9d9 	bl	8015f34 <HAL_TIM_Base_MspInit>
 8006b82:	e7db      	b.n	8006b3c <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 8006b84:	2001      	movs	r0, #1
}
 8006b86:	4770      	bx	lr
 8006b88:	40010000 	.word	0x40010000
 8006b8c:	08017e08 	.word	0x08017e08

08006b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b90:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b92:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b94:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b98:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba0:	6083      	str	r3, [r0, #8]
}
 8006ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_TIM_ConfigClockSource>:
{
 8006ba8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006baa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	f000 8230 	beq.w	8007014 <HAL_TIM_ConfigClockSource+0x46c>
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006bc4:	680b      	ldr	r3, [r1, #0]
 8006bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bca:	bf18      	it	ne
 8006bcc:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 8006bd0:	d00e      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x48>
 8006bd2:	b16b      	cbz	r3, 8006bf0 <HAL_TIM_ConfigClockSource+0x48>
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d00b      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x48>
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d009      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x48>
 8006bdc:	2b30      	cmp	r3, #48	; 0x30
 8006bde:	d007      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x48>
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d005      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x48>
 8006be4:	2b50      	cmp	r3, #80	; 0x50
 8006be6:	d003      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x48>
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d001      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x48>
 8006bec:	2b70      	cmp	r3, #112	; 0x70
 8006bee:	d149      	bne.n	8006c84 <HAL_TIM_ConfigClockSource+0xdc>
  tmpsmcr = htim->Instance->SMCR;
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bf4:	4bb8      	ldr	r3, [pc, #736]	; (8006ed8 <HAL_TIM_ConfigClockSource+0x330>)
 8006bf6:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8006bf8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	f000 81c9 	beq.w	8006f94 <HAL_TIM_ConfigClockSource+0x3ec>
 8006c02:	d945      	bls.n	8006c90 <HAL_TIM_ConfigClockSource+0xe8>
 8006c04:	2b70      	cmp	r3, #112	; 0x70
 8006c06:	f000 80fc 	beq.w	8006e02 <HAL_TIM_ConfigClockSource+0x25a>
 8006c0a:	d86d      	bhi.n	8006ce8 <HAL_TIM_ConfigClockSource+0x140>
 8006c0c:	2b50      	cmp	r3, #80	; 0x50
 8006c0e:	f000 8175 	beq.w	8006efc <HAL_TIM_ConfigClockSource+0x354>
 8006c12:	2b60      	cmp	r3, #96	; 0x60
 8006c14:	f040 8141 	bne.w	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	4ab0      	ldr	r2, [pc, #704]	; (8006edc <HAL_TIM_ConfigClockSource+0x334>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	bf18      	it	ne
 8006c20:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006c24:	d014      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0xa8>
 8006c26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d010      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0xa8>
 8006c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00c      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0xa8>
 8006c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d008      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0xa8>
 8006c3e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0xa8>
 8006c46:	f241 2145 	movw	r1, #4677	; 0x1245
 8006c4a:	48a5      	ldr	r0, [pc, #660]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006c4c:	f00b ff52 	bl	8012af4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c50:	686b      	ldr	r3, [r5, #4]
 8006c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c56:	bf18      	it	ne
 8006c58:	2b00      	cmpne	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_TIM_ConfigClockSource+0xc0>
 8006c5c:	b123      	cbz	r3, 8006c68 <HAL_TIM_ConfigClockSource+0xc0>
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d002      	beq.n	8006c68 <HAL_TIM_ConfigClockSource+0xc0>
 8006c62:	2b0a      	cmp	r3, #10
 8006c64:	f040 818a 	bne.w	8006f7c <HAL_TIM_ConfigClockSource+0x3d4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c68:	68eb      	ldr	r3, [r5, #12]
 8006c6a:	2b0f      	cmp	r3, #15
 8006c6c:	f200 818c 	bhi.w	8006f88 <HAL_TIM_ConfigClockSource+0x3e0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c70:	68ea      	ldr	r2, [r5, #12]
 8006c72:	6869      	ldr	r1, [r5, #4]
 8006c74:	6820      	ldr	r0, [r4, #0]
 8006c76:	f7ff fcd5 	bl	8006624 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c7a:	2160      	movs	r1, #96	; 0x60
 8006c7c:	6820      	ldr	r0, [r4, #0]
 8006c7e:	f7ff fce5 	bl	800664c <TIM_ITRx_SetConfig>
      break;
 8006c82:	e10a      	b.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006c84:	f241 11f6 	movw	r1, #4598	; 0x11f6
 8006c88:	4895      	ldr	r0, [pc, #596]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006c8a:	f00b ff33 	bl	8012af4 <assert_failed>
 8006c8e:	e7af      	b.n	8006bf0 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d008      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0xfe>
 8006c94:	d904      	bls.n	8006ca0 <HAL_TIM_ConfigClockSource+0xf8>
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d005      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0xfe>
 8006c9a:	2b30      	cmp	r3, #48	; 0x30
 8006c9c:	d003      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0xfe>
 8006c9e:	e0fc      	b.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 80fa 	bne.w	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	4a8c      	ldr	r2, [pc, #560]	; (8006edc <HAL_TIM_ConfigClockSource+0x334>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	bf18      	it	ne
 8006cae:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006cb2:	d014      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x136>
 8006cb4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d010      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x136>
 8006cbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00c      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x136>
 8006cc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d008      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x136>
 8006ccc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x136>
 8006cd4:	f241 2168 	movw	r1, #4712	; 0x1268
 8006cd8:	4881      	ldr	r0, [pc, #516]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006cda:	f00b ff0b 	bl	8012af4 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cde:	6829      	ldr	r1, [r5, #0]
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	f7ff fcb3 	bl	800664c <TIM_ITRx_SetConfig>
      break;
 8006ce6:	e0d8      	b.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
  switch (sClockSourceConfig->ClockSource)
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d04b      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x1de>
 8006cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf2:	f040 80d2 	bne.w	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	4a78      	ldr	r2, [pc, #480]	; (8006edc <HAL_TIM_ConfigClockSource+0x334>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	bf18      	it	ne
 8006cfe:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006d02:	d014      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x186>
 8006d04:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d010      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x186>
 8006d0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00c      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x186>
 8006d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d008      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x186>
 8006d1c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x186>
 8006d24:	f241 2121 	movw	r1, #4641	; 0x1221
 8006d28:	486d      	ldr	r0, [pc, #436]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006d2a:	f00b fee3 	bl	8012af4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006d2e:	68aa      	ldr	r2, [r5, #8]
 8006d30:	f5b2 5380 	subs.w	r3, r2, #4096	; 0x1000
 8006d34:	bf18      	it	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	bf08      	it	eq
 8006d3c:	2300      	moveq	r3, #0
 8006d3e:	b133      	cbz	r3, 8006d4e <HAL_TIM_ConfigClockSource+0x1a6>
 8006d40:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006d44:	d003      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x1a6>
 8006d46:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8006d4a:	f040 80bf 	bne.w	8006ecc <HAL_TIM_ConfigClockSource+0x324>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006d4e:	686b      	ldr	r3, [r5, #4]
 8006d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d54:	bf18      	it	ne
 8006d56:	2b00      	cmpne	r3, #0
 8006d58:	d005      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0x1be>
 8006d5a:	b123      	cbz	r3, 8006d66 <HAL_TIM_ConfigClockSource+0x1be>
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d002      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0x1be>
 8006d60:	2b0a      	cmp	r3, #10
 8006d62:	f040 80bf 	bne.w	8006ee4 <HAL_TIM_ConfigClockSource+0x33c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006d66:	68eb      	ldr	r3, [r5, #12]
 8006d68:	2b0f      	cmp	r3, #15
 8006d6a:	f200 80c1 	bhi.w	8006ef0 <HAL_TIM_ConfigClockSource+0x348>
      TIM_ETR_SetConfig(htim->Instance,
 8006d6e:	68eb      	ldr	r3, [r5, #12]
 8006d70:	686a      	ldr	r2, [r5, #4]
 8006d72:	68a9      	ldr	r1, [r5, #8]
 8006d74:	6820      	ldr	r0, [r4, #0]
 8006d76:	f7ff ff0b 	bl	8006b90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d7a:	6822      	ldr	r2, [r4, #0]
 8006d7c:	6893      	ldr	r3, [r2, #8]
 8006d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d82:	6093      	str	r3, [r2, #8]
      break;
 8006d84:	e089      	b.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	4a54      	ldr	r2, [pc, #336]	; (8006edc <HAL_TIM_ConfigClockSource+0x334>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	bf18      	it	ne
 8006d8e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006d92:	f000 8082 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006d96:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d07d      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d079      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d075      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d071      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d06d      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006dbe:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d069      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006dc6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d065      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006dce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d061      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006dd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d05d      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006dde:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d059      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d055      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d051      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
 8006df6:	f241 2102 	movw	r1, #4610	; 0x1202
 8006dfa:	4839      	ldr	r0, [pc, #228]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006dfc:	f00b fe7a 	bl	8012af4 <assert_failed>
 8006e00:	e04b      	b.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	4a35      	ldr	r2, [pc, #212]	; (8006edc <HAL_TIM_ConfigClockSource+0x334>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	bf18      	it	ne
 8006e0a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006e0e:	d01c      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x2a2>
 8006e10:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d018      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x2a2>
 8006e18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d014      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x2a2>
 8006e20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d010      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x2a2>
 8006e28:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00c      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x2a2>
 8006e30:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d008      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x2a2>
 8006e38:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d004      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x2a2>
 8006e40:	f241 2109 	movw	r1, #4617	; 0x1209
 8006e44:	4826      	ldr	r0, [pc, #152]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006e46:	f00b fe55 	bl	8012af4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006e4a:	68aa      	ldr	r2, [r5, #8]
 8006e4c:	f5b2 5380 	subs.w	r3, r2, #4096	; 0x1000
 8006e50:	bf18      	it	ne
 8006e52:	2301      	movne	r3, #1
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	bf08      	it	eq
 8006e58:	2300      	moveq	r3, #0
 8006e5a:	b12b      	cbz	r3, 8006e68 <HAL_TIM_ConfigClockSource+0x2c0>
 8006e5c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006e60:	d002      	beq.n	8006e68 <HAL_TIM_ConfigClockSource+0x2c0>
 8006e62:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8006e66:	d11f      	bne.n	8006ea8 <HAL_TIM_ConfigClockSource+0x300>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006e68:	686b      	ldr	r3, [r5, #4]
 8006e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6e:	bf18      	it	ne
 8006e70:	2b00      	cmpne	r3, #0
 8006e72:	d004      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0x2d6>
 8006e74:	b11b      	cbz	r3, 8006e7e <HAL_TIM_ConfigClockSource+0x2d6>
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d001      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0x2d6>
 8006e7a:	2b0a      	cmp	r3, #10
 8006e7c:	d11a      	bne.n	8006eb4 <HAL_TIM_ConfigClockSource+0x30c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006e7e:	68eb      	ldr	r3, [r5, #12]
 8006e80:	2b0f      	cmp	r3, #15
 8006e82:	d81d      	bhi.n	8006ec0 <HAL_TIM_ConfigClockSource+0x318>
      TIM_ETR_SetConfig(htim->Instance,
 8006e84:	68eb      	ldr	r3, [r5, #12]
 8006e86:	686a      	ldr	r2, [r5, #4]
 8006e88:	68a9      	ldr	r1, [r5, #8]
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	f7ff fe80 	bl	8006b90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006e98:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006ea8:	f241 210c 	movw	r1, #4620	; 0x120c
 8006eac:	480c      	ldr	r0, [pc, #48]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006eae:	f00b fe21 	bl	8012af4 <assert_failed>
 8006eb2:	e7d9      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x2c0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006eb4:	f241 210d 	movw	r1, #4621	; 0x120d
 8006eb8:	4809      	ldr	r0, [pc, #36]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006eba:	f00b fe1b 	bl	8012af4 <assert_failed>
 8006ebe:	e7de      	b.n	8006e7e <HAL_TIM_ConfigClockSource+0x2d6>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ec0:	f241 210e 	movw	r1, #4622	; 0x120e
 8006ec4:	4806      	ldr	r0, [pc, #24]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006ec6:	f00b fe15 	bl	8012af4 <assert_failed>
 8006eca:	e7db      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x2dc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006ecc:	f241 2124 	movw	r1, #4644	; 0x1224
 8006ed0:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x338>)
 8006ed2:	f00b fe0f 	bl	8012af4 <assert_failed>
 8006ed6:	e73a      	b.n	8006d4e <HAL_TIM_ConfigClockSource+0x1a6>
 8006ed8:	fffe0088 	.word	0xfffe0088
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	08017e08 	.word	0x08017e08
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ee4:	f241 2125 	movw	r1, #4645	; 0x1225
 8006ee8:	484b      	ldr	r0, [pc, #300]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 8006eea:	f00b fe03 	bl	8012af4 <assert_failed>
 8006eee:	e73a      	b.n	8006d66 <HAL_TIM_ConfigClockSource+0x1be>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ef0:	f241 2126 	movw	r1, #4646	; 0x1226
 8006ef4:	4848      	ldr	r0, [pc, #288]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 8006ef6:	f00b fdfd 	bl	8012af4 <assert_failed>
 8006efa:	e738      	b.n	8006d6e <HAL_TIM_ConfigClockSource+0x1c6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	4a47      	ldr	r2, [pc, #284]	; (800701c <HAL_TIM_ConfigClockSource+0x474>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	bf18      	it	ne
 8006f04:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006f08:	d014      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x38c>
 8006f0a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d010      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x38c>
 8006f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00c      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x38c>
 8006f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d008      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x38c>
 8006f22:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d004      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x38c>
 8006f2a:	f241 2135 	movw	r1, #4661	; 0x1235
 8006f2e:	483a      	ldr	r0, [pc, #232]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 8006f30:	f00b fde0 	bl	8012af4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f34:	686b      	ldr	r3, [r5, #4]
 8006f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f3a:	bf18      	it	ne
 8006f3c:	2b00      	cmpne	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0x3a2>
 8006f40:	b11b      	cbz	r3, 8006f4a <HAL_TIM_ConfigClockSource+0x3a2>
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d001      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0x3a2>
 8006f46:	2b0a      	cmp	r3, #10
 8006f48:	d10c      	bne.n	8006f64 <HAL_TIM_ConfigClockSource+0x3bc>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f4a:	68eb      	ldr	r3, [r5, #12]
 8006f4c:	2b0f      	cmp	r3, #15
 8006f4e:	d80f      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x3c8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f50:	68ea      	ldr	r2, [r5, #12]
 8006f52:	6869      	ldr	r1, [r5, #4]
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	f7ff fb52 	bl	80065fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f5a:	2150      	movs	r1, #80	; 0x50
 8006f5c:	6820      	ldr	r0, [r4, #0]
 8006f5e:	f7ff fb75 	bl	800664c <TIM_ITRx_SetConfig>
      break;
 8006f62:	e79a      	b.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f64:	f241 2138 	movw	r1, #4664	; 0x1238
 8006f68:	482b      	ldr	r0, [pc, #172]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 8006f6a:	f00b fdc3 	bl	8012af4 <assert_failed>
 8006f6e:	e7ec      	b.n	8006f4a <HAL_TIM_ConfigClockSource+0x3a2>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f70:	f241 2139 	movw	r1, #4665	; 0x1239
 8006f74:	4828      	ldr	r0, [pc, #160]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 8006f76:	f00b fdbd 	bl	8012af4 <assert_failed>
 8006f7a:	e7e9      	b.n	8006f50 <HAL_TIM_ConfigClockSource+0x3a8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f7c:	f241 2148 	movw	r1, #4680	; 0x1248
 8006f80:	4825      	ldr	r0, [pc, #148]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 8006f82:	f00b fdb7 	bl	8012af4 <assert_failed>
 8006f86:	e66f      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0xc0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f88:	f241 2149 	movw	r1, #4681	; 0x1249
 8006f8c:	4822      	ldr	r0, [pc, #136]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 8006f8e:	f00b fdb1 	bl	8012af4 <assert_failed>
 8006f92:	e66d      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0xc8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	4a21      	ldr	r2, [pc, #132]	; (800701c <HAL_TIM_ConfigClockSource+0x474>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	bf18      	it	ne
 8006f9c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8006fa0:	d014      	beq.n	8006fcc <HAL_TIM_ConfigClockSource+0x424>
 8006fa2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d010      	beq.n	8006fcc <HAL_TIM_ConfigClockSource+0x424>
 8006faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00c      	beq.n	8006fcc <HAL_TIM_ConfigClockSource+0x424>
 8006fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d008      	beq.n	8006fcc <HAL_TIM_ConfigClockSource+0x424>
 8006fba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIM_ConfigClockSource+0x424>
 8006fc2:	f241 2155 	movw	r1, #4693	; 0x1255
 8006fc6:	4814      	ldr	r0, [pc, #80]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 8006fc8:	f00b fd94 	bl	8012af4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006fcc:	686b      	ldr	r3, [r5, #4]
 8006fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd2:	bf18      	it	ne
 8006fd4:	2b00      	cmpne	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x43a>
 8006fd8:	b11b      	cbz	r3, 8006fe2 <HAL_TIM_ConfigClockSource+0x43a>
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d001      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x43a>
 8006fde:	2b0a      	cmp	r3, #10
 8006fe0:	d10c      	bne.n	8006ffc <HAL_TIM_ConfigClockSource+0x454>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006fe2:	68eb      	ldr	r3, [r5, #12]
 8006fe4:	2b0f      	cmp	r3, #15
 8006fe6:	d80f      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x460>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe8:	68ea      	ldr	r2, [r5, #12]
 8006fea:	6869      	ldr	r1, [r5, #4]
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	f7ff fb06 	bl	80065fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff2:	2140      	movs	r1, #64	; 0x40
 8006ff4:	6820      	ldr	r0, [r4, #0]
 8006ff6:	f7ff fb29 	bl	800664c <TIM_ITRx_SetConfig>
      break;
 8006ffa:	e74e      	b.n	8006e9a <HAL_TIM_ConfigClockSource+0x2f2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ffc:	f241 2158 	movw	r1, #4696	; 0x1258
 8007000:	4805      	ldr	r0, [pc, #20]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 8007002:	f00b fd77 	bl	8012af4 <assert_failed>
 8007006:	e7ec      	b.n	8006fe2 <HAL_TIM_ConfigClockSource+0x43a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007008:	f241 2159 	movw	r1, #4697	; 0x1259
 800700c:	4802      	ldr	r0, [pc, #8]	; (8007018 <HAL_TIM_ConfigClockSource+0x470>)
 800700e:	f00b fd71 	bl	8012af4 <assert_failed>
 8007012:	e7e9      	b.n	8006fe8 <HAL_TIM_ConfigClockSource+0x440>
  __HAL_LOCK(htim);
 8007014:	2002      	movs	r0, #2
 8007016:	e746      	b.n	8006ea6 <HAL_TIM_ConfigClockSource+0x2fe>
 8007018:	08017e08 	.word	0x08017e08
 800701c:	40010000 	.word	0x40010000

08007020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	4604      	mov	r4, r0
 8007024:	460d      	mov	r5, r1
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8007026:	6803      	ldr	r3, [r0, #0]
 8007028:	4a56      	ldr	r2, [pc, #344]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800702a:	4293      	cmp	r3, r2
 800702c:	bf18      	it	ne
 800702e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007032:	d01c      	beq.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007034:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007038:	4293      	cmp	r3, r2
 800703a:	d018      	beq.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800703c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007040:	4293      	cmp	r3, r2
 8007042:	d014      	beq.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007048:	4293      	cmp	r3, r2
 800704a:	d010      	beq.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800704c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007050:	4293      	cmp	r3, r2
 8007052:	d00c      	beq.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007054:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007058:	4293      	cmp	r3, r2
 800705a:	d008      	beq.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800705c:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007060:	4293      	cmp	r3, r2
 8007062:	d004      	beq.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007064:	f240 6163 	movw	r1, #1635	; 0x663
 8007068:	4847      	ldr	r0, [pc, #284]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800706a:	f00b fd43 	bl	8012af4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	f1b3 0210 	subs.w	r2, r3, #16
 8007074:	bf18      	it	ne
 8007076:	2201      	movne	r2, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	bf08      	it	eq
 800707c:	2200      	moveq	r2, #0
 800707e:	b15a      	cbz	r2, 8007098 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007080:	2b20      	cmp	r3, #32
 8007082:	d009      	beq.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007084:	2b30      	cmp	r3, #48	; 0x30
 8007086:	d007      	beq.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007088:	2b40      	cmp	r3, #64	; 0x40
 800708a:	d005      	beq.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800708c:	2b50      	cmp	r3, #80	; 0x50
 800708e:	d003      	beq.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007090:	2b60      	cmp	r3, #96	; 0x60
 8007092:	d001      	beq.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007094:	2b70      	cmp	r3, #112	; 0x70
 8007096:	d161      	bne.n	800715c <HAL_TIMEx_MasterConfigSynchronization+0x13c>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007098:	68ab      	ldr	r3, [r5, #8]
 800709a:	2b80      	cmp	r3, #128	; 0x80
 800709c:	bf18      	it	ne
 800709e:	2b00      	cmpne	r3, #0
 80070a0:	d162      	bne.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x148>

  /* Check input state */
  __HAL_LOCK(htim);
 80070a2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d06a      	beq.n	8007180 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80070aa:	2301      	movs	r3, #1
 80070ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	2302      	movs	r3, #2
 80070b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	685e      	ldr	r6, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ba:	689f      	ldr	r7, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070bc:	4931      	ldr	r1, [pc, #196]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80070be:	4a33      	ldr	r2, [pc, #204]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	bf18      	it	ne
 80070c4:	428b      	cmpne	r3, r1
 80070c6:	d136      	bne.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0x116>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80070c8:	686b      	ldr	r3, [r5, #4]
 80070ca:	f5b3 1280 	subs.w	r2, r3, #1048576	; 0x100000
 80070ce:	bf18      	it	ne
 80070d0:	2201      	movne	r2, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bf08      	it	eq
 80070d6:	2200      	moveq	r2, #0
 80070d8:	b34a      	cbz	r2, 800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 80070da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070de:	d026      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 80070e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070e4:	d023      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 80070e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ea:	d020      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 80070ec:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80070f0:	d01d      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 80070f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070f6:	d01a      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 80070f8:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80070fc:	d017      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 80070fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007102:	d014      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 8007104:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8007108:	d011      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 800710a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800710e:	d00e      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 8007110:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8007114:	d00b      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 8007116:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800711a:	d008      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 800711c:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8007120:	d005      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 8007122:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8007126:	d002      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
 8007128:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800712c:	d122      	bne.n	8007174 <HAL_TIMEx_MasterConfigSynchronization+0x154>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800712e:	f426 0670 	bic.w	r6, r6, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007132:	686b      	ldr	r3, [r5, #4]
 8007134:	431e      	orrs	r6, r3
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007136:	f026 0670 	bic.w	r6, r6, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800713a:	682b      	ldr	r3, [r5, #0]
 800713c:	431e      	orrs	r6, r3

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800713e:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007142:	68ab      	ldr	r3, [r5, #8]
 8007144:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007146:	6822      	ldr	r2, [r4, #0]
 8007148:	6056      	str	r6, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800714a:	6822      	ldr	r2, [r4, #0]
 800714c:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800714e:	2301      	movs	r3, #1
 8007150:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007154:	2000      	movs	r0, #0
 8007156:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 800715a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800715c:	f240 6164 	movw	r1, #1636	; 0x664
 8007160:	4809      	ldr	r0, [pc, #36]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007162:	f00b fcc7 	bl	8012af4 <assert_failed>
 8007166:	e797      	b.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007168:	f240 6165 	movw	r1, #1637	; 0x665
 800716c:	4806      	ldr	r0, [pc, #24]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800716e:	f00b fcc1 	bl	8012af4 <assert_failed>
 8007172:	e796      	b.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007174:	f240 6177 	movw	r1, #1655	; 0x677
 8007178:	4803      	ldr	r0, [pc, #12]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800717a:	f00b fcbb 	bl	8012af4 <assert_failed>
 800717e:	e7d6      	b.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x10e>
  __HAL_LOCK(htim);
 8007180:	2002      	movs	r0, #2
 8007182:	e7ea      	b.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 8007184:	40010000 	.word	0x40010000
 8007188:	08017e40 	.word	0x08017e40
 800718c:	40010400 	.word	0x40010400

08007190 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007190:	4770      	bx	lr

08007192 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007192:	4770      	bx	lr

08007194 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007194:	4770      	bx	lr
	...

08007198 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4605      	mov	r5, r0
 800719c:	460c      	mov	r4, r1
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800719e:	4b6a      	ldr	r3, [pc, #424]	; (8007348 <FMC_SDRAM_Init+0x1b0>)
 80071a0:	4298      	cmp	r0, r3
 80071a2:	d004      	beq.n	80071ae <FMC_SDRAM_Init+0x16>
 80071a4:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 80071a8:	4868      	ldr	r0, [pc, #416]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 80071aa:	f00b fca3 	bl	8012af4 <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d871      	bhi.n	8007298 <FMC_SDRAM_Init+0x100>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 80071b4:	6863      	ldr	r3, [r4, #4]
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d874      	bhi.n	80072a4 <FMC_SDRAM_Init+0x10c>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 80071ba:	68a2      	ldr	r2, [r4, #8]
 80071bc:	1f13      	subs	r3, r2, #4
 80071be:	bf18      	it	ne
 80071c0:	2301      	movne	r3, #1
 80071c2:	2a00      	cmp	r2, #0
 80071c4:	bf08      	it	eq
 80071c6:	2300      	moveq	r3, #0
 80071c8:	b10b      	cbz	r3, 80071ce <FMC_SDRAM_Init+0x36>
 80071ca:	2a08      	cmp	r2, #8
 80071cc:	d170      	bne.n	80072b0 <FMC_SDRAM_Init+0x118>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 80071ce:	68e2      	ldr	r2, [r4, #12]
 80071d0:	f1b2 0310 	subs.w	r3, r2, #16
 80071d4:	bf18      	it	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	2a00      	cmp	r2, #0
 80071da:	bf08      	it	eq
 80071dc:	2300      	moveq	r3, #0
 80071de:	b10b      	cbz	r3, 80071e4 <FMC_SDRAM_Init+0x4c>
 80071e0:	2a20      	cmp	r2, #32
 80071e2:	d16b      	bne.n	80072bc <FMC_SDRAM_Init+0x124>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 80071e4:	6922      	ldr	r2, [r4, #16]
 80071e6:	f1b2 0340 	subs.w	r3, r2, #64	; 0x40
 80071ea:	bf18      	it	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	bf08      	it	eq
 80071f2:	2300      	moveq	r3, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d167      	bne.n	80072c8 <FMC_SDRAM_Init+0x130>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 80071f8:	6963      	ldr	r3, [r4, #20]
 80071fa:	2b80      	cmp	r3, #128	; 0x80
 80071fc:	bf18      	it	ne
 80071fe:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 8007202:	d002      	beq.n	800720a <FMC_SDRAM_Init+0x72>
 8007204:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007208:	d164      	bne.n	80072d4 <FMC_SDRAM_Init+0x13c>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800720a:	69a2      	ldr	r2, [r4, #24]
 800720c:	f5b2 7300 	subs.w	r3, r2, #512	; 0x200
 8007210:	bf18      	it	ne
 8007212:	2301      	movne	r3, #1
 8007214:	2a00      	cmp	r2, #0
 8007216:	bf08      	it	eq
 8007218:	2300      	moveq	r3, #0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d160      	bne.n	80072e0 <FMC_SDRAM_Init+0x148>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800721e:	69e2      	ldr	r2, [r4, #28]
 8007220:	f5b2 6300 	subs.w	r3, r2, #2048	; 0x800
 8007224:	bf18      	it	ne
 8007226:	2301      	movne	r3, #1
 8007228:	2a00      	cmp	r2, #0
 800722a:	bf08      	it	eq
 800722c:	2300      	moveq	r3, #0
 800722e:	b113      	cbz	r3, 8007236 <FMC_SDRAM_Init+0x9e>
 8007230:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007234:	d15a      	bne.n	80072ec <FMC_SDRAM_Init+0x154>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8007236:	6a22      	ldr	r2, [r4, #32]
 8007238:	f5b2 5380 	subs.w	r3, r2, #4096	; 0x1000
 800723c:	bf18      	it	ne
 800723e:	2301      	movne	r3, #1
 8007240:	2a00      	cmp	r2, #0
 8007242:	bf08      	it	eq
 8007244:	2300      	moveq	r3, #0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d156      	bne.n	80072f8 <FMC_SDRAM_Init+0x160>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 800724a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800724c:	f5b2 5300 	subs.w	r3, r2, #8192	; 0x2000
 8007250:	bf18      	it	ne
 8007252:	2301      	movne	r3, #1
 8007254:	2a00      	cmp	r2, #0
 8007256:	bf08      	it	eq
 8007258:	2300      	moveq	r3, #0
 800725a:	b113      	cbz	r3, 8007262 <FMC_SDRAM_Init+0xca>
 800725c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007260:	d150      	bne.n	8007304 <FMC_SDRAM_Init+0x16c>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d053      	beq.n	8007310 <FMC_SDRAM_Init+0x178>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007268:	682b      	ldr	r3, [r5, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800726a:	4a39      	ldr	r2, [pc, #228]	; (8007350 <FMC_SDRAM_Init+0x1b8>)
 800726c:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800726e:	6863      	ldr	r3, [r4, #4]
                        Init->RowBitsNumber      |\
 8007270:	68a1      	ldr	r1, [r4, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007272:	430b      	orrs	r3, r1
                        Init->MemoryDataWidth    |\
 8007274:	68e1      	ldr	r1, [r4, #12]
                        Init->RowBitsNumber      |\
 8007276:	430b      	orrs	r3, r1
                        Init->InternalBankNumber |\
 8007278:	6921      	ldr	r1, [r4, #16]
                        Init->MemoryDataWidth    |\
 800727a:	430b      	orrs	r3, r1
                        Init->CASLatency         |\
 800727c:	6961      	ldr	r1, [r4, #20]
                        Init->InternalBankNumber |\
 800727e:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
 8007280:	69a1      	ldr	r1, [r4, #24]
                        Init->CASLatency         |\
 8007282:	430b      	orrs	r3, r1
                        Init->SDClockPeriod      |\
 8007284:	69e1      	ldr	r1, [r4, #28]
                        Init->WriteProtection    |\
 8007286:	430b      	orrs	r3, r1
                        Init->ReadBurst          |\
 8007288:	6a21      	ldr	r1, [r4, #32]
                        Init->SDClockPeriod      |\
 800728a:	430b      	orrs	r3, r1
                        Init->ReadPipeDelay
 800728c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                        Init->ReadBurst          |\
 800728e:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007290:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007292:	602b      	str	r3, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8007294:	2000      	movs	r0, #0
 8007296:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 8007298:	f240 21ed 	movw	r1, #749	; 0x2ed
 800729c:	482b      	ldr	r0, [pc, #172]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 800729e:	f00b fc29 	bl	8012af4 <assert_failed>
 80072a2:	e787      	b.n	80071b4 <FMC_SDRAM_Init+0x1c>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 80072a4:	f240 21ee 	movw	r1, #750	; 0x2ee
 80072a8:	4828      	ldr	r0, [pc, #160]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 80072aa:	f00b fc23 	bl	8012af4 <assert_failed>
 80072ae:	e784      	b.n	80071ba <FMC_SDRAM_Init+0x22>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 80072b0:	f240 21ef 	movw	r1, #751	; 0x2ef
 80072b4:	4825      	ldr	r0, [pc, #148]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 80072b6:	f00b fc1d 	bl	8012af4 <assert_failed>
 80072ba:	e788      	b.n	80071ce <FMC_SDRAM_Init+0x36>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 80072bc:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80072c0:	4822      	ldr	r0, [pc, #136]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 80072c2:	f00b fc17 	bl	8012af4 <assert_failed>
 80072c6:	e78d      	b.n	80071e4 <FMC_SDRAM_Init+0x4c>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 80072c8:	f240 21f1 	movw	r1, #753	; 0x2f1
 80072cc:	481f      	ldr	r0, [pc, #124]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 80072ce:	f00b fc11 	bl	8012af4 <assert_failed>
 80072d2:	e791      	b.n	80071f8 <FMC_SDRAM_Init+0x60>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 80072d4:	f240 21f2 	movw	r1, #754	; 0x2f2
 80072d8:	481c      	ldr	r0, [pc, #112]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 80072da:	f00b fc0b 	bl	8012af4 <assert_failed>
 80072de:	e794      	b.n	800720a <FMC_SDRAM_Init+0x72>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 80072e0:	f240 21f3 	movw	r1, #755	; 0x2f3
 80072e4:	4819      	ldr	r0, [pc, #100]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 80072e6:	f00b fc05 	bl	8012af4 <assert_failed>
 80072ea:	e798      	b.n	800721e <FMC_SDRAM_Init+0x86>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 80072ec:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80072f0:	4816      	ldr	r0, [pc, #88]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 80072f2:	f00b fbff 	bl	8012af4 <assert_failed>
 80072f6:	e79e      	b.n	8007236 <FMC_SDRAM_Init+0x9e>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 80072f8:	f240 21f5 	movw	r1, #757	; 0x2f5
 80072fc:	4813      	ldr	r0, [pc, #76]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 80072fe:	f00b fbf9 	bl	8012af4 <assert_failed>
 8007302:	e7a2      	b.n	800724a <FMC_SDRAM_Init+0xb2>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 8007304:	f240 21f6 	movw	r1, #758	; 0x2f6
 8007308:	4810      	ldr	r0, [pc, #64]	; (800734c <FMC_SDRAM_Init+0x1b4>)
 800730a:	f00b fbf3 	bl	8012af4 <assert_failed>
 800730e:	e7a8      	b.n	8007262 <FMC_SDRAM_Init+0xca>
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007310:	6829      	ldr	r1, [r5, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007312:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007316:	69e3      	ldr	r3, [r4, #28]
                        Init->ReadBurst          |\
 8007318:	6a22      	ldr	r2, [r4, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800731a:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800731c:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        Init->ReadBurst          |\
 800731e:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007320:	430a      	orrs	r2, r1
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007322:	686b      	ldr	r3, [r5, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007324:	490a      	ldr	r1, [pc, #40]	; (8007350 <FMC_SDRAM_Init+0x1b8>)
 8007326:	4019      	ands	r1, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007328:	6863      	ldr	r3, [r4, #4]
                       Init->RowBitsNumber       |\
 800732a:	68a0      	ldr	r0, [r4, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800732c:	4303      	orrs	r3, r0
                       Init->MemoryDataWidth     |\
 800732e:	68e0      	ldr	r0, [r4, #12]
                       Init->RowBitsNumber       |\
 8007330:	4303      	orrs	r3, r0
                       Init->InternalBankNumber  |\
 8007332:	6920      	ldr	r0, [r4, #16]
                       Init->MemoryDataWidth     |\
 8007334:	4303      	orrs	r3, r0
                       Init->CASLatency          |\
 8007336:	6960      	ldr	r0, [r4, #20]
                       Init->InternalBankNumber  |\
 8007338:	4303      	orrs	r3, r0
                       Init->WriteProtection);
 800733a:	69a0      	ldr	r0, [r4, #24]
                       Init->CASLatency          |\
 800733c:	4303      	orrs	r3, r0
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800733e:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007340:	602a      	str	r2, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007342:	606b      	str	r3, [r5, #4]
 8007344:	e7a6      	b.n	8007294 <FMC_SDRAM_Init+0xfc>
 8007346:	bf00      	nop
 8007348:	a0000140 	.word	0xa0000140
 800734c:	08017e7c 	.word	0x08017e7c
 8007350:	ffff8000 	.word	0xffff8000

08007354 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	4605      	mov	r5, r0
 8007358:	460c      	mov	r4, r1
 800735a:	4616      	mov	r6, r2
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800735c:	4b4e      	ldr	r3, [pc, #312]	; (8007498 <FMC_SDRAM_Timing_Init+0x144>)
 800735e:	4298      	cmp	r0, r3
 8007360:	d004      	beq.n	800736c <FMC_SDRAM_Timing_Init+0x18>
 8007362:	f240 313d 	movw	r1, #829	; 0x33d
 8007366:	484d      	ldr	r0, [pc, #308]	; (800749c <FMC_SDRAM_Timing_Init+0x148>)
 8007368:	f00b fbc4 	bl	8012af4 <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	3b01      	subs	r3, #1
 8007370:	2b0f      	cmp	r3, #15
 8007372:	d83c      	bhi.n	80073ee <FMC_SDRAM_Timing_Init+0x9a>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 8007374:	6863      	ldr	r3, [r4, #4]
 8007376:	3b01      	subs	r3, #1
 8007378:	2b0f      	cmp	r3, #15
 800737a:	d83e      	bhi.n	80073fa <FMC_SDRAM_Timing_Init+0xa6>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800737c:	68a3      	ldr	r3, [r4, #8]
 800737e:	3b01      	subs	r3, #1
 8007380:	2b0f      	cmp	r3, #15
 8007382:	d840      	bhi.n	8007406 <FMC_SDRAM_Timing_Init+0xb2>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 8007384:	68e3      	ldr	r3, [r4, #12]
 8007386:	3b01      	subs	r3, #1
 8007388:	2b0f      	cmp	r3, #15
 800738a:	d842      	bhi.n	8007412 <FMC_SDRAM_Timing_Init+0xbe>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800738c:	6923      	ldr	r3, [r4, #16]
 800738e:	3b01      	subs	r3, #1
 8007390:	2b0f      	cmp	r3, #15
 8007392:	d844      	bhi.n	800741e <FMC_SDRAM_Timing_Init+0xca>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 8007394:	6963      	ldr	r3, [r4, #20]
 8007396:	3b01      	subs	r3, #1
 8007398:	2b0f      	cmp	r3, #15
 800739a:	d846      	bhi.n	800742a <FMC_SDRAM_Timing_Init+0xd6>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800739c:	69a3      	ldr	r3, [r4, #24]
 800739e:	3b01      	subs	r3, #1
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	d848      	bhi.n	8007436 <FMC_SDRAM_Timing_Init+0xe2>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 80073a4:	2e01      	cmp	r6, #1
 80073a6:	d84c      	bhi.n	8007442 <FMC_SDRAM_Timing_Init+0xee>
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80073a8:	2e01      	cmp	r6, #1
 80073aa:	d050      	beq.n	800744e <FMC_SDRAM_Timing_Init+0xfa>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80073ac:	68aa      	ldr	r2, [r5, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80073ae:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80073b6:	6861      	ldr	r1, [r4, #4]
 80073b8:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073ba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80073be:	68a1      	ldr	r1, [r4, #8]
 80073c0:	3901      	subs	r1, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80073c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80073c6:	68e1      	ldr	r1, [r4, #12]
 80073c8:	3901      	subs	r1, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80073ca:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80073ce:	6921      	ldr	r1, [r4, #16]
 80073d0:	3901      	subs	r1, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80073d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 80073d6:	6961      	ldr	r1, [r4, #20]
 80073d8:	3901      	subs	r1, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80073da:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 80073de:	69a1      	ldr	r1, [r4, #24]
 80073e0:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80073e6:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80073e8:	60ab      	str	r3, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80073ea:	2000      	movs	r0, #0
 80073ec:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 80073ee:	f240 313e 	movw	r1, #830	; 0x33e
 80073f2:	482a      	ldr	r0, [pc, #168]	; (800749c <FMC_SDRAM_Timing_Init+0x148>)
 80073f4:	f00b fb7e 	bl	8012af4 <assert_failed>
 80073f8:	e7bc      	b.n	8007374 <FMC_SDRAM_Timing_Init+0x20>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 80073fa:	f240 313f 	movw	r1, #831	; 0x33f
 80073fe:	4827      	ldr	r0, [pc, #156]	; (800749c <FMC_SDRAM_Timing_Init+0x148>)
 8007400:	f00b fb78 	bl	8012af4 <assert_failed>
 8007404:	e7ba      	b.n	800737c <FMC_SDRAM_Timing_Init+0x28>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 8007406:	f44f 7150 	mov.w	r1, #832	; 0x340
 800740a:	4824      	ldr	r0, [pc, #144]	; (800749c <FMC_SDRAM_Timing_Init+0x148>)
 800740c:	f00b fb72 	bl	8012af4 <assert_failed>
 8007410:	e7b8      	b.n	8007384 <FMC_SDRAM_Timing_Init+0x30>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 8007412:	f240 3141 	movw	r1, #833	; 0x341
 8007416:	4821      	ldr	r0, [pc, #132]	; (800749c <FMC_SDRAM_Timing_Init+0x148>)
 8007418:	f00b fb6c 	bl	8012af4 <assert_failed>
 800741c:	e7b6      	b.n	800738c <FMC_SDRAM_Timing_Init+0x38>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800741e:	f240 3142 	movw	r1, #834	; 0x342
 8007422:	481e      	ldr	r0, [pc, #120]	; (800749c <FMC_SDRAM_Timing_Init+0x148>)
 8007424:	f00b fb66 	bl	8012af4 <assert_failed>
 8007428:	e7b4      	b.n	8007394 <FMC_SDRAM_Timing_Init+0x40>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800742a:	f240 3143 	movw	r1, #835	; 0x343
 800742e:	481b      	ldr	r0, [pc, #108]	; (800749c <FMC_SDRAM_Timing_Init+0x148>)
 8007430:	f00b fb60 	bl	8012af4 <assert_failed>
 8007434:	e7b2      	b.n	800739c <FMC_SDRAM_Timing_Init+0x48>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 8007436:	f44f 7151 	mov.w	r1, #836	; 0x344
 800743a:	4818      	ldr	r0, [pc, #96]	; (800749c <FMC_SDRAM_Timing_Init+0x148>)
 800743c:	f00b fb5a 	bl	8012af4 <assert_failed>
 8007440:	e7b0      	b.n	80073a4 <FMC_SDRAM_Timing_Init+0x50>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 8007442:	f240 3145 	movw	r1, #837	; 0x345
 8007446:	4815      	ldr	r0, [pc, #84]	; (800749c <FMC_SDRAM_Timing_Init+0x148>)
 8007448:	f00b fb54 	bl	8012af4 <assert_failed>
 800744c:	e7ac      	b.n	80073a8 <FMC_SDRAM_Timing_Init+0x54>
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800744e:	68ab      	ldr	r3, [r5, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007450:	4913      	ldr	r1, [pc, #76]	; (80074a0 <FMC_SDRAM_Timing_Init+0x14c>)
 8007452:	4019      	ands	r1, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007454:	68e2      	ldr	r2, [r4, #12]
 8007456:	1e50      	subs	r0, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8007458:	6963      	ldr	r3, [r4, #20]
 800745a:	1e5a      	subs	r2, r3, #1
 800745c:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800745e:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8007462:	430a      	orrs	r2, r1
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007464:	68e9      	ldr	r1, [r5, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007466:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800746e:	6860      	ldr	r0, [r4, #4]
 8007470:	3801      	subs	r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007472:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007476:	68a0      	ldr	r0, [r4, #8]
 8007478:	3801      	subs	r0, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800747a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800747e:	6920      	ldr	r0, [r4, #16]
 8007480:	3801      	subs	r0, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007482:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8007486:	69a0      	ldr	r0, [r4, #24]
 8007488:	3801      	subs	r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800748a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800748e:	430b      	orrs	r3, r1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007490:	60aa      	str	r2, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007492:	60eb      	str	r3, [r5, #12]
 8007494:	e7a9      	b.n	80073ea <FMC_SDRAM_Timing_Init+0x96>
 8007496:	bf00      	nop
 8007498:	a0000140 	.word	0xa0000140
 800749c:	08017e7c 	.word	0x08017e7c
 80074a0:	ff0f0fff 	.word	0xff0f0fff

080074a4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80074a4:	b530      	push	{r4, r5, lr}
 80074a6:	b083      	sub	sp, #12
 80074a8:	4605      	mov	r5, r0
 80074aa:	460c      	mov	r4, r1
  __IO uint32_t tmpr = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 80074b0:	4b20      	ldr	r3, [pc, #128]	; (8007534 <FMC_SDRAM_SendCommand+0x90>)
 80074b2:	4298      	cmp	r0, r3
 80074b4:	d004      	beq.n	80074c0 <FMC_SDRAM_SendCommand+0x1c>
 80074b6:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 80074ba:	481f      	ldr	r0, [pc, #124]	; (8007538 <FMC_SDRAM_SendCommand+0x94>)
 80074bc:	f00b fb1a 	bl	8012af4 <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	2b06      	cmp	r3, #6
 80074c4:	d81e      	bhi.n	8007504 <FMC_SDRAM_SendCommand+0x60>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 80074c6:	6863      	ldr	r3, [r4, #4]
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	bf18      	it	ne
 80074cc:	2b08      	cmpne	r3, #8
 80074ce:	d001      	beq.n	80074d4 <FMC_SDRAM_SendCommand+0x30>
 80074d0:	2b18      	cmp	r3, #24
 80074d2:	d11d      	bne.n	8007510 <FMC_SDRAM_SendCommand+0x6c>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 80074d4:	68a3      	ldr	r3, [r4, #8]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b0f      	cmp	r3, #15
 80074da:	d81f      	bhi.n	800751c <FMC_SDRAM_SendCommand+0x78>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 80074dc:	68e3      	ldr	r3, [r4, #12]
 80074de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e2:	d221      	bcs.n	8007528 <FMC_SDRAM_SendCommand+0x84>

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074e4:	6823      	ldr	r3, [r4, #0]
                    (Command->CommandTarget)                |\
 80074e6:	6862      	ldr	r2, [r4, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074e8:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80074ea:	68a2      	ldr	r2, [r4, #8]
 80074ec:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 80074ee:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 80074f2:	68e2      	ldr	r2, [r4, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074f4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80074f8:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80074fa:	9b01      	ldr	r3, [sp, #4]
 80074fc:	612b      	str	r3, [r5, #16]
  
  return HAL_OK;  
}
 80074fe:	2000      	movs	r0, #0
 8007500:	b003      	add	sp, #12
 8007502:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 8007504:	f240 31d1 	movw	r1, #977	; 0x3d1
 8007508:	480b      	ldr	r0, [pc, #44]	; (8007538 <FMC_SDRAM_SendCommand+0x94>)
 800750a:	f00b faf3 	bl	8012af4 <assert_failed>
 800750e:	e7da      	b.n	80074c6 <FMC_SDRAM_SendCommand+0x22>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 8007510:	f240 31d2 	movw	r1, #978	; 0x3d2
 8007514:	4808      	ldr	r0, [pc, #32]	; (8007538 <FMC_SDRAM_SendCommand+0x94>)
 8007516:	f00b faed 	bl	8012af4 <assert_failed>
 800751a:	e7db      	b.n	80074d4 <FMC_SDRAM_SendCommand+0x30>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 800751c:	f240 31d3 	movw	r1, #979	; 0x3d3
 8007520:	4805      	ldr	r0, [pc, #20]	; (8007538 <FMC_SDRAM_SendCommand+0x94>)
 8007522:	f00b fae7 	bl	8012af4 <assert_failed>
 8007526:	e7d9      	b.n	80074dc <FMC_SDRAM_SendCommand+0x38>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 8007528:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800752c:	4802      	ldr	r0, [pc, #8]	; (8007538 <FMC_SDRAM_SendCommand+0x94>)
 800752e:	f00b fae1 	bl	8012af4 <assert_failed>
 8007532:	e7d7      	b.n	80074e4 <FMC_SDRAM_SendCommand+0x40>
 8007534:	a0000140 	.word	0xa0000140
 8007538:	08017e7c 	.word	0x08017e7c

0800753c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4604      	mov	r4, r0
 8007540:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007542:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <FMC_SDRAM_ProgramRefreshRate+0x34>)
 8007544:	4298      	cmp	r0, r3
 8007546:	d004      	beq.n	8007552 <FMC_SDRAM_ProgramRefreshRate+0x16>
 8007548:	f240 31eb 	movw	r1, #1003	; 0x3eb
 800754c:	4809      	ldr	r0, [pc, #36]	; (8007574 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 800754e:	f00b fad1 	bl	8012af4 <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 8007552:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8007556:	d205      	bcs.n	8007564 <FMC_SDRAM_ProgramRefreshRate+0x28>
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007558:	6961      	ldr	r1, [r4, #20]
 800755a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800755e:	6161      	str	r1, [r4, #20]
  
  return HAL_OK;   
}
 8007560:	2000      	movs	r0, #0
 8007562:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 8007564:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8007568:	4802      	ldr	r0, [pc, #8]	; (8007574 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 800756a:	f00b fac3 	bl	8012af4 <assert_failed>
 800756e:	e7f3      	b.n	8007558 <FMC_SDRAM_ProgramRefreshRate+0x1c>
 8007570:	a0000140 	.word	0xa0000140
 8007574:	08017e7c 	.word	0x08017e7c

08007578 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <SDMMC_GetCmdError+0x34>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a0c      	ldr	r2, [pc, #48]	; (80075b0 <SDMMC_GetCmdError+0x38>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	0a5a      	lsrs	r2, r3, #9
 8007584:	f241 3388 	movw	r3, #5000	; 0x1388
 8007588:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0)
 800758c:	1e5a      	subs	r2, r3, #1
 800758e:	b14b      	cbz	r3, 80075a4 <SDMMC_GetCmdError+0x2c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007590:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0)
 8007592:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007594:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007598:	d0f8      	beq.n	800758c <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800759a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800759e:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80075a0:	2000      	movs	r0, #0
 80075a2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80075a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20000088 	.word	0x20000088
 80075b0:	10624dd3 	.word	0x10624dd3

080075b4 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80075b4:	4b14      	ldr	r3, [pc, #80]	; (8007608 <SDMMC_GetCmdResp2+0x54>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a14      	ldr	r2, [pc, #80]	; (800760c <SDMMC_GetCmdResp2+0x58>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	0a5a      	lsrs	r2, r3, #9
 80075c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80075c4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0)
 80075c8:	1e5a      	subs	r2, r3, #1
 80075ca:	b1cb      	cbz	r3, 8007600 <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80075cc:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0)
 80075ce:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80075d0:	f011 0f45 	tst.w	r1, #69	; 0x45
 80075d4:	d0f8      	beq.n	80075c8 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80075d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80075d8:	f013 0f04 	tst.w	r3, #4
 80075dc:	d108      	bne.n	80075f0 <SDMMC_GetCmdResp2+0x3c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80075de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80075e0:	f013 0f01 	tst.w	r3, #1
 80075e4:	d108      	bne.n	80075f8 <SDMMC_GetCmdResp2+0x44>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80075e6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80075ea:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80075ec:	2000      	movs	r0, #0
 80075ee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80075f0:	2304      	movs	r3, #4
 80075f2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075f4:	4618      	mov	r0, r3
 80075f6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075f8:	2301      	movs	r3, #1
 80075fa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075fc:	4618      	mov	r0, r3
 80075fe:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007600:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20000088 	.word	0x20000088
 800760c:	10624dd3 	.word	0x10624dd3

08007610 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007610:	4b10      	ldr	r3, [pc, #64]	; (8007654 <SDMMC_GetCmdResp3+0x44>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a10      	ldr	r2, [pc, #64]	; (8007658 <SDMMC_GetCmdResp3+0x48>)
 8007616:	fba2 2303 	umull	r2, r3, r2, r3
 800761a:	0a5a      	lsrs	r2, r3, #9
 800761c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007620:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0)
 8007624:	1e5a      	subs	r2, r3, #1
 8007626:	b18b      	cbz	r3, 800764c <SDMMC_GetCmdResp3+0x3c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007628:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0)
 800762a:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800762c:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007630:	d0f8      	beq.n	8007624 <SDMMC_GetCmdResp3+0x14>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007632:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007634:	f013 0f04 	tst.w	r3, #4
 8007638:	d104      	bne.n	8007644 <SDMMC_GetCmdResp3+0x34>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800763a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800763e:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007640:	2000      	movs	r0, #0
 8007642:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007644:	2304      	movs	r3, #4
 8007646:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007648:	4618      	mov	r0, r3
 800764a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800764c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20000088 	.word	0x20000088
 8007658:	10624dd3 	.word	0x10624dd3

0800765c <SDMMC_GetCmdResp7>:
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800765c:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <SDMMC_GetCmdResp7+0x4c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a12      	ldr	r2, [pc, #72]	; (80076ac <SDMMC_GetCmdResp7+0x50>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	0a5a      	lsrs	r2, r3, #9
 8007668:	f241 3388 	movw	r3, #5000	; 0x1388
 800766c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0)
 8007670:	1e5a      	subs	r2, r3, #1
 8007672:	b1a3      	cbz	r3, 800769e <SDMMC_GetCmdResp7+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007674:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0)
 8007676:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007678:	f011 0f45 	tst.w	r1, #69	; 0x45
 800767c:	d0f8      	beq.n	8007670 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800767e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007680:	f013 0f04 	tst.w	r3, #4
 8007684:	d107      	bne.n	8007696 <SDMMC_GetCmdResp7+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007686:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007688:	f013 0f40 	tst.w	r3, #64	; 0x40
 800768c:	d00a      	beq.n	80076a4 <SDMMC_GetCmdResp7+0x48>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800768e:	2340      	movs	r3, #64	; 0x40
 8007690:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007692:	2000      	movs	r0, #0
 8007694:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007696:	2340      	movs	r3, #64	; 0x40
 8007698:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800769a:	2004      	movs	r0, #4
 800769c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800769e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80076a2:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 80076a4:	2000      	movs	r0, #0
  
}
 80076a6:	4770      	bx	lr
 80076a8:	20000088 	.word	0x20000088
 80076ac:	10624dd3 	.word	0x10624dd3

080076b0 <SDMMC_Init>:
{
 80076b0:	b084      	sub	sp, #16
 80076b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b6:	4606      	mov	r6, r0
 80076b8:	a809      	add	r0, sp, #36	; 0x24
 80076ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 80076be:	4b39      	ldr	r3, [pc, #228]	; (80077a4 <SDMMC_Init+0xf4>)
 80076c0:	429e      	cmp	r6, r3
 80076c2:	d003      	beq.n	80076cc <SDMMC_Init+0x1c>
 80076c4:	21d8      	movs	r1, #216	; 0xd8
 80076c6:	4838      	ldr	r0, [pc, #224]	; (80077a8 <SDMMC_Init+0xf8>)
 80076c8:	f00b fa14 	bl	8012af4 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 80076cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80076ce:	f5b4 5300 	subs.w	r3, r4, #8192	; 0x2000
 80076d2:	bf18      	it	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	bf08      	it	eq
 80076da:	2300      	moveq	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d143      	bne.n	8007768 <SDMMC_Init+0xb8>
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 80076e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80076e4:	f5ba 6380 	subs.w	r3, sl, #1024	; 0x400
 80076e8:	bf18      	it	ne
 80076ea:	2301      	movne	r3, #1
 80076ec:	f1ba 0f00 	cmp.w	sl, #0
 80076f0:	bf08      	it	eq
 80076f2:	2300      	moveq	r3, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d13c      	bne.n	8007772 <SDMMC_Init+0xc2>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 80076f8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80076fc:	f5b9 7300 	subs.w	r3, r9, #512	; 0x200
 8007700:	bf18      	it	ne
 8007702:	2301      	movne	r3, #1
 8007704:	f1b9 0f00 	cmp.w	r9, #0
 8007708:	bf08      	it	eq
 800770a:	2300      	moveq	r3, #0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d135      	bne.n	800777c <SDMMC_Init+0xcc>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 8007710:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007712:	f5b7 6300 	subs.w	r3, r7, #2048	; 0x800
 8007716:	bf18      	it	ne
 8007718:	2301      	movne	r3, #1
 800771a:	2f00      	cmp	r7, #0
 800771c:	bf08      	it	eq
 800771e:	2300      	moveq	r3, #0
 8007720:	b113      	cbz	r3, 8007728 <SDMMC_Init+0x78>
 8007722:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8007726:	d12e      	bne.n	8007786 <SDMMC_Init+0xd6>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8007728:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800772c:	f5b8 4380 	subs.w	r3, r8, #16384	; 0x4000
 8007730:	bf18      	it	ne
 8007732:	2301      	movne	r3, #1
 8007734:	f1b8 0f00 	cmp.w	r8, #0
 8007738:	bf08      	it	eq
 800773a:	2300      	moveq	r3, #0
 800773c:	bb43      	cbnz	r3, 8007790 <SDMMC_Init+0xe0>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800773e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007740:	2dff      	cmp	r5, #255	; 0xff
 8007742:	d82a      	bhi.n	800779a <SDMMC_Init+0xea>
  tmpreg |= (Init.ClockEdge           |\
 8007744:	ea44 040a 	orr.w	r4, r4, sl
             Init.ClockBypass         |\
 8007748:	ea44 0409 	orr.w	r4, r4, r9
             Init.ClockPowerSave      |\
 800774c:	433c      	orrs	r4, r7
             Init.BusWide             |\
 800774e:	ea44 0408 	orr.w	r4, r4, r8
             Init.HardwareFlowControl |\
 8007752:	432c      	orrs	r4, r5
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007754:	6873      	ldr	r3, [r6, #4]
 8007756:	4d15      	ldr	r5, [pc, #84]	; (80077ac <SDMMC_Init+0xfc>)
 8007758:	401d      	ands	r5, r3
 800775a:	432c      	orrs	r4, r5
 800775c:	6074      	str	r4, [r6, #4]
}
 800775e:	2000      	movs	r0, #0
 8007760:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	b004      	add	sp, #16
 8007766:	4770      	bx	lr
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 8007768:	21d9      	movs	r1, #217	; 0xd9
 800776a:	480f      	ldr	r0, [pc, #60]	; (80077a8 <SDMMC_Init+0xf8>)
 800776c:	f00b f9c2 	bl	8012af4 <assert_failed>
 8007770:	e7b6      	b.n	80076e0 <SDMMC_Init+0x30>
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 8007772:	21da      	movs	r1, #218	; 0xda
 8007774:	480c      	ldr	r0, [pc, #48]	; (80077a8 <SDMMC_Init+0xf8>)
 8007776:	f00b f9bd 	bl	8012af4 <assert_failed>
 800777a:	e7bd      	b.n	80076f8 <SDMMC_Init+0x48>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800777c:	21db      	movs	r1, #219	; 0xdb
 800777e:	480a      	ldr	r0, [pc, #40]	; (80077a8 <SDMMC_Init+0xf8>)
 8007780:	f00b f9b8 	bl	8012af4 <assert_failed>
 8007784:	e7c4      	b.n	8007710 <SDMMC_Init+0x60>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 8007786:	21dc      	movs	r1, #220	; 0xdc
 8007788:	4807      	ldr	r0, [pc, #28]	; (80077a8 <SDMMC_Init+0xf8>)
 800778a:	f00b f9b3 	bl	8012af4 <assert_failed>
 800778e:	e7cb      	b.n	8007728 <SDMMC_Init+0x78>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8007790:	21dd      	movs	r1, #221	; 0xdd
 8007792:	4805      	ldr	r0, [pc, #20]	; (80077a8 <SDMMC_Init+0xf8>)
 8007794:	f00b f9ae 	bl	8012af4 <assert_failed>
 8007798:	e7d1      	b.n	800773e <SDMMC_Init+0x8e>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800779a:	21de      	movs	r1, #222	; 0xde
 800779c:	4802      	ldr	r0, [pc, #8]	; (80077a8 <SDMMC_Init+0xf8>)
 800779e:	f00b f9a9 	bl	8012af4 <assert_failed>
 80077a2:	e7cf      	b.n	8007744 <SDMMC_Init+0x94>
 80077a4:	40012c00 	.word	0x40012c00
 80077a8:	08017eb4 	.word	0x08017eb4
 80077ac:	ffff8100 	.word	0xffff8100

080077b0 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 80077b0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80077b4:	4770      	bx	lr

080077b6 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 80077b6:	680b      	ldr	r3, [r1, #0]
 80077b8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80077bc:	2000      	movs	r0, #0
 80077be:	4770      	bx	lr

080077c0 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80077c0:	2303      	movs	r3, #3
 80077c2:	6003      	str	r3, [r0, #0]
}
 80077c4:	2000      	movs	r0, #0
 80077c6:	4770      	bx	lr

080077c8 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80077c8:	6800      	ldr	r0, [r0, #0]
}
 80077ca:	f000 0003 	and.w	r0, r0, #3
 80077ce:	4770      	bx	lr

080077d0 <SDMMC_SendCommand>:
{
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4605      	mov	r5, r0
 80077d4:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 80077d6:	684b      	ldr	r3, [r1, #4]
 80077d8:	2b3f      	cmp	r3, #63	; 0x3f
 80077da:	d82f      	bhi.n	800783c <SDMMC_SendCommand+0x6c>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 80077dc:	68a2      	ldr	r2, [r4, #8]
 80077de:	f1b2 0340 	subs.w	r3, r2, #64	; 0x40
 80077e2:	bf18      	it	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	bf08      	it	eq
 80077ea:	2300      	moveq	r3, #0
 80077ec:	b10b      	cbz	r3, 80077f2 <SDMMC_SendCommand+0x22>
 80077ee:	2ac0      	cmp	r2, #192	; 0xc0
 80077f0:	d12a      	bne.n	8007848 <SDMMC_SendCommand+0x78>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 80077f2:	68e2      	ldr	r2, [r4, #12]
 80077f4:	f5b2 7380 	subs.w	r3, r2, #256	; 0x100
 80077f8:	bf18      	it	ne
 80077fa:	2301      	movne	r3, #1
 80077fc:	2a00      	cmp	r2, #0
 80077fe:	bf08      	it	eq
 8007800:	2300      	moveq	r3, #0
 8007802:	b113      	cbz	r3, 800780a <SDMMC_SendCommand+0x3a>
 8007804:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007808:	d124      	bne.n	8007854 <SDMMC_SendCommand+0x84>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 800780a:	6922      	ldr	r2, [r4, #16]
 800780c:	f5b2 6380 	subs.w	r3, r2, #1024	; 0x400
 8007810:	bf18      	it	ne
 8007812:	2301      	movne	r3, #1
 8007814:	2a00      	cmp	r2, #0
 8007816:	bf08      	it	eq
 8007818:	2300      	moveq	r3, #0
 800781a:	bb0b      	cbnz	r3, 8007860 <SDMMC_SendCommand+0x90>
  SDMMCx->ARG = Command->Argument;
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007820:	6863      	ldr	r3, [r4, #4]
                       Command->Response         |\
 8007822:	68a2      	ldr	r2, [r4, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007824:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8007826:	68e2      	ldr	r2, [r4, #12]
                       Command->Response         |\
 8007828:	4313      	orrs	r3, r2
                       Command->CPSM);
 800782a:	6922      	ldr	r2, [r4, #16]
                       Command->WaitForInterrupt |\
 800782c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800782e:	68e9      	ldr	r1, [r5, #12]
 8007830:	4a0e      	ldr	r2, [pc, #56]	; (800786c <SDMMC_SendCommand+0x9c>)
 8007832:	400a      	ands	r2, r1
 8007834:	4313      	orrs	r3, r2
 8007836:	60eb      	str	r3, [r5, #12]
}
 8007838:	2000      	movs	r0, #0
 800783a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800783c:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8007840:	480b      	ldr	r0, [pc, #44]	; (8007870 <SDMMC_SendCommand+0xa0>)
 8007842:	f00b f957 	bl	8012af4 <assert_failed>
 8007846:	e7c9      	b.n	80077dc <SDMMC_SendCommand+0xc>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 8007848:	f240 1165 	movw	r1, #357	; 0x165
 800784c:	4808      	ldr	r0, [pc, #32]	; (8007870 <SDMMC_SendCommand+0xa0>)
 800784e:	f00b f951 	bl	8012af4 <assert_failed>
 8007852:	e7ce      	b.n	80077f2 <SDMMC_SendCommand+0x22>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 8007854:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8007858:	4805      	ldr	r0, [pc, #20]	; (8007870 <SDMMC_SendCommand+0xa0>)
 800785a:	f00b f94b 	bl	8012af4 <assert_failed>
 800785e:	e7d4      	b.n	800780a <SDMMC_SendCommand+0x3a>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 8007860:	f240 1167 	movw	r1, #359	; 0x167
 8007864:	4802      	ldr	r0, [pc, #8]	; (8007870 <SDMMC_SendCommand+0xa0>)
 8007866:	f00b f945 	bl	8012af4 <assert_failed>
 800786a:	e7d7      	b.n	800781c <SDMMC_SendCommand+0x4c>
 800786c:	fffff000 	.word	0xfffff000
 8007870:	08017eb4 	.word	0x08017eb4

08007874 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8007874:	6900      	ldr	r0, [r0, #16]
}
 8007876:	b2c0      	uxtb	r0, r0
 8007878:	4770      	bx	lr
	...

0800787c <SDMMC_GetResponse>:
{
 800787c:	b530      	push	{r4, r5, lr}
 800787e:	b083      	sub	sp, #12
 8007880:	4604      	mov	r4, r0
  __IO uint32_t tmp = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	9301      	str	r3, [sp, #4]
  assert_param(IS_SDMMC_RESP(Response));
 8007886:	460d      	mov	r5, r1
 8007888:	1f0b      	subs	r3, r1, #4
 800788a:	bf18      	it	ne
 800788c:	2301      	movne	r3, #1
 800788e:	2900      	cmp	r1, #0
 8007890:	bf14      	ite	ne
 8007892:	4619      	movne	r1, r3
 8007894:	2100      	moveq	r1, #0
 8007896:	b159      	cbz	r1, 80078b0 <SDMMC_GetResponse+0x34>
 8007898:	f1b5 030c 	subs.w	r3, r5, #12
 800789c:	bf18      	it	ne
 800789e:	2301      	movne	r3, #1
 80078a0:	2d08      	cmp	r5, #8
 80078a2:	d005      	beq.n	80078b0 <SDMMC_GetResponse+0x34>
 80078a4:	b123      	cbz	r3, 80078b0 <SDMMC_GetResponse+0x34>
 80078a6:	f240 1193 	movw	r1, #403	; 0x193
 80078aa:	4805      	ldr	r0, [pc, #20]	; (80078c0 <SDMMC_GetResponse+0x44>)
 80078ac:	f00b f922 	bl	8012af4 <assert_failed>
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80078b0:	3414      	adds	r4, #20
 80078b2:	442c      	add	r4, r5
 80078b4:	9401      	str	r4, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	6818      	ldr	r0, [r3, #0]
}  
 80078ba:	b003      	add	sp, #12
 80078bc:	bd30      	pop	{r4, r5, pc}
 80078be:	bf00      	nop
 80078c0:	08017eb4 	.word	0x08017eb4

080078c4 <SDMMC_GetCmdResp1>:
{
 80078c4:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80078c6:	4b51      	ldr	r3, [pc, #324]	; (8007a0c <SDMMC_GetCmdResp1+0x148>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4c51      	ldr	r4, [pc, #324]	; (8007a10 <SDMMC_GetCmdResp1+0x14c>)
 80078cc:	fba4 4303 	umull	r4, r3, r4, r3
 80078d0:	0a5b      	lsrs	r3, r3, #9
 80078d2:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0)
 80078d6:	1e53      	subs	r3, r2, #1
 80078d8:	2a00      	cmp	r2, #0
 80078da:	d05e      	beq.n	800799a <SDMMC_GetCmdResp1+0xd6>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80078dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (count-- == 0)
 80078de:	461a      	mov	r2, r3
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80078e0:	f014 0f45 	tst.w	r4, #69	; 0x45
 80078e4:	d0f7      	beq.n	80078d6 <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80078e8:	f013 0f04 	tst.w	r3, #4
 80078ec:	d107      	bne.n	80078fe <SDMMC_GetCmdResp1+0x3a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80078f0:	f013 0f01 	tst.w	r3, #1
 80078f4:	d007      	beq.n	8007906 <SDMMC_GetCmdResp1+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078f6:	2301      	movs	r3, #1
 80078f8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078fa:	4618      	mov	r0, r3
 80078fc:	e04f      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078fe:	2304      	movs	r3, #4
 8007900:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007902:	4618      	mov	r0, r3
 8007904:	e04b      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
 8007906:	460d      	mov	r5, r1
 8007908:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800790a:	f7ff ffb3 	bl	8007874 <SDMMC_GetCommandResponse>
 800790e:	42a8      	cmp	r0, r5
 8007910:	d001      	beq.n	8007916 <SDMMC_GetCmdResp1+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007912:	2001      	movs	r0, #1
 8007914:	e043      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007916:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800791a:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800791c:	2100      	movs	r1, #0
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff ffac 	bl	800787c <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007924:	4b3b      	ldr	r3, [pc, #236]	; (8007a14 <SDMMC_GetCmdResp1+0x150>)
 8007926:	4003      	ands	r3, r0
 8007928:	b3d3      	cbz	r3, 80079a0 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800792a:	2800      	cmp	r0, #0
 800792c:	db3a      	blt.n	80079a4 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800792e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007932:	d13a      	bne.n	80079aa <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007934:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8007938:	d139      	bne.n	80079ae <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800793a:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800793e:	d138      	bne.n	80079b2 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007940:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8007944:	d138      	bne.n	80079b8 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007946:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800794a:	d138      	bne.n	80079be <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800794c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8007950:	d138      	bne.n	80079c4 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007952:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8007956:	d138      	bne.n	80079ca <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007958:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800795c:	d138      	bne.n	80079d0 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800795e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8007962:	d138      	bne.n	80079d6 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007964:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8007968:	d138      	bne.n	80079dc <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800796a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800796e:	d138      	bne.n	80079e2 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007970:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8007974:	d138      	bne.n	80079e8 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007976:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 800797a:	d138      	bne.n	80079ee <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800797c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007980:	d138      	bne.n	80079f4 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007982:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007986:	d138      	bne.n	80079fa <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007988:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800798c:	d138      	bne.n	8007a00 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800798e:	f010 0f08 	tst.w	r0, #8
 8007992:	d038      	beq.n	8007a06 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007994:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007998:	e001      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
      return SDMMC_ERROR_TIMEOUT;
 800799a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800799e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 80079a0:	2000      	movs	r0, #0
 80079a2:	e7fc      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80079a4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80079a8:	e7f9      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80079aa:	2040      	movs	r0, #64	; 0x40
 80079ac:	e7f7      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80079ae:	2080      	movs	r0, #128	; 0x80
 80079b0:	e7f5      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80079b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079b6:	e7f2      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80079b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80079bc:	e7ef      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80079be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80079c2:	e7ec      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80079c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80079c8:	e7e9      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80079ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80079ce:	e7e6      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80079d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80079d4:	e7e3      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80079d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80079da:	e7e0      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CC_ERR;
 80079dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80079e0:	e7dd      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80079e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80079e6:	e7da      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80079e8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80079ec:	e7d7      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80079ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80079f2:	e7d4      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80079f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80079f8:	e7d1      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80079fa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80079fe:	e7ce      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_RESET;
 8007a00:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007a04:	e7cb      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a06:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007a0a:	e7c8      	b.n	800799e <SDMMC_GetCmdResp1+0xda>
 8007a0c:	20000088 	.word	0x20000088
 8007a10:	10624dd3 	.word	0x10624dd3
 8007a14:	fdffe008 	.word	0xfdffe008

08007a18 <SDMMC_GetCmdResp6>:
{
 8007a18:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007a1a:	4b25      	ldr	r3, [pc, #148]	; (8007ab0 <SDMMC_GetCmdResp6+0x98>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4c25      	ldr	r4, [pc, #148]	; (8007ab4 <SDMMC_GetCmdResp6+0x9c>)
 8007a20:	fba4 4303 	umull	r4, r3, r4, r3
 8007a24:	0a5c      	lsrs	r4, r3, #9
 8007a26:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a2a:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0)
 8007a2e:	1e5c      	subs	r4, r3, #1
 8007a30:	b3a3      	cbz	r3, 8007a9c <SDMMC_GetCmdResp6+0x84>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007a32:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (count-- == 0)
 8007a34:	4623      	mov	r3, r4
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007a36:	f015 0f45 	tst.w	r5, #69	; 0x45
 8007a3a:	d0f8      	beq.n	8007a2e <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a3e:	f013 0f04 	tst.w	r3, #4
 8007a42:	d107      	bne.n	8007a54 <SDMMC_GetCmdResp6+0x3c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a46:	f013 0f01 	tst.w	r3, #1
 8007a4a:	d007      	beq.n	8007a5c <SDMMC_GetCmdResp6+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a50:	4618      	mov	r0, r3
 8007a52:	e025      	b.n	8007aa0 <SDMMC_GetCmdResp6+0x88>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a54:	2304      	movs	r3, #4
 8007a56:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a58:	4618      	mov	r0, r3
 8007a5a:	e021      	b.n	8007aa0 <SDMMC_GetCmdResp6+0x88>
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	460d      	mov	r5, r1
 8007a60:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a62:	f7ff ff07 	bl	8007874 <SDMMC_GetCommandResponse>
 8007a66:	42a8      	cmp	r0, r5
 8007a68:	d001      	beq.n	8007a6e <SDMMC_GetCmdResp6+0x56>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	e018      	b.n	8007aa0 <SDMMC_GetCmdResp6+0x88>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007a6e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007a72:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007a74:	2100      	movs	r1, #0
 8007a76:	4620      	mov	r0, r4
 8007a78:	f7ff ff00 	bl	800787c <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a7c:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8007a80:	d008      	beq.n	8007a94 <SDMMC_GetCmdResp6+0x7c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a82:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007a86:	d10c      	bne.n	8007aa2 <SDMMC_GetCmdResp6+0x8a>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a88:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007a8c:	d00c      	beq.n	8007aa8 <SDMMC_GetCmdResp6+0x90>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007a92:	e005      	b.n	8007aa0 <SDMMC_GetCmdResp6+0x88>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a94:	0c00      	lsrs	r0, r0, #16
 8007a96:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e001      	b.n	8007aa0 <SDMMC_GetCmdResp6+0x88>
      return SDMMC_ERROR_TIMEOUT;
 8007a9c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007aa2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007aa6:	e7fb      	b.n	8007aa0 <SDMMC_GetCmdResp6+0x88>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007aa8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007aac:	e7f8      	b.n	8007aa0 <SDMMC_GetCmdResp6+0x88>
 8007aae:	bf00      	nop
 8007ab0:	20000088 	.word	0x20000088
 8007ab4:	10624dd3 	.word	0x10624dd3

08007ab8 <SDMMC_ConfigData>:
{
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4605      	mov	r5, r0
 8007abc:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 8007abe:	684b      	ldr	r3, [r1, #4]
 8007ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ac4:	d251      	bcs.n	8007b6a <SDMMC_ConfigData+0xb2>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	f1b3 0210 	subs.w	r2, r3, #16
 8007acc:	bf18      	it	ne
 8007ace:	2201      	movne	r2, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bf08      	it	eq
 8007ad4:	2200      	moveq	r2, #0
 8007ad6:	b1f2      	cbz	r2, 8007b16 <SDMMC_ConfigData+0x5e>
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d01c      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007adc:	2b30      	cmp	r3, #48	; 0x30
 8007ade:	d01a      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d018      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007ae4:	2b50      	cmp	r3, #80	; 0x50
 8007ae6:	d016      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007ae8:	2b60      	cmp	r3, #96	; 0x60
 8007aea:	d014      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007aec:	2b70      	cmp	r3, #112	; 0x70
 8007aee:	d012      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007af0:	2b80      	cmp	r3, #128	; 0x80
 8007af2:	d010      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007af4:	2b90      	cmp	r3, #144	; 0x90
 8007af6:	d00e      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007af8:	2ba0      	cmp	r3, #160	; 0xa0
 8007afa:	d00c      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007afc:	2bb0      	cmp	r3, #176	; 0xb0
 8007afe:	d00a      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007b00:	2bc0      	cmp	r3, #192	; 0xc0
 8007b02:	d008      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007b04:	2bd0      	cmp	r3, #208	; 0xd0
 8007b06:	d006      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007b08:	2be0      	cmp	r3, #224	; 0xe0
 8007b0a:	d004      	beq.n	8007b16 <SDMMC_ConfigData+0x5e>
 8007b0c:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007b10:	481f      	ldr	r0, [pc, #124]	; (8007b90 <SDMMC_ConfigData+0xd8>)
 8007b12:	f00a ffef 	bl	8012af4 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 8007b16:	68e2      	ldr	r2, [r4, #12]
 8007b18:	1e93      	subs	r3, r2, #2
 8007b1a:	bf18      	it	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2a00      	cmp	r2, #0
 8007b20:	bf08      	it	eq
 8007b22:	2300      	moveq	r3, #0
 8007b24:	bb3b      	cbnz	r3, 8007b76 <SDMMC_ConfigData+0xbe>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 8007b26:	6922      	ldr	r2, [r4, #16]
 8007b28:	1f13      	subs	r3, r2, #4
 8007b2a:	bf18      	it	ne
 8007b2c:	2301      	movne	r3, #1
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	bf08      	it	eq
 8007b32:	2300      	moveq	r3, #0
 8007b34:	bb2b      	cbnz	r3, 8007b82 <SDMMC_ConfigData+0xca>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 8007b36:	6963      	ldr	r3, [r4, #20]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d904      	bls.n	8007b46 <SDMMC_ConfigData+0x8e>
 8007b3c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8007b40:	4813      	ldr	r0, [pc, #76]	; (8007b90 <SDMMC_ConfigData+0xd8>)
 8007b42:	f00a ffd7 	bl	8012af4 <assert_failed>
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	626b      	str	r3, [r5, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007b4a:	6863      	ldr	r3, [r4, #4]
 8007b4c:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b4e:	68a3      	ldr	r3, [r4, #8]
                       Data->TransferDir   |\
 8007b50:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b52:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8007b54:	6922      	ldr	r2, [r4, #16]
                       Data->TransferDir   |\
 8007b56:	4313      	orrs	r3, r2
                       Data->DPSM);
 8007b58:	6962      	ldr	r2, [r4, #20]
                       Data->TransferMode  |\
 8007b5a:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007b5c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8007b5e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8007b62:	4313      	orrs	r3, r2
 8007b64:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8007b66:	2000      	movs	r0, #0
 8007b68:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 8007b6a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8007b6e:	4808      	ldr	r0, [pc, #32]	; (8007b90 <SDMMC_ConfigData+0xd8>)
 8007b70:	f00a ffc0 	bl	8012af4 <assert_failed>
 8007b74:	e7a7      	b.n	8007ac6 <SDMMC_ConfigData+0xe>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 8007b76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b7a:	4805      	ldr	r0, [pc, #20]	; (8007b90 <SDMMC_ConfigData+0xd8>)
 8007b7c:	f00a ffba 	bl	8012af4 <assert_failed>
 8007b80:	e7d1      	b.n	8007b26 <SDMMC_ConfigData+0x6e>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 8007b82:	f240 11ab 	movw	r1, #427	; 0x1ab
 8007b86:	4802      	ldr	r0, [pc, #8]	; (8007b90 <SDMMC_ConfigData+0xd8>)
 8007b88:	f00a ffb4 	bl	8012af4 <assert_failed>
 8007b8c:	e7d3      	b.n	8007b36 <SDMMC_ConfigData+0x7e>
 8007b8e:	bf00      	nop
 8007b90:	08017eb4 	.word	0x08017eb4

08007b94 <SDMMC_CmdBlockLength>:
{
 8007b94:	b530      	push	{r4, r5, lr}
 8007b96:	b087      	sub	sp, #28
 8007b98:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007b9a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007b9c:	2410      	movs	r4, #16
 8007b9e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bac:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bae:	a901      	add	r1, sp, #4
 8007bb0:	f7ff fe0e 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb8:	4621      	mov	r1, r4
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f7ff fe82 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007bc0:	b007      	add	sp, #28
 8007bc2:	bd30      	pop	{r4, r5, pc}

08007bc4 <SDMMC_CmdReadSingleBlock>:
{
 8007bc4:	b530      	push	{r4, r5, lr}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007bca:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007bcc:	2411      	movs	r4, #17
 8007bce:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bdc:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bde:	a901      	add	r1, sp, #4
 8007be0:	f7ff fdf6 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be8:	4621      	mov	r1, r4
 8007bea:	4628      	mov	r0, r5
 8007bec:	f7ff fe6a 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007bf0:	b007      	add	sp, #28
 8007bf2:	bd30      	pop	{r4, r5, pc}

08007bf4 <SDMMC_CmdReadMultiBlock>:
{
 8007bf4:	b530      	push	{r4, r5, lr}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007bfa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007bfc:	2412      	movs	r4, #18
 8007bfe:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c00:	2340      	movs	r3, #64	; 0x40
 8007c02:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c04:	2300      	movs	r3, #0
 8007c06:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c0c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c0e:	a901      	add	r1, sp, #4
 8007c10:	f7ff fdde 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f7ff fe52 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007c20:	b007      	add	sp, #28
 8007c22:	bd30      	pop	{r4, r5, pc}

08007c24 <SDMMC_CmdWriteSingleBlock>:
{
 8007c24:	b530      	push	{r4, r5, lr}
 8007c26:	b087      	sub	sp, #28
 8007c28:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c2a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007c2c:	2418      	movs	r4, #24
 8007c2e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c30:	2340      	movs	r3, #64	; 0x40
 8007c32:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c34:	2300      	movs	r3, #0
 8007c36:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c3e:	a901      	add	r1, sp, #4
 8007c40:	f7ff fdc6 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7ff fe3a 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007c50:	b007      	add	sp, #28
 8007c52:	bd30      	pop	{r4, r5, pc}

08007c54 <SDMMC_CmdWriteMultiBlock>:
{
 8007c54:	b530      	push	{r4, r5, lr}
 8007c56:	b087      	sub	sp, #28
 8007c58:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c5a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007c5c:	2419      	movs	r4, #25
 8007c5e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c60:	2340      	movs	r3, #64	; 0x40
 8007c62:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c64:	2300      	movs	r3, #0
 8007c66:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c6c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c6e:	a901      	add	r1, sp, #4
 8007c70:	f7ff fdae 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f7ff fe22 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007c80:	b007      	add	sp, #28
 8007c82:	bd30      	pop	{r4, r5, pc}

08007c84 <SDMMC_CmdStopTransfer>:
{
 8007c84:	b530      	push	{r4, r5, lr}
 8007c86:	b087      	sub	sp, #28
 8007c88:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007c8e:	240c      	movs	r4, #12
 8007c90:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c92:	2240      	movs	r2, #64	; 0x40
 8007c94:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c96:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c9c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c9e:	a901      	add	r1, sp, #4
 8007ca0:	f7ff fd96 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8007ca4:	4a03      	ldr	r2, [pc, #12]	; (8007cb4 <SDMMC_CmdStopTransfer+0x30>)
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f7ff fe0b 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007cae:	b007      	add	sp, #28
 8007cb0:	bd30      	pop	{r4, r5, pc}
 8007cb2:	bf00      	nop
 8007cb4:	05f5e100 	.word	0x05f5e100

08007cb8 <SDMMC_CmdSelDesel>:
{
 8007cb8:	b530      	push	{r4, r5, lr}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007cbe:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007cc0:	2407      	movs	r4, #7
 8007cc2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cc4:	2340      	movs	r3, #64	; 0x40
 8007cc6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cd2:	a901      	add	r1, sp, #4
 8007cd4:	f7ff fd7c 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f7ff fdf0 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007ce4:	b007      	add	sp, #28
 8007ce6:	bd30      	pop	{r4, r5, pc}

08007ce8 <SDMMC_CmdGoIdleState>:
{
 8007ce8:	b510      	push	{r4, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007cf2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007cf4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cf6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cfc:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cfe:	a901      	add	r1, sp, #4
 8007d00:	f7ff fd66 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007d04:	4620      	mov	r0, r4
 8007d06:	f7ff fc37 	bl	8007578 <SDMMC_GetCmdError>
}
 8007d0a:	b006      	add	sp, #24
 8007d0c:	bd10      	pop	{r4, pc}

08007d0e <SDMMC_CmdOperCond>:
{
 8007d0e:	b510      	push	{r4, lr}
 8007d10:	b086      	sub	sp, #24
 8007d12:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007d14:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007d18:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d1e:	2340      	movs	r3, #64	; 0x40
 8007d20:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d22:	2300      	movs	r3, #0
 8007d24:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d2a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d2c:	a901      	add	r1, sp, #4
 8007d2e:	f7ff fd4f 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007d32:	4620      	mov	r0, r4
 8007d34:	f7ff fc92 	bl	800765c <SDMMC_GetCmdResp7>
}
 8007d38:	b006      	add	sp, #24
 8007d3a:	bd10      	pop	{r4, pc}

08007d3c <SDMMC_CmdAppCommand>:
{
 8007d3c:	b530      	push	{r4, r5, lr}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007d42:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007d44:	2437      	movs	r4, #55	; 0x37
 8007d46:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d54:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d56:	a901      	add	r1, sp, #4
 8007d58:	f7ff fd3a 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d60:	4621      	mov	r1, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	f7ff fdae 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007d68:	b007      	add	sp, #28
 8007d6a:	bd30      	pop	{r4, r5, pc}

08007d6c <SDMMC_CmdAppOperCommand>:
{
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8007d72:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <SDMMC_CmdAppOperCommand+0x30>)
 8007d74:	430b      	orrs	r3, r1
 8007d76:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007d78:	2329      	movs	r3, #41	; 0x29
 8007d7a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d7c:	2340      	movs	r3, #64	; 0x40
 8007d7e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d80:	2300      	movs	r3, #0
 8007d82:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d88:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d8a:	a901      	add	r1, sp, #4
 8007d8c:	f7ff fd20 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007d90:	4620      	mov	r0, r4
 8007d92:	f7ff fc3d 	bl	8007610 <SDMMC_GetCmdResp3>
}
 8007d96:	b006      	add	sp, #24
 8007d98:	bd10      	pop	{r4, pc}
 8007d9a:	bf00      	nop
 8007d9c:	80100000 	.word	0x80100000

08007da0 <SDMMC_CmdBusWidth>:
{
 8007da0:	b530      	push	{r4, r5, lr}
 8007da2:	b087      	sub	sp, #28
 8007da4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007da6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007da8:	2406      	movs	r4, #6
 8007daa:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dac:	2340      	movs	r3, #64	; 0x40
 8007dae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007db0:	2300      	movs	r3, #0
 8007db2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dba:	a901      	add	r1, sp, #4
 8007dbc:	f7ff fd08 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f7ff fd7c 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007dcc:	b007      	add	sp, #28
 8007dce:	bd30      	pop	{r4, r5, pc}

08007dd0 <SDMMC_CmdSendSCR>:
{
 8007dd0:	b530      	push	{r4, r5, lr}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007dda:	2433      	movs	r4, #51	; 0x33
 8007ddc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dde:	2240      	movs	r2, #64	; 0x40
 8007de0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007de2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007de8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dea:	a901      	add	r1, sp, #4
 8007dec:	f7ff fcf0 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df4:	4621      	mov	r1, r4
 8007df6:	4628      	mov	r0, r5
 8007df8:	f7ff fd64 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007dfc:	b007      	add	sp, #28
 8007dfe:	bd30      	pop	{r4, r5, pc}

08007e00 <SDMMC_CmdSendCID>:
{
 8007e00:	b510      	push	{r4, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007e0e:	22c0      	movs	r2, #192	; 0xc0
 8007e10:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e12:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e18:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e1a:	a901      	add	r1, sp, #4
 8007e1c:	f7ff fcd8 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007e20:	4620      	mov	r0, r4
 8007e22:	f7ff fbc7 	bl	80075b4 <SDMMC_GetCmdResp2>
}
 8007e26:	b006      	add	sp, #24
 8007e28:	bd10      	pop	{r4, pc}

08007e2a <SDMMC_CmdSendCSD>:
{
 8007e2a:	b510      	push	{r4, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007e30:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007e32:	2309      	movs	r3, #9
 8007e34:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007e36:	23c0      	movs	r3, #192	; 0xc0
 8007e38:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e42:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e44:	a901      	add	r1, sp, #4
 8007e46:	f7ff fcc3 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f7ff fbb2 	bl	80075b4 <SDMMC_GetCmdResp2>
}
 8007e50:	b006      	add	sp, #24
 8007e52:	bd10      	pop	{r4, pc}

08007e54 <SDMMC_CmdSetRelAdd>:
{
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	4605      	mov	r5, r0
 8007e5a:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007e60:	2403      	movs	r4, #3
 8007e62:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e64:	2240      	movs	r2, #64	; 0x40
 8007e66:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e68:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e6e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e70:	a901      	add	r1, sp, #4
 8007e72:	f7ff fcad 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007e76:	4632      	mov	r2, r6
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f7ff fdcc 	bl	8007a18 <SDMMC_GetCmdResp6>
}
 8007e80:	b006      	add	sp, #24
 8007e82:	bd70      	pop	{r4, r5, r6, pc}

08007e84 <SDMMC_CmdSendStatus>:
{
 8007e84:	b530      	push	{r4, r5, lr}
 8007e86:	b087      	sub	sp, #28
 8007e88:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007e8a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007e8c:	240d      	movs	r4, #13
 8007e8e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e90:	2340      	movs	r3, #64	; 0x40
 8007e92:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e94:	2300      	movs	r3, #0
 8007e96:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e9c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e9e:	a901      	add	r1, sp, #4
 8007ea0:	f7ff fc96 	bl	80077d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f7ff fd0a 	bl	80078c4 <SDMMC_GetCmdResp1>
}
 8007eb0:	b007      	add	sp, #28
 8007eb2:	bd30      	pop	{r4, r5, pc}

08007eb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007eb4:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007eb6:	4b04      	ldr	r3, [pc, #16]	; (8007ec8 <disk_status+0x14>)
 8007eb8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007ebc:	6852      	ldr	r2, [r2, #4]
 8007ebe:	6852      	ldr	r2, [r2, #4]
 8007ec0:	4403      	add	r3, r0
 8007ec2:	7a18      	ldrb	r0, [r3, #8]
 8007ec4:	4790      	blx	r2
  return stat;
}
 8007ec6:	bd08      	pop	{r3, pc}
 8007ec8:	200007a4 	.word	0x200007a4

08007ecc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007ecc:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8007ece:	4b08      	ldr	r3, [pc, #32]	; (8007ef0 <disk_initialize+0x24>)
 8007ed0:	5c1b      	ldrb	r3, [r3, r0]
 8007ed2:	b953      	cbnz	r3, 8007eea <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <disk_initialize+0x24>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007eda:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007ede:	6852      	ldr	r2, [r2, #4]
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	4418      	add	r0, r3
 8007ee4:	7a00      	ldrb	r0, [r0, #8]
 8007ee6:	4790      	blx	r2
  }
  return stat;
}
 8007ee8:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8007eea:	2000      	movs	r0, #0
 8007eec:	e7fc      	b.n	8007ee8 <disk_initialize+0x1c>
 8007eee:	bf00      	nop
 8007ef0:	200007a4 	.word	0x200007a4

08007ef4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ef4:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ef6:	4c04      	ldr	r4, [pc, #16]	; (8007f08 <disk_read+0x14>)
 8007ef8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007efc:	686d      	ldr	r5, [r5, #4]
 8007efe:	68ad      	ldr	r5, [r5, #8]
 8007f00:	4404      	add	r4, r0
 8007f02:	7a20      	ldrb	r0, [r4, #8]
 8007f04:	47a8      	blx	r5
  return res;
}
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	200007a4 	.word	0x200007a4

08007f0c <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8007f0c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8007f0e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007f10:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8007f14:	4770      	bx	lr

08007f16 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8007f16:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8007f18:	7883      	ldrb	r3, [r0, #2]
 8007f1a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8007f1e:	7843      	ldrb	r3, [r0, #1]
 8007f20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007f24:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007f26:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007f2a:	4770      	bx	lr

08007f2c <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8007f2c:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
	QWORD rv;

	rv = ptr[7];
 8007f30:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
 8007f32:	2500      	movs	r5, #0
 8007f34:	0214      	lsls	r4, r2, #8
 8007f36:	7982      	ldrb	r2, [r0, #6]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	ea44 0b02 	orr.w	fp, r4, r2
 8007f3e:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[5];
 8007f42:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8007f46:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8007f4a:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8007f4e:	7944      	ldrb	r4, [r0, #5]
 8007f50:	2500      	movs	r5, #0
 8007f52:	ea44 0b02 	orr.w	fp, r4, r2
 8007f56:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[4];
 8007f5a:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8007f5e:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8007f62:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8007f66:	7904      	ldrb	r4, [r0, #4]
 8007f68:	2500      	movs	r5, #0
 8007f6a:	ea44 0b02 	orr.w	fp, r4, r2
 8007f6e:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[3];
 8007f72:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8007f76:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8007f7a:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8007f7e:	78c4      	ldrb	r4, [r0, #3]
 8007f80:	2500      	movs	r5, #0
 8007f82:	ea44 0b02 	orr.w	fp, r4, r2
 8007f86:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
 8007f8a:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8007f8e:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8007f92:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8007f96:	7884      	ldrb	r4, [r0, #2]
 8007f98:	2500      	movs	r5, #0
 8007f9a:	ea44 0602 	orr.w	r6, r4, r2
 8007f9e:	ea45 0703 	orr.w	r7, r5, r3
	rv = rv << 8 | ptr[1];
 8007fa2:	ea4f 2c07 	mov.w	ip, r7, lsl #8
 8007fa6:	ea4c 6c16 	orr.w	ip, ip, r6, lsr #24
 8007faa:	ea4f 2b06 	mov.w	fp, r6, lsl #8
 8007fae:	7844      	ldrb	r4, [r0, #1]
 8007fb0:	2500      	movs	r5, #0
 8007fb2:	ea4b 0204 	orr.w	r2, fp, r4
 8007fb6:	ea4c 0305 	orr.w	r3, ip, r5
	rv = rv << 8 | ptr[0];
 8007fba:	021d      	lsls	r5, r3, #8
 8007fbc:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8007fc0:	0214      	lsls	r4, r2, #8
 8007fc2:	7802      	ldrb	r2, [r0, #0]
 8007fc4:	2300      	movs	r3, #0
	return rv;
}
 8007fc6:	ea42 0004 	orr.w	r0, r2, r4
 8007fca:	ea43 0105 	orr.w	r1, r3, r5
 8007fce:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 8007fd2:	4770      	bx	lr

08007fd4 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	b12a      	cbz	r2, 8007fe4 <mem_cpy+0x10>
		do {
			*d++ = *s++;
 8007fd8:	780a      	ldrb	r2, [r1, #0]
 8007fda:	7002      	strb	r2, [r0, #0]
 8007fdc:	3001      	adds	r0, #1
 8007fde:	3101      	adds	r1, #1
		} while (--cnt);
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	d1f9      	bne.n	8007fd8 <mem_cpy+0x4>
	}
}
 8007fe4:	4770      	bx	lr

08007fe6 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8007fe6:	7001      	strb	r1, [r0, #0]
 8007fe8:	3001      	adds	r0, #1
	} while (--cnt);
 8007fea:	3a01      	subs	r2, #1
 8007fec:	d1fb      	bne.n	8007fe6 <mem_set>
}
 8007fee:	4770      	bx	lr

08007ff0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007ff0:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8007ff2:	1c45      	adds	r5, r0, #1
 8007ff4:	7803      	ldrb	r3, [r0, #0]
 8007ff6:	7808      	ldrb	r0, [r1, #0]
 8007ff8:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 8007ffa:	3a01      	subs	r2, #1
 8007ffc:	d004      	beq.n	8008008 <mem_cmp+0x18>
 8007ffe:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 8008000:	4628      	mov	r0, r5
 8008002:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0f4      	beq.n	8007ff2 <mem_cmp+0x2>

	return r;
}
 8008008:	4618      	mov	r0, r3
 800800a:	bc30      	pop	{r4, r5}
 800800c:	4770      	bx	lr

0800800e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
 800800e:	e000      	b.n	8008012 <chk_chr+0x4>
 8008010:	3001      	adds	r0, #1
 8008012:	7803      	ldrb	r3, [r0, #0]
 8008014:	b10b      	cbz	r3, 800801a <chk_chr+0xc>
 8008016:	428b      	cmp	r3, r1
 8008018:	d1fa      	bne.n	8008010 <chk_chr+0x2>
	return *str;
}
 800801a:	4618      	mov	r0, r3
 800801c:	4770      	bx	lr

0800801e <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800801e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008020:	69c3      	ldr	r3, [r0, #28]
 8008022:	3b02      	subs	r3, #2
 8008024:	428b      	cmp	r3, r1
 8008026:	d904      	bls.n	8008032 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8008028:	6903      	ldr	r3, [r0, #16]
 800802a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800802c:	fb01 0003 	mla	r0, r1, r3, r0
 8008030:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008032:	2000      	movs	r0, #0
}
 8008034:	4770      	bx	lr

08008036 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008036:	b510      	push	{r4, lr}
 8008038:	4619      	mov	r1, r3
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800803a:	6803      	ldr	r3, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800803c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800803e:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008040:	0a50      	lsrs	r0, r2, #9
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	2300      	movs	r3, #0
 8008046:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 800804a:	0a49      	lsrs	r1, r1, #9
 800804c:	f7f8 ff14 	bl	8000e78 <__aeabi_uldivmod>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008050:	6823      	ldr	r3, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008052:	b133      	cbz	r3, 8008062 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 8008054:	4298      	cmp	r0, r3
 8008056:	d302      	bcc.n	800805e <clmt_clust+0x28>
		cl -= ncl; tbl++;		/* Next fragment */
 8008058:	1ac0      	subs	r0, r0, r3
 800805a:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800805c:	e7f8      	b.n	8008050 <clmt_clust+0x1a>
	}
	return cl + *tbl;	/* Return the cluster number */
 800805e:	6863      	ldr	r3, [r4, #4]
 8008060:	4403      	add	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	bd10      	pop	{r4, pc}

08008066 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008066:	b570      	push	{r4, r5, r6, lr}
 8008068:	4606      	mov	r6, r0
 800806a:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800806c:	f101 001a 	add.w	r0, r1, #26
 8008070:	f7ff ff4c 	bl	8007f0c <ld_word>
 8008074:	4604      	mov	r4, r0
	if (fs->fs_type == FS_FAT32) {
 8008076:	7833      	ldrb	r3, [r6, #0]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d001      	beq.n	8008080 <ld_clust+0x1a>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800807c:	4620      	mov	r0, r4
 800807e:	bd70      	pop	{r4, r5, r6, pc}
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008080:	f105 0014 	add.w	r0, r5, #20
 8008084:	f7ff ff42 	bl	8007f0c <ld_word>
 8008088:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return cl;
 800808c:	e7f6      	b.n	800807c <ld_clust+0x16>
	...

08008090 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	4607      	mov	r7, r0
 8008096:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008098:	f101 001a 	add.w	r0, r1, #26
 800809c:	f7ff ff36 	bl	8007f0c <ld_word>
 80080a0:	bb60      	cbnz	r0, 80080fc <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80080a2:	7835      	ldrb	r5, [r6, #0]
 80080a4:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 80080a8:	3d01      	subs	r5, #1
 80080aa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80080ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80080b2:	f04f 0801 	mov.w	r8, #1
 80080b6:	2400      	movs	r4, #0
 80080b8:	e004      	b.n	80080c4 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80080ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080be:	4298      	cmp	r0, r3
 80080c0:	d121      	bne.n	8008106 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80080c2:	3401      	adds	r4, #1
 80080c4:	2c0c      	cmp	r4, #12
 80080c6:	d80e      	bhi.n	80080e6 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80080c8:	4b12      	ldr	r3, [pc, #72]	; (8008114 <pick_lfn+0x84>)
 80080ca:	5d18      	ldrb	r0, [r3, r4]
 80080cc:	4430      	add	r0, r6
 80080ce:	f7ff ff1d 	bl	8007f0c <ld_word>
		if (wc) {
 80080d2:	f1b8 0f00 	cmp.w	r8, #0
 80080d6:	d0f0      	beq.n	80080ba <pick_lfn+0x2a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80080d8:	2dfe      	cmp	r5, #254	; 0xfe
 80080da:	d812      	bhi.n	8008102 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80080dc:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
 80080e0:	4680      	mov	r8, r0
 80080e2:	3501      	adds	r5, #1
 80080e4:	e7ed      	b.n	80080c2 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80080e6:	7833      	ldrb	r3, [r6, #0]
 80080e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80080ec:	d00d      	beq.n	800810a <pick_lfn+0x7a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80080ee:	2dfe      	cmp	r5, #254	; 0xfe
 80080f0:	d80d      	bhi.n	800810e <pick_lfn+0x7e>
		lfnbuf[i] = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
	}

	return 1;		/* The part of LFN is valid */
 80080f8:	2001      	movs	r0, #1
 80080fa:	e000      	b.n	80080fe <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80080fc:	2000      	movs	r0, #0
}
 80080fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008102:	2000      	movs	r0, #0
 8008104:	e7fb      	b.n	80080fe <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008106:	2000      	movs	r0, #0
 8008108:	e7f9      	b.n	80080fe <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
 800810a:	2001      	movs	r0, #1
 800810c:	e7f7      	b.n	80080fe <pick_lfn+0x6e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800810e:	2000      	movs	r0, #0
 8008110:	e7f5      	b.n	80080fe <pick_lfn+0x6e>
 8008112:	bf00      	nop
 8008114:	08017f70 	.word	0x08017f70

08008118 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008118:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800811a:	220b      	movs	r2, #11
	BYTE sum = 0;
 800811c:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800811e:	01c3      	lsls	r3, r0, #7
 8008120:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8008124:	7808      	ldrb	r0, [r1, #0]
 8008126:	fa50 f383 	uxtab	r3, r0, r3
 800812a:	b2d8      	uxtb	r0, r3
 800812c:	3101      	adds	r1, #1
	} while (--n);
 800812e:	3a01      	subs	r2, #1
 8008130:	d1f5      	bne.n	800811e <sum_sfn+0x6>
	return sum;
}
 8008132:	4770      	bx	lr

08008134 <xdir_sum>:
{
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8008134:	7841      	ldrb	r1, [r0, #1]
 8008136:	3101      	adds	r1, #1
 8008138:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
 800813a:	2300      	movs	r3, #0
 800813c:	461a      	mov	r2, r3
 800813e:	428a      	cmp	r2, r1
 8008140:	d30b      	bcc.n	800815a <xdir_sum+0x26>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
		}
	}
	return sum;
}
 8008142:	4618      	mov	r0, r3
 8008144:	4770      	bx	lr
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8008146:	2a02      	cmp	r2, #2
 8008148:	d10d      	bne.n	8008166 <xdir_sum+0x32>
			i++;
 800814a:	3201      	adds	r2, #1
	for (i = sum = 0; i < szblk; i++) {
 800814c:	3201      	adds	r2, #1
 800814e:	428a      	cmp	r2, r1
 8008150:	d3f9      	bcc.n	8008146 <xdir_sum+0x12>
}
 8008152:	4618      	mov	r0, r3
 8008154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008158:	4770      	bx	lr
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800815a:	2a02      	cmp	r2, #2
 800815c:	d102      	bne.n	8008164 <xdir_sum+0x30>
			i++;
 800815e:	3201      	adds	r2, #1
	for (i = sum = 0; i < szblk; i++) {
 8008160:	3201      	adds	r2, #1
 8008162:	e7ec      	b.n	800813e <xdir_sum+0xa>
{
 8008164:	b410      	push	{r4}
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8008166:	03dc      	lsls	r4, r3, #15
 8008168:	b2a4      	uxth	r4, r4
 800816a:	eb04 0353 	add.w	r3, r4, r3, lsr #1
 800816e:	5c84      	ldrb	r4, [r0, r2]
 8008170:	4423      	add	r3, r4
 8008172:	e7eb      	b.n	800814c <xdir_sum+0x18>

08008174 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	4606      	mov	r6, r0
 8008178:	460f      	mov	r7, r1
#endif

	/* Get file name */
	di = 0;
#if _LFN_UNICODE
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800817a:	2540      	movs	r5, #64	; 0x40
	di = 0;
 800817c:	2400      	movs	r4, #0
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800817e:	e00a      	b.n	8008196 <get_xdir_info+0x22>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
		w = ld_word(dirb + si);					/* Get a character */
 8008180:	1970      	adds	r0, r6, r5
 8008182:	f7ff fec3 	bl	8007f0c <ld_word>
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
 8008186:	2cfe      	cmp	r4, #254	; 0xfe
 8008188:	d80e      	bhi.n	80081a8 <get_xdir_info+0x34>
		fno->fname[di] = w;						/* Store it */
 800818a:	f104 0312 	add.w	r3, r4, #18
 800818e:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 8008192:	3502      	adds	r5, #2
 8008194:	3401      	adds	r4, #1
 8008196:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800819a:	42a3      	cmp	r3, r4
 800819c:	d905      	bls.n	80081aa <get_xdir_info+0x36>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800819e:	f015 0f1f 	tst.w	r5, #31
 80081a2:	d1ed      	bne.n	8008180 <get_xdir_info+0xc>
 80081a4:	3502      	adds	r5, #2
 80081a6:	e7eb      	b.n	8008180 <get_xdir_info+0xc>
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
 80081a8:	2400      	movs	r4, #0
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
		fno->fname[di++] = (char)w;
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 80081aa:	b92c      	cbnz	r4, 80081b8 <get_xdir_info+0x44>
 80081ac:	f104 0312 	add.w	r3, r4, #18
 80081b0:	223f      	movs	r2, #63	; 0x3f
 80081b2:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80081b6:	3401      	adds	r4, #1
	fno->fname[di] = 0;						/* Terminate file name */
 80081b8:	3412      	adds	r4, #18
 80081ba:	2300      	movs	r3, #0
 80081bc:	f847 3024 	str.w	r3, [r7, r4, lsl #2]

	fno->altname[0] = 0;							/* No SFN */
 80081c0:	617b      	str	r3, [r7, #20]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 80081c2:	7933      	ldrb	r3, [r6, #4]
 80081c4:	743b      	strb	r3, [r7, #16]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 80081c6:	f013 0f10 	tst.w	r3, #16
 80081ca:	d110      	bne.n	80081ee <get_xdir_info+0x7a>
 80081cc:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80081d0:	f7ff feac 	bl	8007f2c <ld_qword>
 80081d4:	e9c7 0100 	strd	r0, r1, [r7]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 80081d8:	f106 000c 	add.w	r0, r6, #12
 80081dc:	f7ff fe96 	bl	8007f0c <ld_word>
 80081e0:	60f8      	str	r0, [r7, #12]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 80081e2:	f106 000e 	add.w	r0, r6, #14
 80081e6:	f7ff fe91 	bl	8007f0c <ld_word>
 80081ea:	60b8      	str	r0, [r7, #8]
}
 80081ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 80081ee:	2000      	movs	r0, #0
 80081f0:	2100      	movs	r1, #0
 80081f2:	e7ef      	b.n	80081d4 <get_xdir_info+0x60>

080081f4 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80081f4:	6801      	ldr	r1, [r0, #0]
 80081f6:	b109      	cbz	r1, 80081fc <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80081f8:	460a      	mov	r2, r1
 80081fa:	e003      	b.n	8008204 <get_ldnumber+0x10>
	int vol = -1;
 80081fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008200:	e008      	b.n	8008214 <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008202:	3204      	adds	r2, #4
 8008204:	6813      	ldr	r3, [r2, #0]
 8008206:	2b3a      	cmp	r3, #58	; 0x3a
 8008208:	bf18      	it	ne
 800820a:	2b1f      	cmpne	r3, #31
 800820c:	d8f9      	bhi.n	8008202 <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800820e:	2b3a      	cmp	r3, #58	; 0x3a
 8008210:	d002      	beq.n	8008218 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008212:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
 8008214:	4618      	mov	r0, r3
 8008216:	4770      	bx	lr
{
 8008218:	b410      	push	{r4}
			i = *tp++ - '0';
 800821a:	1d0c      	adds	r4, r1, #4
 800821c:	680b      	ldr	r3, [r1, #0]
 800821e:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008220:	2b09      	cmp	r3, #9
 8008222:	bf98      	it	ls
 8008224:	42a2      	cmpls	r2, r4
 8008226:	d106      	bne.n	8008236 <get_ldnumber+0x42>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008228:	b943      	cbnz	r3, 800823c <get_ldnumber+0x48>
					*path = ++tt;
 800822a:	3204      	adds	r2, #4
 800822c:	6002      	str	r2, [r0, #0]
}
 800822e:	4618      	mov	r0, r3
 8008230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008234:	4770      	bx	lr
	int vol = -1;
 8008236:	f04f 33ff 	mov.w	r3, #4294967295
 800823a:	e7f8      	b.n	800822e <get_ldnumber+0x3a>
 800823c:	f04f 33ff 	mov.w	r3, #4294967295
 8008240:	e7f5      	b.n	800822e <get_ldnumber+0x3a>

08008242 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008242:	b538      	push	{r3, r4, r5, lr}
 8008244:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008246:	b1a8      	cbz	r0, 8008274 <validate+0x32>
 8008248:	4604      	mov	r4, r0
 800824a:	6803      	ldr	r3, [r0, #0]
 800824c:	b1ab      	cbz	r3, 800827a <validate+0x38>
 800824e:	781a      	ldrb	r2, [r3, #0]
 8008250:	b1aa      	cbz	r2, 800827e <validate+0x3c>
 8008252:	6841      	ldr	r1, [r0, #4]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	4291      	cmp	r1, r2
 8008258:	d003      	beq.n	8008262 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800825a:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800825c:	2300      	movs	r3, #0
 800825e:	602b      	str	r3, [r5, #0]
	return res;
}
 8008260:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008262:	7858      	ldrb	r0, [r3, #1]
 8008264:	f7ff fe26 	bl	8007eb4 <disk_status>
 8008268:	f010 0f01 	tst.w	r0, #1
 800826c:	d10a      	bne.n	8008284 <validate+0x42>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800826e:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
 8008270:	2000      	movs	r0, #0
 8008272:	e7f4      	b.n	800825e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8008274:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008276:	2300      	movs	r3, #0
 8008278:	e7f1      	b.n	800825e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800827a:	2009      	movs	r0, #9
 800827c:	e7ef      	b.n	800825e <validate+0x1c>
 800827e:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008280:	2300      	movs	r3, #0
 8008282:	e7ec      	b.n	800825e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8008284:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008286:	2300      	movs	r3, #0
 8008288:	e7e9      	b.n	800825e <validate+0x1c>

0800828a <move_window>:
{
 800828a:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800828c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800828e:	428b      	cmp	r3, r1
 8008290:	d00e      	beq.n	80082b0 <move_window+0x26>
 8008292:	4604      	mov	r4, r0
 8008294:	460d      	mov	r5, r1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008296:	2301      	movs	r3, #1
 8008298:	460a      	mov	r2, r1
 800829a:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800829e:	7840      	ldrb	r0, [r0, #1]
 80082a0:	f7ff fe28 	bl	8007ef4 <disk_read>
 80082a4:	b110      	cbz	r0, 80082ac <move_window+0x22>
				res = FR_DISK_ERR;
 80082a6:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80082a8:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 80082ac:	6365      	str	r5, [r4, #52]	; 0x34
}
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80082b0:	2000      	movs	r0, #0
 80082b2:	e7fc      	b.n	80082ae <move_window+0x24>

080082b4 <check_fs>:
{
 80082b4:	b510      	push	{r4, lr}
 80082b6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80082b8:	2300      	movs	r3, #0
 80082ba:	70c3      	strb	r3, [r0, #3]
 80082bc:	f04f 33ff 	mov.w	r3, #4294967295
 80082c0:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80082c2:	f7ff ffe2 	bl	800828a <move_window>
 80082c6:	bb60      	cbnz	r0, 8008322 <check_fs+0x6e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80082c8:	f204 2036 	addw	r0, r4, #566	; 0x236
 80082cc:	f7ff fe1e 	bl	8007f0c <ld_word>
 80082d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80082d4:	4298      	cmp	r0, r3
 80082d6:	d126      	bne.n	8008326 <check_fs+0x72>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80082d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80082dc:	2be9      	cmp	r3, #233	; 0xe9
 80082de:	d00e      	beq.n	80082fe <check_fs+0x4a>
 80082e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80082e6:	4a13      	ldr	r2, [pc, #76]	; (8008334 <check_fs+0x80>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d008      	beq.n	80082fe <check_fs+0x4a>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80082ec:	220b      	movs	r2, #11
 80082ee:	4912      	ldr	r1, [pc, #72]	; (8008338 <check_fs+0x84>)
 80082f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80082f4:	f7ff fe7c 	bl	8007ff0 <mem_cmp>
 80082f8:	b9c8      	cbnz	r0, 800832e <check_fs+0x7a>
 80082fa:	2001      	movs	r0, #1
 80082fc:	e014      	b.n	8008328 <check_fs+0x74>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80082fe:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8008302:	f7ff fe08 	bl	8007f16 <ld_dword>
 8008306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800830a:	4b0c      	ldr	r3, [pc, #48]	; (800833c <check_fs+0x88>)
 800830c:	4298      	cmp	r0, r3
 800830e:	d00c      	beq.n	800832a <check_fs+0x76>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008310:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8008314:	f7ff fdff 	bl	8007f16 <ld_dword>
 8008318:	4b09      	ldr	r3, [pc, #36]	; (8008340 <check_fs+0x8c>)
 800831a:	4298      	cmp	r0, r3
 800831c:	d1e6      	bne.n	80082ec <check_fs+0x38>
 800831e:	2000      	movs	r0, #0
 8008320:	e002      	b.n	8008328 <check_fs+0x74>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008322:	2004      	movs	r0, #4
 8008324:	e000      	b.n	8008328 <check_fs+0x74>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008326:	2003      	movs	r0, #3
}
 8008328:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800832a:	2000      	movs	r0, #0
 800832c:	e7fc      	b.n	8008328 <check_fs+0x74>
	return 2;
 800832e:	2002      	movs	r0, #2
 8008330:	e7fa      	b.n	8008328 <check_fs+0x74>
 8008332:	bf00      	nop
 8008334:	009000eb 	.word	0x009000eb
 8008338:	08017f80 	.word	0x08017f80
 800833c:	00544146 	.word	0x00544146
 8008340:	33544146 	.word	0x33544146

08008344 <find_volume>:
{
 8008344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	460e      	mov	r6, r1
	*rfs = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8008350:	f7ff ff50 	bl	80081f4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008354:	1e05      	subs	r5, r0, #0
 8008356:	f2c0 8186 	blt.w	8008666 <find_volume+0x322>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800835a:	4bd0      	ldr	r3, [pc, #832]	; (800869c <find_volume+0x358>)
 800835c:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008360:	2c00      	cmp	r4, #0
 8008362:	f000 8182 	beq.w	800866a <find_volume+0x326>
	*rfs = fs;							/* Return pointer to the file system object */
 8008366:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008368:	7823      	ldrb	r3, [r4, #0]
 800836a:	b133      	cbz	r3, 800837a <find_volume+0x36>
		stat = disk_status(fs->drv);
 800836c:	7860      	ldrb	r0, [r4, #1]
 800836e:	f7ff fda1 	bl	8007eb4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008372:	f010 0f01 	tst.w	r0, #1
 8008376:	f000 817a 	beq.w	800866e <find_volume+0x32a>
	fs->fs_type = 0;					/* Clear the file system object */
 800837a:	2300      	movs	r3, #0
 800837c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800837e:	b2e8      	uxtb	r0, r5
 8008380:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008382:	f7ff fda3 	bl	8007ecc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008386:	f010 0f01 	tst.w	r0, #1
 800838a:	f040 8172 	bne.w	8008672 <find_volume+0x32e>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800838e:	2100      	movs	r1, #0
 8008390:	4620      	mov	r0, r4
 8008392:	f7ff ff8f 	bl	80082b4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008396:	2802      	cmp	r0, #2
 8008398:	f000 80b2 	beq.w	8008500 <find_volume+0x1bc>
	bsect = 0;
 800839c:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800839e:	2804      	cmp	r0, #4
 80083a0:	f000 816b 	beq.w	800867a <find_volume+0x336>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80083a4:	2801      	cmp	r0, #1
 80083a6:	f200 816a 	bhi.w	800867e <find_volume+0x33a>
	if (fmt == 1) {
 80083aa:	f000 812b 	beq.w	8008604 <find_volume+0x2c0>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80083ae:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80083b2:	f7ff fdab 	bl	8007f0c <ld_word>
 80083b6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80083ba:	f040 8181 	bne.w	80086c0 <find_volume+0x37c>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80083be:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 80083c2:	f7ff fda3 	bl	8007f0c <ld_word>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80083c6:	4607      	mov	r7, r0
 80083c8:	b920      	cbnz	r0, 80083d4 <find_volume+0x90>
 80083ca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083ce:	f7ff fda2 	bl	8007f16 <ld_dword>
 80083d2:	4607      	mov	r7, r0
		fs->fsize = fasize;
 80083d4:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80083d6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80083da:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80083dc:	1e53      	subs	r3, r2, #1
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	f200 816f 	bhi.w	80086c4 <find_volume+0x380>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80083e6:	fb07 f502 	mul.w	r5, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80083ea:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 80083ee:	f8c4 8010 	str.w	r8, [r4, #16]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80083f2:	f1b8 0f00 	cmp.w	r8, #0
 80083f6:	f000 8167 	beq.w	80086c8 <find_volume+0x384>
 80083fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80083fe:	ea18 0f03 	tst.w	r8, r3
 8008402:	f040 8163 	bne.w	80086cc <find_volume+0x388>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008406:	f104 0049 	add.w	r0, r4, #73	; 0x49
 800840a:	f7ff fd7f 	bl	8007f0c <ld_word>
 800840e:	4682      	mov	sl, r0
 8008410:	60e0      	str	r0, [r4, #12]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008412:	f010 0f0f 	tst.w	r0, #15
 8008416:	f040 815b 	bne.w	80086d0 <find_volume+0x38c>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800841a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 800841e:	f7ff fd75 	bl	8007f0c <ld_word>
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008422:	4681      	mov	r9, r0
 8008424:	b920      	cbnz	r0, 8008430 <find_volume+0xec>
 8008426:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800842a:	f7ff fd74 	bl	8007f16 <ld_dword>
 800842e:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008430:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8008434:	f7ff fd6a 	bl	8007f0c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008438:	4601      	mov	r1, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	f000 814a 	beq.w	80086d4 <find_volume+0x390>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008440:	182a      	adds	r2, r5, r0
 8008442:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008446:	4591      	cmp	r9, r2
 8008448:	f0c0 8146 	bcc.w	80086d8 <find_volume+0x394>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800844c:	eba9 0302 	sub.w	r3, r9, r2
 8008450:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 8141 	beq.w	80086dc <find_volume+0x398>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800845a:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800845e:	4283      	cmp	r3, r0
 8008460:	f240 80ea 	bls.w	8008638 <find_volume+0x2f4>
		fmt = FS_FAT32;
 8008464:	f04f 0903 	mov.w	r9, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008468:	f640 70f5 	movw	r0, #4085	; 0xff5
 800846c:	4283      	cmp	r3, r0
 800846e:	d801      	bhi.n	8008474 <find_volume+0x130>
 8008470:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008474:	f103 0802 	add.w	r8, r3, #2
 8008478:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800847c:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800847e:	1873      	adds	r3, r6, r1
 8008480:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008482:	4416      	add	r6, r2
 8008484:	6326      	str	r6, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008486:	f1b9 0f03 	cmp.w	r9, #3
 800848a:	f000 80d8 	beq.w	800863e <find_volume+0x2fa>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800848e:	f1ba 0f00 	cmp.w	sl, #0
 8008492:	f000 8129 	beq.w	80086e8 <find_volume+0x3a4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008496:	442b      	add	r3, r5
 8008498:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800849a:	f1b9 0f02 	cmp.w	r9, #2
 800849e:	f000 80df 	beq.w	8008660 <find_volume+0x31c>
 80084a2:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 80084a6:	f008 0301 	and.w	r3, r8, #1
 80084aa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80084ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80084b2:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 80084b6:	f0c0 8119 	bcc.w	80086ec <find_volume+0x3a8>
	fs->fs_type = fmt;		/* FAT sub-type */
 80084ba:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80084be:	4a78      	ldr	r2, [pc, #480]	; (80086a0 <find_volume+0x35c>)
 80084c0:	6813      	ldr	r3, [r2, #0]
 80084c2:	3301      	adds	r3, #1
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	60a3      	str	r3, [r4, #8]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80084c8:	4b76      	ldr	r3, [pc, #472]	; (80086a4 <find_volume+0x360>)
 80084ca:	6163      	str	r3, [r4, #20]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 80084cc:	4b76      	ldr	r3, [pc, #472]	; (80086a8 <find_volume+0x364>)
 80084ce:	61a3      	str	r3, [r4, #24]
	return FR_OK;
 80084d0:	2000      	movs	r0, #0
 80084d2:	e0cf      	b.n	8008674 <find_volume+0x330>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80084d4:	2000      	movs	r0, #0
 80084d6:	ab04      	add	r3, sp, #16
 80084d8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80084dc:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80084e0:	3501      	adds	r5, #1
 80084e2:	2d03      	cmp	r5, #3
 80084e4:	d80e      	bhi.n	8008504 <find_volume+0x1c0>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80084e6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80084ea:	012b      	lsls	r3, r5, #4
 80084ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80084f0:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80084f2:	7903      	ldrb	r3, [r0, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0ed      	beq.n	80084d4 <find_volume+0x190>
 80084f8:	3008      	adds	r0, #8
 80084fa:	f7ff fd0c 	bl	8007f16 <ld_dword>
 80084fe:	e7ea      	b.n	80084d6 <find_volume+0x192>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008500:	2500      	movs	r5, #0
 8008502:	e7ee      	b.n	80084e2 <find_volume+0x19e>
 8008504:	2500      	movs	r5, #0
 8008506:	e00a      	b.n	800851e <find_volume+0x1da>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008508:	4631      	mov	r1, r6
 800850a:	4620      	mov	r0, r4
 800850c:	f7ff fed2 	bl	80082b4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008510:	2801      	cmp	r0, #1
 8008512:	f67f af44 	bls.w	800839e <find_volume+0x5a>
 8008516:	3501      	adds	r5, #1
 8008518:	2d03      	cmp	r5, #3
 800851a:	f63f af40 	bhi.w	800839e <find_volume+0x5a>
			bsect = br[i];
 800851e:	ab04      	add	r3, sp, #16
 8008520:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008524:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008528:	2e00      	cmp	r6, #0
 800852a:	d1ed      	bne.n	8008508 <find_volume+0x1c4>
 800852c:	2003      	movs	r0, #3
 800852e:	e7f2      	b.n	8008516 <find_volume+0x1d2>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8008530:	3301      	adds	r3, #1
 8008532:	2b3f      	cmp	r3, #63	; 0x3f
 8008534:	d804      	bhi.n	8008540 <find_volume+0x1fc>
 8008536:	18e2      	adds	r2, r4, r3
 8008538:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800853c:	2a00      	cmp	r2, #0
 800853e:	d0f7      	beq.n	8008530 <find_volume+0x1ec>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8008540:	2b3f      	cmp	r3, #63	; 0x3f
 8008542:	f240 809e 	bls.w	8008682 <find_volume+0x33e>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8008546:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800854a:	f7ff fcdf 	bl	8007f0c <ld_word>
 800854e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008552:	f040 8098 	bne.w	8008686 <find_volume+0x342>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8008556:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 800855a:	2b09      	cmp	r3, #9
 800855c:	f040 8095 	bne.w	800868a <find_volume+0x346>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8008560:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8008564:	f7ff fce2 	bl	8007f2c <ld_qword>
 8008568:	eb10 0806 	adds.w	r8, r0, r6
 800856c:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8008570:	f1b9 0f01 	cmp.w	r9, #1
 8008574:	bf08      	it	eq
 8008576:	f1b8 0f00 	cmpeq.w	r8, #0
 800857a:	f080 8088 	bcs.w	800868e <find_volume+0x34a>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800857e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8008582:	f7ff fcc8 	bl	8007f16 <ld_dword>
 8008586:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8008588:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 800858c:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800858e:	2b01      	cmp	r3, #1
 8008590:	d17f      	bne.n	8008692 <find_volume+0x34e>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8008592:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8008596:	2501      	movs	r5, #1
 8008598:	409d      	lsls	r5, r3
 800859a:	6125      	str	r5, [r4, #16]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800859c:	2d00      	cmp	r5, #0
 800859e:	d07a      	beq.n	8008696 <find_volume+0x352>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80085a0:	f104 0094 	add.w	r0, r4, #148	; 0x94
 80085a4:	f7ff fcb7 	bl	8007f16 <ld_dword>
 80085a8:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80085aa:	4b40      	ldr	r3, [pc, #256]	; (80086ac <find_volume+0x368>)
 80085ac:	4298      	cmp	r0, r3
 80085ae:	d87f      	bhi.n	80086b0 <find_volume+0x36c>
		fs->n_fatent = nclst + 2;
 80085b0:	1c83      	adds	r3, r0, #2
 80085b2:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
 80085b4:	6266      	str	r6, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80085b6:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80085ba:	f7ff fcac 	bl	8007f16 <ld_dword>
 80085be:	1987      	adds	r7, r0, r6
 80085c0:	6327      	str	r7, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80085c2:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80085c6:	f7ff fca6 	bl	8007f16 <ld_dword>
 80085ca:	4430      	add	r0, r6
 80085cc:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80085ce:	fb0a f205 	mul.w	r2, sl, r5
 80085d2:	2100      	movs	r1, #0
 80085d4:	19d2      	adds	r2, r2, r7
 80085d6:	f141 0300 	adc.w	r3, r1, #0
 80085da:	4599      	cmp	r9, r3
 80085dc:	bf08      	it	eq
 80085de:	4590      	cmpeq	r8, r2
 80085e0:	d368      	bcc.n	80086b4 <find_volume+0x370>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80085e2:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80085e6:	f7ff fc96 	bl	8007f16 <ld_dword>
 80085ea:	4601      	mov	r1, r0
 80085ec:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7ff fd15 	bl	800801e <clust2sect>
 80085f4:	4601      	mov	r1, r0
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7ff fe47 	bl	800828a <move_window>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d15b      	bne.n	80086b8 <find_volume+0x374>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8008600:	2500      	movs	r5, #0
 8008602:	e002      	b.n	800860a <find_volume+0x2c6>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8008604:	230b      	movs	r3, #11
 8008606:	e794      	b.n	8008532 <find_volume+0x1ee>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8008608:	3520      	adds	r5, #32
 800860a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800860e:	d20d      	bcs.n	800862c <find_volume+0x2e8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8008610:	1963      	adds	r3, r4, r5
 8008612:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008616:	2b81      	cmp	r3, #129	; 0x81
 8008618:	d1f6      	bne.n	8008608 <find_volume+0x2c4>
 800861a:	f104 0338 	add.w	r3, r4, #56	; 0x38
 800861e:	f105 0014 	add.w	r0, r5, #20
 8008622:	4418      	add	r0, r3
 8008624:	f7ff fc77 	bl	8007f16 <ld_dword>
 8008628:	2802      	cmp	r0, #2
 800862a:	d1ed      	bne.n	8008608 <find_volume+0x2c4>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800862c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008630:	d044      	beq.n	80086bc <find_volume+0x378>
		fmt = FS_EXFAT;			/* FAT sub-type */
 8008632:	f04f 0904 	mov.w	r9, #4
 8008636:	e740      	b.n	80084ba <find_volume+0x176>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008638:	f04f 0902 	mov.w	r9, #2
 800863c:	e714      	b.n	8008468 <find_volume+0x124>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800863e:	f104 0062 	add.w	r0, r4, #98	; 0x62
 8008642:	f7ff fc63 	bl	8007f0c <ld_word>
 8008646:	2800      	cmp	r0, #0
 8008648:	d14a      	bne.n	80086e0 <find_volume+0x39c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800864a:	f1ba 0f00 	cmp.w	sl, #0
 800864e:	d149      	bne.n	80086e4 <find_volume+0x3a0>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008650:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8008654:	f7ff fc5f 	bl	8007f16 <ld_dword>
 8008658:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800865a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800865e:	e726      	b.n	80084ae <find_volume+0x16a>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008660:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8008664:	e723      	b.n	80084ae <find_volume+0x16a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008666:	200b      	movs	r0, #11
 8008668:	e004      	b.n	8008674 <find_volume+0x330>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800866a:	200c      	movs	r0, #12
 800866c:	e002      	b.n	8008674 <find_volume+0x330>
			return FR_OK;				/* The file system object is valid */
 800866e:	2000      	movs	r0, #0
 8008670:	e000      	b.n	8008674 <find_volume+0x330>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008672:	2003      	movs	r0, #3
}
 8008674:	b004      	add	sp, #16
 8008676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800867a:	2001      	movs	r0, #1
 800867c:	e7fa      	b.n	8008674 <find_volume+0x330>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800867e:	200d      	movs	r0, #13
 8008680:	e7f8      	b.n	8008674 <find_volume+0x330>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8008682:	200d      	movs	r0, #13
 8008684:	e7f6      	b.n	8008674 <find_volume+0x330>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8008686:	200d      	movs	r0, #13
 8008688:	e7f4      	b.n	8008674 <find_volume+0x330>
			return FR_NO_FILESYSTEM;
 800868a:	200d      	movs	r0, #13
 800868c:	e7f2      	b.n	8008674 <find_volume+0x330>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800868e:	200d      	movs	r0, #13
 8008690:	e7f0      	b.n	8008674 <find_volume+0x330>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8008692:	200d      	movs	r0, #13
 8008694:	e7ee      	b.n	8008674 <find_volume+0x330>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8008696:	200d      	movs	r0, #13
 8008698:	e7ec      	b.n	8008674 <find_volume+0x330>
 800869a:	bf00      	nop
 800869c:	2000039c 	.word	0x2000039c
 80086a0:	200003a0 	.word	0x200003a0
 80086a4:	200003a4 	.word	0x200003a4
 80086a8:	2000013c 	.word	0x2000013c
 80086ac:	7ffffffd 	.word	0x7ffffffd
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80086b0:	200d      	movs	r0, #13
 80086b2:	e7df      	b.n	8008674 <find_volume+0x330>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80086b4:	200d      	movs	r0, #13
 80086b6:	e7dd      	b.n	8008674 <find_volume+0x330>
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80086b8:	2001      	movs	r0, #1
 80086ba:	e7db      	b.n	8008674 <find_volume+0x330>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80086bc:	200d      	movs	r0, #13
 80086be:	e7d9      	b.n	8008674 <find_volume+0x330>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80086c0:	200d      	movs	r0, #13
 80086c2:	e7d7      	b.n	8008674 <find_volume+0x330>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80086c4:	200d      	movs	r0, #13
 80086c6:	e7d5      	b.n	8008674 <find_volume+0x330>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80086c8:	200d      	movs	r0, #13
 80086ca:	e7d3      	b.n	8008674 <find_volume+0x330>
 80086cc:	200d      	movs	r0, #13
 80086ce:	e7d1      	b.n	8008674 <find_volume+0x330>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80086d0:	200d      	movs	r0, #13
 80086d2:	e7cf      	b.n	8008674 <find_volume+0x330>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80086d4:	200d      	movs	r0, #13
 80086d6:	e7cd      	b.n	8008674 <find_volume+0x330>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80086d8:	200d      	movs	r0, #13
 80086da:	e7cb      	b.n	8008674 <find_volume+0x330>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80086dc:	200d      	movs	r0, #13
 80086de:	e7c9      	b.n	8008674 <find_volume+0x330>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80086e0:	200d      	movs	r0, #13
 80086e2:	e7c7      	b.n	8008674 <find_volume+0x330>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80086e4:	200d      	movs	r0, #13
 80086e6:	e7c5      	b.n	8008674 <find_volume+0x330>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80086e8:	200d      	movs	r0, #13
 80086ea:	e7c3      	b.n	8008674 <find_volume+0x330>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80086ec:	200d      	movs	r0, #13
 80086ee:	e7c1      	b.n	8008674 <find_volume+0x330>

080086f0 <get_fat>:
{
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80086f2:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80086f4:	2901      	cmp	r1, #1
 80086f6:	f240 808e 	bls.w	8008816 <get_fat+0x126>
 80086fa:	69eb      	ldr	r3, [r5, #28]
 80086fc:	428b      	cmp	r3, r1
 80086fe:	f240 808c 	bls.w	800881a <get_fat+0x12a>
 8008702:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 8008704:	782b      	ldrb	r3, [r5, #0]
 8008706:	3b01      	subs	r3, #1
 8008708:	2b03      	cmp	r3, #3
 800870a:	f200 8088 	bhi.w	800881e <get_fat+0x12e>
 800870e:	e8df f003 	tbb	[pc, r3]
 8008712:	2902      	.short	0x2902
 8008714:	4d3a      	.short	0x4d3a
			bc = (UINT)clst; bc += bc / 2;
 8008716:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800871a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800871c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8008720:	4628      	mov	r0, r5
 8008722:	f7ff fdb2 	bl	800828a <move_window>
 8008726:	2800      	cmp	r0, #0
 8008728:	d17b      	bne.n	8008822 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800872a:	1c77      	adds	r7, r6, #1
 800872c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8008730:	442e      	add	r6, r5
 8008732:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008736:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008738:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800873c:	4628      	mov	r0, r5
 800873e:	f7ff fda4 	bl	800828a <move_window>
 8008742:	2800      	cmp	r0, #0
 8008744:	d170      	bne.n	8008828 <get_fat+0x138>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008746:	f3c7 0308 	ubfx	r3, r7, #0, #9
 800874a:	442b      	add	r3, r5
 800874c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8008750:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008754:	f014 0f01 	tst.w	r4, #1
 8008758:	d001      	beq.n	800875e <get_fat+0x6e>
 800875a:	0900      	lsrs	r0, r0, #4
 800875c:	e05c      	b.n	8008818 <get_fat+0x128>
 800875e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008762:	e059      	b.n	8008818 <get_fat+0x128>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008764:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008766:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800876a:	4628      	mov	r0, r5
 800876c:	f7ff fd8d 	bl	800828a <move_window>
 8008770:	2800      	cmp	r0, #0
 8008772:	d15c      	bne.n	800882e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008774:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8008778:	0064      	lsls	r4, r4, #1
 800877a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800877e:	4420      	add	r0, r4
 8008780:	f7ff fbc4 	bl	8007f0c <ld_word>
			break;
 8008784:	e048      	b.n	8008818 <get_fat+0x128>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008786:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008788:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800878c:	4628      	mov	r0, r5
 800878e:	f7ff fd7c 	bl	800828a <move_window>
 8008792:	2800      	cmp	r0, #0
 8008794:	d14e      	bne.n	8008834 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008796:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800879a:	00a4      	lsls	r4, r4, #2
 800879c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80087a0:	4420      	add	r0, r4
 80087a2:	f7ff fbb8 	bl	8007f16 <ld_dword>
 80087a6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80087aa:	e035      	b.n	8008818 <get_fat+0x128>
			if (obj->objsize) {
 80087ac:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80087b0:	ea52 0103 	orrs.w	r1, r2, r3
 80087b4:	d041      	beq.n	800883a <get_fat+0x14a>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80087b6:	68c1      	ldr	r1, [r0, #12]
 80087b8:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80087ba:	f112 36ff 	adds.w	r6, r2, #4294967295
 80087be:	f143 37ff 	adc.w	r7, r3, #4294967295
 80087c2:	0a72      	lsrs	r2, r6, #9
 80087c4:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
 80087c8:	692b      	ldr	r3, [r5, #16]
 80087ca:	fbb2 f2f3 	udiv	r2, r2, r3
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80087ce:	7a43      	ldrb	r3, [r0, #9]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d016      	beq.n	8008802 <get_fat+0x112>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d019      	beq.n	800880c <get_fat+0x11c>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d033      	beq.n	8008844 <get_fat+0x154>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80087dc:	69c3      	ldr	r3, [r0, #28]
 80087de:	bb9b      	cbnz	r3, 8008848 <get_fat+0x158>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80087e0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80087e2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80087e6:	4628      	mov	r0, r5
 80087e8:	f7ff fd4f 	bl	800828a <move_window>
 80087ec:	bb78      	cbnz	r0, 800884e <get_fat+0x15e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80087ee:	3538      	adds	r5, #56	; 0x38
 80087f0:	00a0      	lsls	r0, r4, #2
 80087f2:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 80087f6:	4428      	add	r0, r5
 80087f8:	f7ff fb8d 	bl	8007f16 <ld_dword>
 80087fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008800:	e00a      	b.n	8008818 <get_fat+0x128>
					if (cofs <= clen) {
 8008802:	4291      	cmp	r1, r2
 8008804:	d8e6      	bhi.n	80087d4 <get_fat+0xe4>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8008806:	d01a      	beq.n	800883e <get_fat+0x14e>
 8008808:	1c60      	adds	r0, r4, #1
 800880a:	e005      	b.n	8008818 <get_fat+0x128>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800880c:	6982      	ldr	r2, [r0, #24]
 800880e:	428a      	cmp	r2, r1
 8008810:	d9e2      	bls.n	80087d8 <get_fat+0xe8>
					val = clst + 1; 	/* Generate the value */
 8008812:	1c60      	adds	r0, r4, #1
					break;
 8008814:	e000      	b.n	8008818 <get_fat+0x128>
		val = 1;	/* Internal error */
 8008816:	2001      	movs	r0, #1
}
 8008818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800881a:	2001      	movs	r0, #1
 800881c:	e7fc      	b.n	8008818 <get_fat+0x128>
			val = 1;	/* Internal error */
 800881e:	2001      	movs	r0, #1
 8008820:	e7fa      	b.n	8008818 <get_fat+0x128>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008822:	f04f 30ff 	mov.w	r0, #4294967295
 8008826:	e7f7      	b.n	8008818 <get_fat+0x128>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e7f4      	b.n	8008818 <get_fat+0x128>
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	e7f1      	b.n	8008818 <get_fat+0x128>
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	e7ee      	b.n	8008818 <get_fat+0x128>
			val = 1;	/* Internal error */
 800883a:	2001      	movs	r0, #1
 800883c:	e7ec      	b.n	8008818 <get_fat+0x128>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800883e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008842:	e7e9      	b.n	8008818 <get_fat+0x128>
			val = 1;	/* Internal error */
 8008844:	2001      	movs	r0, #1
 8008846:	e7e7      	b.n	8008818 <get_fat+0x128>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8008848:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800884c:	e7e4      	b.n	8008818 <get_fat+0x128>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800884e:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8008852:	e7e1      	b.n	8008818 <get_fat+0x128>

08008854 <dir_sdi>:
{
 8008854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008858:	4606      	mov	r6, r0
 800885a:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
 800885c:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800885e:	783b      	ldrb	r3, [r7, #0]
 8008860:	2b04      	cmp	r3, #4
 8008862:	d023      	beq.n	80088ac <dir_sdi+0x58>
 8008864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008868:	42ab      	cmp	r3, r5
 800886a:	d93d      	bls.n	80088e8 <dir_sdi+0x94>
 800886c:	f015 0f1f 	tst.w	r5, #31
 8008870:	d13d      	bne.n	80088ee <dir_sdi+0x9a>
	dp->dptr = ofs;				/* Set current offset */
 8008872:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008874:	68f4      	ldr	r4, [r6, #12]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008876:	b92c      	cbnz	r4, 8008884 <dir_sdi+0x30>
 8008878:	783b      	ldrb	r3, [r7, #0]
 800887a:	2b02      	cmp	r3, #2
 800887c:	d902      	bls.n	8008884 <dir_sdi+0x30>
		clst = fs->dirbase;
 800887e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8008880:	2300      	movs	r3, #0
 8008882:	7273      	strb	r3, [r6, #9]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008884:	b9ac      	cbnz	r4, 80088b2 <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800888c:	d931      	bls.n	80088f2 <dir_sdi+0x9e>
		dp->sect = fs->dirbase;
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 8008892:	6374      	str	r4, [r6, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8008894:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8008896:	b3a3      	cbz	r3, 8008902 <dir_sdi+0xae>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008898:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 800889c:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800889e:	3738      	adds	r7, #56	; 0x38
 80088a0:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80088a4:	443d      	add	r5, r7
 80088a6:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
 80088a8:	2000      	movs	r0, #0
 80088aa:	e01e      	b.n	80088ea <dir_sdi+0x96>
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80088ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088b0:	e7da      	b.n	8008868 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	ea4f 2843 	mov.w	r8, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80088b8:	4545      	cmp	r5, r8
 80088ba:	d30f      	bcc.n	80088dc <dir_sdi+0x88>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80088bc:	4621      	mov	r1, r4
 80088be:	4630      	mov	r0, r6
 80088c0:	f7ff ff16 	bl	80086f0 <get_fat>
 80088c4:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088c6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80088ca:	d014      	beq.n	80088f6 <dir_sdi+0xa2>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80088cc:	2801      	cmp	r0, #1
 80088ce:	d914      	bls.n	80088fa <dir_sdi+0xa6>
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	4283      	cmp	r3, r0
 80088d4:	d913      	bls.n	80088fe <dir_sdi+0xaa>
			ofs -= csz;
 80088d6:	eba5 0508 	sub.w	r5, r5, r8
 80088da:	e7ed      	b.n	80088b8 <dir_sdi+0x64>
		dp->sect = clust2sect(fs, clst);
 80088dc:	4621      	mov	r1, r4
 80088de:	4638      	mov	r0, r7
 80088e0:	f7ff fb9d 	bl	800801e <clust2sect>
 80088e4:	63b0      	str	r0, [r6, #56]	; 0x38
 80088e6:	e7d4      	b.n	8008892 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80088e8:	2002      	movs	r0, #2
}
 80088ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 80088ee:	2002      	movs	r0, #2
 80088f0:	e7fb      	b.n	80088ea <dir_sdi+0x96>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80088f2:	2002      	movs	r0, #2
 80088f4:	e7f9      	b.n	80088ea <dir_sdi+0x96>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088f6:	2001      	movs	r0, #1
 80088f8:	e7f7      	b.n	80088ea <dir_sdi+0x96>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80088fa:	2002      	movs	r0, #2
 80088fc:	e7f5      	b.n	80088ea <dir_sdi+0x96>
 80088fe:	2002      	movs	r0, #2
 8008900:	e7f3      	b.n	80088ea <dir_sdi+0x96>
	if (!dp->sect) return FR_INT_ERR;
 8008902:	2002      	movs	r0, #2
 8008904:	e7f1      	b.n	80088ea <dir_sdi+0x96>

08008906 <dir_next>:
{
 8008906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 8008908:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800890a:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800890c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800890e:	2b00      	cmp	r3, #0
 8008910:	d03b      	beq.n	800898a <dir_next+0x84>
 8008912:	3520      	adds	r5, #32
 8008914:	7832      	ldrb	r2, [r6, #0]
 8008916:	2a04      	cmp	r2, #4
 8008918:	d016      	beq.n	8008948 <dir_next+0x42>
 800891a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800891e:	42aa      	cmp	r2, r5
 8008920:	d935      	bls.n	800898e <dir_next+0x88>
 8008922:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008924:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8008928:	b93f      	cbnz	r7, 800893a <dir_next+0x34>
		dp->sect++;				/* Next sector */
 800892a:	3301      	adds	r3, #1
 800892c:	6383      	str	r3, [r0, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 800892e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008930:	b989      	cbnz	r1, 8008956 <dir_next+0x50>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008932:	68f3      	ldr	r3, [r6, #12]
 8008934:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8008938:	d909      	bls.n	800894e <dir_next+0x48>
	dp->dptr = ofs;						/* Current entry */
 800893a:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800893c:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8008940:	443b      	add	r3, r7
 8008942:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
 8008944:	2000      	movs	r0, #0
}
 8008946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894c:	e7e7      	b.n	800891e <dir_next+0x18>
				dp->sect = 0; return FR_NO_FILE;
 800894e:	2300      	movs	r3, #0
 8008950:	6383      	str	r3, [r0, #56]	; 0x38
 8008952:	2004      	movs	r0, #4
 8008954:	e7f7      	b.n	8008946 <dir_next+0x40>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008956:	6933      	ldr	r3, [r6, #16]
 8008958:	3b01      	subs	r3, #1
 800895a:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800895e:	d1ec      	bne.n	800893a <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008960:	f7ff fec6 	bl	80086f0 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008964:	2801      	cmp	r0, #1
 8008966:	d914      	bls.n	8008992 <dir_next+0x8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008968:	f1b0 3fff 	cmp.w	r0, #4294967295
 800896c:	d013      	beq.n	8008996 <dir_next+0x90>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800896e:	69f3      	ldr	r3, [r6, #28]
 8008970:	4283      	cmp	r3, r0
 8008972:	d906      	bls.n	8008982 <dir_next+0x7c>
				dp->clust = clst;		/* Initialize data for new cluster */
 8008974:	6360      	str	r0, [r4, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8008976:	4601      	mov	r1, r0
 8008978:	4630      	mov	r0, r6
 800897a:	f7ff fb50 	bl	800801e <clust2sect>
 800897e:	63a0      	str	r0, [r4, #56]	; 0x38
 8008980:	e7db      	b.n	800893a <dir_next+0x34>
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
 8008982:	2300      	movs	r3, #0
 8008984:	63a3      	str	r3, [r4, #56]	; 0x38
 8008986:	2004      	movs	r0, #4
 8008988:	e7dd      	b.n	8008946 <dir_next+0x40>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800898a:	2004      	movs	r0, #4
 800898c:	e7db      	b.n	8008946 <dir_next+0x40>
 800898e:	2004      	movs	r0, #4
 8008990:	e7d9      	b.n	8008946 <dir_next+0x40>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008992:	2002      	movs	r0, #2
 8008994:	e7d7      	b.n	8008946 <dir_next+0x40>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008996:	2001      	movs	r0, #1
 8008998:	e7d5      	b.n	8008946 <dir_next+0x40>
	...

0800899c <load_xdir>:
{
 800899c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a0:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80089a2:	6800      	ldr	r0, [r0, #0]
 80089a4:	6986      	ldr	r6, [r0, #24]
	res = move_window(dp->obj.fs, dp->sect);
 80089a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80089a8:	f7ff fc6f 	bl	800828a <move_window>
	if (res != FR_OK) return res;
 80089ac:	4605      	mov	r5, r0
 80089ae:	b920      	cbnz	r0, 80089ba <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80089b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80089b2:	780b      	ldrb	r3, [r1, #0]
 80089b4:	2b85      	cmp	r3, #133	; 0x85
 80089b6:	d003      	beq.n	80089c0 <load_xdir+0x24>
 80089b8:	2502      	movs	r5, #2
}
 80089ba:	4628      	mov	r0, r5
 80089bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80089c0:	2220      	movs	r2, #32
 80089c2:	4630      	mov	r0, r6
 80089c4:	f7ff fb06 	bl	8007fd4 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80089c8:	7877      	ldrb	r7, [r6, #1]
 80089ca:	3701      	adds	r7, #1
 80089cc:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80089ce:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 80089d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d6:	d851      	bhi.n	8008a7c <load_xdir+0xe0>
	res = dir_next(dp, 0);
 80089d8:	2100      	movs	r1, #0
 80089da:	4620      	mov	r0, r4
 80089dc:	f7ff ff93 	bl	8008906 <dir_next>
	if (res != FR_OK) return res;
 80089e0:	4605      	mov	r5, r0
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d1e9      	bne.n	80089ba <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 80089e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80089e8:	6820      	ldr	r0, [r4, #0]
 80089ea:	f7ff fc4e 	bl	800828a <move_window>
	if (res != FR_OK) return res;
 80089ee:	4605      	mov	r5, r0
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d1e2      	bne.n	80089ba <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 80089f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80089f6:	780b      	ldrb	r3, [r1, #0]
 80089f8:	2bc0      	cmp	r3, #192	; 0xc0
 80089fa:	d001      	beq.n	8008a00 <load_xdir+0x64>
 80089fc:	2502      	movs	r5, #2
 80089fe:	e7dc      	b.n	80089ba <load_xdir+0x1e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8008a00:	2220      	movs	r2, #32
 8008a02:	18b0      	adds	r0, r6, r2
 8008a04:	f7ff fae6 	bl	8007fd4 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8008a08:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8008a0c:	332c      	adds	r3, #44	; 0x2c
 8008a0e:	4a1e      	ldr	r2, [pc, #120]	; (8008a88 <load_xdir+0xec>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	08db      	lsrs	r3, r3, #3
 8008a16:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
 8008a1a:	d331      	bcc.n	8008a80 <load_xdir+0xe4>
	i = SZDIRE * 2;	/* C1 offset */
 8008a1c:	f04f 0840 	mov.w	r8, #64	; 0x40
 8008a20:	e003      	b.n	8008a2a <load_xdir+0x8e>
	} while ((i += SZDIRE) < sz_ent);
 8008a22:	f108 0820 	add.w	r8, r8, #32
 8008a26:	4547      	cmp	r7, r8
 8008a28:	d91a      	bls.n	8008a60 <load_xdir+0xc4>
		res = dir_next(dp, 0);
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f7ff ff6a 	bl	8008906 <dir_next>
		if (res != FR_OK) return res;
 8008a32:	4605      	mov	r5, r0
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1c0      	bne.n	80089ba <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 8008a38:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a3a:	6820      	ldr	r0, [r4, #0]
 8008a3c:	f7ff fc25 	bl	800828a <move_window>
		if (res != FR_OK) return res;
 8008a40:	4605      	mov	r5, r0
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d1b9      	bne.n	80089ba <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8008a46:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008a48:	780b      	ldrb	r3, [r1, #0]
 8008a4a:	2bc1      	cmp	r3, #193	; 0xc1
 8008a4c:	d11a      	bne.n	8008a84 <load_xdir+0xe8>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8008a4e:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8008a52:	d2e6      	bcs.n	8008a22 <load_xdir+0x86>
 8008a54:	2220      	movs	r2, #32
 8008a56:	eb06 0008 	add.w	r0, r6, r8
 8008a5a:	f7ff fabb 	bl	8007fd4 <mem_cpy>
 8008a5e:	e7e0      	b.n	8008a22 <load_xdir+0x86>
	if (i <= MAXDIRB(_MAX_LFN)) {
 8008a60:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8008a64:	d8a9      	bhi.n	80089ba <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7ff fb64 	bl	8008134 <xdir_sum>
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	1cb0      	adds	r0, r6, #2
 8008a70:	f7ff fa4c 	bl	8007f0c <ld_word>
 8008a74:	4284      	cmp	r4, r0
 8008a76:	d0a0      	beq.n	80089ba <load_xdir+0x1e>
 8008a78:	2502      	movs	r5, #2
 8008a7a:	e79e      	b.n	80089ba <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8008a7c:	2502      	movs	r5, #2
 8008a7e:	e79c      	b.n	80089ba <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8008a80:	2502      	movs	r5, #2
 8008a82:	e79a      	b.n	80089ba <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8008a84:	2502      	movs	r5, #2
 8008a86:	e798      	b.n	80089ba <load_xdir+0x1e>
 8008a88:	88888889 	.word	0x88888889

08008a8c <dir_read>:
{
 8008a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a90:	4604      	mov	r4, r0
 8008a92:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8008a94:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8008a96:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8008a9a:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
 8008a9c:	2504      	movs	r5, #4
	while (dp->sect) {
 8008a9e:	e008      	b.n	8008ab2 <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
 8008aa0:	2b85      	cmp	r3, #133	; 0x85
 8008aa2:	d028      	beq.n	8008af6 <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff ff2d 	bl	8008906 <dir_next>
		if (res != FR_OK) break;
 8008aac:	4605      	mov	r5, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d159      	bne.n	8008b66 <dir_read+0xda>
	while (dp->sect) {
 8008ab2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ab4:	2900      	cmp	r1, #0
 8008ab6:	d056      	beq.n	8008b66 <dir_read+0xda>
		res = move_window(fs, dp->sect);
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7ff fbe6 	bl	800828a <move_window>
		if (res != FR_OK) break;
 8008abe:	4605      	mov	r5, r0
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d150      	bne.n	8008b66 <dir_read+0xda>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008ac4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ac6:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d04b      	beq.n	8008b64 <dir_read+0xd8>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008acc:	7832      	ldrb	r2, [r6, #0]
 8008ace:	2a04      	cmp	r2, #4
 8008ad0:	d0e6      	beq.n	8008aa0 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008ad2:	7aca      	ldrb	r2, [r1, #11]
 8008ad4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008ad8:	7222      	strb	r2, [r4, #8]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008ada:	2b2e      	cmp	r3, #46	; 0x2e
 8008adc:	bf18      	it	ne
 8008ade:	2be5      	cmpne	r3, #229	; 0xe5
 8008ae0:	d03c      	beq.n	8008b5c <dir_read+0xd0>
 8008ae2:	f022 0020 	bic.w	r0, r2, #32
 8008ae6:	2808      	cmp	r0, #8
 8008ae8:	bf14      	ite	ne
 8008aea:	2000      	movne	r0, #0
 8008aec:	2001      	moveq	r0, #1
 8008aee:	4540      	cmp	r0, r8
 8008af0:	d00e      	beq.n	8008b10 <dir_read+0x84>
				ord = 0xFF;
 8008af2:	27ff      	movs	r7, #255	; 0xff
 8008af4:	e7d6      	b.n	8008aa4 <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8008af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008af8:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8008afa:	4620      	mov	r0, r4
 8008afc:	f7ff ff4e 	bl	800899c <load_xdir>
					if (res == FR_OK) {
 8008b00:	4605      	mov	r5, r0
 8008b02:	bb80      	cbnz	r0, 8008b66 <dir_read+0xda>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8008b04:	69b3      	ldr	r3, [r6, #24]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b0c:	7223      	strb	r3, [r4, #8]
 8008b0e:	e02a      	b.n	8008b66 <dir_read+0xda>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8008b10:	2a0f      	cmp	r2, #15
 8008b12:	d119      	bne.n	8008b48 <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8008b14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b18:	d006      	beq.n	8008b28 <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
 8008b1a:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 8008b1e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8008b22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008b24:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
 8008b26:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008b28:	42bb      	cmp	r3, r7
 8008b2a:	d001      	beq.n	8008b30 <dir_read+0xa4>
 8008b2c:	27ff      	movs	r7, #255	; 0xff
 8008b2e:	e7b9      	b.n	8008aa4 <dir_read+0x18>
 8008b30:	7b4b      	ldrb	r3, [r1, #13]
 8008b32:	454b      	cmp	r3, r9
 8008b34:	d001      	beq.n	8008b3a <dir_read+0xae>
 8008b36:	27ff      	movs	r7, #255	; 0xff
 8008b38:	e7b4      	b.n	8008aa4 <dir_read+0x18>
 8008b3a:	6970      	ldr	r0, [r6, #20]
 8008b3c:	f7ff faa8 	bl	8008090 <pick_lfn>
 8008b40:	b170      	cbz	r0, 8008b60 <dir_read+0xd4>
 8008b42:	3f01      	subs	r7, #1
 8008b44:	b2ff      	uxtb	r7, r7
 8008b46:	e7ad      	b.n	8008aa4 <dir_read+0x18>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8008b48:	b927      	cbnz	r7, 8008b54 <dir_read+0xc8>
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	f7ff fae4 	bl	8008118 <sum_sfn>
 8008b50:	4548      	cmp	r0, r9
 8008b52:	d008      	beq.n	8008b66 <dir_read+0xda>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8008b54:	f04f 33ff 	mov.w	r3, #4294967295
 8008b58:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008b5a:	e004      	b.n	8008b66 <dir_read+0xda>
				ord = 0xFF;
 8008b5c:	27ff      	movs	r7, #255	; 0xff
 8008b5e:	e7a1      	b.n	8008aa4 <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008b60:	27ff      	movs	r7, #255	; 0xff
 8008b62:	e79f      	b.n	8008aa4 <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008b64:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008b66:	b10d      	cbz	r5, 8008b6c <dir_read+0xe0>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08008b74 <create_name>:
{
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	4681      	mov	r9, r0
 8008b7c:	468b      	mov	fp, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008b7e:	f8d1 a000 	ldr.w	sl, [r1]
 8008b82:	6803      	ldr	r3, [r0, #0]
 8008b84:	695d      	ldr	r5, [r3, #20]
 8008b86:	2400      	movs	r4, #0
 8008b88:	e01d      	b.n	8008bc6 <create_name+0x52>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008b8a:	3701      	adds	r7, #1
 8008b8c:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8008b90:	2b5c      	cmp	r3, #92	; 0x5c
 8008b92:	bf18      	it	ne
 8008b94:	2b2f      	cmpne	r3, #47	; 0x2f
 8008b96:	d0f8      	beq.n	8008b8a <create_name+0x16>
	*path = &p[si];						/* Return pointer to the next segment */
 8008b98:	eb0a 0787 	add.w	r7, sl, r7, lsl #2
 8008b9c:	f8cb 7000 	str.w	r7, [fp]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008ba0:	2e1f      	cmp	r6, #31
 8008ba2:	d828      	bhi.n	8008bf6 <create_name+0x82>
 8008ba4:	f04f 0804 	mov.w	r8, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008ba8:	b344      	cbz	r4, 8008bfc <create_name+0x88>
		w = lfn[di - 1];
 8008baa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008bae:	4423      	add	r3, r4
 8008bb0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
		if (w != ' ' && w != '.') break;
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	bf18      	it	ne
 8008bb8:	2b2e      	cmpne	r3, #46	; 0x2e
 8008bba:	d11f      	bne.n	8008bfc <create_name+0x88>
		di--;
 8008bbc:	3c01      	subs	r4, #1
 8008bbe:	e7f3      	b.n	8008ba8 <create_name+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
 8008bc0:	f845 6008 	str.w	r6, [r5, r8]
		w = p[si++];					/* Get a character */
 8008bc4:	463c      	mov	r4, r7
 8008bc6:	1c67      	adds	r7, r4, #1
 8008bc8:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8008bcc:	f85a 6024 	ldr.w	r6, [sl, r4, lsl #2]
		if (w < ' ') break;				/* Break if end of the path name */
 8008bd0:	2e1f      	cmp	r6, #31
 8008bd2:	d9e1      	bls.n	8008b98 <create_name+0x24>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008bd4:	2e5c      	cmp	r6, #92	; 0x5c
 8008bd6:	bf18      	it	ne
 8008bd8:	2e2f      	cmpne	r6, #47	; 0x2f
 8008bda:	d0d7      	beq.n	8008b8c <create_name+0x18>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008bdc:	2cfe      	cmp	r4, #254	; 0xfe
 8008bde:	f200 80cd 	bhi.w	8008d7c <create_name+0x208>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008be2:	2e7f      	cmp	r6, #127	; 0x7f
 8008be4:	d8ec      	bhi.n	8008bc0 <create_name+0x4c>
 8008be6:	4631      	mov	r1, r6
 8008be8:	4866      	ldr	r0, [pc, #408]	; (8008d84 <create_name+0x210>)
 8008bea:	f7ff fa10 	bl	800800e <chk_chr>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d0e6      	beq.n	8008bc0 <create_name+0x4c>
 8008bf2:	2006      	movs	r0, #6
 8008bf4:	e06f      	b.n	8008cd6 <create_name+0x162>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008bf6:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008bfa:	e7d5      	b.n	8008ba8 <create_name+0x34>
	lfn[di] = 0;						/* LFN is created */
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008c02:	2c00      	cmp	r4, #0
 8008c04:	f000 80bc 	beq.w	8008d80 <create_name+0x20c>
	mem_set(dp->fn, ' ', 11);
 8008c08:	220b      	movs	r2, #11
 8008c0a:	2120      	movs	r1, #32
 8008c0c:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8008c10:	f7ff f9e9 	bl	8007fe6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008c14:	2300      	movs	r3, #0
 8008c16:	e000      	b.n	8008c1a <create_name+0xa6>
 8008c18:	3301      	adds	r3, #1
 8008c1a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8008c1e:	2a2e      	cmp	r2, #46	; 0x2e
 8008c20:	bf18      	it	ne
 8008c22:	2a20      	cmpne	r2, #32
 8008c24:	d0f8      	beq.n	8008c18 <create_name+0xa4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008c26:	b11b      	cbz	r3, 8008c30 <create_name+0xbc>
 8008c28:	f048 0803 	orr.w	r8, r8, #3
 8008c2c:	e000      	b.n	8008c30 <create_name+0xbc>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008c2e:	3c01      	subs	r4, #1
 8008c30:	b16c      	cbz	r4, 8008c4e <create_name+0xda>
 8008c32:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8008c36:	4422      	add	r2, r4
 8008c38:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008c3c:	2a2e      	cmp	r2, #46	; 0x2e
 8008c3e:	d1f6      	bne.n	8008c2e <create_name+0xba>
 8008c40:	f04f 0b08 	mov.w	fp, #8
 8008c44:	f04f 0a00 	mov.w	sl, #0
 8008c48:	f8cd a004 	str.w	sl, [sp, #4]
 8008c4c:	e008      	b.n	8008c60 <create_name+0xec>
 8008c4e:	46a2      	mov	sl, r4
 8008c50:	f04f 0b08 	mov.w	fp, #8
 8008c54:	2200      	movs	r2, #0
 8008c56:	9201      	str	r2, [sp, #4]
 8008c58:	e002      	b.n	8008c60 <create_name+0xec>
			cf |= NS_LOSS | NS_LFN; continue;
 8008c5a:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8008c5e:	463b      	mov	r3, r7
 8008c60:	1c5f      	adds	r7, r3, #1
 8008c62:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
		if (!w) break;					/* Break on end of the LFN */
 8008c66:	b1be      	cbz	r6, 8008c98 <create_name+0x124>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008c68:	2e20      	cmp	r6, #32
 8008c6a:	d0f6      	beq.n	8008c5a <create_name+0xe6>
 8008c6c:	2e2e      	cmp	r6, #46	; 0x2e
 8008c6e:	bf14      	ite	ne
 8008c70:	2300      	movne	r3, #0
 8008c72:	2301      	moveq	r3, #1
 8008c74:	42bc      	cmp	r4, r7
 8008c76:	bf08      	it	eq
 8008c78:	2300      	moveq	r3, #0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1ed      	bne.n	8008c5a <create_name+0xe6>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008c7e:	42bc      	cmp	r4, r7
 8008c80:	bf18      	it	ne
 8008c82:	45da      	cmpne	sl, fp
 8008c84:	d337      	bcc.n	8008cf6 <create_name+0x182>
			if (ni == 11) {				/* Long extension */
 8008c86:	f1bb 0f0b 	cmp.w	fp, #11
 8008c8a:	d027      	beq.n	8008cdc <create_name+0x168>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008c8c:	42bc      	cmp	r4, r7
 8008c8e:	d001      	beq.n	8008c94 <create_name+0x120>
 8008c90:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8008c94:	42bc      	cmp	r4, r7
 8008c96:	d224      	bcs.n	8008ce2 <create_name+0x16e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008c98:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 8008c9c:	2be5      	cmp	r3, #229	; 0xe5
 8008c9e:	d05e      	beq.n	8008d5e <create_name+0x1ea>
	if (ni == 8) b <<= 2;
 8008ca0:	f1bb 0f08 	cmp.w	fp, #8
 8008ca4:	d05f      	beq.n	8008d66 <create_name+0x1f2>
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008cac:	2a0c      	cmp	r2, #12
 8008cae:	d003      	beq.n	8008cb8 <create_name+0x144>
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d101      	bne.n	8008cbc <create_name+0x148>
 8008cb8:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008cbc:	f018 0f02 	tst.w	r8, #2
 8008cc0:	d106      	bne.n	8008cd0 <create_name+0x15c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008cc2:	9b01      	ldr	r3, [sp, #4]
 8008cc4:	f003 0303 	and.w	r3, r3, #3
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d051      	beq.n	8008d70 <create_name+0x1fc>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008ccc:	2a04      	cmp	r2, #4
 8008cce:	d052      	beq.n	8008d76 <create_name+0x202>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008cd0:	f889 804b 	strb.w	r8, [r9, #75]	; 0x4b
	return FR_OK;
 8008cd4:	2000      	movs	r0, #0
}
 8008cd6:	b003      	add	sp, #12
 8008cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8008cdc:	f048 0803 	orr.w	r8, r8, #3
 8008ce0:	e7da      	b.n	8008c98 <create_name+0x124>
			b <<= 2; continue;
 8008ce2:	9b01      	ldr	r3, [sp, #4]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008cea:	4623      	mov	r3, r4
 8008cec:	f04f 0b0b 	mov.w	fp, #11
 8008cf0:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8008cf4:	e7b4      	b.n	8008c60 <create_name+0xec>
		if (w >= 0x80) {				/* Non ASCII character */
 8008cf6:	2e7f      	cmp	r6, #127	; 0x7f
 8008cf8:	d80b      	bhi.n	8008d12 <create_name+0x19e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008cfa:	b9be      	cbnz	r6, 8008d2c <create_name+0x1b8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008cfc:	f048 0803 	orr.w	r8, r8, #3
 8008d00:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8008d02:	eb09 030a 	add.w	r3, r9, sl
 8008d06:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8008d0a:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 8008d0c:	f10a 0a01 	add.w	sl, sl, #1
 8008d10:	e7a6      	b.n	8008c60 <create_name+0xec>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008d12:	2100      	movs	r1, #0
 8008d14:	4630      	mov	r0, r6
 8008d16:	f000 fdd5 	bl	80098c4 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	b118      	cbz	r0, 8008d26 <create_name+0x1b2>
 8008d1e:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 8008d22:	4b19      	ldr	r3, [pc, #100]	; (8008d88 <create_name+0x214>)
 8008d24:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 8008d26:	f048 0802 	orr.w	r8, r8, #2
 8008d2a:	e7e6      	b.n	8008cfa <create_name+0x186>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4817      	ldr	r0, [pc, #92]	; (8008d8c <create_name+0x218>)
 8008d30:	f7ff f96d 	bl	800800e <chk_chr>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d1e1      	bne.n	8008cfc <create_name+0x188>
				if (IsUpper(w)) {		/* ASCII large capital */
 8008d38:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 8008d3c:	2b19      	cmp	r3, #25
 8008d3e:	d804      	bhi.n	8008d4a <create_name+0x1d6>
					b |= 2;
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	f043 0302 	orr.w	r3, r3, #2
 8008d46:	9301      	str	r3, [sp, #4]
 8008d48:	e7db      	b.n	8008d02 <create_name+0x18e>
					if (IsLower(w)) {	/* ASCII small capital */
 8008d4a:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 8008d4e:	2b19      	cmp	r3, #25
 8008d50:	d8d7      	bhi.n	8008d02 <create_name+0x18e>
						b |= 1; w -= 0x20;
 8008d52:	9b01      	ldr	r3, [sp, #4]
 8008d54:	f043 0301 	orr.w	r3, r3, #1
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	3e20      	subs	r6, #32
 8008d5c:	e7d1      	b.n	8008d02 <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d5e:	2305      	movs	r3, #5
 8008d60:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
 8008d64:	e79c      	b.n	8008ca0 <create_name+0x12c>
	if (ni == 8) b <<= 2;
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	9301      	str	r3, [sp, #4]
 8008d6e:	e79a      	b.n	8008ca6 <create_name+0x132>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008d70:	f048 0810 	orr.w	r8, r8, #16
 8008d74:	e7aa      	b.n	8008ccc <create_name+0x158>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008d76:	f048 0808 	orr.w	r8, r8, #8
 8008d7a:	e7a9      	b.n	8008cd0 <create_name+0x15c>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008d7c:	2006      	movs	r0, #6
 8008d7e:	e7aa      	b.n	8008cd6 <create_name+0x162>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008d80:	2006      	movs	r0, #6
 8008d82:	e7a8      	b.n	8008cd6 <create_name+0x162>
 8008d84:	08017f8c 	.word	0x08017f8c
 8008d88:	08017ef0 	.word	0x08017ef0
 8008d8c:	08017f98 	.word	0x08017f98

08008d90 <get_fileinfo>:
{
 8008d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8008d94:	6804      	ldr	r4, [r0, #0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8008d96:	2300      	movs	r3, #0
 8008d98:	648b      	str	r3, [r1, #72]	; 0x48
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008d9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8083 	beq.w	8008ea8 <get_fileinfo+0x118>
 8008da2:	460d      	mov	r5, r1
 8008da4:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008da6:	7823      	ldrb	r3, [r4, #0]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d010      	beq.n	8008dce <get_fileinfo+0x3e>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008dac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db2:	d015      	beq.n	8008de0 <get_fileinfo+0x50>
			i = j = 0;
 8008db4:	2300      	movs	r3, #0
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008db6:	6962      	ldr	r2, [r4, #20]
 8008db8:	1c59      	adds	r1, r3, #1
 8008dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008dbe:	b15a      	cbz	r2, 8008dd8 <get_fileinfo+0x48>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008dc0:	2bfe      	cmp	r3, #254	; 0xfe
 8008dc2:	d808      	bhi.n	8008dd6 <get_fileinfo+0x46>
				fno->fname[i++] = (TCHAR)w;
 8008dc4:	3312      	adds	r3, #18
 8008dc6:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	e7f3      	b.n	8008db6 <get_fileinfo+0x26>
		get_xdir_info(fs->dirbuf, fno);
 8008dce:	69a0      	ldr	r0, [r4, #24]
 8008dd0:	f7ff f9d0 	bl	8008174 <get_xdir_info>
		return;
 8008dd4:	e068      	b.n	8008ea8 <get_fileinfo+0x118>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008dd6:	2300      	movs	r3, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008dd8:	3312      	adds	r3, #18
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008de0:	f8d5 8048 	ldr.w	r8, [r5, #72]	; 0x48
	i = j = 0;
 8008de4:	2400      	movs	r4, #0
 8008de6:	4623      	mov	r3, r4
	while (i < 11) {		/* Copy name body and extension */
 8008de8:	e018      	b.n	8008e1c <get_fileinfo+0x8c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008dea:	20e5      	movs	r0, #229	; 0xe5
 8008dec:	e01f      	b.n	8008e2e <get_fileinfo+0x9e>
			if (!lfv) fno->fname[j] = '.';
 8008dee:	f1b8 0f00 	cmp.w	r8, #0
 8008df2:	d104      	bne.n	8008dfe <get_fileinfo+0x6e>
 8008df4:	f104 0312 	add.w	r3, r4, #18
 8008df8:	222e      	movs	r2, #46	; 0x2e
 8008dfa:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
			fno->altname[j++] = '.';
 8008dfe:	1d23      	adds	r3, r4, #4
 8008e00:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e04:	222e      	movs	r2, #46	; 0x2e
 8008e06:	605a      	str	r2, [r3, #4]
 8008e08:	3401      	adds	r4, #1
 8008e0a:	e012      	b.n	8008e32 <get_fileinfo+0xa2>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	e026      	b.n	8008e5e <get_fileinfo+0xce>
			fno->fname[j] = c;
 8008e10:	f104 0312 	add.w	r3, r4, #18
 8008e14:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		j++;
 8008e18:	3401      	adds	r4, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008e1a:	463b      	mov	r3, r7
	while (i < 11) {		/* Copy name body and extension */
 8008e1c:	2b0a      	cmp	r3, #10
 8008e1e:	d822      	bhi.n	8008e66 <get_fileinfo+0xd6>
		c = (TCHAR)dp->dir[i++];
 8008e20:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8008e22:	1c5f      	adds	r7, r3, #1
 8008e24:	5cd0      	ldrb	r0, [r2, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008e26:	2820      	cmp	r0, #32
 8008e28:	d0f7      	beq.n	8008e1a <get_fileinfo+0x8a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008e2a:	2805      	cmp	r0, #5
 8008e2c:	d0dd      	beq.n	8008dea <get_fileinfo+0x5a>
		if (i == 9) {						/* Insert a . if extension is exist */
 8008e2e:	2f09      	cmp	r7, #9
 8008e30:	d0dd      	beq.n	8008dee <get_fileinfo+0x5e>
		c = ff_convert(c, 1);	/* OEM -> Unicode */
 8008e32:	2101      	movs	r1, #1
 8008e34:	f000 fd46 	bl	80098c4 <ff_convert>
		if (!c) c = '?';
 8008e38:	4602      	mov	r2, r0
 8008e3a:	b900      	cbnz	r0, 8008e3e <get_fileinfo+0xae>
 8008e3c:	223f      	movs	r2, #63	; 0x3f
		fno->altname[j] = c;
 8008e3e:	1d23      	adds	r3, r4, #4
 8008e40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e44:	605a      	str	r2, [r3, #4]
		if (!lfv) {
 8008e46:	f1b8 0f00 	cmp.w	r8, #0
 8008e4a:	d1e5      	bne.n	8008e18 <get_fileinfo+0x88>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008e4c:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8008e50:	2b19      	cmp	r3, #25
 8008e52:	d8dd      	bhi.n	8008e10 <get_fileinfo+0x80>
 8008e54:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8008e56:	7b19      	ldrb	r1, [r3, #12]
 8008e58:	2f08      	cmp	r7, #8
 8008e5a:	d8d7      	bhi.n	8008e0c <get_fileinfo+0x7c>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	4219      	tst	r1, r3
 8008e60:	d0d6      	beq.n	8008e10 <get_fileinfo+0x80>
				c += 0x20;			/* To lower */
 8008e62:	3220      	adds	r2, #32
 8008e64:	e7d4      	b.n	8008e10 <get_fileinfo+0x80>
	if (!lfv) {
 8008e66:	f1b8 0f00 	cmp.w	r8, #0
 8008e6a:	d108      	bne.n	8008e7e <get_fileinfo+0xee>
		fno->fname[j] = 0;
 8008e6c:	f104 0312 	add.w	r3, r4, #18
 8008e70:	2200      	movs	r2, #0
 8008e72:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008e76:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8008e78:	7b1b      	ldrb	r3, [r3, #12]
 8008e7a:	b903      	cbnz	r3, 8008e7e <get_fileinfo+0xee>
 8008e7c:	4614      	mov	r4, r2
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008e7e:	3404      	adds	r4, #4
 8008e80:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8008e84:	2700      	movs	r7, #0
 8008e86:	6067      	str	r7, [r4, #4]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008e88:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8008e8a:	7adb      	ldrb	r3, [r3, #11]
 8008e8c:	742b      	strb	r3, [r5, #16]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008e8e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8008e90:	301c      	adds	r0, #28
 8008e92:	f7ff f840 	bl	8007f16 <ld_dword>
 8008e96:	6028      	str	r0, [r5, #0]
 8008e98:	606f      	str	r7, [r5, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008e9a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8008e9c:	3016      	adds	r0, #22
 8008e9e:	f7ff f83a 	bl	8007f16 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008ea2:	60e8      	str	r0, [r5, #12]
 8008ea4:	0c00      	lsrs	r0, r0, #16
 8008ea6:	60a8      	str	r0, [r5, #8]
}
 8008ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008eac <xname_sum>:
{
 8008eac:	b538      	push	{r3, r4, r5, lr}
	WORD sum = 0;
 8008eae:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 8008eb0:	e00e      	b.n	8008ed0 <xname_sum+0x24>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8008eb2:	f000 fd23 	bl	80098fc <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8008eb6:	03e3      	lsls	r3, r4, #15
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8008ebe:	fa54 f380 	uxtab	r3, r4, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8008ec2:	03dc      	lsls	r4, r3, #15
 8008ec4:	b2a4      	uxth	r4, r4
 8008ec6:	eb04 0453 	add.w	r4, r4, r3, lsr #1
 8008eca:	eb04 2410 	add.w	r4, r4, r0, lsr #8
	while ((chr = *name++) != 0) {
 8008ece:	4628      	mov	r0, r5
 8008ed0:	1d05      	adds	r5, r0, #4
 8008ed2:	6800      	ldr	r0, [r0, #0]
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d1ec      	bne.n	8008eb2 <xname_sum+0x6>
}
 8008ed8:	4620      	mov	r0, r4
 8008eda:	bd38      	pop	{r3, r4, r5, pc}

08008edc <cmp_lfn>:
{
 8008edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	4681      	mov	r9, r0
 8008ee2:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008ee4:	f101 001a 	add.w	r0, r1, #26
 8008ee8:	f7ff f810 	bl	8007f0c <ld_word>
 8008eec:	bbb8      	cbnz	r0, 8008f5e <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008eee:	783d      	ldrb	r5, [r7, #0]
 8008ef0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8008ef4:	3d01      	subs	r5, #1
 8008ef6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8008efa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008efe:	f04f 0801 	mov.w	r8, #1
 8008f02:	2400      	movs	r4, #0
 8008f04:	e004      	b.n	8008f10 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f0a:	4298      	cmp	r0, r3
 8008f0c:	d12e      	bne.n	8008f6c <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f0e:	3401      	adds	r4, #1
 8008f10:	2c0c      	cmp	r4, #12
 8008f12:	d818      	bhi.n	8008f46 <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008f14:	4b19      	ldr	r3, [pc, #100]	; (8008f7c <cmp_lfn+0xa0>)
 8008f16:	5d18      	ldrb	r0, [r3, r4]
 8008f18:	4438      	add	r0, r7
 8008f1a:	f7fe fff7 	bl	8007f0c <ld_word>
 8008f1e:	4606      	mov	r6, r0
		if (wc) {
 8008f20:	f1b8 0f00 	cmp.w	r8, #0
 8008f24:	d0ef      	beq.n	8008f06 <cmp_lfn+0x2a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008f26:	2dfe      	cmp	r5, #254	; 0xfe
 8008f28:	d81c      	bhi.n	8008f64 <cmp_lfn+0x88>
 8008f2a:	f000 fce7 	bl	80098fc <ff_wtoupper>
 8008f2e:	4680      	mov	r8, r0
 8008f30:	f105 0a01 	add.w	sl, r5, #1
 8008f34:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008f38:	f000 fce0 	bl	80098fc <ff_wtoupper>
 8008f3c:	4580      	cmp	r8, r0
 8008f3e:	d113      	bne.n	8008f68 <cmp_lfn+0x8c>
			wc = uc;
 8008f40:	46b0      	mov	r8, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008f42:	4655      	mov	r5, sl
 8008f44:	e7e3      	b.n	8008f0e <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008f46:	783b      	ldrb	r3, [r7, #0]
 8008f48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008f4c:	d010      	beq.n	8008f70 <cmp_lfn+0x94>
 8008f4e:	f1b8 0f00 	cmp.w	r8, #0
 8008f52:	d00f      	beq.n	8008f74 <cmp_lfn+0x98>
 8008f54:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
 8008f58:	b973      	cbnz	r3, 8008f78 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 8008f5a:	2001      	movs	r0, #1
 8008f5c:	e000      	b.n	8008f60 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008f5e:	2000      	movs	r0, #0
}
 8008f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 8008f64:	2000      	movs	r0, #0
 8008f66:	e7fb      	b.n	8008f60 <cmp_lfn+0x84>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e7f9      	b.n	8008f60 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e7f7      	b.n	8008f60 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 8008f70:	2001      	movs	r0, #1
 8008f72:	e7f5      	b.n	8008f60 <cmp_lfn+0x84>
 8008f74:	2001      	movs	r0, #1
 8008f76:	e7f3      	b.n	8008f60 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008f78:	2000      	movs	r0, #0
 8008f7a:	e7f1      	b.n	8008f60 <cmp_lfn+0x84>
 8008f7c:	08017f70 	.word	0x08017f70

08008f80 <dir_find>:
{
 8008f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8008f86:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008f88:	2100      	movs	r1, #0
 8008f8a:	f7ff fc63 	bl	8008854 <dir_sdi>
	if (res != FR_OK) return res;
 8008f8e:	4680      	mov	r8, r0
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f040 80a0 	bne.w	80090d6 <dir_find+0x156>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008f96:	783b      	ldrb	r3, [r7, #0]
 8008f98:	2b04      	cmp	r3, #4
 8008f9a:	d006      	beq.n	8008faa <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008fa2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8008fa6:	464e      	mov	r6, r9
 8008fa8:	e042      	b.n	8009030 <dir_find+0xb0>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8008faa:	6978      	ldr	r0, [r7, #20]
 8008fac:	f7ff ff7e 	bl	8008eac <xname_sum>
 8008fb0:	4683      	mov	fp, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8008fb2:	e01e      	b.n	8008ff2 <dir_find+0x72>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8008fb4:	69b8      	ldr	r0, [r7, #24]
 8008fb6:	4430      	add	r0, r6
 8008fb8:	f7fe ffa8 	bl	8007f0c <ld_word>
 8008fbc:	f000 fc9e 	bl	80098fc <ff_wtoupper>
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8008fc8:	f000 fc98 	bl	80098fc <ff_wtoupper>
 8008fcc:	4582      	cmp	sl, r0
 8008fce:	d10a      	bne.n	8008fe6 <dir_find+0x66>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8008fd0:	3d01      	subs	r5, #1
 8008fd2:	b2ed      	uxtb	r5, r5
 8008fd4:	3602      	adds	r6, #2
 8008fd6:	f109 0901 	add.w	r9, r9, #1
 8008fda:	b125      	cbz	r5, 8008fe6 <dir_find+0x66>
				if ((di % SZDIRE) == 0) di += 2;
 8008fdc:	f016 0f1f 	tst.w	r6, #31
 8008fe0:	d1e8      	bne.n	8008fb4 <dir_find+0x34>
 8008fe2:	3602      	adds	r6, #2
 8008fe4:	e7e6      	b.n	8008fb4 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8008fe6:	b925      	cbnz	r5, 8008ff2 <dir_find+0x72>
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d071      	beq.n	80090d6 <dir_find+0x156>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7ff fd49 	bl	8008a8c <dir_read>
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d16a      	bne.n	80090d6 <dir_find+0x156>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009000:	69bd      	ldr	r5, [r7, #24]
 8009002:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009006:	f7fe ff81 	bl	8007f0c <ld_word>
 800900a:	4558      	cmp	r0, fp
 800900c:	d1f1      	bne.n	8008ff2 <dir_find+0x72>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800900e:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 8009012:	f04f 0900 	mov.w	r9, #0
 8009016:	2640      	movs	r6, #64	; 0x40
 8009018:	e7df      	b.n	8008fda <dir_find+0x5a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800901a:	f04f 33ff 	mov.w	r3, #4294967295
 800901e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009020:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8009022:	2100      	movs	r1, #0
 8009024:	4620      	mov	r0, r4
 8009026:	f7ff fc6e 	bl	8008906 <dir_next>
	} while (res == FR_OK);
 800902a:	4680      	mov	r8, r0
 800902c:	2800      	cmp	r0, #0
 800902e:	d152      	bne.n	80090d6 <dir_find+0x156>
		res = move_window(fs, dp->sect);
 8009030:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009032:	4638      	mov	r0, r7
 8009034:	f7ff f929 	bl	800828a <move_window>
		if (res != FR_OK) break;
 8009038:	4680      	mov	r8, r0
 800903a:	2800      	cmp	r0, #0
 800903c:	d14b      	bne.n	80090d6 <dir_find+0x156>
		c = dp->dir[DIR_Name];
 800903e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8009040:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009042:	2b00      	cmp	r3, #0
 8009044:	d045      	beq.n	80090d2 <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009046:	7ae9      	ldrb	r1, [r5, #11]
 8009048:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800904c:	7222      	strb	r2, [r4, #8]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800904e:	2be5      	cmp	r3, #229	; 0xe5
 8009050:	d0e3      	beq.n	800901a <dir_find+0x9a>
 8009052:	f011 0f08 	tst.w	r1, #8
 8009056:	d001      	beq.n	800905c <dir_find+0xdc>
 8009058:	2a0f      	cmp	r2, #15
 800905a:	d1de      	bne.n	800901a <dir_find+0x9a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800905c:	2a0f      	cmp	r2, #15
 800905e:	d016      	beq.n	800908e <dir_find+0x10e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009060:	b926      	cbnz	r6, 800906c <dir_find+0xec>
 8009062:	4628      	mov	r0, r5
 8009064:	f7ff f858 	bl	8008118 <sum_sfn>
 8009068:	4548      	cmp	r0, r9
 800906a:	d034      	beq.n	80090d6 <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800906c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8009070:	f013 0f01 	tst.w	r3, #1
 8009074:	d106      	bne.n	8009084 <dir_find+0x104>
 8009076:	220b      	movs	r2, #11
 8009078:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800907c:	4628      	mov	r0, r5
 800907e:	f7fe ffb7 	bl	8007ff0 <mem_cmp>
 8009082:	b340      	cbz	r0, 80090d6 <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009084:	f04f 33ff 	mov.w	r3, #4294967295
 8009088:	64e3      	str	r3, [r4, #76]	; 0x4c
 800908a:	26ff      	movs	r6, #255	; 0xff
 800908c:	e7c9      	b.n	8009022 <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800908e:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 8009092:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009096:	d1c4      	bne.n	8009022 <dir_find+0xa2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009098:	f013 0f40 	tst.w	r3, #64	; 0x40
 800909c:	d006      	beq.n	80090ac <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
 800909e:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80090a2:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80090a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80090a8:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80090aa:	461e      	mov	r6, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80090ac:	42b3      	cmp	r3, r6
 80090ae:	d001      	beq.n	80090b4 <dir_find+0x134>
 80090b0:	26ff      	movs	r6, #255	; 0xff
 80090b2:	e7b6      	b.n	8009022 <dir_find+0xa2>
 80090b4:	7b6b      	ldrb	r3, [r5, #13]
 80090b6:	454b      	cmp	r3, r9
 80090b8:	d001      	beq.n	80090be <dir_find+0x13e>
 80090ba:	26ff      	movs	r6, #255	; 0xff
 80090bc:	e7b1      	b.n	8009022 <dir_find+0xa2>
 80090be:	4629      	mov	r1, r5
 80090c0:	6978      	ldr	r0, [r7, #20]
 80090c2:	f7ff ff0b 	bl	8008edc <cmp_lfn>
 80090c6:	b110      	cbz	r0, 80090ce <dir_find+0x14e>
 80090c8:	3e01      	subs	r6, #1
 80090ca:	b2f6      	uxtb	r6, r6
 80090cc:	e7a9      	b.n	8009022 <dir_find+0xa2>
 80090ce:	26ff      	movs	r6, #255	; 0xff
 80090d0:	e7a7      	b.n	8009022 <dir_find+0xa2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80090d2:	f04f 0804 	mov.w	r8, #4
}
 80090d6:	4640      	mov	r0, r8
 80090d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090dc <follow_path>:
{
 80090dc:	b530      	push	{r4, r5, lr}
 80090de:	b083      	sub	sp, #12
 80090e0:	4604      	mov	r4, r0
 80090e2:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 80090e4:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80090e6:	e001      	b.n	80090ec <follow_path+0x10>
 80090e8:	3304      	adds	r3, #4
 80090ea:	9301      	str	r3, [sp, #4]
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	2a5c      	cmp	r2, #92	; 0x5c
 80090f2:	bf18      	it	ne
 80090f4:	2a2f      	cmpne	r2, #47	; 0x2f
 80090f6:	d0f7      	beq.n	80090e8 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 80090f8:	2200      	movs	r2, #0
 80090fa:	60e2      	str	r2, [r4, #12]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80090fc:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b1f      	cmp	r3, #31
 8009102:	d81b      	bhi.n	800913c <follow_path+0x60>
		dp->fn[NSFLAG] = NS_NONAME;
 8009104:	2380      	movs	r3, #128	; 0x80
 8009106:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800910a:	4611      	mov	r1, r2
 800910c:	4620      	mov	r0, r4
 800910e:	f7ff fba1 	bl	8008854 <dir_sdi>
 8009112:	4603      	mov	r3, r0
}
 8009114:	4618      	mov	r0, r3
 8009116:	b003      	add	sp, #12
 8009118:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800911a:	2804      	cmp	r0, #4
 800911c:	d1fa      	bne.n	8009114 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800911e:	f012 0f04 	tst.w	r2, #4
 8009122:	d1f7      	bne.n	8009114 <follow_path+0x38>
 8009124:	2305      	movs	r3, #5
 8009126:	e7f5      	b.n	8009114 <follow_path+0x38>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009128:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800912c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009132:	4419      	add	r1, r3
 8009134:	4628      	mov	r0, r5
 8009136:	f7fe ff96 	bl	8008066 <ld_clust>
 800913a:	60e0      	str	r0, [r4, #12]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800913c:	a901      	add	r1, sp, #4
 800913e:	4620      	mov	r0, r4
 8009140:	f7ff fd18 	bl	8008b74 <create_name>
			if (res != FR_OK) break;
 8009144:	4603      	mov	r3, r0
 8009146:	2800      	cmp	r0, #0
 8009148:	d1e4      	bne.n	8009114 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
 800914a:	4620      	mov	r0, r4
 800914c:	f7ff ff18 	bl	8008f80 <dir_find>
			ns = dp->fn[NSFLAG];
 8009150:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8009154:	4603      	mov	r3, r0
 8009156:	2800      	cmp	r0, #0
 8009158:	d1df      	bne.n	800911a <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800915a:	f012 0f04 	tst.w	r2, #4
 800915e:	d1d9      	bne.n	8009114 <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009160:	7a23      	ldrb	r3, [r4, #8]
 8009162:	f013 0f10 	tst.w	r3, #16
 8009166:	d01e      	beq.n	80091a6 <follow_path+0xca>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8009168:	782b      	ldrb	r3, [r5, #0]
 800916a:	2b04      	cmp	r3, #4
 800916c:	d1dc      	bne.n	8009128 <follow_path+0x4c>
				obj->c_scl = obj->sclust;
 800916e:	68e3      	ldr	r3, [r4, #12]
 8009170:	6223      	str	r3, [r4, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8009172:	6923      	ldr	r3, [r4, #16]
 8009174:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009178:	7a62      	ldrb	r2, [r4, #9]
 800917a:	4313      	orrs	r3, r2
 800917c:	6263      	str	r3, [r4, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800917e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009180:	62a3      	str	r3, [r4, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8009182:	69a8      	ldr	r0, [r5, #24]
 8009184:	3034      	adds	r0, #52	; 0x34
 8009186:	f7fe fec6 	bl	8007f16 <ld_dword>
 800918a:	60e0      	str	r0, [r4, #12]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800918c:	69ab      	ldr	r3, [r5, #24]
 800918e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	7263      	strb	r3, [r4, #9]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8009198:	69a8      	ldr	r0, [r5, #24]
 800919a:	3038      	adds	r0, #56	; 0x38
 800919c:	f7fe fec6 	bl	8007f2c <ld_qword>
 80091a0:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80091a4:	e7ca      	b.n	800913c <follow_path+0x60>
				res = FR_NO_PATH; break;
 80091a6:	2305      	movs	r3, #5
 80091a8:	e7b4      	b.n	8009114 <follow_path+0x38>
	...

080091ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80091ac:	b510      	push	{r4, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	9001      	str	r0, [sp, #4]
 80091b2:	9100      	str	r1, [sp, #0]
 80091b4:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80091b6:	a804      	add	r0, sp, #16
 80091b8:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80091bc:	f7ff f81a 	bl	80081f4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80091c0:	2800      	cmp	r0, #0
 80091c2:	db1e      	blt.n	8009202 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80091c4:	4b10      	ldr	r3, [pc, #64]	; (8009208 <f_mount+0x5c>)
 80091c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 80091ca:	b10b      	cbz	r3, 80091d0 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80091cc:	2200      	movs	r2, #0
 80091ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	b10b      	cbz	r3, 80091d8 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80091d8:	9b01      	ldr	r3, [sp, #4]
 80091da:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <f_mount+0x5c>)
 80091dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80091e0:	f114 34ff 	adds.w	r4, r4, #4294967295
 80091e4:	bf18      	it	ne
 80091e6:	2401      	movne	r4, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bf08      	it	eq
 80091ec:	2401      	moveq	r4, #1
 80091ee:	b114      	cbz	r4, 80091f6 <f_mount+0x4a>
 80091f0:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80091f2:	b004      	add	sp, #16
 80091f4:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80091f6:	2200      	movs	r2, #0
 80091f8:	a901      	add	r1, sp, #4
 80091fa:	4668      	mov	r0, sp
 80091fc:	f7ff f8a2 	bl	8008344 <find_volume>
	LEAVE_FF(fs, res);
 8009200:	e7f7      	b.n	80091f2 <f_mount+0x46>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009202:	200b      	movs	r0, #11
 8009204:	e7f5      	b.n	80091f2 <f_mount+0x46>
 8009206:	bf00      	nop
 8009208:	2000039c 	.word	0x2000039c

0800920c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800920c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009210:	b098      	sub	sp, #96	; 0x60
 8009212:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009214:	2800      	cmp	r0, #0
 8009216:	d066      	beq.n	80092e6 <f_open+0xda>
 8009218:	4605      	mov	r5, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800921a:	f002 0401 	and.w	r4, r2, #1
	res = find_volume(&path, &fs, mode);
 800921e:	4622      	mov	r2, r4
 8009220:	a903      	add	r1, sp, #12
 8009222:	a801      	add	r0, sp, #4
 8009224:	f7ff f88e 	bl	8008344 <find_volume>
	if (res == FR_OK) {
 8009228:	4606      	mov	r6, r0
 800922a:	b130      	cbz	r0, 800923a <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800922c:	b10e      	cbz	r6, 8009232 <f_open+0x26>
 800922e:	2300      	movs	r3, #0
 8009230:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8009232:	4630      	mov	r0, r6
 8009234:	b018      	add	sp, #96	; 0x60
 8009236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dj.obj.fs = fs;
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800923e:	9901      	ldr	r1, [sp, #4]
 8009240:	a804      	add	r0, sp, #16
 8009242:	f7ff ff4b 	bl	80090dc <follow_path>
		if (res == FR_OK) {
 8009246:	4606      	mov	r6, r0
 8009248:	b940      	cbnz	r0, 800925c <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800924a:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
 800924e:	2b00      	cmp	r3, #0
 8009250:	db45      	blt.n	80092de <f_open+0xd2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009252:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009256:	f013 0f10 	tst.w	r3, #16
 800925a:	d142      	bne.n	80092e2 <f_open+0xd6>
		if (res == FR_OK) {
 800925c:	2e00      	cmp	r6, #0
 800925e:	d1e5      	bne.n	800922c <f_open+0x20>
			if (fs->fs_type == FS_EXFAT) {
 8009260:	9f03      	ldr	r7, [sp, #12]
 8009262:	783b      	ldrb	r3, [r7, #0]
 8009264:	2b04      	cmp	r3, #4
 8009266:	d01d      	beq.n	80092a4 <f_open+0x98>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009268:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800926c:	4641      	mov	r1, r8
 800926e:	4638      	mov	r0, r7
 8009270:	f7fe fef9 	bl	8008066 <ld_clust>
 8009274:	60e8      	str	r0, [r5, #12]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009276:	f108 001c 	add.w	r0, r8, #28
 800927a:	f7fe fe4c 	bl	8007f16 <ld_dword>
 800927e:	6128      	str	r0, [r5, #16]
 8009280:	2300      	movs	r3, #0
 8009282:	616b      	str	r3, [r5, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009284:	2300      	movs	r3, #0
 8009286:	64ab      	str	r3, [r5, #72]	; 0x48
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009288:	9a03      	ldr	r2, [sp, #12]
 800928a:	602a      	str	r2, [r5, #0]
			fp->obj.id = fs->id;
 800928c:	6892      	ldr	r2, [r2, #8]
 800928e:	606a      	str	r2, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8009290:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8009294:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8009298:	646b      	str	r3, [r5, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800929a:	2200      	movs	r2, #0
 800929c:	2300      	movs	r3, #0
 800929e:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
 80092a2:	e7c3      	b.n	800922c <f_open+0x20>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	622b      	str	r3, [r5, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80092a8:	9b08      	ldr	r3, [sp, #32]
 80092aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092ae:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	626b      	str	r3, [r5, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80092b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092b8:	62ab      	str	r3, [r5, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80092ba:	69b8      	ldr	r0, [r7, #24]
 80092bc:	3034      	adds	r0, #52	; 0x34
 80092be:	f7fe fe2a 	bl	8007f16 <ld_dword>
 80092c2:	60e8      	str	r0, [r5, #12]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80092c4:	69b8      	ldr	r0, [r7, #24]
 80092c6:	3038      	adds	r0, #56	; 0x38
 80092c8:	f7fe fe30 	bl	8007f2c <ld_qword>
 80092cc:	e9c5 0104 	strd	r0, r1, [r5, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	726b      	strb	r3, [r5, #9]
 80092dc:	e7d2      	b.n	8009284 <f_open+0x78>
				res = FR_INVALID_NAME;
 80092de:	2606      	movs	r6, #6
 80092e0:	e7a4      	b.n	800922c <f_open+0x20>
					res = FR_NO_FILE;
 80092e2:	2604      	movs	r6, #4
 80092e4:	e7a2      	b.n	800922c <f_open+0x20>
	if (!fp) return FR_INVALID_OBJECT;
 80092e6:	2609      	movs	r6, #9
 80092e8:	e7a3      	b.n	8009232 <f_open+0x26>

080092ea <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80092ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ee:	b085      	sub	sp, #20
 80092f0:	4604      	mov	r4, r0
 80092f2:	460f      	mov	r7, r1
 80092f4:	4615      	mov	r5, r2
 80092f6:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80092f8:	2300      	movs	r3, #0
 80092fa:	6033      	str	r3, [r6, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80092fc:	9000      	str	r0, [sp, #0]
 80092fe:	a903      	add	r1, sp, #12
 8009300:	f7fe ff9f 	bl	8008242 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009304:	4680      	mov	r8, r0
 8009306:	2800      	cmp	r0, #0
 8009308:	f040 809e 	bne.w	8009448 <f_read+0x15e>
 800930c:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
 8009310:	f1b8 0f00 	cmp.w	r8, #0
 8009314:	f040 8098 	bne.w	8009448 <f_read+0x15e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009318:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800931c:	f013 0f01 	tst.w	r3, #1
 8009320:	f000 80a5 	beq.w	800946e <f_read+0x184>
	remain = fp->obj.objsize - fp->fptr;
 8009324:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8009328:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800932c:	1a12      	subs	r2, r2, r0
 800932e:	eb63 0301 	sbc.w	r3, r3, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009332:	2100      	movs	r1, #0
 8009334:	428b      	cmp	r3, r1
 8009336:	bf08      	it	eq
 8009338:	42aa      	cmpeq	r2, r5
 800933a:	d241      	bcs.n	80093c0 <f_read+0xd6>
 800933c:	4615      	mov	r5, r2
 800933e:	e03f      	b.n	80093c0 <f_read+0xd6>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009340:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009342:	b119      	cbz	r1, 800934c <f_read+0x62>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009344:	4620      	mov	r0, r4
 8009346:	f7fe fe76 	bl	8008036 <clmt_clust>
 800934a:	e055      	b.n	80093f8 <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800934c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800934e:	9800      	ldr	r0, [sp, #0]
 8009350:	f7ff f9ce 	bl	80086f0 <get_fat>
 8009354:	e050      	b.n	80093f8 <f_read+0x10e>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009356:	f04f 0802 	mov.w	r8, #2
 800935a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800935e:	e073      	b.n	8009448 <f_read+0x15e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009360:	f04f 0801 	mov.w	r8, #1
 8009364:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 8009368:	e06e      	b.n	8009448 <f_read+0x15e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800936a:	f04f 0802 	mov.w	r8, #2
 800936e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 8009372:	e069      	b.n	8009448 <f_read+0x15e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009374:	9b01      	ldr	r3, [sp, #4]
 8009376:	ea4f 2943 	mov.w	r9, r3, lsl #9
				continue;
 800937a:	e013      	b.n	80093a4 <f_read+0xba>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800937c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800937e:	4553      	cmp	r3, sl
 8009380:	d166      	bne.n	8009450 <f_read+0x166>
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
 8009382:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938c:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009390:	454d      	cmp	r5, r9
 8009392:	d200      	bcs.n	8009396 <f_read+0xac>
 8009394:	46a9      	mov	r9, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009396:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800939a:	464a      	mov	r2, r9
 800939c:	4419      	add	r1, r3
 800939e:	4638      	mov	r0, r7
 80093a0:	f7fe fe18 	bl	8007fd4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80093a4:	444f      	add	r7, r9
 80093a6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80093aa:	eb12 0009 	adds.w	r0, r2, r9
 80093ae:	f143 0100 	adc.w	r1, r3, #0
 80093b2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 80093b6:	6833      	ldr	r3, [r6, #0]
 80093b8:	444b      	add	r3, r9
 80093ba:	6033      	str	r3, [r6, #0]
 80093bc:	eba5 0509 	sub.w	r5, r5, r9
	for ( ;  btr;								/* Repeat until all data read */
 80093c0:	2d00      	cmp	r5, #0
 80093c2:	d041      	beq.n	8009448 <f_read+0x15e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80093c4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80093c8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80093cc:	2100      	movs	r1, #0
 80093ce:	ea00 0902 	and.w	r9, r0, r2
 80093d2:	ea01 0a03 	and.w	sl, r1, r3
 80093d6:	ea59 010a 	orrs.w	r1, r9, sl
 80093da:	d1d4      	bne.n	8009386 <f_read+0x9c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80093dc:	ea4f 2952 	mov.w	r9, r2, lsr #9
 80093e0:	ea49 59c3 	orr.w	r9, r9, r3, lsl #23
 80093e4:	9903      	ldr	r1, [sp, #12]
 80093e6:	6909      	ldr	r1, [r1, #16]
 80093e8:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80093ea:	ea19 0901 	ands.w	r9, r9, r1
 80093ee:	d109      	bne.n	8009404 <f_read+0x11a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80093f0:	ea52 0103 	orrs.w	r1, r2, r3
 80093f4:	d1a4      	bne.n	8009340 <f_read+0x56>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80093f6:	68e0      	ldr	r0, [r4, #12]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80093f8:	2801      	cmp	r0, #1
 80093fa:	d9ac      	bls.n	8009356 <f_read+0x6c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009400:	d0ae      	beq.n	8009360 <f_read+0x76>
				fp->clust = clst;				/* Update current cluster */
 8009402:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009404:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009408:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800940a:	4658      	mov	r0, fp
 800940c:	f7fe fe07 	bl	800801e <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009410:	4682      	mov	sl, r0
 8009412:	2800      	cmp	r0, #0
 8009414:	d0a9      	beq.n	800936a <f_read+0x80>
			sect += csect;
 8009416:	44ca      	add	sl, r9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009418:	0a6b      	lsrs	r3, r5, #9
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	d0ae      	beq.n	800937c <f_read+0x92>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800941e:	444b      	add	r3, r9
 8009420:	f8db 2010 	ldr.w	r2, [fp, #16]
 8009424:	4293      	cmp	r3, r2
 8009426:	d902      	bls.n	800942e <f_read+0x144>
					cc = fs->csize - csect;
 8009428:	eba2 0309 	sub.w	r3, r2, r9
 800942c:	9301      	str	r3, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	4652      	mov	r2, sl
 8009432:	4639      	mov	r1, r7
 8009434:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8009438:	f7fe fd5c 	bl	8007ef4 <disk_read>
 800943c:	2800      	cmp	r0, #0
 800943e:	d099      	beq.n	8009374 <f_read+0x8a>
 8009440:	f04f 0801 	mov.w	r8, #1
 8009444:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8009448:	4640      	mov	r0, r8
 800944a:	b005      	add	sp, #20
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009450:	2301      	movs	r3, #1
 8009452:	4652      	mov	r2, sl
 8009454:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8009458:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800945c:	f7fe fd4a 	bl	8007ef4 <disk_read>
 8009460:	2800      	cmp	r0, #0
 8009462:	d08e      	beq.n	8009382 <f_read+0x98>
 8009464:	f04f 0801 	mov.w	r8, #1
 8009468:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800946c:	e7ec      	b.n	8009448 <f_read+0x15e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800946e:	f04f 0807 	mov.w	r8, #7
 8009472:	e7e9      	b.n	8009448 <f_read+0x15e>

08009474 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009474:	b510      	push	{r4, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	4604      	mov	r4, r0
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800947a:	a901      	add	r1, sp, #4
 800947c:	f7fe fee1 	bl	8008242 <validate>
		if (res == FR_OK) {
 8009480:	4603      	mov	r3, r0
 8009482:	b908      	cbnz	r0, 8009488 <f_close+0x14>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009484:	2200      	movs	r2, #0
 8009486:	6022      	str	r2, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009488:	4618      	mov	r0, r3
 800948a:	b002      	add	sp, #8
 800948c:	bd10      	pop	{r4, pc}

0800948e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800948e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009492:	b087      	sub	sp, #28
 8009494:	4604      	mov	r4, r0
 8009496:	4616      	mov	r6, r2
 8009498:	461f      	mov	r7, r3
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800949a:	9001      	str	r0, [sp, #4]
 800949c:	a905      	add	r1, sp, #20
 800949e:	f7fe fed0 	bl	8008242 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80094a2:	4605      	mov	r5, r0
 80094a4:	b908      	cbnz	r0, 80094aa <f_lseek+0x1c>
 80094a6:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80094aa:	b9cd      	cbnz	r5, 80094e0 <f_lseek+0x52>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80094ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 8092 	beq.w	80095d8 <f_lseek+0x14a>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80094b4:	f1b7 3fff 	cmp.w	r7, #4294967295
 80094b8:	bf08      	it	eq
 80094ba:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 80094be:	d013      	beq.n	80094e8 <f_lseek+0x5a>
				*tbl = 0;		/* Terminate table */
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80094c0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80094c4:	4690      	mov	r8, r2
 80094c6:	4699      	mov	r9, r3
 80094c8:	42bb      	cmp	r3, r7
 80094ca:	bf08      	it	eq
 80094cc:	42b2      	cmpeq	r2, r6
 80094ce:	d301      	bcc.n	80094d4 <f_lseek+0x46>
 80094d0:	46b0      	mov	r8, r6
 80094d2:	46b9      	mov	r9, r7
			fp->fptr = ofs;				/* Set file pointer */
 80094d4:	4642      	mov	r2, r8
 80094d6:	464b      	mov	r3, r9
 80094d8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			if (ofs) {
 80094dc:	4313      	orrs	r3, r2
 80094de:	d142      	bne.n	8009566 <f_lseek+0xd8>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 80094e0:	4628      	mov	r0, r5
 80094e2:	b007      	add	sp, #28
 80094e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80094e8:	f103 0b04 	add.w	fp, r3, #4
 80094ec:	f8d3 a000 	ldr.w	sl, [r3]
			cl = fp->obj.sclust;		/* Origin of the chain */
 80094f0:	f8d4 900c 	ldr.w	r9, [r4, #12]
			if (cl) {
 80094f4:	f1b9 0f00 	cmp.w	r9, #0
 80094f8:	d029      	beq.n	800954e <f_lseek+0xc0>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80094fa:	f04f 0802 	mov.w	r8, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80094fe:	f108 0802 	add.w	r8, r8, #2
 8009502:	464e      	mov	r6, r9
 8009504:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 8009506:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 8009508:	4631      	mov	r1, r6
 800950a:	9801      	ldr	r0, [sp, #4]
 800950c:	f7ff f8f0 	bl	80086f0 <get_fat>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009510:	2801      	cmp	r0, #1
 8009512:	d914      	bls.n	800953e <f_lseek+0xb0>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009514:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009518:	d015      	beq.n	8009546 <f_lseek+0xb8>
					} while (cl == pcl + 1);
 800951a:	1c73      	adds	r3, r6, #1
						cl = get_fat(&fp->obj, cl);
 800951c:	4606      	mov	r6, r0
					} while (cl == pcl + 1);
 800951e:	4283      	cmp	r3, r0
 8009520:	d0f1      	beq.n	8009506 <f_lseek+0x78>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009522:	45c2      	cmp	sl, r8
 8009524:	d305      	bcc.n	8009532 <f_lseek+0xa4>
						*tbl++ = ncl; *tbl++ = tcl;
 8009526:	465b      	mov	r3, fp
 8009528:	f843 7b08 	str.w	r7, [r3], #8
 800952c:	f8cb 9004 	str.w	r9, [fp, #4]
 8009530:	469b      	mov	fp, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009532:	9b05      	ldr	r3, [sp, #20]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	4283      	cmp	r3, r0
 8009538:	d90b      	bls.n	8009552 <f_lseek+0xc4>
						cl = get_fat(&fp->obj, cl);
 800953a:	4681      	mov	r9, r0
 800953c:	e7df      	b.n	80094fe <f_lseek+0x70>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800953e:	2502      	movs	r5, #2
 8009540:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 8009544:	e7cc      	b.n	80094e0 <f_lseek+0x52>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009546:	2501      	movs	r5, #1
 8009548:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800954c:	e7c8      	b.n	80094e0 <f_lseek+0x52>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800954e:	f04f 0802 	mov.w	r8, #2
			*fp->cltbl = ulen;	/* Number of items used */
 8009552:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009554:	f8c3 8000 	str.w	r8, [r3]
			if (ulen <= tlen) {
 8009558:	45d0      	cmp	r8, sl
 800955a:	f200 80fb 	bhi.w	8009754 <f_lseek+0x2c6>
				*tbl = 0;		/* Terminate table */
 800955e:	2300      	movs	r3, #0
 8009560:	f8cb 3000 	str.w	r3, [fp]
 8009564:	e7bc      	b.n	80094e0 <f_lseek+0x52>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009566:	f118 36ff 	adds.w	r6, r8, #4294967295
 800956a:	f149 37ff 	adc.w	r7, r9, #4294967295
 800956e:	4632      	mov	r2, r6
 8009570:	463b      	mov	r3, r7
 8009572:	4620      	mov	r0, r4
 8009574:	f7fe fd5f 	bl	8008036 <clmt_clust>
 8009578:	4601      	mov	r1, r0
 800957a:	6420      	str	r0, [r4, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800957c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8009580:	4650      	mov	r0, sl
 8009582:	f7fe fd4c 	bl	800801e <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009586:	b308      	cbz	r0, 80095cc <f_lseek+0x13e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009588:	0a73      	lsrs	r3, r6, #9
 800958a:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
 800958e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009592:	3a01      	subs	r2, #1
 8009594:	4013      	ands	r3, r2
 8009596:	181e      	adds	r6, r3, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009598:	f240 12ff 	movw	r2, #511	; 0x1ff
 800959c:	2300      	movs	r3, #0
 800959e:	ea08 0802 	and.w	r8, r8, r2
 80095a2:	ea09 0903 	and.w	r9, r9, r3
 80095a6:	ea58 0309 	orrs.w	r3, r8, r9
 80095aa:	d099      	beq.n	80094e0 <f_lseek+0x52>
 80095ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80095ae:	42b3      	cmp	r3, r6
 80095b0:	d096      	beq.n	80094e0 <f_lseek+0x52>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80095b2:	2301      	movs	r3, #1
 80095b4:	4632      	mov	r2, r6
 80095b6:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80095ba:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80095be:	f7fe fc99 	bl	8007ef4 <disk_read>
 80095c2:	b138      	cbz	r0, 80095d4 <f_lseek+0x146>
 80095c4:	2501      	movs	r5, #1
 80095c6:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80095ca:	e789      	b.n	80094e0 <f_lseek+0x52>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80095cc:	2502      	movs	r5, #2
 80095ce:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80095d2:	e785      	b.n	80094e0 <f_lseek+0x52>
					fp->sect = dsc;
 80095d4:	6466      	str	r6, [r4, #68]	; 0x44
 80095d6:	e783      	b.n	80094e0 <f_lseek+0x52>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	781a      	ldrb	r2, [r3, #0]
 80095dc:	2a04      	cmp	r2, #4
 80095de:	d006      	beq.n	80095ee <f_lseek+0x160>
 80095e0:	2f01      	cmp	r7, #1
 80095e2:	bf08      	it	eq
 80095e4:	2e00      	cmpeq	r6, #0
 80095e6:	d302      	bcc.n	80095ee <f_lseek+0x160>
 80095e8:	f04f 36ff 	mov.w	r6, #4294967295
 80095ec:	2700      	movs	r7, #0
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80095ee:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 80095f2:	45b9      	cmp	r9, r7
 80095f4:	bf08      	it	eq
 80095f6:	45b0      	cmpeq	r8, r6
 80095f8:	d301      	bcc.n	80095fe <f_lseek+0x170>
 80095fa:	46b0      	mov	r8, r6
 80095fc:	46b9      	mov	r9, r7
		ifptr = fp->fptr;
 80095fe:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
		fp->fptr = nsect = 0;
 8009602:	2000      	movs	r0, #0
 8009604:	2100      	movs	r1, #0
 8009606:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs) {
 800960a:	ea58 0209 	orrs.w	r2, r8, r9
 800960e:	d07f      	beq.n	8009710 <f_lseek+0x282>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	ea4f 2a43 	mov.w	sl, r3, lsl #9
			if (ifptr > 0 &&
 8009616:	ea56 0307 	orrs.w	r3, r6, r7
 800961a:	d029      	beq.n	8009670 <f_lseek+0x1e2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800961c:	f04f 0b00 	mov.w	fp, #0
 8009620:	4652      	mov	r2, sl
 8009622:	465b      	mov	r3, fp
 8009624:	f118 30ff 	adds.w	r0, r8, #4294967295
 8009628:	f149 31ff 	adc.w	r1, r9, #4294967295
 800962c:	f7f7 fc24 	bl	8000e78 <__aeabi_uldivmod>
 8009630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009634:	f116 32ff 	adds.w	r2, r6, #4294967295
 8009638:	f147 33ff 	adc.w	r3, r7, #4294967295
 800963c:	4616      	mov	r6, r2
 800963e:	461f      	mov	r7, r3
 8009640:	4652      	mov	r2, sl
 8009642:	465b      	mov	r3, fp
 8009644:	4630      	mov	r0, r6
 8009646:	4639      	mov	r1, r7
 8009648:	f7f7 fc16 	bl	8000e78 <__aeabi_uldivmod>
			if (ifptr > 0 &&
 800964c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009650:	428b      	cmp	r3, r1
 8009652:	bf08      	it	eq
 8009654:	4282      	cmpeq	r2, r0
 8009656:	d30b      	bcc.n	8009670 <f_lseek+0x1e2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009658:	f10a 33ff 	add.w	r3, sl, #4294967295
 800965c:	ea26 0603 	bic.w	r6, r6, r3
 8009660:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				ofs -= fp->fptr;
 8009664:	ebb8 0806 	subs.w	r8, r8, r6
 8009668:	eb69 0907 	sbc.w	r9, r9, r7
				clst = fp->clust;
 800966c:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800966e:	e001      	b.n	8009674 <f_lseek+0x1e6>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009670:	68e6      	ldr	r6, [r4, #12]
				fp->clust = clst;
 8009672:	6426      	str	r6, [r4, #64]	; 0x40
			if (clst != 0) {
 8009674:	2e00      	cmp	r6, #0
 8009676:	d04c      	beq.n	8009712 <f_lseek+0x284>
 8009678:	4631      	mov	r1, r6
 800967a:	e004      	b.n	8009686 <f_lseek+0x1f8>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800967c:	2501      	movs	r5, #1
 800967e:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 8009682:	e72d      	b.n	80094e0 <f_lseek+0x52>
					fp->clust = clst;
 8009684:	6420      	str	r0, [r4, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8009686:	4652      	mov	r2, sl
 8009688:	2300      	movs	r3, #0
 800968a:	454b      	cmp	r3, r9
 800968c:	bf08      	it	eq
 800968e:	45c2      	cmpeq	sl, r8
 8009690:	d21c      	bcs.n	80096cc <f_lseek+0x23e>
					ofs -= bcs; fp->fptr += bcs;
 8009692:	ebb8 0802 	subs.w	r8, r8, r2
 8009696:	eb69 0903 	sbc.w	r9, r9, r3
 800969a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
 800969e:	18b6      	adds	r6, r6, r2
 80096a0:	415f      	adcs	r7, r3
 80096a2:	4632      	mov	r2, r6
 80096a4:	463b      	mov	r3, r7
 80096a6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80096aa:	9801      	ldr	r0, [sp, #4]
 80096ac:	f7ff f820 	bl	80086f0 <get_fat>
 80096b0:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80096b2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096b6:	d0e1      	beq.n	800967c <f_lseek+0x1ee>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80096b8:	2801      	cmp	r0, #1
 80096ba:	d903      	bls.n	80096c4 <f_lseek+0x236>
 80096bc:	9b05      	ldr	r3, [sp, #20]
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	4283      	cmp	r3, r0
 80096c2:	d8df      	bhi.n	8009684 <f_lseek+0x1f6>
 80096c4:	2502      	movs	r5, #2
 80096c6:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80096ca:	e709      	b.n	80094e0 <f_lseek+0x52>
 80096cc:	460e      	mov	r6, r1
				fp->fptr += ofs;
 80096ce:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80096d2:	eb12 0008 	adds.w	r0, r2, r8
 80096d6:	eb43 0109 	adc.w	r1, r3, r9
 80096da:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
				if (ofs % SS(fs)) {
 80096de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80096e2:	2300      	movs	r3, #0
 80096e4:	ea02 0008 	and.w	r0, r2, r8
 80096e8:	ea03 0109 	and.w	r1, r3, r9
 80096ec:	ea50 0301 	orrs.w	r3, r0, r1
 80096f0:	d02a      	beq.n	8009748 <f_lseek+0x2ba>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80096f2:	4631      	mov	r1, r6
 80096f4:	9805      	ldr	r0, [sp, #20]
 80096f6:	f7fe fc92 	bl	800801e <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80096fa:	b128      	cbz	r0, 8009708 <f_lseek+0x27a>
					nsect += (DWORD)(ofs / SS(fs));
 80096fc:	ea4f 2658 	mov.w	r6, r8, lsr #9
 8009700:	ea46 56c9 	orr.w	r6, r6, r9, lsl #23
 8009704:	4406      	add	r6, r0
 8009706:	e004      	b.n	8009712 <f_lseek+0x284>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009708:	2502      	movs	r5, #2
 800970a:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800970e:	e6e7      	b.n	80094e0 <f_lseek+0x52>
		fp->fptr = nsect = 0;
 8009710:	2600      	movs	r6, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009712:	e9d4 780e 	ldrd	r7, r8, [r4, #56]	; 0x38
 8009716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800971a:	2100      	movs	r1, #0
 800971c:	ea07 0200 	and.w	r2, r7, r0
 8009720:	ea08 0301 	and.w	r3, r8, r1
 8009724:	4313      	orrs	r3, r2
 8009726:	f43f aedb 	beq.w	80094e0 <f_lseek+0x52>
 800972a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800972c:	42b3      	cmp	r3, r6
 800972e:	f43f aed7 	beq.w	80094e0 <f_lseek+0x52>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009732:	2301      	movs	r3, #1
 8009734:	4632      	mov	r2, r6
 8009736:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800973a:	9805      	ldr	r0, [sp, #20]
 800973c:	7840      	ldrb	r0, [r0, #1]
 800973e:	f7fe fbd9 	bl	8007ef4 <disk_read>
 8009742:	b918      	cbnz	r0, 800974c <f_lseek+0x2be>
			fp->sect = nsect;
 8009744:	6466      	str	r6, [r4, #68]	; 0x44
 8009746:	e6cb      	b.n	80094e0 <f_lseek+0x52>
		fp->fptr = nsect = 0;
 8009748:	2600      	movs	r6, #0
 800974a:	e7e2      	b.n	8009712 <f_lseek+0x284>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800974c:	2501      	movs	r5, #1
 800974e:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 8009752:	e6c5      	b.n	80094e0 <f_lseek+0x52>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009754:	2511      	movs	r5, #17
 8009756:	e6c3      	b.n	80094e0 <f_lseek+0x52>

08009758 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009758:	b530      	push	{r4, r5, lr}
 800975a:	b085      	sub	sp, #20
 800975c:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800975e:	2800      	cmp	r0, #0
 8009760:	d050      	beq.n	8009804 <f_opendir+0xac>
 8009762:	4604      	mov	r4, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8009764:	2200      	movs	r2, #0
 8009766:	a903      	add	r1, sp, #12
 8009768:	a801      	add	r0, sp, #4
 800976a:	f7fe fdeb 	bl	8008344 <find_volume>
	if (res == FR_OK) {
 800976e:	4603      	mov	r3, r0
 8009770:	b128      	cbz	r0, 800977e <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009772:	b10b      	cbz	r3, 8009778 <f_opendir+0x20>
 8009774:	2200      	movs	r2, #0
 8009776:	6022      	str	r2, [r4, #0]

	LEAVE_FF(fs, res);
}
 8009778:	4618      	mov	r0, r3
 800977a:	b005      	add	sp, #20
 800977c:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009782:	9901      	ldr	r1, [sp, #4]
 8009784:	4620      	mov	r0, r4
 8009786:	f7ff fca9 	bl	80090dc <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800978a:	4603      	mov	r3, r0
 800978c:	b9c0      	cbnz	r0, 80097c0 <f_opendir+0x68>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800978e:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 8009792:	2b00      	cmp	r3, #0
 8009794:	db0c      	blt.n	80097b0 <f_opendir+0x58>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009796:	7a23      	ldrb	r3, [r4, #8]
 8009798:	f013 0f10 	tst.w	r3, #16
 800979c:	d030      	beq.n	8009800 <f_opendir+0xa8>
					if (fs->fs_type == FS_EXFAT) {
 800979e:	9d03      	ldr	r5, [sp, #12]
 80097a0:	782b      	ldrb	r3, [r5, #0]
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d010      	beq.n	80097c8 <f_opendir+0x70>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80097a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80097a8:	4628      	mov	r0, r5
 80097aa:	f7fe fc5c 	bl	8008066 <ld_clust>
 80097ae:	60e0      	str	r0, [r4, #12]
				obj->id = fs->id;
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	6063      	str	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80097b6:	2100      	movs	r1, #0
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7ff f84b 	bl	8008854 <dir_sdi>
 80097be:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d1d6      	bne.n	8009772 <f_opendir+0x1a>
 80097c4:	2305      	movs	r3, #5
 80097c6:	e7d5      	b.n	8009774 <f_opendir+0x1c>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 80097c8:	68e3      	ldr	r3, [r4, #12]
 80097ca:	6223      	str	r3, [r4, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097d2:	7a62      	ldrb	r2, [r4, #9]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	6263      	str	r3, [r4, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 80097d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80097da:	62a3      	str	r3, [r4, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80097dc:	69a8      	ldr	r0, [r5, #24]
 80097de:	3034      	adds	r0, #52	; 0x34
 80097e0:	f7fe fb99 	bl	8007f16 <ld_dword>
 80097e4:	60e0      	str	r0, [r4, #12]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80097e6:	69a8      	ldr	r0, [r5, #24]
 80097e8:	3038      	adds	r0, #56	; 0x38
 80097ea:	f7fe fb9f 	bl	8007f2c <ld_qword>
 80097ee:	e9c4 0104 	strd	r0, r1, [r4, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80097f2:	69ab      	ldr	r3, [r5, #24]
 80097f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80097f8:	f003 0302 	and.w	r3, r3, #2
 80097fc:	7263      	strb	r3, [r4, #9]
 80097fe:	e7d7      	b.n	80097b0 <f_opendir+0x58>
					res = FR_NO_PATH;
 8009800:	2305      	movs	r3, #5
 8009802:	e7dd      	b.n	80097c0 <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 8009804:	2309      	movs	r3, #9
 8009806:	e7b7      	b.n	8009778 <f_opendir+0x20>

08009808 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009808:	b510      	push	{r4, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800980e:	a901      	add	r1, sp, #4
 8009810:	f7fe fd17 	bl	8008242 <validate>
	if (res == FR_OK) {
 8009814:	4603      	mov	r3, r0
 8009816:	b908      	cbnz	r0, 800981c <f_closedir+0x14>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009818:	2200      	movs	r2, #0
 800981a:	6022      	str	r2, [r4, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 800981c:	4618      	mov	r0, r3
 800981e:	b002      	add	sp, #8
 8009820:	bd10      	pop	{r4, pc}

08009822 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009822:	b570      	push	{r4, r5, r6, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	4605      	mov	r5, r0
 8009828:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800982a:	a901      	add	r1, sp, #4
 800982c:	f7fe fd09 	bl	8008242 <validate>
	if (res == FR_OK) {
 8009830:	4604      	mov	r4, r0
 8009832:	b990      	cbnz	r0, 800985a <f_readdir+0x38>
		if (!fno) {
 8009834:	b1a6      	cbz	r6, 8009860 <f_readdir+0x3e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8009836:	2100      	movs	r1, #0
 8009838:	4628      	mov	r0, r5
 800983a:	f7ff f927 	bl	8008a8c <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800983e:	2804      	cmp	r0, #4
 8009840:	d000      	beq.n	8009844 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 8009842:	b998      	cbnz	r0, 800986c <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009844:	4631      	mov	r1, r6
 8009846:	4628      	mov	r0, r5
 8009848:	f7ff faa2 	bl	8008d90 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800984c:	2100      	movs	r1, #0
 800984e:	4628      	mov	r0, r5
 8009850:	f7ff f859 	bl	8008906 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009854:	2804      	cmp	r0, #4
 8009856:	d000      	beq.n	800985a <f_readdir+0x38>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009858:	4604      	mov	r4, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800985a:	4620      	mov	r0, r4
 800985c:	b002      	add	sp, #8
 800985e:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009860:	2100      	movs	r1, #0
 8009862:	4628      	mov	r0, r5
 8009864:	f7fe fff6 	bl	8008854 <dir_sdi>
 8009868:	4604      	mov	r4, r0
 800986a:	e7f6      	b.n	800985a <f_readdir+0x38>
			res = dir_read(dp, 0);			/* Read an item */
 800986c:	4604      	mov	r4, r0
 800986e:	e7f4      	b.n	800985a <f_readdir+0x38>

08009870 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009870:	4b10      	ldr	r3, [pc, #64]	; (80098b4 <FATFS_LinkDriverEx+0x44>)
 8009872:	7a5b      	ldrb	r3, [r3, #9]
 8009874:	b9db      	cbnz	r3, 80098ae <FATFS_LinkDriverEx+0x3e>
{
 8009876:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8009878:	4b0e      	ldr	r3, [pc, #56]	; (80098b4 <FATFS_LinkDriverEx+0x44>)
 800987a:	7a5d      	ldrb	r5, [r3, #9]
 800987c:	b2ed      	uxtb	r5, r5
 800987e:	2400      	movs	r4, #0
 8009880:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009882:	7a5d      	ldrb	r5, [r3, #9]
 8009884:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009888:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800988a:	7a58      	ldrb	r0, [r3, #9]
 800988c:	4418      	add	r0, r3
 800988e:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009890:	7a5a      	ldrb	r2, [r3, #9]
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	1c50      	adds	r0, r2, #1
 8009896:	b2c0      	uxtb	r0, r0
 8009898:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 800989a:	3230      	adds	r2, #48	; 0x30
 800989c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800989e:	233a      	movs	r3, #58	; 0x3a
 80098a0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80098a2:	232f      	movs	r3, #47	; 0x2f
 80098a4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80098a6:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 80098a8:	4620      	mov	r0, r4
  }

  return ret;
}
 80098aa:	bc30      	pop	{r4, r5}
 80098ac:	4770      	bx	lr
  uint8_t ret = 1;
 80098ae:	2001      	movs	r0, #1
}
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	200007a4 	.word	0x200007a4

080098b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80098b8:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80098ba:	2200      	movs	r2, #0
 80098bc:	f7ff ffd8 	bl	8009870 <FATFS_LinkDriverEx>
}
 80098c0:	bd08      	pop	{r3, pc}
	...

080098c4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80098c4:	287f      	cmp	r0, #127	; 0x7f
 80098c6:	d915      	bls.n	80098f4 <ff_convert+0x30>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80098c8:	b131      	cbz	r1, 80098d8 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80098ca:	28ff      	cmp	r0, #255	; 0xff
 80098cc:	d811      	bhi.n	80098f2 <ff_convert+0x2e>
 80098ce:	3880      	subs	r0, #128	; 0x80
 80098d0:	4b09      	ldr	r3, [pc, #36]	; (80098f8 <ff_convert+0x34>)
 80098d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80098d6:	4770      	bx	lr

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80098d8:	2300      	movs	r3, #0
 80098da:	2b7f      	cmp	r3, #127	; 0x7f
 80098dc:	d806      	bhi.n	80098ec <ff_convert+0x28>
				if (chr == Tbl[c]) break;
 80098de:	4a06      	ldr	r2, [pc, #24]	; (80098f8 <ff_convert+0x34>)
 80098e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80098e4:	4282      	cmp	r2, r0
 80098e6:	d001      	beq.n	80098ec <ff_convert+0x28>
			for (c = 0; c < 0x80; c++) {
 80098e8:	3301      	adds	r3, #1
 80098ea:	e7f6      	b.n	80098da <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 80098ec:	3380      	adds	r3, #128	; 0x80
 80098ee:	b2d8      	uxtb	r0, r3
 80098f0:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80098f2:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	08017fa0 	.word	0x08017fa0

080098fc <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80098fc:	2200      	movs	r2, #0
 80098fe:	e000      	b.n	8009902 <ff_wtoupper+0x6>
 8009900:	3201      	adds	r2, #1
 8009902:	4b05      	ldr	r3, [pc, #20]	; (8009918 <ff_wtoupper+0x1c>)
 8009904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009908:	b10b      	cbz	r3, 800990e <ff_wtoupper+0x12>
 800990a:	4283      	cmp	r3, r0
 800990c:	d1f8      	bne.n	8009900 <ff_wtoupper+0x4>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800990e:	b113      	cbz	r3, 8009916 <ff_wtoupper+0x1a>
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <ff_wtoupper+0x20>)
 8009912:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
 8009916:	4770      	bx	lr
 8009918:	080181a0 	.word	0x080181a0
 800991c:	08018560 	.word	0x08018560

08009920 <MP3ClearBadFrame>:
 **************************************************************************************/
static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, short *outbuf)
{
	int i;

	if (!mp3DecInfo)
 8009920:	b1b0      	cbz	r0, 8009950 <MP3ClearBadFrame+0x30>
{
 8009922:	b410      	push	{r4}
 8009924:	4604      	mov	r4, r0
		return;

	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8009926:	2000      	movs	r0, #0
 8009928:	e003      	b.n	8009932 <MP3ClearBadFrame+0x12>
		outbuf[i] = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8009930:	3001      	adds	r0, #1
 8009932:	f8d4 27c4 	ldr.w	r2, [r4, #1988]	; 0x7c4
 8009936:	f8d4 37c8 	ldr.w	r3, [r4, #1992]	; 0x7c8
 800993a:	fb03 f202 	mul.w	r2, r3, r2
 800993e:	f8d4 37bc 	ldr.w	r3, [r4, #1980]	; 0x7bc
 8009942:	fb03 f302 	mul.w	r3, r3, r2
 8009946:	4283      	cmp	r3, r0
 8009948:	dcef      	bgt.n	800992a <MP3ClearBadFrame+0xa>
}
 800994a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	4770      	bx	lr

08009952 <MP3InitDecoder>:
{
 8009952:	b508      	push	{r3, lr}
	mp3DecInfo = AllocateBuffers();
 8009954:	f000 fce1 	bl	800a31a <xmp3fixpt_AllocateBuffers>
}
 8009958:	bd08      	pop	{r3, pc}

0800995a <MP3FindSyncWord>:
	for (i = 0; i < nBytes - 1; i++) {
 800995a:	2300      	movs	r3, #0
 800995c:	e000      	b.n	8009960 <MP3FindSyncWord+0x6>
 800995e:	3301      	adds	r3, #1
 8009960:	1e4a      	subs	r2, r1, #1
 8009962:	429a      	cmp	r2, r3
 8009964:	dd09      	ble.n	800997a <MP3FindSyncWord+0x20>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 8009966:	5cc2      	ldrb	r2, [r0, r3]
 8009968:	2aff      	cmp	r2, #255	; 0xff
 800996a:	d1f8      	bne.n	800995e <MP3FindSyncWord+0x4>
 800996c:	18c2      	adds	r2, r0, r3
 800996e:	7852      	ldrb	r2, [r2, #1]
 8009970:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 8009974:	2ae0      	cmp	r2, #224	; 0xe0
 8009976:	d1f2      	bne.n	800995e <MP3FindSyncWord+0x4>
 8009978:	e001      	b.n	800997e <MP3FindSyncWord+0x24>
	return -1;
 800997a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800997e:	4618      	mov	r0, r3
 8009980:	4770      	bx	lr

08009982 <MP3FindFreeSync>:
{
 8009982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009984:	4607      	mov	r7, r0
 8009986:	460e      	mov	r6, r1
 8009988:	4615      	mov	r5, r2
	unsigned char *bufPtr = buf;
 800998a:	4604      	mov	r4, r0
 800998c:	e002      	b.n	8009994 <MP3FindFreeSync+0x12>
		bufPtr += 3;
 800998e:	1cdc      	adds	r4, r3, #3
		nBytes -= (offset + 3);
 8009990:	3003      	adds	r0, #3
 8009992:	1a2d      	subs	r5, r5, r0
		offset = MP3FindSyncWord(bufPtr, nBytes);
 8009994:	4629      	mov	r1, r5
 8009996:	4620      	mov	r0, r4
 8009998:	f7ff ffdf 	bl	800995a <MP3FindSyncWord>
		bufPtr += offset;
 800999c:	1823      	adds	r3, r4, r0
		if (offset < 0) {
 800999e:	2800      	cmp	r0, #0
 80099a0:	db13      	blt.n	80099ca <MP3FindFreeSync+0x48>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 80099a2:	5c21      	ldrb	r1, [r4, r0]
 80099a4:	7832      	ldrb	r2, [r6, #0]
 80099a6:	4291      	cmp	r1, r2
 80099a8:	d1f1      	bne.n	800998e <MP3FindFreeSync+0xc>
 80099aa:	7859      	ldrb	r1, [r3, #1]
 80099ac:	7872      	ldrb	r2, [r6, #1]
 80099ae:	4291      	cmp	r1, r2
 80099b0:	d1ed      	bne.n	800998e <MP3FindFreeSync+0xc>
 80099b2:	789a      	ldrb	r2, [r3, #2]
 80099b4:	78b1      	ldrb	r1, [r6, #2]
 80099b6:	404a      	eors	r2, r1
 80099b8:	f012 0ffc 	tst.w	r2, #252	; 0xfc
 80099bc:	d1e7      	bne.n	800998e <MP3FindFreeSync+0xc>
			if ((firstFH[2] >> 1) & 0x01)
 80099be:	f011 0f02 	tst.w	r1, #2
 80099c2:	d000      	beq.n	80099c6 <MP3FindFreeSync+0x44>
				bufPtr--;
 80099c4:	3b01      	subs	r3, #1
			return bufPtr - buf;
 80099c6:	1bd8      	subs	r0, r3, r7
 80099c8:	e001      	b.n	80099ce <MP3FindFreeSync+0x4c>
			return -1;
 80099ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80099ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099d0 <MP3GetLastFrameInfo>:
	if (!mp3DecInfo || mp3DecInfo->layer != 3) {
 80099d0:	b120      	cbz	r0, 80099dc <MP3GetLastFrameInfo+0xc>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f8d0 27d0 	ldr.w	r2, [r0, #2000]	; 0x7d0
 80099d8:	2a03      	cmp	r2, #3
 80099da:	d008      	beq.n	80099ee <MP3GetLastFrameInfo+0x1e>
		mp3FrameInfo->bitrate = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	600b      	str	r3, [r1, #0]
		mp3FrameInfo->nChans = 0;
 80099e0:	604b      	str	r3, [r1, #4]
		mp3FrameInfo->samprate = 0;
 80099e2:	608b      	str	r3, [r1, #8]
		mp3FrameInfo->bitsPerSample = 0;
 80099e4:	60cb      	str	r3, [r1, #12]
		mp3FrameInfo->outputSamps = 0;
 80099e6:	610b      	str	r3, [r1, #16]
		mp3FrameInfo->layer = 0;
 80099e8:	614b      	str	r3, [r1, #20]
		mp3FrameInfo->version = 0;
 80099ea:	618b      	str	r3, [r1, #24]
 80099ec:	4770      	bx	lr
{
 80099ee:	b410      	push	{r4}
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 80099f0:	f8d0 27b8 	ldr.w	r2, [r0, #1976]	; 0x7b8
 80099f4:	600a      	str	r2, [r1, #0]
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 80099f6:	f8d0 27bc 	ldr.w	r2, [r0, #1980]	; 0x7bc
 80099fa:	604a      	str	r2, [r1, #4]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 80099fc:	f8d0 27c0 	ldr.w	r2, [r0, #1984]	; 0x7c0
 8009a00:	608a      	str	r2, [r1, #8]
		mp3FrameInfo->bitsPerSample = 16;
 8009a02:	2210      	movs	r2, #16
 8009a04:	60ca      	str	r2, [r1, #12]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 8009a06:	f8d0 47bc 	ldr.w	r4, [r0, #1980]	; 0x7bc
 8009a0a:	f890 27d4 	ldrb.w	r2, [r0, #2004]	; 0x7d4
 8009a0e:	f8d0 07d0 	ldr.w	r0, [r0, #2000]	; 0x7d0
 8009a12:	3801      	subs	r0, #1
 8009a14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009a18:	4402      	add	r2, r0
 8009a1a:	4807      	ldr	r0, [pc, #28]	; (8009a38 <MP3GetLastFrameInfo+0x68>)
 8009a1c:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
 8009a20:	fb02 f204 	mul.w	r2, r2, r4
 8009a24:	610a      	str	r2, [r1, #16]
		mp3FrameInfo->layer = mp3DecInfo->layer;
 8009a26:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	; 0x7d0
 8009a2a:	614a      	str	r2, [r1, #20]
		mp3FrameInfo->version = mp3DecInfo->version;
 8009a2c:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 8009a30:	618b      	str	r3, [r1, #24]
}
 8009a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	08018a54 	.word	0x08018a54

08009a3c <MP3Decode>:
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
//mw	ULONG32 ulTime;
//mw	StartYield(&ulTime); 
	if (!mp3DecInfo)
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	f000 8159 	beq.w	8009cf4 <MP3Decode+0x2b8>
{
 8009a42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	4604      	mov	r4, r0
 8009a4a:	469a      	mov	sl, r3
 8009a4c:	4617      	mov	r7, r2
 8009a4e:	460d      	mov	r5, r1
		return ERR_MP3_NULL_POINTER;

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 8009a50:	6809      	ldr	r1, [r1, #0]
 8009a52:	f000 f9cf 	bl	8009df4 <xmp3fixpt_UnpackFrameHeader>
	if (fhBytes < 0)	
 8009a56:	1e06      	subs	r6, r0, #0
 8009a58:	f2c0 814f 	blt.w	8009cfa <MP3Decode+0x2be>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
	*inbuf += fhBytes;
 8009a5c:	6829      	ldr	r1, [r5, #0]
 8009a5e:	4431      	add	r1, r6
 8009a60:	6029      	str	r1, [r5, #0]
	
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fac4 	bl	8009ff0 <xmp3fixpt_UnpackSideInfo>
	if (siBytes < 0) {
 8009a68:	f1b0 0800 	subs.w	r8, r0, #0
 8009a6c:	f2c0 8094 	blt.w	8009b98 <MP3Decode+0x15c>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
		return ERR_MP3_INVALID_SIDEINFO;
	}
	*inbuf += siBytes;
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	4443      	add	r3, r8
 8009a74:	602b      	str	r3, [r5, #0]
	*bytesLeft -= (fhBytes + siBytes);
 8009a76:	eb06 0208 	add.w	r2, r6, r8
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	1a9b      	subs	r3, r3, r2
 8009a7e:	603b      	str	r3, [r7, #0]
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 8009a80:	f8d4 37b8 	ldr.w	r3, [r4, #1976]	; 0x7b8
 8009a84:	b113      	cbz	r3, 8009a8c <MP3Decode+0x50>
 8009a86:	f8d4 37b0 	ldr.w	r3, [r4, #1968]	; 0x7b0
 8009a8a:	b353      	cbz	r3, 8009ae2 <MP3Decode+0xa6>
		if (!mp3DecInfo->freeBitrateFlag) {
 8009a8c:	f8d4 37b0 	ldr.w	r3, [r4, #1968]	; 0x7b0
 8009a90:	b9fb      	cbnz	r3, 8009ad2 <MP3Decode+0x96>
			/* first time through, need to scan for next sync word and figure out frame size */
			mp3DecInfo->freeBitrateFlag = 1;
 8009a92:	2301      	movs	r3, #1
 8009a94:	f8c4 37b0 	str.w	r3, [r4, #1968]	; 0x7b0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 8009a98:	6828      	ldr	r0, [r5, #0]
 8009a9a:	4271      	negs	r1, r6
 8009a9c:	eba1 0108 	sub.w	r1, r1, r8
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	4401      	add	r1, r0
 8009aa4:	f7ff ff6d 	bl	8009982 <MP3FindFreeSync>
 8009aa8:	f8c4 07b4 	str.w	r0, [r4, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 8009aac:	2800      	cmp	r0, #0
 8009aae:	db7a      	blt.n	8009ba6 <MP3Decode+0x16a>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_FREE_BITRATE_SYNC;
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 8009ab0:	1983      	adds	r3, r0, r6
 8009ab2:	4443      	add	r3, r8
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 8009ab4:	f8d4 27c0 	ldr.w	r2, [r4, #1984]	; 0x7c0
 8009ab8:	fb03 f302 	mul.w	r3, r3, r2
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	f8d4 17c4 	ldr.w	r1, [r4, #1988]	; 0x7c4
 8009ac2:	f8d4 27c8 	ldr.w	r2, [r4, #1992]	; 0x7c8
 8009ac6:	fb02 f201 	mul.w	r2, r2, r1
 8009aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ace:	f8c4 37b8 	str.w	r3, [r4, #1976]	; 0x7b8
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 8009ad2:	f8d4 67b4 	ldr.w	r6, [r4, #1972]	; 0x7b4
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f97d 	bl	8009dd6 <xmp3fixpt_CheckPadBit>
 8009adc:	4430      	add	r0, r6
 8009ade:	f8c4 07cc 	str.w	r0, [r4, #1996]	; 0x7cc
	 *  - calling function assembles "self-contained" MP3 frames by shifting any main_data 
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
 8009ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d06c      	beq.n	8009bc2 <MP3Decode+0x186>
		mp3DecInfo->nSlots = *bytesLeft;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	f8c4 37cc 	str.w	r3, [r4, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 8009aee:	f8d4 27d8 	ldr.w	r2, [r4, #2008]	; 0x7d8
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	d15e      	bne.n	8009bb4 <MP3Decode+0x178>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	dd5c      	ble.n	8009bb4 <MP3Decode+0x178>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_FRAMEHEADER;
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 8009afa:	f8c4 37dc 	str.w	r3, [r4, #2012]	; 0x7dc
		mainPtr = *inbuf;
 8009afe:	682e      	ldr	r6, [r5, #0]
		*inbuf += mp3DecInfo->nSlots;
 8009b00:	4433      	add	r3, r6
 8009b02:	602b      	str	r3, [r5, #0]
		*bytesLeft -= (mp3DecInfo->nSlots);
 8009b04:	f8d4 27cc 	ldr.w	r2, [r4, #1996]	; 0x7cc
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	603b      	str	r3, [r7, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_MAINDATA_UNDERFLOW;
		}
	}
	bitOffset = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9303      	str	r3, [sp, #12]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 8009b12:	f8d4 27dc 	ldr.w	r2, [r4, #2012]	; 0x7dc
 8009b16:	ea4f 09c2 	mov.w	r9, r2, lsl #3

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 8009b1a:	4698      	mov	r8, r3
 8009b1c:	f8d4 37c4 	ldr.w	r3, [r4, #1988]	; 0x7c4
 8009b20:	4543      	cmp	r3, r8
 8009b22:	f340 80e5 	ble.w	8009cf0 <MP3Decode+0x2b4>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8009b26:	2700      	movs	r7, #0
 8009b28:	f8d4 37bc 	ldr.w	r3, [r4, #1980]	; 0x7bc
 8009b2c:	42bb      	cmp	r3, r7
 8009b2e:	f340 80a6 	ble.w	8009c7e <MP3Decode+0x242>
			/* unpack scale factors and compute size of scale factor block */
			prevBitOffset = bitOffset;
 8009b32:	aa04      	add	r2, sp, #16
 8009b34:	f852 5d04 	ldr.w	r5, [r2, #-4]!
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 8009b38:	9701      	str	r7, [sp, #4]
 8009b3a:	f8cd 8000 	str.w	r8, [sp]
 8009b3e:	464b      	mov	r3, r9
 8009b40:	4631      	mov	r1, r6
 8009b42:	4620      	mov	r0, r4
 8009b44:	f004 fe74 	bl	800e830 <xmp3fixpt_UnpackScaleFactors>

			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 8009b48:	ebc5 02c0 	rsb	r2, r5, r0, lsl #3
 8009b4c:	9d03      	ldr	r5, [sp, #12]
 8009b4e:	442a      	add	r2, r5
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 8009b50:	eb07 0348 	add.w	r3, r7, r8, lsl #1
 8009b54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009b58:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009b5c:	1a9b      	subs	r3, r3, r2
			mainPtr += offset;
 8009b5e:	4406      	add	r6, r0
			mainBits -= sfBlockBits;
 8009b60:	eba9 0902 	sub.w	r9, r9, r2

			if (offset < 0 || mainBits < huffBlockBits) {
 8009b64:	454b      	cmp	r3, r9
 8009b66:	bfd4      	ite	le
 8009b68:	2200      	movle	r2, #0
 8009b6a:	2201      	movgt	r2, #1
 8009b6c:	ea52 72d0 	orrs.w	r2, r2, r0, lsr #31
 8009b70:	d175      	bne.n	8009c5e <MP3Decode+0x222>
				return ERR_MP3_INVALID_SCALEFACT;
			}

			/* decode Huffman code words */
			prevBitOffset = bitOffset;
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 8009b72:	9701      	str	r7, [sp, #4]
 8009b74:	f8cd 8000 	str.w	r8, [sp]
 8009b78:	aa03      	add	r2, sp, #12
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f001 fd57 	bl	800b630 <xmp3fixpt_DecodeHuffman>
			if (offset < 0) {
 8009b82:	2800      	cmp	r0, #0
 8009b84:	db74      	blt.n	8009c70 <MP3Decode+0x234>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_INVALID_HUFFCODES;
			}

			mainPtr += offset;
 8009b86:	4406      	add	r6, r0
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 8009b88:	ebc5 05c0 	rsb	r5, r5, r0, lsl #3
 8009b8c:	9a03      	ldr	r2, [sp, #12]
 8009b8e:	4415      	add	r5, r2
 8009b90:	eba9 0905 	sub.w	r9, r9, r5
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8009b94:	3701      	adds	r7, #1
 8009b96:	e7c7      	b.n	8009b28 <MP3Decode+0xec>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009b98:	4651      	mov	r1, sl
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7ff fec0 	bl	8009920 <MP3ClearBadFrame>
		return ERR_MP3_INVALID_SIDEINFO;
 8009ba0:	f06f 0006 	mvn.w	r0, #6
 8009ba4:	e061      	b.n	8009c6a <MP3Decode+0x22e>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009ba6:	4651      	mov	r1, sl
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f7ff feb9 	bl	8009920 <MP3ClearBadFrame>
				return ERR_MP3_FREE_BITRATE_SYNC;
 8009bae:	f06f 0002 	mvn.w	r0, #2
 8009bb2:	e05a      	b.n	8009c6a <MP3Decode+0x22e>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009bb4:	4651      	mov	r1, sl
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f7ff feb2 	bl	8009920 <MP3ClearBadFrame>
			return ERR_MP3_INVALID_FRAMEHEADER;
 8009bbc:	f06f 0005 	mvn.w	r0, #5
 8009bc0:	e053      	b.n	8009c6a <MP3Decode+0x22e>
		if (mp3DecInfo->nSlots > *bytesLeft) {
 8009bc2:	f8d4 17cc 	ldr.w	r1, [r4, #1996]	; 0x7cc
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	4299      	cmp	r1, r3
 8009bca:	dc24      	bgt.n	8009c16 <MP3Decode+0x1da>
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 8009bcc:	f8d4 37dc 	ldr.w	r3, [r4, #2012]	; 0x7dc
 8009bd0:	f8d4 27d8 	ldr.w	r2, [r4, #2008]	; 0x7d8
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	db25      	blt.n	8009c24 <MP3Decode+0x1e8>
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 8009bd8:	f104 061c 	add.w	r6, r4, #28
 8009bdc:	1a99      	subs	r1, r3, r2
 8009bde:	4431      	add	r1, r6
 8009be0:	4630      	mov	r0, r6
 8009be2:	f00d fb64 	bl	80172ae <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 8009be6:	f8d4 07d8 	ldr.w	r0, [r4, #2008]	; 0x7d8
 8009bea:	f8d4 27cc 	ldr.w	r2, [r4, #1996]	; 0x7cc
 8009bee:	6829      	ldr	r1, [r5, #0]
 8009bf0:	4430      	add	r0, r6
 8009bf2:	f00d fb51 	bl	8017298 <memcpy>
			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 8009bf6:	f8d4 27d8 	ldr.w	r2, [r4, #2008]	; 0x7d8
 8009bfa:	f8d4 17cc 	ldr.w	r1, [r4, #1996]	; 0x7cc
 8009bfe:	440a      	add	r2, r1
 8009c00:	f8c4 27dc 	str.w	r2, [r4, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	440b      	add	r3, r1
 8009c08:	602b      	str	r3, [r5, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 8009c0a:	f8d4 27cc 	ldr.w	r2, [r4, #1996]	; 0x7cc
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	1a9b      	subs	r3, r3, r2
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	e77b      	b.n	8009b0e <MP3Decode+0xd2>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009c16:	4651      	mov	r1, sl
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f7ff fe81 	bl	8009920 <MP3ClearBadFrame>
			return ERR_MP3_INDATA_UNDERFLOW;	
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c22:	e022      	b.n	8009c6a <MP3Decode+0x22e>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 8009c24:	f104 001c 	add.w	r0, r4, #28
 8009c28:	460a      	mov	r2, r1
 8009c2a:	6829      	ldr	r1, [r5, #0]
 8009c2c:	4418      	add	r0, r3
 8009c2e:	f00d fb33 	bl	8017298 <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 8009c32:	f8d4 27cc 	ldr.w	r2, [r4, #1996]	; 0x7cc
 8009c36:	f8d4 37dc 	ldr.w	r3, [r4, #2012]	; 0x7dc
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f8c4 37dc 	str.w	r3, [r4, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	4413      	add	r3, r2
 8009c44:	602b      	str	r3, [r5, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 8009c46:	f8d4 27cc 	ldr.w	r2, [r4, #1996]	; 0x7cc
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	1a9b      	subs	r3, r3, r2
 8009c4e:	603b      	str	r3, [r7, #0]
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009c50:	4651      	mov	r1, sl
 8009c52:	4620      	mov	r0, r4
 8009c54:	f7ff fe64 	bl	8009920 <MP3ClearBadFrame>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 8009c58:	f06f 0001 	mvn.w	r0, #1
 8009c5c:	e005      	b.n	8009c6a <MP3Decode+0x22e>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009c5e:	4651      	mov	r1, sl
 8009c60:	4620      	mov	r0, r4
 8009c62:	f7ff fe5d 	bl	8009920 <MP3ClearBadFrame>
				return ERR_MP3_INVALID_SCALEFACT;
 8009c66:	f06f 0007 	mvn.w	r0, #7
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_SUBBAND;			
		}
	}
	return ERR_MP3_NONE;
}
 8009c6a:	b004      	add	sp, #16
 8009c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009c70:	4651      	mov	r1, sl
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7ff fe54 	bl	8009920 <MP3ClearBadFrame>
				return ERR_MP3_INVALID_HUFFCODES;
 8009c78:	f06f 0008 	mvn.w	r0, #8
 8009c7c:	e7f5      	b.n	8009c6a <MP3Decode+0x22e>
		if (Dequantize(mp3DecInfo, gr) < 0) {
 8009c7e:	4641      	mov	r1, r8
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 ff2d 	bl	800aae0 <xmp3fixpt_Dequantize>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	db0d      	blt.n	8009ca6 <MP3Decode+0x26a>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8009c8a:	2500      	movs	r5, #0
 8009c8c:	f8d4 17bc 	ldr.w	r1, [r4, #1980]	; 0x7bc
 8009c90:	42a9      	cmp	r1, r5
 8009c92:	dd16      	ble.n	8009cc2 <MP3Decode+0x286>
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 8009c94:	462a      	mov	r2, r5
 8009c96:	4641      	mov	r1, r8
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f002 fd13 	bl	800c6c4 <xmp3fixpt_IMDCT>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	db08      	blt.n	8009cb4 <MP3Decode+0x278>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8009ca2:	3501      	adds	r5, #1
 8009ca4:	e7f2      	b.n	8009c8c <MP3Decode+0x250>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009ca6:	4651      	mov	r1, sl
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7ff fe39 	bl	8009920 <MP3ClearBadFrame>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 8009cae:	f06f 0009 	mvn.w	r0, #9
 8009cb2:	e7da      	b.n	8009c6a <MP3Decode+0x22e>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009cb4:	4651      	mov	r1, sl
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7ff fe32 	bl	8009920 <MP3ClearBadFrame>
				return ERR_MP3_INVALID_IMDCT;			
 8009cbc:	f06f 000a 	mvn.w	r0, #10
 8009cc0:	e7d3      	b.n	8009c6a <MP3Decode+0x22e>
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 8009cc2:	f8d4 37c8 	ldr.w	r3, [r4, #1992]	; 0x7c8
 8009cc6:	fb08 f303 	mul.w	r3, r8, r3
 8009cca:	fb03 f101 	mul.w	r1, r3, r1
 8009cce:	eb0a 0141 	add.w	r1, sl, r1, lsl #1
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f005 f90e 	bl	800eef4 <xmp3fixpt_Subband>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	db02      	blt.n	8009ce2 <MP3Decode+0x2a6>
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 8009cdc:	f108 0801 	add.w	r8, r8, #1
 8009ce0:	e71c      	b.n	8009b1c <MP3Decode+0xe0>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8009ce2:	4651      	mov	r1, sl
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f7ff fe1b 	bl	8009920 <MP3ClearBadFrame>
			return ERR_MP3_INVALID_SUBBAND;			
 8009cea:	f06f 000b 	mvn.w	r0, #11
 8009cee:	e7bc      	b.n	8009c6a <MP3Decode+0x22e>
	return ERR_MP3_NONE;
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	e7ba      	b.n	8009c6a <MP3Decode+0x22e>
		return ERR_MP3_NULL_POINTER;
 8009cf4:	f06f 0004 	mvn.w	r0, #4
}
 8009cf8:	4770      	bx	lr
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 8009cfa:	f06f 0005 	mvn.w	r0, #5
 8009cfe:	e7b4      	b.n	8009c6a <MP3Decode+0x22e>

08009d00 <xmp3fixpt_SetBitstreamPointer>:
 * Return:      none
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
	/* init bitstream */
	bsi->bytePtr = buf;
 8009d00:	6002      	str	r2, [r0, #0]
	bsi->iCache = 0;		/* 4-byte unsigned int */
 8009d02:	2300      	movs	r3, #0
 8009d04:	6043      	str	r3, [r0, #4]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 8009d06:	6083      	str	r3, [r0, #8]
	bsi->nBytes = nBytes;
 8009d08:	60c1      	str	r1, [r0, #12]
}
 8009d0a:	4770      	bx	lr

08009d0c <xmp3fixpt_GetBits>:
 *              if nBits = 0, returns 0 (useful for scalefactor unpacking)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
 8009d0c:	4603      	mov	r3, r0
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 8009d0e:	f001 011f 	and.w	r1, r1, #31
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 8009d12:	6842      	ldr	r2, [r0, #4]
 8009d14:	f1c1 001f 	rsb	r0, r1, #31
 8009d18:	fa22 f000 	lsr.w	r0, r2, r0
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 8009d1c:	0840      	lsrs	r0, r0, #1
	bsi->iCache <<= nBits;					/* left-justify cache */
 8009d1e:	408a      	lsls	r2, r1
 8009d20:	605a      	str	r2, [r3, #4]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	1a51      	subs	r1, r2, r1
 8009d26:	6099      	str	r1, [r3, #8]

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	db00      	blt.n	8009d2e <xmp3fixpt_GetBits+0x22>
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
		bsi->iCache <<= lowBits;			/* left-justify cache */
	}

	return data;
}
 8009d2c:	4770      	bx	lr
{
 8009d2e:	b4f0      	push	{r4, r5, r6, r7}
		lowBits = -bsi->cachedBits;
 8009d30:	424f      	negs	r7, r1
	int nBytes = bsi->nBytes;
 8009d32:	68de      	ldr	r6, [r3, #12]
	if (nBytes >= 4) {
 8009d34:	2e03      	cmp	r6, #3
 8009d36:	dc03      	bgt.n	8009d40 <xmp3fixpt_GetBits+0x34>
		bsi->iCache = 0;
 8009d38:	2200      	movs	r2, #0
 8009d3a:	605a      	str	r2, [r3, #4]
	int nBytes = bsi->nBytes;
 8009d3c:	4632      	mov	r2, r6
 8009d3e:	e028      	b.n	8009d92 <xmp3fixpt_GetBits+0x86>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8009d40:	681c      	ldr	r4, [r3, #0]
 8009d42:	f104 0c01 	add.w	ip, r4, #1
 8009d46:	f8c3 c000 	str.w	ip, [r3]
 8009d4a:	7822      	ldrb	r2, [r4, #0]
 8009d4c:	0612      	lsls	r2, r2, #24
 8009d4e:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8009d50:	1ca5      	adds	r5, r4, #2
 8009d52:	601d      	str	r5, [r3, #0]
 8009d54:	7864      	ldrb	r4, [r4, #1]
 8009d56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d5a:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8009d5c:	f10c 0402 	add.w	r4, ip, #2
 8009d60:	601c      	str	r4, [r3, #0]
 8009d62:	f89c c001 	ldrb.w	ip, [ip, #1]
 8009d66:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8009d6a:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++);
 8009d6c:	1cac      	adds	r4, r5, #2
 8009d6e:	601c      	str	r4, [r3, #0]
 8009d70:	786c      	ldrb	r4, [r5, #1]
 8009d72:	4322      	orrs	r2, r4
 8009d74:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 32;
 8009d76:	2220      	movs	r2, #32
 8009d78:	609a      	str	r2, [r3, #8]
		bsi->nBytes -= 4;
 8009d7a:	3e04      	subs	r6, #4
 8009d7c:	60de      	str	r6, [r3, #12]
 8009d7e:	e015      	b.n	8009dac <xmp3fixpt_GetBits+0xa0>
			bsi->iCache |= (*bsi->bytePtr++);
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	1c55      	adds	r5, r2, #1
 8009d84:	601d      	str	r5, [r3, #0]
 8009d86:	7812      	ldrb	r2, [r2, #0]
 8009d88:	685d      	ldr	r5, [r3, #4]
 8009d8a:	432a      	orrs	r2, r5
			bsi->iCache <<= 8;
 8009d8c:	0212      	lsls	r2, r2, #8
 8009d8e:	605a      	str	r2, [r3, #4]
		while (nBytes--) {
 8009d90:	4622      	mov	r2, r4
 8009d92:	1e54      	subs	r4, r2, #1
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	d1f3      	bne.n	8009d80 <xmp3fixpt_GetBits+0x74>
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 8009d98:	f1c6 0203 	rsb	r2, r6, #3
 8009d9c:	00d4      	lsls	r4, r2, #3
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	40a2      	lsls	r2, r4
 8009da2:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 8*bsi->nBytes;
 8009da4:	00f6      	lsls	r6, r6, #3
 8009da6:	609e      	str	r6, [r3, #8]
		bsi->nBytes = 0;
 8009da8:	2200      	movs	r2, #0
 8009daa:	60da      	str	r2, [r3, #12]
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	f101 0420 	add.w	r4, r1, #32
 8009db2:	fa22 f404 	lsr.w	r4, r2, r4
 8009db6:	4320      	orrs	r0, r4
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8009db8:	689c      	ldr	r4, [r3, #8]
 8009dba:	4421      	add	r1, r4
 8009dbc:	6099      	str	r1, [r3, #8]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 8009dbe:	fa02 f707 	lsl.w	r7, r2, r7
 8009dc2:	605f      	str	r7, [r3, #4]
}
 8009dc4:	bcf0      	pop	{r4, r5, r6, r7}
 8009dc6:	4770      	bx	lr

08009dc8 <xmp3fixpt_CalcBitsUsed>:
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 8009dc8:	6803      	ldr	r3, [r0, #0]
 8009dca:	1a59      	subs	r1, r3, r1
	bitsUsed -= bsi->cachedBits;
 8009dcc:	6880      	ldr	r0, [r0, #8]
 8009dce:	ebc0 00c1 	rsb	r0, r0, r1, lsl #3
	bitsUsed -= startOffset;

	return bitsUsed;
}
 8009dd2:	1a80      	subs	r0, r0, r2
 8009dd4:	4770      	bx	lr

08009dd6 <xmp3fixpt_CheckPadBit>:
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 8009dd6:	b130      	cbz	r0, 8009de6 <xmp3fixpt_CheckPadBit+0x10>
 8009dd8:	6803      	ldr	r3, [r0, #0]
 8009dda:	b13b      	cbz	r3, 8009dec <xmp3fixpt_CheckPadBit+0x16>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	return (fh->paddingBit ? 1 : 0);
 8009ddc:	6958      	ldr	r0, [r3, #20]
 8009dde:	3000      	adds	r0, #0
 8009de0:	bf18      	it	ne
 8009de2:	2001      	movne	r0, #1
 8009de4:	4770      	bx	lr
		return -1;
 8009de6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dea:	4770      	bx	lr
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009df0:	4770      	bx	lr
	...

08009df4 <xmp3fixpt_UnpackFrameHeader>:

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 8009df4:	2800      	cmp	r0, #0
 8009df6:	f000 80da 	beq.w	8009fae <xmp3fixpt_UnpackFrameHeader+0x1ba>
{
 8009dfa:	b4f0      	push	{r4, r5, r6, r7}
 8009dfc:	4604      	mov	r4, r0
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 8009dfe:	6803      	ldr	r3, [r0, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 80d7 	beq.w	8009fb4 <xmp3fixpt_UnpackFrameHeader+0x1c0>
 8009e06:	780a      	ldrb	r2, [r1, #0]
 8009e08:	2aff      	cmp	r2, #255	; 0xff
 8009e0a:	f040 80d6 	bne.w	8009fba <xmp3fixpt_UnpackFrameHeader+0x1c6>
 8009e0e:	784a      	ldrb	r2, [r1, #1]
 8009e10:	f002 00e0 	and.w	r0, r2, #224	; 0xe0
 8009e14:	28e0      	cmp	r0, #224	; 0xe0
 8009e16:	f040 80d3 	bne.w	8009fc0 <xmp3fixpt_UnpackFrameHeader+0x1cc>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
 8009e1a:	08d2      	lsrs	r2, r2, #3
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 8009e1c:	f012 0f03 	tst.w	r2, #3
 8009e20:	f000 80bb 	beq.w	8009f9a <xmp3fixpt_UnpackFrameHeader+0x1a6>
 8009e24:	f082 0201 	eor.w	r2, r2, #1
 8009e28:	f002 0001 	and.w	r0, r2, #1
 8009e2c:	7018      	strb	r0, [r3, #0]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 8009e2e:	784d      	ldrb	r5, [r1, #1]
 8009e30:	f3c5 0541 	ubfx	r5, r5, #1, #2
 8009e34:	f1c5 0504 	rsb	r5, r5, #4
 8009e38:	605d      	str	r5, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 8009e3a:	784a      	ldrb	r2, [r1, #1]
 8009e3c:	f082 0201 	eor.w	r2, r2, #1
 8009e40:	f002 0201 	and.w	r2, r2, #1
 8009e44:	609a      	str	r2, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 8009e46:	788f      	ldrb	r7, [r1, #2]
 8009e48:	093f      	lsrs	r7, r7, #4
 8009e4a:	60df      	str	r7, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 8009e4c:	788a      	ldrb	r2, [r1, #2]
 8009e4e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8009e52:	611a      	str	r2, [r3, #16]
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 8009e54:	788e      	ldrb	r6, [r1, #2]
 8009e56:	f3c6 0640 	ubfx	r6, r6, #1, #1
 8009e5a:	615e      	str	r6, [r3, #20]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 8009e5c:	788e      	ldrb	r6, [r1, #2]
 8009e5e:	f006 0601 	and.w	r6, r6, #1
 8009e62:	619e      	str	r6, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 8009e64:	78ce      	ldrb	r6, [r1, #3]
 8009e66:	09b6      	lsrs	r6, r6, #6
 8009e68:	771e      	strb	r6, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 8009e6a:	f891 c003 	ldrb.w	ip, [r1, #3]
 8009e6e:	f3cc 1c01 	ubfx	ip, ip, #4, #2
 8009e72:	f8c3 c020 	str.w	ip, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 8009e76:	f891 c003 	ldrb.w	ip, [r1, #3]
 8009e7a:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
 8009e7e:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 8009e82:	f891 c003 	ldrb.w	ip, [r1, #3]
 8009e86:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 8009e8a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 8009e8e:	f891 c003 	ldrb.w	ip, [r1, #3]
 8009e92:	f00c 0c03 	and.w	ip, ip, #3
 8009e96:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 8009e9a:	2a03      	cmp	r2, #3
 8009e9c:	f000 8093 	beq.w	8009fc6 <xmp3fixpt_UnpackFrameHeader+0x1d2>
 8009ea0:	2d04      	cmp	r5, #4
 8009ea2:	f000 8093 	beq.w	8009fcc <xmp3fixpt_UnpackFrameHeader+0x1d8>
 8009ea6:	2f0f      	cmp	r7, #15
 8009ea8:	f000 8093 	beq.w	8009fd2 <xmp3fixpt_UnpackFrameHeader+0x1de>
		return -1;

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 8009eac:	25de      	movs	r5, #222	; 0xde
 8009eae:	fb05 f000 	mul.w	r0, r5, r0
 8009eb2:	254a      	movs	r5, #74	; 0x4a
 8009eb4:	fb05 0202 	mla	r2, r5, r2, r0
 8009eb8:	4847      	ldr	r0, [pc, #284]	; (8009fd8 <xmp3fixpt_UnpackFrameHeader+0x1e4>)
 8009eba:	4402      	add	r2, r0
 8009ebc:	635a      	str	r2, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 8009ebe:	2e01      	cmp	r6, #1
 8009ec0:	d001      	beq.n	8009ec6 <xmp3fixpt_UnpackFrameHeader+0xd2>
		fh->modeExt = 0;
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	621a      	str	r2, [r3, #32]

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 8009ec6:	2e03      	cmp	r6, #3
 8009ec8:	d069      	beq.n	8009f9e <xmp3fixpt_UnpackFrameHeader+0x1aa>
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f8c4 27bc 	str.w	r2, [r4, #1980]	; 0x7bc
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 8009ed0:	781a      	ldrb	r2, [r3, #0]
 8009ed2:	6918      	ldr	r0, [r3, #16]
 8009ed4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009ed8:	4402      	add	r2, r0
 8009eda:	4840      	ldr	r0, [pc, #256]	; (8009fdc <xmp3fixpt_UnpackFrameHeader+0x1e8>)
 8009edc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8009ee0:	f8c4 27c0 	str.w	r2, [r4, #1984]	; 0x7c0
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 8009ee4:	781a      	ldrb	r2, [r3, #0]
 8009ee6:	2a00      	cmp	r2, #0
 8009ee8:	d15b      	bne.n	8009fa2 <xmp3fixpt_UnpackFrameHeader+0x1ae>
 8009eea:	2502      	movs	r5, #2
 8009eec:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 8009ef0:	781a      	ldrb	r2, [r3, #0]
 8009ef2:	6858      	ldr	r0, [r3, #4]
 8009ef4:	3801      	subs	r0, #1
 8009ef6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009efa:	4402      	add	r2, r0
 8009efc:	4838      	ldr	r0, [pc, #224]	; (8009fe0 <xmp3fixpt_UnpackFrameHeader+0x1ec>)
 8009efe:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
 8009f02:	fb92 f2f5 	sdiv	r2, r2, r5
 8009f06:	f8c4 27c8 	str.w	r2, [r4, #1992]	; 0x7c8
	mp3DecInfo->layer = fh->layer;
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	f8c4 27d0 	str.w	r2, [r4, #2000]	; 0x7d0
	mp3DecInfo->version = fh->ver;
 8009f10:	781a      	ldrb	r2, [r3, #0]
 8009f12:	f884 27d4 	strb.w	r2, [r4, #2004]	; 0x7d4
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 8009f16:	68dd      	ldr	r5, [r3, #12]
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	d034      	beq.n	8009f86 <xmp3fixpt_UnpackFrameHeader+0x192>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 8009f1c:	7818      	ldrb	r0, [r3, #0]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	3a01      	subs	r2, #1
 8009f22:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8009f26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8009f2a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8009f2e:	4402      	add	r2, r0
 8009f30:	442a      	add	r2, r5
 8009f32:	482c      	ldr	r0, [pc, #176]	; (8009fe4 <xmp3fixpt_UnpackFrameHeader+0x1f0>)
 8009f34:	f930 0012 	ldrsh.w	r0, [r0, r2, lsl #1]
 8009f38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f3c:	fb02 f200 	mul.w	r2, r2, r0
 8009f40:	f8c4 27b8 	str.w	r2, [r4, #1976]	; 0x7b8
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8009f44:	7818      	ldrb	r0, [r3, #0]
 8009f46:	691a      	ldr	r2, [r3, #16]
 8009f48:	68dd      	ldr	r5, [r3, #12]
 8009f4a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8009f4e:	0046      	lsls	r6, r0, #1
 8009f50:	4430      	add	r0, r6
 8009f52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8009f56:	4402      	add	r2, r0
 8009f58:	442a      	add	r2, r5
 8009f5a:	4823      	ldr	r0, [pc, #140]	; (8009fe8 <xmp3fixpt_UnpackFrameHeader+0x1f4>)
 8009f5c:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 8009f60:	7f18      	ldrb	r0, [r3, #28]
 8009f62:	2803      	cmp	r0, #3
 8009f64:	bf18      	it	ne
 8009f66:	3601      	addne	r6, #1
 8009f68:	4820      	ldr	r0, [pc, #128]	; (8009fec <xmp3fixpt_UnpackFrameHeader+0x1f8>)
 8009f6a:	f930 0016 	ldrsh.w	r0, [r0, r6, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8009f6e:	1a12      	subs	r2, r2, r0
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 8009f70:	3a04      	subs	r2, #4
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 8009f72:	6898      	ldr	r0, [r3, #8]
 8009f74:	b100      	cbz	r0, 8009f78 <xmp3fixpt_UnpackFrameHeader+0x184>
 8009f76:	2002      	movs	r0, #2
 8009f78:	1a12      	subs	r2, r2, r0
 8009f7a:	6958      	ldr	r0, [r3, #20]
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	bf18      	it	ne
 8009f80:	3201      	addne	r2, #1
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8009f82:	f8c4 27cc 	str.w	r2, [r4, #1996]	; 0x7cc
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 8009f86:	689a      	ldr	r2, [r3, #8]
 8009f88:	b16a      	cbz	r2, 8009fa6 <xmp3fixpt_UnpackFrameHeader+0x1b2>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 8009f8a:	7908      	ldrb	r0, [r1, #4]
 8009f8c:	794a      	ldrb	r2, [r1, #5]
 8009f8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8009f92:	631a      	str	r2, [r3, #48]	; 0x30
		return 6;
 8009f94:	2006      	movs	r0, #6
	} else {
		fh->CRCWord = 0;
		return 4;
	}
}
 8009f96:	bcf0      	pop	{r4, r5, r6, r7}
 8009f98:	4770      	bx	lr
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 8009f9a:	2002      	movs	r0, #2
 8009f9c:	e746      	b.n	8009e2c <xmp3fixpt_UnpackFrameHeader+0x38>
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	e794      	b.n	8009ecc <xmp3fixpt_UnpackFrameHeader+0xd8>
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 8009fa2:	2501      	movs	r5, #1
 8009fa4:	e7a2      	b.n	8009eec <xmp3fixpt_UnpackFrameHeader+0xf8>
		fh->CRCWord = 0;
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	631a      	str	r2, [r3, #48]	; 0x30
		return 4;
 8009faa:	2004      	movs	r0, #4
 8009fac:	e7f3      	b.n	8009f96 <xmp3fixpt_UnpackFrameHeader+0x1a2>
		return -1;
 8009fae:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009fb2:	4770      	bx	lr
		return -1;
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	e7ed      	b.n	8009f96 <xmp3fixpt_UnpackFrameHeader+0x1a2>
 8009fba:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbe:	e7ea      	b.n	8009f96 <xmp3fixpt_UnpackFrameHeader+0x1a2>
 8009fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc4:	e7e7      	b.n	8009f96 <xmp3fixpt_UnpackFrameHeader+0x1a2>
		return -1;
 8009fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fca:	e7e4      	b.n	8009f96 <xmp3fixpt_UnpackFrameHeader+0x1a2>
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd0:	e7e1      	b.n	8009f96 <xmp3fixpt_UnpackFrameHeader+0x1a2>
 8009fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd6:	e7de      	b.n	8009f96 <xmp3fixpt_UnpackFrameHeader+0x1a2>
 8009fd8:	08018a68 	.word	0x08018a68
 8009fdc:	08018a30 	.word	0x08018a30
 8009fe0:	08018a54 	.word	0x08018a54
 8009fe4:	08018920 	.word	0x08018920
 8009fe8:	08018d10 	.word	0x08018d10
 8009fec:	08018d04 	.word	0x08018d04

08009ff0 <xmp3fixpt_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 8009ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	b084      	sub	sp, #16
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	f000 814e 	beq.w	800a298 <xmp3fixpt_UnpackSideInfo+0x2a8>
 8009ffc:	4680      	mov	r8, r0
 8009ffe:	f8d0 9000 	ldr.w	r9, [r0]
 800a002:	f1b9 0f00 	cmp.w	r9, #0
 800a006:	f000 814a 	beq.w	800a29e <xmp3fixpt_UnpackSideInfo+0x2ae>
 800a00a:	6847      	ldr	r7, [r0, #4]
 800a00c:	2f00      	cmp	r7, #0
 800a00e:	f000 8149 	beq.w	800a2a4 <xmp3fixpt_UnpackSideInfo+0x2b4>
 800a012:	460a      	mov	r2, r1

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));

	bsi = &bitStreamInfo;
	if (fh->ver == MPEG1) {
 800a014:	f899 3000 	ldrb.w	r3, [r9]
 800a018:	bb8b      	cbnz	r3, 800a07e <xmp3fixpt_UnpackSideInfo+0x8e>
		/* MPEG 1 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800a01a:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d015      	beq.n	800a04e <xmp3fixpt_UnpackSideInfo+0x5e>
 800a022:	f04f 0a20 	mov.w	sl, #32
		SetBitstreamPointer(bsi, nBytes, buf);
 800a026:	4651      	mov	r1, sl
 800a028:	4668      	mov	r0, sp
 800a02a:	f7ff fe69 	bl	8009d00 <xmp3fixpt_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 9);
 800a02e:	2109      	movs	r1, #9
 800a030:	4668      	mov	r0, sp
 800a032:	f7ff fe6b 	bl	8009d0c <xmp3fixpt_GetBits>
 800a036:	6038      	str	r0, [r7, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800a038:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d009      	beq.n	800a054 <xmp3fixpt_UnpackSideInfo+0x64>
 800a040:	2103      	movs	r1, #3
 800a042:	4668      	mov	r0, sp
 800a044:	f7ff fe62 	bl	8009d0c <xmp3fixpt_GetBits>
 800a048:	6078      	str	r0, [r7, #4]

		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800a04a:	2500      	movs	r5, #0
 800a04c:	e011      	b.n	800a072 <xmp3fixpt_UnpackSideInfo+0x82>
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800a04e:	f04f 0a11 	mov.w	sl, #17
 800a052:	e7e8      	b.n	800a026 <xmp3fixpt_UnpackSideInfo+0x36>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800a054:	2105      	movs	r1, #5
 800a056:	e7f4      	b.n	800a042 <xmp3fixpt_UnpackSideInfo+0x52>
			for (bd = 0; bd < MAX_SCFBD; bd++)
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 800a058:	2101      	movs	r1, #1
 800a05a:	4668      	mov	r0, sp
 800a05c:	f7ff fe56 	bl	8009d0c <xmp3fixpt_GetBits>
 800a060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a064:	3302      	adds	r3, #2
 800a066:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800a06a:	3401      	adds	r4, #1
 800a06c:	2c03      	cmp	r4, #3
 800a06e:	ddf3      	ble.n	800a058 <xmp3fixpt_UnpackSideInfo+0x68>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800a070:	3501      	adds	r5, #1
 800a072:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800a076:	42ab      	cmp	r3, r5
 800a078:	dd19      	ble.n	800a0ae <xmp3fixpt_UnpackSideInfo+0xbe>
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800a07a:	2400      	movs	r4, #0
 800a07c:	e7f6      	b.n	800a06c <xmp3fixpt_UnpackSideInfo+0x7c>
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800a07e:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a082:	2b03      	cmp	r3, #3
 800a084:	d015      	beq.n	800a0b2 <xmp3fixpt_UnpackSideInfo+0xc2>
 800a086:	f04f 0a11 	mov.w	sl, #17
		SetBitstreamPointer(bsi, nBytes, buf);
 800a08a:	4651      	mov	r1, sl
 800a08c:	4668      	mov	r0, sp
 800a08e:	f7ff fe37 	bl	8009d00 <xmp3fixpt_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 8);
 800a092:	2108      	movs	r1, #8
 800a094:	4668      	mov	r0, sp
 800a096:	f7ff fe39 	bl	8009d0c <xmp3fixpt_GetBits>
 800a09a:	6038      	str	r0, [r7, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800a09c:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d009      	beq.n	800a0b8 <xmp3fixpt_UnpackSideInfo+0xc8>
 800a0a4:	2102      	movs	r1, #2
 800a0a6:	4668      	mov	r0, sp
 800a0a8:	f7ff fe30 	bl	8009d0c <xmp3fixpt_GetBits>
 800a0ac:	6078      	str	r0, [r7, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	e0e5      	b.n	800a27e <xmp3fixpt_UnpackSideInfo+0x28e>
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800a0b2:	f04f 0a09 	mov.w	sl, #9
 800a0b6:	e7e8      	b.n	800a08a <xmp3fixpt_UnpackSideInfo+0x9a>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	e7f4      	b.n	800a0a6 <xmp3fixpt_UnpackSideInfo+0xb6>
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */

			sis->part23Length =    GetBits(bsi, 12);
			sis->nBigvals =        GetBits(bsi, 9);
			sis->globalGain =      GetBits(bsi, 8);
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800a0bc:	2109      	movs	r1, #9
 800a0be:	e053      	b.n	800a168 <xmp3fixpt_UnpackSideInfo+0x178>
				if (sis->blockType == 0) {
					/* this should not be allowed, according to spec */
					sis->nBigvals = 0;
					sis->part23Length = 0;
					sis->sfCompress = 0;
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	f000 809a 	beq.w	800a1fa <xmp3fixpt_UnpackSideInfo+0x20a>
					/* short block, not mixed */
					sis->region0Count = 8;
				} else {
					/* start, stop, or short-mixed */
					sis->region0Count = 7;
 800a0c6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a0ca:	00d3      	lsls	r3, r2, #3
 800a0cc:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800a0d0:	010a      	lsls	r2, r1, #4
 800a0d2:	4413      	add	r3, r2
 800a0d4:	443b      	add	r3, r7
 800a0d6:	2207      	movs	r2, #7
 800a0d8:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				sis->region1Count = 20 - sis->region0Count;
 800a0da:	00e2      	lsls	r2, r4, #3
 800a0dc:	4422      	add	r2, r4
 800a0de:	00d3      	lsls	r3, r2, #3
 800a0e0:	00ea      	lsls	r2, r5, #3
 800a0e2:	442a      	add	r2, r5
 800a0e4:	0111      	lsls	r1, r2, #4
 800a0e6:	440b      	add	r3, r1
 800a0e8:	443b      	add	r3, r7
 800a0ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0ec:	f1c2 0214 	rsb	r2, r2, #20
 800a0f0:	661a      	str	r2, [r3, #96]	; 0x60
				sis->tableSelect[1] =  GetBits(bsi, 5);
				sis->tableSelect[2] =  GetBits(bsi, 5);
				sis->region0Count =    GetBits(bsi, 4);
				sis->region1Count =    GetBits(bsi, 3);
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800a0f2:	f899 3000 	ldrb.w	r3, [r9]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 80bb 	beq.w	800a272 <xmp3fixpt_UnpackSideInfo+0x282>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	00e3      	lsls	r3, r4, #3
 800a100:	4423      	add	r3, r4
 800a102:	00de      	lsls	r6, r3, #3
 800a104:	00eb      	lsls	r3, r5, #3
 800a106:	442b      	add	r3, r5
 800a108:	011a      	lsls	r2, r3, #4
 800a10a:	4416      	add	r6, r2
 800a10c:	443e      	add	r6, r7
 800a10e:	6670      	str	r0, [r6, #100]	; 0x64
			sis->sfactScale =        GetBits(bsi, 1);
 800a110:	2101      	movs	r1, #1
 800a112:	4668      	mov	r0, sp
 800a114:	f7ff fdfa 	bl	8009d0c <xmp3fixpt_GetBits>
 800a118:	66b0      	str	r0, [r6, #104]	; 0x68
			sis->count1TableSelect = GetBits(bsi, 1);
 800a11a:	2101      	movs	r1, #1
 800a11c:	4668      	mov	r0, sp
 800a11e:	f7ff fdf5 	bl	8009d0c <xmp3fixpt_GetBits>
 800a122:	66f0      	str	r0, [r6, #108]	; 0x6c
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800a124:	3401      	adds	r4, #1
 800a126:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	f340 80a6 	ble.w	800a27c <xmp3fixpt_UnpackSideInfo+0x28c>
			sis->part23Length =    GetBits(bsi, 12);
 800a130:	210c      	movs	r1, #12
 800a132:	4668      	mov	r0, sp
 800a134:	f7ff fdea 	bl	8009d0c <xmp3fixpt_GetBits>
 800a138:	00e3      	lsls	r3, r4, #3
 800a13a:	4423      	add	r3, r4
 800a13c:	00de      	lsls	r6, r3, #3
 800a13e:	00eb      	lsls	r3, r5, #3
 800a140:	442b      	add	r3, r5
 800a142:	011a      	lsls	r2, r3, #4
 800a144:	4416      	add	r6, r2
 800a146:	443e      	add	r6, r7
 800a148:	62b0      	str	r0, [r6, #40]	; 0x28
			sis->nBigvals =        GetBits(bsi, 9);
 800a14a:	2109      	movs	r1, #9
 800a14c:	4668      	mov	r0, sp
 800a14e:	f7ff fddd 	bl	8009d0c <xmp3fixpt_GetBits>
 800a152:	62f0      	str	r0, [r6, #44]	; 0x2c
			sis->globalGain =      GetBits(bsi, 8);
 800a154:	2108      	movs	r1, #8
 800a156:	4668      	mov	r0, sp
 800a158:	f7ff fdd8 	bl	8009d0c <xmp3fixpt_GetBits>
 800a15c:	6330      	str	r0, [r6, #48]	; 0x30
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800a15e:	f899 3000 	ldrb.w	r3, [r9]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1aa      	bne.n	800a0bc <xmp3fixpt_UnpackSideInfo+0xcc>
 800a166:	2104      	movs	r1, #4
 800a168:	4668      	mov	r0, sp
 800a16a:	f7ff fdcf 	bl	8009d0c <xmp3fixpt_GetBits>
 800a16e:	00e3      	lsls	r3, r4, #3
 800a170:	4423      	add	r3, r4
 800a172:	00de      	lsls	r6, r3, #3
 800a174:	00eb      	lsls	r3, r5, #3
 800a176:	442b      	add	r3, r5
 800a178:	011a      	lsls	r2, r3, #4
 800a17a:	4416      	add	r6, r2
 800a17c:	443e      	add	r6, r7
 800a17e:	6370      	str	r0, [r6, #52]	; 0x34
			sis->winSwitchFlag =   GetBits(bsi, 1);
 800a180:	2101      	movs	r1, #1
 800a182:	4668      	mov	r0, sp
 800a184:	f7ff fdc2 	bl	8009d0c <xmp3fixpt_GetBits>
 800a188:	63b0      	str	r0, [r6, #56]	; 0x38
			if(sis->winSwitchFlag) {
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d04c      	beq.n	800a228 <xmp3fixpt_UnpackSideInfo+0x238>
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 800a18e:	2102      	movs	r1, #2
 800a190:	4668      	mov	r0, sp
 800a192:	f7ff fdbb 	bl	8009d0c <xmp3fixpt_GetBits>
 800a196:	00e3      	lsls	r3, r4, #3
 800a198:	4423      	add	r3, r4
 800a19a:	00de      	lsls	r6, r3, #3
 800a19c:	00eb      	lsls	r3, r5, #3
 800a19e:	442b      	add	r3, r5
 800a1a0:	011a      	lsls	r2, r3, #4
 800a1a2:	4416      	add	r6, r2
 800a1a4:	443e      	add	r6, r7
 800a1a6:	63f0      	str	r0, [r6, #60]	; 0x3c
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	4668      	mov	r0, sp
 800a1ac:	f7ff fdae 	bl	8009d0c <xmp3fixpt_GetBits>
 800a1b0:	6430      	str	r0, [r6, #64]	; 0x40
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800a1b2:	2105      	movs	r1, #5
 800a1b4:	4668      	mov	r0, sp
 800a1b6:	f7ff fda9 	bl	8009d0c <xmp3fixpt_GetBits>
 800a1ba:	6470      	str	r0, [r6, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800a1bc:	2105      	movs	r1, #5
 800a1be:	4668      	mov	r0, sp
 800a1c0:	f7ff fda4 	bl	8009d0c <xmp3fixpt_GetBits>
 800a1c4:	64b0      	str	r0, [r6, #72]	; 0x48
				sis->tableSelect[2] =  0;					/* unused */
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	64f3      	str	r3, [r6, #76]	; 0x4c
				sis->subBlockGain[0] = GetBits(bsi, 3);
 800a1ca:	2103      	movs	r1, #3
 800a1cc:	4668      	mov	r0, sp
 800a1ce:	f7ff fd9d 	bl	8009d0c <xmp3fixpt_GetBits>
 800a1d2:	6530      	str	r0, [r6, #80]	; 0x50
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800a1d4:	2103      	movs	r1, #3
 800a1d6:	4668      	mov	r0, sp
 800a1d8:	f7ff fd98 	bl	8009d0c <xmp3fixpt_GetBits>
 800a1dc:	6570      	str	r0, [r6, #84]	; 0x54
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800a1de:	2103      	movs	r1, #3
 800a1e0:	4668      	mov	r0, sp
 800a1e2:	f7ff fd93 	bl	8009d0c <xmp3fixpt_GetBits>
 800a1e6:	65b0      	str	r0, [r6, #88]	; 0x58
				if (sis->blockType == 0) {
 800a1e8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f47f af68 	bne.w	800a0c0 <xmp3fixpt_UnpackSideInfo+0xd0>
					sis->nBigvals = 0;
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	62f2      	str	r2, [r6, #44]	; 0x2c
					sis->part23Length = 0;
 800a1f4:	62b2      	str	r2, [r6, #40]	; 0x28
					sis->sfCompress = 0;
 800a1f6:	6372      	str	r2, [r6, #52]	; 0x34
 800a1f8:	e76f      	b.n	800a0da <xmp3fixpt_UnpackSideInfo+0xea>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800a1fa:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a1fe:	00d3      	lsls	r3, r2, #3
 800a200:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800a204:	010a      	lsls	r2, r1, #4
 800a206:	4413      	add	r3, r2
 800a208:	443b      	add	r3, r7
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f47f af5a 	bne.w	800a0c6 <xmp3fixpt_UnpackSideInfo+0xd6>
					sis->region0Count = 8;
 800a212:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a216:	00d3      	lsls	r3, r2, #3
 800a218:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800a21c:	010a      	lsls	r2, r1, #4
 800a21e:	4413      	add	r3, r2
 800a220:	443b      	add	r3, r7
 800a222:	2208      	movs	r2, #8
 800a224:	65da      	str	r2, [r3, #92]	; 0x5c
 800a226:	e758      	b.n	800a0da <xmp3fixpt_UnpackSideInfo+0xea>
				sis->blockType = 0;
 800a228:	00e3      	lsls	r3, r4, #3
 800a22a:	4423      	add	r3, r4
 800a22c:	00de      	lsls	r6, r3, #3
 800a22e:	00eb      	lsls	r3, r5, #3
 800a230:	442b      	add	r3, r5
 800a232:	011a      	lsls	r2, r3, #4
 800a234:	4416      	add	r6, r2
 800a236:	443e      	add	r6, r7
 800a238:	2300      	movs	r3, #0
 800a23a:	63f3      	str	r3, [r6, #60]	; 0x3c
				sis->mixedBlock = 0;
 800a23c:	6433      	str	r3, [r6, #64]	; 0x40
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800a23e:	2105      	movs	r1, #5
 800a240:	4668      	mov	r0, sp
 800a242:	f7ff fd63 	bl	8009d0c <xmp3fixpt_GetBits>
 800a246:	6470      	str	r0, [r6, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800a248:	2105      	movs	r1, #5
 800a24a:	4668      	mov	r0, sp
 800a24c:	f7ff fd5e 	bl	8009d0c <xmp3fixpt_GetBits>
 800a250:	64b0      	str	r0, [r6, #72]	; 0x48
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800a252:	2105      	movs	r1, #5
 800a254:	4668      	mov	r0, sp
 800a256:	f7ff fd59 	bl	8009d0c <xmp3fixpt_GetBits>
 800a25a:	64f0      	str	r0, [r6, #76]	; 0x4c
				sis->region0Count =    GetBits(bsi, 4);
 800a25c:	2104      	movs	r1, #4
 800a25e:	4668      	mov	r0, sp
 800a260:	f7ff fd54 	bl	8009d0c <xmp3fixpt_GetBits>
 800a264:	65f0      	str	r0, [r6, #92]	; 0x5c
				sis->region1Count =    GetBits(bsi, 3);
 800a266:	2103      	movs	r1, #3
 800a268:	4668      	mov	r0, sp
 800a26a:	f7ff fd4f 	bl	8009d0c <xmp3fixpt_GetBits>
 800a26e:	6630      	str	r0, [r6, #96]	; 0x60
 800a270:	e73f      	b.n	800a0f2 <xmp3fixpt_UnpackSideInfo+0x102>
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800a272:	2101      	movs	r1, #1
 800a274:	4668      	mov	r0, sp
 800a276:	f7ff fd49 	bl	8009d0c <xmp3fixpt_GetBits>
 800a27a:	e740      	b.n	800a0fe <xmp3fixpt_UnpackSideInfo+0x10e>
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800a27c:	3501      	adds	r5, #1
 800a27e:	f8d8 37c4 	ldr.w	r3, [r8, #1988]	; 0x7c4
 800a282:	42ab      	cmp	r3, r5
 800a284:	dd01      	ble.n	800a28a <xmp3fixpt_UnpackSideInfo+0x29a>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800a286:	2400      	movs	r4, #0
 800a288:	e74d      	b.n	800a126 <xmp3fixpt_UnpackSideInfo+0x136>
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	f8c8 37d8 	str.w	r3, [r8, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
}
 800a290:	4650      	mov	r0, sl
 800a292:	b004      	add	sp, #16
 800a294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
 800a298:	f04f 3aff 	mov.w	sl, #4294967295
 800a29c:	e7f8      	b.n	800a290 <xmp3fixpt_UnpackSideInfo+0x2a0>
 800a29e:	f04f 3aff 	mov.w	sl, #4294967295
 800a2a2:	e7f5      	b.n	800a290 <xmp3fixpt_UnpackSideInfo+0x2a0>
 800a2a4:	f04f 3aff 	mov.w	sl, #4294967295
 800a2a8:	e7f2      	b.n	800a290 <xmp3fixpt_UnpackSideInfo+0x2a0>

0800a2aa <ClearBuffer>:
static void ClearBuffer(void *buf, int nBytes)
{
	int i;
	unsigned char *cbuf = (unsigned char *)buf;

	for (i = 0; i < nBytes; i++)
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e002      	b.n	800a2b4 <ClearBuffer+0xa>
		cbuf[i] = 0;
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < nBytes; i++)
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	428b      	cmp	r3, r1
 800a2b6:	dbfa      	blt.n	800a2ae <ClearBuffer+0x4>

	return;
}
 800a2b8:	4770      	bx	lr

0800a2ba <xmp3fixpt_FreeBuffers>:
 *
 * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
 **************************************************************************************/
void FreeBuffers(MP3DecInfo *mp3DecInfo)
{
	if (!mp3DecInfo)
 800a2ba:	b368      	cbz	r0, 800a318 <xmp3fixpt_FreeBuffers+0x5e>
{
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	4604      	mov	r4, r0
		return;

	SAFE_FREE(mp3DecInfo->FrameHeaderPS);
 800a2c0:	6800      	ldr	r0, [r0, #0]
 800a2c2:	b108      	cbz	r0, 800a2c8 <xmp3fixpt_FreeBuffers+0xe>
 800a2c4:	f00c ffe0 	bl	8017288 <free>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	6023      	str	r3, [r4, #0]
	SAFE_FREE(mp3DecInfo->SideInfoPS);
 800a2cc:	6860      	ldr	r0, [r4, #4]
 800a2ce:	b108      	cbz	r0, 800a2d4 <xmp3fixpt_FreeBuffers+0x1a>
 800a2d0:	f00c ffda 	bl	8017288 <free>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6063      	str	r3, [r4, #4]
	SAFE_FREE(mp3DecInfo->ScaleFactorInfoPS);
 800a2d8:	68a0      	ldr	r0, [r4, #8]
 800a2da:	b108      	cbz	r0, 800a2e0 <xmp3fixpt_FreeBuffers+0x26>
 800a2dc:	f00c ffd4 	bl	8017288 <free>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60a3      	str	r3, [r4, #8]
	SAFE_FREE(mp3DecInfo->HuffmanInfoPS);
 800a2e4:	68e0      	ldr	r0, [r4, #12]
 800a2e6:	b108      	cbz	r0, 800a2ec <xmp3fixpt_FreeBuffers+0x32>
 800a2e8:	f00c ffce 	bl	8017288 <free>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60e3      	str	r3, [r4, #12]
	SAFE_FREE(mp3DecInfo->DequantInfoPS);
 800a2f0:	6920      	ldr	r0, [r4, #16]
 800a2f2:	b108      	cbz	r0, 800a2f8 <xmp3fixpt_FreeBuffers+0x3e>
 800a2f4:	f00c ffc8 	bl	8017288 <free>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	6123      	str	r3, [r4, #16]
	SAFE_FREE(mp3DecInfo->IMDCTInfoPS);
 800a2fc:	6960      	ldr	r0, [r4, #20]
 800a2fe:	b108      	cbz	r0, 800a304 <xmp3fixpt_FreeBuffers+0x4a>
 800a300:	f00c ffc2 	bl	8017288 <free>
 800a304:	2300      	movs	r3, #0
 800a306:	6163      	str	r3, [r4, #20]
	SAFE_FREE(mp3DecInfo->SubbandInfoPS);
 800a308:	69a0      	ldr	r0, [r4, #24]
 800a30a:	b108      	cbz	r0, 800a310 <xmp3fixpt_FreeBuffers+0x56>
 800a30c:	f00c ffbc 	bl	8017288 <free>

	SAFE_FREE(mp3DecInfo);
 800a310:	4620      	mov	r0, r4
 800a312:	f00c ffb9 	bl	8017288 <free>
}
 800a316:	bd10      	pop	{r4, pc}
 800a318:	4770      	bx	lr

0800a31a <xmp3fixpt_AllocateBuffers>:
{
 800a31a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mp3DecInfo = (MP3DecInfo *)malloc(sizeof(MP3DecInfo));
 800a31e:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
 800a322:	f00c ffa9 	bl	8017278 <malloc>
	if (!mp3DecInfo)
 800a326:	4604      	mov	r4, r0
 800a328:	2800      	cmp	r0, #0
 800a32a:	d067      	beq.n	800a3fc <xmp3fixpt_AllocateBuffers+0xe2>
	ClearBuffer(mp3DecInfo, sizeof(MP3DecInfo));
 800a32c:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800a330:	f7ff ffbb 	bl	800a2aa <ClearBuffer>
	fh =  (FrameHeader *)     malloc(sizeof(FrameHeader));
 800a334:	2038      	movs	r0, #56	; 0x38
 800a336:	f00c ff9f 	bl	8017278 <malloc>
 800a33a:	4606      	mov	r6, r0
	si =  (SideInfo *)        malloc(sizeof(SideInfo));
 800a33c:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800a340:	f00c ff9a 	bl	8017278 <malloc>
 800a344:	4605      	mov	r5, r0
	sfi = (ScaleFactorInfo *) malloc(sizeof(ScaleFactorInfo));
 800a346:	f44f 708e 	mov.w	r0, #284	; 0x11c
 800a34a:	f00c ff95 	bl	8017278 <malloc>
 800a34e:	4680      	mov	r8, r0
	hi =  (HuffmanInfo *)     malloc(sizeof(HuffmanInfo));
 800a350:	f241 2010 	movw	r0, #4624	; 0x1210
 800a354:	f00c ff90 	bl	8017278 <malloc>
 800a358:	4607      	mov	r7, r0
	di =  (DequantInfo *)     malloc(sizeof(DequantInfo));
 800a35a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800a35e:	f00c ff8b 	bl	8017278 <malloc>
 800a362:	4682      	mov	sl, r0
	mi =  (IMDCTInfo *)       malloc(sizeof(IMDCTInfo));
 800a364:	f44f 50d9 	mov.w	r0, #6944	; 0x1b20
 800a368:	f00c ff86 	bl	8017278 <malloc>
 800a36c:	4681      	mov	r9, r0
	sbi = (SubbandInfo *)     malloc(sizeof(SubbandInfo));
 800a36e:	f242 2004 	movw	r0, #8708	; 0x2204
 800a372:	f00c ff81 	bl	8017278 <malloc>
 800a376:	4683      	mov	fp, r0
	mp3DecInfo->FrameHeaderPS =     (void *)fh;
 800a378:	6026      	str	r6, [r4, #0]
	mp3DecInfo->SideInfoPS =        (void *)si;
 800a37a:	6065      	str	r5, [r4, #4]
	mp3DecInfo->ScaleFactorInfoPS = (void *)sfi;
 800a37c:	f8c4 8008 	str.w	r8, [r4, #8]
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 800a380:	60e7      	str	r7, [r4, #12]
	mp3DecInfo->DequantInfoPS =     (void *)di;
 800a382:	f8c4 a010 	str.w	sl, [r4, #16]
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 800a386:	f8c4 9014 	str.w	r9, [r4, #20]
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 800a38a:	61a0      	str	r0, [r4, #24]
	if (!fh || !si || !sfi || !hi || !di || !mi || !sbi) {
 800a38c:	fab5 f385 	clz	r3, r5
 800a390:	095b      	lsrs	r3, r3, #5
 800a392:	2e00      	cmp	r6, #0
 800a394:	bf08      	it	eq
 800a396:	2301      	moveq	r3, #1
 800a398:	bb9b      	cbnz	r3, 800a402 <xmp3fixpt_AllocateBuffers+0xe8>
 800a39a:	fab7 f387 	clz	r3, r7
 800a39e:	095b      	lsrs	r3, r3, #5
 800a3a0:	f1b8 0f00 	cmp.w	r8, #0
 800a3a4:	d02d      	beq.n	800a402 <xmp3fixpt_AllocateBuffers+0xe8>
 800a3a6:	bb63      	cbnz	r3, 800a402 <xmp3fixpt_AllocateBuffers+0xe8>
 800a3a8:	fab9 f389 	clz	r3, r9
 800a3ac:	095b      	lsrs	r3, r3, #5
 800a3ae:	f1ba 0f00 	cmp.w	sl, #0
 800a3b2:	d026      	beq.n	800a402 <xmp3fixpt_AllocateBuffers+0xe8>
 800a3b4:	bb2b      	cbnz	r3, 800a402 <xmp3fixpt_AllocateBuffers+0xe8>
 800a3b6:	b320      	cbz	r0, 800a402 <xmp3fixpt_AllocateBuffers+0xe8>
	ClearBuffer(fh,  sizeof(FrameHeader));
 800a3b8:	2138      	movs	r1, #56	; 0x38
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7ff ff75 	bl	800a2aa <ClearBuffer>
	ClearBuffer(si,  sizeof(SideInfo));
 800a3c0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f7ff ff70 	bl	800a2aa <ClearBuffer>
	ClearBuffer(sfi, sizeof(ScaleFactorInfo));
 800a3ca:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	f7ff ff6b 	bl	800a2aa <ClearBuffer>
	ClearBuffer(hi,  sizeof(HuffmanInfo));
 800a3d4:	f241 2110 	movw	r1, #4624	; 0x1210
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7ff ff66 	bl	800a2aa <ClearBuffer>
	ClearBuffer(di,  sizeof(DequantInfo));
 800a3de:	f44f 7152 	mov.w	r1, #840	; 0x348
 800a3e2:	4650      	mov	r0, sl
 800a3e4:	f7ff ff61 	bl	800a2aa <ClearBuffer>
	ClearBuffer(mi,  sizeof(IMDCTInfo));
 800a3e8:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 800a3ec:	4648      	mov	r0, r9
 800a3ee:	f7ff ff5c 	bl	800a2aa <ClearBuffer>
	ClearBuffer(sbi, sizeof(SubbandInfo));
 800a3f2:	f242 2104 	movw	r1, #8708	; 0x2204
 800a3f6:	4658      	mov	r0, fp
 800a3f8:	f7ff ff57 	bl	800a2aa <ClearBuffer>
}
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		FreeBuffers(mp3DecInfo);	/* safe to call - only frees memory that was successfully allocated */
 800a402:	4620      	mov	r0, r4
 800a404:	f7ff ff59 	bl	800a2ba <xmp3fixpt_FreeBuffers>
		return 0;
 800a408:	2400      	movs	r4, #0
 800a40a:	e7f7      	b.n	800a3fc <xmp3fixpt_AllocateBuffers+0xe2>

0800a40c <xmp3fixpt_FDCT32>:
 * TODO:        code organization and optimization for ARM
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 800a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	b085      	sub	sp, #20
 800a412:	9101      	str	r1, [sp, #4]
 800a414:	9202      	str	r2, [sp, #8]
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
	if (gb < 6) {
 800a41a:	2b05      	cmp	r3, #5
 800a41c:	f300 812a 	bgt.w	800a674 <xmp3fixpt_FDCT32+0x268>
		es = 6 - gb;
 800a420:	f1c3 0c06 	rsb	ip, r3, #6
		for (i = 0; i < 32; i++)
 800a424:	2300      	movs	r3, #0
 800a426:	e006      	b.n	800a436 <xmp3fixpt_FDCT32+0x2a>
			buf[i] >>= es;
 800a428:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800a42c:	fa42 f20c 	asr.w	r2, r2, ip
 800a430:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (i = 0; i < 32; i++)
 800a434:	3301      	adds	r3, #1
 800a436:	2b1f      	cmp	r3, #31
 800a438:	ddf6      	ble.n	800a428 <xmp3fixpt_FDCT32+0x1c>
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 800a43a:	6803      	ldr	r3, [r0, #0]
 800a43c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800a43e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a440:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800a442:	1899      	adds	r1, r3, r2
 800a444:	1a9b      	subs	r3, r3, r2
	 * For inline assembly, x and y are not assumed to be R0, R1 so it shouldn't matter
	 *   which one is returned. (If this were a function call, returning y (R1) would 
	 *   require an extra "mov r0, r1")
     */
    int zlow;
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800a446:	461a      	mov	r2, r3
 800a448:	4b8c      	ldr	r3, [pc, #560]	; (800a67c <xmp3fixpt_FDCT32+0x270>)
 800a44a:	fb83 5202 	smull	r5, r2, r3, r2
 800a44e:	0055      	lsls	r5, r2, #1
 800a450:	19e6      	adds	r6, r4, r7
 800a452:	1be4      	subs	r4, r4, r7
 800a454:	4623      	mov	r3, r4
 800a456:	4a8a      	ldr	r2, [pc, #552]	; (800a680 <xmp3fixpt_FDCT32+0x274>)
 800a458:	fb82 4303 	smull	r4, r3, r2, r3
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	198b      	adds	r3, r1, r6
 800a460:	6003      	str	r3, [r0, #0]
 800a462:	1b89      	subs	r1, r1, r6
 800a464:	4c87      	ldr	r4, [pc, #540]	; (800a684 <xmp3fixpt_FDCT32+0x278>)
 800a466:	460b      	mov	r3, r1
 800a468:	fb84 1303 	smull	r1, r3, r4, r3
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a470:	18ab      	adds	r3, r5, r2
 800a472:	6403      	str	r3, [r0, #64]	; 0x40
 800a474:	1aaa      	subs	r2, r5, r2
 800a476:	4613      	mov	r3, r2
 800a478:	fb84 2303 	smull	r2, r3, r4, r3
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	67c3      	str	r3, [r0, #124]	; 0x7c
	D32FP(1, 1, 3, 1);
 800a480:	6843      	ldr	r3, [r0, #4]
 800a482:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800a484:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a486:	6c47      	ldr	r7, [r0, #68]	; 0x44
 800a488:	1899      	adds	r1, r3, r2
 800a48a:	1a9b      	subs	r3, r3, r2
 800a48c:	461a      	mov	r2, r3
 800a48e:	4b7e      	ldr	r3, [pc, #504]	; (800a688 <xmp3fixpt_FDCT32+0x27c>)
 800a490:	fb83 5202 	smull	r5, r2, r3, r2
 800a494:	0055      	lsls	r5, r2, #1
 800a496:	19e6      	adds	r6, r4, r7
 800a498:	1be4      	subs	r4, r4, r7
 800a49a:	4623      	mov	r3, r4
 800a49c:	4a7b      	ldr	r2, [pc, #492]	; (800a68c <xmp3fixpt_FDCT32+0x280>)
 800a49e:	fb82 4303 	smull	r4, r3, r2, r3
 800a4a2:	00da      	lsls	r2, r3, #3
 800a4a4:	198b      	adds	r3, r1, r6
 800a4a6:	6043      	str	r3, [r0, #4]
 800a4a8:	1b89      	subs	r1, r1, r6
 800a4aa:	4c79      	ldr	r4, [pc, #484]	; (800a690 <xmp3fixpt_FDCT32+0x284>)
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	fb84 1303 	smull	r1, r3, r4, r3
 800a4b2:	005b      	lsls	r3, r3, #1
 800a4b4:	6383      	str	r3, [r0, #56]	; 0x38
 800a4b6:	18ab      	adds	r3, r5, r2
 800a4b8:	6443      	str	r3, [r0, #68]	; 0x44
 800a4ba:	1aaa      	subs	r2, r5, r2
 800a4bc:	4613      	mov	r3, r2
 800a4be:	fb84 2303 	smull	r2, r3, r4, r3
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	6783      	str	r3, [r0, #120]	; 0x78
	D32FP(2, 1, 3, 1);
 800a4c6:	6883      	ldr	r3, [r0, #8]
 800a4c8:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800a4ca:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a4cc:	6c87      	ldr	r7, [r0, #72]	; 0x48
 800a4ce:	1899      	adds	r1, r3, r2
 800a4d0:	1a9b      	subs	r3, r3, r2
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	4b6f      	ldr	r3, [pc, #444]	; (800a694 <xmp3fixpt_FDCT32+0x288>)
 800a4d6:	fb83 5202 	smull	r5, r2, r3, r2
 800a4da:	0055      	lsls	r5, r2, #1
 800a4dc:	19e6      	adds	r6, r4, r7
 800a4de:	1be4      	subs	r4, r4, r7
 800a4e0:	4623      	mov	r3, r4
 800a4e2:	4a6d      	ldr	r2, [pc, #436]	; (800a698 <xmp3fixpt_FDCT32+0x28c>)
 800a4e4:	fb82 4303 	smull	r4, r3, r2, r3
 800a4e8:	00da      	lsls	r2, r3, #3
 800a4ea:	198b      	adds	r3, r1, r6
 800a4ec:	6083      	str	r3, [r0, #8]
 800a4ee:	1b89      	subs	r1, r1, r6
 800a4f0:	4c6a      	ldr	r4, [pc, #424]	; (800a69c <xmp3fixpt_FDCT32+0x290>)
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	fb84 1303 	smull	r1, r3, r4, r3
 800a4f8:	005b      	lsls	r3, r3, #1
 800a4fa:	6343      	str	r3, [r0, #52]	; 0x34
 800a4fc:	18ab      	adds	r3, r5, r2
 800a4fe:	6483      	str	r3, [r0, #72]	; 0x48
 800a500:	1aaa      	subs	r2, r5, r2
 800a502:	4613      	mov	r3, r2
 800a504:	fb84 2303 	smull	r2, r3, r4, r3
 800a508:	005b      	lsls	r3, r3, #1
 800a50a:	6743      	str	r3, [r0, #116]	; 0x74
	D32FP(3, 1, 2, 1);
 800a50c:	68c3      	ldr	r3, [r0, #12]
 800a50e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800a510:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a512:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 800a514:	1899      	adds	r1, r3, r2
 800a516:	1a9b      	subs	r3, r3, r2
 800a518:	461a      	mov	r2, r3
 800a51a:	4b61      	ldr	r3, [pc, #388]	; (800a6a0 <xmp3fixpt_FDCT32+0x294>)
 800a51c:	fb83 5202 	smull	r5, r2, r3, r2
 800a520:	0055      	lsls	r5, r2, #1
 800a522:	19e6      	adds	r6, r4, r7
 800a524:	1be4      	subs	r4, r4, r7
 800a526:	4623      	mov	r3, r4
 800a528:	4a5e      	ldr	r2, [pc, #376]	; (800a6a4 <xmp3fixpt_FDCT32+0x298>)
 800a52a:	fb82 4303 	smull	r4, r3, r2, r3
 800a52e:	009a      	lsls	r2, r3, #2
 800a530:	198b      	adds	r3, r1, r6
 800a532:	60c3      	str	r3, [r0, #12]
 800a534:	1b89      	subs	r1, r1, r6
 800a536:	4c5c      	ldr	r4, [pc, #368]	; (800a6a8 <xmp3fixpt_FDCT32+0x29c>)
 800a538:	460b      	mov	r3, r1
 800a53a:	fb84 1303 	smull	r1, r3, r4, r3
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	6303      	str	r3, [r0, #48]	; 0x30
 800a542:	18ab      	adds	r3, r5, r2
 800a544:	64c3      	str	r3, [r0, #76]	; 0x4c
 800a546:	1aaa      	subs	r2, r5, r2
 800a548:	4613      	mov	r3, r2
 800a54a:	fb84 2303 	smull	r2, r3, r4, r3
 800a54e:	005b      	lsls	r3, r3, #1
 800a550:	6703      	str	r3, [r0, #112]	; 0x70
	D32FP(4, 1, 2, 1);
 800a552:	6903      	ldr	r3, [r0, #16]
 800a554:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800a556:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a558:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800a55a:	1899      	adds	r1, r3, r2
 800a55c:	1a9b      	subs	r3, r3, r2
 800a55e:	461a      	mov	r2, r3
 800a560:	4b52      	ldr	r3, [pc, #328]	; (800a6ac <xmp3fixpt_FDCT32+0x2a0>)
 800a562:	fb83 5202 	smull	r5, r2, r3, r2
 800a566:	0055      	lsls	r5, r2, #1
 800a568:	19e6      	adds	r6, r4, r7
 800a56a:	1be4      	subs	r4, r4, r7
 800a56c:	4623      	mov	r3, r4
 800a56e:	4a50      	ldr	r2, [pc, #320]	; (800a6b0 <xmp3fixpt_FDCT32+0x2a4>)
 800a570:	fb82 4303 	smull	r4, r3, r2, r3
 800a574:	009a      	lsls	r2, r3, #2
 800a576:	198b      	adds	r3, r1, r6
 800a578:	6103      	str	r3, [r0, #16]
 800a57a:	1b89      	subs	r1, r1, r6
 800a57c:	4c4d      	ldr	r4, [pc, #308]	; (800a6b4 <xmp3fixpt_FDCT32+0x2a8>)
 800a57e:	460b      	mov	r3, r1
 800a580:	fb84 1303 	smull	r1, r3, r4, r3
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	62c3      	str	r3, [r0, #44]	; 0x2c
 800a588:	18ab      	adds	r3, r5, r2
 800a58a:	6503      	str	r3, [r0, #80]	; 0x50
 800a58c:	1aaa      	subs	r2, r5, r2
 800a58e:	4613      	mov	r3, r2
 800a590:	fb84 2303 	smull	r2, r3, r4, r3
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	66c3      	str	r3, [r0, #108]	; 0x6c
	D32FP(5, 1, 1, 2);
 800a598:	6943      	ldr	r3, [r0, #20]
 800a59a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800a59c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a59e:	6d47      	ldr	r7, [r0, #84]	; 0x54
 800a5a0:	1899      	adds	r1, r3, r2
 800a5a2:	1a9b      	subs	r3, r3, r2
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	4b44      	ldr	r3, [pc, #272]	; (800a6b8 <xmp3fixpt_FDCT32+0x2ac>)
 800a5a8:	fb83 5202 	smull	r5, r2, r3, r2
 800a5ac:	0055      	lsls	r5, r2, #1
 800a5ae:	19e6      	adds	r6, r4, r7
 800a5b0:	1be4      	subs	r4, r4, r7
 800a5b2:	4623      	mov	r3, r4
 800a5b4:	4a41      	ldr	r2, [pc, #260]	; (800a6bc <xmp3fixpt_FDCT32+0x2b0>)
 800a5b6:	fb82 4303 	smull	r4, r3, r2, r3
 800a5ba:	005a      	lsls	r2, r3, #1
 800a5bc:	198b      	adds	r3, r1, r6
 800a5be:	6143      	str	r3, [r0, #20]
 800a5c0:	1b89      	subs	r1, r1, r6
 800a5c2:	4c3f      	ldr	r4, [pc, #252]	; (800a6c0 <xmp3fixpt_FDCT32+0x2b4>)
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	fb84 1303 	smull	r1, r3, r4, r3
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	6283      	str	r3, [r0, #40]	; 0x28
 800a5ce:	18ab      	adds	r3, r5, r2
 800a5d0:	6543      	str	r3, [r0, #84]	; 0x54
 800a5d2:	1aaa      	subs	r2, r5, r2
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	fb84 2303 	smull	r2, r3, r4, r3
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	6683      	str	r3, [r0, #104]	; 0x68
	D32FP(6, 1, 1, 2);
 800a5de:	6983      	ldr	r3, [r0, #24]
 800a5e0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800a5e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a5e4:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800a5e6:	1899      	adds	r1, r3, r2
 800a5e8:	1a9b      	subs	r3, r3, r2
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	4b35      	ldr	r3, [pc, #212]	; (800a6c4 <xmp3fixpt_FDCT32+0x2b8>)
 800a5ee:	fb83 5202 	smull	r5, r2, r3, r2
 800a5f2:	0055      	lsls	r5, r2, #1
 800a5f4:	19e6      	adds	r6, r4, r7
 800a5f6:	1be4      	subs	r4, r4, r7
 800a5f8:	4623      	mov	r3, r4
 800a5fa:	4a33      	ldr	r2, [pc, #204]	; (800a6c8 <xmp3fixpt_FDCT32+0x2bc>)
 800a5fc:	fb82 4303 	smull	r4, r3, r2, r3
 800a600:	005a      	lsls	r2, r3, #1
 800a602:	198b      	adds	r3, r1, r6
 800a604:	6183      	str	r3, [r0, #24]
 800a606:	1b89      	subs	r1, r1, r6
 800a608:	4c30      	ldr	r4, [pc, #192]	; (800a6cc <xmp3fixpt_FDCT32+0x2c0>)
 800a60a:	460b      	mov	r3, r1
 800a60c:	fb84 1303 	smull	r1, r3, r4, r3
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	6243      	str	r3, [r0, #36]	; 0x24
 800a614:	18ab      	adds	r3, r5, r2
 800a616:	6583      	str	r3, [r0, #88]	; 0x58
 800a618:	1aaa      	subs	r2, r5, r2
 800a61a:	4613      	mov	r3, r2
 800a61c:	fb84 2303 	smull	r2, r3, r4, r3
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	6643      	str	r3, [r0, #100]	; 0x64
	D32FP(7, 1, 1, 4);
 800a624:	69c3      	ldr	r3, [r0, #28]
 800a626:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a628:	6a04      	ldr	r4, [r0, #32]
 800a62a:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 800a62c:	1899      	adds	r1, r3, r2
 800a62e:	1a9b      	subs	r3, r3, r2
 800a630:	461a      	mov	r2, r3
 800a632:	4b27      	ldr	r3, [pc, #156]	; (800a6d0 <xmp3fixpt_FDCT32+0x2c4>)
 800a634:	fb83 5202 	smull	r5, r2, r3, r2
 800a638:	0055      	lsls	r5, r2, #1
 800a63a:	19e6      	adds	r6, r4, r7
 800a63c:	1be4      	subs	r4, r4, r7
 800a63e:	4623      	mov	r3, r4
 800a640:	4a24      	ldr	r2, [pc, #144]	; (800a6d4 <xmp3fixpt_FDCT32+0x2c8>)
 800a642:	fb82 4303 	smull	r4, r3, r2, r3
 800a646:	005a      	lsls	r2, r3, #1
 800a648:	198b      	adds	r3, r1, r6
 800a64a:	61c3      	str	r3, [r0, #28]
 800a64c:	1b89      	subs	r1, r1, r6
 800a64e:	4c22      	ldr	r4, [pc, #136]	; (800a6d8 <xmp3fixpt_FDCT32+0x2cc>)
 800a650:	460b      	mov	r3, r1
 800a652:	fb84 1303 	smull	r1, r3, r4, r3
 800a656:	011b      	lsls	r3, r3, #4
 800a658:	6203      	str	r3, [r0, #32]
 800a65a:	18ab      	adds	r3, r5, r2
 800a65c:	65c3      	str	r3, [r0, #92]	; 0x5c
 800a65e:	1aaa      	subs	r2, r5, r2
 800a660:	4613      	mov	r3, r2
 800a662:	fb84 2303 	smull	r2, r3, r4, r3
 800a666:	011b      	lsls	r3, r3, #4
 800a668:	6603      	str	r3, [r0, #96]	; 0x60
 800a66a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800a6dc <xmp3fixpt_FDCT32+0x2d0>

	/* second pass */
	for (i = 4; i > 0; i--) {
 800a66e:	f04f 0a04 	mov.w	sl, #4
 800a672:	e0b9      	b.n	800a7e8 <xmp3fixpt_FDCT32+0x3dc>
	es = 0;
 800a674:	f04f 0c00 	mov.w	ip, #0
 800a678:	e6df      	b.n	800a43a <xmp3fixpt_FDCT32+0x2e>
 800a67a:	bf00      	nop
 800a67c:	4013c251 	.word	0x4013c251
 800a680:	518522fb 	.word	0x518522fb
 800a684:	404f4672 	.word	0x404f4672
 800a688:	40b345bd 	.word	0x40b345bd
 800a68c:	6d0b20cf 	.word	0x6d0b20cf
 800a690:	42e13c10 	.word	0x42e13c10
 800a694:	41fa2d6d 	.word	0x41fa2d6d
 800a698:	41d95790 	.word	0x41d95790
 800a69c:	48919f44 	.word	0x48919f44
 800a6a0:	43f93421 	.word	0x43f93421
 800a6a4:	5efc8d96 	.word	0x5efc8d96
 800a6a8:	52cb0e63 	.word	0x52cb0e63
 800a6ac:	46cc1bc4 	.word	0x46cc1bc4
 800a6b0:	4ad81a97 	.word	0x4ad81a97
 800a6b4:	64e2402e 	.word	0x64e2402e
 800a6b8:	4a9d9cf0 	.word	0x4a9d9cf0
 800a6bc:	7c7d1db3 	.word	0x7c7d1db3
 800a6c0:	43e224a9 	.word	0x43e224a9
 800a6c4:	4fae3711 	.word	0x4fae3711
 800a6c8:	6b6fcf26 	.word	0x6b6fcf26
 800a6cc:	6e3c92c1 	.word	0x6e3c92c1
 800a6d0:	56601ea7 	.word	0x56601ea7
 800a6d4:	5f4cf6eb 	.word	0x5f4cf6eb
 800a6d8:	519e4e04 	.word	0x519e4e04
 800a6dc:	08018e80 	.word	0x08018e80
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 800a6e0:	6804      	ldr	r4, [r0, #0]
 800a6e2:	69c1      	ldr	r1, [r0, #28]
 800a6e4:	68c5      	ldr	r5, [r0, #12]
 800a6e6:	6906      	ldr	r6, [r0, #16]
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800a6e8:	1863      	adds	r3, r4, r1
 800a6ea:	f8d9 2000 	ldr.w	r2, [r9]
 800a6ee:	1a64      	subs	r4, r4, r1
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	fb82 4101 	smull	r4, r1, r2, r1
 800a6f6:	0049      	lsls	r1, r1, #1
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800a6f8:	eb05 0e06 	add.w	lr, r5, r6
 800a6fc:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800a700:	1bad      	subs	r5, r5, r6
 800a702:	462a      	mov	r2, r5
 800a704:	fb84 5202 	smull	r5, r2, r4, r2
 800a708:	00d6      	lsls	r6, r2, #3
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800a70a:	eb03 050e 	add.w	r5, r3, lr
 800a70e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800a712:	eba3 030e 	sub.w	r3, r3, lr
 800a716:	461a      	mov	r2, r3
 800a718:	fb87 3202 	smull	r3, r2, r7, r2
 800a71c:	0052      	lsls	r2, r2, #1
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800a71e:	198c      	adds	r4, r1, r6
 800a720:	1b89      	subs	r1, r1, r6
 800a722:	460b      	mov	r3, r1
 800a724:	fb87 1303 	smull	r1, r3, r7, r3
 800a728:	005b      	lsls	r3, r3, #1

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 800a72a:	6841      	ldr	r1, [r0, #4]
 800a72c:	f8d0 b018 	ldr.w	fp, [r0, #24]
 800a730:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a734:	f8d0 8014 	ldr.w	r8, [r0, #20]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800a738:	eb01 070b 	add.w	r7, r1, fp
 800a73c:	eba1 0b0b 	sub.w	fp, r1, fp
 800a740:	4659      	mov	r1, fp
 800a742:	f8d9 600c 	ldr.w	r6, [r9, #12]
 800a746:	fb86 b101 	smull	fp, r1, r6, r1
 800a74a:	0049      	lsls	r1, r1, #1
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800a74c:	eb0e 0b08 	add.w	fp, lr, r8
 800a750:	ebae 0e08 	sub.w	lr, lr, r8
 800a754:	46f0      	mov	r8, lr
 800a756:	f8d9 6010 	ldr.w	r6, [r9, #16]
 800a75a:	fb86 e808 	smull	lr, r8, r6, r8
 800a75e:	ea4f 0648 	mov.w	r6, r8, lsl #1
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800a762:	eb07 080b 	add.w	r8, r7, fp
 800a766:	f8d9 e014 	ldr.w	lr, [r9, #20]
 800a76a:	eba7 0b0b 	sub.w	fp, r7, fp
 800a76e:	465f      	mov	r7, fp
 800a770:	fb8e b707 	smull	fp, r7, lr, r7
 800a774:	00bf      	lsls	r7, r7, #2
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 800a776:	eb01 0b06 	add.w	fp, r1, r6
 800a77a:	f109 0918 	add.w	r9, r9, #24
 800a77e:	1b89      	subs	r1, r1, r6
 800a780:	460e      	mov	r6, r1
 800a782:	fb8e 1606 	smull	r1, r6, lr, r6
 800a786:	00b6      	lsls	r6, r6, #2

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800a788:	eb05 0e08 	add.w	lr, r5, r8
 800a78c:	eba5 0808 	sub.w	r8, r5, r8
 800a790:	49d2      	ldr	r1, [pc, #840]	; (800aadc <xmp3fixpt_FDCT32+0x6d0>)
 800a792:	4645      	mov	r5, r8
 800a794:	fb81 8505 	smull	r8, r5, r1, r5
 800a798:	006d      	lsls	r5, r5, #1
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800a79a:	eb02 0807 	add.w	r8, r2, r7
 800a79e:	1bd2      	subs	r2, r2, r7
 800a7a0:	4617      	mov	r7, r2
 800a7a2:	fb81 2707 	smull	r2, r7, r1, r7
 800a7a6:	007f      	lsls	r7, r7, #1
		buf[0] = b0;	    buf[1] = b1;
 800a7a8:	f8c0 e000 	str.w	lr, [r0]
 800a7ac:	6045      	str	r5, [r0, #4]
		buf[2] = b2 + b3;	buf[3] = b3;
 800a7ae:	eb08 0207 	add.w	r2, r8, r7
 800a7b2:	6082      	str	r2, [r0, #8]
 800a7b4:	60c7      	str	r7, [r0, #12]

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800a7b6:	eb04 050b 	add.w	r5, r4, fp
 800a7ba:	eba4 040b 	sub.w	r4, r4, fp
 800a7be:	4622      	mov	r2, r4
 800a7c0:	fb81 4202 	smull	r4, r2, r1, r2
 800a7c4:	0054      	lsls	r4, r2, #1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800a7c6:	199f      	adds	r7, r3, r6
 800a7c8:	1b9b      	subs	r3, r3, r6
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	fb81 3202 	smull	r3, r2, r1, r2
 800a7d0:	0052      	lsls	r2, r2, #1
		b6 += b7;
 800a7d2:	18bb      	adds	r3, r7, r2
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800a7d4:	441d      	add	r5, r3
 800a7d6:	6105      	str	r5, [r0, #16]
 800a7d8:	18a1      	adds	r1, r4, r2
 800a7da:	6141      	str	r1, [r0, #20]
		buf[6] = b5 + b6;	buf[7] = b7;
 800a7dc:	441c      	add	r4, r3
 800a7de:	6184      	str	r4, [r0, #24]
 800a7e0:	61c2      	str	r2, [r0, #28]

		buf += 8;
 800a7e2:	3020      	adds	r0, #32
	for (i = 4; i > 0; i--) {
 800a7e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7e8:	f1ba 0f00 	cmp.w	sl, #0
 800a7ec:	f73f af78 	bgt.w	800a6e0 <xmp3fixpt_FDCT32+0x2d4>
	}
	buf -= 32;	/* reset */

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800a7f0:	9a02      	ldr	r2, [sp, #8]
 800a7f2:	9b03      	ldr	r3, [sp, #12]
 800a7f4:	1ad1      	subs	r1, r2, r3
 800a7f6:	f001 0107 	and.w	r1, r1, #7
 800a7fa:	f501 6280 	add.w	r2, r1, #1024	; 0x400
 800a7fe:	0092      	lsls	r2, r2, #2
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 8138 	beq.w	800aa76 <xmp3fixpt_FDCT32+0x66a>
 800a806:	2400      	movs	r4, #0
 800a808:	4422      	add	r2, r4
 800a80a:	9d01      	ldr	r5, [sp, #4]
 800a80c:	eb05 0802 	add.w	r8, r5, r2
	s = buf[ 0];				d[0] = d[8] = s;
 800a810:	f850 3c80 	ldr.w	r3, [r0, #-128]
 800a814:	f8c8 3020 	str.w	r3, [r8, #32]
 800a818:	50ab      	str	r3, [r5, r2]
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800a81a:	9b02      	ldr	r3, [sp, #8]
 800a81c:	009d      	lsls	r5, r3, #2
 800a81e:	9b03      	ldr	r3, [sp, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 812b 	beq.w	800aa7c <xmp3fixpt_FDCT32+0x670>
 800a826:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800a82a:	441d      	add	r5, r3
 800a82c:	9f01      	ldr	r7, [sp, #4]
 800a82e:	197b      	adds	r3, r7, r5

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800a830:	f850 6c7c 	ldr.w	r6, [r0, #-124]
 800a834:	621e      	str	r6, [r3, #32]
 800a836:	517e      	str	r6, [r7, r5]

	tmp = buf[25] + buf[29];
 800a838:	f850 6c1c 	ldr.w	r6, [r0, #-28]
 800a83c:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 800a840:	4435      	add	r5, r6
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800a842:	f850 6c3c 	ldr.w	r6, [r0, #-60]
 800a846:	442e      	add	r6, r5
 800a848:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
 800a84c:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 800a850:	f850 6c5c 	ldr.w	r6, [r0, #-92]
 800a854:	f850 7c4c 	ldr.w	r7, [r0, #-76]
 800a858:	443e      	add	r6, r7
 800a85a:	f8c3 6220 	str.w	r6, [r3, #544]	; 0x220
 800a85e:	f8c3 6200 	str.w	r6, [r3, #512]	; 0x200
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800a862:	f850 7c2c 	ldr.w	r7, [r0, #-44]
 800a866:	443d      	add	r5, r7
 800a868:	f8c3 5320 	str.w	r5, [r3, #800]	; 0x320
 800a86c:	f8c3 5300 	str.w	r5, [r3, #768]	; 0x300

	tmp = buf[29] + buf[27];
 800a870:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 800a874:	f850 5c14 	ldr.w	r5, [r0, #-20]
 800a878:	4435      	add	r5, r6
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 800a87a:	f850 6c6c 	ldr.w	r6, [r0, #-108]
 800a87e:	f8c3 6420 	str.w	r6, [r3, #1056]	; 0x420
 800a882:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800a886:	f850 6c2c 	ldr.w	r6, [r0, #-44]
 800a88a:	442e      	add	r6, r5
 800a88c:	f8c3 6520 	str.w	r6, [r3, #1312]	; 0x520
 800a890:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 800a894:	f850 6c4c 	ldr.w	r6, [r0, #-76]
 800a898:	f850 7c54 	ldr.w	r7, [r0, #-84]
 800a89c:	443e      	add	r6, r7
 800a89e:	f8c3 6620 	str.w	r6, [r3, #1568]	; 0x620
 800a8a2:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800a8a6:	f850 7c34 	ldr.w	r7, [r0, #-52]
 800a8aa:	443d      	add	r5, r7
 800a8ac:	f8c3 5720 	str.w	r5, [r3, #1824]	; 0x720
 800a8b0:	f8c3 5700 	str.w	r5, [r3, #1792]	; 0x700

	tmp = buf[27] + buf[31];
 800a8b4:	f850 6c14 	ldr.w	r6, [r0, #-20]
 800a8b8:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800a8bc:	4435      	add	r5, r6
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 800a8be:	f850 6c74 	ldr.w	r6, [r0, #-116]
 800a8c2:	f8c3 6820 	str.w	r6, [r3, #2080]	; 0x820
 800a8c6:	f8c3 6800 	str.w	r6, [r3, #2048]	; 0x800
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800a8ca:	f850 6c34 	ldr.w	r6, [r0, #-52]
 800a8ce:	442e      	add	r6, r5
 800a8d0:	f8c3 6920 	str.w	r6, [r3, #2336]	; 0x920
 800a8d4:	f8c3 6900 	str.w	r6, [r3, #2304]	; 0x900
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 800a8d8:	f850 6c54 	ldr.w	r6, [r0, #-84]
 800a8dc:	f850 7c44 	ldr.w	r7, [r0, #-68]
 800a8e0:	443e      	add	r6, r7
 800a8e2:	f8c3 6a20 	str.w	r6, [r3, #2592]	; 0xa20
 800a8e6:	f8c3 6a00 	str.w	r6, [r3, #2560]	; 0xa00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800a8ea:	f850 7c24 	ldr.w	r7, [r0, #-36]
 800a8ee:	443d      	add	r5, r7
 800a8f0:	f8c3 5b20 	str.w	r5, [r3, #2848]	; 0xb20
 800a8f4:	f8c3 5b00 	str.w	r5, [r3, #2816]	; 0xb00

	tmp = buf[31];
 800a8f8:	f850 6c04 	ldr.w	r6, [r0, #-4]
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800a8fc:	f850 5c64 	ldr.w	r5, [r0, #-100]
 800a900:	f8c3 5c20 	str.w	r5, [r3, #3104]	; 0xc20
 800a904:	f8c3 5c00 	str.w	r5, [r3, #3072]	; 0xc00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800a908:	f850 5c24 	ldr.w	r5, [r0, #-36]
 800a90c:	4435      	add	r5, r6
 800a90e:	f8c3 5d20 	str.w	r5, [r3, #3360]	; 0xd20
 800a912:	f8c3 5d00 	str.w	r5, [r3, #3328]	; 0xd00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800a916:	f850 5c44 	ldr.w	r5, [r0, #-68]
 800a91a:	f8c3 5e20 	str.w	r5, [r3, #3616]	; 0xe20
 800a91e:	f8c3 5e00 	str.w	r5, [r3, #3584]	; 0xe00
	s = tmp;					d[0] = d[8] = s;
 800a922:	f8c3 6f20 	str.w	r6, [r3, #3872]	; 0xf20
 800a926:	f8c3 6f00 	str.w	r6, [r3, #3840]	; 0xf00

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800a92a:	3110      	adds	r1, #16
 800a92c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800a930:	9e01      	ldr	r6, [sp, #4]
 800a932:	1931      	adds	r1, r6, r4

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800a934:	f850 5c7c 	ldr.w	r5, [r0, #-124]
 800a938:	620d      	str	r5, [r1, #32]
 800a93a:	4637      	mov	r7, r6
 800a93c:	5135      	str	r5, [r6, r4]

	tmp = buf[30] + buf[25];
 800a93e:	f850 4c08 	ldr.w	r4, [r0, #-8]
 800a942:	f850 5c1c 	ldr.w	r5, [r0, #-28]
 800a946:	eb04 0e05 	add.w	lr, r4, r5
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800a94a:	f850 6c3c 	ldr.w	r6, [r0, #-60]
 800a94e:	4476      	add	r6, lr
 800a950:	f8c1 6120 	str.w	r6, [r1, #288]	; 0x120
 800a954:	f8c1 6100 	str.w	r6, [r1, #256]	; 0x100
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 800a958:	f850 5c48 	ldr.w	r5, [r0, #-72]
 800a95c:	f850 6c5c 	ldr.w	r6, [r0, #-92]
 800a960:	4435      	add	r5, r6
 800a962:	f8c1 5220 	str.w	r5, [r1, #544]	; 0x220
 800a966:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800a96a:	f850 4c28 	ldr.w	r4, [r0, #-40]
 800a96e:	4474      	add	r4, lr
 800a970:	f8c1 4320 	str.w	r4, [r1, #800]	; 0x320
 800a974:	f8c1 4300 	str.w	r4, [r1, #768]	; 0x300
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 800a978:	f850 4c68 	ldr.w	r4, [r0, #-104]
 800a97c:	f8c1 4420 	str.w	r4, [r1, #1056]	; 0x420
 800a980:	f8c1 4400 	str.w	r4, [r1, #1024]	; 0x400

	tmp = buf[26] + buf[30];
 800a984:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800a988:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800a98c:	eb04 0e05 	add.w	lr, r4, r5
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800a990:	f850 6c28 	ldr.w	r6, [r0, #-40]
 800a994:	4476      	add	r6, lr
 800a996:	f8c1 6520 	str.w	r6, [r1, #1312]	; 0x520
 800a99a:	f8c1 6500 	str.w	r6, [r1, #1280]	; 0x500
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 800a99e:	f850 5c58 	ldr.w	r5, [r0, #-88]
 800a9a2:	f850 6c48 	ldr.w	r6, [r0, #-72]
 800a9a6:	4435      	add	r5, r6
 800a9a8:	f8c1 5620 	str.w	r5, [r1, #1568]	; 0x620
 800a9ac:	f8c1 5600 	str.w	r5, [r1, #1536]	; 0x600
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800a9b0:	f850 4c38 	ldr.w	r4, [r0, #-56]
 800a9b4:	4474      	add	r4, lr
 800a9b6:	f8c1 4720 	str.w	r4, [r1, #1824]	; 0x720
 800a9ba:	f8c1 4700 	str.w	r4, [r1, #1792]	; 0x700
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 800a9be:	f850 4c78 	ldr.w	r4, [r0, #-120]
 800a9c2:	f8c1 4820 	str.w	r4, [r1, #2080]	; 0x820
 800a9c6:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800

	tmp = buf[28] + buf[26];
 800a9ca:	f850 4c10 	ldr.w	r4, [r0, #-16]
 800a9ce:	f850 5c18 	ldr.w	r5, [r0, #-24]
 800a9d2:	eb04 0e05 	add.w	lr, r4, r5
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800a9d6:	f850 6c38 	ldr.w	r6, [r0, #-56]
 800a9da:	4476      	add	r6, lr
 800a9dc:	f8c1 6920 	str.w	r6, [r1, #2336]	; 0x920
 800a9e0:	f8c1 6900 	str.w	r6, [r1, #2304]	; 0x900
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 800a9e4:	f850 5c50 	ldr.w	r5, [r0, #-80]
 800a9e8:	f850 6c58 	ldr.w	r6, [r0, #-88]
 800a9ec:	4435      	add	r5, r6
 800a9ee:	f8c1 5a20 	str.w	r5, [r1, #2592]	; 0xa20
 800a9f2:	f8c1 5a00 	str.w	r5, [r1, #2560]	; 0xa00
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800a9f6:	f850 4c30 	ldr.w	r4, [r0, #-48]
 800a9fa:	4474      	add	r4, lr
 800a9fc:	f8c1 4b20 	str.w	r4, [r1, #2848]	; 0xb20
 800aa00:	f8c1 4b00 	str.w	r4, [r1, #2816]	; 0xb00
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 800aa04:	f850 4c70 	ldr.w	r4, [r0, #-112]
 800aa08:	f8c1 4c20 	str.w	r4, [r1, #3104]	; 0xc20
 800aa0c:	f8c1 4c00 	str.w	r4, [r1, #3072]	; 0xc00

	tmp = buf[24] + buf[28];
 800aa10:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800aa14:	f850 5c10 	ldr.w	r5, [r0, #-16]
 800aa18:	442c      	add	r4, r5
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800aa1a:	f850 6c30 	ldr.w	r6, [r0, #-48]
 800aa1e:	4426      	add	r6, r4
 800aa20:	f8c1 6d20 	str.w	r6, [r1, #3360]	; 0xd20
 800aa24:	f8c1 6d00 	str.w	r6, [r1, #3328]	; 0xd00
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 800aa28:	f850 5c60 	ldr.w	r5, [r0, #-96]
 800aa2c:	f850 6c50 	ldr.w	r6, [r0, #-80]
 800aa30:	4435      	add	r5, r6
 800aa32:	f8c1 5e20 	str.w	r5, [r1, #3616]	; 0xe20
 800aa36:	f8c1 5e00 	str.w	r5, [r1, #3584]	; 0xe00
	s = buf[16] + tmp;			d[0] = d[8] = s;
 800aa3a:	f850 0c40 	ldr.w	r0, [r0, #-64]
 800aa3e:	4404      	add	r4, r0
 800aa40:	f8c1 4f20 	str.w	r4, [r1, #3872]	; 0xf20
 800aa44:	f8c1 4f00 	str.w	r4, [r1, #3840]	; 0xf00

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 800aa48:	f1bc 0f00 	cmp.w	ip, #0
 800aa4c:	d042      	beq.n	800aad4 <xmp3fixpt_FDCT32+0x6c8>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 800aa4e:	58bc      	ldr	r4, [r7, r2]
 800aa50:	17e5      	asrs	r5, r4, #31
 800aa52:	f1cc 001f 	rsb	r0, ip, #31
 800aa56:	fa44 f600 	asr.w	r6, r4, r0
 800aa5a:	42ae      	cmp	r6, r5
 800aa5c:	d003      	beq.n	800aa66 <xmp3fixpt_FDCT32+0x65a>
 800aa5e:	2401      	movs	r4, #1
 800aa60:	4084      	lsls	r4, r0
 800aa62:	3c01      	subs	r4, #1
 800aa64:	406c      	eors	r4, r5
 800aa66:	fa04 f40c 	lsl.w	r4, r4, ip
 800aa6a:	f8c8 4020 	str.w	r4, [r8, #32]
 800aa6e:	9d01      	ldr	r5, [sp, #4]
 800aa70:	50ac      	str	r4, [r5, r2]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
		for (i = 16; i <= 31; i++) {
 800aa72:	2410      	movs	r4, #16
 800aa74:	e00b      	b.n	800aa8e <xmp3fixpt_FDCT32+0x682>
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800aa76:	f44f 5488 	mov.w	r4, #4352	; 0x1100
 800aa7a:	e6c5      	b.n	800a808 <xmp3fixpt_FDCT32+0x3fc>
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	e6d4      	b.n	800a82a <xmp3fixpt_FDCT32+0x41e>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800aa80:	fa02 f20c 	lsl.w	r2, r2, ip
 800aa84:	621a      	str	r2, [r3, #32]
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	f503 7380 	add.w	r3, r3, #256	; 0x100
		for (i = 16; i <= 31; i++) {
 800aa8c:	3401      	adds	r4, #1
 800aa8e:	2c1f      	cmp	r4, #31
 800aa90:	dc0a      	bgt.n	800aaa8 <xmp3fixpt_FDCT32+0x69c>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	17d5      	asrs	r5, r2, #31
 800aa96:	fa42 f600 	asr.w	r6, r2, r0
 800aa9a:	42ae      	cmp	r6, r5
 800aa9c:	d0f0      	beq.n	800aa80 <xmp3fixpt_FDCT32+0x674>
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	4082      	lsls	r2, r0
 800aaa2:	3a01      	subs	r2, #1
 800aaa4:	406a      	eors	r2, r5
 800aaa6:	e7eb      	b.n	800aa80 <xmp3fixpt_FDCT32+0x674>
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		for (i = 15; i >= 0; i--) {
 800aaa8:	220f      	movs	r2, #15
 800aaaa:	e006      	b.n	800aaba <xmp3fixpt_FDCT32+0x6ae>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800aaac:	fa03 f30c 	lsl.w	r3, r3, ip
 800aab0:	620b      	str	r3, [r1, #32]
 800aab2:	600b      	str	r3, [r1, #0]
 800aab4:	f501 7180 	add.w	r1, r1, #256	; 0x100
		for (i = 15; i >= 0; i--) {
 800aab8:	3a01      	subs	r2, #1
 800aaba:	2a00      	cmp	r2, #0
 800aabc:	db0a      	blt.n	800aad4 <xmp3fixpt_FDCT32+0x6c8>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800aabe:	680b      	ldr	r3, [r1, #0]
 800aac0:	17dc      	asrs	r4, r3, #31
 800aac2:	fa43 f500 	asr.w	r5, r3, r0
 800aac6:	42a5      	cmp	r5, r4
 800aac8:	d0f0      	beq.n	800aaac <xmp3fixpt_FDCT32+0x6a0>
 800aaca:	2301      	movs	r3, #1
 800aacc:	4083      	lsls	r3, r0
 800aace:	3b01      	subs	r3, #1
 800aad0:	4063      	eors	r3, r4
 800aad2:	e7eb      	b.n	800aaac <xmp3fixpt_FDCT32+0x6a0>
		}
	}
}
 800aad4:	b005      	add	sp, #20
 800aad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aada:	bf00      	nop
 800aadc:	5a82799a 	.word	0x5a82799a

0800aae0 <xmp3fixpt_Dequantize>:
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800aae0:	2800      	cmp	r0, #0
 800aae2:	f000 813b 	beq.w	800ad5c <xmp3fixpt_Dequantize+0x27c>
{
 800aae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaea:	b08b      	sub	sp, #44	; 0x2c
 800aaec:	4607      	mov	r7, r0
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800aaee:	f8d0 8000 	ldr.w	r8, [r0]
 800aaf2:	f1b8 0f00 	cmp.w	r8, #0
 800aaf6:	f000 8134 	beq.w	800ad62 <xmp3fixpt_Dequantize+0x282>
 800aafa:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800aafe:	f1ba 0f00 	cmp.w	sl, #0
 800ab02:	f000 8131 	beq.w	800ad68 <xmp3fixpt_Dequantize+0x288>
 800ab06:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800ab0a:	f1bb 0f00 	cmp.w	fp, #0
 800ab0e:	f000 812e 	beq.w	800ad6e <xmp3fixpt_Dequantize+0x28e>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800ab12:	68c5      	ldr	r5, [r0, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800ab14:	2d00      	cmp	r5, #0
 800ab16:	f000 812d 	beq.w	800ad74 <xmp3fixpt_Dequantize+0x294>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800ab1a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800ab1e:	f1b9 0f00 	cmp.w	r9, #0
 800ab22:	f000 812a 	beq.w	800ad7a <xmp3fixpt_Dequantize+0x29a>
 800ab26:	460e      	mov	r6, r1
	/* si is an array of up to 4 structs, stored as gr0ch0, gr0ch1, gr1ch0, gr1ch1 */
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
	sfi = (ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS);
	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
	cbi = di->cbi;
 800ab28:	f509 7346 	add.w	r3, r9, #792	; 0x318
 800ab2c:	9307      	str	r3, [sp, #28]
	mOut[0] = mOut[1] = 0;
 800ab2e:	2400      	movs	r4, #0
 800ab30:	9409      	str	r4, [sp, #36]	; 0x24
 800ab32:	9408      	str	r4, [sp, #32]

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800ab34:	e02d      	b.n	800ab92 <xmp3fixpt_Dequantize+0xb2>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800ab36:	00e1      	lsls	r1, r4, #3
 800ab38:	190b      	adds	r3, r1, r4
 800ab3a:	0218      	lsls	r0, r3, #8
			&si->sis[gr][ch], &sfi->sfis[gr][ch], &cbi[ch]);
 800ab3c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800ab40:	00d3      	lsls	r3, r2, #3
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800ab42:	f504 6290 	add.w	r2, r4, #1152	; 0x480
 800ab46:	9206      	str	r2, [sp, #24]
 800ab48:	9a07      	ldr	r2, [sp, #28]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	9302      	str	r3, [sp, #8]
 800ab4e:	ebc4 1c44 	rsb	ip, r4, r4, lsl #5
 800ab52:	ea4f 034c 	mov.w	r3, ip, lsl #1
 800ab56:	ebc6 1e46 	rsb	lr, r6, r6, lsl #5
 800ab5a:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 800ab5e:	4463      	add	r3, ip
 800ab60:	445b      	add	r3, fp
 800ab62:	9301      	str	r3, [sp, #4]
 800ab64:	4421      	add	r1, r4
 800ab66:	00cb      	lsls	r3, r1, #3
 800ab68:	eb06 0cc6 	add.w	ip, r6, r6, lsl #3
 800ab6c:	ea4f 110c 	mov.w	r1, ip, lsl #4
 800ab70:	440b      	add	r3, r1
 800ab72:	3328      	adds	r3, #40	; 0x28
 800ab74:	4453      	add	r3, sl
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	4643      	mov	r3, r8
 800ab7a:	9a06      	ldr	r2, [sp, #24]
 800ab7c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800ab80:	4649      	mov	r1, r9
 800ab82:	4428      	add	r0, r5
 800ab84:	f000 f9be 	bl	800af04 <xmp3fixpt_DequantChannel>
 800ab88:	f204 4382 	addw	r3, r4, #1154	; 0x482
 800ab8c:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800ab90:	3401      	adds	r4, #1
 800ab92:	f8d7 37bc 	ldr.w	r3, [r7, #1980]	; 0x7bc
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	dccd      	bgt.n	800ab36 <xmp3fixpt_Dequantize+0x56>
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 800ab9a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800ab9e:	b14b      	cbz	r3, 800abb4 <xmp3fixpt_Dequantize+0xd4>
 800aba0:	f241 2308 	movw	r3, #4616	; 0x1208
 800aba4:	58eb      	ldr	r3, [r5, r3]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	dd2f      	ble.n	800ac0a <xmp3fixpt_Dequantize+0x12a>
 800abaa:	f241 230c 	movw	r3, #4620	; 0x120c
 800abae:	58eb      	ldr	r3, [r5, r3]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	dd2c      	ble.n	800ac0e <xmp3fixpt_Dequantize+0x12e>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 800abb4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800abb8:	085a      	lsrs	r2, r3, #1
 800abba:	d065      	beq.n	800ac88 <xmp3fixpt_Dequantize+0x1a8>
		if (fh->modeExt & 0x01) {
 800abbc:	f013 0f01 	tst.w	r3, #1
 800abc0:	d055      	beq.n	800ac6e <xmp3fixpt_Dequantize+0x18e>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 800abc2:	f8d9 3330 	ldr.w	r3, [r9, #816]	; 0x330
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d145      	bne.n	800ac56 <xmp3fixpt_Dequantize+0x176>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 800abca:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800abce:	f8d9 3344 	ldr.w	r3, [r9, #836]	; 0x344
 800abd2:	3301      	adds	r3, #1
 800abd4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800abd8:	e052      	b.n	800ac80 <xmp3fixpt_Dequantize+0x1a0>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800abda:	3301      	adds	r3, #1
 800abdc:	f505 5290 	add.w	r2, r5, #4608	; 0x1200
 800abe0:	6812      	ldr	r2, [r2, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	dd15      	ble.n	800ac12 <xmp3fixpt_Dequantize+0x132>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800abe6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800abea:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800abee:	dc02      	bgt.n	800abf6 <xmp3fixpt_Dequantize+0x116>
 800abf0:	4a63      	ldr	r2, [pc, #396]	; (800ad80 <xmp3fixpt_Dequantize+0x2a0>)
 800abf2:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800abf6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800abfa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800abfe:	dbec      	blt.n	800abda <xmp3fixpt_Dequantize+0xfa>
 800ac00:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800ac04:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 800ac08:	e7e7      	b.n	800abda <xmp3fixpt_Dequantize+0xfa>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e7e6      	b.n	800abdc <xmp3fixpt_Dequantize+0xfc>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	e7e4      	b.n	800abdc <xmp3fixpt_Dequantize+0xfc>
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800ac12:	2300      	movs	r3, #0
 800ac14:	e000      	b.n	800ac18 <xmp3fixpt_Dequantize+0x138>
 800ac16:	3301      	adds	r3, #1
 800ac18:	f241 2204 	movw	r2, #4612	; 0x1204
 800ac1c:	58aa      	ldr	r2, [r5, r2]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	ddc8      	ble.n	800abb4 <xmp3fixpt_Dequantize+0xd4>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800ac22:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800ac26:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800ac2a:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800ac2e:	dc04      	bgt.n	800ac3a <xmp3fixpt_Dequantize+0x15a>
 800ac30:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800ac34:	4952      	ldr	r1, [pc, #328]	; (800ad80 <xmp3fixpt_Dequantize+0x2a0>)
 800ac36:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800ac3a:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800ac3e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800ac42:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800ac46:	dbe6      	blt.n	800ac16 <xmp3fixpt_Dequantize+0x136>
 800ac48:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800ac4c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800ac50:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800ac54:	e7df      	b.n	800ac16 <xmp3fixpt_Dequantize+0x136>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 800ac56:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800ac5a:	f8d9 2340 	ldr.w	r2, [r9, #832]	; 0x340
 800ac5e:	3215      	adds	r2, #21
 800ac60:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800ac64:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800ac68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ac6c:	e008      	b.n	800ac80 <xmp3fixpt_Dequantize+0x1a0>
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800ac6e:	f241 2304 	movw	r3, #4612	; 0x1204
 800ac72:	58e9      	ldr	r1, [r5, r3]
 800ac74:	f505 5390 	add.w	r3, r5, #4608	; 0x1200
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4299      	cmp	r1, r3
 800ac7c:	bfb8      	it	lt
 800ac7e:	4619      	movlt	r1, r3
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 800ac80:	aa08      	add	r2, sp, #32
 800ac82:	4628      	mov	r0, r5
 800ac84:	f003 fe6d 	bl	800e962 <xmp3fixpt_MidSideProc>
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 800ac88:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800ac8c:	f012 0f01 	tst.w	r2, #1
 800ac90:	d01b      	beq.n	800acca <xmp3fixpt_Dequantize+0x1ea>
		nSamps = hi->nonZeroBound[0];
 800ac92:	f505 5390 	add.w	r3, r5, #4608	; 0x1200
 800ac96:	6819      	ldr	r1, [r3, #0]
		if (fh->ver == MPEG1) {
 800ac98:	f898 3000 	ldrb.w	r3, [r8]
 800ac9c:	b9eb      	cbnz	r3, 800acda <xmp3fixpt_Dequantize+0x1fa>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800ac9e:	ebc6 1046 	rsb	r0, r6, r6, lsl #5
 800aca2:	0083      	lsls	r3, r0, #2
 800aca4:	333e      	adds	r3, #62	; 0x3e
 800aca6:	a808      	add	r0, sp, #32
 800aca8:	9003      	str	r0, [sp, #12]
 800acaa:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800acae:	0130      	lsls	r0, r6, #4
 800acb0:	4482      	add	sl, r0
 800acb2:	f8da 0088 	ldr.w	r0, [sl, #136]	; 0x88
 800acb6:	9002      	str	r0, [sp, #8]
 800acb8:	1052      	asrs	r2, r2, #1
 800acba:	9201      	str	r2, [sp, #4]
 800acbc:	9a07      	ldr	r2, [sp, #28]
 800acbe:	9200      	str	r2, [sp, #0]
 800acc0:	445b      	add	r3, fp
 800acc2:	4642      	mov	r2, r8
 800acc4:	4628      	mov	r0, r5
 800acc6:	f003 fe79 	bl	800e9bc <xmp3fixpt_IntensityProcMPEG1>
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 800acca:	f8d8 0020 	ldr.w	r0, [r8, #32]
 800acce:	2800      	cmp	r0, #0
 800acd0:	d03f      	beq.n	800ad52 <xmp3fixpt_Dequantize+0x272>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800acd2:	9b08      	ldr	r3, [sp, #32]

static __inline int CLZ(int x)
{
	int numZeros;

	if (!x)
 800acd4:	b33b      	cbz	r3, 800ad26 <xmp3fixpt_Dequantize+0x246>
		return (sizeof(int) * 8);

	numZeros = 0;
 800acd6:	2200      	movs	r2, #0
 800acd8:	e01b      	b.n	800ad12 <xmp3fixpt_Dequantize+0x232>
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800acda:	ebc6 1046 	rsb	r0, r6, r6, lsl #5
 800acde:	0083      	lsls	r3, r0, #2
 800ace0:	333e      	adds	r3, #62	; 0x3e
 800ace2:	a808      	add	r0, sp, #32
 800ace4:	9004      	str	r0, [sp, #16]
 800ace6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800acea:	0130      	lsls	r0, r6, #4
 800acec:	4482      	add	sl, r0
 800acee:	f8da 0088 	ldr.w	r0, [sl, #136]	; 0x88
 800acf2:	9003      	str	r0, [sp, #12]
 800acf4:	1052      	asrs	r2, r2, #1
 800acf6:	9202      	str	r2, [sp, #8]
 800acf8:	f10b 02f8 	add.w	r2, fp, #248	; 0xf8
 800acfc:	9201      	str	r2, [sp, #4]
 800acfe:	9a07      	ldr	r2, [sp, #28]
 800ad00:	9200      	str	r2, [sp, #0]
 800ad02:	445b      	add	r3, fp
 800ad04:	4642      	mov	r2, r8
 800ad06:	4628      	mov	r0, r5
 800ad08:	f003 ffc8 	bl	800ec9c <xmp3fixpt_IntensityProcMPEG2>
 800ad0c:	e7dd      	b.n	800acca <xmp3fixpt_Dequantize+0x1ea>
	while (!(x & 0x80000000)) {
		numZeros++;
 800ad0e:	3201      	adds	r2, #1
		x <<= 1;
 800ad10:	005b      	lsls	r3, r3, #1
	while (!(x & 0x80000000)) {
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	dafb      	bge.n	800ad0e <xmp3fixpt_Dequantize+0x22e>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800ad16:	3a01      	subs	r2, #1
 800ad18:	f241 2308 	movw	r3, #4616	; 0x1208
 800ad1c:	50ea      	str	r2, [r5, r3]
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800ad1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (!x)
 800ad20:	b1d3      	cbz	r3, 800ad58 <xmp3fixpt_Dequantize+0x278>
	numZeros = 0;
 800ad22:	2200      	movs	r2, #0
 800ad24:	e003      	b.n	800ad2e <xmp3fixpt_Dequantize+0x24e>
		return (sizeof(int) * 8);
 800ad26:	2220      	movs	r2, #32
 800ad28:	e7f5      	b.n	800ad16 <xmp3fixpt_Dequantize+0x236>
		numZeros++;
 800ad2a:	3201      	adds	r2, #1
		x <<= 1;
 800ad2c:	005b      	lsls	r3, r3, #1
	while (!(x & 0x80000000)) {
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	dafb      	bge.n	800ad2a <xmp3fixpt_Dequantize+0x24a>
 800ad32:	3a01      	subs	r2, #1
 800ad34:	f241 230c 	movw	r3, #4620	; 0x120c
 800ad38:	50ea      	str	r2, [r5, r3]
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800ad3a:	f241 2204 	movw	r2, #4612	; 0x1204
 800ad3e:	58ab      	ldr	r3, [r5, r2]
 800ad40:	f505 5190 	add.w	r1, r5, #4608	; 0x1200
 800ad44:	6808      	ldr	r0, [r1, #0]
 800ad46:	4283      	cmp	r3, r0
 800ad48:	bfb8      	it	lt
 800ad4a:	4603      	movlt	r3, r0
		hi->nonZeroBound[0] = nSamps;
 800ad4c:	600b      	str	r3, [r1, #0]
		hi->nonZeroBound[1] = nSamps;
 800ad4e:	50ab      	str	r3, [r5, r2]
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 800ad50:	2000      	movs	r0, #0
}
 800ad52:	b00b      	add	sp, #44	; 0x2c
 800ad54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (sizeof(int) * 8);
 800ad58:	2220      	movs	r2, #32
 800ad5a:	e7ea      	b.n	800ad32 <xmp3fixpt_Dequantize+0x252>
		return -1;
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ad60:	4770      	bx	lr
		return -1;
 800ad62:	f04f 30ff 	mov.w	r0, #4294967295
 800ad66:	e7f4      	b.n	800ad52 <xmp3fixpt_Dequantize+0x272>
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	e7f1      	b.n	800ad52 <xmp3fixpt_Dequantize+0x272>
 800ad6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad72:	e7ee      	b.n	800ad52 <xmp3fixpt_Dequantize+0x272>
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	e7eb      	b.n	800ad52 <xmp3fixpt_Dequantize+0x272>
 800ad7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7e:	e7e8      	b.n	800ad52 <xmp3fixpt_Dequantize+0x272>
 800ad80:	c0000001 	.word	0xc0000001

0800ad84 <DequantBlock>:
 * Outputs:     dequantized samples in Q25 format
 *
 * Return:      bitwise-OR of the unsigned outputs (for guard bit calculations)
 **************************************************************************************/
static int DequantBlock(int *inbuf, int *outbuf, int num, int scale)
{
 800ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad88:	b087      	sub	sp, #28
 800ad8a:	4605      	mov	r5, r0
	int scalef, scalei, shift;
	int sx, x, y;
	int mask = 0;
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
 800ad8c:	f003 0003 	and.w	r0, r3, #3
 800ad90:	4e54      	ldr	r6, [pc, #336]	; (800aee4 <DequantBlock+0x160>)
 800ad92:	eb06 1680 	add.w	r6, r6, r0, lsl #6
	scalef = pow14[scale & 0x3];
 800ad96:	4c54      	ldr	r4, [pc, #336]	; (800aee8 <DequantBlock+0x164>)
 800ad98:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800ad9c:	9001      	str	r0, [sp, #4]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800ad9e:	ea4f 09a3 	mov.w	r9, r3, asr #2
 800ada2:	46cc      	mov	ip, r9
 800ada4:	f1b9 0f1f 	cmp.w	r9, #31
 800ada8:	bfa8      	it	ge
 800adaa:	f04f 0c1f 	movge.w	ip, #31

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 800adae:	f10c 0703 	add.w	r7, ip, #3
	shift = MAX(shift, 0);
 800adb2:	f387 0705 	usat	r7, #5, r7
	tab4[0] = 0;
 800adb6:	2000      	movs	r0, #0
 800adb8:	9002      	str	r0, [sp, #8]
	tab4[1] = tab16[1] >> shift;
 800adba:	6874      	ldr	r4, [r6, #4]
 800adbc:	413c      	asrs	r4, r7
 800adbe:	9403      	str	r4, [sp, #12]
	tab4[2] = tab16[2] >> shift;
 800adc0:	68b4      	ldr	r4, [r6, #8]
 800adc2:	413c      	asrs	r4, r7
 800adc4:	9404      	str	r4, [sp, #16]
	tab4[3] = tab16[3] >> shift;
 800adc6:	68f3      	ldr	r3, [r6, #12]
 800adc8:	413b      	asrs	r3, r7
 800adca:	9305      	str	r3, [sp, #20]
 800adcc:	e011      	b.n	800adf2 <DequantBlock+0x6e>

		if (x < 4) {

			y = tab4[x];

		} else if (x < 16) {
 800adce:	2f0f      	cmp	r7, #15
 800add0:	dc1f      	bgt.n	800ae12 <DequantBlock+0x8e>

			y = tab16[x];
 800add2:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800add6:	f1b9 0f00 	cmp.w	r9, #0
 800adda:	db16      	blt.n	800ae0a <DequantBlock+0x86>
 800addc:	fa45 f50c 	asr.w	r5, r5, ip
				y >>= shift;
			}
		}

		/* sign and store */
		mask |= y;
 800ade0:	4328      	orrs	r0, r5
		*outbuf++ = (sx < 0) ? -y : y;
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	db79      	blt.n	800aeda <DequantBlock+0x156>
 800ade6:	1d0b      	adds	r3, r1, #4
 800ade8:	600d      	str	r5, [r1, #0]
		sx = *inbuf++;
 800adea:	4625      	mov	r5, r4

	} while (--num);
 800adec:	3a01      	subs	r2, #1
 800adee:	d076      	beq.n	800aede <DequantBlock+0x15a>
		*outbuf++ = (sx < 0) ? -y : y;
 800adf0:	4619      	mov	r1, r3
		sx = *inbuf++;
 800adf2:	1d2c      	adds	r4, r5, #4
 800adf4:	682b      	ldr	r3, [r5, #0]
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 800adf6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
		if (x < 4) {
 800adfa:	2f03      	cmp	r7, #3
 800adfc:	dce7      	bgt.n	800adce <DequantBlock+0x4a>
			y = tab4[x];
 800adfe:	ad06      	add	r5, sp, #24
 800ae00:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800ae04:	f857 5c10 	ldr.w	r5, [r7, #-16]
 800ae08:	e7ea      	b.n	800ade0 <DequantBlock+0x5c>
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800ae0a:	f1cc 0700 	rsb	r7, ip, #0
 800ae0e:	40bd      	lsls	r5, r7
 800ae10:	e7e6      	b.n	800ade0 <DequantBlock+0x5c>
			if (x < 64) {
 800ae12:	2f3f      	cmp	r7, #63	; 0x3f
 800ae14:	dc0c      	bgt.n	800ae30 <DequantBlock+0xac>
				y = pow43[x-16];
 800ae16:	3f10      	subs	r7, #16
 800ae18:	4d34      	ldr	r5, [pc, #208]	; (800aeec <DequantBlock+0x168>)
 800ae1a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ae1e:	9d01      	ldr	r5, [sp, #4]
 800ae20:	fb87 e505 	smull	lr, r5, r7, r5
				shift = scalei - 3;
 800ae24:	f1ac 0703 	sub.w	r7, ip, #3
			if (shift < 0) {
 800ae28:	2f00      	cmp	r7, #0
 800ae2a:	db4a      	blt.n	800aec2 <DequantBlock+0x13e>
				y >>= shift;
 800ae2c:	413d      	asrs	r5, r7
 800ae2e:	e7d7      	b.n	800ade0 <DequantBlock+0x5c>
				x <<= 17;
 800ae30:	047d      	lsls	r5, r7, #17
				if (x < 0x08000000)
 800ae32:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 800ae36:	da3e      	bge.n	800aeb6 <DequantBlock+0x132>
					x <<= 4, shift += 4;
 800ae38:	057d      	lsls	r5, r7, #21
 800ae3a:	f04f 0804 	mov.w	r8, #4
				if (x < 0x20000000)
 800ae3e:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800ae42:	da02      	bge.n	800ae4a <DequantBlock+0xc6>
					x <<= 2, shift += 2;
 800ae44:	00ad      	lsls	r5, r5, #2
 800ae46:	f108 0802 	add.w	r8, r8, #2
				if (x < 0x40000000)
 800ae4a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800ae4e:	da02      	bge.n	800ae56 <DequantBlock+0xd2>
					x <<= 1, shift += 1;
 800ae50:	006d      	lsls	r5, r5, #1
 800ae52:	f108 0801 	add.w	r8, r8, #1
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800ae56:	4f26      	ldr	r7, [pc, #152]	; (800aef0 <DequantBlock+0x16c>)
 800ae58:	42bd      	cmp	r5, r7
 800ae5a:	dc2f      	bgt.n	800aebc <DequantBlock+0x138>
 800ae5c:	f8df e09c 	ldr.w	lr, [pc, #156]	; 800aefc <DequantBlock+0x178>
 800ae60:	46aa      	mov	sl, r5
 800ae62:	f8de 7000 	ldr.w	r7, [lr]
 800ae66:	46bb      	mov	fp, r7
 800ae68:	fb8b 7a0a 	smull	r7, sl, fp, sl
				y = MULSHIFT32(y, x) + coef[1];
 800ae6c:	f8de 7004 	ldr.w	r7, [lr, #4]
 800ae70:	4457      	add	r7, sl
 800ae72:	46aa      	mov	sl, r5
 800ae74:	fb87 ba0a 	smull	fp, sl, r7, sl
				y = MULSHIFT32(y, x) + coef[2];
 800ae78:	f8de 7008 	ldr.w	r7, [lr, #8]
 800ae7c:	4457      	add	r7, sl
 800ae7e:	46aa      	mov	sl, r5
 800ae80:	fb87 ba0a 	smull	fp, sl, r7, sl
				y = MULSHIFT32(y, x) + coef[3];
 800ae84:	f8de 700c 	ldr.w	r7, [lr, #12]
 800ae88:	4457      	add	r7, sl
 800ae8a:	46ab      	mov	fp, r5
 800ae8c:	fb87 5b0b 	smull	r5, fp, r7, fp
				y = MULSHIFT32(y, x) + coef[4];
 800ae90:	f8de 5010 	ldr.w	r5, [lr, #16]
 800ae94:	44ab      	add	fp, r5
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800ae96:	4d17      	ldr	r5, [pc, #92]	; (800aef4 <DequantBlock+0x170>)
 800ae98:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 800ae9c:	463d      	mov	r5, r7
 800ae9e:	fb8b 7505 	smull	r7, r5, fp, r5
 800aea2:	00ef      	lsls	r7, r5, #3
 800aea4:	9d01      	ldr	r5, [sp, #4]
 800aea6:	fb87 e505 	smull	lr, r5, r7, r5
				shift = scalei - pow2exp[shift];
 800aeaa:	4f13      	ldr	r7, [pc, #76]	; (800aef8 <DequantBlock+0x174>)
 800aeac:	f857 7028 	ldr.w	r7, [r7, r8, lsl #2]
 800aeb0:	ebac 0707 	sub.w	r7, ip, r7
 800aeb4:	e7b8      	b.n	800ae28 <DequantBlock+0xa4>
				shift = 0;
 800aeb6:	f04f 0800 	mov.w	r8, #0
 800aeba:	e7c0      	b.n	800ae3e <DequantBlock+0xba>
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800aebc:	f8df e040 	ldr.w	lr, [pc, #64]	; 800af00 <DequantBlock+0x17c>
 800aec0:	e7ce      	b.n	800ae60 <DequantBlock+0xdc>
				shift = -shift;
 800aec2:	427f      	negs	r7, r7
				if (y > (0x7fffffff >> shift))
 800aec4:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 800aec8:	fa4e fe07 	asr.w	lr, lr, r7
 800aecc:	45ae      	cmp	lr, r5
 800aece:	db01      	blt.n	800aed4 <DequantBlock+0x150>
					y <<= shift;
 800aed0:	40bd      	lsls	r5, r7
 800aed2:	e785      	b.n	800ade0 <DequantBlock+0x5c>
					y = 0x7fffffff;		/* clip */
 800aed4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800aed8:	e782      	b.n	800ade0 <DequantBlock+0x5c>
		*outbuf++ = (sx < 0) ? -y : y;
 800aeda:	426d      	negs	r5, r5
 800aedc:	e783      	b.n	800ade6 <DequantBlock+0x62>

	return mask;
}
 800aede:	b007      	add	sp, #28
 800aee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee4:	08019018 	.word	0x08019018
 800aee8:	08018f08 	.word	0x08018f08
 800aeec:	08018f58 	.word	0x08018f58
 800aef0:	5a827999 	.word	0x5a827999
 800aef4:	08018f38 	.word	0x08018f38
 800aef8:	08018f18 	.word	0x08018f18
 800aefc:	08018ef4 	.word	0x08018ef4
 800af00:	08018ee0 	.word	0x08018ee0

0800af04 <xmp3fixpt_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 800af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af08:	b08d      	sub	sp, #52	; 0x34
 800af0a:	9004      	str	r0, [sp, #16]
 800af0c:	460c      	mov	r4, r1
 800af0e:	9205      	str	r2, [sp, #20]
 800af10:	469a      	mov	sl, r3
 800af12:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 800af16:	f8db 3014 	ldr.w	r3, [fp, #20]
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d01c      	beq.n	800af58 <xmp3fixpt_DequantChannel+0x54>
		cbEndS = 13;
	} else {
		/* long block */
		cbStartL = 0;
		cbEndL =   22;
		cbStartS = 13;
 800af1e:	f04f 080d 	mov.w	r8, #13
		cbEndL =   22;
 800af22:	2316      	movs	r3, #22
 800af24:	9303      	str	r3, [sp, #12]
		cbEndS =   13;
	}
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	9309      	str	r3, [sp, #36]	; 0x24

	/* sfactScale = 0 --> quantizer step size = 2
	 * sfactScale = 1 --> quantizer step size = sqrt(2)
	 *   so sfactMultiplier = 2 or 4 (jump through globalGain by powers of 2 or sqrt(2))
	 */
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800af2a:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 800af2e:	3301      	adds	r3, #1
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	9301      	str	r3, [sp, #4]

	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
 800af34:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (fh->modeExt >> 1)
 800af38:	f8da 2020 	ldr.w	r2, [sl, #32]
 800af3c:	0852      	lsrs	r2, r2, #1
 800af3e:	d000      	beq.n	800af42 <xmp3fixpt_DequantChannel+0x3e>
		 globalGain -= 2;
 800af40:	3b02      	subs	r3, #2
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 800af42:	3302      	adds	r3, #2
 800af44:	9302      	str	r3, [sp, #8]
	gbMask = 0;
 800af46:	2600      	movs	r6, #0
	i = 0;
 800af48:	4635      	mov	r5, r6
 800af4a:	f8cd 8018 	str.w	r8, [sp, #24]
 800af4e:	9407      	str	r4, [sp, #28]
 800af50:	4634      	mov	r4, r6
 800af52:	f8dd 9014 	ldr.w	r9, [sp, #20]

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 800af56:	e019      	b.n	800af8c <xmp3fixpt_DequantChannel+0x88>
		if (sis->mixedBlock) { 
 800af58:	f8db 3018 	ldr.w	r3, [fp, #24]
 800af5c:	9303      	str	r3, [sp, #12]
 800af5e:	b13b      	cbz	r3, 800af70 <xmp3fixpt_DequantChannel+0x6c>
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800af60:	f89a 3000 	ldrb.w	r3, [sl]
 800af64:	b93b      	cbnz	r3, 800af76 <xmp3fixpt_DequantChannel+0x72>
			cbStartS = 3; 
 800af66:	f04f 0803 	mov.w	r8, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800af6a:	2308      	movs	r3, #8
 800af6c:	9303      	str	r3, [sp, #12]
 800af6e:	e7da      	b.n	800af26 <xmp3fixpt_DequantChannel+0x22>
			cbStartS = 0;
 800af70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800af74:	e7d7      	b.n	800af26 <xmp3fixpt_DequantChannel+0x22>
			cbStartS = 3; 
 800af76:	f04f 0803 	mov.w	r8, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800af7a:	2306      	movs	r3, #6
 800af7c:	9303      	str	r3, [sp, #12]
 800af7e:	e7d2      	b.n	800af26 <xmp3fixpt_DequantChannel+0x22>
		i += nSamps;

		/* update highest non-zero critical band */
		if (nonZero) 
			cbMax[0] = cb;
		gbMask |= nonZero;
 800af80:	431e      	orrs	r6, r3

		if (i >= *nonZeroBound) 
 800af82:	f8d9 3000 	ldr.w	r3, [r9]
	for (cb = 0; cb < cbEndL; cb++) {
 800af86:	4644      	mov	r4, r8
		if (i >= *nonZeroBound) 
 800af88:	42ab      	cmp	r3, r5
 800af8a:	dd26      	ble.n	800afda <xmp3fixpt_DequantChannel+0xd6>
	for (cb = 0; cb < cbEndL; cb++) {
 800af8c:	9b03      	ldr	r3, [sp, #12]
 800af8e:	429c      	cmp	r4, r3
 800af90:	da23      	bge.n	800afda <xmp3fixpt_DequantChannel+0xd6>
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800af92:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 800af96:	f104 0801 	add.w	r8, r4, #1
 800af9a:	f933 7018 	ldrsh.w	r7, [r3, r8, lsl #1]
 800af9e:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 800afa2:	1aff      	subs	r7, r7, r3
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800afa4:	9b02      	ldr	r3, [sp, #8]
 800afa6:	f1c3 01d2 	rsb	r1, r3, #210	; 0xd2
 800afaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afac:	5d1a      	ldrb	r2, [r3, r4]
 800afae:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 800afb2:	b10b      	cbz	r3, 800afb8 <xmp3fixpt_DequantChannel+0xb4>
 800afb4:	4b62      	ldr	r3, [pc, #392]	; (800b140 <xmp3fixpt_DequantChannel+0x23c>)
 800afb6:	5d1b      	ldrb	r3, [r3, r4]
 800afb8:	4413      	add	r3, r2
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800afba:	9a04      	ldr	r2, [sp, #16]
 800afbc:	eb02 0085 	add.w	r0, r2, r5, lsl #2
 800afc0:	9a01      	ldr	r2, [sp, #4]
 800afc2:	fb02 1303 	mla	r3, r2, r3, r1
 800afc6:	463a      	mov	r2, r7
 800afc8:	4601      	mov	r1, r0
 800afca:	f7ff fedb 	bl	800ad84 <DequantBlock>
		i += nSamps;
 800afce:	443d      	add	r5, r7
		if (nonZero) 
 800afd0:	4603      	mov	r3, r0
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d0d4      	beq.n	800af80 <xmp3fixpt_DequantChannel+0x7c>
			cbMax[0] = cb;
 800afd6:	9409      	str	r4, [sp, #36]	; 0x24
 800afd8:	e7d2      	b.n	800af80 <xmp3fixpt_DequantChannel+0x7c>
 800afda:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800afde:	9c07      	ldr	r4, [sp, #28]
			break;
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
 800afe0:	2300      	movs	r3, #0
 800afe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800afe4:	6013      	str	r3, [r2, #0]
	cbi->cbEndL  = cbMax[0];
 800afe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afe8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afea:	614a      	str	r2, [r1, #20]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800afec:	60cb      	str	r3, [r1, #12]
 800afee:	608b      	str	r3, [r1, #8]
 800aff0:	604b      	str	r3, [r1, #4]
	cbi->cbEndSMax = 0;
 800aff2:	610b      	str	r3, [r1, #16]

	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 800aff4:	f1b8 0f0b 	cmp.w	r8, #11
 800aff8:	dd0b      	ble.n	800b012 <xmp3fixpt_DequantChannel+0x10e>
	if (!x)
 800affa:	b12e      	cbz	r6, 800b008 <xmp3fixpt_DequantChannel+0x104>
	numZeros = 0;
 800affc:	4618      	mov	r0, r3
	while (!(x & 0x80000000)) {
 800affe:	2e00      	cmp	r6, #0
 800b000:	db03      	blt.n	800b00a <xmp3fixpt_DequantChannel+0x106>
		numZeros++;
 800b002:	3001      	adds	r0, #1
		x <<= 1;
 800b004:	0076      	lsls	r6, r6, #1
 800b006:	e7fa      	b.n	800affe <xmp3fixpt_DequantChannel+0xfa>
		return (sizeof(int) * 8);
 800b008:	2020      	movs	r0, #32
		return CLZ(gbMask) - 1;
 800b00a:	3801      	subs	r0, #1
	cbi->cbEndSMax = cbMax[0];
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);

	return CLZ(gbMask) - 1;
}
 800b00c:	b00d      	add	sp, #52	; 0x34
 800b00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800b012:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800b016:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b01a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b01e:	4643      	mov	r3, r8
 800b020:	46a8      	mov	r8, r5
 800b022:	f8cd a018 	str.w	sl, [sp, #24]
 800b026:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b02a:	461d      	mov	r5, r3
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800b02c:	e04c      	b.n	800b0c8 <xmp3fixpt_DequantChannel+0x1c4>
			gbMask |= nonZero;
 800b02e:	431e      	orrs	r6, r3
		for (w = 0; w < 3; w++) {
 800b030:	f109 0901 	add.w	r9, r9, #1
 800b034:	f1b9 0f02 	cmp.w	r9, #2
 800b038:	dc26      	bgt.n	800b088 <xmp3fixpt_DequantChannel+0x184>
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 800b03a:	9b02      	ldr	r3, [sp, #8]
 800b03c:	f1c3 03d2 	rsb	r3, r3, #210	; 0xd2
 800b040:	f109 020a 	add.w	r2, r9, #10
 800b044:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800b048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b04c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800b050:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b052:	440a      	add	r2, r1
 800b054:	444a      	add	r2, r9
 800b056:	7dd2      	ldrb	r2, [r2, #23]
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800b058:	fb07 f109 	mul.w	r1, r7, r9
 800b05c:	eb08 0001 	add.w	r0, r8, r1
 800b060:	9c01      	ldr	r4, [sp, #4]
 800b062:	fb04 3302 	mla	r3, r4, r2, r3
 800b066:	463a      	mov	r2, r7
 800b068:	9c03      	ldr	r4, [sp, #12]
 800b06a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b06e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800b072:	f7ff fe87 	bl	800ad84 <DequantBlock>
			if (nonZero)
 800b076:	4603      	mov	r3, r0
 800b078:	2800      	cmp	r0, #0
 800b07a:	d0d8      	beq.n	800b02e <xmp3fixpt_DequantChannel+0x12a>
				cbMax[w] = cb;
 800b07c:	aa0c      	add	r2, sp, #48	; 0x30
 800b07e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800b082:	f842 5c0c 	str.w	r5, [r2, #-12]
 800b086:	e7d2      	b.n	800b02e <xmp3fixpt_DequantChannel+0x12a>
 800b088:	9c03      	ldr	r4, [sp, #12]
		buf = (ARRAY3 *)(sampleBuf + i);
 800b08a:	eb0a 0588 	add.w	r5, sl, r8, lsl #2
		i += 3*nSamps;
 800b08e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800b092:	4498      	add	r8, r3
		for (j = 0; j < nSamps; j++) {
 800b094:	2300      	movs	r3, #0
 800b096:	e010      	b.n	800b0ba <xmp3fixpt_DequantChannel+0x1b6>
			buf[j][0] = workBuf[0*nSamps + j];
 800b098:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800b09c:	008a      	lsls	r2, r1, #2
 800b09e:	18a9      	adds	r1, r5, r2
 800b0a0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800b0a4:	50a8      	str	r0, [r5, r2]
			buf[j][1] = workBuf[1*nSamps + j];
 800b0a6:	19da      	adds	r2, r3, r7
 800b0a8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0ac:	604a      	str	r2, [r1, #4]
			buf[j][2] = workBuf[2*nSamps + j];
 800b0ae:	eb03 0247 	add.w	r2, r3, r7, lsl #1
 800b0b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0b6:	608a      	str	r2, [r1, #8]
		for (j = 0; j < nSamps; j++) {
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	42bb      	cmp	r3, r7
 800b0bc:	dbec      	blt.n	800b098 <xmp3fixpt_DequantChannel+0x194>
		if (i >= *nonZeroBound) 
 800b0be:	9b05      	ldr	r3, [sp, #20]
 800b0c0:	681b      	ldr	r3, [r3, #0]
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800b0c2:	9d04      	ldr	r5, [sp, #16]
		if (i >= *nonZeroBound) 
 800b0c4:	4543      	cmp	r3, r8
 800b0c6:	dd16      	ble.n	800b0f6 <xmp3fixpt_DequantChannel+0x1f2>
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800b0c8:	2d0c      	cmp	r5, #12
 800b0ca:	dc14      	bgt.n	800b0f6 <xmp3fixpt_DequantChannel+0x1f2>
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800b0cc:	9b06      	ldr	r3, [sp, #24]
 800b0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d0:	1c6a      	adds	r2, r5, #1
 800b0d2:	9204      	str	r2, [sp, #16]
 800b0d4:	f105 0215 	add.w	r2, r5, #21
 800b0d8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b0dc:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800b0e0:	f105 0214 	add.w	r2, r5, #20
 800b0e4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800b0e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b0ec:	1aff      	subs	r7, r7, r3
		for (w = 0; w < 3; w++) {
 800b0ee:	f04f 0900 	mov.w	r9, #0
 800b0f2:	9403      	str	r4, [sp, #12]
 800b0f4:	e79e      	b.n	800b034 <xmp3fixpt_DequantChannel+0x130>
	*nonZeroBound = i;
 800b0f6:	9b05      	ldr	r3, [sp, #20]
 800b0f8:	f8c3 8000 	str.w	r8, [r3]
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800b0fc:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b100:	b1a3      	cbz	r3, 800b12c <xmp3fixpt_DequantChannel+0x228>
 800b102:	2302      	movs	r3, #2
 800b104:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b106:	6013      	str	r3, [r2, #0]
	cbi->cbEndS[0] = cbMax[0];
 800b108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b10a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b10c:	605a      	str	r2, [r3, #4]
	cbi->cbEndS[1] = cbMax[1];
 800b10e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b110:	6099      	str	r1, [r3, #8]
	cbi->cbEndS[2] = cbMax[2];
 800b112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b114:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b116:	60c3      	str	r3, [r0, #12]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 800b118:	428a      	cmp	r2, r1
 800b11a:	bfb8      	it	lt
 800b11c:	460a      	movlt	r2, r1
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800b11e:	4293      	cmp	r3, r2
 800b120:	bfb8      	it	lt
 800b122:	4613      	movlt	r3, r2
 800b124:	6103      	str	r3, [r0, #16]
	if (!x)
 800b126:	b14e      	cbz	r6, 800b13c <xmp3fixpt_DequantChannel+0x238>
	numZeros = 0;
 800b128:	2000      	movs	r0, #0
 800b12a:	e003      	b.n	800b134 <xmp3fixpt_DequantChannel+0x230>
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800b12c:	2301      	movs	r3, #1
 800b12e:	e7e9      	b.n	800b104 <xmp3fixpt_DequantChannel+0x200>
		numZeros++;
 800b130:	3001      	adds	r0, #1
		x <<= 1;
 800b132:	0076      	lsls	r6, r6, #1
	while (!(x & 0x80000000)) {
 800b134:	2e00      	cmp	r6, #0
 800b136:	dafb      	bge.n	800b130 <xmp3fixpt_DequantChannel+0x22c>
	return CLZ(gbMask) - 1;
 800b138:	3801      	subs	r0, #1
 800b13a:	e767      	b.n	800b00c <xmp3fixpt_DequantChannel+0x108>
		return (sizeof(int) * 8);
 800b13c:	2020      	movs	r0, #32
 800b13e:	e7fb      	b.n	800b138 <xmp3fixpt_DequantChannel+0x234>
 800b140:	08019118 	.word	0x08019118

0800b144 <DecodeHuffmanPairs>:
 * Notes:       assumes that nVals is an even number
 *              si_huff.bit tests every Huffman codeword in every table (though not
 *                necessarily all linBits outputs for x,y > 15)
 **************************************************************************************/
static int DecodeHuffmanPairs(int *xy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 800b144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b148:	b085      	sub	sp, #20
 800b14a:	9303      	str	r3, [sp, #12]
 800b14c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	int cachedBits, padBits, len, startBits, linBits, maxBits, minBits;
	HuffTabType tabType;
	unsigned short cw, *tBase, *tCurr;
	unsigned int cache;

	if(nVals <= 0) 
 800b14e:	2900      	cmp	r1, #0
 800b150:	f340 81a4 	ble.w	800b49c <DecodeHuffmanPairs+0x358>
 800b154:	4686      	mov	lr, r0
		return 0;

	if (bitsLeft < 0)
 800b156:	2b00      	cmp	r3, #0
 800b158:	f2c0 81a8 	blt.w	800b4ac <DecodeHuffmanPairs+0x368>
		return -1;
	startBits = bitsLeft;

	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800b15c:	4bd0      	ldr	r3, [pc, #832]	; (800b4a0 <DecodeHuffmanPairs+0x35c>)
 800b15e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800b162:	48d0      	ldr	r0, [pc, #832]	; (800b4a4 <DecodeHuffmanPairs+0x360>)
 800b164:	eb00 0344 	add.w	r3, r0, r4, lsl #1
 800b168:	9301      	str	r3, [sp, #4]
	linBits = huffTabLookup[tabIdx].linBits;
 800b16a:	4bcf      	ldr	r3, [pc, #828]	; (800b4a8 <DecodeHuffmanPairs+0x364>)
 800b16c:	f853 a032 	ldr.w	sl, [r3, r2, lsl #3]
	tabType = huffTabLookup[tabIdx].tabType;
 800b170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b174:	f893 b004 	ldrb.w	fp, [r3, #4]
	ASSERT(tabIdx >= 0);
	ASSERT(tabType != invalidTab);

	/* initially fill cache with any partial byte */
	cache = 0;
	cachedBits = (8 - bitOffset) & 0x07;
 800b178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b17a:	425b      	negs	r3, r3
	if (cachedBits)
 800b17c:	f013 0307 	ands.w	r3, r3, #7
 800b180:	d02f      	beq.n	800b1e2 <DecodeHuffmanPairs+0x9e>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800b182:	782e      	ldrb	r6, [r5, #0]
 800b184:	f1c3 0220 	rsb	r2, r3, #32
 800b188:	fa06 f202 	lsl.w	r2, r6, r2
 800b18c:	3501      	adds	r5, #1
	bitsLeft -= cachedBits;
 800b18e:	9e03      	ldr	r6, [sp, #12]
 800b190:	eba6 0c03 	sub.w	ip, r6, r3

	if (tabType == noBits) {
 800b194:	f1bb 0f00 	cmp.w	fp, #0
 800b198:	d032      	beq.n	800b200 <DecodeHuffmanPairs+0xbc>
		for (i = 0; i < nVals; i+=2) {
			xy[i+0] = 0;
			xy[i+1] = 0;
		}
		return 0;
	} else if (tabType == oneShot) {
 800b19a:	f1bb 0f01 	cmp.w	fp, #1
 800b19e:	d031      	beq.n	800b204 <DecodeHuffmanPairs+0xc0>
				nVals -= 2;
			}
		}
		bitsLeft += (cachedBits - padBits);
		return (startBits - bitsLeft);
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 800b1a0:	f1ab 0002 	sub.w	r0, fp, #2
 800b1a4:	b2c0      	uxtb	r0, r0
 800b1a6:	2801      	cmp	r0, #1
 800b1a8:	f200 80a6 	bhi.w	800b2f8 <DecodeHuffmanPairs+0x1b4>
		tCurr = tBase;
 800b1ac:	9e01      	ldr	r6, [sp, #4]
		padBits = 0;
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	9002      	str	r0, [sp, #8]
		while (nVals > 0) {
 800b1b2:	2900      	cmp	r1, #0
 800b1b4:	f340 816b 	ble.w	800b48e <DecodeHuffmanPairs+0x34a>
			/* refill cache - assumes cachedBits <= 16 */
			if (bitsLeft >= 16) {
 800b1b8:	f1bc 0f0f 	cmp.w	ip, #15
 800b1bc:	f340 809f 	ble.w	800b2fe <DecodeHuffmanPairs+0x1ba>
				/* load 2 new bytes into left-justified cache */
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	f810 4b02 	ldrb.w	r4, [r0], #2
 800b1c6:	f1c3 0718 	rsb	r7, r3, #24
 800b1ca:	40bc      	lsls	r4, r7
 800b1cc:	4322      	orrs	r2, r4
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800b1ce:	786c      	ldrb	r4, [r5, #1]
 800b1d0:	f1c3 0510 	rsb	r5, r3, #16
 800b1d4:	40ac      	lsls	r4, r5
 800b1d6:	4322      	orrs	r2, r4
				cachedBits += 16;
 800b1d8:	3310      	adds	r3, #16
				bitsLeft -= 16;
 800b1da:	f1ac 0c10 	sub.w	ip, ip, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800b1de:	4605      	mov	r5, r0
 800b1e0:	e11c      	b.n	800b41c <DecodeHuffmanPairs+0x2d8>
	cache = 0;
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	e7d3      	b.n	800b18e <DecodeHuffmanPairs+0x4a>
			xy[i+0] = 0;
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f84e 2023 	str.w	r2, [lr, r3, lsl #2]
			xy[i+1] = 0;
 800b1ec:	1c58      	adds	r0, r3, #1
 800b1ee:	f84e 2020 	str.w	r2, [lr, r0, lsl #2]
		for (i = 0; i < nVals; i+=2) {
 800b1f2:	3302      	adds	r3, #2
 800b1f4:	428b      	cmp	r3, r1
 800b1f6:	dbf6      	blt.n	800b1e6 <DecodeHuffmanPairs+0xa2>
		return 0;
 800b1f8:	2000      	movs	r0, #0
		return (startBits - bitsLeft);
	}

	/* error in bitstream - trying to access unused Huffman table */
	return -1;
}
 800b1fa:	b005      	add	sp, #20
 800b1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < nVals; i+=2) {
 800b200:	2300      	movs	r3, #0
 800b202:	e7f7      	b.n	800b1f4 <DecodeHuffmanPairs+0xb0>
		maxBits = GetMaxbits(tBase[0]);
 800b204:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 800b208:	f004 040f 	and.w	r4, r4, #15
		padBits = 0;
 800b20c:	2600      	movs	r6, #0
 800b20e:	9f01      	ldr	r7, [sp, #4]
		while (nVals > 0) {
 800b210:	2900      	cmp	r1, #0
 800b212:	dd6b      	ble.n	800b2ec <DecodeHuffmanPairs+0x1a8>
			if (bitsLeft >= 16) {
 800b214:	f1bc 0f0f 	cmp.w	ip, #15
 800b218:	dd11      	ble.n	800b23e <DecodeHuffmanPairs+0xfa>
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b21a:	46a8      	mov	r8, r5
 800b21c:	f818 0b02 	ldrb.w	r0, [r8], #2
 800b220:	f1c3 0918 	rsb	r9, r3, #24
 800b224:	fa00 f009 	lsl.w	r0, r0, r9
 800b228:	4302      	orrs	r2, r0
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800b22a:	7868      	ldrb	r0, [r5, #1]
 800b22c:	f1c3 0510 	rsb	r5, r3, #16
 800b230:	40a8      	lsls	r0, r5
 800b232:	4302      	orrs	r2, r0
				cachedBits += 16;
 800b234:	3310      	adds	r3, #16
				bitsLeft -= 16;
 800b236:	f1ac 0c10 	sub.w	ip, ip, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800b23a:	4645      	mov	r5, r8
 800b23c:	e02d      	b.n	800b29a <DecodeHuffmanPairs+0x156>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800b23e:	eb0c 0003 	add.w	r0, ip, r3
 800b242:	2800      	cmp	r0, #0
 800b244:	f340 8135 	ble.w	800b4b2 <DecodeHuffmanPairs+0x36e>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b248:	f1bc 0f00 	cmp.w	ip, #0
 800b24c:	dd06      	ble.n	800b25c <DecodeHuffmanPairs+0x118>
 800b24e:	782e      	ldrb	r6, [r5, #0]
 800b250:	f1c3 0818 	rsb	r8, r3, #24
 800b254:	fa06 f608 	lsl.w	r6, r6, r8
 800b258:	4332      	orrs	r2, r6
 800b25a:	3501      	adds	r5, #1
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800b25c:	f1bc 0f08 	cmp.w	ip, #8
 800b260:	dd06      	ble.n	800b270 <DecodeHuffmanPairs+0x12c>
 800b262:	782e      	ldrb	r6, [r5, #0]
 800b264:	f1c3 0310 	rsb	r3, r3, #16
 800b268:	fa06 f303 	lsl.w	r3, r6, r3
 800b26c:	431a      	orrs	r2, r3
 800b26e:	3501      	adds	r5, #1
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800b270:	1e46      	subs	r6, r0, #1
 800b272:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b276:	4133      	asrs	r3, r6
 800b278:	401a      	ands	r2, r3
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800b27a:	f100 030b 	add.w	r3, r0, #11
				padBits = 11;
 800b27e:	260b      	movs	r6, #11
				bitsLeft = 0;
 800b280:	f04f 0c00 	mov.w	ip, #0
 800b284:	e009      	b.n	800b29a <DecodeHuffmanPairs+0x156>
				if (cachedBits < padBits)
 800b286:	42b3      	cmp	r3, r6
 800b288:	f2c0 8116 	blt.w	800b4b8 <DecodeHuffmanPairs+0x374>
				*xy++ = x;
 800b28c:	4670      	mov	r0, lr
 800b28e:	f840 9b08 	str.w	r9, [r0], #8
				*xy++ = y;
 800b292:	f8ce 8004 	str.w	r8, [lr, #4]
				nVals -= 2;
 800b296:	3902      	subs	r1, #2
				*xy++ = y;
 800b298:	4686      	mov	lr, r0
			while (nVals > 0 && cachedBits >= 11 ) {
 800b29a:	2900      	cmp	r1, #0
 800b29c:	bfc8      	it	gt
 800b29e:	2b0a      	cmpgt	r3, #10
 800b2a0:	ddb6      	ble.n	800b210 <DecodeHuffmanPairs+0xcc>
				cw = tBase[cache >> (32 - maxBits)];
 800b2a2:	f1c4 0020 	rsb	r0, r4, #32
 800b2a6:	fa22 f000 	lsr.w	r0, r2, r0
 800b2aa:	0040      	lsls	r0, r0, #1
 800b2ac:	3002      	adds	r0, #2
 800b2ae:	5a38      	ldrh	r0, [r7, r0]
				len = GetHLen(cw);
 800b2b0:	ea4f 3810 	mov.w	r8, r0, lsr #12
				cachedBits -= len;
 800b2b4:	eba3 0308 	sub.w	r3, r3, r8
				cache <<= len;
 800b2b8:	fa02 f208 	lsl.w	r2, r2, r8
 800b2bc:	f3c0 1803 	ubfx	r8, r0, #4, #4
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800b2c0:	46c1      	mov	r9, r8
 800b2c2:	f1b8 0f00 	cmp.w	r8, #0
 800b2c6:	d005      	beq.n	800b2d4 <DecodeHuffmanPairs+0x190>
 800b2c8:	f002 4900 	and.w	r9, r2, #2147483648	; 0x80000000
 800b2cc:	ea48 0909 	orr.w	r9, r8, r9
 800b2d0:	0052      	lsls	r2, r2, #1
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	f3c0 2003 	ubfx	r0, r0, #8, #4
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800b2d8:	4680      	mov	r8, r0
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d0d3      	beq.n	800b286 <DecodeHuffmanPairs+0x142>
 800b2de:	f002 4800 	and.w	r8, r2, #2147483648	; 0x80000000
 800b2e2:	ea40 0808 	orr.w	r8, r0, r8
 800b2e6:	0052      	lsls	r2, r2, #1
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	e7cc      	b.n	800b286 <DecodeHuffmanPairs+0x142>
		bitsLeft += (cachedBits - padBits);
 800b2ec:	1b9b      	subs	r3, r3, r6
 800b2ee:	449c      	add	ip, r3
		return (startBits - bitsLeft);
 800b2f0:	9b03      	ldr	r3, [sp, #12]
 800b2f2:	eba3 000c 	sub.w	r0, r3, ip
 800b2f6:	e780      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
	return -1;
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	e77d      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800b2fe:	eb0c 0003 	add.w	r0, ip, r3
 800b302:	2800      	cmp	r0, #0
 800b304:	f340 80db 	ble.w	800b4be <DecodeHuffmanPairs+0x37a>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b308:	f1bc 0f00 	cmp.w	ip, #0
 800b30c:	dd05      	ble.n	800b31a <DecodeHuffmanPairs+0x1d6>
 800b30e:	782c      	ldrb	r4, [r5, #0]
 800b310:	f1c3 0718 	rsb	r7, r3, #24
 800b314:	40bc      	lsls	r4, r7
 800b316:	4322      	orrs	r2, r4
 800b318:	3501      	adds	r5, #1
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800b31a:	f1bc 0f08 	cmp.w	ip, #8
 800b31e:	dd06      	ble.n	800b32e <DecodeHuffmanPairs+0x1ea>
 800b320:	782c      	ldrb	r4, [r5, #0]
 800b322:	f1c3 0310 	rsb	r3, r3, #16
 800b326:	fa04 f303 	lsl.w	r3, r4, r3
 800b32a:	431a      	orrs	r2, r3
 800b32c:	3501      	adds	r5, #1
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800b32e:	1e44      	subs	r4, r0, #1
 800b330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b334:	4123      	asrs	r3, r4
 800b336:	401a      	ands	r2, r3
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800b338:	f100 030b 	add.w	r3, r0, #11
				padBits = 11;
 800b33c:	200b      	movs	r0, #11
 800b33e:	9002      	str	r0, [sp, #8]
				bitsLeft = 0;
 800b340:	f04f 0c00 	mov.w	ip, #0
 800b344:	e06a      	b.n	800b41c <DecodeHuffmanPairs+0x2d8>
					cachedBits -= maxBits;
 800b346:	1b1b      	subs	r3, r3, r4
					cache <<= maxBits;
 800b348:	40a2      	lsls	r2, r4
					tCurr += cw;
 800b34a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
					continue;
 800b34e:	e065      	b.n	800b41c <DecodeHuffmanPairs+0x2d8>
					minBits = linBits + 1 + (y ? 1 : 0);
 800b350:	f10a 0801 	add.w	r8, sl, #1
 800b354:	2800      	cmp	r0, #0
 800b356:	bf18      	it	ne
 800b358:	f108 0801 	addne.w	r8, r8, #1
					if (cachedBits + bitsLeft < minBits)
 800b35c:	eb0c 0403 	add.w	r4, ip, r3
 800b360:	4544      	cmp	r4, r8
 800b362:	da0c      	bge.n	800b37e <DecodeHuffmanPairs+0x23a>
						return -1;
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	e747      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b36a:	782c      	ldrb	r4, [r5, #0]
 800b36c:	f1c3 0918 	rsb	r9, r3, #24
 800b370:	fa04 f409 	lsl.w	r4, r4, r9
 800b374:	4322      	orrs	r2, r4
						cachedBits += 8;
 800b376:	3308      	adds	r3, #8
						bitsLeft -= 8;
 800b378:	f1ac 0c08 	sub.w	ip, ip, #8
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b37c:	3501      	adds	r5, #1
					while (cachedBits < minBits) {
 800b37e:	4543      	cmp	r3, r8
 800b380:	dbf3      	blt.n	800b36a <DecodeHuffmanPairs+0x226>
					if (bitsLeft < 0) {
 800b382:	f1bc 0f00 	cmp.w	ip, #0
 800b386:	db09      	blt.n	800b39c <DecodeHuffmanPairs+0x258>
					x += (int)(cache >> (32 - linBits));
 800b388:	f1ca 0420 	rsb	r4, sl, #32
 800b38c:	fa22 f404 	lsr.w	r4, r2, r4
 800b390:	4426      	add	r6, r4
					cachedBits -= linBits;
 800b392:	eba3 030a 	sub.w	r3, r3, sl
					cache <<= linBits;
 800b396:	fa02 f20a 	lsl.w	r2, r2, sl
 800b39a:	e063      	b.n	800b464 <DecodeHuffmanPairs+0x320>
						cachedBits += bitsLeft;
 800b39c:	4463      	add	r3, ip
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800b39e:	f103 3cff 	add.w	ip, r3, #4294967295
 800b3a2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b3a6:	fa44 f40c 	asr.w	r4, r4, ip
 800b3aa:	4022      	ands	r2, r4
						bitsLeft = 0;
 800b3ac:	f04f 0c00 	mov.w	ip, #0
 800b3b0:	e7ea      	b.n	800b388 <DecodeHuffmanPairs+0x244>
					minBits = linBits + 1;
 800b3b2:	f10a 0801 	add.w	r8, sl, #1
					if (cachedBits + bitsLeft < minBits)
 800b3b6:	eb0c 0403 	add.w	r4, ip, r3
 800b3ba:	4544      	cmp	r4, r8
 800b3bc:	da0b      	bge.n	800b3d6 <DecodeHuffmanPairs+0x292>
						return -1;
 800b3be:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c2:	e71a      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b3c4:	782c      	ldrb	r4, [r5, #0]
 800b3c6:	f1c3 0718 	rsb	r7, r3, #24
 800b3ca:	40bc      	lsls	r4, r7
 800b3cc:	4322      	orrs	r2, r4
						cachedBits += 8;
 800b3ce:	3308      	adds	r3, #8
						bitsLeft -= 8;
 800b3d0:	f1ac 0c08 	sub.w	ip, ip, #8
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b3d4:	3501      	adds	r5, #1
					while (cachedBits < minBits) {
 800b3d6:	4543      	cmp	r3, r8
 800b3d8:	dbf4      	blt.n	800b3c4 <DecodeHuffmanPairs+0x280>
					if (bitsLeft < 0) {
 800b3da:	f1bc 0f00 	cmp.w	ip, #0
 800b3de:	db09      	blt.n	800b3f4 <DecodeHuffmanPairs+0x2b0>
					y += (int)(cache >> (32 - linBits));
 800b3e0:	f1ca 0420 	rsb	r4, sl, #32
 800b3e4:	fa22 f404 	lsr.w	r4, r2, r4
 800b3e8:	4420      	add	r0, r4
					cachedBits -= linBits;
 800b3ea:	eba3 030a 	sub.w	r3, r3, sl
					cache <<= linBits;
 800b3ee:	fa02 f20a 	lsl.w	r2, r2, sl
 800b3f2:	e044      	b.n	800b47e <DecodeHuffmanPairs+0x33a>
						cachedBits += bitsLeft;
 800b3f4:	4463      	add	r3, ip
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800b3f6:	1e5f      	subs	r7, r3, #1
 800b3f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b3fc:	413c      	asrs	r4, r7
 800b3fe:	4022      	ands	r2, r4
						bitsLeft = 0;
 800b400:	f04f 0c00 	mov.w	ip, #0
 800b404:	e7ec      	b.n	800b3e0 <DecodeHuffmanPairs+0x29c>
				if (cachedBits < padBits)
 800b406:	9c02      	ldr	r4, [sp, #8]
 800b408:	42a3      	cmp	r3, r4
 800b40a:	db5b      	blt.n	800b4c4 <DecodeHuffmanPairs+0x380>
				*xy++ = x;
 800b40c:	4674      	mov	r4, lr
 800b40e:	f844 6b08 	str.w	r6, [r4], #8
				*xy++ = y;
 800b412:	f8ce 0004 	str.w	r0, [lr, #4]
				nVals -= 2;
 800b416:	3902      	subs	r1, #2
				tCurr = tBase;
 800b418:	9e01      	ldr	r6, [sp, #4]
				*xy++ = y;
 800b41a:	46a6      	mov	lr, r4
			while (nVals > 0 && cachedBits >= 11 ) {
 800b41c:	2900      	cmp	r1, #0
 800b41e:	bfc8      	it	gt
 800b420:	2b0a      	cmpgt	r3, #10
 800b422:	f77f aec6 	ble.w	800b1b2 <DecodeHuffmanPairs+0x6e>
				maxBits = GetMaxbits(tCurr[0]);
 800b426:	8834      	ldrh	r4, [r6, #0]
 800b428:	f004 040f 	and.w	r4, r4, #15
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 800b42c:	f1c4 0020 	rsb	r0, r4, #32
 800b430:	fa22 f000 	lsr.w	r0, r2, r0
 800b434:	3001      	adds	r0, #1
 800b436:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
				if (!len) {
 800b43a:	0b07      	lsrs	r7, r0, #12
 800b43c:	d083      	beq.n	800b346 <DecodeHuffmanPairs+0x202>
				cachedBits -= len;
 800b43e:	1bdb      	subs	r3, r3, r7
				cache <<= len;
 800b440:	40ba      	lsls	r2, r7
				x = GetCWX(cw);
 800b442:	f3c0 1603 	ubfx	r6, r0, #4, #4
				y = GetCWY(cw);
 800b446:	f3c0 2003 	ubfx	r0, r0, #8, #4
				if (x == 15 && tabType == loopLinbits) {
 800b44a:	f1bb 0f03 	cmp.w	fp, #3
 800b44e:	bf14      	ite	ne
 800b450:	2700      	movne	r7, #0
 800b452:	2701      	moveq	r7, #1
 800b454:	2e0f      	cmp	r6, #15
 800b456:	bf14      	ite	ne
 800b458:	2400      	movne	r4, #0
 800b45a:	f007 0401 	andeq.w	r4, r7, #1
 800b45e:	2c00      	cmp	r4, #0
 800b460:	f47f af76 	bne.w	800b350 <DecodeHuffmanPairs+0x20c>
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800b464:	b126      	cbz	r6, 800b470 <DecodeHuffmanPairs+0x32c>
 800b466:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800b46a:	4326      	orrs	r6, r4
 800b46c:	0052      	lsls	r2, r2, #1
 800b46e:	3b01      	subs	r3, #1
				if (y == 15 && tabType == loopLinbits) {
 800b470:	280f      	cmp	r0, #15
 800b472:	bf14      	ite	ne
 800b474:	2700      	movne	r7, #0
 800b476:	f007 0701 	andeq.w	r7, r7, #1
 800b47a:	2f00      	cmp	r7, #0
 800b47c:	d199      	bne.n	800b3b2 <DecodeHuffmanPairs+0x26e>
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800b47e:	2800      	cmp	r0, #0
 800b480:	d0c1      	beq.n	800b406 <DecodeHuffmanPairs+0x2c2>
 800b482:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800b486:	4320      	orrs	r0, r4
 800b488:	0052      	lsls	r2, r2, #1
 800b48a:	3b01      	subs	r3, #1
 800b48c:	e7bb      	b.n	800b406 <DecodeHuffmanPairs+0x2c2>
		bitsLeft += (cachedBits - padBits);
 800b48e:	9a02      	ldr	r2, [sp, #8]
 800b490:	1a9b      	subs	r3, r3, r2
 800b492:	449c      	add	ip, r3
		return (startBits - bitsLeft);
 800b494:	9b03      	ldr	r3, [sp, #12]
 800b496:	eba3 000c 	sub.w	r0, r3, ip
 800b49a:	e6ae      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
		return 0;
 800b49c:	2000      	movs	r0, #0
 800b49e:	e6ac      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
 800b4a0:	08019230 	.word	0x08019230
 800b4a4:	080192b0 	.word	0x080192b0
 800b4a8:	08019130 	.word	0x08019130
		return -1;
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	e6a3      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800b4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b6:	e6a0      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
					return -1;
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4bc:	e69d      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800b4be:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c2:	e69a      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
					return -1;
 800b4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c8:	e697      	b.n	800b1fa <DecodeHuffmanPairs+0xb6>
 800b4ca:	bf00      	nop

0800b4cc <DecodeHuffmanQuads>:
 *                of the quad word after which all samples are 0)
 * 
 * Notes:        si_huff.bit tests every vwxy output in both quad tables
 **************************************************************************************/
static int DecodeHuffmanQuads(int *vwxy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 800b4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	9101      	str	r1, [sp, #4]
	int i, v, w, x, y;
	int len, maxBits, cachedBits, padBits;
	unsigned int cache;
	unsigned char cw, *tBase;

	if (bitsLeft <= 0)
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f340 809f 	ble.w	800b618 <DecodeHuffmanQuads+0x14c>
		return 0;

	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 800b4da:	4952      	ldr	r1, [pc, #328]	; (800b624 <DecodeHuffmanQuads+0x158>)
 800b4dc:	f851 8022 	ldr.w	r8, [r1, r2, lsl #2]
	maxBits = quadTabMaxBits[tabIdx];
 800b4e0:	4951      	ldr	r1, [pc, #324]	; (800b628 <DecodeHuffmanQuads+0x15c>)
 800b4e2:	f851 9022 	ldr.w	r9, [r1, r2, lsl #2]

	/* initially fill cache with any partial byte */
	cache = 0;
	cachedBits = (8 - bitOffset) & 0x07;
 800b4e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b4e8:	4249      	negs	r1, r1
	if (cachedBits)
 800b4ea:	f011 0107 	ands.w	r1, r1, #7
 800b4ee:	d009      	beq.n	800b504 <DecodeHuffmanQuads+0x38>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800b4f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4f2:	7814      	ldrb	r4, [r2, #0]
 800b4f4:	f1c1 0220 	rsb	r2, r1, #32
 800b4f8:	fa04 f202 	lsl.w	r2, r4, r2
 800b4fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b4fe:	3401      	adds	r4, #1
 800b500:	940c      	str	r4, [sp, #48]	; 0x30
 800b502:	e000      	b.n	800b506 <DecodeHuffmanQuads+0x3a>
	cache = 0;
 800b504:	2200      	movs	r2, #0
	bitsLeft -= cachedBits;
 800b506:	eba3 0a01 	sub.w	sl, r3, r1

	i = padBits = 0;
 800b50a:	f04f 0e00 	mov.w	lr, #0
 800b50e:	4677      	mov	r7, lr
	while (i < (nVals - 3)) {
 800b510:	9b01      	ldr	r3, [sp, #4]
 800b512:	f1a3 0c03 	sub.w	ip, r3, #3
 800b516:	45bc      	cmp	ip, r7
 800b518:	dd7f      	ble.n	800b61a <DecodeHuffmanQuads+0x14e>
		/* refill cache - assumes cachedBits <= 16 */
		if (bitsLeft >= 16) {
 800b51a:	f1ba 0f0f 	cmp.w	sl, #15
 800b51e:	dd11      	ble.n	800b544 <DecodeHuffmanQuads+0x78>
			/* load 2 new bytes into left-justified cache */
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b520:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b522:	f814 3b02 	ldrb.w	r3, [r4], #2
 800b526:	f1c1 0518 	rsb	r5, r1, #24
 800b52a:	40ab      	lsls	r3, r5
 800b52c:	431a      	orrs	r2, r3
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800b52e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b530:	785b      	ldrb	r3, [r3, #1]
 800b532:	f1c1 0510 	rsb	r5, r1, #16
 800b536:	40ab      	lsls	r3, r5
 800b538:	431a      	orrs	r2, r3
			cachedBits += 16;
 800b53a:	3110      	adds	r1, #16
			bitsLeft -= 16;
 800b53c:	f1aa 0a10 	sub.w	sl, sl, #16
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800b540:	940c      	str	r4, [sp, #48]	; 0x30
 800b542:	e031      	b.n	800b5a8 <DecodeHuffmanQuads+0xdc>
		} else {
			/* last time through, pad cache with zeros and drain cache */
			if (cachedBits + bitsLeft <= 0) return i;
 800b544:	eb0a 0301 	add.w	r3, sl, r1
 800b548:	2b00      	cmp	r3, #0
 800b54a:	dd66      	ble.n	800b61a <DecodeHuffmanQuads+0x14e>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800b54c:	f1ba 0f00 	cmp.w	sl, #0
 800b550:	dd08      	ble.n	800b564 <DecodeHuffmanQuads+0x98>
 800b552:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b554:	7824      	ldrb	r4, [r4, #0]
 800b556:	f1c1 0518 	rsb	r5, r1, #24
 800b55a:	40ac      	lsls	r4, r5
 800b55c:	4322      	orrs	r2, r4
 800b55e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b560:	3401      	adds	r4, #1
 800b562:	940c      	str	r4, [sp, #48]	; 0x30
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800b564:	f1ba 0f08 	cmp.w	sl, #8
 800b568:	dd09      	ble.n	800b57e <DecodeHuffmanQuads+0xb2>
 800b56a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b56c:	7824      	ldrb	r4, [r4, #0]
 800b56e:	f1c1 0110 	rsb	r1, r1, #16
 800b572:	fa04 f101 	lsl.w	r1, r4, r1
 800b576:	430a      	orrs	r2, r1
 800b578:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b57a:	3101      	adds	r1, #1
 800b57c:	910c      	str	r1, [sp, #48]	; 0x30
			cachedBits += bitsLeft;
			bitsLeft = 0;

			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800b57e:	1e5c      	subs	r4, r3, #1
 800b580:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b584:	4121      	asrs	r1, r4
 800b586:	400a      	ands	r2, r1
			padBits = 10;
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800b588:	f103 010a 	add.w	r1, r3, #10
			padBits = 10;
 800b58c:	f04f 0e0a 	mov.w	lr, #10
			bitsLeft = 0;
 800b590:	f04f 0a00 	mov.w	sl, #0
 800b594:	e008      	b.n	800b5a8 <DecodeHuffmanQuads+0xdc>
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}

			/* ran out of bits - okay (means we're done) */
			if (cachedBits < padBits)
 800b596:	4571      	cmp	r1, lr
 800b598:	db3f      	blt.n	800b61a <DecodeHuffmanQuads+0x14e>
				return i;

			*vwxy++ = v;
 800b59a:	6006      	str	r6, [r0, #0]
			*vwxy++ = w;
 800b59c:	6045      	str	r5, [r0, #4]
			*vwxy++ = x;
 800b59e:	6084      	str	r4, [r0, #8]
			*vwxy++ = y;
 800b5a0:	f8c0 b00c 	str.w	fp, [r0, #12]
			i += 4;
 800b5a4:	3704      	adds	r7, #4
			*vwxy++ = y;
 800b5a6:	3010      	adds	r0, #16
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800b5a8:	45bc      	cmp	ip, r7
 800b5aa:	ddb1      	ble.n	800b510 <DecodeHuffmanQuads+0x44>
 800b5ac:	2909      	cmp	r1, #9
 800b5ae:	ddaf      	ble.n	800b510 <DecodeHuffmanQuads+0x44>
			cw = tBase[cache >> (32 - maxBits)];
 800b5b0:	f1c9 0320 	rsb	r3, r9, #32
 800b5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5b8:	4443      	add	r3, r8
 800b5ba:	4c1c      	ldr	r4, [pc, #112]	; (800b62c <DecodeHuffmanQuads+0x160>)
 800b5bc:	5d1b      	ldrb	r3, [r3, r4]
			len = GetHLenQ(cw);
 800b5be:	091c      	lsrs	r4, r3, #4
			cachedBits -= len;
 800b5c0:	1b09      	subs	r1, r1, r4
			cache <<= len;
 800b5c2:	40a2      	lsls	r2, r4
 800b5c4:	f3c3 04c0 	ubfx	r4, r3, #3, #1
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800b5c8:	4626      	mov	r6, r4
 800b5ca:	b124      	cbz	r4, 800b5d6 <DecodeHuffmanQuads+0x10a>
 800b5cc:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800b5d0:	4326      	orrs	r6, r4
 800b5d2:	0052      	lsls	r2, r2, #1
 800b5d4:	3901      	subs	r1, #1
 800b5d6:	f3c3 0480 	ubfx	r4, r3, #2, #1
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 800b5da:	4625      	mov	r5, r4
 800b5dc:	b124      	cbz	r4, 800b5e8 <DecodeHuffmanQuads+0x11c>
 800b5de:	f002 4500 	and.w	r5, r2, #2147483648	; 0x80000000
 800b5e2:	4325      	orrs	r5, r4
 800b5e4:	0052      	lsls	r2, r2, #1
 800b5e6:	3901      	subs	r1, #1
 800b5e8:	f3c3 0b40 	ubfx	fp, r3, #1, #1
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800b5ec:	465c      	mov	r4, fp
 800b5ee:	f1bb 0f00 	cmp.w	fp, #0
 800b5f2:	d005      	beq.n	800b600 <DecodeHuffmanQuads+0x134>
 800b5f4:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800b5f8:	ea4b 0404 	orr.w	r4, fp, r4
 800b5fc:	0052      	lsls	r2, r2, #1
 800b5fe:	3901      	subs	r1, #1
 800b600:	f003 0301 	and.w	r3, r3, #1
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800b604:	469b      	mov	fp, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d0c5      	beq.n	800b596 <DecodeHuffmanQuads+0xca>
 800b60a:	f002 4b00 	and.w	fp, r2, #2147483648	; 0x80000000
 800b60e:	ea43 0b0b 	orr.w	fp, r3, fp
 800b612:	0052      	lsls	r2, r2, #1
 800b614:	3901      	subs	r1, #1
 800b616:	e7be      	b.n	800b596 <DecodeHuffmanQuads+0xca>
		return 0;
 800b618:	2700      	movs	r7, #0
		}
	}

	/* decoded max number of quad values */
	return i;
}
 800b61a:	4638      	mov	r0, r7
 800b61c:	b003      	add	sp, #12
 800b61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b622:	bf00      	nop
 800b624:	0801b3dc 	.word	0x0801b3dc
 800b628:	0801b3d4 	.word	0x0801b3d4
 800b62c:	0801b3e4 	.word	0x0801b3e4

0800b630 <xmp3fixpt_DecodeHuffman>:
 *                byte located at buf + offset)
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 800b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	b08b      	sub	sp, #44	; 0x2c
 800b636:	9104      	str	r1, [sp, #16]
 800b638:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b63a:	9c15      	ldr	r4, [sp, #84]	; 0x54
	SideInfoSub *sis;
	ScaleFactorInfo *sfi;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS) {
 800b63c:	2800      	cmp	r0, #0
 800b63e:	f000 8125 	beq.w	800b88c <xmp3fixpt_DecodeHuffman+0x25c>
 800b642:	4691      	mov	r9, r2
 800b644:	461e      	mov	r6, r3
 800b646:	6802      	ldr	r2, [r0, #0]
 800b648:	2a00      	cmp	r2, #0
 800b64a:	f000 8122 	beq.w	800b892 <xmp3fixpt_DecodeHuffman+0x262>
 800b64e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b652:	f1b8 0f00 	cmp.w	r8, #0
 800b656:	f000 811f 	beq.w	800b898 <xmp3fixpt_DecodeHuffman+0x268>
 800b65a:	6881      	ldr	r1, [r0, #8]
 800b65c:	2900      	cmp	r1, #0
 800b65e:	f000 811e 	beq.w	800b89e <xmp3fixpt_DecodeHuffman+0x26e>
 800b662:	68c7      	ldr	r7, [r0, #12]
 800b664:	2f00      	cmp	r7, #0
 800b666:	f000 811d 	beq.w	800b8a4 <xmp3fixpt_DecodeHuffman+0x274>
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
	sis = &si->sis[gr][ch];
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);

	if (huffBlockBits < 0) {
 800b66a:	2e00      	cmp	r6, #0
 800b66c:	f2c0 811d 	blt.w	800b8aa <xmp3fixpt_DecodeHuffman+0x27a>
		i = 1;
		return -1;
	}

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800b670:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b674:	00cb      	lsls	r3, r1, #3
 800b676:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800b67a:	0101      	lsls	r1, r0, #4
 800b67c:	440b      	add	r3, r1
 800b67e:	4443      	add	r3, r8
 800b680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b682:	b153      	cbz	r3, 800b69a <xmp3fixpt_DecodeHuffman+0x6a>
 800b684:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b688:	00cb      	lsls	r3, r1, #3
 800b68a:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800b68e:	0101      	lsls	r1, r0, #4
 800b690:	440b      	add	r3, r1
 800b692:	4443      	add	r3, r8
 800b694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b696:	2b02      	cmp	r3, #2
 800b698:	d078      	beq.n	800b78c <xmp3fixpt_DecodeHuffman+0x15c>
				r1Start = fh->sfBand->l[6] + 2*w;
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800b69a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800b69c:	00e3      	lsls	r3, r4, #3
 800b69e:	4423      	add	r3, r4
 800b6a0:	00d9      	lsls	r1, r3, #3
 800b6a2:	00eb      	lsls	r3, r5, #3
 800b6a4:	442b      	add	r3, r5
 800b6a6:	011a      	lsls	r2, r3, #4
 800b6a8:	4411      	add	r1, r2
 800b6aa:	4441      	add	r1, r8
 800b6ac:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800b6b4:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800b6b6:	440b      	add	r3, r1
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800b6be:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b6c2:	00c3      	lsls	r3, r0, #3
 800b6c4:	eb05 0cc5 	add.w	ip, r5, r5, lsl #3
 800b6c8:	ea4f 100c 	mov.w	r0, ip, lsl #4
 800b6cc:	4403      	add	r3, r0
 800b6ce:	4443      	add	r3, r8
 800b6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800b6d8:	bfa8      	it	ge
 800b6da:	f44f 7310 	movge.w	r3, #576	; 0x240
 800b6de:	469b      	mov	fp, r3
 800b6e0:	9309      	str	r3, [sp, #36]	; 0x24
	rEnd[2] = MIN(r2Start, rEnd[3]);
 800b6e2:	4299      	cmp	r1, r3
 800b6e4:	bfa8      	it	ge
 800b6e6:	4619      	movge	r1, r3
 800b6e8:	9108      	str	r1, [sp, #32]
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	bfa8      	it	ge
 800b6ee:	461a      	movge	r2, r3
 800b6f0:	9207      	str	r2, [sp, #28]
	rEnd[0] = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	9306      	str	r3, [sp, #24]

	/* rounds up to first all-zero pair (we don't check last pair for (x,y) == (non-zero, zero)) */
	hi->nonZeroBound[ch] = rEnd[3];
 800b6f6:	f504 6290 	add.w	r2, r4, #1152	; 0x480
 800b6fa:	f847 b022 	str.w	fp, [r7, r2, lsl #2]

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
	for (i = 0; i < 3; i++) {
 800b6fe:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b702:	9703      	str	r7, [sp, #12]
 800b704:	f8cd b014 	str.w	fp, [sp, #20]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	f300 8082 	bgt.w	800b812 <xmp3fixpt_DecodeHuffman+0x1e2>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800b70e:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 800b712:	eb0e 0204 	add.w	r2, lr, r4
 800b716:	0210      	lsls	r0, r2, #8
 800b718:	9a03      	ldr	r2, [sp, #12]
 800b71a:	4410      	add	r0, r2
 800b71c:	aa0a      	add	r2, sp, #40	; 0x28
 800b71e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b722:	f852 cc10 	ldr.w	ip, [r2, #-16]
 800b726:	1c5f      	adds	r7, r3, #1
 800b728:	aa0a      	add	r2, sp, #40	; 0x28
 800b72a:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800b72e:	f852 1c10 	ldr.w	r1, [r2, #-16]
 800b732:	44a6      	add	lr, r4
 800b734:	ea4f 024e 	mov.w	r2, lr, lsl #1
 800b738:	eb05 0bc5 	add.w	fp, r5, r5, lsl #3
 800b73c:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 800b740:	4472      	add	r2, lr
 800b742:	4413      	add	r3, r2
 800b744:	3310      	adds	r3, #16
 800b746:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	f8d9 3000 	ldr.w	r3, [r9]
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	f8cd a000 	str.w	sl, [sp]
 800b756:	4633      	mov	r3, r6
 800b758:	eba1 010c 	sub.w	r1, r1, ip
 800b75c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800b760:	f7ff fcf0 	bl	800b144 <DecodeHuffmanPairs>
		if (bitsUsed < 0 || bitsUsed > bitsLeft) {
 800b764:	4286      	cmp	r6, r0
 800b766:	bfac      	ite	ge
 800b768:	2300      	movge	r3, #0
 800b76a:	2301      	movlt	r3, #1
 800b76c:	ea53 73d0 	orrs.w	r3, r3, r0, lsr #31
 800b770:	f040 809e 	bne.w	800b8b0 <xmp3fixpt_DecodeHuffman+0x280>
			i = 1;
			return -1;
		}

		/* update bitstream position */
		buf += (bitsUsed + *bitOffset) >> 3;
 800b774:	f8d9 3000 	ldr.w	r3, [r9]
 800b778:	4403      	add	r3, r0
 800b77a:	eb0a 0ae3 	add.w	sl, sl, r3, asr #3
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800b77e:	f003 0307 	and.w	r3, r3, #7
 800b782:	f8c9 3000 	str.w	r3, [r9]
		bitsLeft -= bitsUsed;
 800b786:	1a36      	subs	r6, r6, r0
	for (i = 0; i < 3; i++) {
 800b788:	463b      	mov	r3, r7
 800b78a:	e7bd      	b.n	800b708 <xmp3fixpt_DecodeHuffman+0xd8>
		if (sis->mixedBlock == 0) {
 800b78c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b790:	00cb      	lsls	r3, r1, #3
 800b792:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800b796:	0101      	lsls	r1, r0, #4
 800b798:	440b      	add	r3, r1
 800b79a:	4443      	add	r3, r8
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	b9cb      	cbnz	r3, 800b7d4 <xmp3fixpt_DecodeHuffman+0x1a4>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800b7a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b7a2:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b7a6:	00cb      	lsls	r3, r1, #3
 800b7a8:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800b7ac:	0101      	lsls	r1, r0, #4
 800b7ae:	440b      	add	r3, r1
 800b7b0:	4443      	add	r3, r8
 800b7b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b7b4:	3101      	adds	r1, #1
 800b7b6:	4b40      	ldr	r3, [pc, #256]	; (800b8b8 <xmp3fixpt_DecodeHuffman+0x288>)
 800b7b8:	fb83 0301 	smull	r0, r3, r3, r1
 800b7bc:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 800b7c0:	3314      	adds	r3, #20
 800b7c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800b7c6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800b7ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800b7ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7d2:	e774      	b.n	800b6be <xmp3fixpt_DecodeHuffman+0x8e>
			if (fh->ver == MPEG1) {
 800b7d4:	7813      	ldrb	r3, [r2, #0]
 800b7d6:	b97b      	cbnz	r3, 800b7f8 <xmp3fixpt_DecodeHuffman+0x1c8>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800b7d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b7da:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b7de:	00d3      	lsls	r3, r2, #3
 800b7e0:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800b7e4:	0102      	lsls	r2, r0, #4
 800b7e6:	4413      	add	r3, r2
 800b7e8:	4443      	add	r3, r8
 800b7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800b7f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7f6:	e762      	b.n	800b6be <xmp3fixpt_DecodeHuffman+0x8e>
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 800b7f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b7fa:	f9b2 3036 	ldrsh.w	r3, [r2, #54]	; 0x36
 800b7fe:	f9b2 1034 	ldrsh.w	r1, [r2, #52]	; 0x34
 800b802:	1a5b      	subs	r3, r3, r1
				r1Start = fh->sfBand->l[6] + 2*w;
 800b804:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800b808:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800b80c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b810:	e755      	b.n	800b6be <xmp3fixpt_DecodeHuffman+0x8e>
 800b812:	9f03      	ldr	r7, [sp, #12]
 800b814:	f8dd b014 	ldr.w	fp, [sp, #20]
	}

	/* decode Huffman quads (if any) */
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800b818:	00e3      	lsls	r3, r4, #3
 800b81a:	191a      	adds	r2, r3, r4
 800b81c:	0210      	lsls	r0, r2, #8
 800b81e:	4438      	add	r0, r7
 800b820:	4423      	add	r3, r4
 800b822:	00da      	lsls	r2, r3, #3
 800b824:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800b828:	012b      	lsls	r3, r5, #4
 800b82a:	441a      	add	r2, r3
 800b82c:	4490      	add	r8, r2
 800b82e:	f8d8 206c 	ldr.w	r2, [r8, #108]	; 0x6c
 800b832:	f8d9 3000 	ldr.w	r3, [r9]
 800b836:	9301      	str	r3, [sp, #4]
 800b838:	f8cd a000 	str.w	sl, [sp]
 800b83c:	4633      	mov	r3, r6
 800b83e:	f5cb 7110 	rsb	r1, fp, #576	; 0x240
 800b842:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800b846:	f7ff fe41 	bl	800b4cc <DecodeHuffmanQuads>
 800b84a:	f504 6290 	add.w	r2, r4, #1152	; 0x480
 800b84e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 800b852:	4418      	add	r0, r3
 800b854:	f847 0022 	str.w	r0, [r7, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800b858:	e007      	b.n	800b86a <xmp3fixpt_DecodeHuffman+0x23a>
		hi->huffDecBuf[ch][i] = 0;
 800b85a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b85e:	0193      	lsls	r3, r2, #6
 800b860:	4403      	add	r3, r0
 800b862:	2200      	movs	r2, #0
 800b864:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800b868:	3001      	adds	r0, #1
 800b86a:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 800b86e:	dbf4      	blt.n	800b85a <xmp3fixpt_DecodeHuffman+0x22a>
	
	/* If bits used for 576 samples < huffBlockBits, then the extras are considered
	 *  to be stuffing bits (throw away, but need to return correct bitstream position) 
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
 800b870:	f8d9 3000 	ldr.w	r3, [r9]
 800b874:	441e      	add	r6, r3
 800b876:	eb0a 00e6 	add.w	r0, sl, r6, asr #3
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 800b87a:	f006 0607 	and.w	r6, r6, #7
 800b87e:	f8c9 6000 	str.w	r6, [r9]
	
	return (buf - startBuf);
 800b882:	9b04      	ldr	r3, [sp, #16]
 800b884:	1ac0      	subs	r0, r0, r3
}
 800b886:	b00b      	add	sp, #44	; 0x2c
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295
 800b890:	e7f9      	b.n	800b886 <xmp3fixpt_DecodeHuffman+0x256>
 800b892:	f04f 30ff 	mov.w	r0, #4294967295
 800b896:	e7f6      	b.n	800b886 <xmp3fixpt_DecodeHuffman+0x256>
 800b898:	f04f 30ff 	mov.w	r0, #4294967295
 800b89c:	e7f3      	b.n	800b886 <xmp3fixpt_DecodeHuffman+0x256>
 800b89e:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a2:	e7f0      	b.n	800b886 <xmp3fixpt_DecodeHuffman+0x256>
 800b8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a8:	e7ed      	b.n	800b886 <xmp3fixpt_DecodeHuffman+0x256>
		return -1;
 800b8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ae:	e7ea      	b.n	800b886 <xmp3fixpt_DecodeHuffman+0x256>
			return -1;
 800b8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b4:	e7e7      	b.n	800b886 <xmp3fixpt_DecodeHuffman+0x256>
 800b8b6:	bf00      	nop
 800b8b8:	55555556 	.word	0x55555556

0800b8bc <AntiAlias>:
{
	int k, a0, b0, c0, c1;
	const int *c;

	/* csa = Q31 */
	for (k = nBfly; k > 0; k--) {
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	f340 80cf 	ble.w	800ba60 <AntiAlias+0x1a4>
{
 800b8c2:	b5f0      	push	{r4, r5, r6, r7, lr}
		c = csa[0];
		x += 18;
 800b8c4:	3048      	adds	r0, #72	; 0x48

		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800b8c6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b8ca:	4b66      	ldr	r3, [pc, #408]	; (800ba64 <AntiAlias+0x1a8>)
 800b8cc:	681e      	ldr	r6, [r3, #0]
 800b8ce:	f8d0 c000 	ldr.w	ip, [r0]
 800b8d2:	685d      	ldr	r5, [r3, #4]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800b8d4:	463a      	mov	r2, r7
 800b8d6:	fb86 4202 	smull	r4, r2, r6, r2
 800b8da:	4664      	mov	r4, ip
 800b8dc:	fb85 e404 	smull	lr, r4, r5, r4
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800b8e0:	1b12      	subs	r2, r2, r4
 800b8e2:	0052      	lsls	r2, r2, #1
 800b8e4:	f840 2c04 	str.w	r2, [r0, #-4]
 800b8e8:	4664      	mov	r4, ip
 800b8ea:	fb86 2404 	smull	r2, r4, r6, r4
 800b8ee:	463a      	mov	r2, r7
 800b8f0:	fb85 6202 	smull	r6, r2, r5, r2
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800b8f4:	4422      	add	r2, r4
 800b8f6:	0052      	lsls	r2, r2, #1
 800b8f8:	6002      	str	r2, [r0, #0]

		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800b8fa:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800b8fe:	689e      	ldr	r6, [r3, #8]
 800b900:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b904:	68dd      	ldr	r5, [r3, #12]
 800b906:	463a      	mov	r2, r7
 800b908:	fb86 4202 	smull	r4, r2, r6, r2
 800b90c:	4664      	mov	r4, ip
 800b90e:	fb85 e404 	smull	lr, r4, r5, r4
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800b912:	1b12      	subs	r2, r2, r4
 800b914:	0052      	lsls	r2, r2, #1
 800b916:	f840 2c08 	str.w	r2, [r0, #-8]
 800b91a:	4664      	mov	r4, ip
 800b91c:	fb86 2404 	smull	r2, r4, r6, r4
 800b920:	463a      	mov	r2, r7
 800b922:	fb85 6202 	smull	r6, r2, r5, r2
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800b926:	4422      	add	r2, r4
 800b928:	0052      	lsls	r2, r2, #1
 800b92a:	6042      	str	r2, [r0, #4]
		
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800b92c:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 800b930:	691e      	ldr	r6, [r3, #16]
 800b932:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800b936:	695d      	ldr	r5, [r3, #20]
 800b938:	463a      	mov	r2, r7
 800b93a:	fb86 4202 	smull	r4, r2, r6, r2
 800b93e:	4664      	mov	r4, ip
 800b940:	fb85 e404 	smull	lr, r4, r5, r4
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800b944:	1b12      	subs	r2, r2, r4
 800b946:	0052      	lsls	r2, r2, #1
 800b948:	f840 2c0c 	str.w	r2, [r0, #-12]
 800b94c:	4664      	mov	r4, ip
 800b94e:	fb86 2404 	smull	r2, r4, r6, r4
 800b952:	463a      	mov	r2, r7
 800b954:	fb85 6202 	smull	r6, r2, r5, r2
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800b958:	4422      	add	r2, r4
 800b95a:	0052      	lsls	r2, r2, #1
 800b95c:	6082      	str	r2, [r0, #8]

		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800b95e:	f850 7c10 	ldr.w	r7, [r0, #-16]
 800b962:	699e      	ldr	r6, [r3, #24]
 800b964:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800b968:	69dd      	ldr	r5, [r3, #28]
 800b96a:	463a      	mov	r2, r7
 800b96c:	fb86 4202 	smull	r4, r2, r6, r2
 800b970:	4664      	mov	r4, ip
 800b972:	fb85 e404 	smull	lr, r4, r5, r4
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800b976:	1b12      	subs	r2, r2, r4
 800b978:	0052      	lsls	r2, r2, #1
 800b97a:	f840 2c10 	str.w	r2, [r0, #-16]
 800b97e:	4664      	mov	r4, ip
 800b980:	fb86 2404 	smull	r2, r4, r6, r4
 800b984:	463a      	mov	r2, r7
 800b986:	fb85 6202 	smull	r6, r2, r5, r2
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800b98a:	4422      	add	r2, r4
 800b98c:	0052      	lsls	r2, r2, #1
 800b98e:	60c2      	str	r2, [r0, #12]

		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800b990:	f850 7c14 	ldr.w	r7, [r0, #-20]
 800b994:	6a1e      	ldr	r6, [r3, #32]
 800b996:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800b99a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800b99c:	463a      	mov	r2, r7
 800b99e:	fb86 4202 	smull	r4, r2, r6, r2
 800b9a2:	4664      	mov	r4, ip
 800b9a4:	fb85 e404 	smull	lr, r4, r5, r4
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800b9a8:	1b12      	subs	r2, r2, r4
 800b9aa:	0052      	lsls	r2, r2, #1
 800b9ac:	f840 2c14 	str.w	r2, [r0, #-20]
 800b9b0:	4664      	mov	r4, ip
 800b9b2:	fb86 2404 	smull	r2, r4, r6, r4
 800b9b6:	463a      	mov	r2, r7
 800b9b8:	fb85 6202 	smull	r6, r2, r5, r2
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800b9bc:	4422      	add	r2, r4
 800b9be:	0052      	lsls	r2, r2, #1
 800b9c0:	6102      	str	r2, [r0, #16]

		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800b9c2:	f850 7c18 	ldr.w	r7, [r0, #-24]
 800b9c6:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800b9c8:	f8d0 c014 	ldr.w	ip, [r0, #20]
 800b9cc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800b9ce:	463a      	mov	r2, r7
 800b9d0:	fb86 4202 	smull	r4, r2, r6, r2
 800b9d4:	4664      	mov	r4, ip
 800b9d6:	fb85 e404 	smull	lr, r4, r5, r4
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800b9da:	1b12      	subs	r2, r2, r4
 800b9dc:	0052      	lsls	r2, r2, #1
 800b9de:	f840 2c18 	str.w	r2, [r0, #-24]
 800b9e2:	4664      	mov	r4, ip
 800b9e4:	fb86 2404 	smull	r2, r4, r6, r4
 800b9e8:	463a      	mov	r2, r7
 800b9ea:	fb85 6202 	smull	r6, r2, r5, r2
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800b9ee:	4422      	add	r2, r4
 800b9f0:	0052      	lsls	r2, r2, #1
 800b9f2:	6142      	str	r2, [r0, #20]

		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800b9f4:	f850 7c1c 	ldr.w	r7, [r0, #-28]
 800b9f8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800b9fa:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800b9fe:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800ba00:	463a      	mov	r2, r7
 800ba02:	fb86 4202 	smull	r4, r2, r6, r2
 800ba06:	4664      	mov	r4, ip
 800ba08:	fb85 e404 	smull	lr, r4, r5, r4
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800ba0c:	1b12      	subs	r2, r2, r4
 800ba0e:	0052      	lsls	r2, r2, #1
 800ba10:	f840 2c1c 	str.w	r2, [r0, #-28]
 800ba14:	4664      	mov	r4, ip
 800ba16:	fb86 2404 	smull	r2, r4, r6, r4
 800ba1a:	463a      	mov	r2, r7
 800ba1c:	fb85 6202 	smull	r6, r2, r5, r2
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800ba20:	4422      	add	r2, r4
 800ba22:	0052      	lsls	r2, r2, #1
 800ba24:	6182      	str	r2, [r0, #24]

		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800ba26:	f850 6c20 	ldr.w	r6, [r0, #-32]
 800ba2a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800ba2c:	69c7      	ldr	r7, [r0, #28]
 800ba2e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800ba30:	4633      	mov	r3, r6
 800ba32:	fb85 2303 	smull	r2, r3, r5, r3
 800ba36:	463a      	mov	r2, r7
 800ba38:	fb84 c202 	smull	ip, r2, r4, r2
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800ba3c:	1a9b      	subs	r3, r3, r2
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	f840 3c20 	str.w	r3, [r0, #-32]
 800ba44:	463a      	mov	r2, r7
 800ba46:	fb85 3202 	smull	r3, r2, r5, r2
 800ba4a:	4633      	mov	r3, r6
 800ba4c:	fb84 5303 	smull	r5, r3, r4, r3
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800ba50:	4413      	add	r3, r2
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	61c3      	str	r3, [r0, #28]
	for (k = nBfly; k > 0; k--) {
 800ba56:	3901      	subs	r1, #1
 800ba58:	2900      	cmp	r1, #0
 800ba5a:	f73f af33 	bgt.w	800b8c4 <AntiAlias+0x8>
	}
}
 800ba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	0801b650 	.word	0x0801b650

0800ba68 <WinPrevious>:
 * Notes:       produces 9 output samples from 18 input samples via symmetry
 *              all blocks gain at least 1 guard bit via window (long blocks get extra
 *                sign bit, short blocks can have one addition but max gain < 1.0)
 **************************************************************************************/
static void WinPrevious(int *xPrev, int *xPrevWin, int btPrev)
{
 800ba68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int i, x, *xp, *xpwLo, *xpwHi, wLo, wHi;
	const int *wpLo, *wpHi;

	xp = xPrev;
	/* mapping (see IMDCT12x3): xPrev[0-2] = sum[6-8], xPrev[3-8] = sum[12-17] */
	if (btPrev == 2) {
 800ba6c:	2a02      	cmp	r2, #2
 800ba6e:	d00b      	beq.n	800ba88 <WinPrevious+0x20>
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
	} else {
		/* use ARM-style pointers (*ptr++) so that ADS compiles well */
		wpLo = imdctWin[btPrev] + 18;
 800ba70:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800ba74:	0113      	lsls	r3, r2, #4
 800ba76:	4a4f      	ldr	r2, [pc, #316]	; (800bbb4 <WinPrevious+0x14c>)
 800ba78:	4413      	add	r3, r2
 800ba7a:	f103 0648 	add.w	r6, r3, #72	; 0x48
		wpHi = wpLo + 17;
 800ba7e:	338c      	adds	r3, #140	; 0x8c
		xpwLo = xPrevWin;
		xpwHi = xPrevWin + 17;
 800ba80:	f101 0544 	add.w	r5, r1, #68	; 0x44
		for (i = 9; i > 0; i--) {
 800ba84:	2409      	movs	r4, #9
 800ba86:	e091      	b.n	800bbac <WinPrevious+0x144>
		wpLo = imdctWin[btPrev];
 800ba88:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800ba8c:	0115      	lsls	r5, r2, #4
 800ba8e:	4a49      	ldr	r2, [pc, #292]	; (800bbb4 <WinPrevious+0x14c>)
 800ba90:	18ab      	adds	r3, r5, r2
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800ba92:	699f      	ldr	r7, [r3, #24]
 800ba94:	6886      	ldr	r6, [r0, #8]
 800ba96:	4634      	mov	r4, r6
 800ba98:	fb87 6404 	smull	r6, r4, r7, r4
 800ba9c:	58ae      	ldr	r6, [r5, r2]
 800ba9e:	6985      	ldr	r5, [r0, #24]
 800baa0:	462a      	mov	r2, r5
 800baa2:	fb86 5202 	smull	r5, r2, r6, r2
 800baa6:	4422      	add	r2, r4
 800baa8:	600a      	str	r2, [r1, #0]
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 800baaa:	69dd      	ldr	r5, [r3, #28]
 800baac:	6842      	ldr	r2, [r0, #4]
 800baae:	4614      	mov	r4, r2
 800bab0:	fb85 2404 	smull	r2, r4, r5, r4
 800bab4:	685e      	ldr	r6, [r3, #4]
 800bab6:	69c5      	ldr	r5, [r0, #28]
 800bab8:	462a      	mov	r2, r5
 800baba:	fb86 5202 	smull	r5, r2, r6, r2
 800babe:	4422      	add	r2, r4
 800bac0:	604a      	str	r2, [r1, #4]
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 800bac2:	6a1d      	ldr	r5, [r3, #32]
 800bac4:	6802      	ldr	r2, [r0, #0]
 800bac6:	4614      	mov	r4, r2
 800bac8:	fb85 2404 	smull	r2, r4, r5, r4
 800bacc:	689e      	ldr	r6, [r3, #8]
 800bace:	6a05      	ldr	r5, [r0, #32]
 800bad0:	462a      	mov	r2, r5
 800bad2:	fb86 5202 	smull	r5, r2, r6, r2
 800bad6:	4422      	add	r2, r4
 800bad8:	608a      	str	r2, [r1, #8]
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 800bada:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800badc:	6802      	ldr	r2, [r0, #0]
 800bade:	4614      	mov	r4, r2
 800bae0:	fb85 2404 	smull	r2, r4, r5, r4
 800bae4:	68de      	ldr	r6, [r3, #12]
 800bae6:	6a05      	ldr	r5, [r0, #32]
 800bae8:	462a      	mov	r2, r5
 800baea:	fb86 5202 	smull	r5, r2, r6, r2
 800baee:	4422      	add	r2, r4
 800baf0:	60ca      	str	r2, [r1, #12]
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 800baf2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800baf4:	6842      	ldr	r2, [r0, #4]
 800baf6:	4614      	mov	r4, r2
 800baf8:	fb85 2404 	smull	r2, r4, r5, r4
 800bafc:	691e      	ldr	r6, [r3, #16]
 800bafe:	69c5      	ldr	r5, [r0, #28]
 800bb00:	462a      	mov	r2, r5
 800bb02:	fb86 5202 	smull	r5, r2, r6, r2
 800bb06:	4422      	add	r2, r4
 800bb08:	610a      	str	r2, [r1, #16]
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 800bb0a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800bb0c:	6882      	ldr	r2, [r0, #8]
 800bb0e:	4614      	mov	r4, r2
 800bb10:	fb85 2404 	smull	r2, r4, r5, r4
 800bb14:	695e      	ldr	r6, [r3, #20]
 800bb16:	6985      	ldr	r5, [r0, #24]
 800bb18:	462a      	mov	r2, r5
 800bb1a:	fb86 5202 	smull	r5, r2, r6, r2
 800bb1e:	4422      	add	r2, r4
 800bb20:	614a      	str	r2, [r1, #20]
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 800bb22:	699d      	ldr	r5, [r3, #24]
 800bb24:	6944      	ldr	r4, [r0, #20]
 800bb26:	4622      	mov	r2, r4
 800bb28:	fb85 4202 	smull	r4, r2, r5, r2
 800bb2c:	618a      	str	r2, [r1, #24]
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 800bb2e:	69dd      	ldr	r5, [r3, #28]
 800bb30:	6904      	ldr	r4, [r0, #16]
 800bb32:	4622      	mov	r2, r4
 800bb34:	fb85 4202 	smull	r4, r2, r5, r2
 800bb38:	61ca      	str	r2, [r1, #28]
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 800bb3a:	6a1d      	ldr	r5, [r3, #32]
 800bb3c:	68c4      	ldr	r4, [r0, #12]
 800bb3e:	4622      	mov	r2, r4
 800bb40:	fb85 4202 	smull	r4, r2, r5, r2
 800bb44:	620a      	str	r2, [r1, #32]
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 800bb46:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bb48:	68c4      	ldr	r4, [r0, #12]
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	fb85 4202 	smull	r4, r2, r5, r2
 800bb50:	624a      	str	r2, [r1, #36]	; 0x24
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 800bb52:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800bb54:	6904      	ldr	r4, [r0, #16]
 800bb56:	4622      	mov	r2, r4
 800bb58:	fb85 4202 	smull	r4, r2, r5, r2
 800bb5c:	628a      	str	r2, [r1, #40]	; 0x28
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 800bb5e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800bb60:	6942      	ldr	r2, [r0, #20]
 800bb62:	4613      	mov	r3, r2
 800bb64:	fb84 2303 	smull	r2, r3, r4, r3
 800bb68:	62cb      	str	r3, [r1, #44]	; 0x2c
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	644b      	str	r3, [r1, #68]	; 0x44
 800bb6e:	640b      	str	r3, [r1, #64]	; 0x40
 800bb70:	63cb      	str	r3, [r1, #60]	; 0x3c
 800bb72:	638b      	str	r3, [r1, #56]	; 0x38
 800bb74:	634b      	str	r3, [r1, #52]	; 0x34
 800bb76:	630b      	str	r3, [r1, #48]	; 0x30
 800bb78:	e01a      	b.n	800bbb0 <WinPrevious+0x148>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800bb7a:	1d07      	adds	r7, r0, #4
 800bb7c:	6802      	ldr	r2, [r0, #0]
 800bb7e:	f106 0e04 	add.w	lr, r6, #4
 800bb82:	6836      	ldr	r6, [r6, #0]
 800bb84:	f1a3 0804 	sub.w	r8, r3, #4
 800bb88:	6818      	ldr	r0, [r3, #0]
			*xpwLo++ = MULSHIFT32(wLo, x);
 800bb8a:	f101 0c04 	add.w	ip, r1, #4
 800bb8e:	4613      	mov	r3, r2
 800bb90:	fb86 9303 	smull	r9, r3, r6, r3
 800bb94:	600b      	str	r3, [r1, #0]
			*xpwHi-- = MULSHIFT32(wHi, x);
 800bb96:	1f29      	subs	r1, r5, #4
 800bb98:	4613      	mov	r3, r2
 800bb9a:	fb80 2303 	smull	r2, r3, r0, r3
 800bb9e:	602b      	str	r3, [r5, #0]
		for (i = 9; i > 0; i--) {
 800bba0:	3c01      	subs	r4, #1
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800bba2:	4643      	mov	r3, r8
 800bba4:	4676      	mov	r6, lr
			*xpwHi-- = MULSHIFT32(wHi, x);
 800bba6:	460d      	mov	r5, r1
			*xpwLo++ = MULSHIFT32(wLo, x);
 800bba8:	4661      	mov	r1, ip
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800bbaa:	4638      	mov	r0, r7
		for (i = 9; i > 0; i--) {
 800bbac:	2c00      	cmp	r4, #0
 800bbae:	dce4      	bgt.n	800bb7a <WinPrevious+0x112>
		}
	}
}
 800bbb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbb4:	0801b690 	.word	0x0801b690

0800bbb8 <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 800bbb8:	b4f0      	push	{r4, r5, r6, r7}
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 800bbba:	469c      	mov	ip, r3
 800bbbc:	bb9b      	cbnz	r3, 800bc26 <FreqInvertRescale+0x6e>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 800bbbe:	f012 0201 	ands.w	r2, r2, #1
 800bbc2:	d02d      	beq.n	800bc20 <FreqInvertRescale+0x68>
			y += NBANDS;
			y0 = *y;	y += 2*NBANDS;
 800bbc4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
			y1 = *y;	y += 2*NBANDS;
 800bbc8:	f8d0 7180 	ldr.w	r7, [r0, #384]	; 0x180
			y2 = *y;	y += 2*NBANDS;
 800bbcc:	f8d0 6280 	ldr.w	r6, [r0, #640]	; 0x280
			y3 = *y;	y += 2*NBANDS;
 800bbd0:	f8d0 5380 	ldr.w	r5, [r0, #896]	; 0x380
			y4 = *y;	y += 2*NBANDS;
 800bbd4:	f8d0 4480 	ldr.w	r4, [r0, #1152]	; 0x480
			y5 = *y;	y += 2*NBANDS;
 800bbd8:	f8d0 1580 	ldr.w	r1, [r0, #1408]	; 0x580
			y6 = *y;	y += 2*NBANDS;
 800bbdc:	f8d0 2680 	ldr.w	r2, [r0, #1664]	; 0x680
			y7 = *y;	y += 2*NBANDS;
			y8 = *y;	y += 2*NBANDS;

			y -= 18*NBANDS;
			*y = -y0;	y += 2*NBANDS;
 800bbe0:	425b      	negs	r3, r3
 800bbe2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
			*y = -y1;	y += 2*NBANDS;
 800bbe6:	427f      	negs	r7, r7
 800bbe8:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
			*y = -y2;	y += 2*NBANDS;
 800bbec:	4276      	negs	r6, r6
 800bbee:	f8c0 6280 	str.w	r6, [r0, #640]	; 0x280
			*y = -y3;	y += 2*NBANDS;
 800bbf2:	426d      	negs	r5, r5
 800bbf4:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
			*y = -y4;	y += 2*NBANDS;
 800bbf8:	4264      	negs	r4, r4
 800bbfa:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
			*y = -y5;	y += 2*NBANDS;
 800bbfe:	4249      	negs	r1, r1
 800bc00:	f8c0 1580 	str.w	r1, [r0, #1408]	; 0x580
			*y = -y6;	y += 2*NBANDS;
 800bc04:	4252      	negs	r2, r2
 800bc06:	f8c0 2680 	str.w	r2, [r0, #1664]	; 0x680
			*y = -y7;	y += 2*NBANDS;
 800bc0a:	f8d0 3780 	ldr.w	r3, [r0, #1920]	; 0x780
 800bc0e:	425b      	negs	r3, r3
 800bc10:	f8c0 3780 	str.w	r3, [r0, #1920]	; 0x780
			*y = -y8;	y += 2*NBANDS;
 800bc14:	f8d0 3880 	ldr.w	r3, [r0, #2176]	; 0x880
 800bc18:	425b      	negs	r3, r3
 800bc1a:	f8c0 3880 	str.w	r3, [r0, #2176]	; 0x880
		}
		return 0;
 800bc1e:	4662      	mov	r2, ip
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		}
		return mOut;
	}
}
 800bc20:	4610      	mov	r0, r2
 800bc22:	bcf0      	pop	{r4, r5, r6, r7}
 800bc24:	4770      	bx	lr
		if (blockIdx & 0x01) {
 800bc26:	f012 0501 	ands.w	r5, r2, #1
 800bc2a:	d140      	bne.n	800bcae <FreqInvertRescale+0xf6>
		mOut = 0;
 800bc2c:	462a      	mov	r2, r5
 800bc2e:	e046      	b.n	800bcbe <FreqInvertRescale+0x106>
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800bc30:	fa03 f30c 	lsl.w	r3, r3, ip
 800bc34:	600b      	str	r3, [r1, #0]
			for (i = 0; i < 18; i+=2) {
 800bc36:	3502      	adds	r5, #2
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800bc38:	3104      	adds	r1, #4
			for (i = 0; i < 18; i+=2) {
 800bc3a:	2d11      	cmp	r5, #17
 800bc3c:	dcf0      	bgt.n	800bc20 <FreqInvertRescale+0x68>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800bc3e:	6803      	ldr	r3, [r0, #0]
 800bc40:	17de      	asrs	r6, r3, #31
 800bc42:	f1cc 041f 	rsb	r4, ip, #31
 800bc46:	fa43 f704 	asr.w	r7, r3, r4
 800bc4a:	42b7      	cmp	r7, r6
 800bc4c:	d003      	beq.n	800bc56 <FreqInvertRescale+0x9e>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	40a3      	lsls	r3, r4
 800bc52:	3b01      	subs	r3, #1
 800bc54:	4073      	eors	r3, r6
 800bc56:	fa03 f30c 	lsl.w	r3, r3, ip
 800bc5a:	6003      	str	r3, [r0, #0]
	__asm__ volatile (
 800bc5c:	2600      	movs	r6, #0
 800bc5e:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 800bc62:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 800bc66:	4316      	orrs	r6, r2
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800bc68:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800bc6c:	425b      	negs	r3, r3
 800bc6e:	17da      	asrs	r2, r3, #31
 800bc70:	fa43 f704 	asr.w	r7, r3, r4
 800bc74:	4297      	cmp	r7, r2
 800bc76:	d003      	beq.n	800bc80 <FreqInvertRescale+0xc8>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	40a3      	lsls	r3, r4
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	4053      	eors	r3, r2
 800bc80:	fa03 f30c 	lsl.w	r3, r3, ip
 800bc84:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 800bc88:	2200      	movs	r2, #0
 800bc8a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800bc8e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800bc92:	4332      	orrs	r2, r6
 800bc94:	f500 7080 	add.w	r0, r0, #256	; 0x100
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800bc98:	680b      	ldr	r3, [r1, #0]
 800bc9a:	17de      	asrs	r6, r3, #31
 800bc9c:	fa43 f704 	asr.w	r7, r3, r4
 800bca0:	42b7      	cmp	r7, r6
 800bca2:	d0c5      	beq.n	800bc30 <FreqInvertRescale+0x78>
 800bca4:	2301      	movs	r3, #1
 800bca6:	40a3      	lsls	r3, r4
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	4073      	eors	r3, r6
 800bcac:	e7c0      	b.n	800bc30 <FreqInvertRescale+0x78>
		mOut = 0;
 800bcae:	2200      	movs	r2, #0
			for (i = 0; i < 18; i+=2) {
 800bcb0:	4615      	mov	r5, r2
 800bcb2:	e7c2      	b.n	800bc3a <FreqInvertRescale+0x82>
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800bcb4:	fa03 f30c 	lsl.w	r3, r3, ip
 800bcb8:	600b      	str	r3, [r1, #0]
			for (i = 0; i < 18; i+=2) {
 800bcba:	3502      	adds	r5, #2
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800bcbc:	3104      	adds	r1, #4
			for (i = 0; i < 18; i+=2) {
 800bcbe:	2d11      	cmp	r5, #17
 800bcc0:	dcae      	bgt.n	800bc20 <FreqInvertRescale+0x68>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800bcc2:	6803      	ldr	r3, [r0, #0]
 800bcc4:	17de      	asrs	r6, r3, #31
 800bcc6:	f1cc 041f 	rsb	r4, ip, #31
 800bcca:	fa43 f704 	asr.w	r7, r3, r4
 800bcce:	42b7      	cmp	r7, r6
 800bcd0:	d003      	beq.n	800bcda <FreqInvertRescale+0x122>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	40a3      	lsls	r3, r4
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	4073      	eors	r3, r6
 800bcda:	fa03 f30c 	lsl.w	r3, r3, ip
 800bcde:	6003      	str	r3, [r0, #0]
 800bce0:	2600      	movs	r6, #0
 800bce2:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 800bce6:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 800bcea:	4332      	orrs	r2, r6
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800bcec:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800bcf0:	17de      	asrs	r6, r3, #31
 800bcf2:	fa43 f704 	asr.w	r7, r3, r4
 800bcf6:	42b7      	cmp	r7, r6
 800bcf8:	d003      	beq.n	800bd02 <FreqInvertRescale+0x14a>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	40a3      	lsls	r3, r4
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	4073      	eors	r3, r6
 800bd02:	fa03 f30c 	lsl.w	r3, r3, ip
 800bd06:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 800bd0a:	2600      	movs	r6, #0
 800bd0c:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 800bd10:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 800bd14:	4332      	orrs	r2, r6
 800bd16:	f500 7080 	add.w	r0, r0, #256	; 0x100
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800bd1a:	680b      	ldr	r3, [r1, #0]
 800bd1c:	17de      	asrs	r6, r3, #31
 800bd1e:	fa43 f704 	asr.w	r7, r3, r4
 800bd22:	42b7      	cmp	r7, r6
 800bd24:	d0c6      	beq.n	800bcb4 <FreqInvertRescale+0xfc>
 800bd26:	2301      	movs	r3, #1
 800bd28:	40a3      	lsls	r3, r4
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	4073      	eors	r3, r6
 800bd2e:	e7c1      	b.n	800bcb4 <FreqInvertRescale+0xfc>

0800bd30 <IMDCT12x3>:
 * Return:      mOut (OR of abs(y) for all y calculated here)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
static int IMDCT12x3(int *xCurr, int *xPrev, int *y, int btPrev, int blockIdx, int gb)
{
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	b0a9      	sub	sp, #164	; 0xa4
 800bd36:	460c      	mov	r4, r1
 800bd38:	9201      	str	r2, [sp, #4]
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
	int i, es, mOut, yLo, xBuf[18], xPrevWin[18];	/* need temp buffer for reordering short blocks */
	const int *wp;

	es = 0;
	/* 7 gb is always adequate for accumulator loop + idct12 + window + overlap */
	if (gb < 7) {
 800bd3e:	2b06      	cmp	r3, #6
 800bd40:	f300 80fd 	bgt.w	800bf3e <IMDCT12x3+0x20e>
		es = 7 - gb;
 800bd44:	f1c3 0107 	rsb	r1, r3, #7
 800bd48:	9102      	str	r1, [sp, #8]
		for (i = 0; i < 18; i+=2) {
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e00f      	b.n	800bd6e <IMDCT12x3+0x3e>
			xCurr[i+0] >>= es;
 800bd4e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800bd52:	410a      	asrs	r2, r1
 800bd54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			xCurr[i+1] >>= es;
 800bd58:	1c5d      	adds	r5, r3, #1
 800bd5a:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 800bd5e:	410a      	asrs	r2, r1
 800bd60:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
			*xPrev++ >>= es;
 800bd64:	6822      	ldr	r2, [r4, #0]
 800bd66:	410a      	asrs	r2, r1
 800bd68:	6022      	str	r2, [r4, #0]
		for (i = 0; i < 18; i+=2) {
 800bd6a:	3302      	adds	r3, #2
			*xPrev++ >>= es;
 800bd6c:	3404      	adds	r4, #4
		for (i = 0; i < 18; i+=2) {
 800bd6e:	2b11      	cmp	r3, #17
 800bd70:	dded      	ble.n	800bd4e <IMDCT12x3+0x1e>
		}
		xPrev -= 9;
 800bd72:	3c24      	subs	r4, #36	; 0x24
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800bd74:	6802      	ldr	r2, [r0, #0]
 800bd76:	68c3      	ldr	r3, [r0, #12]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800bd78:	6986      	ldr	r6, [r0, #24]
 800bd7a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800bd7c:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800bd7e:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
	x4 -= x5;
 800bd82:	eba5 050c 	sub.w	r5, r5, ip
	x3 -= x4;
 800bd86:	1b49      	subs	r1, r1, r5
	x2 -= x3;
 800bd88:	eba6 0e01 	sub.w	lr, r6, r1
	x3 -= x5;
 800bd8c:	eba1 010c 	sub.w	r1, r1, ip
	x1 -= x2;
 800bd90:	eba3 030e 	sub.w	r3, r3, lr
	x0 -= x1;
 800bd94:	1ad2      	subs	r2, r2, r3
	x1 -= x3;
 800bd96:	1a5b      	subs	r3, r3, r1
	x0 >>= 1;
 800bd98:	1052      	asrs	r2, r2, #1
	x1 >>= 1;
 800bd9a:	105b      	asrs	r3, r3, #1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800bd9c:	4fd2      	ldr	r7, [pc, #840]	; (800c0e8 <IMDCT12x3+0x3b8>)
 800bd9e:	4676      	mov	r6, lr
 800bda0:	fb87 e606 	smull	lr, r6, r7, r6
	a0 = MULSHIFT32(c3_0, x2) << 1;
 800bda4:	0076      	lsls	r6, r6, #1
	a1 = x0 + (x4 >> 1);
 800bda6:	eb02 0865 	add.w	r8, r2, r5, asr #1
	a2 = x0 - x4;
 800bdaa:	1b55      	subs	r5, r2, r5
	x0 = a1 + a0;
 800bdac:	eb06 0e08 	add.w	lr, r6, r8
	x4 = a1 - a0;
 800bdb0:	eba8 0606 	sub.w	r6, r8, r6
 800bdb4:	460a      	mov	r2, r1
 800bdb6:	fb87 1202 	smull	r1, r2, r7, r2
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800bdba:	0052      	lsls	r2, r2, #1
	a1 = x1 + (x5 >> 1);
 800bdbc:	eb03 086c 	add.w	r8, r3, ip, asr #1
	a2 = x1 - x5;
 800bdc0:	eba3 030c 	sub.w	r3, r3, ip
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800bdc4:	eb02 0c08 	add.w	ip, r2, r8
 800bdc8:	f8df b324 	ldr.w	fp, [pc, #804]	; 800c0f0 <IMDCT12x3+0x3c0>
 800bdcc:	4661      	mov	r1, ip
 800bdce:	fb8b c101 	smull	ip, r1, fp, r1
 800bdd2:	0089      	lsls	r1, r1, #2
 800bdd4:	f8df a31c 	ldr.w	sl, [pc, #796]	; 800c0f4 <IMDCT12x3+0x3c4>
 800bdd8:	469c      	mov	ip, r3
 800bdda:	fb8a 3c0c 	smull	r3, ip, sl, ip
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800bdde:	ea4f 038c 	mov.w	r3, ip, lsl #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800bde2:	eba8 0202 	sub.w	r2, r8, r2
 800bde6:	f8df c310 	ldr.w	ip, [pc, #784]	; 800c0f8 <IMDCT12x3+0x3c8>
 800bdea:	4691      	mov	r9, r2
 800bdec:	fb8c 2909 	smull	r2, r9, ip, r9
 800bdf0:	ea4f 0989 	mov.w	r9, r9, lsl #2
	*out = x0 + x1;	out++;
 800bdf4:	eb0e 0201 	add.w	r2, lr, r1
 800bdf8:	9216      	str	r2, [sp, #88]	; 0x58
	*out = x2 + x3;	out++;
 800bdfa:	18ea      	adds	r2, r5, r3
 800bdfc:	9217      	str	r2, [sp, #92]	; 0x5c
	*out = x4 + x5;	out++;
 800bdfe:	eb06 0209 	add.w	r2, r6, r9
 800be02:	9218      	str	r2, [sp, #96]	; 0x60
	*out = x4 - x5;	out++;
 800be04:	eba6 0609 	sub.w	r6, r6, r9
 800be08:	9619      	str	r6, [sp, #100]	; 0x64
	*out = x2 - x3;	out++;
 800be0a:	1aed      	subs	r5, r5, r3
 800be0c:	951a      	str	r5, [sp, #104]	; 0x68
	*out = x0 - x1;
 800be0e:	ebae 0101 	sub.w	r1, lr, r1
 800be12:	911b      	str	r1, [sp, #108]	; 0x6c
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800be14:	6905      	ldr	r5, [r0, #16]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800be16:	69c1      	ldr	r1, [r0, #28]
 800be18:	6a82      	ldr	r2, [r0, #40]	; 0x28
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800be1a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800be1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
	x4 -= x5;
 800be1e:	eba6 0803 	sub.w	r8, r6, r3
	x3 -= x4;
 800be22:	eba2 0e08 	sub.w	lr, r2, r8
	x2 -= x3;
 800be26:	eba1 010e 	sub.w	r1, r1, lr
	x3 -= x5;
 800be2a:	ebae 0e03 	sub.w	lr, lr, r3
	x1 -= x2;
 800be2e:	eba5 0901 	sub.w	r9, r5, r1
	x0 -= x1;
 800be32:	6842      	ldr	r2, [r0, #4]
 800be34:	eba2 0209 	sub.w	r2, r2, r9
	x1 -= x3;
 800be38:	eba9 090e 	sub.w	r9, r9, lr
	x0 >>= 1;
 800be3c:	1052      	asrs	r2, r2, #1
	x1 >>= 1;
 800be3e:	ea4f 0969 	mov.w	r9, r9, asr #1
 800be42:	460e      	mov	r6, r1
 800be44:	fb87 1606 	smull	r1, r6, r7, r6
	a0 = MULSHIFT32(c3_0, x2) << 1;
 800be48:	0075      	lsls	r5, r6, #1
	a1 = x0 + (x4 >> 1);
 800be4a:	eb02 0668 	add.w	r6, r2, r8, asr #1
	a2 = x0 - x4;
 800be4e:	eba2 0208 	sub.w	r2, r2, r8
	x0 = a1 + a0;
 800be52:	eb05 0806 	add.w	r8, r5, r6
	x4 = a1 - a0;
 800be56:	1b76      	subs	r6, r6, r5
 800be58:	4675      	mov	r5, lr
 800be5a:	fb87 1505 	smull	r1, r5, r7, r5
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800be5e:	006d      	lsls	r5, r5, #1
	a1 = x1 + (x5 >> 1);
 800be60:	eb09 0e63 	add.w	lr, r9, r3, asr #1
	a2 = x1 - x5;
 800be64:	eba9 0303 	sub.w	r3, r9, r3
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800be68:	eb05 090e 	add.w	r9, r5, lr
 800be6c:	4649      	mov	r1, r9
 800be6e:	fb8b 9101 	smull	r9, r1, fp, r1
 800be72:	0089      	lsls	r1, r1, #2
 800be74:	4699      	mov	r9, r3
 800be76:	fb8a 3909 	smull	r3, r9, sl, r9
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800be7a:	ea4f 0989 	mov.w	r9, r9, lsl #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800be7e:	ebae 0505 	sub.w	r5, lr, r5
 800be82:	462b      	mov	r3, r5
 800be84:	fb8c 5303 	smull	r5, r3, ip, r3
 800be88:	009b      	lsls	r3, r3, #2
	*out = x0 + x1;	out++;
 800be8a:	eb08 0501 	add.w	r5, r8, r1
 800be8e:	951c      	str	r5, [sp, #112]	; 0x70
	*out = x2 + x3;	out++;
 800be90:	eb02 0509 	add.w	r5, r2, r9
 800be94:	951d      	str	r5, [sp, #116]	; 0x74
	*out = x4 + x5;	out++;
 800be96:	18f5      	adds	r5, r6, r3
 800be98:	951e      	str	r5, [sp, #120]	; 0x78
	*out = x4 - x5;	out++;
 800be9a:	1af3      	subs	r3, r6, r3
 800be9c:	931f      	str	r3, [sp, #124]	; 0x7c
	*out = x2 - x3;	out++;
 800be9e:	eba2 0209 	sub.w	r2, r2, r9
 800bea2:	9220      	str	r2, [sp, #128]	; 0x80
	*out = x0 - x1;
 800bea4:	eba8 0101 	sub.w	r1, r8, r1
 800bea8:	9121      	str	r1, [sp, #132]	; 0x84
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800beaa:	6883      	ldr	r3, [r0, #8]
 800beac:	6942      	ldr	r2, [r0, #20]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800beae:	6a01      	ldr	r1, [r0, #32]
 800beb0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800beb2:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800beb4:	6c40      	ldr	r0, [r0, #68]	; 0x44
	x4 -= x5;
 800beb6:	1a36      	subs	r6, r6, r0
	x3 -= x4;
 800beb8:	1bad      	subs	r5, r5, r6
	x2 -= x3;
 800beba:	eba1 0e05 	sub.w	lr, r1, r5
	x3 -= x5;
 800bebe:	1a2d      	subs	r5, r5, r0
	x1 -= x2;
 800bec0:	eba2 020e 	sub.w	r2, r2, lr
	x0 -= x1;
 800bec4:	1a99      	subs	r1, r3, r2
	x1 -= x3;
 800bec6:	1b52      	subs	r2, r2, r5
	x0 >>= 1;
 800bec8:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800beca:	1052      	asrs	r2, r2, #1
 800becc:	4673      	mov	r3, lr
 800bece:	fb87 e303 	smull	lr, r3, r7, r3
	a0 = MULSHIFT32(c3_0, x2) << 1;
 800bed2:	005b      	lsls	r3, r3, #1
	a1 = x0 + (x4 >> 1);
 800bed4:	eb01 0e66 	add.w	lr, r1, r6, asr #1
	a2 = x0 - x4;
 800bed8:	1b89      	subs	r1, r1, r6
	x0 = a1 + a0;
 800beda:	eb03 060e 	add.w	r6, r3, lr
	x4 = a1 - a0;
 800bede:	ebae 0303 	sub.w	r3, lr, r3
 800bee2:	46ae      	mov	lr, r5
 800bee4:	fb87 5e0e 	smull	r5, lr, r7, lr
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800bee8:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
	a1 = x1 + (x5 >> 1);
 800beec:	eb02 0560 	add.w	r5, r2, r0, asr #1
	a2 = x1 - x5;
 800bef0:	1a12      	subs	r2, r2, r0
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800bef2:	eb0e 0705 	add.w	r7, lr, r5
 800bef6:	4638      	mov	r0, r7
 800bef8:	fb8b 7000 	smull	r7, r0, fp, r0
 800befc:	0080      	lsls	r0, r0, #2
 800befe:	4617      	mov	r7, r2
 800bf00:	fb8a 2707 	smull	r2, r7, sl, r7
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800bf04:	00ba      	lsls	r2, r7, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800bf06:	eba5 0e0e 	sub.w	lr, r5, lr
 800bf0a:	4677      	mov	r7, lr
 800bf0c:	fb8c 5707 	smull	r5, r7, ip, r7
 800bf10:	00bf      	lsls	r7, r7, #2
	*out = x0 + x1;	out++;
 800bf12:	1835      	adds	r5, r6, r0
 800bf14:	9522      	str	r5, [sp, #136]	; 0x88
	*out = x2 + x3;	out++;
 800bf16:	188d      	adds	r5, r1, r2
 800bf18:	9523      	str	r5, [sp, #140]	; 0x8c
	*out = x4 + x5;	out++;
 800bf1a:	19dd      	adds	r5, r3, r7
 800bf1c:	9524      	str	r5, [sp, #144]	; 0x90
	*out = x4 - x5;	out++;
 800bf1e:	1bdb      	subs	r3, r3, r7
 800bf20:	9325      	str	r3, [sp, #148]	; 0x94
	*out = x2 - x3;	out++;
 800bf22:	1a89      	subs	r1, r1, r2
 800bf24:	9126      	str	r1, [sp, #152]	; 0x98
	*out = x0 - x1;
 800bf26:	1a30      	subs	r0, r6, r0
 800bf28:	9027      	str	r0, [sp, #156]	; 0x9c
	imdct12(xCurr + 0, xBuf + 0);
	imdct12(xCurr + 1, xBuf + 6);
	imdct12(xCurr + 2, xBuf + 12);

	/* window previous from last time */
	WinPrevious(xPrev, xPrevWin, btPrev);
 800bf2a:	9a00      	ldr	r2, [sp, #0]
 800bf2c:	a904      	add	r1, sp, #16
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f7ff fd9a 	bl	800ba68 <WinPrevious>
	/* could unroll this for speed, minimum loads (short blocks usually rare, so doesn't make much overall difference) 
	 * xPrevWin[i] << 2 still has 1 gb always, max gain of windowed xBuf stuff also < 1.0 and gain the sign bit
	 * so y calculations won't overflow
	 */
	wp = imdctWin[2];
	mOut = 0;
 800bf34:	2500      	movs	r5, #0
	for (i = 0; i < 3; i++) {
 800bf36:	4628      	mov	r0, r5
 800bf38:	9403      	str	r4, [sp, #12]
 800bf3a:	9e01      	ldr	r6, [sp, #4]
 800bf3c:	e0ab      	b.n	800c096 <IMDCT12x3+0x366>
	es = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9302      	str	r3, [sp, #8]
 800bf42:	e717      	b.n	800bd74 <IMDCT12x3+0x44>
		yLo = (xPrevWin[ 0+i] << 2);
 800bf44:	ab28      	add	r3, sp, #160	; 0xa0
 800bf46:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800bf4a:	f85e 1c90 	ldr.w	r1, [lr, #-144]
 800bf4e:	0089      	lsls	r1, r1, #2
	__asm__ volatile (
 800bf50:	2400      	movs	r4, #0
 800bf52:	4623      	mov	r3, r4
 800bf54:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800bf58:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 800bf5c:	432b      	orrs	r3, r5
 800bf5e:	01c2      	lsls	r2, r0, #7
 800bf60:	50b1      	str	r1, [r6, r2]
		yLo = (xPrevWin[ 3+i] << 2);
 800bf62:	1cc7      	adds	r7, r0, #3
 800bf64:	aa28      	add	r2, sp, #160	; 0xa0
 800bf66:	eb02 0887 	add.w	r8, r2, r7, lsl #2
 800bf6a:	f858 2c90 	ldr.w	r2, [r8, #-144]
 800bf6e:	0092      	lsls	r2, r2, #2
 800bf70:	4625      	mov	r5, r4
 800bf72:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800bf76:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 800bf7a:	432b      	orrs	r3, r5
 800bf7c:	01f9      	lsls	r1, r7, #7
 800bf7e:	5072      	str	r2, [r6, r1]
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 800bf80:	f100 0906 	add.w	r9, r0, #6
 800bf84:	aa28      	add	r2, sp, #160	; 0xa0
 800bf86:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800bf8a:	f852 5c90 	ldr.w	r5, [r2, #-144]
 800bf8e:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800bf92:	4956      	ldr	r1, [pc, #344]	; (800c0ec <IMDCT12x3+0x3bc>)
 800bf94:	f858 2c48 	ldr.w	r2, [r8, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800bf98:	4615      	mov	r5, r2
 800bf9a:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 800bf9e:	fb82 8505 	smull	r8, r5, r2, r5
 800bfa2:	4465      	add	r5, ip
	__asm__ volatile (
 800bfa4:	4622      	mov	r2, r4
 800bfa6:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 800bfaa:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	ea4f 12c9 	mov.w	r2, r9, lsl #7
 800bfb4:	50b5      	str	r5, [r6, r2]
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 800bfb6:	f100 0c09 	add.w	ip, r0, #9
 800bfba:	aa28      	add	r2, sp, #160	; 0xa0
 800bfbc:	eb02 088c 	add.w	r8, r2, ip, lsl #2
 800bfc0:	f858 2c90 	ldr.w	r2, [r8, #-144]
 800bfc4:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800bfc8:	f1c0 0205 	rsb	r2, r0, #5
 800bfcc:	ad28      	add	r5, sp, #160	; 0xa0
 800bfce:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800bfd2:	f852 5c48 	ldr.w	r5, [r2, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800bfd6:	462a      	mov	r2, r5
 800bfd8:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
 800bfdc:	fb85 a202 	smull	sl, r2, r5, r2
 800bfe0:	445a      	add	r2, fp
	__asm__ volatile (
 800bfe2:	4625      	mov	r5, r4
 800bfe4:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800bfe8:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 800bfec:	432b      	orrs	r3, r5
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	ea4f 15cc 	mov.w	r5, ip, lsl #7
 800bff4:	5172      	str	r2, [r6, r5]
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 800bff6:	f100 0a0c 	add.w	sl, r0, #12
 800bffa:	ab28      	add	r3, sp, #160	; 0xa0
 800bffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c000:	f852 5c90 	ldr.w	r5, [r2, #-144]
 800c004:	00ad      	lsls	r5, r5, #2
 800c006:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
 800c00a:	f1c0 0202 	rsb	r2, r0, #2
 800c00e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c012:	f852 2c48 	ldr.w	r2, [r2, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800c016:	4691      	mov	r9, r2
 800c018:	fb8b 2909 	smull	r2, r9, fp, r9
 800c01c:	f858 8c48 	ldr.w	r8, [r8, #-72]
 800c020:	4642      	mov	r2, r8
 800c022:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800c026:	fb83 8202 	smull	r8, r2, r3, r2
 800c02a:	444a      	add	r2, r9
 800c02c:	442a      	add	r2, r5
	__asm__ volatile (
 800c02e:	4625      	mov	r5, r4
 800c030:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800c034:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 800c038:	9b00      	ldr	r3, [sp, #0]
 800c03a:	432b      	orrs	r3, r5
 800c03c:	ea4f 1aca 	mov.w	sl, sl, lsl #7
 800c040:	f846 200a 	str.w	r2, [r6, sl]
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 800c044:	f100 080f 	add.w	r8, r0, #15
 800c048:	aa28      	add	r2, sp, #160	; 0xa0
 800c04a:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 800c04e:	f852 2c90 	ldr.w	r2, [r2, #-144]
 800c052:	0092      	lsls	r2, r2, #2
 800c054:	f851 902c 	ldr.w	r9, [r1, ip, lsl #2]
 800c058:	f85e cc48 	ldr.w	ip, [lr, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800c05c:	4665      	mov	r5, ip
 800c05e:	fb89 c505 	smull	ip, r5, r9, r5
 800c062:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 800c066:	f1c0 010b 	rsb	r1, r0, #11
 800c06a:	af28      	add	r7, sp, #160	; 0xa0
 800c06c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800c070:	f851 7c48 	ldr.w	r7, [r1, #-72]
 800c074:	4639      	mov	r1, r7
 800c076:	fb8c 7101 	smull	r7, r1, ip, r1
 800c07a:	4429      	add	r1, r5
 800c07c:	4411      	add	r1, r2
	__asm__ volatile (
 800c07e:	4622      	mov	r2, r4
 800c080:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 800c084:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 800c088:	ea43 0502 	orr.w	r5, r3, r2
 800c08c:	ea4f 18c8 	mov.w	r8, r8, lsl #7
 800c090:	f846 1008 	str.w	r1, [r6, r8]
	for (i = 0; i < 3; i++) {
 800c094:	3001      	adds	r0, #1
 800c096:	2802      	cmp	r0, #2
 800c098:	f77f af54 	ble.w	800bf44 <IMDCT12x3+0x214>
 800c09c:	9c03      	ldr	r4, [sp, #12]
	}

	/* save previous (unwindowed) for overlap - only need samples 6-8, 12-17 */
	for (i = 6; i < 9; i++)
 800c09e:	2306      	movs	r3, #6
 800c0a0:	e008      	b.n	800c0b4 <IMDCT12x3+0x384>
		*xPrev++ = xBuf[i] >> 2;
 800c0a2:	aa28      	add	r2, sp, #160	; 0xa0
 800c0a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c0a8:	f852 2c48 	ldr.w	r2, [r2, #-72]
 800c0ac:	1092      	asrs	r2, r2, #2
 800c0ae:	6022      	str	r2, [r4, #0]
	for (i = 6; i < 9; i++)
 800c0b0:	3301      	adds	r3, #1
		*xPrev++ = xBuf[i] >> 2;
 800c0b2:	3404      	adds	r4, #4
	for (i = 6; i < 9; i++)
 800c0b4:	2b08      	cmp	r3, #8
 800c0b6:	ddf4      	ble.n	800c0a2 <IMDCT12x3+0x372>
	for (i = 12; i < 18; i++)
 800c0b8:	230c      	movs	r3, #12
 800c0ba:	e008      	b.n	800c0ce <IMDCT12x3+0x39e>
		*xPrev++ = xBuf[i] >> 2;
 800c0bc:	aa28      	add	r2, sp, #160	; 0xa0
 800c0be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c0c2:	f852 2c48 	ldr.w	r2, [r2, #-72]
 800c0c6:	1092      	asrs	r2, r2, #2
 800c0c8:	6022      	str	r2, [r4, #0]
	for (i = 12; i < 18; i++)
 800c0ca:	3301      	adds	r3, #1
		*xPrev++ = xBuf[i] >> 2;
 800c0cc:	3404      	adds	r4, #4
	for (i = 12; i < 18; i++)
 800c0ce:	2b11      	cmp	r3, #17
 800c0d0:	ddf4      	ble.n	800c0bc <IMDCT12x3+0x38c>

	xPrev -= 9;
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800c0d2:	9b02      	ldr	r3, [sp, #8]
 800c0d4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800c0d6:	f1a4 0124 	sub.w	r1, r4, #36	; 0x24
 800c0da:	9801      	ldr	r0, [sp, #4]
 800c0dc:	f7ff fd6c 	bl	800bbb8 <FreqInvertRescale>

	return mOut;
}
 800c0e0:	4328      	orrs	r0, r5
 800c0e2:	b029      	add	sp, #164	; 0xa4
 800c0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e8:	6ed9eba1 	.word	0x6ed9eba1
 800c0ec:	0801b7b0 	.word	0x0801b7b0
 800c0f0:	7ba3751d 	.word	0x7ba3751d
 800c0f4:	5a82799a 	.word	0x5a82799a
 800c0f8:	2120fb83 	.word	0x2120fb83

0800c0fc <IMDCT36>:
{
 800c0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c100:	b0af      	sub	sp, #188	; 0xbc
 800c102:	9101      	str	r1, [sp, #4]
 800c104:	9202      	str	r2, [sp, #8]
 800c106:	9305      	str	r3, [sp, #20]
 800c108:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
	xCurr += 17;
 800c10a:	3044      	adds	r0, #68	; 0x44
	if (gb < 7) {
 800c10c:	2e06      	cmp	r6, #6
 800c10e:	f300 8151 	bgt.w	800c3b4 <IMDCT36+0x2b8>
 800c112:	460c      	mov	r4, r1
 800c114:	4615      	mov	r5, r2
		es = 7 - gb;
 800c116:	f1c6 0607 	rsb	r6, r6, #7
	acc1 = acc2 = 0;
 800c11a:	f04f 0c00 	mov.w	ip, #0
 800c11e:	4663      	mov	r3, ip
		for (i = 8; i >= 0; i--) {	
 800c120:	2108      	movs	r1, #8
 800c122:	4684      	mov	ip, r0
 800c124:	4618      	mov	r0, r3
 800c126:	2900      	cmp	r1, #0
 800c128:	db1d      	blt.n	800c166 <IMDCT36+0x6a>
			acc1 = ((*xCurr--) >> es) - acc1;
 800c12a:	4667      	mov	r7, ip
 800c12c:	f857 2908 	ldr.w	r2, [r7], #-8
 800c130:	4132      	asrs	r2, r6
 800c132:	1ad3      	subs	r3, r2, r3
			acc2 = acc1 - acc2;
 800c134:	1a18      	subs	r0, r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800c136:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800c13a:	4132      	asrs	r2, r6
 800c13c:	1ad3      	subs	r3, r2, r3
			xBuf[i+9] = acc2;	/* odd */
 800c13e:	f101 0209 	add.w	r2, r1, #9
 800c142:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800c146:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 800c14a:	f842 0c48 	str.w	r0, [r2, #-72]
			xBuf[i+0] = acc1;	/* even */
 800c14e:	eb0c 0281 	add.w	r2, ip, r1, lsl #2
 800c152:	f842 3c48 	str.w	r3, [r2, #-72]
			xPrev[i] >>= es;
 800c156:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800c15a:	4132      	asrs	r2, r6
 800c15c:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
		for (i = 8; i >= 0; i--) {	
 800c160:	3901      	subs	r1, #1
			acc1 = ((*xCurr--) >> es) - acc1;
 800c162:	46bc      	mov	ip, r7
 800c164:	e7df      	b.n	800c126 <IMDCT36+0x2a>
 800c166:	9603      	str	r6, [sp, #12]
 800c168:	9401      	str	r4, [sp, #4]
 800c16a:	9502      	str	r5, [sp, #8]
	xBuf[9] >>= 1;
 800c16c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800c16e:	107b      	asrs	r3, r7, #1
 800c170:	9304      	str	r3, [sp, #16]
	xBuf[0] >>= 1;
 800c172:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c174:	ea4f 0b62 	mov.w	fp, r2, asr #1
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800c178:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c17a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c17c:	9a20      	ldr	r2, [sp, #128]	; 0x80
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 800c17e:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c180:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 800c184:	9824      	ldr	r0, [sp, #144]	; 0x90
	a1 = x0 - x6;
 800c186:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800c188:	ebab 0606 	sub.w	r6, fp, r6
 800c18c:	9606      	str	r6, [sp, #24]
	a2 = x1 - x5;
 800c18e:	eba1 0a07 	sub.w	sl, r1, r7
	a3 = x1 + x5;
 800c192:	440f      	add	r7, r1
	a4 = x2 - x4;
 800c194:	eba3 0e02 	sub.w	lr, r3, r2
	a5 = x2 + x4;
 800c198:	eb03 0802 	add.w	r8, r3, r2
	a6 = x2 + x8;
 800c19c:	4403      	add	r3, r0
	a7 = x1 + x7;
 800c19e:	4461      	add	r1, ip
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800c1a0:	eba3 0208 	sub.w	r2, r3, r8
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800c1a4:	1a7e      	subs	r6, r7, r1
 800c1a6:	9607      	str	r6, [sp, #28]
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800c1a8:	ebaa 0c0c 	sub.w	ip, sl, ip
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800c1ac:	ebae 0000 	sub.w	r0, lr, r0
 800c1b0:	9008      	str	r0, [sp, #32]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800c1b2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c1b4:	4ec1      	ldr	r6, [pc, #772]	; (800c4bc <IMDCT36+0x3c0>)
 800c1b6:	fb86 e000 	smull	lr, r0, r6, r0
 800c1ba:	4664      	mov	r4, ip
 800c1bc:	fb86 c404 	smull	ip, r4, r6, r4
 800c1c0:	9409      	str	r4, [sp, #36]	; 0x24
 800c1c2:	4644      	mov	r4, r8
 800c1c4:	4ebe      	ldr	r6, [pc, #760]	; (800c4c0 <IMDCT36+0x3c4>)
 800c1c6:	fb86 c404 	smull	ip, r4, r6, r4
 800c1ca:	4dbe      	ldr	r5, [pc, #760]	; (800c4c4 <IMDCT36+0x3c8>)
 800c1cc:	fb85 c303 	smull	ip, r3, r5, r3
 800c1d0:	4692      	mov	sl, r2
 800c1d2:	fb86 2a0a 	smull	r2, sl, r6, sl
 800c1d6:	fb85 2808 	smull	r2, r8, r5, r8
 800c1da:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c1de:	46e1      	mov	r9, ip
 800c1e0:	f105 5570 	add.w	r5, r5, #1006632960	; 0x3c000000
 800c1e4:	f505 254c 	add.w	r5, r5, #835584	; 0xcc000
 800c1e8:	f205 25cb 	addw	r5, r5, #715	; 0x2cb
 800c1ec:	fb85 2909 	smull	r2, r9, r5, r9
 800c1f0:	4eb5      	ldr	r6, [pc, #724]	; (800c4c8 <IMDCT36+0x3cc>)
 800c1f2:	fb86 2101 	smull	r2, r1, r6, r1
 800c1f6:	46be      	mov	lr, r7
 800c1f8:	fb85 2e0e 	smull	r2, lr, r5, lr
 800c1fc:	4667      	mov	r7, ip
 800c1fe:	fb86 2707 	smull	r2, r7, r6, r7
	a12 = x[0] +  (x[6] >> 1);
 800c202:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c204:	eb0b 0262 	add.w	r2, fp, r2, asr #1
	a13 = a12  +  (  m1 << 1);
 800c208:	0040      	lsls	r0, r0, #1
 800c20a:	eb02 0b00 	add.w	fp, r2, r0
	a14 = a12  -  (  m1 << 1);
 800c20e:	1a10      	subs	r0, r2, r0
	a15 = a1   +  ( a11 >> 1);
 800c210:	9d06      	ldr	r5, [sp, #24]
 800c212:	9e08      	ldr	r6, [sp, #32]
 800c214:	eb05 0c66 	add.w	ip, r5, r6, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800c218:	005b      	lsls	r3, r3, #1
 800c21a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	a17 = ( m7 << 1) - (m8 << 1);
 800c21e:	ea4f 0248 	mov.w	r2, r8, lsl #1
 800c222:	ebc2 024a 	rsb	r2, r2, sl, lsl #1
	a18 = a16 + a17;
 800c226:	eb03 0802 	add.w	r8, r3, r2
	a19 = ( m9 << 1) + (m10 << 1);
 800c22a:	0049      	lsls	r1, r1, #1
 800c22c:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800c230:	007f      	lsls	r7, r7, #1
 800c232:	ebc7 074e 	rsb	r7, r7, lr, lsl #1
	a21 = a20 - a19;
 800c236:	eba7 0e01 	sub.w	lr, r7, r1
	a22 = a13 + a16;
 800c23a:	eb0b 0a03 	add.w	sl, fp, r3
	a23 = a14 + a16;
 800c23e:	4403      	add	r3, r0
	a24 = a14 + a17;
 800c240:	eb00 0902 	add.w	r9, r0, r2
	a25 = a13 + a17;
 800c244:	445a      	add	r2, fp
	a26 = a14 - a18;
 800c246:	eba0 0008 	sub.w	r0, r0, r8
	a27 = a13 - a18;
 800c24a:	ebab 0808 	sub.w	r8, fp, r8
	x0 = a22 + a19;			x[0] = x0;
 800c24e:	448a      	add	sl, r1
 800c250:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800c254:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c256:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800c25a:	eb0c 0b0a 	add.w	fp, ip, sl
 800c25e:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
	x2 = a24 + a20;			x[2] = x2;
 800c262:	44b9      	add	r9, r7
 800c264:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
	x3 = a26 - a21;			x[3] = x3;
 800c268:	eba0 000e 	sub.w	r0, r0, lr
 800c26c:	901f      	str	r0, [sp, #124]	; 0x7c
	x4 = a1 - a11;			x[4] = x4;
 800c26e:	4628      	mov	r0, r5
 800c270:	1b80      	subs	r0, r0, r6
 800c272:	9020      	str	r0, [sp, #128]	; 0x80
	x5 = a27 + a21;			x[5] = x5;
 800c274:	eb0e 0008 	add.w	r0, lr, r8
 800c278:	9021      	str	r0, [sp, #132]	; 0x84
	x6 = a25 - a20;			x[6] = x6;
 800c27a:	1bd2      	subs	r2, r2, r7
 800c27c:	9222      	str	r2, [sp, #136]	; 0x88
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800c27e:	ebac 020a 	sub.w	r2, ip, sl
 800c282:	9223      	str	r2, [sp, #140]	; 0x8c
	x8 = a23 - a19;			x[8] = x8;
 800c284:	1a5b      	subs	r3, r3, r1
 800c286:	9324      	str	r3, [sp, #144]	; 0x90
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800c288:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c28a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c28c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 800c28e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800c290:	f8dd b0ac 	ldr.w	fp, [sp, #172]	; 0xac
 800c294:	f8dd c0b0 	ldr.w	ip, [sp, #176]	; 0xb0
 800c298:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
	a1 = x0 - x6;
 800c29a:	9d04      	ldr	r5, [sp, #16]
 800c29c:	eba5 040b 	sub.w	r4, r5, fp
 800c2a0:	9406      	str	r4, [sp, #24]
	a2 = x1 - x5;
 800c2a2:	eba1 0a00 	sub.w	sl, r1, r0
	a3 = x1 + x5;
 800c2a6:	eb01 0e00 	add.w	lr, r1, r0
	a4 = x2 - x4;
 800c2aa:	eba3 0902 	sub.w	r9, r3, r2
	a5 = x2 + x4;
 800c2ae:	eb03 0802 	add.w	r8, r3, r2
	a6 = x2 + x8;
 800c2b2:	443b      	add	r3, r7
	a7 = x1 + x7;
 800c2b4:	4461      	add	r1, ip
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800c2b6:	eba3 0208 	sub.w	r2, r3, r8
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800c2ba:	ebae 0001 	sub.w	r0, lr, r1
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800c2be:	ebaa 0a0c 	sub.w	sl, sl, ip
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800c2c2:	eba9 0707 	sub.w	r7, r9, r7
 800c2c6:	9707      	str	r7, [sp, #28]
 800c2c8:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800c2ca:	4e7c      	ldr	r6, [pc, #496]	; (800c4bc <IMDCT36+0x3c0>)
 800c2cc:	fb86 c707 	smull	ip, r7, r6, r7
 800c2d0:	4654      	mov	r4, sl
 800c2d2:	fb86 c404 	smull	ip, r4, r6, r4
 800c2d6:	46c1      	mov	r9, r8
 800c2d8:	4e79      	ldr	r6, [pc, #484]	; (800c4c0 <IMDCT36+0x3c4>)
 800c2da:	fb86 c909 	smull	ip, r9, r6, r9
 800c2de:	f8cd 9020 	str.w	r9, [sp, #32]
 800c2e2:	4d78      	ldr	r5, [pc, #480]	; (800c4c4 <IMDCT36+0x3c8>)
 800c2e4:	fb85 c303 	smull	ip, r3, r5, r3
 800c2e8:	4692      	mov	sl, r2
 800c2ea:	fb86 2a0a 	smull	r2, sl, r6, sl
 800c2ee:	fb85 2808 	smull	r2, r8, r5, r8
 800c2f2:	4681      	mov	r9, r0
 800c2f4:	f105 5570 	add.w	r5, r5, #1006632960	; 0x3c000000
 800c2f8:	f505 254c 	add.w	r5, r5, #835584	; 0xcc000
 800c2fc:	f205 25cb 	addw	r5, r5, #715	; 0x2cb
 800c300:	fb85 2909 	smull	r2, r9, r5, r9
 800c304:	4e70      	ldr	r6, [pc, #448]	; (800c4c8 <IMDCT36+0x3cc>)
 800c306:	fb86 2101 	smull	r2, r1, r6, r1
 800c30a:	fb85 2e0e 	smull	r2, lr, r5, lr
 800c30e:	fb86 2000 	smull	r2, r0, r6, r0
	a12 = x[0] +  (x[6] >> 1);
 800c312:	9d04      	ldr	r5, [sp, #16]
 800c314:	eb05 0c6b 	add.w	ip, r5, fp, asr #1
	a13 = a12  +  (  m1 << 1);
 800c318:	007a      	lsls	r2, r7, #1
 800c31a:	eb0c 0b02 	add.w	fp, ip, r2
	a14 = a12  -  (  m1 << 1);
 800c31e:	ebac 0702 	sub.w	r7, ip, r2
	a15 = a1   +  ( a11 >> 1);
 800c322:	9d06      	ldr	r5, [sp, #24]
 800c324:	9e07      	ldr	r6, [sp, #28]
 800c326:	eb05 0c66 	add.w	ip, r5, r6, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800c32a:	005b      	lsls	r3, r3, #1
 800c32c:	9a08      	ldr	r2, [sp, #32]
 800c32e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	a17 = ( m7 << 1) - (m8 << 1);
 800c332:	ea4f 0248 	mov.w	r2, r8, lsl #1
 800c336:	ebc2 024a 	rsb	r2, r2, sl, lsl #1
	a18 = a16 + a17;
 800c33a:	eb03 0802 	add.w	r8, r3, r2
	a19 = ( m9 << 1) + (m10 << 1);
 800c33e:	0049      	lsls	r1, r1, #1
 800c340:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800c344:	0040      	lsls	r0, r0, #1
 800c346:	ebc0 004e 	rsb	r0, r0, lr, lsl #1
	a21 = a20 - a19;
 800c34a:	eba0 0e01 	sub.w	lr, r0, r1
	a22 = a13 + a16;
 800c34e:	eb0b 0a03 	add.w	sl, fp, r3
	a23 = a14 + a16;
 800c352:	443b      	add	r3, r7
	a24 = a14 + a17;
 800c354:	eb07 0902 	add.w	r9, r7, r2
	a25 = a13 + a17;
 800c358:	445a      	add	r2, fp
	a26 = a14 - a18;
 800c35a:	eba7 0708 	sub.w	r7, r7, r8
	a27 = a13 - a18;
 800c35e:	ebab 0808 	sub.w	r8, fp, r8
	x0 = a22 + a19;			x[0] = x0;
 800c362:	448a      	add	sl, r1
 800c364:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800c368:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800c36c:	eb0c 0b0a 	add.w	fp, ip, sl
 800c370:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
	x2 = a24 + a20;			x[2] = x2;
 800c374:	4481      	add	r9, r0
 800c376:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
	x3 = a26 - a21;			x[3] = x3;
 800c37a:	eba7 070e 	sub.w	r7, r7, lr
 800c37e:	9728      	str	r7, [sp, #160]	; 0xa0
	x4 = a1 - a11;			x[4] = x4;
 800c380:	1baf      	subs	r7, r5, r6
 800c382:	9729      	str	r7, [sp, #164]	; 0xa4
	x5 = a27 + a21;			x[5] = x5;
 800c384:	eb0e 0708 	add.w	r7, lr, r8
 800c388:	972a      	str	r7, [sp, #168]	; 0xa8
	x6 = a25 - a20;			x[6] = x6;
 800c38a:	1a12      	subs	r2, r2, r0
 800c38c:	922b      	str	r2, [sp, #172]	; 0xac
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800c38e:	ebac 020a 	sub.w	r2, ip, sl
 800c392:	922c      	str	r2, [sp, #176]	; 0xb0
	x8 = a23 - a19;			x[8] = x8;
 800c394:	1a5b      	subs	r3, r3, r1
 800c396:	932d      	str	r3, [sp, #180]	; 0xb4
	if (btPrev == 0 && btCurr == 0) {
 800c398:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c39a:	9a05      	ldr	r2, [sp, #20]
 800c39c:	ea53 0e02 	orrs.w	lr, r3, r2
 800c3a0:	d178      	bne.n	800c494 <IMDCT36+0x398>
	mOut = 0;
 800c3a2:	4677      	mov	r7, lr
		wp = fastWin36;
 800c3a4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800c4d4 <IMDCT36+0x3d8>
	cp = c18 + 8;
 800c3a8:	4b48      	ldr	r3, [pc, #288]	; (800c4cc <IMDCT36+0x3d0>)
	xp = xBuf + 8;
 800c3aa:	aa24      	add	r2, sp, #144	; 0x90
 800c3ac:	9e03      	ldr	r6, [sp, #12]
 800c3ae:	9c01      	ldr	r4, [sp, #4]
 800c3b0:	9d02      	ldr	r5, [sp, #8]
 800c3b2:	e05e      	b.n	800c472 <IMDCT36+0x376>
	acc1 = acc2 = 0;
 800c3b4:	2700      	movs	r7, #0
 800c3b6:	463b      	mov	r3, r7
		for (i = 8; i >= 0; i--) {	
 800c3b8:	2108      	movs	r1, #8
 800c3ba:	9c01      	ldr	r4, [sp, #4]
 800c3bc:	9d02      	ldr	r5, [sp, #8]
 800c3be:	2900      	cmp	r1, #0
 800c3c0:	db15      	blt.n	800c3ee <IMDCT36+0x2f2>
			acc1 = (*xCurr--) - acc1;
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	f852 6908 	ldr.w	r6, [r2], #-8
 800c3c8:	1af3      	subs	r3, r6, r3
			acc2 = acc1 - acc2;
 800c3ca:	1bdf      	subs	r7, r3, r7
			acc1 = (*xCurr--) - acc1;
 800c3cc:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800c3d0:	1ac3      	subs	r3, r0, r3
			xBuf[i+9] = acc2;	/* odd */
 800c3d2:	f101 0009 	add.w	r0, r1, #9
 800c3d6:	ae2e      	add	r6, sp, #184	; 0xb8
 800c3d8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800c3dc:	f840 7c48 	str.w	r7, [r0, #-72]
			xBuf[i+0] = acc1;	/* even */
 800c3e0:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800c3e4:	f840 3c48 	str.w	r3, [r0, #-72]
		for (i = 8; i >= 0; i--) {	
 800c3e8:	3901      	subs	r1, #1
			acc1 = (*xCurr--) - acc1;
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	e7e7      	b.n	800c3be <IMDCT36+0x2c2>
 800c3ee:	9401      	str	r4, [sp, #4]
 800c3f0:	9502      	str	r5, [sp, #8]
		es = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	9303      	str	r3, [sp, #12]
 800c3f6:	e6b9      	b.n	800c16c <IMDCT36+0x70>
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800c3f8:	f1a3 0804 	sub.w	r8, r3, #4
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c400:	f1a2 0c04 	sub.w	ip, r2, #4
 800c404:	6813      	ldr	r3, [r2, #0]
 800c406:	fb80 2101 	smull	r2, r1, r0, r1
			xe >>= 2;
 800c40a:	ea4f 0aa3 	mov.w	sl, r3, asr #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800c40e:	4620      	mov	r0, r4
 800c410:	f850 3b04 	ldr.w	r3, [r0], #4
 800c414:	f1c3 0b00 	rsb	fp, r3, #0
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 800c418:	eba1 020a 	sub.w	r2, r1, sl
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800c41c:	4451      	add	r1, sl
 800c41e:	6021      	str	r1, [r4, #0]
			t = s - d;
 800c420:	ebab 0102 	sub.w	r1, fp, r2
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 800c424:	464c      	mov	r4, r9
 800c426:	f854 ab08 	ldr.w	sl, [r4], #8
 800c42a:	fb81 ba0a 	smull	fp, sl, r1, sl
 800c42e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
			yHi = (s + (MULSHIFT32(t, *wp++) << 2));
 800c432:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c436:	fb81 9202 	smull	r9, r2, r1, r2
 800c43a:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 800c43e:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800c442:	f845 a003 	str.w	sl, [r5, r3]
			y[(17-i)*NBANDS] =  yHi;
 800c446:	f1ce 0311 	rsb	r3, lr, #17
 800c44a:	01db      	lsls	r3, r3, #7
 800c44c:	50ea      	str	r2, [r5, r3]
	__asm__ volatile (
 800c44e:	2300      	movs	r3, #0
 800c450:	4619      	mov	r1, r3
 800c452:	ea8a 71ea 	eor.w	r1, sl, sl, asr #31
 800c456:	eba1 71ea 	sub.w	r1, r1, sl, asr #31
			mOut |= FASTABS(yLo);
 800c45a:	430f      	orrs	r7, r1
 800c45c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800c460:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
			mOut |= FASTABS(yHi);
 800c464:	431f      	orrs	r7, r3
		for (i = 0; i < 9; i++) {
 800c466:	f10e 0e01 	add.w	lr, lr, #1
			yHi = (s + (MULSHIFT32(t, *wp++) << 2));
 800c46a:	46a1      	mov	r9, r4
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800c46c:	4643      	mov	r3, r8
 800c46e:	4662      	mov	r2, ip
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800c470:	4604      	mov	r4, r0
		for (i = 0; i < 9; i++) {
 800c472:	f1be 0f08 	cmp.w	lr, #8
 800c476:	ddbf      	ble.n	800c3f8 <IMDCT36+0x2fc>
 800c478:	9603      	str	r6, [sp, #12]
 800c47a:	9401      	str	r4, [sp, #4]
 800c47c:	9502      	str	r5, [sp, #8]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800c47e:	9b03      	ldr	r3, [sp, #12]
 800c480:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800c482:	9901      	ldr	r1, [sp, #4]
 800c484:	3924      	subs	r1, #36	; 0x24
 800c486:	9802      	ldr	r0, [sp, #8]
 800c488:	f7ff fb96 	bl	800bbb8 <FreqInvertRescale>
}
 800c48c:	4338      	orrs	r0, r7
 800c48e:	b02f      	add	sp, #188	; 0xbc
 800c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		WinPrevious(xPrev, xPrevWin, btPrev);
 800c494:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800c496:	a90a      	add	r1, sp, #40	; 0x28
 800c498:	9c01      	ldr	r4, [sp, #4]
 800c49a:	4620      	mov	r0, r4
 800c49c:	f7ff fae4 	bl	800ba68 <WinPrevious>
		wp = imdctWin[btCurr];
 800c4a0:	9b05      	ldr	r3, [sp, #20]
 800c4a2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800c4a6:	480a      	ldr	r0, [pc, #40]	; (800c4d0 <IMDCT36+0x3d4>)
 800c4a8:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	cp = c18 + 8;
 800c4ac:	4b07      	ldr	r3, [pc, #28]	; (800c4cc <IMDCT36+0x3d0>)
	xp = xBuf + 8;
 800c4ae:	aa24      	add	r2, sp, #144	; 0x90
	mOut = 0;
 800c4b0:	2700      	movs	r7, #0
		for (i = 0; i < 9; i++) {
 800c4b2:	4639      	mov	r1, r7
 800c4b4:	9e03      	ldr	r6, [sp, #12]
 800c4b6:	9d02      	ldr	r5, [sp, #8]
 800c4b8:	e04e      	b.n	800c558 <IMDCT36+0x45c>
 800c4ba:	bf00      	nop
 800c4bc:	6ed9eba1 	.word	0x6ed9eba1
 800c4c0:	620dbe8b 	.word	0x620dbe8b
 800c4c4:	163a1a7e 	.word	0x163a1a7e
 800c4c8:	7e0e2e32 	.word	0x7e0e2e32
 800c4cc:	0801b454 	.word	0x0801b454
 800c4d0:	0801b690 	.word	0x0801b690
 800c4d4:	0801b458 	.word	0x0801b458
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800c4d8:	f1a3 0804 	sub.w	r8, r3, #4
 800c4dc:	f8d3 c000 	ldr.w	ip, [r3]
 800c4e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c4e2:	f1a2 0e04 	sub.w	lr, r2, #4
 800c4e6:	6812      	ldr	r2, [r2, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800c4e8:	fb8c 9303 	smull	r9, r3, ip, r3
			xe >>= 2;
 800c4ec:	1092      	asrs	r2, r2, #2
			d = xe - xo;
 800c4ee:	eba2 0903 	sub.w	r9, r2, r3
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800c4f2:	f104 0c04 	add.w	ip, r4, #4
 800c4f6:	4413      	add	r3, r2
 800c4f8:	6023      	str	r3, [r4, #0]
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 800c4fa:	ab2e      	add	r3, sp, #184	; 0xb8
 800c4fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c500:	f853 4c90 	ldr.w	r4, [r3, #-144]
 800c504:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 800c508:	fb89 3202 	smull	r3, r2, r9, r2
 800c50c:	4414      	add	r4, r2
 800c50e:	00a4      	lsls	r4, r4, #2
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800c510:	f1c1 0311 	rsb	r3, r1, #17
 800c514:	aa2e      	add	r2, sp, #184	; 0xb8
 800c516:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c51a:	f852 ac90 	ldr.w	sl, [r2, #-144]
 800c51e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c522:	fb89 b202 	smull	fp, r2, r9, r2
 800c526:	4452      	add	r2, sl
 800c528:	0092      	lsls	r2, r2, #2
			y[(i)*NBANDS]    = yLo;
 800c52a:	ea4f 19c1 	mov.w	r9, r1, lsl #7
 800c52e:	f845 4009 	str.w	r4, [r5, r9]
			y[(17-i)*NBANDS] = yHi;
 800c532:	01db      	lsls	r3, r3, #7
 800c534:	50ea      	str	r2, [r5, r3]
	__asm__ volatile (
 800c536:	2300      	movs	r3, #0
 800c538:	4699      	mov	r9, r3
 800c53a:	ea84 79e4 	eor.w	r9, r4, r4, asr #31
 800c53e:	eba9 79e4 	sub.w	r9, r9, r4, asr #31
			mOut |= FASTABS(yLo);
 800c542:	ea47 0709 	orr.w	r7, r7, r9
 800c546:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800c54a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
			mOut |= FASTABS(yHi);
 800c54e:	431f      	orrs	r7, r3
		for (i = 0; i < 9; i++) {
 800c550:	3101      	adds	r1, #1
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800c552:	4643      	mov	r3, r8
 800c554:	4672      	mov	r2, lr
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800c556:	4664      	mov	r4, ip
		for (i = 0; i < 9; i++) {
 800c558:	2908      	cmp	r1, #8
 800c55a:	ddbd      	ble.n	800c4d8 <IMDCT36+0x3dc>
 800c55c:	9603      	str	r6, [sp, #12]
 800c55e:	9401      	str	r4, [sp, #4]
 800c560:	9502      	str	r5, [sp, #8]
 800c562:	e78c      	b.n	800c47e <IMDCT36+0x382>

0800c564 <HybridTransform>:
 *                (including overlap-add)
 *
 * TODO:        examine mixedBlock/winSwitch logic carefully (test he_mode.bit)
 **************************************************************************************/
static int HybridTransform(int *xCurr, int *xPrev, int y[BLOCK_SIZE][NBANDS], SideInfoSub *sis, BlockCount *bc)
{
 800c564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c568:	b097      	sub	sp, #92	; 0x5c
 800c56a:	4680      	mov	r8, r0
 800c56c:	4689      	mov	r9, r1
 800c56e:	4616      	mov	r6, r2
 800c570:	469a      	mov	sl, r3
 800c572:	9f20      	ldr	r7, [sp, #128]	; 0x80

	ASSERT(bc->nBlocksLong  <= NBANDS);
	ASSERT(bc->nBlocksTotal <= NBANDS);
	ASSERT(bc->nBlocksPrev  <= NBANDS);

	mOut = 0;
 800c574:	2500      	movs	r5, #0

	/* do long blocks, if any */
	for(i = 0; i < bc->nBlocksLong; i++) {
 800c576:	462c      	mov	r4, r5
 800c578:	e014      	b.n	800c5a4 <HybridTransform+0x40>
		/* currWinIdx picks the right window for long blocks (if mixed, long blocks use window type 0) */
		currWinIdx = sis->blockType;
		if (sis->mixedBlock && i < bc->currWinSwitch) 
			currWinIdx = 0;

		prevWinIdx = bc->prevType;
 800c57a:	68fa      	ldr	r2, [r7, #12]
		if (i < bc->prevWinSwitch)
 800c57c:	6939      	ldr	r1, [r7, #16]
 800c57e:	42a1      	cmp	r1, r4
 800c580:	dd00      	ble.n	800c584 <HybridTransform+0x20>
			 prevWinIdx = 0;
 800c582:	2200      	movs	r2, #0

		/* do 36-point IMDCT, including windowing and overlap-add */
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 800c584:	69b9      	ldr	r1, [r7, #24]
 800c586:	9102      	str	r1, [sp, #8]
 800c588:	9401      	str	r4, [sp, #4]
 800c58a:	9200      	str	r2, [sp, #0]
 800c58c:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 800c590:	4649      	mov	r1, r9
 800c592:	4640      	mov	r0, r8
 800c594:	f7ff fdb2 	bl	800c0fc <IMDCT36>
 800c598:	4305      	orrs	r5, r0
		xCurr += 18;
 800c59a:	f108 0848 	add.w	r8, r8, #72	; 0x48
		xPrev += 9;
 800c59e:	f109 0924 	add.w	r9, r9, #36	; 0x24
	for(i = 0; i < bc->nBlocksLong; i++) {
 800c5a2:	3401      	adds	r4, #1
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	42a3      	cmp	r3, r4
 800c5a8:	dd19      	ble.n	800c5de <HybridTransform+0x7a>
		currWinIdx = sis->blockType;
 800c5aa:	f8da 3014 	ldr.w	r3, [sl, #20]
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800c5ae:	f8da 2018 	ldr.w	r2, [sl, #24]
 800c5b2:	2a00      	cmp	r2, #0
 800c5b4:	d0e1      	beq.n	800c57a <HybridTransform+0x16>
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	42a2      	cmp	r2, r4
 800c5ba:	ddde      	ble.n	800c57a <HybridTransform+0x16>
			currWinIdx = 0;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	e7dc      	b.n	800c57a <HybridTransform+0x16>

		prevWinIdx = bc->prevType;
		if (i < bc->prevWinSwitch)
			 prevWinIdx = 0;
		
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	9201      	str	r2, [sp, #4]
 800c5c4:	9400      	str	r4, [sp, #0]
 800c5c6:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 800c5ca:	4649      	mov	r1, r9
 800c5cc:	4640      	mov	r0, r8
 800c5ce:	f7ff fbaf 	bl	800bd30 <IMDCT12x3>
 800c5d2:	4305      	orrs	r5, r0
		xCurr += 18;
 800c5d4:	f108 0848 	add.w	r8, r8, #72	; 0x48
		xPrev += 9;
 800c5d8:	f109 0924 	add.w	r9, r9, #36	; 0x24
	for (   ; i < bc->nBlocksTotal; i++) {
 800c5dc:	3401      	adds	r4, #1
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	dd05      	ble.n	800c5f0 <HybridTransform+0x8c>
		prevWinIdx = bc->prevType;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
		if (i < bc->prevWinSwitch)
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	42a2      	cmp	r2, r4
 800c5ea:	dde9      	ble.n	800c5c0 <HybridTransform+0x5c>
			 prevWinIdx = 0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	e7e7      	b.n	800c5c0 <HybridTransform+0x5c>
	}
	nBlocksOut = i;
 800c5f0:	46a0      	mov	r8, r4
 800c5f2:	e03a      	b.n	800c66a <HybridTransform+0x106>
		WinPrevious(xPrev, xPrevWin, prevWinIdx);

		nonZero = 0;
		fiBit = i << 31;
		for (j = 0; j < 9; j++) {
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 800c5f4:	0053      	lsls	r3, r2, #1
 800c5f6:	a916      	add	r1, sp, #88	; 0x58
 800c5f8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c5fc:	f851 1c48 	ldr.w	r1, [r1, #-72]
 800c600:	ea4f 0a81 	mov.w	sl, r1, lsl #2
			nonZero |= xp;
 800c604:	ea40 000a 	orr.w	r0, r0, sl
			y[2*j+0][i] = xp;
 800c608:	0211      	lsls	r1, r2, #8
 800c60a:	eb06 0c01 	add.w	ip, r6, r1
 800c60e:	f84c a024 	str.w	sl, [ip, r4, lsl #2]
 800c612:	f04f 0c00 	mov.w	ip, #0
 800c616:	46e3      	mov	fp, ip
 800c618:	ea8a 7bea 	eor.w	fp, sl, sl, asr #31
 800c61c:	ebab 7bea 	sub.w	fp, fp, sl, asr #31
			mOut |= FASTABS(xp);
 800c620:	ea45 050b 	orr.w	r5, r5, fp

			/* frequency inversion on odd blocks/odd samples (flip sign if i odd, j odd) */
			xp = xPrevWin[2*j+1] << 2;
 800c624:	3301      	adds	r3, #1
 800c626:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 800c62a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800c62e:	f853 ac48 	ldr.w	sl, [r3, #-72]
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 800c632:	ea4f 73ee 	mov.w	r3, lr, asr #31
 800c636:	ea83 038a 	eor.w	r3, r3, sl, lsl #2
 800c63a:	f004 0a01 	and.w	sl, r4, #1
 800c63e:	4453      	add	r3, sl
			nonZero |= xp;
 800c640:	4318      	orrs	r0, r3
			y[2*j+1][i] = xp;
 800c642:	3180      	adds	r1, #128	; 0x80
 800c644:	4431      	add	r1, r6
 800c646:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
 800c64a:	4661      	mov	r1, ip
 800c64c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800c650:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
			mOut |= FASTABS(xp);
 800c654:	430d      	orrs	r5, r1

			xPrev[j] = 0;
 800c656:	f849 c022 	str.w	ip, [r9, r2, lsl #2]
		for (j = 0; j < 9; j++) {
 800c65a:	3201      	adds	r2, #1
 800c65c:	2a08      	cmp	r2, #8
 800c65e:	ddc9      	ble.n	800c5f4 <HybridTransform+0x90>
		}
		xPrev += 9;
 800c660:	f109 0924 	add.w	r9, r9, #36	; 0x24
		if (nonZero)
 800c664:	b100      	cbz	r0, 800c668 <HybridTransform+0x104>
			nBlocksOut = i;
 800c666:	46a0      	mov	r8, r4
	for (   ; i < bc->nBlocksPrev; i++) {
 800c668:	3401      	adds	r4, #1
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	dd16      	ble.n	800c69e <HybridTransform+0x13a>
		prevWinIdx = bc->prevType;
 800c670:	68fa      	ldr	r2, [r7, #12]
		if (i < bc->prevWinSwitch)
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	42a3      	cmp	r3, r4
 800c676:	dd00      	ble.n	800c67a <HybridTransform+0x116>
			 prevWinIdx = 0;
 800c678:	2200      	movs	r2, #0
		WinPrevious(xPrev, xPrevWin, prevWinIdx);
 800c67a:	a904      	add	r1, sp, #16
 800c67c:	4648      	mov	r0, r9
 800c67e:	f7ff f9f3 	bl	800ba68 <WinPrevious>
		fiBit = i << 31;
 800c682:	ea4f 7ec4 	mov.w	lr, r4, lsl #31
		nonZero = 0;
 800c686:	2000      	movs	r0, #0
		for (j = 0; j < 9; j++) {
 800c688:	4602      	mov	r2, r0
 800c68a:	e7e7      	b.n	800c65c <HybridTransform+0xf8>
	}
	
	/* clear rest of blocks */
	for (   ; i < 32; i++) {
		for (j = 0; j < 18; j++) 
			y[j][i] = 0;
 800c68c:	eb06 12c3 	add.w	r2, r6, r3, lsl #7
 800c690:	2100      	movs	r1, #0
 800c692:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
		for (j = 0; j < 18; j++) 
 800c696:	3301      	adds	r3, #1
 800c698:	2b11      	cmp	r3, #17
 800c69a:	ddf7      	ble.n	800c68c <HybridTransform+0x128>
	for (   ; i < 32; i++) {
 800c69c:	3401      	adds	r4, #1
 800c69e:	2c1f      	cmp	r4, #31
 800c6a0:	dc01      	bgt.n	800c6a6 <HybridTransform+0x142>
		for (j = 0; j < 18; j++) 
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	e7f8      	b.n	800c698 <HybridTransform+0x134>
	if (!x)
 800c6a6:	b15d      	cbz	r5, 800c6c0 <HybridTransform+0x15c>
	numZeros = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	e001      	b.n	800c6b0 <HybridTransform+0x14c>
		numZeros++;
 800c6ac:	3301      	adds	r3, #1
		x <<= 1;
 800c6ae:	006d      	lsls	r5, r5, #1
	while (!(x & 0x80000000)) {
 800c6b0:	2d00      	cmp	r5, #0
 800c6b2:	dafb      	bge.n	800c6ac <HybridTransform+0x148>
	}

	bc->gbOut = CLZ(mOut) - 1;
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	61fb      	str	r3, [r7, #28]

	return nBlocksOut;
}
 800c6b8:	4640      	mov	r0, r8
 800c6ba:	b017      	add	sp, #92	; 0x5c
 800c6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (sizeof(int) * 8);
 800c6c0:	2320      	movs	r3, #32
 800c6c2:	e7f7      	b.n	800c6b4 <HybridTransform+0x150>

0800c6c4 <xmp3fixpt_IMDCT>:
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	f000 80d1 	beq.w	800c86c <xmp3fixpt_IMDCT+0x1a8>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	6800      	ldr	r0, [r0, #0]
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f000 80cf 	beq.w	800c872 <xmp3fixpt_IMDCT+0x1ae>
{
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	b08d      	sub	sp, #52	; 0x34
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800c6da:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800c6de:	f1b8 0f00 	cmp.w	r8, #0
 800c6e2:	f000 80c9 	beq.w	800c878 <xmp3fixpt_IMDCT+0x1b4>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800c6e6:	f8d3 900c 	ldr.w	r9, [r3, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800c6ea:	f1b9 0f00 	cmp.w	r9, #0
 800c6ee:	f000 80c6 	beq.w	800c87e <xmp3fixpt_IMDCT+0x1ba>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800c6f2:	695e      	ldr	r6, [r3, #20]
 800c6f4:	2e00      	cmp	r6, #0
 800c6f6:	f000 80c5 	beq.w	800c884 <xmp3fixpt_IMDCT+0x1c0>
	/* anti-aliasing done on whole long blocks only
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800c6fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c6fc:	7800      	ldrb	r0, [r0, #0]
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f040 80a1 	bne.w	800c846 <xmp3fixpt_IMDCT+0x182>
 800c704:	2008      	movs	r0, #8
 800c706:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800c70a:	4860      	ldr	r0, [pc, #384]	; (800c88c <xmp3fixpt_IMDCT+0x1c8>)
 800c70c:	fb80 4003 	smull	r4, r0, r0, r3
 800c710:	17db      	asrs	r3, r3, #31
 800c712:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 800c716:	b21b      	sxth	r3, r3
 800c718:	9303      	str	r3, [sp, #12]
	if (si->sis[gr][ch].blockType != 2) {
 800c71a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 800c71e:	00c3      	lsls	r3, r0, #3
 800c720:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 800c724:	0120      	lsls	r0, r4, #4
 800c726:	4403      	add	r3, r0
 800c728:	4443      	add	r3, r8
 800c72a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	f000 808c 	beq.w	800c84a <xmp3fixpt_IMDCT+0x186>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800c732:	f502 6390 	add.w	r3, r2, #1152	; 0x480
 800c736:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c73a:	3307      	adds	r3, #7
 800c73c:	4853      	ldr	r0, [pc, #332]	; (800c88c <xmp3fixpt_IMDCT+0x1c8>)
 800c73e:	fb80 4003 	smull	r4, r0, r0, r3
 800c742:	17dd      	asrs	r5, r3, #31
 800c744:	ebc5 05a0 	rsb	r5, r5, r0, asr #2
 800c748:	3501      	adds	r5, #1
 800c74a:	2d20      	cmp	r5, #32
 800c74c:	bfa8      	it	ge
 800c74e:	2520      	movge	r5, #32
 800c750:	9504      	str	r5, [sp, #16]
		nBfly = bc.nBlocksLong - 1;
 800c752:	3d01      	subs	r5, #1
 800c754:	4614      	mov	r4, r2
 800c756:	460f      	mov	r7, r1
		/* all short transforms */
		bc.nBlocksLong = 0;
		nBfly = 0;
	}
 
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800c758:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 800c75c:	eb0b 0302 	add.w	r3, fp, r2
 800c760:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 800c764:	44ca      	add	sl, r9
 800c766:	4629      	mov	r1, r5
 800c768:	4650      	mov	r0, sl
 800c76a:	f7ff f8a7 	bl	800b8bc <AntiAlias>
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800c76e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800c772:	006b      	lsls	r3, r5, #1
 800c774:	3308      	adds	r3, #8
 800c776:	f504 6290 	add.w	r2, r4, #1152	; 0x480
 800c77a:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
 800c77e:	428b      	cmp	r3, r1
 800c780:	bfb8      	it	lt
 800c782:	460b      	movlt	r3, r1
 800c784:	f849 3022 	str.w	r3, [r9, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);

	/* for readability, use a struct instead of passing a million parameters to HybridTransform() */
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800c788:	3311      	adds	r3, #17
 800c78a:	4a40      	ldr	r2, [pc, #256]	; (800c88c <xmp3fixpt_IMDCT+0x1c8>)
 800c78c:	fb82 1203 	smull	r1, r2, r2, r3
 800c790:	17db      	asrs	r3, r3, #31
 800c792:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800c796:	9305      	str	r3, [sp, #20]
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800c798:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 800c79c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c7a0:	9306      	str	r3, [sp, #24]
	bc.prevType = mi->prevType[ch];
 800c7a2:	f204 63c2 	addw	r3, r4, #1730	; 0x6c2
 800c7a6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c7aa:	9307      	str	r3, [sp, #28]
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 800c7ac:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
 800c7b0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c7b4:	9308      	str	r3, [sp, #32]
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800c7b6:	44a3      	add	fp, r4
 800c7b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c7bc:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
 800c7c0:	010a      	lsls	r2, r1, #4
 800c7c2:	4413      	add	r3, r2
 800c7c4:	4443      	add	r3, r8
 800c7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c8:	b103      	cbz	r3, 800c7cc <xmp3fixpt_IMDCT+0x108>
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	9309      	str	r3, [sp, #36]	; 0x24
	bc.gbIn = hi->gb[ch];
 800c7ce:	f204 4382 	addw	r3, r4, #1154	; 0x482
 800c7d2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c7d6:	930a      	str	r3, [sp, #40]	; 0x28

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800c7d8:	00e5      	lsls	r5, r4, #3
 800c7da:	192b      	adds	r3, r5, r4
 800c7dc:	01d9      	lsls	r1, r3, #7
 800c7de:	f501 5190 	add.w	r1, r1, #4608	; 0x1200
 800c7e2:	192b      	adds	r3, r5, r4
 800c7e4:	021a      	lsls	r2, r3, #8
 800c7e6:	1928      	adds	r0, r5, r4
 800c7e8:	00c3      	lsls	r3, r0, #3
 800c7ea:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800c7ee:	eb09 0c07 	add.w	ip, r9, r7
 800c7f2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 800c7f6:	4403      	add	r3, r0
 800c7f8:	3328      	adds	r3, #40	; 0x28
 800c7fa:	a804      	add	r0, sp, #16
 800c7fc:	9000      	str	r0, [sp, #0]
 800c7fe:	4443      	add	r3, r8
 800c800:	4432      	add	r2, r6
 800c802:	4431      	add	r1, r6
 800c804:	4650      	mov	r0, sl
 800c806:	f7ff fead 	bl	800c564 <HybridTransform>
 800c80a:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 800c80e:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800c812:	4425      	add	r5, r4
 800c814:	00eb      	lsls	r3, r5, #3
 800c816:	444f      	add	r7, r9
 800c818:	013a      	lsls	r2, r7, #4
 800c81a:	4413      	add	r3, r2
 800c81c:	4498      	add	r8, r3
 800c81e:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
 800c822:	f204 63c2 	addw	r3, r4, #1730	; 0x6c2
 800c826:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 800c82a:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
 800c82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c830:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	mi->gb[ch] = bc.gbOut;
 800c834:	f204 64c6 	addw	r4, r4, #1734	; 0x6c6
 800c838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c83a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 800c83e:	2000      	movs	r0, #0
}
 800c840:	b00d      	add	sp, #52	; 0x34
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800c846:	2006      	movs	r0, #6
 800c848:	e75d      	b.n	800c706 <xmp3fixpt_IMDCT+0x42>
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 800c84a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 800c84e:	00c3      	lsls	r3, r0, #3
 800c850:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 800c854:	0120      	lsls	r0, r4, #4
 800c856:	4403      	add	r3, r0
 800c858:	4443      	add	r3, r8
 800c85a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800c85c:	b11d      	cbz	r5, 800c866 <xmp3fixpt_IMDCT+0x1a2>
		bc.nBlocksLong = blockCutoff;	
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	9304      	str	r3, [sp, #16]
		nBfly = bc.nBlocksLong - 1;
 800c862:	1e5d      	subs	r5, r3, #1
 800c864:	e776      	b.n	800c754 <xmp3fixpt_IMDCT+0x90>
		bc.nBlocksLong = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	9304      	str	r3, [sp, #16]
 800c86a:	e773      	b.n	800c754 <xmp3fixpt_IMDCT+0x90>
		return -1;
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	4770      	bx	lr
 800c872:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c876:	4770      	bx	lr
		return -1;
 800c878:	f04f 30ff 	mov.w	r0, #4294967295
 800c87c:	e7e0      	b.n	800c840 <xmp3fixpt_IMDCT+0x17c>
 800c87e:	f04f 30ff 	mov.w	r0, #4294967295
 800c882:	e7dd      	b.n	800c840 <xmp3fixpt_IMDCT+0x17c>
 800c884:	f04f 30ff 	mov.w	r0, #4294967295
 800c888:	e7da      	b.n	800c840 <xmp3fixpt_IMDCT+0x17c>
 800c88a:	bf00      	nop
 800c88c:	38e38e39 	.word	0x38e38e39

0800c890 <xmp3fixpt_PolyphaseMono>:
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 *                (note max filter gain - see polyCoef[] comments)
 **************************************************************************************/
void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
{	
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	b08b      	sub	sp, #44	; 0x2c
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = rndVal;

	MC0M(0)
 800c896:	f8d2 8000 	ldr.w	r8, [r2]
 800c89a:	680b      	ldr	r3, [r1, #0]
 800c89c:	f8d1 c05c 	ldr.w	ip, [r1, #92]	; 0x5c
}

//mw
static __inline Word64 MADD64(Word64 sum, int x, int y)
{
   return (sum + ((int64_t)x * y));
 800c8a0:	17df      	asrs	r7, r3, #31
 800c8a2:	ea4f 7ae8 	mov.w	sl, r8, asr #31
 800c8a6:	fb08 f407 	mul.w	r4, r8, r7
 800c8aa:	fb03 440a 	mla	r4, r3, sl, r4
 800c8ae:	fba8 5603 	umull	r5, r6, r8, r3
 800c8b2:	4426      	add	r6, r4
 800c8b4:	f115 7800 	adds.w	r8, r5, #33554432	; 0x2000000
 800c8b8:	f146 0900 	adc.w	r9, r6, #0
 800c8bc:	6853      	ldr	r3, [r2, #4]
 800c8be:	425b      	negs	r3, r3
 800c8c0:	4666      	mov	r6, ip
 800c8c2:	17f7      	asrs	r7, r6, #31
 800c8c4:	17dd      	asrs	r5, r3, #31
 800c8c6:	fb03 f607 	mul.w	r6, r3, r7
 800c8ca:	fb0c 6605 	mla	r6, ip, r5, r6
 800c8ce:	fba3 450c 	umull	r4, r5, r3, ip
 800c8d2:	4435      	add	r5, r6
 800c8d4:	eb18 0604 	adds.w	r6, r8, r4
 800c8d8:	eb49 0705 	adc.w	r7, r9, r5
 800c8dc:	46b0      	mov	r8, r6
 800c8de:	46b9      	mov	r9, r7
	MC0M(1)
 800c8e0:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800c8e4:	684b      	ldr	r3, [r1, #4]
 800c8e6:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
 800c8ea:	17df      	asrs	r7, r3, #31
 800c8ec:	4654      	mov	r4, sl
 800c8ee:	17e5      	asrs	r5, r4, #31
 800c8f0:	fb0a f607 	mul.w	r6, sl, r7
 800c8f4:	fb03 6605 	mla	r6, r3, r5, r6
 800c8f8:	fbaa ab03 	umull	sl, fp, sl, r3
 800c8fc:	44b3      	add	fp, r6
 800c8fe:	eb18 080a 	adds.w	r8, r8, sl
 800c902:	eb49 090b 	adc.w	r9, r9, fp
 800c906:	68d3      	ldr	r3, [r2, #12]
 800c908:	425b      	negs	r3, r3
 800c90a:	4666      	mov	r6, ip
 800c90c:	17f7      	asrs	r7, r6, #31
 800c90e:	17dd      	asrs	r5, r3, #31
 800c910:	fb03 f607 	mul.w	r6, r3, r7
 800c914:	fb0c 6605 	mla	r6, ip, r5, r6
 800c918:	fba3 450c 	umull	r4, r5, r3, ip
 800c91c:	4435      	add	r5, r6
 800c91e:	eb18 0604 	adds.w	r6, r8, r4
 800c922:	eb49 0705 	adc.w	r7, r9, r5
 800c926:	46b0      	mov	r8, r6
 800c928:	46b9      	mov	r9, r7
	MC0M(2)
 800c92a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c92e:	688b      	ldr	r3, [r1, #8]
 800c930:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
 800c934:	17df      	asrs	r7, r3, #31
 800c936:	4654      	mov	r4, sl
 800c938:	17e5      	asrs	r5, r4, #31
 800c93a:	fb0a f607 	mul.w	r6, sl, r7
 800c93e:	fb03 6605 	mla	r6, r3, r5, r6
 800c942:	fbaa ab03 	umull	sl, fp, sl, r3
 800c946:	44b3      	add	fp, r6
 800c948:	eb18 080a 	adds.w	r8, r8, sl
 800c94c:	eb49 090b 	adc.w	r9, r9, fp
 800c950:	6953      	ldr	r3, [r2, #20]
 800c952:	425b      	negs	r3, r3
 800c954:	4666      	mov	r6, ip
 800c956:	17f7      	asrs	r7, r6, #31
 800c958:	17dd      	asrs	r5, r3, #31
 800c95a:	fb03 f607 	mul.w	r6, r3, r7
 800c95e:	fb0c 6605 	mla	r6, ip, r5, r6
 800c962:	fba3 450c 	umull	r4, r5, r3, ip
 800c966:	4435      	add	r5, r6
 800c968:	eb18 0604 	adds.w	r6, r8, r4
 800c96c:	eb49 0705 	adc.w	r7, r9, r5
 800c970:	46b0      	mov	r8, r6
 800c972:	46b9      	mov	r9, r7
	MC0M(3)
 800c974:	f8d2 a018 	ldr.w	sl, [r2, #24]
 800c978:	68cb      	ldr	r3, [r1, #12]
 800c97a:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
 800c97e:	17df      	asrs	r7, r3, #31
 800c980:	4654      	mov	r4, sl
 800c982:	17e5      	asrs	r5, r4, #31
 800c984:	fb0a f607 	mul.w	r6, sl, r7
 800c988:	fb03 6605 	mla	r6, r3, r5, r6
 800c98c:	fbaa ab03 	umull	sl, fp, sl, r3
 800c990:	44b3      	add	fp, r6
 800c992:	eb18 080a 	adds.w	r8, r8, sl
 800c996:	eb49 090b 	adc.w	r9, r9, fp
 800c99a:	69d3      	ldr	r3, [r2, #28]
 800c99c:	425b      	negs	r3, r3
 800c99e:	4666      	mov	r6, ip
 800c9a0:	17f7      	asrs	r7, r6, #31
 800c9a2:	17dd      	asrs	r5, r3, #31
 800c9a4:	fb03 f607 	mul.w	r6, r3, r7
 800c9a8:	fb0c 6605 	mla	r6, ip, r5, r6
 800c9ac:	fba3 450c 	umull	r4, r5, r3, ip
 800c9b0:	4435      	add	r5, r6
 800c9b2:	eb18 0604 	adds.w	r6, r8, r4
 800c9b6:	eb49 0705 	adc.w	r7, r9, r5
 800c9ba:	46b0      	mov	r8, r6
 800c9bc:	46b9      	mov	r9, r7
	MC0M(4)
 800c9be:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800c9c2:	690b      	ldr	r3, [r1, #16]
 800c9c4:	f8d1 c04c 	ldr.w	ip, [r1, #76]	; 0x4c
 800c9c8:	17df      	asrs	r7, r3, #31
 800c9ca:	4654      	mov	r4, sl
 800c9cc:	17e5      	asrs	r5, r4, #31
 800c9ce:	fb0a f607 	mul.w	r6, sl, r7
 800c9d2:	fb03 6605 	mla	r6, r3, r5, r6
 800c9d6:	fbaa ab03 	umull	sl, fp, sl, r3
 800c9da:	44b3      	add	fp, r6
 800c9dc:	eb18 080a 	adds.w	r8, r8, sl
 800c9e0:	eb49 090b 	adc.w	r9, r9, fp
 800c9e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c9e6:	425b      	negs	r3, r3
 800c9e8:	4666      	mov	r6, ip
 800c9ea:	17f7      	asrs	r7, r6, #31
 800c9ec:	17dd      	asrs	r5, r3, #31
 800c9ee:	fb03 f607 	mul.w	r6, r3, r7
 800c9f2:	fb0c 6605 	mla	r6, ip, r5, r6
 800c9f6:	fba3 450c 	umull	r4, r5, r3, ip
 800c9fa:	4435      	add	r5, r6
 800c9fc:	eb18 0604 	adds.w	r6, r8, r4
 800ca00:	eb49 0705 	adc.w	r7, r9, r5
 800ca04:	46b0      	mov	r8, r6
 800ca06:	46b9      	mov	r9, r7
	MC0M(5)
 800ca08:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 800ca0c:	694b      	ldr	r3, [r1, #20]
 800ca0e:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
 800ca12:	17df      	asrs	r7, r3, #31
 800ca14:	4654      	mov	r4, sl
 800ca16:	17e5      	asrs	r5, r4, #31
 800ca18:	fb0a f607 	mul.w	r6, sl, r7
 800ca1c:	fb03 6605 	mla	r6, r3, r5, r6
 800ca20:	fbaa ab03 	umull	sl, fp, sl, r3
 800ca24:	44b3      	add	fp, r6
 800ca26:	eb18 080a 	adds.w	r8, r8, sl
 800ca2a:	eb49 090b 	adc.w	r9, r9, fp
 800ca2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ca30:	425b      	negs	r3, r3
 800ca32:	4666      	mov	r6, ip
 800ca34:	17f7      	asrs	r7, r6, #31
 800ca36:	17dd      	asrs	r5, r3, #31
 800ca38:	fb03 f607 	mul.w	r6, r3, r7
 800ca3c:	fb0c 6605 	mla	r6, ip, r5, r6
 800ca40:	fba3 450c 	umull	r4, r5, r3, ip
 800ca44:	4435      	add	r5, r6
 800ca46:	eb18 0604 	adds.w	r6, r8, r4
 800ca4a:	eb49 0705 	adc.w	r7, r9, r5
 800ca4e:	46b0      	mov	r8, r6
 800ca50:	46b9      	mov	r9, r7
	MC0M(6)
 800ca52:	f8d2 a030 	ldr.w	sl, [r2, #48]	; 0x30
 800ca56:	698b      	ldr	r3, [r1, #24]
 800ca58:	f8d1 c044 	ldr.w	ip, [r1, #68]	; 0x44
 800ca5c:	17df      	asrs	r7, r3, #31
 800ca5e:	4654      	mov	r4, sl
 800ca60:	17e5      	asrs	r5, r4, #31
 800ca62:	fb0a f607 	mul.w	r6, sl, r7
 800ca66:	fb03 6605 	mla	r6, r3, r5, r6
 800ca6a:	fbaa ab03 	umull	sl, fp, sl, r3
 800ca6e:	44b3      	add	fp, r6
 800ca70:	eb18 080a 	adds.w	r8, r8, sl
 800ca74:	eb49 090b 	adc.w	r9, r9, fp
 800ca78:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ca7a:	425b      	negs	r3, r3
 800ca7c:	4666      	mov	r6, ip
 800ca7e:	17f7      	asrs	r7, r6, #31
 800ca80:	17dd      	asrs	r5, r3, #31
 800ca82:	fb03 f607 	mul.w	r6, r3, r7
 800ca86:	fb0c 6605 	mla	r6, ip, r5, r6
 800ca8a:	fba3 450c 	umull	r4, r5, r3, ip
 800ca8e:	4435      	add	r5, r6
 800ca90:	eb18 0604 	adds.w	r6, r8, r4
 800ca94:	eb49 0705 	adc.w	r7, r9, r5
 800ca98:	46b0      	mov	r8, r6
 800ca9a:	46b9      	mov	r9, r7
	MC0M(7)
 800ca9c:	f8d2 a038 	ldr.w	sl, [r2, #56]	; 0x38
 800caa0:	69cb      	ldr	r3, [r1, #28]
 800caa2:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
 800caa6:	17df      	asrs	r7, r3, #31
 800caa8:	4654      	mov	r4, sl
 800caaa:	17e5      	asrs	r5, r4, #31
 800caac:	fb0a f607 	mul.w	r6, sl, r7
 800cab0:	fb03 6605 	mla	r6, r3, r5, r6
 800cab4:	fbaa ab03 	umull	sl, fp, sl, r3
 800cab8:	44b3      	add	fp, r6
 800caba:	eb18 080a 	adds.w	r8, r8, sl
 800cabe:	eb49 090b 	adc.w	r9, r9, fp
 800cac2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800cac4:	425b      	negs	r3, r3
 800cac6:	4666      	mov	r6, ip
 800cac8:	17f7      	asrs	r7, r6, #31
 800caca:	17dd      	asrs	r5, r3, #31
 800cacc:	fb03 f607 	mul.w	r6, r3, r7
 800cad0:	fb0c 6605 	mla	r6, ip, r5, r6
 800cad4:	fba3 450c 	umull	r4, r5, r3, ip
 800cad8:	4435      	add	r5, r6
 800cada:	eb18 0604 	adds.w	r6, r8, r4
 800cade:	eb49 0705 	adc.w	r7, r9, r5
  return x << n;
}

static __inline Word64 SAR64(Word64 x, int n)
{
  return x >> n;
 800cae2:	0d33      	lsrs	r3, r6, #20
 800cae4:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
	x >>= fracBits;
 800cae8:	119c      	asrs	r4, r3, #6
	sign = x >> 31;
 800caea:	17dd      	asrs	r5, r3, #31
	if (sign != (x >> 15))
 800caec:	ebb5 5f63 	cmp.w	r5, r3, asr #21
 800caf0:	d002      	beq.n	800caf8 <xmp3fixpt_PolyphaseMono+0x268>
		x = sign ^ ((1 << 15) - 1);
 800caf2:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800caf6:	406c      	eors	r4, r5

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800caf8:	8004      	strh	r4, [r0, #0]
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = rndVal;

	MC1M(0)
 800cafa:	f8d2 4400 	ldr.w	r4, [r2, #1024]	; 0x400
 800cafe:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800cb02:	681d      	ldr	r5, [r3, #0]
   return (sum + ((int64_t)x * y));
 800cb04:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800cb08:	17e7      	asrs	r7, r4, #31
 800cb0a:	fb04 f309 	mul.w	r3, r4, r9
 800cb0e:	fb05 3307 	mla	r3, r5, r7, r3
 800cb12:	fba4 6705 	umull	r6, r7, r4, r5
 800cb16:	441f      	add	r7, r3
 800cb18:	f116 7400 	adds.w	r4, r6, #33554432	; 0x2000000
 800cb1c:	f147 0500 	adc.w	r5, r7, #0
	MC1M(1)
 800cb20:	f8d2 6404 	ldr.w	r6, [r2, #1028]	; 0x404
 800cb24:	f241 0304 	movw	r3, #4100	; 0x1004
 800cb28:	58cf      	ldr	r7, [r1, r3]
 800cb2a:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cb2e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800cb32:	fb06 f30b 	mul.w	r3, r6, fp
 800cb36:	fb07 3309 	mla	r3, r7, r9, r3
 800cb3a:	fba6 6707 	umull	r6, r7, r6, r7
 800cb3e:	441f      	add	r7, r3
 800cb40:	eb14 0806 	adds.w	r8, r4, r6
 800cb44:	eb45 0907 	adc.w	r9, r5, r7
 800cb48:	4644      	mov	r4, r8
 800cb4a:	464d      	mov	r5, r9
	MC1M(2)
 800cb4c:	f8d2 6408 	ldr.w	r6, [r2, #1032]	; 0x408
 800cb50:	f241 0308 	movw	r3, #4104	; 0x1008
 800cb54:	58cf      	ldr	r7, [r1, r3]
 800cb56:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cb5a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800cb5e:	fb06 f30b 	mul.w	r3, r6, fp
 800cb62:	fb07 3309 	mla	r3, r7, r9, r3
 800cb66:	fba6 6707 	umull	r6, r7, r6, r7
 800cb6a:	441f      	add	r7, r3
 800cb6c:	19a4      	adds	r4, r4, r6
 800cb6e:	417d      	adcs	r5, r7
	MC1M(3)
 800cb70:	f8d2 640c 	ldr.w	r6, [r2, #1036]	; 0x40c
 800cb74:	f241 030c 	movw	r3, #4108	; 0x100c
 800cb78:	58cf      	ldr	r7, [r1, r3]
 800cb7a:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cb7e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800cb82:	fb06 f30b 	mul.w	r3, r6, fp
 800cb86:	fb07 3309 	mla	r3, r7, r9, r3
 800cb8a:	fba6 6707 	umull	r6, r7, r6, r7
 800cb8e:	441f      	add	r7, r3
 800cb90:	eb14 0806 	adds.w	r8, r4, r6
 800cb94:	eb45 0907 	adc.w	r9, r5, r7
 800cb98:	4644      	mov	r4, r8
 800cb9a:	464d      	mov	r5, r9
	MC1M(4)
 800cb9c:	f8d2 6410 	ldr.w	r6, [r2, #1040]	; 0x410
 800cba0:	f241 0310 	movw	r3, #4112	; 0x1010
 800cba4:	58cf      	ldr	r7, [r1, r3]
 800cba6:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cbaa:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800cbae:	fb06 f30b 	mul.w	r3, r6, fp
 800cbb2:	fb07 3309 	mla	r3, r7, r9, r3
 800cbb6:	fba6 6707 	umull	r6, r7, r6, r7
 800cbba:	441f      	add	r7, r3
 800cbbc:	19a4      	adds	r4, r4, r6
 800cbbe:	417d      	adcs	r5, r7
	MC1M(5)
 800cbc0:	f8d2 6414 	ldr.w	r6, [r2, #1044]	; 0x414
 800cbc4:	f241 0314 	movw	r3, #4116	; 0x1014
 800cbc8:	58cf      	ldr	r7, [r1, r3]
 800cbca:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cbce:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800cbd2:	fb06 f30b 	mul.w	r3, r6, fp
 800cbd6:	fb07 3309 	mla	r3, r7, r9, r3
 800cbda:	fba6 6707 	umull	r6, r7, r6, r7
 800cbde:	441f      	add	r7, r3
 800cbe0:	eb14 0806 	adds.w	r8, r4, r6
 800cbe4:	eb45 0907 	adc.w	r9, r5, r7
 800cbe8:	4644      	mov	r4, r8
 800cbea:	464d      	mov	r5, r9
	MC1M(6)
 800cbec:	f8d2 6418 	ldr.w	r6, [r2, #1048]	; 0x418
 800cbf0:	f241 0318 	movw	r3, #4120	; 0x1018
 800cbf4:	58cf      	ldr	r7, [r1, r3]
 800cbf6:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cbfa:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800cbfe:	fb06 f30b 	mul.w	r3, r6, fp
 800cc02:	fb07 3309 	mla	r3, r7, r9, r3
 800cc06:	fba6 6707 	umull	r6, r7, r6, r7
 800cc0a:	441f      	add	r7, r3
 800cc0c:	19a4      	adds	r4, r4, r6
 800cc0e:	417d      	adcs	r5, r7
	MC1M(7)
 800cc10:	f8d2 641c 	ldr.w	r6, [r2, #1052]	; 0x41c
 800cc14:	f241 031c 	movw	r3, #4124	; 0x101c
 800cc18:	58cf      	ldr	r7, [r1, r3]
 800cc1a:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cc1e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800cc22:	fb06 f30b 	mul.w	r3, r6, fp
 800cc26:	fb07 3309 	mla	r3, r7, r9, r3
 800cc2a:	fba6 6707 	umull	r6, r7, r6, r7
 800cc2e:	441f      	add	r7, r3
 800cc30:	eb14 0806 	adds.w	r8, r4, r6
 800cc34:	eb45 0907 	adc.w	r9, r5, r7
  return x >> n;
 800cc38:	ea4f 5318 	mov.w	r3, r8, lsr #20
 800cc3c:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
	x >>= fracBits;
 800cc40:	119c      	asrs	r4, r3, #6
	sign = x >> 31;
 800cc42:	17dd      	asrs	r5, r3, #31
	if (sign != (x >> 15))
 800cc44:	ebb5 5f63 	cmp.w	r5, r3, asr #21
 800cc48:	d002      	beq.n	800cc50 <xmp3fixpt_PolyphaseMono+0x3c0>
		x = sign ^ ((1 << 15) - 1);
 800cc4a:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800cc4e:	406c      	eors	r4, r5

	*(pcm + 16) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800cc50:	8404      	strh	r4, [r0, #32]

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 800cc52:	f102 0340 	add.w	r3, r2, #64	; 0x40
	vb1 = vbuf + 64;
 800cc56:	f501 7e80 	add.w	lr, r1, #256	; 0x100
	pcm++;
 800cc5a:	1c82      	adds	r2, r0, #2
 800cc5c:	9201      	str	r2, [sp, #4]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 800cc5e:	220f      	movs	r2, #15
 800cc60:	9200      	str	r2, [sp, #0]
 800cc62:	469c      	mov	ip, r3
 800cc64:	e006      	b.n	800cc74 <xmp3fixpt_PolyphaseMono+0x3e4>
		MC2M(6)
		MC2M(7)

		vb1 += 64;
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800cc66:	8002      	strh	r2, [r0, #0]
		pcm++;
 800cc68:	9b01      	ldr	r3, [sp, #4]
 800cc6a:	3302      	adds	r3, #2
 800cc6c:	9301      	str	r3, [sp, #4]
	for (i = 15; i > 0; i--) {
 800cc6e:	9b00      	ldr	r3, [sp, #0]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	9b00      	ldr	r3, [sp, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f340 8274 	ble.w	800d164 <xmp3fixpt_PolyphaseMono+0x8d4>
		MC2M(0)
 800cc7c:	f8dc 0000 	ldr.w	r0, [ip]
 800cc80:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800cc84:	f8de 3000 	ldr.w	r3, [lr]
 800cc88:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   return (sum + ((int64_t)x * y));
 800cc8c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800cc90:	4604      	mov	r4, r0
 800cc92:	17c5      	asrs	r5, r0, #31
 800cc94:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cc98:	fb03 f605 	mul.w	r6, r3, r5
 800cc9c:	fb00 6609 	mla	r6, r0, r9, r6
 800cca0:	fba3 4500 	umull	r4, r5, r3, r0
 800cca4:	4435      	add	r5, r6
 800cca6:	f114 7a00 	adds.w	sl, r4, #33554432	; 0x2000000
 800ccaa:	f145 0b00 	adc.w	fp, r5, #0
 800ccae:	17d5      	asrs	r5, r2, #31
 800ccb0:	fb02 f609 	mul.w	r6, r2, r9
 800ccb4:	fb03 6605 	mla	r6, r3, r5, r6
 800ccb8:	fba2 4503 	umull	r4, r5, r2, r3
 800ccbc:	4435      	add	r5, r6
 800ccbe:	f114 7600 	adds.w	r6, r4, #33554432	; 0x2000000
 800ccc2:	f145 0700 	adc.w	r7, r5, #0
 800ccc6:	4635      	mov	r5, r6
 800ccc8:	463e      	mov	r6, r7
 800ccca:	4252      	negs	r2, r2
 800cccc:	460b      	mov	r3, r1
 800ccce:	17cc      	asrs	r4, r1, #31
 800ccd0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ccd4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ccd8:	fb02 f404 	mul.w	r4, r2, r4
 800ccdc:	fb01 4409 	mla	r4, r1, r9, r4
 800cce0:	fba2 2301 	umull	r2, r3, r2, r1
 800cce4:	4423      	add	r3, r4
 800cce6:	eb12 080a 	adds.w	r8, r2, sl
 800ccea:	eb43 090b 	adc.w	r9, r3, fp
 800ccee:	9b05      	ldr	r3, [sp, #20]
 800ccf0:	fb01 f303 	mul.w	r3, r1, r3
 800ccf4:	9a03      	ldr	r2, [sp, #12]
 800ccf6:	fb00 3302 	mla	r3, r0, r2, r3
 800ccfa:	fba1 0100 	umull	r0, r1, r1, r0
 800ccfe:	4419      	add	r1, r3
 800cd00:	182d      	adds	r5, r5, r0
 800cd02:	414e      	adcs	r6, r1
 800cd04:	e9cd 5602 	strd	r5, r6, [sp, #8]
		MC2M(1)
 800cd08:	f8dc 7008 	ldr.w	r7, [ip, #8]
 800cd0c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800cd10:	f8de 4004 	ldr.w	r4, [lr, #4]
 800cd14:	f8de 6058 	ldr.w	r6, [lr, #88]	; 0x58
 800cd18:	17e1      	asrs	r1, r4, #31
 800cd1a:	46ba      	mov	sl, r7
 800cd1c:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cd20:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800cd24:	465b      	mov	r3, fp
 800cd26:	fb04 f303 	mul.w	r3, r4, r3
 800cd2a:	fb07 3301 	mla	r3, r7, r1, r3
 800cd2e:	fba4 ab07 	umull	sl, fp, r4, r7
 800cd32:	465d      	mov	r5, fp
 800cd34:	441d      	add	r5, r3
 800cd36:	eb1a 0a08 	adds.w	sl, sl, r8
 800cd3a:	eb45 0b09 	adc.w	fp, r5, r9
 800cd3e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800cd42:	fb02 f301 	mul.w	r3, r2, r1
 800cd46:	fb04 3309 	mla	r3, r4, r9, r3
 800cd4a:	fba2 4504 	umull	r4, r5, r2, r4
 800cd4e:	441d      	add	r5, r3
 800cd50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd54:	1900      	adds	r0, r0, r4
 800cd56:	4169      	adcs	r1, r5
 800cd58:	4604      	mov	r4, r0
 800cd5a:	460d      	mov	r5, r1
 800cd5c:	4252      	negs	r2, r2
 800cd5e:	4630      	mov	r0, r6
 800cd60:	17f1      	asrs	r1, r6, #31
 800cd62:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800cd66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd6a:	fb02 f001 	mul.w	r0, r2, r1
 800cd6e:	fb06 0009 	mla	r0, r6, r9, r0
 800cd72:	fba2 2306 	umull	r2, r3, r2, r6
 800cd76:	4403      	add	r3, r0
 800cd78:	eb12 080a 	adds.w	r8, r2, sl
 800cd7c:	eb43 090b 	adc.w	r9, r3, fp
 800cd80:	9b05      	ldr	r3, [sp, #20]
 800cd82:	fb06 f303 	mul.w	r3, r6, r3
 800cd86:	9a03      	ldr	r2, [sp, #12]
 800cd88:	fb07 3302 	mla	r3, r7, r2, r3
 800cd8c:	fba6 6707 	umull	r6, r7, r6, r7
 800cd90:	441f      	add	r7, r3
 800cd92:	1932      	adds	r2, r6, r4
 800cd94:	eb47 0305 	adc.w	r3, r7, r5
 800cd98:	e9cd 2302 	strd	r2, r3, [sp, #8]
		MC2M(2)
 800cd9c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800cda0:	f8dc 2014 	ldr.w	r2, [ip, #20]
 800cda4:	f8de 4008 	ldr.w	r4, [lr, #8]
 800cda8:	f8de 1054 	ldr.w	r1, [lr, #84]	; 0x54
 800cdac:	17e7      	asrs	r7, r4, #31
 800cdae:	4682      	mov	sl, r0
 800cdb0:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800cdb4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800cdb8:	465b      	mov	r3, fp
 800cdba:	fb04 f303 	mul.w	r3, r4, r3
 800cdbe:	fb00 3307 	mla	r3, r0, r7, r3
 800cdc2:	fba4 ab00 	umull	sl, fp, r4, r0
 800cdc6:	465d      	mov	r5, fp
 800cdc8:	441d      	add	r5, r3
 800cdca:	eb1a 0a08 	adds.w	sl, sl, r8
 800cdce:	eb45 0b09 	adc.w	fp, r5, r9
 800cdd2:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800cdd6:	fb02 f307 	mul.w	r3, r2, r7
 800cdda:	fb04 3309 	mla	r3, r4, r9, r3
 800cdde:	fba2 4504 	umull	r4, r5, r2, r4
 800cde2:	441d      	add	r5, r3
 800cde4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cde8:	1936      	adds	r6, r6, r4
 800cdea:	416f      	adcs	r7, r5
 800cdec:	4634      	mov	r4, r6
 800cdee:	463d      	mov	r5, r7
 800cdf0:	4252      	negs	r2, r2
 800cdf2:	460e      	mov	r6, r1
 800cdf4:	17cf      	asrs	r7, r1, #31
 800cdf6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800cdfa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cdfe:	fb02 f607 	mul.w	r6, r2, r7
 800ce02:	fb01 6609 	mla	r6, r1, r9, r6
 800ce06:	fba2 2301 	umull	r2, r3, r2, r1
 800ce0a:	4433      	add	r3, r6
 800ce0c:	eb12 060a 	adds.w	r6, r2, sl
 800ce10:	eb43 070b 	adc.w	r7, r3, fp
 800ce14:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ce18:	9b05      	ldr	r3, [sp, #20]
 800ce1a:	fb01 f303 	mul.w	r3, r1, r3
 800ce1e:	9a03      	ldr	r2, [sp, #12]
 800ce20:	fb00 3302 	mla	r3, r0, r2, r3
 800ce24:	fba1 1200 	umull	r1, r2, r1, r0
 800ce28:	441a      	add	r2, r3
 800ce2a:	190e      	adds	r6, r1, r4
 800ce2c:	eb42 0705 	adc.w	r7, r2, r5
 800ce30:	e9cd 6702 	strd	r6, r7, [sp, #8]
		MC2M(3)
 800ce34:	f8dc 7018 	ldr.w	r7, [ip, #24]
 800ce38:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800ce3c:	f8de 400c 	ldr.w	r4, [lr, #12]
 800ce40:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 800ce44:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800ce48:	46ba      	mov	sl, r7
 800ce4a:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800ce4e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800ce52:	465b      	mov	r3, fp
 800ce54:	fb04 f303 	mul.w	r3, r4, r3
 800ce58:	fb07 3309 	mla	r3, r7, r9, r3
 800ce5c:	fba4 ab07 	umull	sl, fp, r4, r7
 800ce60:	449b      	add	fp, r3
 800ce62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce66:	eb10 000a 	adds.w	r0, r0, sl
 800ce6a:	eb41 010b 	adc.w	r1, r1, fp
 800ce6e:	4682      	mov	sl, r0
 800ce70:	468b      	mov	fp, r1
 800ce72:	17d1      	asrs	r1, r2, #31
 800ce74:	fb02 f309 	mul.w	r3, r2, r9
 800ce78:	fb04 3301 	mla	r3, r4, r1, r3
 800ce7c:	fba2 0104 	umull	r0, r1, r2, r4
 800ce80:	4419      	add	r1, r3
 800ce82:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce86:	1824      	adds	r4, r4, r0
 800ce88:	414d      	adcs	r5, r1
 800ce8a:	4252      	negs	r2, r2
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	17f1      	asrs	r1, r6, #31
 800ce90:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ce94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce98:	fb02 f001 	mul.w	r0, r2, r1
 800ce9c:	fb06 0009 	mla	r0, r6, r9, r0
 800cea0:	fba2 2306 	umull	r2, r3, r2, r6
 800cea4:	4403      	add	r3, r0
 800cea6:	eb12 080a 	adds.w	r8, r2, sl
 800ceaa:	eb43 090b 	adc.w	r9, r3, fp
 800ceae:	9b05      	ldr	r3, [sp, #20]
 800ceb0:	fb06 f303 	mul.w	r3, r6, r3
 800ceb4:	9a03      	ldr	r2, [sp, #12]
 800ceb6:	fb07 3302 	mla	r3, r7, r2, r3
 800ceba:	fba6 6707 	umull	r6, r7, r6, r7
 800cebe:	441f      	add	r7, r3
 800cec0:	1932      	adds	r2, r6, r4
 800cec2:	eb47 0305 	adc.w	r3, r7, r5
 800cec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
		MC2M(4)
 800ceca:	f8dc 0020 	ldr.w	r0, [ip, #32]
 800cece:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 800ced2:	f8de 4010 	ldr.w	r4, [lr, #16]
 800ced6:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
 800ceda:	17e7      	asrs	r7, r4, #31
 800cedc:	4682      	mov	sl, r0
 800cede:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800cee2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800cee6:	465b      	mov	r3, fp
 800cee8:	fb04 f303 	mul.w	r3, r4, r3
 800ceec:	fb00 3307 	mla	r3, r0, r7, r3
 800cef0:	fba4 ab00 	umull	sl, fp, r4, r0
 800cef4:	465d      	mov	r5, fp
 800cef6:	441d      	add	r5, r3
 800cef8:	eb1a 0a08 	adds.w	sl, sl, r8
 800cefc:	eb45 0b09 	adc.w	fp, r5, r9
 800cf00:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800cf04:	fb02 f307 	mul.w	r3, r2, r7
 800cf08:	fb04 3309 	mla	r3, r4, r9, r3
 800cf0c:	fba2 4504 	umull	r4, r5, r2, r4
 800cf10:	441d      	add	r5, r3
 800cf12:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf16:	1936      	adds	r6, r6, r4
 800cf18:	416f      	adcs	r7, r5
 800cf1a:	4634      	mov	r4, r6
 800cf1c:	463d      	mov	r5, r7
 800cf1e:	4252      	negs	r2, r2
 800cf20:	460e      	mov	r6, r1
 800cf22:	17cf      	asrs	r7, r1, #31
 800cf24:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800cf28:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cf2c:	fb02 f607 	mul.w	r6, r2, r7
 800cf30:	fb01 6609 	mla	r6, r1, r9, r6
 800cf34:	fba2 2301 	umull	r2, r3, r2, r1
 800cf38:	4433      	add	r3, r6
 800cf3a:	eb12 060a 	adds.w	r6, r2, sl
 800cf3e:	eb43 070b 	adc.w	r7, r3, fp
 800cf42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cf46:	9b05      	ldr	r3, [sp, #20]
 800cf48:	fb01 f303 	mul.w	r3, r1, r3
 800cf4c:	9a03      	ldr	r2, [sp, #12]
 800cf4e:	fb00 3302 	mla	r3, r0, r2, r3
 800cf52:	fba1 1200 	umull	r1, r2, r1, r0
 800cf56:	441a      	add	r2, r3
 800cf58:	190e      	adds	r6, r1, r4
 800cf5a:	eb42 0705 	adc.w	r7, r2, r5
 800cf5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
		MC2M(5)
 800cf62:	f8dc 7028 	ldr.w	r7, [ip, #40]	; 0x28
 800cf66:	f8dc 202c 	ldr.w	r2, [ip, #44]	; 0x2c
 800cf6a:	f8de 4014 	ldr.w	r4, [lr, #20]
 800cf6e:	f8de 6048 	ldr.w	r6, [lr, #72]	; 0x48
 800cf72:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800cf76:	46ba      	mov	sl, r7
 800cf78:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cf7c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800cf80:	465b      	mov	r3, fp
 800cf82:	fb04 f303 	mul.w	r3, r4, r3
 800cf86:	fb07 3309 	mla	r3, r7, r9, r3
 800cf8a:	fba4 ab07 	umull	sl, fp, r4, r7
 800cf8e:	449b      	add	fp, r3
 800cf90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf94:	eb10 000a 	adds.w	r0, r0, sl
 800cf98:	eb41 010b 	adc.w	r1, r1, fp
 800cf9c:	4682      	mov	sl, r0
 800cf9e:	468b      	mov	fp, r1
 800cfa0:	17d1      	asrs	r1, r2, #31
 800cfa2:	fb02 f309 	mul.w	r3, r2, r9
 800cfa6:	fb04 3301 	mla	r3, r4, r1, r3
 800cfaa:	fba2 0104 	umull	r0, r1, r2, r4
 800cfae:	4419      	add	r1, r3
 800cfb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cfb4:	1824      	adds	r4, r4, r0
 800cfb6:	414d      	adcs	r5, r1
 800cfb8:	4252      	negs	r2, r2
 800cfba:	4630      	mov	r0, r6
 800cfbc:	17f1      	asrs	r1, r6, #31
 800cfbe:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800cfc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfc6:	fb02 f001 	mul.w	r0, r2, r1
 800cfca:	fb06 0009 	mla	r0, r6, r9, r0
 800cfce:	fba2 2306 	umull	r2, r3, r2, r6
 800cfd2:	4403      	add	r3, r0
 800cfd4:	eb12 080a 	adds.w	r8, r2, sl
 800cfd8:	eb43 090b 	adc.w	r9, r3, fp
 800cfdc:	9b05      	ldr	r3, [sp, #20]
 800cfde:	fb06 f303 	mul.w	r3, r6, r3
 800cfe2:	9a03      	ldr	r2, [sp, #12]
 800cfe4:	fb07 3302 	mla	r3, r7, r2, r3
 800cfe8:	fba6 6707 	umull	r6, r7, r6, r7
 800cfec:	441f      	add	r7, r3
 800cfee:	1932      	adds	r2, r6, r4
 800cff0:	eb47 0305 	adc.w	r3, r7, r5
 800cff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
		MC2M(6)
 800cff8:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
 800cffc:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 800d000:	f8de 4018 	ldr.w	r4, [lr, #24]
 800d004:	f8de 1044 	ldr.w	r1, [lr, #68]	; 0x44
 800d008:	17e7      	asrs	r7, r4, #31
 800d00a:	4682      	mov	sl, r0
 800d00c:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800d010:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800d014:	465b      	mov	r3, fp
 800d016:	fb04 f303 	mul.w	r3, r4, r3
 800d01a:	fb00 3307 	mla	r3, r0, r7, r3
 800d01e:	fba4 ab00 	umull	sl, fp, r4, r0
 800d022:	465d      	mov	r5, fp
 800d024:	441d      	add	r5, r3
 800d026:	eb1a 0a08 	adds.w	sl, sl, r8
 800d02a:	eb45 0b09 	adc.w	fp, r5, r9
 800d02e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800d032:	fb02 f307 	mul.w	r3, r2, r7
 800d036:	fb04 3309 	mla	r3, r4, r9, r3
 800d03a:	fba2 4504 	umull	r4, r5, r2, r4
 800d03e:	441d      	add	r5, r3
 800d040:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d044:	1936      	adds	r6, r6, r4
 800d046:	416f      	adcs	r7, r5
 800d048:	4634      	mov	r4, r6
 800d04a:	463d      	mov	r5, r7
 800d04c:	4252      	negs	r2, r2
 800d04e:	460e      	mov	r6, r1
 800d050:	17cf      	asrs	r7, r1, #31
 800d052:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800d056:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d05a:	fb02 f607 	mul.w	r6, r2, r7
 800d05e:	fb01 6609 	mla	r6, r1, r9, r6
 800d062:	fba2 2301 	umull	r2, r3, r2, r1
 800d066:	4433      	add	r3, r6
 800d068:	eb12 080a 	adds.w	r8, r2, sl
 800d06c:	eb43 090b 	adc.w	r9, r3, fp
 800d070:	9b05      	ldr	r3, [sp, #20]
 800d072:	fb01 f303 	mul.w	r3, r1, r3
 800d076:	9a03      	ldr	r2, [sp, #12]
 800d078:	fb00 3302 	mla	r3, r0, r2, r3
 800d07c:	fba1 0100 	umull	r0, r1, r1, r0
 800d080:	4419      	add	r1, r3
 800d082:	1902      	adds	r2, r0, r4
 800d084:	eb41 0305 	adc.w	r3, r1, r5
 800d088:	e9cd 2308 	strd	r2, r3, [sp, #32]
		MC2M(7)
 800d08c:	f8dc 4038 	ldr.w	r4, [ip, #56]	; 0x38
 800d090:	f8dc a03c 	ldr.w	sl, [ip, #60]	; 0x3c
 800d094:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800d098:	f8de 001c 	ldr.w	r0, [lr, #28]
 800d09c:	f8de 5040 	ldr.w	r5, [lr, #64]	; 0x40
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	17c7      	asrs	r7, r0, #31
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	17e2      	asrs	r2, r4, #31
 800d0a8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d0ac:	fb00 f102 	mul.w	r1, r0, r2
 800d0b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d0b4:	fb04 1107 	mla	r1, r4, r7, r1
 800d0b8:	fba0 2304 	umull	r2, r3, r0, r4
 800d0bc:	440b      	add	r3, r1
 800d0be:	eb12 0608 	adds.w	r6, r2, r8
 800d0c2:	eb43 0709 	adc.w	r7, r3, r9
 800d0c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d0ca:	ea4f 79ea 	mov.w	r9, sl, asr #31
 800d0ce:	9b03      	ldr	r3, [sp, #12]
 800d0d0:	fb0a f303 	mul.w	r3, sl, r3
 800d0d4:	fb00 3309 	mla	r3, r0, r9, r3
 800d0d8:	fbaa 0100 	umull	r0, r1, sl, r0
 800d0dc:	4419      	add	r1, r3
 800d0de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d0e2:	1812      	adds	r2, r2, r0
 800d0e4:	414b      	adcs	r3, r1
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	f1ca 0200 	rsb	r2, sl, #0
 800d0ee:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800d0f2:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800d0f6:	fb02 f60b 	mul.w	r6, r2, fp
 800d0fa:	fb05 6609 	mla	r6, r5, r9, r6
 800d0fe:	fba2 2305 	umull	r2, r3, r2, r5
 800d102:	4433      	add	r3, r6
 800d104:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800d108:	18b6      	adds	r6, r6, r2
 800d10a:	415f      	adcs	r7, r3
 800d10c:	4632      	mov	r2, r6
 800d10e:	463b      	mov	r3, r7
 800d110:	9e05      	ldr	r6, [sp, #20]
 800d112:	fb05 f606 	mul.w	r6, r5, r6
 800d116:	fb04 660b 	mla	r6, r4, fp, r6
 800d11a:	fba5 7804 	umull	r7, r8, r5, r4
 800d11e:	44b0      	add	r8, r6
 800d120:	183c      	adds	r4, r7, r0
 800d122:	eb48 0501 	adc.w	r5, r8, r1
		vb1 += 64;
 800d126:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  return x >> n;
 800d12a:	0d10      	lsrs	r0, r2, #20
 800d12c:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
	x >>= fracBits;
 800d130:	1183      	asrs	r3, r0, #6
	sign = x >> 31;
 800d132:	17c1      	asrs	r1, r0, #31
	if (sign != (x >> 15))
 800d134:	ebb1 5f60 	cmp.w	r1, r0, asr #21
 800d138:	d002      	beq.n	800d140 <xmp3fixpt_PolyphaseMono+0x8b0>
		x = sign ^ ((1 << 15) - 1);
 800d13a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d13e:	404b      	eors	r3, r1
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800d140:	9a01      	ldr	r2, [sp, #4]
 800d142:	8013      	strh	r3, [r2, #0]
 800d144:	0d23      	lsrs	r3, r4, #20
 800d146:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800d14a:	9900      	ldr	r1, [sp, #0]
 800d14c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
	x >>= fracBits;
 800d150:	119a      	asrs	r2, r3, #6
	sign = x >> 31;
 800d152:	17d9      	asrs	r1, r3, #31
	if (sign != (x >> 15))
 800d154:	ebb1 5f63 	cmp.w	r1, r3, asr #21
 800d158:	f43f ad85 	beq.w	800cc66 <xmp3fixpt_PolyphaseMono+0x3d6>
		x = sign ^ ((1 << 15) - 1);
 800d15c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d160:	404a      	eors	r2, r1
 800d162:	e580      	b.n	800cc66 <xmp3fixpt_PolyphaseMono+0x3d6>
	}
}
 800d164:	b00b      	add	sp, #44	; 0x2c
 800d166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d16a <xmp3fixpt_PolyphaseStereo>:
 * Notes:       interleaves PCM samples LRLRLR...
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 **************************************************************************************/
void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
{
 800d16a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16e:	b095      	sub	sp, #84	; 0x54
 800d170:	4686      	mov	lr, r0
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = sum1R = rndVal;

	MC0S(0)
 800d172:	6810      	ldr	r0, [r2, #0]
 800d174:	6853      	ldr	r3, [r2, #4]
 800d176:	680c      	ldr	r4, [r1, #0]
 800d178:	f8d1 c05c 	ldr.w	ip, [r1, #92]	; 0x5c
   return (sum + ((int64_t)x * y));
 800d17c:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800d180:	4605      	mov	r5, r0
 800d182:	17c6      	asrs	r6, r0, #31
 800d184:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800d188:	fb04 f606 	mul.w	r6, r4, r6
 800d18c:	fb00 6609 	mla	r6, r0, r9, r6
 800d190:	fba4 4500 	umull	r4, r5, r4, r0
 800d194:	4435      	add	r5, r6
 800d196:	f114 7a00 	adds.w	sl, r4, #33554432	; 0x2000000
 800d19a:	f145 0b00 	adc.w	fp, r5, #0
 800d19e:	425b      	negs	r3, r3
 800d1a0:	ea4f 79ec 	mov.w	r9, ip, asr #31
 800d1a4:	461c      	mov	r4, r3
 800d1a6:	17dd      	asrs	r5, r3, #31
 800d1a8:	e9cd 4500 	strd	r4, r5, [sp]
 800d1ac:	fb0c f405 	mul.w	r4, ip, r5
 800d1b0:	fb03 4409 	mla	r4, r3, r9, r4
 800d1b4:	fbac 8903 	umull	r8, r9, ip, r3
 800d1b8:	44a1      	add	r9, r4
 800d1ba:	eb1a 0408 	adds.w	r4, sl, r8
 800d1be:	eb4b 0509 	adc.w	r5, fp, r9
 800d1c2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d1c6:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
 800d1ca:	f8d1 40dc 	ldr.w	r4, [r1, #220]	; 0xdc
 800d1ce:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800d1d2:	9d05      	ldr	r5, [sp, #20]
 800d1d4:	fb06 fc05 	mul.w	ip, r6, r5
 800d1d8:	fb00 cc09 	mla	ip, r0, r9, ip
 800d1dc:	fba6 8900 	umull	r8, r9, r6, r0
 800d1e0:	44e1      	add	r9, ip
 800d1e2:	f118 7600 	adds.w	r6, r8, #33554432	; 0x2000000
 800d1e6:	f149 0700 	adc.w	r7, r9, #0
 800d1ea:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800d1ee:	9801      	ldr	r0, [sp, #4]
 800d1f0:	fb04 f000 	mul.w	r0, r4, r0
 800d1f4:	fb03 0009 	mla	r0, r3, r9, r0
 800d1f8:	fba4 4503 	umull	r4, r5, r4, r3
 800d1fc:	4405      	add	r5, r0
 800d1fe:	eb14 0806 	adds.w	r8, r4, r6
 800d202:	eb45 0907 	adc.w	r9, r5, r7
 800d206:	e9cd 8904 	strd	r8, r9, [sp, #16]
	MC0S(1)
 800d20a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800d20e:	68d3      	ldr	r3, [r2, #12]
 800d210:	684c      	ldr	r4, [r1, #4]
 800d212:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800d214:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800d218:	ea4f 79ec 	mov.w	r9, ip, asr #31
 800d21c:	fb04 f609 	mul.w	r6, r4, r9
 800d220:	fb0c 660b 	mla	r6, ip, fp, r6
 800d224:	fba4 450c 	umull	r4, r5, r4, ip
 800d228:	4435      	add	r5, r6
 800d22a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800d22e:	eb1a 0a04 	adds.w	sl, sl, r4
 800d232:	eb4b 0b05 	adc.w	fp, fp, r5
 800d236:	425b      	negs	r3, r3
 800d238:	17c5      	asrs	r5, r0, #31
 800d23a:	461e      	mov	r6, r3
 800d23c:	17df      	asrs	r7, r3, #31
 800d23e:	e9cd 6700 	strd	r6, r7, [sp]
 800d242:	fb00 f607 	mul.w	r6, r0, r7
 800d246:	fb03 6605 	mla	r6, r3, r5, r6
 800d24a:	fba0 4503 	umull	r4, r5, r0, r3
 800d24e:	4435      	add	r5, r6
 800d250:	eb14 060a 	adds.w	r6, r4, sl
 800d254:	eb45 070b 	adc.w	r7, r5, fp
 800d258:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d25c:	f8d1 4084 	ldr.w	r4, [r1, #132]	; 0x84
 800d260:	f8d1 00d8 	ldr.w	r0, [r1, #216]	; 0xd8
 800d264:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800d268:	fb04 f609 	mul.w	r6, r4, r9
 800d26c:	fb0c 660b 	mla	r6, ip, fp, r6
 800d270:	fba4 450c 	umull	r4, r5, r4, ip
 800d274:	4435      	add	r5, r6
 800d276:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d27a:	eb18 0804 	adds.w	r8, r8, r4
 800d27e:	eb49 0905 	adc.w	r9, r9, r5
 800d282:	4644      	mov	r4, r8
 800d284:	464d      	mov	r5, r9
 800d286:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800d28a:	9e01      	ldr	r6, [sp, #4]
 800d28c:	fb00 fc06 	mul.w	ip, r0, r6
 800d290:	fb03 cc09 	mla	ip, r3, r9, ip
 800d294:	fba0 6703 	umull	r6, r7, r0, r3
 800d298:	4467      	add	r7, ip
 800d29a:	eb16 0804 	adds.w	r8, r6, r4
 800d29e:	eb47 0905 	adc.w	r9, r7, r5
 800d2a2:	e9cd 8904 	strd	r8, r9, [sp, #16]
	MC0S(2)
 800d2a6:	6916      	ldr	r6, [r2, #16]
 800d2a8:	6950      	ldr	r0, [r2, #20]
 800d2aa:	688c      	ldr	r4, [r1, #8]
 800d2ac:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800d2ae:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800d2b2:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800d2b6:	fb04 f70b 	mul.w	r7, r4, fp
 800d2ba:	fb06 7709 	mla	r7, r6, r9, r7
 800d2be:	fba4 4506 	umull	r4, r5, r4, r6
 800d2c2:	443d      	add	r5, r7
 800d2c4:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 800d2c8:	193f      	adds	r7, r7, r4
 800d2ca:	eb48 0805 	adc.w	r8, r8, r5
 800d2ce:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d2d2:	4240      	negs	r0, r0
 800d2d4:	17dd      	asrs	r5, r3, #31
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	ea4f 78e0 	mov.w	r8, r0, asr #31
 800d2dc:	e9cd 7800 	strd	r7, r8, [sp]
 800d2e0:	fb03 f708 	mul.w	r7, r3, r8
 800d2e4:	fb00 7705 	mla	r7, r0, r5, r7
 800d2e8:	fba3 3400 	umull	r3, r4, r3, r0
 800d2ec:	4698      	mov	r8, r3
 800d2ee:	4623      	mov	r3, r4
 800d2f0:	443b      	add	r3, r7
 800d2f2:	4699      	mov	r9, r3
 800d2f4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800d2f8:	eb13 0308 	adds.w	r3, r3, r8
 800d2fc:	eb44 0409 	adc.w	r4, r4, r9
 800d300:	4698      	mov	r8, r3
 800d302:	46a1      	mov	r9, r4
 800d304:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d308:	f8d1 7088 	ldr.w	r7, [r1, #136]	; 0x88
 800d30c:	f8d1 30d4 	ldr.w	r3, [r1, #212]	; 0xd4
 800d310:	17fd      	asrs	r5, r7, #31
 800d312:	fb07 f40b 	mul.w	r4, r7, fp
 800d316:	fb06 4405 	mla	r4, r6, r5, r4
 800d31a:	fba7 6706 	umull	r6, r7, r7, r6
 800d31e:	4427      	add	r7, r4
 800d320:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d324:	19a4      	adds	r4, r4, r6
 800d326:	417d      	adcs	r5, r7
 800d328:	4626      	mov	r6, r4
 800d32a:	462f      	mov	r7, r5
 800d32c:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800d330:	9c01      	ldr	r4, [sp, #4]
 800d332:	fb03 fc04 	mul.w	ip, r3, r4
 800d336:	fb00 cc0b 	mla	ip, r0, fp, ip
 800d33a:	fba3 4500 	umull	r4, r5, r3, r0
 800d33e:	4465      	add	r5, ip
 800d340:	eb14 0a06 	adds.w	sl, r4, r6
 800d344:	eb45 0b07 	adc.w	fp, r5, r7
 800d348:	e9cd ab06 	strd	sl, fp, [sp, #24]
	MC0S(3)
 800d34c:	6996      	ldr	r6, [r2, #24]
 800d34e:	69d0      	ldr	r0, [r2, #28]
 800d350:	68cc      	ldr	r4, [r1, #12]
 800d352:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800d354:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800d358:	4637      	mov	r7, r6
 800d35a:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800d35e:	e9cd 7804 	strd	r7, r8, [sp, #16]
 800d362:	fb04 f708 	mul.w	r7, r4, r8
 800d366:	fb06 770c 	mla	r7, r6, ip, r7
 800d36a:	fba4 bc06 	umull	fp, ip, r4, r6
 800d36e:	44bc      	add	ip, r7
 800d370:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d374:	eb14 040b 	adds.w	r4, r4, fp
 800d378:	eb45 050c 	adc.w	r5, r5, ip
 800d37c:	4240      	negs	r0, r0
 800d37e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d382:	4683      	mov	fp, r0
 800d384:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800d388:	e9cd bc00 	strd	fp, ip, [sp]
 800d38c:	4667      	mov	r7, ip
 800d38e:	fb03 f707 	mul.w	r7, r3, r7
 800d392:	fb00 7709 	mla	r7, r0, r9, r7
 800d396:	fba3 bc00 	umull	fp, ip, r3, r0
 800d39a:	44bc      	add	ip, r7
 800d39c:	eb1b 0704 	adds.w	r7, fp, r4
 800d3a0:	eb4c 0805 	adc.w	r8, ip, r5
 800d3a4:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d3a8:	f8d1 708c 	ldr.w	r7, [r1, #140]	; 0x8c
 800d3ac:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 800d3b0:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800d3b4:	9c05      	ldr	r4, [sp, #20]
 800d3b6:	fb07 f404 	mul.w	r4, r7, r4
 800d3ba:	fb06 440c 	mla	r4, r6, ip, r4
 800d3be:	fba7 6706 	umull	r6, r7, r7, r6
 800d3c2:	4427      	add	r7, r4
 800d3c4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d3c8:	eb1a 0a06 	adds.w	sl, sl, r6
 800d3cc:	eb4b 0b07 	adc.w	fp, fp, r7
 800d3d0:	4656      	mov	r6, sl
 800d3d2:	465f      	mov	r7, fp
 800d3d4:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800d3d8:	9c01      	ldr	r4, [sp, #4]
 800d3da:	fb03 fc04 	mul.w	ip, r3, r4
 800d3de:	fb00 cc0b 	mla	ip, r0, fp, ip
 800d3e2:	fba3 4500 	umull	r4, r5, r3, r0
 800d3e6:	4465      	add	r5, ip
 800d3e8:	eb14 0a06 	adds.w	sl, r4, r6
 800d3ec:	eb45 0b07 	adc.w	fp, r5, r7
 800d3f0:	e9cd ab06 	strd	sl, fp, [sp, #24]
	MC0S(4)
 800d3f4:	6a16      	ldr	r6, [r2, #32]
 800d3f6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800d3f8:	690c      	ldr	r4, [r1, #16]
 800d3fa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800d3fc:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800d400:	4637      	mov	r7, r6
 800d402:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800d406:	e9cd 7804 	strd	r7, r8, [sp, #16]
 800d40a:	fb04 f708 	mul.w	r7, r4, r8
 800d40e:	fb06 770c 	mla	r7, r6, ip, r7
 800d412:	fba4 bc06 	umull	fp, ip, r4, r6
 800d416:	44bc      	add	ip, r7
 800d418:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d41c:	eb14 040b 	adds.w	r4, r4, fp
 800d420:	eb45 050c 	adc.w	r5, r5, ip
 800d424:	4240      	negs	r0, r0
 800d426:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d42a:	4683      	mov	fp, r0
 800d42c:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800d430:	e9cd bc00 	strd	fp, ip, [sp]
 800d434:	4667      	mov	r7, ip
 800d436:	fb03 f707 	mul.w	r7, r3, r7
 800d43a:	fb00 7709 	mla	r7, r0, r9, r7
 800d43e:	fba3 bc00 	umull	fp, ip, r3, r0
 800d442:	44bc      	add	ip, r7
 800d444:	eb1b 0704 	adds.w	r7, fp, r4
 800d448:	eb4c 0805 	adc.w	r8, ip, r5
 800d44c:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d450:	f8d1 7090 	ldr.w	r7, [r1, #144]	; 0x90
 800d454:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 800d458:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800d45c:	9c05      	ldr	r4, [sp, #20]
 800d45e:	fb07 f404 	mul.w	r4, r7, r4
 800d462:	fb06 440c 	mla	r4, r6, ip, r4
 800d466:	fba7 6706 	umull	r6, r7, r7, r6
 800d46a:	4427      	add	r7, r4
 800d46c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d470:	eb1a 0a06 	adds.w	sl, sl, r6
 800d474:	eb4b 0b07 	adc.w	fp, fp, r7
 800d478:	4656      	mov	r6, sl
 800d47a:	465f      	mov	r7, fp
 800d47c:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800d480:	9c01      	ldr	r4, [sp, #4]
 800d482:	fb03 fc04 	mul.w	ip, r3, r4
 800d486:	fb00 cc0b 	mla	ip, r0, fp, ip
 800d48a:	fba3 4500 	umull	r4, r5, r3, r0
 800d48e:	4465      	add	r5, ip
 800d490:	eb14 0a06 	adds.w	sl, r4, r6
 800d494:	eb45 0b07 	adc.w	fp, r5, r7
 800d498:	e9cd ab06 	strd	sl, fp, [sp, #24]
	MC0S(5)
 800d49c:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800d49e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800d4a0:	694c      	ldr	r4, [r1, #20]
 800d4a2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800d4a4:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800d4a8:	4637      	mov	r7, r6
 800d4aa:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800d4ae:	e9cd 7804 	strd	r7, r8, [sp, #16]
 800d4b2:	fb04 f708 	mul.w	r7, r4, r8
 800d4b6:	fb06 770c 	mla	r7, r6, ip, r7
 800d4ba:	fba4 bc06 	umull	fp, ip, r4, r6
 800d4be:	44bc      	add	ip, r7
 800d4c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d4c4:	eb14 040b 	adds.w	r4, r4, fp
 800d4c8:	eb45 050c 	adc.w	r5, r5, ip
 800d4cc:	4240      	negs	r0, r0
 800d4ce:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d4d2:	4683      	mov	fp, r0
 800d4d4:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800d4d8:	e9cd bc00 	strd	fp, ip, [sp]
 800d4dc:	4667      	mov	r7, ip
 800d4de:	fb03 f707 	mul.w	r7, r3, r7
 800d4e2:	fb00 7709 	mla	r7, r0, r9, r7
 800d4e6:	fba3 bc00 	umull	fp, ip, r3, r0
 800d4ea:	44bc      	add	ip, r7
 800d4ec:	eb1b 0704 	adds.w	r7, fp, r4
 800d4f0:	eb4c 0805 	adc.w	r8, ip, r5
 800d4f4:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d4f8:	f8d1 7094 	ldr.w	r7, [r1, #148]	; 0x94
 800d4fc:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 800d500:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800d504:	9c05      	ldr	r4, [sp, #20]
 800d506:	fb07 f404 	mul.w	r4, r7, r4
 800d50a:	fb06 440c 	mla	r4, r6, ip, r4
 800d50e:	fba7 6706 	umull	r6, r7, r7, r6
 800d512:	4427      	add	r7, r4
 800d514:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d518:	eb1a 0a06 	adds.w	sl, sl, r6
 800d51c:	eb4b 0b07 	adc.w	fp, fp, r7
 800d520:	4656      	mov	r6, sl
 800d522:	465f      	mov	r7, fp
 800d524:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800d528:	9c01      	ldr	r4, [sp, #4]
 800d52a:	fb03 fc04 	mul.w	ip, r3, r4
 800d52e:	fb00 cc0b 	mla	ip, r0, fp, ip
 800d532:	fba3 4500 	umull	r4, r5, r3, r0
 800d536:	4465      	add	r5, ip
 800d538:	eb14 0a06 	adds.w	sl, r4, r6
 800d53c:	eb45 0b07 	adc.w	fp, r5, r7
 800d540:	e9cd ab06 	strd	sl, fp, [sp, #24]
	MC0S(6)
 800d544:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800d546:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800d548:	698c      	ldr	r4, [r1, #24]
 800d54a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800d54c:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800d550:	4637      	mov	r7, r6
 800d552:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800d556:	e9cd 7804 	strd	r7, r8, [sp, #16]
 800d55a:	fb04 f708 	mul.w	r7, r4, r8
 800d55e:	fb06 770c 	mla	r7, r6, ip, r7
 800d562:	fba4 bc06 	umull	fp, ip, r4, r6
 800d566:	44bc      	add	ip, r7
 800d568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d56c:	eb14 040b 	adds.w	r4, r4, fp
 800d570:	eb45 050c 	adc.w	r5, r5, ip
 800d574:	4240      	negs	r0, r0
 800d576:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d57a:	4683      	mov	fp, r0
 800d57c:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800d580:	e9cd bc00 	strd	fp, ip, [sp]
 800d584:	4667      	mov	r7, ip
 800d586:	fb03 f707 	mul.w	r7, r3, r7
 800d58a:	fb00 7709 	mla	r7, r0, r9, r7
 800d58e:	fba3 bc00 	umull	fp, ip, r3, r0
 800d592:	44bc      	add	ip, r7
 800d594:	eb1b 0704 	adds.w	r7, fp, r4
 800d598:	eb4c 0805 	adc.w	r8, ip, r5
 800d59c:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d5a0:	f8d1 7098 	ldr.w	r7, [r1, #152]	; 0x98
 800d5a4:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 800d5a8:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800d5ac:	9c05      	ldr	r4, [sp, #20]
 800d5ae:	fb07 f404 	mul.w	r4, r7, r4
 800d5b2:	fb06 440c 	mla	r4, r6, ip, r4
 800d5b6:	fba7 6706 	umull	r6, r7, r7, r6
 800d5ba:	4427      	add	r7, r4
 800d5bc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d5c0:	eb1a 0a06 	adds.w	sl, sl, r6
 800d5c4:	eb4b 0b07 	adc.w	fp, fp, r7
 800d5c8:	4656      	mov	r6, sl
 800d5ca:	465f      	mov	r7, fp
 800d5cc:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800d5d0:	9c01      	ldr	r4, [sp, #4]
 800d5d2:	fb03 fc04 	mul.w	ip, r3, r4
 800d5d6:	fb00 cc0b 	mla	ip, r0, fp, ip
 800d5da:	fba3 4500 	umull	r4, r5, r3, r0
 800d5de:	4465      	add	r5, ip
 800d5e0:	eb14 0a06 	adds.w	sl, r4, r6
 800d5e4:	eb45 0b07 	adc.w	fp, r5, r7
 800d5e8:	e9cd ab06 	strd	sl, fp, [sp, #24]
	MC0S(7)
 800d5ec:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800d5ee:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800d5f0:	69cc      	ldr	r4, [r1, #28]
 800d5f2:	6c08      	ldr	r0, [r1, #64]	; 0x40
 800d5f4:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800d5f8:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800d5fc:	46c1      	mov	r9, r8
 800d5fe:	46b0      	mov	r8, r6
 800d600:	fb06 f70c 	mul.w	r7, r6, ip
 800d604:	e9cd 8900 	strd	r8, r9, [sp]
 800d608:	fb04 7709 	mla	r7, r4, r9, r7
 800d60c:	fba6 4504 	umull	r4, r5, r6, r4
 800d610:	443d      	add	r5, r7
 800d612:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d616:	eb1b 0b04 	adds.w	fp, fp, r4
 800d61a:	eb4c 0c05 	adc.w	ip, ip, r5
 800d61e:	425b      	negs	r3, r3
 800d620:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800d624:	461c      	mov	r4, r3
 800d626:	17dd      	asrs	r5, r3, #31
 800d628:	fb03 f709 	mul.w	r7, r3, r9
 800d62c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d630:	fb00 7705 	mla	r7, r0, r5, r7
 800d634:	fba3 8900 	umull	r8, r9, r3, r0
 800d638:	44b9      	add	r9, r7
 800d63a:	eb18 040b 	adds.w	r4, r8, fp
 800d63e:	eb49 050c 	adc.w	r5, r9, ip
 800d642:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d646:	f8d1 709c 	ldr.w	r7, [r1, #156]	; 0x9c
 800d64a:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800d64e:	17fd      	asrs	r5, r7, #31
 800d650:	fb06 f405 	mul.w	r4, r6, r5
 800d654:	9d01      	ldr	r5, [sp, #4]
 800d656:	fb07 4405 	mla	r4, r7, r5, r4
 800d65a:	fba6 6707 	umull	r6, r7, r6, r7
 800d65e:	4427      	add	r7, r4
 800d660:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d664:	eb1a 0a06 	adds.w	sl, sl, r6
 800d668:	eb4b 0b07 	adc.w	fp, fp, r7
 800d66c:	17c5      	asrs	r5, r0, #31
 800d66e:	fb03 fc05 	mul.w	ip, r3, r5
 800d672:	9c05      	ldr	r4, [sp, #20]
 800d674:	fb00 cc04 	mla	ip, r0, r4, ip
 800d678:	fba3 4500 	umull	r4, r5, r3, r0
 800d67c:	4465      	add	r5, ip
 800d67e:	eb1a 0804 	adds.w	r8, sl, r4
 800d682:	eb4b 0905 	adc.w	r9, fp, r5
  return x >> n;
 800d686:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d68a:	0d23      	lsrs	r3, r4, #20
 800d68c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
	x >>= fracBits;
 800d690:	1198      	asrs	r0, r3, #6
	sign = x >> 31;
 800d692:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 800d694:	ebb4 5f63 	cmp.w	r4, r3, asr #21
 800d698:	d002      	beq.n	800d6a0 <xmp3fixpt_PolyphaseStereo+0x536>
		x = sign ^ ((1 << 15) - 1);
 800d69a:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800d69e:	4060      	eors	r0, r4

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800d6a0:	f8ae 0000 	strh.w	r0, [lr]
 800d6a4:	ea4f 5518 	mov.w	r5, r8, lsr #20
 800d6a8:	ea45 3509 	orr.w	r5, r5, r9, lsl #12
	x >>= fracBits;
 800d6ac:	11ab      	asrs	r3, r5, #6
	sign = x >> 31;
 800d6ae:	17e8      	asrs	r0, r5, #31
	if (sign != (x >> 15))
 800d6b0:	ebb0 5f65 	cmp.w	r0, r5, asr #21
 800d6b4:	d002      	beq.n	800d6bc <xmp3fixpt_PolyphaseStereo+0x552>
		x = sign ^ ((1 << 15) - 1);
 800d6b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d6ba:	4043      	eors	r3, r0
	*(pcm + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 800d6bc:	f8ae 3002 	strh.w	r3, [lr, #2]
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = sum1R = rndVal;

	MC1S(0)
 800d6c0:	f8d2 6400 	ldr.w	r6, [r2, #1024]	; 0x400
 800d6c4:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800d6c8:	681c      	ldr	r4, [r3, #0]
   return (sum + ((int64_t)x * y));
 800d6ca:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800d6ce:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800d6d2:	fb06 f30b 	mul.w	r3, r6, fp
 800d6d6:	fb04 3309 	mla	r3, r4, r9, r3
 800d6da:	fba6 ab04 	umull	sl, fp, r6, r4
 800d6de:	449b      	add	fp, r3
 800d6e0:	f11a 7400 	adds.w	r4, sl, #33554432	; 0x2000000
 800d6e4:	f14b 0500 	adc.w	r5, fp, #0
 800d6e8:	f501 5384 	add.w	r3, r1, #4224	; 0x1080
 800d6ec:	6818      	ldr	r0, [r3, #0]
 800d6ee:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800d6f2:	fb06 f30b 	mul.w	r3, r6, fp
 800d6f6:	fb00 3309 	mla	r3, r0, r9, r3
 800d6fa:	fba6 6700 	umull	r6, r7, r6, r0
 800d6fe:	441f      	add	r7, r3
 800d700:	f116 7800 	adds.w	r8, r6, #33554432	; 0x2000000
 800d704:	f147 0900 	adc.w	r9, r7, #0
 800d708:	e9cd 8900 	strd	r8, r9, [sp]
	MC1S(1)
 800d70c:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800d710:	f241 0004 	movw	r0, #4100	; 0x1004
 800d714:	580e      	ldr	r6, [r1, r0]
 800d716:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800d71a:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d71e:	fb03 f00b 	mul.w	r0, r3, fp
 800d722:	fb06 0009 	mla	r0, r6, r9, r0
 800d726:	fba3 6706 	umull	r6, r7, r3, r6
 800d72a:	4407      	add	r7, r0
 800d72c:	eb16 0a04 	adds.w	sl, r6, r4
 800d730:	eb47 0b05 	adc.w	fp, r7, r5
 800d734:	4656      	mov	r6, sl
 800d736:	465f      	mov	r7, fp
 800d738:	f241 0084 	movw	r0, #4228	; 0x1084
 800d73c:	f851 c000 	ldr.w	ip, [r1, r0]
 800d740:	4664      	mov	r4, ip
 800d742:	17e5      	asrs	r5, r4, #31
 800d744:	fb03 f005 	mul.w	r0, r3, r5
 800d748:	fb0c 0009 	mla	r0, ip, r9, r0
 800d74c:	fba3 450c 	umull	r4, r5, r3, ip
 800d750:	4405      	add	r5, r0
 800d752:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d756:	eb18 0804 	adds.w	r8, r8, r4
 800d75a:	eb49 0905 	adc.w	r9, r9, r5
 800d75e:	e9cd 8900 	strd	r8, r9, [sp]
	MC1S(2)
 800d762:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 800d766:	f241 0008 	movw	r0, #4104	; 0x1008
 800d76a:	580c      	ldr	r4, [r1, r0]
 800d76c:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800d770:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d774:	fb03 f00b 	mul.w	r0, r3, fp
 800d778:	fb04 0009 	mla	r0, r4, r9, r0
 800d77c:	fba3 4504 	umull	r4, r5, r3, r4
 800d780:	4405      	add	r5, r0
 800d782:	1936      	adds	r6, r6, r4
 800d784:	416f      	adcs	r7, r5
 800d786:	f241 0088 	movw	r0, #4232	; 0x1088
 800d78a:	f851 c000 	ldr.w	ip, [r1, r0]
 800d78e:	4664      	mov	r4, ip
 800d790:	17e5      	asrs	r5, r4, #31
 800d792:	fb03 f005 	mul.w	r0, r3, r5
 800d796:	fb0c 0009 	mla	r0, ip, r9, r0
 800d79a:	fba3 450c 	umull	r4, r5, r3, ip
 800d79e:	4405      	add	r5, r0
 800d7a0:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d7a4:	eb18 0804 	adds.w	r8, r8, r4
 800d7a8:	eb49 0905 	adc.w	r9, r9, r5
 800d7ac:	e9cd 8900 	strd	r8, r9, [sp]
	MC1S(3)
 800d7b0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800d7b4:	f241 000c 	movw	r0, #4108	; 0x100c
 800d7b8:	580c      	ldr	r4, [r1, r0]
 800d7ba:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800d7be:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d7c2:	fb03 f00b 	mul.w	r0, r3, fp
 800d7c6:	fb04 0009 	mla	r0, r4, r9, r0
 800d7ca:	fba3 4504 	umull	r4, r5, r3, r4
 800d7ce:	4405      	add	r5, r0
 800d7d0:	eb16 0a04 	adds.w	sl, r6, r4
 800d7d4:	eb47 0b05 	adc.w	fp, r7, r5
 800d7d8:	4656      	mov	r6, sl
 800d7da:	465f      	mov	r7, fp
 800d7dc:	f241 008c 	movw	r0, #4236	; 0x108c
 800d7e0:	f851 c000 	ldr.w	ip, [r1, r0]
 800d7e4:	4664      	mov	r4, ip
 800d7e6:	17e5      	asrs	r5, r4, #31
 800d7e8:	fb03 f005 	mul.w	r0, r3, r5
 800d7ec:	fb0c 0009 	mla	r0, ip, r9, r0
 800d7f0:	fba3 450c 	umull	r4, r5, r3, ip
 800d7f4:	4405      	add	r5, r0
 800d7f6:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d7fa:	eb18 0804 	adds.w	r8, r8, r4
 800d7fe:	eb49 0905 	adc.w	r9, r9, r5
 800d802:	e9cd 8900 	strd	r8, r9, [sp]
	MC1S(4)
 800d806:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
 800d80a:	f241 0010 	movw	r0, #4112	; 0x1010
 800d80e:	580c      	ldr	r4, [r1, r0]
 800d810:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800d814:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d818:	fb03 f00b 	mul.w	r0, r3, fp
 800d81c:	fb04 0009 	mla	r0, r4, r9, r0
 800d820:	fba3 4504 	umull	r4, r5, r3, r4
 800d824:	4405      	add	r5, r0
 800d826:	1936      	adds	r6, r6, r4
 800d828:	416f      	adcs	r7, r5
 800d82a:	f241 0090 	movw	r0, #4240	; 0x1090
 800d82e:	f851 c000 	ldr.w	ip, [r1, r0]
 800d832:	4664      	mov	r4, ip
 800d834:	17e5      	asrs	r5, r4, #31
 800d836:	fb03 f005 	mul.w	r0, r3, r5
 800d83a:	fb0c 0009 	mla	r0, ip, r9, r0
 800d83e:	fba3 450c 	umull	r4, r5, r3, ip
 800d842:	4405      	add	r5, r0
 800d844:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d848:	eb18 0804 	adds.w	r8, r8, r4
 800d84c:	eb49 0905 	adc.w	r9, r9, r5
 800d850:	e9cd 8900 	strd	r8, r9, [sp]
	MC1S(5)
 800d854:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
 800d858:	f241 0014 	movw	r0, #4116	; 0x1014
 800d85c:	580c      	ldr	r4, [r1, r0]
 800d85e:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800d862:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d866:	fb03 f00b 	mul.w	r0, r3, fp
 800d86a:	fb04 0009 	mla	r0, r4, r9, r0
 800d86e:	fba3 4504 	umull	r4, r5, r3, r4
 800d872:	4405      	add	r5, r0
 800d874:	eb16 0a04 	adds.w	sl, r6, r4
 800d878:	eb47 0b05 	adc.w	fp, r7, r5
 800d87c:	4656      	mov	r6, sl
 800d87e:	465f      	mov	r7, fp
 800d880:	f241 0094 	movw	r0, #4244	; 0x1094
 800d884:	f851 c000 	ldr.w	ip, [r1, r0]
 800d888:	4664      	mov	r4, ip
 800d88a:	17e5      	asrs	r5, r4, #31
 800d88c:	fb03 f005 	mul.w	r0, r3, r5
 800d890:	fb0c 0009 	mla	r0, ip, r9, r0
 800d894:	fba3 450c 	umull	r4, r5, r3, ip
 800d898:	4405      	add	r5, r0
 800d89a:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d89e:	eb18 0804 	adds.w	r8, r8, r4
 800d8a2:	eb49 0905 	adc.w	r9, r9, r5
 800d8a6:	e9cd 8900 	strd	r8, r9, [sp]
	MC1S(6)
 800d8aa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
 800d8ae:	f241 0018 	movw	r0, #4120	; 0x1018
 800d8b2:	580c      	ldr	r4, [r1, r0]
 800d8b4:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800d8b8:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d8bc:	fb03 f00b 	mul.w	r0, r3, fp
 800d8c0:	fb04 0009 	mla	r0, r4, r9, r0
 800d8c4:	fba3 4504 	umull	r4, r5, r3, r4
 800d8c8:	4405      	add	r5, r0
 800d8ca:	1936      	adds	r6, r6, r4
 800d8cc:	416f      	adcs	r7, r5
 800d8ce:	f241 0098 	movw	r0, #4248	; 0x1098
 800d8d2:	f851 c000 	ldr.w	ip, [r1, r0]
 800d8d6:	4664      	mov	r4, ip
 800d8d8:	17e5      	asrs	r5, r4, #31
 800d8da:	fb03 f005 	mul.w	r0, r3, r5
 800d8de:	fb0c 0009 	mla	r0, ip, r9, r0
 800d8e2:	fba3 450c 	umull	r4, r5, r3, ip
 800d8e6:	4405      	add	r5, r0
 800d8e8:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d8ec:	eb18 0804 	adds.w	r8, r8, r4
 800d8f0:	eb49 0905 	adc.w	r9, r9, r5
 800d8f4:	e9cd 8900 	strd	r8, r9, [sp]
	MC1S(7)
 800d8f8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 800d8fc:	f241 001c 	movw	r0, #4124	; 0x101c
 800d900:	580c      	ldr	r4, [r1, r0]
 800d902:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800d906:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800d90a:	fb03 f00b 	mul.w	r0, r3, fp
 800d90e:	fb04 0009 	mla	r0, r4, r9, r0
 800d912:	fba3 4504 	umull	r4, r5, r3, r4
 800d916:	4405      	add	r5, r0
 800d918:	eb14 0a06 	adds.w	sl, r4, r6
 800d91c:	eb45 0b07 	adc.w	fp, r5, r7
 800d920:	f241 009c 	movw	r0, #4252	; 0x109c
 800d924:	f851 c000 	ldr.w	ip, [r1, r0]
 800d928:	4666      	mov	r6, ip
 800d92a:	17f7      	asrs	r7, r6, #31
 800d92c:	fb03 f007 	mul.w	r0, r3, r7
 800d930:	fb0c 0009 	mla	r0, ip, r9, r0
 800d934:	fba3 670c 	umull	r6, r7, r3, ip
 800d938:	4407      	add	r7, r0
 800d93a:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d93e:	eb18 0806 	adds.w	r8, r8, r6
 800d942:	eb49 0907 	adc.w	r9, r9, r7
 800d946:	4646      	mov	r6, r8
 800d948:	464f      	mov	r7, r9
  return x >> n;
 800d94a:	ea4f 531a 	mov.w	r3, sl, lsr #20
 800d94e:	ea43 330b 	orr.w	r3, r3, fp, lsl #12
	x >>= fracBits;
 800d952:	1198      	asrs	r0, r3, #6
	sign = x >> 31;
 800d954:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 800d956:	ebb4 5f63 	cmp.w	r4, r3, asr #21
 800d95a:	d002      	beq.n	800d962 <xmp3fixpt_PolyphaseStereo+0x7f8>
		x = sign ^ ((1 << 15) - 1);
 800d95c:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800d960:	4060      	eors	r0, r4

	*(pcm + 2*16 + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800d962:	f8ae 0040 	strh.w	r0, [lr, #64]	; 0x40
 800d966:	0d30      	lsrs	r0, r6, #20
 800d968:	ea40 3007 	orr.w	r0, r0, r7, lsl #12
	x >>= fracBits;
 800d96c:	1183      	asrs	r3, r0, #6
	sign = x >> 31;
 800d96e:	17c4      	asrs	r4, r0, #31
	if (sign != (x >> 15))
 800d970:	ebb4 5f60 	cmp.w	r4, r0, asr #21
 800d974:	d002      	beq.n	800d97c <xmp3fixpt_PolyphaseStereo+0x812>
		x = sign ^ ((1 << 15) - 1);
 800d976:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d97a:	4063      	eors	r3, r4
	*(pcm + 2*16 + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 800d97c:	4670      	mov	r0, lr
 800d97e:	f8ae 3042 	strh.w	r3, [lr, #66]	; 0x42

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 800d982:	f102 0940 	add.w	r9, r2, #64	; 0x40
	vb1 = vbuf + 64;
 800d986:	f501 7e80 	add.w	lr, r1, #256	; 0x100
	pcm += 2;
 800d98a:	1d03      	adds	r3, r0, #4
 800d98c:	9302      	str	r3, [sp, #8]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 800d98e:	230f      	movs	r3, #15
 800d990:	9304      	str	r3, [sp, #16]
 800d992:	f8cd 9000 	str.w	r9, [sp]
 800d996:	e006      	b.n	800d9a6 <xmp3fixpt_PolyphaseStereo+0x83c>

		vb1 += 64;
		*(pcm + 0)         = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
 800d998:	8019      	strh	r1, [r3, #0]
		pcm += 2;
 800d99a:	9b02      	ldr	r3, [sp, #8]
 800d99c:	3304      	adds	r3, #4
 800d99e:	9302      	str	r3, [sp, #8]
	for (i = 15; i > 0; i--) {
 800d9a0:	9b04      	ldr	r3, [sp, #16]
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	9304      	str	r3, [sp, #16]
 800d9a6:	9b04      	ldr	r3, [sp, #16]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f340 8531 	ble.w	800e410 <xmp3fixpt_PolyphaseStereo+0x12a6>
		MC2S(0)
 800d9ae:	9b00      	ldr	r3, [sp, #0]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	6859      	ldr	r1, [r3, #4]
 800d9b4:	f8de 3000 	ldr.w	r3, [lr]
 800d9b8:	f8de 405c 	ldr.w	r4, [lr, #92]	; 0x5c
   return (sum + ((int64_t)x * y));
 800d9bc:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800d9c0:	4615      	mov	r5, r2
 800d9c2:	17d6      	asrs	r6, r2, #31
 800d9c4:	e9cd 5606 	strd	r5, r6, [sp, #24]
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	fb03 f000 	mul.w	r0, r3, r0
 800d9ce:	fb02 000b 	mla	r0, r2, fp, r0
 800d9d2:	fba3 6702 	umull	r6, r7, r3, r2
 800d9d6:	4407      	add	r7, r0
 800d9d8:	f116 7800 	adds.w	r8, r6, #33554432	; 0x2000000
 800d9dc:	f147 0900 	adc.w	r9, r7, #0
 800d9e0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800d9e4:	460d      	mov	r5, r1
 800d9e6:	17ce      	asrs	r6, r1, #31
 800d9e8:	fb01 f00b 	mul.w	r0, r1, fp
 800d9ec:	e9cd 560e 	strd	r5, r6, [sp, #56]	; 0x38
 800d9f0:	fb03 0006 	mla	r0, r3, r6, r0
 800d9f4:	fba1 6703 	umull	r6, r7, r1, r3
 800d9f8:	4407      	add	r7, r0
 800d9fa:	f116 7900 	adds.w	r9, r6, #33554432	; 0x2000000
 800d9fe:	f147 0a00 	adc.w	sl, r7, #0
 800da02:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 800da06:	4248      	negs	r0, r1
 800da08:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800da0c:	4606      	mov	r6, r0
 800da0e:	17c7      	asrs	r7, r0, #31
 800da10:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 800da14:	463b      	mov	r3, r7
 800da16:	fb04 f303 	mul.w	r3, r4, r3
 800da1a:	fb00 330b 	mla	r3, r0, fp, r3
 800da1e:	fba4 6700 	umull	r6, r7, r4, r0
 800da22:	441f      	add	r7, r3
 800da24:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800da28:	eb18 0806 	adds.w	r8, r8, r6
 800da2c:	eb49 0907 	adc.w	r9, r9, r7
 800da30:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800da34:	9d07      	ldr	r5, [sp, #28]
 800da36:	fb04 f305 	mul.w	r3, r4, r5
 800da3a:	fb02 330b 	mla	r3, r2, fp, r3
 800da3e:	fba4 4502 	umull	r4, r5, r4, r2
 800da42:	441d      	add	r5, r3
 800da44:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
 800da48:	eb19 0904 	adds.w	r9, r9, r4
 800da4c:	eb4a 0a05 	adc.w	sl, sl, r5
 800da50:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 800da54:	f8de c080 	ldr.w	ip, [lr, #128]	; 0x80
 800da58:	f8de 30dc 	ldr.w	r3, [lr, #220]	; 0xdc
 800da5c:	ea4f 78ec 	mov.w	r8, ip, asr #31
 800da60:	9c07      	ldr	r4, [sp, #28]
 800da62:	fb0c f604 	mul.w	r6, ip, r4
 800da66:	fb02 6608 	mla	r6, r2, r8, r6
 800da6a:	fbac 4502 	umull	r4, r5, ip, r2
 800da6e:	4435      	add	r5, r6
 800da70:	f114 7a00 	adds.w	sl, r4, #33554432	; 0x2000000
 800da74:	f145 0b00 	adc.w	fp, r5, #0
 800da78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800da7a:	fb0c f604 	mul.w	r6, ip, r4
 800da7e:	fb01 6608 	mla	r6, r1, r8, r6
 800da82:	fbac 4501 	umull	r4, r5, ip, r1
 800da86:	4435      	add	r5, r6
 800da88:	f114 7600 	adds.w	r6, r4, #33554432	; 0x2000000
 800da8c:	f145 0700 	adc.w	r7, r5, #0
 800da90:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800da94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da96:	fb03 f401 	mul.w	r4, r3, r1
 800da9a:	fb00 4409 	mla	r4, r0, r9, r4
 800da9e:	fba3 0100 	umull	r0, r1, r3, r0
 800daa2:	4421      	add	r1, r4
 800daa4:	eb10 040a 	adds.w	r4, r0, sl
 800daa8:	eb41 050b 	adc.w	r5, r1, fp
 800daac:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800dab0:	9907      	ldr	r1, [sp, #28]
 800dab2:	fb03 f101 	mul.w	r1, r3, r1
 800dab6:	fb02 1109 	mla	r1, r2, r9, r1
 800daba:	fba3 2302 	umull	r2, r3, r3, r2
 800dabe:	440b      	add	r3, r1
 800dac0:	1990      	adds	r0, r2, r6
 800dac2:	eb43 0107 	adc.w	r1, r3, r7
 800dac6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
		MC2S(1)
 800daca:	9b00      	ldr	r3, [sp, #0]
 800dacc:	689a      	ldr	r2, [r3, #8]
 800dace:	68df      	ldr	r7, [r3, #12]
 800dad0:	f8de 6004 	ldr.w	r6, [lr, #4]
 800dad4:	f8de 4058 	ldr.w	r4, [lr, #88]	; 0x58
 800dad8:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800dadc:	4610      	mov	r0, r2
 800dade:	17d1      	asrs	r1, r2, #31
 800dae0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dae4:	460b      	mov	r3, r1
 800dae6:	fb06 f303 	mul.w	r3, r6, r3
 800daea:	fb02 330b 	mla	r3, r2, fp, r3
 800daee:	fba6 0102 	umull	r0, r1, r6, r2
 800daf2:	4419      	add	r1, r3
 800daf4:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800daf8:	eb18 0800 	adds.w	r8, r8, r0
 800dafc:	eb49 0901 	adc.w	r9, r9, r1
 800db00:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800db04:	46b8      	mov	r8, r7
 800db06:	ea4f 79e7 	mov.w	r9, r7, asr #31
 800db0a:	fb07 f30b 	mul.w	r3, r7, fp
 800db0e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800db12:	fb06 3309 	mla	r3, r6, r9, r3
 800db16:	fba7 0106 	umull	r0, r1, r7, r6
 800db1a:	4419      	add	r1, r3
 800db1c:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
 800db20:	eb19 0900 	adds.w	r9, r9, r0
 800db24:	eb4a 0a01 	adc.w	sl, sl, r1
 800db28:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 800db2c:	427e      	negs	r6, r7
 800db2e:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800db32:	46b0      	mov	r8, r6
 800db34:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800db38:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800db3c:	464b      	mov	r3, r9
 800db3e:	fb04 f303 	mul.w	r3, r4, r3
 800db42:	fb06 330b 	mla	r3, r6, fp, r3
 800db46:	fba4 0106 	umull	r0, r1, r4, r6
 800db4a:	4419      	add	r1, r3
 800db4c:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800db50:	eb18 0800 	adds.w	r8, r8, r0
 800db54:	eb49 0901 	adc.w	r9, r9, r1
 800db58:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800db5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db60:	460b      	mov	r3, r1
 800db62:	fb04 f303 	mul.w	r3, r4, r3
 800db66:	fb02 330b 	mla	r3, r2, fp, r3
 800db6a:	fba4 4502 	umull	r4, r5, r4, r2
 800db6e:	441d      	add	r5, r3
 800db70:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 800db74:	eb19 0904 	adds.w	r9, r9, r4
 800db78:	eb4a 0a05 	adc.w	sl, sl, r5
 800db7c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800db80:	f8de c084 	ldr.w	ip, [lr, #132]	; 0x84
 800db84:	f8de 30d8 	ldr.w	r3, [lr, #216]	; 0xd8
 800db88:	46e2      	mov	sl, ip
 800db8a:	ea4f 7bec 	mov.w	fp, ip, asr #31
 800db8e:	4689      	mov	r9, r1
 800db90:	fb0c f401 	mul.w	r4, ip, r1
 800db94:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800db98:	fb02 440b 	mla	r4, r2, fp, r4
 800db9c:	fbac ab02 	umull	sl, fp, ip, r2
 800dba0:	44a3      	add	fp, r4
 800dba2:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800dba6:	eb14 040a 	adds.w	r4, r4, sl
 800dbaa:	eb45 050b 	adc.w	r5, r5, fp
 800dbae:	46a2      	mov	sl, r4
 800dbb0:	46ab      	mov	fp, r5
 800dbb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dbb4:	fb0c f101 	mul.w	r1, ip, r1
 800dbb8:	9807      	ldr	r0, [sp, #28]
 800dbba:	fb07 1100 	mla	r1, r7, r0, r1
 800dbbe:	fbac 4507 	umull	r4, r5, ip, r7
 800dbc2:	440d      	add	r5, r1
 800dbc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dbc8:	1900      	adds	r0, r0, r4
 800dbca:	4169      	adcs	r1, r5
 800dbcc:	461c      	mov	r4, r3
 800dbce:	17dd      	asrs	r5, r3, #31
 800dbd0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dbd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dbd6:	fb03 f404 	mul.w	r4, r3, r4
 800dbda:	9d07      	ldr	r5, [sp, #28]
 800dbdc:	fb06 4405 	mla	r4, r6, r5, r4
 800dbe0:	fba3 6706 	umull	r6, r7, r3, r6
 800dbe4:	4427      	add	r7, r4
 800dbe6:	eb16 040a 	adds.w	r4, r6, sl
 800dbea:	eb47 050b 	adc.w	r5, r7, fp
 800dbee:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800dbf2:	fb03 f409 	mul.w	r4, r3, r9
 800dbf6:	9d07      	ldr	r5, [sp, #28]
 800dbf8:	fb02 4405 	mla	r4, r2, r5, r4
 800dbfc:	fba3 2302 	umull	r2, r3, r3, r2
 800dc00:	4423      	add	r3, r4
 800dc02:	1815      	adds	r5, r2, r0
 800dc04:	eb43 0601 	adc.w	r6, r3, r1
 800dc08:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
		MC2S(2)
 800dc0c:	9b00      	ldr	r3, [sp, #0]
 800dc0e:	691a      	ldr	r2, [r3, #16]
 800dc10:	695f      	ldr	r7, [r3, #20]
 800dc12:	f8de 3008 	ldr.w	r3, [lr, #8]
 800dc16:	f8de 4054 	ldr.w	r4, [lr, #84]	; 0x54
 800dc1a:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800dc1e:	4610      	mov	r0, r2
 800dc20:	17d1      	asrs	r1, r2, #31
 800dc22:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dc26:	fb03 f501 	mul.w	r5, r3, r1
 800dc2a:	fb02 550b 	mla	r5, r2, fp, r5
 800dc2e:	fba3 0102 	umull	r0, r1, r3, r2
 800dc32:	4429      	add	r1, r5
 800dc34:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800dc38:	eb18 0800 	adds.w	r8, r8, r0
 800dc3c:	eb49 0901 	adc.w	r9, r9, r1
 800dc40:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800dc44:	17fe      	asrs	r6, r7, #31
 800dc46:	46b8      	mov	r8, r7
 800dc48:	46b1      	mov	r9, r6
 800dc4a:	fb07 f50b 	mul.w	r5, r7, fp
 800dc4e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dc52:	fb03 5506 	mla	r5, r3, r6, r5
 800dc56:	fba7 0103 	umull	r0, r1, r7, r3
 800dc5a:	4429      	add	r1, r5
 800dc5c:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
 800dc60:	eb19 0900 	adds.w	r9, r9, r0
 800dc64:	eb4a 0a01 	adc.w	sl, sl, r1
 800dc68:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 800dc6c:	427e      	negs	r6, r7
 800dc6e:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800dc72:	4630      	mov	r0, r6
 800dc74:	17f1      	asrs	r1, r6, #31
 800dc76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	fb04 f303 	mul.w	r3, r4, r3
 800dc80:	fb06 330b 	mla	r3, r6, fp, r3
 800dc84:	fba4 0106 	umull	r0, r1, r4, r6
 800dc88:	4419      	add	r1, r3
 800dc8a:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800dc8e:	eb18 0800 	adds.w	r8, r8, r0
 800dc92:	eb49 0901 	adc.w	r9, r9, r1
 800dc96:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800dc9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	fb04 f303 	mul.w	r3, r4, r3
 800dca4:	fb02 330b 	mla	r3, r2, fp, r3
 800dca8:	fba4 4502 	umull	r4, r5, r4, r2
 800dcac:	441d      	add	r5, r3
 800dcae:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 800dcb2:	eb19 0904 	adds.w	r9, r9, r4
 800dcb6:	eb4a 0a05 	adc.w	sl, sl, r5
 800dcba:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 800dcbe:	f8de c088 	ldr.w	ip, [lr, #136]	; 0x88
 800dcc2:	f8de 30d4 	ldr.w	r3, [lr, #212]	; 0xd4
 800dcc6:	46e2      	mov	sl, ip
 800dcc8:	ea4f 7bec 	mov.w	fp, ip, asr #31
 800dccc:	4689      	mov	r9, r1
 800dcce:	fb0c f401 	mul.w	r4, ip, r1
 800dcd2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800dcd6:	fb02 440b 	mla	r4, r2, fp, r4
 800dcda:	fbac ab02 	umull	sl, fp, ip, r2
 800dcde:	44a3      	add	fp, r4
 800dce0:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800dce4:	eb14 040a 	adds.w	r4, r4, sl
 800dce8:	eb45 050b 	adc.w	r5, r5, fp
 800dcec:	46a2      	mov	sl, r4
 800dcee:	46ab      	mov	fp, r5
 800dcf0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dcf2:	fb0c f101 	mul.w	r1, ip, r1
 800dcf6:	9807      	ldr	r0, [sp, #28]
 800dcf8:	fb07 1100 	mla	r1, r7, r0, r1
 800dcfc:	fbac 4507 	umull	r4, r5, ip, r7
 800dd00:	440d      	add	r5, r1
 800dd02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dd06:	1900      	adds	r0, r0, r4
 800dd08:	4169      	adcs	r1, r5
 800dd0a:	461c      	mov	r4, r3
 800dd0c:	17dd      	asrs	r5, r3, #31
 800dd0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dd12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dd14:	fb03 f404 	mul.w	r4, r3, r4
 800dd18:	9d07      	ldr	r5, [sp, #28]
 800dd1a:	fb06 4405 	mla	r4, r6, r5, r4
 800dd1e:	fba3 6706 	umull	r6, r7, r3, r6
 800dd22:	4427      	add	r7, r4
 800dd24:	eb16 040a 	adds.w	r4, r6, sl
 800dd28:	eb47 050b 	adc.w	r5, r7, fp
 800dd2c:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800dd30:	fb03 f409 	mul.w	r4, r3, r9
 800dd34:	9d07      	ldr	r5, [sp, #28]
 800dd36:	fb02 4405 	mla	r4, r2, r5, r4
 800dd3a:	fba3 2302 	umull	r2, r3, r3, r2
 800dd3e:	4423      	add	r3, r4
 800dd40:	1815      	adds	r5, r2, r0
 800dd42:	eb43 0601 	adc.w	r6, r3, r1
 800dd46:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
		MC2S(3)
 800dd4a:	9b00      	ldr	r3, [sp, #0]
 800dd4c:	699a      	ldr	r2, [r3, #24]
 800dd4e:	69df      	ldr	r7, [r3, #28]
 800dd50:	f8de 300c 	ldr.w	r3, [lr, #12]
 800dd54:	f8de 4050 	ldr.w	r4, [lr, #80]	; 0x50
 800dd58:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800dd5c:	4610      	mov	r0, r2
 800dd5e:	17d1      	asrs	r1, r2, #31
 800dd60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dd64:	fb03 f501 	mul.w	r5, r3, r1
 800dd68:	fb02 550b 	mla	r5, r2, fp, r5
 800dd6c:	fba3 0102 	umull	r0, r1, r3, r2
 800dd70:	4429      	add	r1, r5
 800dd72:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800dd76:	eb18 0800 	adds.w	r8, r8, r0
 800dd7a:	eb49 0901 	adc.w	r9, r9, r1
 800dd7e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800dd82:	17fe      	asrs	r6, r7, #31
 800dd84:	46b8      	mov	r8, r7
 800dd86:	46b1      	mov	r9, r6
 800dd88:	fb07 f50b 	mul.w	r5, r7, fp
 800dd8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dd90:	fb03 5506 	mla	r5, r3, r6, r5
 800dd94:	fba7 0103 	umull	r0, r1, r7, r3
 800dd98:	4429      	add	r1, r5
 800dd9a:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
 800dd9e:	eb19 0900 	adds.w	r9, r9, r0
 800dda2:	eb4a 0a01 	adc.w	sl, sl, r1
 800dda6:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 800ddaa:	427e      	negs	r6, r7
 800ddac:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	17f1      	asrs	r1, r6, #31
 800ddb4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	fb04 f303 	mul.w	r3, r4, r3
 800ddbe:	fb06 330b 	mla	r3, r6, fp, r3
 800ddc2:	fba4 0106 	umull	r0, r1, r4, r6
 800ddc6:	4419      	add	r1, r3
 800ddc8:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800ddcc:	eb18 0800 	adds.w	r8, r8, r0
 800ddd0:	eb49 0901 	adc.w	r9, r9, r1
 800ddd4:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800ddd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dddc:	460b      	mov	r3, r1
 800ddde:	fb04 f303 	mul.w	r3, r4, r3
 800dde2:	fb02 330b 	mla	r3, r2, fp, r3
 800dde6:	fba4 4502 	umull	r4, r5, r4, r2
 800ddea:	441d      	add	r5, r3
 800ddec:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 800ddf0:	eb19 0904 	adds.w	r9, r9, r4
 800ddf4:	eb4a 0a05 	adc.w	sl, sl, r5
 800ddf8:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800ddfc:	f8de c08c 	ldr.w	ip, [lr, #140]	; 0x8c
 800de00:	f8de 30d0 	ldr.w	r3, [lr, #208]	; 0xd0
 800de04:	46e2      	mov	sl, ip
 800de06:	ea4f 7bec 	mov.w	fp, ip, asr #31
 800de0a:	4689      	mov	r9, r1
 800de0c:	fb0c f401 	mul.w	r4, ip, r1
 800de10:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800de14:	fb02 440b 	mla	r4, r2, fp, r4
 800de18:	fbac ab02 	umull	sl, fp, ip, r2
 800de1c:	44a3      	add	fp, r4
 800de1e:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800de22:	eb14 040a 	adds.w	r4, r4, sl
 800de26:	eb45 050b 	adc.w	r5, r5, fp
 800de2a:	46a2      	mov	sl, r4
 800de2c:	46ab      	mov	fp, r5
 800de2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800de30:	fb0c f101 	mul.w	r1, ip, r1
 800de34:	9807      	ldr	r0, [sp, #28]
 800de36:	fb07 1100 	mla	r1, r7, r0, r1
 800de3a:	fbac 4507 	umull	r4, r5, ip, r7
 800de3e:	440d      	add	r5, r1
 800de40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de44:	1900      	adds	r0, r0, r4
 800de46:	4169      	adcs	r1, r5
 800de48:	461c      	mov	r4, r3
 800de4a:	17dd      	asrs	r5, r3, #31
 800de4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800de50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800de52:	fb03 f404 	mul.w	r4, r3, r4
 800de56:	9d07      	ldr	r5, [sp, #28]
 800de58:	fb06 4405 	mla	r4, r6, r5, r4
 800de5c:	fba3 6706 	umull	r6, r7, r3, r6
 800de60:	4427      	add	r7, r4
 800de62:	eb16 040a 	adds.w	r4, r6, sl
 800de66:	eb47 050b 	adc.w	r5, r7, fp
 800de6a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800de6e:	fb03 f409 	mul.w	r4, r3, r9
 800de72:	9d07      	ldr	r5, [sp, #28]
 800de74:	fb02 4405 	mla	r4, r2, r5, r4
 800de78:	fba3 2302 	umull	r2, r3, r3, r2
 800de7c:	4423      	add	r3, r4
 800de7e:	1815      	adds	r5, r2, r0
 800de80:	eb43 0601 	adc.w	r6, r3, r1
 800de84:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
		MC2S(4)
 800de88:	9b00      	ldr	r3, [sp, #0]
 800de8a:	6a1a      	ldr	r2, [r3, #32]
 800de8c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 800de8e:	f8de 3010 	ldr.w	r3, [lr, #16]
 800de92:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 800de96:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800de9a:	4610      	mov	r0, r2
 800de9c:	17d1      	asrs	r1, r2, #31
 800de9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dea2:	fb03 f501 	mul.w	r5, r3, r1
 800dea6:	fb02 550b 	mla	r5, r2, fp, r5
 800deaa:	fba3 0102 	umull	r0, r1, r3, r2
 800deae:	4429      	add	r1, r5
 800deb0:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800deb4:	eb18 0800 	adds.w	r8, r8, r0
 800deb8:	eb49 0901 	adc.w	r9, r9, r1
 800debc:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800dec0:	17fe      	asrs	r6, r7, #31
 800dec2:	46b8      	mov	r8, r7
 800dec4:	46b1      	mov	r9, r6
 800dec6:	fb07 f50b 	mul.w	r5, r7, fp
 800deca:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dece:	fb03 5506 	mla	r5, r3, r6, r5
 800ded2:	fba7 0103 	umull	r0, r1, r7, r3
 800ded6:	4429      	add	r1, r5
 800ded8:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
 800dedc:	eb19 0900 	adds.w	r9, r9, r0
 800dee0:	eb4a 0a01 	adc.w	sl, sl, r1
 800dee4:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 800dee8:	427e      	negs	r6, r7
 800deea:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800deee:	4630      	mov	r0, r6
 800def0:	17f1      	asrs	r1, r6, #31
 800def2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800def6:	460b      	mov	r3, r1
 800def8:	fb04 f303 	mul.w	r3, r4, r3
 800defc:	fb06 330b 	mla	r3, r6, fp, r3
 800df00:	fba4 0106 	umull	r0, r1, r4, r6
 800df04:	4419      	add	r1, r3
 800df06:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800df0a:	eb18 0800 	adds.w	r8, r8, r0
 800df0e:	eb49 0901 	adc.w	r9, r9, r1
 800df12:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800df16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df1a:	460b      	mov	r3, r1
 800df1c:	fb04 f303 	mul.w	r3, r4, r3
 800df20:	fb02 330b 	mla	r3, r2, fp, r3
 800df24:	fba4 4502 	umull	r4, r5, r4, r2
 800df28:	441d      	add	r5, r3
 800df2a:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 800df2e:	eb19 0904 	adds.w	r9, r9, r4
 800df32:	eb4a 0a05 	adc.w	sl, sl, r5
 800df36:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 800df3a:	f8de c090 	ldr.w	ip, [lr, #144]	; 0x90
 800df3e:	f8de 30cc 	ldr.w	r3, [lr, #204]	; 0xcc
 800df42:	46e2      	mov	sl, ip
 800df44:	ea4f 7bec 	mov.w	fp, ip, asr #31
 800df48:	4689      	mov	r9, r1
 800df4a:	fb0c f401 	mul.w	r4, ip, r1
 800df4e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800df52:	fb02 440b 	mla	r4, r2, fp, r4
 800df56:	fbac ab02 	umull	sl, fp, ip, r2
 800df5a:	44a3      	add	fp, r4
 800df5c:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800df60:	eb14 040a 	adds.w	r4, r4, sl
 800df64:	eb45 050b 	adc.w	r5, r5, fp
 800df68:	46a2      	mov	sl, r4
 800df6a:	46ab      	mov	fp, r5
 800df6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800df6e:	fb0c f101 	mul.w	r1, ip, r1
 800df72:	9807      	ldr	r0, [sp, #28]
 800df74:	fb07 1100 	mla	r1, r7, r0, r1
 800df78:	fbac 4507 	umull	r4, r5, ip, r7
 800df7c:	440d      	add	r5, r1
 800df7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800df82:	1900      	adds	r0, r0, r4
 800df84:	4169      	adcs	r1, r5
 800df86:	461c      	mov	r4, r3
 800df88:	17dd      	asrs	r5, r3, #31
 800df8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800df8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800df90:	fb03 f404 	mul.w	r4, r3, r4
 800df94:	9d07      	ldr	r5, [sp, #28]
 800df96:	fb06 4405 	mla	r4, r6, r5, r4
 800df9a:	fba3 6706 	umull	r6, r7, r3, r6
 800df9e:	4427      	add	r7, r4
 800dfa0:	eb16 040a 	adds.w	r4, r6, sl
 800dfa4:	eb47 050b 	adc.w	r5, r7, fp
 800dfa8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800dfac:	fb03 f409 	mul.w	r4, r3, r9
 800dfb0:	9d07      	ldr	r5, [sp, #28]
 800dfb2:	fb02 4405 	mla	r4, r2, r5, r4
 800dfb6:	fba3 2302 	umull	r2, r3, r3, r2
 800dfba:	4423      	add	r3, r4
 800dfbc:	1815      	adds	r5, r2, r0
 800dfbe:	eb43 0601 	adc.w	r6, r3, r1
 800dfc2:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
		MC2S(5)
 800dfc6:	9b00      	ldr	r3, [sp, #0]
 800dfc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfca:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 800dfcc:	f8de 3014 	ldr.w	r3, [lr, #20]
 800dfd0:	f8de 4048 	ldr.w	r4, [lr, #72]	; 0x48
 800dfd4:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800dfd8:	4610      	mov	r0, r2
 800dfda:	17d1      	asrs	r1, r2, #31
 800dfdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dfe0:	fb03 f501 	mul.w	r5, r3, r1
 800dfe4:	fb02 550b 	mla	r5, r2, fp, r5
 800dfe8:	fba3 0102 	umull	r0, r1, r3, r2
 800dfec:	4429      	add	r1, r5
 800dfee:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800dff2:	eb18 0800 	adds.w	r8, r8, r0
 800dff6:	eb49 0901 	adc.w	r9, r9, r1
 800dffa:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800dffe:	17fe      	asrs	r6, r7, #31
 800e000:	46b8      	mov	r8, r7
 800e002:	46b1      	mov	r9, r6
 800e004:	fb07 f50b 	mul.w	r5, r7, fp
 800e008:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e00c:	fb03 5506 	mla	r5, r3, r6, r5
 800e010:	fba7 0103 	umull	r0, r1, r7, r3
 800e014:	4429      	add	r1, r5
 800e016:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
 800e01a:	eb19 0900 	adds.w	r9, r9, r0
 800e01e:	eb4a 0a01 	adc.w	sl, sl, r1
 800e022:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 800e026:	427e      	negs	r6, r7
 800e028:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800e02c:	4630      	mov	r0, r6
 800e02e:	17f1      	asrs	r1, r6, #31
 800e030:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e034:	460b      	mov	r3, r1
 800e036:	fb04 f303 	mul.w	r3, r4, r3
 800e03a:	fb06 330b 	mla	r3, r6, fp, r3
 800e03e:	fba4 0106 	umull	r0, r1, r4, r6
 800e042:	4419      	add	r1, r3
 800e044:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800e048:	eb18 0800 	adds.w	r8, r8, r0
 800e04c:	eb49 0901 	adc.w	r9, r9, r1
 800e050:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e054:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e058:	460b      	mov	r3, r1
 800e05a:	fb04 f303 	mul.w	r3, r4, r3
 800e05e:	fb02 330b 	mla	r3, r2, fp, r3
 800e062:	fba4 4502 	umull	r4, r5, r4, r2
 800e066:	441d      	add	r5, r3
 800e068:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 800e06c:	eb19 0904 	adds.w	r9, r9, r4
 800e070:	eb4a 0a05 	adc.w	sl, sl, r5
 800e074:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800e078:	f8de c094 	ldr.w	ip, [lr, #148]	; 0x94
 800e07c:	f8de 30c8 	ldr.w	r3, [lr, #200]	; 0xc8
 800e080:	46e2      	mov	sl, ip
 800e082:	ea4f 7bec 	mov.w	fp, ip, asr #31
 800e086:	4689      	mov	r9, r1
 800e088:	fb0c f401 	mul.w	r4, ip, r1
 800e08c:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800e090:	fb02 440b 	mla	r4, r2, fp, r4
 800e094:	fbac ab02 	umull	sl, fp, ip, r2
 800e098:	44a3      	add	fp, r4
 800e09a:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800e09e:	eb14 040a 	adds.w	r4, r4, sl
 800e0a2:	eb45 050b 	adc.w	r5, r5, fp
 800e0a6:	46a2      	mov	sl, r4
 800e0a8:	46ab      	mov	fp, r5
 800e0aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e0ac:	fb0c f101 	mul.w	r1, ip, r1
 800e0b0:	9807      	ldr	r0, [sp, #28]
 800e0b2:	fb07 1100 	mla	r1, r7, r0, r1
 800e0b6:	fbac 4507 	umull	r4, r5, ip, r7
 800e0ba:	440d      	add	r5, r1
 800e0bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e0c0:	1900      	adds	r0, r0, r4
 800e0c2:	4169      	adcs	r1, r5
 800e0c4:	461c      	mov	r4, r3
 800e0c6:	17dd      	asrs	r5, r3, #31
 800e0c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e0cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e0ce:	fb03 f404 	mul.w	r4, r3, r4
 800e0d2:	9d07      	ldr	r5, [sp, #28]
 800e0d4:	fb06 4405 	mla	r4, r6, r5, r4
 800e0d8:	fba3 6706 	umull	r6, r7, r3, r6
 800e0dc:	4427      	add	r7, r4
 800e0de:	eb16 040a 	adds.w	r4, r6, sl
 800e0e2:	eb47 050b 	adc.w	r5, r7, fp
 800e0e6:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800e0ea:	fb03 f409 	mul.w	r4, r3, r9
 800e0ee:	9d07      	ldr	r5, [sp, #28]
 800e0f0:	fb02 4405 	mla	r4, r2, r5, r4
 800e0f4:	fba3 2302 	umull	r2, r3, r3, r2
 800e0f8:	4423      	add	r3, r4
 800e0fa:	1815      	adds	r5, r2, r0
 800e0fc:	eb43 0601 	adc.w	r6, r3, r1
 800e100:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
		MC2S(6)
 800e104:	9b00      	ldr	r3, [sp, #0]
 800e106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e108:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800e10a:	f8de 3018 	ldr.w	r3, [lr, #24]
 800e10e:	f8de 4044 	ldr.w	r4, [lr, #68]	; 0x44
 800e112:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800e116:	4610      	mov	r0, r2
 800e118:	17d1      	asrs	r1, r2, #31
 800e11a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e11e:	fb03 f501 	mul.w	r5, r3, r1
 800e122:	fb02 550b 	mla	r5, r2, fp, r5
 800e126:	fba3 0102 	umull	r0, r1, r3, r2
 800e12a:	4429      	add	r1, r5
 800e12c:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800e130:	eb18 0800 	adds.w	r8, r8, r0
 800e134:	eb49 0901 	adc.w	r9, r9, r1
 800e138:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e13c:	17fe      	asrs	r6, r7, #31
 800e13e:	46b8      	mov	r8, r7
 800e140:	46b1      	mov	r9, r6
 800e142:	fb07 f50b 	mul.w	r5, r7, fp
 800e146:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e14a:	fb03 5506 	mla	r5, r3, r6, r5
 800e14e:	fba7 0103 	umull	r0, r1, r7, r3
 800e152:	4429      	add	r1, r5
 800e154:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
 800e158:	eb19 0900 	adds.w	r9, r9, r0
 800e15c:	eb4a 0a01 	adc.w	sl, sl, r1
 800e160:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 800e164:	427e      	negs	r6, r7
 800e166:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800e16a:	4630      	mov	r0, r6
 800e16c:	17f1      	asrs	r1, r6, #31
 800e16e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e172:	460b      	mov	r3, r1
 800e174:	fb04 f303 	mul.w	r3, r4, r3
 800e178:	fb06 330b 	mla	r3, r6, fp, r3
 800e17c:	fba4 0106 	umull	r0, r1, r4, r6
 800e180:	4419      	add	r1, r3
 800e182:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800e186:	eb18 0800 	adds.w	r8, r8, r0
 800e18a:	eb49 0901 	adc.w	r9, r9, r1
 800e18e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e192:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e196:	460b      	mov	r3, r1
 800e198:	fb04 f303 	mul.w	r3, r4, r3
 800e19c:	fb02 330b 	mla	r3, r2, fp, r3
 800e1a0:	fba4 4502 	umull	r4, r5, r4, r2
 800e1a4:	441d      	add	r5, r3
 800e1a6:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
 800e1aa:	eb19 0904 	adds.w	r9, r9, r4
 800e1ae:	eb4a 0a05 	adc.w	sl, sl, r5
 800e1b2:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 800e1b6:	f8de c098 	ldr.w	ip, [lr, #152]	; 0x98
 800e1ba:	f8de 30c4 	ldr.w	r3, [lr, #196]	; 0xc4
 800e1be:	46e2      	mov	sl, ip
 800e1c0:	ea4f 7bec 	mov.w	fp, ip, asr #31
 800e1c4:	4689      	mov	r9, r1
 800e1c6:	fb0c f401 	mul.w	r4, ip, r1
 800e1ca:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800e1ce:	fb02 440b 	mla	r4, r2, fp, r4
 800e1d2:	fbac ab02 	umull	sl, fp, ip, r2
 800e1d6:	44a3      	add	fp, r4
 800e1d8:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800e1dc:	eb14 040a 	adds.w	r4, r4, sl
 800e1e0:	eb45 050b 	adc.w	r5, r5, fp
 800e1e4:	46a2      	mov	sl, r4
 800e1e6:	46ab      	mov	fp, r5
 800e1e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e1ea:	fb0c f101 	mul.w	r1, ip, r1
 800e1ee:	9807      	ldr	r0, [sp, #28]
 800e1f0:	fb07 1100 	mla	r1, r7, r0, r1
 800e1f4:	fbac 4507 	umull	r4, r5, ip, r7
 800e1f8:	440d      	add	r5, r1
 800e1fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e1fe:	1900      	adds	r0, r0, r4
 800e200:	4169      	adcs	r1, r5
 800e202:	461c      	mov	r4, r3
 800e204:	17dd      	asrs	r5, r3, #31
 800e206:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e20a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e20c:	fb03 f404 	mul.w	r4, r3, r4
 800e210:	9d07      	ldr	r5, [sp, #28]
 800e212:	fb06 4405 	mla	r4, r6, r5, r4
 800e216:	fba3 6706 	umull	r6, r7, r3, r6
 800e21a:	4427      	add	r7, r4
 800e21c:	eb16 040a 	adds.w	r4, r6, sl
 800e220:	eb47 050b 	adc.w	r5, r7, fp
 800e224:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800e228:	fb03 f409 	mul.w	r4, r3, r9
 800e22c:	9d07      	ldr	r5, [sp, #28]
 800e22e:	fb02 4405 	mla	r4, r2, r5, r4
 800e232:	fba3 2302 	umull	r2, r3, r3, r2
 800e236:	4423      	add	r3, r4
 800e238:	1815      	adds	r5, r2, r0
 800e23a:	eb43 0601 	adc.w	r6, r3, r1
 800e23e:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
		MC2S(7)
 800e242:	9b00      	ldr	r3, [sp, #0]
 800e244:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800e246:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800e248:	3340      	adds	r3, #64	; 0x40
 800e24a:	9300      	str	r3, [sp, #0]
 800e24c:	f8de 501c 	ldr.w	r5, [lr, #28]
 800e250:	f8de 4040 	ldr.w	r4, [lr, #64]	; 0x40
 800e254:	46a8      	mov	r8, r5
 800e256:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800e25a:	4630      	mov	r0, r6
 800e25c:	17f1      	asrs	r1, r6, #31
 800e25e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e262:	fb05 f201 	mul.w	r2, r5, r1
 800e266:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e26a:	fb06 2209 	mla	r2, r6, r9, r2
 800e26e:	fba5 0106 	umull	r0, r1, r5, r6
 800e272:	4411      	add	r1, r2
 800e274:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 800e278:	eb18 0800 	adds.w	r8, r8, r0
 800e27c:	eb49 0901 	adc.w	r9, r9, r1
 800e280:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e284:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800e288:	9b07      	ldr	r3, [sp, #28]
 800e28a:	fb07 f303 	mul.w	r3, r7, r3
 800e28e:	fb05 330c 	mla	r3, r5, ip, r3
 800e292:	fba7 0105 	umull	r0, r1, r7, r5
 800e296:	4419      	add	r1, r3
 800e298:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
 800e29c:	eb19 0900 	adds.w	r9, r9, r0
 800e2a0:	eb4a 0a01 	adc.w	sl, sl, r1
 800e2a4:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 800e2a8:	427a      	negs	r2, r7
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	17e1      	asrs	r1, r4, #31
 800e2ae:	4691      	mov	r9, r2
 800e2b0:	ea4f 7ae2 	mov.w	sl, r2, asr #31
 800e2b4:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
 800e2b8:	4653      	mov	r3, sl
 800e2ba:	fb04 f303 	mul.w	r3, r4, r3
 800e2be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e2c2:	fb02 3301 	mla	r3, r2, r1, r3
 800e2c6:	fba4 0102 	umull	r0, r1, r4, r2
 800e2ca:	4419      	add	r1, r3
 800e2cc:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800e2d0:	eb18 0800 	adds.w	r8, r8, r0
 800e2d4:	eb49 0901 	adc.w	r9, r9, r1
 800e2d8:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e2dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	fb04 f303 	mul.w	r3, r4, r3
 800e2e6:	9d07      	ldr	r5, [sp, #28]
 800e2e8:	fb06 3305 	mla	r3, r6, r5, r3
 800e2ec:	fba4 4506 	umull	r4, r5, r4, r6
 800e2f0:	441d      	add	r5, r3
 800e2f2:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
 800e2f6:	eb19 0904 	adds.w	r9, r9, r4
 800e2fa:	eb4a 0a05 	adc.w	sl, sl, r5
 800e2fe:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800e302:	f8de a09c 	ldr.w	sl, [lr, #156]	; 0x9c
 800e306:	f8de 30c0 	ldr.w	r3, [lr, #192]	; 0xc0
 800e30a:	4654      	mov	r4, sl
 800e30c:	17e5      	asrs	r5, r4, #31
 800e30e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e312:	4689      	mov	r9, r1
 800e314:	fb0a f401 	mul.w	r4, sl, r1
 800e318:	9907      	ldr	r1, [sp, #28]
 800e31a:	fb06 4401 	mla	r4, r6, r1, r4
 800e31e:	fbaa 0106 	umull	r0, r1, sl, r6
 800e322:	4421      	add	r1, r4
 800e324:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800e328:	1824      	adds	r4, r4, r0
 800e32a:	414d      	adcs	r5, r1
 800e32c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800e330:	fb0a f10c 	mul.w	r1, sl, ip
 800e334:	9807      	ldr	r0, [sp, #28]
 800e336:	fb07 1100 	mla	r1, r7, r0, r1
 800e33a:	fbaa ab07 	umull	sl, fp, sl, r7
 800e33e:	448b      	add	fp, r1
 800e340:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e344:	eb10 000a 	adds.w	r0, r0, sl
 800e348:	eb41 010b 	adc.w	r1, r1, fp
 800e34c:	4682      	mov	sl, r0
 800e34e:	468b      	mov	fp, r1
 800e350:	4618      	mov	r0, r3
 800e352:	17d9      	asrs	r1, r3, #31
 800e354:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e358:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e35a:	fb03 f401 	mul.w	r4, r3, r1
 800e35e:	9907      	ldr	r1, [sp, #28]
 800e360:	fb02 4401 	mla	r4, r2, r1, r4
 800e364:	fba3 0102 	umull	r0, r1, r3, r2
 800e368:	4421      	add	r1, r4
 800e36a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800e36e:	1824      	adds	r4, r4, r0
 800e370:	414d      	adcs	r5, r1
 800e372:	4620      	mov	r0, r4
 800e374:	4629      	mov	r1, r5
 800e376:	464a      	mov	r2, r9
 800e378:	fb03 f202 	mul.w	r2, r3, r2
 800e37c:	9c07      	ldr	r4, [sp, #28]
 800e37e:	fb06 2204 	mla	r2, r6, r4, r2
 800e382:	fba3 3406 	umull	r3, r4, r3, r6
 800e386:	4414      	add	r4, r2
 800e388:	eb13 060a 	adds.w	r6, r3, sl
 800e38c:	eb44 070b 	adc.w	r7, r4, fp
		vb1 += 64;
 800e390:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  return x >> n;
 800e394:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 800e398:	0d23      	lsrs	r3, r4, #20
 800e39a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
	x >>= fracBits;
 800e39e:	119a      	asrs	r2, r3, #6
	sign = x >> 31;
 800e3a0:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 800e3a2:	ebb4 5f63 	cmp.w	r4, r3, asr #21
 800e3a6:	d002      	beq.n	800e3ae <xmp3fixpt_PolyphaseStereo+0x1244>
		x = sign ^ ((1 << 15) - 1);
 800e3a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e3ac:	4062      	eors	r2, r4
		*(pcm + 0)         = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800e3ae:	9b02      	ldr	r3, [sp, #8]
 800e3b0:	801a      	strh	r2, [r3, #0]
 800e3b2:	0d03      	lsrs	r3, r0, #20
 800e3b4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
	x >>= fracBits;
 800e3b8:	119a      	asrs	r2, r3, #6
	sign = x >> 31;
 800e3ba:	17d9      	asrs	r1, r3, #31
	if (sign != (x >> 15))
 800e3bc:	ebb1 5f63 	cmp.w	r1, r3, asr #21
 800e3c0:	d002      	beq.n	800e3c8 <xmp3fixpt_PolyphaseStereo+0x125e>
		x = sign ^ ((1 << 15) - 1);
 800e3c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e3c6:	404a      	eors	r2, r1
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 800e3c8:	9902      	ldr	r1, [sp, #8]
 800e3ca:	804a      	strh	r2, [r1, #2]
 800e3cc:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800e3d0:	0d22      	lsrs	r2, r4, #20
 800e3d2:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800e3d6:	9b04      	ldr	r3, [sp, #16]
 800e3d8:	00db      	lsls	r3, r3, #3
 800e3da:	18cc      	adds	r4, r1, r3
	x >>= fracBits;
 800e3dc:	1191      	asrs	r1, r2, #6
	sign = x >> 31;
 800e3de:	17d0      	asrs	r0, r2, #31
	if (sign != (x >> 15))
 800e3e0:	ebb0 5f62 	cmp.w	r0, r2, asr #21
 800e3e4:	d002      	beq.n	800e3ec <xmp3fixpt_PolyphaseStereo+0x1282>
		x = sign ^ ((1 << 15) - 1);
 800e3e6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800e3ea:	4041      	eors	r1, r0
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800e3ec:	8021      	strh	r1, [r4, #0]
 800e3ee:	0d32      	lsrs	r2, r6, #20
 800e3f0:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
 800e3f4:	3302      	adds	r3, #2
 800e3f6:	9902      	ldr	r1, [sp, #8]
 800e3f8:	440b      	add	r3, r1
	x >>= fracBits;
 800e3fa:	1191      	asrs	r1, r2, #6
	sign = x >> 31;
 800e3fc:	17d0      	asrs	r0, r2, #31
	if (sign != (x >> 15))
 800e3fe:	ebb0 5f62 	cmp.w	r0, r2, asr #21
 800e402:	f43f aac9 	beq.w	800d998 <xmp3fixpt_PolyphaseStereo+0x82e>
		x = sign ^ ((1 << 15) - 1);
 800e406:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800e40a:	4041      	eors	r1, r0
 800e40c:	f7ff bac4 	b.w	800d998 <xmp3fixpt_PolyphaseStereo+0x82e>
	}
}
 800e410:	b015      	add	sp, #84	; 0x54
 800e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e418 <UnpackSFMPEG1>:
 *                so that we index through consectutive memory locations when unpacking 
 *                (make sure dequantizer follows same convention)
 *              Illegal Intensity Position = 7 (always) for MPEG1 scale factors
 **************************************************************************************/
static void UnpackSFMPEG1(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int *scfsi, int gr, ScaleFactorInfoSub *sfisGr0)
{
 800e418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e41c:	4605      	mov	r5, r0
 800e41e:	4616      	mov	r6, r2
 800e420:	469a      	mov	sl, r3
 800e422:	9c08      	ldr	r4, [sp, #32]
 800e424:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	int sfb;
	int slen0, slen1;
	
	/* these can be 0, so make sure GetBits(bsi, 0) returns 0 (no >> 32 or anything) */
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 800e428:	68ca      	ldr	r2, [r1, #12]
 800e42a:	4b5b      	ldr	r3, [pc, #364]	; (800e598 <UnpackSFMPEG1+0x180>)
 800e42c:	f813 7012 	ldrb.w	r7, [r3, r2, lsl #1]
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 800e430:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e434:	f893 8001 	ldrb.w	r8, [r3, #1]
	
	if (sis->blockType == 2) {
 800e438:	694b      	ldr	r3, [r1, #20]
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d007      	beq.n	800e44e <UnpackSFMPEG1+0x36>

		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
	} else {
		/* long blocks, type 0, 1, or 3 */
		if(gr == 0) {
 800e43e:	2c00      	cmp	r4, #0
 800e440:	d051      	beq.n	800e4e6 <UnpackSFMPEG1+0xce>
			/* second granule
			 * scfsi: 0 = different scalefactors for each granule, 1 = copy sf's from granule 0 into granule 1 
			 * for block type == 2, scfsi is always 0
			 */
			sfb = 0;
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800e442:	f8da 4000 	ldr.w	r4, [sl]
 800e446:	2c00      	cmp	r4, #0
 800e448:	d06a      	beq.n	800e520 <UnpackSFMPEG1+0x108>
			sfb = 0;
 800e44a:	2400      	movs	r4, #0
 800e44c:	e05c      	b.n	800e508 <UnpackSFMPEG1+0xf0>
		if (sis->mixedBlock) {          
 800e44e:	698c      	ldr	r4, [r1, #24]
 800e450:	bb14      	cbnz	r4, 800e498 <UnpackSFMPEG1+0x80>
		for (      ; sfb < 6; sfb++) {
 800e452:	2c05      	cmp	r4, #5
 800e454:	dc22      	bgt.n	800e49c <UnpackSFMPEG1+0x84>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 800e456:	4639      	mov	r1, r7
 800e458:	4628      	mov	r0, r5
 800e45a:	f7fb fc57 	bl	8009d0c <xmp3fixpt_GetBits>
 800e45e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
 800e462:	44b1      	add	r9, r6
 800e464:	f889 0017 	strb.w	r0, [r9, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 800e468:	4639      	mov	r1, r7
 800e46a:	4628      	mov	r0, r5
 800e46c:	f7fb fc4e 	bl	8009d0c <xmp3fixpt_GetBits>
 800e470:	f889 0018 	strb.w	r0, [r9, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 800e474:	4639      	mov	r1, r7
 800e476:	4628      	mov	r0, r5
 800e478:	f7fb fc48 	bl	8009d0c <xmp3fixpt_GetBits>
 800e47c:	f889 0019 	strb.w	r0, [r9, #25]
		for (      ; sfb < 6; sfb++) {
 800e480:	3401      	adds	r4, #1
 800e482:	e7e6      	b.n	800e452 <UnpackSFMPEG1+0x3a>
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 800e484:	4639      	mov	r1, r7
 800e486:	4628      	mov	r0, r5
 800e488:	f7fb fc40 	bl	8009d0c <xmp3fixpt_GetBits>
 800e48c:	5530      	strb	r0, [r6, r4]
			for (sfb = 0; sfb < 8; sfb++)
 800e48e:	3401      	adds	r4, #1
 800e490:	2c07      	cmp	r4, #7
 800e492:	ddf7      	ble.n	800e484 <UnpackSFMPEG1+0x6c>
			sfb = 3;
 800e494:	2403      	movs	r4, #3
 800e496:	e7dc      	b.n	800e452 <UnpackSFMPEG1+0x3a>
			for (sfb = 0; sfb < 8; sfb++)
 800e498:	2400      	movs	r4, #0
 800e49a:	e7f9      	b.n	800e490 <UnpackSFMPEG1+0x78>
		for (      ; sfb < 12; sfb++) {
 800e49c:	2c0b      	cmp	r4, #11
 800e49e:	dc13      	bgt.n	800e4c8 <UnpackSFMPEG1+0xb0>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 800e4a0:	4641      	mov	r1, r8
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	f7fb fc32 	bl	8009d0c <xmp3fixpt_GetBits>
 800e4a8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800e4ac:	4437      	add	r7, r6
 800e4ae:	75f8      	strb	r0, [r7, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 800e4b0:	4641      	mov	r1, r8
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	f7fb fc2a 	bl	8009d0c <xmp3fixpt_GetBits>
 800e4b8:	7638      	strb	r0, [r7, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 800e4ba:	4641      	mov	r1, r8
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f7fb fc25 	bl	8009d0c <xmp3fixpt_GetBits>
 800e4c2:	7678      	strb	r0, [r7, #25]
		for (      ; sfb < 12; sfb++) {
 800e4c4:	3401      	adds	r4, #1
 800e4c6:	e7e9      	b.n	800e49c <UnpackSFMPEG1+0x84>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
 800e4ce:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 800e4d2:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
		}
		/* last sf band not transmitted */
		sfis->l[21] = 0;
		sfis->l[22] = 0;
	}
}
 800e4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 800e4da:	4639      	mov	r1, r7
 800e4dc:	4628      	mov	r0, r5
 800e4de:	f7fb fc15 	bl	8009d0c <xmp3fixpt_GetBits>
 800e4e2:	5530      	strb	r0, [r6, r4]
			for (sfb = 0;  sfb < 11; sfb++) 
 800e4e4:	3401      	adds	r4, #1
 800e4e6:	2c0a      	cmp	r4, #10
 800e4e8:	ddf7      	ble.n	800e4da <UnpackSFMPEG1+0xc2>
			for (sfb = 11; sfb < 21; sfb++) 
 800e4ea:	240b      	movs	r4, #11
 800e4ec:	e005      	b.n	800e4fa <UnpackSFMPEG1+0xe2>
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 800e4ee:	4641      	mov	r1, r8
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	f7fb fc0b 	bl	8009d0c <xmp3fixpt_GetBits>
 800e4f6:	5530      	strb	r0, [r6, r4]
			for (sfb = 11; sfb < 21; sfb++) 
 800e4f8:	3401      	adds	r4, #1
 800e4fa:	2c14      	cmp	r4, #20
 800e4fc:	ddf7      	ble.n	800e4ee <UnpackSFMPEG1+0xd6>
 800e4fe:	e7ea      	b.n	800e4d6 <UnpackSFMPEG1+0xbe>
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800e500:	f819 3004 	ldrb.w	r3, [r9, r4]
 800e504:	5533      	strb	r3, [r6, r4]
 800e506:	3401      	adds	r4, #1
 800e508:	2c05      	cmp	r4, #5
 800e50a:	ddf9      	ble.n	800e500 <UnpackSFMPEG1+0xe8>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800e50c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e510:	b96b      	cbnz	r3, 800e52e <UnpackSFMPEG1+0x116>
 800e512:	e018      	b.n	800e546 <UnpackSFMPEG1+0x12e>
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 800e514:	4639      	mov	r1, r7
 800e516:	4628      	mov	r0, r5
 800e518:	f7fb fbf8 	bl	8009d0c <xmp3fixpt_GetBits>
 800e51c:	5530      	strb	r0, [r6, r4]
 800e51e:	3401      	adds	r4, #1
 800e520:	2c05      	cmp	r4, #5
 800e522:	ddf7      	ble.n	800e514 <UnpackSFMPEG1+0xfc>
 800e524:	e7f2      	b.n	800e50c <UnpackSFMPEG1+0xf4>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800e526:	f819 3004 	ldrb.w	r3, [r9, r4]
 800e52a:	5533      	strb	r3, [r6, r4]
 800e52c:	3401      	adds	r4, #1
 800e52e:	2c0a      	cmp	r4, #10
 800e530:	ddf9      	ble.n	800e526 <UnpackSFMPEG1+0x10e>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800e532:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e536:	b96b      	cbnz	r3, 800e554 <UnpackSFMPEG1+0x13c>
 800e538:	e018      	b.n	800e56c <UnpackSFMPEG1+0x154>
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 800e53a:	4639      	mov	r1, r7
 800e53c:	4628      	mov	r0, r5
 800e53e:	f7fb fbe5 	bl	8009d0c <xmp3fixpt_GetBits>
 800e542:	5530      	strb	r0, [r6, r4]
 800e544:	3401      	adds	r4, #1
 800e546:	2c0a      	cmp	r4, #10
 800e548:	ddf7      	ble.n	800e53a <UnpackSFMPEG1+0x122>
 800e54a:	e7f2      	b.n	800e532 <UnpackSFMPEG1+0x11a>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800e54c:	f819 3004 	ldrb.w	r3, [r9, r4]
 800e550:	5533      	strb	r3, [r6, r4]
 800e552:	3401      	adds	r4, #1
 800e554:	2c0f      	cmp	r4, #15
 800e556:	ddf9      	ble.n	800e54c <UnpackSFMPEG1+0x134>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800e558:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e55c:	b96b      	cbnz	r3, 800e57a <UnpackSFMPEG1+0x162>
 800e55e:	e018      	b.n	800e592 <UnpackSFMPEG1+0x17a>
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 800e560:	4641      	mov	r1, r8
 800e562:	4628      	mov	r0, r5
 800e564:	f7fb fbd2 	bl	8009d0c <xmp3fixpt_GetBits>
 800e568:	5530      	strb	r0, [r6, r4]
 800e56a:	3401      	adds	r4, #1
 800e56c:	2c0f      	cmp	r4, #15
 800e56e:	ddf7      	ble.n	800e560 <UnpackSFMPEG1+0x148>
 800e570:	e7f2      	b.n	800e558 <UnpackSFMPEG1+0x140>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800e572:	f819 3004 	ldrb.w	r3, [r9, r4]
 800e576:	5533      	strb	r3, [r6, r4]
 800e578:	3401      	adds	r4, #1
 800e57a:	2c14      	cmp	r4, #20
 800e57c:	ddf9      	ble.n	800e572 <UnpackSFMPEG1+0x15a>
		sfis->l[21] = 0;
 800e57e:	2300      	movs	r3, #0
 800e580:	7573      	strb	r3, [r6, #21]
		sfis->l[22] = 0;
 800e582:	75b3      	strb	r3, [r6, #22]
 800e584:	e7a7      	b.n	800e4d6 <UnpackSFMPEG1+0xbe>
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 800e586:	4641      	mov	r1, r8
 800e588:	4628      	mov	r0, r5
 800e58a:	f7fb fbbf 	bl	8009d0c <xmp3fixpt_GetBits>
 800e58e:	5530      	strb	r0, [r6, r4]
 800e590:	3401      	adds	r4, #1
 800e592:	2c14      	cmp	r4, #20
 800e594:	ddf7      	ble.n	800e586 <UnpackSFMPEG1+0x16e>
 800e596:	e7f2      	b.n	800e57e <UnpackSFMPEG1+0x166>
 800e598:	0801b4e8 	.word	0x0801b4e8

0800e59c <UnpackSFMPEG2>:
 *
 * TODO:        optimize the / and % stuff (only do one divide, get modulo x 
 *                with (x / m) * m, etc.)
 **************************************************************************************/
static void UnpackSFMPEG2(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int gr, int ch, int modeExt, ScaleFactorJS *sfjs)
{
 800e59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	b088      	sub	sp, #32
 800e5a2:	4606      	mov	r6, r0
 800e5a4:	4617      	mov	r7, r2
 800e5a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e5a8:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48

	int i, sfb, sfcIdx, btIdx, nrIdx, iipTest;
	int slen[4], nr[4];
	int sfCompress, preFlag, intensityScale;
	
	sfCompress = sis->sfCompress;
 800e5ac:	68cb      	ldr	r3, [r1, #12]
	preFlag = 0;
	intensityScale = 0;

	/* stereo mode bits (1 = on): bit 1 = mid-side on/off, bit 0 = intensity on/off */
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 800e5ae:	f012 0c01 	ands.w	ip, r2, #1
 800e5b2:	d002      	beq.n	800e5ba <UnpackSFMPEG2+0x1e>
 800e5b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e5b6:	2a01      	cmp	r2, #1
 800e5b8:	d051      	beq.n	800e65e <UnpackSFMPEG2+0xc2>
		/* in other words: if ((modeExt & 0x01) == 0 || ch == 0) */
		if (sfCompress < 400) {
 800e5ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e5be:	da1b      	bge.n	800e5f8 <UnpackSFMPEG2+0x5c>
			/* max slen = floor[(399/16) / 5] = 4 */
			slen[0] = (sfCompress >> 4) / 5;
 800e5c0:	111c      	asrs	r4, r3, #4
 800e5c2:	4896      	ldr	r0, [pc, #600]	; (800e81c <UnpackSFMPEG2+0x280>)
 800e5c4:	fb80 2004 	smull	r2, r0, r0, r4
 800e5c8:	17da      	asrs	r2, r3, #31
 800e5ca:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 800e5ce:	9204      	str	r2, [sp, #16]
			slen[1]= (sfCompress >> 4) % 5;
 800e5d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e5d4:	1aa0      	subs	r0, r4, r2
 800e5d6:	9005      	str	r0, [sp, #20]
			slen[2]= (sfCompress & 0x0f) >> 2;
 800e5d8:	f3c3 0281 	ubfx	r2, r3, #2, #2
 800e5dc:	9206      	str	r2, [sp, #24]
			slen[3]= (sfCompress & 0x03);
 800e5de:	f003 0303 	and.w	r3, r3, #3
 800e5e2:	9307      	str	r3, [sp, #28]
	intensityScale = 0;
 800e5e4:	f04f 0900 	mov.w	r9, #0
	preFlag = 0;
 800e5e8:	464d      	mov	r5, r9
			sfcIdx = 0;
 800e5ea:	4648      	mov	r0, r9
		}
	}
	
	/* set index based on block type: (0,1,3) --> 0, (2 non-mixed) --> 1, (2 mixed) ---> 2 */
	btIdx = 0;
	if (sis->blockType == 2) 
 800e5ec:	694c      	ldr	r4, [r1, #20]
 800e5ee:	2c02      	cmp	r4, #2
 800e5f0:	d077      	beq.n	800e6e2 <UnpackSFMPEG2+0x146>
	btIdx = 0;
 800e5f2:	2400      	movs	r4, #0
		btIdx = (sis->mixedBlock ? 2 : 1);
	for (i = 0; i < 4; i++)
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	e088      	b.n	800e70a <UnpackSFMPEG2+0x16e>
		} else if (sfCompress < 500) {
 800e5f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e5fc:	da15      	bge.n	800e62a <UnpackSFMPEG2+0x8e>
			sfCompress -= 400;
 800e5fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
			slen[0] = (sfCompress >> 2) / 5;
 800e602:	109c      	asrs	r4, r3, #2
 800e604:	4885      	ldr	r0, [pc, #532]	; (800e81c <UnpackSFMPEG2+0x280>)
 800e606:	fb80 2004 	smull	r2, r0, r0, r4
 800e60a:	17da      	asrs	r2, r3, #31
 800e60c:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 800e610:	9204      	str	r2, [sp, #16]
			slen[1]= (sfCompress >> 2) % 5;
 800e612:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e616:	1aa0      	subs	r0, r4, r2
 800e618:	9005      	str	r0, [sp, #20]
			slen[2]= (sfCompress & 0x03);
 800e61a:	f003 0303 	and.w	r3, r3, #3
 800e61e:	9306      	str	r3, [sp, #24]
			slen[3]= 0;
 800e620:	2500      	movs	r5, #0
 800e622:	9507      	str	r5, [sp, #28]
	intensityScale = 0;
 800e624:	46a9      	mov	r9, r5
			sfcIdx = 1;
 800e626:	2001      	movs	r0, #1
 800e628:	e7e0      	b.n	800e5ec <UnpackSFMPEG2+0x50>
			sfCompress -= 500;
 800e62a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
			slen[0] = sfCompress / 3;
 800e62e:	4a7c      	ldr	r2, [pc, #496]	; (800e820 <UnpackSFMPEG2+0x284>)
 800e630:	fb82 0203 	smull	r0, r2, r2, r3
 800e634:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e638:	9204      	str	r2, [sp, #16]
			slen[1] = sfCompress % 3;
 800e63a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800e63e:	1a18      	subs	r0, r3, r0
 800e640:	9005      	str	r0, [sp, #20]
			slen[2] = slen[3] = 0;
 800e642:	2300      	movs	r3, #0
 800e644:	9307      	str	r3, [sp, #28]
 800e646:	9306      	str	r3, [sp, #24]
			if (sis->mixedBlock) {
 800e648:	f8d1 9018 	ldr.w	r9, [r1, #24]
 800e64c:	f1b9 0f00 	cmp.w	r9, #0
 800e650:	d044      	beq.n	800e6dc <UnpackSFMPEG2+0x140>
				slen[2] = slen[1];  
 800e652:	9006      	str	r0, [sp, #24]
				slen[1] = slen[0];
 800e654:	9205      	str	r2, [sp, #20]
	intensityScale = 0;
 800e656:	4699      	mov	r9, r3
			preFlag = 1;
 800e658:	2501      	movs	r5, #1
			sfcIdx = 2;
 800e65a:	2002      	movs	r0, #2
 800e65c:	e7c6      	b.n	800e5ec <UnpackSFMPEG2+0x50>
		intensityScale = sfCompress & 0x01;
 800e65e:	f003 0901 	and.w	r9, r3, #1
		sfCompress >>= 1;
 800e662:	105b      	asrs	r3, r3, #1
		if (sfCompress < 180) {
 800e664:	2bb3      	cmp	r3, #179	; 0xb3
 800e666:	dc19      	bgt.n	800e69c <UnpackSFMPEG2+0x100>
			slen[0] = (sfCompress / 36);
 800e668:	486e      	ldr	r0, [pc, #440]	; (800e824 <UnpackSFMPEG2+0x288>)
 800e66a:	fb80 2003 	smull	r2, r0, r0, r3
 800e66e:	17da      	asrs	r2, r3, #31
 800e670:	ebc2 02e0 	rsb	r2, r2, r0, asr #3
 800e674:	9204      	str	r2, [sp, #16]
			slen[1] = (sfCompress % 36) / 6;
 800e676:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800e67a:	0090      	lsls	r0, r2, #2
 800e67c:	1a18      	subs	r0, r3, r0
 800e67e:	4b6a      	ldr	r3, [pc, #424]	; (800e828 <UnpackSFMPEG2+0x28c>)
 800e680:	fb83 2300 	smull	r2, r3, r3, r0
 800e684:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800e688:	9305      	str	r3, [sp, #20]
			slen[2] = (sfCompress % 36) % 6;
 800e68a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e68e:	005a      	lsls	r2, r3, #1
 800e690:	1a82      	subs	r2, r0, r2
 800e692:	9206      	str	r2, [sp, #24]
			slen[3] = 0;
 800e694:	2500      	movs	r5, #0
 800e696:	9507      	str	r5, [sp, #28]
			sfcIdx = 3;
 800e698:	2003      	movs	r0, #3
 800e69a:	e7a7      	b.n	800e5ec <UnpackSFMPEG2+0x50>
		} else if (sfCompress < 244) {
 800e69c:	2bf3      	cmp	r3, #243	; 0xf3
 800e69e:	dc0d      	bgt.n	800e6bc <UnpackSFMPEG2+0x120>
			sfCompress -= 180;
 800e6a0:	3bb4      	subs	r3, #180	; 0xb4
			slen[0] = (sfCompress & 0x3f) >> 4;
 800e6a2:	f3c3 1201 	ubfx	r2, r3, #4, #2
 800e6a6:	9204      	str	r2, [sp, #16]
			slen[1] = (sfCompress & 0x0f) >> 2;
 800e6a8:	f3c3 0281 	ubfx	r2, r3, #2, #2
 800e6ac:	9205      	str	r2, [sp, #20]
			slen[2] = (sfCompress & 0x03);
 800e6ae:	f003 0303 	and.w	r3, r3, #3
 800e6b2:	9306      	str	r3, [sp, #24]
			slen[3] = 0;
 800e6b4:	2500      	movs	r5, #0
 800e6b6:	9507      	str	r5, [sp, #28]
			sfcIdx = 4;
 800e6b8:	2004      	movs	r0, #4
 800e6ba:	e797      	b.n	800e5ec <UnpackSFMPEG2+0x50>
			sfCompress -= 244;
 800e6bc:	3bf4      	subs	r3, #244	; 0xf4
			slen[0] = (sfCompress / 3);
 800e6be:	4a58      	ldr	r2, [pc, #352]	; (800e820 <UnpackSFMPEG2+0x284>)
 800e6c0:	fb82 0203 	smull	r0, r2, r2, r3
 800e6c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e6c8:	9204      	str	r2, [sp, #16]
			slen[1] = (sfCompress % 3);
 800e6ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e6ce:	1a98      	subs	r0, r3, r2
 800e6d0:	9005      	str	r0, [sp, #20]
			slen[2] = slen[3] = 0;
 800e6d2:	2500      	movs	r5, #0
 800e6d4:	9507      	str	r5, [sp, #28]
 800e6d6:	9506      	str	r5, [sp, #24]
			sfcIdx = 5;
 800e6d8:	2005      	movs	r0, #5
 800e6da:	e787      	b.n	800e5ec <UnpackSFMPEG2+0x50>
			preFlag = 1;
 800e6dc:	2501      	movs	r5, #1
			sfcIdx = 2;
 800e6de:	2002      	movs	r0, #2
 800e6e0:	e784      	b.n	800e5ec <UnpackSFMPEG2+0x50>
		btIdx = (sis->mixedBlock ? 2 : 1);
 800e6e2:	698b      	ldr	r3, [r1, #24]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d185      	bne.n	800e5f4 <UnpackSFMPEG2+0x58>
 800e6e8:	2401      	movs	r4, #1
 800e6ea:	e783      	b.n	800e5f4 <UnpackSFMPEG2+0x58>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 800e6ec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800e6f0:	eb02 0a04 	add.w	sl, r2, r4
 800e6f4:	4a4d      	ldr	r2, [pc, #308]	; (800e82c <UnpackSFMPEG2+0x290>)
 800e6f6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e6fa:	f812 a003 	ldrb.w	sl, [r2, r3]
 800e6fe:	aa08      	add	r2, sp, #32
 800e700:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e704:	f842 ac20 	str.w	sl, [r2, #-32]
	for (i = 0; i < 4; i++)
 800e708:	3301      	adds	r3, #1
 800e70a:	2b03      	cmp	r3, #3
 800e70c:	ddee      	ble.n	800e6ec <UnpackSFMPEG2+0x150>

	/* save intensity stereo scale factor info */
	if( (modeExt & 0x01) && (ch == 1) ) {
 800e70e:	f1bc 0f00 	cmp.w	ip, #0
 800e712:	d002      	beq.n	800e71a <UnpackSFMPEG2+0x17e>
 800e714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e716:	2b01      	cmp	r3, #1
 800e718:	d01a      	beq.n	800e750 <UnpackSFMPEG2+0x1b4>
			sfjs->slen[i] = slen[i];
			sfjs->nr[i] = nr[i];
		}
		sfjs->intensityScale = intensityScale;
	}
	sis->preFlag = preFlag;
 800e71a:	63cd      	str	r5, [r1, #60]	; 0x3c

	/* short blocks */
	if(sis->blockType == 2) {
 800e71c:	694b      	ldr	r3, [r1, #20]
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d018      	beq.n	800e754 <UnpackSFMPEG2+0x1b8>
		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
	} else {
		/* long blocks */
		sfb = 0;
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 800e722:	f04f 0800 	mov.w	r8, #0
		sfb = 0;
 800e726:	4645      	mov	r5, r8
 800e728:	e068      	b.n	800e7fc <UnpackSFMPEG2+0x260>
			sfjs->slen[i] = slen[i];
 800e72a:	0098      	lsls	r0, r3, #2
 800e72c:	aa08      	add	r2, sp, #32
 800e72e:	1814      	adds	r4, r2, r0
 800e730:	f854 2c10 	ldr.w	r2, [r4, #-16]
 800e734:	4440      	add	r0, r8
 800e736:	6042      	str	r2, [r0, #4]
			sfjs->nr[i] = nr[i];
 800e738:	f854 0c20 	ldr.w	r0, [r4, #-32]
 800e73c:	1d1a      	adds	r2, r3, #4
 800e73e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800e742:	6050      	str	r0, [r2, #4]
		for (i = 0; i < 4; i++) {
 800e744:	3301      	adds	r3, #1
 800e746:	2b03      	cmp	r3, #3
 800e748:	ddef      	ble.n	800e72a <UnpackSFMPEG2+0x18e>
		sfjs->intensityScale = intensityScale;
 800e74a:	f8c8 9000 	str.w	r9, [r8]
 800e74e:	e7e4      	b.n	800e71a <UnpackSFMPEG2+0x17e>
		for (i = 0; i < 4; i++) {
 800e750:	2300      	movs	r3, #0
 800e752:	e7f8      	b.n	800e746 <UnpackSFMPEG2+0x1aa>
		if(sis->mixedBlock) {
 800e754:	698d      	ldr	r5, [r1, #24]
 800e756:	b3bd      	cbz	r5, 800e7c8 <UnpackSFMPEG2+0x22c>
			iipTest = (1 << slen[0]) - 1;
 800e758:	9d04      	ldr	r5, [sp, #16]
			for (sfb=0; sfb < 6; sfb++) {
 800e75a:	2400      	movs	r4, #0
 800e75c:	e005      	b.n	800e76a <UnpackSFMPEG2+0x1ce>
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 800e75e:	4629      	mov	r1, r5
 800e760:	4630      	mov	r0, r6
 800e762:	f7fb fad3 	bl	8009d0c <xmp3fixpt_GetBits>
 800e766:	5538      	strb	r0, [r7, r4]
			for (sfb=0; sfb < 6; sfb++) {
 800e768:	3401      	adds	r4, #1
 800e76a:	2c05      	cmp	r4, #5
 800e76c:	ddf7      	ble.n	800e75e <UnpackSFMPEG2+0x1c2>
			nrIdx = 1;
 800e76e:	f04f 0a01 	mov.w	sl, #1
			sfb = 3;  /* start sfb for short */
 800e772:	2503      	movs	r5, #3
 800e774:	e01d      	b.n	800e7b2 <UnpackSFMPEG2+0x216>
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 800e776:	4649      	mov	r1, r9
 800e778:	4630      	mov	r0, r6
 800e77a:	f7fb fac7 	bl	8009d0c <xmp3fixpt_GetBits>
 800e77e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800e782:	443c      	add	r4, r7
 800e784:	75e0      	strb	r0, [r4, #23]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 800e786:	4649      	mov	r1, r9
 800e788:	4630      	mov	r0, r6
 800e78a:	f7fb fabf 	bl	8009d0c <xmp3fixpt_GetBits>
 800e78e:	7620      	strb	r0, [r4, #24]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 800e790:	4649      	mov	r1, r9
 800e792:	4630      	mov	r0, r6
 800e794:	f7fb faba 	bl	8009d0c <xmp3fixpt_GetBits>
 800e798:	7660      	strb	r0, [r4, #25]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 800e79a:	f108 0801 	add.w	r8, r8, #1
 800e79e:	3501      	adds	r5, #1
 800e7a0:	ab08      	add	r3, sp, #32
 800e7a2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e7a6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800e7aa:	4543      	cmp	r3, r8
 800e7ac:	dce3      	bgt.n	800e776 <UnpackSFMPEG2+0x1da>
		for (    ; nrIdx <= 3; nrIdx++) {
 800e7ae:	f10a 0a01 	add.w	sl, sl, #1
 800e7b2:	f1ba 0f03 	cmp.w	sl, #3
 800e7b6:	dc09      	bgt.n	800e7cc <UnpackSFMPEG2+0x230>
			iipTest = (1 << slen[nrIdx]) - 1;
 800e7b8:	ab08      	add	r3, sp, #32
 800e7ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e7be:	f853 9c10 	ldr.w	r9, [r3, #-16]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 800e7c2:	f04f 0800 	mov.w	r8, #0
 800e7c6:	e7eb      	b.n	800e7a0 <UnpackSFMPEG2+0x204>
			nrIdx = 0;
 800e7c8:	46aa      	mov	sl, r5
 800e7ca:	e7f2      	b.n	800e7b2 <UnpackSFMPEG2+0x216>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800e7d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800e7d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800e7da:	e01c      	b.n	800e816 <UnpackSFMPEG2+0x27a>
			iipTest = (1 << slen[nrIdx]) - 1;
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 800e7dc:	4649      	mov	r1, r9
 800e7de:	4630      	mov	r0, r6
 800e7e0:	f7fb fa94 	bl	8009d0c <xmp3fixpt_GetBits>
 800e7e4:	5578      	strb	r0, [r7, r5]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 800e7e6:	3401      	adds	r4, #1
 800e7e8:	3501      	adds	r5, #1
 800e7ea:	ab08      	add	r3, sp, #32
 800e7ec:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800e7f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800e7f4:	42a3      	cmp	r3, r4
 800e7f6:	dcf1      	bgt.n	800e7dc <UnpackSFMPEG2+0x240>
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 800e7f8:	f108 0801 	add.w	r8, r8, #1
 800e7fc:	f1b8 0f03 	cmp.w	r8, #3
 800e800:	dc06      	bgt.n	800e810 <UnpackSFMPEG2+0x274>
			iipTest = (1 << slen[nrIdx]) - 1;
 800e802:	ab08      	add	r3, sp, #32
 800e804:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800e808:	f853 9c10 	ldr.w	r9, [r3, #-16]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 800e80c:	2400      	movs	r4, #0
 800e80e:	e7ec      	b.n	800e7ea <UnpackSFMPEG2+0x24e>
			}
		}
		/* last sf band not transmitted */
		sfis->l[21] = sfis->l[22] = 0;
 800e810:	2300      	movs	r3, #0
 800e812:	75bb      	strb	r3, [r7, #22]
 800e814:	757b      	strb	r3, [r7, #21]

	}
}
 800e816:	b008      	add	sp, #32
 800e818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e81c:	66666667 	.word	0x66666667
 800e820:	55555556 	.word	0x55555556
 800e824:	38e38e39 	.word	0x38e38e39
 800e828:	2aaaaaab 	.word	0x2aaaaaab
 800e82c:	0801b4a0 	.word	0x0801b4a0

0800e830 <xmp3fixpt_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 800e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e834:	b089      	sub	sp, #36	; 0x24
 800e836:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800e838:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 800e83a:	2800      	cmp	r0, #0
 800e83c:	f000 8085 	beq.w	800e94a <xmp3fixpt_UnpackScaleFactors+0x11a>
 800e840:	4607      	mov	r7, r0
 800e842:	f8d0 b000 	ldr.w	fp, [r0]
 800e846:	f1bb 0f00 	cmp.w	fp, #0
 800e84a:	f000 8081 	beq.w	800e950 <xmp3fixpt_UnpackScaleFactors+0x120>
 800e84e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e852:	f1b8 0f00 	cmp.w	r8, #0
 800e856:	d07e      	beq.n	800e956 <xmp3fixpt_UnpackScaleFactors+0x126>
 800e858:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800e85c:	f1ba 0f00 	cmp.w	sl, #0
 800e860:	d07c      	beq.n	800e95c <xmp3fixpt_UnpackScaleFactors+0x12c>
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));

	/* init GetBits reader */
	startBuf = buf;
	bsi = &bitStreamInfo;
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 800e862:	6810      	ldr	r0, [r2, #0]
 800e864:	4403      	add	r3, r0
 800e866:	3307      	adds	r3, #7
 800e868:	d44c      	bmi.n	800e904 <xmp3fixpt_UnpackScaleFactors+0xd4>
 800e86a:	4616      	mov	r6, r2
 800e86c:	4689      	mov	r9, r1
 800e86e:	460a      	mov	r2, r1
 800e870:	10d9      	asrs	r1, r3, #3
 800e872:	a804      	add	r0, sp, #16
 800e874:	f7fb fa44 	bl	8009d00 <xmp3fixpt_SetBitstreamPointer>
	if (*bitOffset)
 800e878:	6831      	ldr	r1, [r6, #0]
 800e87a:	2900      	cmp	r1, #0
 800e87c:	d144      	bne.n	800e908 <xmp3fixpt_UnpackScaleFactors+0xd8>
		GetBits(bsi, *bitOffset);

	if (fh->ver == MPEG1) 
 800e87e:	f89b 3000 	ldrb.w	r3, [fp]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d144      	bne.n	800e910 <xmp3fixpt_UnpackScaleFactors+0xe0>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 800e886:	0123      	lsls	r3, r4, #4
 800e888:	3308      	adds	r3, #8
 800e88a:	0160      	lsls	r0, r4, #5
 800e88c:	1b02      	subs	r2, r0, r4
 800e88e:	0051      	lsls	r1, r2, #1
 800e890:	ebc5 1c45 	rsb	ip, r5, r5, lsl #5
 800e894:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800e898:	440a      	add	r2, r1
 800e89a:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 800e89e:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 800e8a2:	eb05 0ec5 	add.w	lr, r5, r5, lsl #3
 800e8a6:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 800e8aa:	4461      	add	r1, ip
 800e8ac:	3128      	adds	r1, #40	; 0x28
 800e8ae:	1b00      	subs	r0, r0, r4
 800e8b0:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 800e8b4:	eb0a 000c 	add.w	r0, sl, ip
 800e8b8:	9001      	str	r0, [sp, #4]
 800e8ba:	9500      	str	r5, [sp, #0]
 800e8bc:	4443      	add	r3, r8
 800e8be:	4452      	add	r2, sl
 800e8c0:	4441      	add	r1, r8
 800e8c2:	a804      	add	r0, sp, #16
 800e8c4:	f7ff fda8 	bl	800e418 <UnpackSFMPEG1>
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 800e8c8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800e8cc:	00d3      	lsls	r3, r2, #3
 800e8ce:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800e8d2:	010a      	lsls	r2, r1, #4
 800e8d4:	4413      	add	r3, r2
 800e8d6:	4498      	add	r8, r3
 800e8d8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800e8dc:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800e8e0:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 800e8e4:	f847 3024 	str.w	r3, [r7, r4, lsl #2]

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 800e8e8:	6832      	ldr	r2, [r6, #0]
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	a804      	add	r0, sp, #16
 800e8ee:	f7fb fa6b 	bl	8009dc8 <xmp3fixpt_CalcBitsUsed>
	buf += (bitsUsed + *bitOffset) >> 3;
 800e8f2:	6833      	ldr	r3, [r6, #0]
 800e8f4:	4403      	add	r3, r0
 800e8f6:	10d8      	asrs	r0, r3, #3
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800e8f8:	f003 0307 	and.w	r3, r3, #7
 800e8fc:	6033      	str	r3, [r6, #0]

	return (buf - startBuf);
}
 800e8fe:	b009      	add	sp, #36	; 0x24
 800e900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 800e904:	3307      	adds	r3, #7
 800e906:	e7b0      	b.n	800e86a <xmp3fixpt_UnpackScaleFactors+0x3a>
		GetBits(bsi, *bitOffset);
 800e908:	a804      	add	r0, sp, #16
 800e90a:	f7fb f9ff 	bl	8009d0c <xmp3fixpt_GetBits>
 800e90e:	e7b6      	b.n	800e87e <xmp3fixpt_UnpackScaleFactors+0x4e>
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);
 800e910:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
 800e914:	0053      	lsls	r3, r2, #1
 800e916:	ebc5 1145 	rsb	r1, r5, r5, lsl #5
 800e91a:	008a      	lsls	r2, r1, #2
 800e91c:	441a      	add	r2, r3
 800e91e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800e922:	00d9      	lsls	r1, r3, #3
 800e924:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800e928:	0103      	lsls	r3, r0, #4
 800e92a:	4419      	add	r1, r3
 800e92c:	3128      	adds	r1, #40	; 0x28
 800e92e:	f10a 03f8 	add.w	r3, sl, #248	; 0xf8
 800e932:	9302      	str	r3, [sp, #8]
 800e934:	f8db 3020 	ldr.w	r3, [fp, #32]
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	9400      	str	r4, [sp, #0]
 800e93c:	462b      	mov	r3, r5
 800e93e:	4452      	add	r2, sl
 800e940:	4441      	add	r1, r8
 800e942:	a804      	add	r0, sp, #16
 800e944:	f7ff fe2a 	bl	800e59c <UnpackSFMPEG2>
 800e948:	e7be      	b.n	800e8c8 <xmp3fixpt_UnpackScaleFactors+0x98>
		return -1;
 800e94a:	f04f 30ff 	mov.w	r0, #4294967295
 800e94e:	e7d6      	b.n	800e8fe <xmp3fixpt_UnpackScaleFactors+0xce>
 800e950:	f04f 30ff 	mov.w	r0, #4294967295
 800e954:	e7d3      	b.n	800e8fe <xmp3fixpt_UnpackScaleFactors+0xce>
 800e956:	f04f 30ff 	mov.w	r0, #4294967295
 800e95a:	e7d0      	b.n	800e8fe <xmp3fixpt_UnpackScaleFactors+0xce>
 800e95c:	f04f 30ff 	mov.w	r0, #4294967295
 800e960:	e7cd      	b.n	800e8fe <xmp3fixpt_UnpackScaleFactors+0xce>

0800e962 <xmp3fixpt_MidSideProc>:
 * Return:      none
 *
 * Notes:       assume at least 1 GB in input
 **************************************************************************************/
void MidSideProc(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, int mOut[2])  
{
 800e962:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, xr, xl, mOutL, mOutR;
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
 800e964:	f04f 0c00 	mov.w	ip, #0
 800e968:	46e6      	mov	lr, ip
	for(i = 0; i < nSamps; i++) {
 800e96a:	4664      	mov	r4, ip
 800e96c:	e01a      	b.n	800e9a4 <xmp3fixpt_MidSideProc+0x42>
		xl = x[0][i];
 800e96e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
		xr = x[1][i];
 800e972:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 800e976:	f8d3 6900 	ldr.w	r6, [r3, #2304]	; 0x900
		x[0][i] = xl + xr;
 800e97a:	19af      	adds	r7, r5, r6
 800e97c:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
		x[1][i] = xl - xr;
 800e980:	1bad      	subs	r5, r5, r6
 800e982:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
	__asm__ volatile (
 800e986:	2300      	movs	r3, #0
 800e988:	461e      	mov	r6, r3
 800e98a:	ea87 76e7 	eor.w	r6, r7, r7, asr #31
 800e98e:	eba6 76e7 	sub.w	r6, r6, r7, asr #31
		mOutL |= FASTABS(x[0][i]);
 800e992:	ea4e 0e06 	orr.w	lr, lr, r6
 800e996:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 800e99a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
		mOutR |= FASTABS(x[1][i]);
 800e99e:	ea4c 0c03 	orr.w	ip, ip, r3
	for(i = 0; i < nSamps; i++) {
 800e9a2:	3401      	adds	r4, #1
 800e9a4:	428c      	cmp	r4, r1
 800e9a6:	dbe2      	blt.n	800e96e <xmp3fixpt_MidSideProc+0xc>
	}
	mOut[0] |= mOutL;
 800e9a8:	6813      	ldr	r3, [r2, #0]
 800e9aa:	ea43 030e 	orr.w	r3, r3, lr
 800e9ae:	6013      	str	r3, [r2, #0]
	mOut[1] |= mOutR;
 800e9b0:	6853      	ldr	r3, [r2, #4]
 800e9b2:	ea43 030c 	orr.w	r3, r3, ip
 800e9b6:	6053      	str	r3, [r2, #4]
}
 800e9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e9bc <xmp3fixpt_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 800e9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c0:	b08d      	sub	sp, #52	; 0x34
 800e9c2:	9202      	str	r2, [sp, #8]
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 800e9c8:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800e9cc:	f1bc 0f00 	cmp.w	ip, #0
 800e9d0:	d119      	bne.n	800ea06 <xmp3fixpt_IntensityProcMPEG1+0x4a>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
 800e9d2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800e9d4:	3601      	adds	r6, #1
		cbEndL =   cbi[0].cbEndL + 1;
 800e9d6:	695b      	ldr	r3, [r3, #20]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	9301      	str	r3, [sp, #4]
		cbStartS = cbEndS = 0;
		i = fh->sfBand->l[cbStartL];
 800e9dc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e9de:	f933 5016 	ldrsh.w	r5, [r3, r6, lsl #1]
		cbStartS = cbEndS = 0;
 800e9e2:	f8cd c00c 	str.w	ip, [sp, #12]
		cbEndS =   cbi[0].cbEndSMax + 1;
		cbStartL = cbEndL = 0;
		i = 3 * fh->sfBand->s[cbStartS];
	}

	sampsLeft = nSamps - i;		/* process to length of left */
 800e9e6:	1b49      	subs	r1, r1, r5
	isfTab = (int *)ISFMpeg1[midSideFlag];
 800e9e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9ea:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800e9ee:	0093      	lsls	r3, r2, #2
 800e9f0:	4aa8      	ldr	r2, [pc, #672]	; (800ec94 <xmp3fixpt_IntensityProcMPEG1+0x2d8>)
 800e9f2:	4413      	add	r3, r2
 800e9f4:	9304      	str	r3, [sp, #16]
	mOutL = mOutR = 0;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	461c      	mov	r4, r3
 800e9fa:	f8cd c014 	str.w	ip, [sp, #20]
 800e9fe:	469e      	mov	lr, r3
 800ea00:	f8dd a008 	ldr.w	sl, [sp, #8]

	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 800ea04:	e054      	b.n	800eab0 <xmp3fixpt_IntensityProcMPEG1+0xf4>
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 800ea06:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ea0a:	f1bc 0f01 	cmp.w	ip, #1
 800ea0e:	d906      	bls.n	800ea1e <xmp3fixpt_IntensityProcMPEG1+0x62>
	int cbStartL=0, cbStartS=0, cbEndL=0, cbEndS=0;
 800ea10:	2300      	movs	r3, #0
 800ea12:	461d      	mov	r5, r3
 800ea14:	9303      	str	r3, [sp, #12]
 800ea16:	9301      	str	r3, [sp, #4]
 800ea18:	469c      	mov	ip, r3
 800ea1a:	461e      	mov	r6, r3
 800ea1c:	e7e3      	b.n	800e9e6 <xmp3fixpt_IntensityProcMPEG1+0x2a>
		cbStartS = cbi[1].cbEndSMax + 1;
 800ea1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea20:	f102 0c01 	add.w	ip, r2, #1
		cbEndS =   cbi[0].cbEndSMax + 1;
 800ea24:	691b      	ldr	r3, [r3, #16]
 800ea26:	3301      	adds	r3, #1
 800ea28:	9303      	str	r3, [sp, #12]
		i = 3 * fh->sfBand->s[cbStartS];
 800ea2a:	9b02      	ldr	r3, [sp, #8]
 800ea2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea2e:	3215      	adds	r2, #21
 800ea30:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ea34:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
 800ea38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
		cbStartL = cbEndL = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	9301      	str	r3, [sp, #4]
 800ea40:	461e      	mov	r6, r3
 800ea42:	e7d0      	b.n	800e9e6 <xmp3fixpt_IntensityProcMPEG1+0x2a>
		isf = sfis->l[cb];
		if (isf == 7) {
			fl = ISFIIP[midSideFlag][0];
 800ea44:	4a94      	ldr	r2, [pc, #592]	; (800ec98 <xmp3fixpt_IntensityProcMPEG1+0x2dc>)
 800ea46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
			fr = ISFIIP[midSideFlag][1];
 800ea4c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800ea4e:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800ea52:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800ea56:	e03e      	b.n	800ead6 <xmp3fixpt_IntensityProcMPEG1+0x11a>
			fr = isfTab[6] - isfTab[isf];
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 800ea58:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ea5c:	4632      	mov	r2, r6
 800ea5e:	fb8c 6202 	smull	r6, r2, ip, r2
 800ea62:	0092      	lsls	r2, r2, #2
 800ea64:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 800ea68:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
	__asm__ volatile (
 800ea6c:	2600      	movs	r6, #0
 800ea6e:	46b3      	mov	fp, r6
 800ea70:	ea82 7be2 	eor.w	fp, r2, r2, asr #31
 800ea74:	ebab 7be2 	sub.w	fp, fp, r2, asr #31
 800ea78:	ea4e 0e0b 	orr.w	lr, lr, fp
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 800ea7c:	f850 b025 	ldr.w	fp, [r0, r5, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ea80:	465a      	mov	r2, fp
 800ea82:	fb83 b202 	smull	fp, r2, r3, r2
 800ea86:	0092      	lsls	r2, r2, #2
 800ea88:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
	__asm__ volatile (
 800ea8c:	ea82 76e2 	eor.w	r6, r2, r2, asr #31
 800ea90:	eba6 76e2 	sub.w	r6, r6, r2, asr #31
 800ea94:	4334      	orrs	r4, r6
			sampsLeft--;
 800ea96:	3901      	subs	r1, #1
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 800ea98:	3701      	adds	r7, #1
 800ea9a:	3501      	adds	r5, #1
 800ea9c:	4547      	cmp	r7, r8
 800ea9e:	bfac      	ite	ge
 800eaa0:	2200      	movge	r2, #0
 800eaa2:	2201      	movlt	r2, #1
 800eaa4:	2900      	cmp	r1, #0
 800eaa6:	bfd8      	it	le
 800eaa8:	2200      	movle	r2, #0
 800eaaa:	2a00      	cmp	r2, #0
 800eaac:	d1d4      	bne.n	800ea58 <xmp3fixpt_IntensityProcMPEG1+0x9c>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 800eaae:	464e      	mov	r6, r9
 800eab0:	9b01      	ldr	r3, [sp, #4]
 800eab2:	429e      	cmp	r6, r3
 800eab4:	bfac      	ite	ge
 800eab6:	2300      	movge	r3, #0
 800eab8:	2301      	movlt	r3, #1
 800eaba:	2900      	cmp	r1, #0
 800eabc:	bfd8      	it	le
 800eabe:	2300      	movle	r3, #0
 800eac0:	b1ab      	cbz	r3, 800eaee <xmp3fixpt_IntensityProcMPEG1+0x132>
		isf = sfis->l[cb];
 800eac2:	9b00      	ldr	r3, [sp, #0]
 800eac4:	5d9b      	ldrb	r3, [r3, r6]
		if (isf == 7) {
 800eac6:	2b07      	cmp	r3, #7
 800eac8:	d0bc      	beq.n	800ea44 <xmp3fixpt_IntensityProcMPEG1+0x88>
			fl = isfTab[isf];	
 800eaca:	9a04      	ldr	r2, [sp, #16]
 800eacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			fr = isfTab[6] - isfTab[isf];
 800ead0:	6992      	ldr	r2, [r2, #24]
 800ead2:	eba2 0c03 	sub.w	ip, r2, r3
		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800ead6:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 800eada:	f106 0901 	add.w	r9, r6, #1
 800eade:	f932 8019 	ldrsh.w	r8, [r2, r9, lsl #1]
 800eae2:	f932 2016 	ldrsh.w	r2, [r2, r6, lsl #1]
 800eae6:	eba8 0802 	sub.w	r8, r8, r2
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 800eaea:	2700      	movs	r7, #0
 800eaec:	e7d6      	b.n	800ea9c <xmp3fixpt_IntensityProcMPEG1+0xe0>
 800eaee:	f8dd c014 	ldr.w	ip, [sp, #20]
 800eaf2:	4673      	mov	r3, lr
 800eaf4:	f8dd e010 	ldr.w	lr, [sp, #16]
 800eaf8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800eafc:	e0b6      	b.n	800ec6c <xmp3fixpt_IntensityProcMPEG1+0x2b0>
	/* short blocks */
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
		for (w = 0; w < 3; w++) {
			isf = sfis->s[cb][w];
			if (isf == 7) {
				fls[w] = ISFIIP[midSideFlag][0];
 800eafe:	4a66      	ldr	r2, [pc, #408]	; (800ec98 <xmp3fixpt_IntensityProcMPEG1+0x2dc>)
 800eb00:	ab0c      	add	r3, sp, #48	; 0x30
 800eb02:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
 800eb06:	f852 3038 	ldr.w	r3, [r2, r8, lsl #3]
 800eb0a:	f84a 3c0c 	str.w	r3, [sl, #-12]
				frs[w] = ISFIIP[midSideFlag][1];
 800eb0e:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 800eb12:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800eb16:	f84a 2c18 	str.w	r2, [sl, #-24]
		for (w = 0; w < 3; w++) {
 800eb1a:	3601      	adds	r6, #1
 800eb1c:	2e02      	cmp	r6, #2
 800eb1e:	dc13      	bgt.n	800eb48 <xmp3fixpt_IntensityProcMPEG1+0x18c>
			isf = sfis->s[cb][w];
 800eb20:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 800eb24:	443a      	add	r2, r7
 800eb26:	4432      	add	r2, r6
 800eb28:	7dd2      	ldrb	r2, [r2, #23]
			if (isf == 7) {
 800eb2a:	2a07      	cmp	r2, #7
 800eb2c:	d0e7      	beq.n	800eafe <xmp3fixpt_IntensityProcMPEG1+0x142>
			} else {
				fls[w] = isfTab[isf];
 800eb2e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800eb32:	ab0c      	add	r3, sp, #48	; 0x30
 800eb34:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800eb38:	f849 2c0c 	str.w	r2, [r9, #-12]
				frs[w] = isfTab[6] - isfTab[isf];
 800eb3c:	f8de 3018 	ldr.w	r3, [lr, #24]
 800eb40:	1a9a      	subs	r2, r3, r2
 800eb42:	f849 2c18 	str.w	r2, [r9, #-24]
 800eb46:	e7e8      	b.n	800eb1a <xmp3fixpt_IntensityProcMPEG1+0x15e>
 800eb48:	465b      	mov	r3, fp
			}
		}

		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800eb4a:	9a02      	ldr	r2, [sp, #8]
 800eb4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eb4e:	f10c 0601 	add.w	r6, ip, #1
 800eb52:	9601      	str	r6, [sp, #4]
 800eb54:	f10c 0615 	add.w	r6, ip, #21
 800eb58:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 800eb5c:	f9b6 6006 	ldrsh.w	r6, [r6, #6]
 800eb60:	f10c 0c14 	add.w	ip, ip, #20
 800eb64:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 800eb68:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800eb6c:	eba6 0c0c 	sub.w	ip, r6, ip
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 800eb70:	2600      	movs	r6, #0
 800eb72:	e070      	b.n	800ec56 <xmp3fixpt_IntensityProcMPEG1+0x29a>
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 800eb74:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800eb78:	463a      	mov	r2, r7
 800eb7a:	9f06      	ldr	r7, [sp, #24]
 800eb7c:	fb87 9202 	smull	r9, r2, r7, r2
 800eb80:	0097      	lsls	r7, r2, #2
 800eb82:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800eb86:	f8c2 7900 	str.w	r7, [r2, #2304]	; 0x900
	__asm__ volatile (
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	4691      	mov	r9, r2
 800eb8e:	ea87 79e7 	eor.w	r9, r7, r7, asr #31
 800eb92:	eba9 79e7 	sub.w	r9, r9, r7, asr #31
 800eb96:	ea43 0309 	orr.w	r3, r3, r9
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 800eb9a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800eb9e:	46b9      	mov	r9, r7
 800eba0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eba2:	fb87 a909 	smull	sl, r9, r7, r9
 800eba6:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800ebaa:	f840 7025 	str.w	r7, [r0, r5, lsl #2]
	__asm__ volatile (
 800ebae:	4691      	mov	r9, r2
 800ebb0:	ea87 79e7 	eor.w	r9, r7, r7, asr #31
 800ebb4:	eba9 79e7 	sub.w	r9, r9, r7, asr #31
 800ebb8:	ea44 0409 	orr.w	r4, r4, r9
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 800ebbc:	f105 0a01 	add.w	sl, r5, #1
 800ebc0:	f850 702a 	ldr.w	r7, [r0, sl, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ebc4:	46b9      	mov	r9, r7
 800ebc6:	9f07      	ldr	r7, [sp, #28]
 800ebc8:	fb87 b909 	smull	fp, r9, r7, r9
 800ebcc:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800ebd0:	eb00 098a 	add.w	r9, r0, sl, lsl #2
 800ebd4:	f8c9 7900 	str.w	r7, [r9, #2304]	; 0x900
	__asm__ volatile (
 800ebd8:	4691      	mov	r9, r2
 800ebda:	ea87 79e7 	eor.w	r9, r7, r7, asr #31
 800ebde:	eba9 79e7 	sub.w	r9, r9, r7, asr #31
 800ebe2:	ea43 0309 	orr.w	r3, r3, r9
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 800ebe6:	f850 702a 	ldr.w	r7, [r0, sl, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ebea:	46b9      	mov	r9, r7
 800ebec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ebee:	fb87 b909 	smull	fp, r9, r7, r9
 800ebf2:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800ebf6:	f840 702a 	str.w	r7, [r0, sl, lsl #2]
	__asm__ volatile (
 800ebfa:	4691      	mov	r9, r2
 800ebfc:	ea87 79e7 	eor.w	r9, r7, r7, asr #31
 800ec00:	eba9 79e7 	sub.w	r9, r9, r7, asr #31
 800ec04:	ea44 0409 	orr.w	r4, r4, r9
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 800ec08:	f105 0a02 	add.w	sl, r5, #2
 800ec0c:	f850 702a 	ldr.w	r7, [r0, sl, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ec10:	46b9      	mov	r9, r7
 800ec12:	9f08      	ldr	r7, [sp, #32]
 800ec14:	fb87 b909 	smull	fp, r9, r7, r9
 800ec18:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800ec1c:	eb00 098a 	add.w	r9, r0, sl, lsl #2
 800ec20:	f8c9 7900 	str.w	r7, [r9, #2304]	; 0x900
	__asm__ volatile (
 800ec24:	4691      	mov	r9, r2
 800ec26:	ea87 79e7 	eor.w	r9, r7, r7, asr #31
 800ec2a:	eba9 79e7 	sub.w	r9, r9, r7, asr #31
 800ec2e:	ea43 0309 	orr.w	r3, r3, r9
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 800ec32:	f850 702a 	ldr.w	r7, [r0, sl, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ec36:	46b9      	mov	r9, r7
 800ec38:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ec3a:	fb87 b909 	smull	fp, r9, r7, r9
 800ec3e:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800ec42:	f840 702a 	str.w	r7, [r0, sl, lsl #2]
	__asm__ volatile (
 800ec46:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
 800ec4a:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
 800ec4e:	4314      	orrs	r4, r2
			sampsLeft -= 3;
 800ec50:	3903      	subs	r1, #3
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 800ec52:	3601      	adds	r6, #1
 800ec54:	3503      	adds	r5, #3
 800ec56:	4566      	cmp	r6, ip
 800ec58:	bfac      	ite	ge
 800ec5a:	2200      	movge	r2, #0
 800ec5c:	2201      	movlt	r2, #1
 800ec5e:	2902      	cmp	r1, #2
 800ec60:	bfd8      	it	le
 800ec62:	2200      	movle	r2, #0
 800ec64:	2a00      	cmp	r2, #0
 800ec66:	d185      	bne.n	800eb74 <xmp3fixpt_IntensityProcMPEG1+0x1b8>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 800ec68:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ec6c:	9a03      	ldr	r2, [sp, #12]
 800ec6e:	4594      	cmp	ip, r2
 800ec70:	bfac      	ite	ge
 800ec72:	2200      	movge	r2, #0
 800ec74:	2201      	movlt	r2, #1
 800ec76:	2902      	cmp	r1, #2
 800ec78:	bfd8      	it	le
 800ec7a:	2200      	movle	r2, #0
 800ec7c:	b11a      	cbz	r2, 800ec86 <xmp3fixpt_IntensityProcMPEG1+0x2ca>
		for (w = 0; w < 3; w++) {
 800ec7e:	2600      	movs	r6, #0
 800ec80:	469b      	mov	fp, r3
 800ec82:	9f00      	ldr	r7, [sp, #0]
 800ec84:	e74a      	b.n	800eb1c <xmp3fixpt_IntensityProcMPEG1+0x160>
		}
	}
	mOut[0] = mOutL;
 800ec86:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ec88:	6014      	str	r4, [r2, #0]
	mOut[1] = mOutR;
 800ec8a:	6053      	str	r3, [r2, #4]
	
	return;
}
 800ec8c:	b00d      	add	sp, #52	; 0x34
 800ec8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec92:	bf00      	nop
 800ec94:	0801b518 	.word	0x0801b518
 800ec98:	0801b508 	.word	0x0801b508

0800ec9c <xmp3fixpt_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 800ec9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca0:	b09d      	sub	sp, #116	; 0x74
 800eca2:	4690      	mov	r8, r2
 800eca4:	9302      	str	r3, [sp, #8]
 800eca6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 800eca8:	6833      	ldr	r3, [r6, #0]
 800ecaa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800ecac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800ecb0:	4a8e      	ldr	r2, [pc, #568]	; (800eeec <xmp3fixpt_IntensityProcMPEG2+0x250>)
 800ecb2:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 800ecb6:	9301      	str	r3, [sp, #4]
	mOutL = mOutR = 0;

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
 800ecb8:	2700      	movs	r7, #0
 800ecba:	463c      	mov	r4, r7
 800ecbc:	e00d      	b.n	800ecda <xmp3fixpt_IntensityProcMPEG2+0x3e>
		tmp = (1 << sfjs->slen[r]) - 1;
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
			il[k] = tmp;
 800ecbe:	ab1c      	add	r3, sp, #112	; 0x70
 800ecc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ecc4:	f843 5c5c 	str.w	r5, [r3, #-92]
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 800ecc8:	3201      	adds	r2, #1
 800ecca:	3401      	adds	r4, #1
 800eccc:	1d3b      	adds	r3, r7, #4
 800ecce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	dcf2      	bgt.n	800ecbe <xmp3fixpt_IntensityProcMPEG2+0x22>
	for (k = r = 0; r < 4; r++) {
 800ecd8:	3701      	adds	r7, #1
 800ecda:	2f03      	cmp	r7, #3
 800ecdc:	dc07      	bgt.n	800ecee <xmp3fixpt_IntensityProcMPEG2+0x52>
		tmp = (1 << sfjs->slen[r]) - 1;
 800ecde:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	2501      	movs	r5, #1
 800ece6:	409d      	lsls	r5, r3
 800ece8:	3d01      	subs	r5, #1
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 800ecea:	2200      	movs	r2, #0
 800ecec:	e7ee      	b.n	800eccc <xmp3fixpt_IntensityProcMPEG2+0x30>
	}

	if (cbi[1].cbType == 0) {
 800ecee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ecf0:	699d      	ldr	r5, [r3, #24]
 800ecf2:	9500      	str	r5, [sp, #0]
 800ecf4:	2d00      	cmp	r5, #0
 800ecf6:	d171      	bne.n	800eddc <xmp3fixpt_IntensityProcMPEG2+0x140>
		/* long blocks */
		il[21] = il[22] = 1;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	931b      	str	r3, [sp, #108]	; 0x6c
 800ecfc:	931a      	str	r3, [sp, #104]	; 0x68
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 800ecfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ed00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed02:	3301      	adds	r3, #1
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 800ed04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ed06:	6952      	ldr	r2, [r2, #20]
 800ed08:	3201      	adds	r2, #1
 800ed0a:	9203      	str	r2, [sp, #12]
		i = fh->sfBand->l[cbStartL];
 800ed0c:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800ed10:	f932 4013 	ldrsh.w	r4, [r2, r3, lsl #1]
		sampsLeft = nSamps - i;
 800ed14:	eba1 0b04 	sub.w	fp, r1, r4
 800ed18:	46ac      	mov	ip, r5
 800ed1a:	46ae      	mov	lr, r5

		for(cb = cbStartL; cb < cbEndL; cb++) {
 800ed1c:	e010      	b.n	800ed40 <xmp3fixpt_IntensityProcMPEG2+0xa4>
			sfIdx = sfis->l[cb];
			if (sfIdx == il[cb]) {
				fl = ISFIIP[midSideFlag][0];
 800ed1e:	4a74      	ldr	r2, [pc, #464]	; (800eef0 <xmp3fixpt_IntensityProcMPEG2+0x254>)
 800ed20:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800ed22:	f852 5031 	ldr.w	r5, [r2, r1, lsl #3]
				fr = ISFIIP[midSideFlag][1];
 800ed26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ed2a:	6856      	ldr	r6, [r2, #4]
 800ed2c:	e021      	b.n	800ed72 <xmp3fixpt_IntensityProcMPEG2+0xd6>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 800ed2e:	2500      	movs	r5, #0
 800ed30:	e018      	b.n	800ed64 <xmp3fixpt_IntensityProcMPEG2+0xc8>
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 800ed32:	2200      	movs	r2, #0
 800ed34:	e01b      	b.n	800ed6e <xmp3fixpt_IntensityProcMPEG2+0xd2>
		for(cb = cbStartL; cb < cbEndL; cb++) {
 800ed36:	464b      	mov	r3, r9
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
			if (sampsLeft == 0)		
 800ed38:	ebbb 0b07 	subs.w	fp, fp, r7
 800ed3c:	f000 80d3 	beq.w	800eee6 <xmp3fixpt_IntensityProcMPEG2+0x24a>
		for(cb = cbStartL; cb < cbEndL; cb++) {
 800ed40:	9a03      	ldr	r2, [sp, #12]
 800ed42:	4293      	cmp	r3, r2
 800ed44:	da47      	bge.n	800edd6 <xmp3fixpt_IntensityProcMPEG2+0x13a>
			sfIdx = sfis->l[cb];
 800ed46:	9a02      	ldr	r2, [sp, #8]
 800ed48:	5cd2      	ldrb	r2, [r2, r3]
			if (sfIdx == il[cb]) {
 800ed4a:	a91c      	add	r1, sp, #112	; 0x70
 800ed4c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ed50:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 800ed54:	4291      	cmp	r1, r2
 800ed56:	d0e2      	beq.n	800ed1e <xmp3fixpt_IntensityProcMPEG2+0x82>
				isf = (sfis->l[cb] + 1) >> 1;
 800ed58:	1c51      	adds	r1, r2, #1
 800ed5a:	1049      	asrs	r1, r1, #1
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 800ed5c:	f012 0201 	ands.w	r2, r2, #1
 800ed60:	d0e5      	beq.n	800ed2e <xmp3fixpt_IntensityProcMPEG2+0x92>
 800ed62:	008d      	lsls	r5, r1, #2
 800ed64:	9e01      	ldr	r6, [sp, #4]
 800ed66:	5975      	ldr	r5, [r6, r5]
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 800ed68:	2a00      	cmp	r2, #0
 800ed6a:	d1e2      	bne.n	800ed32 <xmp3fixpt_IntensityProcMPEG2+0x96>
 800ed6c:	008a      	lsls	r2, r1, #2
 800ed6e:	9901      	ldr	r1, [sp, #4]
 800ed70:	588e      	ldr	r6, [r1, r2]
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 800ed72:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800ed76:	f103 0901 	add.w	r9, r3, #1
 800ed7a:	f932 7019 	ldrsh.w	r7, [r2, r9, lsl #1]
 800ed7e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ed82:	1aff      	subs	r7, r7, r3
 800ed84:	455f      	cmp	r7, fp
 800ed86:	bfa8      	it	ge
 800ed88:	465f      	movge	r7, fp
			for(j = 0; j < n; j++, i++) {
 800ed8a:	9900      	ldr	r1, [sp, #0]
 800ed8c:	42b9      	cmp	r1, r7
 800ed8e:	dad2      	bge.n	800ed36 <xmp3fixpt_IntensityProcMPEG2+0x9a>
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 800ed90:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ed94:	4613      	mov	r3, r2
 800ed96:	fb86 2303 	smull	r2, r3, r6, r3
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 800eda0:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
	__asm__ volatile (
 800eda4:	2200      	movs	r2, #0
 800eda6:	4692      	mov	sl, r2
 800eda8:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 800edac:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
 800edb0:	ea4e 0e0a 	orr.w	lr, lr, sl
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 800edb4:	f850 a024 	ldr.w	sl, [r0, r4, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800edb8:	4653      	mov	r3, sl
 800edba:	fb85 a303 	smull	sl, r3, r5, r3
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
	__asm__ volatile (
 800edc4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800edc8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800edcc:	ea4c 0c02 	orr.w	ip, ip, r2
			for(j = 0; j < n; j++, i++) {
 800edd0:	3101      	adds	r1, #1
 800edd2:	3401      	adds	r4, #1
 800edd4:	e7da      	b.n	800ed8c <xmp3fixpt_IntensityProcMPEG2+0xf0>
 800edd6:	4666      	mov	r6, ip
 800edd8:	4675      	mov	r5, lr
 800edda:	e07e      	b.n	800eeda <xmp3fixpt_IntensityProcMPEG2+0x23e>
				break;
		}
	} else {
		/* short or mixed blocks */
		il[12] = 1;
 800eddc:	2301      	movs	r3, #1
 800edde:	9311      	str	r3, [sp, #68]	; 0x44
	mOutL = mOutR = 0;
 800ede0:	2500      	movs	r5, #0
 800ede2:	462e      	mov	r6, r5

		for(w = 0; w < 3; w++) {
 800ede4:	46a9      	mov	r9, r5
 800ede6:	46ae      	mov	lr, r5
 800ede8:	e060      	b.n	800eeac <xmp3fixpt_IntensityProcMPEG2+0x210>

			/* skip through sample array by 3, so early-exit logic would be more tricky */
			for(cb = cbStartS; cb < cbEndS; cb++) {
				sfIdx = sfis->s[cb][w];
				if (sfIdx == il[cb]) {
					fl = ISFIIP[midSideFlag][0];
 800edea:	4b41      	ldr	r3, [pc, #260]	; (800eef0 <xmp3fixpt_IntensityProcMPEG2+0x254>)
 800edec:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800edee:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
					fr = ISFIIP[midSideFlag][1];
 800edf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800edf6:	685f      	ldr	r7, [r3, #4]
 800edf8:	e043      	b.n	800ee82 <xmp3fixpt_IntensityProcMPEG2+0x1e6>
				} else {
					isf = (sfis->s[cb][w] + 1) >> 1;
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 800edfa:	2500      	movs	r5, #0
 800edfc:	e03a      	b.n	800ee74 <xmp3fixpt_IntensityProcMPEG2+0x1d8>
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 800edfe:	2300      	movs	r3, #0
 800ee00:	e03d      	b.n	800ee7e <xmp3fixpt_IntensityProcMPEG2+0x1e2>
				}
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];

				for(j = 0; j < n; j++, i+=3) {
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 800ee02:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ee06:	4613      	mov	r3, r2
 800ee08:	fb87 2303 	smull	r2, r3, r7, r3
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800ee12:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
	__asm__ volatile (
 800ee16:	2200      	movs	r2, #0
 800ee18:	4693      	mov	fp, r2
 800ee1a:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 800ee1e:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
 800ee22:	ea4e 0e0b 	orr.w	lr, lr, fp
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 800ee26:	f850 b021 	ldr.w	fp, [r0, r1, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ee2a:	465b      	mov	r3, fp
 800ee2c:	fb85 b303 	smull	fp, r3, r5, r3
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	__asm__ volatile (
 800ee36:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800ee3a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800ee3e:	4316      	orrs	r6, r2
				for(j = 0; j < n; j++, i+=3) {
 800ee40:	3401      	adds	r4, #1
 800ee42:	3103      	adds	r1, #3
 800ee44:	4564      	cmp	r4, ip
 800ee46:	dbdc      	blt.n	800ee02 <xmp3fixpt_IntensityProcMPEG2+0x166>
			for(cb = cbStartS; cb < cbEndS; cb++) {
 800ee48:	9a00      	ldr	r2, [sp, #0]
 800ee4a:	4552      	cmp	r2, sl
 800ee4c:	da2c      	bge.n	800eea8 <xmp3fixpt_IntensityProcMPEG2+0x20c>
				sfIdx = sfis->s[cb][w];
 800ee4e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ee52:	9c02      	ldr	r4, [sp, #8]
 800ee54:	4423      	add	r3, r4
 800ee56:	444b      	add	r3, r9
 800ee58:	7ddb      	ldrb	r3, [r3, #23]
				if (sfIdx == il[cb]) {
 800ee5a:	ac1c      	add	r4, sp, #112	; 0x70
 800ee5c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800ee60:	f854 4c5c 	ldr.w	r4, [r4, #-92]
 800ee64:	429c      	cmp	r4, r3
 800ee66:	d0c0      	beq.n	800edea <xmp3fixpt_IntensityProcMPEG2+0x14e>
					isf = (sfis->s[cb][w] + 1) >> 1;
 800ee68:	1c5c      	adds	r4, r3, #1
 800ee6a:	1064      	asrs	r4, r4, #1
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 800ee6c:	f013 0301 	ands.w	r3, r3, #1
 800ee70:	d0c3      	beq.n	800edfa <xmp3fixpt_IntensityProcMPEG2+0x15e>
 800ee72:	00a5      	lsls	r5, r4, #2
 800ee74:	9f01      	ldr	r7, [sp, #4]
 800ee76:	597d      	ldr	r5, [r7, r5]
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1c0      	bne.n	800edfe <xmp3fixpt_IntensityProcMPEG2+0x162>
 800ee7c:	00a3      	lsls	r3, r4, #2
 800ee7e:	9c01      	ldr	r4, [sp, #4]
 800ee80:	58e7      	ldr	r7, [r4, r3]
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800ee82:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800ee86:	1c54      	adds	r4, r2, #1
 800ee88:	9400      	str	r4, [sp, #0]
 800ee8a:	f102 0415 	add.w	r4, r2, #21
 800ee8e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800ee92:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 800ee96:	3214      	adds	r2, #20
 800ee98:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ee9c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800eea0:	ebac 0c03 	sub.w	ip, ip, r3
				for(j = 0; j < n; j++, i+=3) {
 800eea4:	2400      	movs	r4, #0
 800eea6:	e7cd      	b.n	800ee44 <xmp3fixpt_IntensityProcMPEG2+0x1a8>
		for(w = 0; w < 3; w++) {
 800eea8:	f109 0901 	add.w	r9, r9, #1
 800eeac:	f1b9 0f02 	cmp.w	r9, #2
 800eeb0:	dc12      	bgt.n	800eed8 <xmp3fixpt_IntensityProcMPEG2+0x23c>
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 800eeb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eeb4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800eeb8:	69d9      	ldr	r1, [r3, #28]
 800eeba:	1c4a      	adds	r2, r1, #1
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	f103 0a01 	add.w	sl, r3, #1
			i = 3 * fh->sfBand->s[cbStartS] + w;
 800eec2:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800eec6:	3115      	adds	r1, #21
 800eec8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800eecc:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800eed0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800eed4:	4449      	add	r1, r9
			for(cb = cbStartS; cb < cbEndS; cb++) {
 800eed6:	e7b8      	b.n	800ee4a <xmp3fixpt_IntensityProcMPEG2+0x1ae>
 800eed8:	4675      	mov	r5, lr
				}
			}
		}
	}
	mOut[0] = mOutL;
 800eeda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800eedc:	601e      	str	r6, [r3, #0]
	mOut[1] = mOutR;
 800eede:	605d      	str	r5, [r3, #4]

	return;
}
 800eee0:	b01d      	add	sp, #116	; 0x74
 800eee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee6:	4666      	mov	r6, ip
 800eee8:	4675      	mov	r5, lr
 800eeea:	e7f6      	b.n	800eeda <xmp3fixpt_IntensityProcMPEG2+0x23e>
 800eeec:	0801b550 	.word	0x0801b550
 800eef0:	0801b508 	.word	0x0801b508

0800eef4 <xmp3fixpt_Subband>:
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 800eef4:	2800      	cmp	r0, #0
 800eef6:	d077      	beq.n	800efe8 <xmp3fixpt_Subband+0xf4>
{
 800eef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eefc:	b083      	sub	sp, #12
 800eefe:	460f      	mov	r7, r1
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 800ef00:	68c2      	ldr	r2, [r0, #12]
 800ef02:	2a00      	cmp	r2, #0
 800ef04:	d073      	beq.n	800efee <xmp3fixpt_Subband+0xfa>
 800ef06:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800ef0a:	f1b8 0f00 	cmp.w	r8, #0
 800ef0e:	d071      	beq.n	800eff4 <xmp3fixpt_Subband+0x100>
 800ef10:	6984      	ldr	r4, [r0, #24]
 800ef12:	2c00      	cmp	r4, #0
 800ef14:	d071      	beq.n	800effa <xmp3fixpt_Subband+0x106>

	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);

	if (mp3DecInfo->nChans == 2) {
 800ef16:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
 800ef1a:	2b02      	cmp	r3, #2
 800ef1c:	d038      	beq.n	800ef90 <xmp3fixpt_Subband+0x9c>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += (2 * NBANDS);
		}
	} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
 800ef1e:	2500      	movs	r5, #0
 800ef20:	e05c      	b.n	800efdc <xmp3fixpt_Subband+0xe8>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 800ef22:	f005 0901 	and.w	r9, r5, #1
 800ef26:	f504 5608 	add.w	r6, r4, #8704	; 0x2200
 800ef2a:	6832      	ldr	r2, [r6, #0]
 800ef2c:	f641 3318 	movw	r3, #6936	; 0x1b18
 800ef30:	f858 3003 	ldr.w	r3, [r8, r3]
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	464b      	mov	r3, r9
 800ef38:	4621      	mov	r1, r4
 800ef3a:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
 800ef3e:	f7fb fa65 	bl	800a40c <xmp3fixpt_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 800ef42:	f105 0012 	add.w	r0, r5, #18
 800ef46:	6832      	ldr	r2, [r6, #0]
 800ef48:	f641 331c 	movw	r3, #6940	; 0x1b1c
 800ef4c:	f858 3003 	ldr.w	r3, [r8, r3]
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	464b      	mov	r3, r9
 800ef54:	f104 0180 	add.w	r1, r4, #128	; 0x80
 800ef58:	eb08 10c0 	add.w	r0, r8, r0, lsl #7
 800ef5c:	f7fb fa56 	bl	800a40c <xmp3fixpt_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 800ef60:	6832      	ldr	r2, [r6, #0]
 800ef62:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800ef66:	444b      	add	r3, r9
 800ef68:	0219      	lsls	r1, r3, #8
 800ef6a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ef6e:	4a24      	ldr	r2, [pc, #144]	; (800f000 <xmp3fixpt_Subband+0x10c>)
 800ef70:	4421      	add	r1, r4
 800ef72:	4638      	mov	r0, r7
 800ef74:	f7fe f8f9 	bl	800d16a <xmp3fixpt_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 800ef78:	6833      	ldr	r3, [r6, #0]
 800ef7a:	eba3 0309 	sub.w	r3, r3, r9
 800ef7e:	f003 0307 	and.w	r3, r3, #7
 800ef82:	6033      	str	r3, [r6, #0]
			pcmBuf += (2 * NBANDS);
 800ef84:	3780      	adds	r7, #128	; 0x80
		for (b = 0; b < BLOCK_SIZE; b++) {
 800ef86:	3501      	adds	r5, #1
 800ef88:	2d11      	cmp	r5, #17
 800ef8a:	ddca      	ble.n	800ef22 <xmp3fixpt_Subband+0x2e>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += NBANDS;
		}
	}

	return 0;
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e028      	b.n	800efe2 <xmp3fixpt_Subband+0xee>
		for (b = 0; b < BLOCK_SIZE; b++) {
 800ef90:	2500      	movs	r5, #0
 800ef92:	e7f9      	b.n	800ef88 <xmp3fixpt_Subband+0x94>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 800ef94:	f005 0901 	and.w	r9, r5, #1
 800ef98:	f504 5608 	add.w	r6, r4, #8704	; 0x2200
 800ef9c:	6832      	ldr	r2, [r6, #0]
 800ef9e:	f641 3318 	movw	r3, #6936	; 0x1b18
 800efa2:	f858 3003 	ldr.w	r3, [r8, r3]
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	464b      	mov	r3, r9
 800efaa:	4621      	mov	r1, r4
 800efac:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
 800efb0:	f7fb fa2c 	bl	800a40c <xmp3fixpt_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 800efb4:	6832      	ldr	r2, [r6, #0]
 800efb6:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800efba:	444b      	add	r3, r9
 800efbc:	0219      	lsls	r1, r3, #8
 800efbe:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800efc2:	4a0f      	ldr	r2, [pc, #60]	; (800f000 <xmp3fixpt_Subband+0x10c>)
 800efc4:	4421      	add	r1, r4
 800efc6:	4638      	mov	r0, r7
 800efc8:	f7fd fc62 	bl	800c890 <xmp3fixpt_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 800efcc:	6833      	ldr	r3, [r6, #0]
 800efce:	eba3 0309 	sub.w	r3, r3, r9
 800efd2:	f003 0307 	and.w	r3, r3, #7
 800efd6:	6033      	str	r3, [r6, #0]
			pcmBuf += NBANDS;
 800efd8:	3740      	adds	r7, #64	; 0x40
		for (b = 0; b < BLOCK_SIZE; b++) {
 800efda:	3501      	adds	r5, #1
 800efdc:	2d11      	cmp	r5, #17
 800efde:	ddd9      	ble.n	800ef94 <xmp3fixpt_Subband+0xa0>
	return 0;
 800efe0:	2000      	movs	r0, #0
}
 800efe2:	b003      	add	sp, #12
 800efe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -1;
 800efe8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800efec:	4770      	bx	lr
		return -1;
 800efee:	f04f 30ff 	mov.w	r0, #4294967295
 800eff2:	e7f6      	b.n	800efe2 <xmp3fixpt_Subband+0xee>
 800eff4:	f04f 30ff 	mov.w	r0, #4294967295
 800eff8:	e7f3      	b.n	800efe2 <xmp3fixpt_Subband+0xee>
 800effa:	f04f 30ff 	mov.w	r0, #4294967295
 800effe:	e7f0      	b.n	800efe2 <xmp3fixpt_Subband+0xee>
 800f000:	0801b8d0 	.word	0x0801b8d0

0800f004 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f004:	b500      	push	{lr}
 800f006:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	4613      	mov	r3, r2
 800f00c:	460a      	mov	r2, r1
 800f00e:	4601      	mov	r1, r0
 800f010:	4803      	ldr	r0, [pc, #12]	; (800f020 <BSP_SD_ReadBlocks+0x1c>)
 800f012:	f7f6 f9e8 	bl	80053e6 <HAL_SD_ReadBlocks>
 800f016:	b100      	cbz	r0, 800f01a <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800f018:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 800f01a:	b003      	add	sp, #12
 800f01c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f020:	20018220 	.word	0x20018220

0800f024 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f024:	b500      	push	{lr}
 800f026:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	4613      	mov	r3, r2
 800f02c:	460a      	mov	r2, r1
 800f02e:	4601      	mov	r1, r0
 800f030:	4803      	ldr	r0, [pc, #12]	; (800f040 <BSP_SD_WriteBlocks+0x1c>)
 800f032:	f7f6 fae4 	bl	80055fe <HAL_SD_WriteBlocks>
 800f036:	b100      	cbz	r0, 800f03a <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800f038:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 800f03a:	b003      	add	sp, #12
 800f03c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f040:	20018220 	.word	0x20018220

0800f044 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800f044:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f046:	4803      	ldr	r0, [pc, #12]	; (800f054 <BSP_SD_GetCardState+0x10>)
 800f048:	f7f6 fe6e 	bl	8005d28 <HAL_SD_GetCardState>
}
 800f04c:	3804      	subs	r0, #4
 800f04e:	bf18      	it	ne
 800f050:	2001      	movne	r0, #1
 800f052:	bd08      	pop	{r3, pc}
 800f054:	20018220 	.word	0x20018220

0800f058 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f058:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f05a:	4601      	mov	r1, r0
 800f05c:	4801      	ldr	r0, [pc, #4]	; (800f064 <BSP_SD_GetCardInfo+0xc>)
 800f05e:	f7f6 fdeb 	bl	8005c38 <HAL_SD_GetCardInfo>
}
 800f062:	bd08      	pop	{r3, pc}
 800f064:	20018220 	.word	0x20018220

0800f068 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800f068:	b500      	push	{lr}
 800f06a:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800f06c:	2301      	movs	r3, #1
 800f06e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800f072:	f002 fc05 	bl	8011880 <BSP_PlatformIsDetected>
 800f076:	b910      	cbnz	r0, 800f07e <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 800f078:	2300      	movs	r3, #0
 800f07a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800f07e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800f082:	b003      	add	sp, #12
 800f084:	f85d fb04 	ldr.w	pc, [sp], #4

0800f088 <BSP_SD_Init>:
{
 800f088:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f08a:	f7ff ffed 	bl	800f068 <BSP_SD_IsDetected>
 800f08e:	2801      	cmp	r0, #1
 800f090:	d002      	beq.n	800f098 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 800f092:	2402      	movs	r4, #2
}
 800f094:	4620      	mov	r0, r4
 800f096:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800f098:	4807      	ldr	r0, [pc, #28]	; (800f0b8 <BSP_SD_Init+0x30>)
 800f09a:	f7f6 fd4b 	bl	8005b34 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800f09e:	4604      	mov	r4, r0
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	d1f7      	bne.n	800f094 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f0a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f0a8:	4803      	ldr	r0, [pc, #12]	; (800f0b8 <BSP_SD_Init+0x30>)
 800f0aa:	f7f6 fdd7 	bl	8005c5c <HAL_SD_ConfigWideBusOperation>
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d0f0      	beq.n	800f094 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800f0b2:	2401      	movs	r4, #1
 800f0b4:	e7ee      	b.n	800f094 <BSP_SD_Init+0xc>
 800f0b6:	bf00      	nop
 800f0b8:	20018220 	.word	0x20018220

0800f0bc <Color_Convertion>:
extern uint8_t acue_sensitivity;

// converts ARGB8888 to RGB565
static uint16_t Color_Convertion(uint32_t in_color)
{
	uint16_t red = (in_color & 0x00FF0000) >> 16;
 800f0bc:	f3c0 4107 	ubfx	r1, r0, #16, #8
	uint16_t green = (in_color & 0x0000FF00) >> 8;
 800f0c0:	f3c0 2207 	ubfx	r2, r0, #8, #8
	uint16_t blue = (in_color & 0x000000FF);
	uint16_t out_color = ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
 800f0c4:	4b06      	ldr	r3, [pc, #24]	; (800f0e0 <Color_Convertion+0x24>)
 800f0c6:	ea03 2301 	and.w	r3, r3, r1, lsl #8
 800f0ca:	b21b      	sxth	r3, r3
 800f0cc:	00d2      	lsls	r2, r2, #3
 800f0ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 800f0d8:	4318      	orrs	r0, r3
	return out_color;
}
 800f0da:	b280      	uxth	r0, r0
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	fffff800 	.word	0xfffff800

0800f0e4 <ClearLayer>:

// clears selected ActiveLayer
void ClearLayer()
{
 800f0e4:	b500      	push	{lr}
 800f0e6:	b083      	sub	sp, #12
	hdma2d.Init.OutputOffset = 0;
 800f0e8:	480e      	ldr	r0, [pc, #56]	; (800f124 <ClearLayer+0x40>)
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	60c3      	str	r3, [r0, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 800f0ee:	f7f2 fd69 	bl	8001bc4 <HAL_DMA2D_Init>
 800f0f2:	b110      	cbz	r0, 800f0fa <ClearLayer+0x16>
				hltdc.LayerCfg[ActiveLayer].ImageWidth, hltdc.LayerCfg[ActiveLayer].ImageHeight) == HAL_OK) {
			/* Polling For DMA transfer */
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
		}
	}
}
 800f0f4:	b003      	add	sp, #12
 800f0f6:	f85d fb04 	ldr.w	pc, [sp], #4
		if(HAL_DMA2D_Start(&hdma2d, 0, hltdc.LayerCfg[ActiveLayer].FBStartAdress,
 800f0fa:	4b0b      	ldr	r3, [pc, #44]	; (800f128 <ClearLayer+0x44>)
 800f0fc:	7819      	ldrb	r1, [r3, #0]
 800f0fe:	4b0b      	ldr	r3, [pc, #44]	; (800f12c <ClearLayer+0x48>)
 800f100:	2234      	movs	r2, #52	; 0x34
 800f102:	fb02 3101 	mla	r1, r2, r1, r3
 800f106:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800f108:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800f10a:	6e49      	ldr	r1, [r1, #100]	; 0x64
 800f10c:	9100      	str	r1, [sp, #0]
 800f10e:	2100      	movs	r1, #0
 800f110:	4804      	ldr	r0, [pc, #16]	; (800f124 <ClearLayer+0x40>)
 800f112:	f7f2 fdb7 	bl	8001c84 <HAL_DMA2D_Start>
 800f116:	2800      	cmp	r0, #0
 800f118:	d1ec      	bne.n	800f0f4 <ClearLayer+0x10>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 800f11a:	2164      	movs	r1, #100	; 0x64
 800f11c:	4801      	ldr	r0, [pc, #4]	; (800f124 <ClearLayer+0x40>)
 800f11e:	f7f2 fde9 	bl	8001cf4 <HAL_DMA2D_PollForTransfer>
}
 800f122:	e7e7      	b.n	800f0f4 <ClearLayer+0x10>
 800f124:	20001574 	.word	0x20001574
 800f128:	200007db 	.word	0x200007db
 800f12c:	20001adc 	.word	0x20001adc

0800f130 <ChangeLayers>:

// changes ActiveLayers
void ChangeLayers(void)
{
 800f130:	b538      	push	{r3, r4, r5, lr}
	if(ActiveLayer == 0) {
 800f132:	4b11      	ldr	r3, [pc, #68]	; (800f178 <ChangeLayers+0x48>)
 800f134:	781a      	ldrb	r2, [r3, #0]
 800f136:	b18a      	cbz	r2, 800f15c <ChangeLayers+0x2c>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer++);
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
	}
	else {
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 800f138:	4d0f      	ldr	r5, [pc, #60]	; (800f178 <ChangeLayers+0x48>)
 800f13a:	1e53      	subs	r3, r2, #1
 800f13c:	702b      	strb	r3, [r5, #0]
 800f13e:	4c0f      	ldr	r4, [pc, #60]	; (800f17c <ChangeLayers+0x4c>)
 800f140:	21ff      	movs	r1, #255	; 0xff
 800f142:	4620      	mov	r0, r4
 800f144:	f7f4 f89a 	bl	800327c <HAL_LTDC_SetAlpha_NoReload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
 800f148:	782a      	ldrb	r2, [r5, #0]
 800f14a:	2100      	movs	r1, #0
 800f14c:	4620      	mov	r0, r4
 800f14e:	f7f4 f895 	bl	800327c <HAL_LTDC_SetAlpha_NoReload>
	}
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 800f152:	2102      	movs	r1, #2
 800f154:	4809      	ldr	r0, [pc, #36]	; (800f17c <ChangeLayers+0x4c>)
 800f156:	f7f4 f869 	bl	800322c <HAL_LTDC_Reload>
}
 800f15a:	bd38      	pop	{r3, r4, r5, pc}
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer++);
 800f15c:	461d      	mov	r5, r3
 800f15e:	1c53      	adds	r3, r2, #1
 800f160:	702b      	strb	r3, [r5, #0]
 800f162:	4c06      	ldr	r4, [pc, #24]	; (800f17c <ChangeLayers+0x4c>)
 800f164:	21ff      	movs	r1, #255	; 0xff
 800f166:	4620      	mov	r0, r4
 800f168:	f7f4 f888 	bl	800327c <HAL_LTDC_SetAlpha_NoReload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
 800f16c:	782a      	ldrb	r2, [r5, #0]
 800f16e:	2100      	movs	r1, #0
 800f170:	4620      	mov	r0, r4
 800f172:	f7f4 f883 	bl	800327c <HAL_LTDC_SetAlpha_NoReload>
 800f176:	e7ec      	b.n	800f152 <ChangeLayers+0x22>
 800f178:	200007db 	.word	0x200007db
 800f17c:	20001adc 	.word	0x20001adc

0800f180 <SetBeatGrid>:
	VLine(41 + file_pos, 220, 40, 0x00FFFFFF);
}

void SetBeatGrid()
{
	if(position != file_pos_wide) {
 800f180:	4b3f      	ldr	r3, [pc, #252]	; (800f280 <SetBeatGrid+0x100>)
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	4b3f      	ldr	r3, [pc, #252]	; (800f284 <SetBeatGrid+0x104>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d022      	beq.n	800f1d2 <SetBeatGrid+0x52>
		position = file_pos_wide;
 800f18c:	4a3c      	ldr	r2, [pc, #240]	; (800f280 <SetBeatGrid+0x100>)
 800f18e:	6013      	str	r3, [r2, #0]
		if(stretch > 1) {
 800f190:	4b3d      	ldr	r3, [pc, #244]	; (800f288 <SetBeatGrid+0x108>)
 800f192:	edd3 7a00 	vldr	s15, [r3]
 800f196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f19a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a2:	dc04      	bgt.n	800f1ae <SetBeatGrid+0x2e>
 800f1a4:	e015      	b.n	800f1d2 <SetBeatGrid+0x52>
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
				position++;
 800f1a6:	4a36      	ldr	r2, [pc, #216]	; (800f280 <SetBeatGrid+0x100>)
 800f1a8:	6813      	ldr	r3, [r2, #0]
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	6013      	str	r3, [r2, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 800f1ae:	4b34      	ldr	r3, [pc, #208]	; (800f280 <SetBeatGrid+0x100>)
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f1b6:	ee17 3a10 	vmov	r3, s14
 800f1ba:	fb92 f1f3 	sdiv	r1, r2, r3
 800f1be:	fb03 2111 	mls	r1, r3, r1, r2
 800f1c2:	4a32      	ldr	r2, [pc, #200]	; (800f28c <SetBeatGrid+0x10c>)
 800f1c4:	6810      	ldr	r0, [r2, #0]
 800f1c6:	fb90 f2f3 	sdiv	r2, r0, r3
 800f1ca:	fb03 0312 	mls	r3, r3, r2, r0
 800f1ce:	4299      	cmp	r1, r3
 800f1d0:	d1e9      	bne.n	800f1a6 <SetBeatGrid+0x26>
			}
		}
	}
	beat = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	4a2e      	ldr	r2, [pc, #184]	; (800f290 <SetBeatGrid+0x110>)
 800f1d6:	6013      	str	r3, [r2, #0]
	first_beat = 0;
 800f1d8:	4a2e      	ldr	r2, [pc, #184]	; (800f294 <SetBeatGrid+0x114>)
 800f1da:	6013      	str	r3, [r2, #0]
	int32_t check = position + (-240)*stretch;
 800f1dc:	4b28      	ldr	r3, [pc, #160]	; (800f280 <SetBeatGrid+0x100>)
 800f1de:	edd3 7a00 	vldr	s15, [r3]
 800f1e2:	4b29      	ldr	r3, [pc, #164]	; (800f288 <SetBeatGrid+0x108>)
 800f1e4:	ed93 7a00 	vldr	s14, [r3]
 800f1e8:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800f298 <SetBeatGrid+0x118>
 800f1ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f1f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f1f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1fc:	ee17 1a90 	vmov	r1, s15
	if(check > 0) {
 800f200:	2900      	cmp	r1, #0
 800f202:	dc07      	bgt.n	800f214 <SetBeatGrid+0x94>
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
			first_beat++;
		}
	}
	if(position > 0) {
 800f204:	4b1e      	ldr	r3, [pc, #120]	; (800f280 <SetBeatGrid+0x100>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	dc1d      	bgt.n	800f248 <SetBeatGrid+0xc8>
 800f20c:	4770      	bx	lr
			first_beat++;
 800f20e:	3201      	adds	r2, #1
 800f210:	4b20      	ldr	r3, [pc, #128]	; (800f294 <SetBeatGrid+0x114>)
 800f212:	601a      	str	r2, [r3, #0]
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
 800f214:	4b1f      	ldr	r3, [pc, #124]	; (800f294 <SetBeatGrid+0x114>)
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	f502 60a5 	add.w	r0, r2, #1320	; 0x528
 800f21c:	4b1f      	ldr	r3, [pc, #124]	; (800f29c <SetBeatGrid+0x11c>)
 800f21e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800f222:	6858      	ldr	r0, [r3, #4]
 800f224:	2396      	movs	r3, #150	; 0x96
 800f226:	fb03 f300 	mul.w	r3, r3, r0
 800f22a:	481d      	ldr	r0, [pc, #116]	; (800f2a0 <SetBeatGrid+0x120>)
 800f22c:	fba0 0303 	umull	r0, r3, r0, r3
 800f230:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 800f234:	d3e6      	bcc.n	800f204 <SetBeatGrid+0x84>
 800f236:	4b19      	ldr	r3, [pc, #100]	; (800f29c <SetBeatGrid+0x11c>)
 800f238:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d9e6      	bls.n	800f20e <SetBeatGrid+0x8e>
 800f240:	e7e0      	b.n	800f204 <SetBeatGrid+0x84>
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
			beat++;
 800f242:	3201      	adds	r2, #1
 800f244:	4b12      	ldr	r3, [pc, #72]	; (800f290 <SetBeatGrid+0x110>)
 800f246:	601a      	str	r2, [r3, #0]
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
 800f248:	4b11      	ldr	r3, [pc, #68]	; (800f290 <SetBeatGrid+0x110>)
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	f502 61a5 	add.w	r1, r2, #1320	; 0x528
 800f250:	4b12      	ldr	r3, [pc, #72]	; (800f29c <SetBeatGrid+0x11c>)
 800f252:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f256:	6859      	ldr	r1, [r3, #4]
 800f258:	2396      	movs	r3, #150	; 0x96
 800f25a:	fb03 f301 	mul.w	r3, r3, r1
 800f25e:	4910      	ldr	r1, [pc, #64]	; (800f2a0 <SetBeatGrid+0x120>)
 800f260:	fba1 1303 	umull	r1, r3, r1, r3
 800f264:	4906      	ldr	r1, [pc, #24]	; (800f280 <SetBeatGrid+0x100>)
 800f266:	6809      	ldr	r1, [r1, #0]
 800f268:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 800f26c:	d304      	bcc.n	800f278 <SetBeatGrid+0xf8>
 800f26e:	4b0b      	ldr	r3, [pc, #44]	; (800f29c <SetBeatGrid+0x11c>)
 800f270:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800f274:	4293      	cmp	r3, r2
 800f276:	d2e4      	bcs.n	800f242 <SetBeatGrid+0xc2>
		}
		beat--;
 800f278:	3a01      	subs	r2, #1
 800f27a:	4b05      	ldr	r3, [pc, #20]	; (800f290 <SetBeatGrid+0x110>)
 800f27c:	601a      	str	r2, [r3, #0]
	}
}
 800f27e:	4770      	bx	lr
 800f280:	200007cc 	.word	0x200007cc
 800f284:	200007f0 	.word	0x200007f0
 800f288:	20000008 	.word	0x20000008
 800f28c:	200007b8 	.word	0x200007b8
 800f290:	200007b4 	.word	0x200007b4
 800f294:	200007c0 	.word	0x200007c0
 800f298:	c3700000 	.word	0xc3700000
 800f29c:	200153a4 	.word	0x200153a4
 800f2a0:	10624dd3 	.word	0x10624dd3

0800f2a4 <DrawElement>:

// draws element
void DrawElement(uint16_t width, uint16_t height, uint16_t xpos, uint16_t ypos, uint32_t color, const uint16_t* element)
{
 800f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a8:	b083      	sub	sp, #12
 800f2aa:	9001      	str	r0, [sp, #4]
 800f2ac:	460f      	mov	r7, r1
 800f2ae:	4692      	mov	sl, r2
 800f2b0:	4699      	mov	r9, r3
 800f2b2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	uint16_t i = 0;
 800f2b6:	2600      	movs	r6, #0
	while(i < width) {
 800f2b8:	e02f      	b.n	800f31a <DrawElement+0x76>
		while(k < height) {
			if(((element[i] >> k) & 1) == 1) {
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
			}
			else {
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 800f2ba:	4b1c      	ldr	r3, [pc, #112]	; (800f32c <DrawElement+0x88>)
 800f2bc:	781a      	ldrb	r2, [r3, #0]
 800f2be:	4b1c      	ldr	r3, [pc, #112]	; (800f330 <DrawElement+0x8c>)
 800f2c0:	2134      	movs	r1, #52	; 0x34
 800f2c2:	fb01 3202 	mla	r2, r1, r2, r3
 800f2c6:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800f2c8:	eba9 0304 	sub.w	r3, r9, r4
 800f2cc:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800f2ce:	fb02 a303 	mla	r3, r2, r3, sl
 800f2d2:	4433      	add	r3, r6
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			k++;
 800f2da:	3401      	adds	r4, #1
 800f2dc:	b2a4      	uxth	r4, r4
		while(k < height) {
 800f2de:	42bc      	cmp	r4, r7
 800f2e0:	d219      	bcs.n	800f316 <DrawElement+0x72>
			if(((element[i] >> k) & 1) == 1) {
 800f2e2:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800f2e6:	4123      	asrs	r3, r4
 800f2e8:	f013 0f01 	tst.w	r3, #1
 800f2ec:	d0e5      	beq.n	800f2ba <DrawElement+0x16>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 800f2ee:	4b0f      	ldr	r3, [pc, #60]	; (800f32c <DrawElement+0x88>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	4a0f      	ldr	r2, [pc, #60]	; (800f330 <DrawElement+0x8c>)
 800f2f4:	2134      	movs	r1, #52	; 0x34
 800f2f6:	fb01 2303 	mla	r3, r1, r3, r2
 800f2fa:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 800f2fe:	eba9 0504 	sub.w	r5, r9, r4
 800f302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f304:	fb03 a505 	mla	r5, r3, r5, sl
 800f308:	4435      	add	r5, r6
 800f30a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f30c:	f7ff fed6 	bl	800f0bc <Color_Convertion>
 800f310:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
 800f314:	e7e1      	b.n	800f2da <DrawElement+0x36>
		}
		i++;
 800f316:	3601      	adds	r6, #1
 800f318:	b2b6      	uxth	r6, r6
	while(i < width) {
 800f31a:	9b01      	ldr	r3, [sp, #4]
 800f31c:	429e      	cmp	r6, r3
 800f31e:	d201      	bcs.n	800f324 <DrawElement+0x80>
		uint16_t k = 0;
 800f320:	2400      	movs	r4, #0
 800f322:	e7dc      	b.n	800f2de <DrawElement+0x3a>
	}
}
 800f324:	b003      	add	sp, #12
 800f326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32a:	bf00      	nop
 800f32c:	200007db 	.word	0x200007db
 800f330:	20001adc 	.word	0x20001adc

0800f334 <VLine>:
	VLine(299, 54, 9, 0x000000FF);
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
}

void VLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
{
 800f334:	b570      	push	{r4, r5, r6, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	4616      	mov	r6, r2
 800f33a:	461d      	mov	r5, r3
	uint32_t Xaddress = 0;
    /* Get the line address */
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 800f33c:	4b17      	ldr	r3, [pc, #92]	; (800f39c <VLine+0x68>)
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	4a17      	ldr	r2, [pc, #92]	; (800f3a0 <VLine+0x6c>)
 800f342:	2434      	movs	r4, #52	; 0x34
 800f344:	fb04 2303 	mla	r3, r4, r3, r2
 800f348:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800f34a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f34c:	fb03 0101 	mla	r1, r3, r1, r0
 800f350:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    /* Write line */
    hdma2d.Init.Mode = DMA2D_R2M;
 800f354:	4813      	ldr	r0, [pc, #76]	; (800f3a4 <VLine+0x70>)
 800f356:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f35a:	6042      	str	r2, [r0, #4]
    /* RGB565 format */
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 800f35c:	2202      	movs	r2, #2
 800f35e:	6082      	str	r2, [r0, #8]
    hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - 1;
 800f360:	3b01      	subs	r3, #1
 800f362:	60c3      	str	r3, [r0, #12]
    hdma2d.Instance = DMA2D;
 800f364:	4b10      	ldr	r3, [pc, #64]	; (800f3a8 <VLine+0x74>)
 800f366:	6003      	str	r3, [r0, #0]
    /* DMA2D Initialization */
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 800f368:	f7f2 fc2c 	bl	8001bc4 <HAL_DMA2D_Init>
 800f36c:	b108      	cbz	r0, 800f372 <VLine+0x3e>
    			/* Polling For DMA transfer */
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
    		}
    	}
    }
}
 800f36e:	b002      	add	sp, #8
 800f370:	bd70      	pop	{r4, r5, r6, pc}
    	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 800f372:	4b0a      	ldr	r3, [pc, #40]	; (800f39c <VLine+0x68>)
 800f374:	7819      	ldrb	r1, [r3, #0]
 800f376:	480b      	ldr	r0, [pc, #44]	; (800f3a4 <VLine+0x70>)
 800f378:	f7f2 fd5c 	bl	8001e34 <HAL_DMA2D_ConfigLayer>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d1f6      	bne.n	800f36e <VLine+0x3a>
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 800f380:	9600      	str	r6, [sp, #0]
 800f382:	2301      	movs	r3, #1
 800f384:	4622      	mov	r2, r4
 800f386:	4629      	mov	r1, r5
 800f388:	4806      	ldr	r0, [pc, #24]	; (800f3a4 <VLine+0x70>)
 800f38a:	f7f2 fc7b 	bl	8001c84 <HAL_DMA2D_Start>
 800f38e:	2800      	cmp	r0, #0
 800f390:	d1ed      	bne.n	800f36e <VLine+0x3a>
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800f392:	210a      	movs	r1, #10
 800f394:	4803      	ldr	r0, [pc, #12]	; (800f3a4 <VLine+0x70>)
 800f396:	f7f2 fcad 	bl	8001cf4 <HAL_DMA2D_PollForTransfer>
}
 800f39a:	e7e8      	b.n	800f36e <VLine+0x3a>
 800f39c:	200007db 	.word	0x200007db
 800f3a0:	20001adc 	.word	0x20001adc
 800f3a4:	20001574 	.word	0x20001574
 800f3a8:	4002b000 	.word	0x4002b000

0800f3ac <HLine>:

void HLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
{
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	4615      	mov	r5, r2
 800f3b2:	461c      	mov	r4, r3
	uint32_t Xaddress = 0;
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 800f3b4:	4b18      	ldr	r3, [pc, #96]	; (800f418 <HLine+0x6c>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	4a18      	ldr	r2, [pc, #96]	; (800f41c <HLine+0x70>)
 800f3ba:	2634      	movs	r6, #52	; 0x34
 800f3bc:	fb06 2303 	mla	r3, r6, r3, r2
 800f3c0:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 800f3c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3c4:	fb03 0101 	mla	r1, r3, r1, r0
 800f3c8:	eb06 0641 	add.w	r6, r6, r1, lsl #1
	/* Write line */
	hdma2d.Init.Mode = DMA2D_R2M;
 800f3cc:	4814      	ldr	r0, [pc, #80]	; (800f420 <HLine+0x74>)
 800f3ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f3d2:	6042      	str	r2, [r0, #4]
	/* RGB565 format */
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 800f3d4:	2202      	movs	r2, #2
 800f3d6:	6082      	str	r2, [r0, #8]
	hdma2d.Init.OutputOffset = 0;
 800f3d8:	2200      	movs	r2, #0
 800f3da:	60c2      	str	r2, [r0, #12]
	hdma2d.Instance = DMA2D;
 800f3dc:	4a11      	ldr	r2, [pc, #68]	; (800f424 <HLine+0x78>)
 800f3de:	6002      	str	r2, [r0, #0]
	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 800f3e0:	f7f2 fbf0 	bl	8001bc4 <HAL_DMA2D_Init>
 800f3e4:	b108      	cbz	r0, 800f3ea <HLine+0x3e>
	   			/* Polling For DMA transfer */
	   			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
	   		}
	   	}
	}
}
 800f3e6:	b002      	add	sp, #8
 800f3e8:	bd70      	pop	{r4, r5, r6, pc}
	 	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 800f3ea:	4b0b      	ldr	r3, [pc, #44]	; (800f418 <HLine+0x6c>)
 800f3ec:	7819      	ldrb	r1, [r3, #0]
 800f3ee:	480c      	ldr	r0, [pc, #48]	; (800f420 <HLine+0x74>)
 800f3f0:	f7f2 fd20 	bl	8001e34 <HAL_DMA2D_ConfigLayer>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d1f6      	bne.n	800f3e6 <HLine+0x3a>
	   		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, Length, 1) == HAL_OK) {
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	462b      	mov	r3, r5
 800f3fe:	4632      	mov	r2, r6
 800f400:	4621      	mov	r1, r4
 800f402:	4807      	ldr	r0, [pc, #28]	; (800f420 <HLine+0x74>)
 800f404:	f7f2 fc3e 	bl	8001c84 <HAL_DMA2D_Start>
 800f408:	2800      	cmp	r0, #0
 800f40a:	d1ec      	bne.n	800f3e6 <HLine+0x3a>
	   			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800f40c:	210a      	movs	r1, #10
 800f40e:	4804      	ldr	r0, [pc, #16]	; (800f420 <HLine+0x74>)
 800f410:	f7f2 fc70 	bl	8001cf4 <HAL_DMA2D_PollForTransfer>
}
 800f414:	e7e7      	b.n	800f3e6 <HLine+0x3a>
 800f416:	bf00      	nop
 800f418:	200007db 	.word	0x200007db
 800f41c:	20001adc 	.word	0x20001adc
 800f420:	20001574 	.word	0x20001574
 800f424:	4002b000 	.word	0x4002b000

0800f428 <Rectangle>:

void Rectangle(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint32_t color)
{
 800f428:	b570      	push	{r4, r5, r6, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	4615      	mov	r5, r2
 800f42e:	461e      	mov	r6, r3
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 800f430:	4b10      	ldr	r3, [pc, #64]	; (800f474 <Rectangle+0x4c>)
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	4a10      	ldr	r2, [pc, #64]	; (800f478 <Rectangle+0x50>)
 800f436:	2434      	movs	r4, #52	; 0x34
 800f438:	fb04 2303 	mla	r3, r4, r3, r2
 800f43c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800f43e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f440:	fb03 0001 	mla	r0, r3, r1, r0
 800f444:	eb04 0440 	add.w	r4, r4, r0, lsl #1
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 800f448:	1b5b      	subs	r3, r3, r5
 800f44a:	480c      	ldr	r0, [pc, #48]	; (800f47c <Rectangle+0x54>)
 800f44c:	60c3      	str	r3, [r0, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 800f44e:	f7f2 fbb9 	bl	8001bc4 <HAL_DMA2D_Init>
 800f452:	b108      	cbz	r0, 800f458 <Rectangle+0x30>
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
		}
	}

}
 800f454:	b002      	add	sp, #8
 800f456:	bd70      	pop	{r4, r5, r6, pc}
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 800f458:	9600      	str	r6, [sp, #0]
 800f45a:	462b      	mov	r3, r5
 800f45c:	4622      	mov	r2, r4
 800f45e:	9906      	ldr	r1, [sp, #24]
 800f460:	4806      	ldr	r0, [pc, #24]	; (800f47c <Rectangle+0x54>)
 800f462:	f7f2 fc0f 	bl	8001c84 <HAL_DMA2D_Start>
 800f466:	2800      	cmp	r0, #0
 800f468:	d1f4      	bne.n	800f454 <Rectangle+0x2c>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 800f46a:	2164      	movs	r1, #100	; 0x64
 800f46c:	4803      	ldr	r0, [pc, #12]	; (800f47c <Rectangle+0x54>)
 800f46e:	f7f2 fc41 	bl	8001cf4 <HAL_DMA2D_PollForTransfer>
}
 800f472:	e7ef      	b.n	800f454 <Rectangle+0x2c>
 800f474:	200007db 	.word	0x200007db
 800f478:	20001adc 	.word	0x20001adc
 800f47c:	20001574 	.word	0x20001574

0800f480 <Pixel>:

void Pixel(uint16_t Xpos, uint16_t Ypos, uint32_t color)
{
 800f480:	b538      	push	{r3, r4, r5, lr}
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 800f482:	4b08      	ldr	r3, [pc, #32]	; (800f4a4 <Pixel+0x24>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	4c08      	ldr	r4, [pc, #32]	; (800f4a8 <Pixel+0x28>)
 800f488:	2534      	movs	r5, #52	; 0x34
 800f48a:	fb05 4303 	mla	r3, r5, r3, r4
 800f48e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800f490:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800f492:	fb04 0401 	mla	r4, r4, r1, r0
 800f496:	4610      	mov	r0, r2
 800f498:	f7ff fe10 	bl	800f0bc <Color_Convertion>
 800f49c:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
}
 800f4a0:	bd38      	pop	{r3, r4, r5, pc}
 800f4a2:	bf00      	nop
 800f4a4:	200007db 	.word	0x200007db
 800f4a8:	20001adc 	.word	0x20001adc

0800f4ac <DrawDigit>:

void DrawDigit(uint8_t digit, uint16_t Xpos, uint16_t Ypos, uint8_t width, uint32_t color)
{
 800f4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b0:	b085      	sub	sp, #20
 800f4b2:	460e      	mov	r6, r1
 800f4b4:	4615      	mov	r5, r2
	switch(digit) {
 800f4b6:	2809      	cmp	r0, #9
 800f4b8:	d87a      	bhi.n	800f5b0 <DrawDigit+0x104>
 800f4ba:	e8df f010 	tbh	[pc, r0, lsl #1]
 800f4be:	000a      	.short	0x000a
 800f4c0:	00a9007c 	.word	0x00a9007c
 800f4c4:	016e010b 	.word	0x016e010b
 800f4c8:	022201c0 	.word	0x022201c0
 800f4cc:	02d20294 	.word	0x02d20294
 800f4d0:	0354      	.short	0x0354
	case 0: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 800f4d2:	f101 0901 	add.w	r9, r1, #1
 800f4d6:	fa1f f989 	uxth.w	r9, r9
 800f4da:	b29c      	uxth	r4, r3
 800f4dc:	f1a4 0802 	sub.w	r8, r4, #2
 800f4e0:	fa1f f888 	uxth.w	r8, r8
 800f4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4e6:	4642      	mov	r2, r8
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	4648      	mov	r0, r9
 800f4ec:	f7ff ff5e 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 800f4f0:	1cb3      	adds	r3, r6, #2
 800f4f2:	b298      	uxth	r0, r3
 800f4f4:	1c6b      	adds	r3, r5, #1
 800f4f6:	b299      	uxth	r1, r3
 800f4f8:	1f27      	subs	r7, r4, #4
 800f4fa:	b2bf      	uxth	r7, r7
 800f4fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4fe:	463a      	mov	r2, r7
 800f500:	468a      	mov	sl, r1
 800f502:	9001      	str	r0, [sp, #4]
 800f504:	f7ff ff52 	bl	800f3ac <HLine>
		// f
		VLine(Xpos, Ypos + 1, width - 2, color);
 800f508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f50a:	4642      	mov	r2, r8
 800f50c:	f8cd a008 	str.w	sl, [sp, #8]
 800f510:	4651      	mov	r1, sl
 800f512:	4630      	mov	r0, r6
 800f514:	f7ff ff0e 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 800f518:	1cab      	adds	r3, r5, #2
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	4619      	mov	r1, r3
 800f51e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f520:	463a      	mov	r2, r7
 800f522:	9103      	str	r1, [sp, #12]
 800f524:	4648      	mov	r0, r9
 800f526:	f7ff ff05 	bl	800f334 <VLine>
		// e
		VLine(Xpos, Ypos + width, width - 2, color);
 800f52a:	eb04 0a05 	add.w	sl, r4, r5
 800f52e:	fa1f fa8a 	uxth.w	sl, sl
 800f532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f534:	4642      	mov	r2, r8
 800f536:	4651      	mov	r1, sl
 800f538:	4630      	mov	r0, r6
 800f53a:	f7ff fefb 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 800f53e:	f10a 0b01 	add.w	fp, sl, #1
 800f542:	fa1f fb8b 	uxth.w	fp, fp
 800f546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f548:	463a      	mov	r2, r7
 800f54a:	4659      	mov	r1, fp
 800f54c:	4648      	mov	r0, r9
 800f54e:	f7ff fef1 	bl	800f334 <VLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 800f552:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 800f556:	b2ad      	uxth	r5, r5
 800f558:	1ea9      	subs	r1, r5, #2
 800f55a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f55c:	4642      	mov	r2, r8
 800f55e:	b289      	uxth	r1, r1
 800f560:	4648      	mov	r0, r9
 800f562:	f7ff ff23 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 800f566:	3d03      	subs	r5, #3
 800f568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f56a:	463a      	mov	r2, r7
 800f56c:	b2a9      	uxth	r1, r5
 800f56e:	9801      	ldr	r0, [sp, #4]
 800f570:	f7ff ff1c 	bl	800f3ac <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 800f574:	4434      	add	r4, r6
 800f576:	b2a4      	uxth	r4, r4
 800f578:	1e65      	subs	r5, r4, #1
 800f57a:	b2ad      	uxth	r5, r5
 800f57c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f57e:	4642      	mov	r2, r8
 800f580:	4651      	mov	r1, sl
 800f582:	4628      	mov	r0, r5
 800f584:	f7ff fed6 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 800f588:	3c02      	subs	r4, #2
 800f58a:	b2a4      	uxth	r4, r4
 800f58c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f58e:	463a      	mov	r2, r7
 800f590:	4659      	mov	r1, fp
 800f592:	4620      	mov	r0, r4
 800f594:	f7ff fece 	bl	800f334 <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 800f598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f59a:	4642      	mov	r2, r8
 800f59c:	9902      	ldr	r1, [sp, #8]
 800f59e:	4628      	mov	r0, r5
 800f5a0:	f7ff fec8 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 800f5a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5a6:	463a      	mov	r2, r7
 800f5a8:	9903      	ldr	r1, [sp, #12]
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f7ff fec2 	bl	800f334 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
		break;
	}
	}
}
 800f5b0:	b005      	add	sp, #20
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 800f5b6:	b29c      	uxth	r4, r3
 800f5b8:	4426      	add	r6, r4
 800f5ba:	b2b6      	uxth	r6, r6
 800f5bc:	f106 38ff 	add.w	r8, r6, #4294967295
 800f5c0:	fa1f f888 	uxth.w	r8, r8
 800f5c4:	1967      	adds	r7, r4, r5
 800f5c6:	b2bf      	uxth	r7, r7
 800f5c8:	f1a4 0902 	sub.w	r9, r4, #2
 800f5cc:	fa1f f989 	uxth.w	r9, r9
 800f5d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5d2:	464a      	mov	r2, r9
 800f5d4:	4639      	mov	r1, r7
 800f5d6:	4640      	mov	r0, r8
 800f5d8:	f7ff feac 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 800f5dc:	3e02      	subs	r6, #2
 800f5de:	b2b6      	uxth	r6, r6
 800f5e0:	3c04      	subs	r4, #4
 800f5e2:	b2a4      	uxth	r4, r4
 800f5e4:	1c79      	adds	r1, r7, #1
 800f5e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5e8:	4622      	mov	r2, r4
 800f5ea:	b289      	uxth	r1, r1
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	f7ff fea1 	bl	800f334 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 800f5f2:	1c69      	adds	r1, r5, #1
 800f5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5f6:	464a      	mov	r2, r9
 800f5f8:	b289      	uxth	r1, r1
 800f5fa:	4640      	mov	r0, r8
 800f5fc:	f7ff fe9a 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 800f600:	1ca9      	adds	r1, r5, #2
 800f602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f604:	4622      	mov	r2, r4
 800f606:	b289      	uxth	r1, r1
 800f608:	4630      	mov	r0, r6
 800f60a:	f7ff fe93 	bl	800f334 <VLine>
		break;
 800f60e:	e7cf      	b.n	800f5b0 <DrawDigit+0x104>
		HLine(Xpos + 1, Ypos, width - 2, color);
 800f610:	f101 0a01 	add.w	sl, r1, #1
 800f614:	fa1f fa8a 	uxth.w	sl, sl
 800f618:	b29c      	uxth	r4, r3
 800f61a:	f1a4 0902 	sub.w	r9, r4, #2
 800f61e:	fa1f f989 	uxth.w	r9, r9
 800f622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f624:	464a      	mov	r2, r9
 800f626:	4629      	mov	r1, r5
 800f628:	4650      	mov	r0, sl
 800f62a:	f7ff febf 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 800f62e:	1cb3      	adds	r3, r6, #2
 800f630:	b298      	uxth	r0, r3
 800f632:	1c6b      	adds	r3, r5, #1
 800f634:	b299      	uxth	r1, r3
 800f636:	f1a4 0804 	sub.w	r8, r4, #4
 800f63a:	fa1f f888 	uxth.w	r8, r8
 800f63e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f640:	4642      	mov	r2, r8
 800f642:	9102      	str	r1, [sp, #8]
 800f644:	9001      	str	r0, [sp, #4]
 800f646:	f7ff feb1 	bl	800f3ac <HLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 800f64a:	1967      	adds	r7, r4, r5
 800f64c:	b2bf      	uxth	r7, r7
 800f64e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f650:	464a      	mov	r2, r9
 800f652:	4639      	mov	r1, r7
 800f654:	4630      	mov	r0, r6
 800f656:	f7ff fe6d 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 800f65a:	1c79      	adds	r1, r7, #1
 800f65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f65e:	4642      	mov	r2, r8
 800f660:	b289      	uxth	r1, r1
 800f662:	4650      	mov	r0, sl
 800f664:	f7ff fe66 	bl	800f334 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 800f668:	eb05 0b44 	add.w	fp, r5, r4, lsl #1
 800f66c:	fa1f fb8b 	uxth.w	fp, fp
 800f670:	f1ab 0102 	sub.w	r1, fp, #2
 800f674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f676:	464a      	mov	r2, r9
 800f678:	b289      	uxth	r1, r1
 800f67a:	4650      	mov	r0, sl
 800f67c:	f7ff fe96 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 800f680:	f1ab 0103 	sub.w	r1, fp, #3
 800f684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f686:	4642      	mov	r2, r8
 800f688:	b289      	uxth	r1, r1
 800f68a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800f68e:	4658      	mov	r0, fp
 800f690:	f7ff fe8c 	bl	800f3ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 800f694:	1e79      	subs	r1, r7, #1
 800f696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f698:	464a      	mov	r2, r9
 800f69a:	b289      	uxth	r1, r1
 800f69c:	4650      	mov	r0, sl
 800f69e:	f7ff fe85 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 800f6a2:	1eb9      	subs	r1, r7, #2
 800f6a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6a6:	4642      	mov	r2, r8
 800f6a8:	b289      	uxth	r1, r1
 800f6aa:	4658      	mov	r0, fp
 800f6ac:	f7ff fe7e 	bl	800f3ac <HLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 800f6b0:	4434      	add	r4, r6
 800f6b2:	b2a4      	uxth	r4, r4
 800f6b4:	1e60      	subs	r0, r4, #1
 800f6b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6b8:	464a      	mov	r2, r9
 800f6ba:	9902      	ldr	r1, [sp, #8]
 800f6bc:	b280      	uxth	r0, r0
 800f6be:	f7ff fe39 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 800f6c2:	1ca9      	adds	r1, r5, #2
 800f6c4:	3c02      	subs	r4, #2
 800f6c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6c8:	4642      	mov	r2, r8
 800f6ca:	b289      	uxth	r1, r1
 800f6cc:	b2a0      	uxth	r0, r4
 800f6ce:	f7ff fe31 	bl	800f334 <VLine>
		break;
 800f6d2:	e76d      	b.n	800f5b0 <DrawDigit+0x104>
		HLine(Xpos + 1, Ypos, width - 2, color);
 800f6d4:	f101 0b01 	add.w	fp, r1, #1
 800f6d8:	fa1f fb8b 	uxth.w	fp, fp
 800f6dc:	b29c      	uxth	r4, r3
 800f6de:	f1a4 0902 	sub.w	r9, r4, #2
 800f6e2:	fa1f f989 	uxth.w	r9, r9
 800f6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6e8:	464a      	mov	r2, r9
 800f6ea:	4629      	mov	r1, r5
 800f6ec:	4658      	mov	r0, fp
 800f6ee:	f7ff fe5d 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 800f6f2:	f106 0a02 	add.w	sl, r6, #2
 800f6f6:	fa1f fa8a 	uxth.w	sl, sl
 800f6fa:	1c6b      	adds	r3, r5, #1
 800f6fc:	b299      	uxth	r1, r3
 800f6fe:	f1a4 0804 	sub.w	r8, r4, #4
 800f702:	fa1f f888 	uxth.w	r8, r8
 800f706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f708:	4642      	mov	r2, r8
 800f70a:	9101      	str	r1, [sp, #4]
 800f70c:	4650      	mov	r0, sl
 800f70e:	f7ff fe4d 	bl	800f3ac <HLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 800f712:	eb05 0744 	add.w	r7, r5, r4, lsl #1
 800f716:	b2bf      	uxth	r7, r7
 800f718:	1eb9      	subs	r1, r7, #2
 800f71a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f71c:	464a      	mov	r2, r9
 800f71e:	b289      	uxth	r1, r1
 800f720:	4658      	mov	r0, fp
 800f722:	f7ff fe43 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 800f726:	1ef9      	subs	r1, r7, #3
 800f728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f72a:	4642      	mov	r2, r8
 800f72c:	b289      	uxth	r1, r1
 800f72e:	4650      	mov	r0, sl
 800f730:	f7ff fe3c 	bl	800f3ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 800f734:	1967      	adds	r7, r4, r5
 800f736:	b2bf      	uxth	r7, r7
 800f738:	1e79      	subs	r1, r7, #1
 800f73a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f73c:	464a      	mov	r2, r9
 800f73e:	b289      	uxth	r1, r1
 800f740:	4658      	mov	r0, fp
 800f742:	f7ff fe33 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 800f746:	1eb9      	subs	r1, r7, #2
 800f748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f74a:	4642      	mov	r2, r8
 800f74c:	b289      	uxth	r1, r1
 800f74e:	4650      	mov	r0, sl
 800f750:	f7ff fe2c 	bl	800f3ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 800f754:	4434      	add	r4, r6
 800f756:	b2a4      	uxth	r4, r4
 800f758:	f104 3aff 	add.w	sl, r4, #4294967295
 800f75c:	fa1f fa8a 	uxth.w	sl, sl
 800f760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f762:	464a      	mov	r2, r9
 800f764:	4639      	mov	r1, r7
 800f766:	4650      	mov	r0, sl
 800f768:	f7ff fde4 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 800f76c:	3c02      	subs	r4, #2
 800f76e:	b2a4      	uxth	r4, r4
 800f770:	1c79      	adds	r1, r7, #1
 800f772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f774:	4642      	mov	r2, r8
 800f776:	b289      	uxth	r1, r1
 800f778:	4620      	mov	r0, r4
 800f77a:	f7ff fddb 	bl	800f334 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 800f77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f780:	464a      	mov	r2, r9
 800f782:	9901      	ldr	r1, [sp, #4]
 800f784:	4650      	mov	r0, sl
 800f786:	f7ff fdd5 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 800f78a:	1ca9      	adds	r1, r5, #2
 800f78c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f78e:	4642      	mov	r2, r8
 800f790:	b289      	uxth	r1, r1
 800f792:	4620      	mov	r0, r4
 800f794:	f7ff fdce 	bl	800f334 <VLine>
		break;
 800f798:	e70a      	b.n	800f5b0 <DrawDigit+0x104>
		VLine(Xpos, Ypos + 1, width - 2, color);
 800f79a:	f105 0a01 	add.w	sl, r5, #1
 800f79e:	fa1f fa8a 	uxth.w	sl, sl
 800f7a2:	b29c      	uxth	r4, r3
 800f7a4:	f1a4 0802 	sub.w	r8, r4, #2
 800f7a8:	fa1f f888 	uxth.w	r8, r8
 800f7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7ae:	4642      	mov	r2, r8
 800f7b0:	4651      	mov	r1, sl
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f7ff fdbe 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 800f7b8:	f106 0b01 	add.w	fp, r6, #1
 800f7bc:	fa1f fb8b 	uxth.w	fp, fp
 800f7c0:	f105 0902 	add.w	r9, r5, #2
 800f7c4:	fa1f f989 	uxth.w	r9, r9
 800f7c8:	1f27      	subs	r7, r4, #4
 800f7ca:	b2bf      	uxth	r7, r7
 800f7cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7ce:	463a      	mov	r2, r7
 800f7d0:	4649      	mov	r1, r9
 800f7d2:	4658      	mov	r0, fp
 800f7d4:	f7ff fdae 	bl	800f334 <VLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 800f7d8:	4425      	add	r5, r4
 800f7da:	b2ad      	uxth	r5, r5
 800f7dc:	1e69      	subs	r1, r5, #1
 800f7de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7e0:	4642      	mov	r2, r8
 800f7e2:	b289      	uxth	r1, r1
 800f7e4:	4658      	mov	r0, fp
 800f7e6:	f7ff fde1 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 800f7ea:	1ea9      	subs	r1, r5, #2
 800f7ec:	1cb0      	adds	r0, r6, #2
 800f7ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7f0:	463a      	mov	r2, r7
 800f7f2:	b289      	uxth	r1, r1
 800f7f4:	b280      	uxth	r0, r0
 800f7f6:	f7ff fdd9 	bl	800f3ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 800f7fa:	4434      	add	r4, r6
 800f7fc:	b2a4      	uxth	r4, r4
 800f7fe:	f104 3bff 	add.w	fp, r4, #4294967295
 800f802:	fa1f fb8b 	uxth.w	fp, fp
 800f806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f808:	4642      	mov	r2, r8
 800f80a:	4629      	mov	r1, r5
 800f80c:	4658      	mov	r0, fp
 800f80e:	f7ff fd91 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 800f812:	3c02      	subs	r4, #2
 800f814:	b2a4      	uxth	r4, r4
 800f816:	3501      	adds	r5, #1
 800f818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f81a:	463a      	mov	r2, r7
 800f81c:	b2a9      	uxth	r1, r5
 800f81e:	4620      	mov	r0, r4
 800f820:	f7ff fd88 	bl	800f334 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 800f824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f826:	4642      	mov	r2, r8
 800f828:	4651      	mov	r1, sl
 800f82a:	4658      	mov	r0, fp
 800f82c:	f7ff fd82 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 800f830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f832:	463a      	mov	r2, r7
 800f834:	4649      	mov	r1, r9
 800f836:	4620      	mov	r0, r4
 800f838:	f7ff fd7c 	bl	800f334 <VLine>
		break;
 800f83c:	e6b8      	b.n	800f5b0 <DrawDigit+0x104>
		HLine(Xpos + 1, Ypos, width - 2, color);
 800f83e:	f101 0901 	add.w	r9, r1, #1
 800f842:	fa1f f989 	uxth.w	r9, r9
 800f846:	b29c      	uxth	r4, r3
 800f848:	f1a4 0802 	sub.w	r8, r4, #2
 800f84c:	fa1f f888 	uxth.w	r8, r8
 800f850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f852:	4642      	mov	r2, r8
 800f854:	4629      	mov	r1, r5
 800f856:	4648      	mov	r0, r9
 800f858:	f7ff fda8 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 800f85c:	f106 0a02 	add.w	sl, r6, #2
 800f860:	fa1f fa8a 	uxth.w	sl, sl
 800f864:	f105 0b01 	add.w	fp, r5, #1
 800f868:	fa1f fb8b 	uxth.w	fp, fp
 800f86c:	1f27      	subs	r7, r4, #4
 800f86e:	b2bf      	uxth	r7, r7
 800f870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f872:	463a      	mov	r2, r7
 800f874:	4659      	mov	r1, fp
 800f876:	4650      	mov	r0, sl
 800f878:	f7ff fd98 	bl	800f3ac <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 800f87c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f87e:	4642      	mov	r2, r8
 800f880:	4659      	mov	r1, fp
 800f882:	4630      	mov	r0, r6
 800f884:	f7ff fd56 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 800f888:	1ca9      	adds	r1, r5, #2
 800f88a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f88c:	463a      	mov	r2, r7
 800f88e:	b289      	uxth	r1, r1
 800f890:	4648      	mov	r0, r9
 800f892:	f7ff fd4f 	bl	800f334 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 800f896:	eb05 0b44 	add.w	fp, r5, r4, lsl #1
 800f89a:	fa1f fb8b 	uxth.w	fp, fp
 800f89e:	f1ab 0102 	sub.w	r1, fp, #2
 800f8a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8a4:	4642      	mov	r2, r8
 800f8a6:	b289      	uxth	r1, r1
 800f8a8:	4648      	mov	r0, r9
 800f8aa:	f7ff fd7f 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 800f8ae:	f1ab 0103 	sub.w	r1, fp, #3
 800f8b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8b4:	463a      	mov	r2, r7
 800f8b6:	b289      	uxth	r1, r1
 800f8b8:	4650      	mov	r0, sl
 800f8ba:	f7ff fd77 	bl	800f3ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 800f8be:	1961      	adds	r1, r4, r5
 800f8c0:	b28d      	uxth	r5, r1
 800f8c2:	1e69      	subs	r1, r5, #1
 800f8c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8c6:	4642      	mov	r2, r8
 800f8c8:	b289      	uxth	r1, r1
 800f8ca:	4648      	mov	r0, r9
 800f8cc:	f7ff fd6e 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 800f8d0:	1ea9      	subs	r1, r5, #2
 800f8d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8d4:	463a      	mov	r2, r7
 800f8d6:	b289      	uxth	r1, r1
 800f8d8:	4650      	mov	r0, sl
 800f8da:	f7ff fd67 	bl	800f3ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 800f8de:	4434      	add	r4, r6
 800f8e0:	b2a4      	uxth	r4, r4
 800f8e2:	1e60      	subs	r0, r4, #1
 800f8e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8e6:	4642      	mov	r2, r8
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	b280      	uxth	r0, r0
 800f8ec:	f7ff fd22 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 800f8f0:	1c69      	adds	r1, r5, #1
 800f8f2:	3c02      	subs	r4, #2
 800f8f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8f6:	463a      	mov	r2, r7
 800f8f8:	b289      	uxth	r1, r1
 800f8fa:	b2a0      	uxth	r0, r4
 800f8fc:	f7ff fd1a 	bl	800f334 <VLine>
		break;
 800f900:	e656      	b.n	800f5b0 <DrawDigit+0x104>
		HLine(Xpos + 1, Ypos, width - 2, color);
 800f902:	f101 0a01 	add.w	sl, r1, #1
 800f906:	fa1f fa8a 	uxth.w	sl, sl
 800f90a:	b29c      	uxth	r4, r3
 800f90c:	f1a4 0802 	sub.w	r8, r4, #2
 800f910:	fa1f f888 	uxth.w	r8, r8
 800f914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f916:	4642      	mov	r2, r8
 800f918:	4629      	mov	r1, r5
 800f91a:	4650      	mov	r0, sl
 800f91c:	f7ff fd46 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 800f920:	f106 0b02 	add.w	fp, r6, #2
 800f924:	fa1f fb8b 	uxth.w	fp, fp
 800f928:	f105 0901 	add.w	r9, r5, #1
 800f92c:	fa1f f989 	uxth.w	r9, r9
 800f930:	1f27      	subs	r7, r4, #4
 800f932:	b2bf      	uxth	r7, r7
 800f934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f936:	463a      	mov	r2, r7
 800f938:	4649      	mov	r1, r9
 800f93a:	4658      	mov	r0, fp
 800f93c:	f7ff fd36 	bl	800f3ac <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 800f940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f942:	4642      	mov	r2, r8
 800f944:	4649      	mov	r1, r9
 800f946:	4630      	mov	r0, r6
 800f948:	f7ff fcf4 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 800f94c:	1ca9      	adds	r1, r5, #2
 800f94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f950:	463a      	mov	r2, r7
 800f952:	b289      	uxth	r1, r1
 800f954:	4650      	mov	r0, sl
 800f956:	f7ff fced 	bl	800f334 <VLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 800f95a:	eb04 0905 	add.w	r9, r4, r5
 800f95e:	fa1f f989 	uxth.w	r9, r9
 800f962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f964:	4642      	mov	r2, r8
 800f966:	4649      	mov	r1, r9
 800f968:	4630      	mov	r0, r6
 800f96a:	f7ff fce3 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 800f96e:	f109 0301 	add.w	r3, r9, #1
 800f972:	b29b      	uxth	r3, r3
 800f974:	4619      	mov	r1, r3
 800f976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f978:	463a      	mov	r2, r7
 800f97a:	9101      	str	r1, [sp, #4]
 800f97c:	4650      	mov	r0, sl
 800f97e:	f7ff fcd9 	bl	800f334 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 800f982:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 800f986:	b2ad      	uxth	r5, r5
 800f988:	1ea9      	subs	r1, r5, #2
 800f98a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f98c:	4642      	mov	r2, r8
 800f98e:	b289      	uxth	r1, r1
 800f990:	4650      	mov	r0, sl
 800f992:	f7ff fd0b 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 800f996:	3d03      	subs	r5, #3
 800f998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f99a:	463a      	mov	r2, r7
 800f99c:	b2a9      	uxth	r1, r5
 800f99e:	4658      	mov	r0, fp
 800f9a0:	f7ff fd04 	bl	800f3ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 800f9a4:	f109 31ff 	add.w	r1, r9, #4294967295
 800f9a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9aa:	4642      	mov	r2, r8
 800f9ac:	b289      	uxth	r1, r1
 800f9ae:	4650      	mov	r0, sl
 800f9b0:	f7ff fcfc 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 800f9b4:	f1a9 0102 	sub.w	r1, r9, #2
 800f9b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9ba:	463a      	mov	r2, r7
 800f9bc:	b289      	uxth	r1, r1
 800f9be:	4658      	mov	r0, fp
 800f9c0:	f7ff fcf4 	bl	800f3ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 800f9c4:	4434      	add	r4, r6
 800f9c6:	b2a4      	uxth	r4, r4
 800f9c8:	1e60      	subs	r0, r4, #1
 800f9ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9cc:	4642      	mov	r2, r8
 800f9ce:	4649      	mov	r1, r9
 800f9d0:	b280      	uxth	r0, r0
 800f9d2:	f7ff fcaf 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 800f9d6:	3c02      	subs	r4, #2
 800f9d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9da:	463a      	mov	r2, r7
 800f9dc:	9901      	ldr	r1, [sp, #4]
 800f9de:	b2a0      	uxth	r0, r4
 800f9e0:	f7ff fca8 	bl	800f334 <VLine>
		break;
 800f9e4:	e5e4      	b.n	800f5b0 <DrawDigit+0x104>
		HLine(Xpos + 1, Ypos, width - 2, color);
 800f9e6:	b29c      	uxth	r4, r3
 800f9e8:	f1a4 0802 	sub.w	r8, r4, #2
 800f9ec:	fa1f f888 	uxth.w	r8, r8
 800f9f0:	1c48      	adds	r0, r1, #1
 800f9f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9f4:	4642      	mov	r2, r8
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	b280      	uxth	r0, r0
 800f9fa:	f7ff fcd7 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 800f9fe:	f105 0901 	add.w	r9, r5, #1
 800fa02:	fa1f f989 	uxth.w	r9, r9
 800fa06:	1f27      	subs	r7, r4, #4
 800fa08:	b2bf      	uxth	r7, r7
 800fa0a:	1cb0      	adds	r0, r6, #2
 800fa0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa0e:	463a      	mov	r2, r7
 800fa10:	4649      	mov	r1, r9
 800fa12:	b280      	uxth	r0, r0
 800fa14:	f7ff fcca 	bl	800f3ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 800fa18:	4426      	add	r6, r4
 800fa1a:	b2b6      	uxth	r6, r6
 800fa1c:	f106 3aff 	add.w	sl, r6, #4294967295
 800fa20:	fa1f fa8a 	uxth.w	sl, sl
 800fa24:	442c      	add	r4, r5
 800fa26:	b2a4      	uxth	r4, r4
 800fa28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa2a:	4642      	mov	r2, r8
 800fa2c:	4621      	mov	r1, r4
 800fa2e:	4650      	mov	r0, sl
 800fa30:	f7ff fc80 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 800fa34:	3e02      	subs	r6, #2
 800fa36:	b2b6      	uxth	r6, r6
 800fa38:	3401      	adds	r4, #1
 800fa3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa3c:	463a      	mov	r2, r7
 800fa3e:	b2a1      	uxth	r1, r4
 800fa40:	4630      	mov	r0, r6
 800fa42:	f7ff fc77 	bl	800f334 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 800fa46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa48:	4642      	mov	r2, r8
 800fa4a:	4649      	mov	r1, r9
 800fa4c:	4650      	mov	r0, sl
 800fa4e:	f7ff fc71 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 800fa52:	1ca9      	adds	r1, r5, #2
 800fa54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa56:	463a      	mov	r2, r7
 800fa58:	b289      	uxth	r1, r1
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f7ff fc6a 	bl	800f334 <VLine>
		break;
 800fa60:	e5a6      	b.n	800f5b0 <DrawDigit+0x104>
		HLine(Xpos + 1, Ypos, width - 2, color);
 800fa62:	f101 0a01 	add.w	sl, r1, #1
 800fa66:	fa1f fa8a 	uxth.w	sl, sl
 800fa6a:	b29c      	uxth	r4, r3
 800fa6c:	f1a4 0802 	sub.w	r8, r4, #2
 800fa70:	fa1f f888 	uxth.w	r8, r8
 800fa74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa76:	4642      	mov	r2, r8
 800fa78:	4629      	mov	r1, r5
 800fa7a:	4650      	mov	r0, sl
 800fa7c:	f7ff fc96 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 800fa80:	1cb3      	adds	r3, r6, #2
 800fa82:	b298      	uxth	r0, r3
 800fa84:	1c6b      	adds	r3, r5, #1
 800fa86:	b299      	uxth	r1, r3
 800fa88:	1f27      	subs	r7, r4, #4
 800fa8a:	b2bf      	uxth	r7, r7
 800fa8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa8e:	463a      	mov	r2, r7
 800fa90:	4689      	mov	r9, r1
 800fa92:	9001      	str	r0, [sp, #4]
 800fa94:	f7ff fc8a 	bl	800f3ac <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 800fa98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa9a:	4642      	mov	r2, r8
 800fa9c:	f8cd 9008 	str.w	r9, [sp, #8]
 800faa0:	4649      	mov	r1, r9
 800faa2:	4630      	mov	r0, r6
 800faa4:	f7ff fc46 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 800faa8:	1cab      	adds	r3, r5, #2
 800faaa:	b29b      	uxth	r3, r3
 800faac:	4618      	mov	r0, r3
 800faae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fab0:	463a      	mov	r2, r7
 800fab2:	9003      	str	r0, [sp, #12]
 800fab4:	4601      	mov	r1, r0
 800fab6:	4650      	mov	r0, sl
 800fab8:	f7ff fc3c 	bl	800f334 <VLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 800fabc:	eb04 0905 	add.w	r9, r4, r5
 800fac0:	fa1f f989 	uxth.w	r9, r9
 800fac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fac6:	4642      	mov	r2, r8
 800fac8:	4649      	mov	r1, r9
 800faca:	4630      	mov	r0, r6
 800facc:	f7ff fc32 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 800fad0:	f109 0b01 	add.w	fp, r9, #1
 800fad4:	fa1f fb8b 	uxth.w	fp, fp
 800fad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fada:	463a      	mov	r2, r7
 800fadc:	4659      	mov	r1, fp
 800fade:	4650      	mov	r0, sl
 800fae0:	f7ff fc28 	bl	800f334 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 800fae4:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 800fae8:	b2ad      	uxth	r5, r5
 800faea:	1ea9      	subs	r1, r5, #2
 800faec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800faee:	4642      	mov	r2, r8
 800faf0:	b289      	uxth	r1, r1
 800faf2:	4650      	mov	r0, sl
 800faf4:	f7ff fc5a 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 800faf8:	3d03      	subs	r5, #3
 800fafa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fafc:	463a      	mov	r2, r7
 800fafe:	b2a9      	uxth	r1, r5
 800fb00:	9d01      	ldr	r5, [sp, #4]
 800fb02:	4628      	mov	r0, r5
 800fb04:	f7ff fc52 	bl	800f3ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 800fb08:	f109 31ff 	add.w	r1, r9, #4294967295
 800fb0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb0e:	4642      	mov	r2, r8
 800fb10:	b289      	uxth	r1, r1
 800fb12:	4650      	mov	r0, sl
 800fb14:	f7ff fc4a 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 800fb18:	f1a9 0102 	sub.w	r1, r9, #2
 800fb1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb1e:	463a      	mov	r2, r7
 800fb20:	b289      	uxth	r1, r1
 800fb22:	4628      	mov	r0, r5
 800fb24:	f7ff fc42 	bl	800f3ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 800fb28:	4434      	add	r4, r6
 800fb2a:	b2a4      	uxth	r4, r4
 800fb2c:	1e65      	subs	r5, r4, #1
 800fb2e:	b2ad      	uxth	r5, r5
 800fb30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb32:	4642      	mov	r2, r8
 800fb34:	4649      	mov	r1, r9
 800fb36:	4628      	mov	r0, r5
 800fb38:	f7ff fbfc 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 800fb3c:	3c02      	subs	r4, #2
 800fb3e:	b2a4      	uxth	r4, r4
 800fb40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb42:	463a      	mov	r2, r7
 800fb44:	4659      	mov	r1, fp
 800fb46:	4620      	mov	r0, r4
 800fb48:	f7ff fbf4 	bl	800f334 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 800fb4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb4e:	4642      	mov	r2, r8
 800fb50:	9902      	ldr	r1, [sp, #8]
 800fb52:	4628      	mov	r0, r5
 800fb54:	f7ff fbee 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 800fb58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb5a:	463a      	mov	r2, r7
 800fb5c:	9903      	ldr	r1, [sp, #12]
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f7ff fbe8 	bl	800f334 <VLine>
		break;
 800fb64:	e524      	b.n	800f5b0 <DrawDigit+0x104>
		HLine(Xpos + 1, Ypos, width - 2, color);
 800fb66:	f101 0901 	add.w	r9, r1, #1
 800fb6a:	fa1f f989 	uxth.w	r9, r9
 800fb6e:	b29c      	uxth	r4, r3
 800fb70:	f1a4 0802 	sub.w	r8, r4, #2
 800fb74:	fa1f f888 	uxth.w	r8, r8
 800fb78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb7a:	4642      	mov	r2, r8
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	4648      	mov	r0, r9
 800fb80:	f7ff fc14 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 800fb84:	f106 0b02 	add.w	fp, r6, #2
 800fb88:	fa1f fb8b 	uxth.w	fp, fp
 800fb8c:	1c6b      	adds	r3, r5, #1
 800fb8e:	b299      	uxth	r1, r3
 800fb90:	1f27      	subs	r7, r4, #4
 800fb92:	b2bf      	uxth	r7, r7
 800fb94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb96:	463a      	mov	r2, r7
 800fb98:	468a      	mov	sl, r1
 800fb9a:	4658      	mov	r0, fp
 800fb9c:	f7ff fc06 	bl	800f3ac <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 800fba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fba2:	4642      	mov	r2, r8
 800fba4:	f8cd a004 	str.w	sl, [sp, #4]
 800fba8:	4651      	mov	r1, sl
 800fbaa:	4630      	mov	r0, r6
 800fbac:	f7ff fbc2 	bl	800f334 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 800fbb0:	1cab      	adds	r3, r5, #2
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbb8:	463a      	mov	r2, r7
 800fbba:	9002      	str	r0, [sp, #8]
 800fbbc:	4601      	mov	r1, r0
 800fbbe:	4648      	mov	r0, r9
 800fbc0:	f7ff fbb8 	bl	800f334 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 800fbc4:	eb05 0a44 	add.w	sl, r5, r4, lsl #1
 800fbc8:	fa1f fa8a 	uxth.w	sl, sl
 800fbcc:	f1aa 0102 	sub.w	r1, sl, #2
 800fbd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbd2:	4642      	mov	r2, r8
 800fbd4:	b289      	uxth	r1, r1
 800fbd6:	4648      	mov	r0, r9
 800fbd8:	f7ff fbe8 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 800fbdc:	f1aa 0103 	sub.w	r1, sl, #3
 800fbe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbe2:	463a      	mov	r2, r7
 800fbe4:	b289      	uxth	r1, r1
 800fbe6:	4658      	mov	r0, fp
 800fbe8:	f7ff fbe0 	bl	800f3ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 800fbec:	4425      	add	r5, r4
 800fbee:	b2ad      	uxth	r5, r5
 800fbf0:	1e69      	subs	r1, r5, #1
 800fbf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbf4:	4642      	mov	r2, r8
 800fbf6:	b289      	uxth	r1, r1
 800fbf8:	4648      	mov	r0, r9
 800fbfa:	f7ff fbd7 	bl	800f3ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 800fbfe:	1ea9      	subs	r1, r5, #2
 800fc00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc02:	463a      	mov	r2, r7
 800fc04:	b289      	uxth	r1, r1
 800fc06:	4658      	mov	r0, fp
 800fc08:	f7ff fbd0 	bl	800f3ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 800fc0c:	4434      	add	r4, r6
 800fc0e:	b2a4      	uxth	r4, r4
 800fc10:	f104 39ff 	add.w	r9, r4, #4294967295
 800fc14:	fa1f f989 	uxth.w	r9, r9
 800fc18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc1a:	4642      	mov	r2, r8
 800fc1c:	4629      	mov	r1, r5
 800fc1e:	4648      	mov	r0, r9
 800fc20:	f7ff fb88 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 800fc24:	3c02      	subs	r4, #2
 800fc26:	b2a4      	uxth	r4, r4
 800fc28:	3501      	adds	r5, #1
 800fc2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc2c:	463a      	mov	r2, r7
 800fc2e:	b2a9      	uxth	r1, r5
 800fc30:	4620      	mov	r0, r4
 800fc32:	f7ff fb7f 	bl	800f334 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 800fc36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc38:	4642      	mov	r2, r8
 800fc3a:	9901      	ldr	r1, [sp, #4]
 800fc3c:	4648      	mov	r0, r9
 800fc3e:	f7ff fb79 	bl	800f334 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 800fc42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc44:	463a      	mov	r2, r7
 800fc46:	9902      	ldr	r1, [sp, #8]
 800fc48:	4620      	mov	r0, r4
 800fc4a:	f7ff fb73 	bl	800f334 <VLine>
}
 800fc4e:	e4af      	b.n	800f5b0 <DrawDigit+0x104>

0800fc50 <DrawLowSpectrum>:
{
 800fc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc52:	b083      	sub	sp, #12
	for(i = 0; i < 400; i++)
 800fc54:	2400      	movs	r4, #0
 800fc56:	e013      	b.n	800fc80 <DrawLowSpectrum+0x30>
		color = (uint32_t)(lowp_wavebuffer[i] & 0xE0); // read color data - first 3 bits
 800fc58:	4b68      	ldr	r3, [pc, #416]	; (800fdfc <DrawLowSpectrum+0x1ac>)
 800fc5a:	5d1a      	ldrb	r2, [r3, r4]
 800fc5c:	f002 03e0 	and.w	r3, r2, #224	; 0xe0
		color |= (uint32_t)(lowp_wavebuffer[i] & 0xE0);
 800fc60:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
		color <<= 8;
 800fc64:	021b      	lsls	r3, r3, #8
		VLine(i + 40, 250 - height, height, color);
 800fc66:	f002 021f 	and.w	r2, r2, #31
 800fc6a:	f1c2 01fa 	rsb	r1, r2, #250	; 0xfa
 800fc6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fc72:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800fc76:	b289      	uxth	r1, r1
 800fc78:	b280      	uxth	r0, r0
 800fc7a:	f7ff fb5b 	bl	800f334 <VLine>
	for(i = 0; i < 400; i++)
 800fc7e:	3401      	adds	r4, #1
 800fc80:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 800fc84:	d3e8      	bcc.n	800fc58 <DrawLowSpectrum+0x8>
	VLine(397, 174, 32, 0x00FFFFFF);
 800fc86:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fc8a:	2220      	movs	r2, #32
 800fc8c:	21ae      	movs	r1, #174	; 0xae
 800fc8e:	f240 108d 	movw	r0, #397	; 0x18d
 800fc92:	f7ff fb4f 	bl	800f334 <VLine>
	VLine(453, 174, 32, 0x00FFFFFF);
 800fc96:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fc9a:	2220      	movs	r2, #32
 800fc9c:	21ae      	movs	r1, #174	; 0xae
 800fc9e:	f240 10c5 	movw	r0, #453	; 0x1c5
 800fca2:	f7ff fb47 	bl	800f334 <VLine>
	HLine(399, 172, 53, 0x00FFFFFF);
 800fca6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fcaa:	2235      	movs	r2, #53	; 0x35
 800fcac:	21ac      	movs	r1, #172	; 0xac
 800fcae:	f240 108f 	movw	r0, #399	; 0x18f
 800fcb2:	f7ff fb7b 	bl	800f3ac <HLine>
	HLine(399, 207, 53, 0x00FFFFFF);
 800fcb6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fcba:	2235      	movs	r2, #53	; 0x35
 800fcbc:	21cf      	movs	r1, #207	; 0xcf
 800fcbe:	f240 108f 	movw	r0, #399	; 0x18f
 800fcc2:	f7ff fb73 	bl	800f3ac <HLine>
	Pixel(398, 173, 0xFFFF);
 800fcc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcca:	21ad      	movs	r1, #173	; 0xad
 800fccc:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 800fcd0:	f7ff fbd6 	bl	800f480 <Pixel>
	Pixel(452, 173, 0xFFFF);
 800fcd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcd8:	21ad      	movs	r1, #173	; 0xad
 800fcda:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
 800fcde:	f7ff fbcf 	bl	800f480 <Pixel>
	Pixel(398, 206, 0xFFFF);
 800fce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fce6:	21ce      	movs	r1, #206	; 0xce
 800fce8:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 800fcec:	f7ff fbc8 	bl	800f480 <Pixel>
	Pixel(452, 206, 0xFFFF);
 800fcf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcf4:	21ce      	movs	r1, #206	; 0xce
 800fcf6:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
 800fcfa:	f7ff fbc1 	bl	800f480 <Pixel>
	DrawElement(20, 5, 430, 205, 0x00FFFFFF, bpm);
 800fcfe:	4b40      	ldr	r3, [pc, #256]	; (800fe00 <DrawLowSpectrum+0x1b0>)
 800fd00:	9301      	str	r3, [sp, #4]
 800fd02:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 800fd06:	9400      	str	r4, [sp, #0]
 800fd08:	23cd      	movs	r3, #205	; 0xcd
 800fd0a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800fd0e:	2105      	movs	r1, #5
 800fd10:	2014      	movs	r0, #20
 800fd12:	f7ff fac7 	bl	800f2a4 <DrawElement>
	VLine(40, 252, 4, 0x00FFFFFF);
 800fd16:	4623      	mov	r3, r4
 800fd18:	2204      	movs	r2, #4
 800fd1a:	21fc      	movs	r1, #252	; 0xfc
 800fd1c:	2028      	movs	r0, #40	; 0x28
 800fd1e:	f7ff fb09 	bl	800f334 <VLine>
	VLine(440, 252, 4, 0x00FFFFFF);
 800fd22:	4623      	mov	r3, r4
 800fd24:	2204      	movs	r2, #4
 800fd26:	21fc      	movs	r1, #252	; 0xfc
 800fd28:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 800fd2c:	f7ff fb02 	bl	800f334 <VLine>
	HLine(40, 252, 400, 0x00FFFFFF);
 800fd30:	4623      	mov	r3, r4
 800fd32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800fd36:	21fc      	movs	r1, #252	; 0xfc
 800fd38:	2028      	movs	r0, #40	; 0x28
 800fd3a:	f7ff fb37 	bl	800f3ac <HLine>
	HLine(40, 256, 401, 0x00FFFFFF);
 800fd3e:	4623      	mov	r3, r4
 800fd40:	f240 1291 	movw	r2, #401	; 0x191
 800fd44:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fd48:	2028      	movs	r0, #40	; 0x28
 800fd4a:	f7ff fb2f 	bl	800f3ac <HLine>
	if(display.timemode == 0) {
 800fd4e:	4b2d      	ldr	r3, [pc, #180]	; (800fe04 <DrawLowSpectrum+0x1b4>)
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	b19b      	cbz	r3, 800fd7c <DrawLowSpectrum+0x12c>
	if(display.trackbarmode == 0) {
 800fd54:	4b2b      	ldr	r3, [pc, #172]	; (800fe04 <DrawLowSpectrum+0x1b4>)
 800fd56:	791b      	ldrb	r3, [r3, #4]
 800fd58:	b9d3      	cbnz	r3, 800fd90 <DrawLowSpectrum+0x140>
		Rectangle(file_pos+40, 253, 400-file_pos, 3, 0x00FFFFFF);
 800fd5a:	4b2b      	ldr	r3, [pc, #172]	; (800fe08 <DrawLowSpectrum+0x1b8>)
 800fd5c:	881b      	ldrh	r3, [r3, #0]
 800fd5e:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 800fd62:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800fd66:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	2303      	movs	r3, #3
 800fd6e:	b292      	uxth	r2, r2
 800fd70:	21fd      	movs	r1, #253	; 0xfd
 800fd72:	b280      	uxth	r0, r0
 800fd74:	f7ff fb58 	bl	800f428 <Rectangle>
	for(i = 0; i < 400; i++)
 800fd78:	2400      	movs	r4, #0
 800fd7a:	e024      	b.n	800fdc6 <DrawLowSpectrum+0x176>
		DrawElement(37, 5, 84, 191, 0x00FFFFFF, remain);
 800fd7c:	4b23      	ldr	r3, [pc, #140]	; (800fe0c <DrawLowSpectrum+0x1bc>)
 800fd7e:	9301      	str	r3, [sp, #4]
 800fd80:	9400      	str	r4, [sp, #0]
 800fd82:	23bf      	movs	r3, #191	; 0xbf
 800fd84:	2254      	movs	r2, #84	; 0x54
 800fd86:	2105      	movs	r1, #5
 800fd88:	2025      	movs	r0, #37	; 0x25
 800fd8a:	f7ff fa8b 	bl	800f2a4 <DrawElement>
 800fd8e:	e7e1      	b.n	800fd54 <DrawLowSpectrum+0x104>
		Rectangle(40, 253, file_pos, 3, 0x00FFFFFF);
 800fd90:	4b1d      	ldr	r3, [pc, #116]	; (800fe08 <DrawLowSpectrum+0x1b8>)
 800fd92:	881a      	ldrh	r2, [r3, #0]
 800fd94:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	2303      	movs	r3, #3
 800fd9c:	21fd      	movs	r1, #253	; 0xfd
 800fd9e:	2028      	movs	r0, #40	; 0x28
 800fda0:	f7ff fb42 	bl	800f428 <Rectangle>
 800fda4:	e7e8      	b.n	800fd78 <DrawLowSpectrum+0x128>
			VLine(40 + rekordbox.elminticks[i], 260, 4, 0x00FFFFFF);
 800fda6:	f241 2368 	movw	r3, #4712	; 0x1268
 800fdaa:	4423      	add	r3, r4
 800fdac:	4a18      	ldr	r2, [pc, #96]	; (800fe10 <DrawLowSpectrum+0x1c0>)
 800fdae:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800fdb2:	3028      	adds	r0, #40	; 0x28
 800fdb4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fdb8:	2204      	movs	r2, #4
 800fdba:	f44f 7182 	mov.w	r1, #260	; 0x104
 800fdbe:	b280      	uxth	r0, r0
 800fdc0:	f7ff fab8 	bl	800f334 <VLine>
		i++;
 800fdc4:	3401      	adds	r4, #1
	while(i < rekordbox.minutes) {
 800fdc6:	4a12      	ldr	r2, [pc, #72]	; (800fe10 <DrawLowSpectrum+0x1c0>)
 800fdc8:	f242 5350 	movw	r3, #9552	; 0x2550
 800fdcc:	5cd3      	ldrb	r3, [r2, r3]
 800fdce:	42a3      	cmp	r3, r4
 800fdd0:	d920      	bls.n	800fe14 <DrawLowSpectrum+0x1c4>
		if(display.timemode == 0) {
 800fdd2:	4b0c      	ldr	r3, [pc, #48]	; (800fe04 <DrawLowSpectrum+0x1b4>)
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1e5      	bne.n	800fda6 <DrawLowSpectrum+0x156>
			VLine(40 + rekordbox.remminticks[i], 260, 4, 0x00FFFFFF);
 800fdda:	f241 2328 	movw	r3, #4648	; 0x1228
 800fdde:	4423      	add	r3, r4
 800fde0:	4a0b      	ldr	r2, [pc, #44]	; (800fe10 <DrawLowSpectrum+0x1c0>)
 800fde2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800fde6:	3028      	adds	r0, #40	; 0x28
 800fde8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fdec:	2204      	movs	r2, #4
 800fdee:	f44f 7182 	mov.w	r1, #260	; 0x104
 800fdf2:	b280      	uxth	r0, r0
 800fdf4:	f7ff fa9e 	bl	800f334 <VLine>
 800fdf8:	e7e4      	b.n	800fdc4 <DrawLowSpectrum+0x174>
 800fdfa:	bf00      	nop
 800fdfc:	2000f308 	.word	0x2000f308
 800fe00:	0801bddc 	.word	0x0801bddc
 800fe04:	20001560 	.word	0x20001560
 800fe08:	200007ec 	.word	0x200007ec
 800fe0c:	0801c99c 	.word	0x0801c99c
 800fe10:	200153a4 	.word	0x200153a4
	DrawElement(7, 8, 375, 204, 0x00FFFFFF, percent);
 800fe14:	4bcf      	ldr	r3, [pc, #828]	; (8010154 <DrawLowSpectrum+0x504>)
 800fe16:	9301      	str	r3, [sp, #4]
 800fe18:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	23cc      	movs	r3, #204	; 0xcc
 800fe20:	f240 1277 	movw	r2, #375	; 0x177
 800fe24:	2108      	movs	r1, #8
 800fe26:	2007      	movs	r0, #7
 800fe28:	f7ff fa3c 	bl	800f2a4 <DrawElement>
	if(trak.percent < 0) DrawElement(10, 2, 308, 195, 0x00FFFFFF, minus);
 800fe2c:	4bca      	ldr	r3, [pc, #808]	; (8010158 <DrawLowSpectrum+0x508>)
 800fe2e:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe3a:	f100 81b7 	bmi.w	80101ac <DrawLowSpectrum+0x55c>
	else DrawElement(10, 10, 308, 199, 0x00FFFFFF, plus);
 800fe3e:	4bc7      	ldr	r3, [pc, #796]	; (801015c <DrawLowSpectrum+0x50c>)
 800fe40:	9301      	str	r3, [sp, #4]
 800fe42:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fe46:	9300      	str	r3, [sp, #0]
 800fe48:	23c7      	movs	r3, #199	; 0xc7
 800fe4a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800fe4e:	210a      	movs	r1, #10
 800fe50:	4608      	mov	r0, r1
 800fe52:	f7ff fa27 	bl	800f2a4 <DrawElement>
	uint16_t percent = (abs)(trak.percent * 10000);
 800fe56:	4bc0      	ldr	r3, [pc, #768]	; (8010158 <DrawLowSpectrum+0x508>)
 800fe58:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe5c:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8010160 <DrawLowSpectrum+0x510>
 800fe60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe68:	ee17 4a90 	vmov	r4, s15
 800fe6c:	2c00      	cmp	r4, #0
 800fe6e:	bfb8      	it	lt
 800fe70:	4264      	neglt	r4, r4
 800fe72:	b2a5      	uxth	r5, r4
	if(display.pitchmode == 0) {
 800fe74:	4bbb      	ldr	r3, [pc, #748]	; (8010164 <DrawLowSpectrum+0x514>)
 800fe76:	785b      	ldrb	r3, [r3, #1]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f000 81a4 	beq.w	80101c6 <DrawLowSpectrum+0x576>
	else if(display.pitchmode == 1) {
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	f000 821d 	beq.w	80102be <DrawLowSpectrum+0x66e>
	else if(display.pitchmode == 2) {
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	f000 8288 	beq.w	801039a <DrawLowSpectrum+0x74a>
	else if(display.pitchmode == 3) {
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	f000 8304 	beq.w	8010498 <DrawLowSpectrum+0x848>
	DrawElement(34, 5, 40, 178, 0x00FFFFFF, track);
 800fe90:	4bb5      	ldr	r3, [pc, #724]	; (8010168 <DrawLowSpectrum+0x518>)
 800fe92:	9301      	str	r3, [sp, #4]
 800fe94:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 800fe98:	9400      	str	r4, [sp, #0]
 800fe9a:	23b2      	movs	r3, #178	; 0xb2
 800fe9c:	2228      	movs	r2, #40	; 0x28
 800fe9e:	2105      	movs	r1, #5
 800fea0:	2022      	movs	r0, #34	; 0x22
 800fea2:	f7ff f9ff 	bl	800f2a4 <DrawElement>
	DrawElement(31, 5, 310, 178, 0x00FFFFFF, tempo);
 800fea6:	4bb1      	ldr	r3, [pc, #708]	; (801016c <DrawLowSpectrum+0x51c>)
 800fea8:	9301      	str	r3, [sp, #4]
 800feaa:	9400      	str	r4, [sp, #0]
 800feac:	23b2      	movs	r3, #178	; 0xb2
 800feae:	f44f 729b 	mov.w	r2, #310	; 0x136
 800feb2:	2105      	movs	r1, #5
 800feb4:	201f      	movs	r0, #31
 800feb6:	f7ff f9f5 	bl	800f2a4 <DrawElement>
	if(display.cuemode == 1) {
 800feba:	4baa      	ldr	r3, [pc, #680]	; (8010164 <DrawLowSpectrum+0x514>)
 800febc:	789b      	ldrb	r3, [r3, #2]
 800febe:	2b01      	cmp	r3, #1
 800fec0:	f000 833f 	beq.w	8010542 <DrawLowSpectrum+0x8f2>
	if(display.quantize == 1) {
 800fec4:	4ba7      	ldr	r3, [pc, #668]	; (8010164 <DrawLowSpectrum+0x514>)
 800fec6:	7c5b      	ldrb	r3, [r3, #17]
 800fec8:	2b01      	cmp	r3, #1
 800feca:	f000 8346 	beq.w	801055a <DrawLowSpectrum+0x90a>
	if(display.mastertempomode == 1) {
 800fece:	4ba5      	ldr	r3, [pc, #660]	; (8010164 <DrawLowSpectrum+0x514>)
 800fed0:	795b      	ldrb	r3, [r3, #5]
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	f000 834d 	beq.w	8010572 <DrawLowSpectrum+0x922>
	DrawElement(15, 16, 165, 204, 0x00FFFFFF, minutes);
 800fed8:	4ba5      	ldr	r3, [pc, #660]	; (8010170 <DrawLowSpectrum+0x520>)
 800feda:	9301      	str	r3, [sp, #4]
 800fedc:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 800fee0:	9400      	str	r4, [sp, #0]
 800fee2:	23cc      	movs	r3, #204	; 0xcc
 800fee4:	22a5      	movs	r2, #165	; 0xa5
 800fee6:	2110      	movs	r1, #16
 800fee8:	200f      	movs	r0, #15
 800feea:	f7ff f9db 	bl	800f2a4 <DrawElement>
	DrawElement(6, 7, 213, 204, 0x00FFFFFF, seconds);
 800feee:	4ba1      	ldr	r3, [pc, #644]	; (8010174 <DrawLowSpectrum+0x524>)
 800fef0:	9301      	str	r3, [sp, #4]
 800fef2:	9400      	str	r4, [sp, #0]
 800fef4:	23cc      	movs	r3, #204	; 0xcc
 800fef6:	22d5      	movs	r2, #213	; 0xd5
 800fef8:	2107      	movs	r1, #7
 800fefa:	2006      	movs	r0, #6
 800fefc:	f7ff f9d2 	bl	800f2a4 <DrawElement>
	DrawElement(5, 6, 252, 204, 0x00FFFFFF, frames);
 800ff00:	4b9d      	ldr	r3, [pc, #628]	; (8010178 <DrawLowSpectrum+0x528>)
 800ff02:	9301      	str	r3, [sp, #4]
 800ff04:	9400      	str	r4, [sp, #0]
 800ff06:	23cc      	movs	r3, #204	; 0xcc
 800ff08:	22fc      	movs	r2, #252	; 0xfc
 800ff0a:	2106      	movs	r1, #6
 800ff0c:	2005      	movs	r0, #5
 800ff0e:	f7ff f9c9 	bl	800f2a4 <DrawElement>
	DrawElement(3, 4, 252, 204, 0x00FFFFFF, point);
 800ff12:	4b9a      	ldr	r3, [pc, #616]	; (801017c <DrawLowSpectrum+0x52c>)
 800ff14:	9301      	str	r3, [sp, #4]
 800ff16:	9400      	str	r4, [sp, #0]
 800ff18:	23cc      	movs	r3, #204	; 0xcc
 800ff1a:	22fc      	movs	r2, #252	; 0xfc
 800ff1c:	2104      	movs	r1, #4
 800ff1e:	2003      	movs	r0, #3
 800ff20:	f7ff f9c0 	bl	800f2a4 <DrawElement>
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 800ff24:	4d96      	ldr	r5, [pc, #600]	; (8010180 <DrawLowSpectrum+0x530>)
 800ff26:	682b      	ldr	r3, [r5, #0]
 800ff28:	3301      	adds	r3, #1
 800ff2a:	4e96      	ldr	r6, [pc, #600]	; (8010184 <DrawLowSpectrum+0x534>)
 800ff2c:	fb86 2003 	smull	r2, r0, r6, r3
 800ff30:	17db      	asrs	r3, r3, #31
 800ff32:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 800ff36:	9400      	str	r4, [sp, #0]
 800ff38:	230d      	movs	r3, #13
 800ff3a:	22b7      	movs	r2, #183	; 0xb7
 800ff3c:	2128      	movs	r1, #40	; 0x28
 800ff3e:	b2c0      	uxtb	r0, r0
 800ff40:	f7ff fab4 	bl	800f4ac <DrawDigit>
	DrawDigit((Track_number + 1) % 10, 60, 183, 13, 0x00FFFFFF);
 800ff44:	682b      	ldr	r3, [r5, #0]
 800ff46:	3301      	adds	r3, #1
 800ff48:	fb86 1203 	smull	r1, r2, r6, r3
 800ff4c:	17d8      	asrs	r0, r3, #31
 800ff4e:	ebc0 00a2 	rsb	r0, r0, r2, asr #2
 800ff52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ff56:	0042      	lsls	r2, r0, #1
 800ff58:	1a98      	subs	r0, r3, r2
 800ff5a:	9400      	str	r4, [sp, #0]
 800ff5c:	230d      	movs	r3, #13
 800ff5e:	22b7      	movs	r2, #183	; 0xb7
 800ff60:	213c      	movs	r1, #60	; 0x3c
 800ff62:	b2c0      	uxtb	r0, r0
 800ff64:	f7ff faa2 	bl	800f4ac <DrawDigit>
	if(display.timemode == 0) {
 800ff68:	4b7e      	ldr	r3, [pc, #504]	; (8010164 <DrawLowSpectrum+0x514>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f040 830f 	bne.w	8010590 <DrawLowSpectrum+0x940>
		DrawDigit(rmin / 10, 134, 184, 11, 0x00FFFFFF);
 800ff72:	4e85      	ldr	r6, [pc, #532]	; (8010188 <DrawLowSpectrum+0x538>)
 800ff74:	f996 3000 	ldrsb.w	r3, [r6]
 800ff78:	4d82      	ldr	r5, [pc, #520]	; (8010184 <DrawLowSpectrum+0x534>)
 800ff7a:	fb85 2003 	smull	r2, r0, r5, r3
 800ff7e:	17db      	asrs	r3, r3, #31
 800ff80:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 800ff84:	9400      	str	r4, [sp, #0]
 800ff86:	230b      	movs	r3, #11
 800ff88:	22b8      	movs	r2, #184	; 0xb8
 800ff8a:	2186      	movs	r1, #134	; 0x86
 800ff8c:	b2c0      	uxtb	r0, r0
 800ff8e:	f7ff fa8d 	bl	800f4ac <DrawDigit>
		DrawDigit(rmin % 10, 148, 184, 11, 0x00FFFFFF);
 800ff92:	f996 2000 	ldrsb.w	r2, [r6]
 800ff96:	fb85 3102 	smull	r3, r1, r5, r2
 800ff9a:	17d3      	asrs	r3, r2, #31
 800ff9c:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 800ffa0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ffa4:	0058      	lsls	r0, r3, #1
 800ffa6:	1a10      	subs	r0, r2, r0
 800ffa8:	9400      	str	r4, [sp, #0]
 800ffaa:	230b      	movs	r3, #11
 800ffac:	22b8      	movs	r2, #184	; 0xb8
 800ffae:	2194      	movs	r1, #148	; 0x94
 800ffb0:	b2c0      	uxtb	r0, r0
 800ffb2:	f7ff fa7b 	bl	800f4ac <DrawDigit>
		DrawDigit(rsec / 10, 185, 184, 11, 0x00FFFFFF);
 800ffb6:	4e75      	ldr	r6, [pc, #468]	; (801018c <DrawLowSpectrum+0x53c>)
 800ffb8:	f996 3000 	ldrsb.w	r3, [r6]
 800ffbc:	fb85 2003 	smull	r2, r0, r5, r3
 800ffc0:	17db      	asrs	r3, r3, #31
 800ffc2:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 800ffc6:	9400      	str	r4, [sp, #0]
 800ffc8:	230b      	movs	r3, #11
 800ffca:	22b8      	movs	r2, #184	; 0xb8
 800ffcc:	21b9      	movs	r1, #185	; 0xb9
 800ffce:	b2c0      	uxtb	r0, r0
 800ffd0:	f7ff fa6c 	bl	800f4ac <DrawDigit>
		DrawDigit(rsec % 10, 199, 184, 11, 0x00FFFFFF);
 800ffd4:	f996 2000 	ldrsb.w	r2, [r6]
 800ffd8:	fb85 3102 	smull	r3, r1, r5, r2
 800ffdc:	17d3      	asrs	r3, r2, #31
 800ffde:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 800ffe2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ffe6:	0058      	lsls	r0, r3, #1
 800ffe8:	1a10      	subs	r0, r2, r0
 800ffea:	9400      	str	r4, [sp, #0]
 800ffec:	230b      	movs	r3, #11
 800ffee:	22b8      	movs	r2, #184	; 0xb8
 800fff0:	21c7      	movs	r1, #199	; 0xc7
 800fff2:	b2c0      	uxtb	r0, r0
 800fff4:	f7ff fa5a 	bl	800f4ac <DrawDigit>
		DrawDigit(rfr / 20, 224, 184, 11, 0x00FFFFFF);
 800fff8:	4e65      	ldr	r6, [pc, #404]	; (8010190 <DrawLowSpectrum+0x540>)
 800fffa:	f9b6 2000 	ldrsh.w	r2, [r6]
 800fffe:	fb85 1302 	smull	r1, r3, r5, r2
 8010002:	17d2      	asrs	r2, r2, #31
 8010004:	ebc2 00e3 	rsb	r0, r2, r3, asr #3
 8010008:	9400      	str	r4, [sp, #0]
 801000a:	230b      	movs	r3, #11
 801000c:	22b8      	movs	r2, #184	; 0xb8
 801000e:	21e0      	movs	r1, #224	; 0xe0
 8010010:	b2c0      	uxtb	r0, r0
 8010012:	f7ff fa4b 	bl	800f4ac <DrawDigit>
		DrawDigit((rfr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 8010016:	f9b6 3000 	ldrsh.w	r3, [r6]
 801001a:	2b00      	cmp	r3, #0
 801001c:	f2c0 82b6 	blt.w	801058c <DrawLowSpectrum+0x93c>
 8010020:	105b      	asrs	r3, r3, #1
 8010022:	4958      	ldr	r1, [pc, #352]	; (8010184 <DrawLowSpectrum+0x534>)
 8010024:	fb81 2103 	smull	r2, r1, r1, r3
 8010028:	17da      	asrs	r2, r3, #31
 801002a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 801002e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010032:	0050      	lsls	r0, r2, #1
 8010034:	1a18      	subs	r0, r3, r0
 8010036:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801003a:	9300      	str	r3, [sp, #0]
 801003c:	230b      	movs	r3, #11
 801003e:	22b8      	movs	r2, #184	; 0xb8
 8010040:	21ee      	movs	r1, #238	; 0xee
 8010042:	b2c0      	uxtb	r0, r0
 8010044:	f7ff fa32 	bl	800f4ac <DrawDigit>
	uint16_t bpm = rekordbox.bpm[beat] * (1 + trak.percent);
 8010048:	4b52      	ldr	r3, [pc, #328]	; (8010194 <DrawLowSpectrum+0x544>)
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8010050:	4b51      	ldr	r3, [pc, #324]	; (8010198 <DrawLowSpectrum+0x548>)
 8010052:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010056:	889b      	ldrh	r3, [r3, #4]
 8010058:	ee07 3a90 	vmov	s15, r3
 801005c:	4b3e      	ldr	r3, [pc, #248]	; (8010158 <DrawLowSpectrum+0x508>)
 801005e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010066:	ee37 7a26 	vadd.f32	s14, s14, s13
 801006a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801006e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010076:	ee17 3a90 	vmov	r3, s15
 801007a:	b29c      	uxth	r4, r3
	if(bpm / 10000 > 0) {
 801007c:	f242 730f 	movw	r3, #9999	; 0x270f
 8010080:	429c      	cmp	r4, r3
 8010082:	f200 82f4 	bhi.w	801066e <DrawLowSpectrum+0xa1e>
	if(bpm / 1000 > 0) {
 8010086:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 801008a:	f080 82fe 	bcs.w	801068a <DrawLowSpectrum+0xa3a>
	DrawDigit(((bpm / 100) % 100) % 10, 430, 176, 10, 0x00FFFFFF);
 801008e:	4b43      	ldr	r3, [pc, #268]	; (801019c <DrawLowSpectrum+0x54c>)
 8010090:	fba3 1204 	umull	r1, r2, r3, r4
 8010094:	0952      	lsrs	r2, r2, #5
 8010096:	fba3 1302 	umull	r1, r3, r3, r2
 801009a:	095b      	lsrs	r3, r3, #5
 801009c:	2164      	movs	r1, #100	; 0x64
 801009e:	fb01 2313 	mls	r3, r1, r3, r2
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	4e3e      	ldr	r6, [pc, #248]	; (80101a0 <DrawLowSpectrum+0x550>)
 80100a6:	fba6 1203 	umull	r1, r2, r6, r3
 80100aa:	08d2      	lsrs	r2, r2, #3
 80100ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80100b0:	0050      	lsls	r0, r2, #1
 80100b2:	1a18      	subs	r0, r3, r0
 80100b4:	f06f 457f 	mvn.w	r5, #4278190080	; 0xff000000
 80100b8:	9500      	str	r5, [sp, #0]
 80100ba:	230a      	movs	r3, #10
 80100bc:	22b0      	movs	r2, #176	; 0xb0
 80100be:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80100c2:	b2c0      	uxtb	r0, r0
 80100c4:	f7ff f9f2 	bl	800f4ac <DrawDigit>
	DrawElement(2, 2, 442, 194, 0x00FFFFFF, small_point);
 80100c8:	4b36      	ldr	r3, [pc, #216]	; (80101a4 <DrawLowSpectrum+0x554>)
 80100ca:	9301      	str	r3, [sp, #4]
 80100cc:	9500      	str	r5, [sp, #0]
 80100ce:	23c2      	movs	r3, #194	; 0xc2
 80100d0:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 80100d4:	2102      	movs	r1, #2
 80100d6:	4608      	mov	r0, r1
 80100d8:	f7ff f8e4 	bl	800f2a4 <DrawElement>
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 80100dc:	fba6 2304 	umull	r2, r3, r6, r4
 80100e0:	08db      	lsrs	r3, r3, #3
 80100e2:	fba6 1203 	umull	r1, r2, r6, r3
 80100e6:	08d2      	lsrs	r2, r2, #3
 80100e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80100ec:	0050      	lsls	r0, r2, #1
 80100ee:	1a18      	subs	r0, r3, r0
 80100f0:	9500      	str	r5, [sp, #0]
 80100f2:	2307      	movs	r3, #7
 80100f4:	22b6      	movs	r2, #182	; 0xb6
 80100f6:	f240 11bd 	movw	r1, #445	; 0x1bd
 80100fa:	b2c0      	uxtb	r0, r0
 80100fc:	f7ff f9d6 	bl	800f4ac <DrawDigit>
	if(rekordbox.state == 1) {
 8010100:	4a25      	ldr	r2, [pc, #148]	; (8010198 <DrawLowSpectrum+0x548>)
 8010102:	f642 5394 	movw	r3, #11668	; 0x2d94
 8010106:	5cd3      	ldrb	r3, [r2, r3]
 8010108:	2b01      	cmp	r3, #1
 801010a:	f000 82d8 	beq.w	80106be <DrawLowSpectrum+0xa6e>
	if(rekordbox.cues > 1) {
 801010e:	4a22      	ldr	r2, [pc, #136]	; (8010198 <DrawLowSpectrum+0x548>)
 8010110:	f242 5354 	movw	r3, #9556	; 0x2554
 8010114:	58d3      	ldr	r3, [r2, r3]
 8010116:	2b01      	cmp	r3, #1
 8010118:	f300 82ff 	bgt.w	801071a <DrawLowSpectrum+0xaca>
	if(display.loop == 1) {
 801011c:	4b11      	ldr	r3, [pc, #68]	; (8010164 <DrawLowSpectrum+0x514>)
 801011e:	7c1b      	ldrb	r3, [r3, #16]
 8010120:	2b01      	cmp	r3, #1
 8010122:	f000 83be 	beq.w	80108a2 <DrawLowSpectrum+0xc52>
	VLine(40 + file_pos, 220, 40, 0x00FFFFFF);
 8010126:	4c20      	ldr	r4, [pc, #128]	; (80101a8 <DrawLowSpectrum+0x558>)
 8010128:	6823      	ldr	r3, [r4, #0]
 801012a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801012e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010132:	2228      	movs	r2, #40	; 0x28
 8010134:	21dc      	movs	r1, #220	; 0xdc
 8010136:	b280      	uxth	r0, r0
 8010138:	f7ff f8fc 	bl	800f334 <VLine>
	VLine(41 + file_pos, 220, 40, 0x00FFFFFF);
 801013c:	6820      	ldr	r0, [r4, #0]
 801013e:	3029      	adds	r0, #41	; 0x29
 8010140:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010144:	2228      	movs	r2, #40	; 0x28
 8010146:	21dc      	movs	r1, #220	; 0xdc
 8010148:	b280      	uxth	r0, r0
 801014a:	f7ff f8f3 	bl	800f334 <VLine>
}
 801014e:	b003      	add	sp, #12
 8010150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010152:	bf00      	nop
 8010154:	0801c800 	.word	0x0801c800
 8010158:	20007f50 	.word	0x20007f50
 801015c:	0801c920 	.word	0x0801c920
 8010160:	461c4000 	.word	0x461c4000
 8010164:	20001560 	.word	0x20001560
 8010168:	0801d03c 	.word	0x0801d03c
 801016c:	0801cffc 	.word	0x0801cffc
 8010170:	0801c7e0 	.word	0x0801c7e0
 8010174:	0801cfec 	.word	0x0801cfec
 8010178:	0801c6d4 	.word	0x0801c6d4
 801017c:	0801c934 	.word	0x0801c934
 8010180:	200007e0 	.word	0x200007e0
 8010184:	66666667 	.word	0x66666667
 8010188:	2000143e 	.word	0x2000143e
 801018c:	2000143f 	.word	0x2000143f
 8010190:	2000143c 	.word	0x2000143c
 8010194:	200007b4 	.word	0x200007b4
 8010198:	200153a4 	.word	0x200153a4
 801019c:	51eb851f 	.word	0x51eb851f
 80101a0:	cccccccd 	.word	0xcccccccd
 80101a4:	0801cff8 	.word	0x0801cff8
 80101a8:	200007ec 	.word	0x200007ec
	if(trak.percent < 0) DrawElement(10, 2, 308, 195, 0x00FFFFFF, minus);
 80101ac:	4bb2      	ldr	r3, [pc, #712]	; (8010478 <DrawLowSpectrum+0x828>)
 80101ae:	9301      	str	r3, [sp, #4]
 80101b0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80101b4:	9300      	str	r3, [sp, #0]
 80101b6:	23c3      	movs	r3, #195	; 0xc3
 80101b8:	f44f 729a 	mov.w	r2, #308	; 0x134
 80101bc:	2102      	movs	r1, #2
 80101be:	200a      	movs	r0, #10
 80101c0:	f7ff f870 	bl	800f2a4 <DrawElement>
 80101c4:	e647      	b.n	800fe56 <DrawLowSpectrum+0x206>
		DrawElement(34, 7, 445, 230, 0x00FF0000, pitch_wide);
 80101c6:	4bad      	ldr	r3, [pc, #692]	; (801047c <DrawLowSpectrum+0x82c>)
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	23e6      	movs	r3, #230	; 0xe6
 80101d2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80101d6:	2107      	movs	r1, #7
 80101d8:	2022      	movs	r0, #34	; 0x22
 80101da:	f7ff f863 	bl	800f2a4 <DrawElement>
		if(percent / 10000 > 0) {
 80101de:	f242 730f 	movw	r3, #9999	; 0x270f
 80101e2:	429d      	cmp	r5, r3
 80101e4:	d838      	bhi.n	8010258 <DrawLowSpectrum+0x608>
		if(percent / 1000 > 0) {
 80101e6:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80101ea:	d243      	bcs.n	8010274 <DrawLowSpectrum+0x624>
		DrawDigit(((percent / 100) % 100) % 10, 345, 186, 10, 0x00FFFFFF);
 80101ec:	4ba4      	ldr	r3, [pc, #656]	; (8010480 <DrawLowSpectrum+0x830>)
 80101ee:	fba3 2405 	umull	r2, r4, r3, r5
 80101f2:	0964      	lsrs	r4, r4, #5
 80101f4:	b2a2      	uxth	r2, r4
 80101f6:	fba3 1302 	umull	r1, r3, r3, r2
 80101fa:	095b      	lsrs	r3, r3, #5
 80101fc:	2664      	movs	r6, #100	; 0x64
 80101fe:	fb06 2313 	mls	r3, r6, r3, r2
 8010202:	b29b      	uxth	r3, r3
 8010204:	4a9f      	ldr	r2, [pc, #636]	; (8010484 <DrawLowSpectrum+0x834>)
 8010206:	fba2 1203 	umull	r1, r2, r2, r3
 801020a:	08d2      	lsrs	r2, r2, #3
 801020c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010210:	0050      	lsls	r0, r2, #1
 8010212:	1a18      	subs	r0, r3, r0
 8010214:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8010218:	9700      	str	r7, [sp, #0]
 801021a:	230a      	movs	r3, #10
 801021c:	22ba      	movs	r2, #186	; 0xba
 801021e:	f240 1159 	movw	r1, #345	; 0x159
 8010222:	b2c0      	uxtb	r0, r0
 8010224:	f7ff f942 	bl	800f4ac <DrawDigit>
		DrawElement(2, 2, 356, 204, 0x00FFFFFF, small_point);
 8010228:	4b97      	ldr	r3, [pc, #604]	; (8010488 <DrawLowSpectrum+0x838>)
 801022a:	9301      	str	r3, [sp, #4]
 801022c:	9700      	str	r7, [sp, #0]
 801022e:	23cc      	movs	r3, #204	; 0xcc
 8010230:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010234:	2102      	movs	r1, #2
 8010236:	4608      	mov	r0, r1
 8010238:	f7ff f834 	bl	800f2a4 <DrawElement>
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 801023c:	fb06 5314 	mls	r3, r6, r4, r5
 8010240:	b29b      	uxth	r3, r3
 8010242:	2b04      	cmp	r3, #4
 8010244:	d930      	bls.n	80102a8 <DrawLowSpectrum+0x658>
 8010246:	9700      	str	r7, [sp, #0]
 8010248:	230a      	movs	r3, #10
 801024a:	22ba      	movs	r2, #186	; 0xba
 801024c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8010250:	2005      	movs	r0, #5
 8010252:	f7ff f92b 	bl	800f4ac <DrawDigit>
 8010256:	e61b      	b.n	800fe90 <DrawLowSpectrum+0x240>
			DrawDigit(percent / 10000, 315, 186, 10, 0x00FFFFFF);
 8010258:	488c      	ldr	r0, [pc, #560]	; (801048c <DrawLowSpectrum+0x83c>)
 801025a:	fba0 3005 	umull	r3, r0, r0, r5
 801025e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	230a      	movs	r3, #10
 8010266:	22ba      	movs	r2, #186	; 0xba
 8010268:	f240 113b 	movw	r1, #315	; 0x13b
 801026c:	0b40      	lsrs	r0, r0, #13
 801026e:	f7ff f91d 	bl	800f4ac <DrawDigit>
 8010272:	e7b8      	b.n	80101e6 <DrawLowSpectrum+0x596>
			DrawDigit(((percent / 100) % 100) / 10, 330, 186, 10, 0x00FFFFFF);
 8010274:	4882      	ldr	r0, [pc, #520]	; (8010480 <DrawLowSpectrum+0x830>)
 8010276:	fba0 3205 	umull	r3, r2, r0, r5
 801027a:	0952      	lsrs	r2, r2, #5
 801027c:	fba0 3002 	umull	r3, r0, r0, r2
 8010280:	0940      	lsrs	r0, r0, #5
 8010282:	2364      	movs	r3, #100	; 0x64
 8010284:	fb03 2010 	mls	r0, r3, r0, r2
 8010288:	b280      	uxth	r0, r0
 801028a:	4b7e      	ldr	r3, [pc, #504]	; (8010484 <DrawLowSpectrum+0x834>)
 801028c:	fba3 3000 	umull	r3, r0, r3, r0
 8010290:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010294:	9300      	str	r3, [sp, #0]
 8010296:	230a      	movs	r3, #10
 8010298:	22ba      	movs	r2, #186	; 0xba
 801029a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801029e:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 80102a2:	f7ff f903 	bl	800f4ac <DrawDigit>
 80102a6:	e7a1      	b.n	80101ec <DrawLowSpectrum+0x59c>
		else DrawDigit(0, 360, 186, 10, 0x00FFFFFF);
 80102a8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80102ac:	9300      	str	r3, [sp, #0]
 80102ae:	230a      	movs	r3, #10
 80102b0:	22ba      	movs	r2, #186	; 0xba
 80102b2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80102b6:	2000      	movs	r0, #0
 80102b8:	f7ff f8f8 	bl	800f4ac <DrawDigit>
 80102bc:	e5e8      	b.n	800fe90 <DrawLowSpectrum+0x240>
		DrawElement(34, 9, 445, 241, 0x00FFFFFF, pitch16);
 80102be:	4b74      	ldr	r3, [pc, #464]	; (8010490 <DrawLowSpectrum+0x840>)
 80102c0:	9301      	str	r3, [sp, #4]
 80102c2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	23f1      	movs	r3, #241	; 0xf1
 80102ca:	f240 12bd 	movw	r2, #445	; 0x1bd
 80102ce:	2109      	movs	r1, #9
 80102d0:	2022      	movs	r0, #34	; 0x22
 80102d2:	f7fe ffe7 	bl	800f2a4 <DrawElement>
		if(percent / 1000 > 0) {
 80102d6:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80102da:	d244      	bcs.n	8010366 <DrawLowSpectrum+0x716>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 80102dc:	4b68      	ldr	r3, [pc, #416]	; (8010480 <DrawLowSpectrum+0x830>)
 80102de:	fba3 1205 	umull	r1, r2, r3, r5
 80102e2:	0952      	lsrs	r2, r2, #5
 80102e4:	fba3 1302 	umull	r1, r3, r3, r2
 80102e8:	095b      	lsrs	r3, r3, #5
 80102ea:	2164      	movs	r1, #100	; 0x64
 80102ec:	fb01 2313 	mls	r3, r1, r3, r2
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	4e64      	ldr	r6, [pc, #400]	; (8010484 <DrawLowSpectrum+0x834>)
 80102f4:	fba6 1203 	umull	r1, r2, r6, r3
 80102f8:	08d2      	lsrs	r2, r2, #3
 80102fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80102fe:	0050      	lsls	r0, r2, #1
 8010300:	1a18      	subs	r0, r3, r0
 8010302:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8010306:	9700      	str	r7, [sp, #0]
 8010308:	230a      	movs	r3, #10
 801030a:	22ba      	movs	r2, #186	; 0xba
 801030c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8010310:	b2c0      	uxtb	r0, r0
 8010312:	f7ff f8cb 	bl	800f4ac <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 8010316:	4b5c      	ldr	r3, [pc, #368]	; (8010488 <DrawLowSpectrum+0x838>)
 8010318:	9301      	str	r3, [sp, #4]
 801031a:	9700      	str	r7, [sp, #0]
 801031c:	23cc      	movs	r3, #204	; 0xcc
 801031e:	f240 1255 	movw	r2, #341	; 0x155
 8010322:	2102      	movs	r1, #2
 8010324:	4608      	mov	r0, r1
 8010326:	f7fe ffbd 	bl	800f2a4 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 801032a:	fba6 3205 	umull	r3, r2, r6, r5
 801032e:	08d2      	lsrs	r2, r2, #3
 8010330:	fba6 1302 	umull	r1, r3, r6, r2
 8010334:	08db      	lsrs	r3, r3, #3
 8010336:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801033a:	0058      	lsls	r0, r3, #1
 801033c:	1a10      	subs	r0, r2, r0
 801033e:	9700      	str	r7, [sp, #0]
 8010340:	230a      	movs	r3, #10
 8010342:	22ba      	movs	r2, #186	; 0xba
 8010344:	f240 1159 	movw	r1, #345	; 0x159
 8010348:	b2c0      	uxtb	r0, r0
 801034a:	f7ff f8af 	bl	800f4ac <DrawDigit>
		DrawDigit((percent % 2) * 5, 360, 186, 10, 0x00FFFFFF);
 801034e:	f004 0401 	and.w	r4, r4, #1
 8010352:	00a0      	lsls	r0, r4, #2
 8010354:	9700      	str	r7, [sp, #0]
 8010356:	230a      	movs	r3, #10
 8010358:	22ba      	movs	r2, #186	; 0xba
 801035a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801035e:	4420      	add	r0, r4
 8010360:	f7ff f8a4 	bl	800f4ac <DrawDigit>
 8010364:	e594      	b.n	800fe90 <DrawLowSpectrum+0x240>
			DrawDigit(((percent / 100) % 100) / 10, 315, 186, 10, 0x00FFFFFF);
 8010366:	4846      	ldr	r0, [pc, #280]	; (8010480 <DrawLowSpectrum+0x830>)
 8010368:	fba0 3205 	umull	r3, r2, r0, r5
 801036c:	0952      	lsrs	r2, r2, #5
 801036e:	fba0 3002 	umull	r3, r0, r0, r2
 8010372:	0940      	lsrs	r0, r0, #5
 8010374:	2364      	movs	r3, #100	; 0x64
 8010376:	fb03 2010 	mls	r0, r3, r0, r2
 801037a:	b280      	uxth	r0, r0
 801037c:	4b41      	ldr	r3, [pc, #260]	; (8010484 <DrawLowSpectrum+0x834>)
 801037e:	fba3 3000 	umull	r3, r0, r3, r0
 8010382:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010386:	9300      	str	r3, [sp, #0]
 8010388:	230a      	movs	r3, #10
 801038a:	22ba      	movs	r2, #186	; 0xba
 801038c:	f240 113b 	movw	r1, #315	; 0x13b
 8010390:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8010394:	f7ff f88a 	bl	800f4ac <DrawDigit>
 8010398:	e7a0      	b.n	80102dc <DrawLowSpectrum+0x68c>
		DrawElement(34, 9, 445, 252, 0x00FF0000, pitch10);
 801039a:	4b3e      	ldr	r3, [pc, #248]	; (8010494 <DrawLowSpectrum+0x844>)
 801039c:	9301      	str	r3, [sp, #4]
 801039e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	23fc      	movs	r3, #252	; 0xfc
 80103a6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80103aa:	2109      	movs	r1, #9
 80103ac:	2022      	movs	r0, #34	; 0x22
 80103ae:	f7fe ff79 	bl	800f2a4 <DrawElement>
		if(percent / 1000 > 0) {
 80103b2:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80103b6:	d244      	bcs.n	8010442 <DrawLowSpectrum+0x7f2>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 80103b8:	4b31      	ldr	r3, [pc, #196]	; (8010480 <DrawLowSpectrum+0x830>)
 80103ba:	fba3 1205 	umull	r1, r2, r3, r5
 80103be:	0952      	lsrs	r2, r2, #5
 80103c0:	fba3 1302 	umull	r1, r3, r3, r2
 80103c4:	095b      	lsrs	r3, r3, #5
 80103c6:	2164      	movs	r1, #100	; 0x64
 80103c8:	fb01 2313 	mls	r3, r1, r3, r2
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	4e2d      	ldr	r6, [pc, #180]	; (8010484 <DrawLowSpectrum+0x834>)
 80103d0:	fba6 1203 	umull	r1, r2, r6, r3
 80103d4:	08d2      	lsrs	r2, r2, #3
 80103d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80103da:	0050      	lsls	r0, r2, #1
 80103dc:	1a18      	subs	r0, r3, r0
 80103de:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 80103e2:	9700      	str	r7, [sp, #0]
 80103e4:	230a      	movs	r3, #10
 80103e6:	22ba      	movs	r2, #186	; 0xba
 80103e8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80103ec:	b2c0      	uxtb	r0, r0
 80103ee:	f7ff f85d 	bl	800f4ac <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 80103f2:	4b25      	ldr	r3, [pc, #148]	; (8010488 <DrawLowSpectrum+0x838>)
 80103f4:	9301      	str	r3, [sp, #4]
 80103f6:	9700      	str	r7, [sp, #0]
 80103f8:	23cc      	movs	r3, #204	; 0xcc
 80103fa:	f240 1255 	movw	r2, #341	; 0x155
 80103fe:	2102      	movs	r1, #2
 8010400:	4608      	mov	r0, r1
 8010402:	f7fe ff4f 	bl	800f2a4 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8010406:	fba6 3205 	umull	r3, r2, r6, r5
 801040a:	08d2      	lsrs	r2, r2, #3
 801040c:	fba6 1302 	umull	r1, r3, r6, r2
 8010410:	08db      	lsrs	r3, r3, #3
 8010412:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010416:	0058      	lsls	r0, r3, #1
 8010418:	1a10      	subs	r0, r2, r0
 801041a:	9700      	str	r7, [sp, #0]
 801041c:	230a      	movs	r3, #10
 801041e:	22ba      	movs	r2, #186	; 0xba
 8010420:	f240 1159 	movw	r1, #345	; 0x159
 8010424:	b2c0      	uxtb	r0, r0
 8010426:	f7ff f841 	bl	800f4ac <DrawDigit>
		DrawDigit((percent % 2) * 5, 360, 186, 10, 0x00FFFFFF);
 801042a:	f004 0401 	and.w	r4, r4, #1
 801042e:	00a0      	lsls	r0, r4, #2
 8010430:	9700      	str	r7, [sp, #0]
 8010432:	230a      	movs	r3, #10
 8010434:	22ba      	movs	r2, #186	; 0xba
 8010436:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801043a:	4420      	add	r0, r4
 801043c:	f7ff f836 	bl	800f4ac <DrawDigit>
 8010440:	e526      	b.n	800fe90 <DrawLowSpectrum+0x240>
			DrawDigit(((percent / 100) % 100) / 10, 315, 186, 10, 0x00FFFFFF);
 8010442:	480f      	ldr	r0, [pc, #60]	; (8010480 <DrawLowSpectrum+0x830>)
 8010444:	fba0 3205 	umull	r3, r2, r0, r5
 8010448:	0952      	lsrs	r2, r2, #5
 801044a:	fba0 3002 	umull	r3, r0, r0, r2
 801044e:	0940      	lsrs	r0, r0, #5
 8010450:	2364      	movs	r3, #100	; 0x64
 8010452:	fb03 2010 	mls	r0, r3, r0, r2
 8010456:	b280      	uxth	r0, r0
 8010458:	4b0a      	ldr	r3, [pc, #40]	; (8010484 <DrawLowSpectrum+0x834>)
 801045a:	fba3 3000 	umull	r3, r0, r3, r0
 801045e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	230a      	movs	r3, #10
 8010466:	22ba      	movs	r2, #186	; 0xba
 8010468:	f240 113b 	movw	r1, #315	; 0x13b
 801046c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8010470:	f7ff f81c 	bl	800f4ac <DrawDigit>
 8010474:	e7a0      	b.n	80103b8 <DrawLowSpectrum+0x768>
 8010476:	bf00      	nop
 8010478:	0801c7cc 	.word	0x0801c7cc
 801047c:	0801c8dc 	.word	0x0801c8dc
 8010480:	51eb851f 	.word	0x51eb851f
 8010484:	cccccccd 	.word	0xcccccccd
 8010488:	0801cff8 	.word	0x0801cff8
 801048c:	d1b71759 	.word	0xd1b71759
 8010490:	0801c854 	.word	0x0801c854
 8010494:	0801c810 	.word	0x0801c810
		DrawElement(34, 9, 445, 263, 0x0000FF00, pitch6);
 8010498:	4bad      	ldr	r3, [pc, #692]	; (8010750 <DrawLowSpectrum+0xb00>)
 801049a:	9301      	str	r3, [sp, #4]
 801049c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	f240 1307 	movw	r3, #263	; 0x107
 80104a6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80104aa:	2109      	movs	r1, #9
 80104ac:	2022      	movs	r0, #34	; 0x22
 80104ae:	f7fe fef9 	bl	800f2a4 <DrawElement>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 80104b2:	4ba8      	ldr	r3, [pc, #672]	; (8010754 <DrawLowSpectrum+0xb04>)
 80104b4:	fba3 1205 	umull	r1, r2, r3, r5
 80104b8:	0952      	lsrs	r2, r2, #5
 80104ba:	fba3 1302 	umull	r1, r3, r3, r2
 80104be:	095b      	lsrs	r3, r3, #5
 80104c0:	2164      	movs	r1, #100	; 0x64
 80104c2:	fb01 2313 	mls	r3, r1, r3, r2
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	4ca3      	ldr	r4, [pc, #652]	; (8010758 <DrawLowSpectrum+0xb08>)
 80104ca:	fba4 1203 	umull	r1, r2, r4, r3
 80104ce:	08d2      	lsrs	r2, r2, #3
 80104d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80104d4:	0050      	lsls	r0, r2, #1
 80104d6:	1a18      	subs	r0, r3, r0
 80104d8:	f06f 467f 	mvn.w	r6, #4278190080	; 0xff000000
 80104dc:	9600      	str	r6, [sp, #0]
 80104de:	230a      	movs	r3, #10
 80104e0:	22ba      	movs	r2, #186	; 0xba
 80104e2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80104e6:	b2c0      	uxtb	r0, r0
 80104e8:	f7fe ffe0 	bl	800f4ac <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 80104ec:	4b9b      	ldr	r3, [pc, #620]	; (801075c <DrawLowSpectrum+0xb0c>)
 80104ee:	9301      	str	r3, [sp, #4]
 80104f0:	9600      	str	r6, [sp, #0]
 80104f2:	23cc      	movs	r3, #204	; 0xcc
 80104f4:	f240 1255 	movw	r2, #341	; 0x155
 80104f8:	2102      	movs	r1, #2
 80104fa:	4608      	mov	r0, r1
 80104fc:	f7fe fed2 	bl	800f2a4 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8010500:	fba4 3705 	umull	r3, r7, r4, r5
 8010504:	08fa      	lsrs	r2, r7, #3
 8010506:	fba4 1302 	umull	r1, r3, r4, r2
 801050a:	08db      	lsrs	r3, r3, #3
 801050c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010510:	0058      	lsls	r0, r3, #1
 8010512:	1a10      	subs	r0, r2, r0
 8010514:	9600      	str	r6, [sp, #0]
 8010516:	230a      	movs	r3, #10
 8010518:	22ba      	movs	r2, #186	; 0xba
 801051a:	f240 1159 	movw	r1, #345	; 0x159
 801051e:	b2c0      	uxtb	r0, r0
 8010520:	f7fe ffc4 	bl	800f4ac <DrawDigit>
		DrawDigit((percent % 5) * 2, 360, 186, 10, 0x00FFFFFF);
 8010524:	08b8      	lsrs	r0, r7, #2
 8010526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801052a:	1a28      	subs	r0, r5, r0
 801052c:	0040      	lsls	r0, r0, #1
 801052e:	9600      	str	r6, [sp, #0]
 8010530:	230a      	movs	r3, #10
 8010532:	22ba      	movs	r2, #186	; 0xba
 8010534:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8010538:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 801053c:	f7fe ffb6 	bl	800f4ac <DrawDigit>
 8010540:	e4a6      	b.n	800fe90 <DrawLowSpectrum+0x240>
		DrawElement(34, 11, 86, 207, 0x00FF0000, auto_cue);
 8010542:	4b87      	ldr	r3, [pc, #540]	; (8010760 <DrawLowSpectrum+0xb10>)
 8010544:	9301      	str	r3, [sp, #4]
 8010546:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	23cf      	movs	r3, #207	; 0xcf
 801054e:	2256      	movs	r2, #86	; 0x56
 8010550:	210b      	movs	r1, #11
 8010552:	2022      	movs	r0, #34	; 0x22
 8010554:	f7fe fea6 	bl	800f2a4 <DrawElement>
 8010558:	e4b4      	b.n	800fec4 <DrawLowSpectrum+0x274>
		DrawElement(48, 5, 200, 178, 0x00FF0000, quantize);
 801055a:	4b82      	ldr	r3, [pc, #520]	; (8010764 <DrawLowSpectrum+0xb14>)
 801055c:	9301      	str	r3, [sp, #4]
 801055e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8010562:	9300      	str	r3, [sp, #0]
 8010564:	23b2      	movs	r3, #178	; 0xb2
 8010566:	22c8      	movs	r2, #200	; 0xc8
 8010568:	2105      	movs	r1, #5
 801056a:	2030      	movs	r0, #48	; 0x30
 801056c:	f7fe fe9a 	bl	800f2a4 <DrawElement>
 8010570:	e4ad      	b.n	800fece <DrawLowSpectrum+0x27e>
		DrawElement(34, 11, 355, 183, 0x00FF0000, master_tempo);
 8010572:	4b7d      	ldr	r3, [pc, #500]	; (8010768 <DrawLowSpectrum+0xb18>)
 8010574:	9301      	str	r3, [sp, #4]
 8010576:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801057a:	9300      	str	r3, [sp, #0]
 801057c:	23b7      	movs	r3, #183	; 0xb7
 801057e:	f240 1263 	movw	r2, #355	; 0x163
 8010582:	210b      	movs	r1, #11
 8010584:	2022      	movs	r0, #34	; 0x22
 8010586:	f7fe fe8d 	bl	800f2a4 <DrawElement>
 801058a:	e4a5      	b.n	800fed8 <DrawLowSpectrum+0x288>
		DrawDigit((rfr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 801058c:	3301      	adds	r3, #1
 801058e:	e547      	b.n	8010020 <DrawLowSpectrum+0x3d0>
		DrawDigit(min / 10, 134, 184, 11, 0x00FFFFFF);
 8010590:	4e76      	ldr	r6, [pc, #472]	; (801076c <DrawLowSpectrum+0xb1c>)
 8010592:	f996 3000 	ldrsb.w	r3, [r6]
 8010596:	4d76      	ldr	r5, [pc, #472]	; (8010770 <DrawLowSpectrum+0xb20>)
 8010598:	fb85 2003 	smull	r2, r0, r5, r3
 801059c:	17db      	asrs	r3, r3, #31
 801059e:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 80105a2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 80105a6:	9400      	str	r4, [sp, #0]
 80105a8:	230b      	movs	r3, #11
 80105aa:	22b8      	movs	r2, #184	; 0xb8
 80105ac:	2186      	movs	r1, #134	; 0x86
 80105ae:	b2c0      	uxtb	r0, r0
 80105b0:	f7fe ff7c 	bl	800f4ac <DrawDigit>
		DrawDigit(min % 10, 148, 184, 11, 0x00FFFFFF);
 80105b4:	f996 2000 	ldrsb.w	r2, [r6]
 80105b8:	fb85 3102 	smull	r3, r1, r5, r2
 80105bc:	17d3      	asrs	r3, r2, #31
 80105be:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80105c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80105c6:	0058      	lsls	r0, r3, #1
 80105c8:	1a10      	subs	r0, r2, r0
 80105ca:	9400      	str	r4, [sp, #0]
 80105cc:	230b      	movs	r3, #11
 80105ce:	22b8      	movs	r2, #184	; 0xb8
 80105d0:	2194      	movs	r1, #148	; 0x94
 80105d2:	b2c0      	uxtb	r0, r0
 80105d4:	f7fe ff6a 	bl	800f4ac <DrawDigit>
		DrawDigit(sec / 10, 185, 184, 11, 0x00FFFFFF);
 80105d8:	4e66      	ldr	r6, [pc, #408]	; (8010774 <DrawLowSpectrum+0xb24>)
 80105da:	f996 3000 	ldrsb.w	r3, [r6]
 80105de:	fb85 2003 	smull	r2, r0, r5, r3
 80105e2:	17db      	asrs	r3, r3, #31
 80105e4:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 80105e8:	9400      	str	r4, [sp, #0]
 80105ea:	230b      	movs	r3, #11
 80105ec:	22b8      	movs	r2, #184	; 0xb8
 80105ee:	21b9      	movs	r1, #185	; 0xb9
 80105f0:	b2c0      	uxtb	r0, r0
 80105f2:	f7fe ff5b 	bl	800f4ac <DrawDigit>
		DrawDigit(sec % 10, 199, 184, 11, 0x00FFFFFF);
 80105f6:	f996 2000 	ldrsb.w	r2, [r6]
 80105fa:	fb85 3102 	smull	r3, r1, r5, r2
 80105fe:	17d3      	asrs	r3, r2, #31
 8010600:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8010604:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010608:	0058      	lsls	r0, r3, #1
 801060a:	1a10      	subs	r0, r2, r0
 801060c:	9400      	str	r4, [sp, #0]
 801060e:	230b      	movs	r3, #11
 8010610:	22b8      	movs	r2, #184	; 0xb8
 8010612:	21c7      	movs	r1, #199	; 0xc7
 8010614:	b2c0      	uxtb	r0, r0
 8010616:	f7fe ff49 	bl	800f4ac <DrawDigit>
		DrawDigit(fr / 20, 224, 184, 11, 0x00FFFFFF);
 801061a:	4e57      	ldr	r6, [pc, #348]	; (8010778 <DrawLowSpectrum+0xb28>)
 801061c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8010620:	fb85 1302 	smull	r1, r3, r5, r2
 8010624:	17d2      	asrs	r2, r2, #31
 8010626:	ebc2 00e3 	rsb	r0, r2, r3, asr #3
 801062a:	9400      	str	r4, [sp, #0]
 801062c:	230b      	movs	r3, #11
 801062e:	22b8      	movs	r2, #184	; 0xb8
 8010630:	21e0      	movs	r1, #224	; 0xe0
 8010632:	b2c0      	uxtb	r0, r0
 8010634:	f7fe ff3a 	bl	800f4ac <DrawDigit>
		DrawDigit((fr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 8010638:	f9b6 3000 	ldrsh.w	r3, [r6]
 801063c:	2b00      	cmp	r3, #0
 801063e:	db14      	blt.n	801066a <DrawLowSpectrum+0xa1a>
 8010640:	105b      	asrs	r3, r3, #1
 8010642:	494b      	ldr	r1, [pc, #300]	; (8010770 <DrawLowSpectrum+0xb20>)
 8010644:	fb81 2103 	smull	r2, r1, r1, r3
 8010648:	17da      	asrs	r2, r3, #31
 801064a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 801064e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010652:	0050      	lsls	r0, r2, #1
 8010654:	1a18      	subs	r0, r3, r0
 8010656:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801065a:	9300      	str	r3, [sp, #0]
 801065c:	230b      	movs	r3, #11
 801065e:	22b8      	movs	r2, #184	; 0xb8
 8010660:	21ee      	movs	r1, #238	; 0xee
 8010662:	b2c0      	uxtb	r0, r0
 8010664:	f7fe ff22 	bl	800f4ac <DrawDigit>
 8010668:	e4ee      	b.n	8010048 <DrawLowSpectrum+0x3f8>
 801066a:	3301      	adds	r3, #1
 801066c:	e7e8      	b.n	8010640 <DrawLowSpectrum+0x9f0>
		DrawDigit(bpm / 10000, 400, 176, 10, 0x00FFFFFF);
 801066e:	4843      	ldr	r0, [pc, #268]	; (801077c <DrawLowSpectrum+0xb2c>)
 8010670:	fba0 3004 	umull	r3, r0, r0, r4
 8010674:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010678:	9300      	str	r3, [sp, #0]
 801067a:	230a      	movs	r3, #10
 801067c:	22b0      	movs	r2, #176	; 0xb0
 801067e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010682:	0b40      	lsrs	r0, r0, #13
 8010684:	f7fe ff12 	bl	800f4ac <DrawDigit>
 8010688:	e4fd      	b.n	8010086 <DrawLowSpectrum+0x436>
		DrawDigit(((bpm / 100) % 100) / 10, 415, 176, 10, 0x00FFFFFF);
 801068a:	4832      	ldr	r0, [pc, #200]	; (8010754 <DrawLowSpectrum+0xb04>)
 801068c:	fba0 3204 	umull	r3, r2, r0, r4
 8010690:	0952      	lsrs	r2, r2, #5
 8010692:	fba0 3002 	umull	r3, r0, r0, r2
 8010696:	0940      	lsrs	r0, r0, #5
 8010698:	2364      	movs	r3, #100	; 0x64
 801069a:	fb03 2010 	mls	r0, r3, r0, r2
 801069e:	b280      	uxth	r0, r0
 80106a0:	4b2d      	ldr	r3, [pc, #180]	; (8010758 <DrawLowSpectrum+0xb08>)
 80106a2:	fba3 3000 	umull	r3, r0, r3, r0
 80106a6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	230a      	movs	r3, #10
 80106ae:	22b0      	movs	r2, #176	; 0xb0
 80106b0:	f240 119f 	movw	r1, #415	; 0x19f
 80106b4:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 80106b8:	f7fe fef8 	bl	800f4ac <DrawDigit>
 80106bc:	e4e7      	b.n	801008e <DrawLowSpectrum+0x43e>
		if(rekordbox.cue_start_position[0] != 0) {
 80106be:	f642 2308 	movw	r3, #10760	; 0x2a08
 80106c2:	58d3      	ldr	r3, [r2, r3]
 80106c4:	b99b      	cbnz	r3, 80106ee <DrawLowSpectrum+0xa9e>
		if(rekordbox.cue_start_position[0] != 0) {
 80106c6:	4a2e      	ldr	r2, [pc, #184]	; (8010780 <DrawLowSpectrum+0xb30>)
 80106c8:	f642 2308 	movw	r3, #10760	; 0x2a08
 80106cc:	58d3      	ldr	r3, [r2, r3]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f43f ad1d 	beq.w	801010e <DrawLowSpectrum+0x4be>
			DrawElement(36, 11, 1, 260, 0x00FF0000, cue_ind);
 80106d4:	4b2b      	ldr	r3, [pc, #172]	; (8010784 <DrawLowSpectrum+0xb34>)
 80106d6:	9301      	str	r3, [sp, #4]
 80106d8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80106dc:	9300      	str	r3, [sp, #0]
 80106de:	f44f 7382 	mov.w	r3, #260	; 0x104
 80106e2:	2201      	movs	r2, #1
 80106e4:	210b      	movs	r1, #11
 80106e6:	2024      	movs	r0, #36	; 0x24
 80106e8:	f7fe fddc 	bl	800f2a4 <DrawElement>
 80106ec:	e50f      	b.n	801010e <DrawLowSpectrum+0x4be>
				*400/rekordbox.spectrum_size), 219, 0x00FFFF00, hot_cue);
 80106ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80106f2:	fb02 f203 	mul.w	r2, r2, r3
 80106f6:	4922      	ldr	r1, [pc, #136]	; (8010780 <DrawLowSpectrum+0xb30>)
 80106f8:	f242 434c 	movw	r3, #9292	; 0x244c
 80106fc:	58cb      	ldr	r3, [r1, r3]
 80106fe:	fbb2 f2f3 	udiv	r2, r2, r3
			DrawElement(9, 5, 36+(rekordbox.cue_start_position[0]
 8010702:	3224      	adds	r2, #36	; 0x24
 8010704:	4b20      	ldr	r3, [pc, #128]	; (8010788 <DrawLowSpectrum+0xb38>)
 8010706:	9301      	str	r3, [sp, #4]
 8010708:	4b20      	ldr	r3, [pc, #128]	; (801078c <DrawLowSpectrum+0xb3c>)
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	23db      	movs	r3, #219	; 0xdb
 801070e:	b292      	uxth	r2, r2
 8010710:	2105      	movs	r1, #5
 8010712:	2009      	movs	r0, #9
 8010714:	f7fe fdc6 	bl	800f2a4 <DrawElement>
 8010718:	e7d5      	b.n	80106c6 <DrawLowSpectrum+0xa76>
		DrawElement(36, 11, 1, 230, 0x00FF0000, memory_ind);
 801071a:	4b1d      	ldr	r3, [pc, #116]	; (8010790 <DrawLowSpectrum+0xb40>)
 801071c:	9301      	str	r3, [sp, #4]
 801071e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8010722:	9300      	str	r3, [sp, #0]
 8010724:	23e6      	movs	r3, #230	; 0xe6
 8010726:	2201      	movs	r2, #1
 8010728:	210b      	movs	r1, #11
 801072a:	2024      	movs	r0, #36	; 0x24
 801072c:	f7fe fdba 	bl	800f2a4 <DrawElement>
		for(i = 1; i < rekordbox.cues; i++) {
 8010730:	2401      	movs	r4, #1
 8010732:	e030      	b.n	8010796 <DrawLowSpectrum+0xb46>
				DrawElement(9, 5, 37+start_pos, 219, 0x00FF0000, hot_cue);
 8010734:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8010738:	4b13      	ldr	r3, [pc, #76]	; (8010788 <DrawLowSpectrum+0xb38>)
 801073a:	9301      	str	r3, [sp, #4]
 801073c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	23db      	movs	r3, #219	; 0xdb
 8010744:	b292      	uxth	r2, r2
 8010746:	2105      	movs	r1, #5
 8010748:	2009      	movs	r0, #9
 801074a:	f7fe fdab 	bl	800f2a4 <DrawElement>
 801074e:	e04f      	b.n	80107f0 <DrawLowSpectrum+0xba0>
 8010750:	0801c898 	.word	0x0801c898
 8010754:	51eb851f 	.word	0x51eb851f
 8010758:	cccccccd 	.word	0xcccccccd
 801075c:	0801cff8 	.word	0x0801cff8
 8010760:	0801bd70 	.word	0x0801bd70
 8010764:	0801c93c 	.word	0x0801c93c
 8010768:	0801c740 	.word	0x0801c740
 801076c:	20000c42 	.word	0x20000c42
 8010770:	66666667 	.word	0x66666667
 8010774:	20001440 	.word	0x20001440
 8010778:	20000c40 	.word	0x20000c40
 801077c:	d1b71759 	.word	0xd1b71759
 8010780:	200153a4 	.word	0x200153a4
 8010784:	0801be04 	.word	0x0801be04
 8010788:	0801c6e0 	.word	0x0801c6e0
 801078c:	00ffff00 	.word	0x00ffff00
 8010790:	0801c784 	.word	0x0801c784
		for(i = 1; i < rekordbox.cues; i++) {
 8010794:	3401      	adds	r4, #1
 8010796:	4a74      	ldr	r2, [pc, #464]	; (8010968 <DrawLowSpectrum+0xd18>)
 8010798:	f242 5354 	movw	r3, #9556	; 0x2554
 801079c:	58d3      	ldr	r3, [r2, r3]
 801079e:	42a3      	cmp	r3, r4
 80107a0:	f67f acbc 	bls.w	801011c <DrawLowSpectrum+0x4cc>
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80107a4:	4b70      	ldr	r3, [pc, #448]	; (8010968 <DrawLowSpectrum+0xd18>)
 80107a6:	f242 4248 	movw	r2, #9288	; 0x2448
 80107aa:	589a      	ldr	r2, [r3, r2]
 80107ac:	ee07 2a90 	vmov	s15, r2
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 80107b0:	f604 2282 	addw	r2, r4, #2690	; 0xa82
 80107b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80107b8:	ee07 2a10 	vmov	s14, r2
 80107bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80107c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107c4:	ee67 7a87 	vmul.f32	s15, s15, s14
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 80107c8:	f242 424c 	movw	r2, #9292	; 0x244c
 80107cc:	589a      	ldr	r2, [r3, r2]
 80107ce:	ee06 2a90 	vmov	s13, r2
 80107d2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80107d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80107da:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80107de:	ee17 2a90 	vmov	r2, s15
 80107e2:	b295      	uxth	r5, r2
			if(rekordbox.cue_singleloop[i] == 1) {
 80107e4:	4423      	add	r3, r4
 80107e6:	f642 5228 	movw	r2, #11560	; 0x2d28
 80107ea:	5c9b      	ldrb	r3, [r3, r2]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d0a1      	beq.n	8010734 <DrawLowSpectrum+0xae4>
			if(rekordbox.cue_singleloop[i] == 2) {
 80107f0:	4b5d      	ldr	r3, [pc, #372]	; (8010968 <DrawLowSpectrum+0xd18>)
 80107f2:	4423      	add	r3, r4
 80107f4:	f642 5228 	movw	r2, #11560	; 0x2d28
 80107f8:	5c9b      	ldrb	r3, [r3, r2]
 80107fa:	2b02      	cmp	r3, #2
 80107fc:	d1ca      	bne.n	8010794 <DrawLowSpectrum+0xb44>
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 80107fe:	4b5a      	ldr	r3, [pc, #360]	; (8010968 <DrawLowSpectrum+0xd18>)
 8010800:	f242 4248 	movw	r2, #9288	; 0x2448
 8010804:	589a      	ldr	r2, [r3, r2]
 8010806:	ee07 2a10 	vmov	s14, r2
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 801080a:	f604 22e6 	addw	r2, r4, #2790	; 0xae6
 801080e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010812:	ee07 2a90 	vmov	s15, r2
 8010816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 801081a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801081e:	ee27 7a27 	vmul.f32	s14, s14, s15
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 8010822:	f242 424c 	movw	r2, #9292	; 0x244c
 8010826:	589b      	ldr	r3, [r3, r2]
 8010828:	ee06 3a90 	vmov	s13, r3
 801082c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8010830:	eec7 7a26 	vdiv.f32	s15, s14, s13
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8010834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010838:	ee17 3a90 	vmov	r3, s15
 801083c:	b29e      	uxth	r6, r3
				VLine(40+start_pos, 220, 40, 0x0000FF00);
 801083e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8010842:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8010846:	2228      	movs	r2, #40	; 0x28
 8010848:	21dc      	movs	r1, #220	; 0xdc
 801084a:	b280      	uxth	r0, r0
 801084c:	f7fe fd72 	bl	800f334 <VLine>
				Pixel(41+start_pos, 220, 0x0000FF00);
 8010850:	3529      	adds	r5, #41	; 0x29
 8010852:	b2ad      	uxth	r5, r5
 8010854:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8010858:	21dc      	movs	r1, #220	; 0xdc
 801085a:	4628      	mov	r0, r5
 801085c:	f7fe fe10 	bl	800f480 <Pixel>
				Pixel(41+start_pos, 259, 0x0000FF00);
 8010860:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8010864:	f240 1103 	movw	r1, #259	; 0x103
 8010868:	4628      	mov	r0, r5
 801086a:	f7fe fe09 	bl	800f480 <Pixel>
				VLine(40+end_pos, 220, 40, 0x0000FF00);
 801086e:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8010872:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8010876:	2228      	movs	r2, #40	; 0x28
 8010878:	21dc      	movs	r1, #220	; 0xdc
 801087a:	b280      	uxth	r0, r0
 801087c:	f7fe fd5a 	bl	800f334 <VLine>
				Pixel(39+end_pos, 220, 0x0000FF00);
 8010880:	f106 0527 	add.w	r5, r6, #39	; 0x27
 8010884:	b2ad      	uxth	r5, r5
 8010886:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801088a:	21dc      	movs	r1, #220	; 0xdc
 801088c:	4628      	mov	r0, r5
 801088e:	f7fe fdf7 	bl	800f480 <Pixel>
				Pixel(39+end_pos, 259, 0x0000FF00);
 8010892:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8010896:	f240 1103 	movw	r1, #259	; 0x103
 801089a:	4628      	mov	r0, r5
 801089c:	f7fe fdf0 	bl	800f480 <Pixel>
 80108a0:	e778      	b.n	8010794 <DrawLowSpectrum+0xb44>
		DrawElement(22, 11, 270, 199, 0x0000FF00, loop_l);
 80108a2:	4b32      	ldr	r3, [pc, #200]	; (801096c <DrawLowSpectrum+0xd1c>)
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	f44f 467f 	mov.w	r6, #65280	; 0xff00
 80108aa:	9600      	str	r6, [sp, #0]
 80108ac:	23c7      	movs	r3, #199	; 0xc7
 80108ae:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80108b2:	210b      	movs	r1, #11
 80108b4:	2016      	movs	r0, #22
 80108b6:	f7fe fcf5 	bl	800f2a4 <DrawElement>
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80108ba:	4a2b      	ldr	r2, [pc, #172]	; (8010968 <DrawLowSpectrum+0xd18>)
 80108bc:	f242 4348 	movw	r3, #9288	; 0x2448
 80108c0:	58d3      	ldr	r3, [r2, r3]
 80108c2:	ee07 3a10 	vmov	s14, r3
 80108c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				(float)display.loopstart/rekordbox.spectrum_size;
 80108ca:	4b29      	ldr	r3, [pc, #164]	; (8010970 <DrawLowSpectrum+0xd20>)
 80108cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80108d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80108d4:	ee67 6a26 	vmul.f32	s13, s14, s13
				(float)display.loopstart/rekordbox.spectrum_size;
 80108d8:	f242 414c 	movw	r1, #9292	; 0x244c
 80108dc:	5852      	ldr	r2, [r2, r1]
 80108de:	ee06 2a10 	vmov	s12, r2
 80108e2:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80108e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80108ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108ee:	ee17 2a90 	vmov	r2, s15
 80108f2:	b295      	uxth	r5, r2
				(float)display.loopend/rekordbox.spectrum_size;
 80108f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80108f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 80108fc:	ee27 7a27 	vmul.f32	s14, s14, s15
				(float)display.loopend/rekordbox.spectrum_size;
 8010900:	eec7 7a06 	vdiv.f32	s15, s14, s12
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8010904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010908:	ee17 3a90 	vmov	r3, s15
 801090c:	b29c      	uxth	r4, r3
		VLine(40+start_pos, 220, 40, 0x0000FF00);
 801090e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8010912:	4633      	mov	r3, r6
 8010914:	2228      	movs	r2, #40	; 0x28
 8010916:	21dc      	movs	r1, #220	; 0xdc
 8010918:	b280      	uxth	r0, r0
 801091a:	f7fe fd0b 	bl	800f334 <VLine>
		Pixel(41+start_pos, 220, 0x0000FF00);
 801091e:	3529      	adds	r5, #41	; 0x29
 8010920:	b2ad      	uxth	r5, r5
 8010922:	4632      	mov	r2, r6
 8010924:	21dc      	movs	r1, #220	; 0xdc
 8010926:	4628      	mov	r0, r5
 8010928:	f7fe fdaa 	bl	800f480 <Pixel>
		Pixel(41+start_pos, 259, 0x0000FF00);
 801092c:	4632      	mov	r2, r6
 801092e:	f240 1103 	movw	r1, #259	; 0x103
 8010932:	4628      	mov	r0, r5
 8010934:	f7fe fda4 	bl	800f480 <Pixel>
		VLine(40+end_pos, 220, 40, 0x0000FF00);
 8010938:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801093c:	4633      	mov	r3, r6
 801093e:	2228      	movs	r2, #40	; 0x28
 8010940:	21dc      	movs	r1, #220	; 0xdc
 8010942:	b280      	uxth	r0, r0
 8010944:	f7fe fcf6 	bl	800f334 <VLine>
		Pixel(39+end_pos, 220, 0x0000FF00);
 8010948:	3427      	adds	r4, #39	; 0x27
 801094a:	b2a4      	uxth	r4, r4
 801094c:	4632      	mov	r2, r6
 801094e:	21dc      	movs	r1, #220	; 0xdc
 8010950:	4620      	mov	r0, r4
 8010952:	f7fe fd95 	bl	800f480 <Pixel>
		Pixel(39+end_pos, 259, 0x0000FF00);
 8010956:	4632      	mov	r2, r6
 8010958:	f240 1103 	movw	r1, #259	; 0x103
 801095c:	4620      	mov	r0, r4
 801095e:	f7fe fd8f 	bl	800f480 <Pixel>
 8010962:	f7ff bbe0 	b.w	8010126 <DrawLowSpectrum+0x4d6>
 8010966:	bf00      	nop
 8010968:	200153a4 	.word	0x200153a4
 801096c:	0801c714 	.word	0x0801c714
 8010970:	20001560 	.word	0x20001560

08010974 <DrawSpectrum>:
{
 8010974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010976:	b0fb      	sub	sp, #492	; 0x1ec
 8010978:	af02      	add	r7, sp, #8
	uint8_t spectrum_frame[480] = {0};
 801097a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801097e:	2100      	movs	r1, #0
 8010980:	4638      	mov	r0, r7
 8010982:	f006 fcad 	bl	80172e0 <memset>
	uint32_t new_cues[rekordbox.cues];
 8010986:	4a98      	ldr	r2, [pc, #608]	; (8010be8 <DrawSpectrum+0x274>)
 8010988:	f242 5354 	movw	r3, #9556	; 0x2554
 801098c:	58d3      	ldr	r3, [r2, r3]
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	330a      	adds	r3, #10
 8010992:	f023 0307 	bic.w	r3, r3, #7
 8010996:	ebad 0d03 	sub.w	sp, sp, r3
 801099a:	ad02      	add	r5, sp, #8
	if(position != file_pos_wide) {
 801099c:	4b93      	ldr	r3, [pc, #588]	; (8010bec <DrawSpectrum+0x278>)
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	4b93      	ldr	r3, [pc, #588]	; (8010bf0 <DrawSpectrum+0x27c>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d022      	beq.n	80109ee <DrawSpectrum+0x7a>
		position = file_pos_wide;
 80109a8:	4a90      	ldr	r2, [pc, #576]	; (8010bec <DrawSpectrum+0x278>)
 80109aa:	6013      	str	r3, [r2, #0]
		if(stretch > 1) {
 80109ac:	4b91      	ldr	r3, [pc, #580]	; (8010bf4 <DrawSpectrum+0x280>)
 80109ae:	edd3 7a00 	vldr	s15, [r3]
 80109b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80109b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80109ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109be:	dc04      	bgt.n	80109ca <DrawSpectrum+0x56>
 80109c0:	e015      	b.n	80109ee <DrawSpectrum+0x7a>
				position++;
 80109c2:	4a8a      	ldr	r2, [pc, #552]	; (8010bec <DrawSpectrum+0x278>)
 80109c4:	6813      	ldr	r3, [r2, #0]
 80109c6:	3301      	adds	r3, #1
 80109c8:	6013      	str	r3, [r2, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 80109ca:	4b88      	ldr	r3, [pc, #544]	; (8010bec <DrawSpectrum+0x278>)
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80109d2:	ee17 3a10 	vmov	r3, s14
 80109d6:	fb92 f1f3 	sdiv	r1, r2, r3
 80109da:	fb03 2111 	mls	r1, r3, r1, r2
 80109de:	4a86      	ldr	r2, [pc, #536]	; (8010bf8 <DrawSpectrum+0x284>)
 80109e0:	6810      	ldr	r0, [r2, #0]
 80109e2:	fb90 f2f3 	sdiv	r2, r0, r3
 80109e6:	fb03 0312 	mls	r3, r3, r2, r0
 80109ea:	4299      	cmp	r1, r3
 80109ec:	d1e9      	bne.n	80109c2 <DrawSpectrum+0x4e>
				i++;
 80109ee:	2100      	movs	r1, #0
 80109f0:	e021      	b.n	8010a36 <DrawSpectrum+0xc2>
				check = position + (int32_t)((i-240)*stretch);
 80109f2:	f1a2 03ef 	sub.w	r3, r2, #239	; 0xef
 80109f6:	ee07 3a90 	vmov	s15, r3
 80109fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a06:	4b79      	ldr	r3, [pc, #484]	; (8010bec <DrawSpectrum+0x278>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	ee17 4a90 	vmov	r4, s15
 8010a0e:	441c      	add	r4, r3
 8010a10:	4623      	mov	r3, r4
 8010a12:	4c79      	ldr	r4, [pc, #484]	; (8010bf8 <DrawSpectrum+0x284>)
 8010a14:	6023      	str	r3, [r4, #0]
				i++;
 8010a16:	3201      	adds	r2, #1
			while(check < rekordbox.cue_start_position[k]) {
 8010a18:	4b77      	ldr	r3, [pc, #476]	; (8010bf8 <DrawSpectrum+0x284>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4298      	cmp	r0, r3
 8010a1e:	dce8      	bgt.n	80109f2 <DrawSpectrum+0x7e>
			if(new_cues[k] != check) new_cues[k] = check;
 8010a20:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8010a24:	4b74      	ldr	r3, [pc, #464]	; (8010bf8 <DrawSpectrum+0x284>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d003      	beq.n	8010a34 <DrawSpectrum+0xc0>
 8010a2c:	4b72      	ldr	r3, [pc, #456]	; (8010bf8 <DrawSpectrum+0x284>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	for(k = 0; k < rekordbox.cues; k++) {
 8010a34:	3101      	adds	r1, #1
 8010a36:	4a6c      	ldr	r2, [pc, #432]	; (8010be8 <DrawSpectrum+0x274>)
 8010a38:	f242 5354 	movw	r3, #9556	; 0x2554
 8010a3c:	58d3      	ldr	r3, [r2, r3]
 8010a3e:	4299      	cmp	r1, r3
 8010a40:	da1d      	bge.n	8010a7e <DrawSpectrum+0x10a>
		new_cues[k] = 0;
 8010a42:	2300      	movs	r3, #0
 8010a44:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
		check = position + (int32_t)((i-240)*stretch);
 8010a48:	4b6a      	ldr	r3, [pc, #424]	; (8010bf4 <DrawSpectrum+0x280>)
 8010a4a:	ed93 7a00 	vldr	s14, [r3]
 8010a4e:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8010bfc <DrawSpectrum+0x288>
 8010a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a5a:	4b64      	ldr	r3, [pc, #400]	; (8010bec <DrawSpectrum+0x278>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	ee17 2a90 	vmov	r2, s15
 8010a62:	441a      	add	r2, r3
 8010a64:	4613      	mov	r3, r2
 8010a66:	4a64      	ldr	r2, [pc, #400]	; (8010bf8 <DrawSpectrum+0x284>)
 8010a68:	6013      	str	r3, [r2, #0]
		if(check < rekordbox.cue_start_position[k]) {
 8010a6a:	f601 2382 	addw	r3, r1, #2690	; 0xa82
 8010a6e:	485e      	ldr	r0, [pc, #376]	; (8010be8 <DrawSpectrum+0x274>)
 8010a70:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010a74:	6813      	ldr	r3, [r2, #0]
 8010a76:	4298      	cmp	r0, r3
 8010a78:	dddc      	ble.n	8010a34 <DrawSpectrum+0xc0>
		i = 0;
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	e7cc      	b.n	8010a18 <DrawSpectrum+0xa4>
	for(i = 0; i < 480; i++) {
 8010a7e:	2200      	movs	r2, #0
 8010a80:	e000      	b.n	8010a84 <DrawSpectrum+0x110>
 8010a82:	3201      	adds	r2, #1
 8010a84:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8010a88:	da1c      	bge.n	8010ac4 <DrawSpectrum+0x150>
		check = position + (int32_t)((i-240)*stretch);
 8010a8a:	f1a2 03f0 	sub.w	r3, r2, #240	; 0xf0
 8010a8e:	ee07 3a90 	vmov	s15, r3
 8010a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a96:	4b57      	ldr	r3, [pc, #348]	; (8010bf4 <DrawSpectrum+0x280>)
 8010a98:	ed93 7a00 	vldr	s14, [r3]
 8010a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010aa4:	4b51      	ldr	r3, [pc, #324]	; (8010bec <DrawSpectrum+0x278>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	ee17 1a90 	vmov	r1, s15
 8010aac:	4419      	add	r1, r3
 8010aae:	460b      	mov	r3, r1
 8010ab0:	4951      	ldr	r1, [pc, #324]	; (8010bf8 <DrawSpectrum+0x284>)
 8010ab2:	600b      	str	r3, [r1, #0]
		if(check > 0) {
 8010ab4:	680b      	ldr	r3, [r1, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	dde3      	ble.n	8010a82 <DrawSpectrum+0x10e>
			spectrum_frame[i] = *(__IO uint8_t*)(WAVE_BUFFER+check);
 8010aba:	6809      	ldr	r1, [r1, #0]
 8010abc:	4b50      	ldr	r3, [pc, #320]	; (8010c00 <DrawSpectrum+0x28c>)
 8010abe:	5ccb      	ldrb	r3, [r1, r3]
 8010ac0:	54bb      	strb	r3, [r7, r2]
 8010ac2:	e7de      	b.n	8010a82 <DrawSpectrum+0x10e>
	for(i = 0; i < 480; i++)
 8010ac4:	2400      	movs	r4, #0
 8010ac6:	e014      	b.n	8010af2 <DrawSpectrum+0x17e>
			color = spectrum_frame[i] & 0xE0; // read color data - first 3 bits
 8010ac8:	5d3a      	ldrb	r2, [r7, r4]
 8010aca:	f002 03e0 	and.w	r3, r2, #224	; 0xe0
			color <<= 8;
 8010ace:	021b      	lsls	r3, r3, #8
			color |= 0x000000FF;
 8010ad0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8010ad4:	494b      	ldr	r1, [pc, #300]	; (8010c04 <DrawSpectrum+0x290>)
 8010ad6:	600b      	str	r3, [r1, #0]
			height = spectrum_frame[i] & 0x1F; //read height data - last 5 bits
 8010ad8:	f002 021f 	and.w	r2, r2, #31
 8010adc:	494a      	ldr	r1, [pc, #296]	; (8010c08 <DrawSpectrum+0x294>)
 8010ade:	600a      	str	r2, [r1, #0]
			VLine(i, 120-height, height*2, color);
 8010ae0:	b292      	uxth	r2, r2
 8010ae2:	f1c2 0178 	rsb	r1, r2, #120	; 0x78
 8010ae6:	0052      	lsls	r2, r2, #1
 8010ae8:	b289      	uxth	r1, r1
 8010aea:	b2a0      	uxth	r0, r4
 8010aec:	f7fe fc22 	bl	800f334 <VLine>
	for(i = 0; i < 480; i++)
 8010af0:	3401      	adds	r4, #1
 8010af2:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8010af6:	da2e      	bge.n	8010b56 <DrawSpectrum+0x1e2>
		check = position + (int32_t)((i-240)*stretch);
 8010af8:	f1a4 03f0 	sub.w	r3, r4, #240	; 0xf0
 8010afc:	ee07 3a90 	vmov	s15, r3
 8010b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b04:	4b3b      	ldr	r3, [pc, #236]	; (8010bf4 <DrawSpectrum+0x280>)
 8010b06:	ed93 7a00 	vldr	s14, [r3]
 8010b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b12:	4b36      	ldr	r3, [pc, #216]	; (8010bec <DrawSpectrum+0x278>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	ee17 2a90 	vmov	r2, s15
 8010b1a:	441a      	add	r2, r3
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	4a36      	ldr	r2, [pc, #216]	; (8010bf8 <DrawSpectrum+0x284>)
 8010b20:	6013      	str	r3, [r2, #0]
		if(check > 0) {
 8010b22:	6813      	ldr	r3, [r2, #0]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	dde3      	ble.n	8010af0 <DrawSpectrum+0x17c>
			if(display.loop == 1) {
 8010b28:	4b38      	ldr	r3, [pc, #224]	; (8010c0c <DrawSpectrum+0x298>)
 8010b2a:	7c1b      	ldrb	r3, [r3, #16]
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d1cb      	bne.n	8010ac8 <DrawSpectrum+0x154>
				if((check >= display.loopstart) && (check <= display.loopend)) {
 8010b30:	4b36      	ldr	r3, [pc, #216]	; (8010c0c <DrawSpectrum+0x298>)
 8010b32:	689a      	ldr	r2, [r3, #8]
 8010b34:	4b30      	ldr	r3, [pc, #192]	; (8010bf8 <DrawSpectrum+0x284>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d8c5      	bhi.n	8010ac8 <DrawSpectrum+0x154>
 8010b3c:	4b33      	ldr	r3, [pc, #204]	; (8010c0c <DrawSpectrum+0x298>)
 8010b3e:	68da      	ldr	r2, [r3, #12]
 8010b40:	4b2d      	ldr	r3, [pc, #180]	; (8010bf8 <DrawSpectrum+0x284>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d3bf      	bcc.n	8010ac8 <DrawSpectrum+0x154>
					VLine(i, 75, 90, 0x008F8F8F);
 8010b48:	4b31      	ldr	r3, [pc, #196]	; (8010c10 <DrawSpectrum+0x29c>)
 8010b4a:	225a      	movs	r2, #90	; 0x5a
 8010b4c:	214b      	movs	r1, #75	; 0x4b
 8010b4e:	b2a0      	uxth	r0, r4
 8010b50:	f7fe fbf0 	bl	800f334 <VLine>
 8010b54:	e7b8      	b.n	8010ac8 <DrawSpectrum+0x154>
	for(i = 0; i < 480; i++)
 8010b56:	2600      	movs	r6, #0
 8010b58:	e061      	b.n	8010c1e <DrawSpectrum+0x2aa>
						VLine(i, 75, 4, 0x00FF0000);
 8010b5a:	b2b4      	uxth	r4, r6
 8010b5c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8010b60:	2204      	movs	r2, #4
 8010b62:	214b      	movs	r1, #75	; 0x4b
 8010b64:	4620      	mov	r0, r4
 8010b66:	f7fe fbe5 	bl	800f334 <VLine>
						VLine(i, 161, 4, 0x00FF0000);
 8010b6a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8010b6e:	2204      	movs	r2, #4
 8010b70:	21a1      	movs	r1, #161	; 0xa1
 8010b72:	4620      	mov	r0, r4
 8010b74:	f7fe fbde 	bl	800f334 <VLine>
 8010b78:	e09c      	b.n	8010cb4 <DrawSpectrum+0x340>
				if(check == new_cues[0]) {
 8010b7a:	682a      	ldr	r2, [r5, #0]
 8010b7c:	4b1e      	ldr	r3, [pc, #120]	; (8010bf8 <DrawSpectrum+0x284>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	f040 80a2 	bne.w	8010cca <DrawSpectrum+0x356>
					if((i > 10) && (i < 472))
 8010b86:	f1a6 030b 	sub.w	r3, r6, #11
 8010b8a:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8010b8e:	f200 809c 	bhi.w	8010cca <DrawSpectrum+0x356>
						DrawElement(15, 5, i - 11, 72, 0x00FFFF00, hot_cue_wide);
 8010b92:	461a      	mov	r2, r3
 8010b94:	4b1f      	ldr	r3, [pc, #124]	; (8010c14 <DrawSpectrum+0x2a0>)
 8010b96:	9301      	str	r3, [sp, #4]
 8010b98:	4b1f      	ldr	r3, [pc, #124]	; (8010c18 <DrawSpectrum+0x2a4>)
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	2348      	movs	r3, #72	; 0x48
 8010b9e:	b292      	uxth	r2, r2
 8010ba0:	2105      	movs	r1, #5
 8010ba2:	200f      	movs	r0, #15
 8010ba4:	f7fe fb7e 	bl	800f2a4 <DrawElement>
 8010ba8:	e08f      	b.n	8010cca <DrawSpectrum+0x356>
			for(int k = 1; k < rekordbox.cues; k++) {
 8010baa:	3401      	adds	r4, #1
 8010bac:	4a0e      	ldr	r2, [pc, #56]	; (8010be8 <DrawSpectrum+0x274>)
 8010bae:	f242 5354 	movw	r3, #9556	; 0x2554
 8010bb2:	58d3      	ldr	r3, [r2, r3]
 8010bb4:	42a3      	cmp	r3, r4
 8010bb6:	dd31      	ble.n	8010c1c <DrawSpectrum+0x2a8>
				if(check == new_cues[k]) {
 8010bb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010bbc:	4b0e      	ldr	r3, [pc, #56]	; (8010bf8 <DrawSpectrum+0x284>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d1f2      	bne.n	8010baa <DrawSpectrum+0x236>
					if((i > 10) && (i < 472))
 8010bc4:	f1a6 030b 	sub.w	r3, r6, #11
 8010bc8:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8010bcc:	d8ed      	bhi.n	8010baa <DrawSpectrum+0x236>
						DrawElement(15, 5, i - 11, 72, 0x00FF0000, hot_cue_wide);
 8010bce:	461a      	mov	r2, r3
 8010bd0:	4b10      	ldr	r3, [pc, #64]	; (8010c14 <DrawSpectrum+0x2a0>)
 8010bd2:	9301      	str	r3, [sp, #4]
 8010bd4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8010bd8:	9300      	str	r3, [sp, #0]
 8010bda:	2348      	movs	r3, #72	; 0x48
 8010bdc:	b292      	uxth	r2, r2
 8010bde:	2105      	movs	r1, #5
 8010be0:	200f      	movs	r0, #15
 8010be2:	f7fe fb5f 	bl	800f2a4 <DrawElement>
 8010be6:	e7e0      	b.n	8010baa <DrawSpectrum+0x236>
 8010be8:	200153a4 	.word	0x200153a4
 8010bec:	200007cc 	.word	0x200007cc
 8010bf0:	200007f0 	.word	0x200007f0
 8010bf4:	20000008 	.word	0x20000008
 8010bf8:	200007b8 	.word	0x200007b8
 8010bfc:	c3700000 	.word	0xc3700000
 8010c00:	c00ff000 	.word	0xc00ff000
 8010c04:	200007bc 	.word	0x200007bc
 8010c08:	200007c4 	.word	0x200007c4
 8010c0c:	20001560 	.word	0x20001560
 8010c10:	008f8f8f 	.word	0x008f8f8f
 8010c14:	0801c6f4 	.word	0x0801c6f4
 8010c18:	00ffff00 	.word	0x00ffff00
	for(i = 0; i < 480; i++)
 8010c1c:	3601      	adds	r6, #1
 8010c1e:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 8010c22:	da54      	bge.n	8010cce <DrawSpectrum+0x35a>
		check = position + (int32_t)((i-240)*stretch);
 8010c24:	f1a6 03f0 	sub.w	r3, r6, #240	; 0xf0
 8010c28:	ee07 3a90 	vmov	s15, r3
 8010c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c30:	4bcb      	ldr	r3, [pc, #812]	; (8010f60 <DrawSpectrum+0x5ec>)
 8010c32:	ed93 7a00 	vldr	s14, [r3]
 8010c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c3e:	4bc9      	ldr	r3, [pc, #804]	; (8010f64 <DrawSpectrum+0x5f0>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	ee17 2a90 	vmov	r2, s15
 8010c46:	441a      	add	r2, r3
 8010c48:	4613      	mov	r3, r2
 8010c4a:	4ac7      	ldr	r2, [pc, #796]	; (8010f68 <DrawSpectrum+0x5f4>)
 8010c4c:	6013      	str	r3, [r2, #0]
		if(check > 0) {
 8010c4e:	6813      	ldr	r3, [r2, #0]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	dde3      	ble.n	8010c1c <DrawSpectrum+0x2a8>
			if(first_beat <= rekordbox.timezones) {
 8010c54:	4bc5      	ldr	r3, [pc, #788]	; (8010f6c <DrawSpectrum+0x5f8>)
 8010c56:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8010c5a:	4bc5      	ldr	r3, [pc, #788]	; (8010f70 <DrawSpectrum+0x5fc>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d32c      	bcc.n	8010cbc <DrawSpectrum+0x348>
				if(check >= (int32_t)(rekordbox.timeindex[first_beat]*150/1000)) {
 8010c62:	f503 62a5 	add.w	r2, r3, #1320	; 0x528
 8010c66:	49c1      	ldr	r1, [pc, #772]	; (8010f6c <DrawSpectrum+0x5f8>)
 8010c68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010c6c:	6851      	ldr	r1, [r2, #4]
 8010c6e:	2296      	movs	r2, #150	; 0x96
 8010c70:	fb02 f201 	mul.w	r2, r2, r1
 8010c74:	49bf      	ldr	r1, [pc, #764]	; (8010f74 <DrawSpectrum+0x600>)
 8010c76:	fba1 1202 	umull	r1, r2, r1, r2
 8010c7a:	49bb      	ldr	r1, [pc, #748]	; (8010f68 <DrawSpectrum+0x5f4>)
 8010c7c:	6809      	ldr	r1, [r1, #0]
 8010c7e:	ebb1 1f92 	cmp.w	r1, r2, lsr #6
 8010c82:	db1b      	blt.n	8010cbc <DrawSpectrum+0x348>
					if(rekordbox.phase[first_beat] == 1) {
 8010c84:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8010c88:	4ab8      	ldr	r2, [pc, #736]	; (8010f6c <DrawSpectrum+0x5f8>)
 8010c8a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8010c8e:	889b      	ldrh	r3, [r3, #4]
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	f43f af62 	beq.w	8010b5a <DrawSpectrum+0x1e6>
						VLine(i, 75, 4, 0x00FFFFFF);
 8010c96:	b2b4      	uxth	r4, r6
 8010c98:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010c9c:	2204      	movs	r2, #4
 8010c9e:	214b      	movs	r1, #75	; 0x4b
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f7fe fb47 	bl	800f334 <VLine>
						VLine(i, 161, 4, 0x00FFFFFF);
 8010ca6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010caa:	2204      	movs	r2, #4
 8010cac:	21a1      	movs	r1, #161	; 0xa1
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f7fe fb40 	bl	800f334 <VLine>
					first_beat++;
 8010cb4:	4aae      	ldr	r2, [pc, #696]	; (8010f70 <DrawSpectrum+0x5fc>)
 8010cb6:	6813      	ldr	r3, [r2, #0]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	6013      	str	r3, [r2, #0]
			if(rekordbox.state == 1) {
 8010cbc:	4aab      	ldr	r2, [pc, #684]	; (8010f6c <DrawSpectrum+0x5f8>)
 8010cbe:	f642 5394 	movw	r3, #11668	; 0x2d94
 8010cc2:	5cd3      	ldrb	r3, [r2, r3]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	f43f af58 	beq.w	8010b7a <DrawSpectrum+0x206>
	for(i = 0; i < 480; i++)
 8010cca:	2401      	movs	r4, #1
 8010ccc:	e76e      	b.n	8010bac <DrawSpectrum+0x238>
	VLine(239, 75, 90, 0x00FFFFFF);
 8010cce:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010cd2:	225a      	movs	r2, #90	; 0x5a
 8010cd4:	214b      	movs	r1, #75	; 0x4b
 8010cd6:	20ef      	movs	r0, #239	; 0xef
 8010cd8:	f7fe fb2c 	bl	800f334 <VLine>
	VLine(240, 75, 90, 0x00FFFFFF);
 8010cdc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010ce0:	225a      	movs	r2, #90	; 0x5a
 8010ce2:	214b      	movs	r1, #75	; 0x4b
 8010ce4:	20f0      	movs	r0, #240	; 0xf0
 8010ce6:	f7fe fb25 	bl	800f334 <VLine>
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 8010cea:	4aa0      	ldr	r2, [pc, #640]	; (8010f6c <DrawSpectrum+0x5f8>)
 8010cec:	f242 4344 	movw	r3, #9284	; 0x2444
 8010cf0:	5cd3      	ldrb	r3, [r2, r3]
 8010cf2:	4aa1      	ldr	r2, [pc, #644]	; (8010f78 <DrawSpectrum+0x604>)
 8010cf4:	6812      	ldr	r2, [r2, #0]
 8010cf6:	189b      	adds	r3, r3, r2
 8010cf8:	f100 80eb 	bmi.w	8010ed2 <DrawSpectrum+0x55e>
 8010cfc:	109b      	asrs	r3, r3, #2
 8010cfe:	4a9f      	ldr	r2, [pc, #636]	; (8010f7c <DrawSpectrum+0x608>)
 8010d00:	6013      	str	r3, [r2, #0]
	if(bar / 100 > 0) {
 8010d02:	2b63      	cmp	r3, #99	; 0x63
 8010d04:	f300 80e7 	bgt.w	8010ed6 <DrawSpectrum+0x562>
	else if(bar / 10 > 0) DrawDigit(bar / 10, 314, 51, 7, 0x000000FF);
 8010d08:	2b09      	cmp	r3, #9
 8010d0a:	f300 810c 	bgt.w	8010f26 <DrawSpectrum+0x5b2>
	DrawDigit(bar % 10, 323, 51, 7, 0x000000FF);
 8010d0e:	4b9b      	ldr	r3, [pc, #620]	; (8010f7c <DrawSpectrum+0x608>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	4a9b      	ldr	r2, [pc, #620]	; (8010f80 <DrawSpectrum+0x60c>)
 8010d14:	fb82 1203 	smull	r1, r2, r2, r3
 8010d18:	17d8      	asrs	r0, r3, #31
 8010d1a:	ebc0 00a2 	rsb	r0, r0, r2, asr #2
 8010d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010d22:	0042      	lsls	r2, r0, #1
 8010d24:	1a98      	subs	r0, r3, r2
 8010d26:	24ff      	movs	r4, #255	; 0xff
 8010d28:	9400      	str	r4, [sp, #0]
 8010d2a:	2307      	movs	r3, #7
 8010d2c:	2233      	movs	r2, #51	; 0x33
 8010d2e:	f240 1143 	movw	r1, #323	; 0x143
 8010d32:	b2c0      	uxtb	r0, r0
 8010d34:	f7fe fbba 	bl	800f4ac <DrawDigit>
	DrawElement(2, 2, 332, 63, 0x000000FF, small_point);
 8010d38:	4b92      	ldr	r3, [pc, #584]	; (8010f84 <DrawSpectrum+0x610>)
 8010d3a:	9301      	str	r3, [sp, #4]
 8010d3c:	9400      	str	r4, [sp, #0]
 8010d3e:	233f      	movs	r3, #63	; 0x3f
 8010d40:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8010d44:	2102      	movs	r1, #2
 8010d46:	4608      	mov	r0, r1
 8010d48:	f7fe faac 	bl	800f2a4 <DrawElement>
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 8010d4c:	4d87      	ldr	r5, [pc, #540]	; (8010f6c <DrawSpectrum+0x5f8>)
 8010d4e:	4e8a      	ldr	r6, [pc, #552]	; (8010f78 <DrawSpectrum+0x604>)
 8010d50:	6833      	ldr	r3, [r6, #0]
 8010d52:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8010d56:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8010d5a:	7918      	ldrb	r0, [r3, #4]
 8010d5c:	9400      	str	r4, [sp, #0]
 8010d5e:	2307      	movs	r3, #7
 8010d60:	2233      	movs	r2, #51	; 0x33
 8010d62:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010d66:	f7fe fba1 	bl	800f4ac <DrawDigit>
	DrawElement(19, 6, 348, 63, 0x000000FF, bars);
 8010d6a:	4b87      	ldr	r3, [pc, #540]	; (8010f88 <DrawSpectrum+0x614>)
 8010d6c:	9301      	str	r3, [sp, #4]
 8010d6e:	9400      	str	r4, [sp, #0]
 8010d70:	233f      	movs	r3, #63	; 0x3f
 8010d72:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8010d76:	2106      	movs	r1, #6
 8010d78:	2013      	movs	r0, #19
 8010d7a:	f7fe fa93 	bl	800f2a4 <DrawElement>
	VLine(171, 54, 9, 0x000000FF);
 8010d7e:	4623      	mov	r3, r4
 8010d80:	2209      	movs	r2, #9
 8010d82:	2136      	movs	r1, #54	; 0x36
 8010d84:	20ab      	movs	r0, #171	; 0xab
 8010d86:	f7fe fad5 	bl	800f334 <VLine>
	HLine(172, 54, 28, 0x000000FF);
 8010d8a:	4623      	mov	r3, r4
 8010d8c:	221c      	movs	r2, #28
 8010d8e:	2136      	movs	r1, #54	; 0x36
 8010d90:	20ac      	movs	r0, #172	; 0xac
 8010d92:	f7fe fb0b 	bl	800f3ac <HLine>
	HLine(172, 62, 28, 0x000000FF);
 8010d96:	4623      	mov	r3, r4
 8010d98:	221c      	movs	r2, #28
 8010d9a:	213e      	movs	r1, #62	; 0x3e
 8010d9c:	20ac      	movs	r0, #172	; 0xac
 8010d9e:	f7fe fb05 	bl	800f3ac <HLine>
	VLine(200, 54, 9, 0x000000FF);
 8010da2:	4623      	mov	r3, r4
 8010da4:	2209      	movs	r2, #9
 8010da6:	2136      	movs	r1, #54	; 0x36
 8010da8:	20c8      	movs	r0, #200	; 0xc8
 8010daa:	f7fe fac3 	bl	800f334 <VLine>
	VLine(201, 57, 3, 0x000000FF);
 8010dae:	4623      	mov	r3, r4
 8010db0:	2203      	movs	r2, #3
 8010db2:	2139      	movs	r1, #57	; 0x39
 8010db4:	20c9      	movs	r0, #201	; 0xc9
 8010db6:	f7fe fabd 	bl	800f334 <VLine>
	VLine(202, 57, 3, 0x000000FF);
 8010dba:	4623      	mov	r3, r4
 8010dbc:	2203      	movs	r2, #3
 8010dbe:	2139      	movs	r1, #57	; 0x39
 8010dc0:	20ca      	movs	r0, #202	; 0xca
 8010dc2:	f7fe fab7 	bl	800f334 <VLine>
	VLine(203, 57, 3, 0x000000FF);
 8010dc6:	4623      	mov	r3, r4
 8010dc8:	2203      	movs	r2, #3
 8010dca:	2139      	movs	r1, #57	; 0x39
 8010dcc:	20cb      	movs	r0, #203	; 0xcb
 8010dce:	f7fe fab1 	bl	800f334 <VLine>
	VLine(204, 54, 9, 0x000000FF);
 8010dd2:	4623      	mov	r3, r4
 8010dd4:	2209      	movs	r2, #9
 8010dd6:	2136      	movs	r1, #54	; 0x36
 8010dd8:	20cc      	movs	r0, #204	; 0xcc
 8010dda:	f7fe faab 	bl	800f334 <VLine>
	HLine(205, 54, 28, 0x000000FF);
 8010dde:	4623      	mov	r3, r4
 8010de0:	221c      	movs	r2, #28
 8010de2:	2136      	movs	r1, #54	; 0x36
 8010de4:	20cd      	movs	r0, #205	; 0xcd
 8010de6:	f7fe fae1 	bl	800f3ac <HLine>
	HLine(205, 62, 28, 0x000000FF);
 8010dea:	4623      	mov	r3, r4
 8010dec:	221c      	movs	r2, #28
 8010dee:	213e      	movs	r1, #62	; 0x3e
 8010df0:	20cd      	movs	r0, #205	; 0xcd
 8010df2:	f7fe fadb 	bl	800f3ac <HLine>
	VLine(233, 54, 9, 0x000000FF);
 8010df6:	4623      	mov	r3, r4
 8010df8:	2209      	movs	r2, #9
 8010dfa:	2136      	movs	r1, #54	; 0x36
 8010dfc:	20e9      	movs	r0, #233	; 0xe9
 8010dfe:	f7fe fa99 	bl	800f334 <VLine>
	VLine(234, 57, 3, 0x000000FF);
 8010e02:	4623      	mov	r3, r4
 8010e04:	2203      	movs	r2, #3
 8010e06:	2139      	movs	r1, #57	; 0x39
 8010e08:	20ea      	movs	r0, #234	; 0xea
 8010e0a:	f7fe fa93 	bl	800f334 <VLine>
	VLine(235, 57, 3, 0x000000FF);
 8010e0e:	4623      	mov	r3, r4
 8010e10:	2203      	movs	r2, #3
 8010e12:	2139      	movs	r1, #57	; 0x39
 8010e14:	20eb      	movs	r0, #235	; 0xeb
 8010e16:	f7fe fa8d 	bl	800f334 <VLine>
	VLine(236, 57, 3, 0x000000FF);
 8010e1a:	4623      	mov	r3, r4
 8010e1c:	2203      	movs	r2, #3
 8010e1e:	2139      	movs	r1, #57	; 0x39
 8010e20:	20ec      	movs	r0, #236	; 0xec
 8010e22:	f7fe fa87 	bl	800f334 <VLine>
	VLine(237, 54, 9, 0x000000FF);
 8010e26:	4623      	mov	r3, r4
 8010e28:	2209      	movs	r2, #9
 8010e2a:	2136      	movs	r1, #54	; 0x36
 8010e2c:	20ed      	movs	r0, #237	; 0xed
 8010e2e:	f7fe fa81 	bl	800f334 <VLine>
	HLine(238, 54, 28, 0x000000FF);
 8010e32:	4623      	mov	r3, r4
 8010e34:	221c      	movs	r2, #28
 8010e36:	2136      	movs	r1, #54	; 0x36
 8010e38:	20ee      	movs	r0, #238	; 0xee
 8010e3a:	f7fe fab7 	bl	800f3ac <HLine>
	HLine(238, 62, 28, 0x000000FF);
 8010e3e:	4623      	mov	r3, r4
 8010e40:	221c      	movs	r2, #28
 8010e42:	213e      	movs	r1, #62	; 0x3e
 8010e44:	20ee      	movs	r0, #238	; 0xee
 8010e46:	f7fe fab1 	bl	800f3ac <HLine>
	VLine(266, 54, 9, 0x000000FF);
 8010e4a:	4623      	mov	r3, r4
 8010e4c:	2209      	movs	r2, #9
 8010e4e:	2136      	movs	r1, #54	; 0x36
 8010e50:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8010e54:	f7fe fa6e 	bl	800f334 <VLine>
	VLine(267, 57, 3, 0x000000FF);
 8010e58:	4623      	mov	r3, r4
 8010e5a:	2203      	movs	r2, #3
 8010e5c:	2139      	movs	r1, #57	; 0x39
 8010e5e:	f240 100b 	movw	r0, #267	; 0x10b
 8010e62:	f7fe fa67 	bl	800f334 <VLine>
	VLine(268, 57, 3, 0x000000FF);
 8010e66:	4623      	mov	r3, r4
 8010e68:	2203      	movs	r2, #3
 8010e6a:	2139      	movs	r1, #57	; 0x39
 8010e6c:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8010e70:	f7fe fa60 	bl	800f334 <VLine>
	VLine(269, 57, 3, 0x000000FF);
 8010e74:	4623      	mov	r3, r4
 8010e76:	2203      	movs	r2, #3
 8010e78:	2139      	movs	r1, #57	; 0x39
 8010e7a:	f240 100d 	movw	r0, #269	; 0x10d
 8010e7e:	f7fe fa59 	bl	800f334 <VLine>
	VLine(270, 54, 9, 0x000000FF);
 8010e82:	4623      	mov	r3, r4
 8010e84:	2209      	movs	r2, #9
 8010e86:	2136      	movs	r1, #54	; 0x36
 8010e88:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8010e8c:	f7fe fa52 	bl	800f334 <VLine>
	HLine(271, 54, 28, 0x000000FF);
 8010e90:	4623      	mov	r3, r4
 8010e92:	221c      	movs	r2, #28
 8010e94:	2136      	movs	r1, #54	; 0x36
 8010e96:	f240 100f 	movw	r0, #271	; 0x10f
 8010e9a:	f7fe fa87 	bl	800f3ac <HLine>
	HLine(271, 62, 28, 0x000000FF);
 8010e9e:	4623      	mov	r3, r4
 8010ea0:	221c      	movs	r2, #28
 8010ea2:	213e      	movs	r1, #62	; 0x3e
 8010ea4:	f240 100f 	movw	r0, #271	; 0x10f
 8010ea8:	f7fe fa80 	bl	800f3ac <HLine>
	VLine(299, 54, 9, 0x000000FF);
 8010eac:	4623      	mov	r3, r4
 8010eae:	2209      	movs	r2, #9
 8010eb0:	2136      	movs	r1, #54	; 0x36
 8010eb2:	f240 102b 	movw	r0, #299	; 0x12b
 8010eb6:	f7fe fa3d 	bl	800f334 <VLine>
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 8010eba:	6833      	ldr	r3, [r6, #0]
 8010ebc:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8010ec0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8010ec4:	88ab      	ldrh	r3, [r5, #4]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d13d      	bne.n	8010f46 <DrawSpectrum+0x5d2>
}
 8010eca:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 8010ed2:	3303      	adds	r3, #3
 8010ed4:	e712      	b.n	8010cfc <DrawSpectrum+0x388>
		DrawDigit(bar / 100, 305, 51, 7, 0x000000FF);
 8010ed6:	4c2d      	ldr	r4, [pc, #180]	; (8010f8c <DrawSpectrum+0x618>)
 8010ed8:	fb84 2003 	smull	r2, r0, r4, r3
 8010edc:	17db      	asrs	r3, r3, #31
 8010ede:	ebc3 1060 	rsb	r0, r3, r0, asr #5
 8010ee2:	25ff      	movs	r5, #255	; 0xff
 8010ee4:	9500      	str	r5, [sp, #0]
 8010ee6:	2307      	movs	r3, #7
 8010ee8:	2233      	movs	r2, #51	; 0x33
 8010eea:	f240 1131 	movw	r1, #305	; 0x131
 8010eee:	b2c0      	uxtb	r0, r0
 8010ef0:	f7fe fadc 	bl	800f4ac <DrawDigit>
		DrawDigit(bar % 100 / 10 , 314, 51, 7, 0x000000FF);
 8010ef4:	4b21      	ldr	r3, [pc, #132]	; (8010f7c <DrawSpectrum+0x608>)
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	fb84 3402 	smull	r3, r4, r4, r2
 8010efc:	17d3      	asrs	r3, r2, #31
 8010efe:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 8010f02:	2164      	movs	r1, #100	; 0x64
 8010f04:	fb01 2313 	mls	r3, r1, r3, r2
 8010f08:	481d      	ldr	r0, [pc, #116]	; (8010f80 <DrawSpectrum+0x60c>)
 8010f0a:	fb80 2003 	smull	r2, r0, r0, r3
 8010f0e:	17db      	asrs	r3, r3, #31
 8010f10:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 8010f14:	9500      	str	r5, [sp, #0]
 8010f16:	2307      	movs	r3, #7
 8010f18:	2233      	movs	r2, #51	; 0x33
 8010f1a:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8010f1e:	b2c0      	uxtb	r0, r0
 8010f20:	f7fe fac4 	bl	800f4ac <DrawDigit>
 8010f24:	e6f3      	b.n	8010d0e <DrawSpectrum+0x39a>
	else if(bar / 10 > 0) DrawDigit(bar / 10, 314, 51, 7, 0x000000FF);
 8010f26:	4816      	ldr	r0, [pc, #88]	; (8010f80 <DrawSpectrum+0x60c>)
 8010f28:	fb80 2003 	smull	r2, r0, r0, r3
 8010f2c:	17db      	asrs	r3, r3, #31
 8010f2e:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 8010f32:	23ff      	movs	r3, #255	; 0xff
 8010f34:	9300      	str	r3, [sp, #0]
 8010f36:	2307      	movs	r3, #7
 8010f38:	2233      	movs	r2, #51	; 0x33
 8010f3a:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8010f3e:	b2c0      	uxtb	r0, r0
 8010f40:	f7fe fab4 	bl	800f4ac <DrawDigit>
 8010f44:	e6e3      	b.n	8010d0e <DrawSpectrum+0x39a>
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 8010f46:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8010f4a:	f103 008b 	add.w	r0, r3, #139	; 0x8b
 8010f4e:	9400      	str	r4, [sp, #0]
 8010f50:	2307      	movs	r3, #7
 8010f52:	221c      	movs	r2, #28
 8010f54:	2137      	movs	r1, #55	; 0x37
 8010f56:	b280      	uxth	r0, r0
 8010f58:	f7fe fa66 	bl	800f428 <Rectangle>
}
 8010f5c:	e7b5      	b.n	8010eca <DrawSpectrum+0x556>
 8010f5e:	bf00      	nop
 8010f60:	20000008 	.word	0x20000008
 8010f64:	200007cc 	.word	0x200007cc
 8010f68:	200007b8 	.word	0x200007b8
 8010f6c:	200153a4 	.word	0x200153a4
 8010f70:	200007c0 	.word	0x200007c0
 8010f74:	10624dd3 	.word	0x10624dd3
 8010f78:	200007b4 	.word	0x200007b4
 8010f7c:	200007b0 	.word	0x200007b0
 8010f80:	66666667 	.word	0x66666667
 8010f84:	0801cff8 	.word	0x0801cff8
 8010f88:	0801bdb4 	.word	0x0801bdb4
 8010f8c:	51eb851f 	.word	0x51eb851f

08010f90 <DrawString>:

void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
{
 8010f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f94:	b085      	sub	sp, #20
 8010f96:	9003      	str	r0, [sp, #12]
 8010f98:	460f      	mov	r7, r1
 8010f9a:	4614      	mov	r4, r2
 8010f9c:	9302      	str	r3, [sp, #8]
	hdma2d.Init.Mode = DMA2D_R2M;
 8010f9e:	4883      	ldr	r0, [pc, #524]	; (80111ac <DrawString+0x21c>)
 8010fa0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8010fa4:	6043      	str	r3, [r0, #4]
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 8010fa6:	2302      	movs	r3, #2
 8010fa8:	6083      	str	r3, [r0, #8]
	hdma2d.Init.OutputOffset = Xpos;
 8010faa:	60c1      	str	r1, [r0, #12]
	hdma2d.Instance = DMA2D;
 8010fac:	4b80      	ldr	r3, [pc, #512]	; (80111b0 <DrawString+0x220>)
 8010fae:	6003      	str	r3, [r0, #0]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8010fb0:	f7f0 fe08 	bl	8001bc4 <HAL_DMA2D_Init>
 8010fb4:	b130      	cbz	r0, 8010fc4 <DrawString+0x34>
			{
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
			}
		}
	}
	int xpos = Xpos + 5;
 8010fb6:	3705      	adds	r7, #5
	Ypos -= 4;
 8010fb8:	3c04      	subs	r4, #4
 8010fba:	fa1f f884 	uxth.w	r8, r4
	uint16_t k = 0;
	int i = 0;
	int l = 0;
 8010fbe:	f04f 0900 	mov.w	r9, #0
	while(str[l] != 0) {
 8010fc2:	e0dc      	b.n	801117e <DrawString+0x1ee>
		if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK)
 8010fc4:	4b7b      	ldr	r3, [pc, #492]	; (80111b4 <DrawString+0x224>)
 8010fc6:	7819      	ldrb	r1, [r3, #0]
 8010fc8:	4878      	ldr	r0, [pc, #480]	; (80111ac <DrawString+0x21c>)
 8010fca:	f7f0 ff33 	bl	8001e34 <HAL_DMA2D_ConfigLayer>
 8010fce:	2800      	cmp	r0, #0
 8010fd0:	d1f1      	bne.n	8010fb6 <DrawString+0x26>
			if (HAL_DMA2D_Start(&hdma2d, fontcolor, hltdc.LayerCfg[ActiveLayer].FBStartAdress + 2*(480*(Ypos-20)+Xpos),
 8010fd2:	4b78      	ldr	r3, [pc, #480]	; (80111b4 <DrawString+0x224>)
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	4a78      	ldr	r2, [pc, #480]	; (80111b8 <DrawString+0x228>)
 8010fd8:	2134      	movs	r1, #52	; 0x34
 8010fda:	fb01 2303 	mla	r3, r1, r3, r2
 8010fde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010fe0:	f1a4 0314 	sub.w	r3, r4, #20
 8010fe4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8010fe8:	0159      	lsls	r1, r3, #5
 8010fea:	4439      	add	r1, r7
 8010fec:	2314      	movs	r3, #20
 8010fee:	9300      	str	r3, [sp, #0]
 8010ff0:	f5c7 73f0 	rsb	r3, r7, #480	; 0x1e0
 8010ff4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8010ff8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010ffa:	486c      	ldr	r0, [pc, #432]	; (80111ac <DrawString+0x21c>)
 8010ffc:	f7f0 fe42 	bl	8001c84 <HAL_DMA2D_Start>
 8011000:	2800      	cmp	r0, #0
 8011002:	d1d8      	bne.n	8010fb6 <DrawString+0x26>
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8011004:	210a      	movs	r1, #10
 8011006:	4869      	ldr	r0, [pc, #420]	; (80111ac <DrawString+0x21c>)
 8011008:	f7f0 fe74 	bl	8001cf4 <HAL_DMA2D_PollForTransfer>
 801100c:	e7d3      	b.n	8010fb6 <DrawString+0x26>
		if((str[l] > 32) && (str[l] < 128)) {
			i = 0;
 801100e:	f04f 0a00 	mov.w	sl, #0
 8011012:	e040      	b.n	8011096 <DrawString+0x106>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
						}
						else {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8011014:	4b67      	ldr	r3, [pc, #412]	; (80111b4 <DrawString+0x224>)
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	4a67      	ldr	r2, [pc, #412]	; (80111b8 <DrawString+0x228>)
 801101a:	2134      	movs	r1, #52	; 0x34
 801101c:	fb01 2303 	mla	r3, r1, r3, r2
 8011020:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 8011024:	eba8 0504 	sub.w	r5, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 8011028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801102a:	fb03 7505 	mla	r5, r3, r5, r7
 801102e:	4455      	add	r5, sl
 8011030:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011032:	f7fe f843 	bl	800f0bc <Color_Convertion>
 8011036:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
						}
						k++;
 801103a:	3401      	adds	r4, #1
 801103c:	b2a4      	uxth	r4, r4
					while(k < 13) {
 801103e:	2c0c      	cmp	r4, #12
 8011040:	d82c      	bhi.n	801109c <DrawString+0x10c>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 8011042:	7833      	ldrb	r3, [r6, #0]
 8011044:	3b21      	subs	r3, #33	; 0x21
 8011046:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801104a:	009a      	lsls	r2, r3, #2
 801104c:	4452      	add	r2, sl
 801104e:	4b5b      	ldr	r3, [pc, #364]	; (80111bc <DrawString+0x22c>)
 8011050:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011054:	4123      	asrs	r3, r4
 8011056:	f013 0f01 	tst.w	r3, #1
 801105a:	d0db      	beq.n	8011014 <DrawString+0x84>
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801105c:	4b55      	ldr	r3, [pc, #340]	; (80111b4 <DrawString+0x224>)
 801105e:	781a      	ldrb	r2, [r3, #0]
 8011060:	4b55      	ldr	r3, [pc, #340]	; (80111b8 <DrawString+0x228>)
 8011062:	2134      	movs	r1, #52	; 0x34
 8011064:	fb01 3202 	mla	r2, r1, r2, r3
 8011068:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 801106a:	eba8 0304 	sub.w	r3, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801106e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8011070:	fb02 7303 	mla	r3, r2, r3, r7
 8011074:	4453      	add	r3, sl
 8011076:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801107a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 801107e:	e7dc      	b.n	801103a <DrawString+0xaa>
				k = 0;
 8011080:	2400      	movs	r4, #0
 8011082:	e7dc      	b.n	801103e <DrawString+0xae>
					}
				}
				if(font[(str[l]-33)*12+i] == 0) {
					if(font[(str[l]-33)*12+i+1] == 0) {
						i++;
 8011084:	f10a 0a01 	add.w	sl, sl, #1
				else {
					i++;
				}
			}
			while(i < 12);
			xpos += i;
 8011088:	4457      	add	r7, sl
 801108a:	e083      	b.n	8011194 <DrawString+0x204>
					i++;
 801108c:	f10a 0a01 	add.w	sl, sl, #1
			while(i < 12);
 8011090:	f1ba 0f0b 	cmp.w	sl, #11
 8011094:	dcf8      	bgt.n	8011088 <DrawString+0xf8>
				if(xpos < 470) {
 8011096:	f5b7 7feb 	cmp.w	r7, #470	; 0x1d6
 801109a:	dbf1      	blt.n	8011080 <DrawString+0xf0>
				if(font[(str[l]-33)*12+i] == 0) {
 801109c:	7833      	ldrb	r3, [r6, #0]
 801109e:	3b21      	subs	r3, #33	; 0x21
 80110a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80110a4:	009a      	lsls	r2, r3, #2
 80110a6:	4452      	add	r2, sl
 80110a8:	4b44      	ldr	r3, [pc, #272]	; (80111bc <DrawString+0x22c>)
 80110aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1ec      	bne.n	801108c <DrawString+0xfc>
					if(font[(str[l]-33)*12+i+1] == 0) {
 80110b2:	3201      	adds	r2, #1
 80110b4:	4b41      	ldr	r3, [pc, #260]	; (80111bc <DrawString+0x22c>)
 80110b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d0e2      	beq.n	8011084 <DrawString+0xf4>
					i++;
 80110be:	f10a 0a01 	add.w	sl, sl, #1
 80110c2:	e7e5      	b.n	8011090 <DrawString+0x100>
		}
		if(str[l] > 191) {
			i = 0;
 80110c4:	f04f 0a00 	mov.w	sl, #0
 80110c8:	e040      	b.n	801114c <DrawString+0x1bc>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
						}
						else {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 80110ca:	4b3a      	ldr	r3, [pc, #232]	; (80111b4 <DrawString+0x224>)
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	4a3a      	ldr	r2, [pc, #232]	; (80111b8 <DrawString+0x228>)
 80110d0:	2134      	movs	r1, #52	; 0x34
 80110d2:	fb01 2303 	mla	r3, r1, r3, r2
 80110d6:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 80110da:	eba8 0504 	sub.w	r5, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 80110de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80110e0:	fb03 7505 	mla	r5, r3, r5, r7
 80110e4:	4455      	add	r5, sl
 80110e6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80110e8:	f7fd ffe8 	bl	800f0bc <Color_Convertion>
 80110ec:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
						}
						k++;
 80110f0:	3401      	adds	r4, #1
 80110f2:	b2a4      	uxth	r4, r4
					while(k < 13) {
 80110f4:	2c0c      	cmp	r4, #12
 80110f6:	d82c      	bhi.n	8011152 <DrawString+0x1c2>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 80110f8:	7833      	ldrb	r3, [r6, #0]
 80110fa:	3bc0      	subs	r3, #192	; 0xc0
 80110fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011100:	009a      	lsls	r2, r3, #2
 8011102:	4452      	add	r2, sl
 8011104:	4b2e      	ldr	r3, [pc, #184]	; (80111c0 <DrawString+0x230>)
 8011106:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801110a:	4123      	asrs	r3, r4
 801110c:	f013 0f01 	tst.w	r3, #1
 8011110:	d0db      	beq.n	80110ca <DrawString+0x13a>
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8011112:	4b28      	ldr	r3, [pc, #160]	; (80111b4 <DrawString+0x224>)
 8011114:	781a      	ldrb	r2, [r3, #0]
 8011116:	4b28      	ldr	r3, [pc, #160]	; (80111b8 <DrawString+0x228>)
 8011118:	2134      	movs	r1, #52	; 0x34
 801111a:	fb01 3202 	mla	r2, r1, r2, r3
 801111e:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8011120:	eba8 0304 	sub.w	r3, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8011124:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8011126:	fb02 7303 	mla	r3, r2, r3, r7
 801112a:	4453      	add	r3, sl
 801112c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011130:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8011134:	e7dc      	b.n	80110f0 <DrawString+0x160>
				k = 0;
 8011136:	2400      	movs	r4, #0
 8011138:	e7dc      	b.n	80110f4 <DrawString+0x164>
					}
				}
				if(ru_font[(str[l]-192)*12+i] == 0) {
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
						i++;
 801113a:	f10a 0a01 	add.w	sl, sl, #1
				else {
					i++;
				}
			}
			while(i < 12);
			xpos += i;
 801113e:	4457      	add	r7, sl
 8011140:	e02b      	b.n	801119a <DrawString+0x20a>
					i++;
 8011142:	f10a 0a01 	add.w	sl, sl, #1
			while(i < 12);
 8011146:	f1ba 0f0b 	cmp.w	sl, #11
 801114a:	dcf8      	bgt.n	801113e <DrawString+0x1ae>
				if(xpos < 470) {
 801114c:	f5b7 7feb 	cmp.w	r7, #470	; 0x1d6
 8011150:	dbf1      	blt.n	8011136 <DrawString+0x1a6>
				if(ru_font[(str[l]-192)*12+i] == 0) {
 8011152:	7833      	ldrb	r3, [r6, #0]
 8011154:	3bc0      	subs	r3, #192	; 0xc0
 8011156:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801115a:	009a      	lsls	r2, r3, #2
 801115c:	4452      	add	r2, sl
 801115e:	4b18      	ldr	r3, [pc, #96]	; (80111c0 <DrawString+0x230>)
 8011160:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1ec      	bne.n	8011142 <DrawString+0x1b2>
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
 8011168:	3201      	adds	r2, #1
 801116a:	4b15      	ldr	r3, [pc, #84]	; (80111c0 <DrawString+0x230>)
 801116c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d0e2      	beq.n	801113a <DrawString+0x1aa>
					i++;
 8011174:	f10a 0a01 	add.w	sl, sl, #1
 8011178:	e7e5      	b.n	8011146 <DrawString+0x1b6>
		}
		if(str[l] == 32) {
			xpos += 5;
		}
		l++;
 801117a:	f109 0901 	add.w	r9, r9, #1
	while(str[l] != 0) {
 801117e:	9b03      	ldr	r3, [sp, #12]
 8011180:	eb03 0609 	add.w	r6, r3, r9
 8011184:	f813 3009 	ldrb.w	r3, [r3, r9]
 8011188:	b163      	cbz	r3, 80111a4 <DrawString+0x214>
		if((str[l] > 32) && (str[l] < 128)) {
 801118a:	3b21      	subs	r3, #33	; 0x21
 801118c:	b2db      	uxtb	r3, r3
 801118e:	2b5e      	cmp	r3, #94	; 0x5e
 8011190:	f67f af3d 	bls.w	801100e <DrawString+0x7e>
		if(str[l] > 191) {
 8011194:	7833      	ldrb	r3, [r6, #0]
 8011196:	2bbf      	cmp	r3, #191	; 0xbf
 8011198:	d894      	bhi.n	80110c4 <DrawString+0x134>
		if(str[l] == 32) {
 801119a:	7833      	ldrb	r3, [r6, #0]
 801119c:	2b20      	cmp	r3, #32
 801119e:	d1ec      	bne.n	801117a <DrawString+0x1ea>
			xpos += 5;
 80111a0:	3705      	adds	r7, #5
 80111a2:	e7ea      	b.n	801117a <DrawString+0x1ea>
	}
}
 80111a4:	b005      	add	sp, #20
 80111a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111aa:	bf00      	nop
 80111ac:	20001574 	.word	0x20001574
 80111b0:	4002b000 	.word	0x4002b000
 80111b4:	200007db 	.word	0x200007db
 80111b8:	20001adc 	.word	0x20001adc
 80111bc:	0801be4c 	.word	0x0801be4c
 80111c0:	0801c9e8 	.word	0x0801c9e8

080111c4 <DrawMenu>:
{
 80111c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111c6:	ed2d 8b02 	vpush	{d8}
 80111ca:	b0c3      	sub	sp, #268	; 0x10c
	if(menu_mode == 0) {
 80111cc:	4bb9      	ldr	r3, [pc, #740]	; (80114b4 <DrawMenu+0x2f0>)
 80111ce:	f993 3000 	ldrsb.w	r3, [r3]
 80111d2:	b18b      	cbz	r3, 80111f8 <DrawMenu+0x34>
	else if(menu_mode == 1) {
 80111d4:	2b01      	cmp	r3, #1
 80111d6:	d026      	beq.n	8011226 <DrawMenu+0x62>
	else if(menu_mode == 2) {
 80111d8:	2b02      	cmp	r3, #2
 80111da:	f000 8187 	beq.w	80114ec <DrawMenu+0x328>
	else if(menu_mode == 3) {
 80111de:	2b03      	cmp	r3, #3
 80111e0:	d11d      	bne.n	801121e <DrawMenu+0x5a>
		DrawString("ERROR! INSERT SD CARD AND RESTART!", 0, 20, 0x00FFFFFF, 0x00FF0000);
 80111e2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80111ec:	2214      	movs	r2, #20
 80111ee:	2100      	movs	r1, #0
 80111f0:	48b1      	ldr	r0, [pc, #708]	; (80114b8 <DrawMenu+0x2f4>)
 80111f2:	f7ff fecd 	bl	8010f90 <DrawString>
}
 80111f6:	e012      	b.n	801121e <DrawMenu+0x5a>
		char string[255] = " { ";
 80111f8:	4bb0      	ldr	r3, [pc, #704]	; (80114bc <DrawMenu+0x2f8>)
 80111fa:	9302      	str	r3, [sp, #8]
 80111fc:	22fb      	movs	r2, #251	; 0xfb
 80111fe:	2100      	movs	r1, #0
 8011200:	a803      	add	r0, sp, #12
 8011202:	f006 f86d 	bl	80172e0 <memset>
		DrawString(strcat(string, rekordbox.file), 0, 20, 0x00FFFFFF, 0x000000FF);
 8011206:	49ae      	ldr	r1, [pc, #696]	; (80114c0 <DrawMenu+0x2fc>)
 8011208:	a802      	add	r0, sp, #8
 801120a:	f006 f949 	bl	80174a0 <strcat>
 801120e:	23ff      	movs	r3, #255	; 0xff
 8011210:	9300      	str	r3, [sp, #0]
 8011212:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011216:	2214      	movs	r2, #20
 8011218:	2100      	movs	r1, #0
 801121a:	f7ff feb9 	bl	8010f90 <DrawString>
}
 801121e:	b043      	add	sp, #268	; 0x10c
 8011220:	ecbd 8b02 	vpop	{d8}
 8011224:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(Total_tracks > 7) {
 8011226:	4ba7      	ldr	r3, [pc, #668]	; (80114c4 <DrawMenu+0x300>)
 8011228:	881b      	ldrh	r3, [r3, #0]
 801122a:	2b07      	cmp	r3, #7
 801122c:	d957      	bls.n	80112de <DrawMenu+0x11a>
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 801122e:	ee07 3a90 	vmov	s15, r3
 8011232:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011236:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80114c8 <DrawMenu+0x304>
 801123a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801123e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8011242:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011246:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801124a:	ee17 3a10 	vmov	r3, s14
 801124e:	b29d      	uxth	r5, r3
			uint16_t step_scroll = (140/(float)Total_tracks)*(float)str_increment;
 8011250:	4b9e      	ldr	r3, [pc, #632]	; (80114cc <DrawMenu+0x308>)
 8011252:	ed93 7a00 	vldr	s14, [r3]
 8011256:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801125a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801125e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011262:	ee17 3a90 	vmov	r3, s15
 8011266:	b29c      	uxth	r4, r3
			if(scroll_lenght < 5) scroll_lenght = 5;
 8011268:	2d04      	cmp	r5, #4
 801126a:	d800      	bhi.n	801126e <DrawMenu+0xaa>
 801126c:	2505      	movs	r5, #5
			VLine(1, 21, 140, 0x00FFFFFF);
 801126e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011272:	228c      	movs	r2, #140	; 0x8c
 8011274:	2115      	movs	r1, #21
 8011276:	2001      	movs	r0, #1
 8011278:	f7fe f85c 	bl	800f334 <VLine>
			VLine(3, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 801127c:	f104 0616 	add.w	r6, r4, #22
 8011280:	b2b6      	uxth	r6, r6
 8011282:	1eaf      	subs	r7, r5, #2
 8011284:	b2bf      	uxth	r7, r7
 8011286:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801128a:	463a      	mov	r2, r7
 801128c:	4631      	mov	r1, r6
 801128e:	2003      	movs	r0, #3
 8011290:	f7fe f850 	bl	800f334 <VLine>
			VLine(4, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 8011294:	3415      	adds	r4, #21
 8011296:	b2a4      	uxth	r4, r4
 8011298:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801129c:	462a      	mov	r2, r5
 801129e:	4621      	mov	r1, r4
 80112a0:	2004      	movs	r0, #4
 80112a2:	f7fe f847 	bl	800f334 <VLine>
			VLine(5, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80112a6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80112aa:	462a      	mov	r2, r5
 80112ac:	4621      	mov	r1, r4
 80112ae:	2005      	movs	r0, #5
 80112b0:	f7fe f840 	bl	800f334 <VLine>
			VLine(6, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80112b4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80112b8:	462a      	mov	r2, r5
 80112ba:	4621      	mov	r1, r4
 80112bc:	2006      	movs	r0, #6
 80112be:	f7fe f839 	bl	800f334 <VLine>
			VLine(7, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 80112c2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80112c6:	463a      	mov	r2, r7
 80112c8:	4631      	mov	r1, r6
 80112ca:	2007      	movs	r0, #7
 80112cc:	f7fe f832 	bl	800f334 <VLine>
			VLine(9, 21, 140, 0x00FFFFFF);
 80112d0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80112d4:	228c      	movs	r2, #140	; 0x8c
 80112d6:	2115      	movs	r1, #21
 80112d8:	2009      	movs	r0, #9
 80112da:	f7fe f82b 	bl	800f334 <VLine>
		DrawString(" [FILES]", 0, 20, 0x00FFFFFF, 0x000000FF);
 80112de:	23ff      	movs	r3, #255	; 0xff
 80112e0:	9300      	str	r3, [sp, #0]
 80112e2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80112e6:	2214      	movs	r2, #20
 80112e8:	2100      	movs	r1, #0
 80112ea:	4879      	ldr	r0, [pc, #484]	; (80114d0 <DrawMenu+0x30c>)
 80112ec:	f7ff fe50 	bl	8010f90 <DrawString>
		int i = 0;
 80112f0:	2600      	movs	r6, #0
	uint32_t backcolor = 0;
 80112f2:	4635      	mov	r5, r6
		while(21+20*(i+1) < 165) {
 80112f4:	e025      	b.n	8011342 <DrawMenu+0x17e>
				if(i == Mark_number) {
 80112f6:	4b77      	ldr	r3, [pc, #476]	; (80114d4 <DrawMenu+0x310>)
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	42b3      	cmp	r3, r6
 80112fc:	d05d      	beq.n	80113ba <DrawMenu+0x1f6>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, 0x000000FF);
 80112fe:	4431      	add	r1, r6
 8011300:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8011304:	4b74      	ldr	r3, [pc, #464]	; (80114d8 <DrawMenu+0x314>)
 8011306:	4419      	add	r1, r3
 8011308:	a802      	add	r0, sp, #8
 801130a:	f006 f8c9 	bl	80174a0 <strcat>
 801130e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011312:	009a      	lsls	r2, r3, #2
 8011314:	3215      	adds	r2, #21
 8011316:	23ff      	movs	r3, #255	; 0xff
 8011318:	9300      	str	r3, [sp, #0]
 801131a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801131e:	b292      	uxth	r2, r2
 8011320:	210b      	movs	r1, #11
 8011322:	f7ff fe35 	bl	8010f90 <DrawString>
				backcolor += 0x00202020;
 8011326:	f105 1520 	add.w	r5, r5, #2097184	; 0x200020
 801132a:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
				if(backcolor > 0x00404040) backcolor = 0;
 801132e:	4b6b      	ldr	r3, [pc, #428]	; (80114dc <DrawMenu+0x318>)
 8011330:	429d      	cmp	r5, r3
 8011332:	f200 80bd 	bhi.w	80114b0 <DrawMenu+0x2ec>
			if(i >= Total_tracks) break;
 8011336:	4b63      	ldr	r3, [pc, #396]	; (80114c4 <DrawMenu+0x300>)
 8011338:	881b      	ldrh	r3, [r3, #0]
 801133a:	42a3      	cmp	r3, r4
 801133c:	f77f af6f 	ble.w	801121e <DrawMenu+0x5a>
			i++;
 8011340:	4626      	mov	r6, r4
		while(21+20*(i+1) < 165) {
 8011342:	1c74      	adds	r4, r6, #1
 8011344:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8011348:	0093      	lsls	r3, r2, #2
 801134a:	3315      	adds	r3, #21
 801134c:	2ba4      	cmp	r3, #164	; 0xa4
 801134e:	f73f af66 	bgt.w	801121e <DrawMenu+0x5a>
			char string[255] = "{ ";
 8011352:	f242 037b 	movw	r3, #8315	; 0x207b
 8011356:	9302      	str	r3, [sp, #8]
 8011358:	22fb      	movs	r2, #251	; 0xfb
 801135a:	2100      	movs	r1, #0
 801135c:	a803      	add	r0, sp, #12
 801135e:	f005 ffbf 	bl	80172e0 <memset>
			if(i == Track_number - str_increment) {
 8011362:	4b5a      	ldr	r3, [pc, #360]	; (80114cc <DrawMenu+0x308>)
 8011364:	6819      	ldr	r1, [r3, #0]
 8011366:	4b5e      	ldr	r3, [pc, #376]	; (80114e0 <DrawMenu+0x31c>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	1a5b      	subs	r3, r3, r1
 801136c:	42b3      	cmp	r3, r6
 801136e:	d0c2      	beq.n	80112f6 <DrawMenu+0x132>
			else if(i == String_number) {
 8011370:	4b5c      	ldr	r3, [pc, #368]	; (80114e4 <DrawMenu+0x320>)
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	42b3      	cmp	r3, r6
 8011376:	d035      	beq.n	80113e4 <DrawMenu+0x220>
				if(i == Mark_number) {
 8011378:	4b56      	ldr	r3, [pc, #344]	; (80114d4 <DrawMenu+0x310>)
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	42b3      	cmp	r3, r6
 801137e:	f000 8082 	beq.w	8011486 <DrawMenu+0x2c2>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, backcolor);
 8011382:	4431      	add	r1, r6
 8011384:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8011388:	4b53      	ldr	r3, [pc, #332]	; (80114d8 <DrawMenu+0x314>)
 801138a:	4419      	add	r1, r3
 801138c:	a802      	add	r0, sp, #8
 801138e:	f006 f887 	bl	80174a0 <strcat>
 8011392:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011396:	009a      	lsls	r2, r3, #2
 8011398:	3215      	adds	r2, #21
 801139a:	9500      	str	r5, [sp, #0]
 801139c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80113a0:	b292      	uxth	r2, r2
 80113a2:	210b      	movs	r1, #11
 80113a4:	f7ff fdf4 	bl	8010f90 <DrawString>
				backcolor += 0x00202020;
 80113a8:	f105 1520 	add.w	r5, r5, #2097184	; 0x200020
 80113ac:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
				if(backcolor > 0x00404040) backcolor = 0;
 80113b0:	4b4a      	ldr	r3, [pc, #296]	; (80114dc <DrawMenu+0x318>)
 80113b2:	429d      	cmp	r5, r3
 80113b4:	d9bf      	bls.n	8011336 <DrawMenu+0x172>
 80113b6:	2500      	movs	r5, #0
 80113b8:	e7bd      	b.n	8011336 <DrawMenu+0x172>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 80113ba:	4431      	add	r1, r6
 80113bc:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80113c0:	4b45      	ldr	r3, [pc, #276]	; (80114d8 <DrawMenu+0x314>)
 80113c2:	4419      	add	r1, r3
 80113c4:	a802      	add	r0, sp, #8
 80113c6:	f006 f86b 	bl	80174a0 <strcat>
 80113ca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80113ce:	009a      	lsls	r2, r3, #2
 80113d0:	3215      	adds	r2, #21
 80113d2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80113d6:	9300      	str	r3, [sp, #0]
 80113d8:	2300      	movs	r3, #0
 80113da:	b292      	uxth	r2, r2
 80113dc:	210b      	movs	r1, #11
 80113de:	f7ff fdd7 	bl	8010f90 <DrawString>
 80113e2:	e7a0      	b.n	8011326 <DrawMenu+0x162>
				if(str_offset > 10) {
 80113e4:	4b40      	ldr	r3, [pc, #256]	; (80114e8 <DrawMenu+0x324>)
 80113e6:	681f      	ldr	r7, [r3, #0]
 80113e8:	2f0a      	cmp	r7, #10
 80113ea:	dc1f      	bgt.n	801142c <DrawMenu+0x268>
					if(i == Mark_number) {
 80113ec:	4b39      	ldr	r3, [pc, #228]	; (80114d4 <DrawMenu+0x310>)
 80113ee:	781b      	ldrb	r3, [r3, #0]
 80113f0:	42b3      	cmp	r3, r6
 80113f2:	d033      	beq.n	801145c <DrawMenu+0x298>
						DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, backcolor);
 80113f4:	4431      	add	r1, r6
 80113f6:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80113fa:	4b37      	ldr	r3, [pc, #220]	; (80114d8 <DrawMenu+0x314>)
 80113fc:	4419      	add	r1, r3
 80113fe:	a802      	add	r0, sp, #8
 8011400:	f006 f84e 	bl	80174a0 <strcat>
 8011404:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011408:	009a      	lsls	r2, r3, #2
 801140a:	3215      	adds	r2, #21
 801140c:	9500      	str	r5, [sp, #0]
 801140e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011412:	b292      	uxth	r2, r2
 8011414:	210b      	movs	r1, #11
 8011416:	f7ff fdbb 	bl	8010f90 <DrawString>
				backcolor += 0x00202020;
 801141a:	f105 1520 	add.w	r5, r5, #2097184	; 0x200020
 801141e:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
				if(backcolor > 0x00404040) backcolor = 0;
 8011422:	4b2e      	ldr	r3, [pc, #184]	; (80114dc <DrawMenu+0x318>)
 8011424:	429d      	cmp	r5, r3
 8011426:	d986      	bls.n	8011336 <DrawMenu+0x172>
 8011428:	2500      	movs	r5, #0
 801142a:	e784      	b.n	8011336 <DrawMenu+0x172>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11 + str_offset, 21+20*(i+1), 0x00FFFFFF, 0x00008F00);
 801142c:	4431      	add	r1, r6
 801142e:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8011432:	4b29      	ldr	r3, [pc, #164]	; (80114d8 <DrawMenu+0x314>)
 8011434:	4419      	add	r1, r3
 8011436:	a802      	add	r0, sp, #8
 8011438:	f006 f832 	bl	80174a0 <strcat>
 801143c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011440:	009a      	lsls	r2, r3, #2
 8011442:	3215      	adds	r2, #21
 8011444:	f107 010b 	add.w	r1, r7, #11
 8011448:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 801144c:	9300      	str	r3, [sp, #0]
 801144e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011452:	b292      	uxth	r2, r2
 8011454:	b289      	uxth	r1, r1
 8011456:	f7ff fd9b 	bl	8010f90 <DrawString>
 801145a:	e7de      	b.n	801141a <DrawMenu+0x256>
						DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 801145c:	4431      	add	r1, r6
 801145e:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8011462:	4b1d      	ldr	r3, [pc, #116]	; (80114d8 <DrawMenu+0x314>)
 8011464:	4419      	add	r1, r3
 8011466:	a802      	add	r0, sp, #8
 8011468:	f006 f81a 	bl	80174a0 <strcat>
 801146c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011470:	009a      	lsls	r2, r3, #2
 8011472:	3215      	adds	r2, #21
 8011474:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011478:	9300      	str	r3, [sp, #0]
 801147a:	2300      	movs	r3, #0
 801147c:	b292      	uxth	r2, r2
 801147e:	210b      	movs	r1, #11
 8011480:	f7ff fd86 	bl	8010f90 <DrawString>
 8011484:	e7c9      	b.n	801141a <DrawMenu+0x256>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 8011486:	4431      	add	r1, r6
 8011488:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 801148c:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <DrawMenu+0x314>)
 801148e:	4419      	add	r1, r3
 8011490:	a802      	add	r0, sp, #8
 8011492:	f006 f805 	bl	80174a0 <strcat>
 8011496:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801149a:	009a      	lsls	r2, r3, #2
 801149c:	3215      	adds	r2, #21
 801149e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	2300      	movs	r3, #0
 80114a6:	b292      	uxth	r2, r2
 80114a8:	210b      	movs	r1, #11
 80114aa:	f7ff fd71 	bl	8010f90 <DrawString>
 80114ae:	e77b      	b.n	80113a8 <DrawMenu+0x1e4>
				if(backcolor > 0x00404040) backcolor = 0;
 80114b0:	2500      	movs	r5, #0
 80114b2:	e740      	b.n	8011336 <DrawMenu+0x172>
 80114b4:	200007c8 	.word	0x200007c8
 80114b8:	0801bd4c 	.word	0x0801bd4c
 80114bc:	00207b20 	.word	0x00207b20
 80114c0:	200157a0 	.word	0x200157a0
 80114c4:	200007dc 	.word	0x200007dc
 80114c8:	430c0000 	.word	0x430c0000
 80114cc:	20001538 	.word	0x20001538
 80114d0:	0801bcf0 	.word	0x0801bcf0
 80114d4:	20000074 	.word	0x20000074
 80114d8:	20008f6c 	.word	0x20008f6c
 80114dc:	00404040 	.word	0x00404040
 80114e0:	200007e0 	.word	0x200007e0
 80114e4:	2000007c 	.word	0x2000007c
 80114e8:	2000153c 	.word	0x2000153c
		DrawString(" [SETTINGS]", 0, 20, 0x00FFFFFF, 0x000000FF);
 80114ec:	23ff      	movs	r3, #255	; 0xff
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80114f4:	2214      	movs	r2, #20
 80114f6:	2100      	movs	r1, #0
 80114f8:	487d      	ldr	r0, [pc, #500]	; (80116f0 <DrawMenu+0x52c>)
 80114fa:	f7ff fd49 	bl	8010f90 <DrawString>
		char stri[50] = {0};
 80114fe:	2232      	movs	r2, #50	; 0x32
 8011500:	2100      	movs	r1, #0
 8011502:	a802      	add	r0, sp, #8
 8011504:	f005 feec 	bl	80172e0 <memset>
		sprintf(stri, "%s %d %s", " Volume", volume, "%");
 8011508:	4c7a      	ldr	r4, [pc, #488]	; (80116f4 <DrawMenu+0x530>)
 801150a:	7823      	ldrb	r3, [r4, #0]
 801150c:	4a7a      	ldr	r2, [pc, #488]	; (80116f8 <DrawMenu+0x534>)
 801150e:	9200      	str	r2, [sp, #0]
 8011510:	4a7a      	ldr	r2, [pc, #488]	; (80116fc <DrawMenu+0x538>)
 8011512:	497b      	ldr	r1, [pc, #492]	; (8011700 <DrawMenu+0x53c>)
 8011514:	a802      	add	r0, sp, #8
 8011516:	f005 ffa3 	bl	8017460 <siprintf>
		DrawString(stri, 0, 40, 0x00FFFFFF, backcolor);
 801151a:	4b7a      	ldr	r3, [pc, #488]	; (8011704 <DrawMenu+0x540>)
 801151c:	9300      	str	r3, [sp, #0]
 801151e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011522:	2228      	movs	r2, #40	; 0x28
 8011524:	2100      	movs	r1, #0
 8011526:	a802      	add	r0, sp, #8
 8011528:	f7ff fd32 	bl	8010f90 <DrawString>
		VLine(40, 41, 18, 0x00FFFFFF);
 801152c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011530:	2212      	movs	r2, #18
 8011532:	2129      	movs	r1, #41	; 0x29
 8011534:	2028      	movs	r0, #40	; 0x28
 8011536:	f7fd fefd 	bl	800f334 <VLine>
		VLine(440, 41, 18, 0x00FFFFFF);
 801153a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801153e:	2212      	movs	r2, #18
 8011540:	2129      	movs	r1, #41	; 0x29
 8011542:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8011546:	f7fd fef5 	bl	800f334 <VLine>
		HLine(40, 41, 400, 0x00FFFFFF);
 801154a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801154e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011552:	2129      	movs	r1, #41	; 0x29
 8011554:	2028      	movs	r0, #40	; 0x28
 8011556:	f7fd ff29 	bl	800f3ac <HLine>
		HLine(40, 59, 401, 0x00FFFFFF);
 801155a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801155e:	f240 1291 	movw	r2, #401	; 0x191
 8011562:	213b      	movs	r1, #59	; 0x3b
 8011564:	2028      	movs	r0, #40	; 0x28
 8011566:	f7fd ff21 	bl	800f3ac <HLine>
		uint32_t vol_pos = (float)volume/100*400;
 801156a:	7823      	ldrb	r3, [r4, #0]
 801156c:	ee07 3a10 	vmov	s14, r3
 8011570:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011574:	eddf 6a64 	vldr	s13, [pc, #400]	; 8011708 <DrawMenu+0x544>
 8011578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801157c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 801170c <DrawMenu+0x548>
 8011580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011588:	ee17 2a90 	vmov	r2, s15
		if(vol_pos != 0) Rectangle(40, 42, vol_pos, 17, 0x00FFFFFF);
 801158c:	2a00      	cmp	r2, #0
 801158e:	f040 809b 	bne.w	80116c8 <DrawMenu+0x504>
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 8011592:	4b5f      	ldr	r3, [pc, #380]	; (8011710 <DrawMenu+0x54c>)
 8011594:	edd3 7a00 	vldr	s15, [r3]
 8011598:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8011714 <DrawMenu+0x550>
 801159c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80115a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115a4:	ee17 4a90 	vmov	r4, s15
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 80115a8:	4b53      	ldr	r3, [pc, #332]	; (80116f8 <DrawMenu+0x534>)
 80115aa:	9300      	str	r3, [sp, #0]
 80115ac:	ee17 3a90 	vmov	r3, s15
 80115b0:	4a59      	ldr	r2, [pc, #356]	; (8011718 <DrawMenu+0x554>)
 80115b2:	4953      	ldr	r1, [pc, #332]	; (8011700 <DrawMenu+0x53c>)
 80115b4:	a802      	add	r0, sp, #8
 80115b6:	f005 ff53 	bl	8017460 <siprintf>
		DrawString(stri, 0, 80, 0x00FFFFFF, backcolor);
 80115ba:	4b58      	ldr	r3, [pc, #352]	; (801171c <DrawMenu+0x558>)
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80115c2:	2250      	movs	r2, #80	; 0x50
 80115c4:	2100      	movs	r1, #0
 80115c6:	a802      	add	r0, sp, #8
 80115c8:	f7ff fce2 	bl	8010f90 <DrawString>
		VLine(40, 81, 18, 0x00FFFFFF);
 80115cc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80115d0:	2212      	movs	r2, #18
 80115d2:	2151      	movs	r1, #81	; 0x51
 80115d4:	2028      	movs	r0, #40	; 0x28
 80115d6:	f7fd fead 	bl	800f334 <VLine>
		VLine(440, 81, 18, 0x00FFFFFF);
 80115da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80115de:	2212      	movs	r2, #18
 80115e0:	2151      	movs	r1, #81	; 0x51
 80115e2:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80115e6:	f7fd fea5 	bl	800f334 <VLine>
		HLine(40, 81, 400, 0x00FFFFFF);
 80115ea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80115ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80115f2:	2151      	movs	r1, #81	; 0x51
 80115f4:	2028      	movs	r0, #40	; 0x28
 80115f6:	f7fd fed9 	bl	800f3ac <HLine>
		HLine(40, 99, 401, 0x00FFFFFF);
 80115fa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80115fe:	f240 1291 	movw	r2, #401	; 0x191
 8011602:	2163      	movs	r1, #99	; 0x63
 8011604:	2028      	movs	r0, #40	; 0x28
 8011606:	f7fd fed1 	bl	800f3ac <HLine>
		if(jogsens_pos != 0) Rectangle(40, 82, jogsens_pos, 17, 0x00FFFFFF);
 801160a:	00a4      	lsls	r4, r4, #2
 801160c:	d166      	bne.n	80116dc <DrawMenu+0x518>
		sprintf(stri, "%s %d %s", " Auto cue sensitivity", (int)((float)acue_sensitivity/250*100), "%");
 801160e:	4c44      	ldr	r4, [pc, #272]	; (8011720 <DrawMenu+0x55c>)
 8011610:	7823      	ldrb	r3, [r4, #0]
 8011612:	ee07 3a10 	vmov	s14, r3
 8011616:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801161a:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8011724 <DrawMenu+0x560>
 801161e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8011622:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8011708 <DrawMenu+0x544>
 8011626:	ee67 7a87 	vmul.f32	s15, s15, s14
 801162a:	4b33      	ldr	r3, [pc, #204]	; (80116f8 <DrawMenu+0x534>)
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011632:	ee17 3a90 	vmov	r3, s15
 8011636:	4a3c      	ldr	r2, [pc, #240]	; (8011728 <DrawMenu+0x564>)
 8011638:	4931      	ldr	r1, [pc, #196]	; (8011700 <DrawMenu+0x53c>)
 801163a:	a802      	add	r0, sp, #8
 801163c:	f005 ff10 	bl	8017460 <siprintf>
		DrawString(stri, 0, 120, 0x00FFFFFF, backcolor);
 8011640:	4b3a      	ldr	r3, [pc, #232]	; (801172c <DrawMenu+0x568>)
 8011642:	9300      	str	r3, [sp, #0]
 8011644:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011648:	2278      	movs	r2, #120	; 0x78
 801164a:	2100      	movs	r1, #0
 801164c:	a802      	add	r0, sp, #8
 801164e:	f7ff fc9f 	bl	8010f90 <DrawString>
		VLine(40, 121, 18, 0x00FFFFFF);
 8011652:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011656:	2212      	movs	r2, #18
 8011658:	2179      	movs	r1, #121	; 0x79
 801165a:	2028      	movs	r0, #40	; 0x28
 801165c:	f7fd fe6a 	bl	800f334 <VLine>
		VLine(440, 121, 18, 0x00FFFFFF);
 8011660:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011664:	2212      	movs	r2, #18
 8011666:	2179      	movs	r1, #121	; 0x79
 8011668:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 801166c:	f7fd fe62 	bl	800f334 <VLine>
		HLine(40, 121, 400, 0x00FFFFFF);
 8011670:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011674:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011678:	2179      	movs	r1, #121	; 0x79
 801167a:	2028      	movs	r0, #40	; 0x28
 801167c:	f7fd fe96 	bl	800f3ac <HLine>
		HLine(40, 139, 401, 0x00FFFFFF);
 8011680:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011684:	f240 1291 	movw	r2, #401	; 0x191
 8011688:	218b      	movs	r1, #139	; 0x8b
 801168a:	2028      	movs	r0, #40	; 0x28
 801168c:	f7fd fe8e 	bl	800f3ac <HLine>
		uint32_t acu_pos = (float)acue_sensitivity/250*400;
 8011690:	7823      	ldrb	r3, [r4, #0]
 8011692:	ee07 3a10 	vmov	s14, r3
 8011696:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801169a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801169e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 801170c <DrawMenu+0x548>
 80116a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80116aa:	ee17 2a90 	vmov	r2, s15
		if(acu_pos != 0) Rectangle(40, 122, acu_pos, 17, 0x00FFFFFF);
 80116ae:	2a00      	cmp	r2, #0
 80116b0:	f43f adb5 	beq.w	801121e <DrawMenu+0x5a>
 80116b4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80116b8:	9300      	str	r3, [sp, #0]
 80116ba:	2311      	movs	r3, #17
 80116bc:	b292      	uxth	r2, r2
 80116be:	217a      	movs	r1, #122	; 0x7a
 80116c0:	2028      	movs	r0, #40	; 0x28
 80116c2:	f7fd feb1 	bl	800f428 <Rectangle>
 80116c6:	e5aa      	b.n	801121e <DrawMenu+0x5a>
		if(vol_pos != 0) Rectangle(40, 42, vol_pos, 17, 0x00FFFFFF);
 80116c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	2311      	movs	r3, #17
 80116d0:	b292      	uxth	r2, r2
 80116d2:	212a      	movs	r1, #42	; 0x2a
 80116d4:	2028      	movs	r0, #40	; 0x28
 80116d6:	f7fd fea7 	bl	800f428 <Rectangle>
 80116da:	e75a      	b.n	8011592 <DrawMenu+0x3ce>
		if(jogsens_pos != 0) Rectangle(40, 82, jogsens_pos, 17, 0x00FFFFFF);
 80116dc:	b2a2      	uxth	r2, r4
 80116de:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80116e2:	9300      	str	r3, [sp, #0]
 80116e4:	2311      	movs	r3, #17
 80116e6:	2152      	movs	r1, #82	; 0x52
 80116e8:	2028      	movs	r0, #40	; 0x28
 80116ea:	f7fd fe9d 	bl	800f428 <Rectangle>
 80116ee:	e78e      	b.n	801160e <DrawMenu+0x44a>
 80116f0:	0801bcfc 	.word	0x0801bcfc
 80116f4:	2000003c 	.word	0x2000003c
 80116f8:	0801bd1c 	.word	0x0801bd1c
 80116fc:	0801bd08 	.word	0x0801bd08
 8011700:	0801bd10 	.word	0x0801bd10
 8011704:	00202020 	.word	0x00202020
 8011708:	42c80000 	.word	0x42c80000
 801170c:	43c80000 	.word	0x43c80000
 8011710:	20000080 	.word	0x20000080
 8011714:	461c4000 	.word	0x461c4000
 8011718:	0801bd20 	.word	0x0801bd20
 801171c:	00404040 	.word	0x00404040
 8011720:	20000034 	.word	0x20000034
 8011724:	437a0000 	.word	0x437a0000
 8011728:	0801bd34 	.word	0x0801bd34
 801172c:	00606060 	.word	0x00606060

08011730 <QuantizePosition>:

// snaps file position on the spectra to the nearest beat
uint32_t QuantizePosition(int beat_offset) {
 8011730:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t quantized_pos = file_pos_wide;
 8011732:	4b1f      	ldr	r3, [pc, #124]	; (80117b0 <QuantizePosition+0x80>)
 8011734:	681c      	ldr	r4, [r3, #0]
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 8011736:	4b1f      	ldr	r3, [pc, #124]	; (80117b4 <QuantizePosition+0x84>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	4d1f      	ldr	r5, [pc, #124]	; (80117b8 <QuantizePosition+0x88>)
 801173c:	f503 62a5 	add.w	r2, r3, #1320	; 0x528
 8011740:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8011744:	6852      	ldr	r2, [r2, #4]
 8011746:	2196      	movs	r1, #150	; 0x96
 8011748:	fb01 f202 	mul.w	r2, r1, r2
 801174c:	4e1b      	ldr	r6, [pc, #108]	; (80117bc <QuantizePosition+0x8c>)
 801174e:	fba6 7202 	umull	r7, r2, r6, r2
 8011752:	eba4 1292 	sub.w	r2, r4, r2, lsr #6
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 8011756:	f203 5729 	addw	r7, r3, #1321	; 0x529
 801175a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 801175e:	686d      	ldr	r5, [r5, #4]
 8011760:	fb01 f105 	mul.w	r1, r1, r5
 8011764:	fba6 5101 	umull	r5, r1, r6, r1
 8011768:	ebc4 1191 	rsb	r1, r4, r1, lsr #6
	if(time1 > time2) {
 801176c:	428a      	cmp	r2, r1
 801176e:	dc0f      	bgt.n	8011790 <QuantizePosition+0x60>
		quantized_pos = rekordbox.timeindex[beat+beat_offset+1]*150/1000;							;
	}
	else {
		quantized_pos = rekordbox.timeindex[beat+beat_offset]*150/1000;
 8011770:	4403      	add	r3, r0
 8011772:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8011776:	4810      	ldr	r0, [pc, #64]	; (80117b8 <QuantizePosition+0x88>)
 8011778:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	2096      	movs	r0, #150	; 0x96
 8011780:	fb00 f003 	mul.w	r0, r0, r3
 8011784:	4b0d      	ldr	r3, [pc, #52]	; (80117bc <QuantizePosition+0x8c>)
 8011786:	fba3 3000 	umull	r3, r0, r3, r0
 801178a:	0980      	lsrs	r0, r0, #6
	}
	return quantized_pos;
}
 801178c:	bcf0      	pop	{r4, r5, r6, r7}
 801178e:	4770      	bx	lr
		quantized_pos = rekordbox.timeindex[beat+beat_offset+1]*150/1000;							;
 8011790:	4403      	add	r3, r0
 8011792:	f203 5029 	addw	r0, r3, #1321	; 0x529
 8011796:	4b08      	ldr	r3, [pc, #32]	; (80117b8 <QuantizePosition+0x88>)
 8011798:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	2096      	movs	r0, #150	; 0x96
 80117a0:	fb00 f003 	mul.w	r0, r0, r3
 80117a4:	4633      	mov	r3, r6
 80117a6:	fba3 3000 	umull	r3, r0, r3, r0
 80117aa:	0980      	lsrs	r0, r0, #6
 80117ac:	e7ee      	b.n	801178c <QuantizePosition+0x5c>
 80117ae:	bf00      	nop
 80117b0:	200007f0 	.word	0x200007f0
 80117b4:	200007b4 	.word	0x200007b4
 80117b8:	200153a4 	.word	0x200153a4
 80117bc:	10624dd3 	.word	0x10624dd3

080117c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80117c0:	b500      	push	{lr}
 80117c2:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80117c4:	4b0a      	ldr	r3, [pc, #40]	; (80117f0 <MX_DMA_Init+0x30>)
 80117c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80117c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80117cc:	631a      	str	r2, [r3, #48]	; 0x30
 80117ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80117d4:	9301      	str	r3, [sp, #4]
 80117d6:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80117d8:	2200      	movs	r2, #0
 80117da:	4611      	mov	r1, r2
 80117dc:	203c      	movs	r0, #60	; 0x3c
 80117de:	f7ef fd6f 	bl	80012c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80117e2:	203c      	movs	r0, #60	; 0x3c
 80117e4:	f7ef fdb0 	bl	8001348 <HAL_NVIC_EnableIRQ>

}
 80117e8:	b003      	add	sp, #12
 80117ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80117ee:	bf00      	nop
 80117f0:	40023800 	.word	0x40023800

080117f4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80117f4:	b508      	push	{r3, lr}

  hdma2d.Instance = DMA2D;
 80117f6:	4808      	ldr	r0, [pc, #32]	; (8011818 <MX_DMA2D_Init+0x24>)
 80117f8:	4b08      	ldr	r3, [pc, #32]	; (801181c <MX_DMA2D_Init+0x28>)
 80117fa:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80117fc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8011800:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8011802:	2302      	movs	r3, #2
 8011804:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8011806:	2300      	movs	r3, #0
 8011808:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801180a:	f7f0 f9db 	bl	8001bc4 <HAL_DMA2D_Init>
 801180e:	b900      	cbnz	r0, 8011812 <MX_DMA2D_Init+0x1e>
  {
    Error_Handler();
  }

}
 8011810:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011812:	f000 ff25 	bl	8012660 <Error_Handler>
}
 8011816:	e7fb      	b.n	8011810 <MX_DMA2D_Init+0x1c>
 8011818:	20001574 	.word	0x20001574
 801181c:	4002b000 	.word	0x4002b000

08011820 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8011820:	6802      	ldr	r2, [r0, #0]
 8011822:	4b0d      	ldr	r3, [pc, #52]	; (8011858 <HAL_DMA2D_MspInit+0x38>)
 8011824:	429a      	cmp	r2, r3
 8011826:	d000      	beq.n	801182a <HAL_DMA2D_MspInit+0xa>
 8011828:	4770      	bx	lr
{
 801182a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */
	__HAL_DMA2D_ENABLE_IT(&hdma2d, DMA2D_IT_TC);
 801182c:	4a0b      	ldr	r2, [pc, #44]	; (801185c <HAL_DMA2D_MspInit+0x3c>)
 801182e:	6811      	ldr	r1, [r2, #0]
 8011830:	680b      	ldr	r3, [r1, #0]
 8011832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011836:	600b      	str	r3, [r1, #0]
	__HAL_DMA2D_CLEAR_FLAG(&hdma2d, DMA2D_IT_TC);
 8011838:	6813      	ldr	r3, [r2, #0]
 801183a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801183e:	609a      	str	r2, [r3, #8]
  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8011840:	4b07      	ldr	r3, [pc, #28]	; (8011860 <HAL_DMA2D_MspInit+0x40>)
 8011842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011844:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8011848:	631a      	str	r2, [r3, #48]	; 0x30
 801184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801184c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011850:	9301      	str	r3, [sp, #4]
 8011852:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8011854:	b002      	add	sp, #8
 8011856:	4770      	bx	lr
 8011858:	4002b000 	.word	0x4002b000
 801185c:	20001574 	.word	0x20001574
 8011860:	40023800 	.word	0x40023800

08011864 <MX_FATFS_Init>:
#include "ff.h"

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8011864:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011866:	4903      	ldr	r1, [pc, #12]	; (8011874 <MX_FATFS_Init+0x10>)
 8011868:	4803      	ldr	r0, [pc, #12]	; (8011878 <MX_FATFS_Init+0x14>)
 801186a:	f7f8 f825 	bl	80098b8 <FATFS_LinkDriver>
 801186e:	4b03      	ldr	r3, [pc, #12]	; (801187c <MX_FATFS_Init+0x18>)
 8011870:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8011872:	bd08      	pop	{r3, pc}
 8011874:	200015bc 	.word	0x200015bc
 8011878:	0801d220 	.word	0x0801d220
 801187c:	200015b8 	.word	0x200015b8

08011880 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011880:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011886:	4804      	ldr	r0, [pc, #16]	; (8011898 <BSP_PlatformIsDetected+0x18>)
 8011888:	f7f0 fcf0 	bl	800226c <HAL_GPIO_ReadPin>
 801188c:	b108      	cbz	r0, 8011892 <BSP_PlatformIsDetected+0x12>
    {
        status = SD_NOT_PRESENT;
 801188e:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8011890:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 8011892:	2001      	movs	r0, #1
 8011894:	e7fc      	b.n	8011890 <BSP_PlatformIsDetected+0x10>
 8011896:	bf00      	nop
 8011898:	40020800 	.word	0x40020800

0801189c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 801189c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801189e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80118a0:	2300      	movs	r3, #0
 80118a2:	9301      	str	r3, [sp, #4]
 80118a4:	9302      	str	r3, [sp, #8]
 80118a6:	9303      	str	r3, [sp, #12]
 80118a8:	9304      	str	r3, [sp, #16]
 80118aa:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80118ac:	4b2a      	ldr	r3, [pc, #168]	; (8011958 <HAL_FMC_MspInit+0xbc>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	b10b      	cbz	r3, 80118b6 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80118b2:	b007      	add	sp, #28
 80118b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80118b6:	4b28      	ldr	r3, [pc, #160]	; (8011958 <HAL_FMC_MspInit+0xbc>)
 80118b8:	2201      	movs	r2, #1
 80118ba:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80118bc:	4b27      	ldr	r3, [pc, #156]	; (801195c <HAL_FMC_MspInit+0xc0>)
 80118be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118c0:	f042 0201 	orr.w	r2, r2, #1
 80118c4:	639a      	str	r2, [r3, #56]	; 0x38
 80118c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118c8:	f003 0301 	and.w	r3, r3, #1
 80118cc:	9300      	str	r3, [sp, #0]
 80118ce:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 80118d0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80118d4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118d6:	2602      	movs	r6, #2
 80118d8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118da:	2503      	movs	r5, #3
 80118dc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80118de:	240c      	movs	r4, #12
 80118e0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80118e2:	a901      	add	r1, sp, #4
 80118e4:	481e      	ldr	r0, [pc, #120]	; (8011960 <HAL_FMC_MspInit+0xc4>)
 80118e6:	f7f0 fb3b 	bl	8001f60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 80118ea:	f248 1313 	movw	r3, #33043	; 0x8113
 80118ee:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118f0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118f2:	2700      	movs	r7, #0
 80118f4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118f6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80118f8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80118fa:	a901      	add	r1, sp, #4
 80118fc:	4819      	ldr	r0, [pc, #100]	; (8011964 <HAL_FMC_MspInit+0xc8>)
 80118fe:	f7f0 fb2f 	bl	8001f60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8011902:	f24c 7303 	movw	r3, #50947	; 0xc703
 8011906:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011908:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801190a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801190c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801190e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011910:	a901      	add	r1, sp, #4
 8011912:	4815      	ldr	r0, [pc, #84]	; (8011968 <HAL_FMC_MspInit+0xcc>)
 8011914:	f7f0 fb24 	bl	8001f60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8011918:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801191c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801191e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011920:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011922:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8011924:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011926:	a901      	add	r1, sp, #4
 8011928:	4810      	ldr	r0, [pc, #64]	; (801196c <HAL_FMC_MspInit+0xd0>)
 801192a:	f7f0 fb19 	bl	8001f60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 801192e:	2328      	movs	r3, #40	; 0x28
 8011930:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011932:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011934:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011936:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8011938:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801193a:	a901      	add	r1, sp, #4
 801193c:	480c      	ldr	r0, [pc, #48]	; (8011970 <HAL_FMC_MspInit+0xd4>)
 801193e:	f7f0 fb0f 	bl	8001f60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8011942:	2308      	movs	r3, #8
 8011944:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011946:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011948:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801194a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801194c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801194e:	a901      	add	r1, sp, #4
 8011950:	4808      	ldr	r0, [pc, #32]	; (8011974 <HAL_FMC_MspInit+0xd8>)
 8011952:	f7f0 fb05 	bl	8001f60 <HAL_GPIO_Init>
 8011956:	e7ac      	b.n	80118b2 <HAL_FMC_MspInit+0x16>
 8011958:	200007d0 	.word	0x200007d0
 801195c:	40023800 	.word	0x40023800
 8011960:	40021000 	.word	0x40021000
 8011964:	40021800 	.word	0x40021800
 8011968:	40020c00 	.word	0x40020c00
 801196c:	40021400 	.word	0x40021400
 8011970:	40021c00 	.word	0x40021c00
 8011974:	40020800 	.word	0x40020800

08011978 <SDRAM_Init>:
{
 8011978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801197c:	b083      	sub	sp, #12
	__IO uint32_t tmpmrd = 0;
 801197e:	f04f 0900 	mov.w	r9, #0
 8011982:	f8cd 9004 	str.w	r9, [sp, #4]
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8011986:	4c29      	ldr	r4, [pc, #164]	; (8011a2c <SDRAM_Init+0xb4>)
 8011988:	2501      	movs	r5, #1
 801198a:	6025      	str	r5, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801198c:	f04f 0810 	mov.w	r8, #16
 8011990:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 8011994:	60a5      	str	r5, [r4, #8]
	command.ModeRegisterDefinition = 0;
 8011996:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 801199a:	4e25      	ldr	r6, [pc, #148]	; (8011a30 <SDRAM_Init+0xb8>)
 801199c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119a0:	4621      	mov	r1, r4
 80119a2:	4630      	mov	r0, r6
 80119a4:	f7f4 f9f2 	bl	8005d8c <HAL_SDRAM_SendCommand>
 80119a8:	4f22      	ldr	r7, [pc, #136]	; (8011a34 <SDRAM_Init+0xbc>)
 80119aa:	7038      	strb	r0, [r7, #0]
	HAL_Delay(1);
 80119ac:	4628      	mov	r0, r5
 80119ae:	f7ef fc55 	bl	800125c <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 80119b2:	2302      	movs	r3, #2
 80119b4:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80119b6:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 80119ba:	60a5      	str	r5, [r4, #8]
	command.ModeRegisterDefinition = 0;
 80119bc:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 80119c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119c4:	4621      	mov	r1, r4
 80119c6:	4630      	mov	r0, r6
 80119c8:	f7f4 f9e0 	bl	8005d8c <HAL_SDRAM_SendCommand>
 80119cc:	7038      	strb	r0, [r7, #0]
	HAL_Delay(1);
 80119ce:	4628      	mov	r0, r5
 80119d0:	f7ef fc44 	bl	800125c <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80119d4:	2303      	movs	r3, #3
 80119d6:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80119d8:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 8;
 80119dc:	2308      	movs	r3, #8
 80119de:	60a3      	str	r3, [r4, #8]
	command.ModeRegisterDefinition = 0;
 80119e0:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 80119e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119e8:	4621      	mov	r1, r4
 80119ea:	4630      	mov	r0, r6
 80119ec:	f7f4 f9ce 	bl	8005d8c <HAL_SDRAM_SendCommand>
 80119f0:	7038      	strb	r0, [r7, #0]
	HAL_Delay(1);
 80119f2:	4628      	mov	r0, r5
 80119f4:	f7ef fc32 	bl	800125c <HAL_Delay>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |
 80119f8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80119fc:	9301      	str	r3, [sp, #4]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80119fe:	2304      	movs	r3, #4
 8011a00:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8011a02:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 8011a06:	60a5      	str	r5, [r4, #8]
	command.ModeRegisterDefinition = tmpmrd;
 8011a08:	9b01      	ldr	r3, [sp, #4]
 8011a0a:	60e3      	str	r3, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8011a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a10:	4621      	mov	r1, r4
 8011a12:	4630      	mov	r0, r6
 8011a14:	f7f4 f9ba 	bl	8005d8c <HAL_SDRAM_SendCommand>
 8011a18:	7038      	strb	r0, [r7, #0]
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8011a1a:	f240 6103 	movw	r1, #1539	; 0x603
 8011a1e:	4630      	mov	r0, r6
 8011a20:	f7f4 f9d1 	bl	8005dc6 <HAL_SDRAM_ProgramRefreshRate>
}
 8011a24:	b003      	add	sp, #12
 8011a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a2a:	bf00      	nop
 8011a2c:	20001a48 	.word	0x20001a48
 8011a30:	20001a5c 	.word	0x20001a5c
 8011a34:	20001a58 	.word	0x20001a58

08011a38 <MX_FMC_Init>:
{
 8011a38:	b500      	push	{lr}
 8011a3a:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8011a3c:	4814      	ldr	r0, [pc, #80]	; (8011a90 <MX_FMC_Init+0x58>)
 8011a3e:	4b15      	ldr	r3, [pc, #84]	; (8011a94 <MX_FMC_Init+0x5c>)
 8011a40:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8011a42:	2300      	movs	r3, #0
 8011a44:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8011a46:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8011a48:	2104      	movs	r1, #4
 8011a4a:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8011a4c:	2210      	movs	r2, #16
 8011a4e:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8011a50:	6143      	str	r3, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8011a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a56:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8011a58:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8011a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a5e:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8011a60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011a64:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8011a66:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8011a68:	2302      	movs	r3, #2
 8011a6a:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8011a6c:	2206      	movs	r2, #6
 8011a6e:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8011a70:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8011a72:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8011a74:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8011a76:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8011a78:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8011a7a:	4469      	add	r1, sp
 8011a7c:	f7f4 f967 	bl	8005d4e <HAL_SDRAM_Init>
 8011a80:	b910      	cbnz	r0, 8011a88 <MX_FMC_Init+0x50>
}
 8011a82:	b009      	add	sp, #36	; 0x24
 8011a84:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8011a88:	f000 fdea 	bl	8012660 <Error_Handler>
}
 8011a8c:	e7f9      	b.n	8011a82 <MX_FMC_Init+0x4a>
 8011a8e:	bf00      	nop
 8011a90:	20001a5c 	.word	0x20001a5c
 8011a94:	a0000140 	.word	0xa0000140

08011a98 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8011a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8011a9a:	f7ff feff 	bl	801189c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8011a9e:	bd08      	pop	{r3, pc}

08011aa0 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8011aa0:	4770      	bx	lr

08011aa2 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	4770      	bx	lr

08011aa6 <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 8011aa6:	4770      	bx	lr

08011aa8 <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 8011aa8:	4b01      	ldr	r3, [pc, #4]	; (8011ab0 <ft5336_Get_I2C_InitializedStatus+0x8>)
 8011aaa:	7818      	ldrb	r0, [r3, #0]
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop
 8011ab0:	200007d8 	.word	0x200007d8

08011ab4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8011ab4:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8011ab6:	f7ff fff7 	bl	8011aa8 <ft5336_Get_I2C_InitializedStatus>
 8011aba:	b100      	cbz	r0, 8011abe <ft5336_I2C_InitializeIfRequired+0xa>
    TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
  }
}
 8011abc:	bd08      	pop	{r3, pc}
    TS_IO_Init();
 8011abe:	f002 ffc1 	bl	8014a44 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8011ac2:	4b02      	ldr	r3, [pc, #8]	; (8011acc <ft5336_I2C_InitializeIfRequired+0x18>)
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	701a      	strb	r2, [r3, #0]
}
 8011ac8:	e7f8      	b.n	8011abc <ft5336_I2C_InitializeIfRequired+0x8>
 8011aca:	bf00      	nop
 8011acc:	200007d8 	.word	0x200007d8

08011ad0 <ft5336_Init>:
{
 8011ad0:	b508      	push	{r3, lr}
  TS_IO_Delay(200);
 8011ad2:	20c8      	movs	r0, #200	; 0xc8
 8011ad4:	f002 ffea 	bl	8014aac <TS_IO_Delay>
  ft5336_I2C_InitializeIfRequired();
 8011ad8:	f7ff ffec 	bl	8011ab4 <ft5336_I2C_InitializeIfRequired>
}
 8011adc:	bd08      	pop	{r3, pc}

08011ade <ft5336_ReadID>:
{
 8011ade:	b570      	push	{r4, r5, r6, lr}
 8011ae0:	b082      	sub	sp, #8
 8011ae2:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8011ae4:	2400      	movs	r4, #0
 8011ae6:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 8011aea:	f7ff ffe3 	bl	8011ab4 <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8011aee:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8011af0:	e001      	b.n	8011af6 <ft5336_ReadID+0x18>
 8011af2:	3401      	adds	r4, #1
 8011af4:	b2e4      	uxtb	r4, r4
 8011af6:	f085 0301 	eor.w	r3, r5, #1
 8011afa:	2c02      	cmp	r4, #2
 8011afc:	bf8c      	ite	hi
 8011afe:	2300      	movhi	r3, #0
 8011b00:	f003 0301 	andls.w	r3, r3, #1
 8011b04:	b163      	cbz	r3, 8011b20 <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8011b06:	21a8      	movs	r1, #168	; 0xa8
 8011b08:	b2f0      	uxtb	r0, r6
 8011b0a:	f002 ffb7 	bl	8014a7c <TS_IO_Read>
 8011b0e:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8011b12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	2b51      	cmp	r3, #81	; 0x51
 8011b1a:	d1ea      	bne.n	8011af2 <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 8011b1c:	2501      	movs	r5, #1
 8011b1e:	e7e8      	b.n	8011af2 <ft5336_ReadID+0x14>
  return (ucReadId);
 8011b20:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8011b24:	b002      	add	sp, #8
 8011b26:	bd70      	pop	{r4, r5, r6, pc}

08011b28 <ft5336_TS_DetectTouch>:
{
 8011b28:	b500      	push	{lr}
 8011b2a:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8011b32:	2102      	movs	r1, #2
 8011b34:	b2c0      	uxtb	r0, r0
 8011b36:	f002 ffa1 	bl	8014a7c <TS_IO_Read>
 8011b3a:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8011b3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b42:	f003 030f 	and.w	r3, r3, #15
 8011b46:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8011b4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	2b05      	cmp	r3, #5
 8011b52:	d902      	bls.n	8011b5a <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 8011b54:	2300      	movs	r3, #0
 8011b56:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8011b5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b5e:	4b04      	ldr	r3, [pc, #16]	; (8011b70 <ft5336_TS_DetectTouch+0x48>)
 8011b60:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8011b62:	2200      	movs	r2, #0
 8011b64:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 8011b66:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8011b6a:	b003      	add	sp, #12
 8011b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b70:	200007d8 	.word	0x200007d8

08011b74 <ft5336_TS_GetXY>:
{
 8011b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b78:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8011b80:	4d4f      	ldr	r5, [pc, #316]	; (8011cc0 <ft5336_TS_GetXY+0x14c>)
 8011b82:	78ab      	ldrb	r3, [r5, #2]
 8011b84:	786c      	ldrb	r4, [r5, #1]
 8011b86:	42a3      	cmp	r3, r4
 8011b88:	f080 8096 	bcs.w	8011cb8 <ft5336_TS_GetXY+0x144>
    switch(ft5336_handle.currActiveTouchIdx)
 8011b8c:	2b09      	cmp	r3, #9
 8011b8e:	d806      	bhi.n	8011b9e <ft5336_TS_GetXY+0x2a>
 8011b90:	e8df f003 	tbb	[pc, r3]
 8011b94:	1b130b53 	.word	0x1b130b53
 8011b98:	3b332b23 	.word	0x3b332b23
 8011b9c:	4b43      	.short	0x4b43
  uint8_t regAddressYHigh = 0;
 8011b9e:	f04f 0800 	mov.w	r8, #0
  uint8_t regAddressYLow = 0;
 8011ba2:	46c1      	mov	r9, r8
  uint8_t regAddressXHigh = 0;
 8011ba4:	46c2      	mov	sl, r8
  uint8_t regAddressXLow = 0;
 8011ba6:	4643      	mov	r3, r8
 8011ba8:	e04e      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P2_YH_REG;
 8011baa:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 8011bae:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 8011bb2:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 8011bb6:	230a      	movs	r3, #10
      break;
 8011bb8:	e046      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P3_YH_REG;
 8011bba:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 8011bbe:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 8011bc2:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 8011bc6:	2310      	movs	r3, #16
      break;
 8011bc8:	e03e      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P4_YH_REG;
 8011bca:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 8011bce:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 8011bd2:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 8011bd6:	2316      	movs	r3, #22
      break;
 8011bd8:	e036      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P5_YH_REG;
 8011bda:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 8011bde:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 8011be2:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 8011be6:	231c      	movs	r3, #28
      break;
 8011be8:	e02e      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P6_YH_REG;
 8011bea:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 8011bee:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 8011bf2:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 8011bf6:	2322      	movs	r3, #34	; 0x22
      break;
 8011bf8:	e026      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P7_YH_REG;
 8011bfa:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 8011bfe:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 8011c02:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 8011c06:	2328      	movs	r3, #40	; 0x28
      break;
 8011c08:	e01e      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P8_YH_REG;
 8011c0a:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 8011c0e:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 8011c12:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 8011c16:	232e      	movs	r3, #46	; 0x2e
      break;
 8011c18:	e016      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P9_YH_REG;
 8011c1a:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 8011c1e:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 8011c22:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 8011c26:	2334      	movs	r3, #52	; 0x34
      break;
 8011c28:	e00e      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P10_YH_REG;
 8011c2a:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 8011c2e:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 8011c32:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 8011c36:	233a      	movs	r3, #58	; 0x3a
      break;
 8011c38:	e006      	b.n	8011c48 <ft5336_TS_GetXY+0xd4>
      regAddressYHigh = FT5336_P1_YH_REG;
 8011c3a:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 8011c3e:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 8011c42:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 8011c46:	2304      	movs	r3, #4
 8011c48:	4616      	mov	r6, r2
 8011c4a:	460f      	mov	r7, r1
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8011c4c:	b2c4      	uxtb	r4, r0
 8011c4e:	4619      	mov	r1, r3
 8011c50:	4620      	mov	r0, r4
 8011c52:	f002 ff13 	bl	8014a7c <TS_IO_Read>
 8011c56:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8011c5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c5e:	4d19      	ldr	r5, [pc, #100]	; (8011cc4 <ft5336_TS_GetXY+0x150>)
 8011c60:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8011c62:	4651      	mov	r1, sl
 8011c64:	4620      	mov	r0, r4
 8011c66:	f002 ff09 	bl	8014a7c <TS_IO_Read>
 8011c6a:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8011c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c72:	021b      	lsls	r3, r3, #8
 8011c74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8011c78:	882a      	ldrh	r2, [r5, #0]
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	802b      	strh	r3, [r5, #0]
    *X = coord;
 8011c7e:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8011c80:	4649      	mov	r1, r9
 8011c82:	4620      	mov	r0, r4
 8011c84:	f002 fefa 	bl	8014a7c <TS_IO_Read>
 8011c88:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8011c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c90:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8011c92:	4641      	mov	r1, r8
 8011c94:	4620      	mov	r0, r4
 8011c96:	f002 fef1 	bl	8014a7c <TS_IO_Read>
 8011c9a:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8011c9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ca2:	021b      	lsls	r3, r3, #8
 8011ca4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8011ca8:	882a      	ldrh	r2, [r5, #0]
 8011caa:	4313      	orrs	r3, r2
 8011cac:	802b      	strh	r3, [r5, #0]
    *Y = coord;
 8011cae:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8011cb0:	4a03      	ldr	r2, [pc, #12]	; (8011cc0 <ft5336_TS_GetXY+0x14c>)
 8011cb2:	7893      	ldrb	r3, [r2, #2]
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	7093      	strb	r3, [r2, #2]
}
 8011cb8:	b002      	add	sp, #8
 8011cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cbe:	bf00      	nop
 8011cc0:	200007d8 	.word	0x200007d8
 8011cc4:	200007d4 	.word	0x200007d4

08011cc8 <ft5336_TS_EnableIT>:
{
 8011cc8:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8011cca:	2201      	movs	r2, #1
 8011ccc:	21a4      	movs	r1, #164	; 0xa4
 8011cce:	b2c0      	uxtb	r0, r0
 8011cd0:	f002 fec0 	bl	8014a54 <TS_IO_Write>
}
 8011cd4:	bd08      	pop	{r3, pc}

08011cd6 <ft5336_TS_DisableIT>:
{
 8011cd6:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8011cd8:	2200      	movs	r2, #0
 8011cda:	21a4      	movs	r1, #164	; 0xa4
 8011cdc:	b2c0      	uxtb	r0, r0
 8011cde:	f002 feb9 	bl	8014a54 <TS_IO_Write>
}
 8011ce2:	bd08      	pop	{r3, pc}

08011ce4 <ft5336_TS_Start>:
{
 8011ce4:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 8011ce6:	f7ff fff6 	bl	8011cd6 <ft5336_TS_DisableIT>
}
 8011cea:	bd08      	pop	{r3, pc}

08011cec <ft5336_TS_GetGestureID>:
{
 8011cec:	b510      	push	{r4, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	460c      	mov	r4, r1
  volatile uint8_t ucReadData = 0;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8011cf8:	2101      	movs	r1, #1
 8011cfa:	b2c0      	uxtb	r0, r0
 8011cfc:	f002 febe 	bl	8014a7c <TS_IO_Read>
 8011d00:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8011d04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d08:	6023      	str	r3, [r4, #0]
}
 8011d0a:	b002      	add	sp, #8
 8011d0c:	bd10      	pop	{r4, pc}
	...

08011d10 <ft5336_TS_GetTouchInfo>:
{
 8011d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d14:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 8011d16:	2400      	movs	r4, #0
 8011d18:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8011d1c:	4c33      	ldr	r4, [pc, #204]	; (8011dec <ft5336_TS_GetTouchInfo+0xdc>)
 8011d1e:	7864      	ldrb	r4, [r4, #1]
 8011d20:	428c      	cmp	r4, r1
 8011d22:	d95f      	bls.n	8011de4 <ft5336_TS_GetTouchInfo+0xd4>
    switch(touchIdx)
 8011d24:	2909      	cmp	r1, #9
 8011d26:	d806      	bhi.n	8011d36 <ft5336_TS_GetTouchInfo+0x26>
 8011d28:	e8df f001 	tbb	[pc, r1]
 8011d2c:	130e0936 	.word	0x130e0936
 8011d30:	27221d18 	.word	0x27221d18
 8011d34:	312c      	.short	0x312c
  uint8_t regAddressPMisc = 0;
 8011d36:	2700      	movs	r7, #0
  uint8_t regAddressPWeight = 0;
 8011d38:	46b8      	mov	r8, r7
  uint8_t regAddressXHigh = 0;
 8011d3a:	4639      	mov	r1, r7
 8011d3c:	e030      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8011d3e:	270e      	movs	r7, #14
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8011d40:	f04f 080d 	mov.w	r8, #13
      regAddressXHigh   = FT5336_P2_XH_REG;
 8011d44:	2109      	movs	r1, #9
      break;
 8011d46:	e02b      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8011d48:	2714      	movs	r7, #20
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8011d4a:	f04f 0813 	mov.w	r8, #19
      regAddressXHigh   = FT5336_P3_XH_REG;
 8011d4e:	210f      	movs	r1, #15
      break;
 8011d50:	e026      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8011d52:	271a      	movs	r7, #26
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8011d54:	f04f 0819 	mov.w	r8, #25
      regAddressXHigh   = FT5336_P4_XH_REG;
 8011d58:	2115      	movs	r1, #21
      break;
 8011d5a:	e021      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8011d5c:	2720      	movs	r7, #32
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8011d5e:	f04f 081f 	mov.w	r8, #31
      regAddressXHigh   = FT5336_P5_XH_REG;
 8011d62:	211b      	movs	r1, #27
      break;
 8011d64:	e01c      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8011d66:	2726      	movs	r7, #38	; 0x26
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8011d68:	f04f 0825 	mov.w	r8, #37	; 0x25
      regAddressXHigh   = FT5336_P6_XH_REG;
 8011d6c:	2121      	movs	r1, #33	; 0x21
      break;
 8011d6e:	e017      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8011d70:	272c      	movs	r7, #44	; 0x2c
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8011d72:	f04f 082b 	mov.w	r8, #43	; 0x2b
      regAddressXHigh   = FT5336_P7_XH_REG;
 8011d76:	2127      	movs	r1, #39	; 0x27
      break;
 8011d78:	e012      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8011d7a:	2732      	movs	r7, #50	; 0x32
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8011d7c:	f04f 0831 	mov.w	r8, #49	; 0x31
      regAddressXHigh   = FT5336_P8_XH_REG;
 8011d80:	212d      	movs	r1, #45	; 0x2d
      break;
 8011d82:	e00d      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8011d84:	2738      	movs	r7, #56	; 0x38
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8011d86:	f04f 0837 	mov.w	r8, #55	; 0x37
      regAddressXHigh   = FT5336_P9_XH_REG;
 8011d8a:	2133      	movs	r1, #51	; 0x33
      break;
 8011d8c:	e008      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8011d8e:	273e      	movs	r7, #62	; 0x3e
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8011d90:	f04f 083d 	mov.w	r8, #61	; 0x3d
      regAddressXHigh   = FT5336_P10_XH_REG;
 8011d94:	2139      	movs	r1, #57	; 0x39
      break;
 8011d96:	e003      	b.n	8011da0 <ft5336_TS_GetTouchInfo+0x90>
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8011d98:	2708      	movs	r7, #8
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8011d9a:	f04f 0807 	mov.w	r8, #7
      regAddressXHigh   = FT5336_P1_XH_REG;
 8011d9e:	2103      	movs	r1, #3
 8011da0:	461d      	mov	r5, r3
 8011da2:	4616      	mov	r6, r2
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8011da4:	b2c4      	uxtb	r4, r0
 8011da6:	4620      	mov	r0, r4
 8011da8:	f002 fe68 	bl	8014a7c <TS_IO_Read>
 8011dac:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8011db0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011db4:	099b      	lsrs	r3, r3, #6
 8011db6:	9a08      	ldr	r2, [sp, #32]
 8011db8:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8011dba:	4641      	mov	r1, r8
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	f002 fe5d 	bl	8014a7c <TS_IO_Read>
 8011dc2:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8011dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011dca:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8011dcc:	4639      	mov	r1, r7
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f002 fe54 	bl	8014a7c <TS_IO_Read>
 8011dd4:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8011dd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011ddc:	0912      	lsrs	r2, r2, #4
 8011dde:	f002 0204 	and.w	r2, r2, #4
 8011de2:	602a      	str	r2, [r5, #0]
}
 8011de4:	b002      	add	sp, #8
 8011de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dea:	bf00      	nop
 8011dec:	200007d8 	.word	0x200007d8

08011df0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8011df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df4:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011df6:	2400      	movs	r4, #0
 8011df8:	940b      	str	r4, [sp, #44]	; 0x2c
 8011dfa:	940c      	str	r4, [sp, #48]	; 0x30
 8011dfc:	940d      	str	r4, [sp, #52]	; 0x34
 8011dfe:	940e      	str	r4, [sp, #56]	; 0x38
 8011e00:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8011e02:	4b8e      	ldr	r3, [pc, #568]	; (801203c <MX_GPIO_Init+0x24c>)
 8011e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e06:	f042 0210 	orr.w	r2, r2, #16
 8011e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8011e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e0e:	f002 0210 	and.w	r2, r2, #16
 8011e12:	9200      	str	r2, [sp, #0]
 8011e14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8011e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8011e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e20:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8011e24:	9201      	str	r2, [sp, #4]
 8011e26:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e2a:	f042 0202 	orr.w	r2, r2, #2
 8011e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8011e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e32:	f002 0202 	and.w	r2, r2, #2
 8011e36:	9202      	str	r2, [sp, #8]
 8011e38:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e3c:	f042 0208 	orr.w	r2, r2, #8
 8011e40:	631a      	str	r2, [r3, #48]	; 0x30
 8011e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e44:	f002 0208 	and.w	r2, r2, #8
 8011e48:	9203      	str	r2, [sp, #12]
 8011e4a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e4e:	f042 0204 	orr.w	r2, r2, #4
 8011e52:	631a      	str	r2, [r3, #48]	; 0x30
 8011e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e56:	f002 0204 	and.w	r2, r2, #4
 8011e5a:	9204      	str	r2, [sp, #16]
 8011e5c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e60:	f042 0201 	orr.w	r2, r2, #1
 8011e64:	631a      	str	r2, [r3, #48]	; 0x30
 8011e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e68:	f002 0201 	and.w	r2, r2, #1
 8011e6c:	9205      	str	r2, [sp, #20]
 8011e6e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8011e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011e76:	631a      	str	r2, [r3, #48]	; 0x30
 8011e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e7a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8011e7e:	9206      	str	r2, [sp, #24]
 8011e80:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8011e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011e88:	631a      	str	r2, [r3, #48]	; 0x30
 8011e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e8c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011e90:	9207      	str	r2, [sp, #28]
 8011e92:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8011e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8011e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e9e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8011ea2:	9208      	str	r2, [sp, #32]
 8011ea4:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8011ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ea8:	f042 0220 	orr.w	r2, r2, #32
 8011eac:	631a      	str	r2, [r3, #48]	; 0x30
 8011eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011eb0:	f002 0220 	and.w	r2, r2, #32
 8011eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8011eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011eba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011ebe:	631a      	str	r2, [r3, #48]	; 0x30
 8011ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8011ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8011eca:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8012070 <MX_GPIO_Init+0x280>
 8011ece:	2201      	movs	r2, #1
 8011ed0:	2108      	movs	r1, #8
 8011ed2:	4658      	mov	r0, fp
 8011ed4:	f7f0 f9de 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8011ed8:	4e59      	ldr	r6, [pc, #356]	; (8012040 <MX_GPIO_Init+0x250>)
 8011eda:	2201      	movs	r2, #1
 8011edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f7f0 f9d7 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8011ee6:	236c      	movs	r3, #108	; 0x6c
 8011ee8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011eea:	2503      	movs	r5, #3
 8011eec:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011eee:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011ef0:	a90b      	add	r1, sp, #44	; 0x2c
 8011ef2:	4854      	ldr	r0, [pc, #336]	; (8012044 <MX_GPIO_Init+0x254>)
 8011ef4:	f7f0 f834 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 PG10 
                           PG9 PG7 PG6 PG3 
                           PG2 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10 
 8011ef8:	f646 63ec 	movw	r3, #28396	; 0x6eec
 8011efc:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3 
                          |GPIO_PIN_2|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011efe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f00:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011f02:	a90b      	add	r1, sp, #44	; 0x2c
 8011f04:	4850      	ldr	r0, [pc, #320]	; (8012048 <MX_GPIO_Init+0x258>)
 8011f06:	f7f0 f82b 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3 
                           PB9 PB7 PB6 PB13 
                           PB12 PB2 PB10 PB1 
                           PB0 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3 
 8011f0a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8011f0e:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_13 
                          |GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1 
                          |GPIO_PIN_0|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011f10:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f12:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011f14:	a90b      	add	r1, sp, #44	; 0x2c
 8011f16:	484d      	ldr	r0, [pc, #308]	; (801204c <MX_GPIO_Init+0x25c>)
 8011f18:	f7f0 f822 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD3 
                           PD4 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3 
 8011f1c:	f643 03f8 	movw	r3, #14584	; 0x38f8
 8011f20:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011f22:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f24:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011f26:	a90b      	add	r1, sp, #44	; 0x2c
 8011f28:	4849      	ldr	r0, [pc, #292]	; (8012050 <MX_GPIO_Init+0x260>)
 8011f2a:	f7f0 f819 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10 
                           PA9 PA8 PA1 PA0 
                           PA4 PA2 PA6 PA5 
                           PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10 
 8011f2e:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8011f32:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
                          |GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5 
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011f34:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f36:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f38:	a90b      	add	r1, sp, #44	; 0x2c
 8011f3a:	4846      	ldr	r0, [pc, #280]	; (8012054 <MX_GPIO_Init+0x264>)
 8011f3c:	f7f0 f810 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8011f40:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 8011f44:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011f48:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f4a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8011f4c:	a90b      	add	r1, sp, #44	; 0x2c
 8011f4e:	4842      	ldr	r0, [pc, #264]	; (8012058 <MX_GPIO_Init+0x268>)
 8011f50:	f7f0 f806 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_11;
 8011f54:	f640 1308 	movw	r3, #2312	; 0x908
 8011f58:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011f5a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f5c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8011f5e:	a90b      	add	r1, sp, #44	; 0x2c
 8011f60:	4630      	mov	r0, r6
 8011f62:	f7ef fffd 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = KBD_INT_Pin|LCD_INT_Pin;
 8011f66:	f242 0304 	movw	r3, #8196	; 0x2004
 8011f6a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011f6c:	4b3b      	ldr	r3, [pc, #236]	; (801205c <MX_GPIO_Init+0x26c>)
 8011f6e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f70:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8011f72:	a90b      	add	r1, sp, #44	; 0x2c
 8011f74:	4630      	mov	r0, r6
 8011f76:	f7ef fff3 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8011f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011f7e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011f80:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011f82:	2701      	movs	r7, #1
 8011f84:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8011f86:	a90b      	add	r1, sp, #44	; 0x2c
 8011f88:	4835      	ldr	r0, [pc, #212]	; (8012060 <MX_GPIO_Init+0x270>)
 8011f8a:	f7ef ffe9 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8011f8e:	f04f 0908 	mov.w	r9, #8
 8011f92:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f96:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f98:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011f9a:	f04f 0802 	mov.w	r8, #2
 8011f9e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8011fa2:	a90b      	add	r1, sp, #44	; 0x2c
 8011fa4:	4658      	mov	r0, fp
 8011fa6:	f7ef ffdb 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4 
                           PH2 PH12 PH9 PH11 
                           PH6 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4 
 8011faa:	f64f 6354 	movw	r3, #65108	; 0xfe54
 8011fae:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11 
                          |GPIO_PIN_6|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011fb0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fb2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8011fb4:	a90b      	add	r1, sp, #44	; 0x2c
 8011fb6:	482b      	ldr	r0, [pc, #172]	; (8012064 <MX_GPIO_Init+0x274>)
 8011fb8:	f7ef ffd2 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6 
                           PC0 PC1 PC2 PC4 
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6 
 8011fbc:	f24c 03f7 	movw	r3, #49399	; 0xc0f7
 8011fc0:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011fc2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fc4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011fc6:	a90b      	add	r1, sp, #44	; 0x2c
 8011fc8:	4825      	ldr	r0, [pc, #148]	; (8012060 <MX_GPIO_Init+0x270>)
 8011fca:	f7ef ffc9 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8011fce:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011fd2:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fd4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011fd6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8011fda:	a90b      	add	r1, sp, #44	; 0x2c
 8011fdc:	4630      	mov	r0, r6
 8011fde:	f7ef ffbf 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8011fe2:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8011fe4:	4b20      	ldr	r3, [pc, #128]	; (8012068 <MX_GPIO_Init+0x278>)
 8011fe6:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011fe8:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8011fea:	a90b      	add	r1, sp, #44	; 0x2c
 8011fec:	4630      	mov	r0, r6
 8011fee:	f7ef ffb7 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9 
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9 
 8011ff2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8011ff6:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011ff8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ffa:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011ffc:	a90b      	add	r1, sp, #44	; 0x2c
 8011ffe:	481b      	ldr	r0, [pc, #108]	; (801206c <MX_GPIO_Init+0x27c>)
 8012000:	f7ef ffae 	bl	8001f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8012004:	4622      	mov	r2, r4
 8012006:	4641      	mov	r1, r8
 8012008:	2006      	movs	r0, #6
 801200a:	f7ef f959 	bl	80012c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 801200e:	2006      	movs	r0, #6
 8012010:	f7ef f99a 	bl	8001348 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8012014:	4622      	mov	r2, r4
 8012016:	4641      	mov	r1, r8
 8012018:	4648      	mov	r0, r9
 801201a:	f7ef f951 	bl	80012c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 801201e:	4648      	mov	r0, r9
 8012020:	f7ef f992 	bl	8001348 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8012024:	4622      	mov	r2, r4
 8012026:	4629      	mov	r1, r5
 8012028:	2028      	movs	r0, #40	; 0x28
 801202a:	f7ef f949 	bl	80012c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801202e:	2028      	movs	r0, #40	; 0x28
 8012030:	f7ef f98a 	bl	8001348 <HAL_NVIC_EnableIRQ>

}
 8012034:	b011      	add	sp, #68	; 0x44
 8012036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801203a:	bf00      	nop
 801203c:	40023800 	.word	0x40023800
 8012040:	40022000 	.word	0x40022000
 8012044:	40021000 	.word	0x40021000
 8012048:	40021800 	.word	0x40021800
 801204c:	40020400 	.word	0x40020400
 8012050:	40020c00 	.word	0x40020c00
 8012054:	40020000 	.word	0x40020000
 8012058:	40022400 	.word	0x40022400
 801205c:	10110000 	.word	0x10110000
 8012060:	40020800 	.word	0x40020800
 8012064:	40021c00 	.word	0x40021c00
 8012068:	10210000 	.word	0x10210000
 801206c:	40021400 	.word	0x40021400
 8012070:	40022800 	.word	0x40022800

08012074 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8012074:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8012076:	4812      	ldr	r0, [pc, #72]	; (80120c0 <MX_I2C3_Init+0x4c>)
 8012078:	4b12      	ldr	r3, [pc, #72]	; (80120c4 <MX_I2C3_Init+0x50>)
 801207a:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 801207c:	4b12      	ldr	r3, [pc, #72]	; (80120c8 <MX_I2C3_Init+0x54>)
 801207e:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8012080:	2300      	movs	r3, #0
 8012082:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012084:	2201      	movs	r2, #1
 8012086:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012088:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 801208a:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801208c:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801208e:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012090:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8012092:	f7f0 fad1 	bl	8002638 <HAL_I2C_Init>
 8012096:	b950      	cbnz	r0, 80120ae <MX_I2C3_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012098:	2100      	movs	r1, #0
 801209a:	4809      	ldr	r0, [pc, #36]	; (80120c0 <MX_I2C3_Init+0x4c>)
 801209c:	f7f0 fd6a 	bl	8002b74 <HAL_I2CEx_ConfigAnalogFilter>
 80120a0:	b940      	cbnz	r0, 80120b4 <MX_I2C3_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80120a2:	2100      	movs	r1, #0
 80120a4:	4806      	ldr	r0, [pc, #24]	; (80120c0 <MX_I2C3_Init+0x4c>)
 80120a6:	f7f0 fdbb 	bl	8002c20 <HAL_I2CEx_ConfigDigitalFilter>
 80120aa:	b930      	cbnz	r0, 80120ba <MX_I2C3_Init+0x46>
  {
    Error_Handler();
  }

}
 80120ac:	bd08      	pop	{r3, pc}
    Error_Handler();
 80120ae:	f000 fad7 	bl	8012660 <Error_Handler>
 80120b2:	e7f1      	b.n	8012098 <MX_I2C3_Init+0x24>
    Error_Handler();
 80120b4:	f000 fad4 	bl	8012660 <Error_Handler>
 80120b8:	e7f3      	b.n	80120a2 <MX_I2C3_Init+0x2e>
    Error_Handler();
 80120ba:	f000 fad1 	bl	8012660 <Error_Handler>
}
 80120be:	e7f5      	b.n	80120ac <MX_I2C3_Init+0x38>
 80120c0:	20001a90 	.word	0x20001a90
 80120c4:	40005c00 	.word	0x40005c00
 80120c8:	20303e5d 	.word	0x20303e5d

080120cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80120cc:	b510      	push	{r4, lr}
 80120ce:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80120d0:	2300      	movs	r3, #0
 80120d2:	9303      	str	r3, [sp, #12]
 80120d4:	9304      	str	r3, [sp, #16]
 80120d6:	9305      	str	r3, [sp, #20]
 80120d8:	9306      	str	r3, [sp, #24]
 80120da:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C3)
 80120dc:	6802      	ldr	r2, [r0, #0]
 80120de:	4b14      	ldr	r3, [pc, #80]	; (8012130 <HAL_I2C_MspInit+0x64>)
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d001      	beq.n	80120e8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80120e4:	b008      	add	sp, #32
 80120e6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80120e8:	4c12      	ldr	r4, [pc, #72]	; (8012134 <HAL_I2C_MspInit+0x68>)
 80120ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120f0:	6323      	str	r3, [r4, #48]	; 0x30
 80120f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120f8:	9301      	str	r3, [sp, #4]
 80120fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80120fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8012100:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012102:	2312      	movs	r3, #18
 8012104:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012106:	2301      	movs	r3, #1
 8012108:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801210a:	2303      	movs	r3, #3
 801210c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801210e:	2304      	movs	r3, #4
 8012110:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012112:	a903      	add	r1, sp, #12
 8012114:	4808      	ldr	r0, [pc, #32]	; (8012138 <HAL_I2C_MspInit+0x6c>)
 8012116:	f7ef ff23 	bl	8001f60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 801211a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801211c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012120:	6423      	str	r3, [r4, #64]	; 0x40
 8012122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012128:	9302      	str	r3, [sp, #8]
 801212a:	9b02      	ldr	r3, [sp, #8]
}
 801212c:	e7da      	b.n	80120e4 <HAL_I2C_MspInit+0x18>
 801212e:	bf00      	nop
 8012130:	40005c00 	.word	0x40005c00
 8012134:	40023800 	.word	0x40023800
 8012138:	40021c00 	.word	0x40021c00

0801213c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 801213c:	b510      	push	{r4, lr}
 801213e:	b09a      	sub	sp, #104	; 0x68
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8012140:	2434      	movs	r4, #52	; 0x34
 8012142:	4622      	mov	r2, r4
 8012144:	2100      	movs	r1, #0
 8012146:	eb0d 0004 	add.w	r0, sp, r4
 801214a:	f005 f8c9 	bl	80172e0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 801214e:	4622      	mov	r2, r4
 8012150:	2100      	movs	r1, #0
 8012152:	4668      	mov	r0, sp
 8012154:	f005 f8c4 	bl	80172e0 <memset>

  hltdc.Instance = LTDC;
 8012158:	4838      	ldr	r0, [pc, #224]	; (801223c <MX_LTDC_Init+0x100>)
 801215a:	4b39      	ldr	r3, [pc, #228]	; (8012240 <MX_LTDC_Init+0x104>)
 801215c:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801215e:	2300      	movs	r3, #0
 8012160:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8012162:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8012164:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8012166:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 0;
 8012168:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 801216a:	2209      	movs	r2, #9
 801216c:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 43;
 801216e:	222b      	movs	r2, #43	; 0x2b
 8012170:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 29;
 8012172:	221d      	movs	r2, #29
 8012174:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8012176:	f240 220b 	movw	r2, #523	; 0x20b
 801217a:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 301;
 801217c:	f240 122d 	movw	r2, #301	; 0x12d
 8012180:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8012182:	f240 2213 	movw	r2, #531	; 0x213
 8012186:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 305;
 8012188:	f240 1231 	movw	r2, #305	; 0x131
 801218c:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801218e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8012192:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8012196:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801219a:	f7f0 fe59 	bl	8002e50 <HAL_LTDC_Init>
 801219e:	2800      	cmp	r0, #0
 80121a0:	d142      	bne.n	8012228 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 80121a2:	2200      	movs	r2, #0
 80121a4:	920d      	str	r2, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80121a6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80121aa:	910e      	str	r1, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80121ac:	920f      	str	r2, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80121ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80121b2:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80121b4:	2002      	movs	r0, #2
 80121b6:	9011      	str	r0, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80121b8:	9212      	str	r2, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80121ba:	9213      	str	r2, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80121bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80121c0:	9014      	str	r0, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80121c2:	2005      	movs	r0, #5
 80121c4:	9015      	str	r0, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80121c6:	9216      	str	r2, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80121c8:	9117      	str	r1, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80121ca:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80121cc:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80121d0:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80121d4:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80121d8:	a90d      	add	r1, sp, #52	; 0x34
 80121da:	4818      	ldr	r0, [pc, #96]	; (801223c <MX_LTDC_Init+0x100>)
 80121dc:	f7f0 ff50 	bl	8003080 <HAL_LTDC_ConfigLayer>
 80121e0:	bb28      	cbnz	r0, 801222e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
  }
  pLayerCfg1.WindowX0 = 0;
 80121e2:	2300      	movs	r3, #0
 80121e4:	9300      	str	r3, [sp, #0]
  pLayerCfg1.WindowX1 = 480;
 80121e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80121ea:	9101      	str	r1, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 80121ec:	9302      	str	r3, [sp, #8]
  pLayerCfg1.WindowY1 = 272;
 80121ee:	f44f 7288 	mov.w	r2, #272	; 0x110
 80121f2:	9203      	str	r2, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80121f4:	2002      	movs	r0, #2
 80121f6:	9004      	str	r0, [sp, #16]
  pLayerCfg1.Alpha = 0;
 80121f8:	9305      	str	r3, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 80121fa:	9306      	str	r3, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80121fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012200:	9007      	str	r0, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8012202:	2005      	movs	r0, #5
 8012204:	9008      	str	r0, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 8012206:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 8012208:	910a      	str	r1, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 801220a:	920b      	str	r2, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 801220c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8012210:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8012214:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8012218:	2201      	movs	r2, #1
 801221a:	4669      	mov	r1, sp
 801221c:	4807      	ldr	r0, [pc, #28]	; (801223c <MX_LTDC_Init+0x100>)
 801221e:	f7f0 ff2f 	bl	8003080 <HAL_LTDC_ConfigLayer>
 8012222:	b938      	cbnz	r0, 8012234 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
  }

}
 8012224:	b01a      	add	sp, #104	; 0x68
 8012226:	bd10      	pop	{r4, pc}
    Error_Handler();
 8012228:	f000 fa1a 	bl	8012660 <Error_Handler>
 801222c:	e7b9      	b.n	80121a2 <MX_LTDC_Init+0x66>
    Error_Handler();
 801222e:	f000 fa17 	bl	8012660 <Error_Handler>
 8012232:	e7d6      	b.n	80121e2 <MX_LTDC_Init+0xa6>
    Error_Handler();
 8012234:	f000 fa14 	bl	8012660 <Error_Handler>
}
 8012238:	e7f4      	b.n	8012224 <MX_LTDC_Init+0xe8>
 801223a:	bf00      	nop
 801223c:	20001adc 	.word	0x20001adc
 8012240:	40016800 	.word	0x40016800

08012244 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8012244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012246:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012248:	2300      	movs	r3, #0
 801224a:	9307      	str	r3, [sp, #28]
 801224c:	9308      	str	r3, [sp, #32]
 801224e:	9309      	str	r3, [sp, #36]	; 0x24
 8012250:	930a      	str	r3, [sp, #40]	; 0x28
 8012252:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ltdcHandle->Instance==LTDC)
 8012254:	6802      	ldr	r2, [r0, #0]
 8012256:	4b3b      	ldr	r3, [pc, #236]	; (8012344 <HAL_LTDC_MspInit+0x100>)
 8012258:	429a      	cmp	r2, r3
 801225a:	d001      	beq.n	8012260 <HAL_LTDC_MspInit+0x1c>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 801225c:	b00d      	add	sp, #52	; 0x34
 801225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8012260:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8012264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012266:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801226a:	645a      	str	r2, [r3, #68]	; 0x44
 801226c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801226e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8012272:	9201      	str	r2, [sp, #4]
 8012274:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012278:	f042 0210 	orr.w	r2, r2, #16
 801227c:	631a      	str	r2, [r3, #48]	; 0x30
 801227e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012280:	f002 0210 	and.w	r2, r2, #16
 8012284:	9202      	str	r2, [sp, #8]
 8012286:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8012288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801228a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801228e:	631a      	str	r2, [r3, #48]	; 0x30
 8012290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012292:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8012296:	9203      	str	r2, [sp, #12]
 8012298:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 801229a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801229c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80122a0:	631a      	str	r2, [r3, #48]	; 0x30
 80122a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122a4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80122a8:	9204      	str	r2, [sp, #16]
 80122aa:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80122ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80122b2:	631a      	str	r2, [r3, #48]	; 0x30
 80122b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122b6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80122ba:	9205      	str	r2, [sp, #20]
 80122bc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80122be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80122c4:	631a      	str	r2, [r3, #48]	; 0x30
 80122c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122cc:	9306      	str	r3, [sp, #24]
 80122ce:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80122d0:	2310      	movs	r3, #16
 80122d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122d4:	2502      	movs	r5, #2
 80122d6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122d8:	2403      	movs	r4, #3
 80122da:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80122dc:	260e      	movs	r6, #14
 80122de:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80122e0:	a907      	add	r1, sp, #28
 80122e2:	4819      	ldr	r0, [pc, #100]	; (8012348 <HAL_LTDC_MspInit+0x104>)
 80122e4:	f7ef fe3c 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11 
 80122e8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80122ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ee:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122f0:	2700      	movs	r7, #0
 80122f2:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122f4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80122f6:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80122f8:	a907      	add	r1, sp, #28
 80122fa:	4814      	ldr	r0, [pc, #80]	; (801234c <HAL_LTDC_MspInit+0x108>)
 80122fc:	f7ef fe30 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 8012300:	23f7      	movs	r3, #247	; 0xf7
 8012302:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012304:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012306:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012308:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801230a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801230c:	a907      	add	r1, sp, #28
 801230e:	4810      	ldr	r0, [pc, #64]	; (8012350 <HAL_LTDC_MspInit+0x10c>)
 8012310:	f7ef fe26 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8012314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012318:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801231a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801231c:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801231e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8012320:	2309      	movs	r3, #9
 8012322:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012324:	a907      	add	r1, sp, #28
 8012326:	480b      	ldr	r0, [pc, #44]	; (8012354 <HAL_LTDC_MspInit+0x110>)
 8012328:	f7ef fe1a 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 801232c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8012330:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012332:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012334:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012336:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8012338:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801233a:	a907      	add	r1, sp, #28
 801233c:	4806      	ldr	r0, [pc, #24]	; (8012358 <HAL_LTDC_MspInit+0x114>)
 801233e:	f7ef fe0f 	bl	8001f60 <HAL_GPIO_Init>
}
 8012342:	e78b      	b.n	801225c <HAL_LTDC_MspInit+0x18>
 8012344:	40016800 	.word	0x40016800
 8012348:	40021000 	.word	0x40021000
 801234c:	40022400 	.word	0x40022400
 8012350:	40022800 	.word	0x40022800
 8012354:	40021800 	.word	0x40021800
 8012358:	40022000 	.word	0x40022000

0801235c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 801235c:	b508      	push	{r3, lr}
  /* Display On */
  __HAL_LTDC_ENABLE(&hltdc);
 801235e:	4b09      	ldr	r3, [pc, #36]	; (8012384 <BSP_LCD_DisplayOn+0x28>)
 8012360:	681a      	ldr	r2, [r3, #0]
 8012362:	6993      	ldr	r3, [r2, #24]
 8012364:	f043 0301 	orr.w	r3, r3, #1
 8012368:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 801236a:	2201      	movs	r2, #1
 801236c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012370:	4805      	ldr	r0, [pc, #20]	; (8012388 <BSP_LCD_DisplayOn+0x2c>)
 8012372:	f7ef ff8f 	bl	8002294 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8012376:	2201      	movs	r2, #1
 8012378:	2108      	movs	r1, #8
 801237a:	4804      	ldr	r0, [pc, #16]	; (801238c <BSP_LCD_DisplayOn+0x30>)
 801237c:	f7ef ff8a 	bl	8002294 <HAL_GPIO_WritePin>
}
 8012380:	bd08      	pop	{r3, pc}
 8012382:	bf00      	nop
 8012384:	20001adc 	.word	0x20001adc
 8012388:	40022000 	.word	0x40022000
 801238c:	40022800 	.word	0x40022800

08012390 <BSP_LCD_DisplayOff>:
/**
  * @brief  Disables the display.
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 8012390:	b508      	push	{r3, lr}
  /* Display Off */
  __HAL_LTDC_DISABLE(&hltdc);
 8012392:	4b09      	ldr	r3, [pc, #36]	; (80123b8 <BSP_LCD_DisplayOff+0x28>)
 8012394:	681a      	ldr	r2, [r3, #0]
 8012396:	6993      	ldr	r3, [r2, #24]
 8012398:	f023 0301 	bic.w	r3, r3, #1
 801239c:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
 801239e:	2200      	movs	r2, #0
 80123a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80123a4:	4805      	ldr	r0, [pc, #20]	; (80123bc <BSP_LCD_DisplayOff+0x2c>)
 80123a6:	f7ef ff75 	bl	8002294 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
 80123aa:	2200      	movs	r2, #0
 80123ac:	2108      	movs	r1, #8
 80123ae:	4804      	ldr	r0, [pc, #16]	; (80123c0 <BSP_LCD_DisplayOff+0x30>)
 80123b0:	f7ef ff70 	bl	8002294 <HAL_GPIO_WritePin>
}
 80123b4:	bd08      	pop	{r3, pc}
 80123b6:	bf00      	nop
 80123b8:	20001adc 	.word	0x20001adc
 80123bc:	40022000 	.word	0x40022000
 80123c0:	40022800 	.word	0x40022800

080123c4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80123c4:	b508      	push	{r3, lr}

  /* Disables the MPU */
  HAL_MPU_Disable();
 80123c6:	f7ef f809 	bl	80013dc <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80123ca:	2004      	movs	r0, #4
 80123cc:	f7ef f816 	bl	80013fc <HAL_MPU_Enable>

}
 80123d0:	bd08      	pop	{r3, pc}
	...

080123d4 <scan_files>:
{
 80123d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d8:	f5ad 6d8a 	sub.w	sp, sp, #1104	; 0x450
    TCHAR relative_path[255] = {0};
 80123dc:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80123e0:	2100      	movs	r1, #0
 80123e2:	a801      	add	r0, sp, #4
 80123e4:	f004 ff7c 	bl	80172e0 <memset>
    UINT folders = 0;
 80123e8:	2500      	movs	r5, #0
 80123ea:	e017      	b.n	801241c <scan_files+0x48>
    	while(i++ < folders);
 80123ec:	461c      	mov	r4, r3
    		res = f_readdir(&folder, &fno);	/* Read a directory item */
 80123ee:	4970      	ldr	r1, [pc, #448]	; (80125b0 <scan_files+0x1dc>)
 80123f0:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 80123f4:	f7f7 fa15 	bl	8009822 <f_readdir>
 80123f8:	4b6e      	ldr	r3, [pc, #440]	; (80125b4 <scan_files+0x1e0>)
 80123fa:	7018      	strb	r0, [r3, #0]
    	while(i++ < folders);
 80123fc:	1c63      	adds	r3, r4, #1
 80123fe:	42ac      	cmp	r4, r5
 8012400:	d3f4      	bcc.n	80123ec <scan_files+0x18>
    	if (res != FR_OK || fno.fname[0] == 0) {
 8012402:	2800      	cmp	r0, #0
 8012404:	f040 80c9 	bne.w	801259a <scan_files+0x1c6>
 8012408:	4b69      	ldr	r3, [pc, #420]	; (80125b0 <scan_files+0x1dc>)
 801240a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801240c:	2b00      	cmp	r3, #0
 801240e:	f000 80c4 	beq.w	801259a <scan_files+0x1c6>
    	if (fno.fattrib & AM_DIR) {	/* It is a directory */
 8012412:	4b67      	ldr	r3, [pc, #412]	; (80125b0 <scan_files+0x1dc>)
 8012414:	7c1b      	ldrb	r3, [r3, #16]
 8012416:	f013 0f10 	tst.w	r3, #16
 801241a:	d108      	bne.n	801242e <scan_files+0x5a>
    	res = f_opendir(&folder, L"/PIONEER/USBANLZ");	/* Open the directory */
 801241c:	4966      	ldr	r1, [pc, #408]	; (80125b8 <scan_files+0x1e4>)
 801241e:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8012422:	f7f7 f999 	bl	8009758 <f_opendir>
 8012426:	4b63      	ldr	r3, [pc, #396]	; (80125b4 <scan_files+0x1e0>)
 8012428:	7018      	strb	r0, [r3, #0]
    	i = 0;
 801242a:	2400      	movs	r4, #0
 801242c:	e7df      	b.n	80123ee <scan_files+0x1a>
    		folders++;
 801242e:	3501      	adds	r5, #1
    		wcscpy(new_path, L"/PIONEER/USBANLZ/");
 8012430:	4c62      	ldr	r4, [pc, #392]	; (80125bc <scan_files+0x1e8>)
 8012432:	4963      	ldr	r1, [pc, #396]	; (80125c0 <scan_files+0x1ec>)
 8012434:	4620      	mov	r0, r4
 8012436:	f005 f864 	bl	8017502 <wcscpy>
    		wcscat(new_path, fno.fname);
 801243a:	4962      	ldr	r1, [pc, #392]	; (80125c4 <scan_files+0x1f0>)
 801243c:	4620      	mov	r0, r4
 801243e:	f005 f850 	bl	80174e2 <wcscat>
    	  	for(i = 0; i < 255; i++) relative_path[i] = 0;
 8012442:	2300      	movs	r3, #0
 8012444:	e004      	b.n	8012450 <scan_files+0x7c>
 8012446:	aa01      	add	r2, sp, #4
 8012448:	2100      	movs	r1, #0
 801244a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801244e:	3301      	adds	r3, #1
 8012450:	2bfe      	cmp	r3, #254	; 0xfe
 8012452:	d9f8      	bls.n	8012446 <scan_files+0x72>
    		wcscpy(relative_path, fno.fname);
 8012454:	495b      	ldr	r1, [pc, #364]	; (80125c4 <scan_files+0x1f0>)
 8012456:	a801      	add	r0, sp, #4
 8012458:	f005 f853 	bl	8017502 <wcscpy>
    		wcscpy(old_path, new_path);
 801245c:	4957      	ldr	r1, [pc, #348]	; (80125bc <scan_files+0x1e8>)
 801245e:	485a      	ldr	r0, [pc, #360]	; (80125c8 <scan_files+0x1f4>)
 8012460:	f005 f84f 	bl	8017502 <wcscpy>
    		f_closedir(&folder);
 8012464:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8012468:	f7f7 f9ce 	bl	8009808 <f_closedir>
    		subfolders = 0;
 801246c:	2600      	movs	r6, #0
 801246e:	e020      	b.n	80124b2 <scan_files+0xde>
    			for(i = 0; i < 255; i++) new_path[i] = 0;
 8012470:	4a52      	ldr	r2, [pc, #328]	; (80125bc <scan_files+0x1e8>)
 8012472:	2100      	movs	r1, #0
 8012474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8012478:	3301      	adds	r3, #1
 801247a:	2bfe      	cmp	r3, #254	; 0xfe
 801247c:	d9f8      	bls.n	8012470 <scan_files+0x9c>
    			wcscpy(new_path, old_path);
 801247e:	4952      	ldr	r1, [pc, #328]	; (80125c8 <scan_files+0x1f4>)
 8012480:	484e      	ldr	r0, [pc, #312]	; (80125bc <scan_files+0x1e8>)
 8012482:	f005 f83e 	bl	8017502 <wcscpy>
    			i = 0;
 8012486:	2400      	movs	r4, #0
 8012488:	e000      	b.n	801248c <scan_files+0xb8>
    			while(i++ < subfolders);
 801248a:	461c      	mov	r4, r3
    				res = f_readdir(&folder, &fno);	/* Read a directory item */
 801248c:	4948      	ldr	r1, [pc, #288]	; (80125b0 <scan_files+0x1dc>)
 801248e:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8012492:	f7f7 f9c6 	bl	8009822 <f_readdir>
 8012496:	4b47      	ldr	r3, [pc, #284]	; (80125b4 <scan_files+0x1e0>)
 8012498:	7018      	strb	r0, [r3, #0]
    			while(i++ < subfolders);
 801249a:	1c63      	adds	r3, r4, #1
 801249c:	42b4      	cmp	r4, r6
 801249e:	d3f4      	bcc.n	801248a <scan_files+0xb6>
    			if (res != FR_OK || fno.fname[0] == 0) {
 80124a0:	b980      	cbnz	r0, 80124c4 <scan_files+0xf0>
 80124a2:	4b43      	ldr	r3, [pc, #268]	; (80125b0 <scan_files+0x1dc>)
 80124a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80124a6:	b16b      	cbz	r3, 80124c4 <scan_files+0xf0>
    			if (fno.fattrib & AM_DIR) {	/* It is a directory */
 80124a8:	4b41      	ldr	r3, [pc, #260]	; (80125b0 <scan_files+0x1dc>)
 80124aa:	7c1b      	ldrb	r3, [r3, #16]
 80124ac:	f013 0f10 	tst.w	r3, #16
 80124b0:	d10d      	bne.n	80124ce <scan_files+0xfa>
    			res = f_opendir(&folder, old_path);
 80124b2:	4945      	ldr	r1, [pc, #276]	; (80125c8 <scan_files+0x1f4>)
 80124b4:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 80124b8:	f7f7 f94e 	bl	8009758 <f_opendir>
 80124bc:	4b3d      	ldr	r3, [pc, #244]	; (80125b4 <scan_files+0x1e0>)
 80124be:	7018      	strb	r0, [r3, #0]
    			for(i = 0; i < 255; i++) new_path[i] = 0;
 80124c0:	2300      	movs	r3, #0
 80124c2:	e7da      	b.n	801247a <scan_files+0xa6>
    				f_closedir(&folder);
 80124c4:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 80124c8:	f7f7 f99e 	bl	8009808 <f_closedir>
    				break;  /* Break on error or end of dir */
 80124cc:	e7a6      	b.n	801241c <scan_files+0x48>
    				subfolders++;
 80124ce:	3601      	adds	r6, #1
    				wcscat(new_path, L"/");
 80124d0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80125d4 <scan_files+0x200>
 80124d4:	4c39      	ldr	r4, [pc, #228]	; (80125bc <scan_files+0x1e8>)
 80124d6:	4641      	mov	r1, r8
 80124d8:	4620      	mov	r0, r4
 80124da:	f005 f802 	bl	80174e2 <wcscat>
    				wcscat(new_path, fno.fname);
 80124de:	4f39      	ldr	r7, [pc, #228]	; (80125c4 <scan_files+0x1f0>)
 80124e0:	4639      	mov	r1, r7
 80124e2:	4620      	mov	r0, r4
 80124e4:	f004 fffd 	bl	80174e2 <wcscat>
    				wcscat(relative_path, L"/");
 80124e8:	4641      	mov	r1, r8
 80124ea:	a801      	add	r0, sp, #4
 80124ec:	f004 fff9 	bl	80174e2 <wcscat>
    				wcscat(relative_path, fno.fname);
 80124f0:	4639      	mov	r1, r7
 80124f2:	a801      	add	r0, sp, #4
 80124f4:	f004 fff5 	bl	80174e2 <wcscat>
    				f_closedir(&folder);
 80124f8:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 80124fc:	f7f7 f984 	bl	8009808 <f_closedir>
    				res = f_opendir(&folder, new_path);
 8012500:	4621      	mov	r1, r4
 8012502:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8012506:	f7f7 f927 	bl	8009758 <f_opendir>
 801250a:	4b2a      	ldr	r3, [pc, #168]	; (80125b4 <scan_files+0x1e0>)
 801250c:	7018      	strb	r0, [r3, #0]
    				if(res == FR_OK) {
 801250e:	2800      	cmp	r0, #0
 8012510:	d1cf      	bne.n	80124b2 <scan_files+0xde>
    					res = f_readdir(&folder, &fno);
 8012512:	f1a7 0448 	sub.w	r4, r7, #72	; 0x48
 8012516:	4621      	mov	r1, r4
 8012518:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 801251c:	f7f7 f981 	bl	8009822 <f_readdir>
 8012520:	4b24      	ldr	r3, [pc, #144]	; (80125b4 <scan_files+0x1e0>)
 8012522:	7018      	strb	r0, [r3, #0]
    					if (!(fno.fattrib & AM_DIR)) {
 8012524:	7c23      	ldrb	r3, [r4, #16]
 8012526:	f013 0f10 	tst.w	r3, #16
 801252a:	d1c2      	bne.n	80124b2 <scan_files+0xde>
    						for(i=0; i<255; i++) TrackPaths[Total_tracks][i] = ff_convert(new_path[i], 0);
 801252c:	2400      	movs	r4, #0
 801252e:	e00d      	b.n	801254c <scan_files+0x178>
 8012530:	2100      	movs	r1, #0
 8012532:	4b22      	ldr	r3, [pc, #136]	; (80125bc <scan_files+0x1e8>)
 8012534:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012538:	f7f7 f9c4 	bl	80098c4 <ff_convert>
 801253c:	4b23      	ldr	r3, [pc, #140]	; (80125cc <scan_files+0x1f8>)
 801253e:	881b      	ldrh	r3, [r3, #0]
 8012540:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8012544:	4a22      	ldr	r2, [pc, #136]	; (80125d0 <scan_files+0x1fc>)
 8012546:	4413      	add	r3, r2
 8012548:	5518      	strb	r0, [r3, r4]
 801254a:	3401      	adds	r4, #1
 801254c:	2cfe      	cmp	r4, #254	; 0xfe
 801254e:	d9ef      	bls.n	8012530 <scan_files+0x15c>
    						wcscat(new_path, L"/");
 8012550:	4c1a      	ldr	r4, [pc, #104]	; (80125bc <scan_files+0x1e8>)
 8012552:	4920      	ldr	r1, [pc, #128]	; (80125d4 <scan_files+0x200>)
 8012554:	4620      	mov	r0, r4
 8012556:	f004 ffc4 	bl	80174e2 <wcscat>
    						wcscat(new_path, fno.fname);
 801255a:	491a      	ldr	r1, [pc, #104]	; (80125c4 <scan_files+0x1f0>)
 801255c:	4620      	mov	r0, r4
 801255e:	f004 ffc0 	bl	80174e2 <wcscat>
    						GetFileName(new_path);
 8012562:	4620      	mov	r0, r4
 8012564:	f001 fc5c 	bl	8013e20 <GetFileName>
    						for(i = 0; i < 255; i++) TrackTable[Total_tracks][i] = rekordbox.file[i];
 8012568:	2300      	movs	r3, #0
 801256a:	e00b      	b.n	8012584 <scan_files+0x1b0>
 801256c:	4a17      	ldr	r2, [pc, #92]	; (80125cc <scan_files+0x1f8>)
 801256e:	8812      	ldrh	r2, [r2, #0]
 8012570:	4919      	ldr	r1, [pc, #100]	; (80125d8 <scan_files+0x204>)
 8012572:	4419      	add	r1, r3
 8012574:	f891 03fc 	ldrb.w	r0, [r1, #1020]	; 0x3fc
 8012578:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801257c:	4917      	ldr	r1, [pc, #92]	; (80125dc <scan_files+0x208>)
 801257e:	440a      	add	r2, r1
 8012580:	54d0      	strb	r0, [r2, r3]
 8012582:	3301      	adds	r3, #1
 8012584:	2bfe      	cmp	r3, #254	; 0xfe
 8012586:	d9f1      	bls.n	801256c <scan_files+0x198>
    						Total_tracks++;
 8012588:	4a10      	ldr	r2, [pc, #64]	; (80125cc <scan_files+0x1f8>)
 801258a:	8813      	ldrh	r3, [r2, #0]
 801258c:	3301      	adds	r3, #1
 801258e:	8013      	strh	r3, [r2, #0]
    						f_closedir(&folder);
 8012590:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8012594:	f7f7 f938 	bl	8009808 <f_closedir>
 8012598:	e78b      	b.n	80124b2 <scan_files+0xde>
    		f_closedir(&folder);
 801259a:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 801259e:	f7f7 f933 	bl	8009808 <f_closedir>
    return res;
 80125a2:	4b04      	ldr	r3, [pc, #16]	; (80125b4 <scan_files+0x1e0>)
 80125a4:	7818      	ldrb	r0, [r3, #0]
}
 80125a6:	f50d 6d8a 	add.w	sp, sp, #1104	; 0x450
 80125aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ae:	bf00      	nop
 80125b0:	200007f8 	.word	0x200007f8
 80125b4:	2000f970 	.word	0x2000f970
 80125b8:	0801d0a0 	.word	0x0801d0a0
 80125bc:	20000c44 	.word	0x20000c44
 80125c0:	0801d0e4 	.word	0x0801d0e4
 80125c4:	20000840 	.word	0x20000840
 80125c8:	20001040 	.word	0x20001040
 80125cc:	200007dc 	.word	0x200007dc
 80125d0:	20001b88 	.word	0x20001b88
 80125d4:	0801d124 	.word	0x0801d124
 80125d8:	200153a4 	.word	0x200153a4
 80125dc:	20008f6c 	.word	0x20008f6c

080125e0 <find_file>:
{
 80125e0:	b510      	push	{r4, lr}
 80125e2:	f5ad 6d8a 	sub.w	sp, sp, #1104	; 0x450
    TCHAR path[255] = {0};
 80125e6:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80125ea:	2100      	movs	r1, #0
 80125ec:	a801      	add	r0, sp, #4
 80125ee:	f004 fe77 	bl	80172e0 <memset>
    for(int i=0; i<255; i++) path[i] = ff_convert(TrackPaths[Track_number][i], 1);
 80125f2:	2400      	movs	r4, #0
 80125f4:	e00d      	b.n	8012612 <find_file+0x32>
 80125f6:	4b15      	ldr	r3, [pc, #84]	; (801264c <find_file+0x6c>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80125fe:	4a14      	ldr	r2, [pc, #80]	; (8012650 <find_file+0x70>)
 8012600:	4413      	add	r3, r2
 8012602:	2101      	movs	r1, #1
 8012604:	5d18      	ldrb	r0, [r3, r4]
 8012606:	f7f7 f95d 	bl	80098c4 <ff_convert>
 801260a:	ab01      	add	r3, sp, #4
 801260c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012610:	3401      	adds	r4, #1
 8012612:	2cfe      	cmp	r4, #254	; 0xfe
 8012614:	ddef      	ble.n	80125f6 <find_file+0x16>
    wcscpy(new_path, path);
 8012616:	4c0f      	ldr	r4, [pc, #60]	; (8012654 <find_file+0x74>)
 8012618:	a901      	add	r1, sp, #4
 801261a:	4620      	mov	r0, r4
 801261c:	f004 ff71 	bl	8017502 <wcscpy>
	res = f_opendir(&folder, new_path);
 8012620:	4621      	mov	r1, r4
 8012622:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8012626:	f7f7 f897 	bl	8009758 <f_opendir>
 801262a:	4b0b      	ldr	r3, [pc, #44]	; (8012658 <find_file+0x78>)
 801262c:	7018      	strb	r0, [r3, #0]
	if(res == FR_OK) {
 801262e:	b120      	cbz	r0, 801263a <find_file+0x5a>
}
 8012630:	4b09      	ldr	r3, [pc, #36]	; (8012658 <find_file+0x78>)
 8012632:	7818      	ldrb	r0, [r3, #0]
 8012634:	f50d 6d8a 	add.w	sp, sp, #1104	; 0x450
 8012638:	bd10      	pop	{r4, pc}
		res = f_readdir(&folder, &fno);
 801263a:	4908      	ldr	r1, [pc, #32]	; (801265c <find_file+0x7c>)
 801263c:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8012640:	f7f7 f8ef 	bl	8009822 <f_readdir>
 8012644:	4b04      	ldr	r3, [pc, #16]	; (8012658 <find_file+0x78>)
 8012646:	7018      	strb	r0, [r3, #0]
 8012648:	e7f2      	b.n	8012630 <find_file+0x50>
 801264a:	bf00      	nop
 801264c:	200007e0 	.word	0x200007e0
 8012650:	20001b88 	.word	0x20001b88
 8012654:	20000c44 	.word	0x20000c44
 8012658:	2000f970 	.word	0x2000f970
 801265c:	200007f8 	.word	0x200007f8

08012660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012660:	e7fe      	b.n	8012660 <Error_Handler>
	...

08012664 <SystemClock_Config>:
{
 8012664:	b500      	push	{lr}
 8012666:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012668:	2230      	movs	r2, #48	; 0x30
 801266a:	2100      	movs	r1, #0
 801266c:	a828      	add	r0, sp, #160	; 0xa0
 801266e:	f004 fe37 	bl	80172e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012672:	2100      	movs	r1, #0
 8012674:	9123      	str	r1, [sp, #140]	; 0x8c
 8012676:	9124      	str	r1, [sp, #144]	; 0x90
 8012678:	9125      	str	r1, [sp, #148]	; 0x94
 801267a:	9126      	str	r1, [sp, #152]	; 0x98
 801267c:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801267e:	2284      	movs	r2, #132	; 0x84
 8012680:	a802      	add	r0, sp, #8
 8012682:	f004 fe2d 	bl	80172e0 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8012686:	4b36      	ldr	r3, [pc, #216]	; (8012760 <SystemClock_Config+0xfc>)
 8012688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801268a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801268e:	641a      	str	r2, [r3, #64]	; 0x40
 8012690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012696:	9300      	str	r3, [sp, #0]
 8012698:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801269a:	4b32      	ldr	r3, [pc, #200]	; (8012764 <SystemClock_Config+0x100>)
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80126a2:	601a      	str	r2, [r3, #0]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80126aa:	9301      	str	r3, [sp, #4]
 80126ac:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80126ae:	2301      	movs	r3, #1
 80126b0:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80126b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80126b6:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80126b8:	2302      	movs	r3, #2
 80126ba:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80126bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80126c0:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80126c2:	2219      	movs	r2, #25
 80126c4:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 384;
 80126c6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80126ca:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80126cc:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80126ce:	2308      	movs	r3, #8
 80126d0:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80126d2:	a828      	add	r0, sp, #160	; 0xa0
 80126d4:	f7f0 fe44 	bl	8003360 <HAL_RCC_OscConfig>
 80126d8:	2800      	cmp	r0, #0
 80126da:	d138      	bne.n	801274e <SystemClock_Config+0xea>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80126dc:	f7f0 fe02 	bl	80032e4 <HAL_PWREx_EnableOverDrive>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d136      	bne.n	8012752 <SystemClock_Config+0xee>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80126e4:	230f      	movs	r3, #15
 80126e6:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80126e8:	2302      	movs	r3, #2
 80126ea:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80126ec:	2300      	movs	r3, #0
 80126ee:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80126f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80126f4:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80126f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126fa:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80126fc:	2106      	movs	r1, #6
 80126fe:	a823      	add	r0, sp, #140	; 0x8c
 8012700:	f7f1 f900 	bl	8003904 <HAL_RCC_ClockConfig>
 8012704:	bb38      	cbnz	r0, 8012756 <SystemClock_Config+0xf2>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8012706:	4b18      	ldr	r3, [pc, #96]	; (8012768 <SystemClock_Config+0x104>)
 8012708:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 801270a:	2364      	movs	r3, #100	; 0x64
 801270c:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 801270e:	2302      	movs	r3, #2
 8012710:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8012712:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8012714:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 240;
 8012716:	22f0      	movs	r2, #240	; 0xf0
 8012718:	9207      	str	r2, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 6;
 801271a:	2206      	movs	r2, #6
 801271c:	9209      	str	r2, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 801271e:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8012720:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8012722:	2301      	movs	r3, #1
 8012724:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8012726:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8012728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801272c:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 801272e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012732:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8012734:	2300      	movs	r3, #0
 8012736:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8012738:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801273c:	9221      	str	r2, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 801273e:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012740:	a802      	add	r0, sp, #8
 8012742:	f7f1 f9fb 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 8012746:	b940      	cbnz	r0, 801275a <SystemClock_Config+0xf6>
}
 8012748:	b035      	add	sp, #212	; 0xd4
 801274a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801274e:	f7ff ff87 	bl	8012660 <Error_Handler>
    Error_Handler();
 8012752:	f7ff ff85 	bl	8012660 <Error_Handler>
    Error_Handler();
 8012756:	f7ff ff83 	bl	8012660 <Error_Handler>
    Error_Handler();
 801275a:	f7ff ff81 	bl	8012660 <Error_Handler>
 801275e:	bf00      	nop
 8012760:	40023800 	.word	0x40023800
 8012764:	40007000 	.word	0x40007000
 8012768:	00b10008 	.word	0x00b10008

0801276c <main>:
{
 801276c:	b508      	push	{r3, lr}
  MPU_Config();
 801276e:	f7ff fe29 	bl	80123c4 <MPU_Config>
  __ASM volatile ("dsb 0xF":::"memory");
 8012772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012776:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 801277a:	4bb7      	ldr	r3, [pc, #732]	; (8012a58 <main+0x2ec>)
 801277c:	2100      	movs	r1, #0
 801277e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8012782:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012786:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 801278a:	695a      	ldr	r2, [r3, #20]
 801278c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8012790:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012792:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012796:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801279a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801279e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80127a2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80127a6:	f3c4 314e 	ubfx	r1, r4, #13, #15
 80127aa:	e00f      	b.n	80127cc <main+0x60>
      } while (ways-- != 0U);
 80127ac:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80127ae:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80127b2:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 80127b6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80127ba:	48a7      	ldr	r0, [pc, #668]	; (8012a58 <main+0x2ec>)
 80127bc:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80127c0:	1e53      	subs	r3, r2, #1
 80127c2:	2a00      	cmp	r2, #0
 80127c4:	d1f2      	bne.n	80127ac <main+0x40>
    } while(sets-- != 0U);
 80127c6:	1e4b      	subs	r3, r1, #1
 80127c8:	b119      	cbz	r1, 80127d2 <main+0x66>
 80127ca:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80127cc:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 80127d0:	e7ed      	b.n	80127ae <main+0x42>
 80127d2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80127d6:	6943      	ldr	r3, [r0, #20]
 80127d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80127dc:	6143      	str	r3, [r0, #20]
 80127de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80127e2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80127e6:	f7ee fd11 	bl	800120c <HAL_Init>
  SystemClock_Config();
 80127ea:	f7ff ff3b 	bl	8012664 <SystemClock_Config>
  MX_GPIO_Init();
 80127ee:	f7ff faff 	bl	8011df0 <MX_GPIO_Init>
  MX_DMA_Init();
 80127f2:	f7fe ffe5 	bl	80117c0 <MX_DMA_Init>
  MX_LTDC_Init();
 80127f6:	f7ff fca1 	bl	801213c <MX_LTDC_Init>
  MX_FMC_Init();
 80127fa:	f7ff f91d 	bl	8011a38 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80127fe:	f001 fcb7 	bl	8014170 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8012802:	f7ff f82f 	bl	8011864 <MX_FATFS_Init>
  MX_DMA2D_Init();
 8012806:	f7fe fff5 	bl	80117f4 <MX_DMA2D_Init>
  MX_SAI2_Init();
 801280a:	f001 fbaf 	bl	8013f6c <MX_SAI2_Init>
  MX_I2C3_Init();
 801280e:	f7ff fc31 	bl	8012074 <MX_I2C3_Init>
  MX_TIM4_Init();
 8012812:	f003 fa5f 	bl	8015cd4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8012816:	f003 fad1 	bl	8015dbc <MX_TIM6_Init>
  MX_TIM7_Init();
 801281a:	f003 faf9 	bl	8015e10 <MX_TIM7_Init>
  MX_TIM8_Init();
 801281e:	f003 fb21 	bl	8015e64 <MX_TIM8_Init>
  MX_SPI2_Init();
 8012822:	f001 fd03 	bl	801422c <MX_SPI2_Init>
  MX_TIM5_Init();
 8012826:	f003 fa8f 	bl	8015d48 <MX_TIM5_Init>
  MX_TIM9_Init();
 801282a:	f003 fb57 	bl	8015edc <MX_TIM9_Init>
  SDRAM_Init(); // MT48LC4M32B2B5-6A SDRAM initialization
 801282e:	f7ff f8a3 	bl	8011978 <SDRAM_Init>
  BSP_LCD_DisplayOff();
 8012832:	f7ff fdad 	bl	8012390 <BSP_LCD_DisplayOff>
  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_0, 0); // set layer 0 framebuffer address
 8012836:	4c89      	ldr	r4, [pc, #548]	; (8012a5c <main+0x2f0>)
 8012838:	2200      	movs	r2, #0
 801283a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801283e:	4620      	mov	r0, r4
 8012840:	f7f0 fcc6 	bl	80031d0 <HAL_LTDC_SetAddress>
  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_1, 1); // set layer 1 framebuffer address
 8012844:	2201      	movs	r2, #1
 8012846:	4986      	ldr	r1, [pc, #536]	; (8012a60 <main+0x2f4>)
 8012848:	4620      	mov	r0, r4
 801284a:	f7f0 fcc1 	bl	80031d0 <HAL_LTDC_SetAddress>
  ClearLayer(); // clear framebuffer 0
 801284e:	f7fc fc49 	bl	800f0e4 <ClearLayer>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer++);
 8012852:	4d84      	ldr	r5, [pc, #528]	; (8012a64 <main+0x2f8>)
 8012854:	782a      	ldrb	r2, [r5, #0]
 8012856:	1c53      	adds	r3, r2, #1
 8012858:	702b      	strb	r3, [r5, #0]
 801285a:	2100      	movs	r1, #0
 801285c:	4620      	mov	r0, r4
 801285e:	f7f0 fd0d 	bl	800327c <HAL_LTDC_SetAlpha_NoReload>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 8012862:	782a      	ldrb	r2, [r5, #0]
 8012864:	1e53      	subs	r3, r2, #1
 8012866:	702b      	strb	r3, [r5, #0]
 8012868:	21ff      	movs	r1, #255	; 0xff
 801286a:	4620      	mov	r0, r4
 801286c:	f7f0 fd06 	bl	800327c <HAL_LTDC_SetAlpha_NoReload>
  ChangeLayers();
 8012870:	f7fc fc5e 	bl	800f130 <ChangeLayers>
  ClearLayer(); // clear framebuffer 1
 8012874:	f7fc fc36 	bl	800f0e4 <ClearLayer>
  HAL_TIM_Base_Start_IT(&htim4); // start display refresh timer
 8012878:	487b      	ldr	r0, [pc, #492]	; (8012a68 <main+0x2fc>)
 801287a:	f7f3 feef 	bl	800665c <HAL_TIM_Base_Start_IT>
  if(BSP_SD_IsDetected() != SD_PRESENT) {
 801287e:	f7fc fbf3 	bl	800f068 <BSP_SD_IsDetected>
 8012882:	2801      	cmp	r0, #1
 8012884:	d005      	beq.n	8012892 <main+0x126>
	  menu_mode = 3;
 8012886:	4b79      	ldr	r3, [pc, #484]	; (8012a6c <main+0x300>)
 8012888:	2203      	movs	r2, #3
 801288a:	701a      	strb	r2, [r3, #0]
	  BSP_LCD_DisplayOn();
 801288c:	f7ff fd66 	bl	801235c <BSP_LCD_DisplayOn>
 8012890:	e7fe      	b.n	8012890 <main+0x124>
  BSP_TS_Init(480, 272); // touchscreen initialization
 8012892:	f44f 7188 	mov.w	r1, #272	; 0x110
 8012896:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801289a:	f001 ff39 	bl	8014710 <BSP_TS_Init>
  BSP_TS_ITClear();
 801289e:	f002 f8a7 	bl	80149f0 <BSP_TS_ITClear>
  BSP_TS_ITConfig();
 80128a2:	f001 ff5d 	bl	8014760 <BSP_TS_ITConfig>
  f_mount(&SDFatFs, (TCHAR const*)SDPath, 0); // SD card disk mount
 80128a6:	2200      	movs	r2, #0
 80128a8:	4971      	ldr	r1, [pc, #452]	; (8012a70 <main+0x304>)
 80128aa:	4872      	ldr	r0, [pc, #456]	; (8012a74 <main+0x308>)
 80128ac:	f7f6 fc7e 	bl	80091ac <f_mount>
  hMP3Decoder = MP3InitDecoder(); // mp3 decoder initialization
 80128b0:	f7f7 f84f 	bl	8009952 <MP3InitDecoder>
 80128b4:	4b70      	ldr	r3, [pc, #448]	; (8012a78 <main+0x30c>)
 80128b6:	6018      	str	r0, [r3, #0]
  scan_files(); // get total track number
 80128b8:	f7ff fd8c 	bl	80123d4 <scan_files>
  HAL_TIM_Base_Start_IT(&htim5); // start jog speed counting timer
 80128bc:	486f      	ldr	r0, [pc, #444]	; (8012a7c <main+0x310>)
 80128be:	f7f3 fecd 	bl	800665c <HAL_TIM_Base_Start_IT>
  HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 80128c2:	2304      	movs	r3, #4
 80128c4:	4a6e      	ldr	r2, [pc, #440]	; (8012a80 <main+0x314>)
 80128c6:	496f      	ldr	r1, [pc, #444]	; (8012a84 <main+0x318>)
 80128c8:	486f      	ldr	r0, [pc, #444]	; (8012a88 <main+0x31c>)
 80128ca:	f7f3 fca3 	bl	8006214 <HAL_SPI_TransmitReceive_IT>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, volume, (uint32_t)(AUDIO_FREQUENCY_22K)*(1 + trak.percent));
 80128ce:	4b6f      	ldr	r3, [pc, #444]	; (8012a8c <main+0x320>)
 80128d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80128d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80128d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80128dc:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8012a90 <main+0x324>
 80128e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80128e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80128e8:	ee17 2a90 	vmov	r2, s15
 80128ec:	4b69      	ldr	r3, [pc, #420]	; (8012a94 <main+0x328>)
 80128ee:	7819      	ldrb	r1, [r3, #0]
 80128f0:	2002      	movs	r0, #2
 80128f2:	f001 fe83 	bl	80145fc <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetVolume(0);
 80128f6:	2000      	movs	r0, #0
 80128f8:	f001 fd8c 	bl	8014414 <BSP_AUDIO_OUT_SetVolume>
  BSP_LCD_DisplayOn();
 80128fc:	f7ff fd2e 	bl	801235c <BSP_LCD_DisplayOn>
 8012900:	e03c      	b.n	801297c <main+0x210>
	  if(display.cuemode == 1) rekordbox.autocue = 1;
 8012902:	460a      	mov	r2, r1
 8012904:	f642 538c 	movw	r3, #11660	; 0x2d8c
 8012908:	2101      	movs	r1, #1
 801290a:	54d1      	strb	r1, [r2, r3]
 801290c:	e059      	b.n	80129c2 <main+0x256>
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 801290e:	f023 0302 	bic.w	r3, r3, #2
 8012912:	4a5c      	ldr	r2, [pc, #368]	; (8012a84 <main+0x318>)
 8012914:	7093      	strb	r3, [r2, #2]
 8012916:	e07a      	b.n	8012a0e <main+0x2a2>
			  PlayMp3File();
 8012918:	f000 fa44 	bl	8012da4 <PlayMp3File>
		  spi_tx[2] |= (1 << 3);
 801291c:	4a59      	ldr	r2, [pc, #356]	; (8012a84 <main+0x318>)
 801291e:	7893      	ldrb	r3, [r2, #2]
 8012920:	f043 0308 	orr.w	r3, r3, #8
 8012924:	7093      	strb	r3, [r2, #2]
		  trak.state = STOPPED;
 8012926:	4b59      	ldr	r3, [pc, #356]	; (8012a8c <main+0x320>)
 8012928:	2201      	movs	r2, #1
 801292a:	701a      	strb	r2, [r3, #0]
		  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 801292c:	2002      	movs	r0, #2
 801292e:	f001 fd55 	bl	80143dc <BSP_AUDIO_OUT_Stop>
	  if(file_pos_wide >= rekordbox.spectrum_size) {
 8012932:	4a59      	ldr	r2, [pc, #356]	; (8012a98 <main+0x32c>)
 8012934:	f242 434c 	movw	r3, #9292	; 0x244c
 8012938:	58d2      	ldr	r2, [r2, r3]
 801293a:	4b58      	ldr	r3, [pc, #352]	; (8012a9c <main+0x330>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	429a      	cmp	r2, r3
 8012940:	d803      	bhi.n	801294a <main+0x1de>
		  Track_number++;
 8012942:	4a57      	ldr	r2, [pc, #348]	; (8012aa0 <main+0x334>)
 8012944:	6813      	ldr	r3, [r2, #0]
 8012946:	3301      	adds	r3, #1
 8012948:	6013      	str	r3, [r2, #0]
	  file_pos_wide = 0;
 801294a:	4b54      	ldr	r3, [pc, #336]	; (8012a9c <main+0x330>)
 801294c:	2200      	movs	r2, #0
 801294e:	601a      	str	r2, [r3, #0]
	  menu_mode = 4;
 8012950:	4b46      	ldr	r3, [pc, #280]	; (8012a6c <main+0x300>)
 8012952:	2204      	movs	r2, #4
 8012954:	701a      	strb	r2, [r3, #0]
	  f_close(&MyFile);
 8012956:	4853      	ldr	r0, [pc, #332]	; (8012aa4 <main+0x338>)
 8012958:	f7f6 fd8c 	bl	8009474 <f_close>
	  f_closedir(&dir);
 801295c:	4852      	ldr	r0, [pc, #328]	; (8012aa8 <main+0x33c>)
 801295e:	f7f6 ff53 	bl	8009808 <f_closedir>
	  if(Track_number >= Total_tracks) Track_number = 0;
 8012962:	4b52      	ldr	r3, [pc, #328]	; (8012aac <main+0x340>)
 8012964:	881b      	ldrh	r3, [r3, #0]
 8012966:	4a4e      	ldr	r2, [pc, #312]	; (8012aa0 <main+0x334>)
 8012968:	6812      	ldr	r2, [r2, #0]
 801296a:	4293      	cmp	r3, r2
 801296c:	dc02      	bgt.n	8012974 <main+0x208>
 801296e:	4a4c      	ldr	r2, [pc, #304]	; (8012aa0 <main+0x334>)
 8012970:	2100      	movs	r1, #0
 8012972:	6011      	str	r1, [r2, #0]
	  if(Track_number < 0) Track_number = Total_tracks - 1;
 8012974:	4a4a      	ldr	r2, [pc, #296]	; (8012aa0 <main+0x334>)
 8012976:	6812      	ldr	r2, [r2, #0]
 8012978:	2a00      	cmp	r2, #0
 801297a:	db68      	blt.n	8012a4e <main+0x2e2>
	  find_file(Track_number);
 801297c:	4b48      	ldr	r3, [pc, #288]	; (8012aa0 <main+0x334>)
 801297e:	8818      	ldrh	r0, [r3, #0]
 8012980:	f7ff fe2e 	bl	80125e0 <find_file>
	  fr = 0;
 8012984:	2300      	movs	r3, #0
 8012986:	4a4a      	ldr	r2, [pc, #296]	; (8012ab0 <main+0x344>)
 8012988:	8013      	strh	r3, [r2, #0]
	  sec = 0;
 801298a:	4a4a      	ldr	r2, [pc, #296]	; (8012ab4 <main+0x348>)
 801298c:	7013      	strb	r3, [r2, #0]
	  min = 0;
 801298e:	4a4a      	ldr	r2, [pc, #296]	; (8012ab8 <main+0x34c>)
 8012990:	7013      	strb	r3, [r2, #0]
	  rfr = 0;
 8012992:	4a4a      	ldr	r2, [pc, #296]	; (8012abc <main+0x350>)
 8012994:	8013      	strh	r3, [r2, #0]
	  rsec = 0;
 8012996:	4a4a      	ldr	r2, [pc, #296]	; (8012ac0 <main+0x354>)
 8012998:	7013      	strb	r3, [r2, #0]
	  rmin = 0;
 801299a:	4a4a      	ldr	r2, [pc, #296]	; (8012ac4 <main+0x358>)
 801299c:	7013      	strb	r3, [r2, #0]
	  file_pos_wide = 0;
 801299e:	4a3f      	ldr	r2, [pc, #252]	; (8012a9c <main+0x330>)
 80129a0:	6013      	str	r3, [r2, #0]
	  position = 0;
 80129a2:	4a49      	ldr	r2, [pc, #292]	; (8012ac8 <main+0x35c>)
 80129a4:	6013      	str	r3, [r2, #0]
	  rekordbox.state = 0;
 80129a6:	493c      	ldr	r1, [pc, #240]	; (8012a98 <main+0x32c>)
 80129a8:	f642 5294 	movw	r2, #11668	; 0x2d94
 80129ac:	548b      	strb	r3, [r1, r2]
	  display.loop = 0;
 80129ae:	4a47      	ldr	r2, [pc, #284]	; (8012acc <main+0x360>)
 80129b0:	7413      	strb	r3, [r2, #16]
	  if(display.cuemode == 1) rekordbox.autocue = 1;
 80129b2:	7893      	ldrb	r3, [r2, #2]
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d0a4      	beq.n	8012902 <main+0x196>
	  else rekordbox.autocue = 0;
 80129b8:	4a37      	ldr	r2, [pc, #220]	; (8012a98 <main+0x32c>)
 80129ba:	f642 538c 	movw	r3, #11660	; 0x2d8c
 80129be:	2100      	movs	r1, #0
 80129c0:	54d1      	strb	r1, [r2, r3]
	  rekordbox.currentcue = 0;
 80129c2:	4d35      	ldr	r5, [pc, #212]	; (8012a98 <main+0x32c>)
 80129c4:	2400      	movs	r4, #0
 80129c6:	f642 5390 	movw	r3, #11664	; 0x2d90
 80129ca:	50ec      	str	r4, [r5, r3]
	  DecodeRekordboxFiles(new_path);
 80129cc:	4840      	ldr	r0, [pc, #256]	; (8012ad0 <main+0x364>)
 80129ce:	f000 fb99 	bl	8013104 <DecodeRekordboxFiles>
	  menu_mode = 0;
 80129d2:	4b26      	ldr	r3, [pc, #152]	; (8012a6c <main+0x300>)
 80129d4:	701c      	strb	r4, [r3, #0]
	  bar = 0;
 80129d6:	4b3f      	ldr	r3, [pc, #252]	; (8012ad4 <main+0x368>)
 80129d8:	601c      	str	r4, [r3, #0]
	  beat = 0;
 80129da:	4b3f      	ldr	r3, [pc, #252]	; (8012ad8 <main+0x36c>)
 80129dc:	601c      	str	r4, [r3, #0]
	  res = f_open(&MyFile, rekordbox.filename, FA_READ);
 80129de:	2201      	movs	r2, #1
 80129e0:	4629      	mov	r1, r5
 80129e2:	4830      	ldr	r0, [pc, #192]	; (8012aa4 <main+0x338>)
 80129e4:	f7f6 fc12 	bl	800920c <f_open>
 80129e8:	4b3c      	ldr	r3, [pc, #240]	; (8012adc <main+0x370>)
 80129ea:	7018      	strb	r0, [r3, #0]
	  if(res == FR_OK)
 80129ec:	2800      	cmp	r0, #0
 80129ee:	d1a0      	bne.n	8012932 <main+0x1c6>
		  trak.state = PLAYING;
 80129f0:	4b26      	ldr	r3, [pc, #152]	; (8012a8c <main+0x320>)
 80129f2:	701c      	strb	r4, [r3, #0]
		  spi_tx[2] &= ~(1 << 0);
 80129f4:	4b23      	ldr	r3, [pc, #140]	; (8012a84 <main+0x318>)
 80129f6:	789b      	ldrb	r3, [r3, #2]
 80129f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 80129fc:	f642 528c 	movw	r2, #11660	; 0x2d8c
 8012a00:	5caa      	ldrb	r2, [r5, r2]
 8012a02:	2a02      	cmp	r2, #2
 8012a04:	d083      	beq.n	801290e <main+0x1a2>
		  else spi_tx[2] |= (1 << 1);
 8012a06:	f043 0302 	orr.w	r3, r3, #2
 8012a0a:	4a1e      	ldr	r2, [pc, #120]	; (8012a84 <main+0x318>)
 8012a0c:	7093      	strb	r3, [r2, #2]
		  spi_tx[2] &= ~(1 << 3);
 8012a0e:	4a1d      	ldr	r2, [pc, #116]	; (8012a84 <main+0x318>)
 8012a10:	7893      	ldrb	r3, [r2, #2]
 8012a12:	f023 0308 	bic.w	r3, r3, #8
 8012a16:	7093      	strb	r3, [r2, #2]
		  if((strcmp(rekordbox.filetype, ".wav") == 0) || (strcmp(rekordbox.filetype, ".WAV") == 0)) {
 8012a18:	4931      	ldr	r1, [pc, #196]	; (8012ae0 <main+0x374>)
 8012a1a:	4832      	ldr	r0, [pc, #200]	; (8012ae4 <main+0x378>)
 8012a1c:	f7ed fbf8 	bl	8000210 <strcmp>
 8012a20:	b120      	cbz	r0, 8012a2c <main+0x2c0>
 8012a22:	4931      	ldr	r1, [pc, #196]	; (8012ae8 <main+0x37c>)
 8012a24:	482f      	ldr	r0, [pc, #188]	; (8012ae4 <main+0x378>)
 8012a26:	f7ed fbf3 	bl	8000210 <strcmp>
 8012a2a:	b908      	cbnz	r0, 8012a30 <main+0x2c4>
			  PlayWavFile();
 8012a2c:	f003 fcdc 	bl	80163e8 <PlayWavFile>
		  if((strcmp(rekordbox.filetype, ".mp3") == 0) || (strcmp(rekordbox.filetype, ".MP3") == 0)) {
 8012a30:	492e      	ldr	r1, [pc, #184]	; (8012aec <main+0x380>)
 8012a32:	482c      	ldr	r0, [pc, #176]	; (8012ae4 <main+0x378>)
 8012a34:	f7ed fbec 	bl	8000210 <strcmp>
 8012a38:	2800      	cmp	r0, #0
 8012a3a:	f43f af6d 	beq.w	8012918 <main+0x1ac>
 8012a3e:	492c      	ldr	r1, [pc, #176]	; (8012af0 <main+0x384>)
 8012a40:	4828      	ldr	r0, [pc, #160]	; (8012ae4 <main+0x378>)
 8012a42:	f7ed fbe5 	bl	8000210 <strcmp>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	f47f af68 	bne.w	801291c <main+0x1b0>
 8012a4c:	e764      	b.n	8012918 <main+0x1ac>
	  if(Track_number < 0) Track_number = Total_tracks - 1;
 8012a4e:	3b01      	subs	r3, #1
 8012a50:	4a13      	ldr	r2, [pc, #76]	; (8012aa0 <main+0x334>)
 8012a52:	6013      	str	r3, [r2, #0]
 8012a54:	e792      	b.n	801297c <main+0x210>
 8012a56:	bf00      	nop
 8012a58:	e000ed00 	.word	0xe000ed00
 8012a5c:	20001adc 	.word	0x20001adc
 8012a60:	c007f800 	.word	0xc007f800
 8012a64:	200007db 	.word	0x200007db
 8012a68:	2001834c 	.word	0x2001834c
 8012a6c:	200007c8 	.word	0x200007c8
 8012a70:	200015bc 	.word	0x200015bc
 8012a74:	2000f498 	.word	0x2000f498
 8012a78:	20008f68 	.word	0x20008f68
 8012a7c:	2001838c 	.word	0x2001838c
 8012a80:	20001444 	.word	0x20001444
 8012a84:	20000038 	.word	0x20000038
 8012a88:	200182a4 	.word	0x200182a4
 8012a8c:	20007f50 	.word	0x20007f50
 8012a90:	46ac4400 	.word	0x46ac4400
 8012a94:	2000003c 	.word	0x2000003c
 8012a98:	200153a4 	.word	0x200153a4
 8012a9c:	200007f0 	.word	0x200007f0
 8012aa0:	200007e0 	.word	0x200007e0
 8012aa4:	2000f720 	.word	0x2000f720
 8012aa8:	2000f6d0 	.word	0x2000f6d0
 8012aac:	200007dc 	.word	0x200007dc
 8012ab0:	20000c40 	.word	0x20000c40
 8012ab4:	20001440 	.word	0x20001440
 8012ab8:	20000c42 	.word	0x20000c42
 8012abc:	2000143c 	.word	0x2000143c
 8012ac0:	2000143f 	.word	0x2000143f
 8012ac4:	2000143e 	.word	0x2000143e
 8012ac8:	200007cc 	.word	0x200007cc
 8012acc:	20001560 	.word	0x20001560
 8012ad0:	20000c44 	.word	0x20000c44
 8012ad4:	200007b0 	.word	0x200007b0
 8012ad8:	200007b4 	.word	0x200007b4
 8012adc:	2000f970 	.word	0x2000f970
 8012ae0:	0801d080 	.word	0x0801d080
 8012ae4:	2001589f 	.word	0x2001589f
 8012ae8:	0801d088 	.word	0x0801d088
 8012aec:	0801d090 	.word	0x0801d090
 8012af0:	0801d098 	.word	0x0801d098

08012af4 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8012af4:	4770      	bx	lr

08012af6 <Mp3ReadId3V2Text>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Text(FIL* pInFile, uint32_t unDataLen, char* pszBuffer, uint32_t unBufferSize)
{
 8012af6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012af8:	b083      	sub	sp, #12
 8012afa:	4605      	mov	r5, r0
 8012afc:	460e      	mov	r6, r1
 8012afe:	4617      	mov	r7, r2
 8012b00:	461c      	mov	r4, r3
	UINT unRead = 0;
 8012b02:	2300      	movs	r3, #0
 8012b04:	9301      	str	r3, [sp, #4]
	BYTE byEncoding = 0;
 8012b06:	f88d 3003 	strb.w	r3, [sp, #3]
	if((f_read(pInFile, &byEncoding, 1, &unRead) == FR_OK) && (unRead == 1))
 8012b0a:	ab01      	add	r3, sp, #4
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	f10d 0103 	add.w	r1, sp, #3
 8012b12:	f7f6 fbea 	bl	80092ea <f_read>
 8012b16:	2800      	cmp	r0, #0
 8012b18:	d145      	bne.n	8012ba6 <Mp3ReadId3V2Text+0xb0>
 8012b1a:	9b01      	ldr	r3, [sp, #4]
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	d001      	beq.n	8012b24 <Mp3ReadId3V2Text+0x2e>
			}
		}
	}
	else
	{
		return 1;
 8012b20:	2001      	movs	r0, #1
 8012b22:	e041      	b.n	8012ba8 <Mp3ReadId3V2Text+0xb2>
		unDataLen--;
 8012b24:	3e01      	subs	r6, #1
		if(unDataLen <= (unBufferSize - 1))
 8012b26:	3c01      	subs	r4, #1
 8012b28:	42b4      	cmp	r4, r6
 8012b2a:	d32f      	bcc.n	8012b8c <Mp3ReadId3V2Text+0x96>
			if((f_read(pInFile, pszBuffer, unDataLen, &unRead) == FR_OK) ||
 8012b2c:	ab01      	add	r3, sp, #4
 8012b2e:	4632      	mov	r2, r6
 8012b30:	4639      	mov	r1, r7
 8012b32:	4628      	mov	r0, r5
 8012b34:	f7f6 fbd9 	bl	80092ea <f_read>
 8012b38:	b120      	cbz	r0, 8012b44 <Mp3ReadId3V2Text+0x4e>
					(unRead == unDataLen))
 8012b3a:	9b01      	ldr	r3, [sp, #4]
			if((f_read(pInFile, pszBuffer, unDataLen, &unRead) == FR_OK) ||
 8012b3c:	42b3      	cmp	r3, r6
 8012b3e:	d001      	beq.n	8012b44 <Mp3ReadId3V2Text+0x4e>
				return 1;
 8012b40:	2001      	movs	r0, #1
 8012b42:	e031      	b.n	8012ba8 <Mp3ReadId3V2Text+0xb2>
				if(byEncoding == 0)
 8012b44:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012b48:	b11b      	cbz	r3, 8012b52 <Mp3ReadId3V2Text+0x5c>
				else if(byEncoding == 1)
 8012b4a:	2b01      	cmp	r3, #1
 8012b4c:	d004      	beq.n	8012b58 <Mp3ReadId3V2Text+0x62>
	}
	return 0;
 8012b4e:	2000      	movs	r0, #0
 8012b50:	e02a      	b.n	8012ba8 <Mp3ReadId3V2Text+0xb2>
					pszBuffer[unDataLen] = 0;
 8012b52:	2000      	movs	r0, #0
 8012b54:	55b8      	strb	r0, [r7, r6]
 8012b56:	e027      	b.n	8012ba8 <Mp3ReadId3V2Text+0xb2>
					if((unDataLen > 2) && (pszBuffer[0] == 0xFF) && (pszBuffer[1] == 0xFE))
 8012b58:	2e02      	cmp	r6, #2
 8012b5a:	d909      	bls.n	8012b70 <Mp3ReadId3V2Text+0x7a>
 8012b5c:	783b      	ldrb	r3, [r7, #0]
 8012b5e:	2bff      	cmp	r3, #255	; 0xff
 8012b60:	d001      	beq.n	8012b66 <Mp3ReadId3V2Text+0x70>
					uint32_t r = 0;
 8012b62:	2300      	movs	r3, #0
 8012b64:	e005      	b.n	8012b72 <Mp3ReadId3V2Text+0x7c>
					if((unDataLen > 2) && (pszBuffer[0] == 0xFF) && (pszBuffer[1] == 0xFE))
 8012b66:	787b      	ldrb	r3, [r7, #1]
 8012b68:	2bfe      	cmp	r3, #254	; 0xfe
 8012b6a:	d004      	beq.n	8012b76 <Mp3ReadId3V2Text+0x80>
					uint32_t r = 0;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	e000      	b.n	8012b72 <Mp3ReadId3V2Text+0x7c>
 8012b70:	2300      	movs	r3, #0
						r = 2;
 8012b72:	2200      	movs	r2, #0
 8012b74:	e005      	b.n	8012b82 <Mp3ReadId3V2Text+0x8c>
 8012b76:	2302      	movs	r3, #2
 8012b78:	e7fb      	b.n	8012b72 <Mp3ReadId3V2Text+0x7c>
						pszBuffer[w] = pszBuffer[r];
 8012b7a:	5cf9      	ldrb	r1, [r7, r3]
 8012b7c:	54b9      	strb	r1, [r7, r2]
					for(; r < unDataLen; r += 2, w += 1)
 8012b7e:	3302      	adds	r3, #2
 8012b80:	3201      	adds	r2, #1
 8012b82:	42b3      	cmp	r3, r6
 8012b84:	d3f9      	bcc.n	8012b7a <Mp3ReadId3V2Text+0x84>
					pszBuffer[w] = 0;
 8012b86:	2000      	movs	r0, #0
 8012b88:	54b8      	strb	r0, [r7, r2]
 8012b8a:	e00d      	b.n	8012ba8 <Mp3ReadId3V2Text+0xb2>
			if(f_lseek(pInFile, f_tell(pInFile) + unDataLen) != FR_OK)
 8012b8c:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	; 0x38
 8012b90:	1982      	adds	r2, r0, r6
 8012b92:	f141 0300 	adc.w	r3, r1, #0
 8012b96:	4628      	mov	r0, r5
 8012b98:	f7f6 fc79 	bl	800948e <f_lseek>
 8012b9c:	b908      	cbnz	r0, 8012ba2 <Mp3ReadId3V2Text+0xac>
	return 0;
 8012b9e:	2000      	movs	r0, #0
 8012ba0:	e002      	b.n	8012ba8 <Mp3ReadId3V2Text+0xb2>
				return 1;
 8012ba2:	2001      	movs	r0, #1
 8012ba4:	e000      	b.n	8012ba8 <Mp3ReadId3V2Text+0xb2>
		return 1;
 8012ba6:	2001      	movs	r0, #1
}
 8012ba8:	b003      	add	sp, #12
 8012baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012bac <Mp3ReadId3V2Tag>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Tag(FIL* pInFile, char* pszArtist, uint32_t unArtistSize, char* pszTitle, uint32_t unTitleSize)
{
 8012bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb0:	b08b      	sub	sp, #44	; 0x2c
 8012bb2:	4606      	mov	r6, r0
 8012bb4:	460d      	mov	r5, r1
 8012bb6:	4617      	mov	r7, r2
 8012bb8:	461c      	mov	r4, r3
	pszArtist[0] = 0;
 8012bba:	2200      	movs	r2, #0
 8012bbc:	700a      	strb	r2, [r1, #0]
	pszTitle[0] = 0;
 8012bbe:	701a      	strb	r2, [r3, #0]

	BYTE id3hd[10];
	UINT unRead = 0;
 8012bc0:	ab0a      	add	r3, sp, #40	; 0x28
 8012bc2:	f843 2d10 	str.w	r2, [r3, #-16]!
	// read ID3 tag header (10 bytes)
	if((f_read(pInFile, id3hd, 10, &unRead) != FR_OK) || (unRead != 10))
 8012bc6:	220a      	movs	r2, #10
 8012bc8:	a907      	add	r1, sp, #28
 8012bca:	f7f6 fb8e 	bl	80092ea <f_read>
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	f040 80dc 	bne.w	8012d8c <Mp3ReadId3V2Tag+0x1e0>
 8012bd4:	9b06      	ldr	r3, [sp, #24]
 8012bd6:	2b0a      	cmp	r3, #10
 8012bd8:	d001      	beq.n	8012bde <Mp3ReadId3V2Tag+0x32>
	{
		return 1;
 8012bda:	2001      	movs	r0, #1
 8012bdc:	e0d7      	b.n	8012d8e <Mp3ReadId3V2Tag+0x1e2>
	}
	else
	{
		uint32_t unSkip = 0;
		id3tagsize = 0;
 8012bde:	4b6d      	ldr	r3, [pc, #436]	; (8012d94 <Mp3ReadId3V2Tag+0x1e8>)
 8012be0:	2200      	movs	r2, #0
 8012be2:	601a      	str	r2, [r3, #0]
		if((unRead == 10) &&
				(id3hd[0] == 'I') &&
 8012be4:	f89d 301c 	ldrb.w	r3, [sp, #28]
		if((unRead == 10) &&
 8012be8:	2b49      	cmp	r3, #73	; 0x49
 8012bea:	f040 80c3 	bne.w	8012d74 <Mp3ReadId3V2Tag+0x1c8>
				(id3hd[1] == 'D') &&
 8012bee:	f89d 301d 	ldrb.w	r3, [sp, #29]
				(id3hd[0] == 'I') &&
 8012bf2:	2b44      	cmp	r3, #68	; 0x44
 8012bf4:	d002      	beq.n	8012bfc <Mp3ReadId3V2Tag+0x50>
		uint32_t unSkip = 0;
 8012bf6:	f04f 0a00 	mov.w	sl, #0
 8012bfa:	e0bd      	b.n	8012d78 <Mp3ReadId3V2Tag+0x1cc>
				(id3hd[2] == '3'))
 8012bfc:	f89d 301e 	ldrb.w	r3, [sp, #30]
				(id3hd[1] == 'D') &&
 8012c00:	2b33      	cmp	r3, #51	; 0x33
 8012c02:	d002      	beq.n	8012c0a <Mp3ReadId3V2Tag+0x5e>
		uint32_t unSkip = 0;
 8012c04:	f04f 0a00 	mov.w	sl, #0
 8012c08:	e0b6      	b.n	8012d78 <Mp3ReadId3V2Tag+0x1cc>
		{
			// include ID3 header size (10 bytes)
			unSkip += 10;
			// ID3 tag full size
			unSkip = ((id3hd[6] & 0x7f) << 21) | ((id3hd[7] & 0x7f) << 14) | ((id3hd[8] & 0x7f) << 7) | (id3hd[9] & 0x7f);
 8012c0a:	f89d a022 	ldrb.w	sl, [sp, #34]	; 0x22
 8012c0e:	ea4f 5a4a 	mov.w	sl, sl, lsl #21
 8012c12:	f00a 6a7e 	and.w	sl, sl, #266338304	; 0xfe00000
 8012c16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012c1a:	039b      	lsls	r3, r3, #14
 8012c1c:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
 8012c20:	ea4a 0a03 	orr.w	sl, sl, r3
 8012c24:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012c28:	01db      	lsls	r3, r3, #7
 8012c2a:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8012c2e:	ea4a 0a03 	orr.w	sl, sl, r3
 8012c32:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8012c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c3a:	ea4a 0a03 	orr.w	sl, sl, r3
			id3tagsize = unSkip;
 8012c3e:	4b55      	ldr	r3, [pc, #340]	; (8012d94 <Mp3ReadId3V2Tag+0x1e8>)
 8012c40:	f8c3 a000 	str.w	sl, [r3]
			// try to get some information from the tag
			// skip the extended header, if present
			uint8_t unVersion = id3hd[3];
 8012c44:	f89d 901f 	ldrb.w	r9, [sp, #31]
			if(id3hd[5] & 0x40)
 8012c48:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8012c4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012c50:	d102      	bne.n	8012c58 <Mp3ReadId3V2Tag+0xac>
				{
					break;
				}
				char szFrameId[5] = {0, 0, 0, 0, 0};
				memcpy(szFrameId, frhd, 4);
				uint32_t unFrameSize = 0;
 8012c52:	f04f 0b02 	mov.w	fp, #2
 8012c56:	e06d      	b.n	8012d34 <Mp3ReadId3V2Tag+0x188>
				f_read(pInFile, exhd, 4, &unRead);
 8012c58:	ab06      	add	r3, sp, #24
 8012c5a:	2204      	movs	r2, #4
 8012c5c:	a903      	add	r1, sp, #12
 8012c5e:	4630      	mov	r0, r6
 8012c60:	f7f6 fb43 	bl	80092ea <f_read>
				size_t unExHdrSkip = ((exhd[0] & 0x7f) << 21) | ((exhd[1] & 0x7f) << 14) | ((exhd[2] & 0x7f) << 7) | (exhd[3] & 0x7f);
 8012c64:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8012c68:	0549      	lsls	r1, r1, #21
 8012c6a:	f001 617e 	and.w	r1, r1, #266338304	; 0xfe00000
 8012c6e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8012c72:	039b      	lsls	r3, r3, #14
 8012c74:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
 8012c78:	4319      	orrs	r1, r3
 8012c7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8012c7e:	01db      	lsls	r3, r3, #7
 8012c80:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8012c84:	4319      	orrs	r1, r3
 8012c86:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8012c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c8e:	4319      	orrs	r1, r3
				unExHdrSkip -= 4;
 8012c90:	3904      	subs	r1, #4
				if(f_lseek(pInFile, f_tell(pInFile) + unExHdrSkip) != FR_OK)
 8012c92:	e9d6 bc0e 	ldrd	fp, ip, [r6, #56]	; 0x38
 8012c96:	eb1b 0201 	adds.w	r2, fp, r1
 8012c9a:	f14c 0300 	adc.w	r3, ip, #0
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f7f6 fbf5 	bl	800948e <f_lseek>
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d0d4      	beq.n	8012c52 <Mp3ReadId3V2Tag+0xa6>
					return 1;
 8012ca8:	2001      	movs	r0, #1
 8012caa:	e070      	b.n	8012d8e <Mp3ReadId3V2Tag+0x1e2>
				{
					if(unVersion == 3)
					{
						// ID3v2.3
						unFrameSize <<= 8;
						unFrameSize += frhd[i + 4];
 8012cac:	1d1a      	adds	r2, r3, #4
 8012cae:	a90a      	add	r1, sp, #40	; 0x28
 8012cb0:	440a      	add	r2, r1
 8012cb2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8012cb6:	eb02 2808 	add.w	r8, r2, r8, lsl #8
 8012cba:	e005      	b.n	8012cc8 <Mp3ReadId3V2Tag+0x11c>
				for(; i < 4; i++)
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	2b03      	cmp	r3, #3
 8012cc0:	d80f      	bhi.n	8012ce2 <Mp3ReadId3V2Tag+0x136>
					if(unVersion == 3)
 8012cc2:	f1b9 0f03 	cmp.w	r9, #3
 8012cc6:	d0f1      	beq.n	8012cac <Mp3ReadId3V2Tag+0x100>
					}
					if(unVersion == 4)
 8012cc8:	f1b9 0f04 	cmp.w	r9, #4
 8012ccc:	d1f6      	bne.n	8012cbc <Mp3ReadId3V2Tag+0x110>
					{
						// ID3v2.4
						unFrameSize <<= 7;
						unFrameSize += frhd[i + 4] & 0x7F;
 8012cce:	1d1a      	adds	r2, r3, #4
 8012cd0:	a90a      	add	r1, sp, #40	; 0x28
 8012cd2:	440a      	add	r2, r1
 8012cd4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8012cd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012cdc:	eb02 18c8 	add.w	r8, r2, r8, lsl #7
 8012ce0:	e7ec      	b.n	8012cbc <Mp3ReadId3V2Tag+0x110>
					}
				}

				if(strcmp(szFrameId, "TPE1") == 0)
 8012ce2:	492d      	ldr	r1, [pc, #180]	; (8012d98 <Mp3ReadId3V2Tag+0x1ec>)
 8012ce4:	a801      	add	r0, sp, #4
 8012ce6:	f7ed fa93 	bl	8000210 <strcmp>
 8012cea:	b178      	cbz	r0, 8012d0c <Mp3ReadId3V2Tag+0x160>
					{
						break;
					}
					nFramesToRead--;
				}
				else if(strcmp(szFrameId, "TIT2") == 0)
 8012cec:	492b      	ldr	r1, [pc, #172]	; (8012d9c <Mp3ReadId3V2Tag+0x1f0>)
 8012cee:	a801      	add	r0, sp, #4
 8012cf0:	f7ed fa8e 	bl	8000210 <strcmp>
 8012cf4:	b9a0      	cbnz	r0, 8012d20 <Mp3ReadId3V2Tag+0x174>
				{
					// title
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszTitle, unTitleSize) != 0)
 8012cf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012cf8:	4622      	mov	r2, r4
 8012cfa:	4641      	mov	r1, r8
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	f7ff fefa 	bl	8012af6 <Mp3ReadId3V2Text>
 8012d02:	2800      	cmp	r0, #0
 8012d04:	d138      	bne.n	8012d78 <Mp3ReadId3V2Tag+0x1cc>
					{
						break;
					}
					nFramesToRead--;
 8012d06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d0a:	e013      	b.n	8012d34 <Mp3ReadId3V2Tag+0x188>
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszArtist, unArtistSize) != 0)
 8012d0c:	463b      	mov	r3, r7
 8012d0e:	462a      	mov	r2, r5
 8012d10:	4641      	mov	r1, r8
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ff feef 	bl	8012af6 <Mp3ReadId3V2Text>
 8012d18:	bb70      	cbnz	r0, 8012d78 <Mp3ReadId3V2Tag+0x1cc>
					nFramesToRead--;
 8012d1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d1e:	e009      	b.n	8012d34 <Mp3ReadId3V2Tag+0x188>
				}
				else
				{
					if(f_lseek(pInFile, f_tell(pInFile) + unFrameSize) != FR_OK)
 8012d20:	e9d6 010e 	ldrd	r0, r1, [r6, #56]	; 0x38
 8012d24:	eb10 0208 	adds.w	r2, r0, r8
 8012d28:	f141 0300 	adc.w	r3, r1, #0
 8012d2c:	4630      	mov	r0, r6
 8012d2e:	f7f6 fbae 	bl	800948e <f_lseek>
 8012d32:	b9e8      	cbnz	r0, 8012d70 <Mp3ReadId3V2Tag+0x1c4>
			while(nFramesToRead > 0)
 8012d34:	f1bb 0f00 	cmp.w	fp, #0
 8012d38:	d01e      	beq.n	8012d78 <Mp3ReadId3V2Tag+0x1cc>
				if((f_read(pInFile, frhd, 10, &unRead) != FR_OK) || (unRead != 10))
 8012d3a:	ab06      	add	r3, sp, #24
 8012d3c:	220a      	movs	r2, #10
 8012d3e:	a903      	add	r1, sp, #12
 8012d40:	4630      	mov	r0, r6
 8012d42:	f7f6 fad2 	bl	80092ea <f_read>
 8012d46:	b998      	cbnz	r0, 8012d70 <Mp3ReadId3V2Tag+0x1c4>
 8012d48:	9b06      	ldr	r3, [sp, #24]
 8012d4a:	2b0a      	cmp	r3, #10
 8012d4c:	d110      	bne.n	8012d70 <Mp3ReadId3V2Tag+0x1c4>
				if((frhd[0] == 0) || (strncmp(frhd, "3DI", 3) == 0))
 8012d4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012d52:	b18b      	cbz	r3, 8012d78 <Mp3ReadId3V2Tag+0x1cc>
 8012d54:	2203      	movs	r2, #3
 8012d56:	4912      	ldr	r1, [pc, #72]	; (8012da0 <Mp3ReadId3V2Tag+0x1f4>)
 8012d58:	a803      	add	r0, sp, #12
 8012d5a:	f004 fbb0 	bl	80174be <strncmp>
 8012d5e:	b158      	cbz	r0, 8012d78 <Mp3ReadId3V2Tag+0x1cc>
				char szFrameId[5] = {0, 0, 0, 0, 0};
 8012d60:	f04f 0800 	mov.w	r8, #0
 8012d64:	f88d 8008 	strb.w	r8, [sp, #8]
				memcpy(szFrameId, frhd, 4);
 8012d68:	9b03      	ldr	r3, [sp, #12]
 8012d6a:	9301      	str	r3, [sp, #4]
				uint32_t i = 0;
 8012d6c:	4643      	mov	r3, r8
				for(; i < 4; i++)
 8012d6e:	e7a6      	b.n	8012cbe <Mp3ReadId3V2Tag+0x112>
					return 1;
 8012d70:	2001      	movs	r0, #1
 8012d72:	e00c      	b.n	8012d8e <Mp3ReadId3V2Tag+0x1e2>
		uint32_t unSkip = 0;
 8012d74:	f04f 0a00 	mov.w	sl, #0
						return 1;
					}
				}
			}
		}
		if(f_lseek(pInFile, unSkip) != FR_OK)
 8012d78:	4652      	mov	r2, sl
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	f7f6 fb86 	bl	800948e <f_lseek>
 8012d82:	b908      	cbnz	r0, 8012d88 <Mp3ReadId3V2Tag+0x1dc>
		{
			return 1;
		}
	}

	return 0;
 8012d84:	2000      	movs	r0, #0
 8012d86:	e002      	b.n	8012d8e <Mp3ReadId3V2Tag+0x1e2>
			return 1;
 8012d88:	2001      	movs	r0, #1
 8012d8a:	e000      	b.n	8012d8e <Mp3ReadId3V2Tag+0x1e2>
		return 1;
 8012d8c:	2001      	movs	r0, #1
}
 8012d8e:	b00b      	add	sp, #44	; 0x2c
 8012d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d94:	2000f97c 	.word	0x2000f97c
 8012d98:	0801d130 	.word	0x0801d130
 8012d9c:	0801d138 	.word	0x0801d138
 8012da0:	0801d12c 	.word	0x0801d12c

08012da4 <PlayMp3File>:
		}
	}
	return res;
}

void PlayMp3File() {
 8012da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012da8:	b0bf      	sub	sp, #252	; 0xfc
	BufferCtl.filetype = 1;
 8012daa:	4d8a      	ldr	r5, [pc, #552]	; (8012fd4 <PlayMp3File+0x230>)
 8012dac:	f241 0308 	movw	r3, #4104	; 0x1008
 8012db0:	2201      	movs	r2, #1
 8012db2:	54ea      	strb	r2, [r5, r3]
	char szArtist[120];
	char szTitle[120];
	id3tagsize = 0;
 8012db4:	2400      	movs	r4, #0
 8012db6:	4b88      	ldr	r3, [pc, #544]	; (8012fd8 <PlayMp3File+0x234>)
 8012db8:	601c      	str	r4, [r3, #0]
	Mp3ReadId3V2Tag(&MyFile, szArtist, sizeof(szArtist), szTitle, sizeof(szTitle));
 8012dba:	2278      	movs	r2, #120	; 0x78
 8012dbc:	9200      	str	r2, [sp, #0]
 8012dbe:	ab02      	add	r3, sp, #8
 8012dc0:	a920      	add	r1, sp, #128	; 0x80
 8012dc2:	4886      	ldr	r0, [pc, #536]	; (8012fdc <PlayMp3File+0x238>)
 8012dc4:	f7ff fef2 	bl	8012bac <Mp3ReadId3V2Tag>
	bOutOfData = 0;
 8012dc8:	4b85      	ldr	r3, [pc, #532]	; (8012fe0 <PlayMp3File+0x23c>)
 8012dca:	601c      	str	r4, [r3, #0]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 8012dcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012dd0:	4621      	mov	r1, r4
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	f004 fa84 	bl	80172e0 <memset>
	//memset(g_pMp3DmaBuffer, 0, MP3_DMA_BUFFER_SIZE);
	g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 8012dd8:	4b82      	ldr	r3, [pc, #520]	; (8012fe4 <PlayMp3File+0x240>)
 8012dda:	4a83      	ldr	r2, [pc, #524]	; (8012fe8 <PlayMp3File+0x244>)
 8012ddc:	601a      	str	r2, [r3, #0]
	unInDataLeft = 0;
 8012dde:	4b83      	ldr	r3, [pc, #524]	; (8012fec <PlayMp3File+0x248>)
 8012de0:	601c      	str	r4, [r3, #0]
	unDmaBufferSpace = 0;
 8012de2:	4b83      	ldr	r3, [pc, #524]	; (8012ff0 <PlayMp3File+0x24c>)
 8012de4:	601c      	str	r4, [r3, #0]
	unFramesDecoded = 0;
 8012de6:	4b83      	ldr	r3, [pc, #524]	; (8012ff4 <PlayMp3File+0x250>)
 8012de8:	601c      	str	r4, [r3, #0]
	nDecodeRes = ERR_MP3_INDATA_UNDERFLOW;
 8012dea:	4b83      	ldr	r3, [pc, #524]	; (8012ff8 <PlayMp3File+0x254>)
 8012dec:	f04f 32ff 	mov.w	r2, #4294967295
 8012df0:	601a      	str	r2, [r3, #0]
	unDmaBufMode = 0;
 8012df2:	4b82      	ldr	r3, [pc, #520]	; (8012ffc <PlayMp3File+0x258>)
 8012df4:	601c      	str	r4, [r3, #0]
 8012df6:	e034      	b.n	8012e62 <PlayMp3File+0xbe>
	do {
		// fill the whole buffer for the first time
		if(unInDataLeft < (2 * MAINBUF_SIZE)) {
			UINT unRead = Mp3FillReadBuffer(pInData, unInDataLeft, &MyFile);
 8012df8:	4c81      	ldr	r4, [pc, #516]	; (8013000 <PlayMp3File+0x25c>)
 8012dfa:	4a78      	ldr	r2, [pc, #480]	; (8012fdc <PlayMp3File+0x238>)
 8012dfc:	6820      	ldr	r0, [r4, #0]
 8012dfe:	f001 fc6b 	bl	80146d8 <Mp3FillReadBuffer>
			unInDataLeft += unRead;
 8012e02:	4a7a      	ldr	r2, [pc, #488]	; (8012fec <PlayMp3File+0x248>)
 8012e04:	6813      	ldr	r3, [r2, #0]
 8012e06:	4418      	add	r0, r3
 8012e08:	6010      	str	r0, [r2, #0]
			pInData = BufferCtl.buff;
 8012e0a:	4b72      	ldr	r3, [pc, #456]	; (8012fd4 <PlayMp3File+0x230>)
 8012e0c:	6023      	str	r3, [r4, #0]
 8012e0e:	e02e      	b.n	8012e6e <PlayMp3File+0xca>
			unInDataLeft = 0;
			//bOutOfData = 1;
			//break;
		}
		else {
			pInData += nOffset;
 8012e10:	497b      	ldr	r1, [pc, #492]	; (8013000 <PlayMp3File+0x25c>)
 8012e12:	680b      	ldr	r3, [r1, #0]
 8012e14:	4423      	add	r3, r4
 8012e16:	600b      	str	r3, [r1, #0]
			unInDataLeft -= nOffset;
 8012e18:	4a74      	ldr	r2, [pc, #464]	; (8012fec <PlayMp3File+0x248>)
 8012e1a:	6813      	ldr	r3, [r2, #0]
 8012e1c:	1b1b      	subs	r3, r3, r4
 8012e1e:	6013      	str	r3, [r2, #0]
			// decode one MP3 frame - if offset < 0 then bytesLeft was less than a full frame
			nDecodeRes = MP3Decode(hMP3Decoder, &pInData, (int*)&unInDataLeft, (short*)g_pMp3OutBuffer, 0);
 8012e20:	4b78      	ldr	r3, [pc, #480]	; (8013004 <PlayMp3File+0x260>)
 8012e22:	6818      	ldr	r0, [r3, #0]
 8012e24:	2300      	movs	r3, #0
 8012e26:	9300      	str	r3, [sp, #0]
 8012e28:	4b77      	ldr	r3, [pc, #476]	; (8013008 <PlayMp3File+0x264>)
 8012e2a:	f7f6 fe07 	bl	8009a3c <MP3Decode>
 8012e2e:	4b72      	ldr	r3, [pc, #456]	; (8012ff8 <PlayMp3File+0x254>)
 8012e30:	6018      	str	r0, [r3, #0]
			switch(nDecodeRes) {
 8012e32:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012e36:	f000 80ba 	beq.w	8012fae <PlayMp3File+0x20a>
 8012e3a:	b320      	cbz	r0, 8012e86 <PlayMp3File+0xe2>
 8012e3c:	f110 0f02 	cmn.w	r0, #2
 8012e40:	d00a      	beq.n	8012e58 <PlayMp3File+0xb4>
				break;
			}
			default:
			{
				// just try to skip the offending frame...
				if(unInDataLeft > 0) {
 8012e42:	4b6a      	ldr	r3, [pc, #424]	; (8012fec <PlayMp3File+0x248>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	dd06      	ble.n	8012e58 <PlayMp3File+0xb4>
					unInDataLeft-=MP3_BYTES_SKIP;
 8012e4a:	3b01      	subs	r3, #1
 8012e4c:	4a67      	ldr	r2, [pc, #412]	; (8012fec <PlayMp3File+0x248>)
 8012e4e:	6013      	str	r3, [r2, #0]
					pInData+=MP3_BYTES_SKIP;
 8012e50:	4a6b      	ldr	r2, [pc, #428]	; (8013000 <PlayMp3File+0x25c>)
 8012e52:	6813      	ldr	r3, [r2, #0]
 8012e54:	3301      	adds	r3, #1
 8012e56:	6013      	str	r3, [r2, #0]
				break;
			}
			}
		}
	}
	while(!bOutOfData);
 8012e58:	4b61      	ldr	r3, [pc, #388]	; (8012fe0 <PlayMp3File+0x23c>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	f040 80af 	bne.w	8012fc0 <PlayMp3File+0x21c>
		if(unInDataLeft < (2 * MAINBUF_SIZE)) {
 8012e62:	4b62      	ldr	r3, [pc, #392]	; (8012fec <PlayMp3File+0x248>)
 8012e64:	6819      	ldr	r1, [r3, #0]
 8012e66:	f640 7327 	movw	r3, #3879	; 0xf27
 8012e6a:	4299      	cmp	r1, r3
 8012e6c:	ddc4      	ble.n	8012df8 <PlayMp3File+0x54>
		int nOffset = MP3FindSyncWord(pInData, unInDataLeft);
 8012e6e:	4b5f      	ldr	r3, [pc, #380]	; (8012fec <PlayMp3File+0x248>)
 8012e70:	6819      	ldr	r1, [r3, #0]
 8012e72:	4b63      	ldr	r3, [pc, #396]	; (8013000 <PlayMp3File+0x25c>)
 8012e74:	6818      	ldr	r0, [r3, #0]
 8012e76:	f7f6 fd70 	bl	800995a <MP3FindSyncWord>
		if(nOffset < 0) {
 8012e7a:	1e04      	subs	r4, r0, #0
 8012e7c:	dac8      	bge.n	8012e10 <PlayMp3File+0x6c>
			unInDataLeft = 0;
 8012e7e:	4b5b      	ldr	r3, [pc, #364]	; (8012fec <PlayMp3File+0x248>)
 8012e80:	2200      	movs	r2, #0
 8012e82:	601a      	str	r2, [r3, #0]
 8012e84:	e7e8      	b.n	8012e58 <PlayMp3File+0xb4>
				MP3GetLastFrameInfo(hMP3Decoder, &mp3FrameInfo);
 8012e86:	4c61      	ldr	r4, [pc, #388]	; (801300c <PlayMp3File+0x268>)
 8012e88:	4621      	mov	r1, r4
 8012e8a:	4b5e      	ldr	r3, [pc, #376]	; (8013004 <PlayMp3File+0x260>)
 8012e8c:	6818      	ldr	r0, [r3, #0]
 8012e8e:	f7f6 fd9f 	bl	80099d0 <MP3GetLastFrameInfo>
				unFramesDecoded++;
 8012e92:	4a58      	ldr	r2, [pc, #352]	; (8012ff4 <PlayMp3File+0x250>)
 8012e94:	6813      	ldr	r3, [r2, #0]
 8012e96:	3301      	adds	r3, #1
 8012e98:	6013      	str	r3, [r2, #0]
				g_pMp3OutBufferPtr = g_pMp3OutBuffer;
 8012e9a:	4b5d      	ldr	r3, [pc, #372]	; (8013010 <PlayMp3File+0x26c>)
 8012e9c:	4a5a      	ldr	r2, [pc, #360]	; (8013008 <PlayMp3File+0x264>)
 8012e9e:	601a      	str	r2, [r3, #0]
				uint32_t unOutBufferAvail = mp3FrameInfo.outputSamps;
 8012ea0:	6926      	ldr	r6, [r4, #16]
				while(unOutBufferAvail > 0) {
 8012ea2:	e00e      	b.n	8012ec2 <PlayMp3File+0x11e>
					else if(unDmaBufMode == 1) {
 8012ea4:	4b55      	ldr	r3, [pc, #340]	; (8012ffc <PlayMp3File+0x258>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d016      	beq.n	8012eda <PlayMp3File+0x136>
						unDmaBufferSpace = g_pMp3DmaBuffer + MP3_DMA_BUFFER_SIZE - g_pMp3DmaBufferPtr;
 8012eac:	4b4d      	ldr	r3, [pc, #308]	; (8012fe4 <PlayMp3File+0x240>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	4c58      	ldr	r4, [pc, #352]	; (8013014 <PlayMp3File+0x270>)
 8012eb2:	1ae4      	subs	r4, r4, r3
 8012eb4:	1064      	asrs	r4, r4, #1
					uint32_t unCopy = unDmaBufferSpace > unOutBufferAvail ? unOutBufferAvail : unDmaBufferSpace;
 8012eb6:	4635      	mov	r5, r6
 8012eb8:	42a6      	cmp	r6, r4
 8012eba:	bf28      	it	cs
 8012ebc:	4625      	movcs	r5, r4
					if(unCopy > 0) {
 8012ebe:	b995      	cbnz	r5, 8012ee6 <PlayMp3File+0x142>
					if(unDmaBufferSpace == 0) {
 8012ec0:	b33c      	cbz	r4, 8012f12 <PlayMp3File+0x16e>
				while(unOutBufferAvail > 0) {
 8012ec2:	2e00      	cmp	r6, #0
 8012ec4:	d0c8      	beq.n	8012e58 <PlayMp3File+0xb4>
					if(unDmaBufMode == 0) {
 8012ec6:	4b4d      	ldr	r3, [pc, #308]	; (8012ffc <PlayMp3File+0x258>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d1ea      	bne.n	8012ea4 <PlayMp3File+0x100>
						unDmaBufferSpace = g_pMp3DmaBuffer + MP3_DMA_BUFFER_SIZE - g_pMp3DmaBufferPtr;
 8012ece:	4b45      	ldr	r3, [pc, #276]	; (8012fe4 <PlayMp3File+0x240>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	4c50      	ldr	r4, [pc, #320]	; (8013014 <PlayMp3File+0x270>)
 8012ed4:	1ae4      	subs	r4, r4, r3
 8012ed6:	1064      	asrs	r4, r4, #1
 8012ed8:	e7ed      	b.n	8012eb6 <PlayMp3File+0x112>
						unDmaBufferSpace = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2) - g_pMp3DmaBufferPtr;
 8012eda:	4b42      	ldr	r3, [pc, #264]	; (8012fe4 <PlayMp3File+0x240>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	4c4e      	ldr	r4, [pc, #312]	; (8013018 <PlayMp3File+0x274>)
 8012ee0:	1ae4      	subs	r4, r4, r3
 8012ee2:	1064      	asrs	r4, r4, #1
 8012ee4:	e7e7      	b.n	8012eb6 <PlayMp3File+0x112>
						memcpy(g_pMp3DmaBufferPtr, g_pMp3OutBufferPtr, unCopy * sizeof(uint16_t));
 8012ee6:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8012eea:	4f3e      	ldr	r7, [pc, #248]	; (8012fe4 <PlayMp3File+0x240>)
 8012eec:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8013010 <PlayMp3File+0x26c>
 8012ef0:	4642      	mov	r2, r8
 8012ef2:	f8d9 1000 	ldr.w	r1, [r9]
 8012ef6:	6838      	ldr	r0, [r7, #0]
 8012ef8:	f004 f9ce 	bl	8017298 <memcpy>
						unOutBufferAvail -= unCopy;
 8012efc:	1b76      	subs	r6, r6, r5
						g_pMp3OutBufferPtr += unCopy;
 8012efe:	f8d9 3000 	ldr.w	r3, [r9]
 8012f02:	4443      	add	r3, r8
 8012f04:	f8c9 3000 	str.w	r3, [r9]
						unDmaBufferSpace -= unCopy;
 8012f08:	1b64      	subs	r4, r4, r5
						g_pMp3DmaBufferPtr += unCopy;
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	4443      	add	r3, r8
 8012f0e:	603b      	str	r3, [r7, #0]
 8012f10:	e7d6      	b.n	8012ec0 <PlayMp3File+0x11c>
						if(unDmaBufMode == 0) {
 8012f12:	4b3a      	ldr	r3, [pc, #232]	; (8012ffc <PlayMp3File+0x258>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	bb5b      	cbnz	r3, 8012f70 <PlayMp3File+0x1cc>
							if(mp3FrameInfo.samprate > 0) trak.bitrate = mp3FrameInfo.samprate;
 8012f18:	4b3c      	ldr	r3, [pc, #240]	; (801300c <PlayMp3File+0x268>)
 8012f1a:	689b      	ldr	r3, [r3, #8]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	dd2c      	ble.n	8012f7a <PlayMp3File+0x1d6>
 8012f20:	4a3e      	ldr	r2, [pc, #248]	; (801301c <PlayMp3File+0x278>)
 8012f22:	8113      	strh	r3, [r2, #8]
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 8012f24:	4a3d      	ldr	r2, [pc, #244]	; (801301c <PlayMp3File+0x278>)
 8012f26:	8913      	ldrh	r3, [r2, #8]
									*(1 + trak.percent), NULL);
 8012f28:	edd2 7a01 	vldr	s15, [r2, #4]
 8012f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012f30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012f34:	085b      	lsrs	r3, r3, #1
 8012f36:	ee07 3a90 	vmov	s15, r3
 8012f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 8012f42:	2200      	movs	r2, #0
 8012f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012f48:	ee17 1a90 	vmov	r1, s15
 8012f4c:	4834      	ldr	r0, [pc, #208]	; (8013020 <PlayMp3File+0x27c>)
 8012f4e:	f001 fb0f 	bl	8014570 <BSP_AUDIO_OUT_ClockConfig>
							BSP_AUDIO_OUT_Play(g_pMp3DmaBuffer, MP3_DMA_BUFFER_SIZE * sizeof(uint16_t));
 8012f52:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8012f56:	4824      	ldr	r0, [pc, #144]	; (8012fe8 <PlayMp3File+0x244>)
 8012f58:	f001 fa10 	bl	801437c <BSP_AUDIO_OUT_Play>
							BSP_AUDIO_OUT_SetVolume(volume);
 8012f5c:	4b31      	ldr	r3, [pc, #196]	; (8013024 <PlayMp3File+0x280>)
 8012f5e:	7818      	ldrb	r0, [r3, #0]
 8012f60:	f001 fa58 	bl	8014414 <BSP_AUDIO_OUT_SetVolume>
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 8012f64:	4a30      	ldr	r2, [pc, #192]	; (8013028 <PlayMp3File+0x284>)
 8012f66:	f642 538c 	movw	r3, #11660	; 0x2d8c
 8012f6a:	5cd3      	ldrb	r3, [r2, r3]
 8012f6c:	2b02      	cmp	r3, #2
 8012f6e:	d009      	beq.n	8012f84 <PlayMp3File+0x1e0>
						while(unDmaBufMode == 0);
 8012f70:	4b22      	ldr	r3, [pc, #136]	; (8012ffc <PlayMp3File+0x258>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d0fb      	beq.n	8012f70 <PlayMp3File+0x1cc>
 8012f78:	e7a3      	b.n	8012ec2 <PlayMp3File+0x11e>
							else trak.bitrate = AUDIO_FREQUENCY_44K;
 8012f7a:	4b28      	ldr	r3, [pc, #160]	; (801301c <PlayMp3File+0x278>)
 8012f7c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8012f80:	811a      	strh	r2, [r3, #8]
 8012f82:	e7cf      	b.n	8012f24 <PlayMp3File+0x180>
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 8012f84:	4b25      	ldr	r3, [pc, #148]	; (801301c <PlayMp3File+0x278>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d1f1      	bne.n	8012f70 <PlayMp3File+0x1cc>
								BSP_AUDIO_OUT_Pause();
 8012f8c:	f001 fa16 	bl	80143bc <BSP_AUDIO_OUT_Pause>
								trak.state = STOPPED;
 8012f90:	4b22      	ldr	r3, [pc, #136]	; (801301c <PlayMp3File+0x278>)
 8012f92:	2201      	movs	r2, #1
 8012f94:	701a      	strb	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim8);
 8012f96:	4825      	ldr	r0, [pc, #148]	; (801302c <PlayMp3File+0x288>)
 8012f98:	f7f3 fb60 	bl	800665c <HAL_TIM_Base_Start_IT>
								GoToPosition(rekordbox.cue_start_position[0]);
 8012f9c:	4a22      	ldr	r2, [pc, #136]	; (8013028 <PlayMp3File+0x284>)
 8012f9e:	f642 2308 	movw	r3, #10760	; 0x2a08
 8012fa2:	58d0      	ldr	r0, [r2, r3]
 8012fa4:	f003 f8f2 	bl	801618c <GoToPosition>
								TrackTime();
 8012fa8:	f003 f898 	bl	80160dc <TrackTime>
 8012fac:	e7e0      	b.n	8012f70 <PlayMp3File+0x1cc>
				if(nOffset == 0)
 8012fae:	b91c      	cbnz	r4, 8012fb8 <PlayMp3File+0x214>
					bOutOfData = 1;
 8012fb0:	4b0b      	ldr	r3, [pc, #44]	; (8012fe0 <PlayMp3File+0x23c>)
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	601a      	str	r2, [r3, #0]
 8012fb6:	e74f      	b.n	8012e58 <PlayMp3File+0xb4>
					unInDataLeft = 0;
 8012fb8:	4b0c      	ldr	r3, [pc, #48]	; (8012fec <PlayMp3File+0x248>)
 8012fba:	2200      	movs	r2, #0
 8012fbc:	601a      	str	r2, [r3, #0]
 8012fbe:	e74b      	b.n	8012e58 <PlayMp3File+0xb4>
	BSP_AUDIO_OUT_SetVolume(0);
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	f001 fa27 	bl	8014414 <BSP_AUDIO_OUT_SetVolume>
	while(unDmaBufMode < 3);
 8012fc6:	4b0d      	ldr	r3, [pc, #52]	; (8012ffc <PlayMp3File+0x258>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	2b02      	cmp	r3, #2
 8012fcc:	d9fb      	bls.n	8012fc6 <PlayMp3File+0x222>
}
 8012fce:	b03f      	add	sp, #252	; 0xfc
 8012fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fd4:	20007f5c 	.word	0x20007f5c
 8012fd8:	2000f97c 	.word	0x2000f97c
 8012fdc:	2000f720 	.word	0x2000f720
 8012fe0:	200007e4 	.word	0x200007e4
 8012fe4:	20001450 	.word	0x20001450
 8012fe8:	20010b9c 	.word	0x20010b9c
 8012fec:	20001464 	.word	0x20001464
 8012ff0:	2000145c 	.word	0x2000145c
 8012ff4:	20001460 	.word	0x20001460
 8012ff8:	20001458 	.word	0x20001458
 8012ffc:	2000144c 	.word	0x2000144c
 8013000:	20000040 	.word	0x20000040
 8013004:	20008f68 	.word	0x20008f68
 8013008:	2000f980 	.word	0x2000f980
 801300c:	20010b80 	.word	0x20010b80
 8013010:	20001454 	.word	0x20001454
 8013014:	2001539c 	.word	0x2001539c
 8013018:	20012f9c 	.word	0x20012f9c
 801301c:	20007f50 	.word	0x20007f50
 8013020:	2001813c 	.word	0x2001813c
 8013024:	2000003c 	.word	0x2000003c
 8013028:	200153a4 	.word	0x200153a4
 801302c:	2001830c 	.word	0x2001830c

08013030 <GetLongNumber>:
		if(strcmp(tag, token) == 0) return 0;
	}
	return 1;
}

static int32_t GetLongNumber () {
 8013030:	b508      	push	{r3, lr}
	uint8_t i = 0;
	int32_t out_data = 0;
	for(int i = 0; i < 5; i++) tag[i] = 0;
 8013032:	2300      	movs	r3, #0
 8013034:	e003      	b.n	801303e <GetLongNumber+0xe>
 8013036:	4a0d      	ldr	r2, [pc, #52]	; (801306c <GetLongNumber+0x3c>)
 8013038:	2100      	movs	r1, #0
 801303a:	54d1      	strb	r1, [r2, r3]
 801303c:	3301      	adds	r3, #1
 801303e:	2b04      	cmp	r3, #4
 8013040:	ddf9      	ble.n	8013036 <GetLongNumber+0x6>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 8013042:	4b0b      	ldr	r3, [pc, #44]	; (8013070 <GetLongNumber+0x40>)
 8013044:	2204      	movs	r2, #4
 8013046:	4909      	ldr	r1, [pc, #36]	; (801306c <GetLongNumber+0x3c>)
 8013048:	480a      	ldr	r0, [pc, #40]	; (8013074 <GetLongNumber+0x44>)
 801304a:	f7f6 f94e 	bl	80092ea <f_read>
 801304e:	2800      	cmp	r0, #0
 8013050:	d1f7      	bne.n	8013042 <GetLongNumber+0x12>
	for(i = 0; i < 4; i++) {
 8013052:	4603      	mov	r3, r0
 8013054:	e005      	b.n	8013062 <GetLongNumber+0x32>
		out_data |= tag[i];
 8013056:	4a05      	ldr	r2, [pc, #20]	; (801306c <GetLongNumber+0x3c>)
 8013058:	5cd2      	ldrb	r2, [r2, r3]
 801305a:	4310      	orrs	r0, r2
		out_data <<= 8;
 801305c:	0200      	lsls	r0, r0, #8
	for(i = 0; i < 4; i++) {
 801305e:	3301      	adds	r3, #1
 8013060:	b2db      	uxtb	r3, r3
 8013062:	2b03      	cmp	r3, #3
 8013064:	d9f7      	bls.n	8013056 <GetLongNumber+0x26>
	}
	out_data >>= 8;
	return out_data;
}
 8013066:	1200      	asrs	r0, r0, #8
 8013068:	bd08      	pop	{r3, pc}
 801306a:	bf00      	nop
 801306c:	2001539c 	.word	0x2001539c
 8013070:	200007e8 	.word	0x200007e8
 8013074:	2000f720 	.word	0x2000f720

08013078 <FindToken>:
static uint8_t FindToken (char *token) {
 8013078:	b510      	push	{r4, lr}
 801307a:	4604      	mov	r4, r0
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801307c:	2300      	movs	r3, #0
 801307e:	e003      	b.n	8013088 <FindToken+0x10>
 8013080:	4a1c      	ldr	r2, [pc, #112]	; (80130f4 <FindToken+0x7c>)
 8013082:	2100      	movs	r1, #0
 8013084:	54d1      	strb	r1, [r2, r3]
 8013086:	3301      	adds	r3, #1
 8013088:	2b04      	cmp	r3, #4
 801308a:	ddf9      	ble.n	8013080 <FindToken+0x8>
 801308c:	e00e      	b.n	80130ac <FindToken+0x34>
		while(f_read(&MyFile, &tag[1], 3, (void *)&bytesread) != FR_OK);
 801308e:	4b1a      	ldr	r3, [pc, #104]	; (80130f8 <FindToken+0x80>)
 8013090:	2203      	movs	r2, #3
 8013092:	491a      	ldr	r1, [pc, #104]	; (80130fc <FindToken+0x84>)
 8013094:	481a      	ldr	r0, [pc, #104]	; (8013100 <FindToken+0x88>)
 8013096:	f7f6 f928 	bl	80092ea <f_read>
 801309a:	2800      	cmp	r0, #0
 801309c:	d1f7      	bne.n	801308e <FindToken+0x16>
		tag[4] = '\0';
 801309e:	4815      	ldr	r0, [pc, #84]	; (80130f4 <FindToken+0x7c>)
 80130a0:	2300      	movs	r3, #0
 80130a2:	7103      	strb	r3, [r0, #4]
		if(strcmp(tag, token) == 0) return 0;
 80130a4:	4621      	mov	r1, r4
 80130a6:	f7ed f8b3 	bl	8000210 <strcmp>
 80130aa:	b300      	cbz	r0, 80130ee <FindToken+0x76>
	while(f_tell(&MyFile) < f_size(&MyFile)) {
 80130ac:	4b14      	ldr	r3, [pc, #80]	; (8013100 <FindToken+0x88>)
 80130ae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80130b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80130b6:	4299      	cmp	r1, r3
 80130b8:	bf08      	it	eq
 80130ba:	4290      	cmpeq	r0, r2
 80130bc:	d215      	bcs.n	80130ea <FindToken+0x72>
		while(f_tell(&MyFile) < f_size(&MyFile)) {
 80130be:	4b10      	ldr	r3, [pc, #64]	; (8013100 <FindToken+0x88>)
 80130c0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80130c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80130c8:	4299      	cmp	r1, r3
 80130ca:	bf08      	it	eq
 80130cc:	4290      	cmpeq	r0, r2
 80130ce:	d2de      	bcs.n	801308e <FindToken+0x16>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 80130d0:	4b09      	ldr	r3, [pc, #36]	; (80130f8 <FindToken+0x80>)
 80130d2:	2201      	movs	r2, #1
 80130d4:	4907      	ldr	r1, [pc, #28]	; (80130f4 <FindToken+0x7c>)
 80130d6:	480a      	ldr	r0, [pc, #40]	; (8013100 <FindToken+0x88>)
 80130d8:	f7f6 f907 	bl	80092ea <f_read>
 80130dc:	2800      	cmp	r0, #0
 80130de:	d1f7      	bne.n	80130d0 <FindToken+0x58>
			if(tag[0] == 'P') break;
 80130e0:	4b04      	ldr	r3, [pc, #16]	; (80130f4 <FindToken+0x7c>)
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	2b50      	cmp	r3, #80	; 0x50
 80130e6:	d1ea      	bne.n	80130be <FindToken+0x46>
 80130e8:	e7d1      	b.n	801308e <FindToken+0x16>
	return 1;
 80130ea:	2001      	movs	r0, #1
}
 80130ec:	bd10      	pop	{r4, pc}
		if(strcmp(tag, token) == 0) return 0;
 80130ee:	2000      	movs	r0, #0
 80130f0:	e7fc      	b.n	80130ec <FindToken+0x74>
 80130f2:	bf00      	nop
 80130f4:	2001539c 	.word	0x2001539c
 80130f8:	200007e8 	.word	0x200007e8
 80130fc:	2001539d 	.word	0x2001539d
 8013100:	2000f720 	.word	0x2000f720

08013104 <DecodeRekordboxFiles>:
	}
	out_data >>= 8;
	return out_data;
}

uint8_t DecodeRekordboxFiles(TCHAR *path) {
 8013104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013108:	f2ad 5d04 	subw	sp, sp, #1284	; 0x504
 801310c:	4604      	mov	r4, r0
	uint32_t data_size = 0;
	uint8_t k;
	uint32_t i;
	uint8_t res = FR_OK;
	for(i = 0; i < 1000; i++) {
 801310e:	2300      	movs	r3, #0
 8013110:	e011      	b.n	8013136 <DecodeRekordboxFiles+0x32>
		rekordbox.bpm[i] = 0;
 8013112:	4a99      	ldr	r2, [pc, #612]	; (8013378 <DecodeRekordboxFiles+0x274>)
 8013114:	f503 7020 	add.w	r0, r3, #640	; 0x280
 8013118:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801311c:	2100      	movs	r1, #0
 801311e:	8081      	strh	r1, [r0, #4]
		rekordbox.phase[i] = 0;
 8013120:	f503 60cd 	add.w	r0, r3, #1640	; 0x668
 8013124:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8013128:	8081      	strh	r1, [r0, #4]
		rekordbox.timeindex[i] = 0;
 801312a:	f503 60a5 	add.w	r0, r3, #1320	; 0x528
 801312e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8013132:	6051      	str	r1, [r2, #4]
	for(i = 0; i < 1000; i++) {
 8013134:	3301      	adds	r3, #1
 8013136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801313a:	d3ea      	bcc.n	8013112 <DecodeRekordboxFiles+0xe>
	}
	rekordbox.cues = 0;
 801313c:	2300      	movs	r3, #0
 801313e:	498e      	ldr	r1, [pc, #568]	; (8013378 <DecodeRekordboxFiles+0x274>)
 8013140:	f242 5254 	movw	r2, #9556	; 0x2554
 8013144:	508b      	str	r3, [r1, r2]
	// Clear SDRAM or fill with some pattern/color
	for(i = 0; i < 1000000; i++) *(__IO uint8_t*)(WAVE_BUFFER+i) = 0;
 8013146:	e003      	b.n	8013150 <DecodeRekordboxFiles+0x4c>
 8013148:	4a8c      	ldr	r2, [pc, #560]	; (801337c <DecodeRekordboxFiles+0x278>)
 801314a:	2100      	movs	r1, #0
 801314c:	5499      	strb	r1, [r3, r2]
 801314e:	3301      	adds	r3, #1
 8013150:	4a8b      	ldr	r2, [pc, #556]	; (8013380 <DecodeRekordboxFiles+0x27c>)
 8013152:	4293      	cmp	r3, r2
 8013154:	d9f8      	bls.n	8013148 <DecodeRekordboxFiles+0x44>
	for(i = 0; i < 255; i++) rekordbox.filename[i] = 0;
 8013156:	2300      	movs	r3, #0
 8013158:	e004      	b.n	8013164 <DecodeRekordboxFiles+0x60>
 801315a:	4a87      	ldr	r2, [pc, #540]	; (8013378 <DecodeRekordboxFiles+0x274>)
 801315c:	2100      	movs	r1, #0
 801315e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8013162:	3301      	adds	r3, #1
 8013164:	2bfe      	cmp	r3, #254	; 0xfe
 8013166:	d9f8      	bls.n	801315a <DecodeRekordboxFiles+0x56>
	char filename[255] = {0};
 8013168:	22ff      	movs	r2, #255	; 0xff
 801316a:	2100      	movs	r1, #0
 801316c:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8013170:	f004 f8b6 	bl	80172e0 <memset>
	TCHAR my_path[255] = {0};
 8013174:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8013178:	2100      	movs	r1, #0
 801317a:	a801      	add	r0, sp, #4
 801317c:	f004 f8b0 	bl	80172e0 <memset>
	wcscpy(my_path, path);
 8013180:	4621      	mov	r1, r4
 8013182:	a801      	add	r0, sp, #4
 8013184:	f004 f9bd 	bl	8017502 <wcscpy>
	wcscat(my_path, L"/ANLZ0000.DAT");
 8013188:	497e      	ldr	r1, [pc, #504]	; (8013384 <DecodeRekordboxFiles+0x280>)
 801318a:	a801      	add	r0, sp, #4
 801318c:	f004 f9a9 	bl	80174e2 <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8013190:	2201      	movs	r2, #1
 8013192:	a901      	add	r1, sp, #4
 8013194:	487c      	ldr	r0, [pc, #496]	; (8013388 <DecodeRekordboxFiles+0x284>)
 8013196:	f7f6 f839 	bl	800920c <f_open>
	if(res == FR_OK)
 801319a:	b148      	cbz	r0, 80131b0 <DecodeRekordboxFiles+0xac>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);

		if(FindToken(cob_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
		rekordbox.cues = GetLongNumber() + 1;
		for(i = 1; i < rekordbox.cues; i++) {
 801319c:	2300      	movs	r3, #0
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
		}
		f_close(&MyFile);
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 801319e:	2bfe      	cmp	r3, #254	; 0xfe
 80131a0:	f200 825e 	bhi.w	8013660 <DecodeRekordboxFiles+0x55c>
 80131a4:	aa01      	add	r2, sp, #4
 80131a6:	2100      	movs	r1, #0
 80131a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80131ac:	3301      	adds	r3, #1
 80131ae:	e7f6      	b.n	801319e <DecodeRekordboxFiles+0x9a>
		if(FindToken(path_token) != 0) return 1;
 80131b0:	4876      	ldr	r0, [pc, #472]	; (801338c <DecodeRekordboxFiles+0x288>)
 80131b2:	f7ff ff61 	bl	8013078 <FindToken>
 80131b6:	4606      	mov	r6, r0
 80131b8:	2800      	cmp	r0, #0
 80131ba:	f040 85fd 	bne.w	8013db8 <DecodeRekordboxFiles+0xcb4>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 80131be:	4b74      	ldr	r3, [pc, #464]	; (8013390 <DecodeRekordboxFiles+0x28c>)
 80131c0:	2208      	movs	r2, #8
 80131c2:	4974      	ldr	r1, [pc, #464]	; (8013394 <DecodeRekordboxFiles+0x290>)
 80131c4:	4870      	ldr	r0, [pc, #448]	; (8013388 <DecodeRekordboxFiles+0x284>)
 80131c6:	f7f6 f890 	bl	80092ea <f_read>
 80131ca:	2800      	cmp	r0, #0
 80131cc:	d1f7      	bne.n	80131be <DecodeRekordboxFiles+0xba>
		data_size = GetLongNumber();
 80131ce:	f7ff ff2f 	bl	8013030 <GetLongNumber>
 80131d2:	4605      	mov	r5, r0
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 80131d4:	4b6e      	ldr	r3, [pc, #440]	; (8013390 <DecodeRekordboxFiles+0x28c>)
 80131d6:	462a      	mov	r2, r5
 80131d8:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
 80131dc:	486a      	ldr	r0, [pc, #424]	; (8013388 <DecodeRekordboxFiles+0x284>)
 80131de:	f7f6 f884 	bl	80092ea <f_read>
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d1f6      	bne.n	80131d4 <DecodeRekordboxFiles+0xd0>
		k = 0;
 80131e6:	4637      	mov	r7, r6
		i = 0;
 80131e8:	f04f 0800 	mov.w	r8, #0
 80131ec:	e015      	b.n	801321a <DecodeRekordboxFiles+0x116>
			WCHAR c = filename[i];
 80131ee:	f50d 6980 	add.w	r9, sp, #1024	; 0x400
 80131f2:	f819 3008 	ldrb.w	r3, [r9, r8]
			i++;
 80131f6:	f108 0201 	add.w	r2, r8, #1
			c |= filename[i];
 80131fa:	f819 0002 	ldrb.w	r0, [r9, r2]
 80131fe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			i++;
 8013202:	f108 0802 	add.w	r8, r8, #2
			rekordbox.filename[k] = c;
 8013206:	4b5c      	ldr	r3, [pc, #368]	; (8013378 <DecodeRekordboxFiles+0x274>)
 8013208:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
			filename[k] = ff_convert(c, 0);
 801320c:	2100      	movs	r1, #0
 801320e:	f7f6 fb59 	bl	80098c4 <ff_convert>
 8013212:	f809 0007 	strb.w	r0, [r9, r7]
			k++;
 8013216:	3701      	adds	r7, #1
 8013218:	b2ff      	uxtb	r7, r7
		while(i < data_size) {
 801321a:	45a8      	cmp	r8, r5
 801321c:	d3e7      	bcc.n	80131ee <DecodeRekordboxFiles+0xea>
 801321e:	e004      	b.n	801322a <DecodeRekordboxFiles+0x126>
		for(i = k; i < data_size; i++) filename[i] = 0;
 8013220:	f50d 6380 	add.w	r3, sp, #1024	; 0x400
 8013224:	2200      	movs	r2, #0
 8013226:	55da      	strb	r2, [r3, r7]
 8013228:	3701      	adds	r7, #1
 801322a:	42af      	cmp	r7, r5
 801322c:	d3f8      	bcc.n	8013220 <DecodeRekordboxFiles+0x11c>
		i = data_size;
 801322e:	462b      	mov	r3, r5
 8013230:	e000      	b.n	8013234 <DecodeRekordboxFiles+0x130>
		while((i > 0) && (filename[i] != '.')) i--;
 8013232:	3b01      	subs	r3, #1
 8013234:	b1ab      	cbz	r3, 8013262 <DecodeRekordboxFiles+0x15e>
 8013236:	f50d 6280 	add.w	r2, sp, #1024	; 0x400
 801323a:	5cd2      	ldrb	r2, [r2, r3]
 801323c:	2a2e      	cmp	r2, #46	; 0x2e
 801323e:	d1f8      	bne.n	8013232 <DecodeRekordboxFiles+0x12e>
 8013240:	4632      	mov	r2, r6
 8013242:	e000      	b.n	8013246 <DecodeRekordboxFiles+0x142>
			i++;
 8013244:	3301      	adds	r3, #1
		while(k < 5)
 8013246:	2a04      	cmp	r2, #4
 8013248:	d80d      	bhi.n	8013266 <DecodeRekordboxFiles+0x162>
			if(filename[i] >= 32) {
 801324a:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
 801324e:	5cc9      	ldrb	r1, [r1, r3]
 8013250:	291f      	cmp	r1, #31
 8013252:	d9f7      	bls.n	8013244 <DecodeRekordboxFiles+0x140>
				rekordbox.filetype[k] = filename[i];
 8013254:	4848      	ldr	r0, [pc, #288]	; (8013378 <DecodeRekordboxFiles+0x274>)
 8013256:	4410      	add	r0, r2
 8013258:	f880 14fb 	strb.w	r1, [r0, #1275]	; 0x4fb
				k++;
 801325c:	3201      	adds	r2, #1
 801325e:	b2d2      	uxtb	r2, r2
 8013260:	e7f0      	b.n	8013244 <DecodeRekordboxFiles+0x140>
 8013262:	4632      	mov	r2, r6
 8013264:	e7ef      	b.n	8013246 <DecodeRekordboxFiles+0x142>
		rekordbox.filetype[4] = 0;
 8013266:	2300      	movs	r3, #0
 8013268:	4a43      	ldr	r2, [pc, #268]	; (8013378 <DecodeRekordboxFiles+0x274>)
 801326a:	f882 34ff 	strb.w	r3, [r2, #1279]	; 0x4ff
		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 801326e:	e005      	b.n	801327c <DecodeRekordboxFiles+0x178>
 8013270:	4a41      	ldr	r2, [pc, #260]	; (8013378 <DecodeRekordboxFiles+0x274>)
 8013272:	441a      	add	r2, r3
 8013274:	2100      	movs	r1, #0
 8013276:	f882 13fc 	strb.w	r1, [r2, #1020]	; 0x3fc
 801327a:	3301      	adds	r3, #1
 801327c:	2bfe      	cmp	r3, #254	; 0xfe
 801327e:	d9f7      	bls.n	8013270 <DecodeRekordboxFiles+0x16c>
		i = data_size;
 8013280:	462b      	mov	r3, r5
 8013282:	e000      	b.n	8013286 <DecodeRekordboxFiles+0x182>
		while((i > 0) && (filename[i] != '/')) i--;
 8013284:	3b01      	subs	r3, #1
 8013286:	b123      	cbz	r3, 8013292 <DecodeRekordboxFiles+0x18e>
 8013288:	f50d 6280 	add.w	r2, sp, #1024	; 0x400
 801328c:	5cd2      	ldrb	r2, [r2, r3]
 801328e:	2a2f      	cmp	r2, #47	; 0x2f
 8013290:	d1f8      	bne.n	8013284 <DecodeRekordboxFiles+0x180>
		i++;
 8013292:	3301      	adds	r3, #1
		while(i < data_size)
 8013294:	e000      	b.n	8013298 <DecodeRekordboxFiles+0x194>
			i++;
 8013296:	3301      	adds	r3, #1
		while(i < data_size)
 8013298:	42ab      	cmp	r3, r5
 801329a:	d20b      	bcs.n	80132b4 <DecodeRekordboxFiles+0x1b0>
			if(filename[i] >= 32) {
 801329c:	f50d 6280 	add.w	r2, sp, #1024	; 0x400
 80132a0:	5cd2      	ldrb	r2, [r2, r3]
 80132a2:	2a1f      	cmp	r2, #31
 80132a4:	d9f7      	bls.n	8013296 <DecodeRekordboxFiles+0x192>
				rekordbox.file[k] = filename[i];
 80132a6:	4934      	ldr	r1, [pc, #208]	; (8013378 <DecodeRekordboxFiles+0x274>)
 80132a8:	4431      	add	r1, r6
 80132aa:	f881 23fc 	strb.w	r2, [r1, #1020]	; 0x3fc
				k++;
 80132ae:	3601      	adds	r6, #1
 80132b0:	b2f6      	uxtb	r6, r6
 80132b2:	e7f0      	b.n	8013296 <DecodeRekordboxFiles+0x192>
		rekordbox.file[i] = 0;
 80132b4:	4a30      	ldr	r2, [pc, #192]	; (8013378 <DecodeRekordboxFiles+0x274>)
 80132b6:	4413      	add	r3, r2
 80132b8:	2200      	movs	r2, #0
 80132ba:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
		if(FindToken(qtz_token) != 0) return 1;
 80132be:	4836      	ldr	r0, [pc, #216]	; (8013398 <DecodeRekordboxFiles+0x294>)
 80132c0:	f7ff feda 	bl	8013078 <FindToken>
 80132c4:	4607      	mov	r7, r0
 80132c6:	2800      	cmp	r0, #0
 80132c8:	f040 8578 	bne.w	8013dbc <DecodeRekordboxFiles+0xcb8>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 16 bytes
 80132cc:	4b30      	ldr	r3, [pc, #192]	; (8013390 <DecodeRekordboxFiles+0x28c>)
 80132ce:	2210      	movs	r2, #16
 80132d0:	4930      	ldr	r1, [pc, #192]	; (8013394 <DecodeRekordboxFiles+0x290>)
 80132d2:	482d      	ldr	r0, [pc, #180]	; (8013388 <DecodeRekordboxFiles+0x284>)
 80132d4:	f7f6 f809 	bl	80092ea <f_read>
 80132d8:	2800      	cmp	r0, #0
 80132da:	d1f7      	bne.n	80132cc <DecodeRekordboxFiles+0x1c8>
		data_size = GetLongNumber();
 80132dc:	f7ff fea8 	bl	8013030 <GetLongNumber>
		rekordbox.timezones = data_size;
 80132e0:	4b25      	ldr	r3, [pc, #148]	; (8013378 <DecodeRekordboxFiles+0x274>)
 80132e2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
		for(i=0; i<rekordbox.timezones; i++) {
 80132e6:	2600      	movs	r6, #0
 80132e8:	e03f      	b.n	801336a <DecodeRekordboxFiles+0x266>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 80132ea:	4b29      	ldr	r3, [pc, #164]	; (8013390 <DecodeRekordboxFiles+0x28c>)
 80132ec:	2201      	movs	r2, #1
 80132ee:	492b      	ldr	r1, [pc, #172]	; (801339c <DecodeRekordboxFiles+0x298>)
 80132f0:	4429      	add	r1, r5
 80132f2:	4825      	ldr	r0, [pc, #148]	; (8013388 <DecodeRekordboxFiles+0x284>)
 80132f4:	f7f5 fff9 	bl	80092ea <f_read>
 80132f8:	2800      	cmp	r0, #0
 80132fa:	d1f6      	bne.n	80132ea <DecodeRekordboxFiles+0x1e6>
			for(k=0; k<2; k++) {
 80132fc:	3501      	adds	r5, #1
 80132fe:	b2ed      	uxtb	r5, r5
 8013300:	2d01      	cmp	r5, #1
 8013302:	d9f2      	bls.n	80132ea <DecodeRekordboxFiles+0x1e6>
			rekordbox.phase[i] |= tag[0];
 8013304:	4825      	ldr	r0, [pc, #148]	; (801339c <DecodeRekordboxFiles+0x298>)
 8013306:	7803      	ldrb	r3, [r0, #0]
 8013308:	f506 61cd 	add.w	r1, r6, #1640	; 0x668
 801330c:	4a1a      	ldr	r2, [pc, #104]	; (8013378 <DecodeRekordboxFiles+0x274>)
 801330e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8013312:	8891      	ldrh	r1, [r2, #4]
 8013314:	430b      	orrs	r3, r1
			rekordbox.phase[i] <<= 8;
 8013316:	021b      	lsls	r3, r3, #8
 8013318:	b29b      	uxth	r3, r3
			rekordbox.phase[i] |= tag[1];
 801331a:	7841      	ldrb	r1, [r0, #1]
 801331c:	430b      	orrs	r3, r1
 801331e:	8093      	strh	r3, [r2, #4]
			for(k=0; k<2; k++) {
 8013320:	463d      	mov	r5, r7
 8013322:	e00a      	b.n	801333a <DecodeRekordboxFiles+0x236>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 8013324:	4b1a      	ldr	r3, [pc, #104]	; (8013390 <DecodeRekordboxFiles+0x28c>)
 8013326:	2201      	movs	r2, #1
 8013328:	491c      	ldr	r1, [pc, #112]	; (801339c <DecodeRekordboxFiles+0x298>)
 801332a:	4429      	add	r1, r5
 801332c:	4816      	ldr	r0, [pc, #88]	; (8013388 <DecodeRekordboxFiles+0x284>)
 801332e:	f7f5 ffdc 	bl	80092ea <f_read>
 8013332:	2800      	cmp	r0, #0
 8013334:	d1f6      	bne.n	8013324 <DecodeRekordboxFiles+0x220>
			for(k=0; k<2; k++) {
 8013336:	3501      	adds	r5, #1
 8013338:	b2ed      	uxtb	r5, r5
 801333a:	2d01      	cmp	r5, #1
 801333c:	d9f2      	bls.n	8013324 <DecodeRekordboxFiles+0x220>
			rekordbox.bpm[i] |= tag[0];
 801333e:	4917      	ldr	r1, [pc, #92]	; (801339c <DecodeRekordboxFiles+0x298>)
 8013340:	780b      	ldrb	r3, [r1, #0]
 8013342:	4d0d      	ldr	r5, [pc, #52]	; (8013378 <DecodeRekordboxFiles+0x274>)
 8013344:	f506 7220 	add.w	r2, r6, #640	; 0x280
 8013348:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 801334c:	8890      	ldrh	r0, [r2, #4]
 801334e:	4303      	orrs	r3, r0
			rekordbox.bpm[i] <<= 8;
 8013350:	021b      	lsls	r3, r3, #8
 8013352:	b29b      	uxth	r3, r3
			rekordbox.bpm[i] |= tag[1];
 8013354:	7849      	ldrb	r1, [r1, #1]
 8013356:	430b      	orrs	r3, r1
 8013358:	8093      	strh	r3, [r2, #4]
			rekordbox.timeindex[i] = GetLongNumber();
 801335a:	f7ff fe69 	bl	8013030 <GetLongNumber>
 801335e:	f506 63a5 	add.w	r3, r6, #1320	; 0x528
 8013362:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8013366:	6068      	str	r0, [r5, #4]
		for(i=0; i<rekordbox.timezones; i++) {
 8013368:	3601      	adds	r6, #1
 801336a:	4b03      	ldr	r3, [pc, #12]	; (8013378 <DecodeRekordboxFiles+0x274>)
 801336c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8013370:	42b3      	cmp	r3, r6
 8013372:	d915      	bls.n	80133a0 <DecodeRekordboxFiles+0x29c>
			for(k=0; k<2; k++) {
 8013374:	463d      	mov	r5, r7
 8013376:	e7c3      	b.n	8013300 <DecodeRekordboxFiles+0x1fc>
 8013378:	200153a4 	.word	0x200153a4
 801337c:	c00ff000 	.word	0xc00ff000
 8013380:	000f423f 	.word	0x000f423f
 8013384:	0801d140 	.word	0x0801d140
 8013388:	2000f720 	.word	0x2000f720
 801338c:	20000054 	.word	0x20000054
 8013390:	200007e8 	.word	0x200007e8
 8013394:	20007f5c 	.word	0x20007f5c
 8013398:	2000005c 	.word	0x2000005c
 801339c:	2001539c 	.word	0x2001539c
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 80133a0:	4bbb      	ldr	r3, [pc, #748]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 80133a2:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
 80133a6:	2b01      	cmp	r3, #1
 80133a8:	d042      	beq.n	8013430 <DecodeRekordboxFiles+0x32c>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 80133aa:	3b01      	subs	r3, #1
 80133ac:	49b8      	ldr	r1, [pc, #736]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 80133ae:	f242 4244 	movw	r2, #9284	; 0x2444
 80133b2:	548b      	strb	r3, [r1, r2]
		if(FindToken(wave_token) != 0) return 1;
 80133b4:	48b7      	ldr	r0, [pc, #732]	; (8013694 <DecodeRekordboxFiles+0x590>)
 80133b6:	f7ff fe5f 	bl	8013078 <FindToken>
 80133ba:	2800      	cmp	r0, #0
 80133bc:	f040 8500 	bne.w	8013dc0 <DecodeRekordboxFiles+0xcbc>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 80133c0:	4bb5      	ldr	r3, [pc, #724]	; (8013698 <DecodeRekordboxFiles+0x594>)
 80133c2:	2208      	movs	r2, #8
 80133c4:	49b5      	ldr	r1, [pc, #724]	; (801369c <DecodeRekordboxFiles+0x598>)
 80133c6:	48b6      	ldr	r0, [pc, #728]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 80133c8:	f7f5 ff8f 	bl	80092ea <f_read>
 80133cc:	2800      	cmp	r0, #0
 80133ce:	d1f7      	bne.n	80133c0 <DecodeRekordboxFiles+0x2bc>
		rekordbox.lowp_spectrum_size = GetLongNumber();
 80133d0:	f7ff fe2e 	bl	8013030 <GetLongNumber>
 80133d4:	4aae      	ldr	r2, [pc, #696]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 80133d6:	f242 4348 	movw	r3, #9288	; 0x2448
 80133da:	50d0      	str	r0, [r2, r3]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 80133dc:	4bae      	ldr	r3, [pc, #696]	; (8013698 <DecodeRekordboxFiles+0x594>)
 80133de:	2204      	movs	r2, #4
 80133e0:	49ae      	ldr	r1, [pc, #696]	; (801369c <DecodeRekordboxFiles+0x598>)
 80133e2:	48af      	ldr	r0, [pc, #700]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 80133e4:	f7f5 ff81 	bl	80092ea <f_read>
 80133e8:	2800      	cmp	r0, #0
 80133ea:	d1f7      	bne.n	80133dc <DecodeRekordboxFiles+0x2d8>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 80133ec:	4baa      	ldr	r3, [pc, #680]	; (8013698 <DecodeRekordboxFiles+0x594>)
 80133ee:	49a8      	ldr	r1, [pc, #672]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 80133f0:	f242 4248 	movw	r2, #9288	; 0x2448
 80133f4:	588a      	ldr	r2, [r1, r2]
 80133f6:	49ab      	ldr	r1, [pc, #684]	; (80136a4 <DecodeRekordboxFiles+0x5a0>)
 80133f8:	48a9      	ldr	r0, [pc, #676]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 80133fa:	f7f5 ff76 	bl	80092ea <f_read>
 80133fe:	2800      	cmp	r0, #0
 8013400:	d1f4      	bne.n	80133ec <DecodeRekordboxFiles+0x2e8>
		if(FindToken(cob_token) != 0) return 1;
 8013402:	48a9      	ldr	r0, [pc, #676]	; (80136a8 <DecodeRekordboxFiles+0x5a4>)
 8013404:	f7ff fe38 	bl	8013078 <FindToken>
 8013408:	2800      	cmp	r0, #0
 801340a:	f040 84db 	bne.w	8013dc4 <DecodeRekordboxFiles+0xcc0>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801340e:	4ba2      	ldr	r3, [pc, #648]	; (8013698 <DecodeRekordboxFiles+0x594>)
 8013410:	220c      	movs	r2, #12
 8013412:	49a2      	ldr	r1, [pc, #648]	; (801369c <DecodeRekordboxFiles+0x598>)
 8013414:	48a2      	ldr	r0, [pc, #648]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 8013416:	f7f5 ff68 	bl	80092ea <f_read>
 801341a:	2800      	cmp	r0, #0
 801341c:	d1f7      	bne.n	801340e <DecodeRekordboxFiles+0x30a>
		rekordbox.cues = GetLongNumber() + 1;
 801341e:	f7ff fe07 	bl	8013030 <GetLongNumber>
 8013422:	3001      	adds	r0, #1
 8013424:	4a9a      	ldr	r2, [pc, #616]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 8013426:	f242 5354 	movw	r3, #9556	; 0x2554
 801342a:	50d0      	str	r0, [r2, r3]
		for(i = 1; i < rekordbox.cues; i++) {
 801342c:	2501      	movs	r5, #1
 801342e:	e006      	b.n	801343e <DecodeRekordboxFiles+0x33a>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 8013430:	4a97      	ldr	r2, [pc, #604]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 8013432:	f242 4344 	movw	r3, #9284	; 0x2444
 8013436:	2104      	movs	r1, #4
 8013438:	54d1      	strb	r1, [r2, r3]
 801343a:	e7bb      	b.n	80133b4 <DecodeRekordboxFiles+0x2b0>
		for(i = 1; i < rekordbox.cues; i++) {
 801343c:	3501      	adds	r5, #1
 801343e:	4a94      	ldr	r2, [pc, #592]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 8013440:	f242 5354 	movw	r3, #9556	; 0x2554
 8013444:	58d3      	ldr	r3, [r2, r3]
 8013446:	42ab      	cmp	r3, r5
 8013448:	d972      	bls.n	8013530 <DecodeRekordboxFiles+0x42c>
			if(FindToken(cue_token) != 0) return 1;
 801344a:	4898      	ldr	r0, [pc, #608]	; (80136ac <DecodeRekordboxFiles+0x5a8>)
 801344c:	f7ff fe14 	bl	8013078 <FindToken>
 8013450:	2800      	cmp	r0, #0
 8013452:	f040 84b9 	bne.w	8013dc8 <DecodeRekordboxFiles+0xcc4>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8013456:	4b90      	ldr	r3, [pc, #576]	; (8013698 <DecodeRekordboxFiles+0x594>)
 8013458:	2208      	movs	r2, #8
 801345a:	4990      	ldr	r1, [pc, #576]	; (801369c <DecodeRekordboxFiles+0x598>)
 801345c:	4890      	ldr	r0, [pc, #576]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 801345e:	f7f5 ff44 	bl	80092ea <f_read>
 8013462:	2800      	cmp	r0, #0
 8013464:	d1f7      	bne.n	8013456 <DecodeRekordboxFiles+0x352>
			rekordbox.cue_number[i] = GetLongNumber();
 8013466:	f7ff fde3 	bl	8013030 <GetLongNumber>
 801346a:	4e89      	ldr	r6, [pc, #548]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 801346c:	f605 1356 	addw	r3, r5, #2390	; 0x956
 8013470:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
			rekordbox.cue_active[i] = GetLongNumber();
 8013474:	f7ff fddc 	bl	8013030 <GetLongNumber>
 8013478:	f605 13ba 	addw	r3, r5, #2490	; 0x9ba
 801347c:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8013480:	4b85      	ldr	r3, [pc, #532]	; (8013698 <DecodeRekordboxFiles+0x594>)
 8013482:	2204      	movs	r2, #4
 8013484:	4985      	ldr	r1, [pc, #532]	; (801369c <DecodeRekordboxFiles+0x598>)
 8013486:	4886      	ldr	r0, [pc, #536]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 8013488:	f7f5 ff2f 	bl	80092ea <f_read>
 801348c:	2800      	cmp	r0, #0
 801348e:	d1f7      	bne.n	8013480 <DecodeRekordboxFiles+0x37c>
			rekordbox.cue_type[i] = GetLongNumber();
 8013490:	f7ff fdce 	bl	8013030 <GetLongNumber>
 8013494:	f605 231e 	addw	r3, r5, #2590	; 0xa1e
 8013498:	4a7d      	ldr	r2, [pc, #500]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 801349a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 801349e:	f642 5128 	movw	r1, #11560	; 0x2d28
 80134a2:	4429      	add	r1, r5
 80134a4:	4b7c      	ldr	r3, [pc, #496]	; (8013698 <DecodeRekordboxFiles+0x594>)
 80134a6:	2201      	movs	r2, #1
 80134a8:	4879      	ldr	r0, [pc, #484]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 80134aa:	4401      	add	r1, r0
 80134ac:	487c      	ldr	r0, [pc, #496]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 80134ae:	f7f5 ff1c 	bl	80092ea <f_read>
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d1f3      	bne.n	801349e <DecodeRekordboxFiles+0x39a>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 80134b6:	4b78      	ldr	r3, [pc, #480]	; (8013698 <DecodeRekordboxFiles+0x594>)
 80134b8:	2203      	movs	r2, #3
 80134ba:	4978      	ldr	r1, [pc, #480]	; (801369c <DecodeRekordboxFiles+0x598>)
 80134bc:	4878      	ldr	r0, [pc, #480]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 80134be:	f7f5 ff14 	bl	80092ea <f_read>
 80134c2:	2800      	cmp	r0, #0
 80134c4:	d1f7      	bne.n	80134b6 <DecodeRekordboxFiles+0x3b2>
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 80134c6:	f7ff fdb3 	bl	8013030 <GetLongNumber>
 80134ca:	ee07 0a90 	vmov	s15, r0
 80134ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80134d2:	eddf 7a77 	vldr	s15, [pc, #476]	; 80136b0 <DecodeRekordboxFiles+0x5ac>
 80134d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134da:	eddf 6a76 	vldr	s13, [pc, #472]	; 80136b4 <DecodeRekordboxFiles+0x5b0>
 80134de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80134e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134e6:	4b6a      	ldr	r3, [pc, #424]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 80134e8:	f605 2282 	addw	r2, r5, #2690	; 0xa82
 80134ec:	ee17 1a90 	vmov	r1, s15
 80134f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 80134f4:	442b      	add	r3, r5
 80134f6:	f642 5228 	movw	r2, #11560	; 0x2d28
 80134fa:	5c9b      	ldrb	r3, [r3, r2]
 80134fc:	2b02      	cmp	r3, #2
 80134fe:	d19d      	bne.n	801343c <DecodeRekordboxFiles+0x338>
 8013500:	f7ff fd96 	bl	8013030 <GetLongNumber>
 8013504:	ee07 0a90 	vmov	s15, r0
 8013508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801350c:	eddf 7a68 	vldr	s15, [pc, #416]	; 80136b0 <DecodeRekordboxFiles+0x5ac>
 8013510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013514:	eddf 6a67 	vldr	s13, [pc, #412]	; 80136b4 <DecodeRekordboxFiles+0x5b0>
 8013518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801351c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013520:	f605 23e6 	addw	r3, r5, #2790	; 0xae6
 8013524:	4a5a      	ldr	r2, [pc, #360]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 8013526:	ee17 1a90 	vmov	r1, s15
 801352a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801352e:	e785      	b.n	801343c <DecodeRekordboxFiles+0x338>
		if(FindToken(cob_token) != 0) return 1;
 8013530:	485d      	ldr	r0, [pc, #372]	; (80136a8 <DecodeRekordboxFiles+0x5a4>)
 8013532:	f7ff fda1 	bl	8013078 <FindToken>
 8013536:	2800      	cmp	r0, #0
 8013538:	f040 8448 	bne.w	8013dcc <DecodeRekordboxFiles+0xcc8>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801353c:	4b56      	ldr	r3, [pc, #344]	; (8013698 <DecodeRekordboxFiles+0x594>)
 801353e:	220c      	movs	r2, #12
 8013540:	4956      	ldr	r1, [pc, #344]	; (801369c <DecodeRekordboxFiles+0x598>)
 8013542:	4857      	ldr	r0, [pc, #348]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 8013544:	f7f5 fed1 	bl	80092ea <f_read>
 8013548:	2800      	cmp	r0, #0
 801354a:	d1f7      	bne.n	801353c <DecodeRekordboxFiles+0x438>
		rekordbox.cues += GetLongNumber();
 801354c:	f7ff fd70 	bl	8013030 <GetLongNumber>
 8013550:	494f      	ldr	r1, [pc, #316]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 8013552:	f242 5254 	movw	r2, #9556	; 0x2554
 8013556:	588b      	ldr	r3, [r1, r2]
 8013558:	4403      	add	r3, r0
 801355a:	508b      	str	r3, [r1, r2]
		k = i;
 801355c:	b2ed      	uxtb	r5, r5
		for(k = i; k < rekordbox.cues; k++) {
 801355e:	e001      	b.n	8013564 <DecodeRekordboxFiles+0x460>
 8013560:	3501      	adds	r5, #1
 8013562:	b2ed      	uxtb	r5, r5
 8013564:	462e      	mov	r6, r5
 8013566:	4a4a      	ldr	r2, [pc, #296]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 8013568:	f242 5354 	movw	r3, #9556	; 0x2554
 801356c:	58d3      	ldr	r3, [r2, r3]
 801356e:	429d      	cmp	r5, r3
 8013570:	da72      	bge.n	8013658 <DecodeRekordboxFiles+0x554>
			if(FindToken(cue_token) != 0) return 1;
 8013572:	484e      	ldr	r0, [pc, #312]	; (80136ac <DecodeRekordboxFiles+0x5a8>)
 8013574:	f7ff fd80 	bl	8013078 <FindToken>
 8013578:	2800      	cmp	r0, #0
 801357a:	f040 8429 	bne.w	8013dd0 <DecodeRekordboxFiles+0xccc>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801357e:	4b46      	ldr	r3, [pc, #280]	; (8013698 <DecodeRekordboxFiles+0x594>)
 8013580:	2208      	movs	r2, #8
 8013582:	4946      	ldr	r1, [pc, #280]	; (801369c <DecodeRekordboxFiles+0x598>)
 8013584:	4846      	ldr	r0, [pc, #280]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 8013586:	f7f5 feb0 	bl	80092ea <f_read>
 801358a:	2800      	cmp	r0, #0
 801358c:	d1f7      	bne.n	801357e <DecodeRekordboxFiles+0x47a>
			rekordbox.cue_number[k] = GetLongNumber();
 801358e:	f7ff fd4f 	bl	8013030 <GetLongNumber>
 8013592:	4f3f      	ldr	r7, [pc, #252]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 8013594:	f606 1356 	addw	r3, r6, #2390	; 0x956
 8013598:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
			rekordbox.cue_active[k] = GetLongNumber();
 801359c:	f7ff fd48 	bl	8013030 <GetLongNumber>
 80135a0:	f606 13ba 	addw	r3, r6, #2490	; 0x9ba
 80135a4:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 80135a8:	4b3b      	ldr	r3, [pc, #236]	; (8013698 <DecodeRekordboxFiles+0x594>)
 80135aa:	2204      	movs	r2, #4
 80135ac:	493b      	ldr	r1, [pc, #236]	; (801369c <DecodeRekordboxFiles+0x598>)
 80135ae:	483c      	ldr	r0, [pc, #240]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 80135b0:	f7f5 fe9b 	bl	80092ea <f_read>
 80135b4:	2800      	cmp	r0, #0
 80135b6:	d1f7      	bne.n	80135a8 <DecodeRekordboxFiles+0x4a4>
			rekordbox.cue_type[k] = GetLongNumber();
 80135b8:	f7ff fd3a 	bl	8013030 <GetLongNumber>
 80135bc:	f606 231e 	addw	r3, r6, #2590	; 0xa1e
 80135c0:	4a33      	ldr	r2, [pc, #204]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 80135c2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 80135c6:	f642 5128 	movw	r1, #11560	; 0x2d28
 80135ca:	4431      	add	r1, r6
 80135cc:	4b32      	ldr	r3, [pc, #200]	; (8013698 <DecodeRekordboxFiles+0x594>)
 80135ce:	2201      	movs	r2, #1
 80135d0:	482f      	ldr	r0, [pc, #188]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 80135d2:	4401      	add	r1, r0
 80135d4:	4832      	ldr	r0, [pc, #200]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 80135d6:	f7f5 fe88 	bl	80092ea <f_read>
 80135da:	2800      	cmp	r0, #0
 80135dc:	d1f3      	bne.n	80135c6 <DecodeRekordboxFiles+0x4c2>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 80135de:	4b2e      	ldr	r3, [pc, #184]	; (8013698 <DecodeRekordboxFiles+0x594>)
 80135e0:	2203      	movs	r2, #3
 80135e2:	492e      	ldr	r1, [pc, #184]	; (801369c <DecodeRekordboxFiles+0x598>)
 80135e4:	482e      	ldr	r0, [pc, #184]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 80135e6:	f7f5 fe80 	bl	80092ea <f_read>
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d1f7      	bne.n	80135de <DecodeRekordboxFiles+0x4da>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 80135ee:	f7ff fd1f 	bl	8013030 <GetLongNumber>
 80135f2:	ee07 0a90 	vmov	s15, r0
 80135f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80135fa:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80136b0 <DecodeRekordboxFiles+0x5ac>
 80135fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013602:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80136b4 <DecodeRekordboxFiles+0x5b0>
 8013606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801360a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801360e:	4b20      	ldr	r3, [pc, #128]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 8013610:	f606 2282 	addw	r2, r6, #2690	; 0xa82
 8013614:	ee17 1a90 	vmov	r1, s15
 8013618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801361c:	4433      	add	r3, r6
 801361e:	f642 5228 	movw	r2, #11560	; 0x2d28
 8013622:	5c9b      	ldrb	r3, [r3, r2]
 8013624:	2b02      	cmp	r3, #2
 8013626:	d19b      	bne.n	8013560 <DecodeRekordboxFiles+0x45c>
 8013628:	f7ff fd02 	bl	8013030 <GetLongNumber>
 801362c:	ee07 0a90 	vmov	s15, r0
 8013630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013634:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80136b0 <DecodeRekordboxFiles+0x5ac>
 8013638:	ee27 7a27 	vmul.f32	s14, s14, s15
 801363c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80136b4 <DecodeRekordboxFiles+0x5b0>
 8013640:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013648:	f606 26e6 	addw	r6, r6, #2790	; 0xae6
 801364c:	4b10      	ldr	r3, [pc, #64]	; (8013690 <DecodeRekordboxFiles+0x58c>)
 801364e:	ee17 2a90 	vmov	r2, s15
 8013652:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013656:	e783      	b.n	8013560 <DecodeRekordboxFiles+0x45c>
		f_close(&MyFile);
 8013658:	4811      	ldr	r0, [pc, #68]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 801365a:	f7f5 ff0b 	bl	8009474 <f_close>
 801365e:	e59d      	b.n	801319c <DecodeRekordboxFiles+0x98>
	wcscpy(my_path, path);
 8013660:	4621      	mov	r1, r4
 8013662:	a801      	add	r0, sp, #4
 8013664:	f003 ff4d 	bl	8017502 <wcscpy>
	wcscat(my_path, L"/ANLZ0000.EXT");
 8013668:	4913      	ldr	r1, [pc, #76]	; (80136b8 <DecodeRekordboxFiles+0x5b4>)
 801366a:	a801      	add	r0, sp, #4
 801366c:	f003 ff39 	bl	80174e2 <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8013670:	2201      	movs	r2, #1
 8013672:	a901      	add	r1, sp, #4
 8013674:	480a      	ldr	r0, [pc, #40]	; (80136a0 <DecodeRekordboxFiles+0x59c>)
 8013676:	f7f5 fdc9 	bl	800920c <f_open>
	if(res == FR_OK) {
 801367a:	b1f8      	cbz	r0, 80136bc <DecodeRekordboxFiles+0x5b8>
		if(FindToken(wv3_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
		rekordbox.spectrum_size = GetLongNumber();
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
		rekordbox.cue_start_position[0] = 0;
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801367c:	2300      	movs	r3, #0
				}
			}
		}
		f_close(&MyFile);
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 801367e:	2bfe      	cmp	r3, #254	; 0xfe
 8013680:	d872      	bhi.n	8013768 <DecodeRekordboxFiles+0x664>
 8013682:	aa01      	add	r2, sp, #4
 8013684:	2100      	movs	r1, #0
 8013686:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801368a:	3301      	adds	r3, #1
 801368c:	e7f7      	b.n	801367e <DecodeRekordboxFiles+0x57a>
 801368e:	bf00      	nop
 8013690:	200153a4 	.word	0x200153a4
 8013694:	20000064 	.word	0x20000064
 8013698:	200007e8 	.word	0x200007e8
 801369c:	20007f5c 	.word	0x20007f5c
 80136a0:	2000f720 	.word	0x2000f720
 80136a4:	2000f308 	.word	0x2000f308
 80136a8:	20000044 	.word	0x20000044
 80136ac:	2000004c 	.word	0x2000004c
 80136b0:	43160000 	.word	0x43160000
 80136b4:	447a0000 	.word	0x447a0000
 80136b8:	0801d178 	.word	0x0801d178
		if(FindToken(wv3_token) != 0) return 1;
 80136bc:	48a4      	ldr	r0, [pc, #656]	; (8013950 <DecodeRekordboxFiles+0x84c>)
 80136be:	f7ff fcdb 	bl	8013078 <FindToken>
 80136c2:	2800      	cmp	r0, #0
 80136c4:	f040 8386 	bne.w	8013dd4 <DecodeRekordboxFiles+0xcd0>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 80136c8:	4ba2      	ldr	r3, [pc, #648]	; (8013954 <DecodeRekordboxFiles+0x850>)
 80136ca:	220c      	movs	r2, #12
 80136cc:	49a2      	ldr	r1, [pc, #648]	; (8013958 <DecodeRekordboxFiles+0x854>)
 80136ce:	48a3      	ldr	r0, [pc, #652]	; (801395c <DecodeRekordboxFiles+0x858>)
 80136d0:	f7f5 fe0b 	bl	80092ea <f_read>
 80136d4:	2800      	cmp	r0, #0
 80136d6:	d1f7      	bne.n	80136c8 <DecodeRekordboxFiles+0x5c4>
		rekordbox.spectrum_size = GetLongNumber();
 80136d8:	f7ff fcaa 	bl	8013030 <GetLongNumber>
 80136dc:	4aa0      	ldr	r2, [pc, #640]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 80136de:	f242 434c 	movw	r3, #9292	; 0x244c
 80136e2:	50d0      	str	r0, [r2, r3]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 80136e4:	4b9b      	ldr	r3, [pc, #620]	; (8013954 <DecodeRekordboxFiles+0x850>)
 80136e6:	2204      	movs	r2, #4
 80136e8:	499b      	ldr	r1, [pc, #620]	; (8013958 <DecodeRekordboxFiles+0x854>)
 80136ea:	489c      	ldr	r0, [pc, #624]	; (801395c <DecodeRekordboxFiles+0x858>)
 80136ec:	f7f5 fdfd 	bl	80092ea <f_read>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	d1f7      	bne.n	80136e4 <DecodeRekordboxFiles+0x5e0>
		rekordbox.cue_start_position[0] = 0;
 80136f4:	2500      	movs	r5, #0
 80136f6:	4a9a      	ldr	r2, [pc, #616]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 80136f8:	f642 2308 	movw	r3, #10760	; 0x2a08
 80136fc:	50d5      	str	r5, [r2, r3]
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 80136fe:	e000      	b.n	8013702 <DecodeRekordboxFiles+0x5fe>
 8013700:	3501      	adds	r5, #1
 8013702:	4a97      	ldr	r2, [pc, #604]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 8013704:	f242 434c 	movw	r3, #9292	; 0x244c
 8013708:	58d3      	ldr	r3, [r2, r3]
 801370a:	42ab      	cmp	r3, r5
 801370c:	d928      	bls.n	8013760 <DecodeRekordboxFiles+0x65c>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 801370e:	4b91      	ldr	r3, [pc, #580]	; (8013954 <DecodeRekordboxFiles+0x850>)
 8013710:	2201      	movs	r2, #1
 8013712:	4994      	ldr	r1, [pc, #592]	; (8013964 <DecodeRekordboxFiles+0x860>)
 8013714:	4891      	ldr	r0, [pc, #580]	; (801395c <DecodeRekordboxFiles+0x858>)
 8013716:	f7f5 fde8 	bl	80092ea <f_read>
 801371a:	2800      	cmp	r0, #0
 801371c:	d1f7      	bne.n	801370e <DecodeRekordboxFiles+0x60a>
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 801371e:	4b91      	ldr	r3, [pc, #580]	; (8013964 <DecodeRekordboxFiles+0x860>)
 8013720:	781a      	ldrb	r2, [r3, #0]
 8013722:	4b91      	ldr	r3, [pc, #580]	; (8013968 <DecodeRekordboxFiles+0x864>)
 8013724:	54ea      	strb	r2, [r5, r3]
			if(rekordbox.autocue == 1) {
 8013726:	4a8e      	ldr	r2, [pc, #568]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 8013728:	f642 538c 	movw	r3, #11660	; 0x2d8c
 801372c:	5cd3      	ldrb	r3, [r2, r3]
 801372e:	2b01      	cmp	r3, #1
 8013730:	d1e6      	bne.n	8013700 <DecodeRekordboxFiles+0x5fc>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 8013732:	4b8c      	ldr	r3, [pc, #560]	; (8013964 <DecodeRekordboxFiles+0x860>)
 8013734:	781a      	ldrb	r2, [r3, #0]
 8013736:	4b8d      	ldr	r3, [pc, #564]	; (801396c <DecodeRekordboxFiles+0x868>)
 8013738:	781b      	ldrb	r3, [r3, #0]
 801373a:	498d      	ldr	r1, [pc, #564]	; (8013970 <DecodeRekordboxFiles+0x86c>)
 801373c:	fba1 1303 	umull	r1, r3, r1, r3
 8013740:	f002 011f 	and.w	r1, r2, #31
 8013744:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 8013748:	d9da      	bls.n	8013700 <DecodeRekordboxFiles+0x5fc>
 801374a:	09d3      	lsrs	r3, r2, #7
 801374c:	d1d8      	bne.n	8013700 <DecodeRekordboxFiles+0x5fc>
					rekordbox.autocue = 2;
 801374e:	4b84      	ldr	r3, [pc, #528]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 8013750:	f642 528c 	movw	r2, #11660	; 0x2d8c
 8013754:	2102      	movs	r1, #2
 8013756:	5499      	strb	r1, [r3, r2]
					rekordbox.cue_start_position[0] = i;
 8013758:	f642 2208 	movw	r2, #10760	; 0x2a08
 801375c:	509d      	str	r5, [r3, r2]
 801375e:	e7cf      	b.n	8013700 <DecodeRekordboxFiles+0x5fc>
		f_close(&MyFile);
 8013760:	487e      	ldr	r0, [pc, #504]	; (801395c <DecodeRekordboxFiles+0x858>)
 8013762:	f7f5 fe87 	bl	8009474 <f_close>
 8013766:	e789      	b.n	801367c <DecodeRekordboxFiles+0x578>
	wcscpy(my_path, path);
 8013768:	4621      	mov	r1, r4
 801376a:	a801      	add	r0, sp, #4
 801376c:	f003 fec9 	bl	8017502 <wcscpy>
	wcscat(my_path, L"/ANLZ0001.DAT");
 8013770:	4980      	ldr	r1, [pc, #512]	; (8013974 <DecodeRekordboxFiles+0x870>)
 8013772:	a801      	add	r0, sp, #4
 8013774:	f003 feb5 	bl	80174e2 <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8013778:	2201      	movs	r2, #1
 801377a:	a901      	add	r1, sp, #4
 801377c:	4877      	ldr	r0, [pc, #476]	; (801395c <DecodeRekordboxFiles+0x858>)
 801377e:	f7f5 fd45 	bl	800920c <f_open>
	if(res == FR_OK)
 8013782:	b108      	cbz	r0, 8013788 <DecodeRekordboxFiles+0x684>
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
		if(FindToken(cob_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
		rekordbox.cues = GetLongNumber() + 1;
		for(i = 1; i < rekordbox.cues; i++) {
 8013784:	2300      	movs	r3, #0
 8013786:	e260      	b.n	8013c4a <DecodeRekordboxFiles+0xb46>
		if(FindToken(path_token) != 0) return 1;
 8013788:	487b      	ldr	r0, [pc, #492]	; (8013978 <DecodeRekordboxFiles+0x874>)
 801378a:	f7ff fc75 	bl	8013078 <FindToken>
 801378e:	4606      	mov	r6, r0
 8013790:	2800      	cmp	r0, #0
 8013792:	f040 8321 	bne.w	8013dd8 <DecodeRekordboxFiles+0xcd4>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8013796:	4b6f      	ldr	r3, [pc, #444]	; (8013954 <DecodeRekordboxFiles+0x850>)
 8013798:	2208      	movs	r2, #8
 801379a:	496f      	ldr	r1, [pc, #444]	; (8013958 <DecodeRekordboxFiles+0x854>)
 801379c:	486f      	ldr	r0, [pc, #444]	; (801395c <DecodeRekordboxFiles+0x858>)
 801379e:	f7f5 fda4 	bl	80092ea <f_read>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	d1f7      	bne.n	8013796 <DecodeRekordboxFiles+0x692>
		data_size = GetLongNumber();
 80137a6:	f7ff fc43 	bl	8013030 <GetLongNumber>
 80137aa:	4605      	mov	r5, r0
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 80137ac:	4b69      	ldr	r3, [pc, #420]	; (8013954 <DecodeRekordboxFiles+0x850>)
 80137ae:	462a      	mov	r2, r5
 80137b0:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
 80137b4:	4869      	ldr	r0, [pc, #420]	; (801395c <DecodeRekordboxFiles+0x858>)
 80137b6:	f7f5 fd98 	bl	80092ea <f_read>
 80137ba:	2800      	cmp	r0, #0
 80137bc:	d1f6      	bne.n	80137ac <DecodeRekordboxFiles+0x6a8>
		k = 0;
 80137be:	4637      	mov	r7, r6
		i = 0;
 80137c0:	f04f 0800 	mov.w	r8, #0
 80137c4:	e015      	b.n	80137f2 <DecodeRekordboxFiles+0x6ee>
			WCHAR c = filename[i];
 80137c6:	f50d 6980 	add.w	r9, sp, #1024	; 0x400
 80137ca:	f819 3008 	ldrb.w	r3, [r9, r8]
			i++;
 80137ce:	f108 0201 	add.w	r2, r8, #1
			c |= filename[i];
 80137d2:	f819 0002 	ldrb.w	r0, [r9, r2]
 80137d6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			i++;
 80137da:	f108 0802 	add.w	r8, r8, #2
			rekordbox.filename[k] = c;
 80137de:	4b60      	ldr	r3, [pc, #384]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 80137e0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
			filename[k] = ff_convert(c, 0);
 80137e4:	2100      	movs	r1, #0
 80137e6:	f7f6 f86d 	bl	80098c4 <ff_convert>
 80137ea:	f809 0007 	strb.w	r0, [r9, r7]
			k++;
 80137ee:	3701      	adds	r7, #1
 80137f0:	b2ff      	uxtb	r7, r7
		while(i < data_size) {
 80137f2:	45a8      	cmp	r8, r5
 80137f4:	d3e7      	bcc.n	80137c6 <DecodeRekordboxFiles+0x6c2>
 80137f6:	e004      	b.n	8013802 <DecodeRekordboxFiles+0x6fe>
		for(i = k; i < data_size; i++) filename[i] = 0;
 80137f8:	f50d 6380 	add.w	r3, sp, #1024	; 0x400
 80137fc:	2200      	movs	r2, #0
 80137fe:	55da      	strb	r2, [r3, r7]
 8013800:	3701      	adds	r7, #1
 8013802:	42af      	cmp	r7, r5
 8013804:	d3f8      	bcc.n	80137f8 <DecodeRekordboxFiles+0x6f4>
		i = data_size;
 8013806:	462b      	mov	r3, r5
 8013808:	e000      	b.n	801380c <DecodeRekordboxFiles+0x708>
		while((i > 0) && (filename[i] != '.')) i--;
 801380a:	3b01      	subs	r3, #1
 801380c:	b1ab      	cbz	r3, 801383a <DecodeRekordboxFiles+0x736>
 801380e:	f50d 6280 	add.w	r2, sp, #1024	; 0x400
 8013812:	5cd2      	ldrb	r2, [r2, r3]
 8013814:	2a2e      	cmp	r2, #46	; 0x2e
 8013816:	d1f8      	bne.n	801380a <DecodeRekordboxFiles+0x706>
 8013818:	4632      	mov	r2, r6
 801381a:	e000      	b.n	801381e <DecodeRekordboxFiles+0x71a>
			i++;
 801381c:	3301      	adds	r3, #1
		while(k < 5)
 801381e:	2a04      	cmp	r2, #4
 8013820:	d80d      	bhi.n	801383e <DecodeRekordboxFiles+0x73a>
			if(filename[i] >= 32) {
 8013822:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
 8013826:	5cc9      	ldrb	r1, [r1, r3]
 8013828:	291f      	cmp	r1, #31
 801382a:	d9f7      	bls.n	801381c <DecodeRekordboxFiles+0x718>
				rekordbox.filetype[k] = filename[i];
 801382c:	484c      	ldr	r0, [pc, #304]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 801382e:	4410      	add	r0, r2
 8013830:	f880 14fb 	strb.w	r1, [r0, #1275]	; 0x4fb
				k++;
 8013834:	3201      	adds	r2, #1
 8013836:	b2d2      	uxtb	r2, r2
 8013838:	e7f0      	b.n	801381c <DecodeRekordboxFiles+0x718>
 801383a:	4632      	mov	r2, r6
 801383c:	e7ef      	b.n	801381e <DecodeRekordboxFiles+0x71a>
		rekordbox.filetype[4] = 0;
 801383e:	2300      	movs	r3, #0
 8013840:	4a47      	ldr	r2, [pc, #284]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 8013842:	f882 34ff 	strb.w	r3, [r2, #1279]	; 0x4ff
		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 8013846:	e005      	b.n	8013854 <DecodeRekordboxFiles+0x750>
 8013848:	4a45      	ldr	r2, [pc, #276]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 801384a:	441a      	add	r2, r3
 801384c:	2100      	movs	r1, #0
 801384e:	f882 13fc 	strb.w	r1, [r2, #1020]	; 0x3fc
 8013852:	3301      	adds	r3, #1
 8013854:	2bfe      	cmp	r3, #254	; 0xfe
 8013856:	d9f7      	bls.n	8013848 <DecodeRekordboxFiles+0x744>
		i = data_size;
 8013858:	462b      	mov	r3, r5
 801385a:	e000      	b.n	801385e <DecodeRekordboxFiles+0x75a>
		while((i > 0) && (filename[i] != '/')) i--;
 801385c:	3b01      	subs	r3, #1
 801385e:	b123      	cbz	r3, 801386a <DecodeRekordboxFiles+0x766>
 8013860:	f50d 6280 	add.w	r2, sp, #1024	; 0x400
 8013864:	5cd2      	ldrb	r2, [r2, r3]
 8013866:	2a2f      	cmp	r2, #47	; 0x2f
 8013868:	d1f8      	bne.n	801385c <DecodeRekordboxFiles+0x758>
		i++;
 801386a:	3301      	adds	r3, #1
		while(i < data_size)
 801386c:	e000      	b.n	8013870 <DecodeRekordboxFiles+0x76c>
			i++;
 801386e:	3301      	adds	r3, #1
		while(i < data_size)
 8013870:	42ab      	cmp	r3, r5
 8013872:	d20b      	bcs.n	801388c <DecodeRekordboxFiles+0x788>
			if(filename[i] >= 32) {
 8013874:	f50d 6280 	add.w	r2, sp, #1024	; 0x400
 8013878:	5cd2      	ldrb	r2, [r2, r3]
 801387a:	2a1f      	cmp	r2, #31
 801387c:	d9f7      	bls.n	801386e <DecodeRekordboxFiles+0x76a>
				rekordbox.file[k] = filename[i];
 801387e:	4938      	ldr	r1, [pc, #224]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 8013880:	4431      	add	r1, r6
 8013882:	f881 23fc 	strb.w	r2, [r1, #1020]	; 0x3fc
				k++;
 8013886:	3601      	adds	r6, #1
 8013888:	b2f6      	uxtb	r6, r6
 801388a:	e7f0      	b.n	801386e <DecodeRekordboxFiles+0x76a>
		rekordbox.file[i] = 0;
 801388c:	4a34      	ldr	r2, [pc, #208]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 801388e:	4413      	add	r3, r2
 8013890:	2200      	movs	r2, #0
 8013892:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
		if(FindToken(qtz_token) != 0) return 1;
 8013896:	4839      	ldr	r0, [pc, #228]	; (801397c <DecodeRekordboxFiles+0x878>)
 8013898:	f7ff fbee 	bl	8013078 <FindToken>
 801389c:	4607      	mov	r7, r0
 801389e:	2800      	cmp	r0, #0
 80138a0:	f040 829c 	bne.w	8013ddc <DecodeRekordboxFiles+0xcd8>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 22 bytes
 80138a4:	4b2b      	ldr	r3, [pc, #172]	; (8013954 <DecodeRekordboxFiles+0x850>)
 80138a6:	2210      	movs	r2, #16
 80138a8:	492b      	ldr	r1, [pc, #172]	; (8013958 <DecodeRekordboxFiles+0x854>)
 80138aa:	482c      	ldr	r0, [pc, #176]	; (801395c <DecodeRekordboxFiles+0x858>)
 80138ac:	f7f5 fd1d 	bl	80092ea <f_read>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d1f7      	bne.n	80138a4 <DecodeRekordboxFiles+0x7a0>
		data_size = GetLongNumber();
 80138b4:	f7ff fbbc 	bl	8013030 <GetLongNumber>
		rekordbox.timezones = data_size;
 80138b8:	4b29      	ldr	r3, [pc, #164]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 80138ba:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
		for(i=0; i<rekordbox.timezones; i++) {
 80138be:	2600      	movs	r6, #0
 80138c0:	e032      	b.n	8013928 <DecodeRekordboxFiles+0x824>
			rekordbox.phase[i] |= tag[0];
 80138c2:	4828      	ldr	r0, [pc, #160]	; (8013964 <DecodeRekordboxFiles+0x860>)
 80138c4:	7803      	ldrb	r3, [r0, #0]
 80138c6:	f506 61cd 	add.w	r1, r6, #1640	; 0x668
 80138ca:	4a25      	ldr	r2, [pc, #148]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 80138cc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80138d0:	8891      	ldrh	r1, [r2, #4]
 80138d2:	430b      	orrs	r3, r1
			rekordbox.phase[i] <<= 8;
 80138d4:	021b      	lsls	r3, r3, #8
 80138d6:	b29b      	uxth	r3, r3
			rekordbox.phase[i] |= tag[1];
 80138d8:	7841      	ldrb	r1, [r0, #1]
 80138da:	430b      	orrs	r3, r1
 80138dc:	8093      	strh	r3, [r2, #4]
			for(k=0; k<2; k++) {
 80138de:	463d      	mov	r5, r7
 80138e0:	2d01      	cmp	r5, #1
 80138e2:	d80b      	bhi.n	80138fc <DecodeRekordboxFiles+0x7f8>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 80138e4:	4b1b      	ldr	r3, [pc, #108]	; (8013954 <DecodeRekordboxFiles+0x850>)
 80138e6:	2201      	movs	r2, #1
 80138e8:	491e      	ldr	r1, [pc, #120]	; (8013964 <DecodeRekordboxFiles+0x860>)
 80138ea:	4429      	add	r1, r5
 80138ec:	481b      	ldr	r0, [pc, #108]	; (801395c <DecodeRekordboxFiles+0x858>)
 80138ee:	f7f5 fcfc 	bl	80092ea <f_read>
 80138f2:	2800      	cmp	r0, #0
 80138f4:	d1f6      	bne.n	80138e4 <DecodeRekordboxFiles+0x7e0>
			for(k=0; k<2; k++) {
 80138f6:	3501      	adds	r5, #1
 80138f8:	b2ed      	uxtb	r5, r5
 80138fa:	e7f1      	b.n	80138e0 <DecodeRekordboxFiles+0x7dc>
			rekordbox.bpm[i] |= tag[0];
 80138fc:	4919      	ldr	r1, [pc, #100]	; (8013964 <DecodeRekordboxFiles+0x860>)
 80138fe:	780b      	ldrb	r3, [r1, #0]
 8013900:	4d17      	ldr	r5, [pc, #92]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 8013902:	f506 7220 	add.w	r2, r6, #640	; 0x280
 8013906:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 801390a:	8890      	ldrh	r0, [r2, #4]
 801390c:	4303      	orrs	r3, r0
			rekordbox.bpm[i] <<= 8;
 801390e:	021b      	lsls	r3, r3, #8
 8013910:	b29b      	uxth	r3, r3
			rekordbox.bpm[i] |= tag[1];
 8013912:	7849      	ldrb	r1, [r1, #1]
 8013914:	430b      	orrs	r3, r1
 8013916:	8093      	strh	r3, [r2, #4]
			rekordbox.timeindex[i] = GetLongNumber();
 8013918:	f7ff fb8a 	bl	8013030 <GetLongNumber>
 801391c:	f506 63a5 	add.w	r3, r6, #1320	; 0x528
 8013920:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8013924:	6068      	str	r0, [r5, #4]
		for(i=0; i<rekordbox.timezones; i++) {
 8013926:	3601      	adds	r6, #1
 8013928:	4b0d      	ldr	r3, [pc, #52]	; (8013960 <DecodeRekordboxFiles+0x85c>)
 801392a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 801392e:	42b3      	cmp	r3, r6
 8013930:	d926      	bls.n	8013980 <DecodeRekordboxFiles+0x87c>
			for(k=0; k<2; k++) {
 8013932:	463d      	mov	r5, r7
 8013934:	2d01      	cmp	r5, #1
 8013936:	d8c4      	bhi.n	80138c2 <DecodeRekordboxFiles+0x7be>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 8013938:	4b06      	ldr	r3, [pc, #24]	; (8013954 <DecodeRekordboxFiles+0x850>)
 801393a:	2201      	movs	r2, #1
 801393c:	4909      	ldr	r1, [pc, #36]	; (8013964 <DecodeRekordboxFiles+0x860>)
 801393e:	4429      	add	r1, r5
 8013940:	4806      	ldr	r0, [pc, #24]	; (801395c <DecodeRekordboxFiles+0x858>)
 8013942:	f7f5 fcd2 	bl	80092ea <f_read>
 8013946:	2800      	cmp	r0, #0
 8013948:	d1f6      	bne.n	8013938 <DecodeRekordboxFiles+0x834>
			for(k=0; k<2; k++) {
 801394a:	3501      	adds	r5, #1
 801394c:	b2ed      	uxtb	r5, r5
 801394e:	e7f1      	b.n	8013934 <DecodeRekordboxFiles+0x830>
 8013950:	2000006c 	.word	0x2000006c
 8013954:	200007e8 	.word	0x200007e8
 8013958:	20007f5c 	.word	0x20007f5c
 801395c:	2000f720 	.word	0x2000f720
 8013960:	200153a4 	.word	0x200153a4
 8013964:	2001539c 	.word	0x2001539c
 8013968:	c00ff000 	.word	0xc00ff000
 801396c:	20000034 	.word	0x20000034
 8013970:	cccccccd 	.word	0xcccccccd
 8013974:	0801d1b0 	.word	0x0801d1b0
 8013978:	20000054 	.word	0x20000054
 801397c:	2000005c 	.word	0x2000005c
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 8013980:	4bbb      	ldr	r3, [pc, #748]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013982:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
 8013986:	2b01      	cmp	r3, #1
 8013988:	d042      	beq.n	8013a10 <DecodeRekordboxFiles+0x90c>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 801398a:	3b01      	subs	r3, #1
 801398c:	49b8      	ldr	r1, [pc, #736]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 801398e:	f242 4244 	movw	r2, #9284	; 0x2444
 8013992:	548b      	strb	r3, [r1, r2]
		if(FindToken(wave_token) != 0) return 1;
 8013994:	48b7      	ldr	r0, [pc, #732]	; (8013c74 <DecodeRekordboxFiles+0xb70>)
 8013996:	f7ff fb6f 	bl	8013078 <FindToken>
 801399a:	2800      	cmp	r0, #0
 801399c:	f040 8220 	bne.w	8013de0 <DecodeRekordboxFiles+0xcdc>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 80139a0:	4bb5      	ldr	r3, [pc, #724]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 80139a2:	2208      	movs	r2, #8
 80139a4:	49b5      	ldr	r1, [pc, #724]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 80139a6:	48b6      	ldr	r0, [pc, #728]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 80139a8:	f7f5 fc9f 	bl	80092ea <f_read>
 80139ac:	2800      	cmp	r0, #0
 80139ae:	d1f7      	bne.n	80139a0 <DecodeRekordboxFiles+0x89c>
		rekordbox.lowp_spectrum_size = GetLongNumber();
 80139b0:	f7ff fb3e 	bl	8013030 <GetLongNumber>
 80139b4:	4aae      	ldr	r2, [pc, #696]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 80139b6:	f242 4348 	movw	r3, #9288	; 0x2448
 80139ba:	50d0      	str	r0, [r2, r3]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 80139bc:	4bae      	ldr	r3, [pc, #696]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 80139be:	2204      	movs	r2, #4
 80139c0:	49ae      	ldr	r1, [pc, #696]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 80139c2:	48af      	ldr	r0, [pc, #700]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 80139c4:	f7f5 fc91 	bl	80092ea <f_read>
 80139c8:	2800      	cmp	r0, #0
 80139ca:	d1f7      	bne.n	80139bc <DecodeRekordboxFiles+0x8b8>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 80139cc:	4baa      	ldr	r3, [pc, #680]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 80139ce:	49a8      	ldr	r1, [pc, #672]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 80139d0:	f242 4248 	movw	r2, #9288	; 0x2448
 80139d4:	588a      	ldr	r2, [r1, r2]
 80139d6:	49ab      	ldr	r1, [pc, #684]	; (8013c84 <DecodeRekordboxFiles+0xb80>)
 80139d8:	48a9      	ldr	r0, [pc, #676]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 80139da:	f7f5 fc86 	bl	80092ea <f_read>
 80139de:	2800      	cmp	r0, #0
 80139e0:	d1f4      	bne.n	80139cc <DecodeRekordboxFiles+0x8c8>
		if(FindToken(cob_token) != 0) return 1;
 80139e2:	48a9      	ldr	r0, [pc, #676]	; (8013c88 <DecodeRekordboxFiles+0xb84>)
 80139e4:	f7ff fb48 	bl	8013078 <FindToken>
 80139e8:	2800      	cmp	r0, #0
 80139ea:	f040 81fb 	bne.w	8013de4 <DecodeRekordboxFiles+0xce0>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 80139ee:	4ba2      	ldr	r3, [pc, #648]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 80139f0:	220c      	movs	r2, #12
 80139f2:	49a2      	ldr	r1, [pc, #648]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 80139f4:	48a2      	ldr	r0, [pc, #648]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 80139f6:	f7f5 fc78 	bl	80092ea <f_read>
 80139fa:	2800      	cmp	r0, #0
 80139fc:	d1f7      	bne.n	80139ee <DecodeRekordboxFiles+0x8ea>
		rekordbox.cues = GetLongNumber() + 1;
 80139fe:	f7ff fb17 	bl	8013030 <GetLongNumber>
 8013a02:	3001      	adds	r0, #1
 8013a04:	4a9a      	ldr	r2, [pc, #616]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013a06:	f242 5354 	movw	r3, #9556	; 0x2554
 8013a0a:	50d0      	str	r0, [r2, r3]
		for(i = 1; i < rekordbox.cues; i++) {
 8013a0c:	2501      	movs	r5, #1
 8013a0e:	e006      	b.n	8013a1e <DecodeRekordboxFiles+0x91a>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 8013a10:	4a97      	ldr	r2, [pc, #604]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013a12:	f242 4344 	movw	r3, #9284	; 0x2444
 8013a16:	2104      	movs	r1, #4
 8013a18:	54d1      	strb	r1, [r2, r3]
 8013a1a:	e7bb      	b.n	8013994 <DecodeRekordboxFiles+0x890>
		for(i = 1; i < rekordbox.cues; i++) {
 8013a1c:	3501      	adds	r5, #1
 8013a1e:	4a94      	ldr	r2, [pc, #592]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013a20:	f242 5354 	movw	r3, #9556	; 0x2554
 8013a24:	58d3      	ldr	r3, [r2, r3]
 8013a26:	42ab      	cmp	r3, r5
 8013a28:	d972      	bls.n	8013b10 <DecodeRekordboxFiles+0xa0c>
			if(FindToken(cue_token) != 0) return 1;
 8013a2a:	4898      	ldr	r0, [pc, #608]	; (8013c8c <DecodeRekordboxFiles+0xb88>)
 8013a2c:	f7ff fb24 	bl	8013078 <FindToken>
 8013a30:	2800      	cmp	r0, #0
 8013a32:	f040 81d9 	bne.w	8013de8 <DecodeRekordboxFiles+0xce4>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8013a36:	4b90      	ldr	r3, [pc, #576]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 8013a38:	2208      	movs	r2, #8
 8013a3a:	4990      	ldr	r1, [pc, #576]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 8013a3c:	4890      	ldr	r0, [pc, #576]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013a3e:	f7f5 fc54 	bl	80092ea <f_read>
 8013a42:	2800      	cmp	r0, #0
 8013a44:	d1f7      	bne.n	8013a36 <DecodeRekordboxFiles+0x932>
			rekordbox.cue_number[i] = GetLongNumber();
 8013a46:	f7ff faf3 	bl	8013030 <GetLongNumber>
 8013a4a:	4e89      	ldr	r6, [pc, #548]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013a4c:	f605 1356 	addw	r3, r5, #2390	; 0x956
 8013a50:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
			rekordbox.cue_active[i] = GetLongNumber();
 8013a54:	f7ff faec 	bl	8013030 <GetLongNumber>
 8013a58:	f605 13ba 	addw	r3, r5, #2490	; 0x9ba
 8013a5c:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8013a60:	4b85      	ldr	r3, [pc, #532]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 8013a62:	2204      	movs	r2, #4
 8013a64:	4985      	ldr	r1, [pc, #532]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 8013a66:	4886      	ldr	r0, [pc, #536]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013a68:	f7f5 fc3f 	bl	80092ea <f_read>
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	d1f7      	bne.n	8013a60 <DecodeRekordboxFiles+0x95c>
			rekordbox.cue_type[i] = GetLongNumber();
 8013a70:	f7ff fade 	bl	8013030 <GetLongNumber>
 8013a74:	f605 231e 	addw	r3, r5, #2590	; 0xa1e
 8013a78:	4a7d      	ldr	r2, [pc, #500]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013a7a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 8013a7e:	f642 5128 	movw	r1, #11560	; 0x2d28
 8013a82:	4429      	add	r1, r5
 8013a84:	4b7c      	ldr	r3, [pc, #496]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 8013a86:	2201      	movs	r2, #1
 8013a88:	4879      	ldr	r0, [pc, #484]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013a8a:	4401      	add	r1, r0
 8013a8c:	487c      	ldr	r0, [pc, #496]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013a8e:	f7f5 fc2c 	bl	80092ea <f_read>
 8013a92:	2800      	cmp	r0, #0
 8013a94:	d1f3      	bne.n	8013a7e <DecodeRekordboxFiles+0x97a>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 8013a96:	4b78      	ldr	r3, [pc, #480]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 8013a98:	2203      	movs	r2, #3
 8013a9a:	4978      	ldr	r1, [pc, #480]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 8013a9c:	4878      	ldr	r0, [pc, #480]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013a9e:	f7f5 fc24 	bl	80092ea <f_read>
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	d1f7      	bne.n	8013a96 <DecodeRekordboxFiles+0x992>
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8013aa6:	f7ff fac3 	bl	8013030 <GetLongNumber>
 8013aaa:	ee07 0a90 	vmov	s15, r0
 8013aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ab2:	eddf 7a77 	vldr	s15, [pc, #476]	; 8013c90 <DecodeRekordboxFiles+0xb8c>
 8013ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013aba:	eddf 6a76 	vldr	s13, [pc, #472]	; 8013c94 <DecodeRekordboxFiles+0xb90>
 8013abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ac6:	4b6a      	ldr	r3, [pc, #424]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013ac8:	f605 2282 	addw	r2, r5, #2690	; 0xa82
 8013acc:	ee17 1a90 	vmov	r1, s15
 8013ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8013ad4:	442b      	add	r3, r5
 8013ad6:	f642 5228 	movw	r2, #11560	; 0x2d28
 8013ada:	5c9b      	ldrb	r3, [r3, r2]
 8013adc:	2b02      	cmp	r3, #2
 8013ade:	d19d      	bne.n	8013a1c <DecodeRekordboxFiles+0x918>
 8013ae0:	f7ff faa6 	bl	8013030 <GetLongNumber>
 8013ae4:	ee07 0a90 	vmov	s15, r0
 8013ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013aec:	eddf 7a68 	vldr	s15, [pc, #416]	; 8013c90 <DecodeRekordboxFiles+0xb8c>
 8013af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013af4:	eddf 6a67 	vldr	s13, [pc, #412]	; 8013c94 <DecodeRekordboxFiles+0xb90>
 8013af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b00:	f605 23e6 	addw	r3, r5, #2790	; 0xae6
 8013b04:	4a5a      	ldr	r2, [pc, #360]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013b06:	ee17 1a90 	vmov	r1, s15
 8013b0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8013b0e:	e785      	b.n	8013a1c <DecodeRekordboxFiles+0x918>
		}
		if(FindToken(cob_token) != 0) return 1;
 8013b10:	485d      	ldr	r0, [pc, #372]	; (8013c88 <DecodeRekordboxFiles+0xb84>)
 8013b12:	f7ff fab1 	bl	8013078 <FindToken>
 8013b16:	2800      	cmp	r0, #0
 8013b18:	f040 8168 	bne.w	8013dec <DecodeRekordboxFiles+0xce8>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 8013b1c:	4b56      	ldr	r3, [pc, #344]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 8013b1e:	220c      	movs	r2, #12
 8013b20:	4956      	ldr	r1, [pc, #344]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 8013b22:	4857      	ldr	r0, [pc, #348]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013b24:	f7f5 fbe1 	bl	80092ea <f_read>
 8013b28:	2800      	cmp	r0, #0
 8013b2a:	d1f7      	bne.n	8013b1c <DecodeRekordboxFiles+0xa18>
		rekordbox.cues += GetLongNumber();
 8013b2c:	f7ff fa80 	bl	8013030 <GetLongNumber>
 8013b30:	494f      	ldr	r1, [pc, #316]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013b32:	f242 5254 	movw	r2, #9556	; 0x2554
 8013b36:	588b      	ldr	r3, [r1, r2]
 8013b38:	4403      	add	r3, r0
 8013b3a:	508b      	str	r3, [r1, r2]
		k = i;
 8013b3c:	b2ed      	uxtb	r5, r5
		for(k = i; k < rekordbox.cues; k++) {
 8013b3e:	e001      	b.n	8013b44 <DecodeRekordboxFiles+0xa40>
 8013b40:	3501      	adds	r5, #1
 8013b42:	b2ed      	uxtb	r5, r5
 8013b44:	462e      	mov	r6, r5
 8013b46:	4a4a      	ldr	r2, [pc, #296]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013b48:	f242 5354 	movw	r3, #9556	; 0x2554
 8013b4c:	58d3      	ldr	r3, [r2, r3]
 8013b4e:	429d      	cmp	r5, r3
 8013b50:	da72      	bge.n	8013c38 <DecodeRekordboxFiles+0xb34>
			if(FindToken(cue_token) != 0) return 1;
 8013b52:	484e      	ldr	r0, [pc, #312]	; (8013c8c <DecodeRekordboxFiles+0xb88>)
 8013b54:	f7ff fa90 	bl	8013078 <FindToken>
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	f040 8149 	bne.w	8013df0 <DecodeRekordboxFiles+0xcec>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8013b5e:	4b46      	ldr	r3, [pc, #280]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 8013b60:	2208      	movs	r2, #8
 8013b62:	4946      	ldr	r1, [pc, #280]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 8013b64:	4846      	ldr	r0, [pc, #280]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013b66:	f7f5 fbc0 	bl	80092ea <f_read>
 8013b6a:	2800      	cmp	r0, #0
 8013b6c:	d1f7      	bne.n	8013b5e <DecodeRekordboxFiles+0xa5a>
			rekordbox.cue_number[k] = GetLongNumber();
 8013b6e:	f7ff fa5f 	bl	8013030 <GetLongNumber>
 8013b72:	4f3f      	ldr	r7, [pc, #252]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013b74:	f606 1356 	addw	r3, r6, #2390	; 0x956
 8013b78:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
			rekordbox.cue_active[k] = GetLongNumber();
 8013b7c:	f7ff fa58 	bl	8013030 <GetLongNumber>
 8013b80:	f606 13ba 	addw	r3, r6, #2490	; 0x9ba
 8013b84:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8013b88:	4b3b      	ldr	r3, [pc, #236]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 8013b8a:	2204      	movs	r2, #4
 8013b8c:	493b      	ldr	r1, [pc, #236]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 8013b8e:	483c      	ldr	r0, [pc, #240]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013b90:	f7f5 fbab 	bl	80092ea <f_read>
 8013b94:	2800      	cmp	r0, #0
 8013b96:	d1f7      	bne.n	8013b88 <DecodeRekordboxFiles+0xa84>
			rekordbox.cue_type[k] = GetLongNumber();
 8013b98:	f7ff fa4a 	bl	8013030 <GetLongNumber>
 8013b9c:	f606 231e 	addw	r3, r6, #2590	; 0xa1e
 8013ba0:	4a33      	ldr	r2, [pc, #204]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013ba2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 8013ba6:	f642 5128 	movw	r1, #11560	; 0x2d28
 8013baa:	4431      	add	r1, r6
 8013bac:	4b32      	ldr	r3, [pc, #200]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 8013bae:	2201      	movs	r2, #1
 8013bb0:	482f      	ldr	r0, [pc, #188]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013bb2:	4401      	add	r1, r0
 8013bb4:	4832      	ldr	r0, [pc, #200]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013bb6:	f7f5 fb98 	bl	80092ea <f_read>
 8013bba:	2800      	cmp	r0, #0
 8013bbc:	d1f3      	bne.n	8013ba6 <DecodeRekordboxFiles+0xaa2>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 8013bbe:	4b2e      	ldr	r3, [pc, #184]	; (8013c78 <DecodeRekordboxFiles+0xb74>)
 8013bc0:	2203      	movs	r2, #3
 8013bc2:	492e      	ldr	r1, [pc, #184]	; (8013c7c <DecodeRekordboxFiles+0xb78>)
 8013bc4:	482e      	ldr	r0, [pc, #184]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013bc6:	f7f5 fb90 	bl	80092ea <f_read>
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	d1f7      	bne.n	8013bbe <DecodeRekordboxFiles+0xaba>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 8013bce:	f7ff fa2f 	bl	8013030 <GetLongNumber>
 8013bd2:	ee07 0a90 	vmov	s15, r0
 8013bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013bda:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8013c90 <DecodeRekordboxFiles+0xb8c>
 8013bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013be2:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8013c94 <DecodeRekordboxFiles+0xb90>
 8013be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bee:	4b20      	ldr	r3, [pc, #128]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013bf0:	f606 2282 	addw	r2, r6, #2690	; 0xa82
 8013bf4:	ee17 1a90 	vmov	r1, s15
 8013bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 8013bfc:	4433      	add	r3, r6
 8013bfe:	f642 5228 	movw	r2, #11560	; 0x2d28
 8013c02:	5c9b      	ldrb	r3, [r3, r2]
 8013c04:	2b02      	cmp	r3, #2
 8013c06:	d19b      	bne.n	8013b40 <DecodeRekordboxFiles+0xa3c>
 8013c08:	f7ff fa12 	bl	8013030 <GetLongNumber>
 8013c0c:	ee07 0a90 	vmov	s15, r0
 8013c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013c14:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013c90 <DecodeRekordboxFiles+0xb8c>
 8013c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c1c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8013c94 <DecodeRekordboxFiles+0xb90>
 8013c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c28:	f606 26e6 	addw	r6, r6, #2790	; 0xae6
 8013c2c:	4b10      	ldr	r3, [pc, #64]	; (8013c70 <DecodeRekordboxFiles+0xb6c>)
 8013c2e:	ee17 2a90 	vmov	r2, s15
 8013c32:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013c36:	e783      	b.n	8013b40 <DecodeRekordboxFiles+0xa3c>
		}
		f_close(&MyFile);
 8013c38:	4811      	ldr	r0, [pc, #68]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013c3a:	f7f5 fc1b 	bl	8009474 <f_close>
 8013c3e:	e5a1      	b.n	8013784 <DecodeRekordboxFiles+0x680>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 8013c40:	aa01      	add	r2, sp, #4
 8013c42:	2100      	movs	r1, #0
 8013c44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8013c48:	3301      	adds	r3, #1
 8013c4a:	2bfe      	cmp	r3, #254	; 0xfe
 8013c4c:	d9f8      	bls.n	8013c40 <DecodeRekordboxFiles+0xb3c>
	wcscpy(my_path, path);
 8013c4e:	4621      	mov	r1, r4
 8013c50:	a801      	add	r0, sp, #4
 8013c52:	f003 fc56 	bl	8017502 <wcscpy>
	wcscat(my_path, L"/ANLZ0001.EXT");
 8013c56:	4910      	ldr	r1, [pc, #64]	; (8013c98 <DecodeRekordboxFiles+0xb94>)
 8013c58:	a801      	add	r0, sp, #4
 8013c5a:	f003 fc42 	bl	80174e2 <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8013c5e:	2201      	movs	r2, #1
 8013c60:	a901      	add	r1, sp, #4
 8013c62:	4807      	ldr	r0, [pc, #28]	; (8013c80 <DecodeRekordboxFiles+0xb7c>)
 8013c64:	f7f5 fad2 	bl	800920c <f_open>
	if(res == FR_OK) {
 8013c68:	b1c0      	cbz	r0, 8013c9c <DecodeRekordboxFiles+0xb98>
		if(FindToken(wv3_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
		rekordbox.spectrum_size = GetLongNumber();
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
		rekordbox.cue_start_position[0] = 0;
		for(i=0; i<rekordbox.spectrum_size; i++) {
 8013c6a:	2000      	movs	r0, #0
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	e06c      	b.n	8013d4a <DecodeRekordboxFiles+0xc46>
 8013c70:	200153a4 	.word	0x200153a4
 8013c74:	20000064 	.word	0x20000064
 8013c78:	200007e8 	.word	0x200007e8
 8013c7c:	20007f5c 	.word	0x20007f5c
 8013c80:	2000f720 	.word	0x2000f720
 8013c84:	2000f308 	.word	0x2000f308
 8013c88:	20000044 	.word	0x20000044
 8013c8c:	2000004c 	.word	0x2000004c
 8013c90:	43160000 	.word	0x43160000
 8013c94:	447a0000 	.word	0x447a0000
 8013c98:	0801d1e8 	.word	0x0801d1e8
		if(FindToken(wv3_token) != 0) return 1;
 8013c9c:	4856      	ldr	r0, [pc, #344]	; (8013df8 <DecodeRekordboxFiles+0xcf4>)
 8013c9e:	f7ff f9eb 	bl	8013078 <FindToken>
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	f040 80a6 	bne.w	8013df4 <DecodeRekordboxFiles+0xcf0>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 8013ca8:	4b54      	ldr	r3, [pc, #336]	; (8013dfc <DecodeRekordboxFiles+0xcf8>)
 8013caa:	220c      	movs	r2, #12
 8013cac:	4954      	ldr	r1, [pc, #336]	; (8013e00 <DecodeRekordboxFiles+0xcfc>)
 8013cae:	4855      	ldr	r0, [pc, #340]	; (8013e04 <DecodeRekordboxFiles+0xd00>)
 8013cb0:	f7f5 fb1b 	bl	80092ea <f_read>
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	d1f7      	bne.n	8013ca8 <DecodeRekordboxFiles+0xba4>
		rekordbox.spectrum_size = GetLongNumber();
 8013cb8:	f7ff f9ba 	bl	8013030 <GetLongNumber>
 8013cbc:	4a52      	ldr	r2, [pc, #328]	; (8013e08 <DecodeRekordboxFiles+0xd04>)
 8013cbe:	f242 434c 	movw	r3, #9292	; 0x244c
 8013cc2:	50d0      	str	r0, [r2, r3]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8013cc4:	4b4d      	ldr	r3, [pc, #308]	; (8013dfc <DecodeRekordboxFiles+0xcf8>)
 8013cc6:	2204      	movs	r2, #4
 8013cc8:	494d      	ldr	r1, [pc, #308]	; (8013e00 <DecodeRekordboxFiles+0xcfc>)
 8013cca:	484e      	ldr	r0, [pc, #312]	; (8013e04 <DecodeRekordboxFiles+0xd00>)
 8013ccc:	f7f5 fb0d 	bl	80092ea <f_read>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d1f7      	bne.n	8013cc4 <DecodeRekordboxFiles+0xbc0>
		rekordbox.cue_start_position[0] = 0;
 8013cd4:	2400      	movs	r4, #0
 8013cd6:	4a4c      	ldr	r2, [pc, #304]	; (8013e08 <DecodeRekordboxFiles+0xd04>)
 8013cd8:	f642 2308 	movw	r3, #10760	; 0x2a08
 8013cdc:	50d4      	str	r4, [r2, r3]
		for(i=0; i<rekordbox.spectrum_size; i++) {
 8013cde:	e000      	b.n	8013ce2 <DecodeRekordboxFiles+0xbde>
 8013ce0:	3401      	adds	r4, #1
 8013ce2:	4a49      	ldr	r2, [pc, #292]	; (8013e08 <DecodeRekordboxFiles+0xd04>)
 8013ce4:	f242 434c 	movw	r3, #9292	; 0x244c
 8013ce8:	58d3      	ldr	r3, [r2, r3]
 8013cea:	42a3      	cmp	r3, r4
 8013cec:	d928      	bls.n	8013d40 <DecodeRekordboxFiles+0xc3c>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 8013cee:	4b43      	ldr	r3, [pc, #268]	; (8013dfc <DecodeRekordboxFiles+0xcf8>)
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	4946      	ldr	r1, [pc, #280]	; (8013e0c <DecodeRekordboxFiles+0xd08>)
 8013cf4:	4843      	ldr	r0, [pc, #268]	; (8013e04 <DecodeRekordboxFiles+0xd00>)
 8013cf6:	f7f5 faf8 	bl	80092ea <f_read>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	d1f7      	bne.n	8013cee <DecodeRekordboxFiles+0xbea>
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 8013cfe:	4b43      	ldr	r3, [pc, #268]	; (8013e0c <DecodeRekordboxFiles+0xd08>)
 8013d00:	781a      	ldrb	r2, [r3, #0]
 8013d02:	4b43      	ldr	r3, [pc, #268]	; (8013e10 <DecodeRekordboxFiles+0xd0c>)
 8013d04:	54e2      	strb	r2, [r4, r3]
			if(rekordbox.autocue == 1) {
 8013d06:	4a40      	ldr	r2, [pc, #256]	; (8013e08 <DecodeRekordboxFiles+0xd04>)
 8013d08:	f642 538c 	movw	r3, #11660	; 0x2d8c
 8013d0c:	5cd3      	ldrb	r3, [r2, r3]
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d1e6      	bne.n	8013ce0 <DecodeRekordboxFiles+0xbdc>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 8013d12:	4b3e      	ldr	r3, [pc, #248]	; (8013e0c <DecodeRekordboxFiles+0xd08>)
 8013d14:	781a      	ldrb	r2, [r3, #0]
 8013d16:	4b3f      	ldr	r3, [pc, #252]	; (8013e14 <DecodeRekordboxFiles+0xd10>)
 8013d18:	781b      	ldrb	r3, [r3, #0]
 8013d1a:	493f      	ldr	r1, [pc, #252]	; (8013e18 <DecodeRekordboxFiles+0xd14>)
 8013d1c:	fba1 1303 	umull	r1, r3, r1, r3
 8013d20:	f002 011f 	and.w	r1, r2, #31
 8013d24:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 8013d28:	d9da      	bls.n	8013ce0 <DecodeRekordboxFiles+0xbdc>
 8013d2a:	09d3      	lsrs	r3, r2, #7
 8013d2c:	d1d8      	bne.n	8013ce0 <DecodeRekordboxFiles+0xbdc>
					rekordbox.autocue = 2;
 8013d2e:	4b36      	ldr	r3, [pc, #216]	; (8013e08 <DecodeRekordboxFiles+0xd04>)
 8013d30:	f642 528c 	movw	r2, #11660	; 0x2d8c
 8013d34:	2102      	movs	r1, #2
 8013d36:	5499      	strb	r1, [r3, r2]
					rekordbox.cue_start_position[0] = i;
 8013d38:	f642 2208 	movw	r2, #10760	; 0x2a08
 8013d3c:	509c      	str	r4, [r3, r2]
 8013d3e:	e7cf      	b.n	8013ce0 <DecodeRekordboxFiles+0xbdc>
				}
			}
		}
		f_close(&MyFile);
 8013d40:	4830      	ldr	r0, [pc, #192]	; (8013e04 <DecodeRekordboxFiles+0xd00>)
 8013d42:	f7f5 fb97 	bl	8009474 <f_close>
 8013d46:	e790      	b.n	8013c6a <DecodeRekordboxFiles+0xb66>
		for(i=0; i<rekordbox.spectrum_size; i++) {
 8013d48:	4613      	mov	r3, r2
	}
	i = 0;
	uint8_t l = 0;
	while(i++  < rekordbox.spectrum_size) {
 8013d4a:	1c5a      	adds	r2, r3, #1
 8013d4c:	4c2e      	ldr	r4, [pc, #184]	; (8013e08 <DecodeRekordboxFiles+0xd04>)
 8013d4e:	f242 414c 	movw	r1, #9292	; 0x244c
 8013d52:	5861      	ldr	r1, [r4, r1]
 8013d54:	4299      	cmp	r1, r3
 8013d56:	d923      	bls.n	8013da0 <DecodeRekordboxFiles+0xc9c>
		if((i % 9000) == 0) {
 8013d58:	4b30      	ldr	r3, [pc, #192]	; (8013e1c <DecodeRekordboxFiles+0xd18>)
 8013d5a:	fba3 4302 	umull	r4, r3, r3, r2
 8013d5e:	0b5b      	lsrs	r3, r3, #13
 8013d60:	f242 3428 	movw	r4, #9000	; 0x2328
 8013d64:	fb04 2313 	mls	r3, r4, r3, r2
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d1ed      	bne.n	8013d48 <DecodeRekordboxFiles+0xc44>
			rekordbox.remminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * (rekordbox.spectrum_size - i) / rekordbox.spectrum_size);
 8013d6c:	4d26      	ldr	r5, [pc, #152]	; (8013e08 <DecodeRekordboxFiles+0xd04>)
 8013d6e:	f242 4348 	movw	r3, #9288	; 0x2448
 8013d72:	58eb      	ldr	r3, [r5, r3]
 8013d74:	1a8c      	subs	r4, r1, r2
 8013d76:	fb04 f403 	mul.w	r4, r4, r3
 8013d7a:	fbb4 f4f1 	udiv	r4, r4, r1
 8013d7e:	f241 2628 	movw	r6, #4648	; 0x1228
 8013d82:	4406      	add	r6, r0
 8013d84:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
			rekordbox.elminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * i / rekordbox.spectrum_size);
 8013d88:	fb02 f303 	mul.w	r3, r2, r3
 8013d8c:	fbb3 f1f1 	udiv	r1, r3, r1
 8013d90:	f241 2368 	movw	r3, #4712	; 0x1268
 8013d94:	4403      	add	r3, r0
 8013d96:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
			l++;
 8013d9a:	3001      	adds	r0, #1
 8013d9c:	b2c0      	uxtb	r0, r0
 8013d9e:	e7d3      	b.n	8013d48 <DecodeRekordboxFiles+0xc44>
		}
	}
	rekordbox.minutes = l;
 8013da0:	f242 5250 	movw	r2, #9552	; 0x2550
 8013da4:	54a0      	strb	r0, [r4, r2]
	rekordbox.state = 1;
 8013da6:	f642 5294 	movw	r2, #11668	; 0x2d94
 8013daa:	2101      	movs	r1, #1
 8013dac:	54a1      	strb	r1, [r4, r2]
	return 0;
 8013dae:	2000      	movs	r0, #0
}
 8013db0:	f20d 5d04 	addw	sp, sp, #1284	; 0x504
 8013db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(FindToken(path_token) != 0) return 1;
 8013db8:	2001      	movs	r0, #1
 8013dba:	e7f9      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(qtz_token) != 0) return 1;
 8013dbc:	2001      	movs	r0, #1
 8013dbe:	e7f7      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(wave_token) != 0) return 1;
 8013dc0:	2001      	movs	r0, #1
 8013dc2:	e7f5      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(cob_token) != 0) return 1;
 8013dc4:	2001      	movs	r0, #1
 8013dc6:	e7f3      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
			if(FindToken(cue_token) != 0) return 1;
 8013dc8:	2001      	movs	r0, #1
 8013dca:	e7f1      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(cob_token) != 0) return 1;
 8013dcc:	2001      	movs	r0, #1
 8013dce:	e7ef      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
			if(FindToken(cue_token) != 0) return 1;
 8013dd0:	2001      	movs	r0, #1
 8013dd2:	e7ed      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(wv3_token) != 0) return 1;
 8013dd4:	2001      	movs	r0, #1
 8013dd6:	e7eb      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(path_token) != 0) return 1;
 8013dd8:	2001      	movs	r0, #1
 8013dda:	e7e9      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(qtz_token) != 0) return 1;
 8013ddc:	2001      	movs	r0, #1
 8013dde:	e7e7      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(wave_token) != 0) return 1;
 8013de0:	2001      	movs	r0, #1
 8013de2:	e7e5      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(cob_token) != 0) return 1;
 8013de4:	2001      	movs	r0, #1
 8013de6:	e7e3      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
			if(FindToken(cue_token) != 0) return 1;
 8013de8:	2001      	movs	r0, #1
 8013dea:	e7e1      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(cob_token) != 0) return 1;
 8013dec:	2001      	movs	r0, #1
 8013dee:	e7df      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
			if(FindToken(cue_token) != 0) return 1;
 8013df0:	2001      	movs	r0, #1
 8013df2:	e7dd      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
		if(FindToken(wv3_token) != 0) return 1;
 8013df4:	2001      	movs	r0, #1
 8013df6:	e7db      	b.n	8013db0 <DecodeRekordboxFiles+0xcac>
 8013df8:	2000006c 	.word	0x2000006c
 8013dfc:	200007e8 	.word	0x200007e8
 8013e00:	20007f5c 	.word	0x20007f5c
 8013e04:	2000f720 	.word	0x2000f720
 8013e08:	200153a4 	.word	0x200153a4
 8013e0c:	2001539c 	.word	0x2001539c
 8013e10:	c00ff000 	.word	0xc00ff000
 8013e14:	20000034 	.word	0x20000034
 8013e18:	cccccccd 	.word	0xcccccccd
 8013e1c:	e90452d5 	.word	0xe90452d5

08013e20 <GetFileName>:

uint8_t GetFileName(TCHAR *path)
{
 8013e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e22:	b0c1      	sub	sp, #260	; 0x104
 8013e24:	4604      	mov	r4, r0
	uint32_t data_size = 0;
	uint8_t k;
	uint32_t i;
	uint8_t res = FR_OK;
	for(i = 0; i < 255; i++) rekordbox.filename[i] = 0;
 8013e26:	2300      	movs	r3, #0
 8013e28:	e004      	b.n	8013e34 <GetFileName+0x14>
 8013e2a:	4a4b      	ldr	r2, [pc, #300]	; (8013f58 <GetFileName+0x138>)
 8013e2c:	2100      	movs	r1, #0
 8013e2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8013e32:	3301      	adds	r3, #1
 8013e34:	2bfe      	cmp	r3, #254	; 0xfe
 8013e36:	d9f8      	bls.n	8013e2a <GetFileName+0xa>
	char filename[255] = {0};
 8013e38:	22ff      	movs	r2, #255	; 0xff
 8013e3a:	2100      	movs	r1, #0
 8013e3c:	4668      	mov	r0, sp
 8013e3e:	f003 fa4f 	bl	80172e0 <memset>

	res = f_open(&MyFile, path, FA_READ);
 8013e42:	2201      	movs	r2, #1
 8013e44:	4621      	mov	r1, r4
 8013e46:	4845      	ldr	r0, [pc, #276]	; (8013f5c <GetFileName+0x13c>)
 8013e48:	f7f5 f9e0 	bl	800920c <f_open>
	if(res == FR_OK)
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	d17b      	bne.n	8013f48 <GetFileName+0x128>
	{
		if(FindToken(path_token) != 0) return 1;
 8013e50:	4843      	ldr	r0, [pc, #268]	; (8013f60 <GetFileName+0x140>)
 8013e52:	f7ff f911 	bl	8013078 <FindToken>
 8013e56:	4605      	mov	r5, r0
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d17b      	bne.n	8013f54 <GetFileName+0x134>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8013e5c:	4b41      	ldr	r3, [pc, #260]	; (8013f64 <GetFileName+0x144>)
 8013e5e:	2208      	movs	r2, #8
 8013e60:	4941      	ldr	r1, [pc, #260]	; (8013f68 <GetFileName+0x148>)
 8013e62:	483e      	ldr	r0, [pc, #248]	; (8013f5c <GetFileName+0x13c>)
 8013e64:	f7f5 fa41 	bl	80092ea <f_read>
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d1f7      	bne.n	8013e5c <GetFileName+0x3c>
		data_size = GetLongNumber();
 8013e6c:	f7ff f8e0 	bl	8013030 <GetLongNumber>
 8013e70:	4604      	mov	r4, r0
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 8013e72:	4b3c      	ldr	r3, [pc, #240]	; (8013f64 <GetFileName+0x144>)
 8013e74:	4622      	mov	r2, r4
 8013e76:	4669      	mov	r1, sp
 8013e78:	4838      	ldr	r0, [pc, #224]	; (8013f5c <GetFileName+0x13c>)
 8013e7a:	f7f5 fa36 	bl	80092ea <f_read>
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	d1f7      	bne.n	8013e72 <GetFileName+0x52>
		i = 0;
		k = 0;
 8013e82:	462e      	mov	r6, r5
		i = 0;
 8013e84:	2700      	movs	r7, #0
 8013e86:	e011      	b.n	8013eac <GetFileName+0x8c>
		while(i < data_size) {
			WCHAR c = filename[i];
 8013e88:	f81d 3007 	ldrb.w	r3, [sp, r7]
			c <<= 8;
			i++;
 8013e8c:	1c7a      	adds	r2, r7, #1
			c |= filename[i];
 8013e8e:	f81d 0002 	ldrb.w	r0, [sp, r2]
 8013e92:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			i++;
 8013e96:	3702      	adds	r7, #2
			rekordbox.filename[k] = c;
 8013e98:	4b2f      	ldr	r3, [pc, #188]	; (8013f58 <GetFileName+0x138>)
 8013e9a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
			filename[k] = ff_convert(c, 0);
 8013e9e:	2100      	movs	r1, #0
 8013ea0:	f7f5 fd10 	bl	80098c4 <ff_convert>
 8013ea4:	f80d 0006 	strb.w	r0, [sp, r6]
			k++;
 8013ea8:	1c73      	adds	r3, r6, #1
 8013eaa:	b2de      	uxtb	r6, r3
		while(i < data_size) {
 8013eac:	42a7      	cmp	r7, r4
 8013eae:	d3eb      	bcc.n	8013e88 <GetFileName+0x68>
		}
		for(i = k; i < data_size; i++) filename[i] = 0;
 8013eb0:	4633      	mov	r3, r6
 8013eb2:	e003      	b.n	8013ebc <GetFileName+0x9c>
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	f80d 2003 	strb.w	r2, [sp, r3]
 8013eba:	3301      	adds	r3, #1
 8013ebc:	42a3      	cmp	r3, r4
 8013ebe:	d3f9      	bcc.n	8013eb4 <GetFileName+0x94>
		i = data_size;
 8013ec0:	4623      	mov	r3, r4
 8013ec2:	e000      	b.n	8013ec6 <GetFileName+0xa6>
		while((i > 0) && (filename[i] != '.')) i--;
 8013ec4:	3b01      	subs	r3, #1
 8013ec6:	b19b      	cbz	r3, 8013ef0 <GetFileName+0xd0>
 8013ec8:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8013ecc:	2a2e      	cmp	r2, #46	; 0x2e
 8013ece:	d1f9      	bne.n	8013ec4 <GetFileName+0xa4>
 8013ed0:	462a      	mov	r2, r5
 8013ed2:	e000      	b.n	8013ed6 <GetFileName+0xb6>
		{
			if(filename[i] >= 32) {
				rekordbox.filetype[k] = filename[i];
				k++;
			}
			i++;
 8013ed4:	3301      	adds	r3, #1
		while(k < 5)
 8013ed6:	2a04      	cmp	r2, #4
 8013ed8:	d80c      	bhi.n	8013ef4 <GetFileName+0xd4>
			if(filename[i] >= 32) {
 8013eda:	f81d 1003 	ldrb.w	r1, [sp, r3]
 8013ede:	291f      	cmp	r1, #31
 8013ee0:	d9f8      	bls.n	8013ed4 <GetFileName+0xb4>
				rekordbox.filetype[k] = filename[i];
 8013ee2:	481d      	ldr	r0, [pc, #116]	; (8013f58 <GetFileName+0x138>)
 8013ee4:	4410      	add	r0, r2
 8013ee6:	f880 14fb 	strb.w	r1, [r0, #1275]	; 0x4fb
				k++;
 8013eea:	3201      	adds	r2, #1
 8013eec:	b2d2      	uxtb	r2, r2
 8013eee:	e7f1      	b.n	8013ed4 <GetFileName+0xb4>
 8013ef0:	462a      	mov	r2, r5
 8013ef2:	e7f0      	b.n	8013ed6 <GetFileName+0xb6>
		}
		rekordbox.filetype[4] = 0;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	4a18      	ldr	r2, [pc, #96]	; (8013f58 <GetFileName+0x138>)
 8013ef8:	f882 34ff 	strb.w	r3, [r2, #1279]	; 0x4ff

		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 8013efc:	e005      	b.n	8013f0a <GetFileName+0xea>
 8013efe:	4a16      	ldr	r2, [pc, #88]	; (8013f58 <GetFileName+0x138>)
 8013f00:	441a      	add	r2, r3
 8013f02:	2100      	movs	r1, #0
 8013f04:	f882 13fc 	strb.w	r1, [r2, #1020]	; 0x3fc
 8013f08:	3301      	adds	r3, #1
 8013f0a:	2bfe      	cmp	r3, #254	; 0xfe
 8013f0c:	d9f7      	bls.n	8013efe <GetFileName+0xde>
		i = data_size;
 8013f0e:	4623      	mov	r3, r4
 8013f10:	e000      	b.n	8013f14 <GetFileName+0xf4>
		while((i > 0) && (filename[i] != '/')) i--;
 8013f12:	3b01      	subs	r3, #1
 8013f14:	b11b      	cbz	r3, 8013f1e <GetFileName+0xfe>
 8013f16:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8013f1a:	2a2f      	cmp	r2, #47	; 0x2f
 8013f1c:	d1f9      	bne.n	8013f12 <GetFileName+0xf2>
		k = 0;
		i++;
 8013f1e:	3301      	adds	r3, #1
		while(i < data_size)
 8013f20:	e000      	b.n	8013f24 <GetFileName+0x104>
		{
			if(filename[i] >= 32) {
				rekordbox.file[k] = filename[i];
				k++;
			}
			i++;
 8013f22:	3301      	adds	r3, #1
		while(i < data_size)
 8013f24:	42a3      	cmp	r3, r4
 8013f26:	d20a      	bcs.n	8013f3e <GetFileName+0x11e>
			if(filename[i] >= 32) {
 8013f28:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8013f2c:	2a1f      	cmp	r2, #31
 8013f2e:	d9f8      	bls.n	8013f22 <GetFileName+0x102>
				rekordbox.file[k] = filename[i];
 8013f30:	4909      	ldr	r1, [pc, #36]	; (8013f58 <GetFileName+0x138>)
 8013f32:	4429      	add	r1, r5
 8013f34:	f881 23fc 	strb.w	r2, [r1, #1020]	; 0x3fc
				k++;
 8013f38:	3501      	adds	r5, #1
 8013f3a:	b2ed      	uxtb	r5, r5
 8013f3c:	e7f1      	b.n	8013f22 <GetFileName+0x102>
		}
		rekordbox.file[i] = 0;
 8013f3e:	4a06      	ldr	r2, [pc, #24]	; (8013f58 <GetFileName+0x138>)
 8013f40:	4413      	add	r3, r2
 8013f42:	2200      	movs	r2, #0
 8013f44:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
	}
	f_close(&MyFile);
 8013f48:	4804      	ldr	r0, [pc, #16]	; (8013f5c <GetFileName+0x13c>)
 8013f4a:	f7f5 fa93 	bl	8009474 <f_close>
	return 0;
 8013f4e:	2000      	movs	r0, #0
}
 8013f50:	b041      	add	sp, #260	; 0x104
 8013f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(FindToken(path_token) != 0) return 1;
 8013f54:	2001      	movs	r0, #1
 8013f56:	e7fb      	b.n	8013f50 <GetFileName+0x130>
 8013f58:	200153a4 	.word	0x200153a4
 8013f5c:	2000f720 	.word	0x2000f720
 8013f60:	20000054 	.word	0x20000054
 8013f64:	200007e8 	.word	0x200007e8
 8013f68:	20007f5c 	.word	0x20007f5c

08013f6c <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
DMA_HandleTypeDef hdma_sai2_a;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8013f6c:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 8013f6e:	4818      	ldr	r0, [pc, #96]	; (8013fd0 <MX_SAI2_Init+0x64>)
 8013f70:	4b18      	ldr	r3, [pc, #96]	; (8013fd4 <MX_SAI2_Init+0x68>)
 8013f72:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8013f74:	2300      	movs	r3, #0
 8013f76:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8013f78:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8013f7a:	2280      	movs	r2, #128	; 0x80
 8013f7c:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8013f7e:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8013f80:	2201      	movs	r2, #1
 8013f82:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8013f84:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8013f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013f8a:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8013f8c:	6143      	str	r3, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8013f8e:	6182      	str	r2, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8013f90:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8013f94:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8013f96:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8013f98:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8013f9a:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8013f9c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 8013f9e:	2240      	movs	r2, #64	; 0x40
 8013fa0:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8013fa2:	2220      	movs	r2, #32
 8013fa4:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8013fa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013faa:	6482      	str	r2, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8013fac:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8013fae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8013fb2:	6502      	str	r2, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8013fb4:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8013fb6:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 8013fb8:	2304      	movs	r3, #4
 8013fba:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x0000000F;
 8013fbc:	230f      	movs	r3, #15
 8013fbe:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8013fc0:	f7f0 fd00 	bl	80049c4 <HAL_SAI_Init>
 8013fc4:	b900      	cbnz	r0, 8013fc8 <MX_SAI2_Init+0x5c>
  {
    Error_Handler();
  }

}
 8013fc6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8013fc8:	f7fe fb4a 	bl	8012660 <Error_Handler>
}
 8013fcc:	e7fb      	b.n	8013fc6 <MX_SAI2_Init+0x5a>
 8013fce:	bf00      	nop
 8013fd0:	2001813c 	.word	0x2001813c
 8013fd4:	40015c04 	.word	0x40015c04

08013fd8 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8013fd8:	6802      	ldr	r2, [r0, #0]
 8013fda:	4b23      	ldr	r3, [pc, #140]	; (8014068 <HAL_SAI_MspInit+0x90>)
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d000      	beq.n	8013fe2 <HAL_SAI_MspInit+0xa>
 8013fe0:	4770      	bx	lr
{
 8013fe2:	b530      	push	{r4, r5, lr}
 8013fe4:	b087      	sub	sp, #28
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8013fe6:	4b21      	ldr	r3, [pc, #132]	; (801406c <HAL_SAI_MspInit+0x94>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	b94b      	cbnz	r3, 8014000 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8013fec:	4a20      	ldr	r2, [pc, #128]	; (8014070 <HAL_SAI_MspInit+0x98>)
 8013fee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8013ff0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8013ff4:	6451      	str	r1, [r2, #68]	; 0x44
 8013ff6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013ff8:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8013ffc:	9200      	str	r2, [sp, #0]
 8013ffe:	9a00      	ldr	r2, [sp, #0]
 8014000:	4604      	mov	r4, r0
    }
    SAI2_client ++;
 8014002:	3301      	adds	r3, #1
 8014004:	4a19      	ldr	r2, [pc, #100]	; (801406c <HAL_SAI_MspInit+0x94>)
 8014006:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8014008:	23f0      	movs	r3, #240	; 0xf0
 801400a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801400c:	2302      	movs	r3, #2
 801400e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014010:	2500      	movs	r5, #0
 8014012:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014014:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8014016:	230a      	movs	r3, #10
 8014018:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801401a:	a901      	add	r1, sp, #4
 801401c:	4815      	ldr	r0, [pc, #84]	; (8014074 <HAL_SAI_MspInit+0x9c>)
 801401e:	f7ed ff9f 	bl	8001f60 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai2_a.Instance = DMA2_Stream4;
 8014022:	4815      	ldr	r0, [pc, #84]	; (8014078 <HAL_SAI_MspInit+0xa0>)
 8014024:	4b15      	ldr	r3, [pc, #84]	; (801407c <HAL_SAI_MspInit+0xa4>)
 8014026:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8014028:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 801402c:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801402e:	2340      	movs	r3, #64	; 0x40
 8014030:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8014032:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8014034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014038:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801403a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801403e:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014044:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8014046:	f44f 7380 	mov.w	r3, #256	; 0x100
 801404a:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 801404c:	6205      	str	r5, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801404e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8014050:	f7ed fa60 	bl	8001514 <HAL_DMA_Init>
 8014054:	b928      	cbnz	r0, 8014062 <HAL_SAI_MspInit+0x8a>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8014056:	4b08      	ldr	r3, [pc, #32]	; (8014078 <HAL_SAI_MspInit+0xa0>)
 8014058:	6723      	str	r3, [r4, #112]	; 0x70
 801405a:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 801405c:	66e3      	str	r3, [r4, #108]	; 0x6c
    }
}
 801405e:	b007      	add	sp, #28
 8014060:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8014062:	f7fe fafd 	bl	8012660 <Error_Handler>
 8014066:	e7f6      	b.n	8014056 <HAL_SAI_MspInit+0x7e>
 8014068:	40015c04 	.word	0x40015c04
 801406c:	20001468 	.word	0x20001468
 8014070:	40023800 	.word	0x40023800
 8014074:	40022000 	.word	0x40022000
 8014078:	200181c0 	.word	0x200181c0
 801407c:	40026470 	.word	0x40026470

08014080 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014080:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8014082:	4b07      	ldr	r3, [pc, #28]	; (80140a0 <SD_CheckStatus+0x20>)
 8014084:	2201      	movs	r2, #1
 8014086:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014088:	f7fa ffdc 	bl	800f044 <BSP_SD_GetCardState>
 801408c:	b920      	cbnz	r0, 8014098 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 801408e:	4a04      	ldr	r2, [pc, #16]	; (80140a0 <SD_CheckStatus+0x20>)
 8014090:	7813      	ldrb	r3, [r2, #0]
 8014092:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8014096:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8014098:	4b01      	ldr	r3, [pc, #4]	; (80140a0 <SD_CheckStatus+0x20>)
 801409a:	7818      	ldrb	r0, [r3, #0]
}
 801409c:	bd08      	pop	{r3, pc}
 801409e:	bf00      	nop
 80140a0:	20000071 	.word	0x20000071

080140a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80140a4:	b510      	push	{r4, lr}
 80140a6:	4604      	mov	r4, r0
Stat = STA_NOINIT;  
 80140a8:	4b07      	ldr	r3, [pc, #28]	; (80140c8 <SD_initialize+0x24>)
 80140aa:	2201      	movs	r2, #1
 80140ac:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80140ae:	f7fa ffeb 	bl	800f088 <BSP_SD_Init>
 80140b2:	b110      	cbz	r0, 80140ba <SD_initialize+0x16>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80140b4:	4b04      	ldr	r3, [pc, #16]	; (80140c8 <SD_initialize+0x24>)
 80140b6:	7818      	ldrb	r0, [r3, #0]
}
 80140b8:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 80140ba:	4620      	mov	r0, r4
 80140bc:	f7ff ffe0 	bl	8014080 <SD_CheckStatus>
 80140c0:	4b01      	ldr	r3, [pc, #4]	; (80140c8 <SD_initialize+0x24>)
 80140c2:	7018      	strb	r0, [r3, #0]
 80140c4:	e7f6      	b.n	80140b4 <SD_initialize+0x10>
 80140c6:	bf00      	nop
 80140c8:	20000071 	.word	0x20000071

080140cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80140cc:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 80140ce:	f7ff ffd7 	bl	8014080 <SD_CheckStatus>
}
 80140d2:	bd08      	pop	{r3, pc}

080140d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80140d4:	b508      	push	{r3, lr}
 80140d6:	4608      	mov	r0, r1
 80140d8:	4611      	mov	r1, r2
 80140da:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80140dc:	f04f 33ff 	mov.w	r3, #4294967295
 80140e0:	f7fa ff90 	bl	800f004 <BSP_SD_ReadBlocks>
 80140e4:	b920      	cbnz	r0, 80140f0 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80140e6:	f7fa ffad 	bl	800f044 <BSP_SD_GetCardState>
 80140ea:	2800      	cmp	r0, #0
 80140ec:	d1fb      	bne.n	80140e6 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 80140ee:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80140f0:	2001      	movs	r0, #1
 80140f2:	e7fc      	b.n	80140ee <SD_read+0x1a>

080140f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80140f4:	b508      	push	{r3, lr}
 80140f6:	4608      	mov	r0, r1
 80140f8:	4611      	mov	r1, r2
 80140fa:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80140fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014100:	f7fa ff90 	bl	800f024 <BSP_SD_WriteBlocks>
 8014104:	b920      	cbnz	r0, 8014110 <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8014106:	f7fa ff9d 	bl	800f044 <BSP_SD_GetCardState>
 801410a:	2800      	cmp	r0, #0
 801410c:	d1fb      	bne.n	8014106 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 801410e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8014110:	2001      	movs	r0, #1
 8014112:	e7fc      	b.n	801410e <SD_write+0x1a>

08014114 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014114:	4b15      	ldr	r3, [pc, #84]	; (801416c <SD_ioctl+0x58>)
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	f013 0f01 	tst.w	r3, #1
 801411c:	d121      	bne.n	8014162 <SD_ioctl+0x4e>
{
 801411e:	b510      	push	{r4, lr}
 8014120:	b088      	sub	sp, #32
 8014122:	4614      	mov	r4, r2

  switch (cmd)
 8014124:	2903      	cmp	r1, #3
 8014126:	d81e      	bhi.n	8014166 <SD_ioctl+0x52>
 8014128:	e8df f001 	tbb	[pc, r1]
 801412c:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014130:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8014132:	b008      	add	sp, #32
 8014134:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8014136:	4668      	mov	r0, sp
 8014138:	f7fa ff8e 	bl	800f058 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801413c:	9b06      	ldr	r3, [sp, #24]
 801413e:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8014140:	2000      	movs	r0, #0
    break;
 8014142:	e7f6      	b.n	8014132 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8014144:	4668      	mov	r0, sp
 8014146:	f7fa ff87 	bl	800f058 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801414a:	9b07      	ldr	r3, [sp, #28]
 801414c:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 801414e:	2000      	movs	r0, #0
    break;
 8014150:	e7ef      	b.n	8014132 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8014152:	4668      	mov	r0, sp
 8014154:	f7fa ff80 	bl	800f058 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014158:	9b07      	ldr	r3, [sp, #28]
 801415a:	0a5b      	lsrs	r3, r3, #9
 801415c:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 801415e:	2000      	movs	r0, #0
    break;
 8014160:	e7e7      	b.n	8014132 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014162:	2003      	movs	r0, #3
}
 8014164:	4770      	bx	lr
    res = RES_PARERR;
 8014166:	2004      	movs	r0, #4
 8014168:	e7e3      	b.n	8014132 <SD_ioctl+0x1e>
 801416a:	bf00      	nop
 801416c:	20000071 	.word	0x20000071

08014170 <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 8014170:	4b06      	ldr	r3, [pc, #24]	; (801418c <MX_SDMMC1_SD_Init+0x1c>)
 8014172:	4a07      	ldr	r2, [pc, #28]	; (8014190 <MX_SDMMC1_SD_Init+0x20>)
 8014174:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8014176:	2200      	movs	r2, #0
 8014178:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 801417a:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801417c:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 801417e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8014180:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014184:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 2;
 8014186:	2202      	movs	r2, #2
 8014188:	619a      	str	r2, [r3, #24]

}
 801418a:	4770      	bx	lr
 801418c:	20018220 	.word	0x20018220
 8014190:	40012c00 	.word	0x40012c00

08014194 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8014194:	b570      	push	{r4, r5, r6, lr}
 8014196:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014198:	2300      	movs	r3, #0
 801419a:	9303      	str	r3, [sp, #12]
 801419c:	9304      	str	r3, [sp, #16]
 801419e:	9305      	str	r3, [sp, #20]
 80141a0:	9306      	str	r3, [sp, #24]
 80141a2:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 80141a4:	6802      	ldr	r2, [r0, #0]
 80141a6:	4b1e      	ldr	r3, [pc, #120]	; (8014220 <HAL_SD_MspInit+0x8c>)
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d001      	beq.n	80141b0 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80141ac:	b008      	add	sp, #32
 80141ae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80141b0:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80141b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80141ba:	645a      	str	r2, [r3, #68]	; 0x44
 80141bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80141c2:	9200      	str	r2, [sp, #0]
 80141c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80141c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141c8:	f042 0204 	orr.w	r2, r2, #4
 80141cc:	631a      	str	r2, [r3, #48]	; 0x30
 80141ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141d0:	f002 0204 	and.w	r2, r2, #4
 80141d4:	9201      	str	r2, [sp, #4]
 80141d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80141d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141da:	f042 0208 	orr.w	r2, r2, #8
 80141de:	631a      	str	r2, [r3, #48]	; 0x30
 80141e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141e2:	f003 0308 	and.w	r3, r3, #8
 80141e6:	9302      	str	r3, [sp, #8]
 80141e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9 
 80141ea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80141ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141f0:	2602      	movs	r6, #2
 80141f2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141f4:	2503      	movs	r5, #3
 80141f6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80141f8:	240c      	movs	r4, #12
 80141fa:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80141fc:	eb0d 0104 	add.w	r1, sp, r4
 8014200:	4808      	ldr	r0, [pc, #32]	; (8014224 <HAL_SD_MspInit+0x90>)
 8014202:	f7ed fead 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8014206:	2304      	movs	r3, #4
 8014208:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801420a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801420c:	2300      	movs	r3, #0
 801420e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014210:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8014212:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014214:	eb0d 0104 	add.w	r1, sp, r4
 8014218:	4803      	ldr	r0, [pc, #12]	; (8014228 <HAL_SD_MspInit+0x94>)
 801421a:	f7ed fea1 	bl	8001f60 <HAL_GPIO_Init>
}
 801421e:	e7c5      	b.n	80141ac <HAL_SD_MspInit+0x18>
 8014220:	40012c00 	.word	0x40012c00
 8014224:	40020800 	.word	0x40020800
 8014228:	40020c00 	.word	0x40020c00

0801422c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 801422c:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 801422e:	480f      	ldr	r0, [pc, #60]	; (801426c <MX_SPI2_Init+0x40>)
 8014230:	4b0f      	ldr	r3, [pc, #60]	; (8014270 <MX_SPI2_Init+0x44>)
 8014232:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8014234:	2300      	movs	r3, #0
 8014236:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8014238:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801423a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801423e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8014240:	2202      	movs	r2, #2
 8014242:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8014244:	2201      	movs	r2, #1
 8014246:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8014248:	f44f 7200 	mov.w	r2, #512	; 0x200
 801424c:	6182      	str	r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801424e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8014250:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014252:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8014254:	2207      	movs	r2, #7
 8014256:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8014258:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801425a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801425c:	f7f1 fe8e 	bl	8005f7c <HAL_SPI_Init>
 8014260:	b900      	cbnz	r0, 8014264 <MX_SPI2_Init+0x38>
  {
    Error_Handler();
  }

}
 8014262:	bd08      	pop	{r3, pc}
    Error_Handler();
 8014264:	f7fe f9fc 	bl	8012660 <Error_Handler>
}
 8014268:	e7fb      	b.n	8014262 <MX_SPI2_Init+0x36>
 801426a:	bf00      	nop
 801426c:	200182a4 	.word	0x200182a4
 8014270:	40003800 	.word	0x40003800

08014274 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8014274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014276:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014278:	2300      	movs	r3, #0
 801427a:	9303      	str	r3, [sp, #12]
 801427c:	9304      	str	r3, [sp, #16]
 801427e:	9305      	str	r3, [sp, #20]
 8014280:	9306      	str	r3, [sp, #24]
 8014282:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8014284:	6802      	ldr	r2, [r0, #0]
 8014286:	4b21      	ldr	r3, [pc, #132]	; (801430c <HAL_SPI_MspInit+0x98>)
 8014288:	429a      	cmp	r2, r3
 801428a:	d001      	beq.n	8014290 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801428c:	b009      	add	sp, #36	; 0x24
 801428e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8014290:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8014294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801429a:	641a      	str	r2, [r3, #64]	; 0x40
 801429c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801429e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80142a2:	9200      	str	r2, [sp, #0]
 80142a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80142a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80142ac:	631a      	str	r2, [r3, #48]	; 0x30
 80142ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142b0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80142b4:	9201      	str	r2, [sp, #4]
 80142b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80142b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142ba:	f042 0202 	orr.w	r2, r2, #2
 80142be:	631a      	str	r2, [r3, #48]	; 0x30
 80142c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142c2:	f003 0302 	and.w	r3, r3, #2
 80142c6:	9302      	str	r3, [sp, #8]
 80142c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80142ca:	2402      	movs	r4, #2
 80142cc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142ce:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80142d0:	2703      	movs	r7, #3
 80142d2:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80142d4:	2605      	movs	r6, #5
 80142d6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80142d8:	a903      	add	r1, sp, #12
 80142da:	480d      	ldr	r0, [pc, #52]	; (8014310 <HAL_SPI_MspInit+0x9c>)
 80142dc:	f7ed fe40 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80142e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80142e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142e6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142e8:	2500      	movs	r5, #0
 80142ea:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80142ec:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80142ee:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80142f0:	a903      	add	r1, sp, #12
 80142f2:	4808      	ldr	r0, [pc, #32]	; (8014314 <HAL_SPI_MspInit+0xa0>)
 80142f4:	f7ed fe34 	bl	8001f60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 80142f8:	462a      	mov	r2, r5
 80142fa:	4621      	mov	r1, r4
 80142fc:	2024      	movs	r0, #36	; 0x24
 80142fe:	f7ec ffdf 	bl	80012c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8014302:	2024      	movs	r0, #36	; 0x24
 8014304:	f7ed f820 	bl	8001348 <HAL_NVIC_EnableIRQ>
}
 8014308:	e7c0      	b.n	801428c <HAL_SPI_MspInit+0x18>
 801430a:	bf00      	nop
 801430c:	40003800 	.word	0x40003800
 8014310:	40022000 	.word	0x40022000
 8014314:	40020400 	.word	0x40020400

08014318 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8014318:	b510      	push	{r4, lr}
  /* Initialize the hsai_BlockA2 Instance parameter */
  hsai_BlockA2.Instance = AUDIO_OUT_SAIx;
 801431a:	4c16      	ldr	r4, [pc, #88]	; (8014374 <SAIx_Out_Init+0x5c>)
 801431c:	4b16      	ldr	r3, [pc, #88]	; (8014378 <SAIx_Out_Init+0x60>)
 801431e:	6023      	str	r3, [r4, #0]
  //__HAL_SAI_DISABLE(&hsai_BlockA2);
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  hsai_BlockA2.Init.AudioFrequency = AudioFreq;
 8014320:	61e0      	str	r0, [r4, #28]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8014322:	2300      	movs	r3, #0
 8014324:	6063      	str	r3, [r4, #4]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8014326:	6163      	str	r3, [r4, #20]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8014328:	6323      	str	r3, [r4, #48]	; 0x30
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 801432a:	2280      	movs	r2, #128	; 0x80
 801432c:	6362      	str	r2, [r4, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 801432e:	63a3      	str	r3, [r4, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8014330:	2201      	movs	r2, #1
 8014332:	63e2      	str	r2, [r4, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8014334:	60a3      	str	r3, [r4, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8014336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801433a:	6121      	str	r1, [r4, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 801433c:	61a2      	str	r2, [r4, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  hsai_BlockA2.FrameInit.FrameLength = 64;
 801433e:	2240      	movs	r2, #64	; 0x40
 8014340:	6422      	str	r2, [r4, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8014342:	2220      	movs	r2, #32
 8014344:	6462      	str	r2, [r4, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8014346:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801434a:	64a2      	str	r2, [r4, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801434c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 801434e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8014352:	6522      	str	r2, [r4, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8014354:	6563      	str	r3, [r4, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8014356:	65a3      	str	r3, [r4, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 8014358:	2304      	movs	r3, #4
 801435a:	65e3      	str	r3, [r4, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 801435c:	230f      	movs	r3, #15
 801435e:	6623      	str	r3, [r4, #96]	; 0x60

  HAL_SAI_Init(&hsai_BlockA2);
 8014360:	4620      	mov	r0, r4
 8014362:	f7f0 fb2f 	bl	80049c4 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 8014366:	6822      	ldr	r2, [r4, #0]
 8014368:	6813      	ldr	r3, [r2, #0]
 801436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801436e:	6013      	str	r3, [r2, #0]
}
 8014370:	bd10      	pop	{r4, pc}
 8014372:	bf00      	nop
 8014374:	2001813c 	.word	0x2001813c
 8014378:	40015c04 	.word	0x40015c04

0801437c <BSP_AUDIO_OUT_Play>:
{
 801437c:	b538      	push	{r3, r4, r5, lr}
 801437e:	4605      	mov	r5, r0
 8014380:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8014382:	4b0c      	ldr	r3, [pc, #48]	; (80143b4 <BSP_AUDIO_OUT_Play+0x38>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	b28a      	uxth	r2, r1
 801438a:	4601      	mov	r1, r0
 801438c:	2034      	movs	r0, #52	; 0x34
 801438e:	4798      	blx	r3
 8014390:	b968      	cbnz	r0, 80143ae <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8014392:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8014396:	d207      	bcs.n	80143a8 <BSP_AUDIO_OUT_Play+0x2c>
 8014398:	f3c4 024f 	ubfx	r2, r4, #1, #16
 801439c:	4629      	mov	r1, r5
 801439e:	4806      	ldr	r0, [pc, #24]	; (80143b8 <BSP_AUDIO_OUT_Play+0x3c>)
 80143a0:	f7f0 fe1c 	bl	8004fdc <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 80143a4:	2000      	movs	r0, #0
}
 80143a6:	bd38      	pop	{r3, r4, r5, pc}
    HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 80143a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143ac:	e7f6      	b.n	801439c <BSP_AUDIO_OUT_Play+0x20>
    return AUDIO_ERROR;
 80143ae:	2001      	movs	r0, #1
 80143b0:	e7f9      	b.n	80143a6 <BSP_AUDIO_OUT_Play+0x2a>
 80143b2:	bf00      	nop
 80143b4:	20018308 	.word	0x20018308
 80143b8:	2001813c 	.word	0x2001813c

080143bc <BSP_AUDIO_OUT_Pause>:
{    
 80143bc:	b508      	push	{r3, lr}
    HAL_SAI_DMAPause(&hsai_BlockA2);
 80143be:	4802      	ldr	r0, [pc, #8]	; (80143c8 <BSP_AUDIO_OUT_Pause+0xc>)
 80143c0:	f7f0 fd88 	bl	8004ed4 <HAL_SAI_DMAPause>
}
 80143c4:	2000      	movs	r0, #0
 80143c6:	bd08      	pop	{r3, pc}
 80143c8:	2001813c 	.word	0x2001813c

080143cc <BSP_AUDIO_OUT_Resume>:
{    
 80143cc:	b508      	push	{r3, lr}
    HAL_SAI_DMAResume(&hsai_BlockA2);
 80143ce:	4802      	ldr	r0, [pc, #8]	; (80143d8 <BSP_AUDIO_OUT_Resume+0xc>)
 80143d0:	f7f0 fd93 	bl	8004efa <HAL_SAI_DMAResume>
}
 80143d4:	2000      	movs	r0, #0
 80143d6:	bd08      	pop	{r3, pc}
 80143d8:	2001813c 	.word	0x2001813c

080143dc <BSP_AUDIO_OUT_Stop>:
{
 80143dc:	b510      	push	{r4, lr}
 80143de:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&hsai_BlockA2);
 80143e0:	480a      	ldr	r0, [pc, #40]	; (801440c <BSP_AUDIO_OUT_Stop+0x30>)
 80143e2:	f7f0 fda6 	bl	8004f32 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80143e6:	4b0a      	ldr	r3, [pc, #40]	; (8014410 <BSP_AUDIO_OUT_Stop+0x34>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	699b      	ldr	r3, [r3, #24]
 80143ec:	4621      	mov	r1, r4
 80143ee:	2034      	movs	r0, #52	; 0x34
 80143f0:	4798      	blx	r3
 80143f2:	b940      	cbnz	r0, 8014406 <BSP_AUDIO_OUT_Stop+0x2a>
    if(Option == CODEC_PDWN_HW)
 80143f4:	2c01      	cmp	r4, #1
 80143f6:	d001      	beq.n	80143fc <BSP_AUDIO_OUT_Stop+0x20>
    return AUDIO_OK;
 80143f8:	2000      	movs	r0, #0
 80143fa:	e005      	b.n	8014408 <BSP_AUDIO_OUT_Stop+0x2c>
      HAL_Delay(1);
 80143fc:	2001      	movs	r0, #1
 80143fe:	f7ec ff2d 	bl	800125c <HAL_Delay>
    return AUDIO_OK;
 8014402:	2000      	movs	r0, #0
 8014404:	e000      	b.n	8014408 <BSP_AUDIO_OUT_Stop+0x2c>
    return AUDIO_ERROR;
 8014406:	2001      	movs	r0, #1
}
 8014408:	bd10      	pop	{r4, pc}
 801440a:	bf00      	nop
 801440c:	2001813c 	.word	0x2001813c
 8014410:	20018308 	.word	0x20018308

08014414 <BSP_AUDIO_OUT_SetVolume>:
{
 8014414:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8014416:	4b05      	ldr	r3, [pc, #20]	; (801442c <BSP_AUDIO_OUT_SetVolume+0x18>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	6a1b      	ldr	r3, [r3, #32]
 801441c:	4601      	mov	r1, r0
 801441e:	2034      	movs	r0, #52	; 0x34
 8014420:	4798      	blx	r3
 8014422:	b908      	cbnz	r0, 8014428 <BSP_AUDIO_OUT_SetVolume+0x14>
    return AUDIO_OK;
 8014424:	2000      	movs	r0, #0
}
 8014426:	bd08      	pop	{r3, pc}
    return AUDIO_ERROR;
 8014428:	2001      	movs	r0, #1
 801442a:	e7fc      	b.n	8014426 <BSP_AUDIO_OUT_SetVolume+0x12>
 801442c:	20018308 	.word	0x20018308

08014430 <HAL_SAI_TxCpltCallback>:
{
 8014430:	b508      	push	{r3, lr}
	if(BufferCtl.filetype == 0) {
 8014432:	4a1a      	ldr	r2, [pc, #104]	; (801449c <HAL_SAI_TxCpltCallback+0x6c>)
 8014434:	f241 0308 	movw	r3, #4104	; 0x1008
 8014438:	5cd3      	ldrb	r3, [r2, r3]
 801443a:	b97b      	cbnz	r3, 801445c <HAL_SAI_TxCpltCallback+0x2c>
		while(f_read(&MyFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE / 2],
 801443c:	4b18      	ldr	r3, [pc, #96]	; (80144a0 <HAL_SAI_TxCpltCallback+0x70>)
 801443e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014442:	4918      	ldr	r1, [pc, #96]	; (80144a4 <HAL_SAI_TxCpltCallback+0x74>)
 8014444:	4818      	ldr	r0, [pc, #96]	; (80144a8 <HAL_SAI_TxCpltCallback+0x78>)
 8014446:	f7f4 ff50 	bl	80092ea <f_read>
 801444a:	2800      	cmp	r0, #0
 801444c:	d1f6      	bne.n	801443c <HAL_SAI_TxCpltCallback+0xc>
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 801444e:	4913      	ldr	r1, [pc, #76]	; (801449c <HAL_SAI_TxCpltCallback+0x6c>)
 8014450:	f241 0204 	movw	r2, #4100	; 0x1004
 8014454:	588b      	ldr	r3, [r1, r2]
 8014456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801445a:	508b      	str	r3, [r1, r2]
	if(BufferCtl.filetype == 1) {
 801445c:	4a0f      	ldr	r2, [pc, #60]	; (801449c <HAL_SAI_TxCpltCallback+0x6c>)
 801445e:	f241 0308 	movw	r3, #4104	; 0x1008
 8014462:	5cd3      	ldrb	r3, [r2, r3]
 8014464:	2b01      	cmp	r3, #1
 8014466:	d00b      	beq.n	8014480 <HAL_SAI_TxCpltCallback+0x50>
	GetTrackTime();
 8014468:	f001 ff4a 	bl	8016300 <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 801446c:	4b0e      	ldr	r3, [pc, #56]	; (80144a8 <HAL_SAI_TxCpltCallback+0x78>)
 801446e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014472:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014476:	4299      	cmp	r1, r3
 8014478:	bf08      	it	eq
 801447a:	4290      	cmpeq	r0, r2
 801447c:	d007      	beq.n	801448e <HAL_SAI_TxCpltCallback+0x5e>
}
 801447e:	bd08      	pop	{r3, pc}
        unDmaBufMode = 2;
 8014480:	4b0a      	ldr	r3, [pc, #40]	; (80144ac <HAL_SAI_TxCpltCallback+0x7c>)
 8014482:	2202      	movs	r2, #2
 8014484:	601a      	str	r2, [r3, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2);
 8014486:	4b0a      	ldr	r3, [pc, #40]	; (80144b0 <HAL_SAI_TxCpltCallback+0x80>)
 8014488:	4a0a      	ldr	r2, [pc, #40]	; (80144b4 <HAL_SAI_TxCpltCallback+0x84>)
 801448a:	601a      	str	r2, [r3, #0]
 801448c:	e7ec      	b.n	8014468 <HAL_SAI_TxCpltCallback+0x38>
		bOutOfData = 1;
 801448e:	4b0a      	ldr	r3, [pc, #40]	; (80144b8 <HAL_SAI_TxCpltCallback+0x88>)
 8014490:	2201      	movs	r2, #1
 8014492:	601a      	str	r2, [r3, #0]
		unDmaBufMode = 3;
 8014494:	4b05      	ldr	r3, [pc, #20]	; (80144ac <HAL_SAI_TxCpltCallback+0x7c>)
 8014496:	2203      	movs	r2, #3
 8014498:	601a      	str	r2, [r3, #0]
}
 801449a:	e7f0      	b.n	801447e <HAL_SAI_TxCpltCallback+0x4e>
 801449c:	20007f5c 	.word	0x20007f5c
 80144a0:	200007e8 	.word	0x200007e8
 80144a4:	2000875c 	.word	0x2000875c
 80144a8:	2000f720 	.word	0x2000f720
 80144ac:	2000144c 	.word	0x2000144c
 80144b0:	20001450 	.word	0x20001450
 80144b4:	20012f9c 	.word	0x20012f9c
 80144b8:	200007e4 	.word	0x200007e4

080144bc <HAL_SAI_TxHalfCpltCallback>:
{
 80144bc:	b508      	push	{r3, lr}
	if(BufferCtl.filetype == 0) {
 80144be:	4a1a      	ldr	r2, [pc, #104]	; (8014528 <HAL_SAI_TxHalfCpltCallback+0x6c>)
 80144c0:	f241 0308 	movw	r3, #4104	; 0x1008
 80144c4:	5cd3      	ldrb	r3, [r2, r3]
 80144c6:	b97b      	cbnz	r3, 80144e8 <HAL_SAI_TxHalfCpltCallback+0x2c>
		while(f_read(&MyFile, &BufferCtl.buff[0],
 80144c8:	4b18      	ldr	r3, [pc, #96]	; (801452c <HAL_SAI_TxHalfCpltCallback+0x70>)
 80144ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80144ce:	4916      	ldr	r1, [pc, #88]	; (8014528 <HAL_SAI_TxHalfCpltCallback+0x6c>)
 80144d0:	4817      	ldr	r0, [pc, #92]	; (8014530 <HAL_SAI_TxHalfCpltCallback+0x74>)
 80144d2:	f7f4 ff0a 	bl	80092ea <f_read>
 80144d6:	2800      	cmp	r0, #0
 80144d8:	d1f6      	bne.n	80144c8 <HAL_SAI_TxHalfCpltCallback+0xc>
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 80144da:	4913      	ldr	r1, [pc, #76]	; (8014528 <HAL_SAI_TxHalfCpltCallback+0x6c>)
 80144dc:	f241 0204 	movw	r2, #4100	; 0x1004
 80144e0:	588b      	ldr	r3, [r1, r2]
 80144e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144e6:	508b      	str	r3, [r1, r2]
	if(BufferCtl.filetype == 1) {
 80144e8:	4a0f      	ldr	r2, [pc, #60]	; (8014528 <HAL_SAI_TxHalfCpltCallback+0x6c>)
 80144ea:	f241 0308 	movw	r3, #4104	; 0x1008
 80144ee:	5cd3      	ldrb	r3, [r2, r3]
 80144f0:	2b01      	cmp	r3, #1
 80144f2:	d00b      	beq.n	801450c <HAL_SAI_TxHalfCpltCallback+0x50>
	GetTrackTime();
 80144f4:	f001 ff04 	bl	8016300 <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 80144f8:	4b0d      	ldr	r3, [pc, #52]	; (8014530 <HAL_SAI_TxHalfCpltCallback+0x74>)
 80144fa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80144fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014502:	4299      	cmp	r1, r3
 8014504:	bf08      	it	eq
 8014506:	4290      	cmpeq	r0, r2
 8014508:	d007      	beq.n	801451a <HAL_SAI_TxHalfCpltCallback+0x5e>
}
 801450a:	bd08      	pop	{r3, pc}
        unDmaBufMode = 1;
 801450c:	4b09      	ldr	r3, [pc, #36]	; (8014534 <HAL_SAI_TxHalfCpltCallback+0x78>)
 801450e:	2201      	movs	r2, #1
 8014510:	601a      	str	r2, [r3, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 8014512:	4b09      	ldr	r3, [pc, #36]	; (8014538 <HAL_SAI_TxHalfCpltCallback+0x7c>)
 8014514:	4a09      	ldr	r2, [pc, #36]	; (801453c <HAL_SAI_TxHalfCpltCallback+0x80>)
 8014516:	601a      	str	r2, [r3, #0]
 8014518:	e7ec      	b.n	80144f4 <HAL_SAI_TxHalfCpltCallback+0x38>
		bOutOfData = 1;
 801451a:	4b09      	ldr	r3, [pc, #36]	; (8014540 <HAL_SAI_TxHalfCpltCallback+0x84>)
 801451c:	2201      	movs	r2, #1
 801451e:	601a      	str	r2, [r3, #0]
		unDmaBufMode = 3;
 8014520:	4b04      	ldr	r3, [pc, #16]	; (8014534 <HAL_SAI_TxHalfCpltCallback+0x78>)
 8014522:	2203      	movs	r2, #3
 8014524:	601a      	str	r2, [r3, #0]
}
 8014526:	e7f0      	b.n	801450a <HAL_SAI_TxHalfCpltCallback+0x4e>
 8014528:	20007f5c 	.word	0x20007f5c
 801452c:	200007e8 	.word	0x200007e8
 8014530:	2000f720 	.word	0x2000f720
 8014534:	2000144c 	.word	0x2000144c
 8014538:	20001450 	.word	0x20001450
 801453c:	20010b9c 	.word	0x20010b9c
 8014540:	200007e4 	.word	0x200007e4

08014544 <BSP_AUDIO_OUT_Error_CallBack>:
}
 8014544:	4770      	bx	lr
	...

08014548 <HAL_SAI_ErrorCallback>:
{
 8014548:	b510      	push	{r4, lr}
  audio_out_state = HAL_SAI_GetState(&hsai_BlockA2);
 801454a:	4807      	ldr	r0, [pc, #28]	; (8014568 <HAL_SAI_ErrorCallback+0x20>)
 801454c:	f7f0 fdef 	bl	800512e <HAL_SAI_GetState>
 8014550:	4604      	mov	r4, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8014552:	4806      	ldr	r0, [pc, #24]	; (801456c <HAL_SAI_ErrorCallback+0x24>)
 8014554:	f7f0 fdeb 	bl	800512e <HAL_SAI_GetState>
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8014558:	2c12      	cmp	r4, #18
 801455a:	bf18      	it	ne
 801455c:	2c02      	cmpne	r4, #2
 801455e:	d000      	beq.n	8014562 <HAL_SAI_ErrorCallback+0x1a>
}
 8014560:	bd10      	pop	{r4, pc}
    BSP_AUDIO_OUT_Error_CallBack();
 8014562:	f7ff ffef 	bl	8014544 <BSP_AUDIO_OUT_Error_CallBack>
}
 8014566:	e7fb      	b.n	8014560 <HAL_SAI_ErrorCallback+0x18>
 8014568:	2001813c 	.word	0x2001813c
 801456c:	2000146c 	.word	0x2000146c

08014570 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8014570:	b500      	push	{lr}
 8014572:	ed2d 8b02 	vpush	{d8}
 8014576:	b0a3      	sub	sp, #140	; 0x8c
 8014578:	ee08 1a10 	vmov	s16, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 801457c:	a801      	add	r0, sp, #4
 801457e:	f7f0 f85b 	bl	8004638 <HAL_RCCEx_GetPeriphCLKConfig>
  uint32_t new_frequency_Hz = (203000000 / 9 * (float)AudioFreq /
 8014582:	eeb8 7a48 	vcvt.f32.u32	s14, s16
 8014586:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80145f0 <BSP_AUDIO_OUT_ClockConfig+0x80>
 801458a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801458e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80145f4 <BSP_AUDIO_OUT_ClockConfig+0x84>
 8014592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801459a:	ee17 0a90 	vmov	r0, s15
  uint32_t set_frequency_Hz = 0;
 801459e:	2300      	movs	r3, #0
  uint32_t I2SN = 49;
 80145a0:	2231      	movs	r2, #49	; 0x31
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 80145a2:	2120      	movs	r1, #32
 80145a4:	e002      	b.n	80145ac <BSP_AUDIO_OUT_ClockConfig+0x3c>
	  if(set_frequency_Hz >= new_frequency_Hz) break;
 80145a6:	4283      	cmp	r3, r0
 80145a8:	d20f      	bcs.n	80145ca <BSP_AUDIO_OUT_ClockConfig+0x5a>
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 80145aa:	3901      	subs	r1, #1
 80145ac:	2901      	cmp	r1, #1
 80145ae:	d90c      	bls.n	80145ca <BSP_AUDIO_OUT_ClockConfig+0x5a>
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 80145b0:	2232      	movs	r2, #50	; 0x32
 80145b2:	f5b2 7fd8 	cmp.w	r2, #432	; 0x1b0
 80145b6:	d2f6      	bcs.n	80145a6 <BSP_AUDIO_OUT_ClockConfig+0x36>
		  set_frequency_Hz = I2SN * 1000000 / I2SDivQ;
 80145b8:	4b0f      	ldr	r3, [pc, #60]	; (80145f8 <BSP_AUDIO_OUT_ClockConfig+0x88>)
 80145ba:	fb03 f302 	mul.w	r3, r3, r2
 80145be:	fbb3 f3f1 	udiv	r3, r3, r1
		  if(set_frequency_Hz >= new_frequency_Hz) break;
 80145c2:	4298      	cmp	r0, r3
 80145c4:	d9ef      	bls.n	80145a6 <BSP_AUDIO_OUT_ClockConfig+0x36>
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 80145c6:	3201      	adds	r2, #1
 80145c8:	e7f3      	b.n	80145b2 <BSP_AUDIO_OUT_ClockConfig+0x42>
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80145ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80145ce:	9301      	str	r3, [sp, #4]
  rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80145d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80145d4:	9311      	str	r3, [sp, #68]	; 0x44
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = I2SN;
 80145d6:	9202      	str	r2, [sp, #8]
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80145d8:	2302      	movs	r3, #2
 80145da:	9304      	str	r3, [sp, #16]
  rcc_ex_clk_init_struct.PLLI2SDivQ = I2SDivQ;
 80145dc:	910a      	str	r1, [sp, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80145de:	a801      	add	r0, sp, #4
 80145e0:	f7ef faac 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
}
 80145e4:	b023      	add	sp, #140	; 0x8c
 80145e6:	ecbd 8b02 	vpop	{d8}
 80145ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80145ee:	bf00      	nop
 80145f0:	4bac15d2 	.word	0x4bac15d2
 80145f4:	46ac4400 	.word	0x46ac4400
 80145f8:	000f4240 	.word	0x000f4240

080145fc <BSP_AUDIO_OUT_Init>:
{ 
 80145fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145fe:	4606      	mov	r6, r0
 8014600:	460f      	mov	r7, r1
 8014602:	4614      	mov	r4, r2
    BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, AudioFreq, NULL);
 8014604:	2200      	movs	r2, #0
 8014606:	4621      	mov	r1, r4
 8014608:	480e      	ldr	r0, [pc, #56]	; (8014644 <BSP_AUDIO_OUT_Init+0x48>)
 801460a:	f7ff ffb1 	bl	8014570 <BSP_AUDIO_OUT_ClockConfig>
    SAIx_Out_Init(AudioFreq);
 801460e:	4620      	mov	r0, r4
 8014610:	f7ff fe82 	bl	8014318 <SAIx_Out_Init>
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8014614:	4b0c      	ldr	r3, [pc, #48]	; (8014648 <BSP_AUDIO_OUT_Init+0x4c>)
 8014616:	689b      	ldr	r3, [r3, #8]
 8014618:	2034      	movs	r0, #52	; 0x34
 801461a:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 801461c:	f648 1394 	movw	r3, #35220	; 0x8994
 8014620:	4298      	cmp	r0, r3
 8014622:	d10d      	bne.n	8014640 <BSP_AUDIO_OUT_Init+0x44>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8014624:	4d08      	ldr	r5, [pc, #32]	; (8014648 <BSP_AUDIO_OUT_Init+0x4c>)
 8014626:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8014628:	2034      	movs	r0, #52	; 0x34
 801462a:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 801462c:	4b07      	ldr	r3, [pc, #28]	; (801464c <BSP_AUDIO_OUT_Init+0x50>)
 801462e:	601d      	str	r5, [r3, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8014630:	682d      	ldr	r5, [r5, #0]
 8014632:	4623      	mov	r3, r4
 8014634:	463a      	mov	r2, r7
 8014636:	4631      	mov	r1, r6
 8014638:	2034      	movs	r0, #52	; 0x34
 801463a:	47a8      	blx	r5
    ret = AUDIO_OK;
 801463c:	2000      	movs	r0, #0
}
 801463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = AUDIO_ERROR;
 8014640:	2001      	movs	r0, #1
 8014642:	e7fc      	b.n	801463e <BSP_AUDIO_OUT_Init+0x42>
 8014644:	2001813c 	.word	0x2001813c
 8014648:	2000008c 	.word	0x2000008c
 801464c:	20018308 	.word	0x20018308

08014650 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8014650:	b508      	push	{r3, lr}
	HAL_I2C_Init(&hi2c3);
 8014652:	4802      	ldr	r0, [pc, #8]	; (801465c <AUDIO_IO_Init+0xc>)
 8014654:	f7ed fff0 	bl	8002638 <HAL_I2C_Init>
}
 8014658:	bd08      	pop	{r3, pc}
 801465a:	bf00      	nop
 801465c:	20001a90 	.word	0x20001a90

08014660 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 8014660:	4770      	bx	lr
	...

08014664 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8014664:	b510      	push	{r4, lr}
 8014666:	b086      	sub	sp, #24
  uint16_t tmp = Value;

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8014668:	0213      	lsls	r3, r2, #8
 801466a:	b21b      	sxth	r3, r3
 801466c:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 8014670:	ac06      	add	r4, sp, #24
 8014672:	f824 2d02 	strh.w	r2, [r4, #-2]!

  HAL_I2C_Mem_Write(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2, 1000);
 8014676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801467a:	9302      	str	r3, [sp, #8]
 801467c:	2302      	movs	r3, #2
 801467e:	9301      	str	r3, [sp, #4]
 8014680:	9400      	str	r4, [sp, #0]
 8014682:	460a      	mov	r2, r1
 8014684:	4601      	mov	r1, r0
 8014686:	4802      	ldr	r0, [pc, #8]	; (8014690 <AUDIO_IO_Write+0x2c>)
 8014688:	f7ee f8a6 	bl	80027d8 <HAL_I2C_Mem_Write>
}
 801468c:	b006      	add	sp, #24
 801468e:	bd10      	pop	{r4, pc}
 8014690:	20001a90 	.word	0x20001a90

08014694 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8014694:	b500      	push	{lr}
 8014696:	b087      	sub	sp, #28
  uint16_t read_value = 0, tmp = 0;
 8014698:	aa06      	add	r2, sp, #24
 801469a:	2300      	movs	r3, #0
 801469c:	f822 3d02 	strh.w	r3, [r2, #-2]!

  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2, 1000);
 80146a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80146a4:	9302      	str	r3, [sp, #8]
 80146a6:	2302      	movs	r3, #2
 80146a8:	9301      	str	r3, [sp, #4]
 80146aa:	9200      	str	r2, [sp, #0]
 80146ac:	460a      	mov	r2, r1
 80146ae:	4601      	mov	r1, r0
 80146b0:	4806      	ldr	r0, [pc, #24]	; (80146cc <AUDIO_IO_Read+0x38>)
 80146b2:	f7ee f977 	bl	80029a4 <HAL_I2C_Mem_Read>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80146b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80146ba:	0218      	lsls	r0, r3, #8
 80146bc:	b200      	sxth	r0, r0
 80146be:	ea40 2013 	orr.w	r0, r0, r3, lsr #8

  read_value = tmp;

  return read_value;
}
 80146c2:	b280      	uxth	r0, r0
 80146c4:	b007      	add	sp, #28
 80146c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80146ca:	bf00      	nop
 80146cc:	20001a90 	.word	0x20001a90

080146d0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80146d0:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80146d2:	f7ec fdc3 	bl	800125c <HAL_Delay>
}
 80146d6:	bd08      	pop	{r3, pc}

080146d8 <Mp3FillReadBuffer>:

UINT Mp3FillReadBuffer(BYTE* pInData, UINT unInDataLeft, FIL* pInFile)
{
 80146d8:	b570      	push	{r4, r5, r6, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	460c      	mov	r4, r1
 80146de:	4616      	mov	r6, r2
	// move last, small chunk from end of buffer to start, then fill with new data
	memmove(BufferCtl.buff, pInData, unInDataLeft);
 80146e0:	4d0a      	ldr	r5, [pc, #40]	; (801470c <Mp3FillReadBuffer+0x34>)
 80146e2:	460a      	mov	r2, r1
 80146e4:	4601      	mov	r1, r0
 80146e6:	4628      	mov	r0, r5
 80146e8:	f002 fde1 	bl	80172ae <memmove>

	UINT unSpaceLeft = MP3_INBUF_SIZE - unInDataLeft;
	UINT unRead = 0;
 80146ec:	ab02      	add	r3, sp, #8
 80146ee:	2200      	movs	r2, #0
 80146f0:	f843 2d04 	str.w	r2, [r3, #-4]!
	FRESULT fr = f_read(pInFile, BufferCtl.buff + unInDataLeft, unSpaceLeft, &unRead);
 80146f4:	f5c4 5280 	rsb	r2, r4, #4096	; 0x1000
 80146f8:	1929      	adds	r1, r5, r4
 80146fa:	4630      	mov	r0, r6
 80146fc:	f7f4 fdf5 	bl	80092ea <f_read>
	if(fr != FR_OK)
 8014700:	b108      	cbz	r0, 8014706 <Mp3FillReadBuffer+0x2e>
	{
		unRead = 0;
 8014702:	2300      	movs	r3, #0
 8014704:	9301      	str	r3, [sp, #4]
	{
	    // zero-pad to avoid finding false sync word after last frame (from old data in readBuf)
	    memset(BufferCtl.buff + unInDataLeft + unRead, unSpaceLeft - unRead, 0);
	}
	return unRead;
}
 8014706:	9801      	ldr	r0, [sp, #4]
 8014708:	b002      	add	sp, #8
 801470a:	bd70      	pop	{r4, r5, r6, pc}
 801470c:	20007f5c 	.word	0x20007f5c

08014710 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8014710:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8014712:	4b0d      	ldr	r3, [pc, #52]	; (8014748 <BSP_TS_Init+0x38>)
 8014714:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
 8014716:	4b0d      	ldr	r3, [pc, #52]	; (801474c <BSP_TS_Init+0x3c>)
 8014718:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 801471a:	4c0d      	ldr	r4, [pc, #52]	; (8014750 <BSP_TS_Init+0x40>)
 801471c:	6823      	ldr	r3, [r4, #0]
 801471e:	2070      	movs	r0, #112	; 0x70
 8014720:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8014722:	6863      	ldr	r3, [r4, #4]
 8014724:	2070      	movs	r0, #112	; 0x70
 8014726:	4798      	blx	r3
 8014728:	2851      	cmp	r0, #81	; 0x51
 801472a:	d10b      	bne.n	8014744 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 801472c:	4a09      	ldr	r2, [pc, #36]	; (8014754 <BSP_TS_Init+0x44>)
 801472e:	6014      	str	r4, [r2, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8014730:	2070      	movs	r0, #112	; 0x70
 8014732:	4a09      	ldr	r2, [pc, #36]	; (8014758 <BSP_TS_Init+0x48>)
 8014734:	7010      	strb	r0, [r2, #0]
    tsOrientation = TS_SWAP_XY;
 8014736:	4a09      	ldr	r2, [pc, #36]	; (801475c <BSP_TS_Init+0x4c>)
 8014738:	2108      	movs	r1, #8
 801473a:	7011      	strb	r1, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 801473c:	68e3      	ldr	r3, [r4, #12]
 801473e:	4798      	blx	r3
  uint8_t status = TS_OK;
 8014740:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 8014742:	bd10      	pop	{r4, pc}
    status = TS_DEVICE_NOT_FOUND;
 8014744:	2003      	movs	r0, #3
 8014746:	e7fc      	b.n	8014742 <BSP_TS_Init+0x32>
 8014748:	20001522 	.word	0x20001522
 801474c:	20001524 	.word	0x20001524
 8014750:	2000000c 	.word	0x2000000c
 8014754:	2000151c 	.word	0x2000151c
 8014758:	200014f0 	.word	0x200014f0
 801475c:	20001520 	.word	0x20001520

08014760 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8014760:	b510      	push	{r4, lr}
 8014762:	b086      	sub	sp, #24
	GPIO_InitTypeDef gpio_init_structure;

	/* Configure Interrupt mode for SD detection pin */
	gpio_init_structure.Pin = TS_INT_PIN;
 8014764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014768:	9301      	str	r3, [sp, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 801476a:	2400      	movs	r4, #0
 801476c:	9403      	str	r4, [sp, #12]
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 801476e:	2302      	movs	r3, #2
 8014770:	9304      	str	r3, [sp, #16]
	gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8014772:	4b0a      	ldr	r3, [pc, #40]	; (801479c <BSP_TS_ITConfig+0x3c>)
 8014774:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8014776:	a901      	add	r1, sp, #4
 8014778:	4809      	ldr	r0, [pc, #36]	; (80147a0 <BSP_TS_ITConfig+0x40>)
 801477a:	f7ed fbf1 	bl	8001f60 <HAL_GPIO_Init>

	/* Enable and set Touch screen EXTI Interrupt to the lowest priority */
	HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 801477e:	4622      	mov	r2, r4
 8014780:	210f      	movs	r1, #15
 8014782:	2028      	movs	r0, #40	; 0x28
 8014784:	f7ec fd9c 	bl	80012c0 <HAL_NVIC_SetPriority>
	/* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8014788:	4b06      	ldr	r3, [pc, #24]	; (80147a4 <BSP_TS_ITConfig+0x44>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	699b      	ldr	r3, [r3, #24]
 801478e:	4a06      	ldr	r2, [pc, #24]	; (80147a8 <BSP_TS_ITConfig+0x48>)
 8014790:	7810      	ldrb	r0, [r2, #0]
 8014792:	4798      	blx	r3

  return TS_OK;  
}
 8014794:	4620      	mov	r0, r4
 8014796:	b006      	add	sp, #24
 8014798:	bd10      	pop	{r4, pc}
 801479a:	bf00      	nop
 801479c:	10110000 	.word	0x10110000
 80147a0:	40022000 	.word	0x40022000
 80147a4:	2000151c 	.word	0x2000151c
 80147a8:	200014f0 	.word	0x200014f0

080147ac <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80147ac:	b510      	push	{r4, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	4604      	mov	r4, r0
  uint32_t gestureId = 0;
 80147b2:	a902      	add	r1, sp, #8
 80147b4:	2300      	movs	r3, #0
 80147b6:	f841 3d04 	str.w	r3, [r1, #-4]!
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80147ba:	4b18      	ldr	r3, [pc, #96]	; (801481c <BSP_TS_Get_GestureId+0x70>)
 80147bc:	7818      	ldrb	r0, [r3, #0]
 80147be:	f7fd fa95 	bl	8011cec <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80147c2:	9b01      	ldr	r3, [sp, #4]
 80147c4:	2b18      	cmp	r3, #24
 80147c6:	d01d      	beq.n	8014804 <BSP_TS_Get_GestureId+0x58>
 80147c8:	d806      	bhi.n	80147d8 <BSP_TS_Get_GestureId+0x2c>
 80147ca:	2b10      	cmp	r3, #16
 80147cc:	d012      	beq.n	80147f4 <BSP_TS_Get_GestureId+0x48>
 80147ce:	2b14      	cmp	r3, #20
 80147d0:	d014      	beq.n	80147fc <BSP_TS_Get_GestureId+0x50>
 80147d2:	b15b      	cbz	r3, 80147ec <BSP_TS_Get_GestureId+0x40>
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
      break;
    default :
      ts_status = TS_ERROR;
 80147d4:	2001      	movs	r0, #1
 80147d6:	e00b      	b.n	80147f0 <BSP_TS_Get_GestureId+0x44>
  switch(gestureId)
 80147d8:	2b40      	cmp	r3, #64	; 0x40
 80147da:	d017      	beq.n	801480c <BSP_TS_Get_GestureId+0x60>
 80147dc:	2b49      	cmp	r3, #73	; 0x49
 80147de:	d019      	beq.n	8014814 <BSP_TS_Get_GestureId+0x68>
 80147e0:	2b1c      	cmp	r3, #28
 80147e2:	d1f7      	bne.n	80147d4 <BSP_TS_Get_GestureId+0x28>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80147e4:	2304      	movs	r3, #4
 80147e6:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 80147e8:	2000      	movs	r0, #0
      break;
 80147ea:	e001      	b.n	80147f0 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80147ec:	2000      	movs	r0, #0
 80147ee:	62a0      	str	r0, [r4, #40]	; 0x28
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 80147f0:	b002      	add	sp, #8
 80147f2:	bd10      	pop	{r4, pc}
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80147f4:	2301      	movs	r3, #1
 80147f6:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 80147f8:	2000      	movs	r0, #0
      break;
 80147fa:	e7f9      	b.n	80147f0 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80147fc:	2302      	movs	r3, #2
 80147fe:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8014800:	2000      	movs	r0, #0
      break;
 8014802:	e7f5      	b.n	80147f0 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8014804:	2303      	movs	r3, #3
 8014806:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8014808:	2000      	movs	r0, #0
      break;
 801480a:	e7f1      	b.n	80147f0 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 801480c:	2305      	movs	r3, #5
 801480e:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8014810:	2000      	movs	r0, #0
      break;
 8014812:	e7ed      	b.n	80147f0 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8014814:	2306      	movs	r3, #6
 8014816:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8014818:	2000      	movs	r0, #0
      break;
 801481a:	e7e9      	b.n	80147f0 <BSP_TS_Get_GestureId+0x44>
 801481c:	200014f0 	.word	0x200014f0

08014820 <BSP_TS_GetState>:
{
 8014820:	b530      	push	{r4, r5, lr}
 8014822:	b093      	sub	sp, #76	; 0x4c
 8014824:	4605      	mov	r5, r0
  uint32_t weight = 0;
 8014826:	2300      	movs	r3, #0
 8014828:	9305      	str	r3, [sp, #20]
  uint32_t area = 0;
 801482a:	9304      	str	r3, [sp, #16]
  uint32_t event = 0;
 801482c:	9303      	str	r3, [sp, #12]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 801482e:	4b69      	ldr	r3, [pc, #420]	; (80149d4 <BSP_TS_GetState+0x1b4>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	691b      	ldr	r3, [r3, #16]
 8014834:	4a68      	ldr	r2, [pc, #416]	; (80149d8 <BSP_TS_GetState+0x1b8>)
 8014836:	7810      	ldrb	r0, [r2, #0]
 8014838:	4798      	blx	r3
 801483a:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 801483c:	2800      	cmp	r0, #0
 801483e:	f000 80c6 	beq.w	80149ce <BSP_TS_GetState+0x1ae>
    for(index=0; index < TS_State->touchDetected; index++)
 8014842:	2400      	movs	r4, #0
 8014844:	e01f      	b.n	8014886 <BSP_TS_GetState+0x66>
        x[index] = brute_x[index];
 8014846:	aa12      	add	r2, sp, #72	; 0x48
 8014848:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801484c:	f832 1c24 	ldrh.w	r1, [r2, #-36]
 8014850:	f822 1c0c 	strh.w	r1, [r2, #-12]
        y[index] = brute_y[index];
 8014854:	f832 1c30 	ldrh.w	r1, [r2, #-48]
 8014858:	f822 1c18 	strh.w	r1, [r2, #-24]
 801485c:	e026      	b.n	80148ac <BSP_TS_GetState+0x8c>
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 801485e:	b29b      	uxth	r3, r3
 8014860:	1a5b      	subs	r3, r3, r1
 8014862:	b29b      	uxth	r3, r3
 8014864:	e055      	b.n	8014912 <BSP_TS_GetState+0xf2>
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8014866:	b292      	uxth	r2, r2
 8014868:	1a12      	subs	r2, r2, r0
 801486a:	b292      	uxth	r2, r2
 801486c:	e05e      	b.n	801492c <BSP_TS_GetState+0x10c>
        TS_State->touchX[index] = x[index];
 801486e:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8014872:	8059      	strh	r1, [r3, #2]
        TS_State->touchY[index] = y[index];
 8014874:	1d23      	adds	r3, r4, #4
 8014876:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801487a:	8098      	strh	r0, [r3, #4]
 801487c:	e07a      	b.n	8014974 <BSP_TS_GetState+0x154>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 801487e:	192b      	adds	r3, r5, r4
 8014880:	2201      	movs	r2, #1
 8014882:	76da      	strb	r2, [r3, #27]
    for(index=0; index < TS_State->touchDetected; index++)
 8014884:	3401      	adds	r4, #1
 8014886:	782b      	ldrb	r3, [r5, #0]
 8014888:	42a3      	cmp	r3, r4
 801488a:	f240 809d 	bls.w	80149c8 <BSP_TS_GetState+0x1a8>
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 801488e:	4b51      	ldr	r3, [pc, #324]	; (80149d4 <BSP_TS_GetState+0x1b4>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	695b      	ldr	r3, [r3, #20]
 8014894:	0061      	lsls	r1, r4, #1
 8014896:	aa06      	add	r2, sp, #24
 8014898:	440a      	add	r2, r1
 801489a:	a809      	add	r0, sp, #36	; 0x24
 801489c:	4401      	add	r1, r0
 801489e:	484e      	ldr	r0, [pc, #312]	; (80149d8 <BSP_TS_GetState+0x1b8>)
 80148a0:	7800      	ldrb	r0, [r0, #0]
 80148a2:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 80148a4:	4b4d      	ldr	r3, [pc, #308]	; (80149dc <BSP_TS_GetState+0x1bc>)
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	2b01      	cmp	r3, #1
 80148aa:	d0cc      	beq.n	8014846 <BSP_TS_GetState+0x26>
      if(tsOrientation & TS_SWAP_X)
 80148ac:	f013 0f02 	tst.w	r3, #2
 80148b0:	d008      	beq.n	80148c4 <BSP_TS_GetState+0xa4>
        x[index] = 4096 - brute_x[index];
 80148b2:	aa12      	add	r2, sp, #72	; 0x48
 80148b4:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 80148b8:	f831 2c24 	ldrh.w	r2, [r1, #-36]
 80148bc:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80148c0:	f821 2c0c 	strh.w	r2, [r1, #-12]
      if(tsOrientation & TS_SWAP_Y)
 80148c4:	f013 0f04 	tst.w	r3, #4
 80148c8:	d008      	beq.n	80148dc <BSP_TS_GetState+0xbc>
        y[index] = 4096 - brute_y[index];
 80148ca:	aa12      	add	r2, sp, #72	; 0x48
 80148cc:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 80148d0:	f831 2c30 	ldrh.w	r2, [r1, #-48]
 80148d4:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80148d8:	f821 2c18 	strh.w	r2, [r1, #-24]
      if(tsOrientation & TS_SWAP_XY)
 80148dc:	f013 0f08 	tst.w	r3, #8
 80148e0:	d00a      	beq.n	80148f8 <BSP_TS_GetState+0xd8>
        y[index] = brute_x[index];
 80148e2:	ab12      	add	r3, sp, #72	; 0x48
 80148e4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80148e8:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80148ec:	f823 2c18 	strh.w	r2, [r3, #-24]
        x[index] = brute_y[index];
 80148f0:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80148f4:	f823 2c0c 	strh.w	r2, [r3, #-12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80148f8:	ab12      	add	r3, sp, #72	; 0x48
 80148fa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80148fe:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8014902:	4b37      	ldr	r3, [pc, #220]	; (80149e0 <BSP_TS_GetState+0x1c0>)
 8014904:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014908:	4299      	cmp	r1, r3
 801490a:	d9a8      	bls.n	801485e <BSP_TS_GetState+0x3e>
 801490c:	b29b      	uxth	r3, r3
 801490e:	1acb      	subs	r3, r1, r3
 8014910:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8014912:	aa12      	add	r2, sp, #72	; 0x48
 8014914:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8014918:	f832 0c18 	ldrh.w	r0, [r2, #-24]
 801491c:	4a31      	ldr	r2, [pc, #196]	; (80149e4 <BSP_TS_GetState+0x1c4>)
 801491e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8014922:	4290      	cmp	r0, r2
 8014924:	d99f      	bls.n	8014866 <BSP_TS_GetState+0x46>
 8014926:	b292      	uxth	r2, r2
 8014928:	1a82      	subs	r2, r0, r2
 801492a:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 801492c:	4413      	add	r3, r2
 801492e:	2b05      	cmp	r3, #5
 8014930:	dd05      	ble.n	801493e <BSP_TS_GetState+0x11e>
        _x[index] = x[index];
 8014932:	4b2b      	ldr	r3, [pc, #172]	; (80149e0 <BSP_TS_GetState+0x1c0>)
 8014934:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        _y[index] = y[index];
 8014938:	4b2a      	ldr	r3, [pc, #168]	; (80149e4 <BSP_TS_GetState+0x1c4>)
 801493a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 801493e:	4b26      	ldr	r3, [pc, #152]	; (80149d8 <BSP_TS_GetState+0x1b8>)
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	2b70      	cmp	r3, #112	; 0x70
 8014944:	d093      	beq.n	801486e <BSP_TS_GetState+0x4e>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8014946:	4b26      	ldr	r3, [pc, #152]	; (80149e0 <BSP_TS_GetState+0x1c0>)
 8014948:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801494c:	4a26      	ldr	r2, [pc, #152]	; (80149e8 <BSP_TS_GetState+0x1c8>)
 801494e:	8812      	ldrh	r2, [r2, #0]
 8014950:	fb03 f302 	mul.w	r3, r3, r2
 8014954:	0b1b      	lsrs	r3, r3, #12
 8014956:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 801495a:	8053      	strh	r3, [r2, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 801495c:	4b21      	ldr	r3, [pc, #132]	; (80149e4 <BSP_TS_GetState+0x1c4>)
 801495e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014962:	4a22      	ldr	r2, [pc, #136]	; (80149ec <BSP_TS_GetState+0x1cc>)
 8014964:	8812      	ldrh	r2, [r2, #0]
 8014966:	fb03 f302 	mul.w	r3, r3, r2
 801496a:	0b1b      	lsrs	r3, r3, #12
 801496c:	1d22      	adds	r2, r4, #4
 801496e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8014972:	8093      	strh	r3, [r2, #4]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8014974:	4b18      	ldr	r3, [pc, #96]	; (80149d8 <BSP_TS_GetState+0x1b8>)
 8014976:	7818      	ldrb	r0, [r3, #0]
 8014978:	ab03      	add	r3, sp, #12
 801497a:	9300      	str	r3, [sp, #0]
 801497c:	ab04      	add	r3, sp, #16
 801497e:	aa05      	add	r2, sp, #20
 8014980:	4621      	mov	r1, r4
 8014982:	f7fd f9c5 	bl	8011d10 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 8014986:	192b      	adds	r3, r5, r4
 8014988:	9a05      	ldr	r2, [sp, #20]
 801498a:	759a      	strb	r2, [r3, #22]
      TS_State->touchArea[index]   = area;
 801498c:	9a04      	ldr	r2, [sp, #16]
 801498e:	f883 2020 	strb.w	r2, [r3, #32]
      switch(event)
 8014992:	9b03      	ldr	r3, [sp, #12]
 8014994:	2b03      	cmp	r3, #3
 8014996:	f63f af75 	bhi.w	8014884 <BSP_TS_GetState+0x64>
 801499a:	a201      	add	r2, pc, #4	; (adr r2, 80149a0 <BSP_TS_GetState+0x180>)
 801499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149a0:	0801487f 	.word	0x0801487f
 80149a4:	080149b1 	.word	0x080149b1
 80149a8:	080149b9 	.word	0x080149b9
 80149ac:	080149c1 	.word	0x080149c1
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80149b0:	192b      	adds	r3, r5, r4
 80149b2:	2202      	movs	r2, #2
 80149b4:	76da      	strb	r2, [r3, #27]
          break;
 80149b6:	e765      	b.n	8014884 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80149b8:	192b      	adds	r3, r5, r4
 80149ba:	2203      	movs	r2, #3
 80149bc:	76da      	strb	r2, [r3, #27]
          break;
 80149be:	e761      	b.n	8014884 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80149c0:	192b      	adds	r3, r5, r4
 80149c2:	2200      	movs	r2, #0
 80149c4:	76da      	strb	r2, [r3, #27]
          break;
 80149c6:	e75d      	b.n	8014884 <BSP_TS_GetState+0x64>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80149c8:	4628      	mov	r0, r5
 80149ca:	f7ff feef 	bl	80147ac <BSP_TS_Get_GestureId>
}
 80149ce:	b013      	add	sp, #76	; 0x4c
 80149d0:	bd30      	pop	{r4, r5, pc}
 80149d2:	bf00      	nop
 80149d4:	2000151c 	.word	0x2000151c
 80149d8:	200014f0 	.word	0x200014f0
 80149dc:	20001520 	.word	0x20001520
 80149e0:	200014f4 	.word	0x200014f4
 80149e4:	20001508 	.word	0x20001508
 80149e8:	20001522 	.word	0x20001522
 80149ec:	20001524 	.word	0x20001524

080149f0 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */
void BSP_TS_ITClear(void)
{
 80149f0:	b508      	push	{r3, lr}
  /* Clear TS IT pending bits */
  tsDriver->ClearIT(I2cAddress); 
 80149f2:	4b03      	ldr	r3, [pc, #12]	; (8014a00 <BSP_TS_ITClear+0x10>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	69db      	ldr	r3, [r3, #28]
 80149f8:	4a02      	ldr	r2, [pc, #8]	; (8014a04 <BSP_TS_ITClear+0x14>)
 80149fa:	7810      	ldrb	r0, [r2, #0]
 80149fc:	4798      	blx	r3
}
 80149fe:	bd08      	pop	{r3, pc}
 8014a00:	2000151c 	.word	0x2000151c
 8014a04:	200014f0 	.word	0x200014f0

08014a08 <BSP_TS_ResetTouchData>:
uint8_t BSP_TS_ResetTouchData(TS_StateTypeDef *TS_State)
{
  uint8_t ts_status = TS_ERROR;
  uint32_t index;

  if (TS_State != (TS_StateTypeDef *)NULL)
 8014a08:	b1c8      	cbz	r0, 8014a3e <BSP_TS_ResetTouchData+0x36>
{
 8014a0a:	b410      	push	{r4}
 8014a0c:	4604      	mov	r4, r0
  {
    TS_State->gestureId = GEST_ID_NO_GESTURE;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	6283      	str	r3, [r0, #40]	; 0x28
    TS_State->touchDetected = 0;
 8014a12:	7003      	strb	r3, [r0, #0]

    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 8014a14:	e00d      	b.n	8014a32 <BSP_TS_ResetTouchData+0x2a>
    {
      TS_State->touchX[index]       = 0;
 8014a16:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	804a      	strh	r2, [r1, #2]
      TS_State->touchY[index]       = 0;
 8014a1e:	1d19      	adds	r1, r3, #4
 8014a20:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014a24:	808a      	strh	r2, [r1, #4]
      TS_State->touchArea[index]    = 0;
 8014a26:	18e1      	adds	r1, r4, r3
 8014a28:	f881 2020 	strb.w	r2, [r1, #32]
      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8014a2c:	76ca      	strb	r2, [r1, #27]
      TS_State->touchWeight[index]  = 0;
 8014a2e:	758a      	strb	r2, [r1, #22]
    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 8014a30:	3301      	adds	r3, #1
 8014a32:	2b04      	cmp	r3, #4
 8014a34:	d9ef      	bls.n	8014a16 <BSP_TS_ResetTouchData+0xe>
    }

    ts_status = TS_OK;
 8014a36:	2000      	movs	r0, #0

  } /* of if (TS_State != (TS_StateTypeDef *)NULL) */

  return (ts_status);
}
 8014a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a3c:	4770      	bx	lr
  uint8_t ts_status = TS_ERROR;
 8014a3e:	2001      	movs	r0, #1
}
 8014a40:	4770      	bx	lr
	...

08014a44 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8014a44:	b508      	push	{r3, lr}
	HAL_I2C_Init(&hi2c3);
 8014a46:	4802      	ldr	r0, [pc, #8]	; (8014a50 <TS_IO_Init+0xc>)
 8014a48:	f7ed fdf6 	bl	8002638 <HAL_I2C_Init>
}
 8014a4c:	bd08      	pop	{r3, pc}
 8014a4e:	bf00      	nop
 8014a50:	20001a90 	.word	0x20001a90

08014a54 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8014a54:	b510      	push	{r4, lr}
 8014a56:	b086      	sub	sp, #24
 8014a58:	ac06      	add	r4, sp, #24
 8014a5a:	f804 2d01 	strb.w	r2, [r4, #-1]!
	HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1, 1000);
 8014a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a62:	9302      	str	r3, [sp, #8]
 8014a64:	2301      	movs	r3, #1
 8014a66:	9301      	str	r3, [sp, #4]
 8014a68:	9400      	str	r4, [sp, #0]
 8014a6a:	460a      	mov	r2, r1
 8014a6c:	4601      	mov	r1, r0
 8014a6e:	4802      	ldr	r0, [pc, #8]	; (8014a78 <TS_IO_Write+0x24>)
 8014a70:	f7ed feb2 	bl	80027d8 <HAL_I2C_Mem_Write>
}
 8014a74:	b006      	add	sp, #24
 8014a76:	bd10      	pop	{r4, pc}
 8014a78:	20001a90 	.word	0x20001a90

08014a7c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8014a7c:	b500      	push	{lr}
 8014a7e:	b087      	sub	sp, #28
  uint8_t read_value = 0;
 8014a80:	aa06      	add	r2, sp, #24
 8014a82:	2300      	movs	r3, #0
 8014a84:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1, 1000);
 8014a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a8c:	9302      	str	r3, [sp, #8]
 8014a8e:	2301      	movs	r3, #1
 8014a90:	9301      	str	r3, [sp, #4]
 8014a92:	9200      	str	r2, [sp, #0]
 8014a94:	460a      	mov	r2, r1
 8014a96:	4601      	mov	r1, r0
 8014a98:	4803      	ldr	r0, [pc, #12]	; (8014aa8 <TS_IO_Read+0x2c>)
 8014a9a:	f7ed ff83 	bl	80029a4 <HAL_I2C_Mem_Read>
  return read_value;
}
 8014a9e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8014aa2:	b007      	add	sp, #28
 8014aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8014aa8:	20001a90 	.word	0x20001a90

08014aac <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8014aac:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8014aae:	f7ec fbd5 	bl	800125c <HAL_Delay>
}
 8014ab2:	bd08      	pop	{r3, pc}

08014ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014ab4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8014ab6:	4b0a      	ldr	r3, [pc, #40]	; (8014ae0 <HAL_MspInit+0x2c>)
 8014ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014aba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8014abe:	641a      	str	r2, [r3, #64]	; 0x40
 8014ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014ac2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8014ac6:	9200      	str	r2, [sp, #0]
 8014ac8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014ad0:	645a      	str	r2, [r3, #68]	; 0x44
 8014ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014ad8:	9301      	str	r3, [sp, #4]
 8014ada:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014adc:	b002      	add	sp, #8
 8014ade:	4770      	bx	lr
 8014ae0:	40023800 	.word	0x40023800

08014ae4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014ae4:	4770      	bx	lr

08014ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014ae6:	e7fe      	b.n	8014ae6 <HardFault_Handler>

08014ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014ae8:	e7fe      	b.n	8014ae8 <MemManage_Handler>

08014aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014aea:	e7fe      	b.n	8014aea <BusFault_Handler>

08014aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014aec:	e7fe      	b.n	8014aec <UsageFault_Handler>

08014aee <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014aee:	4770      	bx	lr

08014af0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014af0:	4770      	bx	lr

08014af2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014af2:	4770      	bx	lr

08014af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014af4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014af6:	f7ec fb9f 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014afa:	bd08      	pop	{r3, pc}

08014afc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8014afc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 8014afe:	2304      	movs	r3, #4
 8014b00:	4a04      	ldr	r2, [pc, #16]	; (8014b14 <EXTI0_IRQHandler+0x18>)
 8014b02:	4905      	ldr	r1, [pc, #20]	; (8014b18 <EXTI0_IRQHandler+0x1c>)
 8014b04:	4805      	ldr	r0, [pc, #20]	; (8014b1c <EXTI0_IRQHandler+0x20>)
 8014b06:	f7f1 fb85 	bl	8006214 <HAL_SPI_TransmitReceive_IT>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8014b0a:	2001      	movs	r0, #1
 8014b0c:	f7ed fbe0 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8014b10:	bd08      	pop	{r3, pc}
 8014b12:	bf00      	nop
 8014b14:	20001444 	.word	0x20001444
 8014b18:	20000038 	.word	0x20000038
 8014b1c:	200182a4 	.word	0x200182a4

08014b20 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8014b20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8014b22:	2004      	movs	r0, #4
 8014b24:	f7ed fbd4 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8014b28:	bd08      	pop	{r3, pc}
	...

08014b2c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8014b2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if(button_flag & (1 << 0)) {
 8014b2e:	4b1a      	ldr	r3, [pc, #104]	; (8014b98 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8014b30:	881b      	ldrh	r3, [r3, #0]
 8014b32:	f013 0f01 	tst.w	r3, #1
 8014b36:	d015      	beq.n	8014b64 <TIM1_BRK_TIM9_IRQHandler+0x38>
		if(display.cuemode == 0) display.cuemode = 1;
 8014b38:	4a18      	ldr	r2, [pc, #96]	; (8014b9c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8014b3a:	7892      	ldrb	r2, [r2, #2]
 8014b3c:	b972      	cbnz	r2, 8014b5c <TIM1_BRK_TIM9_IRQHandler+0x30>
 8014b3e:	4a17      	ldr	r2, [pc, #92]	; (8014b9c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8014b40:	2101      	movs	r1, #1
 8014b42:	7091      	strb	r1, [r2, #2]
		else display.cuemode = 0;
		button_flag ^= (1 << 0);
 8014b44:	f083 0301 	eor.w	r3, r3, #1
 8014b48:	4a13      	ldr	r2, [pc, #76]	; (8014b98 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8014b4a:	8013      	strh	r3, [r2, #0]
	else if(button_flag & (1 << 3)) {
		if(display.quantize == 0) display.quantize = 1;
		else display.quantize = 0;
		button_flag ^= (1 << 3);
	}
	HAL_TIM_Base_Stop_IT(&htim9);
 8014b4c:	4c14      	ldr	r4, [pc, #80]	; (8014ba0 <TIM1_BRK_TIM9_IRQHandler+0x74>)
 8014b4e:	4620      	mov	r0, r4
 8014b50:	f7f1 fddc 	bl	800670c <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8014b54:	4620      	mov	r0, r4
 8014b56:	f7f1 fe36 	bl	80067c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8014b5a:	bd10      	pop	{r4, pc}
		else display.cuemode = 0;
 8014b5c:	4a0f      	ldr	r2, [pc, #60]	; (8014b9c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8014b5e:	2100      	movs	r1, #0
 8014b60:	7091      	strb	r1, [r2, #2]
 8014b62:	e7ef      	b.n	8014b44 <TIM1_BRK_TIM9_IRQHandler+0x18>
	else if(button_flag & (1 << 1)) {
 8014b64:	f013 0f02 	tst.w	r3, #2
 8014b68:	d10d      	bne.n	8014b86 <TIM1_BRK_TIM9_IRQHandler+0x5a>
	else if(button_flag & (1 << 3)) {
 8014b6a:	f013 0f08 	tst.w	r3, #8
 8014b6e:	d0ed      	beq.n	8014b4c <TIM1_BRK_TIM9_IRQHandler+0x20>
		if(display.quantize == 0) display.quantize = 1;
 8014b70:	4a0a      	ldr	r2, [pc, #40]	; (8014b9c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8014b72:	7c52      	ldrb	r2, [r2, #17]
 8014b74:	b962      	cbnz	r2, 8014b90 <TIM1_BRK_TIM9_IRQHandler+0x64>
 8014b76:	4a09      	ldr	r2, [pc, #36]	; (8014b9c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8014b78:	2101      	movs	r1, #1
 8014b7a:	7451      	strb	r1, [r2, #17]
		button_flag ^= (1 << 3);
 8014b7c:	f083 0308 	eor.w	r3, r3, #8
 8014b80:	4a05      	ldr	r2, [pc, #20]	; (8014b98 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8014b82:	8013      	strh	r3, [r2, #0]
 8014b84:	e7e2      	b.n	8014b4c <TIM1_BRK_TIM9_IRQHandler+0x20>
		button_flag ^= (1 << 1);
 8014b86:	f083 0302 	eor.w	r3, r3, #2
 8014b8a:	4a03      	ldr	r2, [pc, #12]	; (8014b98 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8014b8c:	8013      	strh	r3, [r2, #0]
 8014b8e:	e7dd      	b.n	8014b4c <TIM1_BRK_TIM9_IRQHandler+0x20>
		else display.quantize = 0;
 8014b90:	4a02      	ldr	r2, [pc, #8]	; (8014b9c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8014b92:	2100      	movs	r1, #0
 8014b94:	7451      	strb	r1, [r2, #17]
 8014b96:	e7f1      	b.n	8014b7c <TIM1_BRK_TIM9_IRQHandler+0x50>
 8014b98:	20001526 	.word	0x20001526
 8014b9c:	20001560 	.word	0x20001560
 8014ba0:	2001840c 	.word	0x2001840c

08014ba4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014ba4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
	ClearLayer();
 8014ba6:	f7fa fa9d 	bl	800f0e4 <ClearLayer>
	SetBeatGrid();
 8014baa:	f7fa fae9 	bl	800f180 <SetBeatGrid>
	if(menu_mode == 0) DrawSpectrum();
 8014bae:	4b0b      	ldr	r3, [pc, #44]	; (8014bdc <TIM4_IRQHandler+0x38>)
 8014bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8014bb4:	b173      	cbz	r3, 8014bd4 <TIM4_IRQHandler+0x30>
	if(menu_mode != 3) 	DrawLowSpectrum();
 8014bb6:	4b09      	ldr	r3, [pc, #36]	; (8014bdc <TIM4_IRQHandler+0x38>)
 8014bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8014bbc:	2b03      	cmp	r3, #3
 8014bbe:	d001      	beq.n	8014bc4 <TIM4_IRQHandler+0x20>
 8014bc0:	f7fb f846 	bl	800fc50 <DrawLowSpectrum>
	DrawMenu();
 8014bc4:	f7fc fafe 	bl	80111c4 <DrawMenu>
	//DrawFrequencySpectrum();
	ChangeLayers();
 8014bc8:	f7fa fab2 	bl	800f130 <ChangeLayers>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014bcc:	4804      	ldr	r0, [pc, #16]	; (8014be0 <TIM4_IRQHandler+0x3c>)
 8014bce:	f7f1 fdfa 	bl	80067c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8014bd2:	bd08      	pop	{r3, pc}
	if(menu_mode == 0) DrawSpectrum();
 8014bd4:	f7fb fece 	bl	8010974 <DrawSpectrum>
 8014bd8:	e7ed      	b.n	8014bb6 <TIM4_IRQHandler+0x12>
 8014bda:	bf00      	nop
 8014bdc:	200007c8 	.word	0x200007c8
 8014be0:	2001834c 	.word	0x2001834c

08014be4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8014be4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8014be6:	4802      	ldr	r0, [pc, #8]	; (8014bf0 <SPI2_IRQHandler+0xc>)
 8014be8:	f7f1 fc70 	bl	80064cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8014bec:	bd08      	pop	{r3, pc}
 8014bee:	bf00      	nop
 8014bf0:	200182a4 	.word	0x200182a4
 8014bf4:	00000000 	.word	0x00000000

08014bf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8014bf8:	b510      	push	{r4, lr}
 8014bfa:	b082      	sub	sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	BSP_TS_GetState(&ts_State);
 8014bfc:	4cb0      	ldr	r4, [pc, #704]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f7ff fe0e 	bl	8014820 <BSP_TS_GetState>
	if(ts_State.touchDetected == 1) {
 8014c04:	7823      	ldrb	r3, [r4, #0]
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d00a      	beq.n	8014c20 <EXTI15_10_IRQHandler+0x28>
				if(stretch > 4) stretch = 4;
			}
			touch_count++;
		}
	}*/
	BSP_TS_ResetTouchData(&ts_State);
 8014c0a:	48ad      	ldr	r0, [pc, #692]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014c0c:	f7ff fefc 	bl	8014a08 <BSP_TS_ResetTouchData>
	BSP_TS_ITClear();
 8014c10:	f7ff feee 	bl	80149f0 <BSP_TS_ITClear>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8014c14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014c18:	f7ed fb5a 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8014c1c:	b002      	add	sp, #8
 8014c1e:	bd10      	pop	{r4, pc}
		if((ts_State.touchX[0] > 40) && (ts_State.touchX[0] < 440) && (ts_State.touchY[0] > 220) && (ts_State.touchY[0] < 260)) {
 8014c20:	8863      	ldrh	r3, [r4, #2]
 8014c22:	f1a3 0229 	sub.w	r2, r3, #41	; 0x29
 8014c26:	b292      	uxth	r2, r2
 8014c28:	f5b2 7fc7 	cmp.w	r2, #398	; 0x18e
 8014c2c:	d805      	bhi.n	8014c3a <EXTI15_10_IRQHandler+0x42>
 8014c2e:	89a2      	ldrh	r2, [r4, #12]
 8014c30:	2adc      	cmp	r2, #220	; 0xdc
 8014c32:	d902      	bls.n	8014c3a <EXTI15_10_IRQHandler+0x42>
 8014c34:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8014c38:	d366      	bcc.n	8014d08 <EXTI15_10_IRQHandler+0x110>
		else if((ts_State.touchY[0] > 20) && (ts_State.touchY[0] < 165)) {
 8014c3a:	4aa1      	ldr	r2, [pc, #644]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014c3c:	8991      	ldrh	r1, [r2, #12]
 8014c3e:	f1a1 0215 	sub.w	r2, r1, #21
 8014c42:	b292      	uxth	r2, r2
 8014c44:	2a8f      	cmp	r2, #143	; 0x8f
 8014c46:	f200 81d0 	bhi.w	8014fea <EXTI15_10_IRQHandler+0x3f2>
			if(menu_mode == 0) {
 8014c4a:	4b9e      	ldr	r3, [pc, #632]	; (8014ec4 <EXTI15_10_IRQHandler+0x2cc>)
 8014c4c:	f993 3000 	ldrsb.w	r3, [r3]
 8014c50:	b923      	cbnz	r3, 8014c5c <EXTI15_10_IRQHandler+0x64>
				if((ts_State.touchY[0] > 75) && (ts_State.touchY[0] < 165)) {
 8014c52:	394c      	subs	r1, #76	; 0x4c
 8014c54:	b289      	uxth	r1, r1
 8014c56:	2958      	cmp	r1, #88	; 0x58
 8014c58:	f240 8094 	bls.w	8014d84 <EXTI15_10_IRQHandler+0x18c>
			if(menu_mode == 1) {
 8014c5c:	4b99      	ldr	r3, [pc, #612]	; (8014ec4 <EXTI15_10_IRQHandler+0x2cc>)
 8014c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	f000 80f1 	beq.w	8014e4a <EXTI15_10_IRQHandler+0x252>
			if(menu_mode == 2) {
 8014c68:	4b96      	ldr	r3, [pc, #600]	; (8014ec4 <EXTI15_10_IRQHandler+0x2cc>)
 8014c6a:	f993 3000 	ldrsb.w	r3, [r3]
 8014c6e:	2b02      	cmp	r3, #2
 8014c70:	d1cb      	bne.n	8014c0a <EXTI15_10_IRQHandler+0x12>
				touch_count = 0;
 8014c72:	4b95      	ldr	r3, [pc, #596]	; (8014ec8 <EXTI15_10_IRQHandler+0x2d0>)
 8014c74:	2200      	movs	r2, #0
 8014c76:	701a      	strb	r2, [r3, #0]
				if((ts_State.touchX[0] >= 40) && (ts_State.touchX[0] <= 440)) {
 8014c78:	4b91      	ldr	r3, [pc, #580]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014c7a:	885a      	ldrh	r2, [r3, #2]
 8014c7c:	f1a2 0328 	sub.w	r3, r2, #40	; 0x28
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8014c86:	d8c0      	bhi.n	8014c0a <EXTI15_10_IRQHandler+0x12>
					if((ts_State.touchY[0] > 40) && (ts_State.touchY[0] < 60))	{
 8014c88:	4b8d      	ldr	r3, [pc, #564]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014c8a:	899b      	ldrh	r3, [r3, #12]
 8014c8c:	3b29      	subs	r3, #41	; 0x29
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	2b12      	cmp	r3, #18
 8014c92:	f240 8191 	bls.w	8014fb8 <EXTI15_10_IRQHandler+0x3c0>
					if((ts_State.touchY[0] > 80) && (ts_State.touchY[0] < 100)) {
 8014c96:	4b8a      	ldr	r3, [pc, #552]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014c98:	899c      	ldrh	r4, [r3, #12]
 8014c9a:	f1a4 0351 	sub.w	r3, r4, #81	; 0x51
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	2b12      	cmp	r3, #18
 8014ca2:	d817      	bhi.n	8014cd4 <EXTI15_10_IRQHandler+0xdc>
						jog_sensitivity = 0.01 * (float)(ts_State.touchX[0]-40) / 400;
 8014ca4:	4b86      	ldr	r3, [pc, #536]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014ca6:	8858      	ldrh	r0, [r3, #2]
 8014ca8:	3828      	subs	r0, #40	; 0x28
 8014caa:	ee07 0a90 	vmov	s15, r0
 8014cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014cb2:	ee17 0a90 	vmov	r0, s15
 8014cb6:	f7eb fc6f 	bl	8000598 <__aeabi_f2d>
 8014cba:	a37d      	add	r3, pc, #500	; (adr r3, 8014eb0 <EXTI15_10_IRQHandler+0x2b8>)
 8014cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc0:	f7eb fcc2 	bl	8000648 <__aeabi_dmul>
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	4b81      	ldr	r3, [pc, #516]	; (8014ecc <EXTI15_10_IRQHandler+0x2d4>)
 8014cc8:	f7eb fde8 	bl	800089c <__aeabi_ddiv>
 8014ccc:	f7eb ff76 	bl	8000bbc <__aeabi_d2f>
 8014cd0:	4b7f      	ldr	r3, [pc, #508]	; (8014ed0 <EXTI15_10_IRQHandler+0x2d8>)
 8014cd2:	6018      	str	r0, [r3, #0]
					if((ts_State.touchY[0] > 120) && (ts_State.touchY[0] < 140)) {
 8014cd4:	3c79      	subs	r4, #121	; 0x79
 8014cd6:	b2a4      	uxth	r4, r4
 8014cd8:	2c12      	cmp	r4, #18
 8014cda:	d896      	bhi.n	8014c0a <EXTI15_10_IRQHandler+0x12>
						acue_sensitivity = 250 * (float)(ts_State.touchX[0]-40) / 400;
 8014cdc:	4b78      	ldr	r3, [pc, #480]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014cde:	885b      	ldrh	r3, [r3, #2]
 8014ce0:	3b28      	subs	r3, #40	; 0x28
 8014ce2:	ee07 3a90 	vmov	s15, r3
 8014ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014cea:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8014ed4 <EXTI15_10_IRQHandler+0x2dc>
 8014cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cf2:	eddf 6a79 	vldr	s13, [pc, #484]	; 8014ed8 <EXTI15_10_IRQHandler+0x2e0>
 8014cf6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014cfa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014cfe:	ee17 3a90 	vmov	r3, s15
 8014d02:	4a76      	ldr	r2, [pc, #472]	; (8014edc <EXTI15_10_IRQHandler+0x2e4>)
 8014d04:	7013      	strb	r3, [r2, #0]
 8014d06:	e780      	b.n	8014c0a <EXTI15_10_IRQHandler+0x12>
			touch_count = 0;
 8014d08:	4a6f      	ldr	r2, [pc, #444]	; (8014ec8 <EXTI15_10_IRQHandler+0x2d0>)
 8014d0a:	2100      	movs	r1, #0
 8014d0c:	7011      	strb	r1, [r2, #0]
			GoToPosition(((float)ts_State.touchX[0] - 40) * (float)rekordbox.spectrum_size / rekordbox.lowp_spectrum_size);
 8014d0e:	ee07 3a90 	vmov	s15, r3
 8014d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d16:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8014ee0 <EXTI15_10_IRQHandler+0x2e8>
 8014d1a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014d1e:	4b71      	ldr	r3, [pc, #452]	; (8014ee4 <EXTI15_10_IRQHandler+0x2ec>)
 8014d20:	f242 424c 	movw	r2, #9292	; 0x244c
 8014d24:	589a      	ldr	r2, [r3, r2]
 8014d26:	ee07 2a90 	vmov	s15, r2
 8014d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d32:	f242 4248 	movw	r2, #9288	; 0x2448
 8014d36:	589b      	ldr	r3, [r3, r2]
 8014d38:	ee07 3a10 	vmov	s14, r3
 8014d3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014d40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8014d44:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8014d48:	ee17 0a90 	vmov	r0, s15
 8014d4c:	f001 fa1e 	bl	801618c <GoToPosition>
			if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 8014d50:	4b65      	ldr	r3, [pc, #404]	; (8014ee8 <EXTI15_10_IRQHandler+0x2f0>)
 8014d52:	781b      	ldrb	r3, [r3, #0]
 8014d54:	b173      	cbz	r3, 8014d74 <EXTI15_10_IRQHandler+0x17c>
				GetTrackTime();
 8014d56:	f001 fad3 	bl	8016300 <GetTrackTime>
				if(spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 8014d5a:	4b64      	ldr	r3, [pc, #400]	; (8014eec <EXTI15_10_IRQHandler+0x2f4>)
 8014d5c:	789b      	ldrb	r3, [r3, #2]
 8014d5e:	f013 0f01 	tst.w	r3, #1
 8014d62:	d00a      	beq.n	8014d7a <EXTI15_10_IRQHandler+0x182>
 8014d64:	f043 0302 	orr.w	r3, r3, #2
 8014d68:	4a60      	ldr	r2, [pc, #384]	; (8014eec <EXTI15_10_IRQHandler+0x2f4>)
 8014d6a:	7093      	strb	r3, [r2, #2]
				trak.state = SETCUE;
 8014d6c:	4b5e      	ldr	r3, [pc, #376]	; (8014ee8 <EXTI15_10_IRQHandler+0x2f0>)
 8014d6e:	2202      	movs	r2, #2
 8014d70:	701a      	strb	r2, [r3, #0]
 8014d72:	e74a      	b.n	8014c0a <EXTI15_10_IRQHandler+0x12>
			if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 8014d74:	f7ff fb2a 	bl	80143cc <BSP_AUDIO_OUT_Resume>
 8014d78:	e747      	b.n	8014c0a <EXTI15_10_IRQHandler+0x12>
				else spi_tx[2] &= ~(1 << 1);
 8014d7a:	f023 0302 	bic.w	r3, r3, #2
 8014d7e:	4a5b      	ldr	r2, [pc, #364]	; (8014eec <EXTI15_10_IRQHandler+0x2f4>)
 8014d80:	7093      	strb	r3, [r2, #2]
 8014d82:	e7f3      	b.n	8014d6c <EXTI15_10_IRQHandler+0x174>
					HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8014d84:	2028      	movs	r0, #40	; 0x28
 8014d86:	f7ec faf7 	bl	8001378 <HAL_NVIC_DisableIRQ>
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8014d8a:	4859      	ldr	r0, [pc, #356]	; (8014ef0 <EXTI15_10_IRQHandler+0x2f8>)
 8014d8c:	6803      	ldr	r3, [r0, #0]
 8014d8e:	f06f 0201 	mvn.w	r2, #1
 8014d92:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8014d94:	2400      	movs	r4, #0
 8014d96:	625c      	str	r4, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 8014d98:	f7f1 fc60 	bl	800665c <HAL_TIM_Base_Start_IT>
					touch_count = 0;
 8014d9c:	4b4a      	ldr	r3, [pc, #296]	; (8014ec8 <EXTI15_10_IRQHandler+0x2d0>)
 8014d9e:	701c      	strb	r4, [r3, #0]
					if(ts_State.touchX[0] > 280) {
 8014da0:	4b47      	ldr	r3, [pc, #284]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014da2:	885b      	ldrh	r3, [r3, #2]
 8014da4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8014da8:	d926      	bls.n	8014df8 <EXTI15_10_IRQHandler+0x200>
						if(stretch > 1) stretch--;
 8014daa:	4b52      	ldr	r3, [pc, #328]	; (8014ef4 <EXTI15_10_IRQHandler+0x2fc>)
 8014dac:	edd3 7a00 	vldr	s15, [r3]
 8014db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dbc:	dd14      	ble.n	8014de8 <EXTI15_10_IRQHandler+0x1f0>
 8014dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014dc2:	edc3 7a00 	vstr	s15, [r3]
						if(stretch < 0.1) stretch = 0.125;
 8014dc6:	4b4b      	ldr	r3, [pc, #300]	; (8014ef4 <EXTI15_10_IRQHandler+0x2fc>)
 8014dc8:	6818      	ldr	r0, [r3, #0]
 8014dca:	f7eb fbe5 	bl	8000598 <__aeabi_f2d>
 8014dce:	a33a      	add	r3, pc, #232	; (adr r3, 8014eb8 <EXTI15_10_IRQHandler+0x2c0>)
 8014dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd4:	f7eb feaa 	bl	8000b2c <__aeabi_dcmplt>
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	f43f af3f 	beq.w	8014c5c <EXTI15_10_IRQHandler+0x64>
 8014dde:	4b45      	ldr	r3, [pc, #276]	; (8014ef4 <EXTI15_10_IRQHandler+0x2fc>)
 8014de0:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8014de4:	601a      	str	r2, [r3, #0]
 8014de6:	e739      	b.n	8014c5c <EXTI15_10_IRQHandler+0x64>
						else stretch /= 2;
 8014de8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014df0:	4b40      	ldr	r3, [pc, #256]	; (8014ef4 <EXTI15_10_IRQHandler+0x2fc>)
 8014df2:	edc3 7a00 	vstr	s15, [r3]
 8014df6:	e7e6      	b.n	8014dc6 <EXTI15_10_IRQHandler+0x1ce>
					else if(ts_State.touchX[0] < 200) {
 8014df8:	2bc7      	cmp	r3, #199	; 0xc7
 8014dfa:	d821      	bhi.n	8014e40 <EXTI15_10_IRQHandler+0x248>
						if(stretch >= 1) stretch++;
 8014dfc:	4b3d      	ldr	r3, [pc, #244]	; (8014ef4 <EXTI15_10_IRQHandler+0x2fc>)
 8014dfe:	edd3 7a00 	vldr	s15, [r3]
 8014e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e0e:	db11      	blt.n	8014e34 <EXTI15_10_IRQHandler+0x23c>
 8014e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e14:	edc3 7a00 	vstr	s15, [r3]
						if(stretch > 4) stretch = 4;
 8014e18:	4b36      	ldr	r3, [pc, #216]	; (8014ef4 <EXTI15_10_IRQHandler+0x2fc>)
 8014e1a:	ed93 7a00 	vldr	s14, [r3]
 8014e1e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e2a:	f77f af17 	ble.w	8014c5c <EXTI15_10_IRQHandler+0x64>
 8014e2e:	edc3 7a00 	vstr	s15, [r3]
 8014e32:	e713      	b.n	8014c5c <EXTI15_10_IRQHandler+0x64>
						else stretch *= 2;
 8014e34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014e38:	4b2e      	ldr	r3, [pc, #184]	; (8014ef4 <EXTI15_10_IRQHandler+0x2fc>)
 8014e3a:	edc3 7a00 	vstr	s15, [r3]
 8014e3e:	e7eb      	b.n	8014e18 <EXTI15_10_IRQHandler+0x220>
					else stretch = 1;
 8014e40:	4b2c      	ldr	r3, [pc, #176]	; (8014ef4 <EXTI15_10_IRQHandler+0x2fc>)
 8014e42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014e46:	601a      	str	r2, [r3, #0]
 8014e48:	e708      	b.n	8014c5c <EXTI15_10_IRQHandler+0x64>
				if(touch_count == 0) {
 8014e4a:	4b1f      	ldr	r3, [pc, #124]	; (8014ec8 <EXTI15_10_IRQHandler+0x2d0>)
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d05e      	beq.n	8014f10 <EXTI15_10_IRQHandler+0x318>
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8014e52:	4b27      	ldr	r3, [pc, #156]	; (8014ef0 <EXTI15_10_IRQHandler+0x2f8>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2200      	movs	r2, #0
 8014e58:	625a      	str	r2, [r3, #36]	; 0x24
					str_offset = ts_State.touchX[0] - prev_x;
 8014e5a:	4b19      	ldr	r3, [pc, #100]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014e5c:	885b      	ldrh	r3, [r3, #2]
 8014e5e:	4a26      	ldr	r2, [pc, #152]	; (8014ef8 <EXTI15_10_IRQHandler+0x300>)
 8014e60:	8812      	ldrh	r2, [r2, #0]
 8014e62:	1a9b      	subs	r3, r3, r2
 8014e64:	4a25      	ldr	r2, [pc, #148]	; (8014efc <EXTI15_10_IRQHandler+0x304>)
 8014e66:	6013      	str	r3, [r2, #0]
				touch_count++;
 8014e68:	4a17      	ldr	r2, [pc, #92]	; (8014ec8 <EXTI15_10_IRQHandler+0x2d0>)
 8014e6a:	7813      	ldrb	r3, [r2, #0]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	7013      	strb	r3, [r2, #0]
				if((String_number != ts_State.touchY[0] / 20 - 1)) {
 8014e70:	4b13      	ldr	r3, [pc, #76]	; (8014ec0 <EXTI15_10_IRQHandler+0x2c8>)
 8014e72:	899b      	ldrh	r3, [r3, #12]
 8014e74:	4a22      	ldr	r2, [pc, #136]	; (8014f00 <EXTI15_10_IRQHandler+0x308>)
 8014e76:	fba2 2303 	umull	r2, r3, r2, r3
 8014e7a:	091b      	lsrs	r3, r3, #4
 8014e7c:	3b01      	subs	r3, #1
 8014e7e:	4a21      	ldr	r2, [pc, #132]	; (8014f04 <EXTI15_10_IRQHandler+0x30c>)
 8014e80:	6812      	ldr	r2, [r2, #0]
 8014e82:	4293      	cmp	r3, r2
 8014e84:	d071      	beq.n	8014f6a <EXTI15_10_IRQHandler+0x372>
					if(Total_tracks > 7) {
 8014e86:	4920      	ldr	r1, [pc, #128]	; (8014f08 <EXTI15_10_IRQHandler+0x310>)
 8014e88:	8809      	ldrh	r1, [r1, #0]
 8014e8a:	2907      	cmp	r1, #7
 8014e8c:	d964      	bls.n	8014f58 <EXTI15_10_IRQHandler+0x360>
						if(String_number > (ts_State.touchY[0] / 20 - 1)) {
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	da58      	bge.n	8014f44 <EXTI15_10_IRQHandler+0x34c>
							str_increment += abs((ts_State.touchY[0] / 20 - 1) - String_number);
 8014e92:	1a9b      	subs	r3, r3, r2
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	bfb8      	it	lt
 8014e98:	425b      	neglt	r3, r3
 8014e9a:	4a1c      	ldr	r2, [pc, #112]	; (8014f0c <EXTI15_10_IRQHandler+0x314>)
 8014e9c:	6810      	ldr	r0, [r2, #0]
 8014e9e:	4403      	add	r3, r0
 8014ea0:	6013      	str	r3, [r2, #0]
							if(str_increment > Total_tracks - 7) str_increment = Total_tracks - 7;
 8014ea2:	3907      	subs	r1, #7
 8014ea4:	428b      	cmp	r3, r1
 8014ea6:	dd57      	ble.n	8014f58 <EXTI15_10_IRQHandler+0x360>
 8014ea8:	6011      	str	r1, [r2, #0]
 8014eaa:	e055      	b.n	8014f58 <EXTI15_10_IRQHandler+0x360>
 8014eac:	f3af 8000 	nop.w
 8014eb0:	47ae147b 	.word	0x47ae147b
 8014eb4:	3f847ae1 	.word	0x3f847ae1
 8014eb8:	9999999a 	.word	0x9999999a
 8014ebc:	3fb99999 	.word	0x3fb99999
 8014ec0:	20007f24 	.word	0x20007f24
 8014ec4:	200007c8 	.word	0x200007c8
 8014ec8:	20001540 	.word	0x20001540
 8014ecc:	40790000 	.word	0x40790000
 8014ed0:	20000080 	.word	0x20000080
 8014ed4:	437a0000 	.word	0x437a0000
 8014ed8:	43c80000 	.word	0x43c80000
 8014edc:	20000034 	.word	0x20000034
 8014ee0:	42200000 	.word	0x42200000
 8014ee4:	200153a4 	.word	0x200153a4
 8014ee8:	20007f50 	.word	0x20007f50
 8014eec:	20000038 	.word	0x20000038
 8014ef0:	200183cc 	.word	0x200183cc
 8014ef4:	20000008 	.word	0x20000008
 8014ef8:	20001530 	.word	0x20001530
 8014efc:	2000153c 	.word	0x2000153c
 8014f00:	cccccccd 	.word	0xcccccccd
 8014f04:	2000007c 	.word	0x2000007c
 8014f08:	200007dc 	.word	0x200007dc
 8014f0c:	20001538 	.word	0x20001538
					str_offset = 0;
 8014f10:	2200      	movs	r2, #0
 8014f12:	4b62      	ldr	r3, [pc, #392]	; (801509c <EXTI15_10_IRQHandler+0x4a4>)
 8014f14:	601a      	str	r2, [r3, #0]
					prev_x = ts_State.touchX[0];
 8014f16:	4b62      	ldr	r3, [pc, #392]	; (80150a0 <EXTI15_10_IRQHandler+0x4a8>)
 8014f18:	8858      	ldrh	r0, [r3, #2]
 8014f1a:	4962      	ldr	r1, [pc, #392]	; (80150a4 <EXTI15_10_IRQHandler+0x4ac>)
 8014f1c:	8008      	strh	r0, [r1, #0]
					String_number = ts_State.touchY[0] / 20 - 1;
 8014f1e:	899b      	ldrh	r3, [r3, #12]
 8014f20:	4961      	ldr	r1, [pc, #388]	; (80150a8 <EXTI15_10_IRQHandler+0x4b0>)
 8014f22:	fba1 1303 	umull	r1, r3, r1, r3
 8014f26:	091b      	lsrs	r3, r3, #4
 8014f28:	3b01      	subs	r3, #1
 8014f2a:	4960      	ldr	r1, [pc, #384]	; (80150ac <EXTI15_10_IRQHandler+0x4b4>)
 8014f2c:	600b      	str	r3, [r1, #0]
					Mark_number = String_number;
 8014f2e:	4960      	ldr	r1, [pc, #384]	; (80150b0 <EXTI15_10_IRQHandler+0x4b8>)
 8014f30:	600b      	str	r3, [r1, #0]
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8014f32:	4860      	ldr	r0, [pc, #384]	; (80150b4 <EXTI15_10_IRQHandler+0x4bc>)
 8014f34:	6803      	ldr	r3, [r0, #0]
 8014f36:	f06f 0101 	mvn.w	r1, #1
 8014f3a:	6119      	str	r1, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8014f3c:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 8014f3e:	f7f1 fb8d 	bl	800665c <HAL_TIM_Base_Start_IT>
 8014f42:	e791      	b.n	8014e68 <EXTI15_10_IRQHandler+0x270>
							str_increment -= abs((ts_State.touchY[0] / 20 - 1) - String_number);
 8014f44:	1a9b      	subs	r3, r3, r2
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	bfb8      	it	lt
 8014f4a:	425b      	neglt	r3, r3
 8014f4c:	495a      	ldr	r1, [pc, #360]	; (80150b8 <EXTI15_10_IRQHandler+0x4c0>)
 8014f4e:	680a      	ldr	r2, [r1, #0]
 8014f50:	1ad3      	subs	r3, r2, r3
 8014f52:	600b      	str	r3, [r1, #0]
							if(str_increment < 0) str_increment = 0;
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	db2c      	blt.n	8014fb2 <EXTI15_10_IRQHandler+0x3ba>
					str_offset = 0;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	4a50      	ldr	r2, [pc, #320]	; (801509c <EXTI15_10_IRQHandler+0x4a4>)
 8014f5c:	6013      	str	r3, [r2, #0]
					touch_count = 0;
 8014f5e:	4a57      	ldr	r2, [pc, #348]	; (80150bc <EXTI15_10_IRQHandler+0x4c4>)
 8014f60:	7013      	strb	r3, [r2, #0]
					String_number = -1;
 8014f62:	4b52      	ldr	r3, [pc, #328]	; (80150ac <EXTI15_10_IRQHandler+0x4b4>)
 8014f64:	f04f 32ff 	mov.w	r2, #4294967295
 8014f68:	601a      	str	r2, [r3, #0]
				if(ts_State.touchX[0] > 380) {
 8014f6a:	4b4d      	ldr	r3, [pc, #308]	; (80150a0 <EXTI15_10_IRQHandler+0x4a8>)
 8014f6c:	885b      	ldrh	r3, [r3, #2]
 8014f6e:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8014f72:	f67f ae79 	bls.w	8014c68 <EXTI15_10_IRQHandler+0x70>
					str_offset = 0;
 8014f76:	2300      	movs	r3, #0
 8014f78:	4a48      	ldr	r2, [pc, #288]	; (801509c <EXTI15_10_IRQHandler+0x4a4>)
 8014f7a:	6013      	str	r3, [r2, #0]
					touch_count = 0;
 8014f7c:	4a4f      	ldr	r2, [pc, #316]	; (80150bc <EXTI15_10_IRQHandler+0x4c4>)
 8014f7e:	7013      	strb	r3, [r2, #0]
					bOutOfData = 1;
 8014f80:	4b4f      	ldr	r3, [pc, #316]	; (80150c0 <EXTI15_10_IRQHandler+0x4c8>)
 8014f82:	2201      	movs	r2, #1
 8014f84:	601a      	str	r2, [r3, #0]
					unDmaBufMode = 3;
 8014f86:	4b4f      	ldr	r3, [pc, #316]	; (80150c4 <EXTI15_10_IRQHandler+0x4cc>)
 8014f88:	2203      	movs	r2, #3
 8014f8a:	601a      	str	r2, [r3, #0]
					Track_number = String_number + str_increment;
 8014f8c:	4b47      	ldr	r3, [pc, #284]	; (80150ac <EXTI15_10_IRQHandler+0x4b4>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	4a49      	ldr	r2, [pc, #292]	; (80150b8 <EXTI15_10_IRQHandler+0x4c0>)
 8014f92:	6812      	ldr	r2, [r2, #0]
 8014f94:	4413      	add	r3, r2
 8014f96:	4a4c      	ldr	r2, [pc, #304]	; (80150c8 <EXTI15_10_IRQHandler+0x4d0>)
 8014f98:	6013      	str	r3, [r2, #0]
					if(Track_number >= Total_tracks) Track_number = 0;
 8014f9a:	4a4c      	ldr	r2, [pc, #304]	; (80150cc <EXTI15_10_IRQHandler+0x4d4>)
 8014f9c:	8812      	ldrh	r2, [r2, #0]
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	db02      	blt.n	8014fa8 <EXTI15_10_IRQHandler+0x3b0>
 8014fa2:	4b49      	ldr	r3, [pc, #292]	; (80150c8 <EXTI15_10_IRQHandler+0x4d0>)
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	601a      	str	r2, [r3, #0]
					String_number = -1;
 8014fa8:	4b40      	ldr	r3, [pc, #256]	; (80150ac <EXTI15_10_IRQHandler+0x4b4>)
 8014faa:	f04f 32ff 	mov.w	r2, #4294967295
 8014fae:	601a      	str	r2, [r3, #0]
 8014fb0:	e65a      	b.n	8014c68 <EXTI15_10_IRQHandler+0x70>
							if(str_increment < 0) str_increment = 0;
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	600a      	str	r2, [r1, #0]
 8014fb6:	e7cf      	b.n	8014f58 <EXTI15_10_IRQHandler+0x360>
						volume = 100 * (float)(ts_State.touchX[0]-40) / 400;
 8014fb8:	f1a2 0328 	sub.w	r3, r2, #40	; 0x28
 8014fbc:	ee07 3a90 	vmov	s15, r3
 8014fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fc4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80150d0 <EXTI15_10_IRQHandler+0x4d8>
 8014fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fcc:	eddf 6a41 	vldr	s13, [pc, #260]	; 80150d4 <EXTI15_10_IRQHandler+0x4dc>
 8014fd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014fd4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014fd8:	edcd 7a01 	vstr	s15, [sp, #4]
 8014fdc:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8014fe0:	4b3d      	ldr	r3, [pc, #244]	; (80150d8 <EXTI15_10_IRQHandler+0x4e0>)
 8014fe2:	7018      	strb	r0, [r3, #0]
						BSP_AUDIO_OUT_SetVolume(volume);
 8014fe4:	f7ff fa16 	bl	8014414 <BSP_AUDIO_OUT_SetVolume>
 8014fe8:	e655      	b.n	8014c96 <EXTI15_10_IRQHandler+0x9e>
		else if((ts_State.touchY[0] > 0) && (ts_State.touchY[0] < 20)) {
 8014fea:	1e4a      	subs	r2, r1, #1
 8014fec:	b292      	uxth	r2, r2
 8014fee:	2a12      	cmp	r2, #18
 8014ff0:	d90b      	bls.n	801500a <EXTI15_10_IRQHandler+0x412>
		else if((ts_State.touchX[0] > 80) && (ts_State.touchX[0] < 280) && (ts_State.touchY[0] > 180) && (ts_State.touchY[0] < 210)) {
 8014ff2:	3b51      	subs	r3, #81	; 0x51
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	2bc6      	cmp	r3, #198	; 0xc6
 8014ff8:	d803      	bhi.n	8015002 <EXTI15_10_IRQHandler+0x40a>
 8014ffa:	29b4      	cmp	r1, #180	; 0xb4
 8014ffc:	d901      	bls.n	8015002 <EXTI15_10_IRQHandler+0x40a>
 8014ffe:	29d1      	cmp	r1, #209	; 0xd1
 8015000:	d931      	bls.n	8015066 <EXTI15_10_IRQHandler+0x46e>
			touch_count = 0;
 8015002:	4b2e      	ldr	r3, [pc, #184]	; (80150bc <EXTI15_10_IRQHandler+0x4c4>)
 8015004:	2200      	movs	r2, #0
 8015006:	701a      	strb	r2, [r3, #0]
 8015008:	e5ff      	b.n	8014c0a <EXTI15_10_IRQHandler+0x12>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801500a:	2028      	movs	r0, #40	; 0x28
 801500c:	f7ec f9b4 	bl	8001378 <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8015010:	4828      	ldr	r0, [pc, #160]	; (80150b4 <EXTI15_10_IRQHandler+0x4bc>)
 8015012:	6803      	ldr	r3, [r0, #0]
 8015014:	f06f 0201 	mvn.w	r2, #1
 8015018:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 801501a:	2400      	movs	r4, #0
 801501c:	625c      	str	r4, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 801501e:	f7f1 fb1d 	bl	800665c <HAL_TIM_Base_Start_IT>
			touch_count = 0;
 8015022:	4b26      	ldr	r3, [pc, #152]	; (80150bc <EXTI15_10_IRQHandler+0x4c4>)
 8015024:	701c      	strb	r4, [r3, #0]
			if(ts_State.touchX[0] < 200) {
 8015026:	4b1e      	ldr	r3, [pc, #120]	; (80150a0 <EXTI15_10_IRQHandler+0x4a8>)
 8015028:	885b      	ldrh	r3, [r3, #2]
 801502a:	2bc7      	cmp	r3, #199	; 0xc7
 801502c:	d80b      	bhi.n	8015046 <EXTI15_10_IRQHandler+0x44e>
				menu_mode--;
 801502e:	4a2b      	ldr	r2, [pc, #172]	; (80150dc <EXTI15_10_IRQHandler+0x4e4>)
 8015030:	7813      	ldrb	r3, [r2, #0]
 8015032:	3b01      	subs	r3, #1
 8015034:	b25b      	sxtb	r3, r3
 8015036:	7013      	strb	r3, [r2, #0]
				if(menu_mode < 0) menu_mode = 2;
 8015038:	42a3      	cmp	r3, r4
 801503a:	f6bf ade6 	bge.w	8014c0a <EXTI15_10_IRQHandler+0x12>
 801503e:	4613      	mov	r3, r2
 8015040:	2202      	movs	r2, #2
 8015042:	701a      	strb	r2, [r3, #0]
 8015044:	e5e1      	b.n	8014c0a <EXTI15_10_IRQHandler+0x12>
			else if(ts_State.touchX[0] > 280) {
 8015046:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801504a:	f67f adde 	bls.w	8014c0a <EXTI15_10_IRQHandler+0x12>
				menu_mode++;
 801504e:	4a23      	ldr	r2, [pc, #140]	; (80150dc <EXTI15_10_IRQHandler+0x4e4>)
 8015050:	7813      	ldrb	r3, [r2, #0]
 8015052:	3301      	adds	r3, #1
 8015054:	b25b      	sxtb	r3, r3
 8015056:	7013      	strb	r3, [r2, #0]
				if(menu_mode > 2) menu_mode = 0;
 8015058:	2b02      	cmp	r3, #2
 801505a:	f77f add6 	ble.w	8014c0a <EXTI15_10_IRQHandler+0x12>
 801505e:	4613      	mov	r3, r2
 8015060:	2200      	movs	r2, #0
 8015062:	701a      	strb	r2, [r3, #0]
 8015064:	e5d1      	b.n	8014c0a <EXTI15_10_IRQHandler+0x12>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8015066:	2028      	movs	r0, #40	; 0x28
 8015068:	f7ec f986 	bl	8001378 <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801506c:	4811      	ldr	r0, [pc, #68]	; (80150b4 <EXTI15_10_IRQHandler+0x4bc>)
 801506e:	6803      	ldr	r3, [r0, #0]
 8015070:	f06f 0201 	mvn.w	r2, #1
 8015074:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8015076:	2400      	movs	r4, #0
 8015078:	625c      	str	r4, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 801507a:	f7f1 faef 	bl	800665c <HAL_TIM_Base_Start_IT>
			touch_count = 0;
 801507e:	4b0f      	ldr	r3, [pc, #60]	; (80150bc <EXTI15_10_IRQHandler+0x4c4>)
 8015080:	701c      	strb	r4, [r3, #0]
			if(display.timemode == 0) {
 8015082:	4b17      	ldr	r3, [pc, #92]	; (80150e0 <EXTI15_10_IRQHandler+0x4e8>)
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	b923      	cbnz	r3, 8015092 <EXTI15_10_IRQHandler+0x49a>
				display.timemode = 1;
 8015088:	4b15      	ldr	r3, [pc, #84]	; (80150e0 <EXTI15_10_IRQHandler+0x4e8>)
 801508a:	2201      	movs	r2, #1
 801508c:	701a      	strb	r2, [r3, #0]
				display.trackbarmode = 1;
 801508e:	711a      	strb	r2, [r3, #4]
 8015090:	e5bb      	b.n	8014c0a <EXTI15_10_IRQHandler+0x12>
				display.timemode = 0;
 8015092:	4b13      	ldr	r3, [pc, #76]	; (80150e0 <EXTI15_10_IRQHandler+0x4e8>)
 8015094:	2200      	movs	r2, #0
 8015096:	701a      	strb	r2, [r3, #0]
				display.trackbarmode = 0;
 8015098:	711a      	strb	r2, [r3, #4]
 801509a:	e5b6      	b.n	8014c0a <EXTI15_10_IRQHandler+0x12>
 801509c:	2000153c 	.word	0x2000153c
 80150a0:	20007f24 	.word	0x20007f24
 80150a4:	20001530 	.word	0x20001530
 80150a8:	cccccccd 	.word	0xcccccccd
 80150ac:	2000007c 	.word	0x2000007c
 80150b0:	20000074 	.word	0x20000074
 80150b4:	200183cc 	.word	0x200183cc
 80150b8:	20001538 	.word	0x20001538
 80150bc:	20001540 	.word	0x20001540
 80150c0:	200007e4 	.word	0x200007e4
 80150c4:	2000144c 	.word	0x2000144c
 80150c8:	200007e0 	.word	0x200007e0
 80150cc:	200007dc 	.word	0x200007dc
 80150d0:	42c80000 	.word	0x42c80000
 80150d4:	43c80000 	.word	0x43c80000
 80150d8:	2000003c 	.word	0x2000003c
 80150dc:	200007c8 	.word	0x200007c8
 80150e0:	20001560 	.word	0x20001560

080150e4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80150e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(trak.state == STOPPED) {
 80150e6:	4b0b      	ldr	r3, [pc, #44]	; (8015114 <TIM8_UP_TIM13_IRQHandler+0x30>)
 80150e8:	781b      	ldrb	r3, [r3, #0]
 80150ea:	2b01      	cmp	r3, #1
 80150ec:	d005      	beq.n	80150fa <TIM8_UP_TIM13_IRQHandler+0x16>
		spi_tx[2] ^= (1 << 0);
	}
	if(trak.state == SETCUE) {
 80150ee:	2b02      	cmp	r3, #2
 80150f0:	d009      	beq.n	8015106 <TIM8_UP_TIM13_IRQHandler+0x22>
		spi_tx[2] ^= (1 << 0);
		spi_tx[2] ^= (1 << 1);
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80150f2:	4809      	ldr	r0, [pc, #36]	; (8015118 <TIM8_UP_TIM13_IRQHandler+0x34>)
 80150f4:	f7f1 fb67 	bl	80067c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80150f8:	bd08      	pop	{r3, pc}
		spi_tx[2] ^= (1 << 0);
 80150fa:	4908      	ldr	r1, [pc, #32]	; (801511c <TIM8_UP_TIM13_IRQHandler+0x38>)
 80150fc:	788a      	ldrb	r2, [r1, #2]
 80150fe:	f082 0201 	eor.w	r2, r2, #1
 8015102:	708a      	strb	r2, [r1, #2]
 8015104:	e7f3      	b.n	80150ee <TIM8_UP_TIM13_IRQHandler+0xa>
		spi_tx[2] ^= (1 << 0);
 8015106:	4a05      	ldr	r2, [pc, #20]	; (801511c <TIM8_UP_TIM13_IRQHandler+0x38>)
 8015108:	7893      	ldrb	r3, [r2, #2]
		spi_tx[2] ^= (1 << 1);
 801510a:	f083 0303 	eor.w	r3, r3, #3
 801510e:	7093      	strb	r3, [r2, #2]
 8015110:	e7ef      	b.n	80150f2 <TIM8_UP_TIM13_IRQHandler+0xe>
 8015112:	bf00      	nop
 8015114:	20007f50 	.word	0x20007f50
 8015118:	2001830c 	.word	0x2001830c
 801511c:	20000038 	.word	0x20000038

08015120 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8015120:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(pulses != old_pulses) {
 8015122:	4b26      	ldr	r3, [pc, #152]	; (80151bc <TIM5_IRQHandler+0x9c>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	4a26      	ldr	r2, [pc, #152]	; (80151c0 <TIM5_IRQHandler+0xa0>)
 8015128:	6812      	ldr	r2, [r2, #0]
 801512a:	4293      	cmp	r3, r2
 801512c:	d029      	beq.n	8015182 <TIM5_IRQHandler+0x62>
		if(pulses != 0) {
 801512e:	b37b      	cbz	r3, 8015190 <TIM5_IRQHandler+0x70>
			New_frequency = (uint32_t)((trak.bitrate / 2)
 8015130:	4924      	ldr	r1, [pc, #144]	; (80151c4 <TIM5_IRQHandler+0xa4>)
 8015132:	890a      	ldrh	r2, [r1, #8]
 8015134:	0852      	lsrs	r2, r2, #1
					*(1 + trak.percent + jog_sensitivity*pulses));
 8015136:	ed91 7a01 	vldr	s14, [r1, #4]
 801513a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801513e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015142:	ee07 3a90 	vmov	s15, r3
 8015146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801514a:	4b1f      	ldr	r3, [pc, #124]	; (80151c8 <TIM5_IRQHandler+0xa8>)
 801514c:	edd3 6a00 	vldr	s13, [r3]
 8015150:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015158:	ee07 2a90 	vmov	s15, r2
 801515c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015160:	ee67 7a87 	vmul.f32	s15, s15, s14
			New_frequency = (uint32_t)((trak.bitrate / 2)
 8015164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015168:	4b18      	ldr	r3, [pc, #96]	; (80151cc <TIM5_IRQHandler+0xac>)
 801516a:	edc3 7a00 	vstr	s15, [r3]
		}
		else {
			New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
		}
		BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801516e:	4b17      	ldr	r3, [pc, #92]	; (80151cc <TIM5_IRQHandler+0xac>)
 8015170:	6819      	ldr	r1, [r3, #0]
 8015172:	2200      	movs	r2, #0
 8015174:	4816      	ldr	r0, [pc, #88]	; (80151d0 <TIM5_IRQHandler+0xb0>)
 8015176:	f7ff f9fb 	bl	8014570 <BSP_AUDIO_OUT_ClockConfig>
		old_pulses = pulses;
 801517a:	4b10      	ldr	r3, [pc, #64]	; (80151bc <TIM5_IRQHandler+0x9c>)
 801517c:	681a      	ldr	r2, [r3, #0]
 801517e:	4b10      	ldr	r3, [pc, #64]	; (80151c0 <TIM5_IRQHandler+0xa0>)
 8015180:	601a      	str	r2, [r3, #0]
	}
	pulses = 0;
 8015182:	4b0e      	ldr	r3, [pc, #56]	; (80151bc <TIM5_IRQHandler+0x9c>)
 8015184:	2200      	movs	r2, #0
 8015186:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8015188:	4812      	ldr	r0, [pc, #72]	; (80151d4 <TIM5_IRQHandler+0xb4>)
 801518a:	f7f1 fb1c 	bl	80067c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 801518e:	bd08      	pop	{r3, pc}
			New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 8015190:	4a0c      	ldr	r2, [pc, #48]	; (80151c4 <TIM5_IRQHandler+0xa4>)
 8015192:	8913      	ldrh	r3, [r2, #8]
 8015194:	085b      	lsrs	r3, r3, #1
 8015196:	ee07 3a90 	vmov	s15, r3
 801519a:	ed92 7a01 	vldr	s14, [r2, #4]
 801519e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80151a2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80151a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80151b2:	4b06      	ldr	r3, [pc, #24]	; (80151cc <TIM5_IRQHandler+0xac>)
 80151b4:	edc3 7a00 	vstr	s15, [r3]
 80151b8:	e7d9      	b.n	801516e <TIM5_IRQHandler+0x4e>
 80151ba:	bf00      	nop
 80151bc:	20001534 	.word	0x20001534
 80151c0:	2000152c 	.word	0x2000152c
 80151c4:	20007f50 	.word	0x20007f50
 80151c8:	20000080 	.word	0x20000080
 80151cc:	20000078 	.word	0x20000078
 80151d0:	2001813c 	.word	0x2001813c
 80151d4:	2001838c 	.word	0x2001838c

080151d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80151d8:	b510      	push	{r4, lr}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80151da:	4b07      	ldr	r3, [pc, #28]	; (80151f8 <TIM6_DAC_IRQHandler+0x20>)
 80151dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80151e0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	NVIC_EnableIRQ(EXTI15_10_IRQn);
	HAL_TIM_Base_Stop_IT(&htim6);
 80151e2:	4c06      	ldr	r4, [pc, #24]	; (80151fc <TIM6_DAC_IRQHandler+0x24>)
 80151e4:	4620      	mov	r0, r4
 80151e6:	f7f1 fa91 	bl	800670c <HAL_TIM_Base_Stop_IT>
	touch_count = 0;
 80151ea:	4b05      	ldr	r3, [pc, #20]	; (8015200 <TIM6_DAC_IRQHandler+0x28>)
 80151ec:	2200      	movs	r2, #0
 80151ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80151f0:	4620      	mov	r0, r4
 80151f2:	f7f1 fae8 	bl	80067c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80151f6:	bd10      	pop	{r4, pc}
 80151f8:	e000e100 	.word	0xe000e100
 80151fc:	200183cc 	.word	0x200183cc
 8015200:	20001540 	.word	0x20001540

08015204 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8015204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(display.trackbarmode == 0) display.trackbarmode = 1;
 8015206:	4b07      	ldr	r3, [pc, #28]	; (8015224 <TIM7_IRQHandler+0x20>)
 8015208:	791b      	ldrb	r3, [r3, #4]
 801520a:	b133      	cbz	r3, 801521a <TIM7_IRQHandler+0x16>
	else display.trackbarmode = 0;
 801520c:	4b05      	ldr	r3, [pc, #20]	; (8015224 <TIM7_IRQHandler+0x20>)
 801520e:	2200      	movs	r2, #0
 8015210:	711a      	strb	r2, [r3, #4]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8015212:	4805      	ldr	r0, [pc, #20]	; (8015228 <TIM7_IRQHandler+0x24>)
 8015214:	f7f1 fad7 	bl	80067c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8015218:	bd08      	pop	{r3, pc}
	if(display.trackbarmode == 0) display.trackbarmode = 1;
 801521a:	4b02      	ldr	r3, [pc, #8]	; (8015224 <TIM7_IRQHandler+0x20>)
 801521c:	2201      	movs	r2, #1
 801521e:	711a      	strb	r2, [r3, #4]
 8015220:	e7f7      	b.n	8015212 <TIM7_IRQHandler+0xe>
 8015222:	bf00      	nop
 8015224:	20001560 	.word	0x20001560
 8015228:	2001844c 	.word	0x2001844c

0801522c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 801522c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 801522e:	4802      	ldr	r0, [pc, #8]	; (8015238 <DMA2_Stream4_IRQHandler+0xc>)
 8015230:	f7ec fb94 	bl	800195c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8015234:	bd08      	pop	{r3, pc}
 8015236:	bf00      	nop
 8015238:	200181c0 	.word	0x200181c0

0801523c <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 801523c:	b570      	push	{r4, r5, r6, lr}
 801523e:	ed2d 8b02 	vpush	{d8}
	switch(spi_rx[1] & 0xF0) {
 8015242:	4ba3      	ldr	r3, [pc, #652]	; (80154d0 <HAL_SPI_TxRxCpltCallback+0x294>)
 8015244:	785b      	ldrb	r3, [r3, #1]
 8015246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801524a:	2b90      	cmp	r3, #144	; 0x90
 801524c:	d044      	beq.n	80152d8 <HAL_SPI_TxRxCpltCallback+0x9c>
 801524e:	d923      	bls.n	8015298 <HAL_SPI_TxRxCpltCallback+0x5c>
 8015250:	2bb0      	cmp	r3, #176	; 0xb0
 8015252:	f000 83cb 	beq.w	80159ec <HAL_SPI_TxRxCpltCallback+0x7b0>
 8015256:	2be0      	cmp	r3, #224	; 0xe0
 8015258:	d11b      	bne.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				}
			}
			break;
		}
		case 0xE0: {
			uint16_t pitch_rx = spi_rx[3];
 801525a:	4b9d      	ldr	r3, [pc, #628]	; (80154d0 <HAL_SPI_TxRxCpltCallback+0x294>)
 801525c:	78da      	ldrb	r2, [r3, #3]
			pitch_rx <<= 8;
			pitch_rx |= spi_rx[2];
 801525e:	789c      	ldrb	r4, [r3, #2]
 8015260:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
			if(flag == 0) {
 8015264:	4b9b      	ldr	r3, [pc, #620]	; (80154d4 <HAL_SPI_TxRxCpltCallback+0x298>)
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	b93b      	cbnz	r3, 801527a <HAL_SPI_TxRxCpltCallback+0x3e>
				if(trak.pitch == 0) trak.pitch = pitch_rx;
 801526a:	4b9b      	ldr	r3, [pc, #620]	; (80154d8 <HAL_SPI_TxRxCpltCallback+0x29c>)
 801526c:	885b      	ldrh	r3, [r3, #2]
 801526e:	b90b      	cbnz	r3, 8015274 <HAL_SPI_TxRxCpltCallback+0x38>
 8015270:	4b99      	ldr	r3, [pc, #612]	; (80154d8 <HAL_SPI_TxRxCpltCallback+0x29c>)
 8015272:	805c      	strh	r4, [r3, #2]
				flag = 1;
 8015274:	4b97      	ldr	r3, [pc, #604]	; (80154d4 <HAL_SPI_TxRxCpltCallback+0x298>)
 8015276:	2201      	movs	r2, #1
 8015278:	701a      	strb	r2, [r3, #0]
			}
			int delta = trak.pitch - pitch_rx;
 801527a:	4b97      	ldr	r3, [pc, #604]	; (80154d8 <HAL_SPI_TxRxCpltCallback+0x29c>)
 801527c:	885b      	ldrh	r3, [r3, #2]
			if(delta < 0) delta = pitch_rx - trak.pitch;
 801527e:	1b1a      	subs	r2, r3, r4
 8015280:	f100 8487 	bmi.w	8015b92 <HAL_SPI_TxRxCpltCallback+0x956>
			if(pitch_rx < 64) pitch_rx = 64;
 8015284:	2c3f      	cmp	r4, #63	; 0x3f
 8015286:	d800      	bhi.n	801528a <HAL_SPI_TxRxCpltCallback+0x4e>
 8015288:	2440      	movs	r4, #64	; 0x40
			if(delta < 16384) {
 801528a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 801528e:	f2c0 8483 	blt.w	8015b98 <HAL_SPI_TxRxCpltCallback+0x95c>
			if(pitch_rx < 64) pitch_rx = 64;
 8015292:	2300      	movs	r3, #0
 8015294:	f000 bcb1 	b.w	8015bfa <HAL_SPI_TxRxCpltCallback+0x9be>
	switch(spi_rx[1] & 0xF0) {
 8015298:	2b80      	cmp	r3, #128	; 0x80
 801529a:	d1fa      	bne.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			switch(spi_rx[2]) {
 801529c:	4b8c      	ldr	r3, [pc, #560]	; (80154d0 <HAL_SPI_TxRxCpltCallback+0x294>)
 801529e:	789b      	ldrb	r3, [r3, #2]
 80152a0:	3b40      	subs	r3, #64	; 0x40
 80152a2:	2b0a      	cmp	r3, #10
 80152a4:	d8f5      	bhi.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
 80152a6:	a201      	add	r2, pc, #4	; (adr r2, 80152ac <HAL_SPI_TxRxCpltCallback+0x70>)
 80152a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152ac:	080159bd 	.word	0x080159bd
 80152b0:	080158c9 	.word	0x080158c9
 80152b4:	08015293 	.word	0x08015293
 80152b8:	08015901 	.word	0x08015901
 80152bc:	08015293 	.word	0x08015293
 80152c0:	08015293 	.word	0x08015293
 80152c4:	08015293 	.word	0x08015293
 80152c8:	08015293 	.word	0x08015293
 80152cc:	080159cf 	.word	0x080159cf
 80152d0:	08015293 	.word	0x08015293
 80152d4:	08015895 	.word	0x08015895
		switch(spi_rx[2]) {
 80152d8:	4b7d      	ldr	r3, [pc, #500]	; (80154d0 <HAL_SPI_TxRxCpltCallback+0x294>)
 80152da:	789b      	ldrb	r3, [r3, #2]
 80152dc:	3b40      	subs	r3, #64	; 0x40
 80152de:	2b0d      	cmp	r3, #13
 80152e0:	d8d7      	bhi.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
 80152e2:	a201      	add	r2, pc, #4	; (adr r2, 80152e8 <HAL_SPI_TxRxCpltCallback+0xac>)
 80152e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152e8:	080153e7 	.word	0x080153e7
 80152ec:	08015405 	.word	0x08015405
 80152f0:	08015293 	.word	0x08015293
 80152f4:	08015423 	.word	0x08015423
 80152f8:	08015441 	.word	0x08015441
 80152fc:	0801548f 	.word	0x0801548f
 8015300:	08015321 	.word	0x08015321
 8015304:	08015393 	.word	0x08015393
 8015308:	080153c9 	.word	0x080153c9
 801530c:	08015775 	.word	0x08015775
 8015310:	0801582b 	.word	0x0801582b
 8015314:	08015515 	.word	0x08015515
 8015318:	08015645 	.word	0x08015645
 801531c:	0801533f 	.word	0x0801533f
			if(display.quantize == 1) {
 8015320:	4b6e      	ldr	r3, [pc, #440]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8015322:	7c5b      	ldrb	r3, [r3, #17]
 8015324:	2b01      	cmp	r3, #1
 8015326:	d004      	beq.n	8015332 <HAL_SPI_TxRxCpltCallback+0xf6>
				display.loopstart = file_pos_wide;
 8015328:	4b6d      	ldr	r3, [pc, #436]	; (80154e0 <HAL_SPI_TxRxCpltCallback+0x2a4>)
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	4b6b      	ldr	r3, [pc, #428]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 801532e:	609a      	str	r2, [r3, #8]
 8015330:	e7af      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				display.loopstart = QuantizePosition(0);
 8015332:	2000      	movs	r0, #0
 8015334:	f7fc f9fc 	bl	8011730 <QuantizePosition>
 8015338:	4b68      	ldr	r3, [pc, #416]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 801533a:	6098      	str	r0, [r3, #8]
 801533c:	e7a9      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			if(menu_mode == 1) {
 801533e:	4b69      	ldr	r3, [pc, #420]	; (80154e4 <HAL_SPI_TxRxCpltCallback+0x2a8>)
 8015340:	f993 3000 	ldrsb.w	r3, [r3]
 8015344:	2b01      	cmp	r3, #1
 8015346:	d1a4      	bne.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				bOutOfData = 1;
 8015348:	4b67      	ldr	r3, [pc, #412]	; (80154e8 <HAL_SPI_TxRxCpltCallback+0x2ac>)
 801534a:	2201      	movs	r2, #1
 801534c:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 801534e:	4b67      	ldr	r3, [pc, #412]	; (80154ec <HAL_SPI_TxRxCpltCallback+0x2b0>)
 8015350:	2203      	movs	r2, #3
 8015352:	601a      	str	r2, [r3, #0]
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8015354:	2028      	movs	r0, #40	; 0x28
 8015356:	f7ec f80f 	bl	8001378 <HAL_NVIC_DisableIRQ>
				__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801535a:	4865      	ldr	r0, [pc, #404]	; (80154f0 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 801535c:	6803      	ldr	r3, [r0, #0]
 801535e:	f06f 0201 	mvn.w	r2, #1
 8015362:	611a      	str	r2, [r3, #16]
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 8015364:	2200      	movs	r2, #0
 8015366:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim6);
 8015368:	f7f1 f978 	bl	800665c <HAL_TIM_Base_Start_IT>
				Track_number = Mark_number + str_increment;
 801536c:	4b61      	ldr	r3, [pc, #388]	; (80154f4 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	4a61      	ldr	r2, [pc, #388]	; (80154f8 <HAL_SPI_TxRxCpltCallback+0x2bc>)
 8015372:	6812      	ldr	r2, [r2, #0]
 8015374:	4413      	add	r3, r2
 8015376:	4a61      	ldr	r2, [pc, #388]	; (80154fc <HAL_SPI_TxRxCpltCallback+0x2c0>)
 8015378:	6013      	str	r3, [r2, #0]
				if(Track_number >= Total_tracks) Track_number = 0;
 801537a:	4a61      	ldr	r2, [pc, #388]	; (8015500 <HAL_SPI_TxRxCpltCallback+0x2c4>)
 801537c:	8812      	ldrh	r2, [r2, #0]
 801537e:	4293      	cmp	r3, r2
 8015380:	db02      	blt.n	8015388 <HAL_SPI_TxRxCpltCallback+0x14c>
 8015382:	4b5e      	ldr	r3, [pc, #376]	; (80154fc <HAL_SPI_TxRxCpltCallback+0x2c0>)
 8015384:	2200      	movs	r2, #0
 8015386:	601a      	str	r2, [r3, #0]
				String_number = -1;
 8015388:	4b5e      	ldr	r3, [pc, #376]	; (8015504 <HAL_SPI_TxRxCpltCallback+0x2c8>)
 801538a:	f04f 32ff 	mov.w	r2, #4294967295
 801538e:	601a      	str	r2, [r3, #0]
 8015390:	e77f      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			if(display.quantize == 1) {
 8015392:	4b52      	ldr	r3, [pc, #328]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8015394:	7c5b      	ldrb	r3, [r3, #17]
 8015396:	2b01      	cmp	r3, #1
 8015398:	d010      	beq.n	80153bc <HAL_SPI_TxRxCpltCallback+0x180>
				display.loopend = file_pos_wide;
 801539a:	4b51      	ldr	r3, [pc, #324]	; (80154e0 <HAL_SPI_TxRxCpltCallback+0x2a4>)
 801539c:	681a      	ldr	r2, [r3, #0]
 801539e:	4b4f      	ldr	r3, [pc, #316]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80153a0:	60da      	str	r2, [r3, #12]
			if(display.loop == 0) display.loop = 1;
 80153a2:	4b4e      	ldr	r3, [pc, #312]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80153a4:	7c1b      	ldrb	r3, [r3, #16]
 80153a6:	b913      	cbnz	r3, 80153ae <HAL_SPI_TxRxCpltCallback+0x172>
 80153a8:	4b4c      	ldr	r3, [pc, #304]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80153aa:	2201      	movs	r2, #1
 80153ac:	741a      	strb	r2, [r3, #16]
			GoToPosition(display.loopstart);
 80153ae:	4b4b      	ldr	r3, [pc, #300]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80153b0:	6898      	ldr	r0, [r3, #8]
 80153b2:	f000 feeb 	bl	801618c <GoToPosition>
			BSP_AUDIO_OUT_Resume();
 80153b6:	f7ff f809 	bl	80143cc <BSP_AUDIO_OUT_Resume>
			break;
 80153ba:	e76a      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				display.loopend = QuantizePosition(0);
 80153bc:	2000      	movs	r0, #0
 80153be:	f7fc f9b7 	bl	8011730 <QuantizePosition>
 80153c2:	4b46      	ldr	r3, [pc, #280]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80153c4:	60d8      	str	r0, [r3, #12]
 80153c6:	e7ec      	b.n	80153a2 <HAL_SPI_TxRxCpltCallback+0x166>
			button_flag ^= (1 << 2);
 80153c8:	4a4f      	ldr	r2, [pc, #316]	; (8015508 <HAL_SPI_TxRxCpltCallback+0x2cc>)
 80153ca:	8813      	ldrh	r3, [r2, #0]
 80153cc:	f083 0304 	eor.w	r3, r3, #4
 80153d0:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 80153d2:	484e      	ldr	r0, [pc, #312]	; (801550c <HAL_SPI_TxRxCpltCallback+0x2d0>)
 80153d4:	6803      	ldr	r3, [r0, #0]
 80153d6:	f06f 0201 	mvn.w	r2, #1
 80153da:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 80153dc:	2200      	movs	r2, #0
 80153de:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 80153e0:	f7f1 f93c 	bl	800665c <HAL_TIM_Base_Start_IT>
			break;
 80153e4:	e755      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			button_flag ^= (1 << 3);
 80153e6:	4a48      	ldr	r2, [pc, #288]	; (8015508 <HAL_SPI_TxRxCpltCallback+0x2cc>)
 80153e8:	8813      	ldrh	r3, [r2, #0]
 80153ea:	f083 0308 	eor.w	r3, r3, #8
 80153ee:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 80153f0:	4846      	ldr	r0, [pc, #280]	; (801550c <HAL_SPI_TxRxCpltCallback+0x2d0>)
 80153f2:	6803      	ldr	r3, [r0, #0]
 80153f4:	f06f 0201 	mvn.w	r2, #1
 80153f8:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 80153fa:	2200      	movs	r2, #0
 80153fc:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 80153fe:	f7f1 f92d 	bl	800665c <HAL_TIM_Base_Start_IT>
			break;
 8015402:	e746      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			button_flag ^= (1 << 0);
 8015404:	4a40      	ldr	r2, [pc, #256]	; (8015508 <HAL_SPI_TxRxCpltCallback+0x2cc>)
 8015406:	8813      	ldrh	r3, [r2, #0]
 8015408:	f083 0301 	eor.w	r3, r3, #1
 801540c:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 801540e:	483f      	ldr	r0, [pc, #252]	; (801550c <HAL_SPI_TxRxCpltCallback+0x2d0>)
 8015410:	6803      	ldr	r3, [r0, #0]
 8015412:	f06f 0201 	mvn.w	r2, #1
 8015416:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 8015418:	2200      	movs	r2, #0
 801541a:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 801541c:	f7f1 f91e 	bl	800665c <HAL_TIM_Base_Start_IT>
			break;
 8015420:	e737      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			button_flag ^= (1 << 1);
 8015422:	4a39      	ldr	r2, [pc, #228]	; (8015508 <HAL_SPI_TxRxCpltCallback+0x2cc>)
 8015424:	8813      	ldrh	r3, [r2, #0]
 8015426:	f083 0302 	eor.w	r3, r3, #2
 801542a:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 801542c:	4837      	ldr	r0, [pc, #220]	; (801550c <HAL_SPI_TxRxCpltCallback+0x2d0>)
 801542e:	6803      	ldr	r3, [r0, #0]
 8015430:	f06f 0201 	mvn.w	r2, #1
 8015434:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 8015436:	2200      	movs	r2, #0
 8015438:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 801543a:	f7f1 f90f 	bl	800665c <HAL_TIM_Base_Start_IT>
			break;
 801543e:	e728      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			if(!(button_flag & (1 << 2))) {
 8015440:	4b31      	ldr	r3, [pc, #196]	; (8015508 <HAL_SPI_TxRxCpltCallback+0x2cc>)
 8015442:	881b      	ldrh	r3, [r3, #0]
 8015444:	f013 0f04 	tst.w	r3, #4
 8015448:	d10a      	bne.n	8015460 <HAL_SPI_TxRxCpltCallback+0x224>
				bOutOfData = 1;
 801544a:	4b27      	ldr	r3, [pc, #156]	; (80154e8 <HAL_SPI_TxRxCpltCallback+0x2ac>)
 801544c:	2201      	movs	r2, #1
 801544e:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 8015450:	4b26      	ldr	r3, [pc, #152]	; (80154ec <HAL_SPI_TxRxCpltCallback+0x2b0>)
 8015452:	2203      	movs	r2, #3
 8015454:	601a      	str	r2, [r3, #0]
				Track_number--;
 8015456:	4a29      	ldr	r2, [pc, #164]	; (80154fc <HAL_SPI_TxRxCpltCallback+0x2c0>)
 8015458:	6813      	ldr	r3, [r2, #0]
 801545a:	3b01      	subs	r3, #1
 801545c:	6013      	str	r3, [r2, #0]
 801545e:	e718      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				display.loopend = (display.loopend+display.loopstart)/2;
 8015460:	4a1e      	ldr	r2, [pc, #120]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8015462:	68d3      	ldr	r3, [r2, #12]
 8015464:	6890      	ldr	r0, [r2, #8]
 8015466:	4403      	add	r3, r0
 8015468:	085b      	lsrs	r3, r3, #1
 801546a:	60d3      	str	r3, [r2, #12]
				if(display.loopend - display.loopstart < 1)
 801546c:	4298      	cmp	r0, r3
 801546e:	d00b      	beq.n	8015488 <HAL_SPI_TxRxCpltCallback+0x24c>
				if(file_pos_wide >= display.loopend) {
 8015470:	4b1a      	ldr	r3, [pc, #104]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8015472:	68da      	ldr	r2, [r3, #12]
 8015474:	4b1a      	ldr	r3, [pc, #104]	; (80154e0 <HAL_SPI_TxRxCpltCallback+0x2a4>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	429a      	cmp	r2, r3
 801547a:	f63f af0a 	bhi.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					GoToPosition(display.loopstart);
 801547e:	f000 fe85 	bl	801618c <GoToPosition>
					BSP_AUDIO_OUT_Resume();
 8015482:	f7fe ffa3 	bl	80143cc <BSP_AUDIO_OUT_Resume>
 8015486:	e704      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					display.loopend = display.loopstart + 1;
 8015488:	1c43      	adds	r3, r0, #1
 801548a:	60d3      	str	r3, [r2, #12]
 801548c:	e7f0      	b.n	8015470 <HAL_SPI_TxRxCpltCallback+0x234>
			if(!(button_flag & (1 << 2))) {
 801548e:	4b1e      	ldr	r3, [pc, #120]	; (8015508 <HAL_SPI_TxRxCpltCallback+0x2cc>)
 8015490:	881b      	ldrh	r3, [r3, #0]
 8015492:	f013 0f04 	tst.w	r3, #4
 8015496:	d10a      	bne.n	80154ae <HAL_SPI_TxRxCpltCallback+0x272>
				bOutOfData = 1;
 8015498:	4b13      	ldr	r3, [pc, #76]	; (80154e8 <HAL_SPI_TxRxCpltCallback+0x2ac>)
 801549a:	2201      	movs	r2, #1
 801549c:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 801549e:	4b13      	ldr	r3, [pc, #76]	; (80154ec <HAL_SPI_TxRxCpltCallback+0x2b0>)
 80154a0:	2203      	movs	r2, #3
 80154a2:	601a      	str	r2, [r3, #0]
				Track_number++;
 80154a4:	4a15      	ldr	r2, [pc, #84]	; (80154fc <HAL_SPI_TxRxCpltCallback+0x2c0>)
 80154a6:	6813      	ldr	r3, [r2, #0]
 80154a8:	3301      	adds	r3, #1
 80154aa:	6013      	str	r3, [r2, #0]
 80154ac:	e6f1      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				display.loopend = display.loopend*2-display.loopstart;
 80154ae:	4b0b      	ldr	r3, [pc, #44]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80154b0:	68d9      	ldr	r1, [r3, #12]
 80154b2:	689a      	ldr	r2, [r3, #8]
 80154b4:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80154b8:	60da      	str	r2, [r3, #12]
				if(display.loopend >= rekordbox.spectrum_size)
 80154ba:	4915      	ldr	r1, [pc, #84]	; (8015510 <HAL_SPI_TxRxCpltCallback+0x2d4>)
 80154bc:	f242 434c 	movw	r3, #9292	; 0x244c
 80154c0:	58cb      	ldr	r3, [r1, r3]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	f4ff aee5 	bcc.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					display.loopend = rekordbox.spectrum_size - 1;
 80154c8:	3b01      	subs	r3, #1
 80154ca:	4a04      	ldr	r2, [pc, #16]	; (80154dc <HAL_SPI_TxRxCpltCallback+0x2a0>)
 80154cc:	60d3      	str	r3, [r2, #12]
 80154ce:	e6e0      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
 80154d0:	20001444 	.word	0x20001444
 80154d4:	20001528 	.word	0x20001528
 80154d8:	20007f50 	.word	0x20007f50
 80154dc:	20001560 	.word	0x20001560
 80154e0:	200007f0 	.word	0x200007f0
 80154e4:	200007c8 	.word	0x200007c8
 80154e8:	200007e4 	.word	0x200007e4
 80154ec:	2000144c 	.word	0x2000144c
 80154f0:	200183cc 	.word	0x200183cc
 80154f4:	20000074 	.word	0x20000074
 80154f8:	20001538 	.word	0x20001538
 80154fc:	200007e0 	.word	0x200007e0
 8015500:	200007dc 	.word	0x200007dc
 8015504:	2000007c 	.word	0x2000007c
 8015508:	20001526 	.word	0x20001526
 801550c:	2001840c 	.word	0x2001840c
 8015510:	200153a4 	.word	0x200153a4
			if(!(button_flag & (1 << 2))) {
 8015514:	4baa      	ldr	r3, [pc, #680]	; (80157c0 <HAL_SPI_TxRxCpltCallback+0x584>)
 8015516:	881b      	ldrh	r3, [r3, #0]
 8015518:	f013 0f04 	tst.w	r3, #4
 801551c:	d153      	bne.n	80155c6 <HAL_SPI_TxRxCpltCallback+0x38a>
				if(display.quantize == 1) {
 801551e:	4ba9      	ldr	r3, [pc, #676]	; (80157c4 <HAL_SPI_TxRxCpltCallback+0x588>)
 8015520:	7c5b      	ldrb	r3, [r3, #17]
 8015522:	2b01      	cmp	r3, #1
 8015524:	d036      	beq.n	8015594 <HAL_SPI_TxRxCpltCallback+0x358>
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 8015526:	4ca8      	ldr	r4, [pc, #672]	; (80157c8 <HAL_SPI_TxRxCpltCallback+0x58c>)
 8015528:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
 801552c:	4aa7      	ldr	r2, [pc, #668]	; (80157cc <HAL_SPI_TxRxCpltCallback+0x590>)
 801552e:	f04f 33ff 	mov.w	r3, #4294967295
 8015532:	18a8      	adds	r0, r5, r2
 8015534:	eb46 0103 	adc.w	r1, r6, r3
 8015538:	f7eb fc58 	bl	8000dec <__aeabi_ul2f>
 801553c:	ee08 0a10 	vmov	s16, r0
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8015540:	e9d4 4504 	ldrd	r4, r5, [r4, #16]
 8015544:	49a2      	ldr	r1, [pc, #648]	; (80157d0 <HAL_SPI_TxRxCpltCallback+0x594>)
 8015546:	6809      	ldr	r1, [r1, #0]
 8015548:	1a62      	subs	r2, r4, r1
 801554a:	f165 0300 	sbc.w	r3, r5, #0
 801554e:	49a1      	ldr	r1, [pc, #644]	; (80157d4 <HAL_SPI_TxRxCpltCallback+0x598>)
 8015550:	6808      	ldr	r0, [r1, #0]
 8015552:	1a14      	subs	r4, r2, r0
 8015554:	f163 0500 	sbc.w	r5, r3, #0
 8015558:	4620      	mov	r0, r4
 801555a:	4629      	mov	r1, r5
 801555c:	f7eb fc46 	bl	8000dec <__aeabi_ul2f>
 8015560:	ee07 0a90 	vmov	s15, r0
 8015564:	ee88 7a27 	vdiv.f32	s14, s16, s15
							*rekordbox.spectrum_size);
 8015568:	4a9b      	ldr	r2, [pc, #620]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 801556a:	f242 434c 	movw	r3, #9292	; 0x244c
 801556e:	58d3      	ldr	r3, [r2, r3]
 8015570:	ee07 3a90 	vmov	s15, r3
 8015574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015578:	ee67 7a87 	vmul.f32	s15, s15, s14
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 801557c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015580:	ee17 0a90 	vmov	r0, s15
 8015584:	f000 fe02 	bl	801618c <GoToPosition>
				if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 8015588:	4b94      	ldr	r3, [pc, #592]	; (80157dc <HAL_SPI_TxRxCpltCallback+0x5a0>)
 801558a:	781b      	ldrb	r3, [r3, #0]
 801558c:	b94b      	cbnz	r3, 80155a2 <HAL_SPI_TxRxCpltCallback+0x366>
 801558e:	f7fe ff1d 	bl	80143cc <BSP_AUDIO_OUT_Resume>
 8015592:	e67e      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					GoToPosition(QuantizePosition(-1));
 8015594:	f04f 30ff 	mov.w	r0, #4294967295
 8015598:	f7fc f8ca 	bl	8011730 <QuantizePosition>
 801559c:	f000 fdf6 	bl	801618c <GoToPosition>
 80155a0:	e7f2      	b.n	8015588 <HAL_SPI_TxRxCpltCallback+0x34c>
					GetTrackTime();
 80155a2:	f000 fead 	bl	8016300 <GetTrackTime>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 80155a6:	4b8e      	ldr	r3, [pc, #568]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 80155a8:	789b      	ldrb	r3, [r3, #2]
 80155aa:	b93b      	cbnz	r3, 80155bc <HAL_SPI_TxRxCpltCallback+0x380>
 80155ac:	f043 0302 	orr.w	r3, r3, #2
 80155b0:	4a8b      	ldr	r2, [pc, #556]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 80155b2:	7093      	strb	r3, [r2, #2]
					trak.state = SETCUE;
 80155b4:	4b89      	ldr	r3, [pc, #548]	; (80157dc <HAL_SPI_TxRxCpltCallback+0x5a0>)
 80155b6:	2202      	movs	r2, #2
 80155b8:	701a      	strb	r2, [r3, #0]
 80155ba:	e66a      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					else spi_tx[2] &= ~(1 << 1);
 80155bc:	f023 0302 	bic.w	r3, r3, #2
 80155c0:	4a87      	ldr	r2, [pc, #540]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 80155c2:	7093      	strb	r3, [r2, #2]
 80155c4:	e7f6      	b.n	80155b4 <HAL_SPI_TxRxCpltCallback+0x378>
				rekordbox.currentcue++;
 80155c6:	4a84      	ldr	r2, [pc, #528]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 80155c8:	f642 5190 	movw	r1, #11664	; 0x2d90
 80155cc:	5853      	ldr	r3, [r2, r1]
 80155ce:	3301      	adds	r3, #1
 80155d0:	5053      	str	r3, [r2, r1]
				if(rekordbox.currentcue >= rekordbox.cues)
 80155d2:	f242 5154 	movw	r1, #9556	; 0x2554
 80155d6:	5852      	ldr	r2, [r2, r1]
 80155d8:	4293      	cmp	r3, r2
 80155da:	db04      	blt.n	80155e6 <HAL_SPI_TxRxCpltCallback+0x3aa>
					rekordbox.currentcue = 0;
 80155dc:	4a7e      	ldr	r2, [pc, #504]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 80155de:	f642 5390 	movw	r3, #11664	; 0x2d90
 80155e2:	2100      	movs	r1, #0
 80155e4:	50d1      	str	r1, [r2, r3]
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 80155e6:	4a7c      	ldr	r2, [pc, #496]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 80155e8:	f642 5390 	movw	r3, #11664	; 0x2d90
 80155ec:	58d3      	ldr	r3, [r2, r3]
 80155ee:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 80155f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80155f6:	f000 fdc9 	bl	801618c <GoToPosition>
				if(trak.state == PLAYING) {
 80155fa:	4b78      	ldr	r3, [pc, #480]	; (80157dc <HAL_SPI_TxRxCpltCallback+0x5a0>)
 80155fc:	781b      	ldrb	r3, [r3, #0]
 80155fe:	b9c3      	cbnz	r3, 8015632 <HAL_SPI_TxRxCpltCallback+0x3f6>
					BSP_AUDIO_OUT_Resume();
 8015600:	f7fe fee4 	bl	80143cc <BSP_AUDIO_OUT_Resume>
					HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8015604:	4877      	ldr	r0, [pc, #476]	; (80157e4 <HAL_SPI_TxRxCpltCallback+0x5a8>)
 8015606:	f7f1 f881 	bl	800670c <HAL_TIM_Base_Stop_IT>
					spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 801560a:	4a75      	ldr	r2, [pc, #468]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 801560c:	7893      	ldrb	r3, [r2, #2]
 801560e:	f023 0301 	bic.w	r3, r3, #1
 8015612:	7093      	strb	r3, [r2, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 8015614:	4a70      	ldr	r2, [pc, #448]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 8015616:	f642 5390 	movw	r3, #11664	; 0x2d90
 801561a:	58d3      	ldr	r3, [r2, r3]
 801561c:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 8015620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015624:	b143      	cbz	r3, 8015638 <HAL_SPI_TxRxCpltCallback+0x3fc>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8015626:	4a6e      	ldr	r2, [pc, #440]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 8015628:	7893      	ldrb	r3, [r2, #2]
 801562a:	f023 0302 	bic.w	r3, r3, #2
 801562e:	7093      	strb	r3, [r2, #2]
 8015630:	e62f      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					GetTrackTime();
 8015632:	f000 fe65 	bl	8016300 <GetTrackTime>
 8015636:	e7ed      	b.n	8015614 <HAL_SPI_TxRxCpltCallback+0x3d8>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8015638:	4a69      	ldr	r2, [pc, #420]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 801563a:	7893      	ldrb	r3, [r2, #2]
 801563c:	f043 0302 	orr.w	r3, r3, #2
 8015640:	7093      	strb	r3, [r2, #2]
 8015642:	e626      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			if(!(button_flag & (1 << 2))) {
 8015644:	4b5e      	ldr	r3, [pc, #376]	; (80157c0 <HAL_SPI_TxRxCpltCallback+0x584>)
 8015646:	881b      	ldrh	r3, [r3, #0]
 8015648:	f013 0f04 	tst.w	r3, #4
 801564c:	d152      	bne.n	80156f4 <HAL_SPI_TxRxCpltCallback+0x4b8>
				if(display.quantize == 1) {
 801564e:	4b5d      	ldr	r3, [pc, #372]	; (80157c4 <HAL_SPI_TxRxCpltCallback+0x588>)
 8015650:	7c5b      	ldrb	r3, [r3, #17]
 8015652:	2b01      	cmp	r3, #1
 8015654:	d036      	beq.n	80156c4 <HAL_SPI_TxRxCpltCallback+0x488>
					GoToPosition((float)(f_tell(&MyFile) + 60000)
 8015656:	4c5c      	ldr	r4, [pc, #368]	; (80157c8 <HAL_SPI_TxRxCpltCallback+0x58c>)
 8015658:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
 801565c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8015660:	2300      	movs	r3, #0
 8015662:	18a8      	adds	r0, r5, r2
 8015664:	eb46 0103 	adc.w	r1, r6, r3
 8015668:	f7eb fbc0 	bl	8000dec <__aeabi_ul2f>
 801566c:	ee08 0a10 	vmov	s16, r0
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8015670:	e9d4 4504 	ldrd	r4, r5, [r4, #16]
 8015674:	4956      	ldr	r1, [pc, #344]	; (80157d0 <HAL_SPI_TxRxCpltCallback+0x594>)
 8015676:	6809      	ldr	r1, [r1, #0]
 8015678:	1a62      	subs	r2, r4, r1
 801567a:	f165 0300 	sbc.w	r3, r5, #0
 801567e:	4955      	ldr	r1, [pc, #340]	; (80157d4 <HAL_SPI_TxRxCpltCallback+0x598>)
 8015680:	6808      	ldr	r0, [r1, #0]
 8015682:	1a14      	subs	r4, r2, r0
 8015684:	f163 0500 	sbc.w	r5, r3, #0
 8015688:	4620      	mov	r0, r4
 801568a:	4629      	mov	r1, r5
 801568c:	f7eb fbae 	bl	8000dec <__aeabi_ul2f>
 8015690:	ee07 0a90 	vmov	s15, r0
 8015694:	ee88 7a27 	vdiv.f32	s14, s16, s15
							*rekordbox.spectrum_size);
 8015698:	4a4f      	ldr	r2, [pc, #316]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 801569a:	f242 434c 	movw	r3, #9292	; 0x244c
 801569e:	58d3      	ldr	r3, [r2, r3]
 80156a0:	ee07 3a90 	vmov	s15, r3
 80156a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80156a8:	ee67 7a87 	vmul.f32	s15, s15, s14
					GoToPosition((float)(f_tell(&MyFile) + 60000)
 80156ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80156b0:	ee17 0a90 	vmov	r0, s15
 80156b4:	f000 fd6a 	bl	801618c <GoToPosition>
				if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 80156b8:	4b48      	ldr	r3, [pc, #288]	; (80157dc <HAL_SPI_TxRxCpltCallback+0x5a0>)
 80156ba:	781b      	ldrb	r3, [r3, #0]
 80156bc:	b943      	cbnz	r3, 80156d0 <HAL_SPI_TxRxCpltCallback+0x494>
 80156be:	f7fe fe85 	bl	80143cc <BSP_AUDIO_OUT_Resume>
 80156c2:	e5e6      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					GoToPosition(QuantizePosition(1));
 80156c4:	2001      	movs	r0, #1
 80156c6:	f7fc f833 	bl	8011730 <QuantizePosition>
 80156ca:	f000 fd5f 	bl	801618c <GoToPosition>
 80156ce:	e7f3      	b.n	80156b8 <HAL_SPI_TxRxCpltCallback+0x47c>
					GetTrackTime();
 80156d0:	f000 fe16 	bl	8016300 <GetTrackTime>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 80156d4:	4b42      	ldr	r3, [pc, #264]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 80156d6:	789b      	ldrb	r3, [r3, #2]
 80156d8:	b93b      	cbnz	r3, 80156ea <HAL_SPI_TxRxCpltCallback+0x4ae>
 80156da:	f043 0302 	orr.w	r3, r3, #2
 80156de:	4a40      	ldr	r2, [pc, #256]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 80156e0:	7093      	strb	r3, [r2, #2]
					trak.state = SETCUE;
 80156e2:	4b3e      	ldr	r3, [pc, #248]	; (80157dc <HAL_SPI_TxRxCpltCallback+0x5a0>)
 80156e4:	2202      	movs	r2, #2
 80156e6:	701a      	strb	r2, [r3, #0]
 80156e8:	e5d3      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					else spi_tx[2] &= ~(1 << 1);
 80156ea:	f023 0302 	bic.w	r3, r3, #2
 80156ee:	4a3c      	ldr	r2, [pc, #240]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 80156f0:	7093      	strb	r3, [r2, #2]
 80156f2:	e7f6      	b.n	80156e2 <HAL_SPI_TxRxCpltCallback+0x4a6>
				rekordbox.currentcue--;
 80156f4:	4938      	ldr	r1, [pc, #224]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 80156f6:	f642 5290 	movw	r2, #11664	; 0x2d90
 80156fa:	588b      	ldr	r3, [r1, r2]
 80156fc:	3b01      	subs	r3, #1
 80156fe:	508b      	str	r3, [r1, r2]
				if(rekordbox.currentcue < 0)
 8015700:	2b00      	cmp	r3, #0
 8015702:	db25      	blt.n	8015750 <HAL_SPI_TxRxCpltCallback+0x514>
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 8015704:	4a34      	ldr	r2, [pc, #208]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 8015706:	f642 5390 	movw	r3, #11664	; 0x2d90
 801570a:	58d3      	ldr	r3, [r2, r3]
 801570c:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 8015710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015714:	f000 fd3a 	bl	801618c <GoToPosition>
				if(trak.state == PLAYING) {
 8015718:	4b30      	ldr	r3, [pc, #192]	; (80157dc <HAL_SPI_TxRxCpltCallback+0x5a0>)
 801571a:	781b      	ldrb	r3, [r3, #0]
 801571c:	bb0b      	cbnz	r3, 8015762 <HAL_SPI_TxRxCpltCallback+0x526>
					BSP_AUDIO_OUT_Resume();
 801571e:	f7fe fe55 	bl	80143cc <BSP_AUDIO_OUT_Resume>
					HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8015722:	4830      	ldr	r0, [pc, #192]	; (80157e4 <HAL_SPI_TxRxCpltCallback+0x5a8>)
 8015724:	f7f0 fff2 	bl	800670c <HAL_TIM_Base_Stop_IT>
					spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 8015728:	4a2d      	ldr	r2, [pc, #180]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 801572a:	7893      	ldrb	r3, [r2, #2]
 801572c:	f023 0301 	bic.w	r3, r3, #1
 8015730:	7093      	strb	r3, [r2, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 8015732:	4a29      	ldr	r2, [pc, #164]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 8015734:	f642 5390 	movw	r3, #11664	; 0x2d90
 8015738:	58d3      	ldr	r3, [r2, r3]
 801573a:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 801573e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015742:	b18b      	cbz	r3, 8015768 <HAL_SPI_TxRxCpltCallback+0x52c>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8015744:	4a26      	ldr	r2, [pc, #152]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 8015746:	7893      	ldrb	r3, [r2, #2]
 8015748:	f023 0302 	bic.w	r3, r3, #2
 801574c:	7093      	strb	r3, [r2, #2]
 801574e:	e5a0      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					rekordbox.currentcue = rekordbox.cues - 1;
 8015750:	460a      	mov	r2, r1
 8015752:	f242 5354 	movw	r3, #9556	; 0x2554
 8015756:	58cb      	ldr	r3, [r1, r3]
 8015758:	3b01      	subs	r3, #1
 801575a:	f642 5190 	movw	r1, #11664	; 0x2d90
 801575e:	5053      	str	r3, [r2, r1]
 8015760:	e7d0      	b.n	8015704 <HAL_SPI_TxRxCpltCallback+0x4c8>
					GetTrackTime();
 8015762:	f000 fdcd 	bl	8016300 <GetTrackTime>
 8015766:	e7e4      	b.n	8015732 <HAL_SPI_TxRxCpltCallback+0x4f6>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8015768:	4a1d      	ldr	r2, [pc, #116]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 801576a:	7893      	ldrb	r3, [r2, #2]
 801576c:	f043 0302 	orr.w	r3, r3, #2
 8015770:	7093      	strb	r3, [r2, #2]
 8015772:	e58e      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			if(trak.state == PLAYING) {
 8015774:	4b19      	ldr	r3, [pc, #100]	; (80157dc <HAL_SPI_TxRxCpltCallback+0x5a0>)
 8015776:	781b      	ldrb	r3, [r3, #0]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d137      	bne.n	80157ec <HAL_SPI_TxRxCpltCallback+0x5b0>
				BSP_AUDIO_OUT_Pause();
 801577c:	f7fe fe1e 	bl	80143bc <BSP_AUDIO_OUT_Pause>
				if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 8015780:	4b17      	ldr	r3, [pc, #92]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 8015782:	789b      	ldrb	r3, [r3, #2]
 8015784:	b993      	cbnz	r3, 80157ac <HAL_SPI_TxRxCpltCallback+0x570>
 8015786:	f043 0302 	orr.w	r3, r3, #2
 801578a:	4a15      	ldr	r2, [pc, #84]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 801578c:	7093      	strb	r3, [r2, #2]
				HAL_TIM_Base_Start_IT(&htim8); //start blinking
 801578e:	4815      	ldr	r0, [pc, #84]	; (80157e4 <HAL_SPI_TxRxCpltCallback+0x5a8>)
 8015790:	f7f0 ff64 	bl	800665c <HAL_TIM_Base_Start_IT>
				if(file_pos_wide != rekordbox.cue_start_position[0]) {
 8015794:	4a10      	ldr	r2, [pc, #64]	; (80157d8 <HAL_SPI_TxRxCpltCallback+0x59c>)
 8015796:	f642 2308 	movw	r3, #10760	; 0x2a08
 801579a:	58d2      	ldr	r2, [r2, r3]
 801579c:	4b12      	ldr	r3, [pc, #72]	; (80157e8 <HAL_SPI_TxRxCpltCallback+0x5ac>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d008      	beq.n	80157b6 <HAL_SPI_TxRxCpltCallback+0x57a>
					trak.state = SETCUE;
 80157a4:	4b0d      	ldr	r3, [pc, #52]	; (80157dc <HAL_SPI_TxRxCpltCallback+0x5a0>)
 80157a6:	2202      	movs	r2, #2
 80157a8:	701a      	strb	r2, [r3, #0]
 80157aa:	e572      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				else spi_tx[2] &= ~(1 << 1);
 80157ac:	f023 0302 	bic.w	r3, r3, #2
 80157b0:	4a0b      	ldr	r2, [pc, #44]	; (80157e0 <HAL_SPI_TxRxCpltCallback+0x5a4>)
 80157b2:	7093      	strb	r3, [r2, #2]
 80157b4:	e7eb      	b.n	801578e <HAL_SPI_TxRxCpltCallback+0x552>
					trak.state = STOPPED;
 80157b6:	4b09      	ldr	r3, [pc, #36]	; (80157dc <HAL_SPI_TxRxCpltCallback+0x5a0>)
 80157b8:	2201      	movs	r2, #1
 80157ba:	701a      	strb	r2, [r3, #0]
 80157bc:	e569      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
 80157be:	bf00      	nop
 80157c0:	20001526 	.word	0x20001526
 80157c4:	20001560 	.word	0x20001560
 80157c8:	2000f720 	.word	0x2000f720
 80157cc:	fffe2b40 	.word	0xfffe2b40
 80157d0:	2000f97c 	.word	0x2000f97c
 80157d4:	20001548 	.word	0x20001548
 80157d8:	200153a4 	.word	0x200153a4
 80157dc:	20007f50 	.word	0x20007f50
 80157e0:	20000038 	.word	0x20000038
 80157e4:	2001830c 	.word	0x2001830c
 80157e8:	200007f0 	.word	0x200007f0
				BSP_AUDIO_OUT_Resume();
 80157ec:	f7fe fdee 	bl	80143cc <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 80157f0:	4ba3      	ldr	r3, [pc, #652]	; (8015a80 <HAL_SPI_TxRxCpltCallback+0x844>)
 80157f2:	2200      	movs	r2, #0
 80157f4:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 80157f6:	48a3      	ldr	r0, [pc, #652]	; (8015a84 <HAL_SPI_TxRxCpltCallback+0x848>)
 80157f8:	f7f0 ff88 	bl	800670c <HAL_TIM_Base_Stop_IT>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 80157fc:	4ba2      	ldr	r3, [pc, #648]	; (8015a88 <HAL_SPI_TxRxCpltCallback+0x84c>)
 80157fe:	789b      	ldrb	r3, [r3, #2]
 8015800:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 8015804:	49a1      	ldr	r1, [pc, #644]	; (8015a8c <HAL_SPI_TxRxCpltCallback+0x850>)
 8015806:	f642 5290 	movw	r2, #11664	; 0x2d90
 801580a:	588a      	ldr	r2, [r1, r2]
 801580c:	f602 2282 	addw	r2, r2, #2690	; 0xa82
 8015810:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8015814:	b122      	cbz	r2, 8015820 <HAL_SPI_TxRxCpltCallback+0x5e4>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8015816:	f023 0302 	bic.w	r3, r3, #2
 801581a:	4a9b      	ldr	r2, [pc, #620]	; (8015a88 <HAL_SPI_TxRxCpltCallback+0x84c>)
 801581c:	7093      	strb	r3, [r2, #2]
 801581e:	e538      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8015820:	f043 0302 	orr.w	r3, r3, #2
 8015824:	4a98      	ldr	r2, [pc, #608]	; (8015a88 <HAL_SPI_TxRxCpltCallback+0x84c>)
 8015826:	7093      	strb	r3, [r2, #2]
 8015828:	e533      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			if(trak.state == STOPPED) {
 801582a:	4b95      	ldr	r3, [pc, #596]	; (8015a80 <HAL_SPI_TxRxCpltCallback+0x844>)
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	2b01      	cmp	r3, #1
 8015830:	d01a      	beq.n	8015868 <HAL_SPI_TxRxCpltCallback+0x62c>
			else if(trak.state == SETCUE) {
 8015832:	2b02      	cmp	r3, #2
 8015834:	f47f ad2d 	bne.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				if(display.quantize == 1) {
 8015838:	4b95      	ldr	r3, [pc, #596]	; (8015a90 <HAL_SPI_TxRxCpltCallback+0x854>)
 801583a:	7c5b      	ldrb	r3, [r3, #17]
 801583c:	2b01      	cmp	r3, #1
 801583e:	d021      	beq.n	8015884 <HAL_SPI_TxRxCpltCallback+0x648>
					rekordbox.cue_start_position[0] = file_pos_wide;
 8015840:	4b94      	ldr	r3, [pc, #592]	; (8015a94 <HAL_SPI_TxRxCpltCallback+0x858>)
 8015842:	6819      	ldr	r1, [r3, #0]
 8015844:	4a91      	ldr	r2, [pc, #580]	; (8015a8c <HAL_SPI_TxRxCpltCallback+0x850>)
 8015846:	f642 2308 	movw	r3, #10760	; 0x2a08
 801584a:	50d1      	str	r1, [r2, r3]
				rekordbox.currentcue = 0;
 801584c:	4a8f      	ldr	r2, [pc, #572]	; (8015a8c <HAL_SPI_TxRxCpltCallback+0x850>)
 801584e:	f642 5390 	movw	r3, #11664	; 0x2d90
 8015852:	2100      	movs	r1, #0
 8015854:	50d1      	str	r1, [r2, r3]
				spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8015856:	4a8c      	ldr	r2, [pc, #560]	; (8015a88 <HAL_SPI_TxRxCpltCallback+0x84c>)
 8015858:	7893      	ldrb	r3, [r2, #2]
 801585a:	f023 0302 	bic.w	r3, r3, #2
 801585e:	7093      	strb	r3, [r2, #2]
				trak.state = STOPPED;
 8015860:	4b87      	ldr	r3, [pc, #540]	; (8015a80 <HAL_SPI_TxRxCpltCallback+0x844>)
 8015862:	2201      	movs	r2, #1
 8015864:	701a      	strb	r2, [r3, #0]
 8015866:	e514      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				BSP_AUDIO_OUT_Resume();
 8015868:	f7fe fdb0 	bl	80143cc <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 801586c:	4b84      	ldr	r3, [pc, #528]	; (8015a80 <HAL_SPI_TxRxCpltCallback+0x844>)
 801586e:	2200      	movs	r2, #0
 8015870:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8015872:	4884      	ldr	r0, [pc, #528]	; (8015a84 <HAL_SPI_TxRxCpltCallback+0x848>)
 8015874:	f7f0 ff4a 	bl	800670c <HAL_TIM_Base_Stop_IT>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 8015878:	4a83      	ldr	r2, [pc, #524]	; (8015a88 <HAL_SPI_TxRxCpltCallback+0x84c>)
 801587a:	7893      	ldrb	r3, [r2, #2]
 801587c:	f023 0301 	bic.w	r3, r3, #1
 8015880:	7093      	strb	r3, [r2, #2]
 8015882:	e506      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					rekordbox.cue_start_position[0] = QuantizePosition(0);
 8015884:	2000      	movs	r0, #0
 8015886:	f7fb ff53 	bl	8011730 <QuantizePosition>
 801588a:	4a80      	ldr	r2, [pc, #512]	; (8015a8c <HAL_SPI_TxRxCpltCallback+0x850>)
 801588c:	f642 2308 	movw	r3, #10760	; 0x2a08
 8015890:	50d0      	str	r0, [r2, r3]
 8015892:	e7db      	b.n	801584c <HAL_SPI_TxRxCpltCallback+0x610>
				if(trak.state == PLAYING) {
 8015894:	4b7a      	ldr	r3, [pc, #488]	; (8015a80 <HAL_SPI_TxRxCpltCallback+0x844>)
 8015896:	781b      	ldrb	r3, [r3, #0]
 8015898:	2b00      	cmp	r3, #0
 801589a:	f47f acfa 	bne.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					BSP_AUDIO_OUT_Pause();
 801589e:	f7fe fd8d 	bl	80143bc <BSP_AUDIO_OUT_Pause>
					trak.state = STOPPED;
 80158a2:	4b77      	ldr	r3, [pc, #476]	; (8015a80 <HAL_SPI_TxRxCpltCallback+0x844>)
 80158a4:	2201      	movs	r2, #1
 80158a6:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim8); //start blinking
 80158a8:	4876      	ldr	r0, [pc, #472]	; (8015a84 <HAL_SPI_TxRxCpltCallback+0x848>)
 80158aa:	f7f0 fed7 	bl	800665c <HAL_TIM_Base_Start_IT>
					GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 80158ae:	4a77      	ldr	r2, [pc, #476]	; (8015a8c <HAL_SPI_TxRxCpltCallback+0x850>)
 80158b0:	f642 5390 	movw	r3, #11664	; 0x2d90
 80158b4:	58d3      	ldr	r3, [r2, r3]
 80158b6:	f603 2382 	addw	r3, r3, #2690	; 0xa82
 80158ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80158be:	f000 fc65 	bl	801618c <GoToPosition>
					TrackTime();
 80158c2:	f000 fc0b 	bl	80160dc <TrackTime>
 80158c6:	e4e4      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 80158c8:	4b73      	ldr	r3, [pc, #460]	; (8015a98 <HAL_SPI_TxRxCpltCallback+0x85c>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80158ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80158d2:	4291      	cmp	r1, r2
 80158d4:	f63f acdd 	bhi.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 80158d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158da:	2b00      	cmp	r3, #0
 80158dc:	f43f acd9 	beq.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					HAL_TIM_Base_Stop_IT(&htim9);
 80158e0:	486d      	ldr	r0, [pc, #436]	; (8015a98 <HAL_SPI_TxRxCpltCallback+0x85c>)
 80158e2:	f7f0 ff13 	bl	800670c <HAL_TIM_Base_Stop_IT>
					if(display.timemode == 0) {
 80158e6:	4b6a      	ldr	r3, [pc, #424]	; (8015a90 <HAL_SPI_TxRxCpltCallback+0x854>)
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	b923      	cbnz	r3, 80158f6 <HAL_SPI_TxRxCpltCallback+0x6ba>
						display.timemode = 1;
 80158ec:	4b68      	ldr	r3, [pc, #416]	; (8015a90 <HAL_SPI_TxRxCpltCallback+0x854>)
 80158ee:	2201      	movs	r2, #1
 80158f0:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 1;
 80158f2:	711a      	strb	r2, [r3, #4]
 80158f4:	e4cd      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
						display.timemode = 0;
 80158f6:	4b66      	ldr	r3, [pc, #408]	; (8015a90 <HAL_SPI_TxRxCpltCallback+0x854>)
 80158f8:	2200      	movs	r2, #0
 80158fa:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 0;
 80158fc:	711a      	strb	r2, [r3, #4]
 80158fe:	e4c8      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 8015900:	4b65      	ldr	r3, [pc, #404]	; (8015a98 <HAL_SPI_TxRxCpltCallback+0x85c>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015906:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801590a:	4291      	cmp	r1, r2
 801590c:	f63f acc1 	bhi.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 8015910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015912:	2b00      	cmp	r3, #0
 8015914:	f43f acbd 	beq.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					HAL_TIM_Base_Stop_IT(&htim9);
 8015918:	485f      	ldr	r0, [pc, #380]	; (8015a98 <HAL_SPI_TxRxCpltCallback+0x85c>)
 801591a:	f7f0 fef7 	bl	800670c <HAL_TIM_Base_Stop_IT>
					display.pitchmode++;
 801591e:	4a5c      	ldr	r2, [pc, #368]	; (8015a90 <HAL_SPI_TxRxCpltCallback+0x854>)
 8015920:	7853      	ldrb	r3, [r2, #1]
 8015922:	3301      	adds	r3, #1
 8015924:	b2db      	uxtb	r3, r3
 8015926:	7053      	strb	r3, [r2, #1]
					if(display.pitchmode > 3) display.pitchmode = 0;
 8015928:	2b03      	cmp	r3, #3
 801592a:	d902      	bls.n	8015932 <HAL_SPI_TxRxCpltCallback+0x6f6>
 801592c:	4613      	mov	r3, r2
 801592e:	2200      	movs	r2, #0
 8015930:	705a      	strb	r2, [r3, #1]
					if(display.pitchmode == 0) scale_pitch = 1; //wide
 8015932:	4b57      	ldr	r3, [pc, #348]	; (8015a90 <HAL_SPI_TxRxCpltCallback+0x854>)
 8015934:	785b      	ldrb	r3, [r3, #1]
 8015936:	bb7b      	cbnz	r3, 8015998 <HAL_SPI_TxRxCpltCallback+0x75c>
 8015938:	4b58      	ldr	r3, [pc, #352]	; (8015a9c <HAL_SPI_TxRxCpltCallback+0x860>)
 801593a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801593e:	601a      	str	r2, [r3, #0]
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 8015940:	4b4f      	ldr	r3, [pc, #316]	; (8015a80 <HAL_SPI_TxRxCpltCallback+0x844>)
 8015942:	885a      	ldrh	r2, [r3, #2]
 8015944:	ee07 2a90 	vmov	s15, r2
 8015948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801594c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8015aa0 <HAL_SPI_TxRxCpltCallback+0x864>
 8015950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015954:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8015aa4 <HAL_SPI_TxRxCpltCallback+0x868>
 8015958:	ee67 7a87 	vmul.f32	s15, s15, s14
 801595c:	4a4f      	ldr	r2, [pc, #316]	; (8015a9c <HAL_SPI_TxRxCpltCallback+0x860>)
 801595e:	ed92 7a00 	vldr	s14, [r2]
 8015962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015966:	edc3 7a01 	vstr	s15, [r3, #4]
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801596a:	891b      	ldrh	r3, [r3, #8]
 801596c:	085b      	lsrs	r3, r3, #1
 801596e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015976:	ee07 3a10 	vmov	s14, r3
 801597a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015986:	4b48      	ldr	r3, [pc, #288]	; (8015aa8 <HAL_SPI_TxRxCpltCallback+0x86c>)
 8015988:	edc3 7a00 	vstr	s15, [r3]
					BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801598c:	6819      	ldr	r1, [r3, #0]
 801598e:	2200      	movs	r2, #0
 8015990:	4846      	ldr	r0, [pc, #280]	; (8015aac <HAL_SPI_TxRxCpltCallback+0x870>)
 8015992:	f7fe fded 	bl	8014570 <BSP_AUDIO_OUT_ClockConfig>
 8015996:	e47c      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					else if(display.pitchmode == 1) scale_pitch = 0.16; //16%
 8015998:	2b01      	cmp	r3, #1
 801599a:	d007      	beq.n	80159ac <HAL_SPI_TxRxCpltCallback+0x770>
					else if(display.pitchmode == 2) scale_pitch = 0.1; //10%
 801599c:	2b02      	cmp	r3, #2
 801599e:	d009      	beq.n	80159b4 <HAL_SPI_TxRxCpltCallback+0x778>
					else if(display.pitchmode == 3) scale_pitch = 0.06; //6%
 80159a0:	2b03      	cmp	r3, #3
 80159a2:	d1cd      	bne.n	8015940 <HAL_SPI_TxRxCpltCallback+0x704>
 80159a4:	4b3d      	ldr	r3, [pc, #244]	; (8015a9c <HAL_SPI_TxRxCpltCallback+0x860>)
 80159a6:	4a42      	ldr	r2, [pc, #264]	; (8015ab0 <HAL_SPI_TxRxCpltCallback+0x874>)
 80159a8:	601a      	str	r2, [r3, #0]
 80159aa:	e7c9      	b.n	8015940 <HAL_SPI_TxRxCpltCallback+0x704>
					else if(display.pitchmode == 1) scale_pitch = 0.16; //16%
 80159ac:	4b3b      	ldr	r3, [pc, #236]	; (8015a9c <HAL_SPI_TxRxCpltCallback+0x860>)
 80159ae:	4a41      	ldr	r2, [pc, #260]	; (8015ab4 <HAL_SPI_TxRxCpltCallback+0x878>)
 80159b0:	601a      	str	r2, [r3, #0]
 80159b2:	e7c5      	b.n	8015940 <HAL_SPI_TxRxCpltCallback+0x704>
					else if(display.pitchmode == 2) scale_pitch = 0.1; //10%
 80159b4:	4b39      	ldr	r3, [pc, #228]	; (8015a9c <HAL_SPI_TxRxCpltCallback+0x860>)
 80159b6:	4a40      	ldr	r2, [pc, #256]	; (8015ab8 <HAL_SPI_TxRxCpltCallback+0x87c>)
 80159b8:	601a      	str	r2, [r3, #0]
 80159ba:	e7c1      	b.n	8015940 <HAL_SPI_TxRxCpltCallback+0x704>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 80159bc:	4b36      	ldr	r3, [pc, #216]	; (8015a98 <HAL_SPI_TxRxCpltCallback+0x85c>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80159c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80159c6:	4291      	cmp	r1, r2
 80159c8:	d801      	bhi.n	80159ce <HAL_SPI_TxRxCpltCallback+0x792>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 80159ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159cc:	b91b      	cbnz	r3, 80159d6 <HAL_SPI_TxRxCpltCallback+0x79a>
				button_flag &= (0 << 2);
 80159ce:	4b3b      	ldr	r3, [pc, #236]	; (8015abc <HAL_SPI_TxRxCpltCallback+0x880>)
 80159d0:	2200      	movs	r2, #0
 80159d2:	801a      	strh	r2, [r3, #0]
				break;
 80159d4:	e45d      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					HAL_TIM_Base_Stop_IT(&htim9);
 80159d6:	4830      	ldr	r0, [pc, #192]	; (8015a98 <HAL_SPI_TxRxCpltCallback+0x85c>)
 80159d8:	f7f0 fe98 	bl	800670c <HAL_TIM_Base_Stop_IT>
					if(display.loop == 1) display.loop = 0;
 80159dc:	4b2c      	ldr	r3, [pc, #176]	; (8015a90 <HAL_SPI_TxRxCpltCallback+0x854>)
 80159de:	7c1b      	ldrb	r3, [r3, #16]
 80159e0:	2b01      	cmp	r3, #1
 80159e2:	d1f4      	bne.n	80159ce <HAL_SPI_TxRxCpltCallback+0x792>
 80159e4:	4b2a      	ldr	r3, [pc, #168]	; (8015a90 <HAL_SPI_TxRxCpltCallback+0x854>)
 80159e6:	2200      	movs	r2, #0
 80159e8:	741a      	strb	r2, [r3, #16]
 80159ea:	e7f0      	b.n	80159ce <HAL_SPI_TxRxCpltCallback+0x792>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80159ec:	2028      	movs	r0, #40	; 0x28
 80159ee:	f7eb fcc3 	bl	8001378 <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80159f2:	4833      	ldr	r0, [pc, #204]	; (8015ac0 <HAL_SPI_TxRxCpltCallback+0x884>)
 80159f4:	6803      	ldr	r3, [r0, #0]
 80159f6:	f06f 0201 	mvn.w	r2, #1
 80159fa:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 80159fc:	2200      	movs	r2, #0
 80159fe:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8015a00:	f7f0 fe2c 	bl	800665c <HAL_TIM_Base_Start_IT>
			if(spi_rx[2] == 0x24) {
 8015a04:	4b2f      	ldr	r3, [pc, #188]	; (8015ac4 <HAL_SPI_TxRxCpltCallback+0x888>)
 8015a06:	789b      	ldrb	r3, [r3, #2]
 8015a08:	2b24      	cmp	r3, #36	; 0x24
 8015a0a:	f47f ac42 	bne.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
				if(spi_rx[3] == 0x01) {
 8015a0e:	4b2d      	ldr	r3, [pc, #180]	; (8015ac4 <HAL_SPI_TxRxCpltCallback+0x888>)
 8015a10:	78db      	ldrb	r3, [r3, #3]
 8015a12:	2b01      	cmp	r3, #1
 8015a14:	d011      	beq.n	8015a3a <HAL_SPI_TxRxCpltCallback+0x7fe>
				else if(spi_rx[3] == 0x7F) {
 8015a16:	2b7f      	cmp	r3, #127	; 0x7f
 8015a18:	f47f ac3b 	bne.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					if(menu_mode == 1) {
 8015a1c:	4b2a      	ldr	r3, [pc, #168]	; (8015ac8 <HAL_SPI_TxRxCpltCallback+0x88c>)
 8015a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8015a22:	2b01      	cmp	r3, #1
 8015a24:	d079      	beq.n	8015b1a <HAL_SPI_TxRxCpltCallback+0x8de>
						if(trak.state == PLAYING) {
 8015a26:	4b16      	ldr	r3, [pc, #88]	; (8015a80 <HAL_SPI_TxRxCpltCallback+0x844>)
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	f040 80a5 	bne.w	8015b7a <HAL_SPI_TxRxCpltCallback+0x93e>
							pulses--;
 8015a30:	4a26      	ldr	r2, [pc, #152]	; (8015acc <HAL_SPI_TxRxCpltCallback+0x890>)
 8015a32:	6813      	ldr	r3, [r2, #0]
 8015a34:	3b01      	subs	r3, #1
 8015a36:	6013      	str	r3, [r2, #0]
 8015a38:	e42b      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
					if(menu_mode == 1) {
 8015a3a:	4b23      	ldr	r3, [pc, #140]	; (8015ac8 <HAL_SPI_TxRxCpltCallback+0x88c>)
 8015a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8015a40:	2b01      	cmp	r3, #1
 8015a42:	d008      	beq.n	8015a56 <HAL_SPI_TxRxCpltCallback+0x81a>
						if(trak.state == PLAYING) {
 8015a44:	4b0e      	ldr	r3, [pc, #56]	; (8015a80 <HAL_SPI_TxRxCpltCallback+0x844>)
 8015a46:	781b      	ldrb	r3, [r3, #0]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d15a      	bne.n	8015b02 <HAL_SPI_TxRxCpltCallback+0x8c6>
							pulses++;
 8015a4c:	4a1f      	ldr	r2, [pc, #124]	; (8015acc <HAL_SPI_TxRxCpltCallback+0x890>)
 8015a4e:	6813      	ldr	r3, [r2, #0]
 8015a50:	3301      	adds	r3, #1
 8015a52:	6013      	str	r3, [r2, #0]
 8015a54:	e41d      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
						String_number++;
 8015a56:	4a1e      	ldr	r2, [pc, #120]	; (8015ad0 <HAL_SPI_TxRxCpltCallback+0x894>)
 8015a58:	6813      	ldr	r3, [r2, #0]
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	6013      	str	r3, [r2, #0]
						Mark_number = String_number;
 8015a5e:	4a1d      	ldr	r2, [pc, #116]	; (8015ad4 <HAL_SPI_TxRxCpltCallback+0x898>)
 8015a60:	6013      	str	r3, [r2, #0]
						if(Total_tracks < 7) {
 8015a62:	4a1d      	ldr	r2, [pc, #116]	; (8015ad8 <HAL_SPI_TxRxCpltCallback+0x89c>)
 8015a64:	8812      	ldrh	r2, [r2, #0]
 8015a66:	2a06      	cmp	r2, #6
 8015a68:	d838      	bhi.n	8015adc <HAL_SPI_TxRxCpltCallback+0x8a0>
							if(String_number + 1 > Total_tracks) {
 8015a6a:	3301      	adds	r3, #1
 8015a6c:	4293      	cmp	r3, r2
 8015a6e:	f77f ac10 	ble.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
								String_number = 0;
 8015a72:	2300      	movs	r3, #0
 8015a74:	4a16      	ldr	r2, [pc, #88]	; (8015ad0 <HAL_SPI_TxRxCpltCallback+0x894>)
 8015a76:	6013      	str	r3, [r2, #0]
								Mark_number = 0;
 8015a78:	4a16      	ldr	r2, [pc, #88]	; (8015ad4 <HAL_SPI_TxRxCpltCallback+0x898>)
 8015a7a:	6013      	str	r3, [r2, #0]
 8015a7c:	e409      	b.n	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
 8015a7e:	bf00      	nop
 8015a80:	20007f50 	.word	0x20007f50
 8015a84:	2001830c 	.word	0x2001830c
 8015a88:	20000038 	.word	0x20000038
 8015a8c:	200153a4 	.word	0x200153a4
 8015a90:	20001560 	.word	0x20001560
 8015a94:	200007f0 	.word	0x200007f0
 8015a98:	2001840c 	.word	0x2001840c
 8015a9c:	20000084 	.word	0x20000084
 8015aa0:	46800000 	.word	0x46800000
 8015aa4:	38800000 	.word	0x38800000
 8015aa8:	20000078 	.word	0x20000078
 8015aac:	2001813c 	.word	0x2001813c
 8015ab0:	3d75c28f 	.word	0x3d75c28f
 8015ab4:	3e23d70a 	.word	0x3e23d70a
 8015ab8:	3dcccccd 	.word	0x3dcccccd
 8015abc:	20001526 	.word	0x20001526
 8015ac0:	200183cc 	.word	0x200183cc
 8015ac4:	20001444 	.word	0x20001444
 8015ac8:	200007c8 	.word	0x200007c8
 8015acc:	20001534 	.word	0x20001534
 8015ad0:	2000007c 	.word	0x2000007c
 8015ad4:	20000074 	.word	0x20000074
 8015ad8:	200007dc 	.word	0x200007dc
							if(String_number > 6) {
 8015adc:	2b06      	cmp	r3, #6
 8015ade:	f77f abd8 	ble.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
								String_number = 0;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	494a      	ldr	r1, [pc, #296]	; (8015c10 <HAL_SPI_TxRxCpltCallback+0x9d4>)
 8015ae6:	600b      	str	r3, [r1, #0]
								Mark_number = 0;
 8015ae8:	494a      	ldr	r1, [pc, #296]	; (8015c14 <HAL_SPI_TxRxCpltCallback+0x9d8>)
 8015aea:	600b      	str	r3, [r1, #0]
								str_increment += 7;
 8015aec:	494a      	ldr	r1, [pc, #296]	; (8015c18 <HAL_SPI_TxRxCpltCallback+0x9dc>)
 8015aee:	680b      	ldr	r3, [r1, #0]
 8015af0:	3307      	adds	r3, #7
 8015af2:	600b      	str	r3, [r1, #0]
								if(str_increment >= Total_tracks - 7)
 8015af4:	3a07      	subs	r2, #7
 8015af6:	4293      	cmp	r3, r2
 8015af8:	f6ff abcb 	blt.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
									str_increment = Total_tracks - 7;
 8015afc:	600a      	str	r2, [r1, #0]
 8015afe:	f7ff bbc8 	b.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
						else if(trak.state == SETCUE) {
 8015b02:	2b02      	cmp	r3, #2
 8015b04:	f47f abc5 	bne.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
							GoToPosition(file_pos_wide + 2);
 8015b08:	4b44      	ldr	r3, [pc, #272]	; (8015c1c <HAL_SPI_TxRxCpltCallback+0x9e0>)
 8015b0a:	6818      	ldr	r0, [r3, #0]
 8015b0c:	3002      	adds	r0, #2
 8015b0e:	f000 fb3d 	bl	801618c <GoToPosition>
							GetTrackTime();
 8015b12:	f000 fbf5 	bl	8016300 <GetTrackTime>
 8015b16:	f7ff bbbc 	b.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
						String_number--;
 8015b1a:	4a3d      	ldr	r2, [pc, #244]	; (8015c10 <HAL_SPI_TxRxCpltCallback+0x9d4>)
 8015b1c:	6813      	ldr	r3, [r2, #0]
 8015b1e:	3b01      	subs	r3, #1
 8015b20:	6013      	str	r3, [r2, #0]
						Mark_number = String_number;
 8015b22:	4a3c      	ldr	r2, [pc, #240]	; (8015c14 <HAL_SPI_TxRxCpltCallback+0x9d8>)
 8015b24:	6013      	str	r3, [r2, #0]
						if(String_number < 0) {
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	f6bf abb3 	bge.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
							if(Total_tracks > 7) {
 8015b2c:	4b3c      	ldr	r3, [pc, #240]	; (8015c20 <HAL_SPI_TxRxCpltCallback+0x9e4>)
 8015b2e:	881a      	ldrh	r2, [r3, #0]
 8015b30:	2a07      	cmp	r2, #7
 8015b32:	d91b      	bls.n	8015b6c <HAL_SPI_TxRxCpltCallback+0x930>
								String_number = 6;
 8015b34:	2306      	movs	r3, #6
 8015b36:	4936      	ldr	r1, [pc, #216]	; (8015c10 <HAL_SPI_TxRxCpltCallback+0x9d4>)
 8015b38:	600b      	str	r3, [r1, #0]
								Mark_number = 6;
 8015b3a:	4936      	ldr	r1, [pc, #216]	; (8015c14 <HAL_SPI_TxRxCpltCallback+0x9d8>)
 8015b3c:	600b      	str	r3, [r1, #0]
								str_increment -= 7;
 8015b3e:	4936      	ldr	r1, [pc, #216]	; (8015c18 <HAL_SPI_TxRxCpltCallback+0x9dc>)
 8015b40:	680b      	ldr	r3, [r1, #0]
 8015b42:	3b07      	subs	r3, #7
 8015b44:	600b      	str	r3, [r1, #0]
								if(str_increment == Total_tracks - 7)
 8015b46:	3a07      	subs	r2, #7
 8015b48:	4293      	cmp	r3, r2
 8015b4a:	d105      	bne.n	8015b58 <HAL_SPI_TxRxCpltCallback+0x91c>
									str_increment = (str_increment / 7) * 7;
 8015b4c:	2207      	movs	r2, #7
 8015b4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015b52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015b56:	600b      	str	r3, [r1, #0]
								if(str_increment <= 0)
 8015b58:	4b2f      	ldr	r3, [pc, #188]	; (8015c18 <HAL_SPI_TxRxCpltCallback+0x9dc>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	f73f ab98 	bgt.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
									str_increment = 0;
 8015b62:	4b2d      	ldr	r3, [pc, #180]	; (8015c18 <HAL_SPI_TxRxCpltCallback+0x9dc>)
 8015b64:	2200      	movs	r2, #0
 8015b66:	601a      	str	r2, [r3, #0]
 8015b68:	f7ff bb93 	b.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
								String_number = Total_tracks - 1;
 8015b6c:	3a01      	subs	r2, #1
 8015b6e:	4b28      	ldr	r3, [pc, #160]	; (8015c10 <HAL_SPI_TxRxCpltCallback+0x9d4>)
 8015b70:	601a      	str	r2, [r3, #0]
								Mark_number = Total_tracks - 1;;
 8015b72:	4b28      	ldr	r3, [pc, #160]	; (8015c14 <HAL_SPI_TxRxCpltCallback+0x9d8>)
 8015b74:	601a      	str	r2, [r3, #0]
 8015b76:	f7ff bb8c 	b.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
						else if(trak.state == SETCUE) {
 8015b7a:	2b02      	cmp	r3, #2
 8015b7c:	f47f ab89 	bne.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
							GoToPosition(file_pos_wide - 2);
 8015b80:	4b26      	ldr	r3, [pc, #152]	; (8015c1c <HAL_SPI_TxRxCpltCallback+0x9e0>)
 8015b82:	6818      	ldr	r0, [r3, #0]
 8015b84:	3802      	subs	r0, #2
 8015b86:	f000 fb01 	bl	801618c <GoToPosition>
							GetTrackTime();
 8015b8a:	f000 fbb9 	bl	8016300 <GetTrackTime>
 8015b8e:	f7ff bb80 	b.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			if(delta < 0) delta = pitch_rx - trak.pitch;
 8015b92:	1ae2      	subs	r2, r4, r3
 8015b94:	f7ff bb76 	b.w	8015284 <HAL_SPI_TxRxCpltCallback+0x48>
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 8015b98:	ee07 4a90 	vmov	s15, r4
 8015b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ba0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8015c24 <HAL_SPI_TxRxCpltCallback+0x9e8>
 8015ba4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015ba8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8015c28 <HAL_SPI_TxRxCpltCallback+0x9ec>
 8015bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015bb0:	4b1e      	ldr	r3, [pc, #120]	; (8015c2c <HAL_SPI_TxRxCpltCallback+0x9f0>)
 8015bb2:	ed93 7a00 	vldr	s14, [r3]
 8015bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015bba:	4d1d      	ldr	r5, [pc, #116]	; (8015c30 <HAL_SPI_TxRxCpltCallback+0x9f4>)
 8015bbc:	edc5 7a01 	vstr	s15, [r5, #4]
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 8015bc0:	892b      	ldrh	r3, [r5, #8]
 8015bc2:	085b      	lsrs	r3, r3, #1
 8015bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015bcc:	ee07 3a10 	vmov	s14, r3
 8015bd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015bdc:	4b15      	ldr	r3, [pc, #84]	; (8015c34 <HAL_SPI_TxRxCpltCallback+0x9f8>)
 8015bde:	edc3 7a00 	vstr	s15, [r3]
				BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 8015be2:	6819      	ldr	r1, [r3, #0]
 8015be4:	2200      	movs	r2, #0
 8015be6:	4814      	ldr	r0, [pc, #80]	; (8015c38 <HAL_SPI_TxRxCpltCallback+0x9fc>)
 8015be8:	f7fe fcc2 	bl	8014570 <BSP_AUDIO_OUT_ClockConfig>
				trak.pitch = pitch_rx;
 8015bec:	806c      	strh	r4, [r5, #2]
 8015bee:	f7ff bb50 	b.w	8015292 <HAL_SPI_TxRxCpltCallback+0x56>
			}
			break;
		}
		default: break;
		}
	for(int i = 0; i < 4; i++) spi_rx[i] = 0;
 8015bf2:	4a12      	ldr	r2, [pc, #72]	; (8015c3c <HAL_SPI_TxRxCpltCallback+0xa00>)
 8015bf4:	2100      	movs	r1, #0
 8015bf6:	54d1      	strb	r1, [r2, r3]
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	2b03      	cmp	r3, #3
 8015bfc:	ddf9      	ble.n	8015bf2 <HAL_SPI_TxRxCpltCallback+0x9b6>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 8015bfe:	2304      	movs	r3, #4
 8015c00:	4a0e      	ldr	r2, [pc, #56]	; (8015c3c <HAL_SPI_TxRxCpltCallback+0xa00>)
 8015c02:	490f      	ldr	r1, [pc, #60]	; (8015c40 <HAL_SPI_TxRxCpltCallback+0xa04>)
 8015c04:	480f      	ldr	r0, [pc, #60]	; (8015c44 <HAL_SPI_TxRxCpltCallback+0xa08>)
 8015c06:	f7f0 fb05 	bl	8006214 <HAL_SPI_TransmitReceive_IT>
}
 8015c0a:	ecbd 8b02 	vpop	{d8}
 8015c0e:	bd70      	pop	{r4, r5, r6, pc}
 8015c10:	2000007c 	.word	0x2000007c
 8015c14:	20000074 	.word	0x20000074
 8015c18:	20001538 	.word	0x20001538
 8015c1c:	200007f0 	.word	0x200007f0
 8015c20:	200007dc 	.word	0x200007dc
 8015c24:	467ffc00 	.word	0x467ffc00
 8015c28:	38800000 	.word	0x38800000
 8015c2c:	20000084 	.word	0x20000084
 8015c30:	20007f50 	.word	0x20007f50
 8015c34:	20000078 	.word	0x20000078
 8015c38:	2001813c 	.word	0x2001813c
 8015c3c:	20001444 	.word	0x20001444
 8015c40:	20000038 	.word	0x20000038
 8015c44:	200182a4 	.word	0x200182a4

08015c48 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8015c48:	b508      	push	{r3, lr}
 8015c4a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8015c4c:	4a0b      	ldr	r2, [pc, #44]	; (8015c7c <_sbrk+0x34>)
 8015c4e:	6812      	ldr	r2, [r2, #0]
 8015c50:	b142      	cbz	r2, 8015c64 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8015c52:	4a0a      	ldr	r2, [pc, #40]	; (8015c7c <_sbrk+0x34>)
 8015c54:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8015c56:	4403      	add	r3, r0
 8015c58:	466a      	mov	r2, sp
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	d806      	bhi.n	8015c6c <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8015c5e:	4a07      	ldr	r2, [pc, #28]	; (8015c7c <_sbrk+0x34>)
 8015c60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8015c62:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8015c64:	4a05      	ldr	r2, [pc, #20]	; (8015c7c <_sbrk+0x34>)
 8015c66:	4906      	ldr	r1, [pc, #24]	; (8015c80 <_sbrk+0x38>)
 8015c68:	6011      	str	r1, [r2, #0]
 8015c6a:	e7f2      	b.n	8015c52 <_sbrk+0xa>
		errno = ENOMEM;
 8015c6c:	f001 fada 	bl	8017224 <__errno>
 8015c70:	230c      	movs	r3, #12
 8015c72:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8015c74:	f04f 30ff 	mov.w	r0, #4294967295
 8015c78:	e7f3      	b.n	8015c62 <_sbrk+0x1a>
 8015c7a:	bf00      	nop
 8015c7c:	20001544 	.word	0x20001544
 8015c80:	200184c0 	.word	0x200184c0

08015c84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015c84:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8015c86:	4a0f      	ldr	r2, [pc, #60]	; (8015cc4 <SystemInit+0x40>)
 8015c88:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8015c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8015c94:	4b0c      	ldr	r3, [pc, #48]	; (8015cc8 <SystemInit+0x44>)
 8015c96:	6819      	ldr	r1, [r3, #0]
 8015c98:	f041 0101 	orr.w	r1, r1, #1
 8015c9c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8015c9e:	2000      	movs	r0, #0
 8015ca0:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8015ca2:	681c      	ldr	r4, [r3, #0]
 8015ca4:	4909      	ldr	r1, [pc, #36]	; (8015ccc <SystemInit+0x48>)
 8015ca6:	4021      	ands	r1, r4
 8015ca8:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8015caa:	4909      	ldr	r1, [pc, #36]	; (8015cd0 <SystemInit+0x4c>)
 8015cac:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8015cae:	6819      	ldr	r1, [r3, #0]
 8015cb0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8015cb4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8015cb6:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8015cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015cbc:	6093      	str	r3, [r2, #8]
#endif
}
 8015cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cc2:	4770      	bx	lr
 8015cc4:	e000ed00 	.word	0xe000ed00
 8015cc8:	40023800 	.word	0x40023800
 8015ccc:	fef6ffff 	.word	0xfef6ffff
 8015cd0:	24003010 	.word	0x24003010

08015cd4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8015cd4:	b500      	push	{lr}
 8015cd6:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015cd8:	2300      	movs	r3, #0
 8015cda:	9304      	str	r3, [sp, #16]
 8015cdc:	9305      	str	r3, [sp, #20]
 8015cde:	9306      	str	r3, [sp, #24]
 8015ce0:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015ce2:	9301      	str	r3, [sp, #4]
 8015ce4:	9302      	str	r3, [sp, #8]
 8015ce6:	9303      	str	r3, [sp, #12]

  htim4.Instance = TIM4;
 8015ce8:	4815      	ldr	r0, [pc, #84]	; (8015d40 <MX_TIM4_Init+0x6c>)
 8015cea:	4a16      	ldr	r2, [pc, #88]	; (8015d44 <MX_TIM4_Init+0x70>)
 8015cec:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9999;
 8015cee:	f242 720f 	movw	r2, #9999	; 0x270f
 8015cf2:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015cf4:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 399;
 8015cf6:	f240 128f 	movw	r2, #399	; 0x18f
 8015cfa:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015cfc:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015cfe:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8015d00:	f7f0 feb4 	bl	8006a6c <HAL_TIM_Base_Init>
 8015d04:	b998      	cbnz	r0, 8015d2e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8015d06:	a908      	add	r1, sp, #32
 8015d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015d0c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8015d10:	480b      	ldr	r0, [pc, #44]	; (8015d40 <MX_TIM4_Init+0x6c>)
 8015d12:	f7f0 ff49 	bl	8006ba8 <HAL_TIM_ConfigClockSource>
 8015d16:	b968      	cbnz	r0, 8015d34 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015d1c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8015d1e:	a901      	add	r1, sp, #4
 8015d20:	4807      	ldr	r0, [pc, #28]	; (8015d40 <MX_TIM4_Init+0x6c>)
 8015d22:	f7f1 f97d 	bl	8007020 <HAL_TIMEx_MasterConfigSynchronization>
 8015d26:	b940      	cbnz	r0, 8015d3a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }

}
 8015d28:	b009      	add	sp, #36	; 0x24
 8015d2a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8015d2e:	f7fc fc97 	bl	8012660 <Error_Handler>
 8015d32:	e7e8      	b.n	8015d06 <MX_TIM4_Init+0x32>
    Error_Handler();
 8015d34:	f7fc fc94 	bl	8012660 <Error_Handler>
 8015d38:	e7ee      	b.n	8015d18 <MX_TIM4_Init+0x44>
    Error_Handler();
 8015d3a:	f7fc fc91 	bl	8012660 <Error_Handler>
}
 8015d3e:	e7f3      	b.n	8015d28 <MX_TIM4_Init+0x54>
 8015d40:	2001834c 	.word	0x2001834c
 8015d44:	40000800 	.word	0x40000800

08015d48 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8015d48:	b500      	push	{lr}
 8015d4a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	9304      	str	r3, [sp, #16]
 8015d50:	9305      	str	r3, [sp, #20]
 8015d52:	9306      	str	r3, [sp, #24]
 8015d54:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015d56:	9301      	str	r3, [sp, #4]
 8015d58:	9302      	str	r3, [sp, #8]
 8015d5a:	9303      	str	r3, [sp, #12]

  htim5.Instance = TIM5;
 8015d5c:	4815      	ldr	r0, [pc, #84]	; (8015db4 <MX_TIM5_Init+0x6c>)
 8015d5e:	4a16      	ldr	r2, [pc, #88]	; (8015db8 <MX_TIM5_Init+0x70>)
 8015d60:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 19199;
 8015d62:	f644 22ff 	movw	r2, #19199	; 0x4aff
 8015d66:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015d68:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 999;
 8015d6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8015d6e:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015d70:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015d72:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8015d74:	f7f0 fe7a 	bl	8006a6c <HAL_TIM_Base_Init>
 8015d78:	b998      	cbnz	r0, 8015da2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8015d7a:	a908      	add	r1, sp, #32
 8015d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015d80:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8015d84:	480b      	ldr	r0, [pc, #44]	; (8015db4 <MX_TIM5_Init+0x6c>)
 8015d86:	f7f0 ff0f 	bl	8006ba8 <HAL_TIM_ConfigClockSource>
 8015d8a:	b968      	cbnz	r0, 8015da8 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015d90:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8015d92:	a901      	add	r1, sp, #4
 8015d94:	4807      	ldr	r0, [pc, #28]	; (8015db4 <MX_TIM5_Init+0x6c>)
 8015d96:	f7f1 f943 	bl	8007020 <HAL_TIMEx_MasterConfigSynchronization>
 8015d9a:	b940      	cbnz	r0, 8015dae <MX_TIM5_Init+0x66>
  {
    Error_Handler();
  }

}
 8015d9c:	b009      	add	sp, #36	; 0x24
 8015d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8015da2:	f7fc fc5d 	bl	8012660 <Error_Handler>
 8015da6:	e7e8      	b.n	8015d7a <MX_TIM5_Init+0x32>
    Error_Handler();
 8015da8:	f7fc fc5a 	bl	8012660 <Error_Handler>
 8015dac:	e7ee      	b.n	8015d8c <MX_TIM5_Init+0x44>
    Error_Handler();
 8015dae:	f7fc fc57 	bl	8012660 <Error_Handler>
}
 8015db2:	e7f3      	b.n	8015d9c <MX_TIM5_Init+0x54>
 8015db4:	2001838c 	.word	0x2001838c
 8015db8:	40000c00 	.word	0x40000c00

08015dbc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8015dbc:	b500      	push	{lr}
 8015dbe:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	9301      	str	r3, [sp, #4]
 8015dc4:	9302      	str	r3, [sp, #8]
 8015dc6:	9303      	str	r3, [sp, #12]

  htim6.Instance = TIM6;
 8015dc8:	480f      	ldr	r0, [pc, #60]	; (8015e08 <MX_TIM6_Init+0x4c>)
 8015dca:	4a10      	ldr	r2, [pc, #64]	; (8015e0c <MX_TIM6_Init+0x50>)
 8015dcc:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 9999;
 8015dce:	f242 720f 	movw	r2, #9999	; 0x270f
 8015dd2:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015dd4:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 999;
 8015dd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8015dda:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015ddc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8015dde:	f7f0 fe45 	bl	8006a6c <HAL_TIM_Base_Init>
 8015de2:	b950      	cbnz	r0, 8015dfa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015de4:	2300      	movs	r3, #0
 8015de6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015de8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8015dea:	a901      	add	r1, sp, #4
 8015dec:	4806      	ldr	r0, [pc, #24]	; (8015e08 <MX_TIM6_Init+0x4c>)
 8015dee:	f7f1 f917 	bl	8007020 <HAL_TIMEx_MasterConfigSynchronization>
 8015df2:	b928      	cbnz	r0, 8015e00 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
  }

}
 8015df4:	b005      	add	sp, #20
 8015df6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8015dfa:	f7fc fc31 	bl	8012660 <Error_Handler>
 8015dfe:	e7f1      	b.n	8015de4 <MX_TIM6_Init+0x28>
    Error_Handler();
 8015e00:	f7fc fc2e 	bl	8012660 <Error_Handler>
}
 8015e04:	e7f6      	b.n	8015df4 <MX_TIM6_Init+0x38>
 8015e06:	bf00      	nop
 8015e08:	200183cc 	.word	0x200183cc
 8015e0c:	40001000 	.word	0x40001000

08015e10 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8015e10:	b500      	push	{lr}
 8015e12:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015e14:	2300      	movs	r3, #0
 8015e16:	9301      	str	r3, [sp, #4]
 8015e18:	9302      	str	r3, [sp, #8]
 8015e1a:	9303      	str	r3, [sp, #12]

  htim7.Instance = TIM7;
 8015e1c:	480f      	ldr	r0, [pc, #60]	; (8015e5c <MX_TIM7_Init+0x4c>)
 8015e1e:	4a10      	ldr	r2, [pc, #64]	; (8015e60 <MX_TIM7_Init+0x50>)
 8015e20:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 9999;
 8015e22:	f242 720f 	movw	r2, #9999	; 0x270f
 8015e26:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015e28:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 4999;
 8015e2a:	f241 3287 	movw	r2, #4999	; 0x1387
 8015e2e:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015e30:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8015e32:	f7f0 fe1b 	bl	8006a6c <HAL_TIM_Base_Init>
 8015e36:	b950      	cbnz	r0, 8015e4e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015e38:	2300      	movs	r3, #0
 8015e3a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015e3c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8015e3e:	a901      	add	r1, sp, #4
 8015e40:	4806      	ldr	r0, [pc, #24]	; (8015e5c <MX_TIM7_Init+0x4c>)
 8015e42:	f7f1 f8ed 	bl	8007020 <HAL_TIMEx_MasterConfigSynchronization>
 8015e46:	b928      	cbnz	r0, 8015e54 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
  }

}
 8015e48:	b005      	add	sp, #20
 8015e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8015e4e:	f7fc fc07 	bl	8012660 <Error_Handler>
 8015e52:	e7f1      	b.n	8015e38 <MX_TIM7_Init+0x28>
    Error_Handler();
 8015e54:	f7fc fc04 	bl	8012660 <Error_Handler>
}
 8015e58:	e7f6      	b.n	8015e48 <MX_TIM7_Init+0x38>
 8015e5a:	bf00      	nop
 8015e5c:	2001844c 	.word	0x2001844c
 8015e60:	40001400 	.word	0x40001400

08015e64 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8015e64:	b500      	push	{lr}
 8015e66:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015e68:	2300      	movs	r3, #0
 8015e6a:	9304      	str	r3, [sp, #16]
 8015e6c:	9305      	str	r3, [sp, #20]
 8015e6e:	9306      	str	r3, [sp, #24]
 8015e70:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015e72:	9301      	str	r3, [sp, #4]
 8015e74:	9302      	str	r3, [sp, #8]
 8015e76:	9303      	str	r3, [sp, #12]

  htim8.Instance = TIM8;
 8015e78:	4816      	ldr	r0, [pc, #88]	; (8015ed4 <MX_TIM8_Init+0x70>)
 8015e7a:	4a17      	ldr	r2, [pc, #92]	; (8015ed8 <MX_TIM8_Init+0x74>)
 8015e7c:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 9599;
 8015e7e:	f242 527f 	movw	r2, #9599	; 0x257f
 8015e82:	6042      	str	r2, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015e84:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 9999;
 8015e86:	f242 720f 	movw	r2, #9999	; 0x270f
 8015e8a:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015e8c:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8015e8e:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015e90:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8015e92:	f7f0 fdeb 	bl	8006a6c <HAL_TIM_Base_Init>
 8015e96:	b9a0      	cbnz	r0, 8015ec2 <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8015e98:	a908      	add	r1, sp, #32
 8015e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015e9e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8015ea2:	480c      	ldr	r0, [pc, #48]	; (8015ed4 <MX_TIM8_Init+0x70>)
 8015ea4:	f7f0 fe80 	bl	8006ba8 <HAL_TIM_ConfigClockSource>
 8015ea8:	b970      	cbnz	r0, 8015ec8 <MX_TIM8_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8015eae:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015eb0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8015eb2:	a901      	add	r1, sp, #4
 8015eb4:	4807      	ldr	r0, [pc, #28]	; (8015ed4 <MX_TIM8_Init+0x70>)
 8015eb6:	f7f1 f8b3 	bl	8007020 <HAL_TIMEx_MasterConfigSynchronization>
 8015eba:	b940      	cbnz	r0, 8015ece <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
  }

}
 8015ebc:	b009      	add	sp, #36	; 0x24
 8015ebe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8015ec2:	f7fc fbcd 	bl	8012660 <Error_Handler>
 8015ec6:	e7e7      	b.n	8015e98 <MX_TIM8_Init+0x34>
    Error_Handler();
 8015ec8:	f7fc fbca 	bl	8012660 <Error_Handler>
 8015ecc:	e7ed      	b.n	8015eaa <MX_TIM8_Init+0x46>
    Error_Handler();
 8015ece:	f7fc fbc7 	bl	8012660 <Error_Handler>
}
 8015ed2:	e7f3      	b.n	8015ebc <MX_TIM8_Init+0x58>
 8015ed4:	2001830c 	.word	0x2001830c
 8015ed8:	40010400 	.word	0x40010400

08015edc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8015edc:	b500      	push	{lr}
 8015ede:	b085      	sub	sp, #20
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	9300      	str	r3, [sp, #0]
 8015ee4:	9301      	str	r3, [sp, #4]
 8015ee6:	9302      	str	r3, [sp, #8]
 8015ee8:	9303      	str	r3, [sp, #12]

  htim9.Instance = TIM9;
 8015eea:	4810      	ldr	r0, [pc, #64]	; (8015f2c <MX_TIM9_Init+0x50>)
 8015eec:	4a10      	ldr	r2, [pc, #64]	; (8015f30 <MX_TIM9_Init+0x54>)
 8015eee:	6002      	str	r2, [r0, #0]
  htim9.Init.Prescaler = 9599;
 8015ef0:	f242 527f 	movw	r2, #9599	; 0x257f
 8015ef4:	6042      	str	r2, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015ef6:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 19999;
 8015ef8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8015efc:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015efe:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015f00:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8015f02:	f7f0 fdb3 	bl	8006a6c <HAL_TIM_Base_Init>
 8015f06:	b958      	cbnz	r0, 8015f20 <MX_TIM9_Init+0x44>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8015f08:	a904      	add	r1, sp, #16
 8015f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015f0e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8015f12:	4806      	ldr	r0, [pc, #24]	; (8015f2c <MX_TIM9_Init+0x50>)
 8015f14:	f7f0 fe48 	bl	8006ba8 <HAL_TIM_ConfigClockSource>
 8015f18:	b928      	cbnz	r0, 8015f26 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
  }

}
 8015f1a:	b005      	add	sp, #20
 8015f1c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8015f20:	f7fc fb9e 	bl	8012660 <Error_Handler>
 8015f24:	e7f0      	b.n	8015f08 <MX_TIM9_Init+0x2c>
    Error_Handler();
 8015f26:	f7fc fb9b 	bl	8012660 <Error_Handler>
}
 8015f2a:	e7f6      	b.n	8015f1a <MX_TIM9_Init+0x3e>
 8015f2c:	2001840c 	.word	0x2001840c
 8015f30:	40014000 	.word	0x40014000

08015f34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8015f34:	b510      	push	{r4, lr}
 8015f36:	b086      	sub	sp, #24

  if(tim_baseHandle->Instance==TIM4)
 8015f38:	6803      	ldr	r3, [r0, #0]
 8015f3a:	4a55      	ldr	r2, [pc, #340]	; (8016090 <HAL_TIM_Base_MspInit+0x15c>)
 8015f3c:	4293      	cmp	r3, r2
 8015f3e:	d011      	beq.n	8015f64 <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 8015f40:	4a54      	ldr	r2, [pc, #336]	; (8016094 <HAL_TIM_Base_MspInit+0x160>)
 8015f42:	4293      	cmp	r3, r2
 8015f44:	d045      	beq.n	8015fd2 <HAL_TIM_Base_MspInit+0x9e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 8015f46:	4a54      	ldr	r2, [pc, #336]	; (8016098 <HAL_TIM_Base_MspInit+0x164>)
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	d055      	beq.n	8015ff8 <HAL_TIM_Base_MspInit+0xc4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 8015f4c:	4a53      	ldr	r2, [pc, #332]	; (801609c <HAL_TIM_Base_MspInit+0x168>)
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	d065      	beq.n	801601e <HAL_TIM_Base_MspInit+0xea>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 8015f52:	4a53      	ldr	r2, [pc, #332]	; (80160a0 <HAL_TIM_Base_MspInit+0x16c>)
 8015f54:	4293      	cmp	r3, r2
 8015f56:	d075      	beq.n	8016044 <HAL_TIM_Base_MspInit+0x110>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 8015f58:	4a52      	ldr	r2, [pc, #328]	; (80160a4 <HAL_TIM_Base_MspInit+0x170>)
 8015f5a:	4293      	cmp	r3, r2
 8015f5c:	f000 8085 	beq.w	801606a <HAL_TIM_Base_MspInit+0x136>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8015f60:	b006      	add	sp, #24
 8015f62:	bd10      	pop	{r4, pc}
	  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_IT_UPDATE);
 8015f64:	4b50      	ldr	r3, [pc, #320]	; (80160a8 <HAL_TIM_Base_MspInit+0x174>)
 8015f66:	681c      	ldr	r4, [r3, #0]
 8015f68:	f06f 0301 	mvn.w	r3, #1
 8015f6c:	6123      	str	r3, [r4, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_IT_UPDATE);
 8015f6e:	4a4f      	ldr	r2, [pc, #316]	; (80160ac <HAL_TIM_Base_MspInit+0x178>)
 8015f70:	6810      	ldr	r0, [r2, #0]
 8015f72:	6103      	str	r3, [r0, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 8015f74:	4a4e      	ldr	r2, [pc, #312]	; (80160b0 <HAL_TIM_Base_MspInit+0x17c>)
 8015f76:	6811      	ldr	r1, [r2, #0]
 8015f78:	610b      	str	r3, [r1, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_IT_UPDATE);
 8015f7a:	4a4e      	ldr	r2, [pc, #312]	; (80160b4 <HAL_TIM_Base_MspInit+0x180>)
 8015f7c:	6812      	ldr	r2, [r2, #0]
 8015f7e:	6113      	str	r3, [r2, #16]
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8015f80:	68e3      	ldr	r3, [r4, #12]
 8015f82:	f043 0301 	orr.w	r3, r3, #1
 8015f86:	60e3      	str	r3, [r4, #12]
	  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 8015f88:	68c3      	ldr	r3, [r0, #12]
 8015f8a:	f043 0301 	orr.w	r3, r3, #1
 8015f8e:	60c3      	str	r3, [r0, #12]
	  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8015f90:	68cb      	ldr	r3, [r1, #12]
 8015f92:	f043 0301 	orr.w	r3, r3, #1
 8015f96:	60cb      	str	r3, [r1, #12]
	  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8015f98:	68d3      	ldr	r3, [r2, #12]
 8015f9a:	f043 0301 	orr.w	r3, r3, #1
 8015f9e:	60d3      	str	r3, [r2, #12]
	  __HAL_TIM_ENABLE_IT(&htim9, TIM_IT_UPDATE);
 8015fa0:	4b45      	ldr	r3, [pc, #276]	; (80160b8 <HAL_TIM_Base_MspInit+0x184>)
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	68d3      	ldr	r3, [r2, #12]
 8015fa6:	f043 0301 	orr.w	r3, r3, #1
 8015faa:	60d3      	str	r3, [r2, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
 8015fac:	4b43      	ldr	r3, [pc, #268]	; (80160bc <HAL_TIM_Base_MspInit+0x188>)
 8015fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015fb0:	f042 0204 	orr.w	r2, r2, #4
 8015fb4:	641a      	str	r2, [r3, #64]	; 0x40
 8015fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fb8:	f003 0304 	and.w	r3, r3, #4
 8015fbc:	9300      	str	r3, [sp, #0]
 8015fbe:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	2101      	movs	r1, #1
 8015fc4:	201e      	movs	r0, #30
 8015fc6:	f7eb f97b 	bl	80012c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8015fca:	201e      	movs	r0, #30
 8015fcc:	f7eb f9bc 	bl	8001348 <HAL_NVIC_EnableIRQ>
 8015fd0:	e7c6      	b.n	8015f60 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8015fd2:	4b3a      	ldr	r3, [pc, #232]	; (80160bc <HAL_TIM_Base_MspInit+0x188>)
 8015fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015fd6:	f042 0208 	orr.w	r2, r2, #8
 8015fda:	641a      	str	r2, [r3, #64]	; 0x40
 8015fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fde:	f003 0308 	and.w	r3, r3, #8
 8015fe2:	9301      	str	r3, [sp, #4]
 8015fe4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	2103      	movs	r1, #3
 8015fea:	2032      	movs	r0, #50	; 0x32
 8015fec:	f7eb f968 	bl	80012c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8015ff0:	2032      	movs	r0, #50	; 0x32
 8015ff2:	f7eb f9a9 	bl	8001348 <HAL_NVIC_EnableIRQ>
 8015ff6:	e7b3      	b.n	8015f60 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8015ff8:	4b30      	ldr	r3, [pc, #192]	; (80160bc <HAL_TIM_Base_MspInit+0x188>)
 8015ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015ffc:	f042 0210 	orr.w	r2, r2, #16
 8016000:	641a      	str	r2, [r3, #64]	; 0x40
 8016002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016004:	f003 0310 	and.w	r3, r3, #16
 8016008:	9302      	str	r3, [sp, #8]
 801600a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 801600c:	2200      	movs	r2, #0
 801600e:	2101      	movs	r1, #1
 8016010:	2036      	movs	r0, #54	; 0x36
 8016012:	f7eb f955 	bl	80012c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8016016:	2036      	movs	r0, #54	; 0x36
 8016018:	f7eb f996 	bl	8001348 <HAL_NVIC_EnableIRQ>
 801601c:	e7a0      	b.n	8015f60 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 801601e:	4b27      	ldr	r3, [pc, #156]	; (80160bc <HAL_TIM_Base_MspInit+0x188>)
 8016020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016022:	f042 0220 	orr.w	r2, r2, #32
 8016026:	641a      	str	r2, [r3, #64]	; 0x40
 8016028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801602a:	f003 0320 	and.w	r3, r3, #32
 801602e:	9303      	str	r3, [sp, #12]
 8016030:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8016032:	2200      	movs	r2, #0
 8016034:	2104      	movs	r1, #4
 8016036:	2037      	movs	r0, #55	; 0x37
 8016038:	f7eb f942 	bl	80012c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801603c:	2037      	movs	r0, #55	; 0x37
 801603e:	f7eb f983 	bl	8001348 <HAL_NVIC_EnableIRQ>
 8016042:	e78d      	b.n	8015f60 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8016044:	4b1d      	ldr	r3, [pc, #116]	; (80160bc <HAL_TIM_Base_MspInit+0x188>)
 8016046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016048:	f042 0202 	orr.w	r2, r2, #2
 801604c:	645a      	str	r2, [r3, #68]	; 0x44
 801604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016050:	f003 0302 	and.w	r3, r3, #2
 8016054:	9304      	str	r3, [sp, #16]
 8016056:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8016058:	2200      	movs	r2, #0
 801605a:	2101      	movs	r1, #1
 801605c:	202c      	movs	r0, #44	; 0x2c
 801605e:	f7eb f92f 	bl	80012c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8016062:	202c      	movs	r0, #44	; 0x2c
 8016064:	f7eb f970 	bl	8001348 <HAL_NVIC_EnableIRQ>
 8016068:	e77a      	b.n	8015f60 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 801606a:	4b14      	ldr	r3, [pc, #80]	; (80160bc <HAL_TIM_Base_MspInit+0x188>)
 801606c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801606e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8016072:	645a      	str	r2, [r3, #68]	; 0x44
 8016074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801607a:	9305      	str	r3, [sp, #20]
 801607c:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 801607e:	2200      	movs	r2, #0
 8016080:	2102      	movs	r1, #2
 8016082:	2018      	movs	r0, #24
 8016084:	f7eb f91c 	bl	80012c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8016088:	2018      	movs	r0, #24
 801608a:	f7eb f95d 	bl	8001348 <HAL_NVIC_EnableIRQ>
}
 801608e:	e767      	b.n	8015f60 <HAL_TIM_Base_MspInit+0x2c>
 8016090:	40000800 	.word	0x40000800
 8016094:	40000c00 	.word	0x40000c00
 8016098:	40001000 	.word	0x40001000
 801609c:	40001400 	.word	0x40001400
 80160a0:	40010400 	.word	0x40010400
 80160a4:	40014000 	.word	0x40014000
 80160a8:	2001834c 	.word	0x2001834c
 80160ac:	2001838c 	.word	0x2001838c
 80160b0:	200183cc 	.word	0x200183cc
 80160b4:	2001844c 	.word	0x2001844c
 80160b8:	2001840c 	.word	0x2001840c
 80160bc:	40023800 	.word	0x40023800

080160c0 <ReadWavHeader>:

extern uint8_t volume;
uint32_t wavtagsize = 0;
WavHeaderTypeDef wavfile;

uint8_t ReadWavHeader(WavHeaderTypeDef *waveformat) {
 80160c0:	b500      	push	{lr}
 80160c2:	b083      	sub	sp, #12
	uint32_t bytesread;
	FRESULT res;
	/* Fill the buffer to Send */
	res = f_read(&MyFile, waveformat, sizeof(wavfile), (void*)&bytesread);
 80160c4:	ab01      	add	r3, sp, #4
 80160c6:	222c      	movs	r2, #44	; 0x2c
 80160c8:	4601      	mov	r1, r0
 80160ca:	4803      	ldr	r0, [pc, #12]	; (80160d8 <ReadWavHeader+0x18>)
 80160cc:	f7f3 f90d 	bl	80092ea <f_read>
	return res;
}
 80160d0:	b003      	add	sp, #12
 80160d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80160d6:	bf00      	nop
 80160d8:	2000f720 	.word	0x2000f720

080160dc <TrackTime>:
			}
		}
	}
}

void TrackTime() {
 80160dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 80160de:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8016188 <TrackTime+0xac>
 80160e2:	f242 474c 	movw	r7, #9292	; 0x244c
 80160e6:	f85c 1007 	ldr.w	r1, [ip, r7]
 80160ea:	4b1e      	ldr	r3, [pc, #120]	; (8016164 <TrackTime+0x88>)
 80160ec:	6818      	ldr	r0, [r3, #0]
 80160ee:	1a09      	subs	r1, r1, r0
 80160f0:	4b1d      	ldr	r3, [pc, #116]	; (8016168 <TrackTime+0x8c>)
 80160f2:	fba3 4201 	umull	r4, r2, r3, r1
 80160f6:	0b52      	lsrs	r2, r2, #13
 80160f8:	f242 3528 	movw	r5, #9000	; 0x2328
 80160fc:	fb05 1212 	mls	r2, r5, r2, r1
 8016100:	491a      	ldr	r1, [pc, #104]	; (801616c <TrackTime+0x90>)
 8016102:	fba1 4602 	umull	r4, r6, r1, r2
 8016106:	0936      	lsrs	r6, r6, #4
 8016108:	2496      	movs	r4, #150	; 0x96
 801610a:	fb04 2616 	mls	r6, r4, r6, r2
 801610e:	4a18      	ldr	r2, [pc, #96]	; (8016170 <TrackTime+0x94>)
 8016110:	8016      	strh	r6, [r2, #0]
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 8016112:	f85c 6007 	ldr.w	r6, [ip, r7]
 8016116:	1a36      	subs	r6, r6, r0
 8016118:	fba3 e206 	umull	lr, r2, r3, r6
 801611c:	0b52      	lsrs	r2, r2, #13
 801611e:	fb05 6212 	mls	r2, r5, r2, r6
 8016122:	fba1 6202 	umull	r6, r2, r1, r2
 8016126:	0912      	lsrs	r2, r2, #4
 8016128:	4e12      	ldr	r6, [pc, #72]	; (8016174 <TrackTime+0x98>)
 801612a:	7032      	strb	r2, [r6, #0]
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801612c:	f85c 2007 	ldr.w	r2, [ip, r7]
 8016130:	1a12      	subs	r2, r2, r0
 8016132:	fba3 6202 	umull	r6, r2, r3, r2
 8016136:	0b52      	lsrs	r2, r2, #13
 8016138:	4e0f      	ldr	r6, [pc, #60]	; (8016178 <TrackTime+0x9c>)
 801613a:	7032      	strb	r2, [r6, #0]
	fr = ((file_pos_wide) % 9000) % 150;
 801613c:	fba3 2300 	umull	r2, r3, r3, r0
 8016140:	0b5a      	lsrs	r2, r3, #13
 8016142:	fb05 0212 	mls	r2, r5, r2, r0
 8016146:	fba1 0102 	umull	r0, r1, r1, r2
 801614a:	0908      	lsrs	r0, r1, #4
 801614c:	fb04 2010 	mls	r0, r4, r0, r2
 8016150:	4a0a      	ldr	r2, [pc, #40]	; (801617c <TrackTime+0xa0>)
 8016152:	8010      	strh	r0, [r2, #0]
	sec = ((file_pos_wide) % 9000) / 150;
 8016154:	0909      	lsrs	r1, r1, #4
 8016156:	4a0a      	ldr	r2, [pc, #40]	; (8016180 <TrackTime+0xa4>)
 8016158:	7011      	strb	r1, [r2, #0]
	min = (file_pos_wide) / 9000;
 801615a:	0b5b      	lsrs	r3, r3, #13
 801615c:	4a09      	ldr	r2, [pc, #36]	; (8016184 <TrackTime+0xa8>)
 801615e:	7013      	strb	r3, [r2, #0]
}
 8016160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016162:	bf00      	nop
 8016164:	200007f0 	.word	0x200007f0
 8016168:	e90452d5 	.word	0xe90452d5
 801616c:	1b4e81b5 	.word	0x1b4e81b5
 8016170:	2000143c 	.word	0x2000143c
 8016174:	2000143f 	.word	0x2000143f
 8016178:	2000143e 	.word	0x2000143e
 801617c:	20000c40 	.word	0x20000c40
 8016180:	20001440 	.word	0x20001440
 8016184:	20000c42 	.word	0x20000c42
 8016188:	200153a4 	.word	0x200153a4

0801618c <GoToPosition>:
	tim7_flag = 0;
	if(display.timemode == 0) display.trackbarmode = 0;
	else display.trackbarmode = 1;
}

void GoToPosition(uint32_t position) {
 801618c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
 8016190:	ed2d 8b02 	vpush	{d8}
 8016194:	4604      	mov	r4, r0
	BSP_AUDIO_OUT_Pause();
 8016196:	f7fe f911 	bl	80143bc <BSP_AUDIO_OUT_Pause>
	file_pos_wide = position;
 801619a:	4b4e      	ldr	r3, [pc, #312]	; (80162d4 <GoToPosition+0x148>)
 801619c:	601c      	str	r4, [r3, #0]
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 801619e:	ee07 4a90 	vmov	s15, r4
 80161a2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80161a6:	4b4c      	ldr	r3, [pc, #304]	; (80162d8 <GoToPosition+0x14c>)
 80161a8:	f242 424c 	movw	r2, #9292	; 0x244c
 80161ac:	589a      	ldr	r2, [r3, r2]
 80161ae:	ee07 2a10 	vmov	s14, r2
 80161b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80161b6:	eec8 6a07 	vdiv.f32	s13, s16, s14
			rekordbox.lowp_spectrum_size;
 80161ba:	f242 4248 	movw	r2, #9288	; 0x2448
 80161be:	589b      	ldr	r3, [r3, r2]
 80161c0:	ee07 3a90 	vmov	s15, r3
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 80161c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80161c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80161cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80161d0:	4b42      	ldr	r3, [pc, #264]	; (80162dc <GoToPosition+0x150>)
 80161d2:	edc3 7a00 	vstr	s15, [r3]
	if(BufferCtl.filetype == 0)	{
 80161d6:	4a42      	ldr	r2, [pc, #264]	; (80162e0 <GoToPosition+0x154>)
 80161d8:	f241 0308 	movw	r3, #4104	; 0x1008
 80161dc:	5cd3      	ldrb	r3, [r2, r3]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d145      	bne.n	801626e <GoToPosition+0xe2>
		uint16_t i = 0;
 80161e2:	2400      	movs	r4, #0
		do {
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 80161e4:	4d3f      	ldr	r5, [pc, #252]	; (80162e4 <GoToPosition+0x158>)
 80161e6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80161ea:	4b3f      	ldr	r3, [pc, #252]	; (80162e8 <GoToPosition+0x15c>)
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	ebb0 0b03 	subs.w	fp, r0, r3
 80161f2:	f161 0c00 	sbc.w	ip, r1, #0
 80161f6:	4b3d      	ldr	r3, [pc, #244]	; (80162ec <GoToPosition+0x160>)
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	ebbb 0003 	subs.w	r0, fp, r3
 80161fe:	f16c 0100 	sbc.w	r1, ip, #0
 8016202:	f7ea fdf3 	bl	8000dec <__aeabi_ul2f>
 8016206:	ee07 0a90 	vmov	s15, r0
 801620a:	ee68 6a27 	vmul.f32	s13, s16, s15
				/rekordbox.spectrum_size + i));
 801620e:	4a32      	ldr	r2, [pc, #200]	; (80162d8 <GoToPosition+0x14c>)
 8016210:	f242 434c 	movw	r3, #9292	; 0x244c
 8016214:	58d3      	ldr	r3, [r2, r3]
 8016216:	ee07 3a90 	vmov	s15, r3
 801621a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801621e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016222:	ee07 4a90 	vmov	s15, r4
 8016226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801622a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801622e:	ee17 0a90 	vmov	r0, s15
 8016232:	f7ea fe39 	bl	8000ea8 <__aeabi_f2ulz>
 8016236:	4602      	mov	r2, r0
 8016238:	460b      	mov	r3, r1
 801623a:	4628      	mov	r0, r5
 801623c:	f7f3 f927 	bl	800948e <f_lseek>
			i++;
 8016240:	3401      	adds	r4, #1
 8016242:	b2a4      	uxth	r4, r4
		}
		while(((UINT)BufferCtl.buff & 1) != (f_tell(&MyFile) & 1));
 8016244:	e9d5 bc0e 	ldrd	fp, ip, [r5, #56]	; 0x38
 8016248:	4925      	ldr	r1, [pc, #148]	; (80162e0 <GoToPosition+0x154>)
 801624a:	ea8b 0201 	eor.w	r2, fp, r1
 801624e:	f002 0001 	and.w	r0, r2, #1
 8016252:	2100      	movs	r1, #0
 8016254:	ea50 0301 	orrs.w	r3, r0, r1
 8016258:	d1c4      	bne.n	80161e4 <GoToPosition+0x58>
	}
	else {
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
						/rekordbox.spectrum_size));
	}
	if(BufferCtl.filetype == 1) {
 801625a:	4a21      	ldr	r2, [pc, #132]	; (80162e0 <GoToPosition+0x154>)
 801625c:	f241 0308 	movw	r3, #4104	; 0x1008
 8016260:	5cd3      	ldrb	r3, [r2, r3]
 8016262:	2b01      	cmp	r3, #1
 8016264:	d02c      	beq.n	80162c0 <GoToPosition+0x134>
		unInDataLeft = 0;
		unDmaBufferSpace = 0;
		unFramesDecoded = 0;
		unDmaBufMode = 0;
	}
}
 8016266:	ecbd 8b02 	vpop	{d8}
 801626a:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801626e:	4c1d      	ldr	r4, [pc, #116]	; (80162e4 <GoToPosition+0x158>)
 8016270:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8016274:	4b1c      	ldr	r3, [pc, #112]	; (80162e8 <GoToPosition+0x15c>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	ebb0 0b03 	subs.w	fp, r0, r3
 801627c:	f161 0c00 	sbc.w	ip, r1, #0
 8016280:	4b1a      	ldr	r3, [pc, #104]	; (80162ec <GoToPosition+0x160>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	ebbb 0003 	subs.w	r0, fp, r3
 8016288:	f16c 0100 	sbc.w	r1, ip, #0
 801628c:	f7ea fdae 	bl	8000dec <__aeabi_ul2f>
 8016290:	ee07 0a90 	vmov	s15, r0
 8016294:	ee28 8a27 	vmul.f32	s16, s16, s15
						/rekordbox.spectrum_size));
 8016298:	4a0f      	ldr	r2, [pc, #60]	; (80162d8 <GoToPosition+0x14c>)
 801629a:	f242 434c 	movw	r3, #9292	; 0x244c
 801629e:	58d3      	ldr	r3, [r2, r3]
 80162a0:	ee07 3a90 	vmov	s15, r3
 80162a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 80162a8:	eec8 7a27 	vdiv.f32	s15, s16, s15
 80162ac:	ee17 0a90 	vmov	r0, s15
 80162b0:	f7ea fdfa 	bl	8000ea8 <__aeabi_f2ulz>
 80162b4:	4602      	mov	r2, r0
 80162b6:	460b      	mov	r3, r1
 80162b8:	4620      	mov	r0, r4
 80162ba:	f7f3 f8e8 	bl	800948e <f_lseek>
 80162be:	e7cc      	b.n	801625a <GoToPosition+0xce>
		unInDataLeft = 0;
 80162c0:	2300      	movs	r3, #0
 80162c2:	4a0b      	ldr	r2, [pc, #44]	; (80162f0 <GoToPosition+0x164>)
 80162c4:	6013      	str	r3, [r2, #0]
		unDmaBufferSpace = 0;
 80162c6:	4a0b      	ldr	r2, [pc, #44]	; (80162f4 <GoToPosition+0x168>)
 80162c8:	6013      	str	r3, [r2, #0]
		unFramesDecoded = 0;
 80162ca:	4a0b      	ldr	r2, [pc, #44]	; (80162f8 <GoToPosition+0x16c>)
 80162cc:	6013      	str	r3, [r2, #0]
		unDmaBufMode = 0;
 80162ce:	4a0b      	ldr	r2, [pc, #44]	; (80162fc <GoToPosition+0x170>)
 80162d0:	6013      	str	r3, [r2, #0]
}
 80162d2:	e7c8      	b.n	8016266 <GoToPosition+0xda>
 80162d4:	200007f0 	.word	0x200007f0
 80162d8:	200153a4 	.word	0x200153a4
 80162dc:	200007ec 	.word	0x200007ec
 80162e0:	20007f5c 	.word	0x20007f5c
 80162e4:	2000f720 	.word	0x2000f720
 80162e8:	2000f97c 	.word	0x2000f97c
 80162ec:	20001548 	.word	0x20001548
 80162f0:	20001464 	.word	0x20001464
 80162f4:	2000145c 	.word	0x2000145c
 80162f8:	20001460 	.word	0x20001460
 80162fc:	2000144c 	.word	0x2000144c

08016300 <GetTrackTime>:
void GetTrackTime() {
 8016300:	e92d 49f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, fp, lr}
 8016304:	ed2d 8b02 	vpush	{d8}
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 8016308:	4e2e      	ldr	r6, [pc, #184]	; (80163c4 <GetTrackTime+0xc4>)
 801630a:	e9d6 bc0e 	ldrd	fp, ip, [r6, #56]	; 0x38
 801630e:	4b2e      	ldr	r3, [pc, #184]	; (80163c8 <GetTrackTime+0xc8>)
 8016310:	681c      	ldr	r4, [r3, #0]
 8016312:	f04f 0800 	mov.w	r8, #0
 8016316:	ebbb 0004 	subs.w	r0, fp, r4
 801631a:	eb6c 0108 	sbc.w	r1, ip, r8
 801631e:	f7ea fd65 	bl	8000dec <__aeabi_ul2f>
 8016322:	ee08 0a10 	vmov	s16, r0
			(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8016326:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 801632a:	1b00      	subs	r0, r0, r4
 801632c:	eb61 0108 	sbc.w	r1, r1, r8
 8016330:	4604      	mov	r4, r0
 8016332:	4b26      	ldr	r3, [pc, #152]	; (80163cc <GetTrackTime+0xcc>)
 8016334:	6818      	ldr	r0, [r3, #0]
 8016336:	1a22      	subs	r2, r4, r0
 8016338:	f161 0300 	sbc.w	r3, r1, #0
 801633c:	4610      	mov	r0, r2
 801633e:	4619      	mov	r1, r3
 8016340:	f7ea fd54 	bl	8000dec <__aeabi_ul2f>
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 8016344:	ee07 0a90 	vmov	s15, r0
 8016348:	ee88 7a27 	vdiv.f32	s14, s16, s15
			*rekordbox.spectrum_size;
 801634c:	4c20      	ldr	r4, [pc, #128]	; (80163d0 <GetTrackTime+0xd0>)
 801634e:	f242 454c 	movw	r5, #9292	; 0x244c
 8016352:	5963      	ldr	r3, [r4, r5]
 8016354:	ee07 3a90 	vmov	s15, r3
 8016358:	eef8 7a67 	vcvt.f32.u32	s15, s15
	file_pos_wide = (track_lenght + 0.5);
 801635c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016360:	ee17 0a90 	vmov	r0, s15
 8016364:	f7ea f918 	bl	8000598 <__aeabi_f2d>
 8016368:	2200      	movs	r2, #0
 801636a:	4b1a      	ldr	r3, [pc, #104]	; (80163d4 <GetTrackTime+0xd4>)
 801636c:	f7e9 ffb6 	bl	80002dc <__adddf3>
 8016370:	f7ea fc04 	bl	8000b7c <__aeabi_d2uiz>
 8016374:	4b18      	ldr	r3, [pc, #96]	; (80163d8 <GetTrackTime+0xd8>)
 8016376:	6018      	str	r0, [r3, #0]
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 8016378:	f242 4348 	movw	r3, #9288	; 0x2448
 801637c:	58e3      	ldr	r3, [r4, r3]
 801637e:	fb03 f000 	mul.w	r0, r3, r0
			rekordbox.spectrum_size);
 8016382:	5963      	ldr	r3, [r4, r5]
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 8016384:	fbb0 f0f3 	udiv	r0, r0, r3
 8016388:	b280      	uxth	r0, r0
 801638a:	4b14      	ldr	r3, [pc, #80]	; (80163dc <GetTrackTime+0xdc>)
 801638c:	6018      	str	r0, [r3, #0]
	TrackTime();
 801638e:	f7ff fea5 	bl	80160dc <TrackTime>
	if(display.loop == 1) {
 8016392:	4b13      	ldr	r3, [pc, #76]	; (80163e0 <GetTrackTime+0xe0>)
 8016394:	7c1b      	ldrb	r3, [r3, #16]
 8016396:	2b01      	cmp	r3, #1
 8016398:	d003      	beq.n	80163a2 <GetTrackTime+0xa2>
}
 801639a:	ecbd 8b02 	vpop	{d8}
 801639e:	e8bd 89f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, fp, pc}
		if(trak.state == PLAYING) {
 80163a2:	4b10      	ldr	r3, [pc, #64]	; (80163e4 <GetTrackTime+0xe4>)
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d1f7      	bne.n	801639a <GetTrackTime+0x9a>
			if(file_pos_wide >= display.loopend) {
 80163aa:	4b0d      	ldr	r3, [pc, #52]	; (80163e0 <GetTrackTime+0xe0>)
 80163ac:	68da      	ldr	r2, [r3, #12]
 80163ae:	4b0a      	ldr	r3, [pc, #40]	; (80163d8 <GetTrackTime+0xd8>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d8f1      	bhi.n	801639a <GetTrackTime+0x9a>
				GoToPosition(display.loopstart);
 80163b6:	4b0a      	ldr	r3, [pc, #40]	; (80163e0 <GetTrackTime+0xe0>)
 80163b8:	6898      	ldr	r0, [r3, #8]
 80163ba:	f7ff fee7 	bl	801618c <GoToPosition>
				BSP_AUDIO_OUT_Resume();
 80163be:	f7fe f805 	bl	80143cc <BSP_AUDIO_OUT_Resume>
}
 80163c2:	e7ea      	b.n	801639a <GetTrackTime+0x9a>
 80163c4:	2000f720 	.word	0x2000f720
 80163c8:	2000f97c 	.word	0x2000f97c
 80163cc:	20001548 	.word	0x20001548
 80163d0:	200153a4 	.word	0x200153a4
 80163d4:	3fe00000 	.word	0x3fe00000
 80163d8:	200007f0 	.word	0x200007f0
 80163dc:	200007ec 	.word	0x200007ec
 80163e0:	20001560 	.word	0x20001560
 80163e4:	20007f50 	.word	0x20007f50

080163e8 <PlayWavFile>:
void PlayWavFile() {
 80163e8:	b530      	push	{r4, r5, lr}
 80163ea:	b083      	sub	sp, #12
	wavtagsize = 0;
 80163ec:	4d8b      	ldr	r5, [pc, #556]	; (801661c <PlayWavFile+0x234>)
 80163ee:	2400      	movs	r4, #0
 80163f0:	602c      	str	r4, [r5, #0]
	BufferCtl.filetype = 0;
 80163f2:	488b      	ldr	r0, [pc, #556]	; (8016620 <PlayWavFile+0x238>)
 80163f4:	f241 0308 	movw	r3, #4104	; 0x1008
 80163f8:	54c4      	strb	r4, [r0, r3]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 80163fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80163fe:	4621      	mov	r1, r4
 8016400:	f000 ff6e 	bl	80172e0 <memset>
	bOutOfData = 0;
 8016404:	4b87      	ldr	r3, [pc, #540]	; (8016624 <PlayWavFile+0x23c>)
 8016406:	601c      	str	r4, [r3, #0]
	uint16_t bytesread = 0;
 8016408:	f8ad 4006 	strh.w	r4, [sp, #6]
	ReadWavHeader(&wavfile);
 801640c:	4c86      	ldr	r4, [pc, #536]	; (8016628 <PlayWavFile+0x240>)
 801640e:	4620      	mov	r0, r4
 8016410:	f7ff fe56 	bl	80160c0 <ReadWavHeader>
	wavtagsize = wavfile.FileSize - wavfile.SubChunk2Size;
 8016414:	6863      	ldr	r3, [r4, #4]
 8016416:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016418:	1a9b      	subs	r3, r3, r2
 801641a:	602b      	str	r3, [r5, #0]
	if(wavfile.SampleRate > 0) trak.bitrate = wavfile.SampleRate;
 801641c:	69a3      	ldr	r3, [r4, #24]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d041      	beq.n	80164a6 <PlayWavFile+0xbe>
 8016422:	4a82      	ldr	r2, [pc, #520]	; (801662c <PlayWavFile+0x244>)
 8016424:	8113      	strh	r3, [r2, #8]
	BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)*(1 + trak.percent), NULL);
 8016426:	4a81      	ldr	r2, [pc, #516]	; (801662c <PlayWavFile+0x244>)
 8016428:	8913      	ldrh	r3, [r2, #8]
 801642a:	edd2 7a01 	vldr	s15, [r2, #4]
 801642e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016436:	085b      	lsrs	r3, r3, #1
 8016438:	ee07 3a90 	vmov	s15, r3
 801643c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016444:	2200      	movs	r2, #0
 8016446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801644a:	ee17 1a90 	vmov	r1, s15
 801644e:	4878      	ldr	r0, [pc, #480]	; (8016630 <PlayWavFile+0x248>)
 8016450:	f7fe f88e 	bl	8014570 <BSP_AUDIO_OUT_ClockConfig>
	while(f_read(&MyFile, &BufferCtl.buff[0], 2048, (void *)&bytesread) != FR_OK);
 8016454:	f10d 0306 	add.w	r3, sp, #6
 8016458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801645c:	4970      	ldr	r1, [pc, #448]	; (8016620 <PlayWavFile+0x238>)
 801645e:	4875      	ldr	r0, [pc, #468]	; (8016634 <PlayWavFile+0x24c>)
 8016460:	f7f2 ff43 	bl	80092ea <f_read>
 8016464:	2800      	cmp	r0, #0
 8016466:	d1f5      	bne.n	8016454 <PlayWavFile+0x6c>
	if(bytesread != 0) {
 8016468:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801646c:	bb03      	cbnz	r3, 80164b0 <PlayWavFile+0xc8>
	if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801646e:	4a72      	ldr	r2, [pc, #456]	; (8016638 <PlayWavFile+0x250>)
 8016470:	f642 538c 	movw	r3, #11660	; 0x2d8c
 8016474:	5cd3      	ldrb	r3, [r2, r3]
 8016476:	b2db      	uxtb	r3, r3
 8016478:	2b02      	cmp	r3, #2
 801647a:	d167      	bne.n	801654c <PlayWavFile+0x164>
 801647c:	4b6b      	ldr	r3, [pc, #428]	; (801662c <PlayWavFile+0x244>)
 801647e:	781b      	ldrb	r3, [r3, #0]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d163      	bne.n	801654c <PlayWavFile+0x164>
		BSP_AUDIO_OUT_Pause();
 8016484:	f7fd ff9a 	bl	80143bc <BSP_AUDIO_OUT_Pause>
		trak.state = STOPPED;
 8016488:	4b68      	ldr	r3, [pc, #416]	; (801662c <PlayWavFile+0x244>)
 801648a:	2201      	movs	r2, #1
 801648c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim8);
 801648e:	486b      	ldr	r0, [pc, #428]	; (801663c <PlayWavFile+0x254>)
 8016490:	f7f0 f8e4 	bl	800665c <HAL_TIM_Base_Start_IT>
		GoToPosition(rekordbox.cue_start_position[0]);
 8016494:	4a68      	ldr	r2, [pc, #416]	; (8016638 <PlayWavFile+0x250>)
 8016496:	f642 2308 	movw	r3, #10760	; 0x2a08
 801649a:	58d0      	ldr	r0, [r2, r3]
 801649c:	f7ff fe76 	bl	801618c <GoToPosition>
		TrackTime();
 80164a0:	f7ff fe1c 	bl	80160dc <TrackTime>
 80164a4:	e052      	b.n	801654c <PlayWavFile+0x164>
	else trak.bitrate = AUDIO_FREQUENCY_44K;
 80164a6:	4b61      	ldr	r3, [pc, #388]	; (801662c <PlayWavFile+0x244>)
 80164a8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80164ac:	811a      	strh	r2, [r3, #8]
 80164ae:	e7ba      	b.n	8016426 <PlayWavFile+0x3e>
		BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 80164b0:	4c5b      	ldr	r4, [pc, #364]	; (8016620 <PlayWavFile+0x238>)
 80164b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80164b6:	4620      	mov	r0, r4
 80164b8:	f7fd ff60 	bl	801437c <BSP_AUDIO_OUT_Play>
		BufferCtl.fptr = bytesread;
 80164bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80164c0:	f241 0304 	movw	r3, #4100	; 0x1004
 80164c4:	50e2      	str	r2, [r4, r3]
		BSP_AUDIO_OUT_SetVolume(volume);
 80164c6:	4b5e      	ldr	r3, [pc, #376]	; (8016640 <PlayWavFile+0x258>)
 80164c8:	7818      	ldrb	r0, [r3, #0]
 80164ca:	f7fd ffa3 	bl	8014414 <BSP_AUDIO_OUT_SetVolume>
 80164ce:	e7ce      	b.n	801646e <PlayWavFile+0x86>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 80164d0:	485c      	ldr	r0, [pc, #368]	; (8016644 <PlayWavFile+0x25c>)
 80164d2:	6802      	ldr	r2, [r0, #0]
 80164d4:	f241 3387 	movw	r3, #4999	; 0x1387
 80164d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80164da:	60c3      	str	r3, [r0, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 80164dc:	f7f0 f8be 	bl	800665c <HAL_TIM_Base_Start_IT>
					tim7_flag =  1;
 80164e0:	4b59      	ldr	r3, [pc, #356]	; (8016648 <PlayWavFile+0x260>)
 80164e2:	2201      	movs	r2, #1
 80164e4:	701a      	strb	r2, [r3, #0]
 80164e6:	e04d      	b.n	8016584 <PlayWavFile+0x19c>
			else if((rmin == 0) && (rsec <= 10)) {
 80164e8:	bb63      	cbnz	r3, 8016544 <PlayWavFile+0x15c>
 80164ea:	4b58      	ldr	r3, [pc, #352]	; (801664c <PlayWavFile+0x264>)
 80164ec:	f993 3000 	ldrsb.w	r3, [r3]
 80164f0:	2b0a      	cmp	r3, #10
 80164f2:	dc27      	bgt.n	8016544 <PlayWavFile+0x15c>
				if(tim7_flag == 0) {
 80164f4:	4b54      	ldr	r3, [pc, #336]	; (8016648 <PlayWavFile+0x260>)
 80164f6:	781b      	ldrb	r3, [r3, #0]
 80164f8:	b1c3      	cbz	r3, 801652c <PlayWavFile+0x144>
				if(tim7_flag == 1) {
 80164fa:	4b53      	ldr	r3, [pc, #332]	; (8016648 <PlayWavFile+0x260>)
 80164fc:	781b      	ldrb	r3, [r3, #0]
 80164fe:	2b01      	cmp	r3, #1
 8016500:	d124      	bne.n	801654c <PlayWavFile+0x164>
					HAL_TIM_Base_Stop_IT(&htim7);
 8016502:	4c50      	ldr	r4, [pc, #320]	; (8016644 <PlayWavFile+0x25c>)
 8016504:	4620      	mov	r0, r4
 8016506:	f7f0 f901 	bl	800670c <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801650a:	6823      	ldr	r3, [r4, #0]
 801650c:	f06f 0201 	mvn.w	r2, #1
 8016510:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 8016512:	2200      	movs	r2, #0
 8016514:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 8016516:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801651a:	62da      	str	r2, [r3, #44]	; 0x2c
 801651c:	60e2      	str	r2, [r4, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 801651e:	4620      	mov	r0, r4
 8016520:	f7f0 f89c 	bl	800665c <HAL_TIM_Base_Start_IT>
					tim7_flag = 2;
 8016524:	4b48      	ldr	r3, [pc, #288]	; (8016648 <PlayWavFile+0x260>)
 8016526:	2202      	movs	r2, #2
 8016528:	701a      	strb	r2, [r3, #0]
 801652a:	e00f      	b.n	801654c <PlayWavFile+0x164>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 801652c:	4845      	ldr	r0, [pc, #276]	; (8016644 <PlayWavFile+0x25c>)
 801652e:	6802      	ldr	r2, [r0, #0]
 8016530:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8016534:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016536:	60c3      	str	r3, [r0, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 8016538:	f7f0 f890 	bl	800665c <HAL_TIM_Base_Start_IT>
					tim7_flag =  2;
 801653c:	4b42      	ldr	r3, [pc, #264]	; (8016648 <PlayWavFile+0x260>)
 801653e:	2202      	movs	r2, #2
 8016540:	701a      	strb	r2, [r3, #0]
 8016542:	e7da      	b.n	80164fa <PlayWavFile+0x112>
				if(tim7_flag > 0) {
 8016544:	4b40      	ldr	r3, [pc, #256]	; (8016648 <PlayWavFile+0x260>)
 8016546:	781b      	ldrb	r3, [r3, #0]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d134      	bne.n	80165b6 <PlayWavFile+0x1ce>
	while((!bOutOfData) && (file_pos_wide < rekordbox.spectrum_size)) {
 801654c:	4b35      	ldr	r3, [pc, #212]	; (8016624 <PlayWavFile+0x23c>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d147      	bne.n	80165e4 <PlayWavFile+0x1fc>
 8016554:	4a38      	ldr	r2, [pc, #224]	; (8016638 <PlayWavFile+0x250>)
 8016556:	f242 434c 	movw	r3, #9292	; 0x244c
 801655a:	58d2      	ldr	r2, [r2, r3]
 801655c:	4b3c      	ldr	r3, [pc, #240]	; (8016650 <PlayWavFile+0x268>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	429a      	cmp	r2, r3
 8016562:	d93f      	bls.n	80165e4 <PlayWavFile+0x1fc>
			if((rmin == 0) && (rsec < 30) && (rsec > 10)) {
 8016564:	4b3b      	ldr	r3, [pc, #236]	; (8016654 <PlayWavFile+0x26c>)
 8016566:	f993 3000 	ldrsb.w	r3, [r3]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d1bc      	bne.n	80164e8 <PlayWavFile+0x100>
 801656e:	4a37      	ldr	r2, [pc, #220]	; (801664c <PlayWavFile+0x264>)
 8016570:	f992 2000 	ldrsb.w	r2, [r2]
 8016574:	2a1d      	cmp	r2, #29
 8016576:	dcb7      	bgt.n	80164e8 <PlayWavFile+0x100>
 8016578:	2a0a      	cmp	r2, #10
 801657a:	ddb5      	ble.n	80164e8 <PlayWavFile+0x100>
				if(tim7_flag == 0) {
 801657c:	4b32      	ldr	r3, [pc, #200]	; (8016648 <PlayWavFile+0x260>)
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d0a5      	beq.n	80164d0 <PlayWavFile+0xe8>
				if(tim7_flag == 2) {
 8016584:	4b30      	ldr	r3, [pc, #192]	; (8016648 <PlayWavFile+0x260>)
 8016586:	781b      	ldrb	r3, [r3, #0]
 8016588:	2b02      	cmp	r3, #2
 801658a:	d1df      	bne.n	801654c <PlayWavFile+0x164>
					HAL_TIM_Base_Stop_IT(&htim7);
 801658c:	4c2d      	ldr	r4, [pc, #180]	; (8016644 <PlayWavFile+0x25c>)
 801658e:	4620      	mov	r0, r4
 8016590:	f7f0 f8bc 	bl	800670c <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8016594:	6823      	ldr	r3, [r4, #0]
 8016596:	f06f 0201 	mvn.w	r2, #1
 801659a:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 801659c:	2200      	movs	r2, #0
 801659e:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 80165a0:	f241 3287 	movw	r2, #4999	; 0x1387
 80165a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80165a6:	60e2      	str	r2, [r4, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 80165a8:	4620      	mov	r0, r4
 80165aa:	f7f0 f857 	bl	800665c <HAL_TIM_Base_Start_IT>
					tim7_flag = 1;
 80165ae:	4b26      	ldr	r3, [pc, #152]	; (8016648 <PlayWavFile+0x260>)
 80165b0:	2201      	movs	r2, #1
 80165b2:	701a      	strb	r2, [r3, #0]
 80165b4:	e7ca      	b.n	801654c <PlayWavFile+0x164>
					HAL_TIM_Base_Stop_IT(&htim7);
 80165b6:	4c23      	ldr	r4, [pc, #140]	; (8016644 <PlayWavFile+0x25c>)
 80165b8:	4620      	mov	r0, r4
 80165ba:	f7f0 f8a7 	bl	800670c <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80165be:	6822      	ldr	r2, [r4, #0]
 80165c0:	f06f 0301 	mvn.w	r3, #1
 80165c4:	6113      	str	r3, [r2, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 80165c6:	2300      	movs	r3, #0
 80165c8:	6253      	str	r3, [r2, #36]	; 0x24
					tim7_flag = 0;
 80165ca:	4a1f      	ldr	r2, [pc, #124]	; (8016648 <PlayWavFile+0x260>)
 80165cc:	7013      	strb	r3, [r2, #0]
					if(display.timemode == 0) {
 80165ce:	4b22      	ldr	r3, [pc, #136]	; (8016658 <PlayWavFile+0x270>)
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	b91b      	cbnz	r3, 80165dc <PlayWavFile+0x1f4>
						display.trackbarmode = 0;
 80165d4:	4b20      	ldr	r3, [pc, #128]	; (8016658 <PlayWavFile+0x270>)
 80165d6:	2200      	movs	r2, #0
 80165d8:	711a      	strb	r2, [r3, #4]
 80165da:	e7b7      	b.n	801654c <PlayWavFile+0x164>
						display.trackbarmode = 1;
 80165dc:	4b1e      	ldr	r3, [pc, #120]	; (8016658 <PlayWavFile+0x270>)
 80165de:	2201      	movs	r2, #1
 80165e0:	711a      	strb	r2, [r3, #4]
 80165e2:	e7b3      	b.n	801654c <PlayWavFile+0x164>
	BSP_AUDIO_OUT_SetVolume(0);
 80165e4:	2000      	movs	r0, #0
 80165e6:	f7fd ff15 	bl	8014414 <BSP_AUDIO_OUT_SetVolume>
	wavtagsize = 0;
 80165ea:	2400      	movs	r4, #0
 80165ec:	4b0b      	ldr	r3, [pc, #44]	; (801661c <PlayWavFile+0x234>)
 80165ee:	601c      	str	r4, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim7);
 80165f0:	4d14      	ldr	r5, [pc, #80]	; (8016644 <PlayWavFile+0x25c>)
 80165f2:	4628      	mov	r0, r5
 80165f4:	f7f0 f88a 	bl	800670c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80165f8:	682b      	ldr	r3, [r5, #0]
 80165fa:	f06f 0201 	mvn.w	r2, #1
 80165fe:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8016600:	625c      	str	r4, [r3, #36]	; 0x24
	tim7_flag = 0;
 8016602:	4b11      	ldr	r3, [pc, #68]	; (8016648 <PlayWavFile+0x260>)
 8016604:	701c      	strb	r4, [r3, #0]
	if(display.timemode == 0) display.trackbarmode = 0;
 8016606:	4b14      	ldr	r3, [pc, #80]	; (8016658 <PlayWavFile+0x270>)
 8016608:	781b      	ldrb	r3, [r3, #0]
 801660a:	b123      	cbz	r3, 8016616 <PlayWavFile+0x22e>
	else display.trackbarmode = 1;
 801660c:	4b12      	ldr	r3, [pc, #72]	; (8016658 <PlayWavFile+0x270>)
 801660e:	2201      	movs	r2, #1
 8016610:	711a      	strb	r2, [r3, #4]
}
 8016612:	b003      	add	sp, #12
 8016614:	bd30      	pop	{r4, r5, pc}
	if(display.timemode == 0) display.trackbarmode = 0;
 8016616:	4b10      	ldr	r3, [pc, #64]	; (8016658 <PlayWavFile+0x270>)
 8016618:	711c      	strb	r4, [r3, #4]
 801661a:	e7fa      	b.n	8016612 <PlayWavFile+0x22a>
 801661c:	20001548 	.word	0x20001548
 8016620:	20007f5c 	.word	0x20007f5c
 8016624:	200007e4 	.word	0x200007e4
 8016628:	2001848c 	.word	0x2001848c
 801662c:	20007f50 	.word	0x20007f50
 8016630:	2001813c 	.word	0x2001813c
 8016634:	2000f720 	.word	0x2000f720
 8016638:	200153a4 	.word	0x200153a4
 801663c:	2001830c 	.word	0x2001830c
 8016640:	2000003c 	.word	0x2000003c
 8016644:	2001844c 	.word	0x2001844c
 8016648:	20001448 	.word	0x20001448
 801664c:	2000143f 	.word	0x2000143f
 8016650:	200007f0 	.word	0x200007f0
 8016654:	2000143e 	.word	0x2000143e
 8016658:	20001560 	.word	0x20001560

0801665c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 801665c:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 801665e:	f7fe f801 	bl	8014664 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 8016662:	2000      	movs	r0, #0
 8016664:	bd08      	pop	{r3, pc}
	...

08016668 <wm8994_SetMute>:
{
 8016668:	b538      	push	{r3, r4, r5, lr}
 801666a:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 801666c:	4a13      	ldr	r2, [pc, #76]	; (80166bc <wm8994_SetMute+0x54>)
 801666e:	6810      	ldr	r0, [r2, #0]
 8016670:	b180      	cbz	r0, 8016694 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 8016672:	2901      	cmp	r1, #1
 8016674:	d00f      	beq.n	8016696 <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8016676:	b2dd      	uxtb	r5, r3
 8016678:	2200      	movs	r2, #0
 801667a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801667e:	4628      	mov	r0, r5
 8016680:	f7ff ffec 	bl	801665c <CODEC_IO_Write>
 8016684:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8016686:	2200      	movs	r2, #0
 8016688:	f240 4122 	movw	r1, #1058	; 0x422
 801668c:	4628      	mov	r0, r5
 801668e:	f7ff ffe5 	bl	801665c <CODEC_IO_Write>
 8016692:	4420      	add	r0, r4
}
 8016694:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8016696:	b2dd      	uxtb	r5, r3
 8016698:	f44f 7200 	mov.w	r2, #512	; 0x200
 801669c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80166a0:	4628      	mov	r0, r5
 80166a2:	f7ff ffdb 	bl	801665c <CODEC_IO_Write>
 80166a6:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80166a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80166ac:	f240 4122 	movw	r1, #1058	; 0x422
 80166b0:	4628      	mov	r0, r5
 80166b2:	f7ff ffd3 	bl	801665c <CODEC_IO_Write>
 80166b6:	4420      	add	r0, r4
 80166b8:	e7ec      	b.n	8016694 <wm8994_SetMute+0x2c>
 80166ba:	bf00      	nop
 80166bc:	20001550 	.word	0x20001550

080166c0 <wm8994_Play>:
{
 80166c0:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80166c2:	2100      	movs	r1, #0
 80166c4:	f7ff ffd0 	bl	8016668 <wm8994_SetMute>
}
 80166c8:	bd08      	pop	{r3, pc}

080166ca <wm8994_Resume>:
{
 80166ca:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80166cc:	2100      	movs	r1, #0
 80166ce:	f7ff ffcb 	bl	8016668 <wm8994_SetMute>
}
 80166d2:	bd08      	pop	{r3, pc}

080166d4 <wm8994_Pause>:
{  
 80166d4:	b538      	push	{r3, r4, r5, lr}
 80166d6:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80166d8:	2101      	movs	r1, #1
 80166da:	f7ff ffc5 	bl	8016668 <wm8994_SetMute>
 80166de:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80166e0:	2201      	movs	r2, #1
 80166e2:	2102      	movs	r1, #2
 80166e4:	b2e8      	uxtb	r0, r5
 80166e6:	f7ff ffb9 	bl	801665c <CODEC_IO_Write>
}
 80166ea:	4420      	add	r0, r4
 80166ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080166f0 <wm8994_Stop>:
{
 80166f0:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 80166f2:	4b1d      	ldr	r3, [pc, #116]	; (8016768 <wm8994_Stop+0x78>)
 80166f4:	681c      	ldr	r4, [r3, #0]
 80166f6:	b90c      	cbnz	r4, 80166fc <wm8994_Stop+0xc>
}
 80166f8:	4620      	mov	r0, r4
 80166fa:	bd70      	pop	{r4, r5, r6, pc}
 80166fc:	460e      	mov	r6, r1
 80166fe:	4605      	mov	r5, r0
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8016700:	2101      	movs	r1, #1
 8016702:	f7ff ffb1 	bl	8016668 <wm8994_SetMute>
 8016706:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8016708:	2e02      	cmp	r6, #2
 801670a:	d0f5      	beq.n	80166f8 <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 801670c:	b2ed      	uxtb	r5, r5
 801670e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016712:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8016716:	4628      	mov	r0, r5
 8016718:	f7ff ffa0 	bl	801665c <CODEC_IO_Write>
 801671c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 801671e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016722:	f240 4122 	movw	r1, #1058	; 0x422
 8016726:	4628      	mov	r0, r5
 8016728:	f7ff ff98 	bl	801665c <CODEC_IO_Write>
 801672c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 801672e:	2200      	movs	r2, #0
 8016730:	212d      	movs	r1, #45	; 0x2d
 8016732:	4628      	mov	r0, r5
 8016734:	f7ff ff92 	bl	801665c <CODEC_IO_Write>
 8016738:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 801673a:	2200      	movs	r2, #0
 801673c:	212e      	movs	r1, #46	; 0x2e
 801673e:	4628      	mov	r0, r5
 8016740:	f7ff ff8c 	bl	801665c <CODEC_IO_Write>
 8016744:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8016746:	2200      	movs	r2, #0
 8016748:	2105      	movs	r1, #5
 801674a:	4628      	mov	r0, r5
 801674c:	f7ff ff86 	bl	801665c <CODEC_IO_Write>
 8016750:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8016752:	2200      	movs	r2, #0
 8016754:	4611      	mov	r1, r2
 8016756:	4628      	mov	r0, r5
 8016758:	f7ff ff80 	bl	801665c <CODEC_IO_Write>
 801675c:	4404      	add	r4, r0
      outputEnabled = 0;
 801675e:	4b02      	ldr	r3, [pc, #8]	; (8016768 <wm8994_Stop+0x78>)
 8016760:	2200      	movs	r2, #0
 8016762:	601a      	str	r2, [r3, #0]
  return counter;
 8016764:	e7c8      	b.n	80166f8 <wm8994_Stop+0x8>
 8016766:	bf00      	nop
 8016768:	20001550 	.word	0x20001550

0801676c <wm8994_SetVolume>:
{
 801676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016770:	4606      	mov	r6, r0
 8016772:	460f      	mov	r7, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8016774:	2964      	cmp	r1, #100	; 0x64
 8016776:	d845      	bhi.n	8016804 <wm8994_SetVolume+0x98>
 8016778:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 801677c:	4a46      	ldr	r2, [pc, #280]	; (8016898 <wm8994_SetVolume+0x12c>)
 801677e:	fb82 1203 	smull	r1, r2, r2, r3
 8016782:	17dd      	asrs	r5, r3, #31
 8016784:	ebc5 1562 	rsb	r5, r5, r2, asr #5
 8016788:	b2ed      	uxtb	r5, r5
  if (outputEnabled != 0)
 801678a:	4b44      	ldr	r3, [pc, #272]	; (801689c <wm8994_SetVolume+0x130>)
 801678c:	681c      	ldr	r4, [r3, #0]
 801678e:	b144      	cbz	r4, 80167a2 <wm8994_SetVolume+0x36>
    if(convertedvol > 0x3E)
 8016790:	2d3e      	cmp	r5, #62	; 0x3e
 8016792:	d839      	bhi.n	8016808 <wm8994_SetVolume+0x9c>
    else if (Volume == 0)
 8016794:	2f00      	cmp	r7, #0
 8016796:	d15a      	bne.n	801684e <wm8994_SetVolume+0xe2>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8016798:	2101      	movs	r1, #1
 801679a:	4630      	mov	r0, r6
 801679c:	f7ff ff64 	bl	8016668 <wm8994_SetMute>
 80167a0:	4604      	mov	r4, r0
  if (inputEnabled != 0)
 80167a2:	4b3f      	ldr	r3, [pc, #252]	; (80168a0 <wm8994_SetVolume+0x134>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	b353      	cbz	r3, 80167fe <wm8994_SetVolume+0x92>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80167a8:	2f63      	cmp	r7, #99	; 0x63
 80167aa:	d872      	bhi.n	8016892 <wm8994_SetVolume+0x126>
 80167ac:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 80167b0:	010b      	lsls	r3, r1, #4
 80167b2:	4a39      	ldr	r2, [pc, #228]	; (8016898 <wm8994_SetVolume+0x12c>)
 80167b4:	fb82 1203 	smull	r1, r2, r2, r3
 80167b8:	17dd      	asrs	r5, r3, #31
 80167ba:	ebc5 1562 	rsb	r5, r5, r2, asr #5
 80167be:	b2ed      	uxtb	r5, r5
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80167c0:	b2f6      	uxtb	r6, r6
 80167c2:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 80167c6:	462a      	mov	r2, r5
 80167c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80167cc:	4630      	mov	r0, r6
 80167ce:	f7ff ff45 	bl	801665c <CODEC_IO_Write>
 80167d2:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80167d4:	462a      	mov	r2, r5
 80167d6:	f240 4101 	movw	r1, #1025	; 0x401
 80167da:	4630      	mov	r0, r6
 80167dc:	f7ff ff3e 	bl	801665c <CODEC_IO_Write>
 80167e0:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80167e2:	462a      	mov	r2, r5
 80167e4:	f240 4104 	movw	r1, #1028	; 0x404
 80167e8:	4630      	mov	r0, r6
 80167ea:	f7ff ff37 	bl	801665c <CODEC_IO_Write>
 80167ee:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80167f0:	462a      	mov	r2, r5
 80167f2:	f240 4105 	movw	r1, #1029	; 0x405
 80167f6:	4630      	mov	r0, r6
 80167f8:	f7ff ff30 	bl	801665c <CODEC_IO_Write>
 80167fc:	4404      	add	r4, r0
}
 80167fe:	4620      	mov	r0, r4
 8016800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8016804:	2564      	movs	r5, #100	; 0x64
 8016806:	e7c0      	b.n	801678a <wm8994_SetVolume+0x1e>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8016808:	2100      	movs	r1, #0
 801680a:	4630      	mov	r0, r6
 801680c:	f7ff ff2c 	bl	8016668 <wm8994_SetMute>
 8016810:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8016812:	b2f5      	uxtb	r5, r6
 8016814:	f240 127f 	movw	r2, #383	; 0x17f
 8016818:	211c      	movs	r1, #28
 801681a:	4628      	mov	r0, r5
 801681c:	f7ff ff1e 	bl	801665c <CODEC_IO_Write>
 8016820:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8016822:	f240 127f 	movw	r2, #383	; 0x17f
 8016826:	211d      	movs	r1, #29
 8016828:	4628      	mov	r0, r5
 801682a:	f7ff ff17 	bl	801665c <CODEC_IO_Write>
 801682e:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8016830:	f240 127f 	movw	r2, #383	; 0x17f
 8016834:	2126      	movs	r1, #38	; 0x26
 8016836:	4628      	mov	r0, r5
 8016838:	f7ff ff10 	bl	801665c <CODEC_IO_Write>
 801683c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 801683e:	f240 127f 	movw	r2, #383	; 0x17f
 8016842:	2127      	movs	r1, #39	; 0x27
 8016844:	4628      	mov	r0, r5
 8016846:	f7ff ff09 	bl	801665c <CODEC_IO_Write>
 801684a:	4404      	add	r4, r0
 801684c:	e7a9      	b.n	80167a2 <wm8994_SetVolume+0x36>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 801684e:	2100      	movs	r1, #0
 8016850:	4630      	mov	r0, r6
 8016852:	f7ff ff09 	bl	8016668 <wm8994_SetMute>
 8016856:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8016858:	fa5f f886 	uxtb.w	r8, r6
 801685c:	f445 75a0 	orr.w	r5, r5, #320	; 0x140
 8016860:	462a      	mov	r2, r5
 8016862:	211c      	movs	r1, #28
 8016864:	4640      	mov	r0, r8
 8016866:	f7ff fef9 	bl	801665c <CODEC_IO_Write>
 801686a:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 801686c:	462a      	mov	r2, r5
 801686e:	211d      	movs	r1, #29
 8016870:	4640      	mov	r0, r8
 8016872:	f7ff fef3 	bl	801665c <CODEC_IO_Write>
 8016876:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8016878:	462a      	mov	r2, r5
 801687a:	2126      	movs	r1, #38	; 0x26
 801687c:	4640      	mov	r0, r8
 801687e:	f7ff feed 	bl	801665c <CODEC_IO_Write>
 8016882:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8016884:	462a      	mov	r2, r5
 8016886:	2127      	movs	r1, #39	; 0x27
 8016888:	4640      	mov	r0, r8
 801688a:	f7ff fee7 	bl	801665c <CODEC_IO_Write>
 801688e:	4404      	add	r4, r0
 8016890:	e787      	b.n	80167a2 <wm8994_SetVolume+0x36>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8016892:	25ef      	movs	r5, #239	; 0xef
 8016894:	e794      	b.n	80167c0 <wm8994_SetVolume+0x54>
 8016896:	bf00      	nop
 8016898:	51eb851f 	.word	0x51eb851f
 801689c:	20001550 	.word	0x20001550
 80168a0:	2000154c 	.word	0x2000154c

080168a4 <wm8994_Init>:
{
 80168a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168a8:	4680      	mov	r8, r0
 80168aa:	4691      	mov	r9, r2
 80168ac:	469a      	mov	sl, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 80168ae:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80168b0:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 80168b4:	f7fd fecc 	bl	8014650 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80168b8:	fa5f f588 	uxtb.w	r5, r8
 80168bc:	2203      	movs	r2, #3
 80168be:	f44f 7181 	mov.w	r1, #258	; 0x102
 80168c2:	4628      	mov	r0, r5
 80168c4:	f7ff feca 	bl	801665c <CODEC_IO_Write>
 80168c8:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80168ca:	2200      	movs	r2, #0
 80168cc:	f640 0117 	movw	r1, #2071	; 0x817
 80168d0:	4628      	mov	r0, r5
 80168d2:	f7ff fec3 	bl	801665c <CODEC_IO_Write>
 80168d6:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80168d8:	2200      	movs	r2, #0
 80168da:	f44f 7181 	mov.w	r1, #258	; 0x102
 80168de:	4628      	mov	r0, r5
 80168e0:	f7ff febc 	bl	801665c <CODEC_IO_Write>
 80168e4:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80168e6:	226c      	movs	r2, #108	; 0x6c
 80168e8:	2139      	movs	r1, #57	; 0x39
 80168ea:	4628      	mov	r0, r5
 80168ec:	f7ff feb6 	bl	801665c <CODEC_IO_Write>
 80168f0:	4404      	add	r4, r0
  if (input_device > 0)
 80168f2:	b3c6      	cbz	r6, 8016966 <wm8994_Init+0xc2>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80168f4:	2213      	movs	r2, #19
 80168f6:	2101      	movs	r1, #1
 80168f8:	4628      	mov	r0, r5
 80168fa:	f7ff feaf 	bl	801665c <CODEC_IO_Write>
 80168fe:	4404      	add	r4, r0
  AUDIO_IO_Delay(50);
 8016900:	2032      	movs	r0, #50	; 0x32
 8016902:	f7fd fee5 	bl	80146d0 <AUDIO_IO_Delay>
  if (output_device > 0)
 8016906:	2f00      	cmp	r7, #0
 8016908:	f000 80c7 	beq.w	8016a9a <wm8994_Init+0x1f6>
    outputEnabled = 1;
 801690c:	4be9      	ldr	r3, [pc, #932]	; (8016cb4 <wm8994_Init+0x410>)
 801690e:	2201      	movs	r2, #1
 8016910:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8016912:	2f02      	cmp	r7, #2
 8016914:	d052      	beq.n	80169bc <wm8994_Init+0x118>
 8016916:	2f03      	cmp	r7, #3
 8016918:	d074      	beq.n	8016a04 <wm8994_Init+0x160>
 801691a:	4297      	cmp	r7, r2
 801691c:	d02a      	beq.n	8016974 <wm8994_Init+0xd0>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 801691e:	f240 3203 	movw	r2, #771	; 0x303
 8016922:	2105      	movs	r1, #5
 8016924:	4628      	mov	r0, r5
 8016926:	f7ff fe99 	bl	801665c <CODEC_IO_Write>
 801692a:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 801692c:	2201      	movs	r2, #1
 801692e:	f240 6101 	movw	r1, #1537	; 0x601
 8016932:	4628      	mov	r0, r5
 8016934:	f7ff fe92 	bl	801665c <CODEC_IO_Write>
 8016938:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 801693a:	2201      	movs	r2, #1
 801693c:	f240 6102 	movw	r1, #1538	; 0x602
 8016940:	4628      	mov	r0, r5
 8016942:	f7ff fe8b 	bl	801665c <CODEC_IO_Write>
 8016946:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8016948:	2200      	movs	r2, #0
 801694a:	f240 6104 	movw	r1, #1540	; 0x604
 801694e:	4628      	mov	r0, r5
 8016950:	f7ff fe84 	bl	801665c <CODEC_IO_Write>
 8016954:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8016956:	2200      	movs	r2, #0
 8016958:	f240 6105 	movw	r1, #1541	; 0x605
 801695c:	4628      	mov	r0, r5
 801695e:	f7ff fe7d 	bl	801665c <CODEC_IO_Write>
 8016962:	4404      	add	r4, r0
      break;
 8016964:	e09c      	b.n	8016aa0 <wm8994_Init+0x1fc>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8016966:	2203      	movs	r2, #3
 8016968:	2101      	movs	r1, #1
 801696a:	4628      	mov	r0, r5
 801696c:	f7ff fe76 	bl	801665c <CODEC_IO_Write>
 8016970:	4404      	add	r4, r0
 8016972:	e7c5      	b.n	8016900 <wm8994_Init+0x5c>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8016974:	f640 420c 	movw	r2, #3084	; 0xc0c
 8016978:	2105      	movs	r1, #5
 801697a:	4628      	mov	r0, r5
 801697c:	f7ff fe6e 	bl	801665c <CODEC_IO_Write>
 8016980:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8016982:	2200      	movs	r2, #0
 8016984:	f240 6101 	movw	r1, #1537	; 0x601
 8016988:	4628      	mov	r0, r5
 801698a:	f7ff fe67 	bl	801665c <CODEC_IO_Write>
 801698e:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8016990:	2200      	movs	r2, #0
 8016992:	f240 6102 	movw	r1, #1538	; 0x602
 8016996:	4628      	mov	r0, r5
 8016998:	f7ff fe60 	bl	801665c <CODEC_IO_Write>
 801699c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 801699e:	2202      	movs	r2, #2
 80169a0:	f240 6104 	movw	r1, #1540	; 0x604
 80169a4:	4628      	mov	r0, r5
 80169a6:	f7ff fe59 	bl	801665c <CODEC_IO_Write>
 80169aa:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80169ac:	2202      	movs	r2, #2
 80169ae:	f240 6105 	movw	r1, #1541	; 0x605
 80169b2:	4628      	mov	r0, r5
 80169b4:	f7ff fe52 	bl	801665c <CODEC_IO_Write>
 80169b8:	4404      	add	r4, r0
      break;
 80169ba:	e071      	b.n	8016aa0 <wm8994_Init+0x1fc>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80169bc:	f240 3203 	movw	r2, #771	; 0x303
 80169c0:	2105      	movs	r1, #5
 80169c2:	4628      	mov	r0, r5
 80169c4:	f7ff fe4a 	bl	801665c <CODEC_IO_Write>
 80169c8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80169ca:	2201      	movs	r2, #1
 80169cc:	f240 6101 	movw	r1, #1537	; 0x601
 80169d0:	4628      	mov	r0, r5
 80169d2:	f7ff fe43 	bl	801665c <CODEC_IO_Write>
 80169d6:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80169d8:	2201      	movs	r2, #1
 80169da:	f240 6102 	movw	r1, #1538	; 0x602
 80169de:	4628      	mov	r0, r5
 80169e0:	f7ff fe3c 	bl	801665c <CODEC_IO_Write>
 80169e4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80169e6:	2200      	movs	r2, #0
 80169e8:	f240 6104 	movw	r1, #1540	; 0x604
 80169ec:	4628      	mov	r0, r5
 80169ee:	f7ff fe35 	bl	801665c <CODEC_IO_Write>
 80169f2:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80169f4:	2200      	movs	r2, #0
 80169f6:	f240 6105 	movw	r1, #1541	; 0x605
 80169fa:	4628      	mov	r0, r5
 80169fc:	f7ff fe2e 	bl	801665c <CODEC_IO_Write>
 8016a00:	4404      	add	r4, r0
      break;
 8016a02:	e04d      	b.n	8016aa0 <wm8994_Init+0x1fc>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8016a04:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8016a08:	d023      	beq.n	8016a52 <wm8994_Init+0x1ae>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8016a0a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8016a0e:	2105      	movs	r1, #5
 8016a10:	4628      	mov	r0, r5
 8016a12:	f7ff fe23 	bl	801665c <CODEC_IO_Write>
 8016a16:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8016a18:	2201      	movs	r2, #1
 8016a1a:	f240 6101 	movw	r1, #1537	; 0x601
 8016a1e:	4628      	mov	r0, r5
 8016a20:	f7ff fe1c 	bl	801665c <CODEC_IO_Write>
 8016a24:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8016a26:	2201      	movs	r2, #1
 8016a28:	f240 6102 	movw	r1, #1538	; 0x602
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	f7ff fe15 	bl	801665c <CODEC_IO_Write>
 8016a32:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8016a34:	2202      	movs	r2, #2
 8016a36:	f240 6104 	movw	r1, #1540	; 0x604
 8016a3a:	4628      	mov	r0, r5
 8016a3c:	f7ff fe0e 	bl	801665c <CODEC_IO_Write>
 8016a40:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8016a42:	2202      	movs	r2, #2
 8016a44:	f240 6105 	movw	r1, #1541	; 0x605
 8016a48:	4628      	mov	r0, r5
 8016a4a:	f7ff fe07 	bl	801665c <CODEC_IO_Write>
 8016a4e:	4404      	add	r4, r0
 8016a50:	e026      	b.n	8016aa0 <wm8994_Init+0x1fc>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8016a52:	f640 720f 	movw	r2, #3855	; 0xf0f
 8016a56:	2105      	movs	r1, #5
 8016a58:	4628      	mov	r0, r5
 8016a5a:	f7ff fdff 	bl	801665c <CODEC_IO_Write>
 8016a5e:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8016a60:	2203      	movs	r2, #3
 8016a62:	f240 6101 	movw	r1, #1537	; 0x601
 8016a66:	4628      	mov	r0, r5
 8016a68:	f7ff fdf8 	bl	801665c <CODEC_IO_Write>
 8016a6c:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8016a6e:	2203      	movs	r2, #3
 8016a70:	f240 6102 	movw	r1, #1538	; 0x602
 8016a74:	4628      	mov	r0, r5
 8016a76:	f7ff fdf1 	bl	801665c <CODEC_IO_Write>
 8016a7a:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8016a7c:	2203      	movs	r2, #3
 8016a7e:	f240 6104 	movw	r1, #1540	; 0x604
 8016a82:	4628      	mov	r0, r5
 8016a84:	f7ff fdea 	bl	801665c <CODEC_IO_Write>
 8016a88:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8016a8a:	2203      	movs	r2, #3
 8016a8c:	f240 6105 	movw	r1, #1541	; 0x605
 8016a90:	4628      	mov	r0, r5
 8016a92:	f7ff fde3 	bl	801665c <CODEC_IO_Write>
 8016a96:	4404      	add	r4, r0
 8016a98:	e002      	b.n	8016aa0 <wm8994_Init+0x1fc>
    outputEnabled = 0;
 8016a9a:	4b86      	ldr	r3, [pc, #536]	; (8016cb4 <wm8994_Init+0x410>)
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 8016aa0:	2e00      	cmp	r6, #0
 8016aa2:	f000 80e8 	beq.w	8016c76 <wm8994_Init+0x3d2>
    inputEnabled = 1;
 8016aa6:	4b84      	ldr	r3, [pc, #528]	; (8016cb8 <wm8994_Init+0x414>)
 8016aa8:	2201      	movs	r2, #1
 8016aaa:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8016aac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8016ab0:	d077      	beq.n	8016ba2 <wm8994_Init+0x2fe>
 8016ab2:	d947      	bls.n	8016b44 <wm8994_Init+0x2a0>
 8016ab4:	f5b6 7f40 	cmp.w	r6, #768	; 0x300
 8016ab8:	f000 809e 	beq.w	8016bf8 <wm8994_Init+0x354>
 8016abc:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8016ac0:	f040 80d7 	bne.w	8016c72 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8016ac4:	f640 723c 	movw	r2, #3900	; 0xf3c
 8016ac8:	2104      	movs	r1, #4
 8016aca:	4628      	mov	r0, r5
 8016acc:	f7ff fdc6 	bl	801665c <CODEC_IO_Write>
 8016ad0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8016ad2:	22db      	movs	r2, #219	; 0xdb
 8016ad4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8016ad8:	4628      	mov	r0, r5
 8016ada:	f7ff fdbf 	bl	801665c <CODEC_IO_Write>
 8016ade:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8016ae0:	22db      	movs	r2, #219	; 0xdb
 8016ae2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8016ae6:	4628      	mov	r0, r5
 8016ae8:	f7ff fdb8 	bl	801665c <CODEC_IO_Write>
 8016aec:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8016aee:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8016af2:	2102      	movs	r1, #2
 8016af4:	4628      	mov	r0, r5
 8016af6:	f7ff fdb1 	bl	801665c <CODEC_IO_Write>
 8016afa:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8016afc:	2202      	movs	r2, #2
 8016afe:	f240 6106 	movw	r1, #1542	; 0x606
 8016b02:	4628      	mov	r0, r5
 8016b04:	f7ff fdaa 	bl	801665c <CODEC_IO_Write>
 8016b08:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8016b0a:	2202      	movs	r2, #2
 8016b0c:	f240 6107 	movw	r1, #1543	; 0x607
 8016b10:	4628      	mov	r0, r5
 8016b12:	f7ff fda3 	bl	801665c <CODEC_IO_Write>
 8016b16:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8016b18:	2202      	movs	r2, #2
 8016b1a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8016b1e:	4628      	mov	r0, r5
 8016b20:	f7ff fd9c 	bl	801665c <CODEC_IO_Write>
 8016b24:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8016b26:	2202      	movs	r2, #2
 8016b28:	f240 6109 	movw	r1, #1545	; 0x609
 8016b2c:	4628      	mov	r0, r5
 8016b2e:	f7ff fd95 	bl	801665c <CODEC_IO_Write>
 8016b32:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8016b34:	220d      	movs	r2, #13
 8016b36:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8016b3a:	4628      	mov	r0, r5
 8016b3c:	f7ff fd8e 	bl	801665c <CODEC_IO_Write>
 8016b40:	4404      	add	r4, r0
      break;    
 8016b42:	e09b      	b.n	8016c7c <wm8994_Init+0x3d8>
    switch (input_device)
 8016b44:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8016b48:	f040 8093 	bne.w	8016c72 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8016b4c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8016b50:	2104      	movs	r1, #4
 8016b52:	4628      	mov	r0, r5
 8016b54:	f7ff fd82 	bl	801665c <CODEC_IO_Write>
 8016b58:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8016b5a:	22db      	movs	r2, #219	; 0xdb
 8016b5c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8016b60:	4628      	mov	r0, r5
 8016b62:	f7ff fd7b 	bl	801665c <CODEC_IO_Write>
 8016b66:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8016b68:	f246 3250 	movw	r2, #25424	; 0x6350
 8016b6c:	2102      	movs	r1, #2
 8016b6e:	4628      	mov	r0, r5
 8016b70:	f7ff fd74 	bl	801665c <CODEC_IO_Write>
 8016b74:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8016b76:	2202      	movs	r2, #2
 8016b78:	f240 6106 	movw	r1, #1542	; 0x606
 8016b7c:	4628      	mov	r0, r5
 8016b7e:	f7ff fd6d 	bl	801665c <CODEC_IO_Write>
 8016b82:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8016b84:	2202      	movs	r2, #2
 8016b86:	f240 6107 	movw	r1, #1543	; 0x607
 8016b8a:	4628      	mov	r0, r5
 8016b8c:	f7ff fd66 	bl	801665c <CODEC_IO_Write>
 8016b90:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8016b92:	220d      	movs	r2, #13
 8016b94:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8016b98:	4628      	mov	r0, r5
 8016b9a:	f7ff fd5f 	bl	801665c <CODEC_IO_Write>
 8016b9e:	4404      	add	r4, r0
      break; 
 8016ba0:	e06c      	b.n	8016c7c <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8016ba2:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8016ba6:	2104      	movs	r1, #4
 8016ba8:	4628      	mov	r0, r5
 8016baa:	f7ff fd57 	bl	801665c <CODEC_IO_Write>
 8016bae:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8016bb0:	22db      	movs	r2, #219	; 0xdb
 8016bb2:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8016bb6:	4628      	mov	r0, r5
 8016bb8:	f7ff fd50 	bl	801665c <CODEC_IO_Write>
 8016bbc:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8016bbe:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8016bc2:	2102      	movs	r1, #2
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	f7ff fd49 	bl	801665c <CODEC_IO_Write>
 8016bca:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8016bcc:	2202      	movs	r2, #2
 8016bce:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8016bd2:	4628      	mov	r0, r5
 8016bd4:	f7ff fd42 	bl	801665c <CODEC_IO_Write>
 8016bd8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8016bda:	2202      	movs	r2, #2
 8016bdc:	f240 6109 	movw	r1, #1545	; 0x609
 8016be0:	4628      	mov	r0, r5
 8016be2:	f7ff fd3b 	bl	801665c <CODEC_IO_Write>
 8016be6:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8016be8:	220e      	movs	r2, #14
 8016bea:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8016bee:	4628      	mov	r0, r5
 8016bf0:	f7ff fd34 	bl	801665c <CODEC_IO_Write>
 8016bf4:	4404      	add	r4, r0
      break;
 8016bf6:	e041      	b.n	8016c7c <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8016bf8:	2211      	movs	r2, #17
 8016bfa:	2128      	movs	r1, #40	; 0x28
 8016bfc:	4628      	mov	r0, r5
 8016bfe:	f7ff fd2d 	bl	801665c <CODEC_IO_Write>
 8016c02:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8016c04:	2235      	movs	r2, #53	; 0x35
 8016c06:	2129      	movs	r1, #41	; 0x29
 8016c08:	4628      	mov	r0, r5
 8016c0a:	f7ff fd27 	bl	801665c <CODEC_IO_Write>
 8016c0e:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8016c10:	2235      	movs	r2, #53	; 0x35
 8016c12:	212a      	movs	r1, #42	; 0x2a
 8016c14:	4628      	mov	r0, r5
 8016c16:	f7ff fd21 	bl	801665c <CODEC_IO_Write>
 8016c1a:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8016c1c:	f240 3203 	movw	r2, #771	; 0x303
 8016c20:	2104      	movs	r1, #4
 8016c22:	4628      	mov	r0, r5
 8016c24:	f7ff fd1a 	bl	801665c <CODEC_IO_Write>
 8016c28:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8016c2a:	22db      	movs	r2, #219	; 0xdb
 8016c2c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8016c30:	4628      	mov	r0, r5
 8016c32:	f7ff fd13 	bl	801665c <CODEC_IO_Write>
 8016c36:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8016c38:	f246 3250 	movw	r2, #25424	; 0x6350
 8016c3c:	2102      	movs	r1, #2
 8016c3e:	4628      	mov	r0, r5
 8016c40:	f7ff fd0c 	bl	801665c <CODEC_IO_Write>
 8016c44:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8016c46:	2202      	movs	r2, #2
 8016c48:	f240 6106 	movw	r1, #1542	; 0x606
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	f7ff fd05 	bl	801665c <CODEC_IO_Write>
 8016c52:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8016c54:	2202      	movs	r2, #2
 8016c56:	f240 6107 	movw	r1, #1543	; 0x607
 8016c5a:	4628      	mov	r0, r5
 8016c5c:	f7ff fcfe 	bl	801665c <CODEC_IO_Write>
 8016c60:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8016c62:	220d      	movs	r2, #13
 8016c64:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8016c68:	4628      	mov	r0, r5
 8016c6a:	f7ff fcf7 	bl	801665c <CODEC_IO_Write>
 8016c6e:	4404      	add	r4, r0
      break;
 8016c70:	e004      	b.n	8016c7c <wm8994_Init+0x3d8>
      counter++;
 8016c72:	3401      	adds	r4, #1
      break;
 8016c74:	e002      	b.n	8016c7c <wm8994_Init+0x3d8>
    inputEnabled = 0;
 8016c76:	4b10      	ldr	r3, [pc, #64]	; (8016cb8 <wm8994_Init+0x414>)
 8016c78:	2200      	movs	r2, #0
 8016c7a:	601a      	str	r2, [r3, #0]
  switch (AudioFreq)
 8016c7c:	f245 6322 	movw	r3, #22050	; 0x5622
 8016c80:	459a      	cmp	sl, r3
 8016c82:	f000 8095 	beq.w	8016db0 <wm8994_Init+0x50c>
 8016c86:	d91b      	bls.n	8016cc0 <wm8994_Init+0x41c>
 8016c88:	f64a 4344 	movw	r3, #44100	; 0xac44
 8016c8c:	459a      	cmp	sl, r3
 8016c8e:	f000 8097 	beq.w	8016dc0 <wm8994_Init+0x51c>
 8016c92:	d927      	bls.n	8016ce4 <wm8994_Init+0x440>
 8016c94:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8016c98:	459a      	cmp	sl, r3
 8016c9a:	d079      	beq.n	8016d90 <wm8994_Init+0x4ec>
 8016c9c:	4b07      	ldr	r3, [pc, #28]	; (8016cbc <wm8994_Init+0x418>)
 8016c9e:	459a      	cmp	sl, r3
 8016ca0:	d118      	bne.n	8016cd4 <wm8994_Init+0x430>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8016ca2:	22a3      	movs	r2, #163	; 0xa3
 8016ca4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8016ca8:	4628      	mov	r0, r5
 8016caa:	f7ff fcd7 	bl	801665c <CODEC_IO_Write>
 8016cae:	4404      	add	r4, r0
    break;
 8016cb0:	e02a      	b.n	8016d08 <wm8994_Init+0x464>
 8016cb2:	bf00      	nop
 8016cb4:	20001550 	.word	0x20001550
 8016cb8:	2000154c 	.word	0x2000154c
 8016cbc:	00017700 	.word	0x00017700
  switch (AudioFreq)
 8016cc0:	f642 3311 	movw	r3, #11025	; 0x2b11
 8016cc4:	459a      	cmp	sl, r3
 8016cc6:	d06b      	beq.n	8016da0 <wm8994_Init+0x4fc>
 8016cc8:	f5ba 5f7a 	cmp.w	sl, #16000	; 0x3e80
 8016ccc:	d058      	beq.n	8016d80 <wm8994_Init+0x4dc>
 8016cce:	f5ba 5ffa 	cmp.w	sl, #8000	; 0x1f40
 8016cd2:	d012      	beq.n	8016cfa <wm8994_Init+0x456>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8016cd4:	2283      	movs	r2, #131	; 0x83
 8016cd6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8016cda:	4628      	mov	r0, r5
 8016cdc:	f7ff fcbe 	bl	801665c <CODEC_IO_Write>
 8016ce0:	4404      	add	r4, r0
    break; 
 8016ce2:	e011      	b.n	8016d08 <wm8994_Init+0x464>
  switch (AudioFreq)
 8016ce4:	f5ba 4ffa 	cmp.w	sl, #32000	; 0x7d00
 8016ce8:	d1f4      	bne.n	8016cd4 <wm8994_Init+0x430>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8016cea:	2263      	movs	r2, #99	; 0x63
 8016cec:	f44f 7104 	mov.w	r1, #528	; 0x210
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	f7ff fcb3 	bl	801665c <CODEC_IO_Write>
 8016cf6:	4404      	add	r4, r0
    break;
 8016cf8:	e006      	b.n	8016d08 <wm8994_Init+0x464>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8016cfa:	2203      	movs	r2, #3
 8016cfc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8016d00:	4628      	mov	r0, r5
 8016d02:	f7ff fcab 	bl	801665c <CODEC_IO_Write>
 8016d06:	4404      	add	r4, r0
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8016d08:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8016d0c:	d060      	beq.n	8016dd0 <wm8994_Init+0x52c>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8016d0e:	f244 0210 	movw	r2, #16400	; 0x4010
 8016d12:	f44f 7140 	mov.w	r1, #768	; 0x300
 8016d16:	4628      	mov	r0, r5
 8016d18:	f7ff fca0 	bl	801665c <CODEC_IO_Write>
 8016d1c:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8016d1e:	2200      	movs	r2, #0
 8016d20:	f240 3102 	movw	r1, #770	; 0x302
 8016d24:	4628      	mov	r0, r5
 8016d26:	f7ff fc99 	bl	801665c <CODEC_IO_Write>
 8016d2a:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8016d2c:	220a      	movs	r2, #10
 8016d2e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8016d32:	4628      	mov	r0, r5
 8016d34:	f7ff fc92 	bl	801665c <CODEC_IO_Write>
 8016d38:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8016d3a:	2201      	movs	r2, #1
 8016d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016d40:	4628      	mov	r0, r5
 8016d42:	f7ff fc8b 	bl	801665c <CODEC_IO_Write>
 8016d46:	4404      	add	r4, r0
  if (output_device > 0)  /* Audio output selected */
 8016d48:	2f00      	cmp	r7, #0
 8016d4a:	d14a      	bne.n	8016de2 <wm8994_Init+0x53e>
  if (input_device > 0) /* Audio input selected */
 8016d4c:	b1ae      	cbz	r6, 8016d7a <wm8994_Init+0x4d6>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8016d4e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8016d52:	bf18      	it	ne
 8016d54:	f5b6 7f80 	cmpne.w	r6, #256	; 0x100
 8016d58:	f000 80df 	beq.w	8016f1a <wm8994_Init+0x676>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8016d5c:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8016d60:	f000 80f2 	beq.w	8016f48 <wm8994_Init+0x6a4>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8016d64:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016d68:	bf18      	it	ne
 8016d6a:	f5b6 7f40 	cmpne.w	r6, #768	; 0x300
 8016d6e:	f000 810a 	beq.w	8016f86 <wm8994_Init+0x6e2>
    wm8994_SetVolume(DeviceAddr, Volume);
 8016d72:	4649      	mov	r1, r9
 8016d74:	4640      	mov	r0, r8
 8016d76:	f7ff fcf9 	bl	801676c <wm8994_SetVolume>
}
 8016d7a:	4620      	mov	r0, r4
 8016d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8016d80:	2233      	movs	r2, #51	; 0x33
 8016d82:	f44f 7104 	mov.w	r1, #528	; 0x210
 8016d86:	4628      	mov	r0, r5
 8016d88:	f7ff fc68 	bl	801665c <CODEC_IO_Write>
 8016d8c:	4404      	add	r4, r0
    break;
 8016d8e:	e7bb      	b.n	8016d08 <wm8994_Init+0x464>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8016d90:	2283      	movs	r2, #131	; 0x83
 8016d92:	f44f 7104 	mov.w	r1, #528	; 0x210
 8016d96:	4628      	mov	r0, r5
 8016d98:	f7ff fc60 	bl	801665c <CODEC_IO_Write>
 8016d9c:	4404      	add	r4, r0
    break;
 8016d9e:	e7b3      	b.n	8016d08 <wm8994_Init+0x464>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8016da0:	2213      	movs	r2, #19
 8016da2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8016da6:	4628      	mov	r0, r5
 8016da8:	f7ff fc58 	bl	801665c <CODEC_IO_Write>
 8016dac:	4404      	add	r4, r0
    break;
 8016dae:	e7ab      	b.n	8016d08 <wm8994_Init+0x464>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8016db0:	2243      	movs	r2, #67	; 0x43
 8016db2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8016db6:	4628      	mov	r0, r5
 8016db8:	f7ff fc50 	bl	801665c <CODEC_IO_Write>
 8016dbc:	4404      	add	r4, r0
    break;
 8016dbe:	e7a3      	b.n	8016d08 <wm8994_Init+0x464>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8016dc0:	2273      	movs	r2, #115	; 0x73
 8016dc2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	f7ff fc48 	bl	801665c <CODEC_IO_Write>
 8016dcc:	4404      	add	r4, r0
    break; 
 8016dce:	e79b      	b.n	8016d08 <wm8994_Init+0x464>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8016dd0:	f244 0218 	movw	r2, #16408	; 0x4018
 8016dd4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8016dd8:	4628      	mov	r0, r5
 8016dda:	f7ff fc3f 	bl	801665c <CODEC_IO_Write>
 8016dde:	4404      	add	r4, r0
 8016de0:	e79d      	b.n	8016d1e <wm8994_Init+0x47a>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8016de2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8016de6:	2103      	movs	r1, #3
 8016de8:	4628      	mov	r0, r5
 8016dea:	f7ff fc37 	bl	801665c <CODEC_IO_Write>
 8016dee:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8016df0:	2200      	movs	r2, #0
 8016df2:	2122      	movs	r1, #34	; 0x22
 8016df4:	4628      	mov	r0, r5
 8016df6:	f7ff fc31 	bl	801665c <CODEC_IO_Write>
 8016dfa:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	2123      	movs	r1, #35	; 0x23
 8016e00:	4628      	mov	r0, r5
 8016e02:	f7ff fc2b 	bl	801665c <CODEC_IO_Write>
 8016e06:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8016e08:	f44f 7240 	mov.w	r2, #768	; 0x300
 8016e0c:	2136      	movs	r1, #54	; 0x36
 8016e0e:	4628      	mov	r0, r5
 8016e10:	f7ff fc24 	bl	801665c <CODEC_IO_Write>
 8016e14:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8016e16:	f243 0203 	movw	r2, #12291	; 0x3003
 8016e1a:	2101      	movs	r1, #1
 8016e1c:	4628      	mov	r0, r5
 8016e1e:	f7ff fc1d 	bl	801665c <CODEC_IO_Write>
 8016e22:	4404      	add	r4, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8016e24:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8016e28:	d06f      	beq.n	8016f0a <wm8994_Init+0x666>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8016e2a:	2205      	movs	r2, #5
 8016e2c:	2151      	movs	r1, #81	; 0x51
 8016e2e:	4628      	mov	r0, r5
 8016e30:	f7ff fc14 	bl	801665c <CODEC_IO_Write>
 8016e34:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8016e36:	f243 3203 	movw	r2, #13059	; 0x3303
 8016e3a:	2101      	movs	r1, #1
 8016e3c:	4628      	mov	r0, r5
 8016e3e:	f7ff fc0d 	bl	801665c <CODEC_IO_Write>
 8016e42:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8016e44:	2222      	movs	r2, #34	; 0x22
 8016e46:	2160      	movs	r1, #96	; 0x60
 8016e48:	4628      	mov	r0, r5
 8016e4a:	f7ff fc07 	bl	801665c <CODEC_IO_Write>
 8016e4e:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8016e50:	f649 7225 	movw	r2, #40741	; 0x9f25
 8016e54:	214c      	movs	r1, #76	; 0x4c
 8016e56:	4628      	mov	r0, r5
 8016e58:	f7ff fc00 	bl	801665c <CODEC_IO_Write>
 8016e5c:	4404      	add	r4, r0
    AUDIO_IO_Delay(15);
 8016e5e:	200f      	movs	r0, #15
 8016e60:	f7fd fc36 	bl	80146d0 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8016e64:	2201      	movs	r2, #1
 8016e66:	212d      	movs	r1, #45	; 0x2d
 8016e68:	4628      	mov	r0, r5
 8016e6a:	f7ff fbf7 	bl	801665c <CODEC_IO_Write>
 8016e6e:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8016e70:	2201      	movs	r2, #1
 8016e72:	212e      	movs	r1, #46	; 0x2e
 8016e74:	4628      	mov	r0, r5
 8016e76:	f7ff fbf1 	bl	801665c <CODEC_IO_Write>
 8016e7a:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8016e7c:	f44f 724c 	mov.w	r2, #816	; 0x330
 8016e80:	2103      	movs	r1, #3
 8016e82:	4628      	mov	r0, r5
 8016e84:	f7ff fbea 	bl	801665c <CODEC_IO_Write>
 8016e88:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8016e8a:	2233      	movs	r2, #51	; 0x33
 8016e8c:	2154      	movs	r1, #84	; 0x54
 8016e8e:	4628      	mov	r0, r5
 8016e90:	f7ff fbe4 	bl	801665c <CODEC_IO_Write>
 8016e94:	4404      	add	r4, r0
    AUDIO_IO_Delay(250);
 8016e96:	20fa      	movs	r0, #250	; 0xfa
 8016e98:	f7fd fc1a 	bl	80146d0 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8016e9c:	22ee      	movs	r2, #238	; 0xee
 8016e9e:	2160      	movs	r1, #96	; 0x60
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	f7ff fbdb 	bl	801665c <CODEC_IO_Write>
 8016ea6:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8016ea8:	22c0      	movs	r2, #192	; 0xc0
 8016eaa:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8016eae:	4628      	mov	r0, r5
 8016eb0:	f7ff fbd4 	bl	801665c <CODEC_IO_Write>
 8016eb4:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8016eb6:	22c0      	movs	r2, #192	; 0xc0
 8016eb8:	f240 6111 	movw	r1, #1553	; 0x611
 8016ebc:	4628      	mov	r0, r5
 8016ebe:	f7ff fbcd 	bl	801665c <CODEC_IO_Write>
 8016ec2:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8016eca:	4628      	mov	r0, r5
 8016ecc:	f7ff fbc6 	bl	801665c <CODEC_IO_Write>
 8016ed0:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8016ed2:	22c0      	movs	r2, #192	; 0xc0
 8016ed4:	f240 6112 	movw	r1, #1554	; 0x612
 8016ed8:	4628      	mov	r0, r5
 8016eda:	f7ff fbbf 	bl	801665c <CODEC_IO_Write>
 8016ede:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8016ee0:	22c0      	movs	r2, #192	; 0xc0
 8016ee2:	f240 6113 	movw	r1, #1555	; 0x613
 8016ee6:	4628      	mov	r0, r5
 8016ee8:	f7ff fbb8 	bl	801665c <CODEC_IO_Write>
 8016eec:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8016eee:	2200      	movs	r2, #0
 8016ef0:	f240 4122 	movw	r1, #1058	; 0x422
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	f7ff fbb1 	bl	801665c <CODEC_IO_Write>
 8016efa:	4404      	add	r4, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 8016efc:	4649      	mov	r1, r9
 8016efe:	4640      	mov	r0, r8
 8016f00:	f7ff fc34 	bl	801676c <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8016f04:	f243 3703 	movw	r7, #13059	; 0x3303
 8016f08:	e720      	b.n	8016d4c <wm8994_Init+0x4a8>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8016f0a:	f240 2205 	movw	r2, #517	; 0x205
 8016f0e:	2151      	movs	r1, #81	; 0x51
 8016f10:	4628      	mov	r0, r5
 8016f12:	f7ff fba3 	bl	801665c <CODEC_IO_Write>
 8016f16:	4404      	add	r4, r0
 8016f18:	e78d      	b.n	8016e36 <wm8994_Init+0x592>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8016f1a:	f047 0213 	orr.w	r2, r7, #19
 8016f1e:	2101      	movs	r1, #1
 8016f20:	4628      	mov	r0, r5
 8016f22:	f7ff fb9b 	bl	801665c <CODEC_IO_Write>
 8016f26:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8016f28:	2202      	movs	r2, #2
 8016f2a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8016f2e:	4628      	mov	r0, r5
 8016f30:	f7ff fb94 	bl	801665c <CODEC_IO_Write>
 8016f34:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8016f36:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8016f3a:	f240 4111 	movw	r1, #1041	; 0x411
 8016f3e:	4628      	mov	r0, r5
 8016f40:	f7ff fb8c 	bl	801665c <CODEC_IO_Write>
 8016f44:	4404      	add	r4, r0
 8016f46:	e714      	b.n	8016d72 <wm8994_Init+0x4ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8016f48:	f047 0213 	orr.w	r2, r7, #19
 8016f4c:	2101      	movs	r1, #1
 8016f4e:	4628      	mov	r0, r5
 8016f50:	f7ff fb84 	bl	801665c <CODEC_IO_Write>
 8016f54:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8016f56:	2202      	movs	r2, #2
 8016f58:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	f7ff fb7d 	bl	801665c <CODEC_IO_Write>
 8016f62:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8016f64:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8016f68:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8016f6c:	4628      	mov	r0, r5
 8016f6e:	f7ff fb75 	bl	801665c <CODEC_IO_Write>
 8016f72:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8016f74:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8016f78:	f240 4111 	movw	r1, #1041	; 0x411
 8016f7c:	4628      	mov	r0, r5
 8016f7e:	f7ff fb6d 	bl	801665c <CODEC_IO_Write>
 8016f82:	4404      	add	r4, r0
 8016f84:	e6f5      	b.n	8016d72 <wm8994_Init+0x4ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8016f86:	220b      	movs	r2, #11
 8016f88:	2118      	movs	r1, #24
 8016f8a:	4628      	mov	r0, r5
 8016f8c:	f7ff fb66 	bl	801665c <CODEC_IO_Write>
 8016f90:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8016f92:	220b      	movs	r2, #11
 8016f94:	211a      	movs	r1, #26
 8016f96:	4628      	mov	r0, r5
 8016f98:	f7ff fb60 	bl	801665c <CODEC_IO_Write>
 8016f9c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8016f9e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8016fa2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	f7ff fb58 	bl	801665c <CODEC_IO_Write>
 8016fac:	4404      	add	r4, r0
 8016fae:	e6e0      	b.n	8016d72 <wm8994_Init+0x4ce>

08016fb0 <wm8994_SetOutputMode>:
{
 8016fb0:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 8016fb2:	2902      	cmp	r1, #2
 8016fb4:	d04d      	beq.n	8017052 <wm8994_SetOutputMode+0xa2>
 8016fb6:	2903      	cmp	r1, #3
 8016fb8:	d070      	beq.n	801709c <wm8994_SetOutputMode+0xec>
 8016fba:	2901      	cmp	r1, #1
 8016fbc:	d024      	beq.n	8017008 <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8016fbe:	b2c5      	uxtb	r5, r0
 8016fc0:	f240 3203 	movw	r2, #771	; 0x303
 8016fc4:	2105      	movs	r1, #5
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f7ff fb48 	bl	801665c <CODEC_IO_Write>
 8016fcc:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8016fce:	2201      	movs	r2, #1
 8016fd0:	f240 6101 	movw	r1, #1537	; 0x601
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f7ff fb41 	bl	801665c <CODEC_IO_Write>
 8016fda:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8016fdc:	2201      	movs	r2, #1
 8016fde:	f240 6102 	movw	r1, #1538	; 0x602
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	f7ff fb3a 	bl	801665c <CODEC_IO_Write>
 8016fe8:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8016fea:	2200      	movs	r2, #0
 8016fec:	f240 6104 	movw	r1, #1540	; 0x604
 8016ff0:	4628      	mov	r0, r5
 8016ff2:	f7ff fb33 	bl	801665c <CODEC_IO_Write>
 8016ff6:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	f240 6105 	movw	r1, #1541	; 0x605
 8016ffe:	4628      	mov	r0, r5
 8017000:	f7ff fb2c 	bl	801665c <CODEC_IO_Write>
 8017004:	4420      	add	r0, r4
  return counter;
 8017006:	e023      	b.n	8017050 <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8017008:	b2c5      	uxtb	r5, r0
 801700a:	f640 420c 	movw	r2, #3084	; 0xc0c
 801700e:	2105      	movs	r1, #5
 8017010:	4628      	mov	r0, r5
 8017012:	f7ff fb23 	bl	801665c <CODEC_IO_Write>
 8017016:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8017018:	2200      	movs	r2, #0
 801701a:	f240 6101 	movw	r1, #1537	; 0x601
 801701e:	4628      	mov	r0, r5
 8017020:	f7ff fb1c 	bl	801665c <CODEC_IO_Write>
 8017024:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8017026:	2200      	movs	r2, #0
 8017028:	f240 6102 	movw	r1, #1538	; 0x602
 801702c:	4628      	mov	r0, r5
 801702e:	f7ff fb15 	bl	801665c <CODEC_IO_Write>
 8017032:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8017034:	2202      	movs	r2, #2
 8017036:	f240 6104 	movw	r1, #1540	; 0x604
 801703a:	4628      	mov	r0, r5
 801703c:	f7ff fb0e 	bl	801665c <CODEC_IO_Write>
 8017040:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8017042:	2202      	movs	r2, #2
 8017044:	f240 6105 	movw	r1, #1541	; 0x605
 8017048:	4628      	mov	r0, r5
 801704a:	f7ff fb07 	bl	801665c <CODEC_IO_Write>
 801704e:	4420      	add	r0, r4
}
 8017050:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8017052:	b2c5      	uxtb	r5, r0
 8017054:	f240 3203 	movw	r2, #771	; 0x303
 8017058:	2105      	movs	r1, #5
 801705a:	4628      	mov	r0, r5
 801705c:	f7ff fafe 	bl	801665c <CODEC_IO_Write>
 8017060:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8017062:	2201      	movs	r2, #1
 8017064:	f240 6101 	movw	r1, #1537	; 0x601
 8017068:	4628      	mov	r0, r5
 801706a:	f7ff faf7 	bl	801665c <CODEC_IO_Write>
 801706e:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8017070:	2201      	movs	r2, #1
 8017072:	f240 6102 	movw	r1, #1538	; 0x602
 8017076:	4628      	mov	r0, r5
 8017078:	f7ff faf0 	bl	801665c <CODEC_IO_Write>
 801707c:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 801707e:	2200      	movs	r2, #0
 8017080:	f240 6104 	movw	r1, #1540	; 0x604
 8017084:	4628      	mov	r0, r5
 8017086:	f7ff fae9 	bl	801665c <CODEC_IO_Write>
 801708a:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 801708c:	2200      	movs	r2, #0
 801708e:	f240 6105 	movw	r1, #1541	; 0x605
 8017092:	4628      	mov	r0, r5
 8017094:	f7ff fae2 	bl	801665c <CODEC_IO_Write>
 8017098:	4420      	add	r0, r4
    break;
 801709a:	e7d9      	b.n	8017050 <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 801709c:	b2c5      	uxtb	r5, r0
 801709e:	f640 720f 	movw	r2, #3855	; 0xf0f
 80170a2:	2105      	movs	r1, #5
 80170a4:	4628      	mov	r0, r5
 80170a6:	f7ff fad9 	bl	801665c <CODEC_IO_Write>
 80170aa:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80170ac:	2201      	movs	r2, #1
 80170ae:	f240 6101 	movw	r1, #1537	; 0x601
 80170b2:	4628      	mov	r0, r5
 80170b4:	f7ff fad2 	bl	801665c <CODEC_IO_Write>
 80170b8:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80170ba:	2201      	movs	r2, #1
 80170bc:	f240 6102 	movw	r1, #1538	; 0x602
 80170c0:	4628      	mov	r0, r5
 80170c2:	f7ff facb 	bl	801665c <CODEC_IO_Write>
 80170c6:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80170c8:	2202      	movs	r2, #2
 80170ca:	f240 6104 	movw	r1, #1540	; 0x604
 80170ce:	4628      	mov	r0, r5
 80170d0:	f7ff fac4 	bl	801665c <CODEC_IO_Write>
 80170d4:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80170d6:	2202      	movs	r2, #2
 80170d8:	f240 6105 	movw	r1, #1541	; 0x605
 80170dc:	4628      	mov	r0, r5
 80170de:	f7ff fabd 	bl	801665c <CODEC_IO_Write>
 80170e2:	4420      	add	r0, r4
    break;
 80170e4:	e7b4      	b.n	8017050 <wm8994_SetOutputMode+0xa0>
	...

080170e8 <wm8994_SetFrequency>:
{
 80170e8:	b508      	push	{r3, lr}
  switch (AudioFreq)
 80170ea:	f245 6322 	movw	r3, #22050	; 0x5622
 80170ee:	4299      	cmp	r1, r3
 80170f0:	d046      	beq.n	8017180 <wm8994_SetFrequency+0x98>
 80170f2:	d810      	bhi.n	8017116 <wm8994_SetFrequency+0x2e>
 80170f4:	f642 3311 	movw	r3, #11025	; 0x2b11
 80170f8:	4299      	cmp	r1, r3
 80170fa:	d03a      	beq.n	8017172 <wm8994_SetFrequency+0x8a>
 80170fc:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8017100:	d022      	beq.n	8017148 <wm8994_SetFrequency+0x60>
 8017102:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8017106:	d018      	beq.n	801713a <wm8994_SetFrequency+0x52>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8017108:	2283      	movs	r2, #131	; 0x83
 801710a:	f44f 7104 	mov.w	r1, #528	; 0x210
 801710e:	b2c0      	uxtb	r0, r0
 8017110:	f7ff faa4 	bl	801665c <CODEC_IO_Write>
  return counter;
 8017114:	e017      	b.n	8017146 <wm8994_SetFrequency+0x5e>
  switch (AudioFreq)
 8017116:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801711a:	4299      	cmp	r1, r3
 801711c:	d01b      	beq.n	8017156 <wm8994_SetFrequency+0x6e>
 801711e:	4b1c      	ldr	r3, [pc, #112]	; (8017190 <wm8994_SetFrequency+0xa8>)
 8017120:	4299      	cmp	r1, r3
 8017122:	d01f      	beq.n	8017164 <wm8994_SetFrequency+0x7c>
 8017124:	f64a 4344 	movw	r3, #44100	; 0xac44
 8017128:	4299      	cmp	r1, r3
 801712a:	d1ed      	bne.n	8017108 <wm8994_SetFrequency+0x20>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 801712c:	2273      	movs	r2, #115	; 0x73
 801712e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8017132:	b2c0      	uxtb	r0, r0
 8017134:	f7ff fa92 	bl	801665c <CODEC_IO_Write>
    break; 
 8017138:	e005      	b.n	8017146 <wm8994_SetFrequency+0x5e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 801713a:	2203      	movs	r2, #3
 801713c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8017140:	b2c0      	uxtb	r0, r0
 8017142:	f7ff fa8b 	bl	801665c <CODEC_IO_Write>
}
 8017146:	bd08      	pop	{r3, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8017148:	2233      	movs	r2, #51	; 0x33
 801714a:	f44f 7104 	mov.w	r1, #528	; 0x210
 801714e:	b2c0      	uxtb	r0, r0
 8017150:	f7ff fa84 	bl	801665c <CODEC_IO_Write>
    break;
 8017154:	e7f7      	b.n	8017146 <wm8994_SetFrequency+0x5e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8017156:	2283      	movs	r2, #131	; 0x83
 8017158:	f44f 7104 	mov.w	r1, #528	; 0x210
 801715c:	b2c0      	uxtb	r0, r0
 801715e:	f7ff fa7d 	bl	801665c <CODEC_IO_Write>
    break;
 8017162:	e7f0      	b.n	8017146 <wm8994_SetFrequency+0x5e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8017164:	22a3      	movs	r2, #163	; 0xa3
 8017166:	f44f 7104 	mov.w	r1, #528	; 0x210
 801716a:	b2c0      	uxtb	r0, r0
 801716c:	f7ff fa76 	bl	801665c <CODEC_IO_Write>
    break;
 8017170:	e7e9      	b.n	8017146 <wm8994_SetFrequency+0x5e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8017172:	2213      	movs	r2, #19
 8017174:	f44f 7104 	mov.w	r1, #528	; 0x210
 8017178:	b2c0      	uxtb	r0, r0
 801717a:	f7ff fa6f 	bl	801665c <CODEC_IO_Write>
    break;
 801717e:	e7e2      	b.n	8017146 <wm8994_SetFrequency+0x5e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8017180:	2243      	movs	r2, #67	; 0x43
 8017182:	f44f 7104 	mov.w	r1, #528	; 0x210
 8017186:	b2c0      	uxtb	r0, r0
 8017188:	f7ff fa68 	bl	801665c <CODEC_IO_Write>
    break;
 801718c:	e7db      	b.n	8017146 <wm8994_SetFrequency+0x5e>
 801718e:	bf00      	nop
 8017190:	00017700 	.word	0x00017700

08017194 <wm8994_Reset>:
{
 8017194:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8017196:	2200      	movs	r2, #0
 8017198:	4611      	mov	r1, r2
 801719a:	b2c0      	uxtb	r0, r0
 801719c:	f7ff fa5e 	bl	801665c <CODEC_IO_Write>
  outputEnabled = 0;
 80171a0:	2300      	movs	r3, #0
 80171a2:	4a02      	ldr	r2, [pc, #8]	; (80171ac <wm8994_Reset+0x18>)
 80171a4:	6013      	str	r3, [r2, #0]
  inputEnabled=0;
 80171a6:	4a02      	ldr	r2, [pc, #8]	; (80171b0 <wm8994_Reset+0x1c>)
 80171a8:	6013      	str	r3, [r2, #0]
}
 80171aa:	bd08      	pop	{r3, pc}
 80171ac:	20001550 	.word	0x20001550
 80171b0:	2000154c 	.word	0x2000154c

080171b4 <wm8994_DeInit>:
{
 80171b4:	b508      	push	{r3, lr}
  /* Deinitialize Audio Codec interface */  AUDIO_IO_DeInit();
 80171b6:	f7fd fa53 	bl	8014660 <AUDIO_IO_DeInit>
}
 80171ba:	bd08      	pop	{r3, pc}

080171bc <wm8994_ReadID>:
{
 80171bc:	b510      	push	{r4, lr}
 80171be:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 80171c0:	f7fd fa46 	bl	8014650 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80171c4:	2100      	movs	r1, #0
 80171c6:	b2e0      	uxtb	r0, r4
 80171c8:	f7fd fa64 	bl	8014694 <AUDIO_IO_Read>
}
 80171cc:	bd10      	pop	{r4, pc}
	...

080171d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80171d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017208 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80171d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80171d6:	e003      	b.n	80171e0 <LoopCopyDataInit>

080171d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80171d8:	4b0c      	ldr	r3, [pc, #48]	; (801720c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80171da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80171dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80171de:	3104      	adds	r1, #4

080171e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80171e0:	480b      	ldr	r0, [pc, #44]	; (8017210 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80171e2:	4b0c      	ldr	r3, [pc, #48]	; (8017214 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80171e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80171e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80171e8:	d3f6      	bcc.n	80171d8 <CopyDataInit>
  ldr  r2, =_sbss
 80171ea:	4a0b      	ldr	r2, [pc, #44]	; (8017218 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80171ec:	e002      	b.n	80171f4 <LoopFillZerobss>

080171ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80171ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80171f0:	f842 3b04 	str.w	r3, [r2], #4

080171f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80171f4:	4b09      	ldr	r3, [pc, #36]	; (801721c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80171f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80171f8:	d3f9      	bcc.n	80171ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80171fa:	f7fe fd43 	bl	8015c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80171fe:	f000 f817 	bl	8017230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8017202:	f7fb fab3 	bl	801276c <main>
  bx  lr    
 8017206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8017208:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 801720c:	0801d288 	.word	0x0801d288
  ldr  r0, =_sdata
 8017210:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8017214:	20000120 	.word	0x20000120
  ldr  r2, =_sbss
 8017218:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 801721c:	200184bc 	.word	0x200184bc

08017220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017220:	e7fe      	b.n	8017220 <ADC_IRQHandler>
	...

08017224 <__errno>:
 8017224:	4b01      	ldr	r3, [pc, #4]	; (801722c <__errno+0x8>)
 8017226:	6818      	ldr	r0, [r3, #0]
 8017228:	4770      	bx	lr
 801722a:	bf00      	nop
 801722c:	200000bc 	.word	0x200000bc

08017230 <__libc_init_array>:
 8017230:	b570      	push	{r4, r5, r6, lr}
 8017232:	4e0d      	ldr	r6, [pc, #52]	; (8017268 <__libc_init_array+0x38>)
 8017234:	4c0d      	ldr	r4, [pc, #52]	; (801726c <__libc_init_array+0x3c>)
 8017236:	1ba4      	subs	r4, r4, r6
 8017238:	10a4      	asrs	r4, r4, #2
 801723a:	2500      	movs	r5, #0
 801723c:	42a5      	cmp	r5, r4
 801723e:	d109      	bne.n	8017254 <__libc_init_array+0x24>
 8017240:	4e0b      	ldr	r6, [pc, #44]	; (8017270 <__libc_init_array+0x40>)
 8017242:	4c0c      	ldr	r4, [pc, #48]	; (8017274 <__libc_init_array+0x44>)
 8017244:	f000 fc74 	bl	8017b30 <_init>
 8017248:	1ba4      	subs	r4, r4, r6
 801724a:	10a4      	asrs	r4, r4, #2
 801724c:	2500      	movs	r5, #0
 801724e:	42a5      	cmp	r5, r4
 8017250:	d105      	bne.n	801725e <__libc_init_array+0x2e>
 8017252:	bd70      	pop	{r4, r5, r6, pc}
 8017254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017258:	4798      	blx	r3
 801725a:	3501      	adds	r5, #1
 801725c:	e7ee      	b.n	801723c <__libc_init_array+0xc>
 801725e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017262:	4798      	blx	r3
 8017264:	3501      	adds	r5, #1
 8017266:	e7f2      	b.n	801724e <__libc_init_array+0x1e>
 8017268:	0801d280 	.word	0x0801d280
 801726c:	0801d280 	.word	0x0801d280
 8017270:	0801d280 	.word	0x0801d280
 8017274:	0801d284 	.word	0x0801d284

08017278 <malloc>:
 8017278:	4b02      	ldr	r3, [pc, #8]	; (8017284 <malloc+0xc>)
 801727a:	4601      	mov	r1, r0
 801727c:	6818      	ldr	r0, [r3, #0]
 801727e:	f000 b885 	b.w	801738c <_malloc_r>
 8017282:	bf00      	nop
 8017284:	200000bc 	.word	0x200000bc

08017288 <free>:
 8017288:	4b02      	ldr	r3, [pc, #8]	; (8017294 <free+0xc>)
 801728a:	4601      	mov	r1, r0
 801728c:	6818      	ldr	r0, [r3, #0]
 801728e:	f000 b82f 	b.w	80172f0 <_free_r>
 8017292:	bf00      	nop
 8017294:	200000bc 	.word	0x200000bc

08017298 <memcpy>:
 8017298:	b510      	push	{r4, lr}
 801729a:	1e43      	subs	r3, r0, #1
 801729c:	440a      	add	r2, r1
 801729e:	4291      	cmp	r1, r2
 80172a0:	d100      	bne.n	80172a4 <memcpy+0xc>
 80172a2:	bd10      	pop	{r4, pc}
 80172a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80172ac:	e7f7      	b.n	801729e <memcpy+0x6>

080172ae <memmove>:
 80172ae:	4288      	cmp	r0, r1
 80172b0:	b510      	push	{r4, lr}
 80172b2:	eb01 0302 	add.w	r3, r1, r2
 80172b6:	d807      	bhi.n	80172c8 <memmove+0x1a>
 80172b8:	1e42      	subs	r2, r0, #1
 80172ba:	4299      	cmp	r1, r3
 80172bc:	d00a      	beq.n	80172d4 <memmove+0x26>
 80172be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80172c6:	e7f8      	b.n	80172ba <memmove+0xc>
 80172c8:	4283      	cmp	r3, r0
 80172ca:	d9f5      	bls.n	80172b8 <memmove+0xa>
 80172cc:	1881      	adds	r1, r0, r2
 80172ce:	1ad2      	subs	r2, r2, r3
 80172d0:	42d3      	cmn	r3, r2
 80172d2:	d100      	bne.n	80172d6 <memmove+0x28>
 80172d4:	bd10      	pop	{r4, pc}
 80172d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80172da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80172de:	e7f7      	b.n	80172d0 <memmove+0x22>

080172e0 <memset>:
 80172e0:	4402      	add	r2, r0
 80172e2:	4603      	mov	r3, r0
 80172e4:	4293      	cmp	r3, r2
 80172e6:	d100      	bne.n	80172ea <memset+0xa>
 80172e8:	4770      	bx	lr
 80172ea:	f803 1b01 	strb.w	r1, [r3], #1
 80172ee:	e7f9      	b.n	80172e4 <memset+0x4>

080172f0 <_free_r>:
 80172f0:	b538      	push	{r3, r4, r5, lr}
 80172f2:	4605      	mov	r5, r0
 80172f4:	2900      	cmp	r1, #0
 80172f6:	d045      	beq.n	8017384 <_free_r+0x94>
 80172f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172fc:	1f0c      	subs	r4, r1, #4
 80172fe:	2b00      	cmp	r3, #0
 8017300:	bfb8      	it	lt
 8017302:	18e4      	addlt	r4, r4, r3
 8017304:	f000 f909 	bl	801751a <__malloc_lock>
 8017308:	4a1f      	ldr	r2, [pc, #124]	; (8017388 <_free_r+0x98>)
 801730a:	6813      	ldr	r3, [r2, #0]
 801730c:	4610      	mov	r0, r2
 801730e:	b933      	cbnz	r3, 801731e <_free_r+0x2e>
 8017310:	6063      	str	r3, [r4, #4]
 8017312:	6014      	str	r4, [r2, #0]
 8017314:	4628      	mov	r0, r5
 8017316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801731a:	f000 b8ff 	b.w	801751c <__malloc_unlock>
 801731e:	42a3      	cmp	r3, r4
 8017320:	d90c      	bls.n	801733c <_free_r+0x4c>
 8017322:	6821      	ldr	r1, [r4, #0]
 8017324:	1862      	adds	r2, r4, r1
 8017326:	4293      	cmp	r3, r2
 8017328:	bf04      	itt	eq
 801732a:	681a      	ldreq	r2, [r3, #0]
 801732c:	685b      	ldreq	r3, [r3, #4]
 801732e:	6063      	str	r3, [r4, #4]
 8017330:	bf04      	itt	eq
 8017332:	1852      	addeq	r2, r2, r1
 8017334:	6022      	streq	r2, [r4, #0]
 8017336:	6004      	str	r4, [r0, #0]
 8017338:	e7ec      	b.n	8017314 <_free_r+0x24>
 801733a:	4613      	mov	r3, r2
 801733c:	685a      	ldr	r2, [r3, #4]
 801733e:	b10a      	cbz	r2, 8017344 <_free_r+0x54>
 8017340:	42a2      	cmp	r2, r4
 8017342:	d9fa      	bls.n	801733a <_free_r+0x4a>
 8017344:	6819      	ldr	r1, [r3, #0]
 8017346:	1858      	adds	r0, r3, r1
 8017348:	42a0      	cmp	r0, r4
 801734a:	d10b      	bne.n	8017364 <_free_r+0x74>
 801734c:	6820      	ldr	r0, [r4, #0]
 801734e:	4401      	add	r1, r0
 8017350:	1858      	adds	r0, r3, r1
 8017352:	4282      	cmp	r2, r0
 8017354:	6019      	str	r1, [r3, #0]
 8017356:	d1dd      	bne.n	8017314 <_free_r+0x24>
 8017358:	6810      	ldr	r0, [r2, #0]
 801735a:	6852      	ldr	r2, [r2, #4]
 801735c:	605a      	str	r2, [r3, #4]
 801735e:	4401      	add	r1, r0
 8017360:	6019      	str	r1, [r3, #0]
 8017362:	e7d7      	b.n	8017314 <_free_r+0x24>
 8017364:	d902      	bls.n	801736c <_free_r+0x7c>
 8017366:	230c      	movs	r3, #12
 8017368:	602b      	str	r3, [r5, #0]
 801736a:	e7d3      	b.n	8017314 <_free_r+0x24>
 801736c:	6820      	ldr	r0, [r4, #0]
 801736e:	1821      	adds	r1, r4, r0
 8017370:	428a      	cmp	r2, r1
 8017372:	bf04      	itt	eq
 8017374:	6811      	ldreq	r1, [r2, #0]
 8017376:	6852      	ldreq	r2, [r2, #4]
 8017378:	6062      	str	r2, [r4, #4]
 801737a:	bf04      	itt	eq
 801737c:	1809      	addeq	r1, r1, r0
 801737e:	6021      	streq	r1, [r4, #0]
 8017380:	605c      	str	r4, [r3, #4]
 8017382:	e7c7      	b.n	8017314 <_free_r+0x24>
 8017384:	bd38      	pop	{r3, r4, r5, pc}
 8017386:	bf00      	nop
 8017388:	20001554 	.word	0x20001554

0801738c <_malloc_r>:
 801738c:	b570      	push	{r4, r5, r6, lr}
 801738e:	1ccd      	adds	r5, r1, #3
 8017390:	f025 0503 	bic.w	r5, r5, #3
 8017394:	3508      	adds	r5, #8
 8017396:	2d0c      	cmp	r5, #12
 8017398:	bf38      	it	cc
 801739a:	250c      	movcc	r5, #12
 801739c:	2d00      	cmp	r5, #0
 801739e:	4606      	mov	r6, r0
 80173a0:	db01      	blt.n	80173a6 <_malloc_r+0x1a>
 80173a2:	42a9      	cmp	r1, r5
 80173a4:	d903      	bls.n	80173ae <_malloc_r+0x22>
 80173a6:	230c      	movs	r3, #12
 80173a8:	6033      	str	r3, [r6, #0]
 80173aa:	2000      	movs	r0, #0
 80173ac:	bd70      	pop	{r4, r5, r6, pc}
 80173ae:	f000 f8b4 	bl	801751a <__malloc_lock>
 80173b2:	4a21      	ldr	r2, [pc, #132]	; (8017438 <_malloc_r+0xac>)
 80173b4:	6814      	ldr	r4, [r2, #0]
 80173b6:	4621      	mov	r1, r4
 80173b8:	b991      	cbnz	r1, 80173e0 <_malloc_r+0x54>
 80173ba:	4c20      	ldr	r4, [pc, #128]	; (801743c <_malloc_r+0xb0>)
 80173bc:	6823      	ldr	r3, [r4, #0]
 80173be:	b91b      	cbnz	r3, 80173c8 <_malloc_r+0x3c>
 80173c0:	4630      	mov	r0, r6
 80173c2:	f000 f83d 	bl	8017440 <_sbrk_r>
 80173c6:	6020      	str	r0, [r4, #0]
 80173c8:	4629      	mov	r1, r5
 80173ca:	4630      	mov	r0, r6
 80173cc:	f000 f838 	bl	8017440 <_sbrk_r>
 80173d0:	1c43      	adds	r3, r0, #1
 80173d2:	d124      	bne.n	801741e <_malloc_r+0x92>
 80173d4:	230c      	movs	r3, #12
 80173d6:	6033      	str	r3, [r6, #0]
 80173d8:	4630      	mov	r0, r6
 80173da:	f000 f89f 	bl	801751c <__malloc_unlock>
 80173de:	e7e4      	b.n	80173aa <_malloc_r+0x1e>
 80173e0:	680b      	ldr	r3, [r1, #0]
 80173e2:	1b5b      	subs	r3, r3, r5
 80173e4:	d418      	bmi.n	8017418 <_malloc_r+0x8c>
 80173e6:	2b0b      	cmp	r3, #11
 80173e8:	d90f      	bls.n	801740a <_malloc_r+0x7e>
 80173ea:	600b      	str	r3, [r1, #0]
 80173ec:	50cd      	str	r5, [r1, r3]
 80173ee:	18cc      	adds	r4, r1, r3
 80173f0:	4630      	mov	r0, r6
 80173f2:	f000 f893 	bl	801751c <__malloc_unlock>
 80173f6:	f104 000b 	add.w	r0, r4, #11
 80173fa:	1d23      	adds	r3, r4, #4
 80173fc:	f020 0007 	bic.w	r0, r0, #7
 8017400:	1ac3      	subs	r3, r0, r3
 8017402:	d0d3      	beq.n	80173ac <_malloc_r+0x20>
 8017404:	425a      	negs	r2, r3
 8017406:	50e2      	str	r2, [r4, r3]
 8017408:	e7d0      	b.n	80173ac <_malloc_r+0x20>
 801740a:	428c      	cmp	r4, r1
 801740c:	684b      	ldr	r3, [r1, #4]
 801740e:	bf16      	itet	ne
 8017410:	6063      	strne	r3, [r4, #4]
 8017412:	6013      	streq	r3, [r2, #0]
 8017414:	460c      	movne	r4, r1
 8017416:	e7eb      	b.n	80173f0 <_malloc_r+0x64>
 8017418:	460c      	mov	r4, r1
 801741a:	6849      	ldr	r1, [r1, #4]
 801741c:	e7cc      	b.n	80173b8 <_malloc_r+0x2c>
 801741e:	1cc4      	adds	r4, r0, #3
 8017420:	f024 0403 	bic.w	r4, r4, #3
 8017424:	42a0      	cmp	r0, r4
 8017426:	d005      	beq.n	8017434 <_malloc_r+0xa8>
 8017428:	1a21      	subs	r1, r4, r0
 801742a:	4630      	mov	r0, r6
 801742c:	f000 f808 	bl	8017440 <_sbrk_r>
 8017430:	3001      	adds	r0, #1
 8017432:	d0cf      	beq.n	80173d4 <_malloc_r+0x48>
 8017434:	6025      	str	r5, [r4, #0]
 8017436:	e7db      	b.n	80173f0 <_malloc_r+0x64>
 8017438:	20001554 	.word	0x20001554
 801743c:	20001558 	.word	0x20001558

08017440 <_sbrk_r>:
 8017440:	b538      	push	{r3, r4, r5, lr}
 8017442:	4c06      	ldr	r4, [pc, #24]	; (801745c <_sbrk_r+0x1c>)
 8017444:	2300      	movs	r3, #0
 8017446:	4605      	mov	r5, r0
 8017448:	4608      	mov	r0, r1
 801744a:	6023      	str	r3, [r4, #0]
 801744c:	f7fe fbfc 	bl	8015c48 <_sbrk>
 8017450:	1c43      	adds	r3, r0, #1
 8017452:	d102      	bne.n	801745a <_sbrk_r+0x1a>
 8017454:	6823      	ldr	r3, [r4, #0]
 8017456:	b103      	cbz	r3, 801745a <_sbrk_r+0x1a>
 8017458:	602b      	str	r3, [r5, #0]
 801745a:	bd38      	pop	{r3, r4, r5, pc}
 801745c:	200184b8 	.word	0x200184b8

08017460 <siprintf>:
 8017460:	b40e      	push	{r1, r2, r3}
 8017462:	b500      	push	{lr}
 8017464:	b09c      	sub	sp, #112	; 0x70
 8017466:	ab1d      	add	r3, sp, #116	; 0x74
 8017468:	9002      	str	r0, [sp, #8]
 801746a:	9006      	str	r0, [sp, #24]
 801746c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017470:	4809      	ldr	r0, [pc, #36]	; (8017498 <siprintf+0x38>)
 8017472:	9107      	str	r1, [sp, #28]
 8017474:	9104      	str	r1, [sp, #16]
 8017476:	4909      	ldr	r1, [pc, #36]	; (801749c <siprintf+0x3c>)
 8017478:	f853 2b04 	ldr.w	r2, [r3], #4
 801747c:	9105      	str	r1, [sp, #20]
 801747e:	6800      	ldr	r0, [r0, #0]
 8017480:	9301      	str	r3, [sp, #4]
 8017482:	a902      	add	r1, sp, #8
 8017484:	f000 f8a6 	bl	80175d4 <_svfiprintf_r>
 8017488:	9b02      	ldr	r3, [sp, #8]
 801748a:	2200      	movs	r2, #0
 801748c:	701a      	strb	r2, [r3, #0]
 801748e:	b01c      	add	sp, #112	; 0x70
 8017490:	f85d eb04 	ldr.w	lr, [sp], #4
 8017494:	b003      	add	sp, #12
 8017496:	4770      	bx	lr
 8017498:	200000bc 	.word	0x200000bc
 801749c:	ffff0208 	.word	0xffff0208

080174a0 <strcat>:
 80174a0:	b510      	push	{r4, lr}
 80174a2:	4603      	mov	r3, r0
 80174a4:	781a      	ldrb	r2, [r3, #0]
 80174a6:	1c5c      	adds	r4, r3, #1
 80174a8:	b93a      	cbnz	r2, 80174ba <strcat+0x1a>
 80174aa:	3b01      	subs	r3, #1
 80174ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80174b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80174b4:	2a00      	cmp	r2, #0
 80174b6:	d1f9      	bne.n	80174ac <strcat+0xc>
 80174b8:	bd10      	pop	{r4, pc}
 80174ba:	4623      	mov	r3, r4
 80174bc:	e7f2      	b.n	80174a4 <strcat+0x4>

080174be <strncmp>:
 80174be:	b510      	push	{r4, lr}
 80174c0:	b16a      	cbz	r2, 80174de <strncmp+0x20>
 80174c2:	3901      	subs	r1, #1
 80174c4:	1884      	adds	r4, r0, r2
 80174c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80174ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80174ce:	4293      	cmp	r3, r2
 80174d0:	d103      	bne.n	80174da <strncmp+0x1c>
 80174d2:	42a0      	cmp	r0, r4
 80174d4:	d001      	beq.n	80174da <strncmp+0x1c>
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d1f5      	bne.n	80174c6 <strncmp+0x8>
 80174da:	1a98      	subs	r0, r3, r2
 80174dc:	bd10      	pop	{r4, pc}
 80174de:	4610      	mov	r0, r2
 80174e0:	e7fc      	b.n	80174dc <strncmp+0x1e>

080174e2 <wcscat>:
 80174e2:	b510      	push	{r4, lr}
 80174e4:	4602      	mov	r2, r0
 80174e6:	4613      	mov	r3, r2
 80174e8:	3204      	adds	r2, #4
 80174ea:	681c      	ldr	r4, [r3, #0]
 80174ec:	2c00      	cmp	r4, #0
 80174ee:	d1fa      	bne.n	80174e6 <wcscat+0x4>
 80174f0:	3904      	subs	r1, #4
 80174f2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80174f6:	b90a      	cbnz	r2, 80174fc <wcscat+0x1a>
 80174f8:	601a      	str	r2, [r3, #0]
 80174fa:	bd10      	pop	{r4, pc}
 80174fc:	f843 2b04 	str.w	r2, [r3], #4
 8017500:	e7f7      	b.n	80174f2 <wcscat+0x10>

08017502 <wcscpy>:
 8017502:	2300      	movs	r3, #0
 8017504:	6003      	str	r3, [r0, #0]
 8017506:	3904      	subs	r1, #4
 8017508:	4603      	mov	r3, r0
 801750a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801750e:	b90a      	cbnz	r2, 8017514 <wcscpy+0x12>
 8017510:	601a      	str	r2, [r3, #0]
 8017512:	4770      	bx	lr
 8017514:	f843 2b04 	str.w	r2, [r3], #4
 8017518:	e7f7      	b.n	801750a <wcscpy+0x8>

0801751a <__malloc_lock>:
 801751a:	4770      	bx	lr

0801751c <__malloc_unlock>:
 801751c:	4770      	bx	lr

0801751e <__ssputs_r>:
 801751e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017522:	688e      	ldr	r6, [r1, #8]
 8017524:	429e      	cmp	r6, r3
 8017526:	4682      	mov	sl, r0
 8017528:	460c      	mov	r4, r1
 801752a:	4690      	mov	r8, r2
 801752c:	4699      	mov	r9, r3
 801752e:	d837      	bhi.n	80175a0 <__ssputs_r+0x82>
 8017530:	898a      	ldrh	r2, [r1, #12]
 8017532:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017536:	d031      	beq.n	801759c <__ssputs_r+0x7e>
 8017538:	6825      	ldr	r5, [r4, #0]
 801753a:	6909      	ldr	r1, [r1, #16]
 801753c:	1a6f      	subs	r7, r5, r1
 801753e:	6965      	ldr	r5, [r4, #20]
 8017540:	2302      	movs	r3, #2
 8017542:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017546:	fb95 f5f3 	sdiv	r5, r5, r3
 801754a:	f109 0301 	add.w	r3, r9, #1
 801754e:	443b      	add	r3, r7
 8017550:	429d      	cmp	r5, r3
 8017552:	bf38      	it	cc
 8017554:	461d      	movcc	r5, r3
 8017556:	0553      	lsls	r3, r2, #21
 8017558:	d530      	bpl.n	80175bc <__ssputs_r+0x9e>
 801755a:	4629      	mov	r1, r5
 801755c:	f7ff ff16 	bl	801738c <_malloc_r>
 8017560:	4606      	mov	r6, r0
 8017562:	b950      	cbnz	r0, 801757a <__ssputs_r+0x5c>
 8017564:	230c      	movs	r3, #12
 8017566:	f8ca 3000 	str.w	r3, [sl]
 801756a:	89a3      	ldrh	r3, [r4, #12]
 801756c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017570:	81a3      	strh	r3, [r4, #12]
 8017572:	f04f 30ff 	mov.w	r0, #4294967295
 8017576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801757a:	463a      	mov	r2, r7
 801757c:	6921      	ldr	r1, [r4, #16]
 801757e:	f7ff fe8b 	bl	8017298 <memcpy>
 8017582:	89a3      	ldrh	r3, [r4, #12]
 8017584:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801758c:	81a3      	strh	r3, [r4, #12]
 801758e:	6126      	str	r6, [r4, #16]
 8017590:	6165      	str	r5, [r4, #20]
 8017592:	443e      	add	r6, r7
 8017594:	1bed      	subs	r5, r5, r7
 8017596:	6026      	str	r6, [r4, #0]
 8017598:	60a5      	str	r5, [r4, #8]
 801759a:	464e      	mov	r6, r9
 801759c:	454e      	cmp	r6, r9
 801759e:	d900      	bls.n	80175a2 <__ssputs_r+0x84>
 80175a0:	464e      	mov	r6, r9
 80175a2:	4632      	mov	r2, r6
 80175a4:	4641      	mov	r1, r8
 80175a6:	6820      	ldr	r0, [r4, #0]
 80175a8:	f7ff fe81 	bl	80172ae <memmove>
 80175ac:	68a3      	ldr	r3, [r4, #8]
 80175ae:	1b9b      	subs	r3, r3, r6
 80175b0:	60a3      	str	r3, [r4, #8]
 80175b2:	6823      	ldr	r3, [r4, #0]
 80175b4:	441e      	add	r6, r3
 80175b6:	6026      	str	r6, [r4, #0]
 80175b8:	2000      	movs	r0, #0
 80175ba:	e7dc      	b.n	8017576 <__ssputs_r+0x58>
 80175bc:	462a      	mov	r2, r5
 80175be:	f000 fa89 	bl	8017ad4 <_realloc_r>
 80175c2:	4606      	mov	r6, r0
 80175c4:	2800      	cmp	r0, #0
 80175c6:	d1e2      	bne.n	801758e <__ssputs_r+0x70>
 80175c8:	6921      	ldr	r1, [r4, #16]
 80175ca:	4650      	mov	r0, sl
 80175cc:	f7ff fe90 	bl	80172f0 <_free_r>
 80175d0:	e7c8      	b.n	8017564 <__ssputs_r+0x46>
	...

080175d4 <_svfiprintf_r>:
 80175d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175d8:	461d      	mov	r5, r3
 80175da:	898b      	ldrh	r3, [r1, #12]
 80175dc:	061f      	lsls	r7, r3, #24
 80175de:	b09d      	sub	sp, #116	; 0x74
 80175e0:	4680      	mov	r8, r0
 80175e2:	460c      	mov	r4, r1
 80175e4:	4616      	mov	r6, r2
 80175e6:	d50f      	bpl.n	8017608 <_svfiprintf_r+0x34>
 80175e8:	690b      	ldr	r3, [r1, #16]
 80175ea:	b96b      	cbnz	r3, 8017608 <_svfiprintf_r+0x34>
 80175ec:	2140      	movs	r1, #64	; 0x40
 80175ee:	f7ff fecd 	bl	801738c <_malloc_r>
 80175f2:	6020      	str	r0, [r4, #0]
 80175f4:	6120      	str	r0, [r4, #16]
 80175f6:	b928      	cbnz	r0, 8017604 <_svfiprintf_r+0x30>
 80175f8:	230c      	movs	r3, #12
 80175fa:	f8c8 3000 	str.w	r3, [r8]
 80175fe:	f04f 30ff 	mov.w	r0, #4294967295
 8017602:	e0c8      	b.n	8017796 <_svfiprintf_r+0x1c2>
 8017604:	2340      	movs	r3, #64	; 0x40
 8017606:	6163      	str	r3, [r4, #20]
 8017608:	2300      	movs	r3, #0
 801760a:	9309      	str	r3, [sp, #36]	; 0x24
 801760c:	2320      	movs	r3, #32
 801760e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017612:	2330      	movs	r3, #48	; 0x30
 8017614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017618:	9503      	str	r5, [sp, #12]
 801761a:	f04f 0b01 	mov.w	fp, #1
 801761e:	4637      	mov	r7, r6
 8017620:	463d      	mov	r5, r7
 8017622:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017626:	b10b      	cbz	r3, 801762c <_svfiprintf_r+0x58>
 8017628:	2b25      	cmp	r3, #37	; 0x25
 801762a:	d13e      	bne.n	80176aa <_svfiprintf_r+0xd6>
 801762c:	ebb7 0a06 	subs.w	sl, r7, r6
 8017630:	d00b      	beq.n	801764a <_svfiprintf_r+0x76>
 8017632:	4653      	mov	r3, sl
 8017634:	4632      	mov	r2, r6
 8017636:	4621      	mov	r1, r4
 8017638:	4640      	mov	r0, r8
 801763a:	f7ff ff70 	bl	801751e <__ssputs_r>
 801763e:	3001      	adds	r0, #1
 8017640:	f000 80a4 	beq.w	801778c <_svfiprintf_r+0x1b8>
 8017644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017646:	4453      	add	r3, sl
 8017648:	9309      	str	r3, [sp, #36]	; 0x24
 801764a:	783b      	ldrb	r3, [r7, #0]
 801764c:	2b00      	cmp	r3, #0
 801764e:	f000 809d 	beq.w	801778c <_svfiprintf_r+0x1b8>
 8017652:	2300      	movs	r3, #0
 8017654:	f04f 32ff 	mov.w	r2, #4294967295
 8017658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801765c:	9304      	str	r3, [sp, #16]
 801765e:	9307      	str	r3, [sp, #28]
 8017660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017664:	931a      	str	r3, [sp, #104]	; 0x68
 8017666:	462f      	mov	r7, r5
 8017668:	2205      	movs	r2, #5
 801766a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801766e:	4850      	ldr	r0, [pc, #320]	; (80177b0 <_svfiprintf_r+0x1dc>)
 8017670:	f7e8 fdde 	bl	8000230 <memchr>
 8017674:	9b04      	ldr	r3, [sp, #16]
 8017676:	b9d0      	cbnz	r0, 80176ae <_svfiprintf_r+0xda>
 8017678:	06d9      	lsls	r1, r3, #27
 801767a:	bf44      	itt	mi
 801767c:	2220      	movmi	r2, #32
 801767e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017682:	071a      	lsls	r2, r3, #28
 8017684:	bf44      	itt	mi
 8017686:	222b      	movmi	r2, #43	; 0x2b
 8017688:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801768c:	782a      	ldrb	r2, [r5, #0]
 801768e:	2a2a      	cmp	r2, #42	; 0x2a
 8017690:	d015      	beq.n	80176be <_svfiprintf_r+0xea>
 8017692:	9a07      	ldr	r2, [sp, #28]
 8017694:	462f      	mov	r7, r5
 8017696:	2000      	movs	r0, #0
 8017698:	250a      	movs	r5, #10
 801769a:	4639      	mov	r1, r7
 801769c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176a0:	3b30      	subs	r3, #48	; 0x30
 80176a2:	2b09      	cmp	r3, #9
 80176a4:	d94d      	bls.n	8017742 <_svfiprintf_r+0x16e>
 80176a6:	b1b8      	cbz	r0, 80176d8 <_svfiprintf_r+0x104>
 80176a8:	e00f      	b.n	80176ca <_svfiprintf_r+0xf6>
 80176aa:	462f      	mov	r7, r5
 80176ac:	e7b8      	b.n	8017620 <_svfiprintf_r+0x4c>
 80176ae:	4a40      	ldr	r2, [pc, #256]	; (80177b0 <_svfiprintf_r+0x1dc>)
 80176b0:	1a80      	subs	r0, r0, r2
 80176b2:	fa0b f000 	lsl.w	r0, fp, r0
 80176b6:	4318      	orrs	r0, r3
 80176b8:	9004      	str	r0, [sp, #16]
 80176ba:	463d      	mov	r5, r7
 80176bc:	e7d3      	b.n	8017666 <_svfiprintf_r+0x92>
 80176be:	9a03      	ldr	r2, [sp, #12]
 80176c0:	1d11      	adds	r1, r2, #4
 80176c2:	6812      	ldr	r2, [r2, #0]
 80176c4:	9103      	str	r1, [sp, #12]
 80176c6:	2a00      	cmp	r2, #0
 80176c8:	db01      	blt.n	80176ce <_svfiprintf_r+0xfa>
 80176ca:	9207      	str	r2, [sp, #28]
 80176cc:	e004      	b.n	80176d8 <_svfiprintf_r+0x104>
 80176ce:	4252      	negs	r2, r2
 80176d0:	f043 0302 	orr.w	r3, r3, #2
 80176d4:	9207      	str	r2, [sp, #28]
 80176d6:	9304      	str	r3, [sp, #16]
 80176d8:	783b      	ldrb	r3, [r7, #0]
 80176da:	2b2e      	cmp	r3, #46	; 0x2e
 80176dc:	d10c      	bne.n	80176f8 <_svfiprintf_r+0x124>
 80176de:	787b      	ldrb	r3, [r7, #1]
 80176e0:	2b2a      	cmp	r3, #42	; 0x2a
 80176e2:	d133      	bne.n	801774c <_svfiprintf_r+0x178>
 80176e4:	9b03      	ldr	r3, [sp, #12]
 80176e6:	1d1a      	adds	r2, r3, #4
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	9203      	str	r2, [sp, #12]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	bfb8      	it	lt
 80176f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80176f4:	3702      	adds	r7, #2
 80176f6:	9305      	str	r3, [sp, #20]
 80176f8:	4d2e      	ldr	r5, [pc, #184]	; (80177b4 <_svfiprintf_r+0x1e0>)
 80176fa:	7839      	ldrb	r1, [r7, #0]
 80176fc:	2203      	movs	r2, #3
 80176fe:	4628      	mov	r0, r5
 8017700:	f7e8 fd96 	bl	8000230 <memchr>
 8017704:	b138      	cbz	r0, 8017716 <_svfiprintf_r+0x142>
 8017706:	2340      	movs	r3, #64	; 0x40
 8017708:	1b40      	subs	r0, r0, r5
 801770a:	fa03 f000 	lsl.w	r0, r3, r0
 801770e:	9b04      	ldr	r3, [sp, #16]
 8017710:	4303      	orrs	r3, r0
 8017712:	3701      	adds	r7, #1
 8017714:	9304      	str	r3, [sp, #16]
 8017716:	7839      	ldrb	r1, [r7, #0]
 8017718:	4827      	ldr	r0, [pc, #156]	; (80177b8 <_svfiprintf_r+0x1e4>)
 801771a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801771e:	2206      	movs	r2, #6
 8017720:	1c7e      	adds	r6, r7, #1
 8017722:	f7e8 fd85 	bl	8000230 <memchr>
 8017726:	2800      	cmp	r0, #0
 8017728:	d038      	beq.n	801779c <_svfiprintf_r+0x1c8>
 801772a:	4b24      	ldr	r3, [pc, #144]	; (80177bc <_svfiprintf_r+0x1e8>)
 801772c:	bb13      	cbnz	r3, 8017774 <_svfiprintf_r+0x1a0>
 801772e:	9b03      	ldr	r3, [sp, #12]
 8017730:	3307      	adds	r3, #7
 8017732:	f023 0307 	bic.w	r3, r3, #7
 8017736:	3308      	adds	r3, #8
 8017738:	9303      	str	r3, [sp, #12]
 801773a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801773c:	444b      	add	r3, r9
 801773e:	9309      	str	r3, [sp, #36]	; 0x24
 8017740:	e76d      	b.n	801761e <_svfiprintf_r+0x4a>
 8017742:	fb05 3202 	mla	r2, r5, r2, r3
 8017746:	2001      	movs	r0, #1
 8017748:	460f      	mov	r7, r1
 801774a:	e7a6      	b.n	801769a <_svfiprintf_r+0xc6>
 801774c:	2300      	movs	r3, #0
 801774e:	3701      	adds	r7, #1
 8017750:	9305      	str	r3, [sp, #20]
 8017752:	4619      	mov	r1, r3
 8017754:	250a      	movs	r5, #10
 8017756:	4638      	mov	r0, r7
 8017758:	f810 2b01 	ldrb.w	r2, [r0], #1
 801775c:	3a30      	subs	r2, #48	; 0x30
 801775e:	2a09      	cmp	r2, #9
 8017760:	d903      	bls.n	801776a <_svfiprintf_r+0x196>
 8017762:	2b00      	cmp	r3, #0
 8017764:	d0c8      	beq.n	80176f8 <_svfiprintf_r+0x124>
 8017766:	9105      	str	r1, [sp, #20]
 8017768:	e7c6      	b.n	80176f8 <_svfiprintf_r+0x124>
 801776a:	fb05 2101 	mla	r1, r5, r1, r2
 801776e:	2301      	movs	r3, #1
 8017770:	4607      	mov	r7, r0
 8017772:	e7f0      	b.n	8017756 <_svfiprintf_r+0x182>
 8017774:	ab03      	add	r3, sp, #12
 8017776:	9300      	str	r3, [sp, #0]
 8017778:	4622      	mov	r2, r4
 801777a:	4b11      	ldr	r3, [pc, #68]	; (80177c0 <_svfiprintf_r+0x1ec>)
 801777c:	a904      	add	r1, sp, #16
 801777e:	4640      	mov	r0, r8
 8017780:	f3af 8000 	nop.w
 8017784:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017788:	4681      	mov	r9, r0
 801778a:	d1d6      	bne.n	801773a <_svfiprintf_r+0x166>
 801778c:	89a3      	ldrh	r3, [r4, #12]
 801778e:	065b      	lsls	r3, r3, #25
 8017790:	f53f af35 	bmi.w	80175fe <_svfiprintf_r+0x2a>
 8017794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017796:	b01d      	add	sp, #116	; 0x74
 8017798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801779c:	ab03      	add	r3, sp, #12
 801779e:	9300      	str	r3, [sp, #0]
 80177a0:	4622      	mov	r2, r4
 80177a2:	4b07      	ldr	r3, [pc, #28]	; (80177c0 <_svfiprintf_r+0x1ec>)
 80177a4:	a904      	add	r1, sp, #16
 80177a6:	4640      	mov	r0, r8
 80177a8:	f000 f882 	bl	80178b0 <_printf_i>
 80177ac:	e7ea      	b.n	8017784 <_svfiprintf_r+0x1b0>
 80177ae:	bf00      	nop
 80177b0:	0801d244 	.word	0x0801d244
 80177b4:	0801d24a 	.word	0x0801d24a
 80177b8:	0801d24e 	.word	0x0801d24e
 80177bc:	00000000 	.word	0x00000000
 80177c0:	0801751f 	.word	0x0801751f

080177c4 <_printf_common>:
 80177c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177c8:	4691      	mov	r9, r2
 80177ca:	461f      	mov	r7, r3
 80177cc:	688a      	ldr	r2, [r1, #8]
 80177ce:	690b      	ldr	r3, [r1, #16]
 80177d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80177d4:	4293      	cmp	r3, r2
 80177d6:	bfb8      	it	lt
 80177d8:	4613      	movlt	r3, r2
 80177da:	f8c9 3000 	str.w	r3, [r9]
 80177de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80177e2:	4606      	mov	r6, r0
 80177e4:	460c      	mov	r4, r1
 80177e6:	b112      	cbz	r2, 80177ee <_printf_common+0x2a>
 80177e8:	3301      	adds	r3, #1
 80177ea:	f8c9 3000 	str.w	r3, [r9]
 80177ee:	6823      	ldr	r3, [r4, #0]
 80177f0:	0699      	lsls	r1, r3, #26
 80177f2:	bf42      	ittt	mi
 80177f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80177f8:	3302      	addmi	r3, #2
 80177fa:	f8c9 3000 	strmi.w	r3, [r9]
 80177fe:	6825      	ldr	r5, [r4, #0]
 8017800:	f015 0506 	ands.w	r5, r5, #6
 8017804:	d107      	bne.n	8017816 <_printf_common+0x52>
 8017806:	f104 0a19 	add.w	sl, r4, #25
 801780a:	68e3      	ldr	r3, [r4, #12]
 801780c:	f8d9 2000 	ldr.w	r2, [r9]
 8017810:	1a9b      	subs	r3, r3, r2
 8017812:	42ab      	cmp	r3, r5
 8017814:	dc28      	bgt.n	8017868 <_printf_common+0xa4>
 8017816:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801781a:	6822      	ldr	r2, [r4, #0]
 801781c:	3300      	adds	r3, #0
 801781e:	bf18      	it	ne
 8017820:	2301      	movne	r3, #1
 8017822:	0692      	lsls	r2, r2, #26
 8017824:	d42d      	bmi.n	8017882 <_printf_common+0xbe>
 8017826:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801782a:	4639      	mov	r1, r7
 801782c:	4630      	mov	r0, r6
 801782e:	47c0      	blx	r8
 8017830:	3001      	adds	r0, #1
 8017832:	d020      	beq.n	8017876 <_printf_common+0xb2>
 8017834:	6823      	ldr	r3, [r4, #0]
 8017836:	68e5      	ldr	r5, [r4, #12]
 8017838:	f8d9 2000 	ldr.w	r2, [r9]
 801783c:	f003 0306 	and.w	r3, r3, #6
 8017840:	2b04      	cmp	r3, #4
 8017842:	bf08      	it	eq
 8017844:	1aad      	subeq	r5, r5, r2
 8017846:	68a3      	ldr	r3, [r4, #8]
 8017848:	6922      	ldr	r2, [r4, #16]
 801784a:	bf0c      	ite	eq
 801784c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017850:	2500      	movne	r5, #0
 8017852:	4293      	cmp	r3, r2
 8017854:	bfc4      	itt	gt
 8017856:	1a9b      	subgt	r3, r3, r2
 8017858:	18ed      	addgt	r5, r5, r3
 801785a:	f04f 0900 	mov.w	r9, #0
 801785e:	341a      	adds	r4, #26
 8017860:	454d      	cmp	r5, r9
 8017862:	d11a      	bne.n	801789a <_printf_common+0xd6>
 8017864:	2000      	movs	r0, #0
 8017866:	e008      	b.n	801787a <_printf_common+0xb6>
 8017868:	2301      	movs	r3, #1
 801786a:	4652      	mov	r2, sl
 801786c:	4639      	mov	r1, r7
 801786e:	4630      	mov	r0, r6
 8017870:	47c0      	blx	r8
 8017872:	3001      	adds	r0, #1
 8017874:	d103      	bne.n	801787e <_printf_common+0xba>
 8017876:	f04f 30ff 	mov.w	r0, #4294967295
 801787a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801787e:	3501      	adds	r5, #1
 8017880:	e7c3      	b.n	801780a <_printf_common+0x46>
 8017882:	18e1      	adds	r1, r4, r3
 8017884:	1c5a      	adds	r2, r3, #1
 8017886:	2030      	movs	r0, #48	; 0x30
 8017888:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801788c:	4422      	add	r2, r4
 801788e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017892:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017896:	3302      	adds	r3, #2
 8017898:	e7c5      	b.n	8017826 <_printf_common+0x62>
 801789a:	2301      	movs	r3, #1
 801789c:	4622      	mov	r2, r4
 801789e:	4639      	mov	r1, r7
 80178a0:	4630      	mov	r0, r6
 80178a2:	47c0      	blx	r8
 80178a4:	3001      	adds	r0, #1
 80178a6:	d0e6      	beq.n	8017876 <_printf_common+0xb2>
 80178a8:	f109 0901 	add.w	r9, r9, #1
 80178ac:	e7d8      	b.n	8017860 <_printf_common+0x9c>
	...

080178b0 <_printf_i>:
 80178b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80178b8:	460c      	mov	r4, r1
 80178ba:	7e09      	ldrb	r1, [r1, #24]
 80178bc:	b085      	sub	sp, #20
 80178be:	296e      	cmp	r1, #110	; 0x6e
 80178c0:	4617      	mov	r7, r2
 80178c2:	4606      	mov	r6, r0
 80178c4:	4698      	mov	r8, r3
 80178c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80178c8:	f000 80b3 	beq.w	8017a32 <_printf_i+0x182>
 80178cc:	d822      	bhi.n	8017914 <_printf_i+0x64>
 80178ce:	2963      	cmp	r1, #99	; 0x63
 80178d0:	d036      	beq.n	8017940 <_printf_i+0x90>
 80178d2:	d80a      	bhi.n	80178ea <_printf_i+0x3a>
 80178d4:	2900      	cmp	r1, #0
 80178d6:	f000 80b9 	beq.w	8017a4c <_printf_i+0x19c>
 80178da:	2958      	cmp	r1, #88	; 0x58
 80178dc:	f000 8083 	beq.w	80179e6 <_printf_i+0x136>
 80178e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80178e8:	e032      	b.n	8017950 <_printf_i+0xa0>
 80178ea:	2964      	cmp	r1, #100	; 0x64
 80178ec:	d001      	beq.n	80178f2 <_printf_i+0x42>
 80178ee:	2969      	cmp	r1, #105	; 0x69
 80178f0:	d1f6      	bne.n	80178e0 <_printf_i+0x30>
 80178f2:	6820      	ldr	r0, [r4, #0]
 80178f4:	6813      	ldr	r3, [r2, #0]
 80178f6:	0605      	lsls	r5, r0, #24
 80178f8:	f103 0104 	add.w	r1, r3, #4
 80178fc:	d52a      	bpl.n	8017954 <_printf_i+0xa4>
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	6011      	str	r1, [r2, #0]
 8017902:	2b00      	cmp	r3, #0
 8017904:	da03      	bge.n	801790e <_printf_i+0x5e>
 8017906:	222d      	movs	r2, #45	; 0x2d
 8017908:	425b      	negs	r3, r3
 801790a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801790e:	486f      	ldr	r0, [pc, #444]	; (8017acc <_printf_i+0x21c>)
 8017910:	220a      	movs	r2, #10
 8017912:	e039      	b.n	8017988 <_printf_i+0xd8>
 8017914:	2973      	cmp	r1, #115	; 0x73
 8017916:	f000 809d 	beq.w	8017a54 <_printf_i+0x1a4>
 801791a:	d808      	bhi.n	801792e <_printf_i+0x7e>
 801791c:	296f      	cmp	r1, #111	; 0x6f
 801791e:	d020      	beq.n	8017962 <_printf_i+0xb2>
 8017920:	2970      	cmp	r1, #112	; 0x70
 8017922:	d1dd      	bne.n	80178e0 <_printf_i+0x30>
 8017924:	6823      	ldr	r3, [r4, #0]
 8017926:	f043 0320 	orr.w	r3, r3, #32
 801792a:	6023      	str	r3, [r4, #0]
 801792c:	e003      	b.n	8017936 <_printf_i+0x86>
 801792e:	2975      	cmp	r1, #117	; 0x75
 8017930:	d017      	beq.n	8017962 <_printf_i+0xb2>
 8017932:	2978      	cmp	r1, #120	; 0x78
 8017934:	d1d4      	bne.n	80178e0 <_printf_i+0x30>
 8017936:	2378      	movs	r3, #120	; 0x78
 8017938:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801793c:	4864      	ldr	r0, [pc, #400]	; (8017ad0 <_printf_i+0x220>)
 801793e:	e055      	b.n	80179ec <_printf_i+0x13c>
 8017940:	6813      	ldr	r3, [r2, #0]
 8017942:	1d19      	adds	r1, r3, #4
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	6011      	str	r1, [r2, #0]
 8017948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801794c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017950:	2301      	movs	r3, #1
 8017952:	e08c      	b.n	8017a6e <_printf_i+0x1be>
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	6011      	str	r1, [r2, #0]
 8017958:	f010 0f40 	tst.w	r0, #64	; 0x40
 801795c:	bf18      	it	ne
 801795e:	b21b      	sxthne	r3, r3
 8017960:	e7cf      	b.n	8017902 <_printf_i+0x52>
 8017962:	6813      	ldr	r3, [r2, #0]
 8017964:	6825      	ldr	r5, [r4, #0]
 8017966:	1d18      	adds	r0, r3, #4
 8017968:	6010      	str	r0, [r2, #0]
 801796a:	0628      	lsls	r0, r5, #24
 801796c:	d501      	bpl.n	8017972 <_printf_i+0xc2>
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	e002      	b.n	8017978 <_printf_i+0xc8>
 8017972:	0668      	lsls	r0, r5, #25
 8017974:	d5fb      	bpl.n	801796e <_printf_i+0xbe>
 8017976:	881b      	ldrh	r3, [r3, #0]
 8017978:	4854      	ldr	r0, [pc, #336]	; (8017acc <_printf_i+0x21c>)
 801797a:	296f      	cmp	r1, #111	; 0x6f
 801797c:	bf14      	ite	ne
 801797e:	220a      	movne	r2, #10
 8017980:	2208      	moveq	r2, #8
 8017982:	2100      	movs	r1, #0
 8017984:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017988:	6865      	ldr	r5, [r4, #4]
 801798a:	60a5      	str	r5, [r4, #8]
 801798c:	2d00      	cmp	r5, #0
 801798e:	f2c0 8095 	blt.w	8017abc <_printf_i+0x20c>
 8017992:	6821      	ldr	r1, [r4, #0]
 8017994:	f021 0104 	bic.w	r1, r1, #4
 8017998:	6021      	str	r1, [r4, #0]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d13d      	bne.n	8017a1a <_printf_i+0x16a>
 801799e:	2d00      	cmp	r5, #0
 80179a0:	f040 808e 	bne.w	8017ac0 <_printf_i+0x210>
 80179a4:	4665      	mov	r5, ip
 80179a6:	2a08      	cmp	r2, #8
 80179a8:	d10b      	bne.n	80179c2 <_printf_i+0x112>
 80179aa:	6823      	ldr	r3, [r4, #0]
 80179ac:	07db      	lsls	r3, r3, #31
 80179ae:	d508      	bpl.n	80179c2 <_printf_i+0x112>
 80179b0:	6923      	ldr	r3, [r4, #16]
 80179b2:	6862      	ldr	r2, [r4, #4]
 80179b4:	429a      	cmp	r2, r3
 80179b6:	bfde      	ittt	le
 80179b8:	2330      	movle	r3, #48	; 0x30
 80179ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80179be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80179c2:	ebac 0305 	sub.w	r3, ip, r5
 80179c6:	6123      	str	r3, [r4, #16]
 80179c8:	f8cd 8000 	str.w	r8, [sp]
 80179cc:	463b      	mov	r3, r7
 80179ce:	aa03      	add	r2, sp, #12
 80179d0:	4621      	mov	r1, r4
 80179d2:	4630      	mov	r0, r6
 80179d4:	f7ff fef6 	bl	80177c4 <_printf_common>
 80179d8:	3001      	adds	r0, #1
 80179da:	d14d      	bne.n	8017a78 <_printf_i+0x1c8>
 80179dc:	f04f 30ff 	mov.w	r0, #4294967295
 80179e0:	b005      	add	sp, #20
 80179e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179e6:	4839      	ldr	r0, [pc, #228]	; (8017acc <_printf_i+0x21c>)
 80179e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80179ec:	6813      	ldr	r3, [r2, #0]
 80179ee:	6821      	ldr	r1, [r4, #0]
 80179f0:	1d1d      	adds	r5, r3, #4
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	6015      	str	r5, [r2, #0]
 80179f6:	060a      	lsls	r2, r1, #24
 80179f8:	d50b      	bpl.n	8017a12 <_printf_i+0x162>
 80179fa:	07ca      	lsls	r2, r1, #31
 80179fc:	bf44      	itt	mi
 80179fe:	f041 0120 	orrmi.w	r1, r1, #32
 8017a02:	6021      	strmi	r1, [r4, #0]
 8017a04:	b91b      	cbnz	r3, 8017a0e <_printf_i+0x15e>
 8017a06:	6822      	ldr	r2, [r4, #0]
 8017a08:	f022 0220 	bic.w	r2, r2, #32
 8017a0c:	6022      	str	r2, [r4, #0]
 8017a0e:	2210      	movs	r2, #16
 8017a10:	e7b7      	b.n	8017982 <_printf_i+0xd2>
 8017a12:	064d      	lsls	r5, r1, #25
 8017a14:	bf48      	it	mi
 8017a16:	b29b      	uxthmi	r3, r3
 8017a18:	e7ef      	b.n	80179fa <_printf_i+0x14a>
 8017a1a:	4665      	mov	r5, ip
 8017a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8017a20:	fb02 3311 	mls	r3, r2, r1, r3
 8017a24:	5cc3      	ldrb	r3, [r0, r3]
 8017a26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017a2a:	460b      	mov	r3, r1
 8017a2c:	2900      	cmp	r1, #0
 8017a2e:	d1f5      	bne.n	8017a1c <_printf_i+0x16c>
 8017a30:	e7b9      	b.n	80179a6 <_printf_i+0xf6>
 8017a32:	6813      	ldr	r3, [r2, #0]
 8017a34:	6825      	ldr	r5, [r4, #0]
 8017a36:	6961      	ldr	r1, [r4, #20]
 8017a38:	1d18      	adds	r0, r3, #4
 8017a3a:	6010      	str	r0, [r2, #0]
 8017a3c:	0628      	lsls	r0, r5, #24
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	d501      	bpl.n	8017a46 <_printf_i+0x196>
 8017a42:	6019      	str	r1, [r3, #0]
 8017a44:	e002      	b.n	8017a4c <_printf_i+0x19c>
 8017a46:	066a      	lsls	r2, r5, #25
 8017a48:	d5fb      	bpl.n	8017a42 <_printf_i+0x192>
 8017a4a:	8019      	strh	r1, [r3, #0]
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	6123      	str	r3, [r4, #16]
 8017a50:	4665      	mov	r5, ip
 8017a52:	e7b9      	b.n	80179c8 <_printf_i+0x118>
 8017a54:	6813      	ldr	r3, [r2, #0]
 8017a56:	1d19      	adds	r1, r3, #4
 8017a58:	6011      	str	r1, [r2, #0]
 8017a5a:	681d      	ldr	r5, [r3, #0]
 8017a5c:	6862      	ldr	r2, [r4, #4]
 8017a5e:	2100      	movs	r1, #0
 8017a60:	4628      	mov	r0, r5
 8017a62:	f7e8 fbe5 	bl	8000230 <memchr>
 8017a66:	b108      	cbz	r0, 8017a6c <_printf_i+0x1bc>
 8017a68:	1b40      	subs	r0, r0, r5
 8017a6a:	6060      	str	r0, [r4, #4]
 8017a6c:	6863      	ldr	r3, [r4, #4]
 8017a6e:	6123      	str	r3, [r4, #16]
 8017a70:	2300      	movs	r3, #0
 8017a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a76:	e7a7      	b.n	80179c8 <_printf_i+0x118>
 8017a78:	6923      	ldr	r3, [r4, #16]
 8017a7a:	462a      	mov	r2, r5
 8017a7c:	4639      	mov	r1, r7
 8017a7e:	4630      	mov	r0, r6
 8017a80:	47c0      	blx	r8
 8017a82:	3001      	adds	r0, #1
 8017a84:	d0aa      	beq.n	80179dc <_printf_i+0x12c>
 8017a86:	6823      	ldr	r3, [r4, #0]
 8017a88:	079b      	lsls	r3, r3, #30
 8017a8a:	d413      	bmi.n	8017ab4 <_printf_i+0x204>
 8017a8c:	68e0      	ldr	r0, [r4, #12]
 8017a8e:	9b03      	ldr	r3, [sp, #12]
 8017a90:	4298      	cmp	r0, r3
 8017a92:	bfb8      	it	lt
 8017a94:	4618      	movlt	r0, r3
 8017a96:	e7a3      	b.n	80179e0 <_printf_i+0x130>
 8017a98:	2301      	movs	r3, #1
 8017a9a:	464a      	mov	r2, r9
 8017a9c:	4639      	mov	r1, r7
 8017a9e:	4630      	mov	r0, r6
 8017aa0:	47c0      	blx	r8
 8017aa2:	3001      	adds	r0, #1
 8017aa4:	d09a      	beq.n	80179dc <_printf_i+0x12c>
 8017aa6:	3501      	adds	r5, #1
 8017aa8:	68e3      	ldr	r3, [r4, #12]
 8017aaa:	9a03      	ldr	r2, [sp, #12]
 8017aac:	1a9b      	subs	r3, r3, r2
 8017aae:	42ab      	cmp	r3, r5
 8017ab0:	dcf2      	bgt.n	8017a98 <_printf_i+0x1e8>
 8017ab2:	e7eb      	b.n	8017a8c <_printf_i+0x1dc>
 8017ab4:	2500      	movs	r5, #0
 8017ab6:	f104 0919 	add.w	r9, r4, #25
 8017aba:	e7f5      	b.n	8017aa8 <_printf_i+0x1f8>
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d1ac      	bne.n	8017a1a <_printf_i+0x16a>
 8017ac0:	7803      	ldrb	r3, [r0, #0]
 8017ac2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ac6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017aca:	e76c      	b.n	80179a6 <_printf_i+0xf6>
 8017acc:	0801d255 	.word	0x0801d255
 8017ad0:	0801d266 	.word	0x0801d266

08017ad4 <_realloc_r>:
 8017ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ad6:	4607      	mov	r7, r0
 8017ad8:	4614      	mov	r4, r2
 8017ada:	460e      	mov	r6, r1
 8017adc:	b921      	cbnz	r1, 8017ae8 <_realloc_r+0x14>
 8017ade:	4611      	mov	r1, r2
 8017ae0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017ae4:	f7ff bc52 	b.w	801738c <_malloc_r>
 8017ae8:	b922      	cbnz	r2, 8017af4 <_realloc_r+0x20>
 8017aea:	f7ff fc01 	bl	80172f0 <_free_r>
 8017aee:	4625      	mov	r5, r4
 8017af0:	4628      	mov	r0, r5
 8017af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017af4:	f000 f814 	bl	8017b20 <_malloc_usable_size_r>
 8017af8:	42a0      	cmp	r0, r4
 8017afa:	d20f      	bcs.n	8017b1c <_realloc_r+0x48>
 8017afc:	4621      	mov	r1, r4
 8017afe:	4638      	mov	r0, r7
 8017b00:	f7ff fc44 	bl	801738c <_malloc_r>
 8017b04:	4605      	mov	r5, r0
 8017b06:	2800      	cmp	r0, #0
 8017b08:	d0f2      	beq.n	8017af0 <_realloc_r+0x1c>
 8017b0a:	4631      	mov	r1, r6
 8017b0c:	4622      	mov	r2, r4
 8017b0e:	f7ff fbc3 	bl	8017298 <memcpy>
 8017b12:	4631      	mov	r1, r6
 8017b14:	4638      	mov	r0, r7
 8017b16:	f7ff fbeb 	bl	80172f0 <_free_r>
 8017b1a:	e7e9      	b.n	8017af0 <_realloc_r+0x1c>
 8017b1c:	4635      	mov	r5, r6
 8017b1e:	e7e7      	b.n	8017af0 <_realloc_r+0x1c>

08017b20 <_malloc_usable_size_r>:
 8017b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b24:	1f18      	subs	r0, r3, #4
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	bfbc      	itt	lt
 8017b2a:	580b      	ldrlt	r3, [r1, r0]
 8017b2c:	18c0      	addlt	r0, r0, r3
 8017b2e:	4770      	bx	lr

08017b30 <_init>:
 8017b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b32:	bf00      	nop
 8017b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b36:	bc08      	pop	{r3}
 8017b38:	469e      	mov	lr, r3
 8017b3a:	4770      	bx	lr

08017b3c <_fini>:
 8017b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b3e:	bf00      	nop
 8017b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b42:	bc08      	pop	{r3}
 8017b44:	469e      	mov	lr, r3
 8017b46:	4770      	bx	lr
