
CDJ_STM32F7_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a560  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051b8  0801a730  0801a730  0002a730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f8e8  0801f8e8  0002f8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f8f0  0801f8f0  0002f8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f8f4  0801f8f4  0002f8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  20000000  0801f8f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00018220  20000140  0801fa38  00030140  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20018360  0801fa38  00038360  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 10 .debug_info   00060d42  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b60f  00000000  00000000  00090eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000395fd  00000000  00000000  0009c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b58  00000000  00000000  000d5ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002900  00000000  00000000  000d8618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00034d93  00000000  00000000  000daf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005c890  00000000  00000000  0010fcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00105c35  00000000  00000000  0016c53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00272170  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008430  00000000  00000000  002721c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000140 	.word	0x20000140
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a718 	.word	0x0801a718

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000144 	.word	0x20000144
 800020c:	0801a718 	.word	0x0801a718

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_uldivmod>:
 8000e78:	b953      	cbnz	r3, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7a:	b94a      	cbnz	r2, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	bf08      	it	eq
 8000e80:	2800      	cmpeq	r0, #0
 8000e82:	bf1c      	itt	ne
 8000e84:	f04f 31ff 	movne.w	r1, #4294967295
 8000e88:	f04f 30ff 	movne.w	r0, #4294967295
 8000e8c:	f000 b994 	b.w	80011b8 <__aeabi_idiv0>
 8000e90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e98:	f000 f826 	bl	8000ee8 <__udivmoddi4>
 8000e9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea4:	b004      	add	sp, #16
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_f2ulz>:
 8000ea8:	b5d0      	push	{r4, r6, r7, lr}
 8000eaa:	f7ff fb75 	bl	8000598 <__aeabi_f2d>
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__aeabi_f2ulz+0x38>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4606      	mov	r6, r0
 8000eb4:	460f      	mov	r7, r1
 8000eb6:	f7ff fbc7 	bl	8000648 <__aeabi_dmul>
 8000eba:	f7ff fe5f 	bl	8000b7c <__aeabi_d2uiz>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	f7ff fb48 	bl	8000554 <__aeabi_ui2d>
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <__aeabi_f2ulz+0x3c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f7ff fbbe 	bl	8000648 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	4639      	mov	r1, r7
 8000ed4:	f7ff fa00 	bl	80002d8 <__aeabi_dsub>
 8000ed8:	f7ff fe50 	bl	8000b7c <__aeabi_d2uiz>
 8000edc:	4621      	mov	r1, r4
 8000ede:	bdd0      	pop	{r4, r6, r7, pc}
 8000ee0:	3df00000 	.word	0x3df00000
 8000ee4:	41f00000 	.word	0x41f00000

08000ee8 <__udivmoddi4>:
 8000ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eec:	9d08      	ldr	r5, [sp, #32]
 8000eee:	4604      	mov	r4, r0
 8000ef0:	468e      	mov	lr, r1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d14d      	bne.n	8000f92 <__udivmoddi4+0xaa>
 8000ef6:	428a      	cmp	r2, r1
 8000ef8:	4694      	mov	ip, r2
 8000efa:	d969      	bls.n	8000fd0 <__udivmoddi4+0xe8>
 8000efc:	fab2 f282 	clz	r2, r2
 8000f00:	b152      	cbz	r2, 8000f18 <__udivmoddi4+0x30>
 8000f02:	fa01 f302 	lsl.w	r3, r1, r2
 8000f06:	f1c2 0120 	rsb	r1, r2, #32
 8000f0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000f0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f12:	ea41 0e03 	orr.w	lr, r1, r3
 8000f16:	4094      	lsls	r4, r2
 8000f18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f1c:	0c21      	lsrs	r1, r4, #16
 8000f1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000f22:	fa1f f78c 	uxth.w	r7, ip
 8000f26:	fb08 e316 	mls	r3, r8, r6, lr
 8000f2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f2e:	fb06 f107 	mul.w	r1, r6, r7
 8000f32:	4299      	cmp	r1, r3
 8000f34:	d90a      	bls.n	8000f4c <__udivmoddi4+0x64>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f3e:	f080 811f 	bcs.w	8001180 <__udivmoddi4+0x298>
 8000f42:	4299      	cmp	r1, r3
 8000f44:	f240 811c 	bls.w	8001180 <__udivmoddi4+0x298>
 8000f48:	3e02      	subs	r6, #2
 8000f4a:	4463      	add	r3, ip
 8000f4c:	1a5b      	subs	r3, r3, r1
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f54:	fb08 3310 	mls	r3, r8, r0, r3
 8000f58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f5c:	fb00 f707 	mul.w	r7, r0, r7
 8000f60:	42a7      	cmp	r7, r4
 8000f62:	d90a      	bls.n	8000f7a <__udivmoddi4+0x92>
 8000f64:	eb1c 0404 	adds.w	r4, ip, r4
 8000f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f6c:	f080 810a 	bcs.w	8001184 <__udivmoddi4+0x29c>
 8000f70:	42a7      	cmp	r7, r4
 8000f72:	f240 8107 	bls.w	8001184 <__udivmoddi4+0x29c>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f7e:	1be4      	subs	r4, r4, r7
 8000f80:	2600      	movs	r6, #0
 8000f82:	b11d      	cbz	r5, 8000f8c <__udivmoddi4+0xa4>
 8000f84:	40d4      	lsrs	r4, r2
 8000f86:	2300      	movs	r3, #0
 8000f88:	e9c5 4300 	strd	r4, r3, [r5]
 8000f8c:	4631      	mov	r1, r6
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d909      	bls.n	8000faa <__udivmoddi4+0xc2>
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	f000 80ef 	beq.w	800117a <__udivmoddi4+0x292>
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	fab3 f683 	clz	r6, r3
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d14a      	bne.n	8001048 <__udivmoddi4+0x160>
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	d302      	bcc.n	8000fbc <__udivmoddi4+0xd4>
 8000fb6:	4282      	cmp	r2, r0
 8000fb8:	f200 80f9 	bhi.w	80011ae <__udivmoddi4+0x2c6>
 8000fbc:	1a84      	subs	r4, r0, r2
 8000fbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	469e      	mov	lr, r3
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d0e0      	beq.n	8000f8c <__udivmoddi4+0xa4>
 8000fca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000fce:	e7dd      	b.n	8000f8c <__udivmoddi4+0xa4>
 8000fd0:	b902      	cbnz	r2, 8000fd4 <__udivmoddi4+0xec>
 8000fd2:	deff      	udf	#255	; 0xff
 8000fd4:	fab2 f282 	clz	r2, r2
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	f040 8092 	bne.w	8001102 <__udivmoddi4+0x21a>
 8000fde:	eba1 010c 	sub.w	r1, r1, ip
 8000fe2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe6:	fa1f fe8c 	uxth.w	lr, ip
 8000fea:	2601      	movs	r6, #1
 8000fec:	0c20      	lsrs	r0, r4, #16
 8000fee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ff2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ff6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ffa:	fb0e f003 	mul.w	r0, lr, r3
 8000ffe:	4288      	cmp	r0, r1
 8001000:	d908      	bls.n	8001014 <__udivmoddi4+0x12c>
 8001002:	eb1c 0101 	adds.w	r1, ip, r1
 8001006:	f103 38ff 	add.w	r8, r3, #4294967295
 800100a:	d202      	bcs.n	8001012 <__udivmoddi4+0x12a>
 800100c:	4288      	cmp	r0, r1
 800100e:	f200 80cb 	bhi.w	80011a8 <__udivmoddi4+0x2c0>
 8001012:	4643      	mov	r3, r8
 8001014:	1a09      	subs	r1, r1, r0
 8001016:	b2a4      	uxth	r4, r4
 8001018:	fbb1 f0f7 	udiv	r0, r1, r7
 800101c:	fb07 1110 	mls	r1, r7, r0, r1
 8001020:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001024:	fb0e fe00 	mul.w	lr, lr, r0
 8001028:	45a6      	cmp	lr, r4
 800102a:	d908      	bls.n	800103e <__udivmoddi4+0x156>
 800102c:	eb1c 0404 	adds.w	r4, ip, r4
 8001030:	f100 31ff 	add.w	r1, r0, #4294967295
 8001034:	d202      	bcs.n	800103c <__udivmoddi4+0x154>
 8001036:	45a6      	cmp	lr, r4
 8001038:	f200 80bb 	bhi.w	80011b2 <__udivmoddi4+0x2ca>
 800103c:	4608      	mov	r0, r1
 800103e:	eba4 040e 	sub.w	r4, r4, lr
 8001042:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001046:	e79c      	b.n	8000f82 <__udivmoddi4+0x9a>
 8001048:	f1c6 0720 	rsb	r7, r6, #32
 800104c:	40b3      	lsls	r3, r6
 800104e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001052:	ea4c 0c03 	orr.w	ip, ip, r3
 8001056:	fa20 f407 	lsr.w	r4, r0, r7
 800105a:	fa01 f306 	lsl.w	r3, r1, r6
 800105e:	431c      	orrs	r4, r3
 8001060:	40f9      	lsrs	r1, r7
 8001062:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001066:	fa00 f306 	lsl.w	r3, r0, r6
 800106a:	fbb1 f8f9 	udiv	r8, r1, r9
 800106e:	0c20      	lsrs	r0, r4, #16
 8001070:	fa1f fe8c 	uxth.w	lr, ip
 8001074:	fb09 1118 	mls	r1, r9, r8, r1
 8001078:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800107c:	fb08 f00e 	mul.w	r0, r8, lr
 8001080:	4288      	cmp	r0, r1
 8001082:	fa02 f206 	lsl.w	r2, r2, r6
 8001086:	d90b      	bls.n	80010a0 <__udivmoddi4+0x1b8>
 8001088:	eb1c 0101 	adds.w	r1, ip, r1
 800108c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001090:	f080 8088 	bcs.w	80011a4 <__udivmoddi4+0x2bc>
 8001094:	4288      	cmp	r0, r1
 8001096:	f240 8085 	bls.w	80011a4 <__udivmoddi4+0x2bc>
 800109a:	f1a8 0802 	sub.w	r8, r8, #2
 800109e:	4461      	add	r1, ip
 80010a0:	1a09      	subs	r1, r1, r0
 80010a2:	b2a4      	uxth	r4, r4
 80010a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80010a8:	fb09 1110 	mls	r1, r9, r0, r1
 80010ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80010b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80010b4:	458e      	cmp	lr, r1
 80010b6:	d908      	bls.n	80010ca <__udivmoddi4+0x1e2>
 80010b8:	eb1c 0101 	adds.w	r1, ip, r1
 80010bc:	f100 34ff 	add.w	r4, r0, #4294967295
 80010c0:	d26c      	bcs.n	800119c <__udivmoddi4+0x2b4>
 80010c2:	458e      	cmp	lr, r1
 80010c4:	d96a      	bls.n	800119c <__udivmoddi4+0x2b4>
 80010c6:	3802      	subs	r0, #2
 80010c8:	4461      	add	r1, ip
 80010ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010ce:	fba0 9402 	umull	r9, r4, r0, r2
 80010d2:	eba1 010e 	sub.w	r1, r1, lr
 80010d6:	42a1      	cmp	r1, r4
 80010d8:	46c8      	mov	r8, r9
 80010da:	46a6      	mov	lr, r4
 80010dc:	d356      	bcc.n	800118c <__udivmoddi4+0x2a4>
 80010de:	d053      	beq.n	8001188 <__udivmoddi4+0x2a0>
 80010e0:	b15d      	cbz	r5, 80010fa <__udivmoddi4+0x212>
 80010e2:	ebb3 0208 	subs.w	r2, r3, r8
 80010e6:	eb61 010e 	sbc.w	r1, r1, lr
 80010ea:	fa01 f707 	lsl.w	r7, r1, r7
 80010ee:	fa22 f306 	lsr.w	r3, r2, r6
 80010f2:	40f1      	lsrs	r1, r6
 80010f4:	431f      	orrs	r7, r3
 80010f6:	e9c5 7100 	strd	r7, r1, [r5]
 80010fa:	2600      	movs	r6, #0
 80010fc:	4631      	mov	r1, r6
 80010fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001102:	f1c2 0320 	rsb	r3, r2, #32
 8001106:	40d8      	lsrs	r0, r3
 8001108:	fa0c fc02 	lsl.w	ip, ip, r2
 800110c:	fa21 f303 	lsr.w	r3, r1, r3
 8001110:	4091      	lsls	r1, r2
 8001112:	4301      	orrs	r1, r0
 8001114:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001118:	fa1f fe8c 	uxth.w	lr, ip
 800111c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001120:	fb07 3610 	mls	r6, r7, r0, r3
 8001124:	0c0b      	lsrs	r3, r1, #16
 8001126:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800112a:	fb00 f60e 	mul.w	r6, r0, lr
 800112e:	429e      	cmp	r6, r3
 8001130:	fa04 f402 	lsl.w	r4, r4, r2
 8001134:	d908      	bls.n	8001148 <__udivmoddi4+0x260>
 8001136:	eb1c 0303 	adds.w	r3, ip, r3
 800113a:	f100 38ff 	add.w	r8, r0, #4294967295
 800113e:	d22f      	bcs.n	80011a0 <__udivmoddi4+0x2b8>
 8001140:	429e      	cmp	r6, r3
 8001142:	d92d      	bls.n	80011a0 <__udivmoddi4+0x2b8>
 8001144:	3802      	subs	r0, #2
 8001146:	4463      	add	r3, ip
 8001148:	1b9b      	subs	r3, r3, r6
 800114a:	b289      	uxth	r1, r1
 800114c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001150:	fb07 3316 	mls	r3, r7, r6, r3
 8001154:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001158:	fb06 f30e 	mul.w	r3, r6, lr
 800115c:	428b      	cmp	r3, r1
 800115e:	d908      	bls.n	8001172 <__udivmoddi4+0x28a>
 8001160:	eb1c 0101 	adds.w	r1, ip, r1
 8001164:	f106 38ff 	add.w	r8, r6, #4294967295
 8001168:	d216      	bcs.n	8001198 <__udivmoddi4+0x2b0>
 800116a:	428b      	cmp	r3, r1
 800116c:	d914      	bls.n	8001198 <__udivmoddi4+0x2b0>
 800116e:	3e02      	subs	r6, #2
 8001170:	4461      	add	r1, ip
 8001172:	1ac9      	subs	r1, r1, r3
 8001174:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001178:	e738      	b.n	8000fec <__udivmoddi4+0x104>
 800117a:	462e      	mov	r6, r5
 800117c:	4628      	mov	r0, r5
 800117e:	e705      	b.n	8000f8c <__udivmoddi4+0xa4>
 8001180:	4606      	mov	r6, r0
 8001182:	e6e3      	b.n	8000f4c <__udivmoddi4+0x64>
 8001184:	4618      	mov	r0, r3
 8001186:	e6f8      	b.n	8000f7a <__udivmoddi4+0x92>
 8001188:	454b      	cmp	r3, r9
 800118a:	d2a9      	bcs.n	80010e0 <__udivmoddi4+0x1f8>
 800118c:	ebb9 0802 	subs.w	r8, r9, r2
 8001190:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001194:	3801      	subs	r0, #1
 8001196:	e7a3      	b.n	80010e0 <__udivmoddi4+0x1f8>
 8001198:	4646      	mov	r6, r8
 800119a:	e7ea      	b.n	8001172 <__udivmoddi4+0x28a>
 800119c:	4620      	mov	r0, r4
 800119e:	e794      	b.n	80010ca <__udivmoddi4+0x1e2>
 80011a0:	4640      	mov	r0, r8
 80011a2:	e7d1      	b.n	8001148 <__udivmoddi4+0x260>
 80011a4:	46d0      	mov	r8, sl
 80011a6:	e77b      	b.n	80010a0 <__udivmoddi4+0x1b8>
 80011a8:	3b02      	subs	r3, #2
 80011aa:	4461      	add	r1, ip
 80011ac:	e732      	b.n	8001014 <__udivmoddi4+0x12c>
 80011ae:	4630      	mov	r0, r6
 80011b0:	e709      	b.n	8000fc6 <__udivmoddi4+0xde>
 80011b2:	4464      	add	r4, ip
 80011b4:	3802      	subs	r0, #2
 80011b6:	e742      	b.n	800103e <__udivmoddi4+0x156>

080011b8 <__aeabi_idiv0>:
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b510      	push	{r4, lr}
 80011be:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_InitTick+0x40>)
 80011c2:	7818      	ldrb	r0, [r3, #0]
 80011c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <HAL_InitTick+0x44>)
 80011ce:	6810      	ldr	r0, [r2, #0]
 80011d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80011d4:	f000 f8e6 	bl	80013a4 <HAL_SYSTICK_Config>
 80011d8:	b968      	cbnz	r0, 80011f6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	2c0f      	cmp	r4, #15
 80011dc:	d901      	bls.n	80011e2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80011de:	2001      	movs	r0, #1
 80011e0:	e00a      	b.n	80011f8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e2:	2200      	movs	r2, #0
 80011e4:	4621      	mov	r1, r4
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	f000 f863 	bl	80012b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_InitTick+0x48>)
 80011f0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2000      	movs	r0, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80011f6:	2001      	movs	r0, #1
}
 80011f8:	bd10      	pop	{r4, pc}
 80011fa:	bf00      	nop
 80011fc:	20000000 	.word	0x20000000
 8001200:	200000a8 	.word	0x200000a8
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_Init>:
{
 8001208:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x20>)
 800120c:	6813      	ldr	r3, [r2, #0]
 800120e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001212:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f82f 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff ffce 	bl	80011bc <HAL_InitTick>
  HAL_MspInit();
 8001220:	f015 feb0 	bl	8016f84 <HAL_MspInit>
}
 8001224:	2000      	movs	r0, #0
 8001226:	bd08      	pop	{r3, pc}
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <HAL_IncTick+0x10>)
 800122e:	6811      	ldr	r1, [r2, #0]
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_IncTick+0x14>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	440b      	add	r3, r1
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000015c 	.word	0x2000015c
 8001240:	20000000 	.word	0x20000000

08001244 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001244:	4b01      	ldr	r3, [pc, #4]	; (800124c <HAL_GetTick+0x8>)
 8001246:	6818      	ldr	r0, [r3, #0]
}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2000015c 	.word	0x2000015c

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b538      	push	{r3, r4, r5, lr}
 8001252:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff fff6 	bl	8001244 <HAL_GetTick>
 8001258:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800125e:	d002      	beq.n	8001266 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_Delay+0x24>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001266:	f7ff ffed 	bl	8001244 <HAL_GetTick>
 800126a:	1b40      	subs	r0, r0, r5
 800126c:	42a0      	cmp	r0, r4
 800126e:	d3fa      	bcc.n	8001266 <HAL_Delay+0x16>
  {
  }
}
 8001270:	bd38      	pop	{r3, r4, r5, pc}
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b510      	push	{r4, lr}
 800127a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800127c:	1ec3      	subs	r3, r0, #3
 800127e:	2b04      	cmp	r3, #4
 8001280:	d80d      	bhi.n	800129e <HAL_NVIC_SetPriorityGrouping+0x26>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8001284:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800128a:	041b      	lsls	r3, r3, #16
 800128c:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128e:	0224      	lsls	r4, r4, #8
 8001290:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	431c      	orrs	r4, r3
  reg_value  =  (reg_value                                   |
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001298:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 800129a:	60d3      	str	r3, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800129c:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800129e:	2192      	movs	r1, #146	; 0x92
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80012a2:	f013 fe41 	bl	8014f28 <assert_failed>
 80012a6:	e7ec      	b.n	8001282 <HAL_NVIC_SetPriorityGrouping+0xa>
 80012a8:	e000ed00 	.word	0xe000ed00
 80012ac:	05fa0000 	.word	0x05fa0000
 80012b0:	0801a738 	.word	0x0801a738

080012b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	4605      	mov	r5, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012bc:	2a0f      	cmp	r2, #15
 80012be:	d821      	bhi.n	8001304 <HAL_NVIC_SetPriority+0x50>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80012c0:	2c0f      	cmp	r4, #15
 80012c2:	d824      	bhi.n	800130e <HAL_NVIC_SetPriority+0x5a>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_NVIC_SetPriority+0x78>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	f1c3 0107 	rsb	r1, r3, #7
 80012d0:	2904      	cmp	r1, #4
 80012d2:	bf28      	it	cs
 80012d4:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	1d1a      	adds	r2, r3, #4
 80012d8:	2a06      	cmp	r2, #6
 80012da:	d91d      	bls.n	8001318 <HAL_NVIC_SetPriority+0x64>
 80012dc:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012de:	f04f 32ff 	mov.w	r2, #4294967295
 80012e2:	fa02 f101 	lsl.w	r1, r2, r1
 80012e6:	ea24 0401 	bic.w	r4, r4, r1
 80012ea:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 80012f6:	2d00      	cmp	r5, #0
 80012f8:	db10      	blt.n	800131c <HAL_NVIC_SetPriority+0x68>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	0124      	lsls	r4, r4, #4
 80012fc:	b2e4      	uxtb	r4, r4
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_NVIC_SetPriority+0x7c>)
 8001300:	555c      	strb	r4, [r3, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001302:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001304:	21aa      	movs	r1, #170	; 0xaa
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <HAL_NVIC_SetPriority+0x80>)
 8001308:	f013 fe0e 	bl	8014f28 <assert_failed>
 800130c:	e7d8      	b.n	80012c0 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800130e:	21ab      	movs	r1, #171	; 0xab
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <HAL_NVIC_SetPriority+0x80>)
 8001312:	f013 fe09 	bl	8014f28 <assert_failed>
 8001316:	e7d5      	b.n	80012c4 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001318:	2300      	movs	r3, #0
 800131a:	e7e0      	b.n	80012de <HAL_NVIC_SetPriority+0x2a>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	f005 050f 	and.w	r5, r5, #15
 8001320:	0124      	lsls	r4, r4, #4
 8001322:	b2e4      	uxtb	r4, r4
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_NVIC_SetPriority+0x84>)
 8001326:	555c      	strb	r4, [r3, r5]
}
 8001328:	e7eb      	b.n	8001302 <HAL_NVIC_SetPriority+0x4e>
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	e000e400 	.word	0xe000e400
 8001334:	0801a738 	.word	0x0801a738
 8001338:	e000ed14 	.word	0xe000ed14

0800133c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800133e:	1e04      	subs	r4, r0, #0
 8001340:	db0a      	blt.n	8001358 <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 8001342:	2c00      	cmp	r4, #0
 8001344:	db07      	blt.n	8001356 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	f004 021f 	and.w	r2, r4, #31
 800134a:	0964      	lsrs	r4, r4, #5
 800134c:	2301      	movs	r3, #1
 800134e:	4093      	lsls	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_NVIC_EnableIRQ+0x28>)
 8001352:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001356:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001358:	21be      	movs	r1, #190	; 0xbe
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <HAL_NVIC_EnableIRQ+0x2c>)
 800135c:	f013 fde4 	bl	8014f28 <assert_failed>
 8001360:	e7ef      	b.n	8001342 <HAL_NVIC_EnableIRQ+0x6>
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100
 8001368:	0801a738 	.word	0x0801a738

0800136c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800136c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800136e:	1e04      	subs	r4, r0, #0
 8001370:	db0f      	blt.n	8001392 <HAL_NVIC_DisableIRQ+0x26>
  if ((int32_t)(IRQn) >= 0)
 8001372:	2c00      	cmp	r4, #0
 8001374:	db0c      	blt.n	8001390 <HAL_NVIC_DisableIRQ+0x24>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	f004 021f 	and.w	r2, r4, #31
 800137a:	0964      	lsrs	r4, r4, #5
 800137c:	2301      	movs	r3, #1
 800137e:	4093      	lsls	r3, r2
 8001380:	3420      	adds	r4, #32
 8001382:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_NVIC_DisableIRQ+0x30>)
 8001384:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800138c:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001390:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001392:	21ce      	movs	r1, #206	; 0xce
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <HAL_NVIC_DisableIRQ+0x34>)
 8001396:	f013 fdc7 	bl	8014f28 <assert_failed>
 800139a:	e7ea      	b.n	8001372 <HAL_NVIC_DisableIRQ+0x6>
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	0801a738 	.word	0x0801a738

080013a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	3801      	subs	r0, #1
 80013a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013aa:	d20b      	bcs.n	80013c4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80013b0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_SYSTICK_Config+0x24>)
 80013b4:	21f0      	movs	r1, #240	; 0xf0
 80013b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ba:	2000      	movs	r0, #0
 80013bc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	2207      	movs	r2, #7
 80013c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013cc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_MPU_Disable+0x18>)
 80013d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013da:	2200      	movs	r2, #0
 80013dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013e8:	f040 0001 	orr.w	r0, r0, #1
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_MPU_Enable+0x1c>)
 80013ee:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013fe:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001408:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800140a:	6805      	ldr	r5, [r0, #0]
 800140c:	682c      	ldr	r4, [r5, #0]
 800140e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001412:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001414:	6804      	ldr	r4, [r0, #0]
 8001416:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001418:	6883      	ldr	r3, [r0, #8]
 800141a:	2b40      	cmp	r3, #64	; 0x40
 800141c:	d005      	beq.n	800142a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800141e:	6803      	ldr	r3, [r0, #0]
 8001420:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001422:	6803      	ldr	r3, [r0, #0]
 8001424:	60da      	str	r2, [r3, #12]
  }
}
 8001426:	bc30      	pop	{r4, r5}
 8001428:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800142a:	6803      	ldr	r3, [r0, #0]
 800142c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800142e:	6803      	ldr	r3, [r0, #0]
 8001430:	60d9      	str	r1, [r3, #12]
 8001432:	e7f8      	b.n	8001426 <DMA_SetConfig+0x1e>

08001434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001434:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001436:	6801      	ldr	r1, [r0, #0]
 8001438:	b2ca      	uxtb	r2, r1
 800143a:	3a10      	subs	r2, #16
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <DMA_CalcBaseAndBitshift+0x34>)
 800143e:	fba3 4302 	umull	r4, r3, r3, r2
 8001442:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001444:	4c09      	ldr	r4, [pc, #36]	; (800146c <DMA_CalcBaseAndBitshift+0x38>)
 8001446:	5ce3      	ldrb	r3, [r4, r3]
 8001448:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800144a:	2a5f      	cmp	r2, #95	; 0x5f
 800144c:	d907      	bls.n	800145e <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <DMA_CalcBaseAndBitshift+0x3c>)
 8001450:	400b      	ands	r3, r1
 8001452:	3304      	adds	r3, #4
 8001454:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001456:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800145c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <DMA_CalcBaseAndBitshift+0x3c>)
 8001460:	400b      	ands	r3, r1
 8001462:	6583      	str	r3, [r0, #88]	; 0x58
 8001464:	e7f7      	b.n	8001456 <DMA_CalcBaseAndBitshift+0x22>
 8001466:	bf00      	nop
 8001468:	aaaaaaab 	.word	0xaaaaaaab
 800146c:	0801a7ac 	.word	0x0801a7ac
 8001470:	fffffc00 	.word	0xfffffc00

08001474 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001474:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001476:	6982      	ldr	r2, [r0, #24]
 8001478:	b992      	cbnz	r2, 80014a0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800147a:	2b01      	cmp	r3, #1
 800147c:	d00a      	beq.n	8001494 <DMA_CheckFifoParam+0x20>
 800147e:	2b02      	cmp	r3, #2
 8001480:	d002      	beq.n	8001488 <DMA_CheckFifoParam+0x14>
 8001482:	b10b      	cbz	r3, 8001488 <DMA_CheckFifoParam+0x14>
 8001484:	2000      	movs	r0, #0
 8001486:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001488:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800148a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800148e:	d128      	bne.n	80014e2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	2000      	movs	r0, #0
 8001492:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001494:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001496:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800149a:	d024      	beq.n	80014e6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800149c:	2000      	movs	r0, #0
 800149e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014a0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80014a4:	d009      	beq.n	80014ba <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d925      	bls.n	80014f6 <DMA_CheckFifoParam+0x82>
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d125      	bne.n	80014fa <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014b4:	d123      	bne.n	80014fe <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80014b6:	2000      	movs	r0, #0
 80014b8:	4770      	bx	lr
    switch (tmp)
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d803      	bhi.n	80014c6 <DMA_CheckFifoParam+0x52>
 80014be:	e8df f003 	tbb	[pc, r3]
 80014c2:	0414      	.short	0x0414
 80014c4:	0a14      	.short	0x0a14
 80014c6:	2000      	movs	r0, #0
 80014c8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014d0:	d10d      	bne.n	80014ee <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2000      	movs	r0, #0
 80014d4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014dc:	d009      	beq.n	80014f2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2000      	movs	r0, #0
 80014e0:	4770      	bx	lr
        status = HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
 80014e4:	4770      	bx	lr
        status = HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
      status = HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
 80014ec:	4770      	bx	lr
        status = HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	4770      	bx	lr
        status = HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
 80014f4:	4770      	bx	lr
      status = HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
 80014f8:	4770      	bx	lr
    switch (tmp)
 80014fa:	2000      	movs	r0, #0
 80014fc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001500:	4770      	bx	lr
	...

08001504 <HAL_DMA_Init>:
{
 8001504:	b570      	push	{r4, r5, r6, lr}
 8001506:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff fe9c 	bl	8001244 <HAL_GetTick>
  if(hdma == NULL)
 800150c:	2c00      	cmp	r4, #0
 800150e:	f000 8141 	beq.w	8001794 <HAL_DMA_Init+0x290>
 8001512:	4605      	mov	r5, r0
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	49a0      	ldr	r1, [pc, #640]	; (8001798 <HAL_DMA_Init+0x294>)
 8001518:	4aa0      	ldr	r2, [pc, #640]	; (800179c <HAL_DMA_Init+0x298>)
 800151a:	428b      	cmp	r3, r1
 800151c:	bf18      	it	ne
 800151e:	4293      	cmpne	r3, r2
 8001520:	d02e      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001522:	3218      	adds	r2, #24
 8001524:	4293      	cmp	r3, r2
 8001526:	d02b      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001528:	3218      	adds	r2, #24
 800152a:	4293      	cmp	r3, r2
 800152c:	d028      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800152e:	3218      	adds	r2, #24
 8001530:	4293      	cmp	r3, r2
 8001532:	d025      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001534:	3218      	adds	r2, #24
 8001536:	4293      	cmp	r3, r2
 8001538:	d022      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800153a:	3218      	adds	r2, #24
 800153c:	4293      	cmp	r3, r2
 800153e:	d01f      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001540:	3218      	adds	r2, #24
 8001542:	4293      	cmp	r3, r2
 8001544:	d01c      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001546:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800154a:	4293      	cmp	r3, r2
 800154c:	d018      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800154e:	3218      	adds	r2, #24
 8001550:	4293      	cmp	r3, r2
 8001552:	d015      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001554:	3218      	adds	r2, #24
 8001556:	4293      	cmp	r3, r2
 8001558:	d012      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800155a:	3218      	adds	r2, #24
 800155c:	4293      	cmp	r3, r2
 800155e:	d00f      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001560:	3218      	adds	r2, #24
 8001562:	4293      	cmp	r3, r2
 8001564:	d00c      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001566:	3218      	adds	r2, #24
 8001568:	4293      	cmp	r3, r2
 800156a:	d009      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800156c:	3218      	adds	r2, #24
 800156e:	4293      	cmp	r3, r2
 8001570:	d006      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001572:	3218      	adds	r2, #24
 8001574:	4293      	cmp	r3, r2
 8001576:	d003      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001578:	21b9      	movs	r1, #185	; 0xb9
 800157a:	4889      	ldr	r0, [pc, #548]	; (80017a0 <HAL_DMA_Init+0x29c>)
 800157c:	f013 fcd4 	bl	8014f28 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001580:	6863      	ldr	r3, [r4, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf18      	it	ne
 8001586:	f1b3 7f00 	cmpne.w	r3, #33554432	; 0x2000000
 800158a:	d011      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 800158c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001590:	d00e      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 8001592:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001596:	d00b      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 8001598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800159c:	d008      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 800159e:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80015a2:	d005      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 80015a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80015a8:	d002      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 80015aa:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80015ae:	d175      	bne.n	800169c <HAL_DMA_Init+0x198>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80015b0:	68a3      	ldr	r3, [r4, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf18      	it	ne
 80015b6:	2b40      	cmpne	r3, #64	; 0x40
 80015b8:	d001      	beq.n	80015be <HAL_DMA_Init+0xba>
 80015ba:	2b80      	cmp	r3, #128	; 0x80
 80015bc:	d173      	bne.n	80016a6 <HAL_DMA_Init+0x1a2>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80015be:	68e3      	ldr	r3, [r4, #12]
 80015c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c4:	bf18      	it	ne
 80015c6:	2b00      	cmpne	r3, #0
 80015c8:	d172      	bne.n	80016b0 <HAL_DMA_Init+0x1ac>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80015ca:	6923      	ldr	r3, [r4, #16]
 80015cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d0:	bf18      	it	ne
 80015d2:	2b00      	cmpne	r3, #0
 80015d4:	d171      	bne.n	80016ba <HAL_DMA_Init+0x1b6>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80015d6:	6963      	ldr	r3, [r4, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf18      	it	ne
 80015dc:	f5b3 6f00 	cmpne.w	r3, #2048	; 0x800
 80015e0:	d002      	beq.n	80015e8 <HAL_DMA_Init+0xe4>
 80015e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e6:	d16d      	bne.n	80016c4 <HAL_DMA_Init+0x1c0>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80015e8:	69a3      	ldr	r3, [r4, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf18      	it	ne
 80015ee:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 80015f2:	d002      	beq.n	80015fa <HAL_DMA_Init+0xf6>
 80015f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f8:	d169      	bne.n	80016ce <HAL_DMA_Init+0x1ca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80015fa:	69e3      	ldr	r3, [r4, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf18      	it	ne
 8001600:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 8001604:	d001      	beq.n	800160a <HAL_DMA_Init+0x106>
 8001606:	2b20      	cmp	r3, #32
 8001608:	d166      	bne.n	80016d8 <HAL_DMA_Init+0x1d4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800160a:	6a23      	ldr	r3, [r4, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf18      	it	ne
 8001610:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8001614:	d005      	beq.n	8001622 <HAL_DMA_Init+0x11e>
 8001616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800161a:	d002      	beq.n	8001622 <HAL_DMA_Init+0x11e>
 800161c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001620:	d15f      	bne.n	80016e2 <HAL_DMA_Init+0x1de>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf18      	it	ne
 8001628:	2b04      	cmpne	r3, #4
 800162a:	d15f      	bne.n	80016ec <HAL_DMA_Init+0x1e8>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800162c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800162e:	b1d3      	cbz	r3, 8001666 <HAL_DMA_Init+0x162>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001632:	2b03      	cmp	r3, #3
 8001634:	d85f      	bhi.n	80016f6 <HAL_DMA_Init+0x1f2>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001636:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf18      	it	ne
 800163c:	f5b3 0f00 	cmpne.w	r3, #8388608	; 0x800000
 8001640:	d005      	beq.n	800164e <HAL_DMA_Init+0x14a>
 8001642:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001646:	d002      	beq.n	800164e <HAL_DMA_Init+0x14a>
 8001648:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800164c:	d158      	bne.n	8001700 <HAL_DMA_Init+0x1fc>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800164e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf18      	it	ne
 8001654:	f5b3 1f00 	cmpne.w	r3, #2097152	; 0x200000
 8001658:	d005      	beq.n	8001666 <HAL_DMA_Init+0x162>
 800165a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800165e:	d002      	beq.n	8001666 <HAL_DMA_Init+0x162>
 8001660:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001664:	d151      	bne.n	800170a <HAL_DMA_Init+0x206>
  __HAL_UNLOCK(hdma);
 8001666:	2300      	movs	r3, #0
 8001668:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	2302      	movs	r3, #2
 800166e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001672:	6822      	ldr	r2, [r4, #0]
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f012 0f01 	tst.w	r2, #1
 8001684:	d046      	beq.n	8001714 <HAL_DMA_Init+0x210>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001686:	f7ff fddd 	bl	8001244 <HAL_GetTick>
 800168a:	1b40      	subs	r0, r0, r5
 800168c:	2805      	cmp	r0, #5
 800168e:	d9f5      	bls.n	800167c <HAL_DMA_Init+0x178>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001690:	2320      	movs	r3, #32
 8001692:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001694:	2003      	movs	r0, #3
 8001696:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800169a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800169c:	21ba      	movs	r1, #186	; 0xba
 800169e:	4840      	ldr	r0, [pc, #256]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016a0:	f013 fc42 	bl	8014f28 <assert_failed>
 80016a4:	e784      	b.n	80015b0 <HAL_DMA_Init+0xac>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80016a6:	21bb      	movs	r1, #187	; 0xbb
 80016a8:	483d      	ldr	r0, [pc, #244]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016aa:	f013 fc3d 	bl	8014f28 <assert_failed>
 80016ae:	e786      	b.n	80015be <HAL_DMA_Init+0xba>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80016b0:	21bc      	movs	r1, #188	; 0xbc
 80016b2:	483b      	ldr	r0, [pc, #236]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016b4:	f013 fc38 	bl	8014f28 <assert_failed>
 80016b8:	e787      	b.n	80015ca <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80016ba:	21bd      	movs	r1, #189	; 0xbd
 80016bc:	4838      	ldr	r0, [pc, #224]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016be:	f013 fc33 	bl	8014f28 <assert_failed>
 80016c2:	e788      	b.n	80015d6 <HAL_DMA_Init+0xd2>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80016c4:	21be      	movs	r1, #190	; 0xbe
 80016c6:	4836      	ldr	r0, [pc, #216]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016c8:	f013 fc2e 	bl	8014f28 <assert_failed>
 80016cc:	e78c      	b.n	80015e8 <HAL_DMA_Init+0xe4>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80016ce:	21bf      	movs	r1, #191	; 0xbf
 80016d0:	4833      	ldr	r0, [pc, #204]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016d2:	f013 fc29 	bl	8014f28 <assert_failed>
 80016d6:	e790      	b.n	80015fa <HAL_DMA_Init+0xf6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80016d8:	21c0      	movs	r1, #192	; 0xc0
 80016da:	4831      	ldr	r0, [pc, #196]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016dc:	f013 fc24 	bl	8014f28 <assert_failed>
 80016e0:	e793      	b.n	800160a <HAL_DMA_Init+0x106>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80016e2:	21c1      	movs	r1, #193	; 0xc1
 80016e4:	482e      	ldr	r0, [pc, #184]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016e6:	f013 fc1f 	bl	8014f28 <assert_failed>
 80016ea:	e79a      	b.n	8001622 <HAL_DMA_Init+0x11e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80016ec:	21c2      	movs	r1, #194	; 0xc2
 80016ee:	482c      	ldr	r0, [pc, #176]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016f0:	f013 fc1a 	bl	8014f28 <assert_failed>
 80016f4:	e79a      	b.n	800162c <HAL_DMA_Init+0x128>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80016f6:	21c7      	movs	r1, #199	; 0xc7
 80016f8:	4829      	ldr	r0, [pc, #164]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016fa:	f013 fc15 	bl	8014f28 <assert_failed>
 80016fe:	e79a      	b.n	8001636 <HAL_DMA_Init+0x132>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001700:	21c8      	movs	r1, #200	; 0xc8
 8001702:	4827      	ldr	r0, [pc, #156]	; (80017a0 <HAL_DMA_Init+0x29c>)
 8001704:	f013 fc10 	bl	8014f28 <assert_failed>
 8001708:	e7a1      	b.n	800164e <HAL_DMA_Init+0x14a>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800170a:	21c9      	movs	r1, #201	; 0xc9
 800170c:	4824      	ldr	r0, [pc, #144]	; (80017a0 <HAL_DMA_Init+0x29c>)
 800170e:	f013 fc0b 	bl	8014f28 <assert_failed>
 8001712:	e7a8      	b.n	8001666 <HAL_DMA_Init+0x162>
  tmp = hdma->Instance->CR;
 8001714:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001716:	4823      	ldr	r0, [pc, #140]	; (80017a4 <HAL_DMA_Init+0x2a0>)
 8001718:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800171a:	6861      	ldr	r1, [r4, #4]
 800171c:	68a2      	ldr	r2, [r4, #8]
 800171e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001720:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001722:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001724:	6921      	ldr	r1, [r4, #16]
 8001726:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001728:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172c:	69a1      	ldr	r1, [r4, #24]
 800172e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001730:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001732:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001734:	6a21      	ldr	r1, [r4, #32]
 8001736:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001738:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800173c:	2904      	cmp	r1, #4
 800173e:	d01e      	beq.n	800177e <HAL_DMA_Init+0x27a>
  hdma->Instance->CR = tmp;  
 8001740:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001742:	6826      	ldr	r6, [r4, #0]
 8001744:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001746:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800174a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800174c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800174e:	2b04      	cmp	r3, #4
 8001750:	d107      	bne.n	8001762 <HAL_DMA_Init+0x25e>
    tmp |= hdma->Init.FIFOThreshold;
 8001752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001754:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001758:	b11b      	cbz	r3, 8001762 <HAL_DMA_Init+0x25e>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff fe8a 	bl	8001474 <DMA_CheckFifoParam>
 8001760:	b990      	cbnz	r0, 8001788 <HAL_DMA_Init+0x284>
  hdma->Instance->FCR = tmp;
 8001762:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff fe65 	bl	8001434 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800176c:	233f      	movs	r3, #63	; 0x3f
 800176e:	4093      	lsls	r3, r2
 8001770:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001772:	2000      	movs	r0, #0
 8001774:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001776:	2301      	movs	r3, #1
 8001778:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800177c:	e78d      	b.n	800169a <HAL_DMA_Init+0x196>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800177e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001780:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001782:	4301      	orrs	r1, r0
 8001784:	430a      	orrs	r2, r1
 8001786:	e7db      	b.n	8001740 <HAL_DMA_Init+0x23c>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001788:	2340      	movs	r3, #64	; 0x40
 800178a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800178c:	2001      	movs	r0, #1
 800178e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001792:	e782      	b.n	800169a <HAL_DMA_Init+0x196>
    return HAL_ERROR;
 8001794:	2001      	movs	r0, #1
 8001796:	e780      	b.n	800169a <HAL_DMA_Init+0x196>
 8001798:	40026010 	.word	0x40026010
 800179c:	40026028 	.word	0x40026028
 80017a0:	0801a774 	.word	0x0801a774
 80017a4:	f010803f 	.word	0xf010803f

080017a8 <HAL_DMA_Start_IT>:
{
 80017a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ac:	4604      	mov	r4, r0
 80017ae:	460e      	mov	r6, r1
 80017b0:	4617      	mov	r7, r2
 80017b2:	461d      	mov	r5, r3
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b4:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80017be:	429a      	cmp	r2, r3
 80017c0:	d811      	bhi.n	80017e6 <HAL_DMA_Start_IT+0x3e>
  __HAL_LOCK(hdma);
 80017c2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d03b      	beq.n	8001842 <HAL_DMA_Start_IT+0x9a>
 80017ca:	2301      	movs	r3, #1
 80017cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80017d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d00b      	beq.n	80017f2 <HAL_DMA_Start_IT+0x4a>
    __HAL_UNLOCK(hdma);	  
 80017da:	2300      	movs	r3, #0
 80017dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80017e0:	2002      	movs	r0, #2
}
 80017e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80017e6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80017ea:	4817      	ldr	r0, [pc, #92]	; (8001848 <HAL_DMA_Start_IT+0xa0>)
 80017ec:	f013 fb9c 	bl	8014f28 <assert_failed>
 80017f0:	e7e7      	b.n	80017c2 <HAL_DMA_Start_IT+0x1a>
    hdma->State = HAL_DMA_STATE_BUSY;
 80017f2:	2302      	movs	r3, #2
 80017f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	6563      	str	r3, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017fc:	462b      	mov	r3, r5
 80017fe:	463a      	mov	r2, r7
 8001800:	4631      	mov	r1, r6
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fe00 	bl	8001408 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001808:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800180a:	233f      	movs	r3, #63	; 0x3f
 800180c:	4093      	lsls	r3, r2
 800180e:	f8c8 3008 	str.w	r3, [r8, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	6813      	ldr	r3, [r2, #0]
 8001816:	f043 0316 	orr.w	r3, r3, #22
 800181a:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	6953      	ldr	r3, [r2, #20]
 8001820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001824:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001828:	b123      	cbz	r3, 8001834 <HAL_DMA_Start_IT+0x8c>
      hdma->Instance->CR  |= DMA_IT_HT;
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001834:	6822      	ldr	r2, [r4, #0]
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800183e:	2000      	movs	r0, #0
 8001840:	e7cf      	b.n	80017e2 <HAL_DMA_Start_IT+0x3a>
  __HAL_LOCK(hdma);
 8001842:	2002      	movs	r0, #2
 8001844:	e7cd      	b.n	80017e2 <HAL_DMA_Start_IT+0x3a>
 8001846:	bf00      	nop
 8001848:	0801a774 	.word	0x0801a774

0800184c <HAL_DMA_Abort>:
{
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001850:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001852:	f7ff fcf7 	bl	8001244 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001856:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d006      	beq.n	800186e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001864:	2300      	movs	r3, #0
 8001866:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
}
 800186c:	bd70      	pop	{r4, r5, r6, pc}
 800186e:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	6813      	ldr	r3, [r2, #0]
 8001874:	f023 0316 	bic.w	r3, r3, #22
 8001878:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	6953      	ldr	r3, [r2, #20]
 800187e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001882:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001884:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001886:	b1e3      	cbz	r3, 80018c2 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	6813      	ldr	r3, [r2, #0]
 800188c:	f023 0308 	bic.w	r3, r3, #8
 8001890:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001892:	6822      	ldr	r2, [r4, #0]
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f013 0f01 	tst.w	r3, #1
 80018a4:	d011      	beq.n	80018ca <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018a6:	f7ff fccd 	bl	8001244 <HAL_GetTick>
 80018aa:	1b43      	subs	r3, r0, r5
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d9f5      	bls.n	800189c <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018b0:	2320      	movs	r3, #32
 80018b2:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80018b4:	2300      	movs	r3, #0
 80018b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ba:	2003      	movs	r0, #3
 80018bc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80018c0:	e7d4      	b.n	800186c <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1df      	bne.n	8001888 <HAL_DMA_Abort+0x3c>
 80018c8:	e7e3      	b.n	8001892 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80018cc:	233f      	movs	r3, #63	; 0x3f
 80018ce:	4093      	lsls	r3, r2
 80018d0:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80018d8:	2301      	movs	r3, #1
 80018da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80018de:	e7c5      	b.n	800186c <HAL_DMA_Abort+0x20>

080018e0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d003      	beq.n	80018f2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80018f2:	2305      	movs	r3, #5
 80018f4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80018f8:	6802      	ldr	r2, [r0, #0]
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001902:	2000      	movs	r0, #0
}
 8001904:	4770      	bx	lr
	...

08001908 <HAL_DMA_IRQHandler>:
{
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8001912:	4b72      	ldr	r3, [pc, #456]	; (8001adc <HAL_DMA_IRQHandler+0x1d4>)
 8001914:	681d      	ldr	r5, [r3, #0]
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <HAL_DMA_IRQHandler+0x1d8>)
 8001918:	fba3 3505 	umull	r3, r5, r3, r5
 800191c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001920:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001922:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001924:	2308      	movs	r3, #8
 8001926:	4093      	lsls	r3, r2
 8001928:	4233      	tst	r3, r6
 800192a:	d010      	beq.n	800194e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800192c:	6803      	ldr	r3, [r0, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	f012 0f04 	tst.w	r2, #4
 8001934:	d00b      	beq.n	800194e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f022 0204 	bic.w	r2, r2, #4
 800193c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800193e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001940:	2308      	movs	r3, #8
 8001942:	4093      	lsls	r3, r2
 8001944:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001946:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800194e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001950:	2301      	movs	r3, #1
 8001952:	4093      	lsls	r3, r2
 8001954:	4233      	tst	r3, r6
 8001956:	d009      	beq.n	800196c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001958:	6822      	ldr	r2, [r4, #0]
 800195a:	6952      	ldr	r2, [r2, #20]
 800195c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001960:	d004      	beq.n	800196c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001962:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001964:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800196c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800196e:	2304      	movs	r3, #4
 8001970:	4093      	lsls	r3, r2
 8001972:	4233      	tst	r3, r6
 8001974:	d009      	beq.n	800198a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	f012 0f02 	tst.w	r2, #2
 800197e:	d004      	beq.n	800198a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001980:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001982:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800198a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800198c:	2310      	movs	r3, #16
 800198e:	4093      	lsls	r3, r2
 8001990:	4233      	tst	r3, r6
 8001992:	d024      	beq.n	80019de <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f012 0f08 	tst.w	r2, #8
 800199c:	d01f      	beq.n	80019de <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800199e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80019a8:	d00d      	beq.n	80019c6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80019b0:	d104      	bne.n	80019bc <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80019b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019b4:	b19b      	cbz	r3, 80019de <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80019b6:	4620      	mov	r0, r4
 80019b8:	4798      	blx	r3
 80019ba:	e010      	b.n	80019de <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80019be:	b173      	cbz	r3, 80019de <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80019c0:	4620      	mov	r0, r4
 80019c2:	4798      	blx	r3
 80019c4:	e00b      	b.n	80019de <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80019cc:	d103      	bne.n	80019d6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f022 0208 	bic.w	r2, r2, #8
 80019d4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80019d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d8:	b10b      	cbz	r3, 80019de <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80019da:	4620      	mov	r0, r4
 80019dc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019e0:	2320      	movs	r3, #32
 80019e2:	4093      	lsls	r3, r2
 80019e4:	4233      	tst	r3, r6
 80019e6:	d055      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	f012 0f10 	tst.w	r2, #16
 80019f0:	d050      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019f2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019f4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d00e      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001a06:	d033      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001a0e:	d12a      	bne.n	8001a66 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001a10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03e      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001a16:	4620      	mov	r0, r4
 8001a18:	4798      	blx	r3
 8001a1a:	e03b      	b.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	f023 0316 	bic.w	r3, r3, #22
 8001a24:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a26:	6822      	ldr	r2, [r4, #0]
 8001a28:	6953      	ldr	r3, [r2, #20]
 8001a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a2e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a32:	b1a3      	cbz	r3, 8001a5e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	f023 0308 	bic.w	r3, r3, #8
 8001a3c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a40:	233f      	movs	r3, #63	; 0x3f
 8001a42:	4093      	lsls	r3, r2
 8001a44:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001a46:	2300      	movs	r3, #0
 8001a48:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001a52:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d03f      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4798      	blx	r3
        return;
 8001a5c:	e03c      	b.n	8001ad8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1e7      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x12c>
 8001a64:	e7eb      	b.n	8001a3e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a68:	b1a3      	cbz	r3, 8001a94 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4798      	blx	r3
 8001a6e:	e011      	b.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a76:	d109      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	f022 0210 	bic.w	r2, r2, #16
 8001a7e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001a80:	2300      	movs	r3, #0
 8001a82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001a8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a8e:	b10b      	cbz	r3, 8001a94 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001a90:	4620      	mov	r0, r4
 8001a92:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a96:	b1fb      	cbz	r3, 8001ad8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a9a:	f013 0f01 	tst.w	r3, #1
 8001a9e:	d017      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	6813      	ldr	r3, [r2, #0]
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001ab0:	9b01      	ldr	r3, [sp, #4]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	42ab      	cmp	r3, r5
 8001ab8:	d804      	bhi.n	8001ac4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f013 0f01 	tst.w	r3, #1
 8001ac2:	d1f5      	bne.n	8001ab0 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001ad0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ad2:	b10b      	cbz	r3, 8001ad8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4798      	blx	r3
}
 8001ad8:	b003      	add	sp, #12
 8001ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001adc:	200000a8 	.word	0x200000a8
 8001ae0:	1b4e81b5 	.word	0x1b4e81b5

08001ae4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001ae4:	b430      	push	{r4, r5}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001ae6:	6805      	ldr	r5, [r0, #0]
 8001ae8:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001aea:	f004 4c40 	and.w	ip, r4, #3221225472	; 0xc0000000
 8001aee:	9c02      	ldr	r4, [sp, #8]
 8001af0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001af4:	ea4c 0303 	orr.w	r3, ip, r3
 8001af8:	646b      	str	r3, [r5, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001afa:	6803      	ldr	r3, [r0, #0]
 8001afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001afe:	6843      	ldr	r3, [r0, #4]
 8001b00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001b04:	d003      	beq.n	8001b0e <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001b06:	6803      	ldr	r3, [r0, #0]
 8001b08:	60d9      	str	r1, [r3, #12]
  }
}
 8001b0a:	bc30      	pop	{r4, r5}
 8001b0c:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001b0e:	f001 4c7f 	and.w	ip, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001b12:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001b16:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001b1a:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001b1c:	6884      	ldr	r4, [r0, #8]
 8001b1e:	b19c      	cbz	r4, 8001b48 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001b20:	2c01      	cmp	r4, #1
 8001b22:	d00f      	beq.n	8001b44 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001b24:	2c02      	cmp	r4, #2
 8001b26:	d012      	beq.n	8001b4e <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001b28:	2c03      	cmp	r4, #3
 8001b2a:	d018      	beq.n	8001b5e <DMA2D_SetConfig+0x7a>
      tmp1 = (tmp1 >> 28U);
 8001b2c:	ea4f 7c1c 	mov.w	ip, ip, lsr #28
      tmp2 = (tmp2 >> 20U);
 8001b30:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001b32:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001b34:	0219      	lsls	r1, r3, #8
 8001b36:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001b3a:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
 8001b3e:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8001b42:	e001      	b.n	8001b48 <DMA2D_SetConfig+0x64>
      tmp = (tmp3 | tmp2 | tmp4);
 8001b44:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001b48:	6803      	ldr	r3, [r0, #0]
 8001b4a:	6399      	str	r1, [r3, #56]	; 0x38
 8001b4c:	e7dd      	b.n	8001b0a <DMA2D_SetConfig+0x26>
      tmp2 = (tmp2 >> 19U);
 8001b4e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001b50:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001b52:	02d9      	lsls	r1, r3, #11
 8001b54:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001b58:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001b5c:	e7f4      	b.n	8001b48 <DMA2D_SetConfig+0x64>
      tmp1 = (tmp1 >> 31U);
 8001b5e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
      tmp2 = (tmp2 >> 19U);
 8001b62:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8001b64:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001b66:	0299      	lsls	r1, r3, #10
 8001b68:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001b6c:	ea41 31cc 	orr.w	r1, r1, ip, lsl #15
 8001b70:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001b74:	e7e8      	b.n	8001b48 <DMA2D_SetConfig+0x64>
	...

08001b78 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d052      	beq.n	8001c22 <HAL_DMA2D_Init+0xaa>
{
 8001b7c:	b510      	push	{r4, lr}
 8001b7e:	4604      	mov	r4, r0
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 8001b80:	6802      	ldr	r2, [r0, #0]
 8001b82:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <HAL_DMA2D_Init+0xb0>)
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d003      	beq.n	8001b90 <HAL_DMA2D_Init+0x18>
 8001b88:	21f6      	movs	r1, #246	; 0xf6
 8001b8a:	4828      	ldr	r0, [pc, #160]	; (8001c2c <HAL_DMA2D_Init+0xb4>)
 8001b8c:	f013 f9cc 	bl	8014f28 <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8001b90:	6863      	ldr	r3, [r4, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf18      	it	ne
 8001b96:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8001b9a:	d005      	beq.n	8001ba8 <HAL_DMA2D_Init+0x30>
 8001b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ba0:	d002      	beq.n	8001ba8 <HAL_DMA2D_Init+0x30>
 8001ba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ba6:	d127      	bne.n	8001bf8 <HAL_DMA2D_Init+0x80>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 8001ba8:	68a3      	ldr	r3, [r4, #8]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d829      	bhi.n	8001c02 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8001bae:	68e3      	ldr	r3, [r4, #12]
 8001bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bb4:	d22a      	bcs.n	8001c0c <HAL_DMA2D_Init+0x94>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001bb6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001bba:	b363      	cbz	r3, 8001c16 <HAL_DMA2D_Init+0x9e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001bc2:	6822      	ldr	r2, [r4, #0]
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bca:	6861      	ldr	r1, [r4, #4]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001bd0:	6822      	ldr	r2, [r4, #0]
 8001bd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001bd4:	f023 0307 	bic.w	r3, r3, #7
 8001bd8:	68a1      	ldr	r1, [r4, #8]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001bde:	6822      	ldr	r2, [r4, #0]
 8001be0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_DMA2D_Init+0xb8>)
 8001be4:	400b      	ands	r3, r1
 8001be6:	68e1      	ldr	r1, [r4, #12]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001bec:	2000      	movs	r0, #0
 8001bee:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001bf6:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8001bf8:	21f7      	movs	r1, #247	; 0xf7
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <HAL_DMA2D_Init+0xb4>)
 8001bfc:	f013 f994 	bl	8014f28 <assert_failed>
 8001c00:	e7d2      	b.n	8001ba8 <HAL_DMA2D_Init+0x30>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 8001c02:	21f8      	movs	r1, #248	; 0xf8
 8001c04:	4809      	ldr	r0, [pc, #36]	; (8001c2c <HAL_DMA2D_Init+0xb4>)
 8001c06:	f013 f98f 	bl	8014f28 <assert_failed>
 8001c0a:	e7d0      	b.n	8001bae <HAL_DMA2D_Init+0x36>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8001c0c:	21f9      	movs	r1, #249	; 0xf9
 8001c0e:	4807      	ldr	r0, [pc, #28]	; (8001c2c <HAL_DMA2D_Init+0xb4>)
 8001c10:	f013 f98a 	bl	8014f28 <assert_failed>
 8001c14:	e7cf      	b.n	8001bb6 <HAL_DMA2D_Init+0x3e>
    hdma2d->Lock = HAL_UNLOCKED;
 8001c16:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f012 f808 	bl	8013c30 <HAL_DMA2D_MspInit>
 8001c20:	e7cc      	b.n	8001bbc <HAL_DMA2D_Init+0x44>
     return HAL_ERROR;
 8001c22:	2001      	movs	r0, #1
}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	4002b000 	.word	0x4002b000
 8001c2c:	0801a7b4 	.word	0x0801a7b4
 8001c30:	ffffc000 	.word	0xffffc000

08001c34 <HAL_DMA2D_Start>:
{
 8001c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4688      	mov	r8, r1
 8001c3e:	4617      	mov	r7, r2
 8001c40:	461d      	mov	r5, r3
 8001c42:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DMA2D_LINE(Height));
 8001c44:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8001c48:	d21c      	bcs.n	8001c84 <HAL_DMA2D_Start+0x50>
  assert_param(IS_DMA2D_PIXEL(Width));
 8001c4a:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8001c4e:	d21f      	bcs.n	8001c90 <HAL_DMA2D_Start+0x5c>
  __HAL_LOCK(hdma2d);
 8001c50:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d021      	beq.n	8001c9c <HAL_DMA2D_Start+0x68>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001c64:	9600      	str	r6, [sp, #0]
 8001c66:	462b      	mov	r3, r5
 8001c68:	463a      	mov	r2, r7
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff ff39 	bl	8001ae4 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001c72:	6822      	ldr	r2, [r4, #0]
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001c7c:	2000      	movs	r0, #0
}
 8001c7e:	b002      	add	sp, #8
 8001c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA2D_LINE(Height));
 8001c84:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_DMA2D_Start+0x6c>)
 8001c8a:	f013 f94d 	bl	8014f28 <assert_failed>
 8001c8e:	e7dc      	b.n	8001c4a <HAL_DMA2D_Start+0x16>
  assert_param(IS_DMA2D_PIXEL(Width));
 8001c90:	f240 21a5 	movw	r1, #677	; 0x2a5
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <HAL_DMA2D_Start+0x6c>)
 8001c96:	f013 f947 	bl	8014f28 <assert_failed>
 8001c9a:	e7d9      	b.n	8001c50 <HAL_DMA2D_Start+0x1c>
  __HAL_LOCK(hdma2d);
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	e7ee      	b.n	8001c7e <HAL_DMA2D_Start+0x4a>
 8001ca0:	0801a7b4 	.word	0x0801a7b4

08001ca4 <HAL_DMA2D_PollForTransfer>:
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	4604      	mov	r4, r0
 8001caa:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001cb0:	6803      	ldr	r3, [r0, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f013 0f01 	tst.w	r3, #1
 8001cb8:	d111      	bne.n	8001cde <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001cba:	6822      	ldr	r2, [r4, #0]
 8001cbc:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001cbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc0:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8001cc2:	f013 0f20 	tst.w	r3, #32
 8001cc6:	d147      	bne.n	8001d58 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	2212      	movs	r2, #18
 8001ccc:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8001cde:	f7ff fab1 	bl	8001244 <HAL_GetTick>
 8001ce2:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	f012 0f02 	tst.w	r2, #2
 8001cec:	d1e5      	bne.n	8001cba <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001cf2:	9a01      	ldr	r2, [sp, #4]
 8001cf4:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001cf8:	d114      	bne.n	8001d24 <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 8001cfa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001cfe:	d0f1      	beq.n	8001ce4 <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001d00:	f7ff faa0 	bl	8001244 <HAL_GetTick>
 8001d04:	1b80      	subs	r0, r0, r6
 8001d06:	42a8      	cmp	r0, r5
 8001d08:	d801      	bhi.n	8001d0e <HAL_DMA2D_PollForTransfer+0x6a>
 8001d0a:	2d00      	cmp	r5, #0
 8001d0c:	d1ea      	bne.n	8001ce4 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d10:	f043 0320 	orr.w	r3, r3, #32
 8001d14:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001d16:	2003      	movs	r0, #3
 8001d18:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001d22:	e7da      	b.n	8001cda <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d24:	9a01      	ldr	r2, [sp, #4]
 8001d26:	f012 0f20 	tst.w	r2, #32
 8001d2a:	d003      	beq.n	8001d34 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d2e:	f042 0202 	orr.w	r2, r2, #2
 8001d32:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d34:	9a01      	ldr	r2, [sp, #4]
 8001d36:	f012 0f01 	tst.w	r2, #1
 8001d3a:	d003      	beq.n	8001d44 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d44:	2221      	movs	r2, #33	; 0x21
 8001d46:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
 8001d56:	e7c0      	b.n	8001cda <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8001d58:	f7ff fa74 	bl	8001244 <HAL_GetTick>
 8001d5c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	f012 0f10 	tst.w	r2, #16
 8001d66:	d1af      	bne.n	8001cc8 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001d6c:	9a01      	ldr	r2, [sp, #4]
 8001d6e:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001d72:	d114      	bne.n	8001d9e <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 8001d74:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d78:	d0f1      	beq.n	8001d5e <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001d7a:	f7ff fa63 	bl	8001244 <HAL_GetTick>
 8001d7e:	1b80      	subs	r0, r0, r6
 8001d80:	42a8      	cmp	r0, r5
 8001d82:	d801      	bhi.n	8001d88 <HAL_DMA2D_PollForTransfer+0xe4>
 8001d84:	2d00      	cmp	r5, #0
 8001d86:	d1ea      	bne.n	8001d5e <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d8a:	f043 0320 	orr.w	r3, r3, #32
 8001d8e:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001d90:	2003      	movs	r0, #3
 8001d92:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001d96:	2300      	movs	r3, #0
 8001d98:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001d9c:	e79d      	b.n	8001cda <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d9e:	9a01      	ldr	r2, [sp, #4]
 8001da0:	f012 0f08 	tst.w	r2, #8
 8001da4:	d003      	beq.n	8001dae <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001da6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001da8:	f042 0204 	orr.w	r2, r2, #4
 8001dac:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001dae:	9a01      	ldr	r2, [sp, #4]
 8001db0:	f012 0f20 	tst.w	r2, #32
 8001db4:	d003      	beq.n	8001dbe <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001db6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001db8:	f042 0202 	orr.w	r2, r2, #2
 8001dbc:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001dbe:	9a01      	ldr	r2, [sp, #4]
 8001dc0:	f012 0f01 	tst.w	r2, #1
 8001dc4:	d003      	beq.n	8001dce <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001dc6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001dce:	2229      	movs	r2, #41	; 0x29
 8001dd0:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001dde:	2001      	movs	r0, #1
 8001de0:	e77b      	b.n	8001cda <HAL_DMA2D_PollForTransfer+0x36>
	...

08001de4 <HAL_DMA2D_ConfigLayer>:
{
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	4604      	mov	r4, r0
 8001de8:	460d      	mov	r5, r1
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8001dea:	2901      	cmp	r1, #1
 8001dec:	d848      	bhi.n	8001e80 <HAL_DMA2D_ConfigLayer+0x9c>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8001dee:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df8:	d248      	bcs.n	8001e8c <HAL_DMA2D_ConfigLayer+0xa8>
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001dfa:	6863      	ldr	r3, [r4, #4]
 8001dfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e00:	d00b      	beq.n	8001e1a <HAL_DMA2D_ConfigLayer+0x36>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8001e02:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2b0a      	cmp	r3, #10
 8001e0a:	d845      	bhi.n	8001e98 <HAL_DMA2D_ConfigLayer+0xb4>
    if(hdma2d->Init.Mode != DMA2D_M2M)
 8001e0c:	6863      	ldr	r3, [r4, #4]
 8001e0e:	b123      	cbz	r3, 8001e1a <HAL_DMA2D_ConfigLayer+0x36>
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8001e10:	1cab      	adds	r3, r5, #2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	58e3      	ldr	r3, [r4, r3]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d844      	bhi.n	8001ea4 <HAL_DMA2D_ConfigLayer+0xc0>
  __HAL_LOCK(hdma2d);
 8001e1a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d06f      	beq.n	8001f02 <HAL_DMA2D_ConfigLayer+0x11e>
 8001e22:	2301      	movs	r3, #1
 8001e24:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e2e:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	1cab      	adds	r3, r5, #2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	58e3      	ldr	r3, [r4, r3]
 8001e3a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e3e:	3a09      	subs	r2, #9
 8001e40:	2a01      	cmp	r2, #1
 8001e42:	d935      	bls.n	8001eb0 <HAL_DMA2D_ConfigLayer+0xcc>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e44:	1caa      	adds	r2, r5, #2
 8001e46:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8001e4a:	6852      	ldr	r2, [r2, #4]
 8001e4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e50:	2d00      	cmp	r5, #0
 8001e52:	d13e      	bne.n	8001ed2 <HAL_DMA2D_ConfigLayer+0xee>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e54:	6821      	ldr	r1, [r4, #0]
 8001e56:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001e58:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <HAL_DMA2D_ConfigLayer+0x124>)
 8001e5a:	4002      	ands	r2, r0
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	624b      	str	r3, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001e66:	6999      	ldr	r1, [r3, #24]
 8001e68:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	3b09      	subs	r3, #9
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d926      	bls.n	8001ec0 <HAL_DMA2D_ConfigLayer+0xdc>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001e7e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8001e80:	f240 614a 	movw	r1, #1610	; 0x64a
 8001e84:	4821      	ldr	r0, [pc, #132]	; (8001f0c <HAL_DMA2D_ConfigLayer+0x128>)
 8001e86:	f013 f84f 	bl	8014f28 <assert_failed>
 8001e8a:	e7b0      	b.n	8001dee <HAL_DMA2D_ConfigLayer+0xa>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8001e8c:	f240 614b 	movw	r1, #1611	; 0x64b
 8001e90:	481e      	ldr	r0, [pc, #120]	; (8001f0c <HAL_DMA2D_ConfigLayer+0x128>)
 8001e92:	f013 f849 	bl	8014f28 <assert_failed>
 8001e96:	e7b0      	b.n	8001dfa <HAL_DMA2D_ConfigLayer+0x16>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8001e98:	f240 614e 	movw	r1, #1614	; 0x64e
 8001e9c:	481b      	ldr	r0, [pc, #108]	; (8001f0c <HAL_DMA2D_ConfigLayer+0x128>)
 8001e9e:	f013 f843 	bl	8014f28 <assert_failed>
 8001ea2:	e7b3      	b.n	8001e0c <HAL_DMA2D_ConfigLayer+0x28>
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8001ea4:	f240 6151 	movw	r1, #1617	; 0x651
 8001ea8:	4818      	ldr	r0, [pc, #96]	; (8001f0c <HAL_DMA2D_ConfigLayer+0x128>)
 8001eaa:	f013 f83d 	bl	8014f28 <assert_failed>
 8001eae:	e7b4      	b.n	8001e1a <HAL_DMA2D_ConfigLayer+0x36>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001eb0:	1caa      	adds	r2, r5, #2
 8001eb2:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8001eb6:	6852      	ldr	r2, [r2, #4]
 8001eb8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	e7c7      	b.n	8001e50 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001ec0:	3502      	adds	r5, #2
 8001ec2:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8001ec6:	686b      	ldr	r3, [r5, #4]
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ece:	6293      	str	r3, [r2, #40]	; 0x28
 8001ed0:	e7cf      	b.n	8001e72 <HAL_DMA2D_ConfigLayer+0x8e>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001ed2:	6821      	ldr	r1, [r4, #0]
 8001ed4:	69c8      	ldr	r0, [r1, #28]
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_DMA2D_ConfigLayer+0x124>)
 8001ed8:	4002      	ands	r2, r0
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61cb      	str	r3, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ede:	6822      	ldr	r2, [r4, #0]
 8001ee0:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001ee4:	6999      	ldr	r1, [r3, #24]
 8001ee6:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	3b09      	subs	r3, #9
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d8c0      	bhi.n	8001e72 <HAL_DMA2D_ConfigLayer+0x8e>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001ef0:	3502      	adds	r5, #2
 8001ef2:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8001ef6:	686b      	ldr	r3, [r5, #4]
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	e7b7      	b.n	8001e72 <HAL_DMA2D_ConfigLayer+0x8e>
  __HAL_LOCK(hdma2d);
 8001f02:	2002      	movs	r0, #2
 8001f04:	e7bb      	b.n	8001e7e <HAL_DMA2D_ConfigLayer+0x9a>
 8001f06:	bf00      	nop
 8001f08:	00fcfff0 	.word	0x00fcfff0
 8001f0c:	0801a7b4 	.word	0x0801a7b4

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	4607      	mov	r7, r0
 8001f18:	460e      	mov	r6, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f1a:	4aa8      	ldr	r2, [pc, #672]	; (80021bc <HAL_GPIO_Init+0x2ac>)
 8001f1c:	4ba8      	ldr	r3, [pc, #672]	; (80021c0 <HAL_GPIO_Init+0x2b0>)
 8001f1e:	4290      	cmp	r0, r2
 8001f20:	bf18      	it	ne
 8001f22:	4298      	cmpne	r0, r3
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2a:	1ac3      	subs	r3, r0, r3
 8001f2c:	bf18      	it	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f34:	4290      	cmp	r0, r2
 8001f36:	d022      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f38:	b30b      	cbz	r3, 8001f7e <HAL_GPIO_Init+0x6e>
 8001f3a:	4ba2      	ldr	r3, [pc, #648]	; (80021c4 <HAL_GPIO_Init+0x2b4>)
 8001f3c:	1ac3      	subs	r3, r0, r3
 8001f3e:	bf18      	it	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f4a:	b1c3      	cbz	r3, 8001f7e <HAL_GPIO_Init+0x6e>
 8001f4c:	4b9e      	ldr	r3, [pc, #632]	; (80021c8 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	1ac3      	subs	r3, r0, r3
 8001f50:	bf18      	it	ne
 8001f52:	2301      	movne	r3, #1
 8001f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f58:	4290      	cmp	r0, r2
 8001f5a:	d010      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f5c:	b17b      	cbz	r3, 8001f7e <HAL_GPIO_Init+0x6e>
 8001f5e:	4b9b      	ldr	r3, [pc, #620]	; (80021cc <HAL_GPIO_Init+0x2bc>)
 8001f60:	1ac3      	subs	r3, r0, r3
 8001f62:	bf18      	it	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	d007      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f6e:	b133      	cbz	r3, 8001f7e <HAL_GPIO_Init+0x6e>
 8001f70:	4b97      	ldr	r3, [pc, #604]	; (80021d0 <HAL_GPIO_Init+0x2c0>)
 8001f72:	4298      	cmp	r0, r3
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f76:	21b1      	movs	r1, #177	; 0xb1
 8001f78:	4896      	ldr	r0, [pc, #600]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001f7a:	f012 ffd5 	bl	8014f28 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f7e:	8833      	ldrh	r3, [r6, #0]
 8001f80:	b333      	cbz	r3, 8001fd0 <HAL_GPIO_Init+0xc0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f82:	6873      	ldr	r3, [r6, #4]
 8001f84:	2b11      	cmp	r3, #17
 8001f86:	bf18      	it	ne
 8001f88:	2b01      	cmpne	r3, #1
 8001f8a:	d91c      	bls.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d01a      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001f90:	2b12      	cmp	r3, #18
 8001f92:	d018      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001f94:	4a90      	ldr	r2, [pc, #576]	; (80021d8 <HAL_GPIO_Init+0x2c8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d015      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001f9a:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d011      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001fa2:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001faa:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d009      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001fb2:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d005      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001fba:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d001      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d109      	bne.n	8001fda <HAL_GPIO_Init+0xca>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fc6:	68b3      	ldr	r3, [r6, #8]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d80b      	bhi.n	8001fe4 <HAL_GPIO_Init+0xd4>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fcc:	2400      	movs	r4, #0
 8001fce:	e050      	b.n	8002072 <HAL_GPIO_Init+0x162>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001fd0:	21b2      	movs	r1, #178	; 0xb2
 8001fd2:	4880      	ldr	r0, [pc, #512]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001fd4:	f012 ffa8 	bl	8014f28 <assert_failed>
 8001fd8:	e7d3      	b.n	8001f82 <HAL_GPIO_Init+0x72>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001fda:	21b3      	movs	r1, #179	; 0xb3
 8001fdc:	487d      	ldr	r0, [pc, #500]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001fde:	f012 ffa3 	bl	8014f28 <assert_failed>
 8001fe2:	e7f0      	b.n	8001fc6 <HAL_GPIO_Init+0xb6>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fe4:	21b4      	movs	r1, #180	; 0xb4
 8001fe6:	487b      	ldr	r0, [pc, #492]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001fe8:	f012 ff9e 	bl	8014f28 <assert_failed>
 8001fec:	e7ee      	b.n	8001fcc <HAL_GPIO_Init+0xbc>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001fee:	21c5      	movs	r1, #197	; 0xc5
 8001ff0:	4878      	ldr	r0, [pc, #480]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001ff2:	f012 ff99 	bl	8014f28 <assert_failed>
 8001ff6:	e055      	b.n	80020a4 <HAL_GPIO_Init+0x194>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001ff8:	21d9      	movs	r1, #217	; 0xd9
 8001ffa:	4876      	ldr	r0, [pc, #472]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001ffc:	f012 ff94 	bl	8014f28 <assert_failed>
 8002000:	e07d      	b.n	80020fe <HAL_GPIO_Init+0x1ee>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002002:	2309      	movs	r3, #9
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 8002006:	2300      	movs	r3, #0
 8002008:	408b      	lsls	r3, r1
 800200a:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 800200c:	3202      	adds	r2, #2
 800200e:	4973      	ldr	r1, [pc, #460]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8002010:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002014:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002016:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8002018:	ea6f 0308 	mvn.w	r3, r8
 800201c:	ea22 0108 	bic.w	r1, r2, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002020:	6870      	ldr	r0, [r6, #4]
 8002022:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8002026:	d001      	beq.n	800202c <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8002028:	ea48 0102 	orr.w	r1, r8, r2
        }
        EXTI->IMR = temp;
 800202c:	4a6c      	ldr	r2, [pc, #432]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800202e:	6011      	str	r1, [r2, #0]

        temp = EXTI->EMR;
 8002030:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002032:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002036:	6870      	ldr	r0, [r6, #4]
 8002038:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800203c:	d001      	beq.n	8002042 <HAL_GPIO_Init+0x132>
        {
          temp |= iocurrent;
 800203e:	ea48 0102 	orr.w	r1, r8, r2
        }
        EXTI->EMR = temp;
 8002042:	4a67      	ldr	r2, [pc, #412]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002044:	6051      	str	r1, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002046:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002048:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204c:	6870      	ldr	r0, [r6, #4]
 800204e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002052:	d001      	beq.n	8002058 <HAL_GPIO_Init+0x148>
        {
          temp |= iocurrent;
 8002054:	ea48 0102 	orr.w	r1, r8, r2
        }
        EXTI->RTSR = temp;
 8002058:	4a61      	ldr	r2, [pc, #388]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800205a:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800205e:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002060:	6871      	ldr	r1, [r6, #4]
 8002062:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8002066:	d001      	beq.n	800206c <HAL_GPIO_Init+0x15c>
        {
          temp |= iocurrent;
 8002068:	ea48 0302 	orr.w	r3, r8, r2
        }
        EXTI->FTSR = temp;
 800206c:	4a5c      	ldr	r2, [pc, #368]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800206e:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002070:	3401      	adds	r4, #1
 8002072:	2c0f      	cmp	r4, #15
 8002074:	f200 80c8 	bhi.w	8002208 <HAL_GPIO_Init+0x2f8>
    ioposition = ((uint32_t)0x01) << position;
 8002078:	2501      	movs	r5, #1
 800207a:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207c:	6833      	ldr	r3, [r6, #0]
 800207e:	ea03 0805 	and.w	r8, r3, r5
    if(iocurrent == ioposition)
 8002082:	ea35 0303 	bics.w	r3, r5, r3
 8002086:	d1f3      	bne.n	8002070 <HAL_GPIO_Init+0x160>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002088:	6873      	ldr	r3, [r6, #4]
 800208a:	2b12      	cmp	r3, #18
 800208c:	bf18      	it	ne
 800208e:	2b02      	cmpne	r3, #2
 8002090:	d118      	bne.n	80020c4 <HAL_GPIO_Init+0x1b4>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002092:	6933      	ldr	r3, [r6, #16]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	bf18      	it	ne
 8002098:	2b0c      	cmpne	r3, #12
 800209a:	d903      	bls.n	80020a4 <HAL_GPIO_Init+0x194>
 800209c:	2b0d      	cmp	r3, #13
 800209e:	d001      	beq.n	80020a4 <HAL_GPIO_Init+0x194>
 80020a0:	2b0e      	cmp	r3, #14
 80020a2:	d1a4      	bne.n	8001fee <HAL_GPIO_Init+0xde>
        temp = GPIOx->AFR[position >> 3];
 80020a4:	08e2      	lsrs	r2, r4, #3
 80020a6:	3208      	adds	r2, #8
 80020a8:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ac:	f004 0307 	and.w	r3, r4, #7
 80020b0:	0099      	lsls	r1, r3, #2
 80020b2:	230f      	movs	r3, #15
 80020b4:	408b      	lsls	r3, r1
 80020b6:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020ba:	6933      	ldr	r3, [r6, #16]
 80020bc:	408b      	lsls	r3, r1
 80020be:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 80020c0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
      temp = GPIOx->MODER;
 80020c4:	683a      	ldr	r2, [r7, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020c6:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80020ca:	2303      	movs	r3, #3
 80020cc:	fa03 f30a 	lsl.w	r3, r3, sl
 80020d0:	ea6f 0903 	mvn.w	r9, r3
 80020d4:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020d8:	6873      	ldr	r3, [r6, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	fa03 f30a 	lsl.w	r3, r3, sl
 80020e2:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 80020e4:	603b      	str	r3, [r7, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e6:	6873      	ldr	r3, [r6, #4]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	2b11      	cmp	r3, #17
 80020ec:	bf18      	it	ne
 80020ee:	2a01      	cmpne	r2, #1
 80020f0:	d901      	bls.n	80020f6 <HAL_GPIO_Init+0x1e6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f2:	2b12      	cmp	r3, #18
 80020f4:	d114      	bne.n	8002120 <HAL_GPIO_Init+0x210>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80020f6:	68f3      	ldr	r3, [r6, #12]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	f63f af7d 	bhi.w	8001ff8 <HAL_GPIO_Init+0xe8>
        temp = GPIOx->OSPEEDR; 
 80020fe:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002100:	ea09 0202 	and.w	r2, r9, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8002104:	68f3      	ldr	r3, [r6, #12]
 8002106:	fa03 f30a 	lsl.w	r3, r3, sl
 800210a:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 800210c:	60bb      	str	r3, [r7, #8]
        temp = GPIOx->OTYPER;
 800210e:	687a      	ldr	r2, [r7, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002114:	6873      	ldr	r3, [r6, #4]
 8002116:	f3c3 1500 	ubfx	r5, r3, #4, #1
 800211a:	40a5      	lsls	r5, r4
 800211c:	4315      	orrs	r5, r2
        GPIOx->OTYPER = temp;
 800211e:	607d      	str	r5, [r7, #4]
      temp = GPIOx->PUPDR;
 8002120:	68fb      	ldr	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002122:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002126:	68b3      	ldr	r3, [r6, #8]
 8002128:	fa03 f30a 	lsl.w	r3, r3, sl
 800212c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8002130:	60fb      	str	r3, [r7, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002132:	6873      	ldr	r3, [r6, #4]
 8002134:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002138:	d09a      	beq.n	8002070 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_GPIO_Init+0x2d4>)
 800213c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800214e:	08a2      	lsrs	r2, r4, #2
 8002150:	1c91      	adds	r1, r2, #2
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8002154:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002158:	f004 0303 	and.w	r3, r4, #3
 800215c:	0099      	lsls	r1, r3, #2
 800215e:	230f      	movs	r3, #15
 8002160:	408b      	lsls	r3, r1
 8002162:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_GPIO_Init+0x2ac>)
 8002168:	429f      	cmp	r7, r3
 800216a:	f43f af4c 	beq.w	8002006 <HAL_GPIO_Init+0xf6>
 800216e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002172:	429f      	cmp	r7, r3
 8002174:	d038      	beq.n	80021e8 <HAL_GPIO_Init+0x2d8>
 8002176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800217a:	429f      	cmp	r7, r3
 800217c:	d036      	beq.n	80021ec <HAL_GPIO_Init+0x2dc>
 800217e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002182:	429f      	cmp	r7, r3
 8002184:	d034      	beq.n	80021f0 <HAL_GPIO_Init+0x2e0>
 8002186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800218a:	429f      	cmp	r7, r3
 800218c:	d032      	beq.n	80021f4 <HAL_GPIO_Init+0x2e4>
 800218e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002192:	429f      	cmp	r7, r3
 8002194:	d030      	beq.n	80021f8 <HAL_GPIO_Init+0x2e8>
 8002196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800219a:	429f      	cmp	r7, r3
 800219c:	d02e      	beq.n	80021fc <HAL_GPIO_Init+0x2ec>
 800219e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a2:	429f      	cmp	r7, r3
 80021a4:	d02c      	beq.n	8002200 <HAL_GPIO_Init+0x2f0>
 80021a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021aa:	429f      	cmp	r7, r3
 80021ac:	d02a      	beq.n	8002204 <HAL_GPIO_Init+0x2f4>
 80021ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b2:	429f      	cmp	r7, r3
 80021b4:	f43f af25 	beq.w	8002002 <HAL_GPIO_Init+0xf2>
 80021b8:	230a      	movs	r3, #10
 80021ba:	e725      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40021400 	.word	0x40021400
 80021c8:	40021c00 	.word	0x40021c00
 80021cc:	40022400 	.word	0x40022400
 80021d0:	40022800 	.word	0x40022800
 80021d4:	0801a7f0 	.word	0x0801a7f0
 80021d8:	10110000 	.word	0x10110000
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40013c00 	.word	0x40013c00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	2301      	movs	r3, #1
 80021ea:	e70d      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e70b      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021f0:	2303      	movs	r3, #3
 80021f2:	e709      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e707      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021f8:	2305      	movs	r3, #5
 80021fa:	e705      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021fc:	2306      	movs	r3, #6
 80021fe:	e703      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 8002200:	2307      	movs	r3, #7
 8002202:	e701      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 8002204:	2308      	movs	r3, #8
 8002206:	e6ff      	b.n	8002008 <HAL_GPIO_Init+0xf8>
      }
    }
  }
}
 8002208:	b002      	add	sp, #8
 800220a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800220e:	bf00      	nop

08002210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4604      	mov	r4, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002214:	460d      	mov	r5, r1
 8002216:	b121      	cbz	r1, 8002222 <HAL_GPIO_ReadPin+0x12>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002218:	6923      	ldr	r3, [r4, #16]
 800221a:	421d      	tst	r5, r3
 800221c:	d007      	beq.n	800222e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800221e:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002220:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002222:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002226:	4803      	ldr	r0, [pc, #12]	; (8002234 <HAL_GPIO_ReadPin+0x24>)
 8002228:	f012 fe7e 	bl	8014f28 <assert_failed>
 800222c:	e7f4      	b.n	8002218 <HAL_GPIO_ReadPin+0x8>
    bitstatus = GPIO_PIN_RESET;
 800222e:	2000      	movs	r0, #0
 8002230:	e7f6      	b.n	8002220 <HAL_GPIO_ReadPin+0x10>
 8002232:	bf00      	nop
 8002234:	0801a7f0 	.word	0x0801a7f0

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	4605      	mov	r5, r0
 800223c:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800223e:	460e      	mov	r6, r1
 8002240:	b121      	cbz	r1, 800224c <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002242:	2c01      	cmp	r4, #1
 8002244:	d808      	bhi.n	8002258 <HAL_GPIO_WritePin+0x20>

  if(PinState != GPIO_PIN_RESET)
 8002246:	b16c      	cbz	r4, 8002264 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002248:	61ae      	str	r6, [r5, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800224a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800224c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002250:	4806      	ldr	r0, [pc, #24]	; (800226c <HAL_GPIO_WritePin+0x34>)
 8002252:	f012 fe69 	bl	8014f28 <assert_failed>
 8002256:	e7f4      	b.n	8002242 <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002258:	f240 119b 	movw	r1, #411	; 0x19b
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <HAL_GPIO_WritePin+0x34>)
 800225e:	f012 fe63 	bl	8014f28 <assert_failed>
 8002262:	e7f0      	b.n	8002246 <HAL_GPIO_WritePin+0xe>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002264:	0436      	lsls	r6, r6, #16
 8002266:	61ae      	str	r6, [r5, #24]
}
 8002268:	e7ef      	b.n	800224a <HAL_GPIO_WritePin+0x12>
 800226a:	bf00      	nop
 800226c:	0801a7f0 	.word	0x0801a7f0

08002270 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002270:	4770      	bx	lr
	...

08002274 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002274:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4203      	tst	r3, r0
 800227c:	d100      	bne.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800227e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002280:	4b02      	ldr	r3, [pc, #8]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002282:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002284:	f7ff fff4 	bl	8002270 <HAL_GPIO_EXTI_Callback>
}
 8002288:	e7f9      	b.n	800227e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800228a:	bf00      	nop
 800228c:	40013c00 	.word	0x40013c00

08002290 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002292:	6806      	ldr	r6, [r0, #0]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002294:	6a34      	ldr	r4, [r6, #32]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002296:	f004 070f 	and.w	r7, r4, #15
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800229a:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229e:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d000      	beq.n	80022a8 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 80022a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022a8:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80022aa:	2c00      	cmp	r4, #0
 80022ac:	d0fb      	beq.n	80022a6 <HCD_RXQLVL_IRQHandler+0x16>
 80022ae:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80022b2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80022b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80022b8:	2900      	cmp	r1, #0
 80022ba:	d0f4      	beq.n	80022a6 <HCD_RXQLVL_IRQHandler+0x16>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80022bc:	4622      	mov	r2, r4
 80022be:	4630      	mov	r0, r6
 80022c0:	f006 fb5f 	bl	8008982 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022c4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80022c8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80022cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022ce:	4422      	add	r2, r4
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022d4:	4422      	add	r2, r4
 80022d6:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80022d8:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 80022dc:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HCD_RXQLVL_IRQHandler+0x80>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0de      	beq.n	80022a6 <HCD_RXQLVL_IRQHandler+0x16>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022e8:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022f4:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80022f8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80022fc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002300:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002304:	f082 0201 	eor.w	r2, r2, #1
 8002308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800230c:	e7cb      	b.n	80022a6 <HCD_RXQLVL_IRQHandler+0x16>
 800230e:	bf00      	nop
 8002310:	1ff80000 	.word	0x1ff80000

08002314 <HAL_HCD_HC_Init>:
{
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002316:	b085      	sub	sp, #20
 8002318:	4604      	mov	r4, r0
 800231a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 800231e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8002322:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8002326:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
 800232a:	2801      	cmp	r0, #1
 800232c:	d03b      	beq.n	80023a6 <HAL_HCD_HC_Init+0x92>
 800232e:	2001      	movs	r0, #1
 8002330:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002334:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8002338:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800233c:	f04f 0c00 	mov.w	ip, #0
 8002340:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002344:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8002348:	f8a0 7040 	strh.w	r7, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 800234c:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002350:	f880 603f 	strb.w	r6, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002354:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 8002358:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 800235c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002360:	d118      	bne.n	8002394 <HAL_HCD_HC_Init+0x80>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002362:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8002366:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800236a:	f04f 0c00 	mov.w	ip, #0
 800236e:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8002372:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8002376:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800237a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 800237e:	9702      	str	r7, [sp, #8]
 8002380:	9601      	str	r6, [sp, #4]
 8002382:	9500      	str	r5, [sp, #0]
 8002384:	6820      	ldr	r0, [r4, #0]
 8002386:	f006 fbfb 	bl	8008b80 <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 800238a:	2300      	movs	r3, #0
 800238c:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
}
 8002390:	b005      	add	sp, #20
 8002392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002394:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8002398:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800239c:	f04f 0c01 	mov.w	ip, #1
 80023a0:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
 80023a4:	e7e5      	b.n	8002372 <HAL_HCD_HC_Init+0x5e>
  __HAL_LOCK(hhcd);
 80023a6:	2002      	movs	r0, #2
 80023a8:	e7f2      	b.n	8002390 <HAL_HCD_HC_Init+0x7c>

080023aa <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 80023aa:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d00b      	beq.n	80023ca <HAL_HCD_HC_Halt+0x20>
{
 80023b2:	b510      	push	{r4, lr}
 80023b4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80023b6:	2301      	movs	r3, #1
 80023b8:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023bc:	6800      	ldr	r0, [r0, #0]
 80023be:	f006 fc68 	bl	8008c92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 80023c8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80023ca:	2002      	movs	r0, #2
}
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_HCD_Init>:
  if (hhcd == NULL)
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d053      	beq.n	800247c <HAL_HCD_Init+0xac>
{
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	4604      	mov	r4, r0
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	4a28      	ldr	r2, [pc, #160]	; (8002480 <HAL_HCD_Init+0xb0>)
 80023de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e2:	bf18      	it	ne
 80023e4:	4293      	cmpne	r3, r2
 80023e6:	d13e      	bne.n	8002466 <HAL_HCD_Init+0x96>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023e8:	f894 32b9 	ldrb.w	r3, [r4, #697]	; 0x2b9
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03f      	beq.n	8002470 <HAL_HCD_Init+0xa0>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80023f0:	2303      	movs	r3, #3
 80023f2:	f884 32b9 	strb.w	r3, [r4, #697]	; 0x2b9
  __HAL_HCD_DISABLE(hhcd);
 80023f6:	6820      	ldr	r0, [r4, #0]
 80023f8:	f006 fa68 	bl	80088cc <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80023fc:	46a4      	mov	ip, r4
 80023fe:	f85c 6b10 	ldr.w	r6, [ip], #16
 8002402:	46ee      	mov	lr, sp
 8002404:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002408:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800240c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002410:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002414:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002418:	e88e 0003 	stmia.w	lr, {r0, r1}
 800241c:	1d25      	adds	r5, r4, #4
 800241e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002422:	4630      	mov	r0, r6
 8002424:	f006 fa0e 	bl	8008844 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002428:	2101      	movs	r1, #1
 800242a:	6820      	ldr	r0, [r4, #0]
 800242c:	f006 fa54 	bl	80088d8 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002430:	46a4      	mov	ip, r4
 8002432:	f85c 6b10 	ldr.w	r6, [ip], #16
 8002436:	46ee      	mov	lr, sp
 8002438:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800243c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002440:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002444:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002448:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800244c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8002450:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002454:	4630      	mov	r0, r6
 8002456:	f006 fb0d 	bl	8008a74 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800245a:	2301      	movs	r3, #1
 800245c:	f884 32b9 	strb.w	r3, [r4, #697]	; 0x2b9
  return HAL_OK;
 8002460:	2000      	movs	r0, #0
}
 8002462:	b00a      	add	sp, #40	; 0x28
 8002464:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8002466:	217c      	movs	r1, #124	; 0x7c
 8002468:	4806      	ldr	r0, [pc, #24]	; (8002484 <HAL_HCD_Init+0xb4>)
 800246a:	f012 fd5d 	bl	8014f28 <assert_failed>
 800246e:	e7bb      	b.n	80023e8 <HAL_HCD_Init+0x18>
    hhcd->Lock = HAL_UNLOCKED;
 8002470:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8002474:	4620      	mov	r0, r4
 8002476:	f016 f8f5 	bl	8018664 <HAL_HCD_MspInit>
 800247a:	e7b9      	b.n	80023f0 <HAL_HCD_Init+0x20>
    return HAL_ERROR;
 800247c:	2001      	movs	r0, #1
}
 800247e:	4770      	bx	lr
 8002480:	40040000 	.word	0x40040000
 8002484:	0801a82c 	.word	0x0801a82c

08002488 <HAL_HCD_HC_SubmitRequest>:
{
 8002488:	b538      	push	{r3, r4, r5, lr}
 800248a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800248e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002492:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8002496:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800249a:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800249e:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  if (token == 0U)
 80024a2:	b974      	cbnz	r4, 80024c2 <HAL_HCD_HC_SubmitRequest+0x3a>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80024a4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80024a8:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80024ac:	f04f 0e03 	mov.w	lr, #3
 80024b0:	f88c e042 	strb.w	lr, [ip, #66]	; 0x42
  switch (ep_type)
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	f200 8094 	bhi.w	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
 80024ba:	e8df f003 	tbb	[pc, r3]
 80024be:	8b0b      	.short	0x8b0b
 80024c0:	5d2f      	.short	0x5d2f
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80024c6:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80024ca:	f04f 0e02 	mov.w	lr, #2
 80024ce:	f88c e042 	strb.w	lr, [ip, #66]	; 0x42
 80024d2:	e7ef      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x2c>
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024d4:	2c01      	cmp	r4, #1
 80024d6:	bf08      	it	eq
 80024d8:	2a00      	cmpeq	r2, #0
 80024da:	f040 8082 	bne.w	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
        if (length == 0U)
 80024de:	b935      	cbnz	r5, 80024ee <HAL_HCD_HC_SubmitRequest+0x66>
          hhcd->hc[ch_num].toggle_out = 1U;
 80024e0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80024e4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024ee:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80024f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80024f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024fa:	b93b      	cbnz	r3, 800250c <HAL_HCD_HC_SubmitRequest+0x84>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024fc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002500:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250a:	e06a      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002510:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800251a:	e062      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
      if (direction == 0U)
 800251c:	b9aa      	cbnz	r2, 800254a <HAL_HCD_HC_SubmitRequest+0xc2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800251e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002522:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800252a:	b933      	cbnz	r3, 800253a <HAL_HCD_HC_SubmitRequest+0xb2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800252c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002530:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002538:	e053      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800253a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800253e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002548:	e04b      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800254a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800254e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002556:	b93b      	cbnz	r3, 8002568 <HAL_HCD_HC_SubmitRequest+0xe0>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002558:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800255c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002566:	e03c      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002568:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800256c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002570:	2202      	movs	r2, #2
 8002572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002576:	e034      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
      if (direction == 0U)
 8002578:	b9aa      	cbnz	r2, 80025a6 <HAL_HCD_HC_SubmitRequest+0x11e>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800257a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800257e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002586:	b933      	cbnz	r3, 8002596 <HAL_HCD_HC_SubmitRequest+0x10e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002588:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800258c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002594:	e025      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002596:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800259a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a4:	e01d      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025a6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025aa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b2:	b93b      	cbnz	r3, 80025c4 <HAL_HCD_HC_SubmitRequest+0x13c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025b4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025b8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c2:	e00e      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025c4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025c8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d2:	e006      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025d4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025d8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025e2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025e6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025ea:	9a05      	ldr	r2, [sp, #20]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80025ee:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80025f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].ch_num = ch_num;
 80025f8:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 80025fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002600:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002604:	00c9      	lsls	r1, r1, #3
 8002606:	3138      	adds	r1, #56	; 0x38
 8002608:	7c02      	ldrb	r2, [r0, #16]
 800260a:	4401      	add	r1, r0
 800260c:	6800      	ldr	r0, [r0, #0]
 800260e:	f006 fbbf 	bl	8008d90 <USB_HC_StartXfer>
}
 8002612:	bd38      	pop	{r3, r4, r5, pc}

08002614 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002614:	b530      	push	{r4, r5, lr}
 8002616:	b083      	sub	sp, #12
 8002618:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800261a:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800261c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002620:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8002622:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002626:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002628:	9b00      	ldr	r3, [sp, #0]
 800262a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800262e:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002630:	9b01      	ldr	r3, [sp, #4]
 8002632:	f013 0f02 	tst.w	r3, #2
 8002636:	d007      	beq.n	8002648 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002638:	9b01      	ldr	r3, [sp, #4]
 800263a:	f013 0f01 	tst.w	r3, #1
 800263e:	d128      	bne.n	8002692 <HCD_Port_IRQHandler+0x7e>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002640:	9b00      	ldr	r3, [sp, #0]
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002648:	9b01      	ldr	r3, [sp, #4]
 800264a:	f013 0f08 	tst.w	r3, #8
 800264e:	d013      	beq.n	8002678 <HCD_Port_IRQHandler+0x64>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002650:	9b00      	ldr	r3, [sp, #0]
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002658:	9b01      	ldr	r3, [sp, #4]
 800265a:	f013 0f04 	tst.w	r3, #4
 800265e:	d034      	beq.n	80026ca <HCD_Port_IRQHandler+0xb6>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002660:	69a3      	ldr	r3, [r4, #24]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d01c      	beq.n	80026a0 <HCD_Port_IRQHandler+0x8c>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002666:	68e3      	ldr	r3, [r4, #12]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d029      	beq.n	80026c0 <HCD_Port_IRQHandler+0xac>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800266c:	4620      	mov	r0, r4
 800266e:	f016 f8f8 	bl	8018862 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002672:	4620      	mov	r0, r4
 8002674:	f016 f8e8 	bl	8018848 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002678:	9b01      	ldr	r3, [sp, #4]
 800267a:	f013 0f20 	tst.w	r3, #32
 800267e:	d003      	beq.n	8002688 <HCD_Port_IRQHandler+0x74>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002680:	9b00      	ldr	r3, [sp, #0]
 8002682:	f043 0320 	orr.w	r3, r3, #32
 8002686:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002688:	9b00      	ldr	r3, [sp, #0]
 800268a:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 800268e:	b003      	add	sp, #12
 8002690:	bd30      	pop	{r4, r5, pc}
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002692:	69ab      	ldr	r3, [r5, #24]
 8002694:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002698:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 800269a:	f016 f8d5 	bl	8018848 <HAL_HCD_Connect_Callback>
 800269e:	e7cf      	b.n	8002640 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80026a0:	9b01      	ldr	r3, [sp, #4]
 80026a2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80026a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026aa:	d004      	beq.n	80026b6 <HCD_Port_IRQHandler+0xa2>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026ac:	2101      	movs	r1, #1
 80026ae:	6820      	ldr	r0, [r4, #0]
 80026b0:	f006 f97e 	bl	80089b0 <USB_InitFSLSPClkSel>
 80026b4:	e7da      	b.n	800266c <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80026b6:	2102      	movs	r1, #2
 80026b8:	6820      	ldr	r0, [r4, #0]
 80026ba:	f006 f979 	bl	80089b0 <USB_InitFSLSPClkSel>
 80026be:	e7d5      	b.n	800266c <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 80026c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80026c4:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 80026c8:	e7d0      	b.n	800266c <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 80026ca:	4620      	mov	r0, r4
 80026cc:	f016 f8cf 	bl	801886e <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80026d0:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80026d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026d8:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	6993      	ldr	r3, [r2, #24]
 80026e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026e4:	6193      	str	r3, [r2, #24]
 80026e6:	e7c7      	b.n	8002678 <HCD_Port_IRQHandler+0x64>

080026e8 <HCD_HC_IN_IRQHandler>:
{
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	4606      	mov	r6, r0
 80026ec:	460c      	mov	r4, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026ee:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026f0:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 80026f4:	f507 65a0 	add.w	r5, r7, #1280	; 0x500
 80026f8:	68ab      	ldr	r3, [r5, #8]
 80026fa:	f013 0f04 	tst.w	r3, #4
 80026fe:	d037      	beq.n	8002770 <HCD_HC_IN_IRQHandler+0x88>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002700:	2304      	movs	r3, #4
 8002702:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002704:	68eb      	ldr	r3, [r5, #12]
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	60eb      	str	r3, [r5, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800270c:	68ab      	ldr	r3, [r5, #8]
 800270e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002712:	d163      	bne.n	80027dc <HCD_HC_IN_IRQHandler+0xf4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002714:	68ab      	ldr	r3, [r5, #8]
 8002716:	f013 0f01 	tst.w	r3, #1
 800271a:	f000 8088 	beq.w	800282e <HCD_HC_IN_IRQHandler+0x146>
    if (hhcd->Init.dma_enable != 0U)
 800271e:	6933      	ldr	r3, [r6, #16]
 8002720:	b14b      	cbz	r3, 8002736 <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002722:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002726:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800272a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800272c:	6929      	ldr	r1, [r5, #16]
 800272e:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002732:	1a52      	subs	r2, r2, r1
 8002734:	64da      	str	r2, [r3, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8002736:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800273a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800273e:	2201      	movs	r2, #1
 8002740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002744:	2100      	movs	r1, #0
 8002746:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002748:	60aa      	str	r2, [r5, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800274a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800274e:	2b02      	cmp	r3, #2
 8002750:	bf18      	it	ne
 8002752:	428b      	cmpne	r3, r1
 8002754:	d04e      	beq.n	80027f4 <HCD_HC_IN_IRQHandler+0x10c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002756:	2b03      	cmp	r3, #3
 8002758:	d057      	beq.n	800280a <HCD_HC_IN_IRQHandler+0x122>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800275a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800275e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002762:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002766:	f082 0201 	eor.w	r2, r2, #1
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002770:	68ab      	ldr	r3, [r5, #8]
 8002772:	f013 0f20 	tst.w	r3, #32
 8002776:	d002      	beq.n	800277e <HCD_HC_IN_IRQHandler+0x96>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002778:	2320      	movs	r3, #32
 800277a:	60ab      	str	r3, [r5, #8]
 800277c:	e7c6      	b.n	800270c <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800277e:	68ab      	ldr	r3, [r5, #8]
 8002780:	f013 0f08 	tst.w	r3, #8
 8002784:	d117      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0xce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002786:	68ab      	ldr	r3, [r5, #8]
 8002788:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800278c:	d0be      	beq.n	800270c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278e:	68eb      	ldr	r3, [r5, #12]
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002796:	6800      	ldr	r0, [r0, #0]
 8002798:	f006 fa7b 	bl	8008c92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800279c:	2310      	movs	r3, #16
 800279e:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80027a4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80027a8:	2208      	movs	r2, #8
 80027aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b2:	60ab      	str	r3, [r5, #8]
 80027b4:	e7aa      	b.n	800270c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b6:	68eb      	ldr	r3, [r5, #12]
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	60eb      	str	r3, [r5, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80027be:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80027c2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80027c6:	2205      	movs	r2, #5
 80027c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027cc:	2310      	movs	r3, #16
 80027ce:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027d0:	2308      	movs	r3, #8
 80027d2:	60ab      	str	r3, [r5, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	6800      	ldr	r0, [r0, #0]
 80027d6:	f006 fa5c 	bl	8008c92 <USB_HC_Halt>
 80027da:	e797      	b.n	800270c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027dc:	68eb      	ldr	r3, [r5, #12]
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	4621      	mov	r1, r4
 80027e6:	6830      	ldr	r0, [r6, #0]
 80027e8:	f006 fa53 	bl	8008c92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f0:	60ab      	str	r3, [r5, #8]
 80027f2:	e7bc      	b.n	800276e <HCD_HC_IN_IRQHandler+0x86>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f4:	68eb      	ldr	r3, [r5, #12]
 80027f6:	f043 0302 	orr.w	r3, r3, #2
 80027fa:	60eb      	str	r3, [r5, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fc:	4621      	mov	r1, r4
 80027fe:	6830      	ldr	r0, [r6, #0]
 8002800:	f006 fa47 	bl	8008c92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002804:	2310      	movs	r3, #16
 8002806:	60ab      	str	r3, [r5, #8]
 8002808:	e7a7      	b.n	800275a <HCD_HC_IN_IRQHandler+0x72>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800280a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800280e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002812:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002816:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800281a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800281e:	2201      	movs	r2, #1
 8002820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002824:	4621      	mov	r1, r4
 8002826:	4630      	mov	r0, r6
 8002828:	f016 f81a 	bl	8018860 <HAL_HCD_HC_NotifyURBChange_Callback>
 800282c:	e795      	b.n	800275a <HCD_HC_IN_IRQHandler+0x72>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800282e:	68ab      	ldr	r3, [r5, #8]
 8002830:	f013 0f02 	tst.w	r3, #2
 8002834:	d05f      	beq.n	80028f6 <HCD_HC_IN_IRQHandler+0x20e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002836:	68eb      	ldr	r3, [r5, #12]
 8002838:	f023 0302 	bic.w	r3, r3, #2
 800283c:	60eb      	str	r3, [r5, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800283e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002842:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800284a:	2b01      	cmp	r3, #1
 800284c:	d01d      	beq.n	800288a <HCD_HC_IN_IRQHandler+0x1a2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800284e:	2b05      	cmp	r3, #5
 8002850:	d02f      	beq.n	80028b2 <HCD_HC_IN_IRQHandler+0x1ca>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002852:	2b08      	cmp	r3, #8
 8002854:	bf18      	it	ne
 8002856:	2b06      	cmpne	r3, #6
 8002858:	d13b      	bne.n	80028d2 <HCD_HC_IN_IRQHandler+0x1ea>
      hhcd->hc[ch_num].ErrCnt++;
 800285a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800285e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8002862:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002864:	3301      	adds	r3, #1
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002868:	2b03      	cmp	r3, #3
 800286a:	d92a      	bls.n	80028c2 <HCD_HC_IN_IRQHandler+0x1da>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800286c:	4613      	mov	r3, r2
 800286e:	2200      	movs	r2, #0
 8002870:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002872:	2204      	movs	r2, #4
 8002874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002878:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800287c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002884:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002888:	e006      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1b0>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800288a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800288e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002892:	2201      	movs	r2, #1
 8002894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002898:	2302      	movs	r3, #2
 800289a:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800289c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028a0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80028a4:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80028a8:	4621      	mov	r1, r4
 80028aa:	4630      	mov	r0, r6
 80028ac:	f015 ffd8 	bl	8018860 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028b0:	e75d      	b.n	800276e <HCD_HC_IN_IRQHandler+0x86>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028b6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80028ba:	2205      	movs	r2, #5
 80028bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80028c0:	e7ea      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1b0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028c6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80028d0:	e7d2      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x190>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d1e0      	bne.n	8002898 <HCD_HC_IN_IRQHandler+0x1b0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028da:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028e4:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028f0:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80028f4:	e7d0      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1b0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028f6:	68ab      	ldr	r3, [r5, #8]
 80028f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80028fc:	d11b      	bne.n	8002936 <HCD_HC_IN_IRQHandler+0x24e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028fe:	68ab      	ldr	r3, [r5, #8]
 8002900:	f013 0f10 	tst.w	r3, #16
 8002904:	f43f af33 	beq.w	800276e <HCD_HC_IN_IRQHandler+0x86>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002908:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800290c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002914:	2b03      	cmp	r3, #3
 8002916:	d027      	beq.n	8002968 <HCD_HC_IN_IRQHandler+0x280>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002918:	2b02      	cmp	r3, #2
 800291a:	bf18      	it	ne
 800291c:	2b00      	cmpne	r3, #0
 800291e:	d107      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0x248>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002920:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002924:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002928:	2200      	movs	r2, #0
 800292a:	659a      	str	r2, [r3, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 800292c:	6933      	ldr	r3, [r6, #16]
 800292e:	b353      	cbz	r3, 8002986 <HCD_HC_IN_IRQHandler+0x29e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002930:	2310      	movs	r3, #16
 8002932:	60ab      	str	r3, [r5, #8]
}
 8002934:	e71b      	b.n	800276e <HCD_HC_IN_IRQHandler+0x86>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002936:	68eb      	ldr	r3, [r5, #12]
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	60eb      	str	r3, [r5, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800293e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002942:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002946:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002948:	3201      	adds	r2, #1
 800294a:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 800294c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002950:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002954:	2206      	movs	r2, #6
 8002956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295a:	4621      	mov	r1, r4
 800295c:	6830      	ldr	r0, [r6, #0]
 800295e:	f006 f998 	bl	8008c92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	60ab      	str	r3, [r5, #8]
 8002966:	e702      	b.n	800276e <HCD_HC_IN_IRQHandler+0x86>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002968:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800296c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002970:	2200      	movs	r2, #0
 8002972:	659a      	str	r2, [r3, #88]	; 0x58
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002974:	68eb      	ldr	r3, [r5, #12]
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	60eb      	str	r3, [r5, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297c:	4621      	mov	r1, r4
 800297e:	6830      	ldr	r0, [r6, #0]
 8002980:	f006 f987 	bl	8008c92 <USB_HC_Halt>
 8002984:	e7d4      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x248>
        hhcd->hc[ch_num].state = HC_NAK;
 8002986:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800298a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800298e:	2203      	movs	r2, #3
 8002990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002994:	68eb      	ldr	r3, [r5, #12]
 8002996:	f043 0302 	orr.w	r3, r3, #2
 800299a:	60eb      	str	r3, [r5, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299c:	4621      	mov	r1, r4
 800299e:	6830      	ldr	r0, [r6, #0]
 80029a0:	f006 f977 	bl	8008c92 <USB_HC_Halt>
 80029a4:	e7c4      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x248>

080029a6 <HCD_HC_OUT_IRQHandler>:
{
 80029a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a8:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80029ae:	f503 65a0 	add.w	r5, r3, #1280	; 0x500
 80029b2:	68aa      	ldr	r2, [r5, #8]
 80029b4:	f012 0f04 	tst.w	r2, #4
 80029b8:	d006      	beq.n	80029c8 <HCD_HC_OUT_IRQHandler+0x22>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029ba:	2304      	movs	r3, #4
 80029bc:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029be:	68eb      	ldr	r3, [r5, #12]
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	60eb      	str	r3, [r5, #12]
}
 80029c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c8:	4606      	mov	r6, r0
 80029ca:	460c      	mov	r4, r1
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029cc:	68aa      	ldr	r2, [r5, #8]
 80029ce:	f012 0f20 	tst.w	r2, #32
 80029d2:	d01e      	beq.n	8002a12 <HCD_HC_OUT_IRQHandler+0x6c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029d4:	2320      	movs	r3, #32
 80029d6:	60ab      	str	r3, [r5, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029d8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80029dc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d1ee      	bne.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].do_ping = 0U;
 80029e8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80029ec:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029f6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80029fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a04:	68eb      	ldr	r3, [r5, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60eb      	str	r3, [r5, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0a:	6800      	ldr	r0, [r0, #0]
 8002a0c:	f006 f941 	bl	8008c92 <USB_HC_Halt>
 8002a10:	e7d9      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a12:	68aa      	ldr	r2, [r5, #8]
 8002a14:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a18:	d134      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0xde>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a1a:	68aa      	ldr	r2, [r5, #8]
 8002a1c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002a20:	d14a      	bne.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x112>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a22:	68aa      	ldr	r2, [r5, #8]
 8002a24:	f012 0f01 	tst.w	r2, #1
 8002a28:	d151      	bne.n	8002ace <HCD_HC_OUT_IRQHandler+0x128>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a2a:	68aa      	ldr	r2, [r5, #8]
 8002a2c:	f012 0f08 	tst.w	r2, #8
 8002a30:	d163      	bne.n	8002afa <HCD_HC_OUT_IRQHandler+0x154>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a32:	68aa      	ldr	r2, [r5, #8]
 8002a34:	f012 0f10 	tst.w	r2, #16
 8002a38:	d070      	beq.n	8002b1c <HCD_HC_OUT_IRQHandler+0x176>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a3a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a3e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002a42:	2200      	movs	r2, #0
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8002a46:	2203      	movs	r2, #3
 8002a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b96b      	cbnz	r3, 8002a6e <HCD_HC_OUT_IRQHandler+0xc8>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002a52:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a56:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	b933      	cbnz	r3, 8002a6e <HCD_HC_OUT_IRQHandler+0xc8>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a60:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a64:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a6e:	68eb      	ldr	r3, [r5, #12]
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a76:	4621      	mov	r1, r4
 8002a78:	6830      	ldr	r0, [r6, #0]
 8002a7a:	f006 f90a 	bl	8008c92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a7e:	2310      	movs	r3, #16
 8002a80:	60ab      	str	r3, [r5, #8]
 8002a82:	e7a0      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a84:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a88:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a98:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a9c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa4:	68eb      	ldr	r3, [r5, #12]
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aac:	6800      	ldr	r0, [r0, #0]
 8002aae:	f006 f8f0 	bl	8008c92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ab2:	2340      	movs	r3, #64	; 0x40
 8002ab4:	60ab      	str	r3, [r5, #8]
 8002ab6:	e786      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab8:	68eb      	ldr	r3, [r5, #12]
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac0:	6800      	ldr	r0, [r0, #0]
 8002ac2:	f006 f8e6 	bl	8008c92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aca:	60ab      	str	r3, [r5, #8]
 8002acc:	e77b      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ace:	008f      	lsls	r7, r1, #2
 8002ad0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002ad4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002adc:	68eb      	ldr	r3, [r5, #12]
 8002ade:	f043 0302 	orr.w	r3, r3, #2
 8002ae2:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae4:	6800      	ldr	r0, [r0, #0]
 8002ae6:	f006 f8d4 	bl	8008c92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002aea:	2301      	movs	r3, #1
 8002aec:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aee:	443c      	add	r4, r7
 8002af0:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8002af4:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002af8:	e765      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002afa:	2308      	movs	r3, #8
 8002afc:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002afe:	68eb      	ldr	r3, [r5, #12]
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b06:	6800      	ldr	r0, [r0, #0]
 8002b08:	f006 f8c3 	bl	8008c92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002b0c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002b10:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8002b14:	2305      	movs	r3, #5
 8002b16:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002b1a:	e754      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b1c:	68aa      	ldr	r2, [r5, #8]
 8002b1e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b22:	d135      	bne.n	8002b90 <HCD_HC_OUT_IRQHandler+0x1ea>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b24:	68aa      	ldr	r2, [r5, #8]
 8002b26:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b2a:	d142      	bne.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x20c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b2c:	68aa      	ldr	r2, [r5, #8]
 8002b2e:	f012 0f02 	tst.w	r2, #2
 8002b32:	f43f af48 	beq.w	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b36:	68ea      	ldr	r2, [r5, #12]
 8002b38:	f022 0202 	bic.w	r2, r2, #2
 8002b3c:	60ea      	str	r2, [r5, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b3e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002b42:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002b46:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 8002b4a:	2a01      	cmp	r2, #1
 8002b4c:	d045      	beq.n	8002bda <HCD_HC_OUT_IRQHandler+0x234>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b4e:	2a03      	cmp	r2, #3
 8002b50:	d059      	beq.n	8002c06 <HCD_HC_OUT_IRQHandler+0x260>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b52:	2a04      	cmp	r2, #4
 8002b54:	d06b      	beq.n	8002c2e <HCD_HC_OUT_IRQHandler+0x288>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b56:	2a05      	cmp	r2, #5
 8002b58:	d070      	beq.n	8002c3c <HCD_HC_OUT_IRQHandler+0x296>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b5a:	2a08      	cmp	r2, #8
 8002b5c:	bf18      	it	ne
 8002b5e:	2a06      	cmpne	r2, #6
 8002b60:	d158      	bne.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
      hhcd->hc[ch_num].ErrCnt++;
 8002b62:	2128      	movs	r1, #40	; 0x28
 8002b64:	fb01 0104 	mla	r1, r1, r4, r0
 8002b68:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002b6a:	3201      	adds	r2, #1
 8002b6c:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b6e:	2a03      	cmp	r2, #3
 8002b70:	d96a      	bls.n	8002c48 <HCD_HC_OUT_IRQHandler+0x2a2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b72:	460a      	mov	r2, r1
 8002b74:	2100      	movs	r1, #0
 8002b76:	6591      	str	r1, [r2, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b78:	2104      	movs	r1, #4
 8002b7a:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b7e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b82:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8002b8e:	e041      	b.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b90:	68eb      	ldr	r3, [r5, #12]
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b98:	6800      	ldr	r0, [r0, #0]
 8002b9a:	f006 f87a 	bl	8008c92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b9e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002ba2:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	60ab      	str	r3, [r5, #8]
 8002bb0:	e709      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb2:	68eb      	ldr	r3, [r5, #12]
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bba:	6800      	ldr	r0, [r0, #0]
 8002bbc:	f006 f869 	bl	8008c92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc8:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002bce:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002bd8:	e6f5      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bda:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002bde:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002be6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bea:	3b02      	subs	r3, #2
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d810      	bhi.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bf2:	2328      	movs	r3, #40	; 0x28
 8002bf4:	fb03 0301 	mla	r3, r3, r1, r0
 8002bf8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8002bfc:	f082 0201 	eor.w	r2, r2, #1
 8002c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002c04:	e006      	b.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c06:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002c0a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c14:	2302      	movs	r3, #2
 8002c16:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c18:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002c1c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002c20:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8002c24:	4621      	mov	r1, r4
 8002c26:	4630      	mov	r0, r6
 8002c28:	f015 fe1a 	bl	8018860 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c2c:	e6cb      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c2e:	2328      	movs	r3, #40	; 0x28
 8002c30:	fb03 0301 	mla	r3, r3, r1, r0
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002c3a:	e7eb      	b.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c3c:	2328      	movs	r3, #40	; 0x28
 8002c3e:	fb03 0301 	mla	r3, r3, r1, r0
 8002c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002c46:	e7e5      	b.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c48:	2228      	movs	r2, #40	; 0x28
 8002c4a:	fb02 0204 	mla	r2, r2, r4, r0
 8002c4e:	2102      	movs	r1, #2
 8002c50:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8002c54:	e793      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x1d8>

08002c56 <HAL_HCD_IRQHandler>:
{
 8002c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c58:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c5a:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f005 fea3 	bl	80089a8 <USB_GetMode>
 8002c62:	2801      	cmp	r0, #1
 8002c64:	d000      	beq.n	8002c68 <HAL_HCD_IRQHandler+0x12>
}
 8002c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	f005 fe99 	bl	80089a0 <USB_ReadInterrupts>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d0f9      	beq.n	8002c66 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c72:	6820      	ldr	r0, [r4, #0]
 8002c74:	f005 fe94 	bl	80089a0 <USB_ReadInterrupts>
 8002c78:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002c7c:	d003      	beq.n	8002c86 <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c84:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c86:	6820      	ldr	r0, [r4, #0]
 8002c88:	f005 fe8a 	bl	80089a0 <USB_ReadInterrupts>
 8002c8c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002c90:	d003      	beq.n	8002c9a <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c98:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	f005 fe80 	bl	80089a0 <USB_ReadInterrupts>
 8002ca0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002ca4:	d003      	beq.n	8002cae <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cac:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002cae:	6820      	ldr	r0, [r4, #0]
 8002cb0:	f005 fe76 	bl	80089a0 <USB_ReadInterrupts>
 8002cb4:	f010 0f02 	tst.w	r0, #2
 8002cb8:	d002      	beq.n	8002cc0 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	f005 fe6d 	bl	80089a0 <USB_ReadInterrupts>
 8002cc6:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8002cca:	d125      	bne.n	8002d18 <HAL_HCD_IRQHandler+0xc2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ccc:	6820      	ldr	r0, [r4, #0]
 8002cce:	f005 fe67 	bl	80089a0 <USB_ReadInterrupts>
 8002cd2:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002cd6:	d131      	bne.n	8002d3c <HAL_HCD_IRQHandler+0xe6>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002cd8:	6820      	ldr	r0, [r4, #0]
 8002cda:	f005 fe61 	bl	80089a0 <USB_ReadInterrupts>
 8002cde:	f010 0f08 	tst.w	r0, #8
 8002ce2:	d12f      	bne.n	8002d44 <HAL_HCD_IRQHandler+0xee>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ce4:	6820      	ldr	r0, [r4, #0]
 8002ce6:	f005 fe5b 	bl	80089a0 <USB_ReadInterrupts>
 8002cea:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002cee:	d130      	bne.n	8002d52 <HAL_HCD_IRQHandler+0xfc>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	f005 fe55 	bl	80089a0 <USB_ReadInterrupts>
 8002cf6:	f010 0f10 	tst.w	r0, #16
 8002cfa:	d0b4      	beq.n	8002c66 <HAL_HCD_IRQHandler+0x10>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	6993      	ldr	r3, [r2, #24]
 8002d00:	f023 0310 	bic.w	r3, r3, #16
 8002d04:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff fac2 	bl	8002290 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	6993      	ldr	r3, [r2, #24]
 8002d10:	f043 0310 	orr.w	r3, r3, #16
 8002d14:	6193      	str	r3, [r2, #24]
 8002d16:	e7a6      	b.n	8002c66 <HAL_HCD_IRQHandler+0x10>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d18:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002d1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d20:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8002d24:	4620      	mov	r0, r4
 8002d26:	f015 fd95 	bl	8018854 <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	6820      	ldr	r0, [r4, #0]
 8002d2e:	f005 fe3f 	bl	80089b0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d38:	615a      	str	r2, [r3, #20]
 8002d3a:	e7c7      	b.n	8002ccc <HAL_HCD_IRQHandler+0x76>
      HCD_Port_IRQHandler(hhcd);
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff fc69 	bl	8002614 <HCD_Port_IRQHandler>
 8002d42:	e7c9      	b.n	8002cd8 <HAL_HCD_IRQHandler+0x82>
      HAL_HCD_SOF_Callback(hhcd);
 8002d44:	4620      	mov	r0, r4
 8002d46:	f015 fd79 	bl	801883c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	615a      	str	r2, [r3, #20]
 8002d50:	e7c8      	b.n	8002ce4 <HAL_HCD_IRQHandler+0x8e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	f005 ff98 	bl	8008c88 <USB_HC_ReadInterrupt>
 8002d58:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d5a:	2600      	movs	r6, #0
 8002d5c:	e004      	b.n	8002d68 <HAL_HCD_IRQHandler+0x112>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d5e:	b2f1      	uxtb	r1, r6
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7ff fe20 	bl	80029a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d66:	3601      	adds	r6, #1
 8002d68:	68a3      	ldr	r3, [r4, #8]
 8002d6a:	42b3      	cmp	r3, r6
 8002d6c:	d912      	bls.n	8002d94 <HAL_HCD_IRQHandler+0x13e>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d6e:	f006 030f 	and.w	r3, r6, #15
 8002d72:	fa27 f303 	lsr.w	r3, r7, r3
 8002d76:	f013 0f01 	tst.w	r3, #1
 8002d7a:	d0f4      	beq.n	8002d66 <HAL_HCD_IRQHandler+0x110>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d7c:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002d80:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002d84:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002d88:	d0e9      	beq.n	8002d5e <HAL_HCD_IRQHandler+0x108>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d8a:	b2f1      	uxtb	r1, r6
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7ff fcab 	bl	80026e8 <HCD_HC_IN_IRQHandler>
 8002d92:	e7e8      	b.n	8002d66 <HAL_HCD_IRQHandler+0x110>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9a:	615a      	str	r2, [r3, #20]
 8002d9c:	e7a8      	b.n	8002cf0 <HAL_HCD_IRQHandler+0x9a>

08002d9e <HAL_HCD_Start>:
{
 8002d9e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8002da0:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d00e      	beq.n	8002dc6 <HAL_HCD_Start+0x28>
 8002da8:	4604      	mov	r4, r0
 8002daa:	2501      	movs	r5, #1
 8002dac:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002db0:	6800      	ldr	r0, [r0, #0]
 8002db2:	f005 fd85 	bl	80088c0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002db6:	4629      	mov	r1, r5
 8002db8:	6820      	ldr	r0, [r4, #0]
 8002dba:	f005 fe37 	bl	8008a2c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8002dc4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8002dc6:	2002      	movs	r0, #2
 8002dc8:	e7fc      	b.n	8002dc4 <HAL_HCD_Start+0x26>

08002dca <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002dca:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d00b      	beq.n	8002dea <HAL_HCD_Stop+0x20>
{
 8002dd2:	b510      	push	{r4, lr}
 8002dd4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f006 f889 	bl	8008ef4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8002de8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002dea:	2002      	movs	r0, #2
}
 8002dec:	4770      	bx	lr

08002dee <HAL_HCD_ResetPort>:
{
 8002dee:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8002df0:	6800      	ldr	r0, [r0, #0]
 8002df2:	f005 fdfc 	bl	80089ee <USB_ResetPort>
}
 8002df6:	bd08      	pop	{r3, pc}

08002df8 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002df8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002dfc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8002e00:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8002e04:	4770      	bx	lr

08002e06 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002e06:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002e0a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8002e0e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8002e10:	4770      	bx	lr

08002e12 <HAL_HCD_GetCurrentFrame>:
{
 8002e12:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e14:	6800      	ldr	r0, [r0, #0]
 8002e16:	f005 feae 	bl	8008b76 <USB_GetCurrentFrame>
}
 8002e1a:	bd08      	pop	{r3, pc}

08002e1c <HAL_HCD_GetCurrentSpeed>:
{
 8002e1c:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e1e:	6800      	ldr	r0, [r0, #0]
 8002e20:	f005 fe9e 	bl	8008b60 <USB_GetHostSpeed>
}
 8002e24:	bd08      	pop	{r3, pc}

08002e26 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e26:	6803      	ldr	r3, [r0, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	f012 0f02 	tst.w	r2, #2
 8002e2e:	d001      	beq.n	8002e34 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e30:	2200      	movs	r2, #0
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e34:	6803      	ldr	r3, [r0, #0]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	f012 0f01 	tst.w	r2, #1
 8002e3c:	d103      	bne.n	8002e46 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	619a      	str	r2, [r3, #24]
  }
}
 8002e46:	4770      	bx	lr

08002e48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4c:	4680      	mov	r8, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	4617      	mov	r7, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	9e06      	ldr	r6, [sp, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002e56:	6803      	ldr	r3, [r0, #0]
 8002e58:	4927      	ldr	r1, [pc, #156]	; (8002ef8 <I2C_TransferConfig+0xb0>)
 8002e5a:	4a28      	ldr	r2, [pc, #160]	; (8002efc <I2C_TransferConfig+0xb4>)
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	bf18      	it	ne
 8002e60:	4293      	cmpne	r3, r2
 8002e62:	d00c      	beq.n	8002e7e <I2C_TransferConfig+0x36>
 8002e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d008      	beq.n	8002e7e <I2C_TransferConfig+0x36>
 8002e6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <I2C_TransferConfig+0x36>
 8002e74:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8002e78:	4821      	ldr	r0, [pc, #132]	; (8002f00 <I2C_TransferConfig+0xb8>)
 8002e7a:	f012 f855 	bl	8014f28 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8002e7e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 8002e82:	bf18      	it	ne
 8002e84:	f1b5 7f00 	cmpne.w	r5, #33554432	; 0x2000000
 8002e88:	d000      	beq.n	8002e8c <I2C_TransferConfig+0x44>
 8002e8a:	bb45      	cbnz	r5, 8002ede <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <I2C_TransferConfig+0xbc>)
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <I2C_TransferConfig+0xc0>)
 8002e90:	4296      	cmp	r6, r2
 8002e92:	bf18      	it	ne
 8002e94:	429e      	cmpne	r6, r3
 8002e96:	d007      	beq.n	8002ea8 <I2C_TransferConfig+0x60>
 8002e98:	1e32      	subs	r2, r6, #0
 8002e9a:	bf18      	it	ne
 8002e9c:	2201      	movne	r2, #1
 8002e9e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002ea2:	429e      	cmp	r6, r3
 8002ea4:	d000      	beq.n	8002ea8 <I2C_TransferConfig+0x60>
 8002ea6:	bb02      	cbnz	r2, 8002eea <I2C_TransferConfig+0xa2>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ea8:	f8d8 2000 	ldr.w	r2, [r8]
 8002eac:	6851      	ldr	r1, [r2, #4]
 8002eae:	0d73      	lsrs	r3, r6, #21
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	f043 737f 	orr.w	r3, r3, #66846720	; 0x3fc0000
 8002eb8:	f443 3358 	orr.w	r3, r3, #221184	; 0x36000
 8002ebc:	f443 737f 	orr.w	r3, r3, #1020	; 0x3fc
 8002ec0:	f043 0303 	orr.w	r3, r3, #3
 8002ec4:	ea21 0103 	bic.w	r1, r1, r3
 8002ec8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8002ecc:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8002ed0:	ea44 0305 	orr.w	r3, r4, r5
 8002ed4:	4333      	orrs	r3, r6
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_TRANSFER_MODE(Mode));
 8002ede:	f641 01c2 	movw	r1, #6338	; 0x18c2
 8002ee2:	4807      	ldr	r0, [pc, #28]	; (8002f00 <I2C_TransferConfig+0xb8>)
 8002ee4:	f012 f820 	bl	8014f28 <assert_failed>
 8002ee8:	e7d0      	b.n	8002e8c <I2C_TransferConfig+0x44>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002eea:	f641 01c3 	movw	r1, #6339	; 0x18c3
 8002eee:	4804      	ldr	r0, [pc, #16]	; (8002f00 <I2C_TransferConfig+0xb8>)
 8002ef0:	f012 f81a 	bl	8014f28 <assert_failed>
 8002ef4:	e7d8      	b.n	8002ea8 <I2C_TransferConfig+0x60>
 8002ef6:	bf00      	nop
 8002ef8:	40005400 	.word	0x40005400
 8002efc:	40005800 	.word	0x40005800
 8002f00:	0801a864 	.word	0x0801a864
 8002f04:	80004000 	.word	0x80004000
 8002f08:	80002400 	.word	0x80002400

08002f0c <I2C_IsAcknowledgeFailed>:
{
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	4605      	mov	r5, r0
 8002f10:	460e      	mov	r6, r1
 8002f12:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f14:	6803      	ldr	r3, [r0, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f013 0f10 	tst.w	r3, #16
 8002f1c:	d101      	bne.n	8002f22 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8002f1e:	2000      	movs	r0, #0
}
 8002f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f22:	682b      	ldr	r3, [r5, #0]
 8002f24:	699c      	ldr	r4, [r3, #24]
 8002f26:	f014 0f20 	tst.w	r4, #32
 8002f2a:	d117      	bne.n	8002f5c <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002f2c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002f30:	d0f7      	beq.n	8002f22 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe f987 	bl	8001244 <HAL_GetTick>
 8002f36:	1bc0      	subs	r0, r0, r7
 8002f38:	42b0      	cmp	r0, r6
 8002f3a:	d801      	bhi.n	8002f40 <I2C_IsAcknowledgeFailed+0x34>
 8002f3c:	2e00      	cmp	r6, #0
 8002f3e:	d1f0      	bne.n	8002f22 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f40:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002f42:	f043 0320 	orr.w	r3, r3, #32
 8002f46:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002f54:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e7e1      	b.n	8002f20 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	2420      	movs	r4, #32
 8002f64:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002f66:	4628      	mov	r0, r5
 8002f68:	f7ff ff5d 	bl	8002e26 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002f6c:	682a      	ldr	r2, [r5, #0]
 8002f6e:	6853      	ldr	r3, [r2, #4]
 8002f70:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002f74:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002f78:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f82:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002f94:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e7c1      	b.n	8002f20 <I2C_IsAcknowledgeFailed+0x14>

08002f9c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	460d      	mov	r5, r1
 8002fa2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f013 0f02 	tst.w	r3, #2
 8002fac:	d11d      	bne.n	8002fea <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fae:	4632      	mov	r2, r6
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7ff ffaa 	bl	8002f0c <I2C_IsAcknowledgeFailed>
 8002fb8:	b9c8      	cbnz	r0, 8002fee <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002fbe:	d0f1      	beq.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fe f940 	bl	8001244 <HAL_GetTick>
 8002fc4:	1b80      	subs	r0, r0, r6
 8002fc6:	42a8      	cmp	r0, r5
 8002fc8:	d801      	bhi.n	8002fce <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002fca:	2d00      	cmp	r5, #0
 8002fcc:	d1ea      	bne.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fd0:	f043 0320 	orr.w	r3, r3, #32
 8002fd4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002fe2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	e000      	b.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002fea:	2000      	movs	r0, #0
}
 8002fec:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002fee:	2001      	movs	r0, #1
 8002ff0:	e7fc      	b.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002ff2 <I2C_WaitOnFlagUntilTimeout>:
{
 8002ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff6:	4606      	mov	r6, r0
 8002ff8:	4688      	mov	r8, r1
 8002ffa:	4617      	mov	r7, r2
 8002ffc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffe:	6834      	ldr	r4, [r6, #0]
 8003000:	69a4      	ldr	r4, [r4, #24]
 8003002:	ea38 0304 	bics.w	r3, r8, r4
 8003006:	bf0c      	ite	eq
 8003008:	f04f 0c01 	moveq.w	ip, #1
 800300c:	f04f 0c00 	movne.w	ip, #0
 8003010:	45bc      	cmp	ip, r7
 8003012:	d118      	bne.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8003014:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003018:	d0f1      	beq.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fe f913 	bl	8001244 <HAL_GetTick>
 800301e:	9b06      	ldr	r3, [sp, #24]
 8003020:	1ac0      	subs	r0, r0, r3
 8003022:	42a8      	cmp	r0, r5
 8003024:	d801      	bhi.n	800302a <I2C_WaitOnFlagUntilTimeout+0x38>
 8003026:	2d00      	cmp	r5, #0
 8003028:	d1e9      	bne.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800302a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800302c:	f043 0320 	orr.w	r3, r3, #32
 8003030:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003032:	2320      	movs	r3, #32
 8003034:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	2300      	movs	r3, #0
 800303a:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800303e:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003042:	2001      	movs	r0, #1
 8003044:	e000      	b.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8003046:	2000      	movs	r0, #0
}
 8003048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800304c <I2C_RequestMemoryWrite>:
{
 800304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	4604      	mov	r4, r0
 8003054:	4690      	mov	r8, r2
 8003056:	461d      	mov	r5, r3
 8003058:	9e08      	ldr	r6, [sp, #32]
 800305a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <I2C_RequestMemoryWrite+0x78>)
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003064:	b2ea      	uxtb	r2, r5
 8003066:	f7ff feef 	bl	8002e48 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800306a:	463a      	mov	r2, r7
 800306c:	4631      	mov	r1, r6
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff ff94 	bl	8002f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003074:	b9f8      	cbnz	r0, 80030b6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003076:	2d01      	cmp	r5, #1
 8003078:	d10e      	bne.n	8003098 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	fa5f f288 	uxtb.w	r2, r8
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003082:	9700      	str	r7, [sp, #0]
 8003084:	4633      	mov	r3, r6
 8003086:	2200      	movs	r2, #0
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff ffb1 	bl	8002ff2 <I2C_WaitOnFlagUntilTimeout>
 8003090:	b9a8      	cbnz	r0, 80030be <I2C_RequestMemoryWrite+0x72>
}
 8003092:	b002      	add	sp, #8
 8003094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a0:	463a      	mov	r2, r7
 80030a2:	4631      	mov	r1, r6
 80030a4:	4620      	mov	r0, r4
 80030a6:	f7ff ff79 	bl	8002f9c <I2C_WaitOnTXISFlagUntilTimeout>
 80030aa:	b930      	cbnz	r0, 80030ba <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	fa5f f288 	uxtb.w	r2, r8
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
 80030b4:	e7e5      	b.n	8003082 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80030b6:	2001      	movs	r0, #1
 80030b8:	e7eb      	b.n	8003092 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80030ba:	2001      	movs	r0, #1
 80030bc:	e7e9      	b.n	8003092 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80030be:	2001      	movs	r0, #1
 80030c0:	e7e7      	b.n	8003092 <I2C_RequestMemoryWrite+0x46>
 80030c2:	bf00      	nop
 80030c4:	80002000 	.word	0x80002000

080030c8 <I2C_RequestMemoryRead>:
{
 80030c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	4604      	mov	r4, r0
 80030d0:	4690      	mov	r8, r2
 80030d2:	461d      	mov	r5, r3
 80030d4:	9e08      	ldr	r6, [sp, #32]
 80030d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030d8:	4b18      	ldr	r3, [pc, #96]	; (800313c <I2C_RequestMemoryRead+0x74>)
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	b2ea      	uxtb	r2, r5
 80030e0:	f7ff feb2 	bl	8002e48 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e4:	463a      	mov	r2, r7
 80030e6:	4631      	mov	r1, r6
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7ff ff57 	bl	8002f9c <I2C_WaitOnTXISFlagUntilTimeout>
 80030ee:	b9f8      	cbnz	r0, 8003130 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f0:	2d01      	cmp	r5, #1
 80030f2:	d10e      	bne.n	8003112 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	fa5f f288 	uxtb.w	r2, r8
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030fc:	9700      	str	r7, [sp, #0]
 80030fe:	4633      	mov	r3, r6
 8003100:	2200      	movs	r2, #0
 8003102:	2140      	movs	r1, #64	; 0x40
 8003104:	4620      	mov	r0, r4
 8003106:	f7ff ff74 	bl	8002ff2 <I2C_WaitOnFlagUntilTimeout>
 800310a:	b9a8      	cbnz	r0, 8003138 <I2C_RequestMemoryRead+0x70>
}
 800310c:	b002      	add	sp, #8
 800310e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311a:	463a      	mov	r2, r7
 800311c:	4631      	mov	r1, r6
 800311e:	4620      	mov	r0, r4
 8003120:	f7ff ff3c 	bl	8002f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003124:	b930      	cbnz	r0, 8003134 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	fa5f f288 	uxtb.w	r2, r8
 800312c:	629a      	str	r2, [r3, #40]	; 0x28
 800312e:	e7e5      	b.n	80030fc <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8003130:	2001      	movs	r0, #1
 8003132:	e7eb      	b.n	800310c <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8003134:	2001      	movs	r0, #1
 8003136:	e7e9      	b.n	800310c <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8003138:	2001      	movs	r0, #1
 800313a:	e7e7      	b.n	800310c <I2C_RequestMemoryRead+0x44>
 800313c:	80002000 	.word	0x80002000

08003140 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	4605      	mov	r5, r0
 8003144:	460c      	mov	r4, r1
 8003146:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f013 0f20 	tst.w	r3, #32
 8003150:	d11a      	bne.n	8003188 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003152:	4632      	mov	r2, r6
 8003154:	4621      	mov	r1, r4
 8003156:	4628      	mov	r0, r5
 8003158:	f7ff fed8 	bl	8002f0c <I2C_IsAcknowledgeFailed>
 800315c:	b9b0      	cbnz	r0, 800318c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe f871 	bl	8001244 <HAL_GetTick>
 8003162:	1b80      	subs	r0, r0, r6
 8003164:	42a0      	cmp	r0, r4
 8003166:	d801      	bhi.n	800316c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003168:	2c00      	cmp	r4, #0
 800316a:	d1ed      	bne.n	8003148 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800316e:	f043 0320 	orr.w	r3, r3, #32
 8003172:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003174:	2320      	movs	r3, #32
 8003176:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800317a:	2300      	movs	r3, #0
 800317c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003180:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003184:	2001      	movs	r0, #1
}
 8003186:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003188:	2000      	movs	r0, #0
 800318a:	e7fc      	b.n	8003186 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800318c:	2001      	movs	r0, #1
 800318e:	e7fa      	b.n	8003186 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003190 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003190:	2800      	cmp	r0, #0
 8003192:	f000 80b7 	beq.w	8003304 <HAL_I2C_Init+0x174>
{
 8003196:	b510      	push	{r4, lr}
 8003198:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800319a:	6803      	ldr	r3, [r0, #0]
 800319c:	495a      	ldr	r1, [pc, #360]	; (8003308 <HAL_I2C_Init+0x178>)
 800319e:	4a5b      	ldr	r2, [pc, #364]	; (800330c <HAL_I2C_Init+0x17c>)
 80031a0:	428b      	cmp	r3, r1
 80031a2:	bf18      	it	ne
 80031a4:	4293      	cmpne	r3, r2
 80031a6:	d00c      	beq.n	80031c2 <HAL_I2C_Init+0x32>
 80031a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d008      	beq.n	80031c2 <HAL_I2C_Init+0x32>
 80031b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_I2C_Init+0x32>
 80031b8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80031bc:	4854      	ldr	r0, [pc, #336]	; (8003310 <HAL_I2C_Init+0x180>)
 80031be:	f011 feb3 	bl	8014f28 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80031c2:	68a3      	ldr	r3, [r4, #8]
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c8:	d261      	bcs.n	800328e <HAL_I2C_Init+0xfe>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80031ca:	68e3      	ldr	r3, [r4, #12]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d863      	bhi.n	800329a <HAL_I2C_Init+0x10a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80031d2:	6923      	ldr	r3, [r4, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf18      	it	ne
 80031d8:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 80031dc:	d163      	bne.n	80032a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80031de:	6963      	ldr	r3, [r4, #20]
 80031e0:	2bff      	cmp	r3, #255	; 0xff
 80031e2:	d866      	bhi.n	80032b2 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80031e4:	69a3      	ldr	r3, [r4, #24]
 80031e6:	2b07      	cmp	r3, #7
 80031e8:	d869      	bhi.n	80032be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80031ea:	69e3      	ldr	r3, [r4, #28]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf18      	it	ne
 80031f0:	f5b3 2f00 	cmpne.w	r3, #524288	; 0x80000
 80031f4:	d169      	bne.n	80032ca <HAL_I2C_Init+0x13a>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80031f6:	6a23      	ldr	r3, [r4, #32]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf18      	it	ne
 80031fc:	f5b3 3f00 	cmpne.w	r3, #131072	; 0x20000
 8003200:	d169      	bne.n	80032d6 <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003202:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003206:	2b00      	cmp	r3, #0
 8003208:	d06b      	beq.n	80032e2 <HAL_I2C_Init+0x152>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800320a:	2324      	movs	r3, #36	; 0x24
 800320c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003210:	6822      	ldr	r2, [r4, #0]
 8003212:	6813      	ldr	r3, [r2, #0]
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800321a:	6863      	ldr	r3, [r4, #4]
 800321c:	6822      	ldr	r2, [r4, #0]
 800321e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003222:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	6893      	ldr	r3, [r2, #8]
 8003228:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800322c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800322e:	68e3      	ldr	r3, [r4, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d05c      	beq.n	80032ee <HAL_I2C_Init+0x15e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003234:	68a3      	ldr	r3, [r4, #8]
 8003236:	6822      	ldr	r2, [r4, #0]
 8003238:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800323c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800323e:	68e3      	ldr	r3, [r4, #12]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d05a      	beq.n	80032fa <HAL_I2C_Init+0x16a>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003244:	6822      	ldr	r2, [r4, #0]
 8003246:	6851      	ldr	r1, [r2, #4]
 8003248:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_I2C_Init+0x184>)
 800324a:	430b      	orrs	r3, r1
 800324c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	68d3      	ldr	r3, [r2, #12]
 8003252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003256:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003258:	6923      	ldr	r3, [r4, #16]
 800325a:	6962      	ldr	r2, [r4, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	69a1      	ldr	r1, [r4, #24]
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003266:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003268:	69e3      	ldr	r3, [r4, #28]
 800326a:	6a21      	ldr	r1, [r4, #32]
 800326c:	6822      	ldr	r2, [r4, #0]
 800326e:	430b      	orrs	r3, r1
 8003270:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	6813      	ldr	r3, [r2, #0]
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	2000      	movs	r0, #0
 800327e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003280:	2320      	movs	r3, #32
 8003282:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003286:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800328c:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800328e:	f240 11df 	movw	r1, #479	; 0x1df
 8003292:	481f      	ldr	r0, [pc, #124]	; (8003310 <HAL_I2C_Init+0x180>)
 8003294:	f011 fe48 	bl	8014f28 <assert_failed>
 8003298:	e797      	b.n	80031ca <HAL_I2C_Init+0x3a>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800329a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800329e:	481c      	ldr	r0, [pc, #112]	; (8003310 <HAL_I2C_Init+0x180>)
 80032a0:	f011 fe42 	bl	8014f28 <assert_failed>
 80032a4:	e795      	b.n	80031d2 <HAL_I2C_Init+0x42>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80032a6:	f240 11e1 	movw	r1, #481	; 0x1e1
 80032aa:	4819      	ldr	r0, [pc, #100]	; (8003310 <HAL_I2C_Init+0x180>)
 80032ac:	f011 fe3c 	bl	8014f28 <assert_failed>
 80032b0:	e795      	b.n	80031de <HAL_I2C_Init+0x4e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80032b2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80032b6:	4816      	ldr	r0, [pc, #88]	; (8003310 <HAL_I2C_Init+0x180>)
 80032b8:	f011 fe36 	bl	8014f28 <assert_failed>
 80032bc:	e792      	b.n	80031e4 <HAL_I2C_Init+0x54>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80032be:	f240 11e3 	movw	r1, #483	; 0x1e3
 80032c2:	4813      	ldr	r0, [pc, #76]	; (8003310 <HAL_I2C_Init+0x180>)
 80032c4:	f011 fe30 	bl	8014f28 <assert_failed>
 80032c8:	e78f      	b.n	80031ea <HAL_I2C_Init+0x5a>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80032ca:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80032ce:	4810      	ldr	r0, [pc, #64]	; (8003310 <HAL_I2C_Init+0x180>)
 80032d0:	f011 fe2a 	bl	8014f28 <assert_failed>
 80032d4:	e78f      	b.n	80031f6 <HAL_I2C_Init+0x66>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80032d6:	f240 11e5 	movw	r1, #485	; 0x1e5
 80032da:	480d      	ldr	r0, [pc, #52]	; (8003310 <HAL_I2C_Init+0x180>)
 80032dc:	f011 fe24 	bl	8014f28 <assert_failed>
 80032e0:	e78f      	b.n	8003202 <HAL_I2C_Init+0x72>
    hi2c->Lock = HAL_UNLOCKED;
 80032e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f011 f91a 	bl	8014520 <HAL_I2C_MspInit>
 80032ec:	e78d      	b.n	800320a <HAL_I2C_Init+0x7a>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032ee:	68a3      	ldr	r3, [r4, #8]
 80032f0:	6822      	ldr	r2, [r4, #0]
 80032f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f6:	6093      	str	r3, [r2, #8]
 80032f8:	e7a1      	b.n	800323e <HAL_I2C_Init+0xae>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	e79f      	b.n	8003244 <HAL_I2C_Init+0xb4>
    return HAL_ERROR;
 8003304:	2001      	movs	r0, #1
}
 8003306:	4770      	bx	lr
 8003308:	40005400 	.word	0x40005400
 800330c:	40005800 	.word	0x40005800
 8003310:	0801a864 	.word	0x0801a864
 8003314:	02008000 	.word	0x02008000

08003318 <HAL_I2C_Mem_Write>:
{
 8003318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331c:	b083      	sub	sp, #12
 800331e:	4604      	mov	r4, r0
 8003320:	460d      	mov	r5, r1
 8003322:	4691      	mov	r9, r2
 8003324:	4698      	mov	r8, r3
 8003326:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800332a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800332c:	3b01      	subs	r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d822      	bhi.n	800337a <HAL_I2C_Mem_Write+0x62>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003334:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	f040 80bf 	bne.w	80034be <HAL_I2C_Mem_Write+0x1a6>
    if ((pData == NULL) || (Size == 0U))
 8003340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003342:	f1ba 0f00 	cmp.w	sl, #0
 8003346:	bf18      	it	ne
 8003348:	2b00      	cmpne	r3, #0
 800334a:	d01c      	beq.n	8003386 <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
 800334c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003350:	2b01      	cmp	r3, #1
 8003352:	f000 80b8 	beq.w	80034c6 <HAL_I2C_Mem_Write+0x1ae>
 8003356:	f04f 0b01 	mov.w	fp, #1
 800335a:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800335e:	f7fd ff71 	bl	8001244 <HAL_GetTick>
 8003362:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003364:	9000      	str	r0, [sp, #0]
 8003366:	2319      	movs	r3, #25
 8003368:	465a      	mov	r2, fp
 800336a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff fe3f 	bl	8002ff2 <I2C_WaitOnFlagUntilTimeout>
 8003374:	b160      	cbz	r0, 8003390 <HAL_I2C_Mem_Write+0x78>
      return HAL_ERROR;
 8003376:	2001      	movs	r0, #1
 8003378:	e0a2      	b.n	80034c0 <HAL_I2C_Mem_Write+0x1a8>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800337a:	f640 01ed 	movw	r1, #2285	; 0x8ed
 800337e:	4856      	ldr	r0, [pc, #344]	; (80034d8 <HAL_I2C_Mem_Write+0x1c0>)
 8003380:	f011 fdd2 	bl	8014f28 <assert_failed>
 8003384:	e7d6      	b.n	8003334 <HAL_I2C_Mem_Write+0x1c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800338a:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800338c:	2001      	movs	r0, #1
 800338e:	e097      	b.n	80034c0 <HAL_I2C_Mem_Write+0x1a8>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003390:	2321      	movs	r3, #33	; 0x21
 8003392:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003396:	2340      	movs	r3, #64	; 0x40
 8003398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339c:	2300      	movs	r3, #0
 800339e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80033a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033a2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80033a4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033a8:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033aa:	9601      	str	r6, [sp, #4]
 80033ac:	9700      	str	r7, [sp, #0]
 80033ae:	4643      	mov	r3, r8
 80033b0:	464a      	mov	r2, r9
 80033b2:	4629      	mov	r1, r5
 80033b4:	4620      	mov	r0, r4
 80033b6:	f7ff fe49 	bl	800304c <I2C_RequestMemoryWrite>
 80033ba:	b970      	cbnz	r0, 80033da <HAL_I2C_Mem_Write+0xc2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2bff      	cmp	r3, #255	; 0xff
 80033c2:	d90f      	bls.n	80033e4 <HAL_I2C_Mem_Write+0xcc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033c8:	2300      	movs	r3, #0
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d0:	4629      	mov	r1, r5
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7ff fd38 	bl	8002e48 <I2C_TransferConfig>
 80033d8:	e021      	b.n	800341e <HAL_I2C_Mem_Write+0x106>
      __HAL_UNLOCK(hi2c);
 80033da:	2300      	movs	r3, #0
 80033dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80033e0:	4658      	mov	r0, fp
 80033e2:	e06d      	b.n	80034c0 <HAL_I2C_Mem_Write+0x1a8>
      hi2c->XferSize = hi2c->XferCount;
 80033e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80033e6:	b292      	uxth	r2, r2
 80033e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033ea:	2300      	movs	r3, #0
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	4629      	mov	r1, r5
 80033f6:	4620      	mov	r0, r4
 80033f8:	f7ff fd26 	bl	8002e48 <I2C_TransferConfig>
 80033fc:	e00f      	b.n	800341e <HAL_I2C_Mem_Write+0x106>
          hi2c->XferSize = hi2c->XferCount;
 80033fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003400:	b292      	uxth	r2, r2
 8003402:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003404:	2300      	movs	r3, #0
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	4629      	mov	r1, r5
 8003410:	4620      	mov	r0, r4
 8003412:	f7ff fd19 	bl	8002e48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003416:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d033      	beq.n	8003486 <HAL_I2C_Mem_Write+0x16e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341e:	4632      	mov	r2, r6
 8003420:	4639      	mov	r1, r7
 8003422:	4620      	mov	r0, r4
 8003424:	f7ff fdba 	bl	8002f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003428:	2800      	cmp	r0, #0
 800342a:	d14e      	bne.n	80034ca <HAL_I2C_Mem_Write+0x1b2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800342c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003436:	3301      	adds	r3, #1
 8003438:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800343a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29b      	uxth	r3, r3
 8003442:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003444:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003446:	3b01      	subs	r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800344c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800344e:	b292      	uxth	r2, r2
 8003450:	2a00      	cmp	r2, #0
 8003452:	d0e0      	beq.n	8003416 <HAL_I2C_Mem_Write+0xfe>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1de      	bne.n	8003416 <HAL_I2C_Mem_Write+0xfe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003458:	9600      	str	r6, [sp, #0]
 800345a:	463b      	mov	r3, r7
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	4620      	mov	r0, r4
 8003462:	f7ff fdc6 	bl	8002ff2 <I2C_WaitOnFlagUntilTimeout>
 8003466:	bb90      	cbnz	r0, 80034ce <HAL_I2C_Mem_Write+0x1b6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	2bff      	cmp	r3, #255	; 0xff
 800346e:	d9c6      	bls.n	80033fe <HAL_I2C_Mem_Write+0xe6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003470:	22ff      	movs	r2, #255	; 0xff
 8003472:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003474:	2300      	movs	r3, #0
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800347c:	4629      	mov	r1, r5
 800347e:	4620      	mov	r0, r4
 8003480:	f7ff fce2 	bl	8002e48 <I2C_TransferConfig>
 8003484:	e7c7      	b.n	8003416 <HAL_I2C_Mem_Write+0xfe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003486:	4632      	mov	r2, r6
 8003488:	4639      	mov	r1, r7
 800348a:	4620      	mov	r0, r4
 800348c:	f7ff fe58 	bl	8003140 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003490:	b9f8      	cbnz	r0, 80034d2 <HAL_I2C_Mem_Write+0x1ba>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	2220      	movs	r2, #32
 8003496:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003498:	6821      	ldr	r1, [r4, #0]
 800349a:	684b      	ldr	r3, [r1, #4]
 800349c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80034a0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80034a4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80034b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80034bc:	e000      	b.n	80034c0 <HAL_I2C_Mem_Write+0x1a8>
    return HAL_BUSY;
 80034be:	2002      	movs	r0, #2
}
 80034c0:	b003      	add	sp, #12
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80034c6:	2002      	movs	r0, #2
 80034c8:	e7fa      	b.n	80034c0 <HAL_I2C_Mem_Write+0x1a8>
        return HAL_ERROR;
 80034ca:	2001      	movs	r0, #1
 80034cc:	e7f8      	b.n	80034c0 <HAL_I2C_Mem_Write+0x1a8>
          return HAL_ERROR;
 80034ce:	2001      	movs	r0, #1
 80034d0:	e7f6      	b.n	80034c0 <HAL_I2C_Mem_Write+0x1a8>
      return HAL_ERROR;
 80034d2:	2001      	movs	r0, #1
 80034d4:	e7f4      	b.n	80034c0 <HAL_I2C_Mem_Write+0x1a8>
 80034d6:	bf00      	nop
 80034d8:	0801a864 	.word	0x0801a864

080034dc <HAL_I2C_Mem_Read>:
{
 80034dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e0:	b083      	sub	sp, #12
 80034e2:	4604      	mov	r4, r0
 80034e4:	460d      	mov	r5, r1
 80034e6:	4691      	mov	r9, r2
 80034e8:	4698      	mov	r8, r3
 80034ea:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80034ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d822      	bhi.n	800353e <HAL_I2C_Mem_Read+0x62>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b20      	cmp	r3, #32
 8003500:	f040 80c0 	bne.w	8003684 <HAL_I2C_Mem_Read+0x1a8>
    if ((pData == NULL) || (Size == 0U))
 8003504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003506:	f1ba 0f00 	cmp.w	sl, #0
 800350a:	bf18      	it	ne
 800350c:	2b00      	cmpne	r3, #0
 800350e:	d01c      	beq.n	800354a <HAL_I2C_Mem_Read+0x6e>
    __HAL_LOCK(hi2c);
 8003510:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003514:	2b01      	cmp	r3, #1
 8003516:	f000 80b9 	beq.w	800368c <HAL_I2C_Mem_Read+0x1b0>
 800351a:	f04f 0b01 	mov.w	fp, #1
 800351e:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003522:	f7fd fe8f 	bl	8001244 <HAL_GetTick>
 8003526:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003528:	9000      	str	r0, [sp, #0]
 800352a:	2319      	movs	r3, #25
 800352c:	465a      	mov	r2, fp
 800352e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003532:	4620      	mov	r0, r4
 8003534:	f7ff fd5d 	bl	8002ff2 <I2C_WaitOnFlagUntilTimeout>
 8003538:	b160      	cbz	r0, 8003554 <HAL_I2C_Mem_Read+0x78>
      return HAL_ERROR;
 800353a:	2001      	movs	r0, #1
 800353c:	e0a3      	b.n	8003686 <HAL_I2C_Mem_Read+0x1aa>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800353e:	f640 1174 	movw	r1, #2420	; 0x974
 8003542:	4856      	ldr	r0, [pc, #344]	; (800369c <HAL_I2C_Mem_Read+0x1c0>)
 8003544:	f011 fcf0 	bl	8014f28 <assert_failed>
 8003548:	e7d6      	b.n	80034f8 <HAL_I2C_Mem_Read+0x1c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800354a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800354e:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8003550:	2001      	movs	r0, #1
 8003552:	e098      	b.n	8003686 <HAL_I2C_Mem_Read+0x1aa>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003554:	2322      	movs	r3, #34	; 0x22
 8003556:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003560:	2300      	movs	r3, #0
 8003562:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003566:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003568:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800356c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800356e:	9601      	str	r6, [sp, #4]
 8003570:	9700      	str	r7, [sp, #0]
 8003572:	4643      	mov	r3, r8
 8003574:	464a      	mov	r2, r9
 8003576:	4629      	mov	r1, r5
 8003578:	4620      	mov	r0, r4
 800357a:	f7ff fda5 	bl	80030c8 <I2C_RequestMemoryRead>
 800357e:	b970      	cbnz	r0, 800359e <HAL_I2C_Mem_Read+0xc2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003580:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	2bff      	cmp	r3, #255	; 0xff
 8003586:	d90f      	bls.n	80035a8 <HAL_I2C_Mem_Read+0xcc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003588:	22ff      	movs	r2, #255	; 0xff
 800358a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800358c:	4b44      	ldr	r3, [pc, #272]	; (80036a0 <HAL_I2C_Mem_Read+0x1c4>)
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003594:	4629      	mov	r1, r5
 8003596:	4620      	mov	r0, r4
 8003598:	f7ff fc56 	bl	8002e48 <I2C_TransferConfig>
 800359c:	e021      	b.n	80035e2 <HAL_I2C_Mem_Read+0x106>
      __HAL_UNLOCK(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80035a4:	4658      	mov	r0, fp
 80035a6:	e06e      	b.n	8003686 <HAL_I2C_Mem_Read+0x1aa>
      hi2c->XferSize = hi2c->XferCount;
 80035a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80035aa:	b292      	uxth	r2, r2
 80035ac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80035ae:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <HAL_I2C_Mem_Read+0x1c4>)
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	4629      	mov	r1, r5
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7ff fc44 	bl	8002e48 <I2C_TransferConfig>
 80035c0:	e00f      	b.n	80035e2 <HAL_I2C_Mem_Read+0x106>
          hi2c->XferSize = hi2c->XferCount;
 80035c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80035c4:	b292      	uxth	r2, r2
 80035c6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035c8:	2300      	movs	r3, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	4629      	mov	r1, r5
 80035d4:	4620      	mov	r0, r4
 80035d6:	f7ff fc37 	bl	8002e48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80035da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d034      	beq.n	800364c <HAL_I2C_Mem_Read+0x170>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80035e2:	9600      	str	r6, [sp, #0]
 80035e4:	463b      	mov	r3, r7
 80035e6:	2200      	movs	r2, #0
 80035e8:	2104      	movs	r1, #4
 80035ea:	4620      	mov	r0, r4
 80035ec:	f7ff fd01 	bl	8002ff2 <I2C_WaitOnFlagUntilTimeout>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d14d      	bne.n	8003690 <HAL_I2C_Mem_Read+0x1b4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035fa:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80035fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035fe:	3301      	adds	r3, #1
 8003600:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003602:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003604:	3a01      	subs	r2, #1
 8003606:	b292      	uxth	r2, r2
 8003608:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800360a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29b      	uxth	r3, r3
 8003612:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003614:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0de      	beq.n	80035da <HAL_I2C_Mem_Read+0xfe>
 800361c:	2a00      	cmp	r2, #0
 800361e:	d1dc      	bne.n	80035da <HAL_I2C_Mem_Read+0xfe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003620:	9600      	str	r6, [sp, #0]
 8003622:	463b      	mov	r3, r7
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	4620      	mov	r0, r4
 8003628:	f7ff fce3 	bl	8002ff2 <I2C_WaitOnFlagUntilTimeout>
 800362c:	bb90      	cbnz	r0, 8003694 <HAL_I2C_Mem_Read+0x1b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800362e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2bff      	cmp	r3, #255	; 0xff
 8003634:	d9c5      	bls.n	80035c2 <HAL_I2C_Mem_Read+0xe6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003636:	22ff      	movs	r2, #255	; 0xff
 8003638:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800363a:	2300      	movs	r3, #0
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003642:	4629      	mov	r1, r5
 8003644:	4620      	mov	r0, r4
 8003646:	f7ff fbff 	bl	8002e48 <I2C_TransferConfig>
 800364a:	e7c6      	b.n	80035da <HAL_I2C_Mem_Read+0xfe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364c:	4632      	mov	r2, r6
 800364e:	4639      	mov	r1, r7
 8003650:	4620      	mov	r0, r4
 8003652:	f7ff fd75 	bl	8003140 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003656:	b9f8      	cbnz	r0, 8003698 <HAL_I2C_Mem_Read+0x1bc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	2220      	movs	r2, #32
 800365c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800365e:	6821      	ldr	r1, [r4, #0]
 8003660:	684b      	ldr	r3, [r1, #4]
 8003662:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003666:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800366a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003674:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003678:	2300      	movs	r3, #0
 800367a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800367e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003682:	e000      	b.n	8003686 <HAL_I2C_Mem_Read+0x1aa>
    return HAL_BUSY;
 8003684:	2002      	movs	r0, #2
}
 8003686:	b003      	add	sp, #12
 8003688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800368c:	2002      	movs	r0, #2
 800368e:	e7fa      	b.n	8003686 <HAL_I2C_Mem_Read+0x1aa>
        return HAL_ERROR;
 8003690:	2001      	movs	r0, #1
 8003692:	e7f8      	b.n	8003686 <HAL_I2C_Mem_Read+0x1aa>
          return HAL_ERROR;
 8003694:	2001      	movs	r0, #1
 8003696:	e7f6      	b.n	8003686 <HAL_I2C_Mem_Read+0x1aa>
      return HAL_ERROR;
 8003698:	2001      	movs	r0, #1
 800369a:	e7f4      	b.n	8003686 <HAL_I2C_Mem_Read+0x1aa>
 800369c:	0801a864 	.word	0x0801a864
 80036a0:	80002400 	.word	0x80002400

080036a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4604      	mov	r4, r0
 80036a8:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80036aa:	6803      	ldr	r3, [r0, #0]
 80036ac:	4924      	ldr	r1, [pc, #144]	; (8003740 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 80036ae:	4a25      	ldr	r2, [pc, #148]	; (8003744 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 80036b0:	428b      	cmp	r3, r1
 80036b2:	bf18      	it	ne
 80036b4:	4293      	cmpne	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 80036b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 80036c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 80036c8:	215f      	movs	r1, #95	; 0x5f
 80036ca:	481f      	ldr	r0, [pc, #124]	; (8003748 <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
 80036cc:	f011 fc2c 	bl	8014f28 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80036d0:	2d00      	cmp	r5, #0
 80036d2:	bf18      	it	ne
 80036d4:	f5b5 5f80 	cmpne.w	r5, #4096	; 0x1000
 80036d8:	d128      	bne.n	800372c <HAL_I2CEx_ConfigAnalogFilter+0x88>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036da:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d128      	bne.n	8003736 <HAL_I2CEx_ConfigAnalogFilter+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d026      	beq.n	800373a <HAL_I2CEx_ConfigAnalogFilter+0x96>
 80036ec:	2301      	movs	r3, #1
 80036ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036f2:	2324      	movs	r3, #36	; 0x24
 80036f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	6813      	ldr	r3, [r2, #0]
 8003706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800370a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	430d      	orrs	r5, r1
 8003712:	601d      	str	r5, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800371e:	2320      	movs	r3, #32
 8003720:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	2000      	movs	r0, #0
 8003726:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800372a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800372c:	2160      	movs	r1, #96	; 0x60
 800372e:	4806      	ldr	r0, [pc, #24]	; (8003748 <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
 8003730:	f011 fbfa 	bl	8014f28 <assert_failed>
 8003734:	e7d1      	b.n	80036da <HAL_I2CEx_ConfigAnalogFilter+0x36>
    return HAL_BUSY;
 8003736:	2002      	movs	r0, #2
 8003738:	e7f7      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x86>
    __HAL_LOCK(hi2c);
 800373a:	2002      	movs	r0, #2
 800373c:	e7f5      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x86>
 800373e:	bf00      	nop
 8003740:	40005400 	.word	0x40005400
 8003744:	40005800 	.word	0x40005800
 8003748:	0801a89c 	.word	0x0801a89c

0800374c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	4604      	mov	r4, r0
 8003750:	460d      	mov	r5, r1
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003752:	6803      	ldr	r3, [r0, #0]
 8003754:	4921      	ldr	r1, [pc, #132]	; (80037dc <HAL_I2CEx_ConfigDigitalFilter+0x90>)
 8003756:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003758:	428b      	cmp	r3, r1
 800375a:	bf18      	it	ne
 800375c:	4293      	cmpne	r3, r2
 800375e:	d00b      	beq.n	8003778 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8003760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003764:	4293      	cmp	r3, r2
 8003766:	d007      	beq.n	8003778 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8003768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8003770:	218d      	movs	r1, #141	; 0x8d
 8003772:	481c      	ldr	r0, [pc, #112]	; (80037e4 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8003774:	f011 fbd8 	bl	8014f28 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003778:	2d0f      	cmp	r5, #15
 800377a:	d826      	bhi.n	80037ca <HAL_I2CEx_ConfigDigitalFilter+0x7e>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	d126      	bne.n	80037d4 <HAL_I2CEx_ConfigDigitalFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003786:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800378a:	2b01      	cmp	r3, #1
 800378c:	d024      	beq.n	80037d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800378e:	2301      	movs	r3, #1
 8003790:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003794:	2324      	movs	r3, #36	; 0x24
 8003796:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	6813      	ldr	r3, [r2, #0]
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037a8:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ac:	ea41 2505 	orr.w	r5, r1, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037b0:	601d      	str	r5, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	2320      	movs	r3, #32
 80037be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c2:	2000      	movs	r0, #0
 80037c4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80037ca:	218e      	movs	r1, #142	; 0x8e
 80037cc:	4805      	ldr	r0, [pc, #20]	; (80037e4 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80037ce:	f011 fbab 	bl	8014f28 <assert_failed>
 80037d2:	e7d3      	b.n	800377c <HAL_I2CEx_ConfigDigitalFilter+0x30>
    return HAL_BUSY;
 80037d4:	2002      	movs	r0, #2
 80037d6:	e7f7      	b.n	80037c8 <HAL_I2CEx_ConfigDigitalFilter+0x7c>
    __HAL_LOCK(hi2c);
 80037d8:	2002      	movs	r0, #2
 80037da:	e7f5      	b.n	80037c8 <HAL_I2CEx_ConfigDigitalFilter+0x7c>
 80037dc:	40005400 	.word	0x40005400
 80037e0:	40005800 	.word	0x40005800
 80037e4:	0801a89c 	.word	0x0801a89c

080037e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80037e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80037ea:	684d      	ldr	r5, [r1, #4]
 80037ec:	6804      	ldr	r4, [r0, #0]
 80037ee:	68e3      	ldr	r3, [r4, #12]
 80037f0:	f3c3 430b 	ubfx	r3, r3, #16, #12
 80037f4:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80037f6:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 80037fa:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80037fe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003802:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003806:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800380a:	680b      	ldr	r3, [r1, #0]
 800380c:	6804      	ldr	r4, [r0, #0]
 800380e:	68e6      	ldr	r6, [r4, #12]
 8003810:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8003814:	4433      	add	r3, r6
 8003816:	3301      	adds	r3, #1
 8003818:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800381c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003820:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003824:	68cd      	ldr	r5, [r1, #12]
 8003826:	6804      	ldr	r4, [r0, #0]
 8003828:	68e3      	ldr	r3, [r4, #12]
 800382a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800382e:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003830:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8003834:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8003838:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800383c:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003840:	688b      	ldr	r3, [r1, #8]
 8003842:	6804      	ldr	r4, [r0, #0]
 8003844:	68e6      	ldr	r6, [r4, #12]
 8003846:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800384a:	4473      	add	r3, lr
 800384c:	3301      	adds	r3, #1
 800384e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8003852:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003856:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800385a:	6803      	ldr	r3, [r0, #0]
 800385c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003860:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8003864:	f024 0407 	bic.w	r4, r4, #7
 8003868:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800386c:	6803      	ldr	r3, [r0, #0]
 800386e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003872:	690c      	ldr	r4, [r1, #16]
 8003874:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003878:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800387c:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003880:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003882:	6804      	ldr	r4, [r0, #0]
 8003884:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8003888:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 800388c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003890:	2400      	movs	r4, #0
 8003892:	f8ce 4018 	str.w	r4, [lr, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003896:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800389a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800389e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80038a2:	6806      	ldr	r6, [r0, #0]
 80038a4:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 80038a8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80038ac:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 80038b0:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80038b4:	6803      	ldr	r3, [r0, #0]
 80038b6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038ba:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 80038be:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80038c2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80038c6:	6803      	ldr	r3, [r0, #0]
 80038c8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038cc:	694d      	ldr	r5, [r1, #20]
 80038ce:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80038d2:	6803      	ldr	r3, [r0, #0]
 80038d4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038d8:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80038dc:	4d2e      	ldr	r5, [pc, #184]	; (8003998 <LTDC_SetConfig+0x1b0>)
 80038de:	4035      	ands	r5, r6
 80038e0:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80038e4:	6a0d      	ldr	r5, [r1, #32]
 80038e6:	6803      	ldr	r3, [r0, #0]
 80038e8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038ec:	69ce      	ldr	r6, [r1, #28]
 80038ee:	4335      	orrs	r5, r6
 80038f0:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80038f4:	6803      	ldr	r3, [r0, #0]
 80038f6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038fa:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80038fe:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003902:	6803      	ldr	r3, [r0, #0]
 8003904:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8003908:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800390a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800390e:	690b      	ldr	r3, [r1, #16]
 8003910:	b16b      	cbz	r3, 800392e <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003912:	2b01      	cmp	r3, #1
 8003914:	d039      	beq.n	800398a <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003916:	2b02      	cmp	r3, #2
 8003918:	bf18      	it	ne
 800391a:	2b04      	cmpne	r3, #4
 800391c:	d037      	beq.n	800398e <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800391e:	2b03      	cmp	r3, #3
 8003920:	d037      	beq.n	8003992 <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003922:	2b07      	cmp	r3, #7
 8003924:	d001      	beq.n	800392a <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003926:	2501      	movs	r5, #1
 8003928:	e002      	b.n	8003930 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800392a:	2502      	movs	r5, #2
 800392c:	e000      	b.n	8003930 <LTDC_SetConfig+0x148>
    tmp = 4U;
 800392e:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003930:	6802      	ldr	r2, [r0, #0]
 8003932:	4462      	add	r2, ip
 8003934:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8003938:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 800393c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003940:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003942:	fb05 f402 	mul.w	r4, r5, r2
 8003946:	684b      	ldr	r3, [r1, #4]
 8003948:	680a      	ldr	r2, [r1, #0]
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	fb05 f303 	mul.w	r3, r5, r3
 8003950:	3303      	adds	r3, #3
 8003952:	6802      	ldr	r2, [r0, #0]
 8003954:	4462      	add	r2, ip
 8003956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800395a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800395e:	6803      	ldr	r3, [r0, #0]
 8003960:	4463      	add	r3, ip
 8003962:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8003966:	4a0d      	ldr	r2, [pc, #52]	; (800399c <LTDC_SetConfig+0x1b4>)
 8003968:	4022      	ands	r2, r4
 800396a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800396e:	6803      	ldr	r3, [r0, #0]
 8003970:	4463      	add	r3, ip
 8003972:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003974:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003978:	6803      	ldr	r3, [r0, #0]
 800397a:	449c      	add	ip, r3
 800397c:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 8003988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800398a:	2503      	movs	r5, #3
 800398c:	e7d0      	b.n	8003930 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800398e:	2502      	movs	r5, #2
 8003990:	e7ce      	b.n	8003930 <LTDC_SetConfig+0x148>
 8003992:	2502      	movs	r5, #2
 8003994:	e7cc      	b.n	8003930 <LTDC_SetConfig+0x148>
 8003996:	bf00      	nop
 8003998:	fffff8f8 	.word	0xfffff8f8
 800399c:	fffff800 	.word	0xfffff800

080039a0 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80039a0:	2800      	cmp	r0, #0
 80039a2:	f000 80fd 	beq.w	8003ba0 <HAL_LTDC_Init+0x200>
{
 80039a6:	b538      	push	{r3, r4, r5, lr}
 80039a8:	4604      	mov	r4, r0
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 80039aa:	6802      	ldr	r2, [r0, #0]
 80039ac:	4b7d      	ldr	r3, [pc, #500]	; (8003ba4 <HAL_LTDC_Init+0x204>)
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d003      	beq.n	80039ba <HAL_LTDC_Init+0x1a>
 80039b2:	21ca      	movs	r1, #202	; 0xca
 80039b4:	487c      	ldr	r0, [pc, #496]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 80039b6:	f011 fab7 	bl	8014f28 <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 80039ba:	6963      	ldr	r3, [r4, #20]
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c0:	f080 80ac 	bcs.w	8003b1c <HAL_LTDC_Init+0x17c>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 80039c4:	69a3      	ldr	r3, [r4, #24]
 80039c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ca:	f080 80ac 	bcs.w	8003b26 <HAL_LTDC_Init+0x186>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 80039ce:	69e3      	ldr	r3, [r4, #28]
 80039d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d4:	f080 80ac 	bcs.w	8003b30 <HAL_LTDC_Init+0x190>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 80039d8:	6a23      	ldr	r3, [r4, #32]
 80039da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039de:	f080 80ac 	bcs.w	8003b3a <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 80039e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e8:	f080 80ac 	bcs.w	8003b44 <HAL_LTDC_Init+0x1a4>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 80039ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	f080 80ac 	bcs.w	8003b4e <HAL_LTDC_Init+0x1ae>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 80039f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fc:	f080 80ac 	bcs.w	8003b58 <HAL_LTDC_Init+0x1b8>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 8003a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	f080 80ac 	bcs.w	8003b62 <HAL_LTDC_Init+0x1c2>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf18      	it	ne
 8003a10:	f1b3 4f00 	cmpne.w	r3, #2147483648	; 0x80000000
 8003a14:	f040 80aa 	bne.w	8003b6c <HAL_LTDC_Init+0x1cc>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8003a18:	68a3      	ldr	r3, [r4, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf18      	it	ne
 8003a1e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8003a22:	f040 80a8 	bne.w	8003b76 <HAL_LTDC_Init+0x1d6>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8003a26:	68e3      	ldr	r3, [r4, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf18      	it	ne
 8003a2c:	f1b3 5f00 	cmpne.w	r3, #536870912	; 0x20000000
 8003a30:	f040 80a6 	bne.w	8003b80 <HAL_LTDC_Init+0x1e0>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8003a34:	6923      	ldr	r3, [r4, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf18      	it	ne
 8003a3a:	f1b3 5f80 	cmpne.w	r3, #268435456	; 0x10000000
 8003a3e:	f040 80a4 	bne.w	8003b8a <HAL_LTDC_Init+0x1ea>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003a42:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80a4 	beq.w	8003b94 <HAL_LTDC_Init+0x1f4>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003a52:	6822      	ldr	r2, [r4, #0]
 8003a54:	6993      	ldr	r3, [r2, #24]
 8003a56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a5a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a5c:	6821      	ldr	r1, [r4, #0]
 8003a5e:	698a      	ldr	r2, [r1, #24]
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	68a0      	ldr	r0, [r4, #8]
 8003a64:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a66:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a68:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a6a:	6920      	ldr	r0, [r4, #16]
 8003a6c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003a72:	6821      	ldr	r1, [r4, #0]
 8003a74:	688a      	ldr	r2, [r1, #8]
 8003a76:	4b4d      	ldr	r3, [pc, #308]	; (8003bac <HAL_LTDC_Init+0x20c>)
 8003a78:	401a      	ands	r2, r3
 8003a7a:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	6882      	ldr	r2, [r0, #8]
 8003a80:	69a1      	ldr	r1, [r4, #24]
 8003a82:	6965      	ldr	r5, [r4, #20]
 8003a84:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003a8c:	6821      	ldr	r1, [r4, #0]
 8003a8e:	68ca      	ldr	r2, [r1, #12]
 8003a90:	401a      	ands	r2, r3
 8003a92:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	68c2      	ldr	r2, [r0, #12]
 8003a98:	6a21      	ldr	r1, [r4, #32]
 8003a9a:	69e5      	ldr	r5, [r4, #28]
 8003a9c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003aa4:	6821      	ldr	r1, [r4, #0]
 8003aa6:	690a      	ldr	r2, [r1, #16]
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	6902      	ldr	r2, [r0, #16]
 8003ab0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003ab2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ab4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003abc:	6821      	ldr	r1, [r4, #0]
 8003abe:	694a      	ldr	r2, [r1, #20]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003ac4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003ac6:	6821      	ldr	r1, [r4, #0]
 8003ac8:	694b      	ldr	r3, [r1, #20]
 8003aca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003acc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ad4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ad8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003adc:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ade:	6821      	ldr	r1, [r4, #0]
 8003ae0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003ae2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003ae6:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ae8:	6821      	ldr	r1, [r4, #0]
 8003aea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003aec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003af0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003af4:	4303      	orrs	r3, r0
 8003af6:	4313      	orrs	r3, r2
 8003af8:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003afa:	6822      	ldr	r2, [r4, #0]
 8003afc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003afe:	f043 0306 	orr.w	r3, r3, #6
 8003b02:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003b04:	6822      	ldr	r2, [r4, #0]
 8003b06:	6993      	ldr	r3, [r2, #24]
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 8003b1c:	21cb      	movs	r1, #203	; 0xcb
 8003b1e:	4822      	ldr	r0, [pc, #136]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b20:	f011 fa02 	bl	8014f28 <assert_failed>
 8003b24:	e74e      	b.n	80039c4 <HAL_LTDC_Init+0x24>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 8003b26:	21cc      	movs	r1, #204	; 0xcc
 8003b28:	481f      	ldr	r0, [pc, #124]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b2a:	f011 f9fd 	bl	8014f28 <assert_failed>
 8003b2e:	e74e      	b.n	80039ce <HAL_LTDC_Init+0x2e>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 8003b30:	21cd      	movs	r1, #205	; 0xcd
 8003b32:	481d      	ldr	r0, [pc, #116]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b34:	f011 f9f8 	bl	8014f28 <assert_failed>
 8003b38:	e74e      	b.n	80039d8 <HAL_LTDC_Init+0x38>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 8003b3a:	21ce      	movs	r1, #206	; 0xce
 8003b3c:	481a      	ldr	r0, [pc, #104]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b3e:	f011 f9f3 	bl	8014f28 <assert_failed>
 8003b42:	e74e      	b.n	80039e2 <HAL_LTDC_Init+0x42>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 8003b44:	21cf      	movs	r1, #207	; 0xcf
 8003b46:	4818      	ldr	r0, [pc, #96]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b48:	f011 f9ee 	bl	8014f28 <assert_failed>
 8003b4c:	e74e      	b.n	80039ec <HAL_LTDC_Init+0x4c>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 8003b4e:	21d0      	movs	r1, #208	; 0xd0
 8003b50:	4815      	ldr	r0, [pc, #84]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b52:	f011 f9e9 	bl	8014f28 <assert_failed>
 8003b56:	e74e      	b.n	80039f6 <HAL_LTDC_Init+0x56>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 8003b58:	21d1      	movs	r1, #209	; 0xd1
 8003b5a:	4813      	ldr	r0, [pc, #76]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b5c:	f011 f9e4 	bl	8014f28 <assert_failed>
 8003b60:	e74e      	b.n	8003a00 <HAL_LTDC_Init+0x60>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 8003b62:	21d2      	movs	r1, #210	; 0xd2
 8003b64:	4810      	ldr	r0, [pc, #64]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b66:	f011 f9df 	bl	8014f28 <assert_failed>
 8003b6a:	e74e      	b.n	8003a0a <HAL_LTDC_Init+0x6a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 8003b6c:	21d3      	movs	r1, #211	; 0xd3
 8003b6e:	480e      	ldr	r0, [pc, #56]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b70:	f011 f9da 	bl	8014f28 <assert_failed>
 8003b74:	e750      	b.n	8003a18 <HAL_LTDC_Init+0x78>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8003b76:	21d4      	movs	r1, #212	; 0xd4
 8003b78:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b7a:	f011 f9d5 	bl	8014f28 <assert_failed>
 8003b7e:	e752      	b.n	8003a26 <HAL_LTDC_Init+0x86>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8003b80:	21d5      	movs	r1, #213	; 0xd5
 8003b82:	4809      	ldr	r0, [pc, #36]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b84:	f011 f9d0 	bl	8014f28 <assert_failed>
 8003b88:	e754      	b.n	8003a34 <HAL_LTDC_Init+0x94>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8003b8a:	21d6      	movs	r1, #214	; 0xd6
 8003b8c:	4806      	ldr	r0, [pc, #24]	; (8003ba8 <HAL_LTDC_Init+0x208>)
 8003b8e:	f011 f9cb 	bl	8014f28 <assert_failed>
 8003b92:	e756      	b.n	8003a42 <HAL_LTDC_Init+0xa2>
    hltdc->Lock = HAL_UNLOCKED;
 8003b94:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f010 fd8b 	bl	80146b4 <HAL_LTDC_MspInit>
 8003b9e:	e755      	b.n	8003a4c <HAL_LTDC_Init+0xac>
    return HAL_ERROR;
 8003ba0:	2001      	movs	r0, #1
}
 8003ba2:	4770      	bx	lr
 8003ba4:	40016800 	.word	0x40016800
 8003ba8:	0801a8d8 	.word	0x0801a8d8
 8003bac:	f000f800 	.word	0xf000f800

08003bb0 <HAL_LTDC_ConfigLayer>:
{
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	4605      	mov	r5, r0
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	4616      	mov	r6, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003bb8:	2a01      	cmp	r2, #1
 8003bba:	d85a      	bhi.n	8003c72 <HAL_LTDC_ConfigLayer+0xc2>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc2:	d25c      	bcs.n	8003c7e <HAL_LTDC_ConfigLayer+0xce>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bca:	d25e      	bcs.n	8003c8a <HAL_LTDC_ConfigLayer+0xda>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8003bcc:	68a3      	ldr	r3, [r4, #8]
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d260      	bcs.n	8003c96 <HAL_LTDC_ConfigLayer+0xe6>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8003bd4:	68e3      	ldr	r3, [r4, #12]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d262      	bcs.n	8003ca2 <HAL_LTDC_ConfigLayer+0xf2>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8003bdc:	6923      	ldr	r3, [r4, #16]
 8003bde:	2b07      	cmp	r3, #7
 8003be0:	d865      	bhi.n	8003cae <HAL_LTDC_ConfigLayer+0xfe>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 8003be2:	6963      	ldr	r3, [r4, #20]
 8003be4:	2bff      	cmp	r3, #255	; 0xff
 8003be6:	d868      	bhi.n	8003cba <HAL_LTDC_ConfigLayer+0x10a>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 8003be8:	69a3      	ldr	r3, [r4, #24]
 8003bea:	2bff      	cmp	r3, #255	; 0xff
 8003bec:	d86b      	bhi.n	8003cc6 <HAL_LTDC_ConfigLayer+0x116>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8003bee:	69e3      	ldr	r3, [r4, #28]
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf4:	bf18      	it	ne
 8003bf6:	f5b3 6fc0 	cmpne.w	r3, #1536	; 0x600
 8003bfa:	d16a      	bne.n	8003cd2 <HAL_LTDC_ConfigLayer+0x122>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 8003bfc:	6a23      	ldr	r3, [r4, #32]
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	bf18      	it	ne
 8003c02:	2b07      	cmpne	r3, #7
 8003c04:	d16b      	bne.n	8003cde <HAL_LTDC_ConfigLayer+0x12e>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 8003c06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0c:	d26d      	bcs.n	8003cea <HAL_LTDC_ConfigLayer+0x13a>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8003c0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d26f      	bcs.n	8003cf6 <HAL_LTDC_ConfigLayer+0x146>
  __HAL_LOCK(hltdc);
 8003c16:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d071      	beq.n	8003d02 <HAL_LTDC_ConfigLayer+0x152>
 8003c1e:	2701      	movs	r7, #1
 8003c20:	f885 70a0 	strb.w	r7, [r5, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c24:	2302      	movs	r3, #2
 8003c26:	f885 30a1 	strb.w	r3, [r5, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c2a:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8003c2e:	fb0c 5c06 	mla	ip, ip, r6, r5
 8003c32:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8003c36:	46a6      	mov	lr, r4
 8003c38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003c3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003c40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003c44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003c48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003c4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003c50:	f8de 3000 	ldr.w	r3, [lr]
 8003c54:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003c58:	4632      	mov	r2, r6
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f7ff fdc3 	bl	80037e8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c62:	682b      	ldr	r3, [r5, #0]
 8003c64:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003c66:	f885 70a1 	strb.w	r7, [r5, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0
}
 8003c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003c72:	f240 21fe 	movw	r1, #766	; 0x2fe
 8003c76:	4824      	ldr	r0, [pc, #144]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003c78:	f011 f956 	bl	8014f28 <assert_failed>
 8003c7c:	e79e      	b.n	8003bbc <HAL_LTDC_ConfigLayer+0xc>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8003c7e:	f240 21ff 	movw	r1, #767	; 0x2ff
 8003c82:	4821      	ldr	r0, [pc, #132]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003c84:	f011 f950 	bl	8014f28 <assert_failed>
 8003c88:	e79c      	b.n	8003bc4 <HAL_LTDC_ConfigLayer+0x14>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8003c8a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003c8e:	481e      	ldr	r0, [pc, #120]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003c90:	f011 f94a 	bl	8014f28 <assert_failed>
 8003c94:	e79a      	b.n	8003bcc <HAL_LTDC_ConfigLayer+0x1c>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8003c96:	f240 3101 	movw	r1, #769	; 0x301
 8003c9a:	481b      	ldr	r0, [pc, #108]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003c9c:	f011 f944 	bl	8014f28 <assert_failed>
 8003ca0:	e798      	b.n	8003bd4 <HAL_LTDC_ConfigLayer+0x24>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8003ca2:	f240 3102 	movw	r1, #770	; 0x302
 8003ca6:	4818      	ldr	r0, [pc, #96]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003ca8:	f011 f93e 	bl	8014f28 <assert_failed>
 8003cac:	e796      	b.n	8003bdc <HAL_LTDC_ConfigLayer+0x2c>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8003cae:	f240 3103 	movw	r1, #771	; 0x303
 8003cb2:	4815      	ldr	r0, [pc, #84]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003cb4:	f011 f938 	bl	8014f28 <assert_failed>
 8003cb8:	e793      	b.n	8003be2 <HAL_LTDC_ConfigLayer+0x32>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 8003cba:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003cbe:	4812      	ldr	r0, [pc, #72]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003cc0:	f011 f932 	bl	8014f28 <assert_failed>
 8003cc4:	e790      	b.n	8003be8 <HAL_LTDC_ConfigLayer+0x38>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 8003cc6:	f240 3105 	movw	r1, #773	; 0x305
 8003cca:	480f      	ldr	r0, [pc, #60]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003ccc:	f011 f92c 	bl	8014f28 <assert_failed>
 8003cd0:	e78d      	b.n	8003bee <HAL_LTDC_ConfigLayer+0x3e>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8003cd2:	f240 3106 	movw	r1, #774	; 0x306
 8003cd6:	480c      	ldr	r0, [pc, #48]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003cd8:	f011 f926 	bl	8014f28 <assert_failed>
 8003cdc:	e78e      	b.n	8003bfc <HAL_LTDC_ConfigLayer+0x4c>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 8003cde:	f240 3107 	movw	r1, #775	; 0x307
 8003ce2:	4809      	ldr	r0, [pc, #36]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003ce4:	f011 f920 	bl	8014f28 <assert_failed>
 8003ce8:	e78d      	b.n	8003c06 <HAL_LTDC_ConfigLayer+0x56>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 8003cea:	f44f 7142 	mov.w	r1, #776	; 0x308
 8003cee:	4806      	ldr	r0, [pc, #24]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003cf0:	f011 f91a 	bl	8014f28 <assert_failed>
 8003cf4:	e78b      	b.n	8003c0e <HAL_LTDC_ConfigLayer+0x5e>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8003cf6:	f240 3109 	movw	r1, #777	; 0x309
 8003cfa:	4803      	ldr	r0, [pc, #12]	; (8003d08 <HAL_LTDC_ConfigLayer+0x158>)
 8003cfc:	f011 f914 	bl	8014f28 <assert_failed>
 8003d00:	e789      	b.n	8003c16 <HAL_LTDC_ConfigLayer+0x66>
  __HAL_LOCK(hltdc);
 8003d02:	2002      	movs	r0, #2
 8003d04:	e7b4      	b.n	8003c70 <HAL_LTDC_ConfigLayer+0xc0>
 8003d06:	bf00      	nop
 8003d08:	0801a8d8 	.word	0x0801a8d8

08003d0c <HAL_LTDC_SetAddress>:
{
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	4604      	mov	r4, r0
 8003d10:	460e      	mov	r6, r1
 8003d12:	4615      	mov	r5, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003d14:	2a01      	cmp	r2, #1
 8003d16:	d81d      	bhi.n	8003d54 <HAL_LTDC_SetAddress+0x48>
  __HAL_LOCK(hltdc);
 8003d18:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d01f      	beq.n	8003d60 <HAL_LTDC_SetAddress+0x54>
 8003d20:	2701      	movs	r7, #1
 8003d22:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003d2c:	2334      	movs	r3, #52	; 0x34
 8003d2e:	fb05 f303 	mul.w	r3, r5, r3
 8003d32:	f103 0138 	add.w	r1, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8003d36:	4423      	add	r3, r4
 8003d38:	65de      	str	r6, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d3a:	462a      	mov	r2, r5
 8003d3c:	4421      	add	r1, r4
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f7ff fd52 	bl	80037e8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d48:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003d54:	f240 5111 	movw	r1, #1297	; 0x511
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <HAL_LTDC_SetAddress+0x58>)
 8003d5a:	f011 f8e5 	bl	8014f28 <assert_failed>
 8003d5e:	e7db      	b.n	8003d18 <HAL_LTDC_SetAddress+0xc>
  __HAL_LOCK(hltdc);
 8003d60:	2002      	movs	r0, #2
 8003d62:	e7f6      	b.n	8003d52 <HAL_LTDC_SetAddress+0x46>
 8003d64:	0801a8d8 	.word	0x0801a8d8

08003d68 <HAL_LTDC_Reload>:
{
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	460d      	mov	r5, r1
  assert_param(IS_LTDC_RELOAD(ReloadType));
 8003d6e:	1e4b      	subs	r3, r1, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d816      	bhi.n	8003da2 <HAL_LTDC_Reload+0x3a>
  __HAL_LOCK(hltdc);
 8003d74:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d018      	beq.n	8003dae <HAL_LTDC_Reload+0x46>
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8003d88:	6821      	ldr	r1, [r4, #0]
 8003d8a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003d8c:	f043 0308 	orr.w	r3, r3, #8
 8003d90:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d96:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003da0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LTDC_RELOAD(ReloadType));
 8003da2:	f240 51aa 	movw	r1, #1450	; 0x5aa
 8003da6:	4803      	ldr	r0, [pc, #12]	; (8003db4 <HAL_LTDC_Reload+0x4c>)
 8003da8:	f011 f8be 	bl	8014f28 <assert_failed>
 8003dac:	e7e2      	b.n	8003d74 <HAL_LTDC_Reload+0xc>
  __HAL_LOCK(hltdc);
 8003dae:	2002      	movs	r0, #2
 8003db0:	e7f6      	b.n	8003da0 <HAL_LTDC_Reload+0x38>
 8003db2:	bf00      	nop
 8003db4:	0801a8d8 	.word	0x0801a8d8

08003db8 <HAL_LTDC_SetAlpha_NoReload>:
{
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	4604      	mov	r4, r0
 8003dbc:	460e      	mov	r6, r1
 8003dbe:	4615      	mov	r5, r2
  assert_param(IS_LTDC_ALPHA(Alpha));
 8003dc0:	29ff      	cmp	r1, #255	; 0xff
 8003dc2:	d81d      	bhi.n	8003e00 <HAL_LTDC_SetAlpha_NoReload+0x48>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003dc4:	2d01      	cmp	r5, #1
 8003dc6:	d821      	bhi.n	8003e0c <HAL_LTDC_SetAlpha_NoReload+0x54>
  __HAL_LOCK(hltdc);
 8003dc8:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d023      	beq.n	8003e18 <HAL_LTDC_SetAlpha_NoReload+0x60>
 8003dd0:	2701      	movs	r7, #1
 8003dd2:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003ddc:	2334      	movs	r3, #52	; 0x34
 8003dde:	fb05 f303 	mul.w	r3, r5, r3
 8003de2:	f103 0138 	add.w	r1, r3, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 8003de6:	4423      	add	r3, r4
 8003de8:	64de      	str	r6, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003dea:	462a      	mov	r2, r5
 8003dec:	4421      	add	r1, r4
 8003dee:	4620      	mov	r0, r4
 8003df0:	f7ff fcfa 	bl	80037e8 <LTDC_SetConfig>
  hltdc->State = HAL_LTDC_STATE_READY;
 8003df4:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LTDC_ALPHA(Alpha));
 8003e00:	f240 6196 	movw	r1, #1686	; 0x696
 8003e04:	4805      	ldr	r0, [pc, #20]	; (8003e1c <HAL_LTDC_SetAlpha_NoReload+0x64>)
 8003e06:	f011 f88f 	bl	8014f28 <assert_failed>
 8003e0a:	e7db      	b.n	8003dc4 <HAL_LTDC_SetAlpha_NoReload+0xc>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003e0c:	f240 6197 	movw	r1, #1687	; 0x697
 8003e10:	4802      	ldr	r0, [pc, #8]	; (8003e1c <HAL_LTDC_SetAlpha_NoReload+0x64>)
 8003e12:	f011 f889 	bl	8014f28 <assert_failed>
 8003e16:	e7d7      	b.n	8003dc8 <HAL_LTDC_SetAlpha_NoReload+0x10>
  __HAL_LOCK(hltdc);
 8003e18:	2002      	movs	r0, #2
 8003e1a:	e7f0      	b.n	8003dfe <HAL_LTDC_SetAlpha_NoReload+0x46>
 8003e1c:	0801a8d8 	.word	0x0801a8d8

08003e20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e20:	b510      	push	{r4, lr}
 8003e22:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <HAL_PWREx_EnableOverDrive+0x74>)
 8003e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e38:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x78>)
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e42:	f7fd f9ff 	bl	8001244 <HAL_GetTick>
 8003e46:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x78>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e50:	d108      	bne.n	8003e64 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e52:	f7fd f9f7 	bl	8001244 <HAL_GetTick>
 8003e56:	1b00      	subs	r0, r0, r4
 8003e58:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e5c:	d9f4      	bls.n	8003e48 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8003e5e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003e60:	b002      	add	sp, #8
 8003e62:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e64:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x78>)
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003e6e:	f7fd f9e9 	bl	8001244 <HAL_GetTick>
 8003e72:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x78>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e7c:	d107      	bne.n	8003e8e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e7e:	f7fd f9e1 	bl	8001244 <HAL_GetTick>
 8003e82:	1b00      	subs	r0, r0, r4
 8003e84:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e88:	d9f4      	bls.n	8003e74 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003e8a:	2003      	movs	r0, #3
 8003e8c:	e7e8      	b.n	8003e60 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003e8e:	2000      	movs	r0, #0
 8003e90:	e7e6      	b.n	8003e60 <HAL_PWREx_EnableOverDrive+0x40>
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40007000 	.word	0x40007000

08003e9c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	f000 8262 	beq.w	8004366 <HAL_RCC_OscConfig+0x4ca>
{
 8003ea2:	b570      	push	{r4, r5, r6, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003ea8:	6803      	ldr	r3, [r0, #0]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	d828      	bhi.n	8003f00 <HAL_RCC_OscConfig+0x64>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	f013 0f01 	tst.w	r3, #1
 8003eb4:	d03e      	beq.n	8003f34 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf18      	it	ne
 8003ebc:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8003ec0:	d002      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x2c>
 8003ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec6:	d121      	bne.n	8003f0c <HAL_RCC_OscConfig+0x70>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec8:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d026      	beq.n	8003f22 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed4:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d01b      	beq.n	8003f18 <HAL_RCC_OscConfig+0x7c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee0:	6863      	ldr	r3, [r4, #4]
 8003ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee6:	d054      	beq.n	8003f92 <HAL_RCC_OscConfig+0xf6>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d168      	bne.n	8003fbe <HAL_RCC_OscConfig+0x122>
 8003eec:	4b82      	ldr	r3, [pc, #520]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e04d      	b.n	8003f9c <HAL_RCC_OscConfig+0x100>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f00:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8003f04:	487d      	ldr	r0, [pc, #500]	; (80040fc <HAL_RCC_OscConfig+0x260>)
 8003f06:	f011 f80f 	bl	8014f28 <assert_failed>
 8003f0a:	e7d0      	b.n	8003eae <HAL_RCC_OscConfig+0x12>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f0c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8003f10:	487a      	ldr	r0, [pc, #488]	; (80040fc <HAL_RCC_OscConfig+0x260>)
 8003f12:	f011 f809 	bl	8014f28 <assert_failed>
 8003f16:	e7d7      	b.n	8003ec8 <HAL_RCC_OscConfig+0x2c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f18:	4b77      	ldr	r3, [pc, #476]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003f20:	d0de      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x44>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f22:	4b75      	ldr	r3, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f2a:	d003      	beq.n	8003f34 <HAL_RCC_OscConfig+0x98>
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 821b 	beq.w	800436a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	f013 0f02 	tst.w	r3, #2
 8003f3a:	f000 8088 	beq.w	800404e <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003f3e:	68e3      	ldr	r3, [r4, #12]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d862      	bhi.n	800400a <HAL_RCC_OscConfig+0x16e>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003f44:	6923      	ldr	r3, [r4, #16]
 8003f46:	2b1f      	cmp	r3, #31
 8003f48:	d865      	bhi.n	8004016 <HAL_RCC_OscConfig+0x17a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f4a:	4b6b      	ldr	r3, [pc, #428]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f013 0f0c 	tst.w	r3, #12
 8003f52:	d06b      	beq.n	800402c <HAL_RCC_OscConfig+0x190>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f54:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d060      	beq.n	8004022 <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f60:	68e3      	ldr	r3, [r4, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 809a 	beq.w	800409c <HAL_RCC_OscConfig+0x200>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f68:	4a63      	ldr	r2, [pc, #396]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7fd f967 	bl	8001244 <HAL_GetTick>
 8003f76:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f78:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f013 0f02 	tst.w	r3, #2
 8003f80:	f040 8083 	bne.w	800408a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f84:	f7fd f95e 	bl	8001244 <HAL_GetTick>
 8003f88:	1b40      	subs	r0, r0, r5
 8003f8a:	2802      	cmp	r0, #2
 8003f8c:	d9f4      	bls.n	8003f78 <HAL_RCC_OscConfig+0xdc>
          {
            return HAL_TIMEOUT;
 8003f8e:	2003      	movs	r0, #3
 8003f90:	e1f0      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f92:	4a59      	ldr	r2, [pc, #356]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003f94:	6813      	ldr	r3, [r2, #0]
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f9c:	6863      	ldr	r3, [r4, #4]
 8003f9e:	b32b      	cbz	r3, 8003fec <HAL_RCC_OscConfig+0x150>
        tickstart = HAL_GetTick();
 8003fa0:	f7fd f950 	bl	8001244 <HAL_GetTick>
 8003fa4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	4b54      	ldr	r3, [pc, #336]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fae:	d1c1      	bne.n	8003f34 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fd f948 	bl	8001244 <HAL_GetTick>
 8003fb4:	1b40      	subs	r0, r0, r5
 8003fb6:	2864      	cmp	r0, #100	; 0x64
 8003fb8:	d9f5      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003fba:	2003      	movs	r0, #3
 8003fbc:	e1da      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc2:	d009      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x13c>
 8003fc4:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e7e1      	b.n	8003f9c <HAL_RCC_OscConfig+0x100>
 8003fd8:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e7d7      	b.n	8003f9c <HAL_RCC_OscConfig+0x100>
        tickstart = HAL_GetTick();
 8003fec:	f7fd f92a 	bl	8001244 <HAL_GetTick>
 8003ff0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ffa:	d09b      	beq.n	8003f34 <HAL_RCC_OscConfig+0x98>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fd f922 	bl	8001244 <HAL_GetTick>
 8004000:	1b40      	subs	r0, r0, r5
 8004002:	2864      	cmp	r0, #100	; 0x64
 8004004:	d9f5      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x156>
            return HAL_TIMEOUT;
 8004006:	2003      	movs	r0, #3
 8004008:	e1b4      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800400a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800400e:	483b      	ldr	r0, [pc, #236]	; (80040fc <HAL_RCC_OscConfig+0x260>)
 8004010:	f010 ff8a 	bl	8014f28 <assert_failed>
 8004014:	e796      	b.n	8003f44 <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004016:	f240 119d 	movw	r1, #413	; 0x19d
 800401a:	4838      	ldr	r0, [pc, #224]	; (80040fc <HAL_RCC_OscConfig+0x260>)
 800401c:	f010 ff84 	bl	8014f28 <assert_failed>
 8004020:	e793      	b.n	8003f4a <HAL_RCC_OscConfig+0xae>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004022:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800402a:	d199      	bne.n	8003f60 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402c:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f013 0f02 	tst.w	r3, #2
 8004034:	d003      	beq.n	800403e <HAL_RCC_OscConfig+0x1a2>
 8004036:	68e3      	ldr	r3, [r4, #12]
 8004038:	2b01      	cmp	r3, #1
 800403a:	f040 8198 	bne.w	800436e <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8004040:	6813      	ldr	r3, [r2, #0]
 8004042:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004046:	6921      	ldr	r1, [r4, #16]
 8004048:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800404c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	f013 0f08 	tst.w	r3, #8
 8004054:	d054      	beq.n	8004100 <HAL_RCC_OscConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004056:	6963      	ldr	r3, [r4, #20]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d833      	bhi.n	80040c4 <HAL_RCC_OscConfig+0x228>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800405c:	6963      	ldr	r3, [r4, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d036      	beq.n	80040d0 <HAL_RCC_OscConfig+0x234>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004062:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8004064:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd f8ea 	bl	8001244 <HAL_GetTick>
 8004070:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 8004074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004076:	f013 0f02 	tst.w	r3, #2
 800407a:	d141      	bne.n	8004100 <HAL_RCC_OscConfig+0x264>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407c:	f7fd f8e2 	bl	8001244 <HAL_GetTick>
 8004080:	1b40      	subs	r0, r0, r5
 8004082:	2802      	cmp	r0, #2
 8004084:	d9f5      	bls.n	8004072 <HAL_RCC_OscConfig+0x1d6>
        {
          return HAL_TIMEOUT;
 8004086:	2003      	movs	r0, #3
 8004088:	e174      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 800408c:	6813      	ldr	r3, [r2, #0]
 800408e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004092:	6921      	ldr	r1, [r4, #16]
 8004094:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e7d8      	b.n	800404e <HAL_RCC_OscConfig+0x1b2>
        __HAL_RCC_HSI_DISABLE();
 800409c:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040a6:	f7fd f8cd 	bl	8001244 <HAL_GetTick>
 80040aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ac:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f013 0f02 	tst.w	r3, #2
 80040b4:	d0cb      	beq.n	800404e <HAL_RCC_OscConfig+0x1b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b6:	f7fd f8c5 	bl	8001244 <HAL_GetTick>
 80040ba:	1b40      	subs	r0, r0, r5
 80040bc:	2802      	cmp	r0, #2
 80040be:	d9f5      	bls.n	80040ac <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 80040c0:	2003      	movs	r0, #3
 80040c2:	e157      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80040c4:	f240 11dd 	movw	r1, #477	; 0x1dd
 80040c8:	480c      	ldr	r0, [pc, #48]	; (80040fc <HAL_RCC_OscConfig+0x260>)
 80040ca:	f010 ff2d 	bl	8014f28 <assert_failed>
 80040ce:	e7c5      	b.n	800405c <HAL_RCC_OscConfig+0x1c0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d0:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 80040d2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040da:	f7fd f8b3 	bl	8001244 <HAL_GetTick>
 80040de:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_OscConfig+0x25c>)
 80040e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e4:	f013 0f02 	tst.w	r3, #2
 80040e8:	d00a      	beq.n	8004100 <HAL_RCC_OscConfig+0x264>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ea:	f7fd f8ab 	bl	8001244 <HAL_GetTick>
 80040ee:	1b40      	subs	r0, r0, r5
 80040f0:	2802      	cmp	r0, #2
 80040f2:	d9f5      	bls.n	80040e0 <HAL_RCC_OscConfig+0x244>
        {
          return HAL_TIMEOUT;
 80040f4:	2003      	movs	r0, #3
 80040f6:	e13d      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
 80040f8:	40023800 	.word	0x40023800
 80040fc:	0801a914 	.word	0x0801a914
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	f013 0f04 	tst.w	r3, #4
 8004106:	f000 8086 	beq.w	8004216 <HAL_RCC_OscConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800410a:	68a3      	ldr	r3, [r4, #8]
 800410c:	2b05      	cmp	r3, #5
 800410e:	bf18      	it	ne
 8004110:	2b01      	cmpne	r3, #1
 8004112:	d823      	bhi.n	800415c <HAL_RCC_OscConfig+0x2c0>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004114:	4b99      	ldr	r3, [pc, #612]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800411c:	d124      	bne.n	8004168 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	4b97      	ldr	r3, [pc, #604]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 8004120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004122:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004132:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004134:	4b92      	ldr	r3, [pc, #584]	; (8004380 <HAL_RCC_OscConfig+0x4e4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f413 7f80 	tst.w	r3, #256	; 0x100
 800413c:	d016      	beq.n	800416c <HAL_RCC_OscConfig+0x2d0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413e:	68a3      	ldr	r3, [r4, #8]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d027      	beq.n	8004194 <HAL_RCC_OscConfig+0x2f8>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d13d      	bne.n	80041c4 <HAL_RCC_OscConfig+0x328>
 8004148:	4b8c      	ldr	r3, [pc, #560]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 800414a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	671a      	str	r2, [r3, #112]	; 0x70
 8004152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004154:	f022 0204 	bic.w	r2, r2, #4
 8004158:	671a      	str	r2, [r3, #112]	; 0x70
 800415a:	e020      	b.n	800419e <HAL_RCC_OscConfig+0x302>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800415c:	f240 2107 	movw	r1, #519	; 0x207
 8004160:	4888      	ldr	r0, [pc, #544]	; (8004384 <HAL_RCC_OscConfig+0x4e8>)
 8004162:	f010 fee1 	bl	8014f28 <assert_failed>
 8004166:	e7d5      	b.n	8004114 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8004168:	2500      	movs	r5, #0
 800416a:	e7e3      	b.n	8004134 <HAL_RCC_OscConfig+0x298>
      PWR->CR1 |= PWR_CR1_DBP;
 800416c:	4a84      	ldr	r2, [pc, #528]	; (8004380 <HAL_RCC_OscConfig+0x4e4>)
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004176:	f7fd f865 	bl	8001244 <HAL_GetTick>
 800417a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800417c:	4b80      	ldr	r3, [pc, #512]	; (8004380 <HAL_RCC_OscConfig+0x4e4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004184:	d1db      	bne.n	800413e <HAL_RCC_OscConfig+0x2a2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7fd f85d 	bl	8001244 <HAL_GetTick>
 800418a:	1b80      	subs	r0, r0, r6
 800418c:	2864      	cmp	r0, #100	; 0x64
 800418e:	d9f5      	bls.n	800417c <HAL_RCC_OscConfig+0x2e0>
          return HAL_TIMEOUT;
 8004190:	2003      	movs	r0, #3
 8004192:	e0ef      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004194:	4a79      	ldr	r2, [pc, #484]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 8004196:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800419e:	68a3      	ldr	r3, [r4, #8]
 80041a0:	b333      	cbz	r3, 80041f0 <HAL_RCC_OscConfig+0x354>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a2:	f7fd f84f 	bl	8001244 <HAL_GetTick>
 80041a6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a8:	4b74      	ldr	r3, [pc, #464]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ac:	f013 0f02 	tst.w	r3, #2
 80041b0:	d12f      	bne.n	8004212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fd f847 	bl	8001244 <HAL_GetTick>
 80041b6:	1b80      	subs	r0, r0, r6
 80041b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80041bc:	4298      	cmp	r0, r3
 80041be:	d9f3      	bls.n	80041a8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80041c0:	2003      	movs	r0, #3
 80041c2:	e0d7      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d009      	beq.n	80041dc <HAL_RCC_OscConfig+0x340>
 80041c8:	4b6c      	ldr	r3, [pc, #432]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 80041ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	671a      	str	r2, [r3, #112]	; 0x70
 80041d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041d4:	f022 0204 	bic.w	r2, r2, #4
 80041d8:	671a      	str	r2, [r3, #112]	; 0x70
 80041da:	e7e0      	b.n	800419e <HAL_RCC_OscConfig+0x302>
 80041dc:	4b67      	ldr	r3, [pc, #412]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 80041de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041e0:	f042 0204 	orr.w	r2, r2, #4
 80041e4:	671a      	str	r2, [r3, #112]	; 0x70
 80041e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	671a      	str	r2, [r3, #112]	; 0x70
 80041ee:	e7d6      	b.n	800419e <HAL_RCC_OscConfig+0x302>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fd f828 	bl	8001244 <HAL_GetTick>
 80041f4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f6:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	f013 0f02 	tst.w	r3, #2
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004200:	f7fd f820 	bl	8001244 <HAL_GetTick>
 8004204:	1b80      	subs	r0, r0, r6
 8004206:	f241 3388 	movw	r3, #5000	; 0x1388
 800420a:	4298      	cmp	r0, r3
 800420c:	d9f3      	bls.n	80041f6 <HAL_RCC_OscConfig+0x35a>
        {
          return HAL_TIMEOUT;
 800420e:	2003      	movs	r0, #3
 8004210:	e0b0      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004212:	2d00      	cmp	r5, #0
 8004214:	d140      	bne.n	8004298 <HAL_RCC_OscConfig+0x3fc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004216:	69a3      	ldr	r3, [r4, #24]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d843      	bhi.n	80042a4 <HAL_RCC_OscConfig+0x408>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421c:	69a3      	ldr	r3, [r4, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80a7 	beq.w	8004372 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004224:	4a55      	ldr	r2, [pc, #340]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 8004226:	6892      	ldr	r2, [r2, #8]
 8004228:	f002 020c 	and.w	r2, r2, #12
 800422c:	2a08      	cmp	r2, #8
 800422e:	f000 80a3 	beq.w	8004378 <HAL_RCC_OscConfig+0x4dc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004232:	2b02      	cmp	r3, #2
 8004234:	f040 8081 	bne.w	800433a <HAL_RCC_OscConfig+0x49e>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004238:	69e3      	ldr	r3, [r4, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf18      	it	ne
 800423e:	f5b3 0f80 	cmpne.w	r3, #4194304	; 0x400000
 8004242:	d135      	bne.n	80042b0 <HAL_RCC_OscConfig+0x414>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004244:	6a23      	ldr	r3, [r4, #32]
 8004246:	3b02      	subs	r3, #2
 8004248:	2b3d      	cmp	r3, #61	; 0x3d
 800424a:	d837      	bhi.n	80042bc <HAL_RCC_OscConfig+0x420>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800424c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800424e:	3b32      	subs	r3, #50	; 0x32
 8004250:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004254:	d838      	bhi.n	80042c8 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004256:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004258:	2b02      	cmp	r3, #2
 800425a:	bf18      	it	ne
 800425c:	2b04      	cmpne	r3, #4
 800425e:	d003      	beq.n	8004268 <HAL_RCC_OscConfig+0x3cc>
 8004260:	2b06      	cmp	r3, #6
 8004262:	d001      	beq.n	8004268 <HAL_RCC_OscConfig+0x3cc>
 8004264:	2b08      	cmp	r3, #8
 8004266:	d135      	bne.n	80042d4 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004268:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800426a:	3b02      	subs	r3, #2
 800426c:	2b0d      	cmp	r3, #13
 800426e:	d837      	bhi.n	80042e0 <HAL_RCC_OscConfig+0x444>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004270:	4a42      	ldr	r2, [pc, #264]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7fc ffe3 	bl	8001244 <HAL_GetTick>
 800427e:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004280:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004288:	d030      	beq.n	80042ec <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428a:	f7fc ffdb 	bl	8001244 <HAL_GetTick>
 800428e:	1b40      	subs	r0, r0, r5
 8004290:	2802      	cmp	r0, #2
 8004292:	d9f5      	bls.n	8004280 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004294:	2003      	movs	r0, #3
 8004296:	e06d      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004298:	4a38      	ldr	r2, [pc, #224]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 800429a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6413      	str	r3, [r2, #64]	; 0x40
 80042a2:	e7b8      	b.n	8004216 <HAL_RCC_OscConfig+0x37a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80042a4:	f240 214b 	movw	r1, #587	; 0x24b
 80042a8:	4836      	ldr	r0, [pc, #216]	; (8004384 <HAL_RCC_OscConfig+0x4e8>)
 80042aa:	f010 fe3d 	bl	8014f28 <assert_failed>
 80042ae:	e7b5      	b.n	800421c <HAL_RCC_OscConfig+0x380>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80042b0:	f44f 7115 	mov.w	r1, #596	; 0x254
 80042b4:	4833      	ldr	r0, [pc, #204]	; (8004384 <HAL_RCC_OscConfig+0x4e8>)
 80042b6:	f010 fe37 	bl	8014f28 <assert_failed>
 80042ba:	e7c3      	b.n	8004244 <HAL_RCC_OscConfig+0x3a8>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80042bc:	f240 2155 	movw	r1, #597	; 0x255
 80042c0:	4830      	ldr	r0, [pc, #192]	; (8004384 <HAL_RCC_OscConfig+0x4e8>)
 80042c2:	f010 fe31 	bl	8014f28 <assert_failed>
 80042c6:	e7c1      	b.n	800424c <HAL_RCC_OscConfig+0x3b0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80042c8:	f240 2156 	movw	r1, #598	; 0x256
 80042cc:	482d      	ldr	r0, [pc, #180]	; (8004384 <HAL_RCC_OscConfig+0x4e8>)
 80042ce:	f010 fe2b 	bl	8014f28 <assert_failed>
 80042d2:	e7c0      	b.n	8004256 <HAL_RCC_OscConfig+0x3ba>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80042d4:	f240 2157 	movw	r1, #599	; 0x257
 80042d8:	482a      	ldr	r0, [pc, #168]	; (8004384 <HAL_RCC_OscConfig+0x4e8>)
 80042da:	f010 fe25 	bl	8014f28 <assert_failed>
 80042de:	e7c3      	b.n	8004268 <HAL_RCC_OscConfig+0x3cc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80042e0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80042e4:	4827      	ldr	r0, [pc, #156]	; (8004384 <HAL_RCC_OscConfig+0x4e8>)
 80042e6:	f010 fe1f 	bl	8014f28 <assert_failed>
 80042ea:	e7c1      	b.n	8004270 <HAL_RCC_OscConfig+0x3d4>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ec:	69e3      	ldr	r3, [r4, #28]
 80042ee:	6a22      	ldr	r2, [r4, #32]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80042f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004302:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004304:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800430c:	4a1b      	ldr	r2, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 800430e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	6813      	ldr	r3, [r2, #0]
 8004312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fc ff94 	bl	8001244 <HAL_GetTick>
 800431c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431e:	4b17      	ldr	r3, [pc, #92]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x49a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fc ff8c 	bl	8001244 <HAL_GetTick>
 800432c:	1b00      	subs	r0, r0, r4
 800432e:	2802      	cmp	r0, #2
 8004330:	d9f5      	bls.n	800431e <HAL_RCC_OscConfig+0x482>
          {
            return HAL_TIMEOUT;
 8004332:	2003      	movs	r0, #3
 8004334:	e01e      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004336:	2000      	movs	r0, #0
 8004338:	e01c      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_PLL_DISABLE();
 800433a:	4a10      	ldr	r2, [pc, #64]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 800433c:	6813      	ldr	r3, [r2, #0]
 800433e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004342:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004344:	f7fc ff7e 	bl	8001244 <HAL_GetTick>
 8004348:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	4b0c      	ldr	r3, [pc, #48]	; (800437c <HAL_RCC_OscConfig+0x4e0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004352:	d006      	beq.n	8004362 <HAL_RCC_OscConfig+0x4c6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004354:	f7fc ff76 	bl	8001244 <HAL_GetTick>
 8004358:	1b00      	subs	r0, r0, r4
 800435a:	2802      	cmp	r0, #2
 800435c:	d9f5      	bls.n	800434a <HAL_RCC_OscConfig+0x4ae>
            return HAL_TIMEOUT;
 800435e:	2003      	movs	r0, #3
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 8004362:	2000      	movs	r0, #0
 8004364:	e006      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
    return HAL_ERROR;
 8004366:	2001      	movs	r0, #1
}
 8004368:	4770      	bx	lr
        return HAL_ERROR;
 800436a:	2001      	movs	r0, #1
 800436c:	e002      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 800436e:	2001      	movs	r0, #1
 8004370:	e000      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 8004372:	2000      	movs	r0, #0
}
 8004374:	b002      	add	sp, #8
 8004376:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004378:	2001      	movs	r0, #1
 800437a:	e7fb      	b.n	8004374 <HAL_RCC_OscConfig+0x4d8>
 800437c:	40023800 	.word	0x40023800
 8004380:	40007000 	.word	0x40007000
 8004384:	0801a914 	.word	0x0801a914

08004388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004388:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800438a:	4b25      	ldr	r3, [pc, #148]	; (8004420 <HAL_RCC_GetSysClockFreq+0x98>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b04      	cmp	r3, #4
 8004394:	d03f      	beq.n	8004416 <HAL_RCC_GetSysClockFreq+0x8e>
 8004396:	2b08      	cmp	r3, #8
 8004398:	d13f      	bne.n	800441a <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <HAL_RCC_GetSysClockFreq+0x98>)
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80043a8:	d012      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_RCC_GetSysClockFreq+0x98>)
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80043b2:	481c      	ldr	r0, [pc, #112]	; (8004424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043b4:	2300      	movs	r3, #0
 80043b6:	fba1 0100 	umull	r0, r1, r1, r0
 80043ba:	f7fc fd5d 	bl	8000e78 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80043be:	4b18      	ldr	r3, [pc, #96]	; (8004420 <HAL_RCC_GetSysClockFreq+0x98>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80043c6:	3301      	adds	r3, #1
 80043c8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80043ca:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80043ce:	e025      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCC_GetSysClockFreq+0x98>)
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80043d8:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80043dc:	ebb1 000c 	subs.w	r0, r1, ip
 80043e0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80043e4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80043e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ec:	0181      	lsls	r1, r0, #6
 80043ee:	1a09      	subs	r1, r1, r0
 80043f0:	eb63 030e 	sbc.w	r3, r3, lr
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fa:	00c9      	lsls	r1, r1, #3
 80043fc:	eb11 0c0c 	adds.w	ip, r1, ip
 8004400:	f143 0300 	adc.w	r3, r3, #0
 8004404:	0299      	lsls	r1, r3, #10
 8004406:	2300      	movs	r3, #0
 8004408:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800440c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8004410:	f7fc fd32 	bl	8000e78 <__aeabi_uldivmod>
 8004414:	e7d3      	b.n	80043be <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8004416:	4803      	ldr	r0, [pc, #12]	; (8004424 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004418:	e000      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800441a:	4803      	ldr	r0, [pc, #12]	; (8004428 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800441c:	bd08      	pop	{r3, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	017d7840 	.word	0x017d7840
 8004428:	00f42400 	.word	0x00f42400

0800442c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800442c:	2800      	cmp	r0, #0
 800442e:	f000 80fe 	beq.w	800462e <HAL_RCC_ClockConfig+0x202>
{
 8004432:	b570      	push	{r4, r5, r6, lr}
 8004434:	460d      	mov	r5, r1
 8004436:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004438:	6803      	ldr	r3, [r0, #0]
 800443a:	3b01      	subs	r3, #1
 800443c:	2b0e      	cmp	r3, #14
 800443e:	d86e      	bhi.n	800451e <HAL_RCC_ClockConfig+0xf2>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004440:	2d0f      	cmp	r5, #15
 8004442:	d872      	bhi.n	800452a <HAL_RCC_ClockConfig+0xfe>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b7e      	ldr	r3, [pc, #504]	; (8004640 <HAL_RCC_ClockConfig+0x214>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	42ab      	cmp	r3, r5
 800444e:	d20b      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004450:	4a7b      	ldr	r2, [pc, #492]	; (8004640 <HAL_RCC_ClockConfig+0x214>)
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	f023 030f 	bic.w	r3, r3, #15
 8004458:	432b      	orrs	r3, r5
 800445a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445c:	6813      	ldr	r3, [r2, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	42ab      	cmp	r3, r5
 8004464:	f040 80e5 	bne.w	8004632 <HAL_RCC_ClockConfig+0x206>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	f013 0f02 	tst.w	r3, #2
 800446e:	d02a      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	f013 0f04 	tst.w	r3, #4
 8004474:	d004      	beq.n	8004480 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004476:	4a73      	ldr	r2, [pc, #460]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 8004478:	6893      	ldr	r3, [r2, #8]
 800447a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800447e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	f013 0f08 	tst.w	r3, #8
 8004486:	d004      	beq.n	8004492 <HAL_RCC_ClockConfig+0x66>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004488:	4a6e      	ldr	r2, [pc, #440]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 800448a:	6893      	ldr	r3, [r2, #8]
 800448c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004490:	6093      	str	r3, [r2, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004492:	68a3      	ldr	r3, [r4, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf18      	it	ne
 8004498:	2b80      	cmpne	r3, #128	; 0x80
 800449a:	d00d      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x8c>
 800449c:	2b90      	cmp	r3, #144	; 0x90
 800449e:	d00b      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x8c>
 80044a0:	2ba0      	cmp	r3, #160	; 0xa0
 80044a2:	d009      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x8c>
 80044a4:	2bb0      	cmp	r3, #176	; 0xb0
 80044a6:	d007      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x8c>
 80044a8:	2bc0      	cmp	r3, #192	; 0xc0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x8c>
 80044ac:	2bd0      	cmp	r3, #208	; 0xd0
 80044ae:	d003      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x8c>
 80044b0:	2be0      	cmp	r3, #224	; 0xe0
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x8c>
 80044b4:	2bf0      	cmp	r3, #240	; 0xf0
 80044b6:	d13e      	bne.n	8004536 <HAL_RCC_ClockConfig+0x10a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4a62      	ldr	r2, [pc, #392]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 80044ba:	6893      	ldr	r3, [r2, #8]
 80044bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c0:	68a1      	ldr	r1, [r4, #8]
 80044c2:	430b      	orrs	r3, r1
 80044c4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	f013 0f01 	tst.w	r3, #1
 80044cc:	d04d      	beq.n	800456a <HAL_RCC_ClockConfig+0x13e>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80044ce:	6863      	ldr	r3, [r4, #4]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d836      	bhi.n	8004542 <HAL_RCC_ClockConfig+0x116>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d039      	beq.n	800454e <HAL_RCC_ClockConfig+0x122>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d03e      	beq.n	800455c <HAL_RCC_ClockConfig+0x130>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044de:	4a59      	ldr	r2, [pc, #356]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	f012 0f02 	tst.w	r2, #2
 80044e6:	f000 80a6 	beq.w	8004636 <HAL_RCC_ClockConfig+0x20a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ea:	4956      	ldr	r1, [pc, #344]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 80044ec:	688a      	ldr	r2, [r1, #8]
 80044ee:	f022 0203 	bic.w	r2, r2, #3
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80044f6:	f7fc fea5 	bl	8001244 <HAL_GetTick>
 80044fa:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fc:	4b51      	ldr	r3, [pc, #324]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	6862      	ldr	r2, [r4, #4]
 8004506:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800450a:	d02e      	beq.n	800456a <HAL_RCC_ClockConfig+0x13e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fc fe9a 	bl	8001244 <HAL_GetTick>
 8004510:	1b80      	subs	r0, r0, r6
 8004512:	f241 3388 	movw	r3, #5000	; 0x1388
 8004516:	4298      	cmp	r0, r3
 8004518:	d9f0      	bls.n	80044fc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800451a:	2003      	movs	r0, #3
 800451c:	e07a      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800451e:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004522:	4849      	ldr	r0, [pc, #292]	; (8004648 <HAL_RCC_ClockConfig+0x21c>)
 8004524:	f010 fd00 	bl	8014f28 <assert_failed>
 8004528:	e78a      	b.n	8004440 <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800452a:	f240 21cb 	movw	r1, #715	; 0x2cb
 800452e:	4846      	ldr	r0, [pc, #280]	; (8004648 <HAL_RCC_ClockConfig+0x21c>)
 8004530:	f010 fcfa 	bl	8014f28 <assert_failed>
 8004534:	e786      	b.n	8004444 <HAL_RCC_ClockConfig+0x18>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004536:	f240 21ef 	movw	r1, #751	; 0x2ef
 800453a:	4843      	ldr	r0, [pc, #268]	; (8004648 <HAL_RCC_ClockConfig+0x21c>)
 800453c:	f010 fcf4 	bl	8014f28 <assert_failed>
 8004540:	e7ba      	b.n	80044b8 <HAL_RCC_ClockConfig+0x8c>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004542:	f240 21f6 	movw	r1, #758	; 0x2f6
 8004546:	4840      	ldr	r0, [pc, #256]	; (8004648 <HAL_RCC_ClockConfig+0x21c>)
 8004548:	f010 fcee 	bl	8014f28 <assert_failed>
 800454c:	e7c2      	b.n	80044d4 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4a3d      	ldr	r2, [pc, #244]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004556:	d1c8      	bne.n	80044ea <HAL_RCC_ClockConfig+0xbe>
        return HAL_ERROR;
 8004558:	2001      	movs	r0, #1
 800455a:	e05b      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455c:	4a39      	ldr	r2, [pc, #228]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004564:	d1c1      	bne.n	80044ea <HAL_RCC_ClockConfig+0xbe>
        return HAL_ERROR;
 8004566:	2001      	movs	r0, #1
 8004568:	e054      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800456a:	4b35      	ldr	r3, [pc, #212]	; (8004640 <HAL_RCC_ClockConfig+0x214>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	42ab      	cmp	r3, r5
 8004574:	d90a      	bls.n	800458c <HAL_RCC_ClockConfig+0x160>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4a32      	ldr	r2, [pc, #200]	; (8004640 <HAL_RCC_ClockConfig+0x214>)
 8004578:	6813      	ldr	r3, [r2, #0]
 800457a:	f023 030f 	bic.w	r3, r3, #15
 800457e:	432b      	orrs	r3, r5
 8004580:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	6813      	ldr	r3, [r2, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	42ab      	cmp	r3, r5
 800458a:	d156      	bne.n	800463a <HAL_RCC_ClockConfig+0x20e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	f013 0f04 	tst.w	r3, #4
 8004592:	d015      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x194>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004594:	68e3      	ldr	r3, [r4, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	bf18      	it	ne
 800459a:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 800459e:	d008      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x186>
 80045a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045a4:	d005      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x186>
 80045a6:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80045aa:	d002      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x186>
 80045ac:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80045b0:	d131      	bne.n	8004616 <HAL_RCC_ClockConfig+0x1ea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b2:	4a24      	ldr	r2, [pc, #144]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 80045b4:	6893      	ldr	r3, [r2, #8]
 80045b6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80045ba:	68e1      	ldr	r1, [r4, #12]
 80045bc:	430b      	orrs	r3, r1
 80045be:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	f013 0f08 	tst.w	r3, #8
 80045c6:	d016      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x1ca>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80045c8:	6923      	ldr	r3, [r4, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bf18      	it	ne
 80045ce:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 80045d2:	d008      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x1ba>
 80045d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045d8:	d005      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x1ba>
 80045da:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80045de:	d002      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x1ba>
 80045e0:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80045e4:	d11d      	bne.n	8004622 <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045e6:	4a17      	ldr	r2, [pc, #92]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 80045e8:	6893      	ldr	r3, [r2, #8]
 80045ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80045ee:	6921      	ldr	r1, [r4, #16]
 80045f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80045f4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045f6:	f7ff fec7 	bl	8004388 <HAL_RCC_GetSysClockFreq>
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_RCC_ClockConfig+0x218>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004602:	4a12      	ldr	r2, [pc, #72]	; (800464c <HAL_RCC_ClockConfig+0x220>)
 8004604:	5cd3      	ldrb	r3, [r2, r3]
 8004606:	40d8      	lsrs	r0, r3
 8004608:	4b11      	ldr	r3, [pc, #68]	; (8004650 <HAL_RCC_ClockConfig+0x224>)
 800460a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800460c:	2000      	movs	r0, #0
 800460e:	f7fc fdd5 	bl	80011bc <HAL_InitTick>
  return HAL_OK;
 8004612:	2000      	movs	r0, #0
}
 8004614:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004616:	f240 3133 	movw	r1, #819	; 0x333
 800461a:	480b      	ldr	r0, [pc, #44]	; (8004648 <HAL_RCC_ClockConfig+0x21c>)
 800461c:	f010 fc84 	bl	8014f28 <assert_failed>
 8004620:	e7c7      	b.n	80045b2 <HAL_RCC_ClockConfig+0x186>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004622:	f240 313a 	movw	r1, #826	; 0x33a
 8004626:	4808      	ldr	r0, [pc, #32]	; (8004648 <HAL_RCC_ClockConfig+0x21c>)
 8004628:	f010 fc7e 	bl	8014f28 <assert_failed>
 800462c:	e7db      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ba>
    return HAL_ERROR;
 800462e:	2001      	movs	r0, #1
}
 8004630:	4770      	bx	lr
      return HAL_ERROR;
 8004632:	2001      	movs	r0, #1
 8004634:	e7ee      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
 8004636:	2001      	movs	r0, #1
 8004638:	e7ec      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
      return HAL_ERROR;
 800463a:	2001      	movs	r0, #1
 800463c:	e7ea      	b.n	8004614 <HAL_RCC_ClockConfig+0x1e8>
 800463e:	bf00      	nop
 8004640:	40023c00 	.word	0x40023c00
 8004644:	40023800 	.word	0x40023800
 8004648:	0801a914 	.word	0x0801a914
 800464c:	0801f890 	.word	0x0801f890
 8004650:	200000a8 	.word	0x200000a8

08004654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004656:	b083      	sub	sp, #12
 8004658:	4604      	mov	r4, r0
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800465a:	6802      	ldr	r2, [r0, #0]
 800465c:	4b90      	ldr	r3, [pc, #576]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80fc 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x20a>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004666:	6826      	ldr	r6, [r4, #0]
 8004668:	f016 0601 	ands.w	r6, r6, #1
 800466c:	d014      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800466e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf18      	it	ne
 8004674:	f5b3 0f00 	cmpne.w	r3, #8388608	; 0x800000
 8004678:	f040 80f6 	bne.w	8004868 <HAL_RCCEx_PeriphCLKConfig+0x214>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800467c:	4b89      	ldr	r3, [pc, #548]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004684:	609a      	str	r2, [r3, #8]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800468e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80ee 	beq.w	8004872 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  uint32_t plli2sused = 0;
 8004696:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004698:	6825      	ldr	r5, [r4, #0]
 800469a:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 800469e:	d01b      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80046a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bf18      	it	ne
 80046a6:	f5b3 1f80 	cmpne.w	r3, #1048576	; 0x100000
 80046aa:	d003      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80046ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046b0:	f040 80e1 	bne.w	8004876 <HAL_RCCEx_PeriphCLKConfig+0x222>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046b4:	4a7b      	ldr	r2, [pc, #492]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046b6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80046ba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80046be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80046c0:	430b      	orrs	r3, r1
 80046c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046cc:	f000 80d8 	beq.w	8004880 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80d7 	beq.w	8004884 <HAL_RCCEx_PeriphCLKConfig+0x230>
  uint32_t pllsaiused = 0;
 80046d6:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80046de:	d019      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80046e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bf18      	it	ne
 80046e6:	f5b3 0f80 	cmpne.w	r3, #4194304	; 0x400000
 80046ea:	d003      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80046ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046f0:	f040 80ca 	bne.w	8004888 <HAL_RCCEx_PeriphCLKConfig+0x234>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046f4:	4a6b      	ldr	r2, [pc, #428]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046f6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80046fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80046fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004700:	430b      	orrs	r3, r1
 8004702:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800470c:	f000 80c1 	beq.w	8004892 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004710:	b903      	cbnz	r3, 8004714 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      pllsaiused = 1;
 8004712:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800471a:	d000      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
      plli2sused = 1;
 800471c:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800471e:	f013 0f20 	tst.w	r3, #32
 8004722:	f000 80f6 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004726:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472c:	bf18      	it	ne
 800472e:	f5b3 7f00 	cmpne.w	r3, #512	; 0x200
 8004732:	d076      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004734:	4a5c      	ldr	r2, [pc, #368]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d073      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800473a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800473e:	4293      	cmp	r3, r2
 8004740:	d06f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004742:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004746:	4293      	cmp	r3, r2
 8004748:	d06b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800474a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800474e:	4293      	cmp	r3, r2
 8004750:	d067      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004752:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004756:	4293      	cmp	r3, r2
 8004758:	d063      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800475a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800475e:	4293      	cmp	r3, r2
 8004760:	d05f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004762:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004766:	4293      	cmp	r3, r2
 8004768:	d05b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800476a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800476e:	4293      	cmp	r3, r2
 8004770:	d057      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004772:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004776:	4293      	cmp	r3, r2
 8004778:	d053      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800477a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800477e:	4293      	cmp	r3, r2
 8004780:	d04f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004782:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004786:	4293      	cmp	r3, r2
 8004788:	d04b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800478a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800478e:	4293      	cmp	r3, r2
 8004790:	d047      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004792:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004796:	4293      	cmp	r3, r2
 8004798:	d043      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800479a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800479e:	4293      	cmp	r3, r2
 80047a0:	d03f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047a2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d03b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047aa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d037      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047b2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d033      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047ba:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047be:	4293      	cmp	r3, r2
 80047c0:	d02f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047c2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d02b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047ca:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d027      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047d2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d023      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047da:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047e2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047ea:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d017      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047f2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047fa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004802:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800480a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004812:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800481a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800481e:	4293      	cmp	r3, r2
 8004820:	d139      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x242>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	9b01      	ldr	r3, [sp, #4]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004836:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004840:	f7fc fd00 	bl	8001244 <HAL_GetTick>
 8004844:	4607      	mov	r7, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004846:	4b19      	ldr	r3, [pc, #100]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800484e:	d131      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004850:	f7fc fcf8 	bl	8001244 <HAL_GetTick>
 8004854:	1bc0      	subs	r0, r0, r7
 8004856:	2864      	cmp	r0, #100	; 0x64
 8004858:	d9f5      	bls.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        return HAL_TIMEOUT;
 800485a:	2003      	movs	r0, #3
 800485c:	e200      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800485e:	2174      	movs	r1, #116	; 0x74
 8004860:	4813      	ldr	r0, [pc, #76]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004862:	f010 fb61 	bl	8014f28 <assert_failed>
 8004866:	e6fe      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x12>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004868:	217a      	movs	r1, #122	; 0x7a
 800486a:	4811      	ldr	r0, [pc, #68]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800486c:	f010 fb5c 	bl	8014f28 <assert_failed>
 8004870:	e704      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x28>
      plli2sused = 1;
 8004872:	2601      	movs	r6, #1
 8004874:	e710      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x44>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004876:	218a      	movs	r1, #138	; 0x8a
 8004878:	480d      	ldr	r0, [pc, #52]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800487a:	f010 fb55 	bl	8014f28 <assert_failed>
 800487e:	e719      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8004880:	2601      	movs	r6, #1
 8004882:	e725      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      pllsaiused = 1;
 8004884:	2501      	movs	r5, #1
 8004886:	e727      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004888:	219e      	movs	r1, #158	; 0x9e
 800488a:	4809      	ldr	r0, [pc, #36]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800488c:	f010 fb4c 	bl	8014f28 <assert_failed>
 8004890:	e730      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      plli2sused = 1;
 8004892:	2601      	movs	r6, #1
 8004894:	e73c      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004896:	21b9      	movs	r1, #185	; 0xb9
 8004898:	4805      	ldr	r0, [pc, #20]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800489a:	f010 fb45 	bl	8014f28 <assert_failed>
 800489e:	e7c0      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80048a0:	01fffff9 	.word	0x01fffff9
 80048a4:	40023800 	.word	0x40023800
 80048a8:	00020300 	.word	0x00020300
 80048ac:	40007000 	.word	0x40007000
 80048b0:	0801a94c 	.word	0x0801a94c
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048b4:	4bb1      	ldr	r3, [pc, #708]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048b8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80048bc:	d016      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80048be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048c0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d011      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048c8:	4bac      	ldr	r3, [pc, #688]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80048ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80048d2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80048d6:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80048da:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80048de:	6719      	str	r1, [r3, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	f013 0f01 	tst.w	r3, #1
 80048e8:	f040 81bc 	bne.w	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x610>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048ee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80048f2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80048f6:	f000 81c7 	beq.w	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80048fa:	4aa0      	ldr	r2, [pc, #640]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80048fc:	6893      	ldr	r3, [r2, #8]
 80048fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004902:	6093      	str	r3, [r2, #8]
 8004904:	499d      	ldr	r1, [pc, #628]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004906:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004908:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800490a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800490e:	4313      	orrs	r3, r2
 8004910:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	f013 0f10 	tst.w	r3, #16
 8004918:	d013      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800491a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf18      	it	ne
 8004920:	f1b3 7f80 	cmpne.w	r3, #16777216	; 0x1000000
 8004924:	f040 81b9 	bne.w	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004928:	4b94      	ldr	r3, [pc, #592]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800492a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800492e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004936:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800493a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800493c:	430a      	orrs	r2, r1
 800493e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004948:	d012      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800494a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf18      	it	ne
 8004950:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8004954:	d003      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800495a:	f040 81a3 	bne.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x650>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800495e:	4a87      	ldr	r2, [pc, #540]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004960:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004964:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004968:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800496a:	430b      	orrs	r3, r1
 800496c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004976:	d012      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004978:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf18      	it	ne
 800497e:	f5b3 2f80 	cmpne.w	r3, #262144	; 0x40000
 8004982:	d003      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8004984:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004988:	f040 8191 	bne.w	8004cae <HAL_RCCEx_PeriphCLKConfig+0x65a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800498c:	4a7b      	ldr	r2, [pc, #492]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800498e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004992:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004996:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004998:	430b      	orrs	r3, r1
 800499a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80049a4:	d012      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80049a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf18      	it	ne
 80049ac:	f5b3 1f80 	cmpne.w	r3, #1048576	; 0x100000
 80049b0:	d003      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x366>
 80049b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b6:	f040 8180 	bne.w	8004cba <HAL_RCCEx_PeriphCLKConfig+0x666>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ba:	4a70      	ldr	r2, [pc, #448]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80049bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049c4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80049c6:	430b      	orrs	r3, r1
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80049d2:	d012      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80049d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf18      	it	ne
 80049da:	f5b3 0f80 	cmpne.w	r3, #4194304	; 0x400000
 80049de:	d003      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80049e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e4:	f040 816f 	bne.w	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x672>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049e8:	4a64      	ldr	r2, [pc, #400]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80049ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80049f2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80049f4:	430b      	orrs	r3, r1
 80049f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a00:	d010      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004a02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	bf18      	it	ne
 8004a08:	2b01      	cmpne	r3, #1
 8004a0a:	d902      	bls.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	f040 8160 	bne.w	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a12:	4a5a      	ldr	r2, [pc, #360]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a18:	f023 0303 	bic.w	r3, r3, #3
 8004a1c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a2a:	d012      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004a2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf18      	it	ne
 8004a32:	2b04      	cmpne	r3, #4
 8004a34:	d004      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d002      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	f040 814f 	bne.w	8004cde <HAL_RCCEx_PeriphCLKConfig+0x68a>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a40:	4a4e      	ldr	r2, [pc, #312]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a46:	f023 030c 	bic.w	r3, r3, #12
 8004a4a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a58:	d012      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004a5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf18      	it	ne
 8004a60:	2b10      	cmpne	r3, #16
 8004a62:	d004      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a64:	2b30      	cmp	r3, #48	; 0x30
 8004a66:	d002      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	f040 813e 	bne.w	8004cea <HAL_RCCEx_PeriphCLKConfig+0x696>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a6e:	4a43      	ldr	r2, [pc, #268]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a70:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a74:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a78:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a86:	d012      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004a88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bf18      	it	ne
 8004a8e:	2b40      	cmpne	r3, #64	; 0x40
 8004a90:	d004      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x448>
 8004a92:	2bc0      	cmp	r3, #192	; 0xc0
 8004a94:	d002      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x448>
 8004a96:	2b80      	cmp	r3, #128	; 0x80
 8004a98:	f040 812d 	bne.w	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a9c:	4a37      	ldr	r2, [pc, #220]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004aa2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004aa6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ab4:	d015      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004ab6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf18      	it	ne
 8004abc:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 8004ac0:	d006      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004acc:	f040 8119 	bne.w	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x6ae>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ad0:	4a2a      	ldr	r2, [pc, #168]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004ad2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ada:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004adc:	430b      	orrs	r3, r1
 8004ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ae8:	d015      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004aea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf18      	it	ne
 8004af0:	f5b3 6f80 	cmpne.w	r3, #1024	; 0x400
 8004af4:	d006      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004af6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afa:	d003      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b00:	f040 8105 	bne.w	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x6ba>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004b06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b0a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004b10:	430b      	orrs	r3, r1
 8004b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004b1c:	d015      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004b1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf18      	it	ne
 8004b24:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 8004b28:	d006      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004b2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b2e:	d003      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b34:	f040 80f1 	bne.w	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x6c6>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b38:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004b3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b42:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004b44:	430b      	orrs	r3, r1
 8004b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004b50:	d019      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004b52:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf18      	it	ne
 8004b58:	f5b3 4f80 	cmpne.w	r3, #16384	; 0x4000
 8004b5c:	d006      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b62:	d003      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b68:	f040 80dd 	bne.w	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x6d2>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b6c:	4a03      	ldr	r2, [pc, #12]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004b6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004b76:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004b78:	e002      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	430b      	orrs	r3, r1
 8004b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b8c:	d00f      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004b8e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b94:	bf18      	it	ne
 8004b96:	2b00      	cmpne	r3, #0
 8004b98:	f040 80cb 	bne.w	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x6de>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b9c:	4a7c      	ldr	r2, [pc, #496]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004b9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ba2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ba6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004bb4:	d014      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004bb6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bbc:	bf18      	it	ne
 8004bbe:	2b00      	cmpne	r3, #0
 8004bc0:	f040 80bd 	bne.w	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bc4:	4a72      	ldr	r2, [pc, #456]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004bc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bca:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004bce:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004bd6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bdc:	f000 80b5 	beq.w	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	f013 0f08 	tst.w	r3, #8
 8004be6:	d000      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    pllsaiused = 1;
 8004be8:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bea:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004bee:	d015      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004bf0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf18      	it	ne
 8004bf6:	f1b3 7f80 	cmpne.w	r3, #16777216	; 0x1000000
 8004bfa:	d006      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8004bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c00:	d003      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8004c02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c06:	f040 80a2 	bne.w	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x6fa>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0a:	4a61      	ldr	r2, [pc, #388]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004c0c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c10:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004c14:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004c16:	430b      	orrs	r3, r1
 8004c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004c22:	d011      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004c24:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c2c:	bf18      	it	ne
 8004c2e:	2b00      	cmpne	r3, #0
 8004c30:	f040 8093 	bne.w	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x706>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c34:	4a56      	ldr	r2, [pc, #344]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004c36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004c42:	430b      	orrs	r3, r1
 8004c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004c48:	2e00      	cmp	r6, #0
 8004c4a:	f040 808c 	bne.w	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x712>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c54:	f000 8087 	beq.w	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x712>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c58:	2d01      	cmp	r5, #1
 8004c5a:	f000 816f 	beq.w	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004c5e:	2000      	movs	r0, #0
}
 8004c60:	b003      	add	sp, #12
 8004c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8004c64:	f7fc faee 	bl	8001244 <HAL_GetTick>
 8004c68:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6a:	4b49      	ldr	r3, [pc, #292]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	f013 0f02 	tst.w	r3, #2
 8004c72:	f47f ae3b 	bne.w	80048ec <HAL_RCCEx_PeriphCLKConfig+0x298>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fc fae5 	bl	8001244 <HAL_GetTick>
 8004c7a:	1bc0      	subs	r0, r0, r7
 8004c7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c80:	4298      	cmp	r0, r3
 8004c82:	d9f2      	bls.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x616>
            return HAL_TIMEOUT;
 8004c84:	2003      	movs	r0, #3
 8004c86:	e7eb      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c88:	4841      	ldr	r0, [pc, #260]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004c8a:	6882      	ldr	r2, [r0, #8]
 8004c8c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004c90:	4940      	ldr	r1, [pc, #256]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8004c92:	4019      	ands	r1, r3
 8004c94:	430a      	orrs	r2, r1
 8004c96:	6082      	str	r2, [r0, #8]
 8004c98:	e634      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004c9a:	21f3      	movs	r1, #243	; 0xf3
 8004c9c:	483e      	ldr	r0, [pc, #248]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004c9e:	f010 f943 	bl	8014f28 <assert_failed>
 8004ca2:	e641      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004ca4:	21fd      	movs	r1, #253	; 0xfd
 8004ca6:	483c      	ldr	r0, [pc, #240]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004ca8:	f010 f93e 	bl	8014f28 <assert_failed>
 8004cac:	e657      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x30a>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004cae:	f240 1107 	movw	r1, #263	; 0x107
 8004cb2:	4839      	ldr	r0, [pc, #228]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cb4:	f010 f938 	bl	8014f28 <assert_failed>
 8004cb8:	e668      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x338>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004cba:	f240 1111 	movw	r1, #273	; 0x111
 8004cbe:	4836      	ldr	r0, [pc, #216]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cc0:	f010 f932 	bl	8014f28 <assert_failed>
 8004cc4:	e679      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x366>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004cc6:	f240 111b 	movw	r1, #283	; 0x11b
 8004cca:	4833      	ldr	r0, [pc, #204]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004ccc:	f010 f92c 	bl	8014f28 <assert_failed>
 8004cd0:	e68a      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004cd2:	f240 1125 	movw	r1, #293	; 0x125
 8004cd6:	4830      	ldr	r0, [pc, #192]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cd8:	f010 f926 	bl	8014f28 <assert_failed>
 8004cdc:	e699      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004cde:	f240 112f 	movw	r1, #303	; 0x12f
 8004ce2:	482d      	ldr	r0, [pc, #180]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004ce4:	f010 f920 	bl	8014f28 <assert_failed>
 8004ce8:	e6aa      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004cea:	f240 1139 	movw	r1, #313	; 0x139
 8004cee:	482a      	ldr	r0, [pc, #168]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cf0:	f010 f91a 	bl	8014f28 <assert_failed>
 8004cf4:	e6bb      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004cf6:	f240 1143 	movw	r1, #323	; 0x143
 8004cfa:	4827      	ldr	r0, [pc, #156]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cfc:	f010 f914 	bl	8014f28 <assert_failed>
 8004d00:	e6cc      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x448>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004d02:	f240 114d 	movw	r1, #333	; 0x14d
 8004d06:	4824      	ldr	r0, [pc, #144]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d08:	f010 f90e 	bl	8014f28 <assert_failed>
 8004d0c:	e6e0      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004d0e:	f240 1157 	movw	r1, #343	; 0x157
 8004d12:	4821      	ldr	r0, [pc, #132]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d14:	f010 f908 	bl	8014f28 <assert_failed>
 8004d18:	e6f4      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004d1a:	f240 1161 	movw	r1, #353	; 0x161
 8004d1e:	481e      	ldr	r0, [pc, #120]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d20:	f010 f902 	bl	8014f28 <assert_failed>
 8004d24:	e708      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004d26:	f240 116b 	movw	r1, #363	; 0x16b
 8004d2a:	481b      	ldr	r0, [pc, #108]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d2c:	f010 f8fc 	bl	8014f28 <assert_failed>
 8004d30:	e71c      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x518>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004d32:	f240 1175 	movw	r1, #373	; 0x175
 8004d36:	4818      	ldr	r0, [pc, #96]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d38:	f010 f8f6 	bl	8014f28 <assert_failed>
 8004d3c:	e72e      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x548>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004d3e:	f240 117f 	movw	r1, #383	; 0x17f
 8004d42:	4815      	ldr	r0, [pc, #84]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d44:	f010 f8f0 	bl	8014f28 <assert_failed>
 8004d48:	e73c      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x570>
      pllsaiused = 1;
 8004d4a:	2501      	movs	r5, #1
 8004d4c:	e748      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004d4e:	f240 1197 	movw	r1, #407	; 0x197
 8004d52:	4811      	ldr	r0, [pc, #68]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d54:	f010 f8e8 	bl	8014f28 <assert_failed>
 8004d58:	e757      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004d5a:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004d5e:	480e      	ldr	r0, [pc, #56]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d60:	f010 f8e2 	bl	8014f28 <assert_failed>
 8004d64:	e766      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_PLLI2S_DISABLE();
 8004d66:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004d68:	6813      	ldr	r3, [r2, #0]
 8004d6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d6e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004d70:	f7fc fa68 	bl	8001244 <HAL_GetTick>
 8004d74:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004d7e:	d00d      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d80:	f7fc fa60 	bl	8001244 <HAL_GetTick>
 8004d84:	1b80      	subs	r0, r0, r6
 8004d86:	2864      	cmp	r0, #100	; 0x64
 8004d88:	d9f5      	bls.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x722>
        return HAL_TIMEOUT;
 8004d8a:	2003      	movs	r0, #3
 8004d8c:	e768      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	0ffffcff 	.word	0x0ffffcff
 8004d98:	0801a94c 	.word	0x0801a94c
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	3b32      	subs	r3, #50	; 0x32
 8004da0:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004da4:	f200 809a 	bhi.w	8004edc <HAL_RCCEx_PeriphCLKConfig+0x888>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	f013 0f01 	tst.w	r3, #1
 8004dae:	d018      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004db2:	b9b3      	cbnz	r3, 8004de2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004db4:	68a3      	ldr	r3, [r4, #8]
 8004db6:	3b02      	subs	r3, #2
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	f200 8095 	bhi.w	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x894>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dbe:	4ab1      	ldr	r2, [pc, #708]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004dc0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dc4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dc8:	6860      	ldr	r0, [r4, #4]
 8004dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004dd2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	68a1      	ldr	r1, [r4, #8]
 8004dda:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004dde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004de8:	d003      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004dea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004dec:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004df0:	d006      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8004df2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004df6:	d026      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004df8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dfe:	d122      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004e00:	68e3      	ldr	r3, [r4, #12]
 8004e02:	3b02      	subs	r3, #2
 8004e04:	2b0d      	cmp	r3, #13
 8004e06:	d875      	bhi.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	2b1f      	cmp	r3, #31
 8004e0e:	d877      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e10:	4a9c      	ldr	r2, [pc, #624]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004e12:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e16:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e1a:	6860      	ldr	r0, [r4, #4]
 8004e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e20:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004e24:	68e0      	ldr	r0, [r4, #12]
 8004e26:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004e2a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e34:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004e38:	f023 031f 	bic.w	r3, r3, #31
 8004e3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e3e:	3901      	subs	r1, #1
 8004e40:	430b      	orrs	r3, r1
 8004e42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004e4c:	d014      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x824>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d85b      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e54:	4a8b      	ldr	r2, [pc, #556]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004e56:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e5a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e5e:	6866      	ldr	r6, [r4, #4]
 8004e60:	6923      	ldr	r3, [r4, #16]
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004e68:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004e6c:	4303      	orrs	r3, r0
 8004e6e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004e72:	430b      	orrs	r3, r1
 8004e74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e7e:	d018      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004e80:	6923      	ldr	r3, [r4, #16]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d848      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004e86:	68a3      	ldr	r3, [r4, #8]
 8004e88:	3b02      	subs	r3, #2
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d84a      	bhi.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	3b02      	subs	r3, #2
 8004e92:	2b0d      	cmp	r3, #13
 8004e94:	d84c      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e96:	6862      	ldr	r2, [r4, #4]
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004ea0:	68e2      	ldr	r2, [r4, #12]
 8004ea2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ea6:	68a2      	ldr	r2, [r4, #8]
 8004ea8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004eac:	4a75      	ldr	r2, [pc, #468]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004eae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004eb2:	4a74      	ldr	r2, [pc, #464]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eba:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004ebc:	f7fc f9c2 	bl	8001244 <HAL_GetTick>
 8004ec0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ec2:	4b70      	ldr	r3, [pc, #448]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004eca:	f47f aec5 	bne.w	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x604>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ece:	f7fc f9b9 	bl	8001244 <HAL_GetTick>
 8004ed2:	1b80      	subs	r0, r0, r6
 8004ed4:	2864      	cmp	r0, #100	; 0x64
 8004ed6:	d9f4      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
        return HAL_TIMEOUT;
 8004ed8:	2003      	movs	r0, #3
 8004eda:	e6c1      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004edc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004ee0:	4869      	ldr	r0, [pc, #420]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004ee2:	f010 f821 	bl	8014f28 <assert_failed>
 8004ee6:	e75f      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x754>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004ee8:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004eec:	4866      	ldr	r0, [pc, #408]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004eee:	f010 f81b 	bl	8014f28 <assert_failed>
 8004ef2:	e764      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x76a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004ef4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004ef8:	4863      	ldr	r0, [pc, #396]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004efa:	f010 f815 	bl	8014f28 <assert_failed>
 8004efe:	e783      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004f00:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004f04:	4860      	ldr	r0, [pc, #384]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004f06:	f010 f80f 	bl	8014f28 <assert_failed>
 8004f0a:	e781      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004f0c:	f240 2107 	movw	r1, #519	; 0x207
 8004f10:	485d      	ldr	r0, [pc, #372]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004f12:	f010 f809 	bl	8014f28 <assert_failed>
 8004f16:	e79d      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x800>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004f18:	f240 2116 	movw	r1, #534	; 0x216
 8004f1c:	485a      	ldr	r0, [pc, #360]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004f1e:	f010 f803 	bl	8014f28 <assert_failed>
 8004f22:	e7b0      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004f24:	f240 2117 	movw	r1, #535	; 0x217
 8004f28:	4857      	ldr	r0, [pc, #348]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004f2a:	f00f fffd 	bl	8014f28 <assert_failed>
 8004f2e:	e7ae      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x83a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004f30:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004f34:	4854      	ldr	r0, [pc, #336]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004f36:	f00f fff7 	bl	8014f28 <assert_failed>
 8004f3a:	e7ac      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    __HAL_RCC_PLLSAI_DISABLE();
 8004f3c:	4a51      	ldr	r2, [pc, #324]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004f46:	f7fc f97d 	bl	8001244 <HAL_GetTick>
 8004f4a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f4c:	4b4d      	ldr	r3, [pc, #308]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004f54:	d006      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x910>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f56:	f7fc f975 	bl	8001244 <HAL_GetTick>
 8004f5a:	1b40      	subs	r0, r0, r5
 8004f5c:	2864      	cmp	r0, #100	; 0x64
 8004f5e:	d9f5      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
        return HAL_TIMEOUT;
 8004f60:	2003      	movs	r0, #3
 8004f62:	e67d      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004f64:	6963      	ldr	r3, [r4, #20]
 8004f66:	3b32      	subs	r3, #50	; 0x32
 8004f68:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004f6c:	d878      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004f74:	d001      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x926>
 8004f76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f78:	b122      	cbz	r2, 8004f84 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8004f7a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004f7e:	d025      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x978>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f82:	bb1b      	cbnz	r3, 8004fcc <HAL_RCCEx_PeriphCLKConfig+0x978>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004f84:	69a3      	ldr	r3, [r4, #24]
 8004f86:	3b02      	subs	r3, #2
 8004f88:	2b0d      	cmp	r3, #13
 8004f8a:	d86f      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004f8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	2b1f      	cmp	r3, #31
 8004f92:	d871      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa24>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f94:	4a3b      	ldr	r2, [pc, #236]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004f96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f9a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f9e:	6960      	ldr	r0, [r4, #20]
 8004fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fa4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004fa8:	69a0      	ldr	r0, [r4, #24]
 8004faa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004fae:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fb8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004fbc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004fc0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004fc2:	3901      	subs	r1, #1
 8004fc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004fc8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004fd4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fda:	d057      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	f013 0f08 	tst.w	r3, #8
 8004fe2:	d029      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004fe4:	69e3      	ldr	r3, [r4, #28]
 8004fe6:	3b02      	subs	r3, #2
 8004fe8:	2b05      	cmp	r3, #5
 8004fea:	d86b      	bhi.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004fec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf18      	it	ne
 8004ff2:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8004ff6:	d005      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8004ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffc:	d002      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8004ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005002:	d165      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005004:	4a1f      	ldr	r2, [pc, #124]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8005006:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800500a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800500e:	6960      	ldr	r0, [r4, #20]
 8005010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005014:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005018:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800501c:	430b      	orrs	r3, r1
 800501e:	69e1      	ldr	r1, [r4, #28]
 8005020:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005028:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800502c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005030:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005032:	430b      	orrs	r3, r1
 8005034:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005038:	4a12      	ldr	r2, [pc, #72]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 800503a:	6813      	ldr	r3, [r2, #0]
 800503c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005040:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005042:	f7fc f8ff 	bl	8001244 <HAL_GetTick>
 8005046:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005048:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005050:	d144      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005052:	f7fc f8f7 	bl	8001244 <HAL_GetTick>
 8005056:	1b00      	subs	r0, r0, r4
 8005058:	2864      	cmp	r0, #100	; 0x64
 800505a:	d9f5      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        return HAL_TIMEOUT;
 800505c:	2003      	movs	r0, #3
 800505e:	e5ff      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8005060:	f240 2146 	movw	r1, #582	; 0x246
 8005064:	4808      	ldr	r0, [pc, #32]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8005066:	f00f ff5f 	bl	8014f28 <assert_failed>
 800506a:	e780      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800506c:	f240 214d 	movw	r1, #589	; 0x24d
 8005070:	4805      	ldr	r0, [pc, #20]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8005072:	f00f ff59 	bl	8014f28 <assert_failed>
 8005076:	e789      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x938>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8005078:	f240 214f 	movw	r1, #591	; 0x24f
 800507c:	4802      	ldr	r0, [pc, #8]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800507e:	f00f ff53 	bl	8014f28 <assert_failed>
 8005082:	e787      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8005084:	40023800 	.word	0x40023800
 8005088:	0801a94c 	.word	0x0801a94c
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800508c:	6a23      	ldr	r3, [r4, #32]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d812      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005092:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8005094:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005098:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800509c:	6965      	ldr	r5, [r4, #20]
 800509e:	6a23      	ldr	r3, [r4, #32]
 80050a0:	041b      	lsls	r3, r3, #16
 80050a2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80050a6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80050aa:	4303      	orrs	r3, r0
 80050ac:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80050b0:	430b      	orrs	r3, r1
 80050b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80050b6:	e791      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x988>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80050b8:	f240 2162 	movw	r1, #610	; 0x262
 80050bc:	4809      	ldr	r0, [pc, #36]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 80050be:	f00f ff33 	bl	8014f28 <assert_failed>
 80050c2:	e7e6      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80050c4:	f240 2171 	movw	r1, #625	; 0x271
 80050c8:	4806      	ldr	r0, [pc, #24]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 80050ca:	f00f ff2d 	bl	8014f28 <assert_failed>
 80050ce:	e78d      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x998>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80050d0:	f240 2172 	movw	r1, #626	; 0x272
 80050d4:	4803      	ldr	r0, [pc, #12]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 80050d6:	f00f ff27 	bl	8014f28 <assert_failed>
 80050da:	e793      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  return HAL_OK;
 80050dc:	2000      	movs	r0, #0
 80050de:	e5bf      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80050e0:	40023800 	.word	0x40023800
 80050e4:	0801a94c 	.word	0x0801a94c

080050e8 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80050e8:	4b56      	ldr	r3, [pc, #344]	; (8005244 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80050ea:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80050ec:	4b56      	ldr	r3, [pc, #344]	; (8005248 <HAL_RCCEx_GetPeriphCLKConfig+0x160>)
 80050ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80050f2:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80050f6:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050f8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80050fc:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005100:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005102:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005106:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800510a:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800510c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005110:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005114:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8005116:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800511a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800511e:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005120:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005124:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005128:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800512a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800512e:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8005132:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005134:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005138:	f3c2 7202 	ubfx	r2, r2, #28, #3
 800513c:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800513e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005142:	f002 021f 	and.w	r2, r2, #31
 8005146:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8005148:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800514c:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8005150:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8005152:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005156:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800515a:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800515c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005160:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005164:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005166:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800516a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800516e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005176:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005178:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800517c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8005180:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005182:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005186:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800518a:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800518c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005190:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005194:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005196:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800519a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800519e:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80051a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051a4:	f002 0203 	and.w	r2, r2, #3
 80051a8:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80051aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051ae:	f002 020c 	and.w	r2, r2, #12
 80051b2:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80051b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051b8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80051bc:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80051be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051c2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80051c6:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80051c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80051d0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80051d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051d6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80051da:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80051dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051e0:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80051e4:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80051e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051ea:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80051ee:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80051f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051f4:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80051f8:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80051fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051fe:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005202:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005204:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005208:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800520c:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800520e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005212:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005216:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800521a:	6899      	ldr	r1, [r3, #8]
 800521c:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005222:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005226:	430a      	orrs	r2, r1
 8005228:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005232:	d102      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKConfig+0x152>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8005234:	2300      	movs	r3, #0
 8005236:	6383      	str	r3, [r0, #56]	; 0x38
 8005238:	4770      	bx	lr
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800523a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800523e:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	00fffff1 	.word	0x00fffff1
 8005248:	40023800 	.word	0x40023800

0800524c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800524c:	4602      	mov	r2, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800524e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005252:	d004      	beq.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
  uint32_t frequency = 0;
 8005254:	2000      	movs	r0, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005256:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800525a:	d062      	beq.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      }
    }
  }

  return frequency;
}
 800525c:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 800525e:	4b61      	ldr	r3, [pc, #388]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005264:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 8005268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526c:	d02e      	beq.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 800526e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005272:	d054      	beq.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005274:	b10b      	cbz	r3, 800527a <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 8005276:	2000      	movs	r0, #0
 8005278:	e7ed      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800527a:	4b5a      	ldr	r3, [pc, #360]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005282:	d11b      	bne.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005284:	4b57      	ldr	r3, [pc, #348]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 800528c:	4b56      	ldr	r3, [pc, #344]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800528e:	fbb3 fcfc 	udiv	ip, r3, ip
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005292:	4954      	ldr	r1, [pc, #336]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005294:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
 8005298:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800529c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80052a0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80052a4:	fb0c f303 	mul.w	r3, ip, r3
 80052a8:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80052ac:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80052b0:	f3c0 2004 	ubfx	r0, r0, #8, #5
 80052b4:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg);
 80052b6:	fbb3 f0f0 	udiv	r0, r3, r0
        break;
 80052ba:	e7cc      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80052bc:	4b49      	ldr	r3, [pc, #292]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 80052c4:	4b49      	ldr	r3, [pc, #292]	; (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80052c6:	fbb3 fcfc 	udiv	ip, r3, ip
 80052ca:	e7e2      	b.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80052cc:	4b45      	ldr	r3, [pc, #276]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80052d4:	d11b      	bne.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052d6:	4b43      	ldr	r3, [pc, #268]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 80052de:	4b42      	ldr	r3, [pc, #264]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80052e0:	fbb3 fcfc 	udiv	ip, r3, ip
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80052e4:	493f      	ldr	r1, [pc, #252]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052e6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
 80052ea:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80052ee:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80052f2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80052f6:	fb0c f303 	mul.w	r3, ip, r3
 80052fa:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80052fe:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005302:	f000 001f 	and.w	r0, r0, #31
 8005306:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg);
 8005308:	fbb3 f0f0 	udiv	r0, r3, r0
        break;
 800530c:	e7a3      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800530e:	4b35      	ldr	r3, [pc, #212]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 8005316:	4b35      	ldr	r3, [pc, #212]	; (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005318:	fbb3 fcfc 	udiv	ip, r3, ip
 800531c:	e7e2      	b.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = EXTERNAL_CLOCK_VALUE;
 800531e:	4834      	ldr	r0, [pc, #208]	; (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8005320:	e799      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 8005322:	4b30      	ldr	r3, [pc, #192]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005328:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 800532c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005330:	d02d      	beq.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005332:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005336:	d053      	beq.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d18f      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800533c:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005344:	d11b      	bne.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800534e:	4826      	ldr	r0, [pc, #152]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8005350:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005354:	4b23      	ldr	r3, [pc, #140]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005356:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800535a:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800535e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8005362:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005366:	fb01 f000 	mul.w	r0, r1, r0
 800536a:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800536e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005372:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8005376:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8005378:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800537c:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800537e:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005380:	6859      	ldr	r1, [r3, #4]
 8005382:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005386:	4819      	ldr	r0, [pc, #100]	; (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005388:	fbb0 f1f1 	udiv	r1, r0, r1
 800538c:	e7e2      	b.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005396:	d11b      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005398:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80053a0:	4811      	ldr	r0, [pc, #68]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80053a2:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80053a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80053ac:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80053b0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80053b4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80053b8:	fb01 f000 	mul.w	r0, r1, r0
 80053bc:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80053c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80053ca:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80053ce:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80053d8:	4804      	ldr	r0, [pc, #16]	; (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80053da:	fbb0 f1f1 	udiv	r1, r0, r1
 80053de:	e7e2      	b.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        frequency = EXTERNAL_CLOCK_VALUE;
 80053e0:	4803      	ldr	r0, [pc, #12]	; (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
  return frequency;
 80053e2:	e73b      	b.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80053e4:	40023800 	.word	0x40023800
 80053e8:	00f42400 	.word	0x00f42400
 80053ec:	017d7840 	.word	0x017d7840
 80053f0:	00bb8000 	.word	0x00bb8000

080053f4 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
 80053f4:	2901      	cmp	r1, #1
 80053f6:	d00a      	beq.n	800540e <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80053f8:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80053fa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80053fc:	2a08      	cmp	r2, #8
 80053fe:	d008      	beq.n	8005412 <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005400:	6842      	ldr	r2, [r0, #4]
 8005402:	3a02      	subs	r2, #2
 8005404:	2a01      	cmp	r2, #1
 8005406:	d90c      	bls.n	8005422 <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8005408:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 800540c:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 800540e:	2309      	movs	r3, #9
 8005410:	e7f3      	b.n	80053fa <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005412:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005414:	2a01      	cmp	r2, #1
 8005416:	bf18      	it	ne
 8005418:	2a03      	cmpne	r2, #3
 800541a:	d1f1      	bne.n	8005400 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 800541c:	f043 0310 	orr.w	r3, r3, #16
 8005420:	e7ee      	b.n	8005400 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005422:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8005426:	4770      	bx	lr

08005428 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005428:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <SAI_Disable+0x3c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a0e      	ldr	r2, [pc, #56]	; (8005468 <SAI_Disable+0x40>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0b1b      	lsrs	r3, r3, #12
 8005434:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005436:	6801      	ldr	r1, [r0, #0]
 8005438:	680a      	ldr	r2, [r1, #0]
 800543a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800543e:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005440:	461a      	mov	r2, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b132      	cbz	r2, 8005454 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005446:	6802      	ldr	r2, [r0, #0]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800544e:	d1f7      	bne.n	8005440 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005450:	2000      	movs	r0, #0

  return status;
}
 8005452:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005454:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800545c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005460:	2003      	movs	r0, #3
      break;
 8005462:	4770      	bx	lr
 8005464:	200000a8 	.word	0x200000a8
 8005468:	95cbec1b 	.word	0x95cbec1b

0800546c <HAL_SAI_Init>:
  if(hsai == NULL)
 800546c:	2800      	cmp	r0, #0
 800546e:	f000 8256 	beq.w	800591e <HAL_SAI_Init+0x4b2>
{
 8005472:	b538      	push	{r3, r4, r5, lr}
 8005474:	4604      	mov	r4, r0
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 8005476:	6803      	ldr	r3, [r0, #0]
 8005478:	49ad      	ldr	r1, [pc, #692]	; (8005730 <HAL_SAI_Init+0x2c4>)
 800547a:	4aae      	ldr	r2, [pc, #696]	; (8005734 <HAL_SAI_Init+0x2c8>)
 800547c:	428b      	cmp	r3, r1
 800547e:	bf18      	it	ne
 8005480:	4293      	cmpne	r3, r2
 8005482:	d00b      	beq.n	800549c <HAL_SAI_Init+0x30>
 8005484:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <HAL_SAI_Init+0x30>
 800548c:	3220      	adds	r2, #32
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_SAI_Init+0x30>
 8005492:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8005496:	48a8      	ldr	r0, [pc, #672]	; (8005738 <HAL_SAI_Init+0x2cc>)
 8005498:	f00f fd46 	bl	8014f28 <assert_failed>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 800549c:	69e3      	ldr	r3, [r4, #28]
 800549e:	49a7      	ldr	r1, [pc, #668]	; (800573c <HAL_SAI_Init+0x2d0>)
 80054a0:	4aa7      	ldr	r2, [pc, #668]	; (8005740 <HAL_SAI_Init+0x2d4>)
 80054a2:	428b      	cmp	r3, r1
 80054a4:	bf18      	it	ne
 80054a6:	4293      	cmpne	r3, r2
 80054a8:	d01b      	beq.n	80054e2 <HAL_SAI_Init+0x76>
 80054aa:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d017      	beq.n	80054e2 <HAL_SAI_Init+0x76>
 80054b2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_SAI_Init+0x76>
 80054ba:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80054be:	d010      	beq.n	80054e2 <HAL_SAI_Init+0x76>
 80054c0:	f245 6222 	movw	r2, #22050	; 0x5622
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00c      	beq.n	80054e2 <HAL_SAI_Init+0x76>
 80054c8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80054cc:	d009      	beq.n	80054e2 <HAL_SAI_Init+0x76>
 80054ce:	f642 3211 	movw	r2, #11025	; 0x2b11
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d005      	beq.n	80054e2 <HAL_SAI_Init+0x76>
 80054d6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80054da:	d002      	beq.n	80054e2 <HAL_SAI_Init+0x76>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f040 8165 	bne.w	80057ac <HAL_SAI_Init+0x340>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 80054e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf18      	it	ne
 80054e8:	2b08      	cmpne	r3, #8
 80054ea:	d002      	beq.n	80054f2 <HAL_SAI_Init+0x86>
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	f040 8163 	bne.w	80057b8 <HAL_SAI_Init+0x34c>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	f200 8165 	bhi.w	80057c4 <HAL_SAI_Init+0x358>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 80054fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	bf18      	it	ne
 8005500:	2b60      	cmpne	r3, #96	; 0x60
 8005502:	d008      	beq.n	8005516 <HAL_SAI_Init+0xaa>
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d006      	beq.n	8005516 <HAL_SAI_Init+0xaa>
 8005508:	2ba0      	cmp	r3, #160	; 0xa0
 800550a:	d004      	beq.n	8005516 <HAL_SAI_Init+0xaa>
 800550c:	2bc0      	cmp	r3, #192	; 0xc0
 800550e:	d002      	beq.n	8005516 <HAL_SAI_Init+0xaa>
 8005510:	2be0      	cmp	r3, #224	; 0xe0
 8005512:	f040 815d 	bne.w	80057d0 <HAL_SAI_Init+0x364>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 8005516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005518:	2b00      	cmp	r3, #0
 800551a:	bf18      	it	ne
 800551c:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 8005520:	f040 815c 	bne.w	80057dc <HAL_SAI_Init+0x370>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 8005524:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005526:	2b01      	cmp	r3, #1
 8005528:	f200 815e 	bhi.w	80057e8 <HAL_SAI_Init+0x37c>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 800552c:	68a3      	ldr	r3, [r4, #8]
 800552e:	2b03      	cmp	r3, #3
 8005530:	f200 8160 	bhi.w	80057f4 <HAL_SAI_Init+0x388>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf18      	it	ne
 800553a:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800553e:	f040 815f 	bne.w	8005800 <HAL_SAI_Init+0x394>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 8005542:	6963      	ldr	r3, [r4, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	bf18      	it	ne
 8005548:	f5b3 2f00 	cmpne.w	r3, #524288	; 0x80000
 800554c:	f040 815e 	bne.w	800580c <HAL_SAI_Init+0x3a0>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 8005550:	69a3      	ldr	r3, [r4, #24]
 8005552:	2b04      	cmp	r3, #4
 8005554:	f200 8160 	bhi.w	8005818 <HAL_SAI_Init+0x3ac>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8005558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800555a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555e:	bf18      	it	ne
 8005560:	2b00      	cmpne	r3, #0
 8005562:	f040 815f 	bne.w	8005824 <HAL_SAI_Init+0x3b8>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 8005566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	bf18      	it	ne
 800556c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8005570:	d009      	beq.n	8005586 <HAL_SAI_Init+0x11a>
 8005572:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005576:	d006      	beq.n	8005586 <HAL_SAI_Init+0x11a>
 8005578:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800557c:	d003      	beq.n	8005586 <HAL_SAI_Init+0x11a>
 800557e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8005582:	f040 8155 	bne.w	8005830 <HAL_SAI_Init+0x3c4>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 8005586:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf18      	it	ne
 800558c:	2b10      	cmpne	r3, #16
 800558e:	f040 8155 	bne.w	800583c <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8005592:	68e3      	ldr	r3, [r4, #12]
 8005594:	2b02      	cmp	r3, #2
 8005596:	f200 8157 	bhi.w	8005848 <HAL_SAI_Init+0x3dc>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 800559a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800559c:	3b08      	subs	r3, #8
 800559e:	2bf8      	cmp	r3, #248	; 0xf8
 80055a0:	f200 8158 	bhi.w	8005854 <HAL_SAI_Init+0x3e8>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 80055a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80055a6:	3b01      	subs	r3, #1
 80055a8:	2b7f      	cmp	r3, #127	; 0x7f
 80055aa:	f200 8159 	bhi.w	8005860 <HAL_SAI_Init+0x3f4>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 80055ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf18      	it	ne
 80055b4:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80055b8:	f040 8158 	bne.w	800586c <HAL_SAI_Init+0x400>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 80055bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf18      	it	ne
 80055c2:	f5b3 3f00 	cmpne.w	r3, #131072	; 0x20000
 80055c6:	f040 8157 	bne.w	8005878 <HAL_SAI_Init+0x40c>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 80055ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf18      	it	ne
 80055d0:	f5b3 2f80 	cmpne.w	r3, #262144	; 0x40000
 80055d4:	f040 8156 	bne.w	8005884 <HAL_SAI_Init+0x418>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 80055d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055da:	2b18      	cmp	r3, #24
 80055dc:	f200 8158 	bhi.w	8005890 <HAL_SAI_Init+0x424>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 80055e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf18      	it	ne
 80055e6:	2b40      	cmpne	r3, #64	; 0x40
 80055e8:	d002      	beq.n	80055f0 <HAL_SAI_Init+0x184>
 80055ea:	2b80      	cmp	r3, #128	; 0x80
 80055ec:	f040 8156 	bne.w	800589c <HAL_SAI_Init+0x430>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 80055f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80055f2:	3b01      	subs	r3, #1
 80055f4:	2b0f      	cmp	r3, #15
 80055f6:	f200 8157 	bhi.w	80058a8 <HAL_SAI_Init+0x43c>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 80055fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005600:	f080 8158 	bcs.w	80058b4 <HAL_SAI_Init+0x448>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8005604:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8159 	beq.w	80058c0 <HAL_SAI_Init+0x454>
  hsai->State = HAL_SAI_STATE_BUSY;
 800560e:	2302      	movs	r3, #2
 8005610:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff ff07 	bl	8005428 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	2b01      	cmp	r3, #1
 800561e:	f000 8155 	beq.w	80058cc <HAL_SAI_Init+0x460>
 8005622:	2b02      	cmp	r3, #2
 8005624:	f040 8154 	bne.w	80058d0 <HAL_SAI_Init+0x464>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005628:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 800562a:	68a3      	ldr	r3, [r4, #8]
 800562c:	2b02      	cmp	r3, #2
 800562e:	f000 8159 	beq.w	80058e4 <HAL_SAI_Init+0x478>
 8005632:	2b03      	cmp	r3, #3
 8005634:	f000 8151 	beq.w	80058da <HAL_SAI_Init+0x46e>
 8005638:	2b01      	cmp	r3, #1
 800563a:	f000 814b 	beq.w	80058d4 <HAL_SAI_Init+0x468>
 800563e:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	483b      	ldr	r0, [pc, #236]	; (8005730 <HAL_SAI_Init+0x2c4>)
 8005644:	493b      	ldr	r1, [pc, #236]	; (8005734 <HAL_SAI_Init+0x2c8>)
 8005646:	428b      	cmp	r3, r1
 8005648:	bf18      	it	ne
 800564a:	4283      	cmpne	r3, r0
 800564c:	f040 814d 	bne.w	80058ea <HAL_SAI_Init+0x47e>
    SAI1->GCR = tmpregisterGCR;
 8005650:	4b3c      	ldr	r3, [pc, #240]	; (8005744 <HAL_SAI_Init+0x2d8>)
 8005652:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005656:	69e3      	ldr	r3, [r4, #28]
 8005658:	b323      	cbz	r3, 80056a4 <HAL_SAI_Init+0x238>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	4934      	ldr	r1, [pc, #208]	; (8005730 <HAL_SAI_Init+0x2c4>)
 800565e:	4a35      	ldr	r2, [pc, #212]	; (8005734 <HAL_SAI_Init+0x2c8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	bf18      	it	ne
 8005664:	428b      	cmpne	r3, r1
 8005666:	f000 8144 	beq.w	80058f2 <HAL_SAI_Init+0x486>
    uint32_t freq = 0;
 800566a:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	4936      	ldr	r1, [pc, #216]	; (8005748 <HAL_SAI_Init+0x2dc>)
 8005670:	4a36      	ldr	r2, [pc, #216]	; (800574c <HAL_SAI_Init+0x2e0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	bf18      	it	ne
 8005676:	428b      	cmpne	r3, r1
 8005678:	f000 8140 	beq.w	80058fc <HAL_SAI_Init+0x490>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800567c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005680:	0040      	lsls	r0, r0, #1
 8005682:	69e3      	ldr	r3, [r4, #28]
 8005684:	025b      	lsls	r3, r3, #9
 8005686:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800568a:	4b31      	ldr	r3, [pc, #196]	; (8005750 <HAL_SAI_Init+0x2e4>)
 800568c:	fba3 2300 	umull	r2, r3, r3, r0
 8005690:	08db      	lsrs	r3, r3, #3
 8005692:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 8005694:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005698:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800569c:	2808      	cmp	r0, #8
 800569e:	d901      	bls.n	80056a4 <HAL_SAI_Init+0x238>
      hsai->Init.Mckdiv+= 1;
 80056a0:	3301      	adds	r3, #1
 80056a2:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	bf18      	it	ne
 80056aa:	2b00      	cmpne	r3, #0
 80056ac:	f040 812e 	bne.w	800590c <HAL_SAI_Init+0x4a0>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80056b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	f000 8127 	beq.w	8005906 <HAL_SAI_Init+0x49a>
 80056b8:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80056bc:	6821      	ldr	r1, [r4, #0]
 80056be:	680b      	ldr	r3, [r1, #0]
 80056c0:	4a24      	ldr	r2, [pc, #144]	; (8005754 <HAL_SAI_Init+0x2e8>)
 80056c2:	401a      	ands	r2, r3
 80056c4:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	6811      	ldr	r1, [r2, #0]
 80056ca:	6863      	ldr	r3, [r4, #4]
 80056cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80056ce:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80056d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80056d2:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80056d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80056d6:	4303      	orrs	r3, r0
 80056d8:	ea43 030c 	orr.w	r3, r3, ip
                        ckstr_bits | syncen_bits |                               \
 80056dc:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056de:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80056e0:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056e2:	6920      	ldr	r0, [r4, #16]
 80056e4:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80056e6:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056e8:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80056ea:	6a20      	ldr	r0, [r4, #32]
 80056ec:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80056f4:	6822      	ldr	r2, [r4, #0]
 80056f6:	6851      	ldr	r1, [r2, #4]
 80056f8:	4b17      	ldr	r3, [pc, #92]	; (8005758 <HAL_SAI_Init+0x2ec>)
 80056fa:	400b      	ands	r3, r1
 80056fc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80056fe:	6821      	ldr	r1, [r4, #0]
 8005700:	684a      	ldr	r2, [r1, #4]
 8005702:	69a3      	ldr	r3, [r4, #24]
 8005704:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005706:	4303      	orrs	r3, r0
 8005708:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800570a:	4303      	orrs	r3, r0
 800570c:	4313      	orrs	r3, r2
 800570e:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	6891      	ldr	r1, [r2, #8]
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <HAL_SAI_Init+0x2f0>)
 8005716:	400b      	ands	r3, r1
 8005718:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	6882      	ldr	r2, [r0, #8]
 800571e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005720:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8005722:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005724:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8005726:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8005728:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 800572a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800572c:	430b      	orrs	r3, r1
 800572e:	e017      	b.n	8005760 <HAL_SAI_Init+0x2f4>
 8005730:	40015804 	.word	0x40015804
 8005734:	40015824 	.word	0x40015824
 8005738:	0801a988 	.word	0x0801a988
 800573c:	0002ee00 	.word	0x0002ee00
 8005740:	00017700 	.word	0x00017700
 8005744:	40015000 	.word	0x40015000
 8005748:	40015c04 	.word	0x40015c04
 800574c:	40015c24 	.word	0x40015c24
 8005750:	cccccccd 	.word	0xcccccccd
 8005754:	ff05c010 	.word	0xff05c010
 8005758:	ffff1ff0 	.word	0xffff1ff0
 800575c:	fff88000 	.word	0xfff88000
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005760:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005762:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8005764:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005768:	4313      	orrs	r3, r2
 800576a:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800576c:	6822      	ldr	r2, [r4, #0]
 800576e:	68d3      	ldr	r3, [r2, #12]
 8005770:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005774:	f023 030f 	bic.w	r3, r3, #15
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800577e:	6820      	ldr	r0, [r4, #0]
 8005780:	68c2      	ldr	r2, [r0, #12]
 8005782:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005784:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005786:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005788:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800578a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800578e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005790:	3901      	subs	r1, #1
 8005792:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005796:	4313      	orrs	r3, r2
 8005798:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800579a:	2000      	movs	r0, #0
 800579c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80057a6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 80057ac:	f240 1173 	movw	r1, #371	; 0x173
 80057b0:	485c      	ldr	r0, [pc, #368]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80057b2:	f00f fbb9 	bl	8014f28 <assert_failed>
 80057b6:	e694      	b.n	80054e2 <HAL_SAI_Init+0x76>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 80057b8:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80057bc:	4859      	ldr	r0, [pc, #356]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80057be:	f00f fbb3 	bl	8014f28 <assert_failed>
 80057c2:	e696      	b.n	80054f2 <HAL_SAI_Init+0x86>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 80057c4:	f240 1175 	movw	r1, #373	; 0x175
 80057c8:	4856      	ldr	r0, [pc, #344]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80057ca:	f00f fbad 	bl	8014f28 <assert_failed>
 80057ce:	e694      	b.n	80054fa <HAL_SAI_Init+0x8e>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 80057d0:	f44f 71bb 	mov.w	r1, #374	; 0x176
 80057d4:	4853      	ldr	r0, [pc, #332]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80057d6:	f00f fba7 	bl	8014f28 <assert_failed>
 80057da:	e69c      	b.n	8005516 <HAL_SAI_Init+0xaa>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 80057dc:	f240 1177 	movw	r1, #375	; 0x177
 80057e0:	4850      	ldr	r0, [pc, #320]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80057e2:	f00f fba1 	bl	8014f28 <assert_failed>
 80057e6:	e69d      	b.n	8005524 <HAL_SAI_Init+0xb8>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 80057e8:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80057ec:	484d      	ldr	r0, [pc, #308]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80057ee:	f00f fb9b 	bl	8014f28 <assert_failed>
 80057f2:	e69b      	b.n	800552c <HAL_SAI_Init+0xc0>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 80057f4:	f240 1179 	movw	r1, #377	; 0x179
 80057f8:	484a      	ldr	r0, [pc, #296]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80057fa:	f00f fb95 	bl	8014f28 <assert_failed>
 80057fe:	e699      	b.n	8005534 <HAL_SAI_Init+0xc8>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8005800:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8005804:	4847      	ldr	r0, [pc, #284]	; (8005924 <HAL_SAI_Init+0x4b8>)
 8005806:	f00f fb8f 	bl	8014f28 <assert_failed>
 800580a:	e69a      	b.n	8005542 <HAL_SAI_Init+0xd6>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 800580c:	f240 117b 	movw	r1, #379	; 0x17b
 8005810:	4844      	ldr	r0, [pc, #272]	; (8005924 <HAL_SAI_Init+0x4b8>)
 8005812:	f00f fb89 	bl	8014f28 <assert_failed>
 8005816:	e69b      	b.n	8005550 <HAL_SAI_Init+0xe4>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 8005818:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800581c:	4841      	ldr	r0, [pc, #260]	; (8005924 <HAL_SAI_Init+0x4b8>)
 800581e:	f00f fb83 	bl	8014f28 <assert_failed>
 8005822:	e699      	b.n	8005558 <HAL_SAI_Init+0xec>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8005824:	f240 117d 	movw	r1, #381	; 0x17d
 8005828:	483e      	ldr	r0, [pc, #248]	; (8005924 <HAL_SAI_Init+0x4b8>)
 800582a:	f00f fb7d 	bl	8014f28 <assert_failed>
 800582e:	e69a      	b.n	8005566 <HAL_SAI_Init+0xfa>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 8005830:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8005834:	483b      	ldr	r0, [pc, #236]	; (8005924 <HAL_SAI_Init+0x4b8>)
 8005836:	f00f fb77 	bl	8014f28 <assert_failed>
 800583a:	e6a4      	b.n	8005586 <HAL_SAI_Init+0x11a>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 800583c:	f240 117f 	movw	r1, #383	; 0x17f
 8005840:	4838      	ldr	r0, [pc, #224]	; (8005924 <HAL_SAI_Init+0x4b8>)
 8005842:	f00f fb71 	bl	8014f28 <assert_failed>
 8005846:	e6a4      	b.n	8005592 <HAL_SAI_Init+0x126>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8005848:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800584c:	4835      	ldr	r0, [pc, #212]	; (8005924 <HAL_SAI_Init+0x4b8>)
 800584e:	f00f fb6b 	bl	8014f28 <assert_failed>
 8005852:	e6a2      	b.n	800559a <HAL_SAI_Init+0x12e>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8005854:	f240 1183 	movw	r1, #387	; 0x183
 8005858:	4832      	ldr	r0, [pc, #200]	; (8005924 <HAL_SAI_Init+0x4b8>)
 800585a:	f00f fb65 	bl	8014f28 <assert_failed>
 800585e:	e6a1      	b.n	80055a4 <HAL_SAI_Init+0x138>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 8005860:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8005864:	482f      	ldr	r0, [pc, #188]	; (8005924 <HAL_SAI_Init+0x4b8>)
 8005866:	f00f fb5f 	bl	8014f28 <assert_failed>
 800586a:	e6a0      	b.n	80055ae <HAL_SAI_Init+0x142>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800586c:	f240 1185 	movw	r1, #389	; 0x185
 8005870:	482c      	ldr	r0, [pc, #176]	; (8005924 <HAL_SAI_Init+0x4b8>)
 8005872:	f00f fb59 	bl	8014f28 <assert_failed>
 8005876:	e6a1      	b.n	80055bc <HAL_SAI_Init+0x150>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 8005878:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800587c:	4829      	ldr	r0, [pc, #164]	; (8005924 <HAL_SAI_Init+0x4b8>)
 800587e:	f00f fb53 	bl	8014f28 <assert_failed>
 8005882:	e6a2      	b.n	80055ca <HAL_SAI_Init+0x15e>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 8005884:	f240 1187 	movw	r1, #391	; 0x187
 8005888:	4826      	ldr	r0, [pc, #152]	; (8005924 <HAL_SAI_Init+0x4b8>)
 800588a:	f00f fb4d 	bl	8014f28 <assert_failed>
 800588e:	e6a3      	b.n	80055d8 <HAL_SAI_Init+0x16c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 8005890:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8005894:	4823      	ldr	r0, [pc, #140]	; (8005924 <HAL_SAI_Init+0x4b8>)
 8005896:	f00f fb47 	bl	8014f28 <assert_failed>
 800589a:	e6a1      	b.n	80055e0 <HAL_SAI_Init+0x174>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 800589c:	f240 118b 	movw	r1, #395	; 0x18b
 80058a0:	4820      	ldr	r0, [pc, #128]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80058a2:	f00f fb41 	bl	8014f28 <assert_failed>
 80058a6:	e6a3      	b.n	80055f0 <HAL_SAI_Init+0x184>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 80058a8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80058ac:	481d      	ldr	r0, [pc, #116]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80058ae:	f00f fb3b 	bl	8014f28 <assert_failed>
 80058b2:	e6a2      	b.n	80055fa <HAL_SAI_Init+0x18e>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 80058b4:	f240 118d 	movw	r1, #397	; 0x18d
 80058b8:	481a      	ldr	r0, [pc, #104]	; (8005924 <HAL_SAI_Init+0x4b8>)
 80058ba:	f00f fb35 	bl	8014f28 <assert_failed>
 80058be:	e6a1      	b.n	8005604 <HAL_SAI_Init+0x198>
    hsai->Lock = HAL_UNLOCKED;
 80058c0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80058c4:	4620      	mov	r0, r4
 80058c6:	f010 fda7 	bl	8016418 <HAL_SAI_MspInit>
 80058ca:	e6a0      	b.n	800560e <HAL_SAI_Init+0x1a2>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80058cc:	2210      	movs	r2, #16
 80058ce:	e6ac      	b.n	800562a <HAL_SAI_Init+0x1be>
  switch(hsai->Init.SynchroExt)
 80058d0:	2200      	movs	r2, #0
 80058d2:	e6aa      	b.n	800562a <HAL_SAI_Init+0x1be>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80058d4:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80058d8:	e6b2      	b.n	8005640 <HAL_SAI_Init+0x1d4>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80058da:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80058de:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 80058e2:	e6ad      	b.n	8005640 <HAL_SAI_Init+0x1d4>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80058e4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80058e8:	e6aa      	b.n	8005640 <HAL_SAI_Init+0x1d4>
    SAI2->GCR = tmpregisterGCR;
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <HAL_SAI_Init+0x4bc>)
 80058ec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80058f0:	e6b1      	b.n	8005656 <HAL_SAI_Init+0x1ea>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80058f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058f6:	f7ff fca9 	bl	800524c <HAL_RCCEx_GetPeriphCLKFreq>
 80058fa:	e6b7      	b.n	800566c <HAL_SAI_Init+0x200>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80058fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005900:	f7ff fca4 	bl	800524c <HAL_RCCEx_GetPeriphCLKFreq>
 8005904:	e6ba      	b.n	800567c <HAL_SAI_Init+0x210>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005906:	f04f 0c00 	mov.w	ip, #0
 800590a:	e6d7      	b.n	80056bc <HAL_SAI_Init+0x250>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800590c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800590e:	2b01      	cmp	r3, #1
 8005910:	d002      	beq.n	8005918 <HAL_SAI_Init+0x4ac>
 8005912:	f04f 0c00 	mov.w	ip, #0
 8005916:	e6d1      	b.n	80056bc <HAL_SAI_Init+0x250>
 8005918:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800591c:	e6ce      	b.n	80056bc <HAL_SAI_Init+0x250>
    return HAL_ERROR;
 800591e:	2001      	movs	r0, #1
}
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	0801a988 	.word	0x0801a988
 8005928:	40015000 	.word	0x40015000

0800592c <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
 800592c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d00c      	beq.n	800594e <HAL_SAI_DMAPause+0x22>
 8005934:	2301      	movs	r3, #1
 8005936:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800593a:	6802      	ldr	r2, [r0, #0]
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005942:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hsai);
 8005944:	2300      	movs	r3, #0
 8005946:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800594a:	4618      	mov	r0, r3
 800594c:	4770      	bx	lr
  __HAL_LOCK(hsai);
 800594e:	2002      	movs	r0, #2
}
 8005950:	4770      	bx	lr

08005952 <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
 8005952:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d015      	beq.n	8005986 <HAL_SAI_DMAResume+0x34>
 800595a:	2301      	movs	r3, #1
 800595c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005960:	6802      	ldr	r2, [r0, #0]
 8005962:	6813      	ldr	r3, [r2, #0]
 8005964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005968:	6013      	str	r3, [r2, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800596a:	6803      	ldr	r3, [r0, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005972:	d103      	bne.n	800597c <HAL_SAI_DMAResume+0x2a>
    __HAL_SAI_ENABLE(hsai);
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800597a:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
 800597c:	2300      	movs	r3, #0
 800597e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8005982:	4618      	mov	r0, r3
 8005984:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8005986:	2002      	movs	r0, #2
}
 8005988:	4770      	bx	lr

0800598a <HAL_SAI_DMAStop>:
{
 800598a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 800598c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d04c      	beq.n	8005a2e <HAL_SAI_DMAStop+0xa4>
 8005994:	4604      	mov	r4, r0
 8005996:	2301      	movs	r3, #1
 8005998:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800599c:	6802      	ldr	r2, [r0, #0]
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059a4:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80059a6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80059a8:	b368      	cbz	r0, 8005a06 <HAL_SAI_DMAStop+0x7c>
 80059aa:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b12      	cmp	r3, #18
 80059b2:	d017      	beq.n	80059e4 <HAL_SAI_DMAStop+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80059b4:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80059b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80059b8:	b120      	cbz	r0, 80059c4 <HAL_SAI_DMAStop+0x3a>
 80059ba:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b22      	cmp	r3, #34	; 0x22
 80059c2:	d024      	beq.n	8005a0e <HAL_SAI_DMAStop+0x84>
  SAI_Disable(hsai);
 80059c4:	4620      	mov	r0, r4
 80059c6:	f7ff fd2f 	bl	8005428 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	6853      	ldr	r3, [r2, #4]
 80059ce:	f043 0308 	orr.w	r3, r3, #8
 80059d2:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80059da:	2300      	movs	r3, #0
 80059dc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80059e0:	4628      	mov	r0, r5
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80059e4:	f7fb ff32 	bl	800184c <HAL_DMA_Abort>
 80059e8:	4605      	mov	r5, r0
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d0e3      	beq.n	80059b6 <HAL_SAI_DMAStop+0x2c>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80059ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	2b80      	cmp	r3, #128	; 0x80
 80059f4:	d009      	beq.n	8005a0a <HAL_SAI_DMAStop+0x80>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80059f6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80059fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8005a02:	2501      	movs	r5, #1
 8005a04:	e7d7      	b.n	80059b6 <HAL_SAI_DMAStop+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2500      	movs	r5, #0
 8005a08:	e7d5      	b.n	80059b6 <HAL_SAI_DMAStop+0x2c>
 8005a0a:	2500      	movs	r5, #0
 8005a0c:	e7d3      	b.n	80059b6 <HAL_SAI_DMAStop+0x2c>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8005a0e:	f7fb ff1d 	bl	800184c <HAL_DMA_Abort>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d0d6      	beq.n	80059c4 <HAL_SAI_DMAStop+0x3a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005a16:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d0d2      	beq.n	80059c4 <HAL_SAI_DMAStop+0x3a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a1e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a26:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8005a2a:	2501      	movs	r5, #1
 8005a2c:	e7ca      	b.n	80059c4 <HAL_SAI_DMAStop+0x3a>
  __HAL_LOCK(hsai);
 8005a2e:	2502      	movs	r5, #2
 8005a30:	e7d6      	b.n	80059e0 <HAL_SAI_DMAStop+0x56>
	...

08005a34 <HAL_SAI_Transmit_DMA>:
{
 8005a34:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	bf18      	it	ne
 8005a3a:	2900      	cmpne	r1, #0
 8005a3c:	d04c      	beq.n	8005ad8 <HAL_SAI_Transmit_DMA+0xa4>
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4613      	mov	r3, r2
  if(hsai->State == HAL_SAI_STATE_READY)
 8005a42:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 8005a46:	b2ed      	uxtb	r5, r5
 8005a48:	2d01      	cmp	r5, #1
 8005a4a:	d148      	bne.n	8005ade <HAL_SAI_Transmit_DMA+0xaa>
    __HAL_LOCK(hsai);
 8005a4c:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8005a50:	2a01      	cmp	r2, #1
 8005a52:	d046      	beq.n	8005ae2 <HAL_SAI_Transmit_DMA+0xae>
 8005a54:	2201      	movs	r2, #1
 8005a56:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8005a5a:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8005a5c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8005a60:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005a6a:	2212      	movs	r2, #18
 8005a6c:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005a70:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a72:	491d      	ldr	r1, [pc, #116]	; (8005ae8 <HAL_SAI_Transmit_DMA+0xb4>)
 8005a74:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005a76:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a78:	491c      	ldr	r1, [pc, #112]	; (8005aec <HAL_SAI_Transmit_DMA+0xb8>)
 8005a7a:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005a7c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a7e:	491c      	ldr	r1, [pc, #112]	; (8005af0 <HAL_SAI_Transmit_DMA+0xbc>)
 8005a80:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8005a82:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a84:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8005a8c:	321c      	adds	r2, #28
 8005a8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005a90:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005a92:	f7fb fe89 	bl	80017a8 <HAL_DMA_Start_IT>
 8005a96:	4606      	mov	r6, r0
 8005a98:	b118      	cbz	r0, 8005aa2 <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8005aa0:	e01b      	b.n	8005ada <HAL_SAI_Transmit_DMA+0xa6>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005aaa:	d103      	bne.n	8005ab4 <HAL_SAI_Transmit_DMA+0x80>
      __HAL_SAI_ENABLE(hsai);
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ab2:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f7ff fc9c 	bl	80053f4 <SAI_InterruptFlag>
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	6913      	ldr	r3, [r2, #16]
 8005ac0:	4303      	orrs	r3, r0
 8005ac2:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005acc:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8005ad4:	4635      	mov	r5, r6
 8005ad6:	e000      	b.n	8005ada <HAL_SAI_Transmit_DMA+0xa6>
    return  HAL_ERROR;
 8005ad8:	2501      	movs	r5, #1
}
 8005ada:	4628      	mov	r0, r5
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005ade:	2502      	movs	r5, #2
 8005ae0:	e7fb      	b.n	8005ada <HAL_SAI_Transmit_DMA+0xa6>
    __HAL_LOCK(hsai);
 8005ae2:	2502      	movs	r5, #2
 8005ae4:	e7f9      	b.n	8005ada <HAL_SAI_Transmit_DMA+0xa6>
 8005ae6:	bf00      	nop
 8005ae8:	08005b31 	.word	0x08005b31
 8005aec:	08005af5 	.word	0x08005af5
 8005af0:	08005b3b 	.word	0x08005b3b

08005af4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005af4:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8005af6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005af8:	6803      	ldr	r3, [r0, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005b00:	d112      	bne.n	8005b28 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 8005b02:	2100      	movs	r1, #0
 8005b04:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005b08:	6822      	ldr	r2, [r4, #0]
 8005b0a:	6813      	ldr	r3, [r2, #0]
 8005b0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b10:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005b12:	4620      	mov	r0, r4
 8005b14:	f7ff fc6e 	bl	80053f4 <SAI_InterruptFlag>
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	6913      	ldr	r3, [r2, #16]
 8005b1c:	ea23 0300 	bic.w	r3, r3, r0
 8005b20:	6113      	str	r3, [r2, #16]

    hsai->State= HAL_SAI_STATE_READY;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f010 fecf 	bl	80168cc <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005b2e:	bd10      	pop	{r4, pc}

08005b30 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b30:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005b32:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005b34:	f010 ff0a 	bl	801694c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005b38:	bd08      	pop	{r3, pc}

08005b3a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b3a:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b3c:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005b3e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b46:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005b4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d007      	beq.n	8005b62 <SAI_DMAError+0x28>
 8005b52:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d003      	beq.n	8005b62 <SAI_DMAError+0x28>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f010 ff38 	bl	80169d0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005b60:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b6a:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7ff fc5b 	bl	8005428 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8005b7e:	e7ec      	b.n	8005b5a <SAI_DMAError+0x20>

08005b80 <HAL_SAI_GetState>:
  return hsai->State;
 8005b80:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 8005b84:	4770      	bx	lr

08005b86 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b86:	b570      	push	{r4, r5, r6, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9301      	str	r3, [sp, #4]
  uint32_t response = 0, validvoltage = 0;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b90:	6800      	ldr	r0, [r0, #0]
 8005b92:	f002 fd53 	bl	800863c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b96:	4605      	mov	r5, r0
 8005b98:	b110      	cbz	r0, 8005ba0 <SD_PowerON+0x1a>
      hsd->SdCard.CardType = CARD_SDSC;
    }
  }
  
  return HAL_SD_ERROR_NONE;
}
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	f002 fd5e 	bl	8008662 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	b1f8      	cbz	r0, 8005bea <SD_PowerON+0x64>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005baa:	2300      	movs	r3, #0
 8005bac:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 8005bae:	4628      	mov	r0, r5
    while(validvoltage == 0)
 8005bb0:	b9c0      	cbnz	r0, 8005be4 <SD_PowerON+0x5e>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005bb2:	9b01      	ldr	r3, [sp, #4]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	9201      	str	r2, [sp, #4]
 8005bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d03f      	beq.n	8005c40 <SD_PowerON+0xba>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	6820      	ldr	r0, [r4, #0]
 8005bc4:	f002 fd64 	bl	8008690 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d13c      	bne.n	8005c46 <SD_PowerON+0xc0>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8005bcc:	2100      	movs	r1, #0
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	f002 fd76 	bl	80086c0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d139      	bne.n	8005c4c <SD_PowerON+0xc6>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bd8:	2100      	movs	r1, #0
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	f002 fb08 	bl	80081f0 <SDMMC_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8005be0:	0fc0      	lsrs	r0, r0, #31
 8005be2:	e7e5      	b.n	8005bb0 <SD_PowerON+0x2a>
    hsd->SdCard.CardType = CARD_SDSC;
 8005be4:	2300      	movs	r3, #0
 8005be6:	6463      	str	r3, [r4, #68]	; 0x44
 8005be8:	e7d7      	b.n	8005b9a <SD_PowerON+0x14>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005bea:	2301      	movs	r3, #1
 8005bec:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 8005bee:	4605      	mov	r5, r0
    while(validvoltage == 0)
 8005bf0:	b9e0      	cbnz	r0, 8005c2c <SD_PowerON+0xa6>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005bf2:	9b01      	ldr	r3, [sp, #4]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	9201      	str	r2, [sp, #4]
 8005bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d028      	beq.n	8005c52 <SD_PowerON+0xcc>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005c00:	2100      	movs	r1, #0
 8005c02:	6820      	ldr	r0, [r4, #0]
 8005c04:	f002 fd44 	bl	8008690 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005c08:	4605      	mov	r5, r0
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d1c5      	bne.n	8005b9a <SD_PowerON+0x14>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8005c0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	f002 fd54 	bl	80086c0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005c18:	4605      	mov	r5, r0
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d1bd      	bne.n	8005b9a <SD_PowerON+0x14>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c1e:	2100      	movs	r1, #0
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	f002 fae5 	bl	80081f0 <SDMMC_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8005c26:	4605      	mov	r5, r0
 8005c28:	0fc0      	lsrs	r0, r0, #31
 8005c2a:	e7e1      	b.n	8005bf0 <SD_PowerON+0x6a>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c2c:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8005c30:	d003      	beq.n	8005c3a <SD_PowerON+0xb4>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c32:	2301      	movs	r3, #1
 8005c34:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8005c36:	4635      	mov	r5, r6
 8005c38:	e7af      	b.n	8005b9a <SD_PowerON+0x14>
      hsd->SdCard.CardType = CARD_SDSC;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	6463      	str	r3, [r4, #68]	; 0x44
 8005c3e:	e7ac      	b.n	8005b9a <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c40:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005c44:	e7a9      	b.n	8005b9a <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c46:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005c4a:	e7a6      	b.n	8005b9a <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c4c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005c50:	e7a3      	b.n	8005b9a <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c52:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005c56:	e7a0      	b.n	8005b9a <SD_PowerON+0x14>

08005c58 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8005c60:	f7fb faf0 	bl	8001244 <HAL_GetTick>
 8005c64:	4606      	mov	r6, r0
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8005c66:	2300      	movs	r3, #0
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	9301      	str	r3, [sp, #4]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8005c6c:	2108      	movs	r1, #8
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	f002 fc3a 	bl	80084e8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8005c74:	4605      	mov	r5, r0
 8005c76:	b110      	cbz	r0, 8005c7e <SD_FindSCR+0x26>
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8005c78:	4628      	mov	r0, r5
 8005c7a:	b009      	add	sp, #36	; 0x24
 8005c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8005c7e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005c80:	0409      	lsls	r1, r1, #16
 8005c82:	6820      	ldr	r0, [r4, #0]
 8005c84:	f002 fd04 	bl	8008690 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8005c88:	4605      	mov	r5, r0
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d1f4      	bne.n	8005c78 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 8005c94:	2308      	movs	r3, #8
 8005c96:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005c98:	2330      	movs	r3, #48	; 0x30
 8005c9a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 8005ca8:	a902      	add	r1, sp, #8
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	f002 fbb6 	bl	800841c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005cb0:	6820      	ldr	r0, [r4, #0]
 8005cb2:	f002 fd37 	bl	8008724 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	b130      	cbz	r0, 8005cc8 <SD_FindSCR+0x70>
 8005cba:	e7dd      	b.n	8005c78 <SD_FindSCR+0x20>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005cbc:	f7fb fac2 	bl	8001244 <HAL_GetTick>
 8005cc0:	1b83      	subs	r3, r0, r6
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d042      	beq.n	8005d4e <SD_FindSCR+0xf6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005ccc:	f240 432a 	movw	r3, #1066	; 0x42a
 8005cd0:	421a      	tst	r2, r3
 8005cd2:	d109      	bne.n	8005ce8 <SD_FindSCR+0x90>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005cd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cd6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005cda:	d0ef      	beq.n	8005cbc <SD_FindSCR+0x64>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005cdc:	f002 fa2c 	bl	8008138 <SDMMC_ReadFIFO>
 8005ce0:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	e7e9      	b.n	8005cbc <SD_FindSCR+0x64>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005ce8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cea:	f013 0f08 	tst.w	r3, #8
 8005cee:	d125      	bne.n	8005d3c <SD_FindSCR+0xe4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005cf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cf2:	f013 0f02 	tst.w	r3, #2
 8005cf6:	d124      	bne.n	8005d42 <SD_FindSCR+0xea>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005cf8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005cfa:	f015 0520 	ands.w	r5, r5, #32
 8005cfe:	d123      	bne.n	8005d48 <SD_FindSCR+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d00:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005d04:	6383      	str	r3, [r0, #56]	; 0x38
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d06:	9a00      	ldr	r2, [sp, #0]
 8005d08:	0213      	lsls	r3, r2, #8
 8005d0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8005d12:	0a11      	lsrs	r1, r2, #8
 8005d14:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d18:	430b      	orrs	r3, r1
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8005d1a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d1e:	607b      	str	r3, [r7, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d20:	9a01      	ldr	r2, [sp, #4]
 8005d22:	0213      	lsls	r3, r2, #8
 8005d24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8005d2c:	0a11      	lsrs	r1, r2, #8
 8005d2e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d32:	430b      	orrs	r3, r1
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8005d34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d38:	603b      	str	r3, [r7, #0]
  return HAL_SD_ERROR_NONE;
 8005d3a:	e79d      	b.n	8005c78 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005d3c:	2508      	movs	r5, #8
 8005d3e:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d40:	e79a      	b.n	8005c78 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005d42:	2502      	movs	r5, #2
 8005d44:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d46:	e797      	b.n	8005c78 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005d48:	2520      	movs	r5, #32
 8005d4a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005d4c:	e794      	b.n	8005c78 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8005d4e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005d52:	e791      	b.n	8005c78 <SD_FindSCR+0x20>

08005d54 <SD_WideBus_Enable>:
{
 8005d54:	b510      	push	{r4, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	9100      	str	r1, [sp, #0]
 8005d5e:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d60:	6800      	ldr	r0, [r0, #0]
 8005d62:	f002 fa45 	bl	80081f0 <SDMMC_GetResponse>
 8005d66:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005d6a:	d113      	bne.n	8005d94 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8005d6c:	4669      	mov	r1, sp
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f7ff ff72 	bl	8005c58 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005d74:	b980      	cbnz	r0, 8005d98 <SD_WideBus_Enable+0x44>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d76:	9b01      	ldr	r3, [sp, #4]
 8005d78:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005d7c:	d00e      	beq.n	8005d9c <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005d7e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005d80:	0409      	lsls	r1, r1, #16
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	f002 fc84 	bl	8008690 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005d88:	b930      	cbnz	r0, 8005d98 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	f002 fcb1 	bl	80086f4 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_OK)
 8005d92:	e001      	b.n	8005d98 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d94:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8005d98:	b002      	add	sp, #8
 8005d9a:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d9c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005da0:	e7fa      	b.n	8005d98 <SD_WideBus_Enable+0x44>

08005da2 <SD_WideBus_Disable>:
{
 8005da2:	b510      	push	{r4, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 8005da8:	2100      	movs	r1, #0
 8005daa:	9100      	str	r1, [sp, #0]
 8005dac:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005dae:	6800      	ldr	r0, [r0, #0]
 8005db0:	f002 fa1e 	bl	80081f0 <SDMMC_GetResponse>
 8005db4:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005db8:	d113      	bne.n	8005de2 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8005dba:	4669      	mov	r1, sp
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f7ff ff4b 	bl	8005c58 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005dc2:	b980      	cbnz	r0, 8005de6 <SD_WideBus_Disable+0x44>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005dc4:	9b01      	ldr	r3, [sp, #4]
 8005dc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005dca:	d00e      	beq.n	8005dea <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005dcc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005dce:	0409      	lsls	r1, r1, #16
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	f002 fc5d 	bl	8008690 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005dd6:	b930      	cbnz	r0, 8005de6 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8005dd8:	2100      	movs	r1, #0
 8005dda:	6820      	ldr	r0, [r4, #0]
 8005ddc:	f002 fc8a 	bl	80086f4 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_OK)
 8005de0:	e001      	b.n	8005de6 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005de2:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8005de6:	b002      	add	sp, #8
 8005de8:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005dea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005dee:	e7fa      	b.n	8005de6 <SD_WideBus_Disable+0x44>

08005df0 <SD_SendStatus>:
{
 8005df0:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8005df2:	b181      	cbz	r1, 8005e16 <SD_SendStatus+0x26>
 8005df4:	4604      	mov	r4, r0
 8005df6:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005df8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005dfa:	0409      	lsls	r1, r1, #16
 8005dfc:	6800      	ldr	r0, [r0, #0]
 8005dfe:	f002 fceb 	bl	80087d8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8005e02:	4605      	mov	r5, r0
 8005e04:	b108      	cbz	r0, 8005e0a <SD_SendStatus+0x1a>
}
 8005e06:	4628      	mov	r0, r5
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	f002 f9ef 	bl	80081f0 <SDMMC_GetResponse>
 8005e12:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8005e14:	e7f7      	b.n	8005e06 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8005e16:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8005e1a:	e7f4      	b.n	8005e06 <SD_SendStatus+0x16>

08005e1c <HAL_SD_ReadBlocks>:
{
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	4604      	mov	r4, r0
 8005e24:	460e      	mov	r6, r1
 8005e26:	4615      	mov	r5, r2
 8005e28:	4699      	mov	r9, r3
 8005e2a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8005e2e:	f7fb fa09 	bl	8001244 <HAL_GetTick>
  if(NULL == pData)
 8005e32:	b346      	cbz	r6, 8005e86 <HAL_SD_ReadBlocks+0x6a>
 8005e34:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005e36:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 8005e3a:	b2ff      	uxtb	r7, r7
 8005e3c:	2f01      	cmp	r7, #1
 8005e3e:	f040 80f1 	bne.w	8006024 <HAL_SD_ReadBlocks+0x208>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e46:	eb05 0309 	add.w	r3, r5, r9
 8005e4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d820      	bhi.n	8005e92 <HAL_SD_ReadBlocks+0x76>
    hsd->State = HAL_SD_STATE_BUSY;
 8005e50:	2303      	movs	r3, #3
 8005e52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0;
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d000      	beq.n	8005e64 <HAL_SD_ReadBlocks+0x48>
      BlockAdd *= 512;
 8005e62:	026d      	lsls	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	f002 fb3d 	bl	80084e8 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e6e:	b1a8      	cbz	r0, 8005e9c <HAL_SD_ReadBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8005e76:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e7a:	4303      	orrs	r3, r0
 8005e7c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005e84:	e0d3      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e8c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005e8e:	2701      	movs	r7, #1
 8005e90:	e0cd      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e98:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005e9a:	e0c8      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea0:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005ea2:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8005ea6:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ea8:	2390      	movs	r3, #144	; 0x90
 8005eaa:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005eac:	2302      	movs	r3, #2
 8005eae:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8005eb8:	4669      	mov	r1, sp
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	f002 faae 	bl	800841c <SDMMC_ConfigData>
    if(NumberOfBlocks > 1)
 8005ec0:	f1b9 0f01 	cmp.w	r9, #1
 8005ec4:	d911      	bls.n	8005eea <HAL_SD_ReadBlocks+0xce>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8005eca:	4629      	mov	r1, r5
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	f002 fb3b 	bl	8008548 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ed2:	b318      	cbz	r0, 8005f1c <HAL_SD_ReadBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ede:	4318      	orrs	r0, r3
 8005ee0:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005ee8:	e0a1      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005eea:	2301      	movs	r3, #1
 8005eec:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8005eee:	4629      	mov	r1, r5
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	f002 fb11 	bl	8008518 <SDMMC_CmdReadSingleBlock>
 8005ef6:	e7ec      	b.n	8005ed2 <HAL_SD_ReadBlocks+0xb6>
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	f002 f91d 	bl	8008138 <SDMMC_ReadFIFO>
 8005efe:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
        for(count = 0U; count < 8U; count++)
 8005f02:	3501      	adds	r5, #1
 8005f04:	2d07      	cmp	r5, #7
 8005f06:	d9f7      	bls.n	8005ef8 <HAL_SD_ReadBlocks+0xdc>
        tempbuff += 8U;
 8005f08:	3620      	adds	r6, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005f0a:	f1ba 0f00 	cmp.w	sl, #0
 8005f0e:	d00f      	beq.n	8005f30 <HAL_SD_ReadBlocks+0x114>
 8005f10:	f7fb f998 	bl	8001244 <HAL_GetTick>
 8005f14:	eba0 0008 	sub.w	r0, r0, r8
 8005f18:	4550      	cmp	r0, sl
 8005f1a:	d209      	bcs.n	8005f30 <HAL_SD_ReadBlocks+0x114>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005f20:	f415 7595 	ands.w	r5, r5, #298	; 0x12a
 8005f24:	d111      	bne.n	8005f4a <HAL_SD_ReadBlocks+0x12e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005f26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f28:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005f2c:	d0ed      	beq.n	8005f0a <HAL_SD_ReadBlocks+0xee>
 8005f2e:	e7e9      	b.n	8005f04 <HAL_SD_ReadBlocks+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005f38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f3e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8005f46:	2703      	movs	r7, #3
 8005f48:	e071      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005f4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f50:	d005      	beq.n	8005f5e <HAL_SD_ReadBlocks+0x142>
 8005f52:	f1b9 0f01 	cmp.w	r9, #1
 8005f56:	d902      	bls.n	8005f5e <HAL_SD_ReadBlocks+0x142>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005f58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d12a      	bne.n	8005fb4 <HAL_SD_ReadBlocks+0x198>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f62:	f012 0f08 	tst.w	r2, #8
 8005f66:	d134      	bne.n	8005fd2 <HAL_SD_ReadBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f6a:	f012 0f02 	tst.w	r2, #2
 8005f6e:	d13b      	bne.n	8005fe8 <HAL_SD_ReadBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f72:	f012 0f20 	tst.w	r2, #32
 8005f76:	d142      	bne.n	8005ffe <HAL_SD_ReadBlocks+0x1e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f7c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005f80:	d048      	beq.n	8006014 <HAL_SD_ReadBlocks+0x1f8>
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8005f82:	f002 f8d9 	bl	8008138 <SDMMC_ReadFIFO>
 8005f86:	f846 0b04 	str.w	r0, [r6], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005f8a:	f1ba 0f00 	cmp.w	sl, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_SD_ReadBlocks+0x180>
 8005f90:	f7fb f958 	bl	8001244 <HAL_GetTick>
 8005f94:	eba0 0008 	sub.w	r0, r0, r8
 8005f98:	4550      	cmp	r0, sl
 8005f9a:	d3ed      	bcc.n	8005f78 <HAL_SD_ReadBlocks+0x15c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005faa:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005fac:	2301      	movs	r3, #1
 8005fae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 8005fb2:	e03c      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fb4:	f002 fb10 	bl	80085d8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d0d0      	beq.n	8005f5e <HAL_SD_ReadBlocks+0x142>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8005fc2:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005fc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fc6:	4303      	orrs	r3, r0
 8005fc8:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_ERROR;
 8005fd0:	e02d      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fd2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005fd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fda:	f043 0308 	orr.w	r3, r3, #8
 8005fde:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005fe6:	e022      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fe8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ff0:	f043 0302 	orr.w	r3, r3, #2
 8005ff4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005ffc:	e017      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ffe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006004:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006006:	f043 0320 	orr.w	r3, r3, #32
 800600a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800600c:	2301      	movs	r3, #1
 800600e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8006012:	e00c      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006014:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006018:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800601a:	2301      	movs	r3, #1
 800601c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8006020:	2700      	movs	r7, #0
 8006022:	e004      	b.n	800602e <HAL_SD_ReadBlocks+0x212>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800602a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800602c:	2701      	movs	r7, #1
}
 800602e:	4638      	mov	r0, r7
 8006030:	b006      	add	sp, #24
 8006032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006036 <HAL_SD_WriteBlocks>:
{
 8006036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	b087      	sub	sp, #28
 800603c:	4604      	mov	r4, r0
 800603e:	460e      	mov	r6, r1
 8006040:	4615      	mov	r5, r2
 8006042:	4699      	mov	r9, r3
 8006044:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006048:	f7fb f8fc 	bl	8001244 <HAL_GetTick>
  if(NULL == pData)
 800604c:	2e00      	cmp	r6, #0
 800604e:	d036      	beq.n	80060be <HAL_SD_WriteBlocks+0x88>
 8006050:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8006052:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 8006056:	b2ff      	uxtb	r7, r7
 8006058:	2f01      	cmp	r7, #1
 800605a:	f040 80d8 	bne.w	800620e <HAL_SD_WriteBlocks+0x1d8>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800605e:	2300      	movs	r3, #0
 8006060:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006062:	eb05 0309 	add.w	r3, r5, r9
 8006066:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006068:	4293      	cmp	r3, r2
 800606a:	d82e      	bhi.n	80060ca <HAL_SD_WriteBlocks+0x94>
    hsd->State = HAL_SD_STATE_BUSY;
 800606c:	2303      	movs	r3, #3
 800606e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0;
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	2200      	movs	r2, #0
 8006076:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006078:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800607a:	2b01      	cmp	r3, #1
 800607c:	d000      	beq.n	8006080 <HAL_SD_WriteBlocks+0x4a>
      BlockAdd *= 512;
 800607e:	026d      	lsls	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	f002 fa2f 	bl	80084e8 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800608a:	bb18      	cbnz	r0, 80060d4 <HAL_SD_WriteBlocks+0x9e>
    if(NumberOfBlocks > 1U)
 800608c:	f1b9 0f01 	cmp.w	r9, #1
 8006090:	d92b      	bls.n	80060ea <HAL_SD_WriteBlocks+0xb4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006092:	2320      	movs	r3, #32
 8006094:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8006096:	4629      	mov	r1, r5
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	f002 fa85 	bl	80085a8 <SDMMC_CmdWriteMultiBlock>
 800609e:	4683      	mov	fp, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80060a0:	f1bb 0f00 	cmp.w	fp, #0
 80060a4:	d029      	beq.n	80060fa <HAL_SD_WriteBlocks+0xc4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80060b0:	ea40 000b 	orr.w	r0, r0, fp
 80060b4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80060bc:	e0ac      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060c4:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80060c6:	2701      	movs	r7, #1
 80060c8:	e0a6      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060d0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80060d2:	e0a1      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80060da:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060de:	4303      	orrs	r3, r0
 80060e0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80060e8:	e096      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80060ea:	2310      	movs	r3, #16
 80060ec:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80060ee:	4629      	mov	r1, r5
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	f002 fa41 	bl	8008578 <SDMMC_CmdWriteSingleBlock>
 80060f6:	4683      	mov	fp, r0
 80060f8:	e7d2      	b.n	80060a0 <HAL_SD_WriteBlocks+0x6a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060fa:	f04f 33ff 	mov.w	r3, #4294967295
 80060fe:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006100:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8006104:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006106:	2390      	movs	r3, #144	; 0x90
 8006108:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800610a:	2300      	movs	r3, #0
 800610c:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800610e:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006110:	2301      	movs	r3, #1
 8006112:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8006114:	4669      	mov	r1, sp
 8006116:	6820      	ldr	r0, [r4, #0]
 8006118:	f002 f980 	bl	800841c <SDMMC_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800611c:	e011      	b.n	8006142 <HAL_SD_WriteBlocks+0x10c>
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 800611e:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8006122:	6820      	ldr	r0, [r4, #0]
 8006124:	f002 f80b 	bl	800813e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006128:	3501      	adds	r5, #1
 800612a:	2d07      	cmp	r5, #7
 800612c:	d9f7      	bls.n	800611e <HAL_SD_WriteBlocks+0xe8>
        tempbuff += 8U;
 800612e:	3620      	adds	r6, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006130:	f1ba 0f00 	cmp.w	sl, #0
 8006134:	d00f      	beq.n	8006156 <HAL_SD_WriteBlocks+0x120>
 8006136:	f7fb f885 	bl	8001244 <HAL_GetTick>
 800613a:	eba0 0008 	sub.w	r0, r0, r8
 800613e:	4550      	cmp	r0, sl
 8006140:	d209      	bcs.n	8006156 <HAL_SD_WriteBlocks+0x120>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006146:	f415 758d 	ands.w	r5, r5, #282	; 0x11a
 800614a:	d111      	bne.n	8006170 <HAL_SD_WriteBlocks+0x13a>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 800614c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800614e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006152:	d0ed      	beq.n	8006130 <HAL_SD_WriteBlocks+0xfa>
 8006154:	e7e9      	b.n	800612a <HAL_SD_WriteBlocks+0xf4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800615c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800615e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006160:	ea40 000b 	orr.w	r0, r0, fp
 8006164:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006166:	2301      	movs	r3, #1
 8006168:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800616c:	2703      	movs	r7, #3
 800616e:	e053      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006170:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006172:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006176:	d005      	beq.n	8006184 <HAL_SD_WriteBlocks+0x14e>
 8006178:	f1b9 0f01 	cmp.w	r9, #1
 800617c:	d902      	bls.n	8006184 <HAL_SD_WriteBlocks+0x14e>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800617e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006180:	2b03      	cmp	r3, #3
 8006182:	d117      	bne.n	80061b4 <HAL_SD_WriteBlocks+0x17e>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006188:	f012 0f08 	tst.w	r2, #8
 800618c:	d121      	bne.n	80061d2 <HAL_SD_WriteBlocks+0x19c>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800618e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006190:	f012 0f02 	tst.w	r2, #2
 8006194:	d128      	bne.n	80061e8 <HAL_SD_WriteBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006198:	f012 0f10 	tst.w	r2, #16
 800619c:	d02f      	beq.n	80061fe <HAL_SD_WriteBlocks+0x1c8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800619e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80061a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061a6:	f043 0310 	orr.w	r3, r3, #16
 80061aa:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80061b2:	e031      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061b4:	f002 fa10 	bl	80085d8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d0e3      	beq.n	8006184 <HAL_SD_WriteBlocks+0x14e>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80061c2:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80061c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061c6:	4303      	orrs	r3, r0
 80061c8:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_ERROR;
 80061d0:	e022      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80061d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061da:	f043 0308 	orr.w	r3, r3, #8
 80061de:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80061e6:	e017      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80061ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061f0:	f043 0302 	orr.w	r3, r3, #2
 80061f4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80061fc:	e00c      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006202:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006204:	2301      	movs	r3, #1
 8006206:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800620a:	2700      	movs	r7, #0
 800620c:	e004      	b.n	8006218 <HAL_SD_WriteBlocks+0x1e2>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800620e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006210:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006214:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006216:	2701      	movs	r7, #1
}
 8006218:	4638      	mov	r0, r7
 800621a:	b007      	add	sp, #28
 800621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006220 <HAL_SD_GetCardCSD>:
{
 8006220:	b410      	push	{r4}
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8006222:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006224:	0f9a      	lsrs	r2, r3, #30
 8006226:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8006228:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800622c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800622e:	f3c3 6301 	ubfx	r3, r3, #24, #2
 8006232:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8006234:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8006238:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 800623a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 800623e:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8006240:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8006244:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8006246:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	80cb      	strh	r3, [r1, #6]
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 800624e:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006252:	88cb      	ldrh	r3, [r1, #6]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f3c2 1403 	ubfx	r4, r2, #4, #4
 800625a:	4323      	orrs	r3, r4
 800625c:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800625e:	f002 020f 	and.w	r2, r2, #15
 8006262:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8006264:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8006268:	09da      	lsrs	r2, r3, #7
 800626a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800626c:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8006270:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8006272:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8006276:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8006278:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800627c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800627e:	2200      	movs	r2, #0
 8006280:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006282:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006284:	2a00      	cmp	r2, #0
 8006286:	f040 808f 	bne.w	80063a8 <HAL_SD_GetCardCSD+0x188>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006290:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8006292:	690b      	ldr	r3, [r1, #16]
 8006294:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 8006298:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800629c:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800629e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80062a0:	690a      	ldr	r2, [r1, #16]
 80062a2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80062a6:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80062a8:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 80062ac:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80062ae:	f3c3 6302 	ubfx	r3, r3, #24, #3
 80062b2:	754b      	strb	r3, [r1, #21]
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80062b4:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80062b8:	095a      	lsrs	r2, r3, #5
 80062ba:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80062bc:	f3c3 0282 	ubfx	r2, r3, #2, #3
 80062c0:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	f003 0306 	and.w	r3, r3, #6
 80062c8:	760b      	strb	r3, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80062ca:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80062ce:	7e0a      	ldrb	r2, [r1, #24]
 80062d0:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 80062d4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80062d6:	690a      	ldr	r2, [r1, #16]
 80062d8:	3201      	adds	r2, #1
 80062da:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80062dc:	7e0c      	ldrb	r4, [r1, #24]
 80062de:	3402      	adds	r4, #2
 80062e0:	40a2      	lsls	r2, r4
 80062e2:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80062e4:	7a0c      	ldrb	r4, [r1, #8]
 80062e6:	fa5f fc84 	uxtb.w	ip, r4
 80062ea:	2401      	movs	r4, #1
 80062ec:	fa04 f40c 	lsl.w	r4, r4, ip
 80062f0:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80062f2:	0a64      	lsrs	r4, r4, #9
 80062f4:	fb04 f202 	mul.w	r2, r4, r2
 80062f8:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 80062fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fe:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8006300:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8006304:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800630c:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800630e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8006312:	7e8a      	ldrb	r2, [r1, #26]
 8006314:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 8006318:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800631a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800631e:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8006320:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006322:	0e1a      	lsrs	r2, r3, #24
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006324:	0fdc      	lsrs	r4, r3, #31
 8006326:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8006328:	f3c3 7441 	ubfx	r4, r3, #29, #2
 800632c:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800632e:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8006332:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006334:	0093      	lsls	r3, r2, #2
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	77cb      	strb	r3, [r1, #31]
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800633c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006340:	7fca      	ldrb	r2, [r1, #31]
 8006342:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
 8006346:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006348:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800634c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 8006350:	2200      	movs	r2, #0
 8006352:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800635e:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8006362:	09dc      	lsrs	r4, r3, #7
 8006364:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8006368:	f3c3 1480 	ubfx	r4, r3, #6, #1
 800636c:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8006370:	f3c3 1440 	ubfx	r4, r3, #5, #1
 8006374:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8006378:	f3c3 1400 	ubfx	r4, r3, #4, #1
 800637c:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8006380:	f3c3 0481 	ubfx	r4, r3, #2, #2
 8006384:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8006390:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800639a:	2301      	movs	r3, #1
 800639c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  return HAL_OK;
 80063a0:	4610      	mov	r0, r2
}
 80063a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063a6:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80063a8:	2a01      	cmp	r2, #1
 80063aa:	d11c      	bne.n	80063e6 <HAL_SD_GetCardCSD+0x1c6>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80063ac:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80063b0:	041b      	lsls	r3, r3, #16
 80063b2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80063b6:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80063b8:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    pCSD->DeviceSize |= (tmp << 8);
 80063bc:	690b      	ldr	r3, [r1, #16]
 80063be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80063c2:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80063c4:	690a      	ldr	r2, [r1, #16]
 80063c6:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 80063ca:	4313      	orrs	r3, r2
 80063cc:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80063ce:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80063d2:	690a      	ldr	r2, [r1, #16]
 80063d4:	3201      	adds	r2, #1
 80063d6:	0292      	lsls	r2, r2, #10
 80063d8:	6542      	str	r2, [r0, #84]	; 0x54
 80063da:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80063dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e0:	6582      	str	r2, [r0, #88]	; 0x58
 80063e2:	6602      	str	r2, [r0, #96]	; 0x60
 80063e4:	e78c      	b.n	8006300 <HAL_SD_GetCardCSD+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80063e6:	6803      	ldr	r3, [r0, #0]
 80063e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f4:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063f6:	2201      	movs	r2, #1
 80063f8:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    return HAL_ERROR;
 80063fc:	4610      	mov	r0, r2
 80063fe:	e7d0      	b.n	80063a2 <HAL_SD_GetCardCSD+0x182>

08006400 <SD_InitCard>:
{
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	b090      	sub	sp, #64	; 0x40
 8006404:	4604      	mov	r4, r0
  uint16_t sd_rca = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800640c:	6800      	ldr	r0, [r0, #0]
 800640e:	f001 fe9f 	bl	8008150 <SDMMC_GetPowerState>
 8006412:	2800      	cmp	r0, #0
 8006414:	d06a      	beq.n	80064ec <SD_InitCard+0xec>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006416:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006418:	2b03      	cmp	r3, #3
 800641a:	d143      	bne.n	80064a4 <SD_InitCard+0xa4>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800641c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800641e:	2b03      	cmp	r3, #3
 8006420:	d15b      	bne.n	80064da <SD_InitCard+0xda>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006422:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006424:	2b03      	cmp	r3, #3
 8006426:	d01d      	beq.n	8006464 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006428:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800642c:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800642e:	0409      	lsls	r1, r1, #16
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	f002 f9a4 	bl	800877e <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006436:	4605      	mov	r5, r0
 8006438:	2800      	cmp	r0, #0
 800643a:	d159      	bne.n	80064f0 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800643c:	2100      	movs	r1, #0
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	f001 fed6 	bl	80081f0 <SDMMC_GetResponse>
 8006444:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006446:	2104      	movs	r1, #4
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	f001 fed1 	bl	80081f0 <SDMMC_GetResponse>
 800644e:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006450:	2108      	movs	r1, #8
 8006452:	6820      	ldr	r0, [r4, #0]
 8006454:	f001 fecc 	bl	80081f0 <SDMMC_GetResponse>
 8006458:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800645a:	210c      	movs	r1, #12
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	f001 fec7 	bl	80081f0 <SDMMC_GetResponse>
 8006462:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8006464:	2104      	movs	r1, #4
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	f001 fec2 	bl	80081f0 <SDMMC_GetResponse>
 800646c:	0d00      	lsrs	r0, r0, #20
 800646e:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8006470:	a905      	add	r1, sp, #20
 8006472:	4620      	mov	r0, r4
 8006474:	f7ff fed4 	bl	8006220 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8006478:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800647a:	0412      	lsls	r2, r2, #16
 800647c:	2300      	movs	r3, #0
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	f002 f8c4 	bl	800860c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006484:	4605      	mov	r5, r0
 8006486:	bb98      	cbnz	r0, 80064f0 <SD_InitCard+0xf0>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8006488:	4623      	mov	r3, r4
 800648a:	f853 6b10 	ldr.w	r6, [r3], #16
 800648e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006492:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006496:	3404      	adds	r4, #4
 8006498:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800649c:	4630      	mov	r0, r6
 800649e:	f001 fddd 	bl	800805c <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 80064a2:	e025      	b.n	80064f0 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	f002 f955 	bl	8008754 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80064aa:	4605      	mov	r5, r0
 80064ac:	bb00      	cbnz	r0, 80064f0 <SD_InitCard+0xf0>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80064ae:	2100      	movs	r1, #0
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	f001 fe9d 	bl	80081f0 <SDMMC_GetResponse>
 80064b6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80064b8:	2104      	movs	r1, #4
 80064ba:	6820      	ldr	r0, [r4, #0]
 80064bc:	f001 fe98 	bl	80081f0 <SDMMC_GetResponse>
 80064c0:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80064c2:	2108      	movs	r1, #8
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	f001 fe93 	bl	80081f0 <SDMMC_GetResponse>
 80064ca:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80064cc:	210c      	movs	r1, #12
 80064ce:	6820      	ldr	r0, [r4, #0]
 80064d0:	f001 fe8e 	bl	80081f0 <SDMMC_GetResponse>
 80064d4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80064d8:	e7a0      	b.n	800641c <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80064da:	f10d 0112 	add.w	r1, sp, #18
 80064de:	6820      	ldr	r0, [r4, #0]
 80064e0:	f002 f962 	bl	80087a8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80064e4:	4605      	mov	r5, r0
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d09b      	beq.n	8006422 <SD_InitCard+0x22>
 80064ea:	e001      	b.n	80064f0 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064ec:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 80064f0:	4628      	mov	r0, r5
 80064f2:	b010      	add	sp, #64	; 0x40
 80064f4:	bd70      	pop	{r4, r5, r6, pc}

080064f6 <HAL_SD_InitCard>:
{
 80064f6:	b510      	push	{r4, lr}
 80064f8:	b08a      	sub	sp, #40	; 0x28
 80064fa:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064fc:	2300      	movs	r3, #0
 80064fe:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006500:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006502:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006504:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006506:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006508:	2376      	movs	r3, #118	; 0x76
 800650a:	9309      	str	r3, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 800650c:	ab0a      	add	r3, sp, #40	; 0x28
 800650e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006512:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006516:	ab04      	add	r3, sp, #16
 8006518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800651a:	6820      	ldr	r0, [r4, #0]
 800651c:	f001 fd9e 	bl	800805c <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	6853      	ldr	r3, [r2, #4]
 8006524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006528:	6053      	str	r3, [r2, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	f001 fe0c 	bl	8008148 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8006530:	6822      	ldr	r2, [r4, #0]
 8006532:	6853      	ldr	r3, [r2, #4]
 8006534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006538:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 800653a:	2002      	movs	r0, #2
 800653c:	f7fa fe88 	bl	8001250 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8006540:	4620      	mov	r0, r4
 8006542:	f7ff fb20 	bl	8005b86 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006546:	b140      	cbz	r0, 800655a <HAL_SD_InitCard+0x64>
 8006548:	4602      	mov	r2, r0
    hsd->State = HAL_SD_STATE_READY;
 800654a:	2001      	movs	r0, #1
 800654c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006550:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006552:	4313      	orrs	r3, r2
 8006554:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006556:	b00a      	add	sp, #40	; 0x28
 8006558:	bd10      	pop	{r4, pc}
  errorstate = SD_InitCard(hsd);
 800655a:	4620      	mov	r0, r4
 800655c:	f7ff ff50 	bl	8006400 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006560:	4602      	mov	r2, r0
 8006562:	b908      	cbnz	r0, 8006568 <HAL_SD_InitCard+0x72>
  return HAL_OK;
 8006564:	2000      	movs	r0, #0
 8006566:	e7f6      	b.n	8006556 <HAL_SD_InitCard+0x60>
    hsd->State = HAL_SD_STATE_READY;
 8006568:	2001      	movs	r0, #1
 800656a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800656e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006570:	4313      	orrs	r3, r2
 8006572:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006574:	e7ef      	b.n	8006556 <HAL_SD_InitCard+0x60>
	...

08006578 <HAL_SD_Init>:
  if(hsd == NULL)
 8006578:	2800      	cmp	r0, #0
 800657a:	d067      	beq.n	800664c <HAL_SD_Init+0xd4>
{
 800657c:	b510      	push	{r4, lr}
 800657e:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 8006580:	6802      	ldr	r2, [r0, #0]
 8006582:	4b33      	ldr	r3, [pc, #204]	; (8006650 <HAL_SD_Init+0xd8>)
 8006584:	429a      	cmp	r2, r3
 8006586:	d004      	beq.n	8006592 <HAL_SD_Init+0x1a>
 8006588:	f240 1155 	movw	r1, #341	; 0x155
 800658c:	4831      	ldr	r0, [pc, #196]	; (8006654 <HAL_SD_Init+0xdc>)
 800658e:	f00e fccb 	bl	8014f28 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	bf18      	it	ne
 8006598:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800659c:	d12d      	bne.n	80065fa <HAL_SD_Init+0x82>
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 800659e:	68a3      	ldr	r3, [r4, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bf18      	it	ne
 80065a4:	f5b3 6f80 	cmpne.w	r3, #1024	; 0x400
 80065a8:	d12d      	bne.n	8006606 <HAL_SD_Init+0x8e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 80065aa:	68e3      	ldr	r3, [r4, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf18      	it	ne
 80065b0:	f5b3 7f00 	cmpne.w	r3, #512	; 0x200
 80065b4:	d12d      	bne.n	8006612 <HAL_SD_Init+0x9a>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf18      	it	ne
 80065bc:	f5b3 6f00 	cmpne.w	r3, #2048	; 0x800
 80065c0:	d002      	beq.n	80065c8 <HAL_SD_Init+0x50>
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c6:	d12a      	bne.n	800661e <HAL_SD_Init+0xa6>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 80065c8:	6963      	ldr	r3, [r4, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf18      	it	ne
 80065ce:	f5b3 4f80 	cmpne.w	r3, #16384	; 0x4000
 80065d2:	d12a      	bne.n	800662a <HAL_SD_Init+0xb2>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 80065d4:	69a3      	ldr	r3, [r4, #24]
 80065d6:	2bff      	cmp	r3, #255	; 0xff
 80065d8:	d82d      	bhi.n	8006636 <HAL_SD_Init+0xbe>
  if(hsd->State == HAL_SD_STATE_RESET)
 80065da:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80065de:	b383      	cbz	r3, 8006642 <HAL_SD_Init+0xca>
  hsd->State = HAL_SD_STATE_BUSY;
 80065e0:	2303      	movs	r3, #3
 80065e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff ff85 	bl	80064f6 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80065ec:	2000      	movs	r0, #0
 80065ee:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80065f0:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80065f8:	bd10      	pop	{r4, pc}
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 80065fa:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80065fe:	4815      	ldr	r0, [pc, #84]	; (8006654 <HAL_SD_Init+0xdc>)
 8006600:	f00e fc92 	bl	8014f28 <assert_failed>
 8006604:	e7cb      	b.n	800659e <HAL_SD_Init+0x26>
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8006606:	f240 1157 	movw	r1, #343	; 0x157
 800660a:	4812      	ldr	r0, [pc, #72]	; (8006654 <HAL_SD_Init+0xdc>)
 800660c:	f00e fc8c 	bl	8014f28 <assert_failed>
 8006610:	e7cb      	b.n	80065aa <HAL_SD_Init+0x32>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8006612:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8006616:	480f      	ldr	r0, [pc, #60]	; (8006654 <HAL_SD_Init+0xdc>)
 8006618:	f00e fc86 	bl	8014f28 <assert_failed>
 800661c:	e7cb      	b.n	80065b6 <HAL_SD_Init+0x3e>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800661e:	f240 1159 	movw	r1, #345	; 0x159
 8006622:	480c      	ldr	r0, [pc, #48]	; (8006654 <HAL_SD_Init+0xdc>)
 8006624:	f00e fc80 	bl	8014f28 <assert_failed>
 8006628:	e7ce      	b.n	80065c8 <HAL_SD_Init+0x50>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800662a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800662e:	4809      	ldr	r0, [pc, #36]	; (8006654 <HAL_SD_Init+0xdc>)
 8006630:	f00e fc7a 	bl	8014f28 <assert_failed>
 8006634:	e7ce      	b.n	80065d4 <HAL_SD_Init+0x5c>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8006636:	f240 115b 	movw	r1, #347	; 0x15b
 800663a:	4806      	ldr	r0, [pc, #24]	; (8006654 <HAL_SD_Init+0xdc>)
 800663c:	f00e fc74 	bl	8014f28 <assert_failed>
 8006640:	e7cb      	b.n	80065da <HAL_SD_Init+0x62>
    hsd->Lock = HAL_UNLOCKED;
 8006642:	7723      	strb	r3, [r4, #28]
    HAL_SD_MspInit(hsd);
 8006644:	4620      	mov	r0, r4
 8006646:	f00f ffe5 	bl	8016614 <HAL_SD_MspInit>
 800664a:	e7c9      	b.n	80065e0 <HAL_SD_Init+0x68>
    return HAL_ERROR;
 800664c:	2001      	movs	r0, #1
}
 800664e:	4770      	bx	lr
 8006650:	40012c00 	.word	0x40012c00
 8006654:	0801a9c0 	.word	0x0801a9c0

08006658 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006658:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800665a:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800665c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800665e:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006660:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006662:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006664:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006666:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006668:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800666a:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800666c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800666e:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006670:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006672:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006674:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006676:	61cb      	str	r3, [r1, #28]
}
 8006678:	2000      	movs	r0, #0
 800667a:	4770      	bx	lr

0800667c <HAL_SD_ConfigWideBusOperation>:
{
 800667c:	b530      	push	{r4, r5, lr}
 800667e:	b08b      	sub	sp, #44	; 0x2c
 8006680:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 8006682:	460d      	mov	r5, r1
 8006684:	2900      	cmp	r1, #0
 8006686:	bf18      	it	ne
 8006688:	f5b1 6f00 	cmpne.w	r1, #2048	; 0x800
 800668c:	d002      	beq.n	8006694 <HAL_SD_ConfigWideBusOperation+0x18>
 800668e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006692:	d111      	bne.n	80066b8 <HAL_SD_ConfigWideBusOperation+0x3c>
  hsd->State = HAL_SD_STATE_BUSY;
 8006694:	2303      	movs	r3, #3
 8006696:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800669a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800669c:	2b03      	cmp	r3, #3
 800669e:	d024      	beq.n	80066ea <HAL_SD_ConfigWideBusOperation+0x6e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80066a0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80066a4:	d00e      	beq.n	80066c4 <HAL_SD_ConfigWideBusOperation+0x48>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80066a6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80066aa:	d010      	beq.n	80066ce <HAL_SD_ConfigWideBusOperation+0x52>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80066ac:	b1b5      	cbz	r5, 80066dc <HAL_SD_ConfigWideBusOperation+0x60>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80066b6:	e01c      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x76>
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 80066b8:	f640 01b6 	movw	r1, #2230	; 0x8b6
 80066bc:	481f      	ldr	r0, [pc, #124]	; (800673c <HAL_SD_ConfigWideBusOperation+0xc0>)
 80066be:	f00e fc33 	bl	8014f28 <assert_failed>
 80066c2:	e7e7      	b.n	8006694 <HAL_SD_ConfigWideBusOperation+0x18>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80066cc:	e011      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x76>
      errorstate = SD_WideBus_Enable(hsd);
 80066ce:	4620      	mov	r0, r4
 80066d0:	f7ff fb40 	bl	8005d54 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80066d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066d6:	4303      	orrs	r3, r0
 80066d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80066da:	e00a      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x76>
      errorstate = SD_WideBus_Disable(hsd);
 80066dc:	4620      	mov	r0, r4
 80066de:	f7ff fb60 	bl	8005da2 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80066e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066e4:	4303      	orrs	r3, r0
 80066e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80066e8:	e003      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f0:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066f4:	b143      	cbz	r3, 8006708 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066fe:	2001      	movs	r0, #1
 8006700:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8006704:	b00b      	add	sp, #44	; 0x2c
 8006706:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006708:	6863      	ldr	r3, [r4, #4]
 800670a:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800670c:	68a3      	ldr	r3, [r4, #8]
 800670e:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006710:	68e3      	ldr	r3, [r4, #12]
 8006712:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8006714:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006716:	6963      	ldr	r3, [r4, #20]
 8006718:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800671a:	69a3      	ldr	r3, [r4, #24]
 800671c:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 800671e:	ab0a      	add	r3, sp, #40	; 0x28
 8006720:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006724:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006728:	ab04      	add	r3, sp, #16
 800672a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	f001 fc95 	bl	800805c <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8006732:	2301      	movs	r3, #1
 8006734:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8006738:	2000      	movs	r0, #0
 800673a:	e7e3      	b.n	8006704 <HAL_SD_ConfigWideBusOperation+0x88>
 800673c:	0801a9c0 	.word	0x0801a9c0

08006740 <HAL_SD_GetCardState>:
{
 8006740:	b510      	push	{r4, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 800674a:	a901      	add	r1, sp, #4
 800674c:	f7ff fb50 	bl	8005df0 <SD_SendStatus>
  if(errorstate != HAL_OK)
 8006750:	b110      	cbz	r0, 8006758 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8006752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006754:	4303      	orrs	r3, r0
 8006756:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006758:	9801      	ldr	r0, [sp, #4]
 800675a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800675e:	b002      	add	sp, #8
 8006760:	bd10      	pop	{r4, pc}

08006762 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006762:	b1e0      	cbz	r0, 800679e <HAL_SDRAM_Init+0x3c>
{   
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	460d      	mov	r5, r1
 8006768:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800676a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800676e:	b18b      	cbz	r3, 8006794 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006770:	2302      	movs	r3, #2
 8006772:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006776:	4621      	mov	r1, r4
 8006778:	f851 0b04 	ldr.w	r0, [r1], #4
 800677c:	f001 fa00 	bl	8007b80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006780:	6862      	ldr	r2, [r4, #4]
 8006782:	4629      	mov	r1, r5
 8006784:	6820      	ldr	r0, [r4, #0]
 8006786:	f001 fabf 	bl	8007d08 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800678a:	2301      	movs	r3, #1
 800678c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8006790:	2000      	movs	r0, #0
}
 8006792:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006794:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006798:	f00d fb98 	bl	8013ecc <HAL_SDRAM_MspInit>
 800679c:	e7e8      	b.n	8006770 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800679e:	2001      	movs	r0, #1
}
 80067a0:	4770      	bx	lr

080067a2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80067a2:	b538      	push	{r3, r4, r5, lr}
 80067a4:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80067a6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80067aa:	b2c0      	uxtb	r0, r0
 80067ac:	2802      	cmp	r0, #2
 80067ae:	d00d      	beq.n	80067cc <HAL_SDRAM_SendCommand+0x2a>
 80067b0:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067b2:	2302      	movs	r3, #2
 80067b4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80067b8:	6820      	ldr	r0, [r4, #0]
 80067ba:	f001 fb4d 	bl	8007e58 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d004      	beq.n	80067ce <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80067ca:	2000      	movs	r0, #0
}
 80067cc:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80067ce:	2305      	movs	r3, #5
 80067d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 80067d4:	2000      	movs	r0, #0
 80067d6:	e7f9      	b.n	80067cc <HAL_SDRAM_SendCommand+0x2a>

080067d8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80067d8:	b510      	push	{r4, lr}
 80067da:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80067dc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80067e0:	b2c0      	uxtb	r0, r0
 80067e2:	2802      	cmp	r0, #2
 80067e4:	d009      	beq.n	80067fa <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067e6:	2302      	movs	r3, #2
 80067e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	f001 fb7f 	bl	8007ef0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80067f2:	2301      	movs	r3, #1
 80067f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80067f8:	2000      	movs	r0, #0
}
 80067fa:	bd10      	pop	{r4, pc}

080067fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006800:	4606      	mov	r6, r0
 8006802:	4688      	mov	r8, r1
 8006804:	4617      	mov	r7, r2
 8006806:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006808:	6834      	ldr	r4, [r6, #0]
 800680a:	68a4      	ldr	r4, [r4, #8]
 800680c:	ea38 0304 	bics.w	r3, r8, r4
 8006810:	bf0c      	ite	eq
 8006812:	f04f 0c01 	moveq.w	ip, #1
 8006816:	f04f 0c00 	movne.w	ip, #0
 800681a:	45bc      	cmp	ip, r7
 800681c:	d037      	beq.n	800688e <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 800681e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006822:	d0f1      	beq.n	8006808 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006824:	f7fa fd0e 	bl	8001244 <HAL_GetTick>
 8006828:	9b06      	ldr	r3, [sp, #24]
 800682a:	1ac0      	subs	r0, r0, r3
 800682c:	42a8      	cmp	r0, r5
 800682e:	d201      	bcs.n	8006834 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006830:	2d00      	cmp	r5, #0
 8006832:	d1e9      	bne.n	8006808 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006834:	6832      	ldr	r2, [r6, #0]
 8006836:	6853      	ldr	r3, [r2, #4]
 8006838:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800683c:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683e:	6873      	ldr	r3, [r6, #4]
 8006840:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006844:	d00b      	beq.n	800685e <SPI_WaitFlagStateUntilTimeout+0x62>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006846:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684c:	d014      	beq.n	8006878 <SPI_WaitFlagStateUntilTimeout+0x7c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800684e:	2301      	movs	r3, #1
 8006850:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006854:	2300      	movs	r3, #0
 8006856:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c

        return HAL_TIMEOUT;
 800685a:	2003      	movs	r0, #3
 800685c:	e018      	b.n	8006890 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800685e:	68b3      	ldr	r3, [r6, #8]
 8006860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006864:	bf18      	it	ne
 8006866:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800686a:	d1ec      	bne.n	8006846 <SPI_WaitFlagStateUntilTimeout+0x4a>
          __HAL_SPI_DISABLE(hspi);
 800686c:	6832      	ldr	r2, [r6, #0]
 800686e:	6813      	ldr	r3, [r2, #0]
 8006870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e7e6      	b.n	8006846 <SPI_WaitFlagStateUntilTimeout+0x4a>
          SPI_RESET_CRC(hspi);
 8006878:	6832      	ldr	r2, [r6, #0]
 800687a:	6813      	ldr	r3, [r2, #0]
 800687c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	6832      	ldr	r2, [r6, #0]
 8006884:	6813      	ldr	r3, [r2, #0]
 8006886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	e7df      	b.n	800684e <SPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }

  return HAL_OK;
 800688e:	2000      	movs	r0, #0
}
 8006890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006894 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006898:	4681      	mov	r9, r0
 800689a:	460f      	mov	r7, r1
 800689c:	4616      	mov	r6, r2
 800689e:	4698      	mov	r8, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80068a0:	e002      	b.n	80068a8 <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80068a2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80068a6:	d10d      	bne.n	80068c4 <SPI_WaitFifoStateUntilTimeout+0x30>
  while ((hspi->Instance->SR & Fifo) != State)
 80068a8:	f8d9 5000 	ldr.w	r5, [r9]
 80068ac:	68ac      	ldr	r4, [r5, #8]
 80068ae:	ea04 0c07 	and.w	ip, r4, r7
 80068b2:	45b4      	cmp	ip, r6
 80068b4:	d043      	beq.n	800693e <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068b6:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 80068ba:	bf08      	it	eq
 80068bc:	2e00      	cmpeq	r6, #0
 80068be:	d1f0      	bne.n	80068a2 <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80068c0:	7b2b      	ldrb	r3, [r5, #12]
 80068c2:	e7ee      	b.n	80068a2 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80068c4:	f7fa fcbe 	bl	8001244 <HAL_GetTick>
 80068c8:	9b08      	ldr	r3, [sp, #32]
 80068ca:	1ac0      	subs	r0, r0, r3
 80068cc:	4540      	cmp	r0, r8
 80068ce:	d202      	bcs.n	80068d6 <SPI_WaitFifoStateUntilTimeout+0x42>
 80068d0:	f1b8 0f00 	cmp.w	r8, #0
 80068d4:	d1e8      	bne.n	80068a8 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068d6:	f8d9 2000 	ldr.w	r2, [r9]
 80068da:	6853      	ldr	r3, [r2, #4]
 80068dc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80068e0:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80068e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ea:	d00c      	beq.n	8006906 <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068ec:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d016      	beq.n	8006924 <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068fc:	2300      	movs	r3, #0
 80068fe:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006902:	2003      	movs	r0, #3
 8006904:	e01c      	b.n	8006940 <SPI_WaitFifoStateUntilTimeout+0xac>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006906:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800690a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690e:	bf18      	it	ne
 8006910:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8006914:	d1ea      	bne.n	80068ec <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8006916:	f8d9 2000 	ldr.w	r2, [r9]
 800691a:	6813      	ldr	r3, [r2, #0]
 800691c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e7e3      	b.n	80068ec <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8006924:	f8d9 2000 	ldr.w	r2, [r9]
 8006928:	6813      	ldr	r3, [r2, #0]
 800692a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	f8d9 2000 	ldr.w	r2, [r9]
 8006934:	6813      	ldr	r3, [r2, #0]
 8006936:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	e7db      	b.n	80068f6 <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 800693e:	2000      	movs	r0, #0
}
 8006940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	4604      	mov	r4, r0
 800694a:	460d      	mov	r5, r1
 800694c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800694e:	9200      	str	r2, [sp, #0]
 8006950:	460b      	mov	r3, r1
 8006952:	2200      	movs	r2, #0
 8006954:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006958:	f7ff ff9c 	bl	8006894 <SPI_WaitFifoStateUntilTimeout>
 800695c:	b9b0      	cbnz	r0, 800698c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800695e:	9600      	str	r6, [sp, #0]
 8006960:	462b      	mov	r3, r5
 8006962:	2200      	movs	r2, #0
 8006964:	2180      	movs	r1, #128	; 0x80
 8006966:	4620      	mov	r0, r4
 8006968:	f7ff ff48 	bl	80067fc <SPI_WaitFlagStateUntilTimeout>
 800696c:	b9a8      	cbnz	r0, 800699a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800696e:	9600      	str	r6, [sp, #0]
 8006970:	462b      	mov	r3, r5
 8006972:	2200      	movs	r2, #0
 8006974:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006978:	4620      	mov	r0, r4
 800697a:	f7ff ff8b 	bl	8006894 <SPI_WaitFifoStateUntilTimeout>
 800697e:	b150      	cbz	r0, 8006996 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006980:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006982:	f043 0320 	orr.w	r3, r3, #32
 8006986:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8006988:	2003      	movs	r0, #3
 800698a:	e004      	b.n	8006996 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800698c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800698e:	f043 0320 	orr.w	r3, r3, #32
 8006992:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8006994:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8006996:	b002      	add	sp, #8
 8006998:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800699a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800699c:	f043 0320 	orr.w	r3, r3, #32
 80069a0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80069a2:	2003      	movs	r0, #3
 80069a4:	e7f7      	b.n	8006996 <SPI_EndRxTxTransaction+0x52>
	...

080069a8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f000 8127 	beq.w	8006bfc <HAL_SPI_Init+0x254>
{
 80069ae:	b510      	push	{r4, lr}
 80069b0:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80069b2:	6803      	ldr	r3, [r0, #0]
 80069b4:	4992      	ldr	r1, [pc, #584]	; (8006c00 <HAL_SPI_Init+0x258>)
 80069b6:	4a93      	ldr	r2, [pc, #588]	; (8006c04 <HAL_SPI_Init+0x25c>)
 80069b8:	428b      	cmp	r3, r1
 80069ba:	bf18      	it	ne
 80069bc:	4293      	cmpne	r3, r2
 80069be:	d014      	beq.n	80069ea <HAL_SPI_Init+0x42>
 80069c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d010      	beq.n	80069ea <HAL_SPI_Init+0x42>
 80069c8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00c      	beq.n	80069ea <HAL_SPI_Init+0x42>
 80069d0:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d008      	beq.n	80069ea <HAL_SPI_Init+0x42>
 80069d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069dc:	4293      	cmp	r3, r2
 80069de:	d004      	beq.n	80069ea <HAL_SPI_Init+0x42>
 80069e0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80069e4:	4888      	ldr	r0, [pc, #544]	; (8006c08 <HAL_SPI_Init+0x260>)
 80069e6:	f00e fa9f 	bl	8014f28 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80069ea:	6863      	ldr	r3, [r4, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bf18      	it	ne
 80069f0:	f5b3 7f82 	cmpne.w	r3, #260	; 0x104
 80069f4:	f040 80ba 	bne.w	8006b6c <HAL_SPI_Init+0x1c4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80069f8:	68a3      	ldr	r3, [r4, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bf18      	it	ne
 80069fe:	f5b3 6f80 	cmpne.w	r3, #1024	; 0x400
 8006a02:	d003      	beq.n	8006a0c <HAL_SPI_Init+0x64>
 8006a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a08:	f040 80b6 	bne.w	8006b78 <HAL_SPI_Init+0x1d0>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006a0c:	68e3      	ldr	r3, [r4, #12]
 8006a0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a12:	bf18      	it	ne
 8006a14:	f5b3 6f60 	cmpne.w	r3, #3584	; 0xe00
 8006a18:	d021      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a1a:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8006a1e:	d01e      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a24:	d01b      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a26:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8006a2a:	d018      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a2c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006a30:	d015      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a32:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8006a36:	d012      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a3c:	d00f      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a42:	d00c      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a48:	d009      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006a4e:	d006      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a54:	d003      	beq.n	8006a5e <HAL_SPI_Init+0xb6>
 8006a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a5a:	f040 8093 	bne.w	8006b84 <HAL_SPI_Init+0x1dc>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006a5e:	69a3      	ldr	r3, [r4, #24]
 8006a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a64:	bf18      	it	ne
 8006a66:	2b00      	cmpne	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_SPI_Init+0xca>
 8006a6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a6e:	f040 808f 	bne.w	8006b90 <HAL_SPI_Init+0x1e8>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	bf18      	it	ne
 8006a78:	2b00      	cmpne	r3, #0
 8006a7a:	f040 808f 	bne.w	8006b9c <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006a7e:	69e3      	ldr	r3, [r4, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bf18      	it	ne
 8006a84:	2b08      	cmpne	r3, #8
 8006a86:	d00c      	beq.n	8006aa2 <HAL_SPI_Init+0xfa>
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d00a      	beq.n	8006aa2 <HAL_SPI_Init+0xfa>
 8006a8c:	2b18      	cmp	r3, #24
 8006a8e:	d008      	beq.n	8006aa2 <HAL_SPI_Init+0xfa>
 8006a90:	2b20      	cmp	r3, #32
 8006a92:	d006      	beq.n	8006aa2 <HAL_SPI_Init+0xfa>
 8006a94:	2b28      	cmp	r3, #40	; 0x28
 8006a96:	d004      	beq.n	8006aa2 <HAL_SPI_Init+0xfa>
 8006a98:	2b30      	cmp	r3, #48	; 0x30
 8006a9a:	d002      	beq.n	8006aa2 <HAL_SPI_Init+0xfa>
 8006a9c:	2b38      	cmp	r3, #56	; 0x38
 8006a9e:	f040 8083 	bne.w	8006ba8 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006aa2:	6a23      	ldr	r3, [r4, #32]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf18      	it	ne
 8006aa8:	2b80      	cmpne	r3, #128	; 0x80
 8006aaa:	f040 8083 	bne.w	8006bb4 <HAL_SPI_Init+0x20c>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bf18      	it	ne
 8006ab4:	2b10      	cmpne	r3, #16
 8006ab6:	f040 8083 	bne.w	8006bc0 <HAL_SPI_Init+0x218>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006abc:	b94b      	cbnz	r3, 8006ad2 <HAL_SPI_Init+0x12a>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bf18      	it	ne
 8006ac4:	2b02      	cmpne	r3, #2
 8006ac6:	f040 8081 	bne.w	8006bcc <HAL_SPI_Init+0x224>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006aca:	6963      	ldr	r3, [r4, #20]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	f200 8083 	bhi.w	8006bd8 <HAL_SPI_Init+0x230>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ad6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 8082 	beq.w	8006be4 <HAL_SPI_Init+0x23c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	6813      	ldr	r3, [r2, #0]
 8006aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aee:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006af0:	68e3      	ldr	r3, [r4, #12]
 8006af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006af6:	d97b      	bls.n	8006bf0 <HAL_SPI_Init+0x248>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006af8:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006afa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006afe:	bf18      	it	ne
 8006b00:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8006b04:	d001      	beq.n	8006b0a <HAL_SPI_Init+0x162>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b06:	2100      	movs	r1, #0
 8006b08:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006b0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006b0c:	b921      	cbnz	r1, 8006b18 <HAL_SPI_Init+0x170>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b12:	d970      	bls.n	8006bf6 <HAL_SPI_Init+0x24e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006b14:	2302      	movs	r3, #2
 8006b16:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	68a1      	ldr	r1, [r4, #8]
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6921      	ldr	r1, [r4, #16]
 8006b20:	430b      	orrs	r3, r1
 8006b22:	6961      	ldr	r1, [r4, #20]
 8006b24:	430b      	orrs	r3, r1
 8006b26:	69a1      	ldr	r1, [r4, #24]
 8006b28:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	69e1      	ldr	r1, [r4, #28]
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6a21      	ldr	r1, [r4, #32]
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006b38:	6821      	ldr	r1, [r4, #0]
 8006b3a:	4303      	orrs	r3, r0
 8006b3c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006b3e:	8b63      	ldrh	r3, [r4, #26]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b46:	430b      	orrs	r3, r1
 8006b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	68e1      	ldr	r1, [r4, #12]
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	6821      	ldr	r1, [r4, #0]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	69d3      	ldr	r3, [r2, #28]
 8006b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b60:	2000      	movs	r0, #0
 8006b62:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8006b6a:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006b6c:	f240 1145 	movw	r1, #325	; 0x145
 8006b70:	4825      	ldr	r0, [pc, #148]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006b72:	f00e f9d9 	bl	8014f28 <assert_failed>
 8006b76:	e73f      	b.n	80069f8 <HAL_SPI_Init+0x50>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006b78:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006b7c:	4822      	ldr	r0, [pc, #136]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006b7e:	f00e f9d3 	bl	8014f28 <assert_failed>
 8006b82:	e743      	b.n	8006a0c <HAL_SPI_Init+0x64>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006b84:	f240 1147 	movw	r1, #327	; 0x147
 8006b88:	481f      	ldr	r0, [pc, #124]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006b8a:	f00e f9cd 	bl	8014f28 <assert_failed>
 8006b8e:	e766      	b.n	8006a5e <HAL_SPI_Init+0xb6>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006b90:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b94:	481c      	ldr	r0, [pc, #112]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006b96:	f00e f9c7 	bl	8014f28 <assert_failed>
 8006b9a:	e76a      	b.n	8006a72 <HAL_SPI_Init+0xca>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006b9c:	f240 1149 	movw	r1, #329	; 0x149
 8006ba0:	4819      	ldr	r0, [pc, #100]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006ba2:	f00e f9c1 	bl	8014f28 <assert_failed>
 8006ba6:	e76a      	b.n	8006a7e <HAL_SPI_Init+0xd6>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006ba8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006bac:	4816      	ldr	r0, [pc, #88]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006bae:	f00e f9bb 	bl	8014f28 <assert_failed>
 8006bb2:	e776      	b.n	8006aa2 <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006bb4:	f240 114b 	movw	r1, #331	; 0x14b
 8006bb8:	4813      	ldr	r0, [pc, #76]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006bba:	f00e f9b5 	bl	8014f28 <assert_failed>
 8006bbe:	e776      	b.n	8006aae <HAL_SPI_Init+0x106>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006bc0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006bc4:	4810      	ldr	r0, [pc, #64]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006bc6:	f00e f9af 	bl	8014f28 <assert_failed>
 8006bca:	e776      	b.n	8006aba <HAL_SPI_Init+0x112>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006bcc:	f240 114f 	movw	r1, #335	; 0x14f
 8006bd0:	480d      	ldr	r0, [pc, #52]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006bd2:	f00e f9a9 	bl	8014f28 <assert_failed>
 8006bd6:	e778      	b.n	8006aca <HAL_SPI_Init+0x122>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006bd8:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8006bdc:	480a      	ldr	r0, [pc, #40]	; (8006c08 <HAL_SPI_Init+0x260>)
 8006bde:	f00e f9a3 	bl	8014f28 <assert_failed>
 8006be2:	e776      	b.n	8006ad2 <HAL_SPI_Init+0x12a>
    hspi->Lock = HAL_UNLOCKED;
 8006be4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8006be8:	4620      	mov	r0, r4
 8006bea:	f00f fd93 	bl	8016714 <HAL_SPI_MspInit>
 8006bee:	e777      	b.n	8006ae0 <HAL_SPI_Init+0x138>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bf4:	e781      	b.n	8006afa <HAL_SPI_Init+0x152>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	6323      	str	r3, [r4, #48]	; 0x30
 8006bfa:	e78d      	b.n	8006b18 <HAL_SPI_Init+0x170>
    return HAL_ERROR;
 8006bfc:	2001      	movs	r0, #1
}
 8006bfe:	4770      	bx	lr
 8006c00:	40013000 	.word	0x40013000
 8006c04:	40003800 	.word	0x40003800
 8006c08:	0801a9f8 	.word	0x0801a9f8

08006c0c <HAL_SPI_TransmitReceive_IT>:
{
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	4604      	mov	r4, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	4616      	mov	r6, r2
 8006c14:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006c16:	6883      	ldr	r3, [r0, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d14e      	bne.n	8006cba <HAL_SPI_TransmitReceive_IT+0xae>
  __HAL_LOCK(hspi);
 8006c1c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d06a      	beq.n	8006cfa <HAL_SPI_TransmitReceive_IT+0xee>
 8006c24:	2301      	movs	r3, #1
 8006c26:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8006c2a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006c2e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8006c30:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d007      	beq.n	8006c46 <HAL_SPI_TransmitReceive_IT+0x3a>
 8006c36:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006c3a:	d14f      	bne.n	8006cdc <HAL_SPI_TransmitReceive_IT+0xd0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c3c:	68a2      	ldr	r2, [r4, #8]
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	d151      	bne.n	8006ce6 <HAL_SPI_TransmitReceive_IT+0xda>
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d151      	bne.n	8006cea <HAL_SPI_TransmitReceive_IT+0xde>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c46:	2e00      	cmp	r6, #0
 8006c48:	bf18      	it	ne
 8006c4a:	2f00      	cmpne	r7, #0
 8006c4c:	d04f      	beq.n	8006cee <HAL_SPI_TransmitReceive_IT+0xe2>
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	d04f      	beq.n	8006cf2 <HAL_SPI_TransmitReceive_IT+0xe6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c52:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d002      	beq.n	8006c62 <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c5c:	2305      	movs	r3, #5
 8006c5e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c62:	2300      	movs	r3, #0
 8006c64:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c66:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006c68:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006c6a:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c6c:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c6e:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006c72:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c76:	68e3      	ldr	r3, [r4, #12]
 8006c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c7c:	d923      	bls.n	8006cc6 <HAL_SPI_TransmitReceive_IT+0xba>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006c7e:	4a20      	ldr	r2, [pc, #128]	; (8006d00 <HAL_SPI_TransmitReceive_IT+0xf4>)
 8006c80:	64e2      	str	r2, [r4, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006c82:	4a20      	ldr	r2, [pc, #128]	; (8006d04 <HAL_SPI_TransmitReceive_IT+0xf8>)
 8006c84:	6522      	str	r2, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006c86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c8a:	d801      	bhi.n	8006c90 <HAL_SPI_TransmitReceive_IT+0x84>
 8006c8c:	2d01      	cmp	r5, #1
 8006c8e:	d91f      	bls.n	8006cd0 <HAL_SPI_TransmitReceive_IT+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c90:	6822      	ldr	r2, [r4, #0]
 8006c92:	6853      	ldr	r3, [r2, #4]
 8006c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c98:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	6853      	ldr	r3, [r2, #4]
 8006c9e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8006ca2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006cac:	d123      	bne.n	8006cf6 <HAL_SPI_TransmitReceive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cb4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	e011      	b.n	8006cde <HAL_SPI_TransmitReceive_IT+0xd2>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006cba:	f240 619a 	movw	r1, #1690	; 0x69a
 8006cbe:	4812      	ldr	r0, [pc, #72]	; (8006d08 <HAL_SPI_TransmitReceive_IT+0xfc>)
 8006cc0:	f00e f932 	bl	8014f28 <assert_failed>
 8006cc4:	e7aa      	b.n	8006c1c <HAL_SPI_TransmitReceive_IT+0x10>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006cc6:	4a11      	ldr	r2, [pc, #68]	; (8006d0c <HAL_SPI_TransmitReceive_IT+0x100>)
 8006cc8:	64e2      	str	r2, [r4, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006cca:	4a11      	ldr	r2, [pc, #68]	; (8006d10 <HAL_SPI_TransmitReceive_IT+0x104>)
 8006ccc:	6522      	str	r2, [r4, #80]	; 0x50
 8006cce:	e7da      	b.n	8006c86 <HAL_SPI_TransmitReceive_IT+0x7a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	6853      	ldr	r3, [r2, #4]
 8006cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cd8:	6053      	str	r3, [r2, #4]
 8006cda:	e7de      	b.n	8006c9a <HAL_SPI_TransmitReceive_IT+0x8e>
    errorcode = HAL_BUSY;
 8006cdc:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 8006ce6:	2002      	movs	r0, #2
 8006ce8:	e7f9      	b.n	8006cde <HAL_SPI_TransmitReceive_IT+0xd2>
 8006cea:	2002      	movs	r0, #2
 8006cec:	e7f7      	b.n	8006cde <HAL_SPI_TransmitReceive_IT+0xd2>
    errorcode = HAL_ERROR;
 8006cee:	2001      	movs	r0, #1
 8006cf0:	e7f5      	b.n	8006cde <HAL_SPI_TransmitReceive_IT+0xd2>
 8006cf2:	2001      	movs	r0, #1
 8006cf4:	e7f3      	b.n	8006cde <HAL_SPI_TransmitReceive_IT+0xd2>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e7f1      	b.n	8006cde <HAL_SPI_TransmitReceive_IT+0xd2>
  __HAL_LOCK(hspi);
 8006cfa:	2002      	movs	r0, #2
 8006cfc:	e7f2      	b.n	8006ce4 <HAL_SPI_TransmitReceive_IT+0xd8>
 8006cfe:	bf00      	nop
 8006d00:	08006e87 	.word	0x08006e87
 8006d04:	08006e4d 	.word	0x08006e4d
 8006d08:	0801a9f8 	.word	0x0801a9f8
 8006d0c:	08006dd3 	.word	0x08006dd3
 8006d10:	08006d77 	.word	0x08006d77

08006d14 <HAL_SPI_RxCpltCallback>:
}
 8006d14:	4770      	bx	lr

08006d16 <HAL_SPI_ErrorCallback>:
}
 8006d16:	4770      	bx	lr

08006d18 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d1c:	f7fa fa92 	bl	8001244 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d22:	6821      	ldr	r1, [r4, #0]
 8006d24:	684b      	ldr	r3, [r1, #4]
 8006d26:	f023 0320 	bic.w	r3, r3, #32
 8006d2a:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d2c:	2164      	movs	r1, #100	; 0x64
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff fe08 	bl	8006944 <SPI_EndRxTxTransaction>
 8006d34:	b118      	cbz	r0, 8006d3e <SPI_CloseRxTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d36:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006d38:	f043 0320 	orr.w	r3, r3, #32
 8006d3c:	6623      	str	r3, [r4, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006d3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006d40:	b993      	cbnz	r3, 8006d68 <SPI_CloseRxTx_ISR+0x50>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006d42:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d006      	beq.n	8006d5a <SPI_CloseRxTx_ISR+0x42>
        HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
      else
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->TxRxCpltCallback(hspi);
#else
        HAL_SPI_TxRxCpltCallback(hspi);
 8006d52:	4620      	mov	r0, r4
 8006d54:	f010 fce8 	bl	8017728 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006d58:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8006d60:	4620      	mov	r0, r4
 8006d62:	f7ff ffd7 	bl	8006d14 <HAL_SPI_RxCpltCallback>
 8006d66:	e7f7      	b.n	8006d58 <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f7ff ffd1 	bl	8006d16 <HAL_SPI_ErrorCallback>
}
 8006d74:	e7f0      	b.n	8006d58 <SPI_CloseRxTx_ISR+0x40>

08006d76 <SPI_2linesTxISR_8BIT>:
{
 8006d76:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 8006d78:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d918      	bls.n	8006db2 <SPI_2linesTxISR_8BIT+0x3c>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d80:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006d82:	6803      	ldr	r3, [r0, #0]
 8006d84:	8812      	ldrh	r2, [r2, #0]
 8006d86:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d88:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006d8a:	3302      	adds	r3, #2
 8006d8c:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006d8e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	3b02      	subs	r3, #2
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8006d98:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	b943      	cbnz	r3, 8006db0 <SPI_2linesTxISR_8BIT+0x3a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006d9e:	6802      	ldr	r2, [r0, #0]
 8006da0:	6853      	ldr	r3, [r2, #4]
 8006da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006da6:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8006da8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	b16b      	cbz	r3, 8006dcc <SPI_2linesTxISR_8BIT+0x56>
}
 8006db0:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006db2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006db4:	6803      	ldr	r3, [r0, #0]
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	731a      	strb	r2, [r3, #12]
    hspi->pTxBuffPtr++;
 8006dba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8006dc0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8006dca:	e7e5      	b.n	8006d98 <SPI_2linesTxISR_8BIT+0x22>
      SPI_CloseRxTx_ISR(hspi);
 8006dcc:	f7ff ffa4 	bl	8006d18 <SPI_CloseRxTx_ISR>
}
 8006dd0:	e7ee      	b.n	8006db0 <SPI_2linesTxISR_8BIT+0x3a>

08006dd2 <SPI_2linesRxISR_8BIT>:
{
 8006dd2:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 8006dd4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d918      	bls.n	8006e10 <SPI_2linesRxISR_8BIT+0x3e>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006dde:	6803      	ldr	r3, [r0, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006de4:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006de6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006de8:	3302      	adds	r3, #2
 8006dea:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006dec:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b02      	subs	r3, #2
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006dfa:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d113      	bne.n	8006e2c <SPI_2linesRxISR_8BIT+0x5a>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e04:	6802      	ldr	r2, [r0, #0]
 8006e06:	6853      	ldr	r3, [r2, #4]
 8006e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e0c:	6053      	str	r3, [r2, #4]
 8006e0e:	e00d      	b.n	8006e2c <SPI_2linesRxISR_8BIT+0x5a>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006e10:	6802      	ldr	r2, [r0, #0]
 8006e12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e14:	7b12      	ldrb	r2, [r2, #12]
 8006e16:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006e18:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8006e1e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8006e2c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	b93b      	cbnz	r3, 8006e44 <SPI_2linesRxISR_8BIT+0x72>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006e34:	6802      	ldr	r2, [r0, #0]
 8006e36:	6853      	ldr	r3, [r2, #4]
 8006e38:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e3c:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8006e3e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	b103      	cbz	r3, 8006e46 <SPI_2linesRxISR_8BIT+0x74>
}
 8006e44:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8006e46:	f7ff ff67 	bl	8006d18 <SPI_CloseRxTx_ISR>
}
 8006e4a:	e7fb      	b.n	8006e44 <SPI_2linesRxISR_8BIT+0x72>

08006e4c <SPI_2linesTxISR_16BIT>:
{
 8006e4c:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e4e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006e50:	6803      	ldr	r3, [r0, #0]
 8006e52:	8812      	ldrh	r2, [r2, #0]
 8006e54:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e56:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006e58:	3302      	adds	r3, #2
 8006e5a:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8006e5c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8006e66:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	b943      	cbnz	r3, 8006e7e <SPI_2linesTxISR_16BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006e6c:	6802      	ldr	r2, [r0, #0]
 8006e6e:	6853      	ldr	r3, [r2, #4]
 8006e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e74:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8006e76:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	b103      	cbz	r3, 8006e80 <SPI_2linesTxISR_16BIT+0x34>
}
 8006e7e:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8006e80:	f7ff ff4a 	bl	8006d18 <SPI_CloseRxTx_ISR>
}
 8006e84:	e7fb      	b.n	8006e7e <SPI_2linesTxISR_16BIT+0x32>

08006e86 <SPI_2linesRxISR_16BIT>:
{
 8006e86:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006e88:	6803      	ldr	r3, [r0, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e8e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e92:	3302      	adds	r3, #2
 8006e94:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8006e96:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8006ea4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	b93b      	cbnz	r3, 8006ebc <SPI_2linesRxISR_16BIT+0x36>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006eac:	6802      	ldr	r2, [r0, #0]
 8006eae:	6853      	ldr	r3, [r2, #4]
 8006eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb4:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8006eb6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	b103      	cbz	r3, 8006ebe <SPI_2linesRxISR_16BIT+0x38>
}
 8006ebc:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8006ebe:	f7ff ff2b 	bl	8006d18 <SPI_CloseRxTx_ISR>
}
 8006ec2:	e7fb      	b.n	8006ebc <SPI_2linesRxISR_16BIT+0x36>

08006ec4 <HAL_SPI_IRQHandler>:
{
 8006ec4:	b530      	push	{r4, r5, lr}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8006eca:	6802      	ldr	r2, [r0, #0]
 8006ecc:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8006ece:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ed0:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8006ed4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ed8:	d105      	bne.n	8006ee6 <HAL_SPI_IRQHandler+0x22>
 8006eda:	f013 0f01 	tst.w	r3, #1
 8006ede:	d002      	beq.n	8006ee6 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ee0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006ee4:	d169      	bne.n	8006fba <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ee6:	f013 0f02 	tst.w	r3, #2
 8006eea:	d002      	beq.n	8006ef2 <HAL_SPI_IRQHandler+0x2e>
 8006eec:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006ef0:	d167      	bne.n	8006fc2 <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ef2:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8006ef6:	f013 0f20 	tst.w	r3, #32
 8006efa:	d103      	bne.n	8006f04 <HAL_SPI_IRQHandler+0x40>
 8006efc:	b910      	cbnz	r0, 8006f04 <HAL_SPI_IRQHandler+0x40>
 8006efe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006f02:	d061      	beq.n	8006fc8 <HAL_SPI_IRQHandler+0x104>
 8006f04:	f011 0f20 	tst.w	r1, #32
 8006f08:	d05e      	beq.n	8006fc8 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006f0a:	b178      	cbz	r0, 8006f2c <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f0c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8006f10:	b2c0      	uxtb	r0, r0
 8006f12:	2803      	cmp	r0, #3
 8006f14:	d05a      	beq.n	8006fcc <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f16:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006f18:	f040 0004 	orr.w	r0, r0, #4
 8006f1c:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f1e:	2000      	movs	r0, #0
 8006f20:	9000      	str	r0, [sp, #0]
 8006f22:	68d0      	ldr	r0, [r2, #12]
 8006f24:	9000      	str	r0, [sp, #0]
 8006f26:	6890      	ldr	r0, [r2, #8]
 8006f28:	9000      	str	r0, [sp, #0]
 8006f2a:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006f2c:	b165      	cbz	r5, 8006f48 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f2e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006f30:	f040 0001 	orr.w	r0, r0, #1
 8006f34:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f36:	2000      	movs	r0, #0
 8006f38:	9002      	str	r0, [sp, #8]
 8006f3a:	6890      	ldr	r0, [r2, #8]
 8006f3c:	9002      	str	r0, [sp, #8]
 8006f3e:	6810      	ldr	r0, [r2, #0]
 8006f40:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8006f44:	6010      	str	r0, [r2, #0]
 8006f46:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006f48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006f4c:	d009      	beq.n	8006f62 <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f50:	f043 0308 	orr.w	r3, r3, #8
 8006f54:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f56:	2300      	movs	r3, #0
 8006f58:	9303      	str	r3, [sp, #12]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	9303      	str	r3, [sp, #12]
 8006f60:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f62:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d02f      	beq.n	8006fc8 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006f68:	6822      	ldr	r2, [r4, #0]
 8006f6a:	6853      	ldr	r3, [r2, #4]
 8006f6c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006f70:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006f78:	f011 0f03 	tst.w	r1, #3
 8006f7c:	d02e      	beq.n	8006fdc <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006f7e:	6822      	ldr	r2, [r4, #0]
 8006f80:	6853      	ldr	r3, [r2, #4]
 8006f82:	f023 0303 	bic.w	r3, r3, #3
 8006f86:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8006f88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f8a:	b14b      	cbz	r3, 8006fa0 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f8c:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <HAL_SPI_IRQHandler+0x120>)
 8006f8e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f92:	f7fa fca5 	bl	80018e0 <HAL_DMA_Abort_IT>
 8006f96:	b118      	cbz	r0, 8006fa0 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f98:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f9e:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006fa0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006fa2:	b18b      	cbz	r3, 8006fc8 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006fa4:	4a0f      	ldr	r2, [pc, #60]	; (8006fe4 <HAL_SPI_IRQHandler+0x120>)
 8006fa6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006faa:	f7fa fc99 	bl	80018e0 <HAL_DMA_Abort_IT>
 8006fae:	b158      	cbz	r0, 8006fc8 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006fb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb6:	6623      	str	r3, [r4, #96]	; 0x60
 8006fb8:	e006      	b.n	8006fc8 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8006fba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4798      	blx	r3
    return;
 8006fc0:	e002      	b.n	8006fc8 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 8006fc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4798      	blx	r3
}
 8006fc8:	b005      	add	sp, #20
 8006fca:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	68d3      	ldr	r3, [r2, #12]
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	6893      	ldr	r3, [r2, #8]
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	9b01      	ldr	r3, [sp, #4]
        return;
 8006fda:	e7f5      	b.n	8006fc8 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7ff fe9a 	bl	8006d16 <HAL_SPI_ErrorCallback>
    return;
 8006fe2:	e7f1      	b.n	8006fc8 <HAL_SPI_IRQHandler+0x104>
 8006fe4:	08006fe9 	.word	0x08006fe9

08006fe8 <SPI_DMAAbortOnError>:
{
 8006fe8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006fea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006ff2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8006ff4:	f7ff fe8f 	bl	8006d16 <HAL_SPI_ErrorCallback>
}
 8006ff8:	bd08      	pop	{r3, pc}

08006ffa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ffa:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ffc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ffe:	6a04      	ldr	r4, [r0, #32]
 8007000:	f024 0401 	bic.w	r4, r4, #1
 8007004:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007006:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007008:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800700c:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007010:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8007014:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007016:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007018:	6203      	str	r3, [r0, #32]
}
 800701a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800701e:	4770      	bx	lr

08007020 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007020:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007022:	6a04      	ldr	r4, [r0, #32]
 8007024:	f024 0410 	bic.w	r4, r4, #16
 8007028:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800702c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800702e:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007032:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800703a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800703e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007040:	6203      	str	r3, [r0, #32]
}
 8007042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007046:	4770      	bx	lr

08007048 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007048:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800704a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800704e:	430b      	orrs	r3, r1
 8007050:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007054:	6083      	str	r3, [r0, #8]
}
 8007056:	4770      	bx	lr

08007058 <HAL_TIM_Base_Start_IT>:
{
 8007058:	b510      	push	{r4, lr}
 800705a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800705c:	6803      	ldr	r3, [r0, #0]
 800705e:	4a27      	ldr	r2, [pc, #156]	; (80070fc <HAL_TIM_Base_Start_IT+0xa4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	bf18      	it	ne
 8007064:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007068:	d034      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 800706a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800706e:	4293      	cmp	r3, r2
 8007070:	d030      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 8007072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007076:	4293      	cmp	r3, r2
 8007078:	d02c      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 800707a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800707e:	4293      	cmp	r3, r2
 8007080:	d028      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 8007082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007086:	4293      	cmp	r3, r2
 8007088:	d024      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 800708a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800708e:	4293      	cmp	r3, r2
 8007090:	d020      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 8007092:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007096:	4293      	cmp	r3, r2
 8007098:	d01c      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 800709a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800709e:	4293      	cmp	r3, r2
 80070a0:	d018      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 80070a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d014      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 80070aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d010      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 80070b2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00c      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 80070ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070be:	4293      	cmp	r3, r2
 80070c0:	d008      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 80070c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d004      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x7c>
 80070ca:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80070ce:	480c      	ldr	r0, [pc, #48]	; (8007100 <HAL_TIM_Base_Start_IT+0xa8>)
 80070d0:	f00d ff2a 	bl	8014f28 <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070d4:	6822      	ldr	r2, [r4, #0]
 80070d6:	68d3      	ldr	r3, [r2, #12]
 80070d8:	f043 0301 	orr.w	r3, r3, #1
 80070dc:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	6891      	ldr	r1, [r2, #8]
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <HAL_TIM_Base_Start_IT+0xac>)
 80070e4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e6:	2b06      	cmp	r3, #6
 80070e8:	bf18      	it	ne
 80070ea:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80070ee:	d003      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0xa0>
    __HAL_TIM_ENABLE(htim);
 80070f0:	6813      	ldr	r3, [r2, #0]
 80070f2:	f043 0301 	orr.w	r3, r3, #1
 80070f6:	6013      	str	r3, [r2, #0]
}
 80070f8:	2000      	movs	r0, #0
 80070fa:	bd10      	pop	{r4, pc}
 80070fc:	40010000 	.word	0x40010000
 8007100:	0801aa30 	.word	0x0801aa30
 8007104:	00010007 	.word	0x00010007

08007108 <HAL_TIM_Base_Stop_IT>:
{
 8007108:	b510      	push	{r4, lr}
 800710a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800710c:	6803      	ldr	r3, [r0, #0]
 800710e:	4a28      	ldr	r2, [pc, #160]	; (80071b0 <HAL_TIM_Base_Stop_IT+0xa8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	bf18      	it	ne
 8007114:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007118:	d034      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 800711a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800711e:	4293      	cmp	r3, r2
 8007120:	d030      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 8007122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007126:	4293      	cmp	r3, r2
 8007128:	d02c      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 800712a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800712e:	4293      	cmp	r3, r2
 8007130:	d028      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 8007132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007136:	4293      	cmp	r3, r2
 8007138:	d024      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 800713a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800713e:	4293      	cmp	r3, r2
 8007140:	d020      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 8007142:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007146:	4293      	cmp	r3, r2
 8007148:	d01c      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 800714a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800714e:	4293      	cmp	r3, r2
 8007150:	d018      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 8007152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007156:	4293      	cmp	r3, r2
 8007158:	d014      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 800715a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800715e:	4293      	cmp	r3, r2
 8007160:	d010      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 8007162:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007166:	4293      	cmp	r3, r2
 8007168:	d00c      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 800716a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800716e:	4293      	cmp	r3, r2
 8007170:	d008      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 8007172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_TIM_Base_Stop_IT+0x7c>
 800717a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800717e:	480d      	ldr	r0, [pc, #52]	; (80071b4 <HAL_TIM_Base_Stop_IT+0xac>)
 8007180:	f00d fed2 	bl	8014f28 <assert_failed>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007184:	6822      	ldr	r2, [r4, #0]
 8007186:	68d3      	ldr	r3, [r2, #12]
 8007188:	f023 0301 	bic.w	r3, r3, #1
 800718c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	6a19      	ldr	r1, [r3, #32]
 8007192:	f241 1211 	movw	r2, #4369	; 0x1111
 8007196:	4211      	tst	r1, r2
 8007198:	d108      	bne.n	80071ac <HAL_TIM_Base_Stop_IT+0xa4>
 800719a:	6a19      	ldr	r1, [r3, #32]
 800719c:	f240 4244 	movw	r2, #1092	; 0x444
 80071a0:	4211      	tst	r1, r2
 80071a2:	d103      	bne.n	80071ac <HAL_TIM_Base_Stop_IT+0xa4>
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
}
 80071ac:	2000      	movs	r0, #0
 80071ae:	bd10      	pop	{r4, pc}
 80071b0:	40010000 	.word	0x40010000
 80071b4:	0801aa30 	.word	0x0801aa30

080071b8 <HAL_TIM_PeriodElapsedCallback>:
}
 80071b8:	4770      	bx	lr

080071ba <HAL_TIM_OC_DelayElapsedCallback>:
}
 80071ba:	4770      	bx	lr

080071bc <HAL_TIM_IC_CaptureCallback>:
}
 80071bc:	4770      	bx	lr

080071be <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80071be:	4770      	bx	lr

080071c0 <HAL_TIM_TriggerCallback>:
}
 80071c0:	4770      	bx	lr

080071c2 <HAL_TIM_IRQHandler>:
{
 80071c2:	b510      	push	{r4, lr}
 80071c4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071c6:	6803      	ldr	r3, [r0, #0]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	f012 0f02 	tst.w	r2, #2
 80071ce:	d011      	beq.n	80071f4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	f012 0f02 	tst.w	r2, #2
 80071d6:	d00d      	beq.n	80071f4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071d8:	f06f 0202 	mvn.w	r2, #2
 80071dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071de:	2301      	movs	r3, #1
 80071e0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071e2:	6803      	ldr	r3, [r0, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f013 0f03 	tst.w	r3, #3
 80071ea:	d079      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80071ec:	f7ff ffe6 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f0:	2300      	movs	r3, #0
 80071f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	691a      	ldr	r2, [r3, #16]
 80071f8:	f012 0f04 	tst.w	r2, #4
 80071fc:	d012      	beq.n	8007224 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	f012 0f04 	tst.w	r2, #4
 8007204:	d00e      	beq.n	8007224 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007206:	f06f 0204 	mvn.w	r2, #4
 800720a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800720c:	2302      	movs	r3, #2
 800720e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007218:	d068      	beq.n	80072ec <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800721a:	4620      	mov	r0, r4
 800721c:	f7ff ffce 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007220:	2300      	movs	r3, #0
 8007222:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	f012 0f08 	tst.w	r2, #8
 800722c:	d012      	beq.n	8007254 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	f012 0f08 	tst.w	r2, #8
 8007234:	d00e      	beq.n	8007254 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007236:	f06f 0208 	mvn.w	r2, #8
 800723a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800723c:	2304      	movs	r3, #4
 800723e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	f013 0f03 	tst.w	r3, #3
 8007248:	d057      	beq.n	80072fa <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	4620      	mov	r0, r4
 800724c:	f7ff ffb6 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007250:	2300      	movs	r3, #0
 8007252:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	691a      	ldr	r2, [r3, #16]
 8007258:	f012 0f10 	tst.w	r2, #16
 800725c:	d012      	beq.n	8007284 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	f012 0f10 	tst.w	r2, #16
 8007264:	d00e      	beq.n	8007284 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007266:	f06f 0210 	mvn.w	r2, #16
 800726a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800726c:	2308      	movs	r3, #8
 800726e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007278:	d046      	beq.n	8007308 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800727a:	4620      	mov	r0, r4
 800727c:	f7ff ff9e 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007280:	2300      	movs	r3, #0
 8007282:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	f012 0f01 	tst.w	r2, #1
 800728c:	d003      	beq.n	8007296 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	f012 0f01 	tst.w	r2, #1
 8007294:	d13f      	bne.n	8007316 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	691a      	ldr	r2, [r3, #16]
 800729a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800729e:	d003      	beq.n	80072a8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80072a6:	d13d      	bne.n	8007324 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	f412 7f80 	tst.w	r2, #256	; 0x100
 80072b0:	d003      	beq.n	80072ba <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80072b8:	d13b      	bne.n	8007332 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	f012 0f40 	tst.w	r2, #64	; 0x40
 80072c2:	d003      	beq.n	80072cc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80072ca:	d139      	bne.n	8007340 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	f012 0f20 	tst.w	r2, #32
 80072d4:	d003      	beq.n	80072de <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	f012 0f20 	tst.w	r2, #32
 80072dc:	d137      	bne.n	800734e <HAL_TIM_IRQHandler+0x18c>
}
 80072de:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e0:	f7ff ff6b 	bl	80071ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e4:	4620      	mov	r0, r4
 80072e6:	f7ff ff6a 	bl	80071be <HAL_TIM_PWM_PulseFinishedCallback>
 80072ea:	e781      	b.n	80071f0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7ff ff64 	bl	80071ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7ff ff63 	bl	80071be <HAL_TIM_PWM_PulseFinishedCallback>
 80072f8:	e792      	b.n	8007220 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fa:	4620      	mov	r0, r4
 80072fc:	f7ff ff5d 	bl	80071ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007300:	4620      	mov	r0, r4
 8007302:	f7ff ff5c 	bl	80071be <HAL_TIM_PWM_PulseFinishedCallback>
 8007306:	e7a3      	b.n	8007250 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007308:	4620      	mov	r0, r4
 800730a:	f7ff ff56 	bl	80071ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800730e:	4620      	mov	r0, r4
 8007310:	f7ff ff55 	bl	80071be <HAL_TIM_PWM_PulseFinishedCallback>
 8007314:	e7b4      	b.n	8007280 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007316:	f06f 0201 	mvn.w	r2, #1
 800731a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800731c:	4620      	mov	r0, r4
 800731e:	f7ff ff4b 	bl	80071b8 <HAL_TIM_PeriodElapsedCallback>
 8007322:	e7b8      	b.n	8007296 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007324:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007328:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800732a:	4620      	mov	r0, r4
 800732c:	f000 fc25 	bl	8007b7a <HAL_TIMEx_BreakCallback>
 8007330:	e7ba      	b.n	80072a8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007332:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007336:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007338:	4620      	mov	r0, r4
 800733a:	f000 fc1f 	bl	8007b7c <HAL_TIMEx_Break2Callback>
 800733e:	e7bc      	b.n	80072ba <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007344:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007346:	4620      	mov	r0, r4
 8007348:	f7ff ff3a 	bl	80071c0 <HAL_TIM_TriggerCallback>
 800734c:	e7be      	b.n	80072cc <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800734e:	f06f 0220 	mvn.w	r2, #32
 8007352:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007354:	4620      	mov	r0, r4
 8007356:	f000 fc0f 	bl	8007b78 <HAL_TIMEx_CommutCallback>
}
 800735a:	e7c0      	b.n	80072de <HAL_TIM_IRQHandler+0x11c>

0800735c <TIM_Base_SetConfig>:
{
 800735c:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800735e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007360:	4a3b      	ldr	r2, [pc, #236]	; (8007450 <TIM_Base_SetConfig+0xf4>)
 8007362:	4290      	cmp	r0, r2
 8007364:	bf14      	ite	ne
 8007366:	f04f 0e00 	movne.w	lr, #0
 800736a:	f04f 0e01 	moveq.w	lr, #1
 800736e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007372:	bf14      	ite	ne
 8007374:	4672      	movne	r2, lr
 8007376:	f04e 0201 	orreq.w	r2, lr, #1
 800737a:	b9aa      	cbnz	r2, 80073a8 <TIM_Base_SetConfig+0x4c>
 800737c:	4c35      	ldr	r4, [pc, #212]	; (8007454 <TIM_Base_SetConfig+0xf8>)
 800737e:	42a0      	cmp	r0, r4
 8007380:	bf14      	ite	ne
 8007382:	2400      	movne	r4, #0
 8007384:	2401      	moveq	r4, #1
 8007386:	4d34      	ldr	r5, [pc, #208]	; (8007458 <TIM_Base_SetConfig+0xfc>)
 8007388:	42a8      	cmp	r0, r5
 800738a:	d00d      	beq.n	80073a8 <TIM_Base_SetConfig+0x4c>
 800738c:	b964      	cbnz	r4, 80073a8 <TIM_Base_SetConfig+0x4c>
 800738e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8007392:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8007396:	42a0      	cmp	r0, r4
 8007398:	bf14      	ite	ne
 800739a:	2400      	movne	r4, #0
 800739c:	2401      	moveq	r4, #1
 800739e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80073a2:	42a8      	cmp	r0, r5
 80073a4:	d000      	beq.n	80073a8 <TIM_Base_SetConfig+0x4c>
 80073a6:	b11c      	cbz	r4, 80073b0 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80073ac:	684c      	ldr	r4, [r1, #4]
 80073ae:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	d133      	bne.n	800741c <TIM_Base_SetConfig+0xc0>
 80073b4:	4a27      	ldr	r2, [pc, #156]	; (8007454 <TIM_Base_SetConfig+0xf8>)
 80073b6:	4290      	cmp	r0, r2
 80073b8:	bf14      	ite	ne
 80073ba:	2200      	movne	r2, #0
 80073bc:	2201      	moveq	r2, #1
 80073be:	4c26      	ldr	r4, [pc, #152]	; (8007458 <TIM_Base_SetConfig+0xfc>)
 80073c0:	42a0      	cmp	r0, r4
 80073c2:	d02b      	beq.n	800741c <TIM_Base_SetConfig+0xc0>
 80073c4:	bb52      	cbnz	r2, 800741c <TIM_Base_SetConfig+0xc0>
 80073c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80073ca:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80073ce:	4290      	cmp	r0, r2
 80073d0:	bf14      	ite	ne
 80073d2:	2200      	movne	r2, #0
 80073d4:	2201      	moveq	r2, #1
 80073d6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80073da:	42a0      	cmp	r0, r4
 80073dc:	d01e      	beq.n	800741c <TIM_Base_SetConfig+0xc0>
 80073de:	b9ea      	cbnz	r2, 800741c <TIM_Base_SetConfig+0xc0>
 80073e0:	4a1e      	ldr	r2, [pc, #120]	; (800745c <TIM_Base_SetConfig+0x100>)
 80073e2:	4290      	cmp	r0, r2
 80073e4:	bf14      	ite	ne
 80073e6:	2200      	movne	r2, #0
 80073e8:	2201      	moveq	r2, #1
 80073ea:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80073ee:	42a0      	cmp	r0, r4
 80073f0:	d014      	beq.n	800741c <TIM_Base_SetConfig+0xc0>
 80073f2:	b99a      	cbnz	r2, 800741c <TIM_Base_SetConfig+0xc0>
 80073f4:	4a1a      	ldr	r2, [pc, #104]	; (8007460 <TIM_Base_SetConfig+0x104>)
 80073f6:	4290      	cmp	r0, r2
 80073f8:	bf14      	ite	ne
 80073fa:	2200      	movne	r2, #0
 80073fc:	2201      	moveq	r2, #1
 80073fe:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007402:	42a0      	cmp	r0, r4
 8007404:	d00a      	beq.n	800741c <TIM_Base_SetConfig+0xc0>
 8007406:	b94a      	cbnz	r2, 800741c <TIM_Base_SetConfig+0xc0>
 8007408:	4a16      	ldr	r2, [pc, #88]	; (8007464 <TIM_Base_SetConfig+0x108>)
 800740a:	4290      	cmp	r0, r2
 800740c:	bf14      	ite	ne
 800740e:	2200      	movne	r2, #0
 8007410:	2201      	moveq	r2, #1
 8007412:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8007416:	42a0      	cmp	r0, r4
 8007418:	d000      	beq.n	800741c <TIM_Base_SetConfig+0xc0>
 800741a:	b122      	cbz	r2, 8007426 <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 800741c:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007420:	68cb      	ldr	r3, [r1, #12]
 8007422:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800742a:	694a      	ldr	r2, [r1, #20]
 800742c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800742e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007430:	688a      	ldr	r2, [r1, #8]
 8007432:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007434:	680a      	ldr	r2, [r1, #0]
 8007436:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007438:	4a0b      	ldr	r2, [pc, #44]	; (8007468 <TIM_Base_SetConfig+0x10c>)
 800743a:	4290      	cmp	r0, r2
 800743c:	bf14      	ite	ne
 800743e:	4673      	movne	r3, lr
 8007440:	f04e 0301 	orreq.w	r3, lr, #1
 8007444:	b10b      	cbz	r3, 800744a <TIM_Base_SetConfig+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 8007446:	690b      	ldr	r3, [r1, #16]
 8007448:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800744a:	2301      	movs	r3, #1
 800744c:	6143      	str	r3, [r0, #20]
}
 800744e:	bd30      	pop	{r4, r5, pc}
 8007450:	40010000 	.word	0x40010000
 8007454:	40000800 	.word	0x40000800
 8007458:	40000400 	.word	0x40000400
 800745c:	40014400 	.word	0x40014400
 8007460:	40001800 	.word	0x40001800
 8007464:	40002000 	.word	0x40002000
 8007468:	40010400 	.word	0x40010400

0800746c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800746c:	2800      	cmp	r0, #0
 800746e:	d07e      	beq.n	800756e <HAL_TIM_Base_Init+0x102>
{
 8007470:	b510      	push	{r4, lr}
 8007472:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007474:	6803      	ldr	r3, [r0, #0]
 8007476:	4a3f      	ldr	r2, [pc, #252]	; (8007574 <HAL_TIM_Base_Init+0x108>)
 8007478:	4293      	cmp	r3, r2
 800747a:	bf18      	it	ne
 800747c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007480:	d034      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 8007482:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007486:	4293      	cmp	r3, r2
 8007488:	d030      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 800748a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800748e:	4293      	cmp	r3, r2
 8007490:	d02c      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 8007492:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007496:	4293      	cmp	r3, r2
 8007498:	d028      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 800749a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800749e:	4293      	cmp	r3, r2
 80074a0:	d024      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 80074a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d020      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 80074aa:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01c      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 80074b2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 80074ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074be:	4293      	cmp	r3, r2
 80074c0:	d014      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 80074c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d010      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 80074ca:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00c      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 80074d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d008      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 80074da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_TIM_Base_Init+0x80>
 80074e2:	f240 110d 	movw	r1, #269	; 0x10d
 80074e6:	4824      	ldr	r0, [pc, #144]	; (8007578 <HAL_TIM_Base_Init+0x10c>)
 80074e8:	f00d fd1e 	bl	8014f28 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80074ec:	68a3      	ldr	r3, [r4, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bf18      	it	ne
 80074f2:	2b10      	cmpne	r3, #16
 80074f4:	d005      	beq.n	8007502 <HAL_TIM_Base_Init+0x96>
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d003      	beq.n	8007502 <HAL_TIM_Base_Init+0x96>
 80074fa:	2b40      	cmp	r3, #64	; 0x40
 80074fc:	d001      	beq.n	8007502 <HAL_TIM_Base_Init+0x96>
 80074fe:	2b60      	cmp	r3, #96	; 0x60
 8007500:	d11d      	bne.n	800753e <HAL_TIM_Base_Init+0xd2>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	bf18      	it	ne
 8007508:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 800750c:	d002      	beq.n	8007514 <HAL_TIM_Base_Init+0xa8>
 800750e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007512:	d11a      	bne.n	800754a <HAL_TIM_Base_Init+0xde>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007514:	69a3      	ldr	r3, [r4, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	bf18      	it	ne
 800751a:	2b80      	cmpne	r3, #128	; 0x80
 800751c:	d11b      	bne.n	8007556 <HAL_TIM_Base_Init+0xea>
  if (htim->State == HAL_TIM_STATE_RESET)
 800751e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007522:	b1f3      	cbz	r3, 8007562 <HAL_TIM_Base_Init+0xf6>
  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	2302      	movs	r3, #2
 8007526:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800752a:	4621      	mov	r1, r4
 800752c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007530:	f7ff ff14 	bl	800735c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007534:	2301      	movs	r3, #1
 8007536:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800753a:	2000      	movs	r0, #0
}
 800753c:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800753e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8007542:	480d      	ldr	r0, [pc, #52]	; (8007578 <HAL_TIM_Base_Init+0x10c>)
 8007544:	f00d fcf0 	bl	8014f28 <assert_failed>
 8007548:	e7db      	b.n	8007502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800754a:	f240 110f 	movw	r1, #271	; 0x10f
 800754e:	480a      	ldr	r0, [pc, #40]	; (8007578 <HAL_TIM_Base_Init+0x10c>)
 8007550:	f00d fcea 	bl	8014f28 <assert_failed>
 8007554:	e7de      	b.n	8007514 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007556:	f44f 7188 	mov.w	r1, #272	; 0x110
 800755a:	4807      	ldr	r0, [pc, #28]	; (8007578 <HAL_TIM_Base_Init+0x10c>)
 800755c:	f00d fce4 	bl	8014f28 <assert_failed>
 8007560:	e7dd      	b.n	800751e <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8007562:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007566:	4620      	mov	r0, r4
 8007568:	f010 ff42 	bl	80183f0 <HAL_TIM_Base_MspInit>
 800756c:	e7da      	b.n	8007524 <HAL_TIM_Base_Init+0xb8>
    return HAL_ERROR;
 800756e:	2001      	movs	r0, #1
}
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40010000 	.word	0x40010000
 8007578:	0801aa30 	.word	0x0801aa30

0800757c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800757c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800757e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007580:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007584:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007588:	430a      	orrs	r2, r1
 800758a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800758e:	6082      	str	r2, [r0, #8]
}
 8007590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <HAL_TIM_ConfigClockSource>:
{
 8007598:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800759a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800759e:	2b01      	cmp	r3, #1
 80075a0:	f000 8232 	beq.w	8007a08 <HAL_TIM_ConfigClockSource+0x470>
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	2301      	movs	r3, #1
 80075aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80075ae:	2302      	movs	r3, #2
 80075b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80075b4:	680b      	ldr	r3, [r1, #0]
 80075b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ba:	bf18      	it	ne
 80075bc:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 80075c0:	d00e      	beq.n	80075e0 <HAL_TIM_ConfigClockSource+0x48>
 80075c2:	b16b      	cbz	r3, 80075e0 <HAL_TIM_ConfigClockSource+0x48>
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d00b      	beq.n	80075e0 <HAL_TIM_ConfigClockSource+0x48>
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d009      	beq.n	80075e0 <HAL_TIM_ConfigClockSource+0x48>
 80075cc:	2b30      	cmp	r3, #48	; 0x30
 80075ce:	d007      	beq.n	80075e0 <HAL_TIM_ConfigClockSource+0x48>
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d005      	beq.n	80075e0 <HAL_TIM_ConfigClockSource+0x48>
 80075d4:	2b50      	cmp	r3, #80	; 0x50
 80075d6:	d003      	beq.n	80075e0 <HAL_TIM_ConfigClockSource+0x48>
 80075d8:	2b60      	cmp	r3, #96	; 0x60
 80075da:	d001      	beq.n	80075e0 <HAL_TIM_ConfigClockSource+0x48>
 80075dc:	2b70      	cmp	r3, #112	; 0x70
 80075de:	d145      	bne.n	800766c <HAL_TIM_ConfigClockSource+0xd4>
  tmpsmcr = htim->Instance->SMCR;
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075e4:	4b88      	ldr	r3, [pc, #544]	; (8007808 <HAL_TIM_ConfigClockSource+0x270>)
 80075e6:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 80075e8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80075ea:	682b      	ldr	r3, [r5, #0]
 80075ec:	2b60      	cmp	r3, #96	; 0x60
 80075ee:	f000 818b 	beq.w	8007908 <HAL_TIM_ConfigClockSource+0x370>
 80075f2:	d871      	bhi.n	80076d8 <HAL_TIM_ConfigClockSource+0x140>
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	f000 81c7 	beq.w	8007988 <HAL_TIM_ConfigClockSource+0x3f0>
 80075fa:	d93d      	bls.n	8007678 <HAL_TIM_ConfigClockSource+0xe0>
 80075fc:	2b50      	cmp	r3, #80	; 0x50
 80075fe:	d140      	bne.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	4a82      	ldr	r2, [pc, #520]	; (800780c <HAL_TIM_ConfigClockSource+0x274>)
 8007604:	4293      	cmp	r3, r2
 8007606:	bf18      	it	ne
 8007608:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800760c:	d014      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0xa0>
 800760e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007612:	4293      	cmp	r3, r2
 8007614:	d010      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0xa0>
 8007616:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800761a:	4293      	cmp	r3, r2
 800761c:	d00c      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0xa0>
 800761e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007622:	4293      	cmp	r3, r2
 8007624:	d008      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0xa0>
 8007626:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0xa0>
 800762e:	f241 2135 	movw	r1, #4661	; 0x1235
 8007632:	4877      	ldr	r0, [pc, #476]	; (8007810 <HAL_TIM_ConfigClockSource+0x278>)
 8007634:	f00d fc78 	bl	8014f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007638:	686b      	ldr	r3, [r5, #4]
 800763a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800763e:	bf18      	it	ne
 8007640:	2b00      	cmpne	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_TIM_ConfigClockSource+0xb8>
 8007644:	b123      	cbz	r3, 8007650 <HAL_TIM_ConfigClockSource+0xb8>
 8007646:	2b02      	cmp	r3, #2
 8007648:	d002      	beq.n	8007650 <HAL_TIM_ConfigClockSource+0xb8>
 800764a:	2b0a      	cmp	r3, #10
 800764c:	f040 8150 	bne.w	80078f0 <HAL_TIM_ConfigClockSource+0x358>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007650:	68eb      	ldr	r3, [r5, #12]
 8007652:	2b0f      	cmp	r3, #15
 8007654:	f200 8152 	bhi.w	80078fc <HAL_TIM_ConfigClockSource+0x364>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007658:	68ea      	ldr	r2, [r5, #12]
 800765a:	6869      	ldr	r1, [r5, #4]
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	f7ff fccc 	bl	8006ffa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007662:	2150      	movs	r1, #80	; 0x50
 8007664:	6820      	ldr	r0, [r4, #0]
 8007666:	f7ff fcef 	bl	8007048 <TIM_ITRx_SetConfig>
      break;
 800766a:	e00a      	b.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800766c:	f241 11f6 	movw	r1, #4598	; 0x11f6
 8007670:	4867      	ldr	r0, [pc, #412]	; (8007810 <HAL_TIM_ConfigClockSource+0x278>)
 8007672:	f00d fc59 	bl	8014f28 <assert_failed>
 8007676:	e7b3      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8007678:	2b20      	cmp	r3, #32
 800767a:	d00c      	beq.n	8007696 <HAL_TIM_ConfigClockSource+0xfe>
 800767c:	d908      	bls.n	8007690 <HAL_TIM_ConfigClockSource+0xf8>
 800767e:	2b30      	cmp	r3, #48	; 0x30
 8007680:	d009      	beq.n	8007696 <HAL_TIM_ConfigClockSource+0xfe>
  htim->State = HAL_TIM_STATE_READY;
 8007682:	2301      	movs	r3, #1
 8007684:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007688:	2000      	movs	r0, #0
 800768a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800768e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8007690:	b10b      	cbz	r3, 8007696 <HAL_TIM_ConfigClockSource+0xfe>
 8007692:	2b10      	cmp	r3, #16
 8007694:	d1f5      	bne.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	4a5c      	ldr	r2, [pc, #368]	; (800780c <HAL_TIM_ConfigClockSource+0x274>)
 800769a:	4293      	cmp	r3, r2
 800769c:	bf18      	it	ne
 800769e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80076a2:	d014      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x136>
 80076a4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d010      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x136>
 80076ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00c      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x136>
 80076b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d008      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x136>
 80076bc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x136>
 80076c4:	f241 2168 	movw	r1, #4712	; 0x1268
 80076c8:	4851      	ldr	r0, [pc, #324]	; (8007810 <HAL_TIM_ConfigClockSource+0x278>)
 80076ca:	f00d fc2d 	bl	8014f28 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ce:	6829      	ldr	r1, [r5, #0]
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	f7ff fcb9 	bl	8007048 <TIM_ITRx_SetConfig>
      break;
 80076d6:	e7d4      	b.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 80076d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076dc:	f000 809a 	beq.w	8007814 <HAL_TIM_ConfigClockSource+0x27c>
 80076e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e4:	d144      	bne.n	8007770 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	4a48      	ldr	r2, [pc, #288]	; (800780c <HAL_TIM_ConfigClockSource+0x274>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	bf18      	it	ne
 80076ee:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80076f2:	d014      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x186>
 80076f4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d010      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x186>
 80076fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007700:	4293      	cmp	r3, r2
 8007702:	d00c      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x186>
 8007704:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007708:	4293      	cmp	r3, r2
 800770a:	d008      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x186>
 800770c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007710:	4293      	cmp	r3, r2
 8007712:	d004      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x186>
 8007714:	f241 2121 	movw	r1, #4641	; 0x1221
 8007718:	483d      	ldr	r0, [pc, #244]	; (8007810 <HAL_TIM_ConfigClockSource+0x278>)
 800771a:	f00d fc05 	bl	8014f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800771e:	68ab      	ldr	r3, [r5, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	bf18      	it	ne
 8007724:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 8007728:	d006      	beq.n	8007738 <HAL_TIM_ConfigClockSource+0x1a0>
 800772a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772e:	d003      	beq.n	8007738 <HAL_TIM_ConfigClockSource+0x1a0>
 8007730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007734:	f040 80ca 	bne.w	80078cc <HAL_TIM_ConfigClockSource+0x334>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007738:	686b      	ldr	r3, [r5, #4]
 800773a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773e:	bf18      	it	ne
 8007740:	2b00      	cmpne	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_TIM_ConfigClockSource+0x1b8>
 8007744:	b123      	cbz	r3, 8007750 <HAL_TIM_ConfigClockSource+0x1b8>
 8007746:	2b02      	cmp	r3, #2
 8007748:	d002      	beq.n	8007750 <HAL_TIM_ConfigClockSource+0x1b8>
 800774a:	2b0a      	cmp	r3, #10
 800774c:	f040 80c4 	bne.w	80078d8 <HAL_TIM_ConfigClockSource+0x340>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007750:	68eb      	ldr	r3, [r5, #12]
 8007752:	2b0f      	cmp	r3, #15
 8007754:	f200 80c6 	bhi.w	80078e4 <HAL_TIM_ConfigClockSource+0x34c>
      TIM_ETR_SetConfig(htim->Instance,
 8007758:	68eb      	ldr	r3, [r5, #12]
 800775a:	686a      	ldr	r2, [r5, #4]
 800775c:	68a9      	ldr	r1, [r5, #8]
 800775e:	6820      	ldr	r0, [r4, #0]
 8007760:	f7ff ff0c 	bl	800757c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	6893      	ldr	r3, [r2, #8]
 8007768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800776c:	6093      	str	r3, [r2, #8]
      break;
 800776e:	e788      	b.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8007770:	2b70      	cmp	r3, #112	; 0x70
 8007772:	d186      	bne.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	4a25      	ldr	r2, [pc, #148]	; (800780c <HAL_TIM_ConfigClockSource+0x274>)
 8007778:	4293      	cmp	r3, r2
 800777a:	bf18      	it	ne
 800777c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007780:	d01c      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x224>
 8007782:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007786:	4293      	cmp	r3, r2
 8007788:	d018      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x224>
 800778a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800778e:	4293      	cmp	r3, r2
 8007790:	d014      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x224>
 8007792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007796:	4293      	cmp	r3, r2
 8007798:	d010      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x224>
 800779a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00c      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x224>
 80077a2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d008      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x224>
 80077aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d004      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x224>
 80077b2:	f241 2109 	movw	r1, #4617	; 0x1209
 80077b6:	4816      	ldr	r0, [pc, #88]	; (8007810 <HAL_TIM_ConfigClockSource+0x278>)
 80077b8:	f00d fbb6 	bl	8014f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80077bc:	68ab      	ldr	r3, [r5, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bf18      	it	ne
 80077c2:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 80077c6:	d005      	beq.n	80077d4 <HAL_TIM_ConfigClockSource+0x23c>
 80077c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077cc:	d002      	beq.n	80077d4 <HAL_TIM_ConfigClockSource+0x23c>
 80077ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077d2:	d169      	bne.n	80078a8 <HAL_TIM_ConfigClockSource+0x310>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80077d4:	686b      	ldr	r3, [r5, #4]
 80077d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077da:	bf18      	it	ne
 80077dc:	2b00      	cmpne	r3, #0
 80077de:	d004      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x252>
 80077e0:	b11b      	cbz	r3, 80077ea <HAL_TIM_ConfigClockSource+0x252>
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d001      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x252>
 80077e6:	2b0a      	cmp	r3, #10
 80077e8:	d164      	bne.n	80078b4 <HAL_TIM_ConfigClockSource+0x31c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80077ea:	68eb      	ldr	r3, [r5, #12]
 80077ec:	2b0f      	cmp	r3, #15
 80077ee:	d867      	bhi.n	80078c0 <HAL_TIM_ConfigClockSource+0x328>
      TIM_ETR_SetConfig(htim->Instance,
 80077f0:	68eb      	ldr	r3, [r5, #12]
 80077f2:	686a      	ldr	r2, [r5, #4]
 80077f4:	68a9      	ldr	r1, [r5, #8]
 80077f6:	6820      	ldr	r0, [r4, #0]
 80077f8:	f7ff fec0 	bl	800757c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077fc:	6822      	ldr	r2, [r4, #0]
 80077fe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007800:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007804:	6093      	str	r3, [r2, #8]
      break;
 8007806:	e73c      	b.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
 8007808:	fffe0088 	.word	0xfffe0088
 800780c:	40010000 	.word	0x40010000
 8007810:	0801aa30 	.word	0x0801aa30
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	4a7d      	ldr	r2, [pc, #500]	; (8007a0c <HAL_TIM_ConfigClockSource+0x474>)
 8007818:	4293      	cmp	r3, r2
 800781a:	bf18      	it	ne
 800781c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007820:	f43f af2f 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 8007824:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007828:	4293      	cmp	r3, r2
 800782a:	f43f af2a 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 800782e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007832:	4293      	cmp	r3, r2
 8007834:	f43f af25 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 8007838:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800783c:	4293      	cmp	r3, r2
 800783e:	f43f af20 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 8007842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007846:	4293      	cmp	r3, r2
 8007848:	f43f af1b 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 800784c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007850:	4293      	cmp	r3, r2
 8007852:	f43f af16 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 8007856:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800785a:	4293      	cmp	r3, r2
 800785c:	f43f af11 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 8007860:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007864:	4293      	cmp	r3, r2
 8007866:	f43f af0c 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 800786a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800786e:	4293      	cmp	r3, r2
 8007870:	f43f af07 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 8007874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007878:	4293      	cmp	r3, r2
 800787a:	f43f af02 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 800787e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007882:	4293      	cmp	r3, r2
 8007884:	f43f aefd 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 8007888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800788c:	4293      	cmp	r3, r2
 800788e:	f43f aef8 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 8007892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007896:	4293      	cmp	r3, r2
 8007898:	f43f aef3 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0xea>
 800789c:	f241 2102 	movw	r1, #4610	; 0x1202
 80078a0:	485b      	ldr	r0, [pc, #364]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80078a2:	f00d fb41 	bl	8014f28 <assert_failed>
 80078a6:	e6ec      	b.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80078a8:	f241 210c 	movw	r1, #4620	; 0x120c
 80078ac:	4858      	ldr	r0, [pc, #352]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80078ae:	f00d fb3b 	bl	8014f28 <assert_failed>
 80078b2:	e78f      	b.n	80077d4 <HAL_TIM_ConfigClockSource+0x23c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80078b4:	f241 210d 	movw	r1, #4621	; 0x120d
 80078b8:	4855      	ldr	r0, [pc, #340]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80078ba:	f00d fb35 	bl	8014f28 <assert_failed>
 80078be:	e794      	b.n	80077ea <HAL_TIM_ConfigClockSource+0x252>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80078c0:	f241 210e 	movw	r1, #4622	; 0x120e
 80078c4:	4852      	ldr	r0, [pc, #328]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80078c6:	f00d fb2f 	bl	8014f28 <assert_failed>
 80078ca:	e791      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x258>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80078cc:	f241 2124 	movw	r1, #4644	; 0x1224
 80078d0:	484f      	ldr	r0, [pc, #316]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80078d2:	f00d fb29 	bl	8014f28 <assert_failed>
 80078d6:	e72f      	b.n	8007738 <HAL_TIM_ConfigClockSource+0x1a0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80078d8:	f241 2125 	movw	r1, #4645	; 0x1225
 80078dc:	484c      	ldr	r0, [pc, #304]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80078de:	f00d fb23 	bl	8014f28 <assert_failed>
 80078e2:	e735      	b.n	8007750 <HAL_TIM_ConfigClockSource+0x1b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80078e4:	f241 2126 	movw	r1, #4646	; 0x1226
 80078e8:	4849      	ldr	r0, [pc, #292]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80078ea:	f00d fb1d 	bl	8014f28 <assert_failed>
 80078ee:	e733      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80078f0:	f241 2138 	movw	r1, #4664	; 0x1238
 80078f4:	4846      	ldr	r0, [pc, #280]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80078f6:	f00d fb17 	bl	8014f28 <assert_failed>
 80078fa:	e6a9      	b.n	8007650 <HAL_TIM_ConfigClockSource+0xb8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80078fc:	f241 2139 	movw	r1, #4665	; 0x1239
 8007900:	4843      	ldr	r0, [pc, #268]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 8007902:	f00d fb11 	bl	8014f28 <assert_failed>
 8007906:	e6a7      	b.n	8007658 <HAL_TIM_ConfigClockSource+0xc0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	4a40      	ldr	r2, [pc, #256]	; (8007a0c <HAL_TIM_ConfigClockSource+0x474>)
 800790c:	4293      	cmp	r3, r2
 800790e:	bf18      	it	ne
 8007910:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007914:	d014      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0x3a8>
 8007916:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800791a:	4293      	cmp	r3, r2
 800791c:	d010      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0x3a8>
 800791e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007922:	4293      	cmp	r3, r2
 8007924:	d00c      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0x3a8>
 8007926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800792a:	4293      	cmp	r3, r2
 800792c:	d008      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0x3a8>
 800792e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007932:	4293      	cmp	r3, r2
 8007934:	d004      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0x3a8>
 8007936:	f241 2145 	movw	r1, #4677	; 0x1245
 800793a:	4835      	ldr	r0, [pc, #212]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 800793c:	f00d faf4 	bl	8014f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007940:	686b      	ldr	r3, [r5, #4]
 8007942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007946:	bf18      	it	ne
 8007948:	2b00      	cmpne	r3, #0
 800794a:	d004      	beq.n	8007956 <HAL_TIM_ConfigClockSource+0x3be>
 800794c:	b11b      	cbz	r3, 8007956 <HAL_TIM_ConfigClockSource+0x3be>
 800794e:	2b02      	cmp	r3, #2
 8007950:	d001      	beq.n	8007956 <HAL_TIM_ConfigClockSource+0x3be>
 8007952:	2b0a      	cmp	r3, #10
 8007954:	d10c      	bne.n	8007970 <HAL_TIM_ConfigClockSource+0x3d8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007956:	68eb      	ldr	r3, [r5, #12]
 8007958:	2b0f      	cmp	r3, #15
 800795a:	d80f      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x3e4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800795c:	68ea      	ldr	r2, [r5, #12]
 800795e:	6869      	ldr	r1, [r5, #4]
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	f7ff fb5d 	bl	8007020 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007966:	2160      	movs	r1, #96	; 0x60
 8007968:	6820      	ldr	r0, [r4, #0]
 800796a:	f7ff fb6d 	bl	8007048 <TIM_ITRx_SetConfig>
      break;
 800796e:	e688      	b.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007970:	f241 2148 	movw	r1, #4680	; 0x1248
 8007974:	4826      	ldr	r0, [pc, #152]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 8007976:	f00d fad7 	bl	8014f28 <assert_failed>
 800797a:	e7ec      	b.n	8007956 <HAL_TIM_ConfigClockSource+0x3be>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800797c:	f241 2149 	movw	r1, #4681	; 0x1249
 8007980:	4823      	ldr	r0, [pc, #140]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 8007982:	f00d fad1 	bl	8014f28 <assert_failed>
 8007986:	e7e9      	b.n	800795c <HAL_TIM_ConfigClockSource+0x3c4>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	4a20      	ldr	r2, [pc, #128]	; (8007a0c <HAL_TIM_ConfigClockSource+0x474>)
 800798c:	4293      	cmp	r3, r2
 800798e:	bf18      	it	ne
 8007990:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007994:	d014      	beq.n	80079c0 <HAL_TIM_ConfigClockSource+0x428>
 8007996:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800799a:	4293      	cmp	r3, r2
 800799c:	d010      	beq.n	80079c0 <HAL_TIM_ConfigClockSource+0x428>
 800799e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00c      	beq.n	80079c0 <HAL_TIM_ConfigClockSource+0x428>
 80079a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d008      	beq.n	80079c0 <HAL_TIM_ConfigClockSource+0x428>
 80079ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d004      	beq.n	80079c0 <HAL_TIM_ConfigClockSource+0x428>
 80079b6:	f241 2155 	movw	r1, #4693	; 0x1255
 80079ba:	4815      	ldr	r0, [pc, #84]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80079bc:	f00d fab4 	bl	8014f28 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80079c0:	686b      	ldr	r3, [r5, #4]
 80079c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c6:	bf18      	it	ne
 80079c8:	2b00      	cmpne	r3, #0
 80079ca:	d004      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x43e>
 80079cc:	b11b      	cbz	r3, 80079d6 <HAL_TIM_ConfigClockSource+0x43e>
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d001      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x43e>
 80079d2:	2b0a      	cmp	r3, #10
 80079d4:	d10c      	bne.n	80079f0 <HAL_TIM_ConfigClockSource+0x458>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80079d6:	68eb      	ldr	r3, [r5, #12]
 80079d8:	2b0f      	cmp	r3, #15
 80079da:	d80f      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x464>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079dc:	68ea      	ldr	r2, [r5, #12]
 80079de:	6869      	ldr	r1, [r5, #4]
 80079e0:	6820      	ldr	r0, [r4, #0]
 80079e2:	f7ff fb0a 	bl	8006ffa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079e6:	2140      	movs	r1, #64	; 0x40
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	f7ff fb2d 	bl	8007048 <TIM_ITRx_SetConfig>
      break;
 80079ee:	e648      	b.n	8007682 <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80079f0:	f241 2158 	movw	r1, #4696	; 0x1258
 80079f4:	4806      	ldr	r0, [pc, #24]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 80079f6:	f00d fa97 	bl	8014f28 <assert_failed>
 80079fa:	e7ec      	b.n	80079d6 <HAL_TIM_ConfigClockSource+0x43e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80079fc:	f241 2159 	movw	r1, #4697	; 0x1259
 8007a00:	4803      	ldr	r0, [pc, #12]	; (8007a10 <HAL_TIM_ConfigClockSource+0x478>)
 8007a02:	f00d fa91 	bl	8014f28 <assert_failed>
 8007a06:	e7e9      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x444>
  __HAL_LOCK(htim);
 8007a08:	2002      	movs	r0, #2
 8007a0a:	e640      	b.n	800768e <HAL_TIM_ConfigClockSource+0xf6>
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	0801aa30 	.word	0x0801aa30

08007a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	4604      	mov	r4, r0
 8007a18:	460d      	mov	r5, r1
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8007a1a:	6803      	ldr	r3, [r0, #0]
 8007a1c:	4a53      	ldr	r2, [pc, #332]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	bf18      	it	ne
 8007a22:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007a26:	d01c      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a28:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d018      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d014      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d010      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d00c      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d008      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a50:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d004      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a58:	f240 6163 	movw	r1, #1635	; 0x663
 8007a5c:	4844      	ldr	r0, [pc, #272]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007a5e:	f00d fa63 	bl	8014f28 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007a62:	682b      	ldr	r3, [r5, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf18      	it	ne
 8007a68:	2b10      	cmpne	r3, #16
 8007a6a:	d00b      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d009      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a70:	2b30      	cmp	r3, #48	; 0x30
 8007a72:	d007      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	d005      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a78:	2b50      	cmp	r3, #80	; 0x50
 8007a7a:	d003      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a7c:	2b60      	cmp	r3, #96	; 0x60
 8007a7e:	d001      	beq.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a80:	2b70      	cmp	r3, #112	; 0x70
 8007a82:	d15e      	bne.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007a84:	68ab      	ldr	r3, [r5, #8]
 8007a86:	2b80      	cmp	r3, #128	; 0x80
 8007a88:	bf18      	it	ne
 8007a8a:	2b00      	cmpne	r3, #0
 8007a8c:	d15f      	bne.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0x13a>

  /* Check input state */
  __HAL_LOCK(htim);
 8007a8e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d067      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0x152>
 8007a96:	2301      	movs	r3, #1
 8007a98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	685e      	ldr	r6, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aa6:	689f      	ldr	r7, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007aa8:	4930      	ldr	r1, [pc, #192]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8007aaa:	4a32      	ldr	r2, [pc, #200]	; (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bf18      	it	ne
 8007ab0:	428b      	cmpne	r3, r1
 8007ab2:	d133      	bne.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x108>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007ab4:	686b      	ldr	r3, [r5, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bf18      	it	ne
 8007aba:	f5b3 1f80 	cmpne.w	r3, #1048576	; 0x100000
 8007abe:	d029      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ac4:	d026      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ac6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aca:	d023      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad0:	d020      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ad2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007ad6:	d01d      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ad8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007adc:	d01a      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ade:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8007ae2:	d017      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ae4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ae8:	d014      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007aea:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8007aee:	d011      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007af0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007af4:	d00e      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007af6:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8007afa:	d00b      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007afc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b00:	d008      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007b02:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8007b06:	d005      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007b08:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8007b0c:	d002      	beq.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007b0e:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8007b12:	d122      	bne.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0x146>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b14:	f426 0670 	bic.w	r6, r6, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b18:	686b      	ldr	r3, [r5, #4]
 8007b1a:	431e      	orrs	r6, r3
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b1c:	f026 0670 	bic.w	r6, r6, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	431e      	orrs	r6, r3

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007b24:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b28:	68ab      	ldr	r3, [r5, #8]
 8007b2a:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b2c:	6822      	ldr	r2, [r4, #0]
 8007b2e:	6056      	str	r6, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b30:	6822      	ldr	r2, [r4, #0]
 8007b32:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8007b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007b42:	f240 6164 	movw	r1, #1636	; 0x664
 8007b46:	480a      	ldr	r0, [pc, #40]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007b48:	f00d f9ee 	bl	8014f28 <assert_failed>
 8007b4c:	e79a      	b.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007b4e:	f240 6165 	movw	r1, #1637	; 0x665
 8007b52:	4807      	ldr	r0, [pc, #28]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007b54:	f00d f9e8 	bl	8014f28 <assert_failed>
 8007b58:	e799      	b.n	8007a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007b5a:	f240 6177 	movw	r1, #1655	; 0x677
 8007b5e:	4804      	ldr	r0, [pc, #16]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007b60:	f00d f9e2 	bl	8014f28 <assert_failed>
 8007b64:	e7d6      	b.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>
  __HAL_LOCK(htim);
 8007b66:	2002      	movs	r0, #2
 8007b68:	e7ea      	b.n	8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8007b6a:	bf00      	nop
 8007b6c:	40010000 	.word	0x40010000
 8007b70:	0801aa68 	.word	0x0801aa68
 8007b74:	40010400 	.word	0x40010400

08007b78 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b78:	4770      	bx	lr

08007b7a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b7a:	4770      	bx	lr

08007b7c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b7c:	4770      	bx	lr
	...

08007b80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4605      	mov	r5, r0
 8007b84:	460c      	mov	r4, r1
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007b86:	4b5d      	ldr	r3, [pc, #372]	; (8007cfc <FMC_SDRAM_Init+0x17c>)
 8007b88:	4298      	cmp	r0, r3
 8007b8a:	d004      	beq.n	8007b96 <FMC_SDRAM_Init+0x16>
 8007b8c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8007b90:	485b      	ldr	r0, [pc, #364]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007b92:	f00d f9c9 	bl	8014f28 <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d857      	bhi.n	8007c4c <FMC_SDRAM_Init+0xcc>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d85a      	bhi.n	8007c58 <FMC_SDRAM_Init+0xd8>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bf18      	it	ne
 8007ba8:	2b04      	cmpne	r3, #4
 8007baa:	d001      	beq.n	8007bb0 <FMC_SDRAM_Init+0x30>
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d159      	bne.n	8007c64 <FMC_SDRAM_Init+0xe4>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 8007bb0:	68e3      	ldr	r3, [r4, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bf18      	it	ne
 8007bb6:	2b10      	cmpne	r3, #16
 8007bb8:	d001      	beq.n	8007bbe <FMC_SDRAM_Init+0x3e>
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d158      	bne.n	8007c70 <FMC_SDRAM_Init+0xf0>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf18      	it	ne
 8007bc4:	2b40      	cmpne	r3, #64	; 0x40
 8007bc6:	d159      	bne.n	8007c7c <FMC_SDRAM_Init+0xfc>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 8007bc8:	6963      	ldr	r3, [r4, #20]
 8007bca:	2b80      	cmp	r3, #128	; 0x80
 8007bcc:	bf18      	it	ne
 8007bce:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 8007bd2:	d002      	beq.n	8007bda <FMC_SDRAM_Init+0x5a>
 8007bd4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007bd8:	d156      	bne.n	8007c88 <FMC_SDRAM_Init+0x108>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 8007bda:	69a3      	ldr	r3, [r4, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bf18      	it	ne
 8007be0:	f5b3 7f00 	cmpne.w	r3, #512	; 0x200
 8007be4:	d156      	bne.n	8007c94 <FMC_SDRAM_Init+0x114>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 8007be6:	69e3      	ldr	r3, [r4, #28]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	bf18      	it	ne
 8007bec:	f5b3 6f00 	cmpne.w	r3, #2048	; 0x800
 8007bf0:	d002      	beq.n	8007bf8 <FMC_SDRAM_Init+0x78>
 8007bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bf6:	d153      	bne.n	8007ca0 <FMC_SDRAM_Init+0x120>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8007bf8:	6a23      	ldr	r3, [r4, #32]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bf18      	it	ne
 8007bfe:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 8007c02:	d153      	bne.n	8007cac <FMC_SDRAM_Init+0x12c>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 8007c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bf18      	it	ne
 8007c0a:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 8007c0e:	d002      	beq.n	8007c16 <FMC_SDRAM_Init+0x96>
 8007c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c14:	d150      	bne.n	8007cb8 <FMC_SDRAM_Init+0x138>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d053      	beq.n	8007cc4 <FMC_SDRAM_Init+0x144>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007c1c:	682b      	ldr	r3, [r5, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007c1e:	4a39      	ldr	r2, [pc, #228]	; (8007d04 <FMC_SDRAM_Init+0x184>)
 8007c20:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c22:	6863      	ldr	r3, [r4, #4]
                        Init->RowBitsNumber      |\
 8007c24:	68a1      	ldr	r1, [r4, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c26:	430b      	orrs	r3, r1
                        Init->MemoryDataWidth    |\
 8007c28:	68e1      	ldr	r1, [r4, #12]
                        Init->RowBitsNumber      |\
 8007c2a:	430b      	orrs	r3, r1
                        Init->InternalBankNumber |\
 8007c2c:	6921      	ldr	r1, [r4, #16]
                        Init->MemoryDataWidth    |\
 8007c2e:	430b      	orrs	r3, r1
                        Init->CASLatency         |\
 8007c30:	6961      	ldr	r1, [r4, #20]
                        Init->InternalBankNumber |\
 8007c32:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
 8007c34:	69a1      	ldr	r1, [r4, #24]
                        Init->CASLatency         |\
 8007c36:	430b      	orrs	r3, r1
                        Init->SDClockPeriod      |\
 8007c38:	69e1      	ldr	r1, [r4, #28]
                        Init->WriteProtection    |\
 8007c3a:	430b      	orrs	r3, r1
                        Init->ReadBurst          |\
 8007c3c:	6a21      	ldr	r1, [r4, #32]
                        Init->SDClockPeriod      |\
 8007c3e:	430b      	orrs	r3, r1
                        Init->ReadPipeDelay
 8007c40:	6a61      	ldr	r1, [r4, #36]	; 0x24
                        Init->ReadBurst          |\
 8007c42:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c44:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007c46:	602b      	str	r3, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8007c48:	2000      	movs	r0, #0
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 8007c4c:	f240 21ed 	movw	r1, #749	; 0x2ed
 8007c50:	482b      	ldr	r0, [pc, #172]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007c52:	f00d f969 	bl	8014f28 <assert_failed>
 8007c56:	e7a1      	b.n	8007b9c <FMC_SDRAM_Init+0x1c>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 8007c58:	f240 21ee 	movw	r1, #750	; 0x2ee
 8007c5c:	4828      	ldr	r0, [pc, #160]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007c5e:	f00d f963 	bl	8014f28 <assert_failed>
 8007c62:	e79e      	b.n	8007ba2 <FMC_SDRAM_Init+0x22>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 8007c64:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c68:	4825      	ldr	r0, [pc, #148]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007c6a:	f00d f95d 	bl	8014f28 <assert_failed>
 8007c6e:	e79f      	b.n	8007bb0 <FMC_SDRAM_Init+0x30>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 8007c70:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8007c74:	4822      	ldr	r0, [pc, #136]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007c76:	f00d f957 	bl	8014f28 <assert_failed>
 8007c7a:	e7a0      	b.n	8007bbe <FMC_SDRAM_Init+0x3e>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 8007c7c:	f240 21f1 	movw	r1, #753	; 0x2f1
 8007c80:	481f      	ldr	r0, [pc, #124]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007c82:	f00d f951 	bl	8014f28 <assert_failed>
 8007c86:	e79f      	b.n	8007bc8 <FMC_SDRAM_Init+0x48>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 8007c88:	f240 21f2 	movw	r1, #754	; 0x2f2
 8007c8c:	481c      	ldr	r0, [pc, #112]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007c8e:	f00d f94b 	bl	8014f28 <assert_failed>
 8007c92:	e7a2      	b.n	8007bda <FMC_SDRAM_Init+0x5a>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 8007c94:	f240 21f3 	movw	r1, #755	; 0x2f3
 8007c98:	4819      	ldr	r0, [pc, #100]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007c9a:	f00d f945 	bl	8014f28 <assert_failed>
 8007c9e:	e7a2      	b.n	8007be6 <FMC_SDRAM_Init+0x66>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 8007ca0:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8007ca4:	4816      	ldr	r0, [pc, #88]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007ca6:	f00d f93f 	bl	8014f28 <assert_failed>
 8007caa:	e7a5      	b.n	8007bf8 <FMC_SDRAM_Init+0x78>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8007cac:	f240 21f5 	movw	r1, #757	; 0x2f5
 8007cb0:	4813      	ldr	r0, [pc, #76]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007cb2:	f00d f939 	bl	8014f28 <assert_failed>
 8007cb6:	e7a5      	b.n	8007c04 <FMC_SDRAM_Init+0x84>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 8007cb8:	f240 21f6 	movw	r1, #758	; 0x2f6
 8007cbc:	4810      	ldr	r0, [pc, #64]	; (8007d00 <FMC_SDRAM_Init+0x180>)
 8007cbe:	f00d f933 	bl	8014f28 <assert_failed>
 8007cc2:	e7a8      	b.n	8007c16 <FMC_SDRAM_Init+0x96>
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007cc4:	6829      	ldr	r1, [r5, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007cc6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cca:	69e3      	ldr	r3, [r4, #28]
                        Init->ReadBurst          |\
 8007ccc:	6a22      	ldr	r2, [r4, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cce:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        Init->ReadBurst          |\
 8007cd2:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cd4:	430a      	orrs	r2, r1
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007cd6:	686b      	ldr	r3, [r5, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007cd8:	490a      	ldr	r1, [pc, #40]	; (8007d04 <FMC_SDRAM_Init+0x184>)
 8007cda:	4019      	ands	r1, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007cdc:	6863      	ldr	r3, [r4, #4]
                       Init->RowBitsNumber       |\
 8007cde:	68a0      	ldr	r0, [r4, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ce0:	4303      	orrs	r3, r0
                       Init->MemoryDataWidth     |\
 8007ce2:	68e0      	ldr	r0, [r4, #12]
                       Init->RowBitsNumber       |\
 8007ce4:	4303      	orrs	r3, r0
                       Init->InternalBankNumber  |\
 8007ce6:	6920      	ldr	r0, [r4, #16]
                       Init->MemoryDataWidth     |\
 8007ce8:	4303      	orrs	r3, r0
                       Init->CASLatency          |\
 8007cea:	6960      	ldr	r0, [r4, #20]
                       Init->InternalBankNumber  |\
 8007cec:	4303      	orrs	r3, r0
                       Init->WriteProtection);
 8007cee:	69a0      	ldr	r0, [r4, #24]
                       Init->CASLatency          |\
 8007cf0:	4303      	orrs	r3, r0
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007cf2:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007cf4:	602a      	str	r2, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007cf6:	606b      	str	r3, [r5, #4]
 8007cf8:	e7a6      	b.n	8007c48 <FMC_SDRAM_Init+0xc8>
 8007cfa:	bf00      	nop
 8007cfc:	a0000140 	.word	0xa0000140
 8007d00:	0801aaa4 	.word	0x0801aaa4
 8007d04:	ffff8000 	.word	0xffff8000

08007d08 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	4616      	mov	r6, r2
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007d10:	4b4e      	ldr	r3, [pc, #312]	; (8007e4c <FMC_SDRAM_Timing_Init+0x144>)
 8007d12:	4298      	cmp	r0, r3
 8007d14:	d004      	beq.n	8007d20 <FMC_SDRAM_Timing_Init+0x18>
 8007d16:	f240 313d 	movw	r1, #829	; 0x33d
 8007d1a:	484d      	ldr	r0, [pc, #308]	; (8007e50 <FMC_SDRAM_Timing_Init+0x148>)
 8007d1c:	f00d f904 	bl	8014f28 <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	2b0f      	cmp	r3, #15
 8007d26:	d83c      	bhi.n	8007da2 <FMC_SDRAM_Timing_Init+0x9a>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 8007d28:	6863      	ldr	r3, [r4, #4]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	2b0f      	cmp	r3, #15
 8007d2e:	d83e      	bhi.n	8007dae <FMC_SDRAM_Timing_Init+0xa6>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 8007d30:	68a3      	ldr	r3, [r4, #8]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b0f      	cmp	r3, #15
 8007d36:	d840      	bhi.n	8007dba <FMC_SDRAM_Timing_Init+0xb2>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 8007d38:	68e3      	ldr	r3, [r4, #12]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	2b0f      	cmp	r3, #15
 8007d3e:	d842      	bhi.n	8007dc6 <FMC_SDRAM_Timing_Init+0xbe>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	2b0f      	cmp	r3, #15
 8007d46:	d844      	bhi.n	8007dd2 <FMC_SDRAM_Timing_Init+0xca>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 8007d48:	6963      	ldr	r3, [r4, #20]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	2b0f      	cmp	r3, #15
 8007d4e:	d846      	bhi.n	8007dde <FMC_SDRAM_Timing_Init+0xd6>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 8007d50:	69a3      	ldr	r3, [r4, #24]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	2b0f      	cmp	r3, #15
 8007d56:	d848      	bhi.n	8007dea <FMC_SDRAM_Timing_Init+0xe2>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 8007d58:	2e01      	cmp	r6, #1
 8007d5a:	d84c      	bhi.n	8007df6 <FMC_SDRAM_Timing_Init+0xee>
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007d5c:	2e01      	cmp	r6, #1
 8007d5e:	d050      	beq.n	8007e02 <FMC_SDRAM_Timing_Init+0xfa>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007d60:	68aa      	ldr	r2, [r5, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007d62:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007d6a:	6861      	ldr	r1, [r4, #4]
 8007d6c:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d6e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007d72:	68a1      	ldr	r1, [r4, #8]
 8007d74:	3901      	subs	r1, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007d76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007d7a:	68e1      	ldr	r1, [r4, #12]
 8007d7c:	3901      	subs	r1, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007d7e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007d82:	6921      	ldr	r1, [r4, #16]
 8007d84:	3901      	subs	r1, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8007d8a:	6961      	ldr	r1, [r4, #20]
 8007d8c:	3901      	subs	r1, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007d8e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8007d92:	69a1      	ldr	r1, [r4, #24]
 8007d94:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d96:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007d9a:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007d9c:	60ab      	str	r3, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8007d9e:	2000      	movs	r0, #0
 8007da0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 8007da2:	f240 313e 	movw	r1, #830	; 0x33e
 8007da6:	482a      	ldr	r0, [pc, #168]	; (8007e50 <FMC_SDRAM_Timing_Init+0x148>)
 8007da8:	f00d f8be 	bl	8014f28 <assert_failed>
 8007dac:	e7bc      	b.n	8007d28 <FMC_SDRAM_Timing_Init+0x20>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 8007dae:	f240 313f 	movw	r1, #831	; 0x33f
 8007db2:	4827      	ldr	r0, [pc, #156]	; (8007e50 <FMC_SDRAM_Timing_Init+0x148>)
 8007db4:	f00d f8b8 	bl	8014f28 <assert_failed>
 8007db8:	e7ba      	b.n	8007d30 <FMC_SDRAM_Timing_Init+0x28>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 8007dba:	f44f 7150 	mov.w	r1, #832	; 0x340
 8007dbe:	4824      	ldr	r0, [pc, #144]	; (8007e50 <FMC_SDRAM_Timing_Init+0x148>)
 8007dc0:	f00d f8b2 	bl	8014f28 <assert_failed>
 8007dc4:	e7b8      	b.n	8007d38 <FMC_SDRAM_Timing_Init+0x30>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 8007dc6:	f240 3141 	movw	r1, #833	; 0x341
 8007dca:	4821      	ldr	r0, [pc, #132]	; (8007e50 <FMC_SDRAM_Timing_Init+0x148>)
 8007dcc:	f00d f8ac 	bl	8014f28 <assert_failed>
 8007dd0:	e7b6      	b.n	8007d40 <FMC_SDRAM_Timing_Init+0x38>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 8007dd2:	f240 3142 	movw	r1, #834	; 0x342
 8007dd6:	481e      	ldr	r0, [pc, #120]	; (8007e50 <FMC_SDRAM_Timing_Init+0x148>)
 8007dd8:	f00d f8a6 	bl	8014f28 <assert_failed>
 8007ddc:	e7b4      	b.n	8007d48 <FMC_SDRAM_Timing_Init+0x40>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 8007dde:	f240 3143 	movw	r1, #835	; 0x343
 8007de2:	481b      	ldr	r0, [pc, #108]	; (8007e50 <FMC_SDRAM_Timing_Init+0x148>)
 8007de4:	f00d f8a0 	bl	8014f28 <assert_failed>
 8007de8:	e7b2      	b.n	8007d50 <FMC_SDRAM_Timing_Init+0x48>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 8007dea:	f44f 7151 	mov.w	r1, #836	; 0x344
 8007dee:	4818      	ldr	r0, [pc, #96]	; (8007e50 <FMC_SDRAM_Timing_Init+0x148>)
 8007df0:	f00d f89a 	bl	8014f28 <assert_failed>
 8007df4:	e7b0      	b.n	8007d58 <FMC_SDRAM_Timing_Init+0x50>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 8007df6:	f240 3145 	movw	r1, #837	; 0x345
 8007dfa:	4815      	ldr	r0, [pc, #84]	; (8007e50 <FMC_SDRAM_Timing_Init+0x148>)
 8007dfc:	f00d f894 	bl	8014f28 <assert_failed>
 8007e00:	e7ac      	b.n	8007d5c <FMC_SDRAM_Timing_Init+0x54>
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007e02:	68ab      	ldr	r3, [r5, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007e04:	4913      	ldr	r1, [pc, #76]	; (8007e54 <FMC_SDRAM_Timing_Init+0x14c>)
 8007e06:	4019      	ands	r1, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007e08:	68e2      	ldr	r2, [r4, #12]
 8007e0a:	1e50      	subs	r0, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8007e0c:	6963      	ldr	r3, [r4, #20]
 8007e0e:	1e5a      	subs	r2, r3, #1
 8007e10:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007e12:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8007e16:	430a      	orrs	r2, r1
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007e18:	68e9      	ldr	r1, [r5, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007e1a:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007e22:	6860      	ldr	r0, [r4, #4]
 8007e24:	3801      	subs	r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e26:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007e2a:	68a0      	ldr	r0, [r4, #8]
 8007e2c:	3801      	subs	r0, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007e2e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007e32:	6920      	ldr	r0, [r4, #16]
 8007e34:	3801      	subs	r0, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007e36:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8007e3a:	69a0      	ldr	r0, [r4, #24]
 8007e3c:	3801      	subs	r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e3e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007e42:	430b      	orrs	r3, r1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007e44:	60aa      	str	r2, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007e46:	60eb      	str	r3, [r5, #12]
 8007e48:	e7a9      	b.n	8007d9e <FMC_SDRAM_Timing_Init+0x96>
 8007e4a:	bf00      	nop
 8007e4c:	a0000140 	.word	0xa0000140
 8007e50:	0801aaa4 	.word	0x0801aaa4
 8007e54:	ff0f0fff 	.word	0xff0f0fff

08007e58 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007e58:	b530      	push	{r4, r5, lr}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	460c      	mov	r4, r1
  __IO uint32_t tmpr = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007e64:	4b20      	ldr	r3, [pc, #128]	; (8007ee8 <FMC_SDRAM_SendCommand+0x90>)
 8007e66:	4298      	cmp	r0, r3
 8007e68:	d004      	beq.n	8007e74 <FMC_SDRAM_SendCommand+0x1c>
 8007e6a:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 8007e6e:	481f      	ldr	r0, [pc, #124]	; (8007eec <FMC_SDRAM_SendCommand+0x94>)
 8007e70:	f00d f85a 	bl	8014f28 <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	2b06      	cmp	r3, #6
 8007e78:	d81e      	bhi.n	8007eb8 <FMC_SDRAM_SendCommand+0x60>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 8007e7a:	6863      	ldr	r3, [r4, #4]
 8007e7c:	2b10      	cmp	r3, #16
 8007e7e:	bf18      	it	ne
 8007e80:	2b08      	cmpne	r3, #8
 8007e82:	d001      	beq.n	8007e88 <FMC_SDRAM_SendCommand+0x30>
 8007e84:	2b18      	cmp	r3, #24
 8007e86:	d11d      	bne.n	8007ec4 <FMC_SDRAM_SendCommand+0x6c>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 8007e88:	68a3      	ldr	r3, [r4, #8]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	2b0f      	cmp	r3, #15
 8007e8e:	d81f      	bhi.n	8007ed0 <FMC_SDRAM_SendCommand+0x78>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 8007e90:	68e3      	ldr	r3, [r4, #12]
 8007e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e96:	d221      	bcs.n	8007edc <FMC_SDRAM_SendCommand+0x84>

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007e98:	6823      	ldr	r3, [r4, #0]
                    (Command->CommandTarget)                |\
 8007e9a:	6862      	ldr	r2, [r4, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007e9c:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007e9e:	68a2      	ldr	r2, [r4, #8]
 8007ea0:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8007ea2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 8007ea6:	68e2      	ldr	r2, [r4, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007ea8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8007eac:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8007eae:	9b01      	ldr	r3, [sp, #4]
 8007eb0:	612b      	str	r3, [r5, #16]
  
  return HAL_OK;  
}
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	b003      	add	sp, #12
 8007eb6:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 8007eb8:	f240 31d1 	movw	r1, #977	; 0x3d1
 8007ebc:	480b      	ldr	r0, [pc, #44]	; (8007eec <FMC_SDRAM_SendCommand+0x94>)
 8007ebe:	f00d f833 	bl	8014f28 <assert_failed>
 8007ec2:	e7da      	b.n	8007e7a <FMC_SDRAM_SendCommand+0x22>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 8007ec4:	f240 31d2 	movw	r1, #978	; 0x3d2
 8007ec8:	4808      	ldr	r0, [pc, #32]	; (8007eec <FMC_SDRAM_SendCommand+0x94>)
 8007eca:	f00d f82d 	bl	8014f28 <assert_failed>
 8007ece:	e7db      	b.n	8007e88 <FMC_SDRAM_SendCommand+0x30>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 8007ed0:	f240 31d3 	movw	r1, #979	; 0x3d3
 8007ed4:	4805      	ldr	r0, [pc, #20]	; (8007eec <FMC_SDRAM_SendCommand+0x94>)
 8007ed6:	f00d f827 	bl	8014f28 <assert_failed>
 8007eda:	e7d9      	b.n	8007e90 <FMC_SDRAM_SendCommand+0x38>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 8007edc:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 8007ee0:	4802      	ldr	r0, [pc, #8]	; (8007eec <FMC_SDRAM_SendCommand+0x94>)
 8007ee2:	f00d f821 	bl	8014f28 <assert_failed>
 8007ee6:	e7d7      	b.n	8007e98 <FMC_SDRAM_SendCommand+0x40>
 8007ee8:	a0000140 	.word	0xa0000140
 8007eec:	0801aaa4 	.word	0x0801aaa4

08007ef0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <FMC_SDRAM_ProgramRefreshRate+0x34>)
 8007ef8:	4298      	cmp	r0, r3
 8007efa:	d004      	beq.n	8007f06 <FMC_SDRAM_ProgramRefreshRate+0x16>
 8007efc:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8007f00:	4809      	ldr	r0, [pc, #36]	; (8007f28 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 8007f02:	f00d f811 	bl	8014f28 <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 8007f06:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8007f0a:	d205      	bcs.n	8007f18 <FMC_SDRAM_ProgramRefreshRate+0x28>
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007f0c:	6961      	ldr	r1, [r4, #20]
 8007f0e:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
 8007f12:	6165      	str	r5, [r4, #20]
  
  return HAL_OK;   
}
 8007f14:	2000      	movs	r0, #0
 8007f16:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 8007f18:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8007f1c:	4802      	ldr	r0, [pc, #8]	; (8007f28 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 8007f1e:	f00d f803 	bl	8014f28 <assert_failed>
 8007f22:	e7f3      	b.n	8007f0c <FMC_SDRAM_ProgramRefreshRate+0x1c>
 8007f24:	a0000140 	.word	0xa0000140
 8007f28:	0801aaa4 	.word	0x0801aaa4

08007f2c <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <SDMMC_GetCmdError+0x34>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0c      	ldr	r2, [pc, #48]	; (8007f64 <SDMMC_GetCmdError+0x38>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	0a5b      	lsrs	r3, r3, #9
 8007f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3c:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0)
 8007f40:	461a      	mov	r2, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b142      	cbz	r2, 8007f58 <SDMMC_GetCmdError+0x2c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007f46:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007f48:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007f4c:	d0f8      	beq.n	8007f40 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007f4e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007f52:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007f54:	2000      	movs	r0, #0
 8007f56:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007f58:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	200000a8 	.word	0x200000a8
 8007f64:	10624dd3 	.word	0x10624dd3

08007f68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007f68:	4601      	mov	r1, r0
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <SDMMC_GetCmdResp2+0x50>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a13      	ldr	r2, [pc, #76]	; (8007fbc <SDMMC_GetCmdResp2+0x54>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	0a5b      	lsrs	r3, r3, #9
 8007f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f7a:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0)
 8007f7e:	461a      	mov	r2, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b1aa      	cbz	r2, 8007fb0 <SDMMC_GetCmdResp2+0x48>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007f84:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007f86:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007f8a:	d0f8      	beq.n	8007f7e <SDMMC_GetCmdResp2+0x16>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f8c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007f8e:	f013 0f04 	tst.w	r3, #4
 8007f92:	d107      	bne.n	8007fa4 <SDMMC_GetCmdResp2+0x3c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f94:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007f96:	f010 0001 	ands.w	r0, r0, #1
 8007f9a:	d106      	bne.n	8007faa <SDMMC_GetCmdResp2+0x42>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007f9c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007fa0:	638b      	str	r3, [r1, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007fa2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007fa4:	2004      	movs	r0, #4
 8007fa6:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fa8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007faa:	2001      	movs	r0, #1
 8007fac:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fae:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007fb0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	200000a8 	.word	0x200000a8
 8007fbc:	10624dd3 	.word	0x10624dd3

08007fc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007fc0:	4601      	mov	r1, r0
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007fc2:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <SDMMC_GetCmdResp3+0x40>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a0f      	ldr	r2, [pc, #60]	; (8008004 <SDMMC_GetCmdResp3+0x44>)
 8007fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fcc:	0a5b      	lsrs	r3, r3, #9
 8007fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd2:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0)
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	b172      	cbz	r2, 8007ffa <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007fdc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007fde:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007fe2:	d0f8      	beq.n	8007fd6 <SDMMC_GetCmdResp3+0x16>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fe4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007fe6:	f010 0004 	ands.w	r0, r0, #4
 8007fea:	d103      	bne.n	8007ff4 <SDMMC_GetCmdResp3+0x34>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007fec:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007ff0:	638b      	str	r3, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ff2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ff4:	2004      	movs	r0, #4
 8007ff6:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ff8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007ffa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007ffe:	4770      	bx	lr
 8008000:	200000a8 	.word	0x200000a8
 8008004:	10624dd3 	.word	0x10624dd3

08008008 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008008:	4601      	mov	r1, r0
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <SDMMC_GetCmdResp7+0x4c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a12      	ldr	r2, [pc, #72]	; (8008058 <SDMMC_GetCmdResp7+0x50>)
 8008010:	fba2 2303 	umull	r2, r3, r2, r3
 8008014:	0a5b      	lsrs	r3, r3, #9
 8008016:	f241 3288 	movw	r2, #5000	; 0x1388
 800801a:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0)
 800801e:	461a      	mov	r2, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b19a      	cbz	r2, 800804c <SDMMC_GetCmdResp7+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008024:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008026:	f012 0f45 	tst.w	r2, #69	; 0x45
 800802a:	d0f8      	beq.n	800801e <SDMMC_GetCmdResp7+0x16>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800802c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800802e:	f013 0304 	ands.w	r3, r3, #4
 8008032:	d107      	bne.n	8008044 <SDMMC_GetCmdResp7+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008034:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8008036:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800803a:	d009      	beq.n	8008050 <SDMMC_GetCmdResp7+0x48>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800803c:	2240      	movs	r2, #64	; 0x40
 800803e:	638a      	str	r2, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008040:	4618      	mov	r0, r3
 8008042:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008048:	2004      	movs	r0, #4
 800804a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800804c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
}
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	200000a8 	.word	0x200000a8
 8008058:	10624dd3 	.word	0x10624dd3

0800805c <SDMMC_Init>:
{
 800805c:	b084      	sub	sp, #16
 800805e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008062:	4606      	mov	r6, r0
 8008064:	a809      	add	r0, sp, #36	; 0x24
 8008066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800806a:	4b30      	ldr	r3, [pc, #192]	; (800812c <SDMMC_Init+0xd0>)
 800806c:	429e      	cmp	r6, r3
 800806e:	d003      	beq.n	8008078 <SDMMC_Init+0x1c>
 8008070:	21d8      	movs	r1, #216	; 0xd8
 8008072:	482f      	ldr	r0, [pc, #188]	; (8008130 <SDMMC_Init+0xd4>)
 8008074:	f00c ff58 	bl	8014f28 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 8008078:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800807a:	2c00      	cmp	r4, #0
 800807c:	bf18      	it	ne
 800807e:	f5b4 5f00 	cmpne.w	r4, #8192	; 0x2000
 8008082:	d135      	bne.n	80080f0 <SDMMC_Init+0x94>
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 8008084:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008088:	f1ba 0f00 	cmp.w	sl, #0
 800808c:	bf18      	it	ne
 800808e:	f5ba 6f80 	cmpne.w	sl, #1024	; 0x400
 8008092:	d132      	bne.n	80080fa <SDMMC_Init+0x9e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8008094:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008098:	f1b9 0f00 	cmp.w	r9, #0
 800809c:	bf18      	it	ne
 800809e:	f5b9 7f00 	cmpne.w	r9, #512	; 0x200
 80080a2:	d12f      	bne.n	8008104 <SDMMC_Init+0xa8>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 80080a4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80080a6:	2f00      	cmp	r7, #0
 80080a8:	bf18      	it	ne
 80080aa:	f5b7 6f00 	cmpne.w	r7, #2048	; 0x800
 80080ae:	d002      	beq.n	80080b6 <SDMMC_Init+0x5a>
 80080b0:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80080b4:	d12b      	bne.n	800810e <SDMMC_Init+0xb2>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 80080b6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80080ba:	f1b8 0f00 	cmp.w	r8, #0
 80080be:	bf18      	it	ne
 80080c0:	f5b8 4f80 	cmpne.w	r8, #16384	; 0x4000
 80080c4:	d128      	bne.n	8008118 <SDMMC_Init+0xbc>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 80080c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80080c8:	2dff      	cmp	r5, #255	; 0xff
 80080ca:	d82a      	bhi.n	8008122 <SDMMC_Init+0xc6>
  tmpreg |= (Init.ClockEdge           |\
 80080cc:	ea44 040a 	orr.w	r4, r4, sl
             Init.ClockBypass         |\
 80080d0:	ea44 0409 	orr.w	r4, r4, r9
             Init.ClockPowerSave      |\
 80080d4:	433c      	orrs	r4, r7
             Init.BusWide             |\
 80080d6:	ea44 0408 	orr.w	r4, r4, r8
             Init.HardwareFlowControl |\
 80080da:	4325      	orrs	r5, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080dc:	6873      	ldr	r3, [r6, #4]
 80080de:	4c15      	ldr	r4, [pc, #84]	; (8008134 <SDMMC_Init+0xd8>)
 80080e0:	401c      	ands	r4, r3
 80080e2:	4325      	orrs	r5, r4
 80080e4:	6075      	str	r5, [r6, #4]
}
 80080e6:	2000      	movs	r0, #0
 80080e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	b004      	add	sp, #16
 80080ee:	4770      	bx	lr
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 80080f0:	21d9      	movs	r1, #217	; 0xd9
 80080f2:	480f      	ldr	r0, [pc, #60]	; (8008130 <SDMMC_Init+0xd4>)
 80080f4:	f00c ff18 	bl	8014f28 <assert_failed>
 80080f8:	e7c4      	b.n	8008084 <SDMMC_Init+0x28>
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 80080fa:	21da      	movs	r1, #218	; 0xda
 80080fc:	480c      	ldr	r0, [pc, #48]	; (8008130 <SDMMC_Init+0xd4>)
 80080fe:	f00c ff13 	bl	8014f28 <assert_failed>
 8008102:	e7c7      	b.n	8008094 <SDMMC_Init+0x38>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8008104:	21db      	movs	r1, #219	; 0xdb
 8008106:	480a      	ldr	r0, [pc, #40]	; (8008130 <SDMMC_Init+0xd4>)
 8008108:	f00c ff0e 	bl	8014f28 <assert_failed>
 800810c:	e7ca      	b.n	80080a4 <SDMMC_Init+0x48>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800810e:	21dc      	movs	r1, #220	; 0xdc
 8008110:	4807      	ldr	r0, [pc, #28]	; (8008130 <SDMMC_Init+0xd4>)
 8008112:	f00c ff09 	bl	8014f28 <assert_failed>
 8008116:	e7ce      	b.n	80080b6 <SDMMC_Init+0x5a>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8008118:	21dd      	movs	r1, #221	; 0xdd
 800811a:	4805      	ldr	r0, [pc, #20]	; (8008130 <SDMMC_Init+0xd4>)
 800811c:	f00c ff04 	bl	8014f28 <assert_failed>
 8008120:	e7d1      	b.n	80080c6 <SDMMC_Init+0x6a>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 8008122:	21de      	movs	r1, #222	; 0xde
 8008124:	4802      	ldr	r0, [pc, #8]	; (8008130 <SDMMC_Init+0xd4>)
 8008126:	f00c feff 	bl	8014f28 <assert_failed>
 800812a:	e7cf      	b.n	80080cc <SDMMC_Init+0x70>
 800812c:	40012c00 	.word	0x40012c00
 8008130:	0801aadc 	.word	0x0801aadc
 8008134:	ffff8100 	.word	0xffff8100

08008138 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8008138:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800813c:	4770      	bx	lr

0800813e <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800813e:	680b      	ldr	r3, [r1, #0]
 8008140:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8008144:	2000      	movs	r0, #0
 8008146:	4770      	bx	lr

08008148 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008148:	2303      	movs	r3, #3
 800814a:	6003      	str	r3, [r0, #0]
}
 800814c:	2000      	movs	r0, #0
 800814e:	4770      	bx	lr

08008150 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008150:	6800      	ldr	r0, [r0, #0]
}
 8008152:	f000 0003 	and.w	r0, r0, #3
 8008156:	4770      	bx	lr

08008158 <SDMMC_SendCommand>:
{
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4605      	mov	r5, r0
 800815c:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800815e:	684b      	ldr	r3, [r1, #4]
 8008160:	2b3f      	cmp	r3, #63	; 0x3f
 8008162:	d825      	bhi.n	80081b0 <SDMMC_SendCommand+0x58>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 8008164:	68a3      	ldr	r3, [r4, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	bf18      	it	ne
 800816a:	2b40      	cmpne	r3, #64	; 0x40
 800816c:	d001      	beq.n	8008172 <SDMMC_SendCommand+0x1a>
 800816e:	2bc0      	cmp	r3, #192	; 0xc0
 8008170:	d124      	bne.n	80081bc <SDMMC_SendCommand+0x64>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 8008172:	68e3      	ldr	r3, [r4, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	bf18      	it	ne
 8008178:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 800817c:	d002      	beq.n	8008184 <SDMMC_SendCommand+0x2c>
 800817e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008182:	d121      	bne.n	80081c8 <SDMMC_SendCommand+0x70>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	bf18      	it	ne
 800818a:	f5b3 6f80 	cmpne.w	r3, #1024	; 0x400
 800818e:	d121      	bne.n	80081d4 <SDMMC_SendCommand+0x7c>
  SDMMCx->ARG = Command->Argument;
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008194:	6863      	ldr	r3, [r4, #4]
                       Command->Response         |\
 8008196:	68a2      	ldr	r2, [r4, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008198:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800819a:	68e2      	ldr	r2, [r4, #12]
                       Command->Response         |\
 800819c:	4313      	orrs	r3, r2
                       Command->CPSM);
 800819e:	6922      	ldr	r2, [r4, #16]
                       Command->WaitForInterrupt |\
 80081a0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80081a2:	68e9      	ldr	r1, [r5, #12]
 80081a4:	4a0e      	ldr	r2, [pc, #56]	; (80081e0 <SDMMC_SendCommand+0x88>)
 80081a6:	400a      	ands	r2, r1
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60eb      	str	r3, [r5, #12]
}
 80081ac:	2000      	movs	r0, #0
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 80081b0:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80081b4:	480b      	ldr	r0, [pc, #44]	; (80081e4 <SDMMC_SendCommand+0x8c>)
 80081b6:	f00c feb7 	bl	8014f28 <assert_failed>
 80081ba:	e7d3      	b.n	8008164 <SDMMC_SendCommand+0xc>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 80081bc:	f240 1165 	movw	r1, #357	; 0x165
 80081c0:	4808      	ldr	r0, [pc, #32]	; (80081e4 <SDMMC_SendCommand+0x8c>)
 80081c2:	f00c feb1 	bl	8014f28 <assert_failed>
 80081c6:	e7d4      	b.n	8008172 <SDMMC_SendCommand+0x1a>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 80081c8:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80081cc:	4805      	ldr	r0, [pc, #20]	; (80081e4 <SDMMC_SendCommand+0x8c>)
 80081ce:	f00c feab 	bl	8014f28 <assert_failed>
 80081d2:	e7d7      	b.n	8008184 <SDMMC_SendCommand+0x2c>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 80081d4:	f240 1167 	movw	r1, #359	; 0x167
 80081d8:	4802      	ldr	r0, [pc, #8]	; (80081e4 <SDMMC_SendCommand+0x8c>)
 80081da:	f00c fea5 	bl	8014f28 <assert_failed>
 80081de:	e7d7      	b.n	8008190 <SDMMC_SendCommand+0x38>
 80081e0:	fffff000 	.word	0xfffff000
 80081e4:	0801aadc 	.word	0x0801aadc

080081e8 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 80081e8:	6900      	ldr	r0, [r0, #16]
}
 80081ea:	b2c0      	uxtb	r0, r0
 80081ec:	4770      	bx	lr
	...

080081f0 <SDMMC_GetResponse>:
{
 80081f0:	b530      	push	{r4, r5, lr}
 80081f2:	b083      	sub	sp, #12
 80081f4:	4604      	mov	r4, r0
  __IO uint32_t tmp = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	9301      	str	r3, [sp, #4]
  assert_param(IS_SDMMC_RESP(Response));
 80081fa:	460d      	mov	r5, r1
 80081fc:	4299      	cmp	r1, r3
 80081fe:	bf18      	it	ne
 8008200:	2904      	cmpne	r1, #4
 8008202:	d006      	beq.n	8008212 <SDMMC_GetResponse+0x22>
 8008204:	f1b1 030c 	subs.w	r3, r1, #12
 8008208:	bf18      	it	ne
 800820a:	2301      	movne	r3, #1
 800820c:	2908      	cmp	r1, #8
 800820e:	d000      	beq.n	8008212 <SDMMC_GetResponse+0x22>
 8008210:	b933      	cbnz	r3, 8008220 <SDMMC_GetResponse+0x30>
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8008212:	3414      	adds	r4, #20
 8008214:	442c      	add	r4, r5
 8008216:	9401      	str	r4, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	6818      	ldr	r0, [r3, #0]
}  
 800821c:	b003      	add	sp, #12
 800821e:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_SDMMC_RESP(Response));
 8008220:	f240 1193 	movw	r1, #403	; 0x193
 8008224:	4801      	ldr	r0, [pc, #4]	; (800822c <SDMMC_GetResponse+0x3c>)
 8008226:	f00c fe7f 	bl	8014f28 <assert_failed>
 800822a:	e7f2      	b.n	8008212 <SDMMC_GetResponse+0x22>
 800822c:	0801aadc 	.word	0x0801aadc

08008230 <SDMMC_GetCmdResp1>:
{
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4604      	mov	r4, r0
 8008234:	460d      	mov	r5, r1
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8008236:	4b4f      	ldr	r3, [pc, #316]	; (8008374 <SDMMC_GetCmdResp1+0x144>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	494f      	ldr	r1, [pc, #316]	; (8008378 <SDMMC_GetCmdResp1+0x148>)
 800823c:	fba1 1303 	umull	r1, r3, r1, r3
 8008240:	0a5b      	lsrs	r3, r3, #9
 8008242:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0)
 8008246:	4613      	mov	r3, r2
 8008248:	3a01      	subs	r2, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d05b      	beq.n	8008306 <SDMMC_GetCmdResp1+0xd6>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800824e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008250:	f013 0f45 	tst.w	r3, #69	; 0x45
 8008254:	d0f7      	beq.n	8008246 <SDMMC_GetCmdResp1+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008258:	f013 0f04 	tst.w	r3, #4
 800825c:	d106      	bne.n	800826c <SDMMC_GetCmdResp1+0x3c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800825e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008260:	f013 0f01 	tst.w	r3, #1
 8008264:	d005      	beq.n	8008272 <SDMMC_GetCmdResp1+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008266:	2001      	movs	r0, #1
 8008268:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800826a:	e04e      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800826c:	2004      	movs	r0, #4
 800826e:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008270:	e04b      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008272:	4620      	mov	r0, r4
 8008274:	f7ff ffb8 	bl	80081e8 <SDMMC_GetCommandResponse>
 8008278:	42a8      	cmp	r0, r5
 800827a:	d001      	beq.n	8008280 <SDMMC_GetCmdResp1+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800827c:	2001      	movs	r0, #1
 800827e:	e044      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8008280:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8008284:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008286:	2100      	movs	r1, #0
 8008288:	4620      	mov	r0, r4
 800828a:	f7ff ffb1 	bl	80081f0 <SDMMC_GetResponse>
 800828e:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008290:	483a      	ldr	r0, [pc, #232]	; (800837c <SDMMC_GetCmdResp1+0x14c>)
 8008292:	4018      	ands	r0, r3
 8008294:	b3c8      	cbz	r0, 800830a <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008296:	2b00      	cmp	r3, #0
 8008298:	db38      	blt.n	800830c <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800829a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800829e:	d138      	bne.n	8008312 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80082a0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80082a4:	d137      	bne.n	8008316 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80082a6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80082aa:	d136      	bne.n	800831a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80082ac:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80082b0:	d136      	bne.n	8008320 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80082b2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80082b6:	d136      	bne.n	8008326 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80082b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80082bc:	d136      	bne.n	800832c <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80082be:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80082c2:	d136      	bne.n	8008332 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80082c4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80082c8:	d136      	bne.n	8008338 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80082ca:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80082ce:	d136      	bne.n	800833e <SDMMC_GetCmdResp1+0x10e>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80082d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80082d4:	d136      	bne.n	8008344 <SDMMC_GetCmdResp1+0x114>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80082d6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80082da:	d136      	bne.n	800834a <SDMMC_GetCmdResp1+0x11a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80082dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80082e0:	d136      	bne.n	8008350 <SDMMC_GetCmdResp1+0x120>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80082e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80082e6:	d136      	bne.n	8008356 <SDMMC_GetCmdResp1+0x126>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80082e8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80082ec:	d136      	bne.n	800835c <SDMMC_GetCmdResp1+0x12c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80082ee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80082f2:	d136      	bne.n	8008362 <SDMMC_GetCmdResp1+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80082f4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80082f8:	d136      	bne.n	8008368 <SDMMC_GetCmdResp1+0x138>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80082fa:	f013 0f08 	tst.w	r3, #8
 80082fe:	d036      	beq.n	800836e <SDMMC_GetCmdResp1+0x13e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008300:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008304:	e001      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
      return SDMMC_ERROR_TIMEOUT;
 8008306:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800830a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800830c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8008310:	e7fb      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008312:	2040      	movs	r0, #64	; 0x40
 8008314:	e7f9      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008316:	2080      	movs	r0, #128	; 0x80
 8008318:	e7f7      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800831a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800831e:	e7f4      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008320:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008324:	e7f1      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008326:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800832a:	e7ee      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800832c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008330:	e7eb      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008332:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008336:	e7e8      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008338:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800833c:	e7e5      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800833e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008342:	e7e2      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CC_ERR;
 8008344:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008348:	e7df      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800834a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800834e:	e7dc      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008350:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8008354:	e7d9      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008356:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800835a:	e7d6      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800835c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008360:	e7d3      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008362:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008366:	e7d0      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_RESET;
 8008368:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800836c:	e7cd      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800836e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008372:	e7ca      	b.n	800830a <SDMMC_GetCmdResp1+0xda>
 8008374:	200000a8 	.word	0x200000a8
 8008378:	10624dd3 	.word	0x10624dd3
 800837c:	fdffe008 	.word	0xfdffe008

08008380 <SDMMC_GetCmdResp6>:
{
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	4605      	mov	r5, r0
 8008384:	460e      	mov	r6, r1
 8008386:	4617      	mov	r7, r2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8008388:	4b22      	ldr	r3, [pc, #136]	; (8008414 <SDMMC_GetCmdResp6+0x94>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a22      	ldr	r2, [pc, #136]	; (8008418 <SDMMC_GetCmdResp6+0x98>)
 800838e:	fba2 2303 	umull	r2, r3, r2, r3
 8008392:	0a5b      	lsrs	r3, r3, #9
 8008394:	f241 3288 	movw	r2, #5000	; 0x1388
 8008398:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0)
 800839c:	461c      	mov	r4, r3
 800839e:	3b01      	subs	r3, #1
 80083a0:	b37c      	cbz	r4, 8008402 <SDMMC_GetCmdResp6+0x82>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80083a2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80083a4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80083a8:	d0f8      	beq.n	800839c <SDMMC_GetCmdResp6+0x1c>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80083aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80083ac:	f013 0f04 	tst.w	r3, #4
 80083b0:	d106      	bne.n	80083c0 <SDMMC_GetCmdResp6+0x40>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80083b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80083b4:	f013 0f01 	tst.w	r3, #1
 80083b8:	d005      	beq.n	80083c6 <SDMMC_GetCmdResp6+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80083ba:	2001      	movs	r0, #1
 80083bc:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083be:	e022      	b.n	8008406 <SDMMC_GetCmdResp6+0x86>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80083c0:	2004      	movs	r0, #4
 80083c2:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083c4:	e01f      	b.n	8008406 <SDMMC_GetCmdResp6+0x86>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7ff ff0e 	bl	80081e8 <SDMMC_GetCommandResponse>
 80083cc:	42b0      	cmp	r0, r6
 80083ce:	d001      	beq.n	80083d4 <SDMMC_GetCmdResp6+0x54>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083d0:	2001      	movs	r0, #1
 80083d2:	e018      	b.n	8008406 <SDMMC_GetCmdResp6+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80083d4:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80083d8:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80083da:	2100      	movs	r1, #0
 80083dc:	4628      	mov	r0, r5
 80083de:	f7ff ff07 	bl	80081f0 <SDMMC_GetResponse>
 80083e2:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80083e4:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 80083e8:	d008      	beq.n	80083fc <SDMMC_GetCmdResp6+0x7c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80083ea:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80083ee:	d10b      	bne.n	8008408 <SDMMC_GetCmdResp6+0x88>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80083f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80083f4:	d00b      	beq.n	800840e <SDMMC_GetCmdResp6+0x8e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80083f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80083fa:	e004      	b.n	8008406 <SDMMC_GetCmdResp6+0x86>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80083fc:	0c1b      	lsrs	r3, r3, #16
 80083fe:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8008400:	e001      	b.n	8008406 <SDMMC_GetCmdResp6+0x86>
      return SDMMC_ERROR_TIMEOUT;
 8008402:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008408:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800840c:	e7fb      	b.n	8008406 <SDMMC_GetCmdResp6+0x86>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800840e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008412:	e7f8      	b.n	8008406 <SDMMC_GetCmdResp6+0x86>
 8008414:	200000a8 	.word	0x200000a8
 8008418:	10624dd3 	.word	0x10624dd3

0800841c <SDMMC_ConfigData>:
{
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4605      	mov	r5, r0
 8008420:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 8008422:	684b      	ldr	r3, [r1, #4]
 8008424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008428:	d23d      	bcs.n	80084a6 <SDMMC_ConfigData+0x8a>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800842a:	68a3      	ldr	r3, [r4, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	bf18      	it	ne
 8008430:	2b10      	cmpne	r3, #16
 8008432:	d019      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008434:	2b20      	cmp	r3, #32
 8008436:	d017      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008438:	2b30      	cmp	r3, #48	; 0x30
 800843a:	d015      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	d013      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008440:	2b50      	cmp	r3, #80	; 0x50
 8008442:	d011      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008444:	2b60      	cmp	r3, #96	; 0x60
 8008446:	d00f      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008448:	2b70      	cmp	r3, #112	; 0x70
 800844a:	d00d      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 800844c:	2b80      	cmp	r3, #128	; 0x80
 800844e:	d00b      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008450:	2b90      	cmp	r3, #144	; 0x90
 8008452:	d009      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008454:	2ba0      	cmp	r3, #160	; 0xa0
 8008456:	d007      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008458:	2bb0      	cmp	r3, #176	; 0xb0
 800845a:	d005      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 800845c:	2bc0      	cmp	r3, #192	; 0xc0
 800845e:	d003      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008460:	2bd0      	cmp	r3, #208	; 0xd0
 8008462:	d001      	beq.n	8008468 <SDMMC_ConfigData+0x4c>
 8008464:	2be0      	cmp	r3, #224	; 0xe0
 8008466:	d124      	bne.n	80084b2 <SDMMC_ConfigData+0x96>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 8008468:	68e3      	ldr	r3, [r4, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	bf18      	it	ne
 800846e:	2b02      	cmpne	r3, #2
 8008470:	d125      	bne.n	80084be <SDMMC_ConfigData+0xa2>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	bf18      	it	ne
 8008478:	2b04      	cmpne	r3, #4
 800847a:	d126      	bne.n	80084ca <SDMMC_ConfigData+0xae>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 800847c:	6963      	ldr	r3, [r4, #20]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d829      	bhi.n	80084d6 <SDMMC_ConfigData+0xba>
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	626b      	str	r3, [r5, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8008486:	6863      	ldr	r3, [r4, #4]
 8008488:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800848a:	68a3      	ldr	r3, [r4, #8]
                       Data->TransferDir   |\
 800848c:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800848e:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8008490:	6922      	ldr	r2, [r4, #16]
                       Data->TransferDir   |\
 8008492:	4313      	orrs	r3, r2
                       Data->DPSM);
 8008494:	6962      	ldr	r2, [r4, #20]
                       Data->TransferMode  |\
 8008496:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008498:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800849a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800849e:	4313      	orrs	r3, r2
 80084a0:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 80084a2:	2000      	movs	r0, #0
 80084a4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 80084a6:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80084aa:	480e      	ldr	r0, [pc, #56]	; (80084e4 <SDMMC_ConfigData+0xc8>)
 80084ac:	f00c fd3c 	bl	8014f28 <assert_failed>
 80084b0:	e7bb      	b.n	800842a <SDMMC_ConfigData+0xe>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 80084b2:	f240 11a9 	movw	r1, #425	; 0x1a9
 80084b6:	480b      	ldr	r0, [pc, #44]	; (80084e4 <SDMMC_ConfigData+0xc8>)
 80084b8:	f00c fd36 	bl	8014f28 <assert_failed>
 80084bc:	e7d4      	b.n	8008468 <SDMMC_ConfigData+0x4c>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 80084be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084c2:	4808      	ldr	r0, [pc, #32]	; (80084e4 <SDMMC_ConfigData+0xc8>)
 80084c4:	f00c fd30 	bl	8014f28 <assert_failed>
 80084c8:	e7d3      	b.n	8008472 <SDMMC_ConfigData+0x56>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 80084ca:	f240 11ab 	movw	r1, #427	; 0x1ab
 80084ce:	4805      	ldr	r0, [pc, #20]	; (80084e4 <SDMMC_ConfigData+0xc8>)
 80084d0:	f00c fd2a 	bl	8014f28 <assert_failed>
 80084d4:	e7d2      	b.n	800847c <SDMMC_ConfigData+0x60>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 80084d6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80084da:	4802      	ldr	r0, [pc, #8]	; (80084e4 <SDMMC_ConfigData+0xc8>)
 80084dc:	f00c fd24 	bl	8014f28 <assert_failed>
 80084e0:	e7cf      	b.n	8008482 <SDMMC_ConfigData+0x66>
 80084e2:	bf00      	nop
 80084e4:	0801aadc 	.word	0x0801aadc

080084e8 <SDMMC_CmdBlockLength>:
{
 80084e8:	b530      	push	{r4, r5, lr}
 80084ea:	b087      	sub	sp, #28
 80084ec:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80084ee:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80084f0:	2510      	movs	r5, #16
 80084f2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084f4:	2340      	movs	r3, #64	; 0x40
 80084f6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084f8:	2300      	movs	r3, #0
 80084fa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008500:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008502:	a901      	add	r1, sp, #4
 8008504:	f7ff fe28 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008508:	f241 3288 	movw	r2, #5000	; 0x1388
 800850c:	4629      	mov	r1, r5
 800850e:	4620      	mov	r0, r4
 8008510:	f7ff fe8e 	bl	8008230 <SDMMC_GetCmdResp1>
}
 8008514:	b007      	add	sp, #28
 8008516:	bd30      	pop	{r4, r5, pc}

08008518 <SDMMC_CmdReadSingleBlock>:
{
 8008518:	b530      	push	{r4, r5, lr}
 800851a:	b087      	sub	sp, #28
 800851c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800851e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008520:	2511      	movs	r5, #17
 8008522:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008524:	2340      	movs	r3, #64	; 0x40
 8008526:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008528:	2300      	movs	r3, #0
 800852a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800852c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008530:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008532:	a901      	add	r1, sp, #4
 8008534:	f7ff fe10 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008538:	f241 3288 	movw	r2, #5000	; 0x1388
 800853c:	4629      	mov	r1, r5
 800853e:	4620      	mov	r0, r4
 8008540:	f7ff fe76 	bl	8008230 <SDMMC_GetCmdResp1>
}
 8008544:	b007      	add	sp, #28
 8008546:	bd30      	pop	{r4, r5, pc}

08008548 <SDMMC_CmdReadMultiBlock>:
{
 8008548:	b530      	push	{r4, r5, lr}
 800854a:	b087      	sub	sp, #28
 800854c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800854e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008550:	2512      	movs	r5, #18
 8008552:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008554:	2340      	movs	r3, #64	; 0x40
 8008556:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008558:	2300      	movs	r3, #0
 800855a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800855c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008560:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008562:	a901      	add	r1, sp, #4
 8008564:	f7ff fdf8 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008568:	f241 3288 	movw	r2, #5000	; 0x1388
 800856c:	4629      	mov	r1, r5
 800856e:	4620      	mov	r0, r4
 8008570:	f7ff fe5e 	bl	8008230 <SDMMC_GetCmdResp1>
}
 8008574:	b007      	add	sp, #28
 8008576:	bd30      	pop	{r4, r5, pc}

08008578 <SDMMC_CmdWriteSingleBlock>:
{
 8008578:	b530      	push	{r4, r5, lr}
 800857a:	b087      	sub	sp, #28
 800857c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800857e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008580:	2518      	movs	r5, #24
 8008582:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008588:	2300      	movs	r3, #0
 800858a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800858c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008590:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008592:	a901      	add	r1, sp, #4
 8008594:	f7ff fde0 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008598:	f241 3288 	movw	r2, #5000	; 0x1388
 800859c:	4629      	mov	r1, r5
 800859e:	4620      	mov	r0, r4
 80085a0:	f7ff fe46 	bl	8008230 <SDMMC_GetCmdResp1>
}
 80085a4:	b007      	add	sp, #28
 80085a6:	bd30      	pop	{r4, r5, pc}

080085a8 <SDMMC_CmdWriteMultiBlock>:
{
 80085a8:	b530      	push	{r4, r5, lr}
 80085aa:	b087      	sub	sp, #28
 80085ac:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80085ae:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80085b0:	2519      	movs	r5, #25
 80085b2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085b4:	2340      	movs	r3, #64	; 0x40
 80085b6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085b8:	2300      	movs	r3, #0
 80085ba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085c2:	a901      	add	r1, sp, #4
 80085c4:	f7ff fdc8 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80085c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085cc:	4629      	mov	r1, r5
 80085ce:	4620      	mov	r0, r4
 80085d0:	f7ff fe2e 	bl	8008230 <SDMMC_GetCmdResp1>
}
 80085d4:	b007      	add	sp, #28
 80085d6:	bd30      	pop	{r4, r5, pc}

080085d8 <SDMMC_CmdStopTransfer>:
{
 80085d8:	b530      	push	{r4, r5, lr}
 80085da:	b087      	sub	sp, #28
 80085dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80085e2:	250c      	movs	r5, #12
 80085e4:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085e6:	2240      	movs	r2, #64	; 0x40
 80085e8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085f2:	a901      	add	r1, sp, #4
 80085f4:	f7ff fdb0 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80085f8:	4a03      	ldr	r2, [pc, #12]	; (8008608 <SDMMC_CmdStopTransfer+0x30>)
 80085fa:	4629      	mov	r1, r5
 80085fc:	4620      	mov	r0, r4
 80085fe:	f7ff fe17 	bl	8008230 <SDMMC_GetCmdResp1>
}
 8008602:	b007      	add	sp, #28
 8008604:	bd30      	pop	{r4, r5, pc}
 8008606:	bf00      	nop
 8008608:	05f5e100 	.word	0x05f5e100

0800860c <SDMMC_CmdSelDesel>:
{
 800860c:	b530      	push	{r4, r5, lr}
 800860e:	b087      	sub	sp, #28
 8008610:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008612:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008614:	2507      	movs	r5, #7
 8008616:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008618:	2340      	movs	r3, #64	; 0x40
 800861a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800861c:	2300      	movs	r3, #0
 800861e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008624:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008626:	a901      	add	r1, sp, #4
 8008628:	f7ff fd96 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800862c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008630:	4629      	mov	r1, r5
 8008632:	4620      	mov	r0, r4
 8008634:	f7ff fdfc 	bl	8008230 <SDMMC_GetCmdResp1>
}
 8008638:	b007      	add	sp, #28
 800863a:	bd30      	pop	{r4, r5, pc}

0800863c <SDMMC_CmdGoIdleState>:
{
 800863c:	b510      	push	{r4, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008646:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008648:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800864a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800864c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008650:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008652:	a901      	add	r1, sp, #4
 8008654:	f7ff fd80 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008658:	4620      	mov	r0, r4
 800865a:	f7ff fc67 	bl	8007f2c <SDMMC_GetCmdError>
}
 800865e:	b006      	add	sp, #24
 8008660:	bd10      	pop	{r4, pc}

08008662 <SDMMC_CmdOperCond>:
{
 8008662:	b510      	push	{r4, lr}
 8008664:	b086      	sub	sp, #24
 8008666:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008668:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800866c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800866e:	2308      	movs	r3, #8
 8008670:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008672:	2340      	movs	r3, #64	; 0x40
 8008674:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008676:	2300      	movs	r3, #0
 8008678:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800867a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800867e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008680:	a901      	add	r1, sp, #4
 8008682:	f7ff fd69 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008686:	4620      	mov	r0, r4
 8008688:	f7ff fcbe 	bl	8008008 <SDMMC_GetCmdResp7>
}
 800868c:	b006      	add	sp, #24
 800868e:	bd10      	pop	{r4, pc}

08008690 <SDMMC_CmdAppCommand>:
{
 8008690:	b530      	push	{r4, r5, lr}
 8008692:	b087      	sub	sp, #28
 8008694:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008696:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008698:	2537      	movs	r5, #55	; 0x37
 800869a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800869c:	2340      	movs	r3, #64	; 0x40
 800869e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086a0:	2300      	movs	r3, #0
 80086a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086a8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086aa:	a901      	add	r1, sp, #4
 80086ac:	f7ff fd54 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80086b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b4:	4629      	mov	r1, r5
 80086b6:	4620      	mov	r0, r4
 80086b8:	f7ff fdba 	bl	8008230 <SDMMC_GetCmdResp1>
}
 80086bc:	b007      	add	sp, #28
 80086be:	bd30      	pop	{r4, r5, pc}

080086c0 <SDMMC_CmdAppOperCommand>:
{
 80086c0:	b510      	push	{r4, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80086c6:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <SDMMC_CmdAppOperCommand+0x30>)
 80086c8:	430b      	orrs	r3, r1
 80086ca:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80086cc:	2329      	movs	r3, #41	; 0x29
 80086ce:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086d0:	2340      	movs	r3, #64	; 0x40
 80086d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086d4:	2300      	movs	r3, #0
 80086d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086dc:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086de:	a901      	add	r1, sp, #4
 80086e0:	f7ff fd3a 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7ff fc6b 	bl	8007fc0 <SDMMC_GetCmdResp3>
}
 80086ea:	b006      	add	sp, #24
 80086ec:	bd10      	pop	{r4, pc}
 80086ee:	bf00      	nop
 80086f0:	80100000 	.word	0x80100000

080086f4 <SDMMC_CmdBusWidth>:
{
 80086f4:	b530      	push	{r4, r5, lr}
 80086f6:	b087      	sub	sp, #28
 80086f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80086fa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80086fc:	2506      	movs	r5, #6
 80086fe:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008700:	2340      	movs	r3, #64	; 0x40
 8008702:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008704:	2300      	movs	r3, #0
 8008706:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800870c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800870e:	a901      	add	r1, sp, #4
 8008710:	f7ff fd22 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008714:	f241 3288 	movw	r2, #5000	; 0x1388
 8008718:	4629      	mov	r1, r5
 800871a:	4620      	mov	r0, r4
 800871c:	f7ff fd88 	bl	8008230 <SDMMC_GetCmdResp1>
}
 8008720:	b007      	add	sp, #28
 8008722:	bd30      	pop	{r4, r5, pc}

08008724 <SDMMC_CmdSendSCR>:
{
 8008724:	b530      	push	{r4, r5, lr}
 8008726:	b087      	sub	sp, #28
 8008728:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800872e:	2533      	movs	r5, #51	; 0x33
 8008730:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008732:	2240      	movs	r2, #64	; 0x40
 8008734:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008736:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800873c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800873e:	a901      	add	r1, sp, #4
 8008740:	f7ff fd0a 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008744:	f241 3288 	movw	r2, #5000	; 0x1388
 8008748:	4629      	mov	r1, r5
 800874a:	4620      	mov	r0, r4
 800874c:	f7ff fd70 	bl	8008230 <SDMMC_GetCmdResp1>
}
 8008750:	b007      	add	sp, #28
 8008752:	bd30      	pop	{r4, r5, pc}

08008754 <SDMMC_CmdSendCID>:
{
 8008754:	b510      	push	{r4, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800875a:	2300      	movs	r3, #0
 800875c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800875e:	2202      	movs	r2, #2
 8008760:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008762:	22c0      	movs	r2, #192	; 0xc0
 8008764:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008766:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800876c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800876e:	a901      	add	r1, sp, #4
 8008770:	f7ff fcf2 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008774:	4620      	mov	r0, r4
 8008776:	f7ff fbf7 	bl	8007f68 <SDMMC_GetCmdResp2>
}
 800877a:	b006      	add	sp, #24
 800877c:	bd10      	pop	{r4, pc}

0800877e <SDMMC_CmdSendCSD>:
{
 800877e:	b510      	push	{r4, lr}
 8008780:	b086      	sub	sp, #24
 8008782:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008784:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008786:	2309      	movs	r3, #9
 8008788:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800878a:	23c0      	movs	r3, #192	; 0xc0
 800878c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800878e:	2300      	movs	r3, #0
 8008790:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008796:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008798:	a901      	add	r1, sp, #4
 800879a:	f7ff fcdd 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800879e:	4620      	mov	r0, r4
 80087a0:	f7ff fbe2 	bl	8007f68 <SDMMC_GetCmdResp2>
}
 80087a4:	b006      	add	sp, #24
 80087a6:	bd10      	pop	{r4, pc}

080087a8 <SDMMC_CmdSetRelAdd>:
{
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	4604      	mov	r4, r0
 80087ae:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80087b4:	2603      	movs	r6, #3
 80087b6:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087b8:	2240      	movs	r2, #64	; 0x40
 80087ba:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087bc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087c4:	a901      	add	r1, sp, #4
 80087c6:	f7ff fcc7 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80087ca:	462a      	mov	r2, r5
 80087cc:	4631      	mov	r1, r6
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7ff fdd6 	bl	8008380 <SDMMC_GetCmdResp6>
}
 80087d4:	b006      	add	sp, #24
 80087d6:	bd70      	pop	{r4, r5, r6, pc}

080087d8 <SDMMC_CmdSendStatus>:
{
 80087d8:	b530      	push	{r4, r5, lr}
 80087da:	b087      	sub	sp, #28
 80087dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80087de:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80087e0:	250d      	movs	r5, #13
 80087e2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087e4:	2340      	movs	r3, #64	; 0x40
 80087e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087e8:	2300      	movs	r3, #0
 80087ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087f2:	a901      	add	r1, sp, #4
 80087f4:	f7ff fcb0 	bl	8008158 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80087f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fc:	4629      	mov	r1, r5
 80087fe:	4620      	mov	r0, r4
 8008800:	f7ff fd16 	bl	8008230 <SDMMC_GetCmdResp1>
}
 8008804:	b007      	add	sp, #28
 8008806:	bd30      	pop	{r4, r5, pc}

08008808 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8008808:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800880a:	3301      	adds	r3, #1
 800880c:	4a0c      	ldr	r2, [pc, #48]	; (8008840 <USB_CoreReset+0x38>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d811      	bhi.n	8008836 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008812:	6902      	ldr	r2, [r0, #16]
 8008814:	2a00      	cmp	r2, #0
 8008816:	daf8      	bge.n	800880a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008818:	6903      	ldr	r3, [r0, #16]
 800881a:	f043 0301 	orr.w	r3, r3, #1
 800881e:	6103      	str	r3, [r0, #16]
  count = 0U;
 8008820:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8008822:	3301      	adds	r3, #1
 8008824:	4a06      	ldr	r2, [pc, #24]	; (8008840 <USB_CoreReset+0x38>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d807      	bhi.n	800883a <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800882a:	6902      	ldr	r2, [r0, #16]
 800882c:	f012 0f01 	tst.w	r2, #1
 8008830:	d1f7      	bne.n	8008822 <USB_CoreReset+0x1a>

  return HAL_OK;
 8008832:	2000      	movs	r0, #0
 8008834:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008836:	2003      	movs	r0, #3
 8008838:	4770      	bx	lr
      return HAL_TIMEOUT;
 800883a:	2003      	movs	r0, #3
}
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	00030d40 	.word	0x00030d40

08008844 <USB_CoreInit>:
{
 8008844:	b084      	sub	sp, #16
 8008846:	b510      	push	{r4, lr}
 8008848:	4604      	mov	r4, r0
 800884a:	a803      	add	r0, sp, #12
 800884c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d11d      	bne.n	8008892 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800885c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800885e:	68e2      	ldr	r2, [r4, #12]
 8008860:	4b16      	ldr	r3, [pc, #88]	; (80088bc <USB_CoreInit+0x78>)
 8008862:	4013      	ands	r3, r2
 8008864:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008866:	68e3      	ldr	r3, [r4, #12]
 8008868:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800886c:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800886e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008870:	2b01      	cmp	r3, #1
 8008872:	d009      	beq.n	8008888 <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8008874:	4620      	mov	r0, r4
 8008876:	f7ff ffc7 	bl	8008808 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d014      	beq.n	80088aa <USB_CoreInit+0x66>
}
 8008880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008884:	b004      	add	sp, #16
 8008886:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008888:	68e3      	ldr	r3, [r4, #12]
 800888a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800888e:	60e3      	str	r3, [r4, #12]
 8008890:	e7f0      	b.n	8008874 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008892:	68e3      	ldr	r3, [r4, #12]
 8008894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008898:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800889a:	4620      	mov	r0, r4
 800889c:	f7ff ffb4 	bl	8008808 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80088a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80088a8:	e7e7      	b.n	800887a <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088aa:	68a3      	ldr	r3, [r4, #8]
 80088ac:	f043 0306 	orr.w	r3, r3, #6
 80088b0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088b2:	68a3      	ldr	r3, [r4, #8]
 80088b4:	f043 0320 	orr.w	r3, r3, #32
 80088b8:	60a3      	str	r3, [r4, #8]
 80088ba:	e7e1      	b.n	8008880 <USB_CoreInit+0x3c>
 80088bc:	ffbdffbf 	.word	0xffbdffbf

080088c0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088c0:	6883      	ldr	r3, [r0, #8]
 80088c2:	f043 0301 	orr.w	r3, r3, #1
 80088c6:	6083      	str	r3, [r0, #8]
}
 80088c8:	2000      	movs	r0, #0
 80088ca:	4770      	bx	lr

080088cc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088cc:	6883      	ldr	r3, [r0, #8]
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	6083      	str	r3, [r0, #8]
}
 80088d4:	2000      	movs	r0, #0
 80088d6:	4770      	bx	lr

080088d8 <USB_SetCurrentMode>:
{
 80088d8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088da:	68c3      	ldr	r3, [r0, #12]
 80088dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088e0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80088e2:	2901      	cmp	r1, #1
 80088e4:	d009      	beq.n	80088fa <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 80088e6:	b969      	cbnz	r1, 8008904 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088e8:	68c3      	ldr	r3, [r0, #12]
 80088ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088ee:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80088f0:	2032      	movs	r0, #50	; 0x32
 80088f2:	f7f8 fcad 	bl	8001250 <HAL_Delay>
  return HAL_OK;
 80088f6:	2000      	movs	r0, #0
}
 80088f8:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088fa:	68c3      	ldr	r3, [r0, #12]
 80088fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008900:	60c3      	str	r3, [r0, #12]
 8008902:	e7f5      	b.n	80088f0 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8008904:	2001      	movs	r0, #1
 8008906:	e7f7      	b.n	80088f8 <USB_SetCurrentMode+0x20>

08008908 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008908:	0189      	lsls	r1, r1, #6
 800890a:	f041 0120 	orr.w	r1, r1, #32
 800890e:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8008910:	2300      	movs	r3, #0
    if (++count > 200000U)
 8008912:	3301      	adds	r3, #1
 8008914:	4a05      	ldr	r2, [pc, #20]	; (800892c <USB_FlushTxFifo+0x24>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d805      	bhi.n	8008926 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800891a:	6902      	ldr	r2, [r0, #16]
 800891c:	f012 0f20 	tst.w	r2, #32
 8008920:	d1f7      	bne.n	8008912 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8008922:	2000      	movs	r0, #0
 8008924:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008926:	2003      	movs	r0, #3
}
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	00030d40 	.word	0x00030d40

08008930 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008930:	2310      	movs	r3, #16
 8008932:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8008934:	2300      	movs	r3, #0
    if (++count > 200000U)
 8008936:	3301      	adds	r3, #1
 8008938:	4a05      	ldr	r2, [pc, #20]	; (8008950 <USB_FlushRxFifo+0x20>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d805      	bhi.n	800894a <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800893e:	6902      	ldr	r2, [r0, #16]
 8008940:	f012 0f10 	tst.w	r2, #16
 8008944:	d1f7      	bne.n	8008936 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8008946:	2000      	movs	r0, #0
 8008948:	4770      	bx	lr
      return HAL_TIMEOUT;
 800894a:	2003      	movs	r0, #3
}
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	00030d40 	.word	0x00030d40

08008954 <USB_WritePacket>:
{
 8008954:	b510      	push	{r4, lr}
 8008956:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800895a:	b984      	cbnz	r4, 800897e <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 800895c:	3303      	adds	r3, #3
 800895e:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8008962:	f04f 0c00 	mov.w	ip, #0
 8008966:	e008      	b.n	800897a <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8008968:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800896c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008970:	f851 4b04 	ldr.w	r4, [r1], #4
 8008974:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8008976:	f10c 0c01 	add.w	ip, ip, #1
 800897a:	45f4      	cmp	ip, lr
 800897c:	d3f4      	bcc.n	8008968 <USB_WritePacket+0x14>
}
 800897e:	2000      	movs	r0, #0
 8008980:	bd10      	pop	{r4, pc}

08008982 <USB_ReadPacket>:
{
 8008982:	4684      	mov	ip, r0
 8008984:	4608      	mov	r0, r1
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008986:	1cd1      	adds	r1, r2, #3
 8008988:	0889      	lsrs	r1, r1, #2
  for (i = 0U; i < count32b; i++)
 800898a:	2300      	movs	r3, #0
 800898c:	e005      	b.n	800899a <USB_ReadPacket+0x18>
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800898e:	f50c 5280 	add.w	r2, ip, #4096	; 0x1000
 8008992:	6812      	ldr	r2, [r2, #0]
 8008994:	f840 2b04 	str.w	r2, [r0], #4
  for (i = 0U; i < count32b; i++)
 8008998:	3301      	adds	r3, #1
 800899a:	428b      	cmp	r3, r1
 800899c:	d3f7      	bcc.n	800898e <USB_ReadPacket+0xc>
}
 800899e:	4770      	bx	lr

080089a0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80089a0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80089a2:	6980      	ldr	r0, [r0, #24]
}
 80089a4:	4010      	ands	r0, r2
 80089a6:	4770      	bx	lr

080089a8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80089a8:	6940      	ldr	r0, [r0, #20]
}
 80089aa:	f000 0001 	and.w	r0, r0, #1
 80089ae:	4770      	bx	lr

080089b0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80089b0:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80089b4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80089b8:	f023 0303 	bic.w	r3, r3, #3
 80089bc:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80089c0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80089c4:	f001 0203 	and.w	r2, r1, #3
 80089c8:	4313      	orrs	r3, r2
 80089ca:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 80089ce:	2901      	cmp	r1, #1
 80089d0:	d003      	beq.n	80089da <USB_InitFSLSPClkSel+0x2a>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 80089d2:	2902      	cmp	r1, #2
 80089d4:	d006      	beq.n	80089e4 <USB_InitFSLSPClkSel+0x34>
  {
    /* ... */
  }

  return HAL_OK;
}
 80089d6:	2000      	movs	r0, #0
 80089d8:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 80089da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80089de:	f8cc 3004 	str.w	r3, [ip, #4]
 80089e2:	e7f8      	b.n	80089d6 <USB_InitFSLSPClkSel+0x26>
    USBx_HOST->HFIR = 6000U;
 80089e4:	f241 7370 	movw	r3, #6000	; 0x1770
 80089e8:	f8cc 3004 	str.w	r3, [ip, #4]
 80089ec:	e7f3      	b.n	80089d6 <USB_InitFSLSPClkSel+0x26>

080089ee <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80089ee:	b530      	push	{r4, r5, lr}
 80089f0:	b083      	sub	sp, #12
 80089f2:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80089f4:	2500      	movs	r5, #0
 80089f6:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80089f8:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80089fc:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008a04:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a0c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8008a10:	2064      	movs	r0, #100	; 0x64
 8008a12:	f7f8 fc1d 	bl	8001250 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a1c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8008a20:	200a      	movs	r0, #10
 8008a22:	f7f8 fc15 	bl	8001250 <HAL_Delay>

  return HAL_OK;
}
 8008a26:	4628      	mov	r0, r5
 8008a28:	b003      	add	sp, #12
 8008a2a:	bd30      	pop	{r4, r5, pc}

08008a2c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008a2c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8008a32:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008a36:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008a3e:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008a46:	d101      	bne.n	8008a4c <USB_DriveVbus+0x20>
 8008a48:	2901      	cmp	r1, #1
 8008a4a:	d00c      	beq.n	8008a66 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008a52:	d005      	beq.n	8008a60 <USB_DriveVbus+0x34>
 8008a54:	b921      	cbnz	r1, 8008a60 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008a56:	9b01      	ldr	r3, [sp, #4]
 8008a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a5c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8008a60:	2000      	movs	r0, #0
 8008a62:	b002      	add	sp, #8
 8008a64:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008a66:	9b01      	ldr	r3, [sp, #4]
 8008a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a6c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 8008a70:	e7ec      	b.n	8008a4c <USB_DriveVbus+0x20>
	...

08008a74 <USB_HostInit>:
{
 8008a74:	b084      	sub	sp, #16
 8008a76:	b510      	push	{r4, lr}
 8008a78:	4604      	mov	r4, r0
 8008a7a:	a803      	add	r0, sp, #12
 8008a7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a8c:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a94:	d010      	beq.n	8008ab8 <USB_HostInit+0x44>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8008a96:	9b05      	ldr	r3, [sp, #20]
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d006      	beq.n	8008aaa <USB_HostInit+0x36>
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008a9c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008aa0:	f023 0304 	bic.w	r3, r3, #4
 8008aa4:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8008aa8:	e00c      	b.n	8008ac4 <USB_HostInit+0x50>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008aaa:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008aae:	f043 0304 	orr.w	r3, r3, #4
 8008ab2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8008ab6:	e005      	b.n	8008ac4 <USB_HostInit+0x50>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ab8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008abc:	f023 0304 	bic.w	r3, r3, #4
 8008ac0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008ac4:	2110      	movs	r1, #16
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7ff ff1e 	bl	8008908 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008acc:	4620      	mov	r0, r4
 8008ace:	f7ff ff2f 	bl	8008930 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	e009      	b.n	8008aea <USB_HostInit+0x76>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008ad6:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8008ada:	f04f 31ff 	mov.w	r1, #4294967295
 8008ade:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8008ae8:	3201      	adds	r2, #1
 8008aea:	9b04      	ldr	r3, [sp, #16]
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d8f2      	bhi.n	8008ad6 <USB_HostInit+0x62>
  (void)USB_DriveVbus(USBx, 1U);
 8008af0:	2101      	movs	r1, #1
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7ff ff9a 	bl	8008a2c <USB_DriveVbus>
  HAL_Delay(200U);
 8008af8:	20c8      	movs	r0, #200	; 0xc8
 8008afa:	f7f8 fba9 	bl	8001250 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008b02:	f04f 33ff 	mov.w	r3, #4294967295
 8008b06:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008b0e:	d017      	beq.n	8008b40 <USB_HostInit+0xcc>
    USBx->GRXFSIZ  = 0x200U;
 8008b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b14:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008b16:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8008b1a:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008b1c:	4b0d      	ldr	r3, [pc, #52]	; (8008b54 <USB_HostInit+0xe0>)
 8008b1e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8008b22:	9b06      	ldr	r3, [sp, #24]
 8008b24:	b91b      	cbnz	r3, 8008b2e <USB_HostInit+0xba>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b26:	69a3      	ldr	r3, [r4, #24]
 8008b28:	f043 0310 	orr.w	r3, r3, #16
 8008b2c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008b2e:	69a2      	ldr	r2, [r4, #24]
 8008b30:	4b09      	ldr	r3, [pc, #36]	; (8008b58 <USB_HostInit+0xe4>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	61a3      	str	r3, [r4, #24]
}
 8008b36:	2000      	movs	r0, #0
 8008b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b3c:	b004      	add	sp, #16
 8008b3e:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8008b40:	2380      	movs	r3, #128	; 0x80
 8008b42:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008b44:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8008b48:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008b4a:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <USB_HostInit+0xe8>)
 8008b4c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008b50:	e7e7      	b.n	8008b22 <USB_HostInit+0xae>
 8008b52:	bf00      	nop
 8008b54:	00e00300 	.word	0x00e00300
 8008b58:	a3200008 	.word	0xa3200008
 8008b5c:	004000e0 	.word	0x004000e0

08008b60 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b60:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8008b66:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8008b6a:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008b6c:	9801      	ldr	r0, [sp, #4]
}
 8008b6e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8008b72:	b002      	add	sp, #8
 8008b74:	4770      	bx	lr

08008b76 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008b76:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008b7a:	6880      	ldr	r0, [r0, #8]
}
 8008b7c:	b280      	uxth	r0, r0
 8008b7e:	4770      	bx	lr

08008b80 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b82:	4604      	mov	r4, r0
 8008b84:	f89d c018 	ldrb.w	ip, [sp, #24]
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008b88:	eb00 1e41 	add.w	lr, r0, r1, lsl #5
 8008b8c:	f50e 60a0 	add.w	r0, lr, #1280	; 0x500
 8008b90:	f04f 35ff 	mov.w	r5, #4294967295
 8008b94:	6085      	str	r5, [r0, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008b96:	f1bc 0f03 	cmp.w	ip, #3
 8008b9a:	d864      	bhi.n	8008c66 <USB_HC_Init+0xe6>
 8008b9c:	e8df f00c 	tbb	[pc, ip]
 8008ba0:	18025502 	.word	0x18025502
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ba4:	f240 459d 	movw	r5, #1181	; 0x49d
 8008ba8:	60c5      	str	r5, [r0, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008baa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008bae:	d109      	bne.n	8008bc4 <USB_HC_Init+0x44>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008bb0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8008bb2:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008bb6:	d058      	beq.n	8008c6a <USB_HC_Init+0xea>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008bb8:	68c5      	ldr	r5, [r0, #12]
 8008bba:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 8008bbe:	60c5      	str	r5, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e00c      	b.n	8008bde <USB_HC_Init+0x5e>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008bc4:	68c5      	ldr	r5, [r0, #12]
 8008bc6:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8008bca:	60c5      	str	r5, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008bcc:	2000      	movs	r0, #0
 8008bce:	e006      	b.n	8008bde <USB_HC_Init+0x5e>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008bd0:	f240 659d 	movw	r5, #1693	; 0x69d
 8008bd4:	60c5      	str	r5, [r0, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008bd6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008bda:	d130      	bne.n	8008c3e <USB_HC_Init+0xbe>
  HAL_StatusTypeDef ret = HAL_OK;
 8008bdc:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008bde:	f8d4 5418 	ldr.w	r5, [r4, #1048]	; 0x418
 8008be2:	f001 010f 	and.w	r1, r1, #15
 8008be6:	2601      	movs	r6, #1
 8008be8:	fa06 f101 	lsl.w	r1, r6, r1
 8008bec:	4329      	orrs	r1, r5
 8008bee:	f8c4 1418 	str.w	r1, [r4, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008bf2:	69a1      	ldr	r1, [r4, #24]
 8008bf4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8008bf8:	61a1      	str	r1, [r4, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008bfa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008bfe:	d136      	bne.n	8008c6e <USB_HC_Init+0xee>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8008c00:	2400      	movs	r4, #0
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008c02:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8008c06:	2902      	cmp	r1, #2
 8008c08:	d034      	beq.n	8008c74 <USB_HC_Init+0xf4>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008c0a:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c0c:	059b      	lsls	r3, r3, #22
 8008c0e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c12:	02d2      	lsls	r2, r2, #11
 8008c14:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c18:	4313      	orrs	r3, r2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c1a:	ea4f 428c 	mov.w	r2, ip, lsl #18
 8008c1e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c22:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c24:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008c28:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c2c:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c2e:	4323      	orrs	r3, r4
 8008c30:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c32:	f8ce 3500 	str.w	r3, [lr, #1280]	; 0x500

  if (ep_type == EP_TYPE_INTR)
 8008c36:	f1bc 0f03 	cmp.w	ip, #3
 8008c3a:	d01e      	beq.n	8008c7a <USB_HC_Init+0xfa>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }

  return ret;
}
 8008c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008c3e:	68c5      	ldr	r5, [r0, #12]
 8008c40:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8008c44:	60c5      	str	r5, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c46:	2000      	movs	r0, #0
 8008c48:	e7c9      	b.n	8008bde <USB_HC_Init+0x5e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c4a:	f240 2525 	movw	r5, #549	; 0x225
 8008c4e:	60c5      	str	r5, [r0, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008c50:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008c54:	d101      	bne.n	8008c5a <USB_HC_Init+0xda>
  HAL_StatusTypeDef ret = HAL_OK;
 8008c56:	2000      	movs	r0, #0
 8008c58:	e7c1      	b.n	8008bde <USB_HC_Init+0x5e>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008c5a:	68c5      	ldr	r5, [r0, #12]
 8008c5c:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 8008c60:	60c5      	str	r5, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c62:	2000      	movs	r0, #0
 8008c64:	e7bb      	b.n	8008bde <USB_HC_Init+0x5e>
  switch (ep_type)
 8008c66:	2001      	movs	r0, #1
 8008c68:	e7b9      	b.n	8008bde <USB_HC_Init+0x5e>
  HAL_StatusTypeDef ret = HAL_OK;
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e7b7      	b.n	8008bde <USB_HC_Init+0x5e>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008c6e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8008c72:	e7c6      	b.n	8008c02 <USB_HC_Init+0x82>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008c74:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008c78:	e7c8      	b.n	8008c0c <USB_HC_Init+0x8c>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008c7a:	f8de 3500 	ldr.w	r3, [lr, #1280]	; 0x500
 8008c7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c82:	f8ce 3500 	str.w	r3, [lr, #1280]	; 0x500
 8008c86:	e7d9      	b.n	8008c3c <USB_HC_Init+0xbc>

08008c88 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c88:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008c8c:	6940      	ldr	r0, [r0, #20]
}
 8008c8e:	b280      	uxth	r0, r0
 8008c90:	4770      	bx	lr

08008c92 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c92:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8008c96:	f501 6ca0 	add.w	ip, r1, #1280	; 0x500
 8008c9a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008c9e:	f3c3 4281 	ubfx	r2, r3, #18, #2

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008ca2:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8008ca6:	bf0c      	ite	eq
 8008ca8:	2301      	moveq	r3, #1
 8008caa:	2300      	movne	r3, #0
 8008cac:	2a02      	cmp	r2, #2
 8008cae:	bf08      	it	eq
 8008cb0:	f043 0301 	orreq.w	r3, r3, #1
 8008cb4:	b363      	cbz	r3, 8008d10 <USB_HC_Halt+0x7e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008cb6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cbe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008cc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008cc4:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 8008cc8:	d11a      	bne.n	8008d00 <USB_HC_Halt+0x6e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cca:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008cce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008cd2:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cd6:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008cda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008cde:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ce2:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cea:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      do
      {
        if (++count > 1000U)
 8008cee:	3301      	adds	r3, #1
 8008cf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cf4:	d80a      	bhi.n	8008d0c <USB_HC_Halt+0x7a>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008cf6:	f8dc 2000 	ldr.w	r2, [ip]
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	dbf7      	blt.n	8008cee <USB_HC_Halt+0x5c>
 8008cfe:	e005      	b.n	8008d0c <USB_HC_Halt+0x7a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d00:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d08:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	4770      	bx	lr
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d10:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d18:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d1c:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8008d20:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 8008d24:	d11a      	bne.n	8008d5c <USB_HC_Halt+0xca>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d26:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008d2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008d2e:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d32:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008d36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008d3a:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008d3e:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008d42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d46:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
        if (++count > 1000U)
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d50:	d8dc      	bhi.n	8008d0c <USB_HC_Halt+0x7a>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d52:	f8dc 2000 	ldr.w	r2, [ip]
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	dbf7      	blt.n	8008d4a <USB_HC_Halt+0xb8>
 8008d5a:	e7d7      	b.n	8008d0c <USB_HC_Halt+0x7a>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d5c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d64:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8008d68:	e7d0      	b.n	8008d0c <USB_HC_Halt+0x7a>
	...

08008d6c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d6c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8008d70:	4a06      	ldr	r2, [pc, #24]	; (8008d8c <USB_DoPing+0x20>)
 8008d72:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d76:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d82:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8008d86:	2000      	movs	r0, #0
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	80080000 	.word	0x80080000

08008d90 <USB_HC_StartXfer>:
{
 8008d90:	b530      	push	{r4, r5, lr}
 8008d92:	b083      	sub	sp, #12
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008d94:	f891 c001 	ldrb.w	ip, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8008d98:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008d9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008d9e:	d007      	beq.n	8008db0 <USB_HC_StartXfer+0x20>
 8008da0:	790b      	ldrb	r3, [r1, #4]
 8008da2:	b92b      	cbnz	r3, 8008db0 <USB_HC_StartXfer+0x20>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008da4:	b912      	cbnz	r2, 8008dac <USB_HC_StartXfer+0x1c>
 8008da6:	794b      	ldrb	r3, [r1, #5]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d011      	beq.n	8008dd0 <USB_HC_StartXfer+0x40>
    else if (dma == 1U)
 8008dac:	2a01      	cmp	r2, #1
 8008dae:	d013      	beq.n	8008dd8 <USB_HC_StartXfer+0x48>
  if (hc->xfer_len > 0U)
 8008db0:	690b      	ldr	r3, [r1, #16]
 8008db2:	b1e3      	cbz	r3, 8008dee <USB_HC_StartXfer+0x5e>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008db4:	890c      	ldrh	r4, [r1, #8]
 8008db6:	4423      	add	r3, r4
 8008db8:	3b01      	subs	r3, #1
 8008dba:	fbb3 f3f4 	udiv	r3, r3, r4
 8008dbe:	b29b      	uxth	r3, r3
    if (num_packets > max_hc_pkt_count)
 8008dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc4:	d914      	bls.n	8008df0 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008dc6:	0224      	lsls	r4, r4, #8
 8008dc8:	610c      	str	r4, [r1, #16]
      num_packets = max_hc_pkt_count;
 8008dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dce:	e00f      	b.n	8008df0 <USB_HC_StartXfer+0x60>
      (void)USB_DoPing(USBx, hc->ch_num);
 8008dd0:	4661      	mov	r1, ip
 8008dd2:	f7ff ffcb 	bl	8008d6c <USB_DoPing>
      return HAL_OK;
 8008dd6:	e079      	b.n	8008ecc <USB_HC_StartXfer+0x13c>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008dd8:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8008ddc:	f8d3 450c 	ldr.w	r4, [r3, #1292]	; 0x50c
 8008de0:	f024 0460 	bic.w	r4, r4, #96	; 0x60
 8008de4:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	714b      	strb	r3, [r1, #5]
 8008dec:	e7e0      	b.n	8008db0 <USB_HC_StartXfer+0x20>
    num_packets = 1U;
 8008dee:	2301      	movs	r3, #1
  if (hc->ep_is_in != 0U)
 8008df0:	78cc      	ldrb	r4, [r1, #3]
 8008df2:	b11c      	cbz	r4, 8008dfc <USB_HC_StartXfer+0x6c>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008df4:	890c      	ldrh	r4, [r1, #8]
 8008df6:	fb03 f404 	mul.w	r4, r3, r4
 8008dfa:	610c      	str	r4, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008dfc:	690c      	ldr	r4, [r1, #16]
 8008dfe:	f3c4 0e12 	ubfx	lr, r4, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e02:	4c3a      	ldr	r4, [pc, #232]	; (8008eec <USB_HC_StartXfer+0x15c>)
 8008e04:	ea04 43c3 	and.w	r3, r4, r3, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e08:	ea4e 0303 	orr.w	r3, lr, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008e0c:	f891 e00a 	ldrb.w	lr, [r1, #10]
 8008e10:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
 8008e14:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e18:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e1c:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e20:	f8cc 3510 	str.w	r3, [ip, #1296]	; 0x510
  if (dma != 0U)
 8008e24:	b112      	cbz	r2, 8008e2c <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008e26:	68cb      	ldr	r3, [r1, #12]
 8008e28:	f8cc 3514 	str.w	r3, [ip, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008e2c:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8008e30:	f8de 3008 	ldr.w	r3, [lr, #8]
 8008e34:	f013 0f01 	tst.w	r3, #1
 8008e38:	bf0c      	ite	eq
 8008e3a:	2501      	moveq	r5, #1
 8008e3c:	2500      	movne	r5, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008e3e:	f8dc 4500 	ldr.w	r4, [ip, #1280]	; 0x500
 8008e42:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8008e46:	f8cc 4500 	str.w	r4, [ip, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008e4a:	f8dc 3500 	ldr.w	r3, [ip, #1280]	; 0x500
 8008e4e:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 8008e52:	f8cc 3500 	str.w	r3, [ip, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e56:	f8dc 4500 	ldr.w	r4, [ip, #1280]	; 0x500
 8008e5a:	4b25      	ldr	r3, [pc, #148]	; (8008ef0 <USB_HC_StartXfer+0x160>)
 8008e5c:	601c      	str	r4, [r3, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e5e:	681c      	ldr	r4, [r3, #0]
 8008e60:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8008e64:	601c      	str	r4, [r3, #0]
  if (hc->ep_is_in != 0U)
 8008e66:	78cb      	ldrb	r3, [r1, #3]
 8008e68:	b1c3      	cbz	r3, 8008e9c <USB_HC_StartXfer+0x10c>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e6a:	4c21      	ldr	r4, [pc, #132]	; (8008ef0 <USB_HC_StartXfer+0x160>)
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e72:	6023      	str	r3, [r4, #0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e74:	4b1e      	ldr	r3, [pc, #120]	; (8008ef0 <USB_HC_StartXfer+0x160>)
 8008e76:	681c      	ldr	r4, [r3, #0]
 8008e78:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8008e7c:	601c      	str	r4, [r3, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f8cc 3500 	str.w	r3, [ip, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8008e84:	bb12      	cbnz	r2, 8008ecc <USB_HC_StartXfer+0x13c>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008e86:	78cb      	ldrb	r3, [r1, #3]
 8008e88:	bb03      	cbnz	r3, 8008ecc <USB_HC_StartXfer+0x13c>
 8008e8a:	690b      	ldr	r3, [r1, #16]
 8008e8c:	b1f3      	cbz	r3, 8008ecc <USB_HC_StartXfer+0x13c>
      switch (hc->ep_type)
 8008e8e:	79ca      	ldrb	r2, [r1, #7]
 8008e90:	2a03      	cmp	r2, #3
 8008e92:	d814      	bhi.n	8008ebe <USB_HC_StartXfer+0x12e>
 8008e94:	e8df f002 	tbb	[pc, r2]
 8008e98:	1d081d08 	.word	0x1d081d08
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008e9c:	4c14      	ldr	r4, [pc, #80]	; (8008ef0 <USB_HC_StartXfer+0x160>)
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	e7e5      	b.n	8008e74 <USB_HC_StartXfer+0xe4>
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ea8:	3303      	adds	r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008eaa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008eac:	b292      	uxth	r2, r2
 8008eae:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d203      	bcs.n	8008ebe <USB_HC_StartXfer+0x12e>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008eb6:	6983      	ldr	r3, [r0, #24]
 8008eb8:	f043 0320 	orr.w	r3, r3, #32
 8008ebc:	6183      	str	r3, [r0, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	8a0b      	ldrh	r3, [r1, #16]
 8008ec4:	784a      	ldrb	r2, [r1, #1]
 8008ec6:	68c9      	ldr	r1, [r1, #12]
 8008ec8:	f7ff fd44 	bl	8008954 <USB_WritePacket>
}
 8008ecc:	2000      	movs	r0, #0
 8008ece:	b003      	add	sp, #12
 8008ed0:	bd30      	pop	{r4, r5, pc}
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ed2:	3303      	adds	r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008ed4:	f8de 2010 	ldr.w	r2, [lr, #16]
 8008ed8:	b292      	uxth	r2, r2
 8008eda:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d2ed      	bcs.n	8008ebe <USB_HC_StartXfer+0x12e>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ee2:	6983      	ldr	r3, [r0, #24]
 8008ee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ee8:	6183      	str	r3, [r0, #24]
 8008eea:	e7e8      	b.n	8008ebe <USB_HC_StartXfer+0x12e>
 8008eec:	1ff80000 	.word	0x1ff80000
 8008ef0:	20000160 	.word	0x20000160

08008ef4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4604      	mov	r4, r0
  uint32_t count = 0U;
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8008ef8:	f7ff fce8 	bl	80088cc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008efc:	2110      	movs	r1, #16
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7ff fd02 	bl	8008908 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008f04:	4620      	mov	r0, r4
 8008f06:	f7ff fd13 	bl	8008930 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	e00a      	b.n	8008f24 <USB_StopHost+0x30>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f0e:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8008f12:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f16:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8008f1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8008f1e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 8008f22:	3201      	adds	r2, #1
 8008f24:	2a0f      	cmp	r2, #15
 8008f26:	d9f2      	bls.n	8008f0e <USB_StopHost+0x1a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f28:	2000      	movs	r0, #0
  uint32_t count = 0U;
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	e000      	b.n	8008f30 <USB_StopHost+0x3c>
  for (i = 0U; i <= 15U; i++)
 8008f2e:	3001      	adds	r0, #1
 8008f30:	280f      	cmp	r0, #15
 8008f32:	d813      	bhi.n	8008f5c <USB_StopHost+0x68>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f34:	eb04 1c40 	add.w	ip, r4, r0, lsl #5
 8008f38:	f50c 61a0 	add.w	r1, ip, #1280	; 0x500
 8008f3c:	f8dc 2500 	ldr.w	r2, [ip, #1280]	; 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f44:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8008f48:	f8cc 2500 	str.w	r2, [ip, #1280]	; 0x500

    do
    {
      if (++count > 1000U)
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f52:	d8ec      	bhi.n	8008f2e <USB_StopHost+0x3a>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f54:	680a      	ldr	r2, [r1, #0]
 8008f56:	2a00      	cmp	r2, #0
 8008f58:	dbf8      	blt.n	8008f4c <USB_StopHost+0x58>
 8008f5a:	e7e8      	b.n	8008f2e <USB_StopHost+0x3a>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f60:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008f64:	6163      	str	r3, [r4, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff fcaa 	bl	80088c0 <USB_EnableGlobalInt>

  return HAL_OK;
}
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	bd10      	pop	{r4, pc}

08008f70 <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 8008f70:	2000      	movs	r0, #0
 8008f72:	4770      	bx	lr

08008f74 <USBH_MSC_Process>:
{
 8008f74:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f76:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8008f7a:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->state)
 8008f7c:	7b33      	ldrb	r3, [r6, #12]
 8008f7e:	b123      	cbz	r3, 8008f8a <USBH_MSC_Process+0x16>
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	f040 8145 	bne.w	8009210 <USBH_MSC_Process+0x29c>
    error = USBH_OK;
 8008f86:	2000      	movs	r0, #0
}
 8008f88:	bd70      	pop	{r4, r5, r6, pc}
 8008f8a:	4604      	mov	r4, r0
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008f8c:	f8b6 10f8 	ldrh.w	r1, [r6, #248]	; 0xf8
 8008f90:	6833      	ldr	r3, [r6, #0]
 8008f92:	4299      	cmp	r1, r3
 8008f94:	f080 8131 	bcs.w	80091fa <USBH_MSC_Process+0x286>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008f98:	2334      	movs	r3, #52	; 0x34
 8008f9a:	fb03 6301 	mla	r3, r3, r1, r6
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008fa4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008fa8:	2b08      	cmp	r3, #8
 8008faa:	f200 8133 	bhi.w	8009214 <USBH_MSC_Process+0x2a0>
 8008fae:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fb2:	0009      	.short	0x0009
 8008fb4:	00440131 	.word	0x00440131
 8008fb8:	0015009e 	.word	0x0015009e
 8008fbc:	013100d3 	.word	0x013100d3
 8008fc0:	011f0131 	.word	0x011f0131
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008fc4:	2334      	movs	r3, #52	; 0x34
 8008fc6:	fb03 6101 	mla	r1, r3, r1, r6
 8008fca:	2304      	movs	r3, #4
 8008fcc:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 8008fd0:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 8008fd4:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008fd8:	2001      	movs	r0, #1
        break;
 8008fda:	e7d5      	b.n	8008f88 <USBH_MSC_Process+0x14>
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008fdc:	2234      	movs	r2, #52	; 0x34
 8008fde:	fb01 f202 	mul.w	r2, r1, r2
 8008fe2:	3298      	adds	r2, #152	; 0x98
 8008fe4:	4432      	add	r2, r6
 8008fe6:	3207      	adds	r2, #7
 8008fe8:	b2c9      	uxtb	r1, r1
 8008fea:	f000 fd56 	bl	8009a9a <USBH_MSC_SCSI_Inquiry>
        if (scsi_status == USBH_OK)
 8008fee:	4603      	mov	r3, r0
 8008ff0:	b938      	cbnz	r0, 8009002 <USBH_MSC_Process+0x8e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008ff2:	f8b6 20f8 	ldrh.w	r2, [r6, #248]	; 0xf8
 8008ff6:	2134      	movs	r1, #52	; 0x34
 8008ff8:	fb01 6202 	mla	r2, r1, r2, r6
 8008ffc:	2102      	movs	r1, #2
 8008ffe:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
        if (scsi_status == USBH_FAIL)
 8009002:	2b02      	cmp	r3, #2
 8009004:	d003      	beq.n	800900e <USBH_MSC_Process+0x9a>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8009006:	2b04      	cmp	r3, #4
 8009008:	d00b      	beq.n	8009022 <USBH_MSC_Process+0xae>
  USBH_StatusTypeDef error = USBH_BUSY ;
 800900a:	2001      	movs	r0, #1
 800900c:	e7bc      	b.n	8008f88 <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800900e:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009012:	2234      	movs	r2, #52	; 0x34
 8009014:	fb02 6603 	mla	r6, r2, r3, r6
 8009018:	2305      	movs	r3, #5
 800901a:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 800901e:	2001      	movs	r0, #1
 8009020:	e7b2      	b.n	8008f88 <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009022:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009026:	2234      	movs	r2, #52	; 0x34
 8009028:	fb02 6603 	mla	r6, r2, r3, r6
 800902c:	2001      	movs	r0, #1
 800902e:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009032:	2302      	movs	r3, #2
 8009034:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 8009038:	e7a6      	b.n	8008f88 <USBH_MSC_Process+0x14>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800903a:	b2c9      	uxtb	r1, r1
 800903c:	f000 fcbf 	bl	80099be <USBH_MSC_SCSI_TestUnitReady>
        if (ready_status == USBH_OK)
 8009040:	4602      	mov	r2, r0
 8009042:	b9c0      	cbnz	r0, 8009076 <USBH_MSC_Process+0x102>
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009044:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009048:	2134      	movs	r1, #52	; 0x34
 800904a:	fb01 6103 	mla	r1, r1, r3, r6
 800904e:	f891 1092 	ldrb.w	r1, [r1, #146]	; 0x92
 8009052:	b1b1      	cbz	r1, 8009082 <USBH_MSC_Process+0x10e>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009054:	2134      	movs	r1, #52	; 0x34
 8009056:	fb01 6103 	mla	r1, r1, r3, r6
 800905a:	2001      	movs	r0, #1
 800905c:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009060:	2134      	movs	r1, #52	; 0x34
 8009062:	fb01 6303 	mla	r3, r1, r3, r6
 8009066:	2103      	movs	r1, #3
 8009068:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800906c:	2100      	movs	r1, #0
 800906e:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009072:	f883 1092 	strb.w	r1, [r3, #146]	; 0x92
        if (ready_status == USBH_FAIL)
 8009076:	2a02      	cmp	r2, #2
 8009078:	d00a      	beq.n	8009090 <USBH_MSC_Process+0x11c>
          if (ready_status == USBH_UNRECOVERED_ERROR)
 800907a:	2a04      	cmp	r2, #4
 800907c:	d02b      	beq.n	80090d6 <USBH_MSC_Process+0x162>
  USBH_StatusTypeDef error = USBH_BUSY ;
 800907e:	2001      	movs	r0, #1
 8009080:	e782      	b.n	8008f88 <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009082:	2134      	movs	r1, #52	; 0x34
 8009084:	fb01 6103 	mla	r1, r1, r3, r6
 8009088:	2000      	movs	r0, #0
 800908a:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
 800908e:	e7e7      	b.n	8009060 <USBH_MSC_Process+0xec>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009090:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009094:	2234      	movs	r2, #52	; 0x34
 8009096:	fb02 6203 	mla	r2, r2, r3, r6
 800909a:	f892 2092 	ldrb.w	r2, [r2, #146]	; 0x92
 800909e:	2a02      	cmp	r2, #2
 80090a0:	d012      	beq.n	80090c8 <USBH_MSC_Process+0x154>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80090a2:	2234      	movs	r2, #52	; 0x34
 80090a4:	fb02 6203 	mla	r2, r2, r3, r6
 80090a8:	2101      	movs	r1, #1
 80090aa:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090ae:	2234      	movs	r2, #52	; 0x34
 80090b0:	fb02 6603 	mla	r6, r2, r3, r6
 80090b4:	2305      	movs	r3, #5
 80090b6:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80090ba:	2001      	movs	r0, #1
 80090bc:	f886 0091 	strb.w	r0, [r6, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80090c0:	2302      	movs	r3, #2
 80090c2:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
 80090c6:	e75f      	b.n	8008f88 <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80090c8:	2234      	movs	r2, #52	; 0x34
 80090ca:	fb02 6203 	mla	r2, r2, r3, r6
 80090ce:	2100      	movs	r1, #0
 80090d0:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
 80090d4:	e7eb      	b.n	80090ae <USBH_MSC_Process+0x13a>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80090d6:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80090da:	2234      	movs	r2, #52	; 0x34
 80090dc:	fb02 6603 	mla	r6, r2, r3, r6
 80090e0:	2001      	movs	r0, #1
 80090e2:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80090e6:	2302      	movs	r3, #2
 80090e8:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 80090ec:	e74c      	b.n	8008f88 <USBH_MSC_Process+0x14>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80090ee:	2234      	movs	r2, #52	; 0x34
 80090f0:	fb01 f202 	mul.w	r2, r1, r2
 80090f4:	3290      	adds	r2, #144	; 0x90
 80090f6:	4432      	add	r2, r6
 80090f8:	3204      	adds	r2, #4
 80090fa:	b2c9      	uxtb	r1, r1
 80090fc:	f000 fc86 	bl	8009a0c <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 8009100:	b970      	cbnz	r0, 8009120 <USBH_MSC_Process+0x1ac>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8009102:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009106:	2234      	movs	r2, #52	; 0x34
 8009108:	fb02 6203 	mla	r2, r2, r3, r6
 800910c:	2001      	movs	r0, #1
 800910e:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009112:	2100      	movs	r1, #0
 8009114:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
          MSC_Handle->current_lun++;
 8009118:	4403      	add	r3, r0
 800911a:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
 800911e:	e733      	b.n	8008f88 <USBH_MSC_Process+0x14>
        else if(scsi_status == USBH_FAIL)
 8009120:	2802      	cmp	r0, #2
 8009122:	d003      	beq.n	800912c <USBH_MSC_Process+0x1b8>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8009124:	2804      	cmp	r0, #4
 8009126:	d00b      	beq.n	8009140 <USBH_MSC_Process+0x1cc>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009128:	2001      	movs	r0, #1
 800912a:	e72d      	b.n	8008f88 <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800912c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009130:	2234      	movs	r2, #52	; 0x34
 8009132:	fb02 6603 	mla	r6, r2, r3, r6
 8009136:	2305      	movs	r3, #5
 8009138:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 800913c:	2001      	movs	r0, #1
 800913e:	e723      	b.n	8008f88 <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009140:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009144:	2234      	movs	r2, #52	; 0x34
 8009146:	fb02 6603 	mla	r6, r2, r3, r6
 800914a:	2001      	movs	r0, #1
 800914c:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009150:	2302      	movs	r3, #2
 8009152:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 8009156:	e717      	b.n	8008f88 <USBH_MSC_Process+0x14>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009158:	2234      	movs	r2, #52	; 0x34
 800915a:	fb01 f202 	mul.w	r2, r1, r2
 800915e:	3298      	adds	r2, #152	; 0x98
 8009160:	4432      	add	r2, r6
 8009162:	3204      	adds	r2, #4
 8009164:	b2c9      	uxtb	r1, r1
 8009166:	f000 fcfe 	bl	8009b66 <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 800916a:	4602      	mov	r2, r0
 800916c:	bb20      	cbnz	r0, 80091b8 <USBH_MSC_Process+0x244>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800916e:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009172:	2134      	movs	r1, #52	; 0x34
 8009174:	fb01 6103 	mla	r1, r1, r3, r6
 8009178:	f891 109c 	ldrb.w	r1, [r1, #156]	; 0x9c
 800917c:	2902      	cmp	r1, #2
 800917e:	bf18      	it	ne
 8009180:	2906      	cmpne	r1, #6
 8009182:	d110      	bne.n	80091a6 <USBH_MSC_Process+0x232>
            if((phost->Timer - MSC_Handle->timer) < 10000U)
 8009184:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
 8009188:	f8d6 00fc 	ldr.w	r0, [r6, #252]	; 0xfc
 800918c:	1a09      	subs	r1, r1, r0
 800918e:	f242 700f 	movw	r0, #9999	; 0x270f
 8009192:	4281      	cmp	r1, r0
 8009194:	d807      	bhi.n	80091a6 <USBH_MSC_Process+0x232>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009196:	2234      	movs	r2, #52	; 0x34
 8009198:	fb02 6303 	mla	r3, r2, r3, r6
 800919c:	2202      	movs	r2, #2
 800919e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80091a2:	2001      	movs	r0, #1
              break;
 80091a4:	e6f0      	b.n	8008f88 <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091a6:	2134      	movs	r1, #52	; 0x34
 80091a8:	fb01 6103 	mla	r1, r1, r3, r6
 80091ac:	2001      	movs	r0, #1
 80091ae:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
          MSC_Handle->current_lun++;
 80091b2:	4403      	add	r3, r0
 80091b4:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
        if(scsi_status == USBH_FAIL)
 80091b8:	2a02      	cmp	r2, #2
 80091ba:	d003      	beq.n	80091c4 <USBH_MSC_Process+0x250>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 80091bc:	2a04      	cmp	r2, #4
 80091be:	d00b      	beq.n	80091d8 <USBH_MSC_Process+0x264>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80091c0:	2001      	movs	r0, #1
 80091c2:	e6e1      	b.n	8008f88 <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80091c4:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80091c8:	2234      	movs	r2, #52	; 0x34
 80091ca:	fb02 6603 	mla	r6, r2, r3, r6
 80091ce:	2308      	movs	r3, #8
 80091d0:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80091d4:	2001      	movs	r0, #1
 80091d6:	e6d7      	b.n	8008f88 <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091d8:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80091dc:	2234      	movs	r2, #52	; 0x34
 80091de:	fb02 6603 	mla	r6, r2, r3, r6
 80091e2:	2001      	movs	r0, #1
 80091e4:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80091e8:	2302      	movs	r3, #2
 80091ea:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 80091ee:	e6cb      	b.n	8008f88 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun++;
 80091f0:	3101      	adds	r1, #1
 80091f2:	f8a6 10f8 	strh.w	r1, [r6, #248]	; 0xf8
  USBH_StatusTypeDef error = USBH_BUSY ;
 80091f6:	2001      	movs	r0, #1
        break;
 80091f8:	e6c6      	b.n	8008f88 <USBH_MSC_Process+0x14>
      MSC_Handle->current_lun = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
      MSC_Handle->state = MSC_IDLE;
 8009200:	2501      	movs	r5, #1
 8009202:	7335      	strb	r5, [r6, #12]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009204:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8009208:	2102      	movs	r1, #2
 800920a:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY ;
 800920c:	4628      	mov	r0, r5
 800920e:	e6bb      	b.n	8008f88 <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
 8009210:	2001      	movs	r0, #1
 8009212:	e6b9      	b.n	8008f88 <USBH_MSC_Process+0x14>
 8009214:	2001      	movs	r0, #1
 8009216:	e6b7      	b.n	8008f88 <USBH_MSC_Process+0x14>

08009218 <USBH_MSC_ClassRequest>:
{
 8009218:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800921a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800921e:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8009220:	7ba3      	ldrb	r3, [r4, #14]
 8009222:	2b02      	cmp	r3, #2
 8009224:	d004      	beq.n	8009230 <USBH_MSC_ClassRequest+0x18>
 8009226:	2b03      	cmp	r3, #3
 8009228:	d024      	beq.n	8009274 <USBH_MSC_ClassRequest+0x5c>
 800922a:	b10b      	cbz	r3, 8009230 <USBH_MSC_ClassRequest+0x18>
 800922c:	2001      	movs	r0, #1
}
 800922e:	bd38      	pop	{r3, r4, r5, pc}
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)(void *)&MSC_Handle->max_lun);
 8009230:	4621      	mov	r1, r4
 8009232:	f000 fa79 	bl	8009728 <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 8009236:	2803      	cmp	r0, #3
 8009238:	d002      	beq.n	8009240 <USBH_MSC_ClassRequest+0x28>
    if(status == USBH_OK)
 800923a:	2800      	cmp	r0, #0
 800923c:	d1f7      	bne.n	800922e <USBH_MSC_ClassRequest+0x16>
 800923e:	e001      	b.n	8009244 <USBH_MSC_ClassRequest+0x2c>
      MSC_Handle->max_lun = 0U;
 8009240:	2000      	movs	r0, #0
 8009242:	6020      	str	r0, [r4, #0]
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 8009244:	6825      	ldr	r5, [r4, #0]
 8009246:	2d02      	cmp	r5, #2
 8009248:	d804      	bhi.n	8009254 <USBH_MSC_ClassRequest+0x3c>
 800924a:	b2ed      	uxtb	r5, r5
 800924c:	3501      	adds	r5, #1
 800924e:	6025      	str	r5, [r4, #0]
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8009250:	2300      	movs	r3, #0
 8009252:	e00c      	b.n	800926e <USBH_MSC_ClassRequest+0x56>
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 8009254:	2502      	movs	r5, #2
 8009256:	e7fa      	b.n	800924e <USBH_MSC_ClassRequest+0x36>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009258:	2234      	movs	r2, #52	; 0x34
 800925a:	fb02 4203 	mla	r2, r2, r3, r4
 800925e:	2102      	movs	r1, #2
 8009260:	f882 1092 	strb.w	r1, [r2, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0U;
 8009264:	2100      	movs	r1, #0
 8009266:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 800926a:	3301      	adds	r3, #1
 800926c:	b2db      	uxtb	r3, r3
 800926e:	42ab      	cmp	r3, r5
 8009270:	d3f2      	bcc.n	8009258 <USBH_MSC_ClassRequest+0x40>
 8009272:	e7dc      	b.n	800922e <USBH_MSC_ClassRequest+0x16>
    if(USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009274:	2100      	movs	r1, #0
 8009276:	f001 fa4b 	bl	800a710 <USBH_ClrFeature>
 800927a:	b918      	cbnz	r0, 8009284 <USBH_MSC_ClassRequest+0x6c>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800927c:	7be3      	ldrb	r3, [r4, #15]
 800927e:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009280:	2001      	movs	r0, #1
 8009282:	e7d4      	b.n	800922e <USBH_MSC_ClassRequest+0x16>
 8009284:	2001      	movs	r0, #1
 8009286:	e7d2      	b.n	800922e <USBH_MSC_ClassRequest+0x16>

08009288 <USBH_MSC_InterfaceDeInit>:
{
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800928c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009290:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 8009292:	7969      	ldrb	r1, [r5, #5]
 8009294:	b969      	cbnz	r1, 80092b2 <USBH_MSC_InterfaceDeInit+0x2a>
  if ( MSC_Handle->InPipe)
 8009296:	7929      	ldrb	r1, [r5, #4]
 8009298:	b9a1      	cbnz	r1, 80092c4 <USBH_MSC_InterfaceDeInit+0x3c>
  if(phost->pActiveClass->pData)
 800929a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800929e:	69d8      	ldr	r0, [r3, #28]
 80092a0:	b128      	cbz	r0, 80092ae <USBH_MSC_InterfaceDeInit+0x26>
    USBH_free (phost->pActiveClass->pData);
 80092a2:	f010 fd7b 	bl	8019d9c <free>
    phost->pActiveClass->pData = 0U;
 80092a6:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80092aa:	2200      	movs	r2, #0
 80092ac:	61da      	str	r2, [r3, #28]
}
 80092ae:	2000      	movs	r0, #0
 80092b0:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80092b2:	f001 fabe 	bl	800a832 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 80092b6:	7969      	ldrb	r1, [r5, #5]
 80092b8:	4620      	mov	r0, r4
 80092ba:	f001 fad0 	bl	800a85e <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80092be:	2300      	movs	r3, #0
 80092c0:	716b      	strb	r3, [r5, #5]
 80092c2:	e7e8      	b.n	8009296 <USBH_MSC_InterfaceDeInit+0xe>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80092c4:	4620      	mov	r0, r4
 80092c6:	f001 fab4 	bl	800a832 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 80092ca:	7929      	ldrb	r1, [r5, #4]
 80092cc:	4620      	mov	r0, r4
 80092ce:	f001 fac6 	bl	800a85e <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80092d2:	2300      	movs	r3, #0
 80092d4:	712b      	strb	r3, [r5, #4]
 80092d6:	e7e0      	b.n	800929a <USBH_MSC_InterfaceDeInit+0x12>

080092d8 <USBH_MSC_InterfaceInit>:
{
 80092d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092da:	b085      	sub	sp, #20
 80092dc:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80092de:	f8d0 1378 	ldr.w	r1, [r0, #888]	; 0x378
 80092e2:	2350      	movs	r3, #80	; 0x50
 80092e4:	2206      	movs	r2, #6
 80092e6:	7909      	ldrb	r1, [r1, #4]
 80092e8:	f000 fe2e 	bl	8009f48 <USBH_FindInterface>
  if(interface == 0xFFU) /* Not Valid Interface */
 80092ec:	28ff      	cmp	r0, #255	; 0xff
 80092ee:	f000 808d 	beq.w	800940c <USBH_MSC_InterfaceInit+0x134>
 80092f2:	4601      	mov	r1, r0
    USBH_SelectInterface (phost, interface);
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 fe1d 	bl	8009f34 <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 80092fa:	f8d4 5378 	ldr.w	r5, [r4, #888]	; 0x378
 80092fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009302:	f010 fd43 	bl	8019d8c <malloc>
 8009306:	61e8      	str	r0, [r5, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009308:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800930c:	69dd      	ldr	r5, [r3, #28]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800930e:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8009312:	221a      	movs	r2, #26
 8009314:	fb02 4303 	mla	r3, r2, r3, r4
 8009318:	f893 234a 	ldrb.w	r2, [r3, #842]	; 0x34a
 800931c:	f993 334a 	ldrsb.w	r3, [r3, #842]	; 0x34a
 8009320:	2b00      	cmp	r3, #0
 8009322:	db5f      	blt.n	80093e4 <USBH_MSC_InterfaceInit+0x10c>
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8009324:	71aa      	strb	r2, [r5, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8009326:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800932a:	221a      	movs	r2, #26
 800932c:	fb02 4303 	mla	r3, r2, r3, r4
 8009330:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
 8009334:	812b      	strh	r3, [r5, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009336:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800933a:	221a      	movs	r2, #26
 800933c:	fb02 4303 	mla	r3, r2, r3, r4
 8009340:	f893 2352 	ldrb.w	r2, [r3, #850]	; 0x352
 8009344:	f993 3352 	ldrsb.w	r3, [r3, #850]	; 0x352
 8009348:	2b00      	cmp	r3, #0
 800934a:	db55      	blt.n	80093f8 <USBH_MSC_InterfaceInit+0x120>
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800934c:	71aa      	strb	r2, [r5, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800934e:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8009352:	221a      	movs	r2, #26
 8009354:	fb02 4303 	mla	r3, r2, r3, r4
 8009358:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
 800935c:	812b      	strh	r3, [r5, #8]
    MSC_Handle->current_lun = 0U;
 800935e:	2600      	movs	r6, #0
 8009360:	f8a5 60f8 	strh.w	r6, [r5, #248]	; 0xf8
    MSC_Handle->rw_lun = 0U;
 8009364:	f8a5 60fa 	strh.w	r6, [r5, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8009368:	732e      	strb	r6, [r5, #12]
    MSC_Handle->error = MSC_OK;
 800936a:	736e      	strb	r6, [r5, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 800936c:	73ae      	strb	r6, [r5, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800936e:	79a9      	ldrb	r1, [r5, #6]
 8009370:	4620      	mov	r0, r4
 8009372:	f001 fa63 	bl	800a83c <USBH_AllocPipe>
 8009376:	7168      	strb	r0, [r5, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009378:	79e9      	ldrb	r1, [r5, #7]
 800937a:	4620      	mov	r0, r4
 800937c:	f001 fa5e 	bl	800a83c <USBH_AllocPipe>
 8009380:	7128      	strb	r0, [r5, #4]
    USBH_MSC_BOT_Init(phost);
 8009382:	4620      	mov	r0, r4
 8009384:	f000 f9de 	bl	8009744 <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 8009388:	2268      	movs	r2, #104	; 0x68
 800938a:	4631      	mov	r1, r6
 800938c:	f105 0090 	add.w	r0, r5, #144	; 0x90
 8009390:	f010 fd34 	bl	8019dfc <memset>
    USBH_OpenPipe  (phost,
 8009394:	79aa      	ldrb	r2, [r5, #6]
 8009396:	7969      	ldrb	r1, [r5, #5]
 8009398:	892b      	ldrh	r3, [r5, #8]
 800939a:	9302      	str	r3, [sp, #8]
 800939c:	2702      	movs	r7, #2
 800939e:	9701      	str	r7, [sp, #4]
 80093a0:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80093aa:	4620      	mov	r0, r4
 80093ac:	f001 fa31 	bl	800a812 <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 80093b0:	79ea      	ldrb	r2, [r5, #7]
 80093b2:	7929      	ldrb	r1, [r5, #4]
 80093b4:	896b      	ldrh	r3, [r5, #10]
 80093b6:	9302      	str	r3, [sp, #8]
 80093b8:	9701      	str	r7, [sp, #4]
 80093ba:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80093c4:	4620      	mov	r0, r4
 80093c6:	f001 fa24 	bl	800a812 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, MSC_Handle->InPipe, 0U);
 80093ca:	4632      	mov	r2, r6
 80093cc:	7929      	ldrb	r1, [r5, #4]
 80093ce:	4620      	mov	r0, r4
 80093d0:	f00f fad7 	bl	8018982 <USBH_LL_SetToggle>
    USBH_LL_SetToggle (phost, MSC_Handle->OutPipe, 0U);
 80093d4:	4632      	mov	r2, r6
 80093d6:	7969      	ldrb	r1, [r5, #5]
 80093d8:	4620      	mov	r0, r4
 80093da:	f00f fad2 	bl	8018982 <USBH_LL_SetToggle>
    status = USBH_OK;
 80093de:	4630      	mov	r0, r6
}
 80093e0:	b005      	add	sp, #20
 80093e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80093e4:	71ea      	strb	r2, [r5, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80093e6:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80093ea:	221a      	movs	r2, #26
 80093ec:	fb02 4303 	mla	r3, r2, r3, r4
 80093f0:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
 80093f4:	816b      	strh	r3, [r5, #10]
 80093f6:	e79e      	b.n	8009336 <USBH_MSC_InterfaceInit+0x5e>
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80093f8:	71ea      	strb	r2, [r5, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80093fa:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80093fe:	221a      	movs	r2, #26
 8009400:	fb02 4303 	mla	r3, r2, r3, r4
 8009404:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
 8009408:	816b      	strh	r3, [r5, #10]
 800940a:	e7a8      	b.n	800935e <USBH_MSC_InterfaceInit+0x86>
    status = USBH_FAIL;
 800940c:	2002      	movs	r0, #2
 800940e:	e7e7      	b.n	80093e0 <USBH_MSC_InterfaceInit+0x108>

08009410 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009410:	b530      	push	{r4, r5, lr}
 8009412:	b083      	sub	sp, #12
 8009414:	460c      	mov	r4, r1
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009416:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800941a:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800941c:	2334      	movs	r3, #52	; 0x34
 800941e:	fb03 5301 	mla	r3, r3, r1, r5
 8009422:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009426:	2b06      	cmp	r3, #6
 8009428:	d006      	beq.n	8009438 <USBH_MSC_RdWrProcess+0x28>
 800942a:	2b07      	cmp	r3, #7
 800942c:	d027      	beq.n	800947e <USBH_MSC_RdWrProcess+0x6e>
 800942e:	2b05      	cmp	r3, #5
 8009430:	d048      	beq.n	80094c4 <USBH_MSC_RdWrProcess+0xb4>
 8009432:	2001      	movs	r0, #1
  default:
    break;

  }
  return error;
}
 8009434:	b003      	add	sp, #12
 8009436:	bd30      	pop	{r4, r5, pc}
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 8009438:	2200      	movs	r2, #0
 800943a:	9200      	str	r2, [sp, #0]
 800943c:	4613      	mov	r3, r2
 800943e:	f000 fc1e 	bl	8009c7e <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 8009442:	b930      	cbnz	r0, 8009452 <USBH_MSC_RdWrProcess+0x42>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8009444:	2134      	movs	r1, #52	; 0x34
 8009446:	fb01 5404 	mla	r4, r1, r4, r5
 800944a:	2301      	movs	r3, #1
 800944c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      error = USBH_OK;
 8009450:	e7f0      	b.n	8009434 <USBH_MSC_RdWrProcess+0x24>
    else if( scsi_status == USBH_FAIL)
 8009452:	2802      	cmp	r0, #2
 8009454:	d003      	beq.n	800945e <USBH_MSC_RdWrProcess+0x4e>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 8009456:	2804      	cmp	r0, #4
 8009458:	d009      	beq.n	800946e <USBH_MSC_RdWrProcess+0x5e>
  USBH_StatusTypeDef error = USBH_BUSY ;
 800945a:	2001      	movs	r0, #1
 800945c:	e7ea      	b.n	8009434 <USBH_MSC_RdWrProcess+0x24>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800945e:	2334      	movs	r3, #52	; 0x34
 8009460:	fb03 5404 	mla	r4, r3, r4, r5
 8009464:	2305      	movs	r3, #5
 8009466:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 800946a:	2001      	movs	r0, #1
 800946c:	e7e2      	b.n	8009434 <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800946e:	2334      	movs	r3, #52	; 0x34
 8009470:	fb03 5404 	mla	r4, r3, r4, r5
 8009474:	2308      	movs	r3, #8
 8009476:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_FAIL;
 800947a:	2002      	movs	r0, #2
 800947c:	e7da      	b.n	8009434 <USBH_MSC_RdWrProcess+0x24>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 800947e:	2200      	movs	r2, #0
 8009480:	9200      	str	r2, [sp, #0]
 8009482:	4613      	mov	r3, r2
 8009484:	f000 fbb5 	bl	8009bf2 <USBH_MSC_SCSI_Write>
    if(scsi_status == USBH_OK)
 8009488:	b930      	cbnz	r0, 8009498 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800948a:	2134      	movs	r1, #52	; 0x34
 800948c:	fb01 5404 	mla	r4, r1, r4, r5
 8009490:	2301      	movs	r3, #1
 8009492:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_OK;
 8009496:	e7cd      	b.n	8009434 <USBH_MSC_RdWrProcess+0x24>
    else if( scsi_status == USBH_FAIL)
 8009498:	2802      	cmp	r0, #2
 800949a:	d003      	beq.n	80094a4 <USBH_MSC_RdWrProcess+0x94>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 800949c:	2804      	cmp	r0, #4
 800949e:	d009      	beq.n	80094b4 <USBH_MSC_RdWrProcess+0xa4>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80094a0:	2001      	movs	r0, #1
 80094a2:	e7c7      	b.n	8009434 <USBH_MSC_RdWrProcess+0x24>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80094a4:	2334      	movs	r3, #52	; 0x34
 80094a6:	fb03 5404 	mla	r4, r3, r4, r5
 80094aa:	2305      	movs	r3, #5
 80094ac:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80094b0:	2001      	movs	r0, #1
 80094b2:	e7bf      	b.n	8009434 <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80094b4:	2334      	movs	r3, #52	; 0x34
 80094b6:	fb03 5404 	mla	r4, r3, r4, r5
 80094ba:	2308      	movs	r3, #8
 80094bc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_FAIL;
 80094c0:	2002      	movs	r0, #2
 80094c2:	e7b7      	b.n	8009434 <USBH_MSC_RdWrProcess+0x24>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80094c4:	2234      	movs	r2, #52	; 0x34
 80094c6:	fb01 f202 	mul.w	r2, r1, r2
 80094ca:	3298      	adds	r2, #152	; 0x98
 80094cc:	442a      	add	r2, r5
 80094ce:	3204      	adds	r2, #4
 80094d0:	f000 fb49 	bl	8009b66 <USBH_MSC_SCSI_RequestSense>
    if(scsi_status == USBH_OK)
 80094d4:	4603      	mov	r3, r0
 80094d6:	b9a0      	cbnz	r0, 8009502 <USBH_MSC_RdWrProcess+0xf2>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 80094d8:	2234      	movs	r2, #52	; 0x34
 80094da:	fb02 5204 	mla	r2, r2, r4, r5
 80094de:	2101      	movs	r1, #1
 80094e0:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
      MSC_Handle->unit[lun].error = MSC_ERROR;
 80094e4:	2002      	movs	r0, #2
 80094e6:	f882 0091 	strb.w	r0, [r2, #145]	; 0x91
    if(scsi_status == USBH_FAIL)
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d0a2      	beq.n	8009434 <USBH_MSC_RdWrProcess+0x24>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	d1a0      	bne.n	8009434 <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80094f2:	2334      	movs	r3, #52	; 0x34
 80094f4:	fb03 5404 	mla	r4, r3, r4, r5
 80094f8:	2308      	movs	r3, #8
 80094fa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_FAIL;
 80094fe:	2002      	movs	r0, #2
 8009500:	e798      	b.n	8009434 <USBH_MSC_RdWrProcess+0x24>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009502:	2001      	movs	r0, #1
 8009504:	e7f1      	b.n	80094ea <USBH_MSC_RdWrProcess+0xda>

08009506 <USBH_MSC_UnitIsReady>:
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009506:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800950a:	69da      	ldr	r2, [r3, #28]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800950c:	7803      	ldrb	r3, [r0, #0]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b0b      	cmp	r3, #11
 8009512:	d001      	beq.n	8009518 <USBH_MSC_UnitIsReady+0x12>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8009514:	2000      	movs	r0, #0
 8009516:	4770      	bx	lr
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009518:	2334      	movs	r3, #52	; 0x34
 800951a:	fb03 2101 	mla	r1, r3, r1, r2
 800951e:	f891 3091 	ldrb.w	r3, [r1, #145]	; 0x91
 8009522:	b10b      	cbz	r3, 8009528 <USBH_MSC_UnitIsReady+0x22>
    res = 0U;
 8009524:	2000      	movs	r0, #0
 8009526:	4770      	bx	lr
    res = 1U;
 8009528:	2001      	movs	r0, #1
  }

  return res;
}
 800952a:	4770      	bx	lr

0800952c <USBH_MSC_GetLUNInfo>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800952c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009530:	69db      	ldr	r3, [r3, #28]
  if(phost->gState == HOST_CLASS)
 8009532:	7800      	ldrb	r0, [r0, #0]
 8009534:	b2c0      	uxtb	r0, r0
 8009536:	280b      	cmp	r0, #11
 8009538:	d001      	beq.n	800953e <USBH_MSC_GetLUNInfo+0x12>
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 800953a:	2002      	movs	r0, #2
  }
}
 800953c:	4770      	bx	lr
{
 800953e:	b510      	push	{r4, lr}
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009540:	2034      	movs	r0, #52	; 0x34
 8009542:	fb00 f101 	mul.w	r1, r0, r1
 8009546:	3190      	adds	r1, #144	; 0x90
 8009548:	440b      	add	r3, r1
 800954a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800954e:	f8d3 e000 	ldr.w	lr, [r3]
 8009552:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009556:	6898      	ldr	r0, [r3, #8]
 8009558:	68d9      	ldr	r1, [r3, #12]
 800955a:	f8c2 e000 	str.w	lr, [r2]
 800955e:	f8c2 c004 	str.w	ip, [r2, #4]
 8009562:	6090      	str	r0, [r2, #8]
 8009564:	60d1      	str	r1, [r2, #12]
 8009566:	3310      	adds	r3, #16
 8009568:	3210      	adds	r2, #16
 800956a:	42a3      	cmp	r3, r4
 800956c:	d1ef      	bne.n	800954e <USBH_MSC_GetLUNInfo+0x22>
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6013      	str	r3, [r2, #0]
    return USBH_OK;
 8009572:	2000      	movs	r0, #0
}
 8009574:	bd10      	pop	{r4, pc}

08009576 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8009576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	460d      	mov	r5, r1
 800957e:	9e08      	ldr	r6, [sp, #32]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009580:	f8d0 1378 	ldr.w	r1, [r0, #888]	; 0x378
 8009584:	69cf      	ldr	r7, [r1, #28]

  if ((phost->device.is_connected == 0U) ||
 8009586:	f890 131e 	ldrb.w	r1, [r0, #798]	; 0x31e
 800958a:	b3c9      	cbz	r1, 8009600 <USBH_MSC_Read+0x8a>
 800958c:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 800958e:	7801      	ldrb	r1, [r0, #0]
 8009590:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 8009592:	290b      	cmp	r1, #11
 8009594:	d136      	bne.n	8009604 <USBH_MSC_Read+0x8e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009596:	2134      	movs	r1, #52	; 0x34
 8009598:	fb01 7105 	mla	r1, r1, r5, r7
 800959c:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
      (phost->gState != HOST_CLASS) ||
 80095a0:	2901      	cmp	r1, #1
 80095a2:	d001      	beq.n	80095a8 <USBH_MSC_Read+0x32>
  {
    return  USBH_FAIL;
 80095a4:	2002      	movs	r0, #2
 80095a6:	e02e      	b.n	8009606 <USBH_MSC_Read+0x90>
  }

  MSC_Handle->state = MSC_READ;
 80095a8:	2006      	movs	r0, #6
 80095aa:	7338      	strb	r0, [r7, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80095ac:	2134      	movs	r1, #52	; 0x34
 80095ae:	fb01 7105 	mla	r1, r1, r5, r7
 80095b2:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 80095b6:	f8a7 50fa 	strh.w	r5, [r7, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80095ba:	9600      	str	r6, [sp, #0]
 80095bc:	4629      	mov	r1, r5
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 fb5d 	bl	8009c7e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80095c4:	f8d4 83bc 	ldr.w	r8, [r4, #956]	; 0x3bc

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80095c8:	4629      	mov	r1, r5
 80095ca:	4620      	mov	r0, r4
 80095cc:	f7ff ff20 	bl	8009410 <USBH_MSC_RdWrProcess>
 80095d0:	2801      	cmp	r0, #1
 80095d2:	d111      	bne.n	80095f8 <USBH_MSC_Read+0x82>
  {
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80095d4:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
 80095d8:	eba2 0208 	sub.w	r2, r2, r8
 80095dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80095e0:	fb06 f303 	mul.w	r3, r6, r3
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d803      	bhi.n	80095f0 <USBH_MSC_Read+0x7a>
 80095e8:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1eb      	bne.n	80095c8 <USBH_MSC_Read+0x52>
    {
      MSC_Handle->state = MSC_IDLE;
 80095f0:	2301      	movs	r3, #1
 80095f2:	733b      	strb	r3, [r7, #12]
      return USBH_FAIL;
 80095f4:	2002      	movs	r0, #2
 80095f6:	e006      	b.n	8009606 <USBH_MSC_Read+0x90>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80095f8:	2301      	movs	r3, #1
 80095fa:	733b      	strb	r3, [r7, #12]

  return USBH_OK;
 80095fc:	2000      	movs	r0, #0
 80095fe:	e002      	b.n	8009606 <USBH_MSC_Read+0x90>
    return  USBH_FAIL;
 8009600:	2002      	movs	r0, #2
 8009602:	e000      	b.n	8009606 <USBH_MSC_Read+0x90>
 8009604:	2002      	movs	r0, #2
}
 8009606:	b002      	add	sp, #8
 8009608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800960c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800960c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	460d      	mov	r5, r1
 8009614:	9e08      	ldr	r6, [sp, #32]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009616:	f8d0 1378 	ldr.w	r1, [r0, #888]	; 0x378
 800961a:	69cf      	ldr	r7, [r1, #28]

  if ((phost->device.is_connected == 0U) ||
 800961c:	f890 131e 	ldrb.w	r1, [r0, #798]	; 0x31e
 8009620:	b3c9      	cbz	r1, 8009696 <USBH_MSC_Write+0x8a>
 8009622:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8009624:	7801      	ldrb	r1, [r0, #0]
 8009626:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 8009628:	290b      	cmp	r1, #11
 800962a:	d136      	bne.n	800969a <USBH_MSC_Write+0x8e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800962c:	2134      	movs	r1, #52	; 0x34
 800962e:	fb01 7105 	mla	r1, r1, r5, r7
 8009632:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
      (phost->gState != HOST_CLASS) ||
 8009636:	2901      	cmp	r1, #1
 8009638:	d001      	beq.n	800963e <USBH_MSC_Write+0x32>
  {
    return  USBH_FAIL;
 800963a:	2002      	movs	r0, #2
 800963c:	e02e      	b.n	800969c <USBH_MSC_Write+0x90>
  }

  MSC_Handle->state = MSC_WRITE;
 800963e:	2007      	movs	r0, #7
 8009640:	7338      	strb	r0, [r7, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009642:	2134      	movs	r1, #52	; 0x34
 8009644:	fb01 7105 	mla	r1, r1, r5, r7
 8009648:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 800964c:	f8a7 50fa 	strh.w	r5, [r7, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009650:	9600      	str	r6, [sp, #0]
 8009652:	4629      	mov	r1, r5
 8009654:	4620      	mov	r0, r4
 8009656:	f000 facc 	bl	8009bf2 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800965a:	f8d4 83bc 	ldr.w	r8, [r4, #956]	; 0x3bc
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800965e:	4629      	mov	r1, r5
 8009660:	4620      	mov	r0, r4
 8009662:	f7ff fed5 	bl	8009410 <USBH_MSC_RdWrProcess>
 8009666:	2801      	cmp	r0, #1
 8009668:	d111      	bne.n	800968e <USBH_MSC_Write+0x82>
  {
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 800966a:	f8d4 23bc 	ldr.w	r2, [r4, #956]	; 0x3bc
 800966e:	eba2 0208 	sub.w	r2, r2, r8
 8009672:	f242 7310 	movw	r3, #10000	; 0x2710
 8009676:	fb06 f303 	mul.w	r3, r6, r3
 800967a:	429a      	cmp	r2, r3
 800967c:	d803      	bhi.n	8009686 <USBH_MSC_Write+0x7a>
 800967e:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1eb      	bne.n	800965e <USBH_MSC_Write+0x52>
    {
      MSC_Handle->state = MSC_IDLE;
 8009686:	2301      	movs	r3, #1
 8009688:	733b      	strb	r3, [r7, #12]
      return USBH_FAIL;
 800968a:	2002      	movs	r0, #2
 800968c:	e006      	b.n	800969c <USBH_MSC_Write+0x90>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800968e:	2301      	movs	r3, #1
 8009690:	733b      	strb	r3, [r7, #12]
  return USBH_OK;
 8009692:	2000      	movs	r0, #0
 8009694:	e002      	b.n	800969c <USBH_MSC_Write+0x90>
    return  USBH_FAIL;
 8009696:	2002      	movs	r0, #2
 8009698:	e000      	b.n	800969c <USBH_MSC_Write+0x90>
 800969a:	2002      	movs	r0, #2
}
 800969c:	b002      	add	sp, #8
 800969e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080096a4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80096a4:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096a6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80096aa:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

    /*Checking if the transfer length is different than 13*/
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80096ac:	7921      	ldrb	r1, [r4, #4]
 80096ae:	f00f f945 	bl	801893c <USBH_LL_GetLastXferSize>
 80096b2:	280d      	cmp	r0, #13
 80096b4:	d001      	beq.n	80096ba <USBH_MSC_DecodeCSW+0x16>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/


      status = BOT_CSW_PHASE_ERROR;
 80096b6:	2002      	movs	r0, #2
        status = BOT_CSW_PHASE_ERROR;
      }
    } /* CSW Length Check*/

  return status;
}
 80096b8:	bd10      	pop	{r4, pc}
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80096ba:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <USBH_MSC_DecodeCSW+0x44>)
 80096be:	429a      	cmp	r2, r3
 80096c0:	d001      	beq.n	80096c6 <USBH_MSC_DecodeCSW+0x22>
        status = BOT_CSW_PHASE_ERROR;
 80096c2:	2002      	movs	r0, #2
 80096c4:	e7f8      	b.n	80096b8 <USBH_MSC_DecodeCSW+0x14>
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80096c6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80096c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d001      	beq.n	80096d2 <USBH_MSC_DecodeCSW+0x2e>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80096ce:	2001      	movs	r0, #1
 80096d0:	e7f2      	b.n	80096b8 <USBH_MSC_DecodeCSW+0x14>
          if(MSC_Handle->hbot.csw.field.Status == 0U)
 80096d2:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d0ee      	beq.n	80096b8 <USBH_MSC_DecodeCSW+0x14>
          else if(MSC_Handle->hbot.csw.field.Status == 1U)
 80096da:	2801      	cmp	r0, #1
 80096dc:	d0ec      	beq.n	80096b8 <USBH_MSC_DecodeCSW+0x14>
          else if(MSC_Handle->hbot.csw.field.Status == 2U)
 80096de:	2802      	cmp	r0, #2
 80096e0:	d0ea      	beq.n	80096b8 <USBH_MSC_DecodeCSW+0x14>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80096e2:	2001      	movs	r0, #1
 80096e4:	e7e8      	b.n	80096b8 <USBH_MSC_DecodeCSW+0x14>
 80096e6:	bf00      	nop
 80096e8:	53425355 	.word	0x53425355

080096ec <USBH_MSC_BOT_Abort>:
{
 80096ec:	b508      	push	{r3, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ee:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80096f2:	69d9      	ldr	r1, [r3, #28]
  switch (dir)
 80096f4:	b11a      	cbz	r2, 80096fe <USBH_MSC_BOT_Abort+0x12>
 80096f6:	2a01      	cmp	r2, #1
 80096f8:	d005      	beq.n	8009706 <USBH_MSC_BOT_Abort+0x1a>
 80096fa:	2002      	movs	r0, #2
}
 80096fc:	bd08      	pop	{r3, pc}
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80096fe:	79c9      	ldrb	r1, [r1, #7]
 8009700:	f001 f806 	bl	800a710 <USBH_ClrFeature>
    break;
 8009704:	e7fa      	b.n	80096fc <USBH_MSC_BOT_Abort+0x10>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009706:	7989      	ldrb	r1, [r1, #6]
 8009708:	f001 f802 	bl	800a710 <USBH_ClrFeature>
    break;
 800970c:	e7f6      	b.n	80096fc <USBH_MSC_BOT_Abort+0x10>

0800970e <USBH_MSC_BOT_REQ_Reset>:
{
 800970e:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009710:	2221      	movs	r2, #33	; 0x21
 8009712:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009714:	22ff      	movs	r2, #255	; 0xff
 8009716:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009718:	2100      	movs	r1, #0
 800971a:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800971c:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800971e:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8009720:	460a      	mov	r2, r1
 8009722:	f000 ff32 	bl	800a58a <USBH_CtlReq>
}
 8009726:	bd08      	pop	{r3, pc}

08009728 <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
 8009728:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800972a:	22a1      	movs	r2, #161	; 0xa1
 800972c:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800972e:	22fe      	movs	r2, #254	; 0xfe
 8009730:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009732:	2200      	movs	r2, #0
 8009734:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009736:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009738:	2201      	movs	r2, #1
 800973a:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, Maxlun, 1U);
 800973c:	f000 ff25 	bl	800a58a <USBH_CtlReq>
}
 8009740:	bd08      	pop	{r3, pc}
	...

08009744 <USBH_MSC_BOT_Init>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009744:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009748:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800974a:	4a05      	ldr	r2, [pc, #20]	; (8009760 <USBH_MSC_BOT_Init+0x1c>)
 800974c:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800974e:	4a05      	ldr	r2, [pc, #20]	; (8009764 <USBH_MSC_BOT_Init+0x20>)
 8009750:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009758:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 800975c:	2000      	movs	r0, #0
 800975e:	4770      	bx	lr
 8009760:	43425355 	.word	0x43425355
 8009764:	20304050 	.word	0x20304050

08009768 <USBH_MSC_BOT_Process>:
{
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	4605      	mov	r5, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800976e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009772:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->hbot.state)
 8009774:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 8009778:	1e63      	subs	r3, r4, #1
 800977a:	2b0a      	cmp	r3, #10
 800977c:	f200 811d 	bhi.w	80099ba <USBH_MSC_BOT_Process+0x252>
 8009780:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009784:	001b000b 	.word	0x001b000b
 8009788:	004d0042 	.word	0x004d0042
 800978c:	00830077 	.word	0x00830077
 8009790:	00c100b6 	.word	0x00c100b6
 8009794:	00ef00dd 	.word	0x00ef00dd
 8009798:	0111      	.short	0x0111
    MSC_Handle->hbot.cbw.field.LUN = lun;
 800979a:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800979e:	2302      	movs	r3, #2
 80097a0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 80097a4:	7973      	ldrb	r3, [r6, #5]
 80097a6:	2201      	movs	r2, #1
 80097a8:	9200      	str	r2, [sp, #0]
 80097aa:	221f      	movs	r2, #31
 80097ac:	f106 0154 	add.w	r1, r6, #84	; 0x54
 80097b0:	f000 fff7 	bl	800a7a2 <USBH_BulkSendData>
}
 80097b4:	4620      	mov	r0, r4
 80097b6:	b002      	add	sp, #8
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80097ba:	7971      	ldrb	r1, [r6, #5]
 80097bc:	f00f f8c4 	bl	8018948 <USBH_LL_GetURBState>
 80097c0:	4604      	mov	r4, r0
    if(URB_Status == USBH_URB_DONE)
 80097c2:	2801      	cmp	r0, #1
 80097c4:	d005      	beq.n	80097d2 <USBH_MSC_BOT_Process+0x6a>
    else if(URB_Status == USBH_URB_NOTREADY)
 80097c6:	2802      	cmp	r0, #2
 80097c8:	d015      	beq.n	80097f6 <USBH_MSC_BOT_Process+0x8e>
      if(URB_Status == USBH_URB_STALL)
 80097ca:	2805      	cmp	r0, #5
 80097cc:	d017      	beq.n	80097fe <USBH_MSC_BOT_Process+0x96>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80097ce:	2401      	movs	r4, #1
 80097d0:	e7f0      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80097d2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80097d4:	b15b      	cbz	r3, 80097ee <USBH_MSC_BOT_Process+0x86>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80097d6:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 80097da:	2b00      	cmp	r3, #0
 80097dc:	db03      	blt.n	80097e6 <USBH_MSC_BOT_Process+0x7e>
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 80097de:	2305      	movs	r3, #5
 80097e0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80097e4:	e7e6      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_DATA_IN;
 80097e6:	2303      	movs	r3, #3
 80097e8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80097ec:	e7e2      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80097ee:	2307      	movs	r3, #7
 80097f0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80097f4:	e7de      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097f6:	2401      	movs	r4, #1
 80097f8:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
 80097fc:	e7da      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80097fe:	230a      	movs	r3, #10
 8009800:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009804:	2401      	movs	r4, #1
 8009806:	e7d5      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8009808:	7933      	ldrb	r3, [r6, #4]
 800980a:	8972      	ldrh	r2, [r6, #10]
 800980c:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8009810:	f000 ffdd 	bl	800a7ce <USBH_BulkReceiveData>
    MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009814:	2304      	movs	r3, #4
 8009816:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800981a:	2401      	movs	r4, #1
    break;
 800981c:	e7ca      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800981e:	7931      	ldrb	r1, [r6, #4]
 8009820:	f00f f892 	bl	8018948 <USBH_LL_GetURBState>
 8009824:	4604      	mov	r4, r0
    if(URB_Status == USBH_URB_DONE)
 8009826:	2801      	cmp	r0, #1
 8009828:	d003      	beq.n	8009832 <USBH_MSC_BOT_Process+0xca>
    else if(URB_Status == USBH_URB_STALL)
 800982a:	2805      	cmp	r0, #5
 800982c:	d01c      	beq.n	8009868 <USBH_MSC_BOT_Process+0x100>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800982e:	2401      	movs	r4, #1
 8009830:	e7c0      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009832:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8009834:	8972      	ldrh	r2, [r6, #10]
 8009836:	4293      	cmp	r3, r2
 8009838:	d90c      	bls.n	8009854 <USBH_MSC_BOT_Process+0xec>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800983a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800983e:	4411      	add	r1, r2
 8009840:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009844:	1a9b      	subs	r3, r3, r2
 8009846:	65f3      	str	r3, [r6, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009848:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800984a:	b933      	cbnz	r3, 800985a <USBH_MSC_BOT_Process+0xf2>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800984c:	2307      	movs	r3, #7
 800984e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8009852:	e7af      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	65f3      	str	r3, [r6, #92]	; 0x5c
 8009858:	e7f6      	b.n	8009848 <USBH_MSC_BOT_Process+0xe0>
        USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 800985a:	7933      	ldrb	r3, [r6, #4]
 800985c:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8009860:	4628      	mov	r0, r5
 8009862:	f000 ffb4 	bl	800a7ce <USBH_BulkReceiveData>
 8009866:	e7a5      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009868:	2309      	movs	r3, #9
 800986a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800986e:	2401      	movs	r4, #1
 8009870:	e7a0      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8009872:	7973      	ldrb	r3, [r6, #5]
 8009874:	8932      	ldrh	r2, [r6, #8]
 8009876:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800987a:	2401      	movs	r4, #1
 800987c:	9400      	str	r4, [sp, #0]
 800987e:	f000 ff90 	bl	800a7a2 <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009882:	2306      	movs	r3, #6
 8009884:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    break;
 8009888:	e794      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800988a:	7971      	ldrb	r1, [r6, #5]
 800988c:	f00f f85c 	bl	8018948 <USBH_LL_GetURBState>
 8009890:	4604      	mov	r4, r0
    if(URB_Status == USBH_URB_DONE)
 8009892:	2801      	cmp	r0, #1
 8009894:	d005      	beq.n	80098a2 <USBH_MSC_BOT_Process+0x13a>
    else if(URB_Status == USBH_URB_NOTREADY)
 8009896:	2802      	cmp	r0, #2
 8009898:	d020      	beq.n	80098dc <USBH_MSC_BOT_Process+0x174>
    else if(URB_Status == USBH_URB_STALL)
 800989a:	2805      	cmp	r0, #5
 800989c:	d023      	beq.n	80098e6 <USBH_MSC_BOT_Process+0x17e>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800989e:	2401      	movs	r4, #1
 80098a0:	e788      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80098a2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80098a4:	8932      	ldrh	r2, [r6, #8]
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d90c      	bls.n	80098c4 <USBH_MSC_BOT_Process+0x15c>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80098aa:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80098ae:	4411      	add	r1, r2
 80098b0:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80098b4:	1a9b      	subs	r3, r3, r2
 80098b6:	65f3      	str	r3, [r6, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80098b8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80098ba:	b933      	cbnz	r3, 80098ca <USBH_MSC_BOT_Process+0x162>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80098bc:	2307      	movs	r3, #7
 80098be:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80098c2:	e777      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	65f3      	str	r3, [r6, #92]	; 0x5c
 80098c8:	e7f6      	b.n	80098b8 <USBH_MSC_BOT_Process+0x150>
        USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 80098ca:	7973      	ldrb	r3, [r6, #5]
 80098cc:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80098d0:	2001      	movs	r0, #1
 80098d2:	9000      	str	r0, [sp, #0]
 80098d4:	4628      	mov	r0, r5
 80098d6:	f000 ff64 	bl	800a7a2 <USBH_BulkSendData>
 80098da:	e76b      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80098dc:	2305      	movs	r3, #5
 80098de:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80098e2:	2401      	movs	r4, #1
 80098e4:	e766      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80098e6:	230a      	movs	r3, #10
 80098e8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80098ec:	2401      	movs	r4, #1
 80098ee:	e761      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 80098f0:	7933      	ldrb	r3, [r6, #4]
 80098f2:	220d      	movs	r2, #13
 80098f4:	f106 0178 	add.w	r1, r6, #120	; 0x78
 80098f8:	f000 ff69 	bl	800a7ce <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80098fc:	2308      	movs	r3, #8
 80098fe:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009902:	2401      	movs	r4, #1
    break;
 8009904:	e756      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009906:	7931      	ldrb	r1, [r6, #4]
 8009908:	f00f f81e 	bl	8018948 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800990c:	2801      	cmp	r0, #1
 800990e:	d003      	beq.n	8009918 <USBH_MSC_BOT_Process+0x1b0>
    else if(URB_Status == USBH_URB_STALL)
 8009910:	2805      	cmp	r0, #5
 8009912:	d00f      	beq.n	8009934 <USBH_MSC_BOT_Process+0x1cc>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009914:	2401      	movs	r4, #1
 8009916:	e74d      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009918:	2301      	movs	r3, #1
 800991a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800991e:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009922:	4628      	mov	r0, r5
 8009924:	f7ff febe 	bl	80096a4 <USBH_MSC_DecodeCSW>
      if(CSW_Status == BOT_CSW_CMD_PASSED)
 8009928:	4604      	mov	r4, r0
 800992a:	2800      	cmp	r0, #0
 800992c:	f43f af42 	beq.w	80097b4 <USBH_MSC_BOT_Process+0x4c>
        status = USBH_FAIL;
 8009930:	2402      	movs	r4, #2
 8009932:	e73f      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009934:	2309      	movs	r3, #9
 8009936:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800993a:	2401      	movs	r4, #1
 800993c:	e73a      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800993e:	2200      	movs	r2, #0
 8009940:	f7ff fed4 	bl	80096ec <USBH_MSC_BOT_Abort>
    if (error == USBH_OK)
 8009944:	b920      	cbnz	r0, 8009950 <USBH_MSC_BOT_Process+0x1e8>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009946:	2307      	movs	r3, #7
 8009948:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800994c:	2401      	movs	r4, #1
 800994e:	e731      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    else if (error == USBH_UNRECOVERED_ERROR)
 8009950:	2804      	cmp	r0, #4
 8009952:	d001      	beq.n	8009958 <USBH_MSC_BOT_Process+0x1f0>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009954:	2401      	movs	r4, #1
 8009956:	e72d      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009958:	230b      	movs	r3, #11
 800995a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800995e:	2401      	movs	r4, #1
 8009960:	e728      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009962:	2201      	movs	r2, #1
 8009964:	f7ff fec2 	bl	80096ec <USBH_MSC_BOT_Abort>
    if (error == USBH_OK)
 8009968:	b118      	cbz	r0, 8009972 <USBH_MSC_BOT_Process+0x20a>
      if (error == USBH_UNRECOVERED_ERROR)
 800996a:	2804      	cmp	r0, #4
 800996c:	d016      	beq.n	800999c <USBH_MSC_BOT_Process+0x234>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800996e:	2401      	movs	r4, #1
 8009970:	e720      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009972:	7971      	ldrb	r1, [r6, #5]
 8009974:	4628      	mov	r0, r5
 8009976:	f00f f81c 	bl	80189b2 <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800997a:	f1c0 0201 	rsb	r2, r0, #1
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	7971      	ldrb	r1, [r6, #5]
 8009982:	4628      	mov	r0, r5
 8009984:	f00e fffd 	bl	8018982 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009988:	2200      	movs	r2, #0
 800998a:	7931      	ldrb	r1, [r6, #4]
 800998c:	4628      	mov	r0, r5
 800998e:	f00e fff8 	bl	8018982 <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009992:	2309      	movs	r3, #9
 8009994:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009998:	2401      	movs	r4, #1
 800999a:	e70b      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800999c:	230b      	movs	r3, #11
 800999e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80099a2:	2401      	movs	r4, #1
 80099a4:	e706      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
    status = USBH_MSC_BOT_REQ_Reset(phost);
 80099a6:	f7ff feb2 	bl	800970e <USBH_MSC_BOT_REQ_Reset>
    if ( status == USBH_OK)
 80099aa:	4604      	mov	r4, r0
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f47f af01 	bne.w	80097b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099b2:	2301      	movs	r3, #1
 80099b4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80099b8:	e6fc      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>
  switch (MSC_Handle->hbot.state)
 80099ba:	2401      	movs	r4, #1
 80099bc:	e6fa      	b.n	80097b4 <USBH_MSC_BOT_Process+0x4c>

080099be <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost,
                                                uint8_t lun)
{
 80099be:	b508      	push	{r3, lr}
 80099c0:	4602      	mov	r2, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099c2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80099c6:	69db      	ldr	r3, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 80099c8:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 80099cc:	2801      	cmp	r0, #1
 80099ce:	d003      	beq.n	80099d8 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 80099d0:	2802      	cmp	r0, #2
 80099d2:	d017      	beq.n	8009a04 <USBH_MSC_SCSI_TestUnitReady+0x46>
 80099d4:	2002      	movs	r0, #2
  default:
    break;
  }

  return error;
}
 80099d6:	bd08      	pop	{r3, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80099d8:	2200      	movs	r2, #0
 80099da:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80099dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80099e0:	210a      	movs	r1, #10
 80099e2:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099e6:	f8c3 2063 	str.w	r2, [r3, #99]	; 0x63
 80099ea:	f8c3 2067 	str.w	r2, [r3, #103]	; 0x67
 80099ee:	f8c3 206b 	str.w	r2, [r3, #107]	; 0x6b
 80099f2:	f8c3 206f 	str.w	r2, [r3, #111]	; 0x6f
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80099fc:	2202      	movs	r2, #2
 80099fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    break;
 8009a02:	e7e8      	b.n	80099d6 <USBH_MSC_SCSI_TestUnitReady+0x18>
    error = USBH_MSC_BOT_Process(phost, lun);
 8009a04:	4610      	mov	r0, r2
 8009a06:	f7ff feaf 	bl	8009768 <USBH_MSC_BOT_Process>
    break;
 8009a0a:	e7e4      	b.n	80099d6 <USBH_MSC_SCSI_TestUnitReady+0x18>

08009a0c <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a10:	f8d0 0378 	ldr.w	r0, [r0, #888]	; 0x378
 8009a14:	69c4      	ldr	r4, [r0, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8009a16:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8009a1a:	2801      	cmp	r0, #1
 8009a1c:	d004      	beq.n	8009a28 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8009a1e:	4615      	mov	r5, r2
 8009a20:	2802      	cmp	r0, #2
 8009a22:	d020      	beq.n	8009a66 <USBH_MSC_SCSI_ReadCapacity+0x5a>
 8009a24:	2001      	movs	r0, #1
  default:
    break;
  }

  return error;
}
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009a28:	2308      	movs	r3, #8
 8009a2a:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a32:	230a      	movs	r3, #10
 8009a34:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8009a3e:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8009a42:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8009a46:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009a4a:	2325      	movs	r3, #37	; 0x25
 8009a4c:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a56:	2302      	movs	r3, #2
 8009a58:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009a5c:	f104 0310 	add.w	r3, r4, #16
 8009a60:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 8009a64:	e7df      	b.n	8009a26 <USBH_MSC_SCSI_ReadCapacity+0x1a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7ff fe7e 	bl	8009768 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d1da      	bne.n	8009a26 <USBH_MSC_SCSI_ReadCapacity+0x1a>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8009a70:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009a74:	78d3      	ldrb	r3, [r2, #3]
 8009a76:	7891      	ldrb	r1, [r2, #2]
 8009a78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009a7c:	7851      	ldrb	r1, [r2, #1]
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8009a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009a82:	7812      	ldrb	r2, [r2, #0]
 8009a84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8009a88:	602b      	str	r3, [r5, #0]
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009a8a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009a8e:	79d3      	ldrb	r3, [r2, #7]
 8009a90:	7992      	ldrb	r2, [r2, #6]
 8009a92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009a96:	80ab      	strh	r3, [r5, #4]
 8009a98:	e7c5      	b.n	8009a26 <USBH_MSC_SCSI_ReadCapacity+0x1a>

08009a9a <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, uint8_t lun,
                                          SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009a9a:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a9c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009aa0:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8009aa2:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8009aa6:	2d01      	cmp	r5, #1
 8009aa8:	d005      	beq.n	8009ab6 <USBH_MSC_SCSI_Inquiry+0x1c>
 8009aaa:	4616      	mov	r6, r2
 8009aac:	2d02      	cmp	r5, #2
 8009aae:	d024      	beq.n	8009afa <USBH_MSC_SCSI_Inquiry+0x60>
 8009ab0:	2502      	movs	r5, #2
  default:
    break;
  }

  return error;
}
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009ab6:	2224      	movs	r2, #36	; 0x24
 8009ab8:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009aba:	2380      	movs	r3, #128	; 0x80
 8009abc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ac0:	230a      	movs	r3, #10
 8009ac2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8009acc:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8009ad0:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009ad4:	2312      	movs	r3, #18
 8009ad6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009ada:	0149      	lsls	r1, r1, #5
 8009adc:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009ae0:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009aea:	2302      	movs	r3, #2
 8009aec:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009af0:	f104 0310 	add.w	r3, r4, #16
 8009af4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 8009af8:	e7db      	b.n	8009ab2 <USBH_MSC_SCSI_Inquiry+0x18>
    error = USBH_MSC_BOT_Process(phost, lun);
 8009afa:	f7ff fe35 	bl	8009768 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8009afe:	4605      	mov	r5, r0
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d1d6      	bne.n	8009ab2 <USBH_MSC_SCSI_Inquiry+0x18>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009b04:	2222      	movs	r2, #34	; 0x22
 8009b06:	2100      	movs	r1, #0
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f010 f977 	bl	8019dfc <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009b0e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f003 031f 	and.w	r3, r3, #31
 8009b18:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009b1a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	095b      	lsrs	r3, r3, #5
 8009b22:	7033      	strb	r3, [r6, #0]
      if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009b24:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	db17      	blt.n	8009b60 <USBH_MSC_SCSI_Inquiry+0xc6>
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009b30:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b34:	689a      	ldr	r2, [r3, #8]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	f8c6 2003 	str.w	r2, [r6, #3]
 8009b3c:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009b40:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b44:	6918      	ldr	r0, [r3, #16]
 8009b46:	6959      	ldr	r1, [r3, #20]
 8009b48:	699a      	ldr	r2, [r3, #24]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	60f0      	str	r0, [r6, #12]
 8009b4e:	6131      	str	r1, [r6, #16]
 8009b50:	6172      	str	r2, [r6, #20]
 8009b52:	61b3      	str	r3, [r6, #24]
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009b54:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	f8c6 301d 	str.w	r3, [r6, #29]
 8009b5e:	e7a8      	b.n	8009ab2 <USBH_MSC_SCSI_Inquiry+0x18>
        inquiry->RemovableMedia = 1U;
 8009b60:	2301      	movs	r3, #1
 8009b62:	70b3      	strb	r3, [r6, #2]
 8009b64:	e7e4      	b.n	8009b30 <USBH_MSC_SCSI_Inquiry+0x96>

08009b66 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_SenseTypeDef *sense_data)
{
 8009b66:	b538      	push	{r3, r4, r5, lr}
 8009b68:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b6a:	f8d0 0378 	ldr.w	r0, [r0, #888]	; 0x378
 8009b6e:	69c4      	ldr	r4, [r0, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8009b70:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8009b74:	2801      	cmp	r0, #1
 8009b76:	d004      	beq.n	8009b82 <USBH_MSC_SCSI_RequestSense+0x1c>
 8009b78:	4615      	mov	r5, r2
 8009b7a:	2802      	cmp	r0, #2
 8009b7c:	d025      	beq.n	8009bca <USBH_MSC_SCSI_RequestSense+0x64>
 8009b7e:	2002      	movs	r0, #2
  default:
    break;
  }

  return error;
}
 8009b80:	bd38      	pop	{r3, r4, r5, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009b82:	220e      	movs	r2, #14
 8009b84:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b86:	2380      	movs	r3, #128	; 0x80
 8009b88:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b8c:	230a      	movs	r3, #10
 8009b8e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009b92:	2300      	movs	r3, #0
 8009b94:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8009b98:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8009b9c:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8009ba0:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009baa:	0149      	lsls	r1, r1, #5
 8009bac:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009bb0:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009bba:	2302      	movs	r3, #2
 8009bbc:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009bc0:	f104 0310 	add.w	r3, r4, #16
 8009bc4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 8009bc8:	e7da      	b.n	8009b80 <USBH_MSC_SCSI_RequestSense+0x1a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff fdcc 	bl	8009768 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d1d5      	bne.n	8009b80 <USBH_MSC_SCSI_RequestSense+0x1a>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009bd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009bd8:	789b      	ldrb	r3, [r3, #2]
 8009bda:	f003 030f 	and.w	r3, r3, #15
 8009bde:	702b      	strb	r3, [r5, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009be0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009be4:	7b1b      	ldrb	r3, [r3, #12]
 8009be6:	706b      	strb	r3, [r5, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009be8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009bec:	7b5b      	ldrb	r3, [r3, #13]
 8009bee:	70ab      	strb	r3, [r5, #2]
 8009bf0:	e7c6      	b.n	8009b80 <USBH_MSC_SCSI_RequestSense+0x1a>

08009bf2 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8009bf2:	b538      	push	{r3, r4, r5, lr}
 8009bf4:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bf6:	f8d0 0378 	ldr.w	r0, [r0, #888]	; 0x378
 8009bfa:	69c4      	ldr	r4, [r0, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8009bfc:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8009c00:	2801      	cmp	r0, #1
 8009c02:	d003      	beq.n	8009c0c <USBH_MSC_SCSI_Write+0x1a>
 8009c04:	2802      	cmp	r0, #2
 8009c06:	d036      	beq.n	8009c76 <USBH_MSC_SCSI_Write+0x84>
 8009c08:	2002      	movs	r0, #2
  default:
    break;
  }

  return error;
}
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009c0c:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8009c10:	9d04      	ldr	r5, [sp, #16]
 8009c12:	fb05 f101 	mul.w	r1, r5, r1
 8009c16:	65e1      	str	r1, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009c18:	2100      	movs	r1, #0
 8009c1a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009c1e:	f04f 0c0a 	mov.w	ip, #10
 8009c22:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009c26:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8009c2a:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8009c2e:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8009c32:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009c36:	212a      	movs	r1, #42	; 0x2a
 8009c38:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8009c3c:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8009c40:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8009c44:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8009c48:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 8009c4c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009c50:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 8009c54:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009c58:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8009c5c:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009c60:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c64:	2201      	movs	r2, #1
 8009c66:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8009c70:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 8009c74:	e7c9      	b.n	8009c0a <USBH_MSC_SCSI_Write+0x18>
    error = USBH_MSC_BOT_Process(phost, lun);
 8009c76:	4660      	mov	r0, ip
 8009c78:	f7ff fd76 	bl	8009768 <USBH_MSC_BOT_Process>
    break;
 8009c7c:	e7c5      	b.n	8009c0a <USBH_MSC_SCSI_Write+0x18>

08009c7e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8009c7e:	b538      	push	{r3, r4, r5, lr}
 8009c80:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c82:	f8d0 0378 	ldr.w	r0, [r0, #888]	; 0x378
 8009c86:	69c4      	ldr	r4, [r0, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8009c88:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8009c8c:	2801      	cmp	r0, #1
 8009c8e:	d003      	beq.n	8009c98 <USBH_MSC_SCSI_Read+0x1a>
 8009c90:	2802      	cmp	r0, #2
 8009c92:	d036      	beq.n	8009d02 <USBH_MSC_SCSI_Read+0x84>
 8009c94:	2002      	movs	r0, #2
  default:
    break;
  }

  return error;
}
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009c98:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8009c9c:	9d04      	ldr	r5, [sp, #16]
 8009c9e:	fb05 f101 	mul.w	r1, r5, r1
 8009ca2:	65e1      	str	r1, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009ca4:	2180      	movs	r1, #128	; 0x80
 8009ca6:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009caa:	210a      	movs	r1, #10
 8009cac:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 8009cb6:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8009cba:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8009cbe:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009cc2:	2128      	movs	r1, #40	; 0x28
 8009cc4:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8009cc8:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8009ccc:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8009cd0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8009cd4:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 8009cd8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009cdc:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 8009ce0:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009ce4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8009ce8:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009cec:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8009cfc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 8009d00:	e7c9      	b.n	8009c96 <USBH_MSC_SCSI_Read+0x18>
    error = USBH_MSC_BOT_Process(phost, lun);
 8009d02:	4660      	mov	r0, ip
 8009d04:	f7ff fd30 	bl	8009768 <USBH_MSC_BOT_Process>
    break;
 8009d08:	e7c5      	b.n	8009c96 <USBH_MSC_SCSI_Read+0x18>

08009d0a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009d0a:	4684      	mov	ip, r0
  uint32_t i = 0U;
 8009d0c:	2300      	movs	r3, #0

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009d0e:	e005      	b.n	8009d1c <DeInitStateMachine+0x12>
  {
    phost->Pipes[i] = 0U;
 8009d10:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8009d14:	2100      	movs	r1, #0
 8009d16:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	2b0e      	cmp	r3, #14
 8009d1e:	d9f7      	bls.n	8009d10 <DeInitStateMachine+0x6>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009d20:	2300      	movs	r3, #0
 8009d22:	e005      	b.n	8009d30 <DeInitStateMachine+0x26>
  {
    phost->device.Data[i] = 0U;
 8009d24:	eb0c 0203 	add.w	r2, ip, r3
 8009d28:	2100      	movs	r1, #0
 8009d2a:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009d2e:	3301      	adds	r3, #1
 8009d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d34:	d3f6      	bcc.n	8009d24 <DeInitStateMachine+0x1a>
  }

  phost->gState = HOST_IDLE;
 8009d36:	2000      	movs	r0, #0
 8009d38:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8009d3c:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 8009d46:	f8cc 03bc 	str.w	r0, [ip, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8009d4a:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009d4e:	2240      	movs	r2, #64	; 0x40
 8009d50:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 8009d54:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009d58:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8009d5c:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d

  return USBH_OK;
}
 8009d60:	4770      	bx	lr

08009d62 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8009d62:	b508      	push	{r3, lr}
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009d64:	7803      	ldrb	r3, [r0, #0]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b0b      	cmp	r3, #11
 8009d6a:	d000      	beq.n	8009d6e <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 8009d6c:	bd08      	pop	{r3, pc}
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009d6e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0fa      	beq.n	8009d6c <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	4798      	blx	r3
}
 8009d7a:	e7f7      	b.n	8009d6c <USBH_HandleSof+0xa>

08009d7c <USBH_HandleEnum>:
{
 8009d7c:	b570      	push	{r4, r5, r6, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8009d82:	7845      	ldrb	r5, [r0, #1]
 8009d84:	2d07      	cmp	r5, #7
 8009d86:	f200 80a2 	bhi.w	8009ece <USBH_HandleEnum+0x152>
 8009d8a:	e8df f005 	tbb	[pc, r5]
 8009d8e:	2a04      	.short	0x2a04
 8009d90:	6d645b32 	.word	0x6d645b32
 8009d94:	9180      	.short	0x9180
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8009d96:	2108      	movs	r1, #8
 8009d98:	f000 fc3d 	bl	800a616 <USBH_Get_DevDesc>
 8009d9c:	b108      	cbz	r0, 8009da2 <USBH_HandleEnum+0x26>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009d9e:	2501      	movs	r5, #1
 8009da0:	e068      	b.n	8009e74 <USBH_HandleEnum+0xf8>
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009da2:	f894 3329 	ldrb.w	r3, [r4, #809]	; 0x329
 8009da6:	71a3      	strb	r3, [r4, #6]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009da8:	2501      	movs	r5, #1
 8009daa:	7065      	strb	r5, [r4, #1]
      USBH_OpenPipe (phost,
 8009dac:	9302      	str	r3, [sp, #8]
 8009dae:	2600      	movs	r6, #0
 8009db0:	9601      	str	r6, [sp, #4]
 8009db2:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009dbc:	2280      	movs	r2, #128	; 0x80
 8009dbe:	7921      	ldrb	r1, [r4, #4]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 fd26 	bl	800a812 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8009dc6:	79a3      	ldrb	r3, [r4, #6]
 8009dc8:	9302      	str	r3, [sp, #8]
 8009dca:	9601      	str	r6, [sp, #4]
 8009dcc:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	7961      	ldrb	r1, [r4, #5]
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 fd19 	bl	800a812 <USBH_OpenPipe>
 8009de0:	e048      	b.n	8009e74 <USBH_HandleEnum+0xf8>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8009de2:	2112      	movs	r1, #18
 8009de4:	f000 fc17 	bl	800a616 <USBH_Get_DevDesc>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d143      	bne.n	8009e74 <USBH_HandleEnum+0xf8>
      phost->EnumState = ENUM_SET_ADDR;
 8009dec:	2302      	movs	r3, #2
 8009dee:	7063      	strb	r3, [r4, #1]
 8009df0:	e040      	b.n	8009e74 <USBH_HandleEnum+0xf8>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8009df2:	2101      	movs	r1, #1
 8009df4:	f000 fc59 	bl	800a6aa <USBH_SetAddress>
 8009df8:	b108      	cbz	r0, 8009dfe <USBH_HandleEnum+0x82>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009dfa:	2501      	movs	r5, #1
 8009dfc:	e03a      	b.n	8009e74 <USBH_HandleEnum+0xf8>
      USBH_Delay(2U);
 8009dfe:	2002      	movs	r0, #2
 8009e00:	f00e fdee 	bl	80189e0 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8009e04:	2501      	movs	r5, #1
 8009e06:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
      phost->EnumState = ENUM_GET_CFG_DESC;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8009e0e:	79a3      	ldrb	r3, [r4, #6]
 8009e10:	9302      	str	r3, [sp, #8]
 8009e12:	2600      	movs	r6, #0
 8009e14:	9601      	str	r6, [sp, #4]
 8009e16:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	462b      	mov	r3, r5
 8009e1e:	2280      	movs	r2, #128	; 0x80
 8009e20:	7921      	ldrb	r1, [r4, #4]
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 fcf5 	bl	800a812 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8009e28:	79a3      	ldrb	r3, [r4, #6]
 8009e2a:	9302      	str	r3, [sp, #8]
 8009e2c:	9601      	str	r6, [sp, #4]
 8009e2e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009e38:	4632      	mov	r2, r6
 8009e3a:	7961      	ldrb	r1, [r4, #5]
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f000 fce8 	bl	800a812 <USBH_OpenPipe>
 8009e42:	e017      	b.n	8009e74 <USBH_HandleEnum+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 8009e44:	2109      	movs	r1, #9
 8009e46:	f000 fbff 	bl	800a648 <USBH_Get_CfgDesc>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d141      	bne.n	8009ed2 <USBH_HandleEnum+0x156>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009e4e:	2304      	movs	r3, #4
 8009e50:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e52:	2501      	movs	r5, #1
 8009e54:	e00e      	b.n	8009e74 <USBH_HandleEnum+0xf8>
    if (USBH_Get_CfgDesc(phost,
 8009e56:	f8b0 1336 	ldrh.w	r1, [r0, #822]	; 0x336
 8009e5a:	f000 fbf5 	bl	800a648 <USBH_Get_CfgDesc>
 8009e5e:	bbd0      	cbnz	r0, 8009ed6 <USBH_HandleEnum+0x15a>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009e60:	2305      	movs	r3, #5
 8009e62:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e64:	2501      	movs	r5, #1
 8009e66:	e005      	b.n	8009e74 <USBH_HandleEnum+0xf8>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8009e68:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 8009e6c:	b929      	cbnz	r1, 8009e7a <USBH_HandleEnum+0xfe>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009e6e:	2306      	movs	r3, #6
 8009e70:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e72:	2501      	movs	r5, #1
}
 8009e74:	4628      	mov	r0, r5
 8009e76:	b004      	add	sp, #16
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
      if ( USBH_Get_StringDesc(phost,
 8009e7a:	23ff      	movs	r3, #255	; 0xff
 8009e7c:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8009e80:	f000 fbfb 	bl	800a67a <USBH_Get_StringDesc>
 8009e84:	bb48      	cbnz	r0, 8009eda <USBH_HandleEnum+0x15e>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009e86:	2306      	movs	r3, #6
 8009e88:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e8a:	2501      	movs	r5, #1
 8009e8c:	e7f2      	b.n	8009e74 <USBH_HandleEnum+0xf8>
    if (phost->device.DevDesc.iProduct != 0U)
 8009e8e:	f890 1331 	ldrb.w	r1, [r0, #817]	; 0x331
 8009e92:	b919      	cbnz	r1, 8009e9c <USBH_HandleEnum+0x120>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e94:	2307      	movs	r3, #7
 8009e96:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e98:	2501      	movs	r5, #1
 8009e9a:	e7eb      	b.n	8009e74 <USBH_HandleEnum+0xf8>
      if ( USBH_Get_StringDesc(phost,
 8009e9c:	23ff      	movs	r3, #255	; 0xff
 8009e9e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8009ea2:	f000 fbea 	bl	800a67a <USBH_Get_StringDesc>
 8009ea6:	b9d0      	cbnz	r0, 8009ede <USBH_HandleEnum+0x162>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ea8:	2307      	movs	r3, #7
 8009eaa:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009eac:	2501      	movs	r5, #1
 8009eae:	e7e1      	b.n	8009e74 <USBH_HandleEnum+0xf8>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8009eb0:	f890 5332 	ldrb.w	r5, [r0, #818]	; 0x332
 8009eb4:	2d00      	cmp	r5, #0
 8009eb6:	d0dd      	beq.n	8009e74 <USBH_HandleEnum+0xf8>
      if ( USBH_Get_StringDesc(phost,
 8009eb8:	23ff      	movs	r3, #255	; 0xff
 8009eba:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	f000 fbdb 	bl	800a67a <USBH_Get_StringDesc>
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d0d4      	beq.n	8009e74 <USBH_HandleEnum+0xf8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009eca:	2501      	movs	r5, #1
 8009ecc:	e7d2      	b.n	8009e74 <USBH_HandleEnum+0xf8>
  switch (phost->EnumState)
 8009ece:	2501      	movs	r5, #1
 8009ed0:	e7d0      	b.n	8009e74 <USBH_HandleEnum+0xf8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ed2:	2501      	movs	r5, #1
 8009ed4:	e7ce      	b.n	8009e74 <USBH_HandleEnum+0xf8>
 8009ed6:	2501      	movs	r5, #1
 8009ed8:	e7cc      	b.n	8009e74 <USBH_HandleEnum+0xf8>
 8009eda:	2501      	movs	r5, #1
 8009edc:	e7ca      	b.n	8009e74 <USBH_HandleEnum+0xf8>
 8009ede:	2501      	movs	r5, #1
 8009ee0:	e7c8      	b.n	8009e74 <USBH_HandleEnum+0xf8>

08009ee2 <USBH_Init>:
  if(phost == NULL)
 8009ee2:	b198      	cbz	r0, 8009f0c <USBH_Init+0x2a>
{
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	4604      	mov	r4, r0
  phost->id = id;
 8009eea:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8009ef4:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8009ef8:	f7ff ff07 	bl	8009d0a <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8009efc:	b10d      	cbz	r5, 8009f02 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8009efe:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8009f02:	4620      	mov	r0, r4
 8009f04:	f00e fcba 	bl	801887c <USBH_LL_Init>
  return USBH_OK;
 8009f08:	2000      	movs	r0, #0
}
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8009f0c:	2002      	movs	r0, #2
}
 8009f0e:	4770      	bx	lr

08009f10 <USBH_RegisterClass>:
  if(pclass != 0)
 8009f10:	460a      	mov	r2, r1
 8009f12:	b159      	cbz	r1, 8009f2c <USBH_RegisterClass+0x1c>
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009f14:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8009f18:	b953      	cbnz	r3, 8009f30 <USBH_RegisterClass+0x20>
      phost->pClass[phost->ClassNumber++] = pclass;
 8009f1a:	1c59      	adds	r1, r3, #1
 8009f1c:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
 8009f20:	33dc      	adds	r3, #220	; 0xdc
 8009f22:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009f26:	6042      	str	r2, [r0, #4]
      status = USBH_OK;
 8009f28:	2000      	movs	r0, #0
 8009f2a:	4770      	bx	lr
    status = USBH_FAIL;
 8009f2c:	2002      	movs	r0, #2
 8009f2e:	4770      	bx	lr
      status = USBH_FAIL;
 8009f30:	2002      	movs	r0, #2
}
 8009f32:	4770      	bx	lr

08009f34 <USBH_SelectInterface>:
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8009f34:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8009f38:	428b      	cmp	r3, r1
 8009f3a:	d903      	bls.n	8009f44 <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 8009f3c:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8009f40:	2000      	movs	r0, #0
 8009f42:	4770      	bx	lr
    status = USBH_FAIL;
 8009f44:	2002      	movs	r0, #2
}
 8009f46:	4770      	bx	lr

08009f48 <USBH_FindInterface>:
{
 8009f48:	b510      	push	{r4, lr}
 8009f4a:	4604      	mov	r4, r0
  uint8_t                        if_ix = 0U;
 8009f4c:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f4e:	e00b      	b.n	8009f68 <USBH_FindInterface+0x20>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f50:	f04f 0c1a 	mov.w	ip, #26
 8009f54:	fb0c 4e0e 	mla	lr, ip, lr, r4
 8009f58:	f89e c345 	ldrb.w	ip, [lr, #837]	; 0x345
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009f5c:	459c      	cmp	ip, r3
 8009f5e:	d01c      	beq.n	8009f9a <USBH_FindInterface+0x52>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009f60:	2bff      	cmp	r3, #255	; 0xff
 8009f62:	d01a      	beq.n	8009f9a <USBH_FindInterface+0x52>
    if_ix++;
 8009f64:	3001      	adds	r0, #1
 8009f66:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f68:	2801      	cmp	r0, #1
 8009f6a:	d815      	bhi.n	8009f98 <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 8009f6c:	4686      	mov	lr, r0
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8009f6e:	f04f 0c1a 	mov.w	ip, #26
 8009f72:	fb0c 4c00 	mla	ip, ip, r0, r4
 8009f76:	f89c c343 	ldrb.w	ip, [ip, #835]	; 0x343
 8009f7a:	458c      	cmp	ip, r1
 8009f7c:	d001      	beq.n	8009f82 <USBH_FindInterface+0x3a>
 8009f7e:	29ff      	cmp	r1, #255	; 0xff
 8009f80:	d1f0      	bne.n	8009f64 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009f82:	f04f 0c1a 	mov.w	ip, #26
 8009f86:	fb0c 4c0e 	mla	ip, ip, lr, r4
 8009f8a:	f89c c344 	ldrb.w	ip, [ip, #836]	; 0x344
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8009f8e:	4594      	cmp	ip, r2
 8009f90:	d0de      	beq.n	8009f50 <USBH_FindInterface+0x8>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009f92:	2aff      	cmp	r2, #255	; 0xff
 8009f94:	d1e6      	bne.n	8009f64 <USBH_FindInterface+0x1c>
 8009f96:	e7db      	b.n	8009f50 <USBH_FindInterface+0x8>
  return 0xFFU;
 8009f98:	20ff      	movs	r0, #255	; 0xff
}
 8009f9a:	bd10      	pop	{r4, pc}

08009f9c <USBH_Start>:
{
 8009f9c:	b510      	push	{r4, lr}
 8009f9e:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 8009fa0:	f00e fd2c 	bl	80189fc <USBH_LL_Start>
  USBH_LL_DriverVBUS (phost, TRUE);
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f00e fcd4 	bl	8018954 <USBH_LL_DriverVBUS>
}
 8009fac:	2000      	movs	r0, #0
 8009fae:	bd10      	pop	{r4, pc}

08009fb0 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8009fb0:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 8009fb4:	4770      	bx	lr

08009fb6 <USBH_LL_IncTimer>:
{
 8009fb6:	b508      	push	{r3, lr}
  phost->Timer ++;
 8009fb8:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8009fbc:	3201      	adds	r2, #1
 8009fbe:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8009fc2:	f7ff fece 	bl	8009d62 <USBH_HandleSof>
}
 8009fc6:	bd08      	pop	{r3, pc}

08009fc8 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f

  return;
}
 8009fce:	4770      	bx	lr

08009fd0 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f

  return;
}
 8009fd6:	4770      	bx	lr

08009fd8 <USBH_IsPortEnabled>:
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
}
 8009fd8:	f890 031f 	ldrb.w	r0, [r0, #799]	; 0x31f
 8009fdc:	4770      	bx	lr

08009fde <USBH_Process>:
{
 8009fde:	b530      	push	{r4, r5, lr}
 8009fe0:	b087      	sub	sp, #28
 8009fe2:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	f88d 3017 	strb.w	r3, [sp, #23]
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8009fea:	f7ff fff5 	bl	8009fd8 <USBH_IsPortEnabled>
 8009fee:	b938      	cbnz	r0, 800a000 <USBH_Process+0x22>
 8009ff0:	7823      	ldrb	r3, [r4, #0]
 8009ff2:	b12b      	cbz	r3, 800a000 <USBH_Process+0x22>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8009ff4:	7823      	ldrb	r3, [r4, #0]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d001      	beq.n	800a000 <USBH_Process+0x22>
      phost->gState = HOST_DEV_DISCONNECTED;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	7023      	strb	r3, [r4, #0]
  switch (phost->gState)
 800a000:	7823      	ldrb	r3, [r4, #0]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b0b      	cmp	r3, #11
 800a006:	d84a      	bhi.n	800a09e <USBH_Process+0xc0>
 800a008:	e8df f003 	tbb	[pc, r3]
 800a00c:	ca1a1306 	.word	0xca1a1306
 800a010:	5eb04c49 	.word	0x5eb04c49
 800a014:	c2837268 	.word	0xc2837268
    if (phost->device.is_connected)
 800a018:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d03e      	beq.n	800a09e <USBH_Process+0xc0>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a020:	2301      	movs	r3, #1
 800a022:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 800a024:	20c8      	movs	r0, #200	; 0xc8
 800a026:	f00e fcdb 	bl	80189e0 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800a02a:	4620      	mov	r0, r4
 800a02c:	f00e fcf6 	bl	8018a1c <USBH_LL_ResetPort>
 800a030:	e035      	b.n	800a09e <USBH_Process+0xc0>
    if (phost->device.PortEnabled == 1U)
 800a032:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 800a036:	2b01      	cmp	r3, #1
 800a038:	d131      	bne.n	800a09e <USBH_Process+0xc0>
      phost->gState = HOST_DEV_ATTACHED;
 800a03a:	2302      	movs	r3, #2
 800a03c:	7023      	strb	r3, [r4, #0]
 800a03e:	e02e      	b.n	800a09e <USBH_Process+0xc0>
    USBH_Delay(100U);
 800a040:	2064      	movs	r0, #100	; 0x64
 800a042:	f00e fccd 	bl	80189e0 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800a046:	4620      	mov	r0, r4
 800a048:	f00e fc68 	bl	801891c <USBH_LL_GetSpeed>
 800a04c:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->gState = HOST_ENUMERATION;
 800a050:	2305      	movs	r3, #5
 800a052:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800a054:	2100      	movs	r1, #0
 800a056:	4620      	mov	r0, r4
 800a058:	f000 fbf0 	bl	800a83c <USBH_AllocPipe>
 800a05c:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800a05e:	2180      	movs	r1, #128	; 0x80
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fbeb 	bl	800a83c <USBH_AllocPipe>
 800a066:	4601      	mov	r1, r0
 800a068:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 800a06a:	79a3      	ldrb	r3, [r4, #6]
 800a06c:	9302      	str	r3, [sp, #8]
 800a06e:	2500      	movs	r5, #0
 800a070:	9501      	str	r5, [sp, #4]
 800a072:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800a07c:	2280      	movs	r2, #128	; 0x80
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 fbc7 	bl	800a812 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 800a084:	79a3      	ldrb	r3, [r4, #6]
 800a086:	9302      	str	r3, [sp, #8]
 800a088:	9501      	str	r5, [sp, #4]
 800a08a:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800a094:	462a      	mov	r2, r5
 800a096:	7961      	ldrb	r1, [r4, #5]
 800a098:	4620      	mov	r0, r4
 800a09a:	f000 fbba 	bl	800a812 <USBH_OpenPipe>
}
 800a09e:	2000      	movs	r0, #0
 800a0a0:	b007      	add	sp, #28
 800a0a2:	bd30      	pop	{r4, r5, pc}
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f7ff fe69 	bl	8009d7c <USBH_HandleEnum>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d1f7      	bne.n	800a09e <USBH_Process+0xc0>
      phost->device.current_interface = 0U;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800a0b4:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d002      	beq.n	800a0c2 <USBH_Process+0xe4>
        phost->gState  = HOST_INPUT;
 800a0bc:	2307      	movs	r3, #7
 800a0be:	7023      	strb	r3, [r4, #0]
 800a0c0:	e7ed      	b.n	800a09e <USBH_Process+0xc0>
        phost->gState  = HOST_SET_CONFIGURATION;
 800a0c2:	2308      	movs	r3, #8
 800a0c4:	7023      	strb	r3, [r4, #0]
 800a0c6:	e7ea      	b.n	800a09e <USBH_Process+0xc0>
      if(phost->pUser != NULL)
 800a0c8:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0e6      	beq.n	800a09e <USBH_Process+0xc0>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	7023      	strb	r3, [r4, #0]
 800a0da:	e7e0      	b.n	800a09e <USBH_Process+0xc0>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a0dc:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f000 faf3 	bl	800a6cc <USBH_SetCfg>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d1d9      	bne.n	800a09e <USBH_Process+0xc0>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800a0ea:	2309      	movs	r3, #9
 800a0ec:	7023      	strb	r3, [r4, #0]
 800a0ee:	e7d6      	b.n	800a09e <USBH_Process+0xc0>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a0f0:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800a0f4:	f013 0f20 	tst.w	r3, #32
 800a0f8:	d102      	bne.n	800a100 <USBH_Process+0x122>
      phost->gState  = HOST_CHECK_CLASS;
 800a0fa:	230a      	movs	r3, #10
 800a0fc:	7023      	strb	r3, [r4, #0]
 800a0fe:	e7ce      	b.n	800a09e <USBH_Process+0xc0>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a100:	2101      	movs	r1, #1
 800a102:	4620      	mov	r0, r4
 800a104:	f000 faf3 	bl	800a6ee <USBH_SetFeature>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d1c8      	bne.n	800a09e <USBH_Process+0xc0>
        phost->gState  = HOST_CHECK_CLASS;
 800a10c:	230a      	movs	r3, #10
 800a10e:	7023      	strb	r3, [r4, #0]
 800a110:	e7c5      	b.n	800a09e <USBH_Process+0xc0>
    if(phost->ClassNumber == 0U)
 800a112:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0c1      	beq.n	800a09e <USBH_Process+0xc0>
      phost->pActiveClass = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a120:	b173      	cbz	r3, 800a140 <USBH_Process+0x162>
      if(phost->pActiveClass != NULL)
 800a122:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800a126:	b1f3      	cbz	r3, 800a166 <USBH_Process+0x188>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	4620      	mov	r0, r4
 800a12c:	4798      	blx	r3
 800a12e:	b9b8      	cbnz	r0, 800a160 <USBH_Process+0x182>
          phost->gState  = HOST_CLASS_REQUEST;
 800a130:	2306      	movs	r3, #6
 800a132:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a134:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800a138:	2103      	movs	r1, #3
 800a13a:	4620      	mov	r0, r4
 800a13c:	4798      	blx	r3
 800a13e:	e7ae      	b.n	800a09e <USBH_Process+0xc0>
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a140:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 800a144:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a148:	6852      	ldr	r2, [r2, #4]
 800a14a:	7910      	ldrb	r0, [r2, #4]
 800a14c:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
 800a150:	4288      	cmp	r0, r1
 800a152:	d002      	beq.n	800a15a <USBH_Process+0x17c>
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a154:	3301      	adds	r3, #1
 800a156:	b2db      	uxtb	r3, r3
 800a158:	e7e2      	b.n	800a120 <USBH_Process+0x142>
          phost->pActiveClass = phost->pClass[idx];
 800a15a:	f8c4 2378 	str.w	r2, [r4, #888]	; 0x378
 800a15e:	e7f9      	b.n	800a154 <USBH_Process+0x176>
          phost->gState  = HOST_ABORT_STATE;
 800a160:	230d      	movs	r3, #13
 800a162:	7023      	strb	r3, [r4, #0]
 800a164:	e79b      	b.n	800a09e <USBH_Process+0xc0>
        phost->gState  = HOST_ABORT_STATE;
 800a166:	230d      	movs	r3, #13
 800a168:	7023      	strb	r3, [r4, #0]
 800a16a:	e798      	b.n	800a09e <USBH_Process+0xc0>
    if(phost->pActiveClass != NULL)
 800a16c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800a170:	b15b      	cbz	r3, 800a18a <USBH_Process+0x1ac>
      status = phost->pActiveClass->Requests(phost);
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	4620      	mov	r0, r4
 800a176:	4798      	blx	r3
 800a178:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800a17c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d18c      	bne.n	800a09e <USBH_Process+0xc0>
        phost->gState  = HOST_CLASS;
 800a184:	230b      	movs	r3, #11
 800a186:	7023      	strb	r3, [r4, #0]
 800a188:	e789      	b.n	800a09e <USBH_Process+0xc0>
      phost->gState  = HOST_ABORT_STATE;
 800a18a:	230d      	movs	r3, #13
 800a18c:	7023      	strb	r3, [r4, #0]
 800a18e:	e786      	b.n	800a09e <USBH_Process+0xc0>
    if(phost->pActiveClass != NULL)
 800a190:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800a194:	2b00      	cmp	r3, #0
 800a196:	d082      	beq.n	800a09e <USBH_Process+0xc0>
      phost->pActiveClass->BgndProcess(phost);
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	4620      	mov	r0, r4
 800a19c:	4798      	blx	r3
 800a19e:	e77e      	b.n	800a09e <USBH_Process+0xc0>
    DeInitStateMachine(phost);
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f7ff fdb2 	bl	8009d0a <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800a1a6:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f43f af77 	beq.w	800a09e <USBH_Process+0xc0>
      phost->pActiveClass->DeInit(phost);
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 800a1bc:	e76f      	b.n	800a09e <USBH_Process+0xc0>

0800a1be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800a1be:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 800a1c0:	7803      	ldrb	r3, [r0, #0]
 800a1c2:	b94b      	cbnz	r3, 800a1d8 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e

    if(phost->pUser != NULL)
 800a1ca:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800a1ce:	b10b      	cbz	r3, 800a1d4 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800a1d0:	2104      	movs	r1, #4
 800a1d2:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 800a1d8:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d1f9      	bne.n	800a1d4 <USBH_LL_Connect+0x16>
      phost->gState = HOST_DEV_ATTACHED;
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	7003      	strb	r3, [r0, #0]
 800a1e4:	e7f6      	b.n	800a1d4 <USBH_LL_Connect+0x16>

0800a1e6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800a1e6:	b510      	push	{r4, lr}
 800a1e8:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 800a1ea:	f00e fc0f 	bl	8018a0c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800a1ee:	7921      	ldrb	r1, [r4, #4]
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fb34 	bl	800a85e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800a1f6:	7961      	ldrb	r1, [r4, #5]
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 fb30 	bl	800a85e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 800a204:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800a208:	b113      	cbz	r3, 800a210 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a20a:	2105      	movs	r1, #5
 800a20c:	4620      	mov	r0, r4
 800a20e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a210:	4620      	mov	r0, r4
 800a212:	f00e fbf3 	bl	80189fc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800a216:	2303      	movs	r3, #3
 800a218:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800a21a:	2000      	movs	r0, #0
 800a21c:	bd10      	pop	{r4, pc}

0800a21e <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800a21e:	780b      	ldrb	r3, [r1, #0]
 800a220:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800a222:	784b      	ldrb	r3, [r1, #1]
 800a224:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800a226:	788b      	ldrb	r3, [r1, #2]
 800a228:	f891 c003 	ldrb.w	ip, [r1, #3]
 800a22c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800a230:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800a232:	790b      	ldrb	r3, [r1, #4]
 800a234:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800a236:	794b      	ldrb	r3, [r1, #5]
 800a238:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800a23a:	798b      	ldrb	r3, [r1, #6]
 800a23c:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800a23e:	79cb      	ldrb	r3, [r1, #7]
 800a240:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 800a242:	2a08      	cmp	r2, #8
 800a244:	d916      	bls.n	800a274 <USBH_ParseDevDesc+0x56>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800a246:	7a0b      	ldrb	r3, [r1, #8]
 800a248:	7a4a      	ldrb	r2, [r1, #9]
 800a24a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a24e:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800a250:	7a8b      	ldrb	r3, [r1, #10]
 800a252:	7aca      	ldrb	r2, [r1, #11]
 800a254:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a258:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800a25a:	7b0b      	ldrb	r3, [r1, #12]
 800a25c:	7b4a      	ldrb	r2, [r1, #13]
 800a25e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a262:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800a264:	7b8b      	ldrb	r3, [r1, #14]
 800a266:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800a268:	7bcb      	ldrb	r3, [r1, #15]
 800a26a:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800a26c:	7c0b      	ldrb	r3, [r1, #16]
 800a26e:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800a270:	7c4b      	ldrb	r3, [r1, #17]
 800a272:	7443      	strb	r3, [r0, #17]
  }
}
 800a274:	4770      	bx	lr

0800a276 <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800a276:	780b      	ldrb	r3, [r1, #0]
 800a278:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800a27a:	784b      	ldrb	r3, [r1, #1]
 800a27c:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800a27e:	788b      	ldrb	r3, [r1, #2]
 800a280:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800a282:	78cb      	ldrb	r3, [r1, #3]
 800a284:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800a286:	790b      	ldrb	r3, [r1, #4]
 800a288:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800a28a:	794b      	ldrb	r3, [r1, #5]
 800a28c:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800a28e:	798b      	ldrb	r3, [r1, #6]
 800a290:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800a292:	79cb      	ldrb	r3, [r1, #7]
 800a294:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800a296:	7a0b      	ldrb	r3, [r1, #8]
 800a298:	7203      	strb	r3, [r0, #8]
}
 800a29a:	4770      	bx	lr

0800a29c <USBH_ParseEPDesc>:
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800a29c:	780b      	ldrb	r3, [r1, #0]
 800a29e:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800a2a0:	784b      	ldrb	r3, [r1, #1]
 800a2a2:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800a2a4:	788b      	ldrb	r3, [r1, #2]
 800a2a6:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800a2a8:	78cb      	ldrb	r3, [r1, #3]
 800a2aa:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800a2ac:	790b      	ldrb	r3, [r1, #4]
 800a2ae:	794a      	ldrb	r2, [r1, #5]
 800a2b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a2b4:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800a2b6:	798b      	ldrb	r3, [r1, #6]
 800a2b8:	7183      	strb	r3, [r0, #6]
}
 800a2ba:	4770      	bx	lr

0800a2bc <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a2bc:	7843      	ldrb	r3, [r0, #1]
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d000      	beq.n	800a2c4 <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 800a2c2:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a2c4:	7803      	ldrb	r3, [r0, #0]
 800a2c6:	3b02      	subs	r3, #2
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	bf28      	it	cs
 800a2cc:	461a      	movcs	r2, r3
 800a2ce:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	e007      	b.n	800a2e4 <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 800a2d4:	eb00 0c03 	add.w	ip, r0, r3
 800a2d8:	f89c c002 	ldrb.w	ip, [ip, #2]
 800a2dc:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 800a2e0:	3302      	adds	r3, #2
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d3f5      	bcc.n	800a2d4 <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	700b      	strb	r3, [r1, #0]
}
 800a2ec:	e7e9      	b.n	800a2c2 <USBH_ParseStringDesc+0x6>

0800a2ee <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800a2ee:	b530      	push	{r4, r5, lr}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800a2f4:	7e05      	ldrb	r5, [r0, #24]
 800a2f6:	1e6b      	subs	r3, r5, #1
 800a2f8:	2b0a      	cmp	r3, #10
 800a2fa:	f200 80d6 	bhi.w	800a4aa <USBH_HandleControl+0x1bc>
 800a2fe:	e8df f003 	tbb	[pc, r3]
 800a302:	1006      	.short	0x1006
 800a304:	60534034 	.word	0x60534034
 800a308:	a99c897d 	.word	0xa99c897d
 800a30c:	c0          	.byte	0xc0
 800a30d:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a30e:	7942      	ldrb	r2, [r0, #5]
 800a310:	f100 0110 	add.w	r1, r0, #16
 800a314:	f000 fa0e 	bl	800a734 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800a318:	2302      	movs	r3, #2
 800a31a:	7623      	strb	r3, [r4, #24]

  default:
    break;
  }
  return status;
}
 800a31c:	4628      	mov	r0, r5
 800a31e:	b003      	add	sp, #12
 800a320:	bd30      	pop	{r4, r5, pc}
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a322:	7941      	ldrb	r1, [r0, #5]
 800a324:	f00e fb10 	bl	8018948 <USBH_LL_GetURBState>
 800a328:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 800a32a:	2801      	cmp	r0, #1
 800a32c:	d008      	beq.n	800a340 <USBH_HandleControl+0x52>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a32e:	2802      	cmp	r0, #2
 800a330:	bf18      	it	ne
 800a332:	2804      	cmpne	r0, #4
 800a334:	f040 80bb 	bne.w	800a4ae <USBH_HandleControl+0x1c0>
        phost->Control.state = CTRL_ERROR;
 800a338:	230b      	movs	r3, #11
 800a33a:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a33c:	2501      	movs	r5, #1
 800a33e:	e7ed      	b.n	800a31c <USBH_HandleControl+0x2e>
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a340:	7c23      	ldrb	r3, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 800a342:	8ae2      	ldrh	r2, [r4, #22]
 800a344:	b142      	cbz	r2, 800a358 <USBH_HandleControl+0x6a>
        if (direction == USB_D2H)
 800a346:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a34a:	d102      	bne.n	800a352 <USBH_HandleControl+0x64>
          phost->Control.state = CTRL_DATA_OUT;
 800a34c:	2305      	movs	r3, #5
 800a34e:	7623      	strb	r3, [r4, #24]
 800a350:	e7e4      	b.n	800a31c <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_DATA_IN;
 800a352:	2303      	movs	r3, #3
 800a354:	7623      	strb	r3, [r4, #24]
 800a356:	e7e1      	b.n	800a31c <USBH_HandleControl+0x2e>
        if (direction == USB_D2H)
 800a358:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a35c:	d102      	bne.n	800a364 <USBH_HandleControl+0x76>
          phost->Control.state = CTRL_STATUS_IN;
 800a35e:	2307      	movs	r3, #7
 800a360:	7623      	strb	r3, [r4, #24]
 800a362:	e7db      	b.n	800a31c <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_STATUS_OUT;
 800a364:	2309      	movs	r3, #9
 800a366:	7623      	strb	r3, [r4, #24]
 800a368:	e7d8      	b.n	800a31c <USBH_HandleControl+0x2e>
    phost->Control.timer = (uint16_t)phost->Timer;
 800a36a:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 800a36e:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 800a370:	7903      	ldrb	r3, [r0, #4]
 800a372:	8982      	ldrh	r2, [r0, #12]
 800a374:	6881      	ldr	r1, [r0, #8]
 800a376:	f000 fa04 	bl	800a782 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a37a:	2304      	movs	r3, #4
 800a37c:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a37e:	2501      	movs	r5, #1
    break;
 800a380:	e7cc      	b.n	800a31c <USBH_HandleControl+0x2e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a382:	7901      	ldrb	r1, [r0, #4]
 800a384:	f00e fae0 	bl	8018948 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800a388:	2801      	cmp	r0, #1
 800a38a:	d006      	beq.n	800a39a <USBH_HandleControl+0xac>
    if  (URB_Status == USBH_URB_STALL)
 800a38c:	2805      	cmp	r0, #5
 800a38e:	f000 8090 	beq.w	800a4b2 <USBH_HandleControl+0x1c4>
      if (URB_Status == USBH_URB_ERROR)
 800a392:	2804      	cmp	r0, #4
 800a394:	d004      	beq.n	800a3a0 <USBH_HandleControl+0xb2>
  USBH_StatusTypeDef status = USBH_BUSY;
 800a396:	2501      	movs	r5, #1
 800a398:	e7c0      	b.n	800a31c <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_STATUS_OUT;
 800a39a:	2309      	movs	r3, #9
 800a39c:	7623      	strb	r3, [r4, #24]
 800a39e:	e7f5      	b.n	800a38c <USBH_HandleControl+0x9e>
        phost->Control.state = CTRL_ERROR;
 800a3a0:	230b      	movs	r3, #11
 800a3a2:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a3a4:	2501      	movs	r5, #1
 800a3a6:	e7b9      	b.n	800a31c <USBH_HandleControl+0x2e>
    USBH_CtlSendData (phost,
 800a3a8:	2501      	movs	r5, #1
 800a3aa:	9500      	str	r5, [sp, #0]
 800a3ac:	7943      	ldrb	r3, [r0, #5]
 800a3ae:	8982      	ldrh	r2, [r0, #12]
 800a3b0:	6881      	ldr	r1, [r0, #8]
 800a3b2:	f000 f9d0 	bl	800a756 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800a3b6:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800a3ba:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a3bc:	2306      	movs	r3, #6
 800a3be:	7623      	strb	r3, [r4, #24]
    break;
 800a3c0:	e7ac      	b.n	800a31c <USBH_HandleControl+0x2e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a3c2:	7941      	ldrb	r1, [r0, #5]
 800a3c4:	f00e fac0 	bl	8018948 <USBH_LL_GetURBState>
 800a3c8:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 800a3ca:	2801      	cmp	r0, #1
 800a3cc:	d007      	beq.n	800a3de <USBH_HandleControl+0xf0>
    else if  (URB_Status == USBH_URB_STALL)
 800a3ce:	2805      	cmp	r0, #5
 800a3d0:	d008      	beq.n	800a3e4 <USBH_HandleControl+0xf6>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a3d2:	2802      	cmp	r0, #2
 800a3d4:	d00a      	beq.n	800a3ec <USBH_HandleControl+0xfe>
      if (URB_Status == USBH_URB_ERROR)
 800a3d6:	2804      	cmp	r0, #4
 800a3d8:	d00c      	beq.n	800a3f4 <USBH_HandleControl+0x106>
  USBH_StatusTypeDef status = USBH_BUSY;
 800a3da:	2501      	movs	r5, #1
 800a3dc:	e79e      	b.n	800a31c <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_STATUS_IN;
 800a3de:	2307      	movs	r3, #7
 800a3e0:	7623      	strb	r3, [r4, #24]
 800a3e2:	e79b      	b.n	800a31c <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_STALLED;
 800a3e4:	230c      	movs	r3, #12
 800a3e6:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800a3e8:	2503      	movs	r5, #3
 800a3ea:	e797      	b.n	800a31c <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_DATA_OUT;
 800a3ec:	2305      	movs	r3, #5
 800a3ee:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a3f0:	2501      	movs	r5, #1
 800a3f2:	e793      	b.n	800a31c <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 800a3f4:	230b      	movs	r3, #11
 800a3f6:	7623      	strb	r3, [r4, #24]
        status = USBH_FAIL;
 800a3f8:	2502      	movs	r5, #2
 800a3fa:	e78f      	b.n	800a31c <USBH_HandleControl+0x2e>
    USBH_CtlReceiveData (phost,
 800a3fc:	7903      	ldrb	r3, [r0, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	4611      	mov	r1, r2
 800a402:	f000 f9be 	bl	800a782 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 800a406:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800a40a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a40c:	2308      	movs	r3, #8
 800a40e:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a410:	2501      	movs	r5, #1
    break;
 800a412:	e783      	b.n	800a31c <USBH_HandleControl+0x2e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a414:	7901      	ldrb	r1, [r0, #4]
 800a416:	f00e fa97 	bl	8018948 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 800a41a:	2801      	cmp	r0, #1
 800a41c:	d005      	beq.n	800a42a <USBH_HandleControl+0x13c>
    else if (URB_Status == USBH_URB_ERROR)
 800a41e:	2804      	cmp	r0, #4
 800a420:	d007      	beq.n	800a432 <USBH_HandleControl+0x144>
      if(URB_Status == USBH_URB_STALL)
 800a422:	2805      	cmp	r0, #5
 800a424:	d047      	beq.n	800a4b6 <USBH_HandleControl+0x1c8>
  USBH_StatusTypeDef status = USBH_BUSY;
 800a426:	2501      	movs	r5, #1
 800a428:	e778      	b.n	800a31c <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_COMPLETE;
 800a42a:	230d      	movs	r3, #13
 800a42c:	7623      	strb	r3, [r4, #24]
      status = USBH_OK;
 800a42e:	2500      	movs	r5, #0
 800a430:	e774      	b.n	800a31c <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_ERROR;
 800a432:	230b      	movs	r3, #11
 800a434:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a436:	2501      	movs	r5, #1
 800a438:	e770      	b.n	800a31c <USBH_HandleControl+0x2e>
    USBH_CtlSendData (phost,
 800a43a:	2501      	movs	r5, #1
 800a43c:	9500      	str	r5, [sp, #0]
 800a43e:	7943      	ldrb	r3, [r0, #5]
 800a440:	2200      	movs	r2, #0
 800a442:	4611      	mov	r1, r2
 800a444:	f000 f987 	bl	800a756 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800a448:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800a44c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a44e:	230a      	movs	r3, #10
 800a450:	7623      	strb	r3, [r4, #24]
    break;
 800a452:	e763      	b.n	800a31c <USBH_HandleControl+0x2e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a454:	7941      	ldrb	r1, [r0, #5]
 800a456:	f00e fa77 	bl	8018948 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800a45a:	2801      	cmp	r0, #1
 800a45c:	d005      	beq.n	800a46a <USBH_HandleControl+0x17c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a45e:	2802      	cmp	r0, #2
 800a460:	d007      	beq.n	800a472 <USBH_HandleControl+0x184>
      if (URB_Status == USBH_URB_ERROR)
 800a462:	2804      	cmp	r0, #4
 800a464:	d009      	beq.n	800a47a <USBH_HandleControl+0x18c>
  USBH_StatusTypeDef status = USBH_BUSY;
 800a466:	2501      	movs	r5, #1
 800a468:	e758      	b.n	800a31c <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_COMPLETE;
 800a46a:	230d      	movs	r3, #13
 800a46c:	7623      	strb	r3, [r4, #24]
      status = USBH_OK;
 800a46e:	2500      	movs	r5, #0
 800a470:	e754      	b.n	800a31c <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_STATUS_OUT;
 800a472:	2309      	movs	r3, #9
 800a474:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a476:	2501      	movs	r5, #1
 800a478:	e750      	b.n	800a31c <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 800a47a:	230b      	movs	r3, #11
 800a47c:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a47e:	2501      	movs	r5, #1
 800a480:	e74c      	b.n	800a31c <USBH_HandleControl+0x2e>
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a482:	7e43      	ldrb	r3, [r0, #25]
 800a484:	3301      	adds	r3, #1
 800a486:	b2db      	uxtb	r3, r3
 800a488:	7643      	strb	r3, [r0, #25]
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d907      	bls.n	800a49e <USBH_HandleControl+0x1b0>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a48e:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800a492:	2106      	movs	r1, #6
 800a494:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	7663      	strb	r3, [r4, #25]
      status = USBH_FAIL;
 800a49a:	2502      	movs	r5, #2
 800a49c:	e73e      	b.n	800a31c <USBH_HandleControl+0x2e>
      USBH_LL_Stop(phost);
 800a49e:	f00e fab5 	bl	8018a0c <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 800a4a2:	2501      	movs	r5, #1
 800a4a4:	7625      	strb	r5, [r4, #24]
      phost->RequestState = CMD_SEND;
 800a4a6:	70a5      	strb	r5, [r4, #2]
 800a4a8:	e738      	b.n	800a31c <USBH_HandleControl+0x2e>
  switch (phost->Control.state)
 800a4aa:	2501      	movs	r5, #1
 800a4ac:	e736      	b.n	800a31c <USBH_HandleControl+0x2e>
  USBH_StatusTypeDef status = USBH_BUSY;
 800a4ae:	2501      	movs	r5, #1
 800a4b0:	e734      	b.n	800a31c <USBH_HandleControl+0x2e>
      status = USBH_NOT_SUPPORTED;
 800a4b2:	2503      	movs	r5, #3
 800a4b4:	e732      	b.n	800a31c <USBH_HandleControl+0x2e>
        status = USBH_NOT_SUPPORTED;
 800a4b6:	2503      	movs	r5, #3
 800a4b8:	e730      	b.n	800a31c <USBH_HandleControl+0x2e>

0800a4ba <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a4ba:	7803      	ldrb	r3, [r0, #0]
 800a4bc:	880a      	ldrh	r2, [r1, #0]
 800a4be:	4413      	add	r3, r2
 800a4c0:	800b      	strh	r3, [r1, #0]
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a4c2:	7803      	ldrb	r3, [r0, #0]
}
 800a4c4:	4418      	add	r0, r3
 800a4c6:	4770      	bx	lr

0800a4c8 <USBH_ParseCfgDesc>:
{
 800a4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800a4d0:	780b      	ldrb	r3, [r1, #0]
 800a4d2:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800a4d4:	784b      	ldrb	r3, [r1, #1]
 800a4d6:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800a4d8:	788b      	ldrb	r3, [r1, #2]
 800a4da:	78c9      	ldrb	r1, [r1, #3]
 800a4dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a4e0:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800a4e2:	7923      	ldrb	r3, [r4, #4]
 800a4e4:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800a4e6:	7963      	ldrb	r3, [r4, #5]
 800a4e8:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800a4ea:	79a3      	ldrb	r3, [r4, #6]
 800a4ec:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800a4ee:	79e3      	ldrb	r3, [r4, #7]
 800a4f0:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800a4f2:	7a23      	ldrb	r3, [r4, #8]
 800a4f4:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a4f6:	2a09      	cmp	r2, #9
 800a4f8:	d944      	bls.n	800a584 <USBH_ParseCfgDesc+0xbc>
 800a4fa:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 800a4fc:	2309      	movs	r3, #9
 800a4fe:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 800a502:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a504:	2e01      	cmp	r6, #1
 800a506:	d83d      	bhi.n	800a584 <USBH_ParseCfgDesc+0xbc>
 800a508:	886a      	ldrh	r2, [r5, #2]
 800a50a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d938      	bls.n	800a584 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a512:	f10d 0106 	add.w	r1, sp, #6
 800a516:	4620      	mov	r0, r4
 800a518:	f7ff ffcf 	bl	800a4ba <USBH_GetNextDesc>
 800a51c:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a51e:	7843      	ldrb	r3, [r0, #1]
 800a520:	2b04      	cmp	r3, #4
 800a522:	d1ef      	bne.n	800a504 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a524:	46b0      	mov	r8, r6
 800a526:	201a      	movs	r0, #26
 800a528:	fb06 f000 	mul.w	r0, r6, r0
 800a52c:	3008      	adds	r0, #8
 800a52e:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800a530:	4621      	mov	r1, r4
 800a532:	3002      	adds	r0, #2
 800a534:	f7ff fe9f 	bl	800a276 <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 800a538:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a53a:	231a      	movs	r3, #26
 800a53c:	fb03 5308 	mla	r3, r3, r8, r5
 800a540:	7b9b      	ldrb	r3, [r3, #14]
 800a542:	42bb      	cmp	r3, r7
 800a544:	d91b      	bls.n	800a57e <USBH_ParseCfgDesc+0xb6>
 800a546:	886a      	ldrh	r2, [r5, #2]
 800a548:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d916      	bls.n	800a57e <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800a550:	f10d 0106 	add.w	r1, sp, #6
 800a554:	4620      	mov	r0, r4
 800a556:	f7ff ffb0 	bl	800a4ba <USBH_GetNextDesc>
 800a55a:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a55c:	7843      	ldrb	r3, [r0, #1]
 800a55e:	2b05      	cmp	r3, #5
 800a560:	d1eb      	bne.n	800a53a <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a562:	3701      	adds	r7, #1
 800a564:	201a      	movs	r0, #26
 800a566:	fb00 f008 	mul.w	r0, r0, r8
 800a56a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800a56e:	3008      	adds	r0, #8
 800a570:	4428      	add	r0, r5
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800a572:	4621      	mov	r1, r4
 800a574:	3004      	adds	r0, #4
 800a576:	f7ff fe91 	bl	800a29c <USBH_ParseEPDesc>
            ep_ix++;
 800a57a:	b2ff      	uxtb	r7, r7
 800a57c:	e7dd      	b.n	800a53a <USBH_ParseCfgDesc+0x72>
        if_ix++;
 800a57e:	3601      	adds	r6, #1
 800a580:	b2f6      	uxtb	r6, r6
 800a582:	e7bf      	b.n	800a504 <USBH_ParseCfgDesc+0x3c>
}
 800a584:	b002      	add	sp, #8
 800a586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a58a <USBH_CtlReq>:
{
 800a58a:	b510      	push	{r4, lr}
 800a58c:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800a58e:	7880      	ldrb	r0, [r0, #2]
 800a590:	2801      	cmp	r0, #1
 800a592:	d003      	beq.n	800a59c <USBH_CtlReq+0x12>
 800a594:	2802      	cmp	r0, #2
 800a596:	d008      	beq.n	800a5aa <USBH_CtlReq+0x20>
 800a598:	2001      	movs	r0, #1
}
 800a59a:	bd10      	pop	{r4, pc}
    phost->Control.buff = buff;
 800a59c:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 800a59e:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	7623      	strb	r3, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	70a3      	strb	r3, [r4, #2]
    break;
 800a5a8:	e7f7      	b.n	800a59a <USBH_CtlReq+0x10>
    status = USBH_HandleControl(phost);
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f7ff fe9f 	bl	800a2ee <USBH_HandleControl>
    if (status == USBH_OK)
 800a5b0:	b920      	cbnz	r0, 800a5bc <USBH_CtlReq+0x32>
      phost->RequestState = CMD_SEND;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	7623      	strb	r3, [r4, #24]
      status = USBH_OK;
 800a5ba:	e7ee      	b.n	800a59a <USBH_CtlReq+0x10>
    else if (status == USBH_NOT_SUPPORTED)
 800a5bc:	2803      	cmp	r0, #3
 800a5be:	d004      	beq.n	800a5ca <USBH_CtlReq+0x40>
      if (status == USBH_FAIL)
 800a5c0:	2802      	cmp	r0, #2
 800a5c2:	d1ea      	bne.n	800a59a <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 800a5c8:	e7e7      	b.n	800a59a <USBH_CtlReq+0x10>
      phost->RequestState = CMD_SEND;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800a5d2:	e7e2      	b.n	800a59a <USBH_CtlReq+0x10>

0800a5d4 <USBH_GetDescriptor>:
{
 800a5d4:	b508      	push	{r3, lr}
 800a5d6:	468e      	mov	lr, r1
 800a5d8:	4694      	mov	ip, r2
 800a5da:	4619      	mov	r1, r3
 800a5dc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 800a5e0:	7883      	ldrb	r3, [r0, #2]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d002      	beq.n	800a5ec <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 800a5e6:	f7ff ffd0 	bl	800a58a <USBH_CtlReq>
}
 800a5ea:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a5ec:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 800a5f0:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a5f4:	2306      	movs	r3, #6
 800a5f6:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a5f8:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a5fc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 800a600:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 800a604:	d003      	beq.n	800a60e <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 800a60a:	82c2      	strh	r2, [r0, #22]
 800a60c:	e7eb      	b.n	800a5e6 <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a60e:	f240 4309 	movw	r3, #1033	; 0x409
 800a612:	8283      	strh	r3, [r0, #20]
 800a614:	e7f9      	b.n	800a60a <USBH_GetDescriptor+0x36>

0800a616 <USBH_Get_DevDesc>:
{
 800a616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a618:	b083      	sub	sp, #12
 800a61a:	4604      	mov	r4, r0
                                  phost->device.Data,
 800a61c:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800a620:	460d      	mov	r5, r1
 800a622:	9100      	str	r1, [sp, #0]
 800a624:	4633      	mov	r3, r6
 800a626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a62a:	2100      	movs	r1, #0
 800a62c:	f7ff ffd2 	bl	800a5d4 <USBH_GetDescriptor>
 800a630:	4607      	mov	r7, r0
 800a632:	b110      	cbz	r0, 800a63a <USBH_Get_DevDesc+0x24>
}
 800a634:	4638      	mov	r0, r7
 800a636:	b003      	add	sp, #12
 800a638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a63a:	462a      	mov	r2, r5
 800a63c:	4631      	mov	r1, r6
 800a63e:	f204 3022 	addw	r0, r4, #802	; 0x322
 800a642:	f7ff fdec 	bl	800a21e <USBH_ParseDevDesc>
 800a646:	e7f5      	b.n	800a634 <USBH_Get_DevDesc+0x1e>

0800a648 <USBH_Get_CfgDesc>:
{
 800a648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a64a:	b083      	sub	sp, #12
 800a64c:	4604      	mov	r4, r0
 800a64e:	460d      	mov	r5, r1
  pData = phost->device.CfgDesc_Raw;
 800a650:	f100 061c 	add.w	r6, r0, #28
  if((status = USBH_GetDescriptor(phost,
 800a654:	9100      	str	r1, [sp, #0]
 800a656:	4633      	mov	r3, r6
 800a658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a65c:	2100      	movs	r1, #0
 800a65e:	f7ff ffb9 	bl	800a5d4 <USBH_GetDescriptor>
 800a662:	4607      	mov	r7, r0
 800a664:	b110      	cbz	r0, 800a66c <USBH_Get_CfgDesc+0x24>
}
 800a666:	4638      	mov	r0, r7
 800a668:	b003      	add	sp, #12
 800a66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800a66c:	462a      	mov	r2, r5
 800a66e:	4631      	mov	r1, r6
 800a670:	f504 704d 	add.w	r0, r4, #820	; 0x334
 800a674:	f7ff ff28 	bl	800a4c8 <USBH_ParseCfgDesc>
 800a678:	e7f5      	b.n	800a666 <USBH_Get_CfgDesc+0x1e>

0800a67a <USBH_Get_StringDesc>:
{
 800a67a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a67c:	b083      	sub	sp, #12
 800a67e:	4616      	mov	r6, r2
 800a680:	461d      	mov	r5, r3
                                  phost->device.Data,
 800a682:	f500 748e 	add.w	r4, r0, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	4623      	mov	r3, r4
 800a68a:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800a68e:	2100      	movs	r1, #0
 800a690:	f7ff ffa0 	bl	800a5d4 <USBH_GetDescriptor>
 800a694:	4607      	mov	r7, r0
 800a696:	b110      	cbz	r0, 800a69e <USBH_Get_StringDesc+0x24>
}
 800a698:	4638      	mov	r0, r7
 800a69a:	b003      	add	sp, #12
 800a69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800a69e:	462a      	mov	r2, r5
 800a6a0:	4631      	mov	r1, r6
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f7ff fe0a 	bl	800a2bc <USBH_ParseStringDesc>
 800a6a8:	e7f6      	b.n	800a698 <USBH_Get_StringDesc+0x1e>

0800a6aa <USBH_SetAddress>:
{
 800a6aa:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 800a6ac:	7883      	ldrb	r3, [r0, #2]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d004      	beq.n	800a6bc <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	f7ff ff68 	bl	800a58a <USBH_CtlReq>
}
 800a6ba:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a6bc:	2300      	movs	r3, #0
 800a6be:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a6c0:	2205      	movs	r2, #5
 800a6c2:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a6c4:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6c6:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6c8:	82c3      	strh	r3, [r0, #22]
 800a6ca:	e7f2      	b.n	800a6b2 <USBH_SetAddress+0x8>

0800a6cc <USBH_SetCfg>:
{
 800a6cc:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 800a6ce:	7883      	ldrb	r3, [r0, #2]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d004      	beq.n	800a6de <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U , 0U);
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	f7ff ff57 	bl	800a58a <USBH_CtlReq>
}
 800a6dc:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6de:	2300      	movs	r3, #0
 800a6e0:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a6e2:	2209      	movs	r2, #9
 800a6e4:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a6e6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6e8:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6ea:	82c3      	strh	r3, [r0, #22]
 800a6ec:	e7f2      	b.n	800a6d4 <USBH_SetCfg+0x8>

0800a6ee <USBH_SetFeature>:
{
 800a6ee:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 800a6f0:	7883      	ldrb	r3, [r0, #2]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d004      	beq.n	800a700 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	f7ff ff46 	bl	800a58a <USBH_CtlReq>
}
 800a6fe:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a700:	2300      	movs	r3, #0
 800a702:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a704:	2203      	movs	r2, #3
 800a706:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a708:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a70a:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a70c:	82c3      	strh	r3, [r0, #22]
 800a70e:	e7f2      	b.n	800a6f6 <USBH_SetFeature+0x8>

0800a710 <USBH_ClrFeature>:
{
 800a710:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 800a712:	7883      	ldrb	r3, [r0, #2]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d004      	beq.n	800a722 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, 0U , 0U);
 800a718:	2200      	movs	r2, #0
 800a71a:	4611      	mov	r1, r2
 800a71c:	f7ff ff35 	bl	800a58a <USBH_CtlReq>
}
 800a720:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a722:	2302      	movs	r3, #2
 800a724:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a726:	2301      	movs	r3, #1
 800a728:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a72a:	2300      	movs	r3, #0
 800a72c:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a72e:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a730:	82c3      	strh	r3, [r0, #22]
 800a732:	e7f1      	b.n	800a718 <USBH_ClrFeature+0x8>

0800a734 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800a734:	b510      	push	{r4, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	460b      	mov	r3, r1
 800a73a:	4611      	mov	r1, r2

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a73c:	2400      	movs	r4, #0
 800a73e:	9403      	str	r4, [sp, #12]
 800a740:	2208      	movs	r2, #8
 800a742:	9202      	str	r2, [sp, #8]
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	9400      	str	r4, [sp, #0]
 800a748:	4623      	mov	r3, r4
 800a74a:	4622      	mov	r2, r4
 800a74c:	f00e f989 	bl	8018a62 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 800a750:	4620      	mov	r0, r4
 800a752:	b004      	add	sp, #16
 800a754:	bd10      	pop	{r4, pc}

0800a756 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800a756:	b530      	push	{r4, r5, lr}
 800a758:	b085      	sub	sp, #20
 800a75a:	460c      	mov	r4, r1
 800a75c:	4619      	mov	r1, r3
 800a75e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800a762:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 800a766:	b105      	cbz	r5, 800a76a <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 800a768:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a76a:	9303      	str	r3, [sp, #12]
 800a76c:	9202      	str	r2, [sp, #8]
 800a76e:	9401      	str	r4, [sp, #4]
 800a770:	2301      	movs	r3, #1
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	2300      	movs	r3, #0
 800a776:	461a      	mov	r2, r3
 800a778:	f00e f973 	bl	8018a62 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 800a77c:	2000      	movs	r0, #0
 800a77e:	b005      	add	sp, #20
 800a780:	bd30      	pop	{r4, r5, pc}

0800a782 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a782:	b530      	push	{r4, r5, lr}
 800a784:	b085      	sub	sp, #20
 800a786:	460d      	mov	r5, r1
 800a788:	4619      	mov	r1, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a78a:	2400      	movs	r4, #0
 800a78c:	9403      	str	r4, [sp, #12]
 800a78e:	9202      	str	r2, [sp, #8]
 800a790:	9501      	str	r5, [sp, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	9200      	str	r2, [sp, #0]
 800a796:	4623      	mov	r3, r4
 800a798:	f00e f963 	bl	8018a62 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 800a79c:	4620      	mov	r0, r4
 800a79e:	b005      	add	sp, #20
 800a7a0:	bd30      	pop	{r4, r5, pc}

0800a7a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800a7a2:	b530      	push	{r4, r5, lr}
 800a7a4:	b085      	sub	sp, #20
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800a7ae:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 800a7b2:	b105      	cbz	r5, 800a7b6 <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 800a7b4:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a7b6:	9303      	str	r3, [sp, #12]
 800a7b8:	9202      	str	r2, [sp, #8]
 800a7ba:	9401      	str	r4, [sp, #4]
 800a7bc:	2301      	movs	r3, #1
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f00e f94d 	bl	8018a62 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	b005      	add	sp, #20
 800a7cc:	bd30      	pop	{r4, r5, pc}

0800a7ce <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a7ce:	b530      	push	{r4, r5, lr}
 800a7d0:	b085      	sub	sp, #20
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	4619      	mov	r1, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a7d6:	2400      	movs	r4, #0
 800a7d8:	9403      	str	r4, [sp, #12]
 800a7da:	9202      	str	r2, [sp, #8]
 800a7dc:	9501      	str	r5, [sp, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	9200      	str	r2, [sp, #0]
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	f00e f93d 	bl	8018a62 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	b005      	add	sp, #20
 800a7ec:	bd30      	pop	{r4, r5, pc}

0800a7ee <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2b0a      	cmp	r3, #10
 800a7f2:	d80b      	bhi.n	800a80c <USBH_GetFreePipe+0x1e>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a7f4:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800a7f8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a7fc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800a800:	d002      	beq.n	800a808 <USBH_GetFreePipe+0x1a>
  for (idx = 0U ; idx < 11U ; idx++)
 800a802:	3301      	adds	r3, #1
 800a804:	b2db      	uxtb	r3, r3
 800a806:	e7f3      	b.n	800a7f0 <USBH_GetFreePipe+0x2>
	{
	   return (uint16_t)idx;
 800a808:	b298      	uxth	r0, r3
 800a80a:	4770      	bx	lr
	}
  }
  return 0xFFFFU;
 800a80c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800a810:	4770      	bx	lr

0800a812 <USBH_OpenPipe>:
{
 800a812:	b510      	push	{r4, lr}
 800a814:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost,
 800a816:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800a81a:	9402      	str	r4, [sp, #8]
 800a81c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800a820:	9401      	str	r4, [sp, #4]
 800a822:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800a826:	9400      	str	r4, [sp, #0]
 800a828:	f00e f900 	bl	8018a2c <USBH_LL_OpenPipe>
}
 800a82c:	2000      	movs	r0, #0
 800a82e:	b004      	add	sp, #16
 800a830:	bd10      	pop	{r4, pc}

0800a832 <USBH_ClosePipe>:
{
 800a832:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 800a834:	f00e f90d 	bl	8018a52 <USBH_LL_ClosePipe>
}
 800a838:	2000      	movs	r0, #0
 800a83a:	bd08      	pop	{r3, pc}

0800a83c <USBH_AllocPipe>:
{
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4605      	mov	r5, r0
 800a840:	460c      	mov	r4, r1
  pipe =  USBH_GetFreePipe(phost);
 800a842:	f7ff ffd4 	bl	800a7ee <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 800a846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a84a:	4298      	cmp	r0, r3
 800a84c:	d005      	beq.n	800a85a <USBH_AllocPipe+0x1e>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800a84e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800a852:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 800a856:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
}
 800a85a:	b2c0      	uxtb	r0, r0
 800a85c:	bd38      	pop	{r3, r4, r5, pc}

0800a85e <USBH_FreePipe>:
   if(idx < 11U)
 800a85e:	290a      	cmp	r1, #10
 800a860:	d806      	bhi.n	800a870 <USBH_FreePipe+0x12>
	 phost->Pipes[idx] &= 0x7FFFU;
 800a862:	31e0      	adds	r1, #224	; 0xe0
 800a864:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800a868:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a86c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 800a870:	2000      	movs	r0, #0
 800a872:	4770      	bx	lr

0800a874 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a874:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a876:	4b04      	ldr	r3, [pc, #16]	; (800a888 <disk_status+0x14>)
 800a878:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800a87c:	6852      	ldr	r2, [r2, #4]
 800a87e:	6852      	ldr	r2, [r2, #4]
 800a880:	4403      	add	r3, r0
 800a882:	7b18      	ldrb	r0, [r3, #12]
 800a884:	4790      	blx	r2
  return stat;
}
 800a886:	bd08      	pop	{r3, pc}
 800a888:	200005d0 	.word	0x200005d0

0800a88c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a88c:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800a88e:	4b08      	ldr	r3, [pc, #32]	; (800a8b0 <disk_initialize+0x24>)
 800a890:	5c1b      	ldrb	r3, [r3, r0]
 800a892:	b953      	cbnz	r3, 800a8aa <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 800a894:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <disk_initialize+0x24>)
 800a896:	2201      	movs	r2, #1
 800a898:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a89a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800a89e:	6852      	ldr	r2, [r2, #4]
 800a8a0:	6812      	ldr	r2, [r2, #0]
 800a8a2:	4418      	add	r0, r3
 800a8a4:	7b00      	ldrb	r0, [r0, #12]
 800a8a6:	4790      	blx	r2
  }
  return stat;
}
 800a8a8:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e7fc      	b.n	800a8a8 <disk_initialize+0x1c>
 800a8ae:	bf00      	nop
 800a8b0:	200005d0 	.word	0x200005d0

0800a8b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a8b4:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a8b6:	4c04      	ldr	r4, [pc, #16]	; (800a8c8 <disk_read+0x14>)
 800a8b8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800a8bc:	686d      	ldr	r5, [r5, #4]
 800a8be:	68ad      	ldr	r5, [r5, #8]
 800a8c0:	4404      	add	r4, r0
 800a8c2:	7b20      	ldrb	r0, [r4, #12]
 800a8c4:	47a8      	blx	r5
  return res;
}
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	200005d0 	.word	0x200005d0

0800a8cc <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800a8cc:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800a8ce:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800a8d0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800a8d4:	4770      	bx	lr

0800a8d6 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800a8d6:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 800a8d8:	7883      	ldrb	r3, [r0, #2]
 800a8da:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 800a8de:	7843      	ldrb	r3, [r0, #1]
 800a8e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800a8e4:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800a8e6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a8ea:	4770      	bx	lr

0800a8ec <ld_qword>:
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
	QWORD rv;

	rv = ptr[7];
 800a8ec:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
 800a8ee:	7983      	ldrb	r3, [r0, #6]
 800a8f0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[5];
 800a8f4:	7943      	ldrb	r3, [r0, #5]
 800a8f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[4];
 800a8fa:	7902      	ldrb	r2, [r0, #4]
 800a8fc:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
	rv = rv << 8 | ptr[3];
 800a900:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a904:	78c2      	ldrb	r2, [r0, #3]
 800a906:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[2];
 800a90a:	021b      	lsls	r3, r3, #8
 800a90c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800a910:	7881      	ldrb	r1, [r0, #2]
 800a912:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
	rv = rv << 8 | ptr[1];
 800a916:	021b      	lsls	r3, r3, #8
 800a918:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800a91c:	7841      	ldrb	r1, [r0, #1]
 800a91e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800a926:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800a92a:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
 800a92e:	4770      	bx	lr

0800a930 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800a930:	4694      	mov	ip, r2
 800a932:	b132      	cbz	r2, 800a942 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 800a934:	780a      	ldrb	r2, [r1, #0]
 800a936:	3101      	adds	r1, #1
 800a938:	7002      	strb	r2, [r0, #0]
 800a93a:	3001      	adds	r0, #1
		} while (--cnt);
 800a93c:	f1bc 0c01 	subs.w	ip, ip, #1
 800a940:	d1f8      	bne.n	800a934 <mem_cpy+0x4>
	}
}
 800a942:	4770      	bx	lr

0800a944 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800a944:	7001      	strb	r1, [r0, #0]
 800a946:	3001      	adds	r0, #1
	} while (--cnt);
 800a948:	3a01      	subs	r2, #1
 800a94a:	d1fb      	bne.n	800a944 <mem_set>
}
 800a94c:	4770      	bx	lr

0800a94e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a94e:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800a950:	f89c 0000 	ldrb.w	r0, [ip]
 800a954:	f10c 0c01 	add.w	ip, ip, #1
 800a958:	780b      	ldrb	r3, [r1, #0]
 800a95a:	3101      	adds	r1, #1
 800a95c:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 800a95e:	3a01      	subs	r2, #1
 800a960:	d001      	beq.n	800a966 <mem_cmp+0x18>
 800a962:	2800      	cmp	r0, #0
 800a964:	d0f4      	beq.n	800a950 <mem_cmp+0x2>

	return r;
}
 800a966:	4770      	bx	lr

0800a968 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a968:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 800a96a:	e000      	b.n	800a96e <chk_chr+0x6>
 800a96c:	3301      	adds	r3, #1
 800a96e:	7818      	ldrb	r0, [r3, #0]
 800a970:	b108      	cbz	r0, 800a976 <chk_chr+0xe>
 800a972:	4288      	cmp	r0, r1
 800a974:	d1fa      	bne.n	800a96c <chk_chr+0x4>
	return *str;
}
 800a976:	4770      	bx	lr

0800a978 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800a978:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a97a:	6943      	ldr	r3, [r0, #20]
 800a97c:	3b02      	subs	r3, #2
 800a97e:	428b      	cmp	r3, r1
 800a980:	d904      	bls.n	800a98c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800a982:	8943      	ldrh	r3, [r0, #10]
 800a984:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a986:	fb01 0003 	mla	r0, r1, r3, r0
 800a98a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a98c:	2000      	movs	r0, #0
}
 800a98e:	4770      	bx	lr

0800a990 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a990:	b510      	push	{r4, lr}
 800a992:	4619      	mov	r1, r3
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a994:	6803      	ldr	r3, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a996:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800a998:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a99a:	0a50      	lsrs	r0, r2, #9
 800a99c:	895a      	ldrh	r2, [r3, #10]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 800a9a4:	0a49      	lsrs	r1, r1, #9
 800a9a6:	f7f6 fa67 	bl	8000e78 <__aeabi_uldivmod>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	e001      	b.n	800a9b2 <clmt_clust+0x22>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 800a9ae:	1a12      	subs	r2, r2, r0
 800a9b0:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a9b2:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a9b4:	b118      	cbz	r0, 800a9be <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a9b6:	4282      	cmp	r2, r0
 800a9b8:	d2f9      	bcs.n	800a9ae <clmt_clust+0x1e>
	}
	return cl + *tbl;	/* Return the cluster number */
 800a9ba:	6860      	ldr	r0, [r4, #4]
 800a9bc:	4410      	add	r0, r2
}
 800a9be:	bd10      	pop	{r4, pc}

0800a9c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9c6:	f101 001a 	add.w	r0, r1, #26
 800a9ca:	f7ff ff7f 	bl	800a8cc <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800a9ce:	7833      	ldrb	r3, [r6, #0]
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d000      	beq.n	800a9d6 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800a9d4:	bd70      	pop	{r4, r5, r6, pc}
 800a9d6:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9d8:	f105 0014 	add.w	r0, r5, #20
 800a9dc:	f7ff ff76 	bl	800a8cc <ld_word>
 800a9e0:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800a9e4:	e7f6      	b.n	800a9d4 <ld_clust+0x14>
	...

0800a9e8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a9f0:	f101 001a 	add.w	r0, r1, #26
 800a9f4:	f7ff ff6a 	bl	800a8cc <ld_word>
 800a9f8:	bb50      	cbnz	r0, 800aa50 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a9fa:	7835      	ldrb	r5, [r6, #0]
 800a9fc:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800aa00:	3d01      	subs	r5, #1
 800aa02:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800aa06:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aa0a:	2701      	movs	r7, #1
 800aa0c:	2400      	movs	r4, #0
 800aa0e:	e004      	b.n	800aa1a <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800aa10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa14:	4298      	cmp	r0, r3
 800aa16:	d120      	bne.n	800aa5a <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aa18:	3401      	adds	r4, #1
 800aa1a:	2c0c      	cmp	r4, #12
 800aa1c:	d80d      	bhi.n	800aa3a <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800aa1e:	4b12      	ldr	r3, [pc, #72]	; (800aa68 <pick_lfn+0x80>)
 800aa20:	5d18      	ldrb	r0, [r3, r4]
 800aa22:	4430      	add	r0, r6
 800aa24:	f7ff ff52 	bl	800a8cc <ld_word>
		if (wc) {
 800aa28:	2f00      	cmp	r7, #0
 800aa2a:	d0f1      	beq.n	800aa10 <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800aa2c:	2dfe      	cmp	r5, #254	; 0xfe
 800aa2e:	d812      	bhi.n	800aa56 <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800aa30:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 800aa34:	4607      	mov	r7, r0
 800aa36:	3501      	adds	r5, #1
 800aa38:	e7ee      	b.n	800aa18 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800aa3a:	7833      	ldrb	r3, [r6, #0]
 800aa3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aa40:	d00d      	beq.n	800aa5e <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800aa42:	2dfe      	cmp	r5, #254	; 0xfe
 800aa44:	d80d      	bhi.n	800aa62 <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 800aa4c:	2001      	movs	r0, #1
 800aa4e:	e000      	b.n	800aa52 <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800aa50:	2000      	movs	r0, #0
}
 800aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800aa56:	2000      	movs	r0, #0
 800aa58:	e7fb      	b.n	800aa52 <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	e7f9      	b.n	800aa52 <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 800aa5e:	2001      	movs	r0, #1
 800aa60:	e7f7      	b.n	800aa52 <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800aa62:	2000      	movs	r0, #0
 800aa64:	e7f5      	b.n	800aa52 <pick_lfn+0x6a>
 800aa66:	bf00      	nop
 800aa68:	0801abbc 	.word	0x0801abbc

0800aa6c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800aa6c:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800aa6e:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 800aa72:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800aa74:	01c3      	lsls	r3, r0, #7
 800aa76:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800aa7a:	7808      	ldrb	r0, [r1, #0]
 800aa7c:	3101      	adds	r1, #1
 800aa7e:	fa50 f383 	uxtab	r3, r0, r3
 800aa82:	b2d8      	uxtb	r0, r3
	} while (--n);
 800aa84:	f1bc 0c01 	subs.w	ip, ip, #1
 800aa88:	d1f4      	bne.n	800aa74 <sum_sfn+0x8>
	return sum;
}
 800aa8a:	4770      	bx	lr

0800aa8c <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800aa8c:	b500      	push	{lr}
 800aa8e:	4686      	mov	lr, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800aa90:	7841      	ldrb	r1, [r0, #1]
 800aa92:	3101      	adds	r1, #1
 800aa94:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
 800aa96:	2000      	movs	r0, #0
 800aa98:	4603      	mov	r3, r0
 800aa9a:	e001      	b.n	800aaa0 <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
 800aa9c:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	428b      	cmp	r3, r1
 800aaa2:	d20a      	bcs.n	800aaba <xdir_sum+0x2e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d0f9      	beq.n	800aa9c <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800aaa8:	0842      	lsrs	r2, r0, #1
 800aaaa:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
 800aaae:	f81e c003 	ldrb.w	ip, [lr, r3]
 800aab2:	fa1c f282 	uxtah	r2, ip, r2
 800aab6:	b290      	uxth	r0, r2
 800aab8:	e7f1      	b.n	800aa9e <xdir_sum+0x12>
		}
	}
	return sum;
}
 800aaba:	f85d fb04 	ldr.w	pc, [sp], #4

0800aabe <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800aabe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac0:	4606      	mov	r6, r0
 800aac2:	460f      	mov	r7, r1
#endif

	/* Get file name */
	di = 0;
#if _LFN_UNICODE
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800aac4:	2540      	movs	r5, #64	; 0x40
	di = 0;
 800aac6:	2400      	movs	r4, #0
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800aac8:	e00a      	b.n	800aae0 <get_xdir_info+0x22>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
		w = ld_word(dirb + si);					/* Get a character */
 800aaca:	1970      	adds	r0, r6, r5
 800aacc:	f7ff fefe 	bl	800a8cc <ld_word>
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
 800aad0:	2cfe      	cmp	r4, #254	; 0xfe
 800aad2:	d80e      	bhi.n	800aaf2 <get_xdir_info+0x34>
		fno->fname[di] = w;						/* Store it */
 800aad4:	f104 0314 	add.w	r3, r4, #20
 800aad8:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800aadc:	3502      	adds	r5, #2
 800aade:	3401      	adds	r4, #1
 800aae0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800aae4:	42a3      	cmp	r3, r4
 800aae6:	d905      	bls.n	800aaf4 <get_xdir_info+0x36>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800aae8:	f015 0f1f 	tst.w	r5, #31
 800aaec:	d1ed      	bne.n	800aaca <get_xdir_info+0xc>
 800aaee:	3502      	adds	r5, #2
 800aaf0:	e7eb      	b.n	800aaca <get_xdir_info+0xc>
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
 800aaf2:	2400      	movs	r4, #0
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
		fno->fname[di++] = (char)w;
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800aaf4:	b92c      	cbnz	r4, 800ab02 <get_xdir_info+0x44>
 800aaf6:	f104 0314 	add.w	r3, r4, #20
 800aafa:	223f      	movs	r2, #63	; 0x3f
 800aafc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800ab00:	3401      	adds	r4, #1
	fno->fname[di] = 0;						/* Terminate file name */
 800ab02:	3414      	adds	r4, #20
 800ab04:	2300      	movs	r3, #0
 800ab06:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]

	fno->altname[0] = 0;							/* No SFN */
 800ab0a:	81fb      	strh	r3, [r7, #14]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800ab0c:	7933      	ldrb	r3, [r6, #4]
 800ab0e:	733b      	strb	r3, [r7, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800ab10:	f013 0f10 	tst.w	r3, #16
 800ab14:	d110      	bne.n	800ab38 <get_xdir_info+0x7a>
 800ab16:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800ab1a:	f7ff fee7 	bl	800a8ec <ld_qword>
 800ab1e:	6038      	str	r0, [r7, #0]
 800ab20:	6079      	str	r1, [r7, #4]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800ab22:	f106 000c 	add.w	r0, r6, #12
 800ab26:	f7ff fed1 	bl	800a8cc <ld_word>
 800ab2a:	8178      	strh	r0, [r7, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800ab2c:	f106 000e 	add.w	r0, r6, #14
 800ab30:	f7ff fecc 	bl	800a8cc <ld_word>
 800ab34:	8138      	strh	r0, [r7, #8]
}
 800ab36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800ab38:	2000      	movs	r0, #0
 800ab3a:	4601      	mov	r1, r0
 800ab3c:	e7ef      	b.n	800ab1e <get_xdir_info+0x60>

0800ab3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ab3e:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ab40:	6800      	ldr	r0, [r0, #0]
 800ab42:	b108      	cbz	r0, 800ab48 <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ab44:	4602      	mov	r2, r0
 800ab46:	e003      	b.n	800ab50 <get_ldnumber+0x12>
	int vol = -1;
 800ab48:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4c:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ab4e:	3202      	adds	r2, #2
 800ab50:	8813      	ldrh	r3, [r2, #0]
 800ab52:	2b3a      	cmp	r3, #58	; 0x3a
 800ab54:	bf18      	it	ne
 800ab56:	2b1f      	cmpne	r3, #31
 800ab58:	d8f9      	bhi.n	800ab4e <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ab5a:	2b3a      	cmp	r3, #58	; 0x3a
 800ab5c:	d001      	beq.n	800ab62 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ab5e:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800ab60:	4770      	bx	lr
			i = *tp++ - '0';
 800ab62:	4603      	mov	r3, r0
 800ab64:	f833 0b02 	ldrh.w	r0, [r3], #2
 800ab68:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ab6a:	2809      	cmp	r0, #9
 800ab6c:	bf98      	it	ls
 800ab6e:	429a      	cmpls	r2, r3
 800ab70:	d107      	bne.n	800ab82 <get_ldnumber+0x44>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ab72:	2801      	cmp	r0, #1
 800ab74:	d902      	bls.n	800ab7c <get_ldnumber+0x3e>
	int vol = -1;
 800ab76:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 800ab7a:	4770      	bx	lr
					*path = ++tt;
 800ab7c:	3202      	adds	r2, #2
 800ab7e:	600a      	str	r2, [r1, #0]
 800ab80:	4770      	bx	lr
	int vol = -1;
 800ab82:	f04f 30ff 	mov.w	r0, #4294967295
 800ab86:	4770      	bx	lr

0800ab88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	b198      	cbz	r0, 800abb8 <validate+0x30>
 800ab90:	6803      	ldr	r3, [r0, #0]
 800ab92:	b19b      	cbz	r3, 800abbc <validate+0x34>
 800ab94:	781a      	ldrb	r2, [r3, #0]
 800ab96:	b1a2      	cbz	r2, 800abc2 <validate+0x3a>
 800ab98:	8881      	ldrh	r1, [r0, #4]
 800ab9a:	88da      	ldrh	r2, [r3, #6]
 800ab9c:	4291      	cmp	r1, r2
 800ab9e:	d003      	beq.n	800aba8 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800aba0:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aba2:	2400      	movs	r4, #0
 800aba4:	602c      	str	r4, [r5, #0]
	return res;
}
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aba8:	7858      	ldrb	r0, [r3, #1]
 800abaa:	f7ff fe63 	bl	800a874 <disk_status>
 800abae:	f010 0001 	ands.w	r0, r0, #1
 800abb2:	d109      	bne.n	800abc8 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800abb4:	6824      	ldr	r4, [r4, #0]
 800abb6:	e7f5      	b.n	800aba4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800abb8:	2009      	movs	r0, #9
 800abba:	e7f3      	b.n	800aba4 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800abbc:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800abbe:	2009      	movs	r0, #9
 800abc0:	e7f0      	b.n	800aba4 <validate+0x1c>
 800abc2:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800abc4:	2400      	movs	r4, #0
 800abc6:	e7ed      	b.n	800aba4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800abc8:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800abca:	2400      	movs	r4, #0
 800abcc:	e7ea      	b.n	800aba4 <validate+0x1c>

0800abce <move_window>:
{
 800abce:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800abd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800abd2:	428b      	cmp	r3, r1
 800abd4:	d101      	bne.n	800abda <move_window+0xc>
	FRESULT res = FR_OK;
 800abd6:	2000      	movs	r0, #0
}
 800abd8:	bd38      	pop	{r3, r4, r5, pc}
 800abda:	4604      	mov	r4, r0
 800abdc:	460d      	mov	r5, r1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800abde:	2301      	movs	r3, #1
 800abe0:	460a      	mov	r2, r1
 800abe2:	f100 0130 	add.w	r1, r0, #48	; 0x30
 800abe6:	7840      	ldrb	r0, [r0, #1]
 800abe8:	f7ff fe64 	bl	800a8b4 <disk_read>
 800abec:	b110      	cbz	r0, 800abf4 <move_window+0x26>
				res = FR_DISK_ERR;
 800abee:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800abf0:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800abf4:	62e5      	str	r5, [r4, #44]	; 0x2c
 800abf6:	e7ef      	b.n	800abd8 <move_window+0xa>

0800abf8 <check_fs>:
{
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800abfc:	2300      	movs	r3, #0
 800abfe:	70c3      	strb	r3, [r0, #3]
 800ac00:	f04f 33ff 	mov.w	r3, #4294967295
 800ac04:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ac06:	f7ff ffe2 	bl	800abce <move_window>
 800ac0a:	bb60      	cbnz	r0, 800ac66 <check_fs+0x6e>
 800ac0c:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ac0e:	f204 202e 	addw	r0, r4, #558	; 0x22e
 800ac12:	f7ff fe5b 	bl	800a8cc <ld_word>
 800ac16:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ac1a:	4298      	cmp	r0, r3
 800ac1c:	d125      	bne.n	800ac6a <check_fs+0x72>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ac1e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ac22:	2be9      	cmp	r3, #233	; 0xe9
 800ac24:	d00e      	beq.n	800ac44 <check_fs+0x4c>
 800ac26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ac28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800ac2c:	4a11      	ldr	r2, [pc, #68]	; (800ac74 <check_fs+0x7c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d008      	beq.n	800ac44 <check_fs+0x4c>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ac32:	220b      	movs	r2, #11
 800ac34:	4910      	ldr	r1, [pc, #64]	; (800ac78 <check_fs+0x80>)
 800ac36:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800ac3a:	f7ff fe88 	bl	800a94e <mem_cmp>
 800ac3e:	b1b8      	cbz	r0, 800ac70 <check_fs+0x78>
	return 2;
 800ac40:	2502      	movs	r5, #2
 800ac42:	e013      	b.n	800ac6c <check_fs+0x74>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ac44:	f104 0066 	add.w	r0, r4, #102	; 0x66
 800ac48:	f7ff fe45 	bl	800a8d6 <ld_dword>
 800ac4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800ac50:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <check_fs+0x84>)
 800ac52:	4298      	cmp	r0, r3
 800ac54:	d00a      	beq.n	800ac6c <check_fs+0x74>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ac56:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800ac5a:	f7ff fe3c 	bl	800a8d6 <ld_dword>
 800ac5e:	4b08      	ldr	r3, [pc, #32]	; (800ac80 <check_fs+0x88>)
 800ac60:	4298      	cmp	r0, r3
 800ac62:	d1e6      	bne.n	800ac32 <check_fs+0x3a>
 800ac64:	e002      	b.n	800ac6c <check_fs+0x74>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ac66:	2504      	movs	r5, #4
 800ac68:	e000      	b.n	800ac6c <check_fs+0x74>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ac6a:	2503      	movs	r5, #3
}
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ac70:	2501      	movs	r5, #1
 800ac72:	e7fb      	b.n	800ac6c <check_fs+0x74>
 800ac74:	009000eb 	.word	0x009000eb
 800ac78:	0801ab1c 	.word	0x0801ab1c
 800ac7c:	00544146 	.word	0x00544146
 800ac80:	33544146 	.word	0x33544146

0800ac84 <find_volume>:
{
 800ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac88:	b087      	sub	sp, #28
 800ac8a:	460d      	mov	r5, r1
	*rfs = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800ac90:	f7ff ff55 	bl	800ab3e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac94:	1e06      	subs	r6, r0, #0
 800ac96:	f2c0 819e 	blt.w	800afd6 <find_volume+0x352>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ac9a:	4bc8      	ldr	r3, [pc, #800]	; (800afbc <find_volume+0x338>)
 800ac9c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aca0:	2c00      	cmp	r4, #0
 800aca2:	f000 819a 	beq.w	800afda <find_volume+0x356>
	*rfs = fs;							/* Return pointer to the file system object */
 800aca6:	602c      	str	r4, [r5, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aca8:	7823      	ldrb	r3, [r4, #0]
 800acaa:	b133      	cbz	r3, 800acba <find_volume+0x36>
		stat = disk_status(fs->drv);
 800acac:	7860      	ldrb	r0, [r4, #1]
 800acae:	f7ff fde1 	bl	800a874 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800acb2:	f010 0501 	ands.w	r5, r0, #1
 800acb6:	f000 8193 	beq.w	800afe0 <find_volume+0x35c>
	fs->fs_type = 0;					/* Clear the file system object */
 800acba:	2300      	movs	r3, #0
 800acbc:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800acbe:	b2f0      	uxtb	r0, r6
 800acc0:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800acc2:	f7ff fde3 	bl	800a88c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800acc6:	f010 0501 	ands.w	r5, r0, #1
 800acca:	f040 8188 	bne.w	800afde <find_volume+0x35a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800acce:	2100      	movs	r1, #0
 800acd0:	4620      	mov	r0, r4
 800acd2:	f7ff ff91 	bl	800abf8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800acd6:	2802      	cmp	r0, #2
 800acd8:	f000 80b3 	beq.w	800ae42 <find_volume+0x1be>
	bsect = 0;
 800acdc:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800acde:	2804      	cmp	r0, #4
 800ace0:	f000 8182 	beq.w	800afe8 <find_volume+0x364>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ace4:	2801      	cmp	r0, #1
 800ace6:	f200 8181 	bhi.w	800afec <find_volume+0x368>
	if (fmt == 1) {
 800acea:	f000 8139 	beq.w	800af60 <find_volume+0x2dc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800acee:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 800acf2:	f7ff fdeb 	bl	800a8cc <ld_word>
 800acf6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800acfa:	f040 818d 	bne.w	800b018 <find_volume+0x394>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800acfe:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800ad02:	f7ff fde3 	bl	800a8cc <ld_word>
 800ad06:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ad08:	b920      	cbnz	r0, 800ad14 <find_volume+0x90>
 800ad0a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800ad0e:	f7ff fde2 	bl	800a8d6 <ld_dword>
 800ad12:	4680      	mov	r8, r0
		fs->fsize = fasize;
 800ad14:	f8c4 8018 	str.w	r8, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ad18:	f894 7040 	ldrb.w	r7, [r4, #64]	; 0x40
 800ad1c:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ad1e:	1e7b      	subs	r3, r7, #1
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	f200 817a 	bhi.w	800b01c <find_volume+0x398>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ad28:	fb08 f707 	mul.w	r7, r8, r7
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ad2c:	f894 b03d 	ldrb.w	fp, [r4, #61]	; 0x3d
 800ad30:	f8a4 b00a 	strh.w	fp, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ad34:	f1bb 0f00 	cmp.w	fp, #0
 800ad38:	f000 8172 	beq.w	800b020 <find_volume+0x39c>
 800ad3c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ad40:	ea1b 0f03 	tst.w	fp, r3
 800ad44:	f040 816e 	bne.w	800b024 <find_volume+0x3a0>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ad48:	f104 0041 	add.w	r0, r4, #65	; 0x41
 800ad4c:	f7ff fdbe 	bl	800a8cc <ld_word>
 800ad50:	4681      	mov	r9, r0
 800ad52:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ad54:	f010 0f0f 	tst.w	r0, #15
 800ad58:	f040 8166 	bne.w	800b028 <find_volume+0x3a4>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ad5c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800ad60:	f7ff fdb4 	bl	800a8cc <ld_word>
 800ad64:	4682      	mov	sl, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ad66:	b920      	cbnz	r0, 800ad72 <find_volume+0xee>
 800ad68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad6c:	f7ff fdb3 	bl	800a8d6 <ld_dword>
 800ad70:	4682      	mov	sl, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ad72:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 800ad76:	f7ff fda9 	bl	800a8cc <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	f000 8155 	beq.w	800b02c <find_volume+0x3a8>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ad82:	19c3      	adds	r3, r0, r7
 800ad84:	eb03 1319 	add.w	r3, r3, r9, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ad88:	459a      	cmp	sl, r3
 800ad8a:	f0c0 8151 	bcc.w	800b030 <find_volume+0x3ac>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ad8e:	ebaa 0a03 	sub.w	sl, sl, r3
 800ad92:	fbba f1fb 	udiv	r1, sl, fp
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ad96:	45da      	cmp	sl, fp
 800ad98:	f0c0 814c 	bcc.w	800b034 <find_volume+0x3b0>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ad9c:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800ada0:	4281      	cmp	r1, r0
 800ada2:	f240 80f7 	bls.w	800af94 <find_volume+0x310>
		fmt = FS_FAT32;
 800ada6:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800adaa:	f640 70f5 	movw	r0, #4085	; 0xff5
 800adae:	4281      	cmp	r1, r0
 800adb0:	d801      	bhi.n	800adb6 <find_volume+0x132>
 800adb2:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800adb6:	f101 0a02 	add.w	sl, r1, #2
 800adba:	f8c4 a014 	str.w	sl, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800adbe:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800adc0:	4432      	add	r2, r6
 800adc2:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800adc4:	441e      	add	r6, r3
 800adc6:	62a6      	str	r6, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800adc8:	f1bb 0f03 	cmp.w	fp, #3
 800adcc:	f000 80e5 	beq.w	800af9a <find_volume+0x316>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800add0:	f1b9 0f00 	cmp.w	r9, #0
 800add4:	f000 8134 	beq.w	800b040 <find_volume+0x3bc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800add8:	443a      	add	r2, r7
 800adda:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800addc:	f1bb 0f02 	cmp.w	fp, #2
 800ade0:	f000 80f6 	beq.w	800afd0 <find_volume+0x34c>
 800ade4:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 800ade8:	f00a 0a01 	and.w	sl, sl, #1
 800adec:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800adf0:	f20a 13ff 	addw	r3, sl, #511	; 0x1ff
 800adf4:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800adf8:	f0c0 8124 	bcc.w	800b044 <find_volume+0x3c0>
	fs->fs_type = fmt;		/* FAT sub-type */
 800adfc:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800ae00:	4a6f      	ldr	r2, [pc, #444]	; (800afc0 <find_volume+0x33c>)
 800ae02:	8813      	ldrh	r3, [r2, #0]
 800ae04:	3301      	adds	r3, #1
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	8013      	strh	r3, [r2, #0]
 800ae0a:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ae0c:	4b6d      	ldr	r3, [pc, #436]	; (800afc4 <find_volume+0x340>)
 800ae0e:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800ae10:	4b6d      	ldr	r3, [pc, #436]	; (800afc8 <find_volume+0x344>)
 800ae12:	6123      	str	r3, [r4, #16]
	return FR_OK;
 800ae14:	e0e4      	b.n	800afe0 <find_volume+0x35c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ae16:	2000      	movs	r0, #0
 800ae18:	ab06      	add	r3, sp, #24
 800ae1a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ae1e:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae22:	3601      	adds	r6, #1
 800ae24:	2e03      	cmp	r6, #3
 800ae26:	d80e      	bhi.n	800ae46 <find_volume+0x1c2>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ae28:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800ae2c:	0133      	lsls	r3, r6, #4
 800ae2e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ae32:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ae34:	7903      	ldrb	r3, [r0, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0ed      	beq.n	800ae16 <find_volume+0x192>
 800ae3a:	3008      	adds	r0, #8
 800ae3c:	f7ff fd4b 	bl	800a8d6 <ld_dword>
 800ae40:	e7ea      	b.n	800ae18 <find_volume+0x194>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae42:	2600      	movs	r6, #0
 800ae44:	e7ee      	b.n	800ae24 <find_volume+0x1a0>
 800ae46:	2700      	movs	r7, #0
 800ae48:	e00a      	b.n	800ae60 <find_volume+0x1dc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f7ff fed3 	bl	800abf8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ae52:	2801      	cmp	r0, #1
 800ae54:	f67f af43 	bls.w	800acde <find_volume+0x5a>
 800ae58:	3701      	adds	r7, #1
 800ae5a:	2f03      	cmp	r7, #3
 800ae5c:	f63f af3f 	bhi.w	800acde <find_volume+0x5a>
			bsect = br[i];
 800ae60:	ab06      	add	r3, sp, #24
 800ae62:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800ae66:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ae6a:	2e00      	cmp	r6, #0
 800ae6c:	d1ed      	bne.n	800ae4a <find_volume+0x1c6>
 800ae6e:	2003      	movs	r0, #3
 800ae70:	e7f2      	b.n	800ae58 <find_volume+0x1d4>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ae72:	3301      	adds	r3, #1
 800ae74:	2b3f      	cmp	r3, #63	; 0x3f
 800ae76:	d804      	bhi.n	800ae82 <find_volume+0x1fe>
 800ae78:	18e2      	adds	r2, r4, r3
 800ae7a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800ae7e:	2a00      	cmp	r2, #0
 800ae80:	d0f7      	beq.n	800ae72 <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ae82:	2b3f      	cmp	r3, #63	; 0x3f
 800ae84:	f240 80b4 	bls.w	800aff0 <find_volume+0x36c>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ae88:	f104 0098 	add.w	r0, r4, #152	; 0x98
 800ae8c:	f7ff fd1e 	bl	800a8cc <ld_word>
 800ae90:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800ae94:	f040 80ae 	bne.w	800aff4 <find_volume+0x370>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ae98:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800ae9c:	2b09      	cmp	r3, #9
 800ae9e:	f040 80ab 	bne.w	800aff8 <find_volume+0x374>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800aea2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800aea6:	f7ff fd21 	bl	800a8ec <ld_qword>
 800aeaa:	1987      	adds	r7, r0, r6
 800aeac:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800aeb0:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb4:	42bb      	cmp	r3, r7
 800aeb6:	f04f 0300 	mov.w	r3, #0
 800aeba:	eb73 0309 	sbcs.w	r3, r3, r9
 800aebe:	f0c0 809d 	bcc.w	800affc <find_volume+0x378>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800aec2:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800aec6:	f7ff fd06 	bl	800a8d6 <ld_dword>
 800aeca:	61a0      	str	r0, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800aecc:	f894 a09e 	ldrb.w	sl, [r4, #158]	; 0x9e
 800aed0:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800aed4:	f1ba 0f01 	cmp.w	sl, #1
 800aed8:	f040 8092 	bne.w	800b000 <find_volume+0x37c>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800aedc:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800aee0:	f04f 0801 	mov.w	r8, #1
 800aee4:	fa08 f803 	lsl.w	r8, r8, r3
 800aee8:	fa1f f888 	uxth.w	r8, r8
 800aeec:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800aef0:	f1b8 0f00 	cmp.w	r8, #0
 800aef4:	f000 8086 	beq.w	800b004 <find_volume+0x380>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800aef8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800aefc:	f7ff fceb 	bl	800a8d6 <ld_dword>
 800af00:	4683      	mov	fp, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800af02:	4b32      	ldr	r3, [pc, #200]	; (800afcc <find_volume+0x348>)
 800af04:	4298      	cmp	r0, r3
 800af06:	d87f      	bhi.n	800b008 <find_volume+0x384>
		fs->n_fatent = nclst + 2;
 800af08:	1c83      	adds	r3, r0, #2
 800af0a:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;
 800af0c:	61e6      	str	r6, [r4, #28]
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800af0e:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800af12:	f7ff fce0 	bl	800a8d6 <ld_dword>
 800af16:	1983      	adds	r3, r0, r6
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800af1c:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800af20:	f7ff fcd9 	bl	800a8d6 <ld_dword>
 800af24:	4406      	add	r6, r0
 800af26:	6226      	str	r6, [r4, #32]
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800af28:	2300      	movs	r3, #0
 800af2a:	fb0b f808 	mul.w	r8, fp, r8
 800af2e:	9a01      	ldr	r2, [sp, #4]
 800af30:	eb12 0808 	adds.w	r8, r2, r8
 800af34:	415b      	adcs	r3, r3
 800af36:	4547      	cmp	r7, r8
 800af38:	eb79 0303 	sbcs.w	r3, r9, r3
 800af3c:	d366      	bcc.n	800b00c <find_volume+0x388>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800af3e:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800af42:	f7ff fcc8 	bl	800a8d6 <ld_dword>
 800af46:	4601      	mov	r1, r0
 800af48:	6260      	str	r0, [r4, #36]	; 0x24
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800af4a:	4620      	mov	r0, r4
 800af4c:	f7ff fd14 	bl	800a978 <clust2sect>
 800af50:	4601      	mov	r1, r0
 800af52:	4620      	mov	r0, r4
 800af54:	f7ff fe3b 	bl	800abce <move_window>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d159      	bne.n	800b010 <find_volume+0x38c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800af5c:	2600      	movs	r6, #0
 800af5e:	e002      	b.n	800af66 <find_volume+0x2e2>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800af60:	230b      	movs	r3, #11
 800af62:	e787      	b.n	800ae74 <find_volume+0x1f0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800af64:	3620      	adds	r6, #32
 800af66:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800af6a:	d20d      	bcs.n	800af88 <find_volume+0x304>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800af6c:	19a3      	adds	r3, r4, r6
 800af6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af72:	2b81      	cmp	r3, #129	; 0x81
 800af74:	d1f6      	bne.n	800af64 <find_volume+0x2e0>
 800af76:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800af7a:	f106 0014 	add.w	r0, r6, #20
 800af7e:	4418      	add	r0, r3
 800af80:	f7ff fca9 	bl	800a8d6 <ld_dword>
 800af84:	2802      	cmp	r0, #2
 800af86:	d1ed      	bne.n	800af64 <find_volume+0x2e0>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800af88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800af8c:	d042      	beq.n	800b014 <find_volume+0x390>
		fmt = FS_EXFAT;			/* FAT sub-type */
 800af8e:	f04f 0b04 	mov.w	fp, #4
 800af92:	e733      	b.n	800adfc <find_volume+0x178>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800af94:	f04f 0b02 	mov.w	fp, #2
 800af98:	e707      	b.n	800adaa <find_volume+0x126>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800af9a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800af9e:	f7ff fc95 	bl	800a8cc <ld_word>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d148      	bne.n	800b038 <find_volume+0x3b4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800afa6:	f1b9 0f00 	cmp.w	r9, #0
 800afaa:	d147      	bne.n	800b03c <find_volume+0x3b8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800afac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afb0:	f7ff fc91 	bl	800a8d6 <ld_dword>
 800afb4:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800afb6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800afba:	e719      	b.n	800adf0 <find_volume+0x16c>
 800afbc:	200003c4 	.word	0x200003c4
 800afc0:	200003cc 	.word	0x200003cc
 800afc4:	200003d0 	.word	0x200003d0
 800afc8:	20000164 	.word	0x20000164
 800afcc:	7ffffffd 	.word	0x7ffffffd
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800afd0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800afd4:	e70c      	b.n	800adf0 <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800afd6:	250b      	movs	r5, #11
 800afd8:	e002      	b.n	800afe0 <find_volume+0x35c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800afda:	250c      	movs	r5, #12
 800afdc:	e000      	b.n	800afe0 <find_volume+0x35c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800afde:	2503      	movs	r5, #3
}
 800afe0:	4628      	mov	r0, r5
 800afe2:	b007      	add	sp, #28
 800afe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800afe8:	2501      	movs	r5, #1
 800afea:	e7f9      	b.n	800afe0 <find_volume+0x35c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800afec:	250d      	movs	r5, #13
 800afee:	e7f7      	b.n	800afe0 <find_volume+0x35c>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800aff0:	250d      	movs	r5, #13
 800aff2:	e7f5      	b.n	800afe0 <find_volume+0x35c>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800aff4:	250d      	movs	r5, #13
 800aff6:	e7f3      	b.n	800afe0 <find_volume+0x35c>
			return FR_NO_FILESYSTEM;
 800aff8:	250d      	movs	r5, #13
 800affa:	e7f1      	b.n	800afe0 <find_volume+0x35c>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800affc:	250d      	movs	r5, #13
 800affe:	e7ef      	b.n	800afe0 <find_volume+0x35c>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800b000:	250d      	movs	r5, #13
 800b002:	e7ed      	b.n	800afe0 <find_volume+0x35c>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800b004:	250d      	movs	r5, #13
 800b006:	e7eb      	b.n	800afe0 <find_volume+0x35c>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800b008:	250d      	movs	r5, #13
 800b00a:	e7e9      	b.n	800afe0 <find_volume+0x35c>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800b00c:	250d      	movs	r5, #13
 800b00e:	e7e7      	b.n	800afe0 <find_volume+0x35c>
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800b010:	4655      	mov	r5, sl
 800b012:	e7e5      	b.n	800afe0 <find_volume+0x35c>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800b014:	250d      	movs	r5, #13
 800b016:	e7e3      	b.n	800afe0 <find_volume+0x35c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b018:	250d      	movs	r5, #13
 800b01a:	e7e1      	b.n	800afe0 <find_volume+0x35c>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b01c:	250d      	movs	r5, #13
 800b01e:	e7df      	b.n	800afe0 <find_volume+0x35c>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b020:	250d      	movs	r5, #13
 800b022:	e7dd      	b.n	800afe0 <find_volume+0x35c>
 800b024:	250d      	movs	r5, #13
 800b026:	e7db      	b.n	800afe0 <find_volume+0x35c>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b028:	250d      	movs	r5, #13
 800b02a:	e7d9      	b.n	800afe0 <find_volume+0x35c>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b02c:	250d      	movs	r5, #13
 800b02e:	e7d7      	b.n	800afe0 <find_volume+0x35c>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b030:	250d      	movs	r5, #13
 800b032:	e7d5      	b.n	800afe0 <find_volume+0x35c>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b034:	250d      	movs	r5, #13
 800b036:	e7d3      	b.n	800afe0 <find_volume+0x35c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b038:	250d      	movs	r5, #13
 800b03a:	e7d1      	b.n	800afe0 <find_volume+0x35c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b03c:	250d      	movs	r5, #13
 800b03e:	e7cf      	b.n	800afe0 <find_volume+0x35c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b040:	250d      	movs	r5, #13
 800b042:	e7cd      	b.n	800afe0 <find_volume+0x35c>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b044:	250d      	movs	r5, #13
 800b046:	e7cb      	b.n	800afe0 <find_volume+0x35c>

0800b048 <get_fat>:
{
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800b04a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b04c:	2901      	cmp	r1, #1
 800b04e:	f240 8093 	bls.w	800b178 <get_fat+0x130>
 800b052:	460c      	mov	r4, r1
 800b054:	696b      	ldr	r3, [r5, #20]
 800b056:	428b      	cmp	r3, r1
 800b058:	f240 8090 	bls.w	800b17c <get_fat+0x134>
		switch (fs->fs_type) {
 800b05c:	782b      	ldrb	r3, [r5, #0]
 800b05e:	3b01      	subs	r3, #1
 800b060:	2b03      	cmp	r3, #3
 800b062:	f200 808d 	bhi.w	800b180 <get_fat+0x138>
 800b066:	e8df f003 	tbb	[pc, r3]
 800b06a:	2b02      	.short	0x2b02
 800b06c:	4f3c      	.short	0x4f3c
			bc = (UINT)clst; bc += bc / 2;
 800b06e:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b072:	6a29      	ldr	r1, [r5, #32]
 800b074:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800b078:	4628      	mov	r0, r5
 800b07a:	f7ff fda8 	bl	800abce <move_window>
 800b07e:	b110      	cbz	r0, 800b086 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b080:	f04f 30ff 	mov.w	r0, #4294967295
 800b084:	e079      	b.n	800b17a <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800b086:	1c77      	adds	r7, r6, #1
 800b088:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800b08c:	442e      	add	r6, r5
 800b08e:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b092:	6a29      	ldr	r1, [r5, #32]
 800b094:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800b098:	4628      	mov	r0, r5
 800b09a:	f7ff fd98 	bl	800abce <move_window>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d170      	bne.n	800b184 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b0a2:	f3c7 0008 	ubfx	r0, r7, #0, #9
 800b0a6:	4428      	add	r0, r5
 800b0a8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 800b0ac:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b0b0:	f014 0f01 	tst.w	r4, #1
 800b0b4:	d001      	beq.n	800b0ba <get_fat+0x72>
 800b0b6:	0900      	lsrs	r0, r0, #4
 800b0b8:	e05f      	b.n	800b17a <get_fat+0x132>
 800b0ba:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800b0be:	e05c      	b.n	800b17a <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b0c0:	6a29      	ldr	r1, [r5, #32]
 800b0c2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f7ff fd81 	bl	800abce <move_window>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d15c      	bne.n	800b18a <get_fat+0x142>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b0d0:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800b0d4:	0064      	lsls	r4, r4, #1
 800b0d6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800b0da:	4420      	add	r0, r4
 800b0dc:	f7ff fbf6 	bl	800a8cc <ld_word>
			break;
 800b0e0:	e04b      	b.n	800b17a <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0e2:	6a29      	ldr	r1, [r5, #32]
 800b0e4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f7ff fd70 	bl	800abce <move_window>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d14e      	bne.n	800b190 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b0f2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800b0f6:	00a4      	lsls	r4, r4, #2
 800b0f8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800b0fc:	4420      	add	r0, r4
 800b0fe:	f7ff fbea 	bl	800a8d6 <ld_dword>
 800b102:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800b106:	e038      	b.n	800b17a <get_fat+0x132>
			if (obj->objsize) {
 800b108:	6903      	ldr	r3, [r0, #16]
 800b10a:	6942      	ldr	r2, [r0, #20]
 800b10c:	ea53 0102 	orrs.w	r1, r3, r2
 800b110:	d041      	beq.n	800b196 <get_fat+0x14e>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b112:	6881      	ldr	r1, [r0, #8]
 800b114:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800b116:	3b01      	subs	r3, #1
 800b118:	f142 32ff 	adc.w	r2, r2, #4294967295
 800b11c:	0a5b      	lsrs	r3, r3, #9
 800b11e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b122:	896a      	ldrh	r2, [r5, #10]
 800b124:	fbb3 f3f2 	udiv	r3, r3, r2
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800b128:	79c2      	ldrb	r2, [r0, #7]
 800b12a:	2a02      	cmp	r2, #2
 800b12c:	d008      	beq.n	800b140 <get_fat+0xf8>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b12e:	2a03      	cmp	r2, #3
 800b130:	d00b      	beq.n	800b14a <get_fat+0x102>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800b132:	2a02      	cmp	r2, #2
 800b134:	d034      	beq.n	800b1a0 <get_fat+0x158>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b136:	69c3      	ldr	r3, [r0, #28]
 800b138:	b163      	cbz	r3, 800b154 <get_fat+0x10c>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800b13a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b13e:	e01c      	b.n	800b17a <get_fat+0x132>
					if (cofs <= clen) {
 800b140:	4299      	cmp	r1, r3
 800b142:	d8f4      	bhi.n	800b12e <get_fat+0xe6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800b144:	d029      	beq.n	800b19a <get_fat+0x152>
 800b146:	1c60      	adds	r0, r4, #1
 800b148:	e017      	b.n	800b17a <get_fat+0x132>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b14a:	6983      	ldr	r3, [r0, #24]
 800b14c:	428b      	cmp	r3, r1
 800b14e:	d9f0      	bls.n	800b132 <get_fat+0xea>
					val = clst + 1; 	/* Generate the value */
 800b150:	1c60      	adds	r0, r4, #1
					break;
 800b152:	e012      	b.n	800b17a <get_fat+0x132>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b154:	6a29      	ldr	r1, [r5, #32]
 800b156:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b15a:	4628      	mov	r0, r5
 800b15c:	f7ff fd37 	bl	800abce <move_window>
 800b160:	bb00      	cbnz	r0, 800b1a4 <get_fat+0x15c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b162:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800b166:	00a3      	lsls	r3, r4, #2
 800b168:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b16c:	4418      	add	r0, r3
 800b16e:	f7ff fbb2 	bl	800a8d6 <ld_dword>
 800b172:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b176:	e000      	b.n	800b17a <get_fat+0x132>
		val = 1;	/* Internal error */
 800b178:	2001      	movs	r0, #1
}
 800b17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800b17c:	2001      	movs	r0, #1
 800b17e:	e7fc      	b.n	800b17a <get_fat+0x132>
		switch (fs->fs_type) {
 800b180:	2001      	movs	r0, #1
 800b182:	e7fa      	b.n	800b17a <get_fat+0x132>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b184:	f04f 30ff 	mov.w	r0, #4294967295
 800b188:	e7f7      	b.n	800b17a <get_fat+0x132>
 800b18a:	f04f 30ff 	mov.w	r0, #4294967295
 800b18e:	e7f4      	b.n	800b17a <get_fat+0x132>
 800b190:	f04f 30ff 	mov.w	r0, #4294967295
 800b194:	e7f1      	b.n	800b17a <get_fat+0x132>
			val = 1;	/* Internal error */
 800b196:	2001      	movs	r0, #1
 800b198:	e7ef      	b.n	800b17a <get_fat+0x132>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800b19a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b19e:	e7ec      	b.n	800b17a <get_fat+0x132>
			val = 1;	/* Internal error */
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	e7ea      	b.n	800b17a <get_fat+0x132>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 800b1a8:	e7e7      	b.n	800b17a <get_fat+0x132>

0800b1aa <dir_sdi>:
{
 800b1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 800b1b2:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b1b6:	f898 3000 	ldrb.w	r3, [r8]
 800b1ba:	2b04      	cmp	r3, #4
 800b1bc:	d029      	beq.n	800b212 <dir_sdi+0x68>
 800b1be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b1c2:	42bb      	cmp	r3, r7
 800b1c4:	d943      	bls.n	800b24e <dir_sdi+0xa4>
 800b1c6:	f017 0f1f 	tst.w	r7, #31
 800b1ca:	d142      	bne.n	800b252 <dir_sdi+0xa8>
	dp->dptr = ofs;				/* Set current offset */
 800b1cc:	6337      	str	r7, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b1ce:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b1d0:	b93c      	cbnz	r4, 800b1e2 <dir_sdi+0x38>
 800b1d2:	f898 3000 	ldrb.w	r3, [r8]
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d903      	bls.n	800b1e2 <dir_sdi+0x38>
		clst = fs->dirbase;
 800b1da:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b1de:	2300      	movs	r3, #0
 800b1e0:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b1e2:	b9cc      	cbnz	r4, 800b218 <dir_sdi+0x6e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b1e4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b1e8:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800b1ec:	d933      	bls.n	800b256 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 800b1ee:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b1f2:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 800b1f4:	6374      	str	r4, [r6, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b1f6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800b1f8:	b3ab      	cbz	r3, 800b266 <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b1fa:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 800b1fe:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b200:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800b204:	f3c7 0108 	ubfx	r1, r7, #0, #9
 800b208:	4419      	add	r1, r3
 800b20a:	63f1      	str	r1, [r6, #60]	; 0x3c
	return FR_OK;
 800b20c:	2000      	movs	r0, #0
}
 800b20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b216:	e7d4      	b.n	800b1c2 <dir_sdi+0x18>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b218:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 800b21c:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800b21e:	42af      	cmp	r7, r5
 800b220:	d30f      	bcc.n	800b242 <dir_sdi+0x98>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b222:	4621      	mov	r1, r4
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff ff0f 	bl	800b048 <get_fat>
 800b22a:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b22c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b230:	d013      	beq.n	800b25a <dir_sdi+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b232:	2801      	cmp	r0, #1
 800b234:	d913      	bls.n	800b25e <dir_sdi+0xb4>
 800b236:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b23a:	4283      	cmp	r3, r0
 800b23c:	d911      	bls.n	800b262 <dir_sdi+0xb8>
			ofs -= csz;
 800b23e:	1b7f      	subs	r7, r7, r5
 800b240:	e7ed      	b.n	800b21e <dir_sdi+0x74>
		dp->sect = clust2sect(fs, clst);
 800b242:	4621      	mov	r1, r4
 800b244:	4640      	mov	r0, r8
 800b246:	f7ff fb97 	bl	800a978 <clust2sect>
 800b24a:	63b0      	str	r0, [r6, #56]	; 0x38
 800b24c:	e7d2      	b.n	800b1f4 <dir_sdi+0x4a>
		return FR_INT_ERR;
 800b24e:	2002      	movs	r0, #2
 800b250:	e7dd      	b.n	800b20e <dir_sdi+0x64>
 800b252:	2002      	movs	r0, #2
 800b254:	e7db      	b.n	800b20e <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b256:	2002      	movs	r0, #2
 800b258:	e7d9      	b.n	800b20e <dir_sdi+0x64>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b25a:	2001      	movs	r0, #1
 800b25c:	e7d7      	b.n	800b20e <dir_sdi+0x64>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b25e:	2002      	movs	r0, #2
 800b260:	e7d5      	b.n	800b20e <dir_sdi+0x64>
 800b262:	2002      	movs	r0, #2
 800b264:	e7d3      	b.n	800b20e <dir_sdi+0x64>
	if (!dp->sect) return FR_INT_ERR;
 800b266:	2002      	movs	r0, #2
 800b268:	e7d1      	b.n	800b20e <dir_sdi+0x64>

0800b26a <dir_next>:
{
 800b26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800b26e:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b270:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b272:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b274:	2b00      	cmp	r3, #0
 800b276:	d043      	beq.n	800b300 <dir_next+0x96>
 800b278:	4604      	mov	r4, r0
 800b27a:	4688      	mov	r8, r1
 800b27c:	3520      	adds	r5, #32
 800b27e:	7832      	ldrb	r2, [r6, #0]
 800b280:	2a04      	cmp	r2, #4
 800b282:	d016      	beq.n	800b2b2 <dir_next+0x48>
 800b284:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b288:	42aa      	cmp	r2, r5
 800b28a:	d93b      	bls.n	800b304 <dir_next+0x9a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b28c:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800b290:	b93f      	cbnz	r7, 800b2a2 <dir_next+0x38>
		dp->sect++;				/* Next sector */
 800b292:	3301      	adds	r3, #1
 800b294:	63a3      	str	r3, [r4, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 800b296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b298:	b991      	cbnz	r1, 800b2c0 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b29a:	8933      	ldrh	r3, [r6, #8]
 800b29c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800b2a0:	d90a      	bls.n	800b2b8 <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
 800b2a2:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b2a4:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800b2a8:	443b      	add	r3, r7
 800b2aa:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
 800b2ac:	2000      	movs	r0, #0
}
 800b2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b6:	e7e7      	b.n	800b288 <dir_next+0x1e>
				dp->sect = 0; return FR_NO_FILE;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	63a3      	str	r3, [r4, #56]	; 0x38
 800b2bc:	2004      	movs	r0, #4
 800b2be:	e7f6      	b.n	800b2ae <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b2c0:	8973      	ldrh	r3, [r6, #10]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800b2c8:	d1eb      	bne.n	800b2a2 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f7ff febc 	bl	800b048 <get_fat>
 800b2d0:	4601      	mov	r1, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b2d2:	2801      	cmp	r0, #1
 800b2d4:	d918      	bls.n	800b308 <dir_next+0x9e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b2d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b2da:	d017      	beq.n	800b30c <dir_next+0xa2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b2dc:	6973      	ldr	r3, [r6, #20]
 800b2de:	4283      	cmp	r3, r0
 800b2e0:	d905      	bls.n	800b2ee <dir_next+0x84>
				dp->clust = clst;		/* Initialize data for new cluster */
 800b2e2:	6360      	str	r0, [r4, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7ff fb47 	bl	800a978 <clust2sect>
 800b2ea:	63a0      	str	r0, [r4, #56]	; 0x38
 800b2ec:	e7d9      	b.n	800b2a2 <dir_next+0x38>
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
 800b2ee:	f1b8 0f00 	cmp.w	r8, #0
 800b2f2:	d101      	bne.n	800b2f8 <dir_next+0x8e>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	63a3      	str	r3, [r4, #56]	; 0x38
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	63a3      	str	r3, [r4, #56]	; 0x38
 800b2fc:	2004      	movs	r0, #4
 800b2fe:	e7d6      	b.n	800b2ae <dir_next+0x44>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b300:	2004      	movs	r0, #4
 800b302:	e7d4      	b.n	800b2ae <dir_next+0x44>
 800b304:	2004      	movs	r0, #4
 800b306:	e7d2      	b.n	800b2ae <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b308:	2002      	movs	r0, #2
 800b30a:	e7d0      	b.n	800b2ae <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b30c:	2001      	movs	r0, #1
 800b30e:	e7ce      	b.n	800b2ae <dir_next+0x44>

0800b310 <load_xdir>:
{
 800b310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b314:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800b316:	6800      	ldr	r0, [r0, #0]
 800b318:	6907      	ldr	r7, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 800b31a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b31c:	f7ff fc57 	bl	800abce <move_window>
	if (res != FR_OK) return res;
 800b320:	4605      	mov	r5, r0
 800b322:	b920      	cbnz	r0, 800b32e <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800b324:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b326:	780b      	ldrb	r3, [r1, #0]
 800b328:	2b85      	cmp	r3, #133	; 0x85
 800b32a:	d003      	beq.n	800b334 <load_xdir+0x24>
 800b32c:	2502      	movs	r5, #2
}
 800b32e:	4628      	mov	r0, r5
 800b330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800b334:	2220      	movs	r2, #32
 800b336:	4638      	mov	r0, r7
 800b338:	f7ff fafa 	bl	800a930 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b33c:	787e      	ldrb	r6, [r7, #1]
 800b33e:	3601      	adds	r6, #1
 800b340:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b342:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
 800b346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b34a:	d851      	bhi.n	800b3f0 <load_xdir+0xe0>
	res = dir_next(dp, 0);
 800b34c:	2100      	movs	r1, #0
 800b34e:	4620      	mov	r0, r4
 800b350:	f7ff ff8b 	bl	800b26a <dir_next>
	if (res != FR_OK) return res;
 800b354:	4605      	mov	r5, r0
 800b356:	2800      	cmp	r0, #0
 800b358:	d1e9      	bne.n	800b32e <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 800b35a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b35c:	6820      	ldr	r0, [r4, #0]
 800b35e:	f7ff fc36 	bl	800abce <move_window>
	if (res != FR_OK) return res;
 800b362:	4605      	mov	r5, r0
 800b364:	2800      	cmp	r0, #0
 800b366:	d1e2      	bne.n	800b32e <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800b368:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b36a:	780b      	ldrb	r3, [r1, #0]
 800b36c:	2bc0      	cmp	r3, #192	; 0xc0
 800b36e:	d001      	beq.n	800b374 <load_xdir+0x64>
 800b370:	2502      	movs	r5, #2
 800b372:	e7dc      	b.n	800b32e <load_xdir+0x1e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800b374:	2220      	movs	r2, #32
 800b376:	18b8      	adds	r0, r7, r2
 800b378:	f7ff fada 	bl	800a930 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b37c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b380:	332c      	adds	r3, #44	; 0x2c
 800b382:	4a1e      	ldr	r2, [pc, #120]	; (800b3fc <load_xdir+0xec>)
 800b384:	fba2 2303 	umull	r2, r3, r2, r3
 800b388:	08db      	lsrs	r3, r3, #3
 800b38a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 800b38e:	d331      	bcc.n	800b3f4 <load_xdir+0xe4>
	i = SZDIRE * 2;	/* C1 offset */
 800b390:	f04f 0840 	mov.w	r8, #64	; 0x40
 800b394:	e003      	b.n	800b39e <load_xdir+0x8e>
	} while ((i += SZDIRE) < sz_ent);
 800b396:	f108 0820 	add.w	r8, r8, #32
 800b39a:	4546      	cmp	r6, r8
 800b39c:	d91a      	bls.n	800b3d4 <load_xdir+0xc4>
		res = dir_next(dp, 0);
 800b39e:	2100      	movs	r1, #0
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f7ff ff62 	bl	800b26a <dir_next>
		if (res != FR_OK) return res;
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d1c0      	bne.n	800b32e <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 800b3ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b3ae:	6820      	ldr	r0, [r4, #0]
 800b3b0:	f7ff fc0d 	bl	800abce <move_window>
		if (res != FR_OK) return res;
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d1b9      	bne.n	800b32e <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800b3ba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b3bc:	780b      	ldrb	r3, [r1, #0]
 800b3be:	2bc1      	cmp	r3, #193	; 0xc1
 800b3c0:	d11a      	bne.n	800b3f8 <load_xdir+0xe8>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800b3c2:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 800b3c6:	d2e6      	bcs.n	800b396 <load_xdir+0x86>
 800b3c8:	2220      	movs	r2, #32
 800b3ca:	eb07 0008 	add.w	r0, r7, r8
 800b3ce:	f7ff faaf 	bl	800a930 <mem_cpy>
 800b3d2:	e7e0      	b.n	800b396 <load_xdir+0x86>
	if (i <= MAXDIRB(_MAX_LFN)) {
 800b3d4:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 800b3d8:	d8a9      	bhi.n	800b32e <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f7ff fb56 	bl	800aa8c <xdir_sum>
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	1cb8      	adds	r0, r7, #2
 800b3e4:	f7ff fa72 	bl	800a8cc <ld_word>
 800b3e8:	4284      	cmp	r4, r0
 800b3ea:	d0a0      	beq.n	800b32e <load_xdir+0x1e>
 800b3ec:	2502      	movs	r5, #2
 800b3ee:	e79e      	b.n	800b32e <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b3f0:	2502      	movs	r5, #2
 800b3f2:	e79c      	b.n	800b32e <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b3f4:	2502      	movs	r5, #2
 800b3f6:	e79a      	b.n	800b32e <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800b3f8:	2502      	movs	r5, #2
 800b3fa:	e798      	b.n	800b32e <load_xdir+0x1e>
 800b3fc:	88888889 	.word	0x88888889

0800b400 <dir_read>:
{
 800b400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b404:	4604      	mov	r4, r0
 800b406:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 800b408:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800b40a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800b40e:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
 800b410:	2504      	movs	r5, #4
	while (dp->sect) {
 800b412:	e008      	b.n	800b426 <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
 800b414:	2b85      	cmp	r3, #133	; 0x85
 800b416:	d028      	beq.n	800b46a <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
 800b418:	2100      	movs	r1, #0
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff ff25 	bl	800b26a <dir_next>
		if (res != FR_OK) break;
 800b420:	4605      	mov	r5, r0
 800b422:	2800      	cmp	r0, #0
 800b424:	d159      	bne.n	800b4da <dir_read+0xda>
	while (dp->sect) {
 800b426:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b428:	2900      	cmp	r1, #0
 800b42a:	d056      	beq.n	800b4da <dir_read+0xda>
		res = move_window(fs, dp->sect);
 800b42c:	4630      	mov	r0, r6
 800b42e:	f7ff fbce 	bl	800abce <move_window>
		if (res != FR_OK) break;
 800b432:	4605      	mov	r5, r0
 800b434:	2800      	cmp	r0, #0
 800b436:	d150      	bne.n	800b4da <dir_read+0xda>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b438:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b43a:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d04b      	beq.n	800b4d8 <dir_read+0xd8>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b440:	7832      	ldrb	r2, [r6, #0]
 800b442:	2a04      	cmp	r2, #4
 800b444:	d0e6      	beq.n	800b414 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b446:	7aca      	ldrb	r2, [r1, #11]
 800b448:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b44c:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b44e:	2b2e      	cmp	r3, #46	; 0x2e
 800b450:	bf18      	it	ne
 800b452:	2be5      	cmpne	r3, #229	; 0xe5
 800b454:	d03c      	beq.n	800b4d0 <dir_read+0xd0>
 800b456:	f022 0020 	bic.w	r0, r2, #32
 800b45a:	2808      	cmp	r0, #8
 800b45c:	bf14      	ite	ne
 800b45e:	2000      	movne	r0, #0
 800b460:	2001      	moveq	r0, #1
 800b462:	4540      	cmp	r0, r8
 800b464:	d00e      	beq.n	800b484 <dir_read+0x84>
				ord = 0xFF;
 800b466:	27ff      	movs	r7, #255	; 0xff
 800b468:	e7d6      	b.n	800b418 <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800b46a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b46c:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800b46e:	4620      	mov	r0, r4
 800b470:	f7ff ff4e 	bl	800b310 <load_xdir>
					if (res == FR_OK) {
 800b474:	4605      	mov	r5, r0
 800b476:	bb80      	cbnz	r0, 800b4da <dir_read+0xda>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800b478:	6933      	ldr	r3, [r6, #16]
 800b47a:	791b      	ldrb	r3, [r3, #4]
 800b47c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b480:	71a3      	strb	r3, [r4, #6]
 800b482:	e02a      	b.n	800b4da <dir_read+0xda>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b484:	2a0f      	cmp	r2, #15
 800b486:	d119      	bne.n	800b4bc <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b488:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b48c:	d006      	beq.n	800b49c <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
 800b48e:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800b492:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800b496:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b498:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
 800b49a:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b49c:	42bb      	cmp	r3, r7
 800b49e:	d001      	beq.n	800b4a4 <dir_read+0xa4>
 800b4a0:	27ff      	movs	r7, #255	; 0xff
 800b4a2:	e7b9      	b.n	800b418 <dir_read+0x18>
 800b4a4:	7b4b      	ldrb	r3, [r1, #13]
 800b4a6:	454b      	cmp	r3, r9
 800b4a8:	d001      	beq.n	800b4ae <dir_read+0xae>
 800b4aa:	27ff      	movs	r7, #255	; 0xff
 800b4ac:	e7b4      	b.n	800b418 <dir_read+0x18>
 800b4ae:	68f0      	ldr	r0, [r6, #12]
 800b4b0:	f7ff fa9a 	bl	800a9e8 <pick_lfn>
 800b4b4:	b170      	cbz	r0, 800b4d4 <dir_read+0xd4>
 800b4b6:	3f01      	subs	r7, #1
 800b4b8:	b2ff      	uxtb	r7, r7
 800b4ba:	e7ad      	b.n	800b418 <dir_read+0x18>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b4bc:	b927      	cbnz	r7, 800b4c8 <dir_read+0xc8>
 800b4be:	4608      	mov	r0, r1
 800b4c0:	f7ff fad4 	bl	800aa6c <sum_sfn>
 800b4c4:	4548      	cmp	r0, r9
 800b4c6:	d008      	beq.n	800b4da <dir_read+0xda>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4cc:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b4ce:	e004      	b.n	800b4da <dir_read+0xda>
				ord = 0xFF;
 800b4d0:	27ff      	movs	r7, #255	; 0xff
 800b4d2:	e7a1      	b.n	800b418 <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b4d4:	27ff      	movs	r7, #255	; 0xff
 800b4d6:	e79f      	b.n	800b418 <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b4d8:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b4da:	b10d      	cbz	r5, 800b4e0 <dir_read+0xe0>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800b4e8 <create_name>:
{
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	4681      	mov	r9, r0
 800b4f0:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b4f2:	f8d1 8000 	ldr.w	r8, [r1]
 800b4f6:	6803      	ldr	r3, [r0, #0]
 800b4f8:	68dd      	ldr	r5, [r3, #12]
 800b4fa:	2400      	movs	r4, #0
 800b4fc:	4623      	mov	r3, r4
 800b4fe:	e01e      	b.n	800b53e <create_name+0x56>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b500:	3701      	adds	r7, #1
 800b502:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
 800b506:	2b5c      	cmp	r3, #92	; 0x5c
 800b508:	bf18      	it	ne
 800b50a:	2b2f      	cmpne	r3, #47	; 0x2f
 800b50c:	d0f8      	beq.n	800b500 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 800b50e:	eb08 0747 	add.w	r7, r8, r7, lsl #1
 800b512:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b516:	2e1f      	cmp	r6, #31
 800b518:	d827      	bhi.n	800b56a <create_name+0x82>
 800b51a:	f04f 0804 	mov.w	r8, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b51e:	b33c      	cbz	r4, 800b570 <create_name+0x88>
		w = lfn[di - 1];
 800b520:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b524:	4423      	add	r3, r4
 800b526:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 800b52a:	2b20      	cmp	r3, #32
 800b52c:	bf18      	it	ne
 800b52e:	2b2e      	cmpne	r3, #46	; 0x2e
 800b530:	d11e      	bne.n	800b570 <create_name+0x88>
		di--;
 800b532:	3c01      	subs	r4, #1
 800b534:	e7f3      	b.n	800b51e <create_name+0x36>
		lfn[di++] = w;					/* Store the Unicode character */
 800b536:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 800b53a:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 800b53c:	463b      	mov	r3, r7
 800b53e:	1c5f      	adds	r7, r3, #1
 800b540:	f838 6013 	ldrh.w	r6, [r8, r3, lsl #1]
		if (w < ' ') break;				/* Break if end of the path name */
 800b544:	2e1f      	cmp	r6, #31
 800b546:	d9e2      	bls.n	800b50e <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b548:	2e5c      	cmp	r6, #92	; 0x5c
 800b54a:	bf18      	it	ne
 800b54c:	2e2f      	cmpne	r6, #47	; 0x2f
 800b54e:	d0d8      	beq.n	800b502 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b550:	2cfe      	cmp	r4, #254	; 0xfe
 800b552:	f200 80d0 	bhi.w	800b6f6 <create_name+0x20e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b556:	2e7f      	cmp	r6, #127	; 0x7f
 800b558:	d8ed      	bhi.n	800b536 <create_name+0x4e>
 800b55a:	4631      	mov	r1, r6
 800b55c:	4868      	ldr	r0, [pc, #416]	; (800b700 <create_name+0x218>)
 800b55e:	f7ff fa03 	bl	800a968 <chk_chr>
 800b562:	2800      	cmp	r0, #0
 800b564:	d0e7      	beq.n	800b536 <create_name+0x4e>
 800b566:	2006      	movs	r0, #6
 800b568:	e06f      	b.n	800b64a <create_name+0x162>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b56a:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b56e:	e7d6      	b.n	800b51e <create_name+0x36>
	lfn[di] = 0;						/* LFN is created */
 800b570:	2300      	movs	r3, #0
 800b572:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b576:	2c00      	cmp	r4, #0
 800b578:	f000 80bf 	beq.w	800b6fa <create_name+0x212>
	mem_set(dp->fn, ' ', 11);
 800b57c:	220b      	movs	r2, #11
 800b57e:	2120      	movs	r1, #32
 800b580:	f109 0040 	add.w	r0, r9, #64	; 0x40
 800b584:	f7ff f9de 	bl	800a944 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b588:	2300      	movs	r3, #0
 800b58a:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800b58e:	2a2e      	cmp	r2, #46	; 0x2e
 800b590:	bf18      	it	ne
 800b592:	2a20      	cmpne	r2, #32
 800b594:	d101      	bne.n	800b59a <create_name+0xb2>
 800b596:	3301      	adds	r3, #1
 800b598:	e7f7      	b.n	800b58a <create_name+0xa2>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b59a:	b11b      	cbz	r3, 800b5a4 <create_name+0xbc>
 800b59c:	f048 0803 	orr.w	r8, r8, #3
 800b5a0:	e000      	b.n	800b5a4 <create_name+0xbc>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b5a2:	3c01      	subs	r4, #1
 800b5a4:	b16c      	cbz	r4, 800b5c2 <create_name+0xda>
 800b5a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b5aa:	4422      	add	r2, r4
 800b5ac:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800b5b0:	2a2e      	cmp	r2, #46	; 0x2e
 800b5b2:	d1f6      	bne.n	800b5a2 <create_name+0xba>
 800b5b4:	f04f 0b08 	mov.w	fp, #8
 800b5b8:	f04f 0a00 	mov.w	sl, #0
 800b5bc:	f8cd a004 	str.w	sl, [sp, #4]
 800b5c0:	e008      	b.n	800b5d4 <create_name+0xec>
 800b5c2:	46a2      	mov	sl, r4
 800b5c4:	f04f 0b08 	mov.w	fp, #8
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	9201      	str	r2, [sp, #4]
 800b5cc:	e002      	b.n	800b5d4 <create_name+0xec>
			cf |= NS_LOSS | NS_LFN; continue;
 800b5ce:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 800b5d2:	463b      	mov	r3, r7
 800b5d4:	1c5f      	adds	r7, r3, #1
 800b5d6:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800b5da:	b1be      	cbz	r6, 800b60c <create_name+0x124>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b5dc:	2e20      	cmp	r6, #32
 800b5de:	d0f6      	beq.n	800b5ce <create_name+0xe6>
 800b5e0:	2e2e      	cmp	r6, #46	; 0x2e
 800b5e2:	bf14      	ite	ne
 800b5e4:	2300      	movne	r3, #0
 800b5e6:	2301      	moveq	r3, #1
 800b5e8:	42bc      	cmp	r4, r7
 800b5ea:	bf08      	it	eq
 800b5ec:	2300      	moveq	r3, #0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1ed      	bne.n	800b5ce <create_name+0xe6>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b5f2:	42bc      	cmp	r4, r7
 800b5f4:	bf18      	it	ne
 800b5f6:	45da      	cmpne	sl, fp
 800b5f8:	d337      	bcc.n	800b66a <create_name+0x182>
			if (ni == 11) {				/* Long extension */
 800b5fa:	f1bb 0f0b 	cmp.w	fp, #11
 800b5fe:	d027      	beq.n	800b650 <create_name+0x168>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b600:	42bc      	cmp	r4, r7
 800b602:	d001      	beq.n	800b608 <create_name+0x120>
 800b604:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 800b608:	42bc      	cmp	r4, r7
 800b60a:	d224      	bcs.n	800b656 <create_name+0x16e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b60c:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 800b610:	2be5      	cmp	r3, #229	; 0xe5
 800b612:	d061      	beq.n	800b6d8 <create_name+0x1f0>
	if (ni == 8) b <<= 2;
 800b614:	f1bb 0f08 	cmp.w	fp, #8
 800b618:	d062      	beq.n	800b6e0 <create_name+0x1f8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b61a:	9b01      	ldr	r3, [sp, #4]
 800b61c:	f003 020c 	and.w	r2, r3, #12
 800b620:	2a0c      	cmp	r2, #12
 800b622:	d003      	beq.n	800b62c <create_name+0x144>
 800b624:	f003 0303 	and.w	r3, r3, #3
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d101      	bne.n	800b630 <create_name+0x148>
 800b62c:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b630:	f018 0f02 	tst.w	r8, #2
 800b634:	d106      	bne.n	800b644 <create_name+0x15c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b636:	9b01      	ldr	r3, [sp, #4]
 800b638:	f003 0303 	and.w	r3, r3, #3
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d054      	beq.n	800b6ea <create_name+0x202>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b640:	2a04      	cmp	r2, #4
 800b642:	d055      	beq.n	800b6f0 <create_name+0x208>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b644:	f889 804b 	strb.w	r8, [r9, #75]	; 0x4b
	return FR_OK;
 800b648:	2000      	movs	r0, #0
}
 800b64a:	b003      	add	sp, #12
 800b64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 800b650:	f048 0803 	orr.w	r8, r8, #3
 800b654:	e7da      	b.n	800b60c <create_name+0x124>
			b <<= 2; continue;
 800b656:	9b01      	ldr	r3, [sp, #4]
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b65e:	4623      	mov	r3, r4
 800b660:	f04f 0b0b 	mov.w	fp, #11
 800b664:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800b668:	e7b4      	b.n	800b5d4 <create_name+0xec>
		if (w >= 0x80) {				/* Non ASCII character */
 800b66a:	2e7f      	cmp	r6, #127	; 0x7f
 800b66c:	d80b      	bhi.n	800b686 <create_name+0x19e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b66e:	b9be      	cbnz	r6, 800b6a0 <create_name+0x1b8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b670:	f048 0803 	orr.w	r8, r8, #3
 800b674:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800b676:	eb09 030a 	add.w	r3, r9, sl
 800b67a:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b67e:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 800b680:	f10a 0a01 	add.w	sl, sl, #1
 800b684:	e7a6      	b.n	800b5d4 <create_name+0xec>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b686:	2100      	movs	r1, #0
 800b688:	4630      	mov	r0, r6
 800b68a:	f000 fddb 	bl	800c244 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b68e:	4606      	mov	r6, r0
 800b690:	b118      	cbz	r0, 800b69a <create_name+0x1b2>
 800b692:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 800b696:	4b1b      	ldr	r3, [pc, #108]	; (800b704 <create_name+0x21c>)
 800b698:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 800b69a:	f048 0802 	orr.w	r8, r8, #2
 800b69e:	e7e6      	b.n	800b66e <create_name+0x186>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b6a0:	4631      	mov	r1, r6
 800b6a2:	4819      	ldr	r0, [pc, #100]	; (800b708 <create_name+0x220>)
 800b6a4:	f7ff f960 	bl	800a968 <chk_chr>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d1e1      	bne.n	800b670 <create_name+0x188>
				if (IsUpper(w)) {		/* ASCII large capital */
 800b6ac:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	2b19      	cmp	r3, #25
 800b6b4:	d804      	bhi.n	800b6c0 <create_name+0x1d8>
					b |= 2;
 800b6b6:	9b01      	ldr	r3, [sp, #4]
 800b6b8:	f043 0302 	orr.w	r3, r3, #2
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	e7da      	b.n	800b676 <create_name+0x18e>
					if (IsLower(w)) {	/* ASCII small capital */
 800b6c0:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	2b19      	cmp	r3, #25
 800b6c8:	d8d5      	bhi.n	800b676 <create_name+0x18e>
						b |= 1; w -= 0x20;
 800b6ca:	9b01      	ldr	r3, [sp, #4]
 800b6cc:	f043 0301 	orr.w	r3, r3, #1
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	3e20      	subs	r6, #32
 800b6d4:	b2b6      	uxth	r6, r6
 800b6d6:	e7ce      	b.n	800b676 <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b6d8:	2305      	movs	r3, #5
 800b6da:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
 800b6de:	e799      	b.n	800b614 <create_name+0x12c>
	if (ni == 8) b <<= 2;
 800b6e0:	9b01      	ldr	r3, [sp, #4]
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	9301      	str	r3, [sp, #4]
 800b6e8:	e797      	b.n	800b61a <create_name+0x132>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b6ea:	f048 0810 	orr.w	r8, r8, #16
 800b6ee:	e7a7      	b.n	800b640 <create_name+0x158>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b6f0:	f048 0808 	orr.w	r8, r8, #8
 800b6f4:	e7a6      	b.n	800b644 <create_name+0x15c>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b6f6:	2006      	movs	r0, #6
 800b6f8:	e7a7      	b.n	800b64a <create_name+0x162>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b6fa:	2006      	movs	r0, #6
 800b6fc:	e7a5      	b.n	800b64a <create_name+0x162>
 800b6fe:	bf00      	nop
 800b700:	0801ab28 	.word	0x0801ab28
 800b704:	0801ab3c 	.word	0x0801ab3c
 800b708:	0801ab34 	.word	0x0801ab34

0800b70c <get_fileinfo>:
{
 800b70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800b710:	6804      	ldr	r4, [r0, #0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800b712:	2300      	movs	r3, #0
 800b714:	850b      	strh	r3, [r1, #40]	; 0x28
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b716:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 8088 	beq.w	800b82e <get_fileinfo+0x122>
 800b71e:	4606      	mov	r6, r0
 800b720:	460d      	mov	r5, r1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b722:	7823      	ldrb	r3, [r4, #0]
 800b724:	2b04      	cmp	r3, #4
 800b726:	d013      	beq.n	800b750 <get_fileinfo+0x44>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b728:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72e:	d018      	beq.n	800b762 <get_fileinfo+0x56>
			i = j = 0;
 800b730:	2200      	movs	r2, #0
 800b732:	4613      	mov	r3, r2
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b734:	68e1      	ldr	r1, [r4, #12]
 800b736:	1c50      	adds	r0, r2, #1
 800b738:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800b73c:	b16a      	cbz	r2, 800b75a <get_fileinfo+0x4e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b73e:	2bfe      	cmp	r3, #254	; 0xfe
 800b740:	d80a      	bhi.n	800b758 <get_fileinfo+0x4c>
				fno->fname[i++] = (TCHAR)w;
 800b742:	f103 0114 	add.w	r1, r3, #20
 800b746:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b74a:	4602      	mov	r2, r0
				fno->fname[i++] = (TCHAR)w;
 800b74c:	3301      	adds	r3, #1
 800b74e:	e7f1      	b.n	800b734 <get_fileinfo+0x28>
		get_xdir_info(fs->dirbuf, fno);
 800b750:	6920      	ldr	r0, [r4, #16]
 800b752:	f7ff f9b4 	bl	800aabe <get_xdir_info>
		return;
 800b756:	e06a      	b.n	800b82e <get_fileinfo+0x122>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b758:	2300      	movs	r3, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b75a:	3314      	adds	r3, #20
 800b75c:	2200      	movs	r2, #0
 800b75e:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b762:	f8b5 8028 	ldrh.w	r8, [r5, #40]	; 0x28
	i = j = 0;
 800b766:	2400      	movs	r4, #0
 800b768:	4623      	mov	r3, r4
	while (i < 11) {		/* Copy name body and extension */
 800b76a:	e018      	b.n	800b79e <get_fileinfo+0x92>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b76c:	20e5      	movs	r0, #229	; 0xe5
 800b76e:	e01f      	b.n	800b7b0 <get_fileinfo+0xa4>
			if (!lfv) fno->fname[j] = '.';
 800b770:	f1b8 0f00 	cmp.w	r8, #0
 800b774:	d104      	bne.n	800b780 <get_fileinfo+0x74>
 800b776:	f104 0314 	add.w	r3, r4, #20
 800b77a:	222e      	movs	r2, #46	; 0x2e
 800b77c:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
			fno->altname[j++] = '.';
 800b780:	1d23      	adds	r3, r4, #4
 800b782:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b786:	222e      	movs	r2, #46	; 0x2e
 800b788:	80da      	strh	r2, [r3, #6]
 800b78a:	3401      	adds	r4, #1
 800b78c:	e012      	b.n	800b7b4 <get_fileinfo+0xa8>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b78e:	2310      	movs	r3, #16
 800b790:	e027      	b.n	800b7e2 <get_fileinfo+0xd6>
			fno->fname[j] = c;
 800b792:	f104 0314 	add.w	r3, r4, #20
 800b796:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
		j++;
 800b79a:	3401      	adds	r4, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b79c:	463b      	mov	r3, r7
	while (i < 11) {		/* Copy name body and extension */
 800b79e:	2b0a      	cmp	r3, #10
 800b7a0:	d824      	bhi.n	800b7ec <get_fileinfo+0xe0>
		c = (TCHAR)dp->dir[i++];
 800b7a2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800b7a4:	1c5f      	adds	r7, r3, #1
 800b7a6:	5cd0      	ldrb	r0, [r2, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b7a8:	2820      	cmp	r0, #32
 800b7aa:	d0f7      	beq.n	800b79c <get_fileinfo+0x90>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b7ac:	2805      	cmp	r0, #5
 800b7ae:	d0dd      	beq.n	800b76c <get_fileinfo+0x60>
		if (i == 9) {						/* Insert a . if extension is exist */
 800b7b0:	2f09      	cmp	r7, #9
 800b7b2:	d0dd      	beq.n	800b770 <get_fileinfo+0x64>
		c = ff_convert(c, 1);	/* OEM -> Unicode */
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	f000 fd45 	bl	800c244 <ff_convert>
		if (!c) c = '?';
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	b900      	cbnz	r0, 800b7c0 <get_fileinfo+0xb4>
 800b7be:	223f      	movs	r2, #63	; 0x3f
		fno->altname[j] = c;
 800b7c0:	1d23      	adds	r3, r4, #4
 800b7c2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b7c6:	80da      	strh	r2, [r3, #6]
		if (!lfv) {
 800b7c8:	f1b8 0f00 	cmp.w	r8, #0
 800b7cc:	d1e5      	bne.n	800b79a <get_fileinfo+0x8e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b7ce:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	2b19      	cmp	r3, #25
 800b7d6:	d8dc      	bhi.n	800b792 <get_fileinfo+0x86>
 800b7d8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800b7da:	7b19      	ldrb	r1, [r3, #12]
 800b7dc:	2f08      	cmp	r7, #8
 800b7de:	d8d6      	bhi.n	800b78e <get_fileinfo+0x82>
 800b7e0:	2308      	movs	r3, #8
 800b7e2:	4219      	tst	r1, r3
 800b7e4:	d0d5      	beq.n	800b792 <get_fileinfo+0x86>
				c += 0x20;			/* To lower */
 800b7e6:	3220      	adds	r2, #32
 800b7e8:	b292      	uxth	r2, r2
 800b7ea:	e7d2      	b.n	800b792 <get_fileinfo+0x86>
	if (!lfv) {
 800b7ec:	f1b8 0f00 	cmp.w	r8, #0
 800b7f0:	d108      	bne.n	800b804 <get_fileinfo+0xf8>
		fno->fname[j] = 0;
 800b7f2:	f104 0314 	add.w	r3, r4, #20
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b7fc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800b7fe:	7b1b      	ldrb	r3, [r3, #12]
 800b800:	b903      	cbnz	r3, 800b804 <get_fileinfo+0xf8>
 800b802:	4614      	mov	r4, r2
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b804:	3404      	adds	r4, #4
 800b806:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800b80a:	2700      	movs	r7, #0
 800b80c:	80e7      	strh	r7, [r4, #6]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b80e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800b810:	7adb      	ldrb	r3, [r3, #11]
 800b812:	732b      	strb	r3, [r5, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b814:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800b816:	301c      	adds	r0, #28
 800b818:	f7ff f85d 	bl	800a8d6 <ld_dword>
 800b81c:	6028      	str	r0, [r5, #0]
 800b81e:	606f      	str	r7, [r5, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b820:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800b822:	3016      	adds	r0, #22
 800b824:	f7ff f857 	bl	800a8d6 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b828:	8168      	strh	r0, [r5, #10]
 800b82a:	0c00      	lsrs	r0, r0, #16
 800b82c:	8128      	strh	r0, [r5, #8]
}
 800b82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b832 <xname_sum>:
{
 800b832:	b538      	push	{r3, r4, r5, lr}
 800b834:	4604      	mov	r4, r0
	WORD sum = 0;
 800b836:	2500      	movs	r5, #0
	while ((chr = *name++) != 0) {
 800b838:	e011      	b.n	800b85e <xname_sum+0x2c>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800b83a:	f000 fd21 	bl	800c280 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b83e:	086b      	lsrs	r3, r5, #1
 800b840:	eb03 33c5 	add.w	r3, r3, r5, lsl #15
 800b844:	b2c2      	uxtb	r2, r0
 800b846:	fa12 f383 	uxtah	r3, r2, r3
 800b84a:	b29a      	uxth	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b84c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800b850:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800b854:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800b858:	fa10 f383 	uxtah	r3, r0, r3
 800b85c:	b29d      	uxth	r5, r3
	while ((chr = *name++) != 0) {
 800b85e:	f834 0b02 	ldrh.w	r0, [r4], #2
 800b862:	2800      	cmp	r0, #0
 800b864:	d1e9      	bne.n	800b83a <xname_sum+0x8>
}
 800b866:	4628      	mov	r0, r5
 800b868:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b86c <cmp_lfn>:
{
 800b86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	4681      	mov	r9, r0
 800b872:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b874:	f101 001a 	add.w	r0, r1, #26
 800b878:	f7ff f828 	bl	800a8cc <ld_word>
 800b87c:	bbc8      	cbnz	r0, 800b8f2 <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b87e:	783e      	ldrb	r6, [r7, #0]
 800b880:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800b884:	3e01      	subs	r6, #1
 800b886:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800b88a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b88e:	f04f 0801 	mov.w	r8, #1
 800b892:	2500      	movs	r5, #0
 800b894:	e006      	b.n	800b8a4 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 800b896:	2000      	movs	r0, #0
 800b898:	e02c      	b.n	800b8f4 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b89a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b89e:	4298      	cmp	r0, r3
 800b8a0:	d12a      	bne.n	800b8f8 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8a2:	3501      	adds	r5, #1
 800b8a4:	2d0c      	cmp	r5, #12
 800b8a6:	d818      	bhi.n	800b8da <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b8a8:	4b17      	ldr	r3, [pc, #92]	; (800b908 <cmp_lfn+0x9c>)
 800b8aa:	5d58      	ldrb	r0, [r3, r5]
 800b8ac:	4438      	add	r0, r7
 800b8ae:	f7ff f80d 	bl	800a8cc <ld_word>
 800b8b2:	4604      	mov	r4, r0
		if (wc) {
 800b8b4:	f1b8 0f00 	cmp.w	r8, #0
 800b8b8:	d0ef      	beq.n	800b89a <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b8ba:	2efe      	cmp	r6, #254	; 0xfe
 800b8bc:	d8eb      	bhi.n	800b896 <cmp_lfn+0x2a>
 800b8be:	f000 fcdf 	bl	800c280 <ff_wtoupper>
 800b8c2:	4680      	mov	r8, r0
 800b8c4:	f106 0a01 	add.w	sl, r6, #1
 800b8c8:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 800b8cc:	f000 fcd8 	bl	800c280 <ff_wtoupper>
 800b8d0:	4580      	cmp	r8, r0
 800b8d2:	d1e0      	bne.n	800b896 <cmp_lfn+0x2a>
			wc = uc;
 800b8d4:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b8d6:	4656      	mov	r6, sl
 800b8d8:	e7e3      	b.n	800b8a2 <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b8da:	783b      	ldrb	r3, [r7, #0]
 800b8dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b8e0:	d00c      	beq.n	800b8fc <cmp_lfn+0x90>
 800b8e2:	f1b8 0f00 	cmp.w	r8, #0
 800b8e6:	d00b      	beq.n	800b900 <cmp_lfn+0x94>
 800b8e8:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 800b8ec:	b953      	cbnz	r3, 800b904 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 800b8ee:	2001      	movs	r0, #1
 800b8f0:	e000      	b.n	800b8f4 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b8f2:	2000      	movs	r0, #0
}
 800b8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e7fb      	b.n	800b8f4 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 800b8fc:	2001      	movs	r0, #1
 800b8fe:	e7f9      	b.n	800b8f4 <cmp_lfn+0x88>
 800b900:	2001      	movs	r0, #1
 800b902:	e7f7      	b.n	800b8f4 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b904:	2000      	movs	r0, #0
 800b906:	e7f5      	b.n	800b8f4 <cmp_lfn+0x88>
 800b908:	0801abbc 	.word	0x0801abbc

0800b90c <dir_find>:
{
 800b90c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800b912:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b914:	2100      	movs	r1, #0
 800b916:	f7ff fc48 	bl	800b1aa <dir_sdi>
	if (res != FR_OK) return res;
 800b91a:	4606      	mov	r6, r0
 800b91c:	2800      	cmp	r0, #0
 800b91e:	f040 80ab 	bne.w	800ba78 <dir_find+0x16c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b922:	783b      	ldrb	r3, [r7, #0]
 800b924:	2b04      	cmp	r3, #4
 800b926:	d006      	beq.n	800b936 <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b928:	f04f 33ff 	mov.w	r3, #4294967295
 800b92c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b92e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800b932:	46c8      	mov	r8, r9
 800b934:	e046      	b.n	800b9c4 <dir_find+0xb8>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7ff ff7b 	bl	800b832 <xname_sum>
 800b93c:	4683      	mov	fp, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b93e:	e020      	b.n	800b982 <dir_find+0x76>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b940:	6938      	ldr	r0, [r7, #16]
 800b942:	4440      	add	r0, r8
 800b944:	f7fe ffc2 	bl	800a8cc <ld_word>
 800b948:	f000 fc9a 	bl	800c280 <ff_wtoupper>
 800b94c:	4681      	mov	r9, r0
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f833 001a 	ldrh.w	r0, [r3, sl, lsl #1]
 800b954:	f000 fc94 	bl	800c280 <ff_wtoupper>
 800b958:	4581      	cmp	r9, r0
 800b95a:	d10c      	bne.n	800b976 <dir_find+0x6a>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b95c:	3d01      	subs	r5, #1
 800b95e:	b2ed      	uxtb	r5, r5
 800b960:	f108 0802 	add.w	r8, r8, #2
 800b964:	f10a 0a01 	add.w	sl, sl, #1
 800b968:	b12d      	cbz	r5, 800b976 <dir_find+0x6a>
				if ((di % SZDIRE) == 0) di += 2;
 800b96a:	f018 0f1f 	tst.w	r8, #31
 800b96e:	d1e7      	bne.n	800b940 <dir_find+0x34>
 800b970:	f108 0802 	add.w	r8, r8, #2
 800b974:	e7e4      	b.n	800b940 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b976:	b925      	cbnz	r5, 800b982 <dir_find+0x76>
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d07a      	beq.n	800ba78 <dir_find+0x16c>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b982:	2100      	movs	r1, #0
 800b984:	4620      	mov	r0, r4
 800b986:	f7ff fd3b 	bl	800b400 <dir_read>
 800b98a:	4606      	mov	r6, r0
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d173      	bne.n	800ba78 <dir_find+0x16c>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800b990:	693d      	ldr	r5, [r7, #16]
 800b992:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800b996:	f7fe ff99 	bl	800a8cc <ld_word>
 800b99a:	4558      	cmp	r0, fp
 800b99c:	d1f1      	bne.n	800b982 <dir_find+0x76>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b99e:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 800b9a2:	f04f 0a00 	mov.w	sl, #0
 800b9a6:	f04f 0840 	mov.w	r8, #64	; 0x40
 800b9aa:	e7dd      	b.n	800b968 <dir_find+0x5c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b9b2:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f7ff fc56 	bl	800b26a <dir_next>
	} while (res == FR_OK);
 800b9be:	4606      	mov	r6, r0
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d159      	bne.n	800ba78 <dir_find+0x16c>
		res = move_window(fs, dp->sect);
 800b9c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f7ff f901 	bl	800abce <move_window>
		if (res != FR_OK) break;
 800b9cc:	4606      	mov	r6, r0
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d152      	bne.n	800ba78 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b9d2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800b9d4:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d04d      	beq.n	800ba76 <dir_find+0x16a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b9da:	7ae9      	ldrb	r1, [r5, #11]
 800b9dc:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800b9e0:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b9e2:	2be5      	cmp	r3, #229	; 0xe5
 800b9e4:	d0e2      	beq.n	800b9ac <dir_find+0xa0>
 800b9e6:	f011 0f08 	tst.w	r1, #8
 800b9ea:	d001      	beq.n	800b9f0 <dir_find+0xe4>
 800b9ec:	2a0f      	cmp	r2, #15
 800b9ee:	d1dd      	bne.n	800b9ac <dir_find+0xa0>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b9f0:	2a0f      	cmp	r2, #15
 800b9f2:	d019      	beq.n	800ba28 <dir_find+0x11c>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b9f4:	f1b8 0f00 	cmp.w	r8, #0
 800b9f8:	d104      	bne.n	800ba04 <dir_find+0xf8>
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f7ff f836 	bl	800aa6c <sum_sfn>
 800ba00:	4548      	cmp	r0, r9
 800ba02:	d039      	beq.n	800ba78 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba04:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800ba08:	f013 0f01 	tst.w	r3, #1
 800ba0c:	d106      	bne.n	800ba1c <dir_find+0x110>
 800ba0e:	220b      	movs	r2, #11
 800ba10:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800ba14:	4628      	mov	r0, r5
 800ba16:	f7fe ff9a 	bl	800a94e <mem_cmp>
 800ba1a:	b368      	cbz	r0, 800ba78 <dir_find+0x16c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ba1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba20:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ba22:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800ba26:	e7c6      	b.n	800b9b6 <dir_find+0xaa>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ba28:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800ba2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ba30:	d1c1      	bne.n	800b9b6 <dir_find+0xaa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ba32:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ba36:	d006      	beq.n	800ba46 <dir_find+0x13a>
						sum = dp->dir[LDIR_Chksum];
 800ba38:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ba3c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ba40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ba42:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ba44:	4698      	mov	r8, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba46:	4543      	cmp	r3, r8
 800ba48:	d002      	beq.n	800ba50 <dir_find+0x144>
 800ba4a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800ba4e:	e7b2      	b.n	800b9b6 <dir_find+0xaa>
 800ba50:	7b6b      	ldrb	r3, [r5, #13]
 800ba52:	454b      	cmp	r3, r9
 800ba54:	d002      	beq.n	800ba5c <dir_find+0x150>
 800ba56:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800ba5a:	e7ac      	b.n	800b9b6 <dir_find+0xaa>
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7ff ff04 	bl	800b86c <cmp_lfn>
 800ba64:	b120      	cbz	r0, 800ba70 <dir_find+0x164>
 800ba66:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba6a:	fa5f f888 	uxtb.w	r8, r8
 800ba6e:	e7a2      	b.n	800b9b6 <dir_find+0xaa>
 800ba70:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800ba74:	e79f      	b.n	800b9b6 <dir_find+0xaa>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba76:	2604      	movs	r6, #4
}
 800ba78:	4630      	mov	r0, r6
 800ba7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba7e <follow_path>:
{
 800ba7e:	b530      	push	{r4, r5, lr}
 800ba80:	b083      	sub	sp, #12
 800ba82:	4604      	mov	r4, r0
 800ba84:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800ba86:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ba88:	e001      	b.n	800ba8e <follow_path+0x10>
 800ba8a:	3302      	adds	r3, #2
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	9b01      	ldr	r3, [sp, #4]
 800ba90:	881a      	ldrh	r2, [r3, #0]
 800ba92:	2a5c      	cmp	r2, #92	; 0x5c
 800ba94:	bf18      	it	ne
 800ba96:	2a2f      	cmpne	r2, #47	; 0x2f
 800ba98:	d0f7      	beq.n	800ba8a <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	60a2      	str	r2, [r4, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ba9e:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800baa0:	881b      	ldrh	r3, [r3, #0]
 800baa2:	2b1f      	cmp	r3, #31
 800baa4:	d82c      	bhi.n	800bb00 <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
 800baa6:	2380      	movs	r3, #128	; 0x80
 800baa8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800baac:	4611      	mov	r1, r2
 800baae:	4620      	mov	r0, r4
 800bab0:	f7ff fb7b 	bl	800b1aa <dir_sdi>
 800bab4:	4603      	mov	r3, r0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	b003      	add	sp, #12
 800baba:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800babc:	2804      	cmp	r0, #4
 800babe:	d1fa      	bne.n	800bab6 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bac0:	f012 0f04 	tst.w	r2, #4
 800bac4:	d1f7      	bne.n	800bab6 <follow_path+0x38>
 800bac6:	2305      	movs	r3, #5
 800bac8:	e7f5      	b.n	800bab6 <follow_path+0x38>
				obj->c_scl = obj->sclust;
 800baca:	68a3      	ldr	r3, [r4, #8]
 800bacc:	6223      	str	r3, [r4, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800bace:	6923      	ldr	r3, [r4, #16]
 800bad0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bad4:	79e2      	ldrb	r2, [r4, #7]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	6263      	str	r3, [r4, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800bada:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800badc:	62a3      	str	r3, [r4, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800bade:	6928      	ldr	r0, [r5, #16]
 800bae0:	3034      	adds	r0, #52	; 0x34
 800bae2:	f7fe fef8 	bl	800a8d6 <ld_dword>
 800bae6:	60a0      	str	r0, [r4, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bae8:	692b      	ldr	r3, [r5, #16]
 800baea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800baee:	f003 0302 	and.w	r3, r3, #2
 800baf2:	71e3      	strb	r3, [r4, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800baf4:	6928      	ldr	r0, [r5, #16]
 800baf6:	3038      	adds	r0, #56	; 0x38
 800baf8:	f7fe fef8 	bl	800a8ec <ld_qword>
 800bafc:	e9c4 0104 	strd	r0, r1, [r4, #16]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb00:	a901      	add	r1, sp, #4
 800bb02:	4620      	mov	r0, r4
 800bb04:	f7ff fcf0 	bl	800b4e8 <create_name>
			if (res != FR_OK) break;
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d1d3      	bne.n	800bab6 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f7ff fefc 	bl	800b90c <dir_find>
			ns = dp->fn[NSFLAG];
 800bb14:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d1ce      	bne.n	800babc <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb1e:	f012 0f04 	tst.w	r2, #4
 800bb22:	d1c8      	bne.n	800bab6 <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bb24:	79a3      	ldrb	r3, [r4, #6]
 800bb26:	f013 0f10 	tst.w	r3, #16
 800bb2a:	d00d      	beq.n	800bb48 <follow_path+0xca>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800bb2c:	782b      	ldrb	r3, [r5, #0]
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	d0cb      	beq.n	800baca <follow_path+0x4c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bb32:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800bb36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bb38:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800bb3c:	4419      	add	r1, r3
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f7fe ff3e 	bl	800a9c0 <ld_clust>
 800bb44:	60a0      	str	r0, [r4, #8]
 800bb46:	e7db      	b.n	800bb00 <follow_path+0x82>
				res = FR_NO_PATH; break;
 800bb48:	2305      	movs	r3, #5
 800bb4a:	e7b4      	b.n	800bab6 <follow_path+0x38>

0800bb4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	9001      	str	r0, [sp, #4]
 800bb52:	9100      	str	r1, [sp, #0]
 800bb54:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bb56:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bb58:	a803      	add	r0, sp, #12
 800bb5a:	f7fe fff0 	bl	800ab3e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	db1d      	blt.n	800bb9e <f_mount+0x52>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bb62:	4b10      	ldr	r3, [pc, #64]	; (800bba4 <f_mount+0x58>)
 800bb64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 800bb68:	b10b      	cbz	r3, 800bb6e <f_mount+0x22>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bb6e:	9b01      	ldr	r3, [sp, #4]
 800bb70:	b10b      	cbz	r3, 800bb76 <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
 800bb72:	2200      	movs	r2, #0
 800bb74:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bb76:	9b01      	ldr	r3, [sp, #4]
 800bb78:	4a0a      	ldr	r2, [pc, #40]	; (800bba4 <f_mount+0x58>)
 800bb7a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bb7e:	1e62      	subs	r2, r4, #1
 800bb80:	bf18      	it	ne
 800bb82:	2201      	movne	r2, #1
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bf08      	it	eq
 800bb88:	f042 0201 	orreq.w	r2, r2, #1
 800bb8c:	b112      	cbz	r2, 800bb94 <f_mount+0x48>
 800bb8e:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800bb90:	b004      	add	sp, #16
 800bb92:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bb94:	a901      	add	r1, sp, #4
 800bb96:	4668      	mov	r0, sp
 800bb98:	f7ff f874 	bl	800ac84 <find_volume>
	LEAVE_FF(fs, res);
 800bb9c:	e7f8      	b.n	800bb90 <f_mount+0x44>
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb9e:	200b      	movs	r0, #11
 800bba0:	e7f6      	b.n	800bb90 <f_mount+0x44>
 800bba2:	bf00      	nop
 800bba4:	200003c4 	.word	0x200003c4

0800bba8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbac:	b098      	sub	sp, #96	; 0x60
 800bbae:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d066      	beq.n	800bc82 <f_open+0xda>
 800bbb4:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bbb6:	f002 0401 	and.w	r4, r2, #1
	res = find_volume(&path, &fs, mode);
 800bbba:	4622      	mov	r2, r4
 800bbbc:	a903      	add	r1, sp, #12
 800bbbe:	a801      	add	r0, sp, #4
 800bbc0:	f7ff f860 	bl	800ac84 <find_volume>
	if (res == FR_OK) {
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	b130      	cbz	r0, 800bbd6 <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bbc8:	b10d      	cbz	r5, 800bbce <f_open+0x26>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800bbce:	4628      	mov	r0, r5
 800bbd0:	b018      	add	sp, #96	; 0x60
 800bbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dj.obj.fs = fs;
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800bbda:	9901      	ldr	r1, [sp, #4]
 800bbdc:	a804      	add	r0, sp, #16
 800bbde:	f7ff ff4e 	bl	800ba7e <follow_path>
		if (res == FR_OK) {
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	b940      	cbnz	r0, 800bbf8 <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bbe6:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	db45      	blt.n	800bc7a <f_open+0xd2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bbee:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800bbf2:	f013 0f10 	tst.w	r3, #16
 800bbf6:	d142      	bne.n	800bc7e <f_open+0xd6>
		if (res == FR_OK) {
 800bbf8:	2d00      	cmp	r5, #0
 800bbfa:	d1e5      	bne.n	800bbc8 <f_open+0x20>
			if (fs->fs_type == FS_EXFAT) {
 800bbfc:	9f03      	ldr	r7, [sp, #12]
 800bbfe:	783b      	ldrb	r3, [r7, #0]
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	d01d      	beq.n	800bc40 <f_open+0x98>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bc04:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800bc08:	4641      	mov	r1, r8
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7fe fed8 	bl	800a9c0 <ld_clust>
 800bc10:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bc12:	f108 001c 	add.w	r0, r8, #28
 800bc16:	f7fe fe5e 	bl	800a8d6 <ld_dword>
 800bc1a:	6130      	str	r0, [r6, #16]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	6173      	str	r3, [r6, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bc20:	2300      	movs	r3, #0
 800bc22:	64b3      	str	r3, [r6, #72]	; 0x48
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bc24:	6037      	str	r7, [r6, #0]
			fp->obj.id = fs->id;
 800bc26:	9a03      	ldr	r2, [sp, #12]
 800bc28:	88d2      	ldrh	r2, [r2, #6]
 800bc2a:	80b2      	strh	r2, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800bc2c:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800bc30:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800bc34:	6473      	str	r3, [r6, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bc36:	2200      	movs	r2, #0
 800bc38:	2300      	movs	r3, #0
 800bc3a:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
 800bc3e:	e7c3      	b.n	800bbc8 <f_open+0x20>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800bc40:	9b06      	ldr	r3, [sp, #24]
 800bc42:	6233      	str	r3, [r6, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800bc44:	9b08      	ldr	r3, [sp, #32]
 800bc46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc4a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	6273      	str	r3, [r6, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800bc52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc54:	62b3      	str	r3, [r6, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800bc56:	6938      	ldr	r0, [r7, #16]
 800bc58:	3034      	adds	r0, #52	; 0x34
 800bc5a:	f7fe fe3c 	bl	800a8d6 <ld_dword>
 800bc5e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800bc60:	6938      	ldr	r0, [r7, #16]
 800bc62:	3038      	adds	r0, #56	; 0x38
 800bc64:	f7fe fe42 	bl	800a8ec <ld_qword>
 800bc68:	e9c6 0104 	strd	r0, r1, [r6, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bc72:	f003 0302 	and.w	r3, r3, #2
 800bc76:	71f3      	strb	r3, [r6, #7]
 800bc78:	e7d2      	b.n	800bc20 <f_open+0x78>
				res = FR_INVALID_NAME;
 800bc7a:	2506      	movs	r5, #6
 800bc7c:	e7a4      	b.n	800bbc8 <f_open+0x20>
					res = FR_NO_FILE;
 800bc7e:	2504      	movs	r5, #4
 800bc80:	e7a2      	b.n	800bbc8 <f_open+0x20>
	if (!fp) return FR_INVALID_OBJECT;
 800bc82:	2509      	movs	r5, #9
 800bc84:	e7a3      	b.n	800bbce <f_open+0x26>

0800bc86 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bc86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	460e      	mov	r6, r1
 800bc90:	4615      	mov	r5, r2
 800bc92:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800bc94:	2300      	movs	r3, #0
 800bc96:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bc9a:	a903      	add	r1, sp, #12
 800bc9c:	f7fe ff74 	bl	800ab88 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bca0:	9001      	str	r0, [sp, #4]
 800bca2:	2800      	cmp	r0, #0
 800bca4:	f040 809e 	bne.w	800bde4 <f_read+0x15e>
 800bca8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f040 8098 	bne.w	800bde4 <f_read+0x15e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bcb4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800bcb8:	f013 0f01 	tst.w	r3, #1
 800bcbc:	f000 80a7 	beq.w	800be0e <f_read+0x188>
	remain = fp->obj.objsize - fp->fptr;
 800bcc0:	6923      	ldr	r3, [r4, #16]
 800bcc2:	6962      	ldr	r2, [r4, #20]
 800bcc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bcc6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bcc8:	1a1b      	subs	r3, r3, r0
 800bcca:	eb62 0201 	sbc.w	r2, r2, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bcce:	42ab      	cmp	r3, r5
 800bcd0:	f172 0200 	sbcs.w	r2, r2, #0
 800bcd4:	d246      	bcs.n	800bd64 <f_read+0xde>
 800bcd6:	461d      	mov	r5, r3
 800bcd8:	e044      	b.n	800bd64 <f_read+0xde>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bcda:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bcdc:	b119      	cbz	r1, 800bce6 <f_read+0x60>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bcde:	4620      	mov	r0, r4
 800bce0:	f7fe fe56 	bl	800a990 <clmt_clust>
 800bce4:	e052      	b.n	800bd8c <f_read+0x106>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bce6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bce8:	4620      	mov	r0, r4
 800bcea:	f7ff f9ad 	bl	800b048 <get_fat>
 800bcee:	e04d      	b.n	800bd8c <f_read+0x106>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bcf0:	f04f 0a02 	mov.w	sl, #2
 800bcf4:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800bcf8:	f8cd a004 	str.w	sl, [sp, #4]
 800bcfc:	e072      	b.n	800bde4 <f_read+0x15e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcfe:	f04f 0a01 	mov.w	sl, #1
 800bd02:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800bd06:	f8cd a004 	str.w	sl, [sp, #4]
 800bd0a:	e06b      	b.n	800bde4 <f_read+0x15e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd0c:	f04f 0a02 	mov.w	sl, #2
 800bd10:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800bd14:	f8cd a004 	str.w	sl, [sp, #4]
 800bd18:	e064      	b.n	800bde4 <f_read+0x15e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bd1a:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800bd1e:	e013      	b.n	800bd48 <f_read+0xc2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bd20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bd22:	454b      	cmp	r3, r9
 800bd24:	d162      	bne.n	800bdec <f_read+0x166>
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
 800bd26:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd30:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bd34:	42bd      	cmp	r5, r7
 800bd36:	d200      	bcs.n	800bd3a <f_read+0xb4>
 800bd38:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bd3a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800bd3e:	463a      	mov	r2, r7
 800bd40:	4419      	add	r1, r3
 800bd42:	4630      	mov	r0, r6
 800bd44:	f7fe fdf4 	bl	800a930 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bd48:	443e      	add	r6, r7
 800bd4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bd4e:	19db      	adds	r3, r3, r7
 800bd50:	f142 0200 	adc.w	r2, r2, #0
 800bd54:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd56:	63e2      	str	r2, [r4, #60]	; 0x3c
 800bd58:	f8d8 3000 	ldr.w	r3, [r8]
 800bd5c:	443b      	add	r3, r7
 800bd5e:	f8c8 3000 	str.w	r3, [r8]
 800bd62:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 800bd64:	2d00      	cmp	r5, #0
 800bd66:	d03d      	beq.n	800bde4 <f_read+0x15e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bd68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bd6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd6c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bd70:	2900      	cmp	r1, #0
 800bd72:	d1da      	bne.n	800bd2a <f_read+0xa4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bd74:	0a57      	lsrs	r7, r2, #9
 800bd76:	ea47 57c3 	orr.w	r7, r7, r3, lsl #23
 800bd7a:	9903      	ldr	r1, [sp, #12]
 800bd7c:	8949      	ldrh	r1, [r1, #10]
 800bd7e:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800bd80:	400f      	ands	r7, r1
 800bd82:	d109      	bne.n	800bd98 <f_read+0x112>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bd84:	ea52 0103 	orrs.w	r1, r2, r3
 800bd88:	d1a7      	bne.n	800bcda <f_read+0x54>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bd8a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bd8c:	2801      	cmp	r0, #1
 800bd8e:	d9af      	bls.n	800bcf0 <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd90:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bd94:	d0b3      	beq.n	800bcfe <f_read+0x78>
				fp->clust = clst;				/* Update current cluster */
 800bd96:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bd9c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bd9e:	4658      	mov	r0, fp
 800bda0:	f7fe fdea 	bl	800a978 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bda4:	4681      	mov	r9, r0
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d0b0      	beq.n	800bd0c <f_read+0x86>
			sect += csect;
 800bdaa:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bdac:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bdb0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800bdb4:	d3b4      	bcc.n	800bd20 <f_read+0x9a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bdb6:	eb07 030a 	add.w	r3, r7, sl
 800bdba:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d901      	bls.n	800bdc6 <f_read+0x140>
					cc = fs->csize - csect;
 800bdc2:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bdc6:	4653      	mov	r3, sl
 800bdc8:	464a      	mov	r2, r9
 800bdca:	4631      	mov	r1, r6
 800bdcc:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800bdd0:	f7fe fd70 	bl	800a8b4 <disk_read>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d0a0      	beq.n	800bd1a <f_read+0x94>
 800bdd8:	f04f 0a01 	mov.w	sl, #1
 800bddc:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800bde0:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800bde4:	9801      	ldr	r0, [sp, #4]
 800bde6:	b005      	add	sp, #20
 800bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bdec:	2301      	movs	r3, #1
 800bdee:	464a      	mov	r2, r9
 800bdf0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800bdf4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800bdf8:	f7fe fd5c 	bl	800a8b4 <disk_read>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d092      	beq.n	800bd26 <f_read+0xa0>
 800be00:	f04f 0a01 	mov.w	sl, #1
 800be04:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800be08:	f8cd a004 	str.w	sl, [sp, #4]
 800be0c:	e7ea      	b.n	800bde4 <f_read+0x15e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800be0e:	2307      	movs	r3, #7
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	e7e7      	b.n	800bde4 <f_read+0x15e>

0800be14 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800be14:	b510      	push	{r4, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	4604      	mov	r4, r0
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800be1a:	a901      	add	r1, sp, #4
 800be1c:	f7fe feb4 	bl	800ab88 <validate>
		if (res == FR_OK) {
 800be20:	b900      	cbnz	r0, 800be24 <f_close+0x10>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800be22:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800be24:	b002      	add	sp, #8
 800be26:	bd10      	pop	{r4, pc}

0800be28 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800be28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2c:	b085      	sub	sp, #20
 800be2e:	4604      	mov	r4, r0
 800be30:	4692      	mov	sl, r2
 800be32:	4699      	mov	r9, r3
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800be34:	a903      	add	r1, sp, #12
 800be36:	f7fe fea7 	bl	800ab88 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800be3a:	4605      	mov	r5, r0
 800be3c:	b908      	cbnz	r0, 800be42 <f_lseek+0x1a>
 800be3e:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800be42:	b9b5      	cbnz	r5, 800be72 <f_lseek+0x4a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800be44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 8089 	beq.w	800bf5e <f_lseek+0x136>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800be4c:	f1b9 3fff 	cmp.w	r9, #4294967295
 800be50:	bf08      	it	eq
 800be52:	f1ba 3fff 	cmpeq.w	sl, #4294967295
 800be56:	d010      	beq.n	800be7a <f_lseek+0x52>
				*tbl = 0;		/* Terminate table */
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800be58:	6926      	ldr	r6, [r4, #16]
 800be5a:	6967      	ldr	r7, [r4, #20]
 800be5c:	4556      	cmp	r6, sl
 800be5e:	eb77 0309 	sbcs.w	r3, r7, r9
 800be62:	d301      	bcc.n	800be68 <f_lseek+0x40>
 800be64:	4656      	mov	r6, sl
 800be66:	464f      	mov	r7, r9
			fp->fptr = ofs;				/* Set file pointer */
 800be68:	63a6      	str	r6, [r4, #56]	; 0x38
 800be6a:	63e7      	str	r7, [r4, #60]	; 0x3c
			if (ofs) {
 800be6c:	ea56 0307 	orrs.w	r3, r6, r7
 800be70:	d141      	bne.n	800bef6 <f_lseek+0xce>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800be72:	4628      	mov	r0, r5
 800be74:	b005      	add	sp, #20
 800be76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800be7a:	4698      	mov	r8, r3
 800be7c:	f858 bb04 	ldr.w	fp, [r8], #4
			cl = fp->obj.sclust;		/* Origin of the chain */
 800be80:	f8d4 a008 	ldr.w	sl, [r4, #8]
			if (cl) {
 800be84:	f1ba 0f00 	cmp.w	sl, #0
 800be88:	d029      	beq.n	800bede <f_lseek+0xb6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800be8a:	f04f 0902 	mov.w	r9, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800be8e:	f109 0902 	add.w	r9, r9, #2
 800be92:	4651      	mov	r1, sl
 800be94:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 800be96:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 800be98:	460e      	mov	r6, r1
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff f8d4 	bl	800b048 <get_fat>
 800bea0:	4601      	mov	r1, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bea2:	2801      	cmp	r0, #1
 800bea4:	d913      	bls.n	800bece <f_lseek+0xa6>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bea6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800beaa:	d014      	beq.n	800bed6 <f_lseek+0xae>
					} while (cl == pcl + 1);
 800beac:	3601      	adds	r6, #1
 800beae:	4286      	cmp	r6, r0
 800beb0:	d0f1      	beq.n	800be96 <f_lseek+0x6e>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800beb2:	45cb      	cmp	fp, r9
 800beb4:	d305      	bcc.n	800bec2 <f_lseek+0x9a>
						*tbl++ = ncl; *tbl++ = tcl;
 800beb6:	4643      	mov	r3, r8
 800beb8:	f843 7b08 	str.w	r7, [r3], #8
 800bebc:	f8c8 a004 	str.w	sl, [r8, #4]
 800bec0:	4698      	mov	r8, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bec2:	9b03      	ldr	r3, [sp, #12]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	428b      	cmp	r3, r1
 800bec8:	d90b      	bls.n	800bee2 <f_lseek+0xba>
						cl = get_fat(&fp->obj, cl);
 800beca:	468a      	mov	sl, r1
 800becc:	e7df      	b.n	800be8e <f_lseek+0x66>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bece:	2502      	movs	r5, #2
 800bed0:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800bed4:	e7cd      	b.n	800be72 <f_lseek+0x4a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bed6:	2501      	movs	r5, #1
 800bed8:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800bedc:	e7c9      	b.n	800be72 <f_lseek+0x4a>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bede:	f04f 0902 	mov.w	r9, #2
			*fp->cltbl = ulen;	/* Number of items used */
 800bee2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bee4:	f8c3 9000 	str.w	r9, [r3]
			if (ulen <= tlen) {
 800bee8:	45d9      	cmp	r9, fp
 800beea:	f200 80ef 	bhi.w	800c0cc <f_lseek+0x2a4>
				*tbl = 0;		/* Terminate table */
 800beee:	2300      	movs	r3, #0
 800bef0:	f8c8 3000 	str.w	r3, [r8]
 800bef4:	e7bd      	b.n	800be72 <f_lseek+0x4a>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bef6:	f116 38ff 	adds.w	r8, r6, #4294967295
 800befa:	f147 37ff 	adc.w	r7, r7, #4294967295
 800befe:	4642      	mov	r2, r8
 800bf00:	463b      	mov	r3, r7
 800bf02:	4620      	mov	r0, r4
 800bf04:	f7fe fd44 	bl	800a990 <clmt_clust>
 800bf08:	4601      	mov	r1, r0
 800bf0a:	6420      	str	r0, [r4, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800bf0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bf10:	4648      	mov	r0, r9
 800bf12:	f7fe fd31 	bl	800a978 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bf16:	b1d0      	cbz	r0, 800bf4e <f_lseek+0x126>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bf18:	ea4f 2258 	mov.w	r2, r8, lsr #9
 800bf1c:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
 800bf20:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	401a      	ands	r2, r3
 800bf28:	1817      	adds	r7, r2, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bf2a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800bf2e:	2e00      	cmp	r6, #0
 800bf30:	d09f      	beq.n	800be72 <f_lseek+0x4a>
 800bf32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bf34:	42bb      	cmp	r3, r7
 800bf36:	d09c      	beq.n	800be72 <f_lseek+0x4a>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bf38:	2301      	movs	r3, #1
 800bf3a:	463a      	mov	r2, r7
 800bf3c:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800bf40:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bf44:	f7fe fcb6 	bl	800a8b4 <disk_read>
 800bf48:	b928      	cbnz	r0, 800bf56 <f_lseek+0x12e>
					fp->sect = dsc;
 800bf4a:	6467      	str	r7, [r4, #68]	; 0x44
 800bf4c:	e791      	b.n	800be72 <f_lseek+0x4a>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bf4e:	2502      	movs	r5, #2
 800bf50:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800bf54:	e78d      	b.n	800be72 <f_lseek+0x4a>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bf56:	2501      	movs	r5, #1
 800bf58:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800bf5c:	e789      	b.n	800be72 <f_lseek+0x4a>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	781a      	ldrb	r2, [r3, #0]
 800bf62:	2a04      	cmp	r2, #4
 800bf64:	d00b      	beq.n	800bf7e <f_lseek+0x156>
 800bf66:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6a:	4552      	cmp	r2, sl
 800bf6c:	f04f 0200 	mov.w	r2, #0
 800bf70:	eb72 0209 	sbcs.w	r2, r2, r9
 800bf74:	d203      	bcs.n	800bf7e <f_lseek+0x156>
 800bf76:	f04f 3aff 	mov.w	sl, #4294967295
 800bf7a:	f04f 0900 	mov.w	r9, #0
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bf7e:	6926      	ldr	r6, [r4, #16]
 800bf80:	6967      	ldr	r7, [r4, #20]
 800bf82:	4556      	cmp	r6, sl
 800bf84:	eb77 0209 	sbcs.w	r2, r7, r9
 800bf88:	d301      	bcc.n	800bf8e <f_lseek+0x166>
 800bf8a:	4656      	mov	r6, sl
 800bf8c:	464f      	mov	r7, r9
		ifptr = fp->fptr;
 800bf8e:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 800bf92:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		fp->fptr = nsect = 0;
 800bf96:	2000      	movs	r0, #0
 800bf98:	2100      	movs	r1, #0
 800bf9a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs) {
 800bf9e:	ea56 0207 	orrs.w	r2, r6, r7
 800bfa2:	d074      	beq.n	800c08e <f_lseek+0x266>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bfa4:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 800bfa8:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800bfac:	ea59 030a 	orrs.w	r3, r9, sl
 800bfb0:	d026      	beq.n	800c000 <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bfb2:	1e70      	subs	r0, r6, #1
 800bfb4:	f04f 0b00 	mov.w	fp, #0
 800bfb8:	4642      	mov	r2, r8
 800bfba:	465b      	mov	r3, fp
 800bfbc:	f147 31ff 	adc.w	r1, r7, #4294967295
 800bfc0:	f7f4 ff5a 	bl	8000e78 <__aeabi_uldivmod>
 800bfc4:	9000      	str	r0, [sp, #0]
 800bfc6:	9101      	str	r1, [sp, #4]
 800bfc8:	f119 39ff 	adds.w	r9, r9, #4294967295
 800bfcc:	f14a 3aff 	adc.w	sl, sl, #4294967295
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	465b      	mov	r3, fp
 800bfd4:	4648      	mov	r0, r9
 800bfd6:	4651      	mov	r1, sl
 800bfd8:	f7f4 ff4e 	bl	8000e78 <__aeabi_uldivmod>
			if (ifptr > 0 &&
 800bfdc:	9b00      	ldr	r3, [sp, #0]
 800bfde:	4283      	cmp	r3, r0
 800bfe0:	9b01      	ldr	r3, [sp, #4]
 800bfe2:	418b      	sbcs	r3, r1
 800bfe4:	d30c      	bcc.n	800c000 <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bfe6:	f1c8 0300 	rsb	r3, r8, #0
 800bfea:	ea09 0303 	and.w	r3, r9, r3
 800bfee:	63a3      	str	r3, [r4, #56]	; 0x38
 800bff0:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
				ofs -= fp->fptr;
 800bff4:	1af6      	subs	r6, r6, r3
 800bff6:	eb67 070a 	sbc.w	r7, r7, sl
				clst = fp->clust;
 800bffa:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
 800bffe:	e003      	b.n	800c008 <f_lseek+0x1e0>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c000:	f8d4 9008 	ldr.w	r9, [r4, #8]
				fp->clust = clst;
 800c004:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
			if (clst != 0) {
 800c008:	f1b9 0f00 	cmp.w	r9, #0
 800c00c:	d041      	beq.n	800c092 <f_lseek+0x26a>
 800c00e:	4649      	mov	r1, r9
				while (ofs > bcs) {						/* Cluster following loop */
 800c010:	4640      	mov	r0, r8
 800c012:	45b0      	cmp	r8, r6
 800c014:	f04f 0300 	mov.w	r3, #0
 800c018:	41bb      	sbcs	r3, r7
 800c01a:	d220      	bcs.n	800c05e <f_lseek+0x236>
					ofs -= bcs; fp->fptr += bcs;
 800c01c:	1a36      	subs	r6, r6, r0
 800c01e:	f167 0700 	sbc.w	r7, r7, #0
 800c022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c024:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c026:	181b      	adds	r3, r3, r0
 800c028:	f142 0200 	adc.w	r2, r2, #0
 800c02c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c02e:	63e2      	str	r2, [r4, #60]	; 0x3c
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c030:	4620      	mov	r0, r4
 800c032:	f7ff f809 	bl	800b048 <get_fat>
 800c036:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c038:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c03c:	d007      	beq.n	800c04e <f_lseek+0x226>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c03e:	2801      	cmp	r0, #1
 800c040:	d909      	bls.n	800c056 <f_lseek+0x22e>
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	4283      	cmp	r3, r0
 800c048:	d905      	bls.n	800c056 <f_lseek+0x22e>
					fp->clust = clst;
 800c04a:	6420      	str	r0, [r4, #64]	; 0x40
 800c04c:	e7e0      	b.n	800c010 <f_lseek+0x1e8>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c04e:	2501      	movs	r5, #1
 800c050:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800c054:	e70d      	b.n	800be72 <f_lseek+0x4a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c056:	2502      	movs	r5, #2
 800c058:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800c05c:	e709      	b.n	800be72 <f_lseek+0x4a>
				fp->fptr += ofs;
 800c05e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c060:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c062:	199b      	adds	r3, r3, r6
 800c064:	eb47 0202 	adc.w	r2, r7, r2
 800c068:	63a3      	str	r3, [r4, #56]	; 0x38
 800c06a:	63e2      	str	r2, [r4, #60]	; 0x3c
				if (ofs % SS(fs)) {
 800c06c:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800c070:	b32b      	cbz	r3, 800c0be <f_lseek+0x296>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c072:	9803      	ldr	r0, [sp, #12]
 800c074:	f7fe fc80 	bl	800a978 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c078:	4681      	mov	r9, r0
 800c07a:	b120      	cbz	r0, 800c086 <f_lseek+0x25e>
					nsect += (DWORD)(ofs / SS(fs));
 800c07c:	0a76      	lsrs	r6, r6, #9
 800c07e:	ea46 56c7 	orr.w	r6, r6, r7, lsl #23
 800c082:	44b1      	add	r9, r6
 800c084:	e005      	b.n	800c092 <f_lseek+0x26a>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c086:	2502      	movs	r5, #2
 800c088:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800c08c:	e6f1      	b.n	800be72 <f_lseek+0x4a>
		fp->fptr = nsect = 0;
 800c08e:	f04f 0900 	mov.w	r9, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c092:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f43f aeea 	beq.w	800be72 <f_lseek+0x4a>
 800c09e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c0a0:	454b      	cmp	r3, r9
 800c0a2:	f43f aee6 	beq.w	800be72 <f_lseek+0x4a>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	464a      	mov	r2, r9
 800c0aa:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800c0ae:	9803      	ldr	r0, [sp, #12]
 800c0b0:	7840      	ldrb	r0, [r0, #1]
 800c0b2:	f7fe fbff 	bl	800a8b4 <disk_read>
 800c0b6:	b928      	cbnz	r0, 800c0c4 <f_lseek+0x29c>
			fp->sect = nsect;
 800c0b8:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
 800c0bc:	e6d9      	b.n	800be72 <f_lseek+0x4a>
		fp->fptr = nsect = 0;
 800c0be:	f04f 0900 	mov.w	r9, #0
 800c0c2:	e7e6      	b.n	800c092 <f_lseek+0x26a>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c0c4:	2501      	movs	r5, #1
 800c0c6:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800c0ca:	e6d2      	b.n	800be72 <f_lseek+0x4a>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c0cc:	2511      	movs	r5, #17
 800c0ce:	e6d0      	b.n	800be72 <f_lseek+0x4a>

0800c0d0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c0d0:	b530      	push	{r4, r5, lr}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d050      	beq.n	800c17c <f_opendir+0xac>
 800c0da:	4604      	mov	r4, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800c0dc:	2200      	movs	r2, #0
 800c0de:	a903      	add	r1, sp, #12
 800c0e0:	a801      	add	r0, sp, #4
 800c0e2:	f7fe fdcf 	bl	800ac84 <find_volume>
	if (res == FR_OK) {
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	b128      	cbz	r0, 800c0f6 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c0ea:	b10b      	cbz	r3, 800c0f0 <f_opendir+0x20>
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	6022      	str	r2, [r4, #0]

	LEAVE_FF(fs, res);
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	b005      	add	sp, #20
 800c0f4:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c0fa:	9901      	ldr	r1, [sp, #4]
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f7ff fcbe 	bl	800ba7e <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800c102:	4603      	mov	r3, r0
 800c104:	b9c0      	cbnz	r0, 800c138 <f_opendir+0x68>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c106:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	db0c      	blt.n	800c128 <f_opendir+0x58>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c10e:	79a3      	ldrb	r3, [r4, #6]
 800c110:	f013 0f10 	tst.w	r3, #16
 800c114:	d030      	beq.n	800c178 <f_opendir+0xa8>
					if (fs->fs_type == FS_EXFAT) {
 800c116:	9d03      	ldr	r5, [sp, #12]
 800c118:	782b      	ldrb	r3, [r5, #0]
 800c11a:	2b04      	cmp	r3, #4
 800c11c:	d010      	beq.n	800c140 <f_opendir+0x70>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c11e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c120:	4628      	mov	r0, r5
 800c122:	f7fe fc4d 	bl	800a9c0 <ld_clust>
 800c126:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 800c128:	9b03      	ldr	r3, [sp, #12]
 800c12a:	88db      	ldrh	r3, [r3, #6]
 800c12c:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c12e:	2100      	movs	r1, #0
 800c130:	4620      	mov	r0, r4
 800c132:	f7ff f83a 	bl	800b1aa <dir_sdi>
 800c136:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c138:	2b04      	cmp	r3, #4
 800c13a:	d1d6      	bne.n	800c0ea <f_opendir+0x1a>
 800c13c:	2305      	movs	r3, #5
 800c13e:	e7d5      	b.n	800c0ec <f_opendir+0x1c>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800c140:	68a3      	ldr	r3, [r4, #8]
 800c142:	6223      	str	r3, [r4, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c144:	6923      	ldr	r3, [r4, #16]
 800c146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c14a:	79e2      	ldrb	r2, [r4, #7]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	6263      	str	r3, [r4, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800c150:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c152:	62a3      	str	r3, [r4, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c154:	6928      	ldr	r0, [r5, #16]
 800c156:	3034      	adds	r0, #52	; 0x34
 800c158:	f7fe fbbd 	bl	800a8d6 <ld_dword>
 800c15c:	60a0      	str	r0, [r4, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c15e:	6928      	ldr	r0, [r5, #16]
 800c160:	3038      	adds	r0, #56	; 0x38
 800c162:	f7fe fbc3 	bl	800a8ec <ld_qword>
 800c166:	e9c4 0104 	strd	r0, r1, [r4, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c16a:	692b      	ldr	r3, [r5, #16]
 800c16c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	71e3      	strb	r3, [r4, #7]
 800c176:	e7d7      	b.n	800c128 <f_opendir+0x58>
					res = FR_NO_PATH;
 800c178:	2305      	movs	r3, #5
 800c17a:	e7dd      	b.n	800c138 <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 800c17c:	2309      	movs	r3, #9
 800c17e:	e7b7      	b.n	800c0f0 <f_opendir+0x20>

0800c180 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c180:	b510      	push	{r4, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c186:	a901      	add	r1, sp, #4
 800c188:	f7fe fcfe 	bl	800ab88 <validate>
	if (res == FR_OK) {
 800c18c:	b900      	cbnz	r0, 800c190 <f_closedir+0x10>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c18e:	6020      	str	r0, [r4, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 800c190:	b002      	add	sp, #8
 800c192:	bd10      	pop	{r4, pc}

0800c194 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c19c:	a901      	add	r1, sp, #4
 800c19e:	f7fe fcf3 	bl	800ab88 <validate>
	if (res == FR_OK) {
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	b9c0      	cbnz	r0, 800c1d8 <f_readdir+0x44>
		if (!fno) {
 800c1a6:	b195      	cbz	r5, 800c1ce <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f7ff f928 	bl	800b400 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c1b0:	2804      	cmp	r0, #4
 800c1b2:	d000      	beq.n	800c1b6 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 800c1b4:	b998      	cbnz	r0, 800c1de <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f7ff faa7 	bl	800b70c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f7ff f852 	bl	800b26a <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c1c6:	2804      	cmp	r0, #4
 800c1c8:	d006      	beq.n	800c1d8 <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	e004      	b.n	800c1d8 <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f7fe ffea 	bl	800b1aa <dir_sdi>
 800c1d6:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800c1d8:	4630      	mov	r0, r6
 800c1da:	b002      	add	sp, #8
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800c1de:	4606      	mov	r6, r0
 800c1e0:	e7fa      	b.n	800c1d8 <f_readdir+0x44>
	...

0800c1e4 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800c1e4:	4b13      	ldr	r3, [pc, #76]	; (800c234 <FATFS_LinkDriverEx+0x50>)
 800c1e6:	7b9b      	ldrb	r3, [r3, #14]
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d901      	bls.n	800c1f2 <FATFS_LinkDriverEx+0xe>
  uint8_t ret = 1;
 800c1ee:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }

  return ret;
}
 800c1f0:	4770      	bx	lr
{
 800c1f2:	b410      	push	{r4}
 800c1f4:	4604      	mov	r4, r0
    disk.is_initialized[disk.nbr] = 0;
 800c1f6:	4b0f      	ldr	r3, [pc, #60]	; (800c234 <FATFS_LinkDriverEx+0x50>)
 800c1f8:	f893 c00e 	ldrb.w	ip, [r3, #14]
 800c1fc:	fa5f fc8c 	uxtb.w	ip, ip
 800c200:	2000      	movs	r0, #0
 800c202:	f803 000c 	strb.w	r0, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800c206:	f893 c00e 	ldrb.w	ip, [r3, #14]
 800c20a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800c20e:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800c212:	7b9c      	ldrb	r4, [r3, #14]
 800c214:	441c      	add	r4, r3
 800c216:	7322      	strb	r2, [r4, #12]
    DiskNum = disk.nbr++;
 800c218:	7b9a      	ldrb	r2, [r3, #14]
 800c21a:	1c54      	adds	r4, r2, #1
 800c21c:	b2e4      	uxtb	r4, r4
 800c21e:	739c      	strb	r4, [r3, #14]
    path[0] = DiskNum + '0';
 800c220:	3230      	adds	r2, #48	; 0x30
 800c222:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800c224:	233a      	movs	r3, #58	; 0x3a
 800c226:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800c228:	232f      	movs	r3, #47	; 0x2f
 800c22a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800c22c:	70c8      	strb	r0, [r1, #3]
}
 800c22e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	200005d0 	.word	0x200005d0

0800c238 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c238:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800c23a:	2200      	movs	r2, #0
 800c23c:	f7ff ffd2 	bl	800c1e4 <FATFS_LinkDriverEx>
}
 800c240:	bd08      	pop	{r3, pc}
	...

0800c244 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c244:	287f      	cmp	r0, #127	; 0x7f
 800c246:	d917      	bls.n	800c278 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c248:	b131      	cbz	r1, 800c258 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c24a:	28ff      	cmp	r0, #255	; 0xff
 800c24c:	d813      	bhi.n	800c276 <ff_convert+0x32>
 800c24e:	3880      	subs	r0, #128	; 0x80
 800c250:	4b0a      	ldr	r3, [pc, #40]	; (800c27c <ff_convert+0x38>)
 800c252:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800c256:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c258:	2300      	movs	r3, #0
 800c25a:	2b7f      	cmp	r3, #127	; 0x7f
 800c25c:	d807      	bhi.n	800c26e <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800c25e:	4a07      	ldr	r2, [pc, #28]	; (800c27c <ff_convert+0x38>)
 800c260:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c264:	4282      	cmp	r2, r0
 800c266:	d002      	beq.n	800c26e <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800c268:	3301      	adds	r3, #1
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	e7f5      	b.n	800c25a <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800c26e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800c272:	b2c0      	uxtb	r0, r0
 800c274:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c276:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	0801abcc 	.word	0x0801abcc

0800c280 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c280:	b510      	push	{r4, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c282:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c286:	d201      	bcs.n	800c28c <ff_wtoupper+0xc>
 800c288:	4b22      	ldr	r3, [pc, #136]	; (800c314 <ff_wtoupper+0x94>)
 800c28a:	e002      	b.n	800c292 <ff_wtoupper+0x12>
 800c28c:	4b22      	ldr	r3, [pc, #136]	; (800c318 <ff_wtoupper+0x98>)
 800c28e:	e000      	b.n	800c292 <ff_wtoupper+0x12>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c290:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 800c292:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 800c294:	4288      	cmp	r0, r1
 800c296:	bf2c      	ite	cs
 800c298:	2200      	movcs	r2, #0
 800c29a:	2201      	movcc	r2, #1
 800c29c:	2900      	cmp	r1, #0
 800c29e:	bf08      	it	eq
 800c2a0:	f042 0201 	orreq.w	r2, r2, #1
 800c2a4:	b9ca      	cbnz	r2, 800c2da <ff_wtoupper+0x5a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c2a6:	f103 0e04 	add.w	lr, r3, #4
 800c2aa:	885b      	ldrh	r3, [r3, #2]
 800c2ac:	0a1a      	lsrs	r2, r3, #8
 800c2ae:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800c2b0:	eb03 0c01 	add.w	ip, r3, r1
 800c2b4:	4560      	cmp	r0, ip
 800c2b6:	db04      	blt.n	800c2c2 <ff_wtoupper+0x42>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800c2b8:	2a00      	cmp	r2, #0
 800c2ba:	d1e9      	bne.n	800c290 <ff_wtoupper+0x10>
 800c2bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c2c0:	e7e7      	b.n	800c292 <ff_wtoupper+0x12>
			switch (cmd) {
 800c2c2:	2a08      	cmp	r2, #8
 800c2c4:	d809      	bhi.n	800c2da <ff_wtoupper+0x5a>
 800c2c6:	e8df f002 	tbb	[pc, r2]
 800c2ca:	0905      	.short	0x0905
 800c2cc:	1815120f 	.word	0x1815120f
 800c2d0:	1e1b      	.short	0x1e1b
 800c2d2:	21          	.byte	0x21
 800c2d3:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c2d4:	1a41      	subs	r1, r0, r1
 800c2d6:	f83e 0011 	ldrh.w	r0, [lr, r1, lsl #1]
	}

	return chr;
}
 800c2da:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c2dc:	1a43      	subs	r3, r0, r1
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	1ac0      	subs	r0, r0, r3
 800c2e4:	b280      	uxth	r0, r0
 800c2e6:	e7f8      	b.n	800c2da <ff_wtoupper+0x5a>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c2e8:	3810      	subs	r0, #16
 800c2ea:	b280      	uxth	r0, r0
 800c2ec:	e7f5      	b.n	800c2da <ff_wtoupper+0x5a>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c2ee:	3820      	subs	r0, #32
 800c2f0:	b280      	uxth	r0, r0
 800c2f2:	e7f2      	b.n	800c2da <ff_wtoupper+0x5a>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c2f4:	3830      	subs	r0, #48	; 0x30
 800c2f6:	b280      	uxth	r0, r0
 800c2f8:	e7ef      	b.n	800c2da <ff_wtoupper+0x5a>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c2fa:	381a      	subs	r0, #26
 800c2fc:	b280      	uxth	r0, r0
 800c2fe:	e7ec      	b.n	800c2da <ff_wtoupper+0x5a>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c300:	3008      	adds	r0, #8
 800c302:	b280      	uxth	r0, r0
 800c304:	e7e9      	b.n	800c2da <ff_wtoupper+0x5a>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c306:	3850      	subs	r0, #80	; 0x50
 800c308:	b280      	uxth	r0, r0
 800c30a:	e7e6      	b.n	800c2da <ff_wtoupper+0x5a>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c30c:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800c310:	b280      	uxth	r0, r0
 800c312:	e7e2      	b.n	800c2da <ff_wtoupper+0x5a>
 800c314:	0801accc 	.word	0x0801accc
 800c318:	0801aec0 	.word	0x0801aec0

0800c31c <MP3ClearBadFrame>:
 **************************************************************************************/
static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, short *outbuf)
{
	int i;

	if (!mp3DecInfo)
 800c31c:	4684      	mov	ip, r0
 800c31e:	b188      	cbz	r0, 800c344 <MP3ClearBadFrame+0x28>
		return;

	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c320:	2200      	movs	r2, #0
 800c322:	e003      	b.n	800c32c <MP3ClearBadFrame+0x10>
		outbuf[i] = 0;
 800c324:	2300      	movs	r3, #0
 800c326:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c32a:	3201      	adds	r2, #1
 800c32c:	f8dc 37c4 	ldr.w	r3, [ip, #1988]	; 0x7c4
 800c330:	f8dc 07c8 	ldr.w	r0, [ip, #1992]	; 0x7c8
 800c334:	fb00 f303 	mul.w	r3, r0, r3
 800c338:	f8dc 07bc 	ldr.w	r0, [ip, #1980]	; 0x7bc
 800c33c:	fb00 f303 	mul.w	r3, r0, r3
 800c340:	4293      	cmp	r3, r2
 800c342:	dcef      	bgt.n	800c324 <MP3ClearBadFrame+0x8>
}
 800c344:	4770      	bx	lr

0800c346 <MP3InitDecoder>:
{
 800c346:	b508      	push	{r3, lr}
	mp3DecInfo = AllocateBuffers();
 800c348:	f000 fce3 	bl	800cd12 <xmp3fixpt_AllocateBuffers>
}
 800c34c:	bd08      	pop	{r3, pc}

0800c34e <MP3FindSyncWord>:
{
 800c34e:	4602      	mov	r2, r0
	for (i = 0; i < nBytes - 1; i++) {
 800c350:	2000      	movs	r0, #0
 800c352:	e000      	b.n	800c356 <MP3FindSyncWord+0x8>
 800c354:	3001      	adds	r0, #1
 800c356:	1e4b      	subs	r3, r1, #1
 800c358:	4283      	cmp	r3, r0
 800c35a:	dd09      	ble.n	800c370 <MP3FindSyncWord+0x22>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 800c35c:	5c13      	ldrb	r3, [r2, r0]
 800c35e:	2bff      	cmp	r3, #255	; 0xff
 800c360:	d1f8      	bne.n	800c354 <MP3FindSyncWord+0x6>
 800c362:	1813      	adds	r3, r2, r0
 800c364:	785b      	ldrb	r3, [r3, #1]
 800c366:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800c36a:	2be0      	cmp	r3, #224	; 0xe0
 800c36c:	d1f2      	bne.n	800c354 <MP3FindSyncWord+0x6>
 800c36e:	e001      	b.n	800c374 <MP3FindSyncWord+0x26>
	return -1;
 800c370:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c374:	4770      	bx	lr

0800c376 <MP3FindFreeSync>:
{
 800c376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c378:	4607      	mov	r7, r0
 800c37a:	460e      	mov	r6, r1
 800c37c:	4615      	mov	r5, r2
	unsigned char *bufPtr = buf;
 800c37e:	4604      	mov	r4, r0
 800c380:	e002      	b.n	800c388 <MP3FindFreeSync+0x12>
		bufPtr += 3;
 800c382:	1cdc      	adds	r4, r3, #3
		nBytes -= (offset + 3);
 800c384:	3003      	adds	r0, #3
 800c386:	1a2d      	subs	r5, r5, r0
		offset = MP3FindSyncWord(bufPtr, nBytes);
 800c388:	4629      	mov	r1, r5
 800c38a:	4620      	mov	r0, r4
 800c38c:	f7ff ffdf 	bl	800c34e <MP3FindSyncWord>
		bufPtr += offset;
 800c390:	1823      	adds	r3, r4, r0
		if (offset < 0) {
 800c392:	2800      	cmp	r0, #0
 800c394:	db13      	blt.n	800c3be <MP3FindFreeSync+0x48>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 800c396:	5c21      	ldrb	r1, [r4, r0]
 800c398:	7832      	ldrb	r2, [r6, #0]
 800c39a:	4291      	cmp	r1, r2
 800c39c:	d1f1      	bne.n	800c382 <MP3FindFreeSync+0xc>
 800c39e:	7859      	ldrb	r1, [r3, #1]
 800c3a0:	7872      	ldrb	r2, [r6, #1]
 800c3a2:	4291      	cmp	r1, r2
 800c3a4:	d1ed      	bne.n	800c382 <MP3FindFreeSync+0xc>
 800c3a6:	789a      	ldrb	r2, [r3, #2]
 800c3a8:	78b1      	ldrb	r1, [r6, #2]
 800c3aa:	404a      	eors	r2, r1
 800c3ac:	f012 0ffc 	tst.w	r2, #252	; 0xfc
 800c3b0:	d1e7      	bne.n	800c382 <MP3FindFreeSync+0xc>
			if ((firstFH[2] >> 1) & 0x01)
 800c3b2:	f011 0f02 	tst.w	r1, #2
 800c3b6:	d000      	beq.n	800c3ba <MP3FindFreeSync+0x44>
				bufPtr--;
 800c3b8:	3b01      	subs	r3, #1
			return bufPtr - buf;
 800c3ba:	1bd8      	subs	r0, r3, r7
 800c3bc:	e001      	b.n	800c3c2 <MP3FindFreeSync+0x4c>
			return -1;
 800c3be:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3c4 <MP3GetLastFrameInfo>:
	if (!mp3DecInfo || mp3DecInfo->layer != 3) {
 800c3c4:	b120      	cbz	r0, 800c3d0 <MP3GetLastFrameInfo+0xc>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	f8d0 27d0 	ldr.w	r2, [r0, #2000]	; 0x7d0
 800c3cc:	2a03      	cmp	r2, #3
 800c3ce:	d008      	beq.n	800c3e2 <MP3GetLastFrameInfo+0x1e>
		mp3FrameInfo->bitrate = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	600b      	str	r3, [r1, #0]
		mp3FrameInfo->nChans = 0;
 800c3d4:	604b      	str	r3, [r1, #4]
		mp3FrameInfo->samprate = 0;
 800c3d6:	608b      	str	r3, [r1, #8]
		mp3FrameInfo->bitsPerSample = 0;
 800c3d8:	60cb      	str	r3, [r1, #12]
		mp3FrameInfo->outputSamps = 0;
 800c3da:	610b      	str	r3, [r1, #16]
		mp3FrameInfo->layer = 0;
 800c3dc:	614b      	str	r3, [r1, #20]
		mp3FrameInfo->version = 0;
 800c3de:	618b      	str	r3, [r1, #24]
 800c3e0:	4770      	bx	lr
{
 800c3e2:	b410      	push	{r4}
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 800c3e4:	f8d0 27b8 	ldr.w	r2, [r0, #1976]	; 0x7b8
 800c3e8:	600a      	str	r2, [r1, #0]
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 800c3ea:	f8d0 27bc 	ldr.w	r2, [r0, #1980]	; 0x7bc
 800c3ee:	604a      	str	r2, [r1, #4]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 800c3f0:	f8d0 27c0 	ldr.w	r2, [r0, #1984]	; 0x7c0
 800c3f4:	608a      	str	r2, [r1, #8]
		mp3FrameInfo->bitsPerSample = 16;
 800c3f6:	2210      	movs	r2, #16
 800c3f8:	60ca      	str	r2, [r1, #12]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800c3fa:	f8d0 07bc 	ldr.w	r0, [r0, #1980]	; 0x7bc
 800c3fe:	f893 27d4 	ldrb.w	r2, [r3, #2004]	; 0x7d4
 800c402:	f8d3 47d0 	ldr.w	r4, [r3, #2000]	; 0x7d0
 800c406:	f104 3cff 	add.w	ip, r4, #4294967295
 800c40a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c40e:	4462      	add	r2, ip
 800c410:	4c07      	ldr	r4, [pc, #28]	; (800c430 <MP3GetLastFrameInfo+0x6c>)
 800c412:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
 800c416:	fb02 f000 	mul.w	r0, r2, r0
 800c41a:	6108      	str	r0, [r1, #16]
		mp3FrameInfo->layer = mp3DecInfo->layer;
 800c41c:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	; 0x7d0
 800c420:	614a      	str	r2, [r1, #20]
		mp3FrameInfo->version = mp3DecInfo->version;
 800c422:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 800c426:	618b      	str	r3, [r1, #24]
}
 800c428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	0801b0b0 	.word	0x0801b0b0

0800c434 <MP3Decode>:
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
//mw	ULONG32 ulTime;
//mw	StartYield(&ulTime); 
	if (!mp3DecInfo)
 800c434:	2800      	cmp	r0, #0
 800c436:	f000 815d 	beq.w	800c6f4 <MP3Decode+0x2c0>
{
 800c43a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43e:	b085      	sub	sp, #20
 800c440:	460c      	mov	r4, r1
 800c442:	4615      	mov	r5, r2
 800c444:	469b      	mov	fp, r3
 800c446:	4606      	mov	r6, r0
		return ERR_MP3_NULL_POINTER;

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 800c448:	6809      	ldr	r1, [r1, #0]
 800c44a:	f000 f9cf 	bl	800c7ec <xmp3fixpt_UnpackFrameHeader>
	if (fhBytes < 0)	
 800c44e:	1e07      	subs	r7, r0, #0
 800c450:	f2c0 8153 	blt.w	800c6fa <MP3Decode+0x2c6>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
	*inbuf += fhBytes;
 800c454:	6821      	ldr	r1, [r4, #0]
 800c456:	4439      	add	r1, r7
 800c458:	6021      	str	r1, [r4, #0]
	
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 800c45a:	4630      	mov	r0, r6
 800c45c:	f000 fac2 	bl	800c9e4 <xmp3fixpt_UnpackSideInfo>
	if (siBytes < 0) {
 800c460:	f1b0 0800 	subs.w	r8, r0, #0
 800c464:	f2c0 8098 	blt.w	800c598 <MP3Decode+0x164>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
		return ERR_MP3_INVALID_SIDEINFO;
	}
	*inbuf += siBytes;
 800c468:	6823      	ldr	r3, [r4, #0]
 800c46a:	4443      	add	r3, r8
 800c46c:	6023      	str	r3, [r4, #0]
	*bytesLeft -= (fhBytes + siBytes);
 800c46e:	eb07 0208 	add.w	r2, r7, r8
 800c472:	682b      	ldr	r3, [r5, #0]
 800c474:	1a9b      	subs	r3, r3, r2
 800c476:	602b      	str	r3, [r5, #0]
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 800c478:	f8d6 37b8 	ldr.w	r3, [r6, #1976]	; 0x7b8
 800c47c:	b113      	cbz	r3, 800c484 <MP3Decode+0x50>
 800c47e:	f8d6 37b0 	ldr.w	r3, [r6, #1968]	; 0x7b0
 800c482:	b353      	cbz	r3, 800c4da <MP3Decode+0xa6>
		if (!mp3DecInfo->freeBitrateFlag) {
 800c484:	f8d6 37b0 	ldr.w	r3, [r6, #1968]	; 0x7b0
 800c488:	b9fb      	cbnz	r3, 800c4ca <MP3Decode+0x96>
			/* first time through, need to scan for next sync word and figure out frame size */
			mp3DecInfo->freeBitrateFlag = 1;
 800c48a:	2301      	movs	r3, #1
 800c48c:	f8c6 37b0 	str.w	r3, [r6, #1968]	; 0x7b0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800c490:	6820      	ldr	r0, [r4, #0]
 800c492:	4279      	negs	r1, r7
 800c494:	eba1 0108 	sub.w	r1, r1, r8
 800c498:	682a      	ldr	r2, [r5, #0]
 800c49a:	4401      	add	r1, r0
 800c49c:	f7ff ff6b 	bl	800c376 <MP3FindFreeSync>
 800c4a0:	f8c6 07b4 	str.w	r0, [r6, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	db7e      	blt.n	800c5a6 <MP3Decode+0x172>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_FREE_BITRATE_SYNC;
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 800c4a8:	4438      	add	r0, r7
 800c4aa:	4480      	add	r8, r0
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 800c4ac:	f8d6 37c0 	ldr.w	r3, [r6, #1984]	; 0x7c0
 800c4b0:	fb08 f303 	mul.w	r3, r8, r3
 800c4b4:	00db      	lsls	r3, r3, #3
 800c4b6:	f8d6 27c4 	ldr.w	r2, [r6, #1988]	; 0x7c4
 800c4ba:	f8d6 17c8 	ldr.w	r1, [r6, #1992]	; 0x7c8
 800c4be:	fb01 f202 	mul.w	r2, r1, r2
 800c4c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4c6:	f8c6 37b8 	str.w	r3, [r6, #1976]	; 0x7b8
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 800c4ca:	f8d6 77b4 	ldr.w	r7, [r6, #1972]	; 0x7b4
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f000 f97e 	bl	800c7d0 <xmp3fixpt_CheckPadBit>
 800c4d4:	4407      	add	r7, r0
 800c4d6:	f8c6 77cc 	str.w	r7, [r6, #1996]	; 0x7cc
	 *  - calling function assembles "self-contained" MP3 frames by shifting any main_data 
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
 800c4da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d070      	beq.n	800c5c2 <MP3Decode+0x18e>
		mp3DecInfo->nSlots = *bytesLeft;
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	f8c6 37cc 	str.w	r3, [r6, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 800c4e6:	f8d6 27d8 	ldr.w	r2, [r6, #2008]	; 0x7d8
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	d162      	bne.n	800c5b4 <MP3Decode+0x180>
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	dd60      	ble.n	800c5b4 <MP3Decode+0x180>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_FRAMEHEADER;
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 800c4f2:	f8c6 37dc 	str.w	r3, [r6, #2012]	; 0x7dc
		mainPtr = *inbuf;
 800c4f6:	6827      	ldr	r7, [r4, #0]
		*inbuf += mp3DecInfo->nSlots;
 800c4f8:	443b      	add	r3, r7
 800c4fa:	6023      	str	r3, [r4, #0]
		*bytesLeft -= (mp3DecInfo->nSlots);
 800c4fc:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	1a9b      	subs	r3, r3, r2
 800c504:	602b      	str	r3, [r5, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_MAINDATA_UNDERFLOW;
		}
	}
	bitOffset = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	9303      	str	r3, [sp, #12]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 800c50a:	f8d6 27dc 	ldr.w	r2, [r6, #2012]	; 0x7dc
 800c50e:	ea4f 09c2 	mov.w	r9, r2, lsl #3

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800c512:	469a      	mov	sl, r3
 800c514:	f8d6 37c4 	ldr.w	r3, [r6, #1988]	; 0x7c4
 800c518:	4553      	cmp	r3, sl
 800c51a:	f340 80e9 	ble.w	800c6f0 <MP3Decode+0x2bc>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c51e:	f04f 0800 	mov.w	r8, #0
 800c522:	f8d6 37bc 	ldr.w	r3, [r6, #1980]	; 0x7bc
 800c526:	4543      	cmp	r3, r8
 800c528:	f340 80a9 	ble.w	800c67e <MP3Decode+0x24a>
			/* unpack scale factors and compute size of scale factor block */
			prevBitOffset = bitOffset;
 800c52c:	9c03      	ldr	r4, [sp, #12]
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 800c52e:	f8cd 8004 	str.w	r8, [sp, #4]
 800c532:	f8cd a000 	str.w	sl, [sp]
 800c536:	464b      	mov	r3, r9
 800c538:	aa03      	add	r2, sp, #12
 800c53a:	4639      	mov	r1, r7
 800c53c:	4630      	mov	r0, r6
 800c53e:	f004 fb93 	bl	8010c68 <xmp3fixpt_UnpackScaleFactors>

			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 800c542:	ebc4 04c0 	rsb	r4, r4, r0, lsl #3
 800c546:	9d03      	ldr	r5, [sp, #12]
 800c548:	442c      	add	r4, r5
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 800c54a:	eb08 034a 	add.w	r3, r8, sl, lsl #1
 800c54e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c552:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800c556:	1b13      	subs	r3, r2, r4
			mainPtr += offset;
 800c558:	4407      	add	r7, r0
			mainBits -= sfBlockBits;
 800c55a:	eba9 0404 	sub.w	r4, r9, r4

			if (offset < 0 || mainBits < huffBlockBits) {
 800c55e:	454a      	cmp	r2, r9
 800c560:	bfd4      	ite	le
 800c562:	2200      	movle	r2, #0
 800c564:	2201      	movgt	r2, #1
 800c566:	ea52 72d0 	orrs.w	r2, r2, r0, lsr #31
 800c56a:	d178      	bne.n	800c65e <MP3Decode+0x22a>
				return ERR_MP3_INVALID_SCALEFACT;
			}

			/* decode Huffman code words */
			prevBitOffset = bitOffset;
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800c56c:	f8cd 8004 	str.w	r8, [sp, #4]
 800c570:	f8cd a000 	str.w	sl, [sp]
 800c574:	aa03      	add	r2, sp, #12
 800c576:	4639      	mov	r1, r7
 800c578:	4630      	mov	r0, r6
 800c57a:	f001 fd43 	bl	800e004 <xmp3fixpt_DecodeHuffman>
			if (offset < 0) {
 800c57e:	f1b0 0900 	subs.w	r9, r0, #0
 800c582:	db75      	blt.n	800c670 <MP3Decode+0x23c>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_INVALID_HUFFCODES;
			}

			mainPtr += offset;
 800c584:	444f      	add	r7, r9
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800c586:	ebc5 09c9 	rsb	r9, r5, r9, lsl #3
 800c58a:	9d03      	ldr	r5, [sp, #12]
 800c58c:	44a9      	add	r9, r5
 800c58e:	eba4 0909 	sub.w	r9, r4, r9
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c592:	f108 0801 	add.w	r8, r8, #1
 800c596:	e7c4      	b.n	800c522 <MP3Decode+0xee>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c598:	4659      	mov	r1, fp
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff febe 	bl	800c31c <MP3ClearBadFrame>
		return ERR_MP3_INVALID_SIDEINFO;
 800c5a0:	f06f 0006 	mvn.w	r0, #6
 800c5a4:	e061      	b.n	800c66a <MP3Decode+0x236>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c5a6:	4659      	mov	r1, fp
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7ff feb7 	bl	800c31c <MP3ClearBadFrame>
				return ERR_MP3_FREE_BITRATE_SYNC;
 800c5ae:	f06f 0002 	mvn.w	r0, #2
 800c5b2:	e05a      	b.n	800c66a <MP3Decode+0x236>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c5b4:	4659      	mov	r1, fp
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f7ff feb0 	bl	800c31c <MP3ClearBadFrame>
			return ERR_MP3_INVALID_FRAMEHEADER;
 800c5bc:	f06f 0005 	mvn.w	r0, #5
 800c5c0:	e053      	b.n	800c66a <MP3Decode+0x236>
		if (mp3DecInfo->nSlots > *bytesLeft) {
 800c5c2:	f8d6 17cc 	ldr.w	r1, [r6, #1996]	; 0x7cc
 800c5c6:	682b      	ldr	r3, [r5, #0]
 800c5c8:	4299      	cmp	r1, r3
 800c5ca:	dc24      	bgt.n	800c616 <MP3Decode+0x1e2>
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 800c5cc:	f8d6 37dc 	ldr.w	r3, [r6, #2012]	; 0x7dc
 800c5d0:	f8d6 27d8 	ldr.w	r2, [r6, #2008]	; 0x7d8
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	db25      	blt.n	800c624 <MP3Decode+0x1f0>
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 800c5d8:	f106 071c 	add.w	r7, r6, #28
 800c5dc:	1a99      	subs	r1, r3, r2
 800c5de:	4439      	add	r1, r7
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f00d fbf1 	bl	8019dc8 <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 800c5e6:	f8d6 07d8 	ldr.w	r0, [r6, #2008]	; 0x7d8
 800c5ea:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800c5ee:	6821      	ldr	r1, [r4, #0]
 800c5f0:	4438      	add	r0, r7
 800c5f2:	f00d fbdb 	bl	8019dac <memcpy>
			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 800c5f6:	f8d6 27d8 	ldr.w	r2, [r6, #2008]	; 0x7d8
 800c5fa:	f8d6 17cc 	ldr.w	r1, [r6, #1996]	; 0x7cc
 800c5fe:	440a      	add	r2, r1
 800c600:	f8c6 27dc 	str.w	r2, [r6, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 800c604:	6823      	ldr	r3, [r4, #0]
 800c606:	440b      	add	r3, r1
 800c608:	6023      	str	r3, [r4, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 800c60a:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800c60e:	682b      	ldr	r3, [r5, #0]
 800c610:	1a9b      	subs	r3, r3, r2
 800c612:	602b      	str	r3, [r5, #0]
			mainPtr = mp3DecInfo->mainBuf;
 800c614:	e777      	b.n	800c506 <MP3Decode+0xd2>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c616:	4659      	mov	r1, fp
 800c618:	4630      	mov	r0, r6
 800c61a:	f7ff fe7f 	bl	800c31c <MP3ClearBadFrame>
			return ERR_MP3_INDATA_UNDERFLOW;	
 800c61e:	f04f 30ff 	mov.w	r0, #4294967295
 800c622:	e022      	b.n	800c66a <MP3Decode+0x236>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 800c624:	f106 001c 	add.w	r0, r6, #28
 800c628:	460a      	mov	r2, r1
 800c62a:	6821      	ldr	r1, [r4, #0]
 800c62c:	4418      	add	r0, r3
 800c62e:	f00d fbbd 	bl	8019dac <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 800c632:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800c636:	f8d6 37dc 	ldr.w	r3, [r6, #2012]	; 0x7dc
 800c63a:	4413      	add	r3, r2
 800c63c:	f8c6 37dc 	str.w	r3, [r6, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	4413      	add	r3, r2
 800c644:	6023      	str	r3, [r4, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 800c646:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800c64a:	682b      	ldr	r3, [r5, #0]
 800c64c:	1a9b      	subs	r3, r3, r2
 800c64e:	602b      	str	r3, [r5, #0]
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c650:	4659      	mov	r1, fp
 800c652:	4630      	mov	r0, r6
 800c654:	f7ff fe62 	bl	800c31c <MP3ClearBadFrame>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 800c658:	f06f 0001 	mvn.w	r0, #1
 800c65c:	e005      	b.n	800c66a <MP3Decode+0x236>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c65e:	4659      	mov	r1, fp
 800c660:	4630      	mov	r0, r6
 800c662:	f7ff fe5b 	bl	800c31c <MP3ClearBadFrame>
				return ERR_MP3_INVALID_SCALEFACT;
 800c666:	f06f 0007 	mvn.w	r0, #7
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_SUBBAND;			
		}
	}
	return ERR_MP3_NONE;
}
 800c66a:	b005      	add	sp, #20
 800c66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c670:	4659      	mov	r1, fp
 800c672:	4630      	mov	r0, r6
 800c674:	f7ff fe52 	bl	800c31c <MP3ClearBadFrame>
				return ERR_MP3_INVALID_HUFFCODES;
 800c678:	f06f 0008 	mvn.w	r0, #8
 800c67c:	e7f5      	b.n	800c66a <MP3Decode+0x236>
		if (Dequantize(mp3DecInfo, gr) < 0) {
 800c67e:	4651      	mov	r1, sl
 800c680:	4630      	mov	r0, r6
 800c682:	f000 fefd 	bl	800d480 <xmp3fixpt_Dequantize>
 800c686:	2800      	cmp	r0, #0
 800c688:	db0d      	blt.n	800c6a6 <MP3Decode+0x272>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c68a:	2400      	movs	r4, #0
 800c68c:	f8d6 17bc 	ldr.w	r1, [r6, #1980]	; 0x7bc
 800c690:	42a1      	cmp	r1, r4
 800c692:	dd16      	ble.n	800c6c2 <MP3Decode+0x28e>
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 800c694:	4622      	mov	r2, r4
 800c696:	4651      	mov	r1, sl
 800c698:	4630      	mov	r0, r6
 800c69a:	f002 fcd7 	bl	800f04c <xmp3fixpt_IMDCT>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	db08      	blt.n	800c6b4 <MP3Decode+0x280>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c6a2:	3401      	adds	r4, #1
 800c6a4:	e7f2      	b.n	800c68c <MP3Decode+0x258>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c6a6:	4659      	mov	r1, fp
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f7ff fe37 	bl	800c31c <MP3ClearBadFrame>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 800c6ae:	f06f 0009 	mvn.w	r0, #9
 800c6b2:	e7da      	b.n	800c66a <MP3Decode+0x236>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c6b4:	4659      	mov	r1, fp
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f7ff fe30 	bl	800c31c <MP3ClearBadFrame>
				return ERR_MP3_INVALID_IMDCT;			
 800c6bc:	f06f 000a 	mvn.w	r0, #10
 800c6c0:	e7d3      	b.n	800c66a <MP3Decode+0x236>
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 800c6c2:	f8d6 37c8 	ldr.w	r3, [r6, #1992]	; 0x7c8
 800c6c6:	fb0a f303 	mul.w	r3, sl, r3
 800c6ca:	fb03 f101 	mul.w	r1, r3, r1
 800c6ce:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	f004 fe0a 	bl	80112ec <xmp3fixpt_Subband>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	db02      	blt.n	800c6e2 <MP3Decode+0x2ae>
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800c6dc:	f10a 0a01 	add.w	sl, sl, #1
 800c6e0:	e718      	b.n	800c514 <MP3Decode+0xe0>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800c6e2:	4659      	mov	r1, fp
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f7ff fe19 	bl	800c31c <MP3ClearBadFrame>
			return ERR_MP3_INVALID_SUBBAND;			
 800c6ea:	f06f 000b 	mvn.w	r0, #11
 800c6ee:	e7bc      	b.n	800c66a <MP3Decode+0x236>
	return ERR_MP3_NONE;
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	e7ba      	b.n	800c66a <MP3Decode+0x236>
		return ERR_MP3_NULL_POINTER;
 800c6f4:	f06f 0004 	mvn.w	r0, #4
}
 800c6f8:	4770      	bx	lr
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 800c6fa:	f06f 0005 	mvn.w	r0, #5
 800c6fe:	e7b4      	b.n	800c66a <MP3Decode+0x236>

0800c700 <xmp3fixpt_SetBitstreamPointer>:
 * Return:      none
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
	/* init bitstream */
	bsi->bytePtr = buf;
 800c700:	6002      	str	r2, [r0, #0]
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800c702:	2300      	movs	r3, #0
 800c704:	6043      	str	r3, [r0, #4]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800c706:	6083      	str	r3, [r0, #8]
	bsi->nBytes = nBytes;
 800c708:	60c1      	str	r1, [r0, #12]
}
 800c70a:	4770      	bx	lr

0800c70c <xmp3fixpt_GetBits>:
 *              if nBits = 0, returns 0 (useful for scalefactor unpacking)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
 800c70c:	4603      	mov	r3, r0
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 800c70e:	f001 011f 	and.w	r1, r1, #31
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800c712:	6842      	ldr	r2, [r0, #4]
 800c714:	f1c1 001f 	rsb	r0, r1, #31
 800c718:	fa22 f000 	lsr.w	r0, r2, r0
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c71c:	0840      	lsrs	r0, r0, #1
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c71e:	408a      	lsls	r2, r1
 800c720:	605a      	str	r2, [r3, #4]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c722:	689a      	ldr	r2, [r3, #8]
 800c724:	1a51      	subs	r1, r2, r1
 800c726:	6099      	str	r1, [r3, #8]

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 800c728:	2900      	cmp	r1, #0
 800c72a:	db00      	blt.n	800c72e <xmp3fixpt_GetBits+0x22>
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
		bsi->iCache <<= lowBits;			/* left-justify cache */
	}

	return data;
}
 800c72c:	4770      	bx	lr
{
 800c72e:	b5f0      	push	{r4, r5, r6, r7, lr}
		lowBits = -bsi->cachedBits;
 800c730:	f1c1 0c00 	rsb	ip, r1, #0
	int nBytes = bsi->nBytes;
 800c734:	68dc      	ldr	r4, [r3, #12]
	if (nBytes >= 4) {
 800c736:	2c03      	cmp	r4, #3
 800c738:	dd27      	ble.n	800c78a <xmp3fixpt_GetBits+0x7e>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c73a:	681d      	ldr	r5, [r3, #0]
 800c73c:	1c6f      	adds	r7, r5, #1
 800c73e:	601f      	str	r7, [r3, #0]
 800c740:	782a      	ldrb	r2, [r5, #0]
 800c742:	0612      	lsls	r2, r2, #24
 800c744:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c746:	1cae      	adds	r6, r5, #2
 800c748:	601e      	str	r6, [r3, #0]
 800c74a:	786d      	ldrb	r5, [r5, #1]
 800c74c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800c750:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c752:	1cbd      	adds	r5, r7, #2
 800c754:	601d      	str	r5, [r3, #0]
 800c756:	787f      	ldrb	r7, [r7, #1]
 800c758:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800c75c:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++);
 800c75e:	1cb5      	adds	r5, r6, #2
 800c760:	601d      	str	r5, [r3, #0]
 800c762:	7875      	ldrb	r5, [r6, #1]
 800c764:	432a      	orrs	r2, r5
 800c766:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 32;
 800c768:	2220      	movs	r2, #32
 800c76a:	609a      	str	r2, [r3, #8]
		bsi->nBytes -= 4;
 800c76c:	3c04      	subs	r4, #4
 800c76e:	60dc      	str	r4, [r3, #12]
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	f101 0420 	add.w	r4, r1, #32
 800c776:	fa22 f404 	lsr.w	r4, r2, r4
 800c77a:	4320      	orrs	r0, r4
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800c77c:	689c      	ldr	r4, [r3, #8]
 800c77e:	4421      	add	r1, r4
 800c780:	6099      	str	r1, [r3, #8]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800c782:	fa02 f20c 	lsl.w	r2, r2, ip
 800c786:	605a      	str	r2, [r3, #4]
}
 800c788:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bsi->iCache = 0;
 800c78a:	2200      	movs	r2, #0
 800c78c:	605a      	str	r2, [r3, #4]
	int nBytes = bsi->nBytes;
 800c78e:	4622      	mov	r2, r4
		while (nBytes--) {
 800c790:	f102 3eff 	add.w	lr, r2, #4294967295
 800c794:	b152      	cbz	r2, 800c7ac <xmp3fixpt_GetBits+0xa0>
			bsi->iCache |= (*bsi->bytePtr++);
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	1c55      	adds	r5, r2, #1
 800c79a:	601d      	str	r5, [r3, #0]
 800c79c:	7812      	ldrb	r2, [r2, #0]
 800c79e:	685d      	ldr	r5, [r3, #4]
 800c7a0:	432a      	orrs	r2, r5
 800c7a2:	605a      	str	r2, [r3, #4]
			bsi->iCache <<= 8;
 800c7a4:	0212      	lsls	r2, r2, #8
 800c7a6:	605a      	str	r2, [r3, #4]
		while (nBytes--) {
 800c7a8:	4672      	mov	r2, lr
 800c7aa:	e7f1      	b.n	800c790 <xmp3fixpt_GetBits+0x84>
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800c7ac:	f1c4 0203 	rsb	r2, r4, #3
 800c7b0:	00d5      	lsls	r5, r2, #3
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	40aa      	lsls	r2, r5
 800c7b6:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 8*bsi->nBytes;
 800c7b8:	00e4      	lsls	r4, r4, #3
 800c7ba:	609c      	str	r4, [r3, #8]
		bsi->nBytes = 0;
 800c7bc:	2200      	movs	r2, #0
 800c7be:	60da      	str	r2, [r3, #12]
 800c7c0:	e7d6      	b.n	800c770 <xmp3fixpt_GetBits+0x64>

0800c7c2 <xmp3fixpt_CalcBitsUsed>:
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 800c7c2:	6803      	ldr	r3, [r0, #0]
 800c7c4:	1a5b      	subs	r3, r3, r1
	bitsUsed -= bsi->cachedBits;
 800c7c6:	6881      	ldr	r1, [r0, #8]
 800c7c8:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
	bitsUsed -= startOffset;

	return bitsUsed;
}
 800c7cc:	1a88      	subs	r0, r1, r2
 800c7ce:	4770      	bx	lr

0800c7d0 <xmp3fixpt_CheckPadBit>:
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 800c7d0:	b130      	cbz	r0, 800c7e0 <xmp3fixpt_CheckPadBit+0x10>
 800c7d2:	6803      	ldr	r3, [r0, #0]
 800c7d4:	b13b      	cbz	r3, 800c7e6 <xmp3fixpt_CheckPadBit+0x16>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	return (fh->paddingBit ? 1 : 0);
 800c7d6:	6958      	ldr	r0, [r3, #20]
 800c7d8:	3800      	subs	r0, #0
 800c7da:	bf18      	it	ne
 800c7dc:	2001      	movne	r0, #1
 800c7de:	4770      	bx	lr
		return -1;
 800c7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e4:	4770      	bx	lr
 800c7e6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c7ea:	4770      	bx	lr

0800c7ec <xmp3fixpt_UnpackFrameHeader>:

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	f000 80d8 	beq.w	800c9a2 <xmp3fixpt_UnpackFrameHeader+0x1b6>
 800c7f2:	4684      	mov	ip, r0
 800c7f4:	6803      	ldr	r3, [r0, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 80d6 	beq.w	800c9a8 <xmp3fixpt_UnpackFrameHeader+0x1bc>
 800c7fc:	780a      	ldrb	r2, [r1, #0]
 800c7fe:	2aff      	cmp	r2, #255	; 0xff
 800c800:	f040 80d5 	bne.w	800c9ae <xmp3fixpt_UnpackFrameHeader+0x1c2>
 800c804:	7848      	ldrb	r0, [r1, #1]
 800c806:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
 800c80a:	2ae0      	cmp	r2, #224	; 0xe0
 800c80c:	f040 80d2 	bne.w	800c9b4 <xmp3fixpt_UnpackFrameHeader+0x1c8>
{
 800c810:	b570      	push	{r4, r5, r6, lr}
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
 800c812:	08c2      	lsrs	r2, r0, #3
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800c814:	f010 0f18 	tst.w	r0, #24
 800c818:	f000 80b9 	beq.w	800c98e <xmp3fixpt_UnpackFrameHeader+0x1a2>
 800c81c:	f082 0201 	eor.w	r2, r2, #1
 800c820:	f002 0201 	and.w	r2, r2, #1
 800c824:	701a      	strb	r2, [r3, #0]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 800c826:	7848      	ldrb	r0, [r1, #1]
 800c828:	f3c0 0041 	ubfx	r0, r0, #1, #2
 800c82c:	f1c0 0004 	rsb	r0, r0, #4
 800c830:	6058      	str	r0, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 800c832:	784c      	ldrb	r4, [r1, #1]
 800c834:	f084 0401 	eor.w	r4, r4, #1
 800c838:	f004 0401 	and.w	r4, r4, #1
 800c83c:	609c      	str	r4, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 800c83e:	788d      	ldrb	r5, [r1, #2]
 800c840:	092d      	lsrs	r5, r5, #4
 800c842:	60dd      	str	r5, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 800c844:	788c      	ldrb	r4, [r1, #2]
 800c846:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800c84a:	611c      	str	r4, [r3, #16]
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 800c84c:	788e      	ldrb	r6, [r1, #2]
 800c84e:	f3c6 0640 	ubfx	r6, r6, #1, #1
 800c852:	615e      	str	r6, [r3, #20]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 800c854:	788e      	ldrb	r6, [r1, #2]
 800c856:	f006 0601 	and.w	r6, r6, #1
 800c85a:	619e      	str	r6, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 800c85c:	f891 e003 	ldrb.w	lr, [r1, #3]
 800c860:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 800c864:	f883 e01c 	strb.w	lr, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 800c868:	78ce      	ldrb	r6, [r1, #3]
 800c86a:	f3c6 1601 	ubfx	r6, r6, #4, #2
 800c86e:	621e      	str	r6, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 800c870:	78ce      	ldrb	r6, [r1, #3]
 800c872:	f3c6 06c0 	ubfx	r6, r6, #3, #1
 800c876:	625e      	str	r6, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 800c878:	78ce      	ldrb	r6, [r1, #3]
 800c87a:	f3c6 0680 	ubfx	r6, r6, #2, #1
 800c87e:	629e      	str	r6, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 800c880:	78ce      	ldrb	r6, [r1, #3]
 800c882:	f006 0603 	and.w	r6, r6, #3
 800c886:	62de      	str	r6, [r3, #44]	; 0x2c

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 800c888:	2c03      	cmp	r4, #3
 800c88a:	f000 8096 	beq.w	800c9ba <xmp3fixpt_UnpackFrameHeader+0x1ce>
 800c88e:	2804      	cmp	r0, #4
 800c890:	f000 8096 	beq.w	800c9c0 <xmp3fixpt_UnpackFrameHeader+0x1d4>
 800c894:	2d0f      	cmp	r5, #15
 800c896:	f000 8096 	beq.w	800c9c6 <xmp3fixpt_UnpackFrameHeader+0x1da>
		return -1;

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 800c89a:	20de      	movs	r0, #222	; 0xde
 800c89c:	fb00 f202 	mul.w	r2, r0, r2
 800c8a0:	204a      	movs	r0, #74	; 0x4a
 800c8a2:	fb00 2204 	mla	r2, r0, r4, r2
 800c8a6:	4849      	ldr	r0, [pc, #292]	; (800c9cc <xmp3fixpt_UnpackFrameHeader+0x1e0>)
 800c8a8:	4402      	add	r2, r0
 800c8aa:	635a      	str	r2, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 800c8ac:	f1be 0f01 	cmp.w	lr, #1
 800c8b0:	d001      	beq.n	800c8b6 <xmp3fixpt_UnpackFrameHeader+0xca>
		fh->modeExt = 0;
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	621a      	str	r2, [r3, #32]

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800c8b6:	f1be 0f03 	cmp.w	lr, #3
 800c8ba:	d06a      	beq.n	800c992 <xmp3fixpt_UnpackFrameHeader+0x1a6>
 800c8bc:	2202      	movs	r2, #2
 800c8be:	f8cc 27bc 	str.w	r2, [ip, #1980]	; 0x7bc
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800c8c2:	781a      	ldrb	r2, [r3, #0]
 800c8c4:	6918      	ldr	r0, [r3, #16]
 800c8c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c8ca:	4402      	add	r2, r0
 800c8cc:	4840      	ldr	r0, [pc, #256]	; (800c9d0 <xmp3fixpt_UnpackFrameHeader+0x1e4>)
 800c8ce:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c8d2:	f8cc 27c0 	str.w	r2, [ip, #1984]	; 0x7c0
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800c8d6:	781a      	ldrb	r2, [r3, #0]
 800c8d8:	2a00      	cmp	r2, #0
 800c8da:	d15c      	bne.n	800c996 <xmp3fixpt_UnpackFrameHeader+0x1aa>
 800c8dc:	2402      	movs	r4, #2
 800c8de:	f8cc 47c4 	str.w	r4, [ip, #1988]	; 0x7c4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800c8e2:	781a      	ldrb	r2, [r3, #0]
 800c8e4:	6858      	ldr	r0, [r3, #4]
 800c8e6:	3801      	subs	r0, #1
 800c8e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c8ec:	4402      	add	r2, r0
 800c8ee:	4839      	ldr	r0, [pc, #228]	; (800c9d4 <xmp3fixpt_UnpackFrameHeader+0x1e8>)
 800c8f0:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
 800c8f4:	fb92 f2f4 	sdiv	r2, r2, r4
 800c8f8:	f8cc 27c8 	str.w	r2, [ip, #1992]	; 0x7c8
	mp3DecInfo->layer = fh->layer;
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	f8cc 27d0 	str.w	r2, [ip, #2000]	; 0x7d0
	mp3DecInfo->version = fh->ver;
 800c902:	781a      	ldrb	r2, [r3, #0]
 800c904:	f88c 27d4 	strb.w	r2, [ip, #2004]	; 0x7d4
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 800c908:	68dc      	ldr	r4, [r3, #12]
 800c90a:	2c00      	cmp	r4, #0
 800c90c:	d036      	beq.n	800c97c <xmp3fixpt_UnpackFrameHeader+0x190>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800c90e:	7818      	ldrb	r0, [r3, #0]
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	3a01      	subs	r2, #1
 800c914:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800c918:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c91c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800c920:	4402      	add	r2, r0
 800c922:	4422      	add	r2, r4
 800c924:	482c      	ldr	r0, [pc, #176]	; (800c9d8 <xmp3fixpt_UnpackFrameHeader+0x1ec>)
 800c926:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
 800c92a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c92e:	fb00 f202 	mul.w	r2, r0, r2
 800c932:	f8cc 27b8 	str.w	r2, [ip, #1976]	; 0x7b8
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c936:	781e      	ldrb	r6, [r3, #0]
 800c938:	691a      	ldr	r2, [r3, #16]
 800c93a:	68dd      	ldr	r5, [r3, #12]
 800c93c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800c940:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 800c944:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800c948:	4422      	add	r2, r4
 800c94a:	442a      	add	r2, r5
 800c94c:	4823      	ldr	r0, [pc, #140]	; (800c9dc <xmp3fixpt_UnpackFrameHeader+0x1f0>)
 800c94e:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800c952:	7f18      	ldrb	r0, [r3, #28]
 800c954:	3803      	subs	r0, #3
 800c956:	bf18      	it	ne
 800c958:	2001      	movne	r0, #1
 800c95a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c95e:	4c20      	ldr	r4, [pc, #128]	; (800c9e0 <xmp3fixpt_UnpackFrameHeader+0x1f4>)
 800c960:	f934 0010 	ldrsh.w	r0, [r4, r0, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c964:	1a12      	subs	r2, r2, r0
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800c966:	3a04      	subs	r2, #4
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 800c968:	6898      	ldr	r0, [r3, #8]
 800c96a:	b100      	cbz	r0, 800c96e <xmp3fixpt_UnpackFrameHeader+0x182>
 800c96c:	2002      	movs	r0, #2
 800c96e:	1a12      	subs	r2, r2, r0
 800c970:	6958      	ldr	r0, [r3, #20]
 800c972:	2800      	cmp	r0, #0
 800c974:	bf18      	it	ne
 800c976:	3201      	addne	r2, #1
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c978:	f8cc 27cc 	str.w	r2, [ip, #1996]	; 0x7cc
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 800c97c:	689a      	ldr	r2, [r3, #8]
 800c97e:	b162      	cbz	r2, 800c99a <xmp3fixpt_UnpackFrameHeader+0x1ae>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 800c980:	7908      	ldrb	r0, [r1, #4]
 800c982:	794a      	ldrb	r2, [r1, #5]
 800c984:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800c988:	631a      	str	r2, [r3, #48]	; 0x30
		return 6;
 800c98a:	2006      	movs	r0, #6
	} else {
		fh->CRCWord = 0;
		return 4;
	}
}
 800c98c:	bd70      	pop	{r4, r5, r6, pc}
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800c98e:	2202      	movs	r2, #2
 800c990:	e748      	b.n	800c824 <xmp3fixpt_UnpackFrameHeader+0x38>
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800c992:	2201      	movs	r2, #1
 800c994:	e793      	b.n	800c8be <xmp3fixpt_UnpackFrameHeader+0xd2>
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800c996:	2401      	movs	r4, #1
 800c998:	e7a1      	b.n	800c8de <xmp3fixpt_UnpackFrameHeader+0xf2>
		fh->CRCWord = 0;
 800c99a:	2200      	movs	r2, #0
 800c99c:	631a      	str	r2, [r3, #48]	; 0x30
		return 4;
 800c99e:	2004      	movs	r0, #4
 800c9a0:	e7f4      	b.n	800c98c <xmp3fixpt_UnpackFrameHeader+0x1a0>
		return -1;
 800c9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a6:	4770      	bx	lr
 800c9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ac:	4770      	bx	lr
 800c9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b2:	4770      	bx	lr
 800c9b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c9b8:	4770      	bx	lr
		return -1;
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c9be:	e7e5      	b.n	800c98c <xmp3fixpt_UnpackFrameHeader+0x1a0>
 800c9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c4:	e7e2      	b.n	800c98c <xmp3fixpt_UnpackFrameHeader+0x1a0>
 800c9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ca:	e7df      	b.n	800c98c <xmp3fixpt_UnpackFrameHeader+0x1a0>
 800c9cc:	0801b0c4 	.word	0x0801b0c4
 800c9d0:	0801b08c 	.word	0x0801b08c
 800c9d4:	0801b0b0 	.word	0x0801b0b0
 800c9d8:	0801af7c 	.word	0x0801af7c
 800c9dc:	0801b36c 	.word	0x0801b36c
 800c9e0:	0801b360 	.word	0x0801b360

0800c9e4 <xmp3fixpt_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 800c9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e8:	b084      	sub	sp, #16
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	f000 814e 	beq.w	800cc8c <xmp3fixpt_UnpackSideInfo+0x2a8>
 800c9f0:	460a      	mov	r2, r1
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	f8d0 9000 	ldr.w	r9, [r0]
 800c9f8:	f1b9 0f00 	cmp.w	r9, #0
 800c9fc:	f000 8149 	beq.w	800cc92 <xmp3fixpt_UnpackSideInfo+0x2ae>
 800ca00:	6847      	ldr	r7, [r0, #4]
 800ca02:	2f00      	cmp	r7, #0
 800ca04:	f000 8148 	beq.w	800cc98 <xmp3fixpt_UnpackSideInfo+0x2b4>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));

	bsi = &bitStreamInfo;
	if (fh->ver == MPEG1) {
 800ca08:	f899 3000 	ldrb.w	r3, [r9]
 800ca0c:	bb8b      	cbnz	r3, 800ca72 <xmp3fixpt_UnpackSideInfo+0x8e>
		/* MPEG 1 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800ca0e:	f899 301c 	ldrb.w	r3, [r9, #28]
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	d015      	beq.n	800ca42 <xmp3fixpt_UnpackSideInfo+0x5e>
 800ca16:	f04f 0a20 	mov.w	sl, #32
		SetBitstreamPointer(bsi, nBytes, buf);
 800ca1a:	4651      	mov	r1, sl
 800ca1c:	4668      	mov	r0, sp
 800ca1e:	f7ff fe6f 	bl	800c700 <xmp3fixpt_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 9);
 800ca22:	2109      	movs	r1, #9
 800ca24:	4668      	mov	r0, sp
 800ca26:	f7ff fe71 	bl	800c70c <xmp3fixpt_GetBits>
 800ca2a:	6038      	str	r0, [r7, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800ca2c:	f899 301c 	ldrb.w	r3, [r9, #28]
 800ca30:	2b03      	cmp	r3, #3
 800ca32:	d009      	beq.n	800ca48 <xmp3fixpt_UnpackSideInfo+0x64>
 800ca34:	2103      	movs	r1, #3
 800ca36:	4668      	mov	r0, sp
 800ca38:	f7ff fe68 	bl	800c70c <xmp3fixpt_GetBits>
 800ca3c:	6078      	str	r0, [r7, #4]

		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800ca3e:	2500      	movs	r5, #0
 800ca40:	e011      	b.n	800ca66 <xmp3fixpt_UnpackSideInfo+0x82>
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800ca42:	f04f 0a11 	mov.w	sl, #17
 800ca46:	e7e8      	b.n	800ca1a <xmp3fixpt_UnpackSideInfo+0x36>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800ca48:	2105      	movs	r1, #5
 800ca4a:	e7f4      	b.n	800ca36 <xmp3fixpt_UnpackSideInfo+0x52>
			for (bd = 0; bd < MAX_SCFBD; bd++)
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	4668      	mov	r0, sp
 800ca50:	f7ff fe5c 	bl	800c70c <xmp3fixpt_GetBits>
 800ca54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca58:	3302      	adds	r3, #2
 800ca5a:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800ca5e:	3401      	adds	r4, #1
 800ca60:	2c03      	cmp	r4, #3
 800ca62:	ddf3      	ble.n	800ca4c <xmp3fixpt_UnpackSideInfo+0x68>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800ca64:	3501      	adds	r5, #1
 800ca66:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800ca6a:	42ab      	cmp	r3, r5
 800ca6c:	dd19      	ble.n	800caa2 <xmp3fixpt_UnpackSideInfo+0xbe>
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800ca6e:	2400      	movs	r4, #0
 800ca70:	e7f6      	b.n	800ca60 <xmp3fixpt_UnpackSideInfo+0x7c>
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800ca72:	f899 301c 	ldrb.w	r3, [r9, #28]
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d015      	beq.n	800caa6 <xmp3fixpt_UnpackSideInfo+0xc2>
 800ca7a:	f04f 0a11 	mov.w	sl, #17
		SetBitstreamPointer(bsi, nBytes, buf);
 800ca7e:	4651      	mov	r1, sl
 800ca80:	4668      	mov	r0, sp
 800ca82:	f7ff fe3d 	bl	800c700 <xmp3fixpt_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 8);
 800ca86:	2108      	movs	r1, #8
 800ca88:	4668      	mov	r0, sp
 800ca8a:	f7ff fe3f 	bl	800c70c <xmp3fixpt_GetBits>
 800ca8e:	6038      	str	r0, [r7, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800ca90:	f899 301c 	ldrb.w	r3, [r9, #28]
 800ca94:	2b03      	cmp	r3, #3
 800ca96:	d009      	beq.n	800caac <xmp3fixpt_UnpackSideInfo+0xc8>
 800ca98:	2102      	movs	r1, #2
 800ca9a:	4668      	mov	r0, sp
 800ca9c:	f7ff fe36 	bl	800c70c <xmp3fixpt_GetBits>
 800caa0:	6078      	str	r0, [r7, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800caa2:	2500      	movs	r5, #0
 800caa4:	e0e5      	b.n	800cc72 <xmp3fixpt_UnpackSideInfo+0x28e>
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800caa6:	f04f 0a09 	mov.w	sl, #9
 800caaa:	e7e8      	b.n	800ca7e <xmp3fixpt_UnpackSideInfo+0x9a>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800caac:	2101      	movs	r1, #1
 800caae:	e7f4      	b.n	800ca9a <xmp3fixpt_UnpackSideInfo+0xb6>
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */

			sis->part23Length =    GetBits(bsi, 12);
			sis->nBigvals =        GetBits(bsi, 9);
			sis->globalGain =      GetBits(bsi, 8);
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800cab0:	2109      	movs	r1, #9
 800cab2:	e053      	b.n	800cb5c <xmp3fixpt_UnpackSideInfo+0x178>
				if (sis->blockType == 0) {
					/* this should not be allowed, according to spec */
					sis->nBigvals = 0;
					sis->part23Length = 0;
					sis->sfCompress = 0;
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	f000 809a 	beq.w	800cbee <xmp3fixpt_UnpackSideInfo+0x20a>
					/* short block, not mixed */
					sis->region0Count = 8;
				} else {
					/* start, stop, or short-mixed */
					sis->region0Count = 7;
 800caba:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cabe:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800cac2:	0112      	lsls	r2, r2, #4
 800cac4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cac8:	443b      	add	r3, r7
 800caca:	2207      	movs	r2, #7
 800cacc:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				sis->region1Count = 20 - sis->region0Count;
 800cace:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cad2:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800cad6:	0112      	lsls	r2, r2, #4
 800cad8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cadc:	443b      	add	r3, r7
 800cade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cae0:	f1c2 0214 	rsb	r2, r2, #20
 800cae4:	661a      	str	r2, [r3, #96]	; 0x60
				sis->tableSelect[1] =  GetBits(bsi, 5);
				sis->tableSelect[2] =  GetBits(bsi, 5);
				sis->region0Count =    GetBits(bsi, 4);
				sis->region1Count =    GetBits(bsi, 3);
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800cae6:	f899 3000 	ldrb.w	r3, [r9]
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 80bb 	beq.w	800cc66 <xmp3fixpt_UnpackSideInfo+0x282>
 800caf0:	2000      	movs	r0, #0
 800caf2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800caf6:	eb05 06c5 	add.w	r6, r5, r5, lsl #3
 800cafa:	0136      	lsls	r6, r6, #4
 800cafc:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 800cb00:	443e      	add	r6, r7
 800cb02:	6670      	str	r0, [r6, #100]	; 0x64
			sis->sfactScale =        GetBits(bsi, 1);
 800cb04:	2101      	movs	r1, #1
 800cb06:	4668      	mov	r0, sp
 800cb08:	f7ff fe00 	bl	800c70c <xmp3fixpt_GetBits>
 800cb0c:	66b0      	str	r0, [r6, #104]	; 0x68
			sis->count1TableSelect = GetBits(bsi, 1);
 800cb0e:	2101      	movs	r1, #1
 800cb10:	4668      	mov	r0, sp
 800cb12:	f7ff fdfb 	bl	800c70c <xmp3fixpt_GetBits>
 800cb16:	66f0      	str	r0, [r6, #108]	; 0x6c
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800cb18:	3401      	adds	r4, #1
 800cb1a:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800cb1e:	42a3      	cmp	r3, r4
 800cb20:	f340 80a6 	ble.w	800cc70 <xmp3fixpt_UnpackSideInfo+0x28c>
			sis->part23Length =    GetBits(bsi, 12);
 800cb24:	210c      	movs	r1, #12
 800cb26:	4668      	mov	r0, sp
 800cb28:	f7ff fdf0 	bl	800c70c <xmp3fixpt_GetBits>
 800cb2c:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 800cb30:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800cb34:	011b      	lsls	r3, r3, #4
 800cb36:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cb3a:	443e      	add	r6, r7
 800cb3c:	62b0      	str	r0, [r6, #40]	; 0x28
			sis->nBigvals =        GetBits(bsi, 9);
 800cb3e:	2109      	movs	r1, #9
 800cb40:	4668      	mov	r0, sp
 800cb42:	f7ff fde3 	bl	800c70c <xmp3fixpt_GetBits>
 800cb46:	62f0      	str	r0, [r6, #44]	; 0x2c
			sis->globalGain =      GetBits(bsi, 8);
 800cb48:	2108      	movs	r1, #8
 800cb4a:	4668      	mov	r0, sp
 800cb4c:	f7ff fdde 	bl	800c70c <xmp3fixpt_GetBits>
 800cb50:	6330      	str	r0, [r6, #48]	; 0x30
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800cb52:	f899 3000 	ldrb.w	r3, [r9]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1aa      	bne.n	800cab0 <xmp3fixpt_UnpackSideInfo+0xcc>
 800cb5a:	2104      	movs	r1, #4
 800cb5c:	4668      	mov	r0, sp
 800cb5e:	f7ff fdd5 	bl	800c70c <xmp3fixpt_GetBits>
 800cb62:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cb66:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800cb6a:	0112      	lsls	r2, r2, #4
 800cb6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb70:	18fe      	adds	r6, r7, r3
 800cb72:	6370      	str	r0, [r6, #52]	; 0x34
			sis->winSwitchFlag =   GetBits(bsi, 1);
 800cb74:	2101      	movs	r1, #1
 800cb76:	4668      	mov	r0, sp
 800cb78:	f7ff fdc8 	bl	800c70c <xmp3fixpt_GetBits>
 800cb7c:	63b0      	str	r0, [r6, #56]	; 0x38
			if(sis->winSwitchFlag) {
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d04c      	beq.n	800cc1c <xmp3fixpt_UnpackSideInfo+0x238>
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 800cb82:	2102      	movs	r1, #2
 800cb84:	4668      	mov	r0, sp
 800cb86:	f7ff fdc1 	bl	800c70c <xmp3fixpt_GetBits>
 800cb8a:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 800cb8e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800cb92:	011b      	lsls	r3, r3, #4
 800cb94:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cb98:	443e      	add	r6, r7
 800cb9a:	63f0      	str	r0, [r6, #60]	; 0x3c
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800cb9c:	2101      	movs	r1, #1
 800cb9e:	4668      	mov	r0, sp
 800cba0:	f7ff fdb4 	bl	800c70c <xmp3fixpt_GetBits>
 800cba4:	6430      	str	r0, [r6, #64]	; 0x40
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800cba6:	2105      	movs	r1, #5
 800cba8:	4668      	mov	r0, sp
 800cbaa:	f7ff fdaf 	bl	800c70c <xmp3fixpt_GetBits>
 800cbae:	6470      	str	r0, [r6, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800cbb0:	2105      	movs	r1, #5
 800cbb2:	4668      	mov	r0, sp
 800cbb4:	f7ff fdaa 	bl	800c70c <xmp3fixpt_GetBits>
 800cbb8:	64b0      	str	r0, [r6, #72]	; 0x48
				sis->tableSelect[2] =  0;					/* unused */
 800cbba:	2300      	movs	r3, #0
 800cbbc:	64f3      	str	r3, [r6, #76]	; 0x4c
				sis->subBlockGain[0] = GetBits(bsi, 3);
 800cbbe:	2103      	movs	r1, #3
 800cbc0:	4668      	mov	r0, sp
 800cbc2:	f7ff fda3 	bl	800c70c <xmp3fixpt_GetBits>
 800cbc6:	6530      	str	r0, [r6, #80]	; 0x50
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800cbc8:	2103      	movs	r1, #3
 800cbca:	4668      	mov	r0, sp
 800cbcc:	f7ff fd9e 	bl	800c70c <xmp3fixpt_GetBits>
 800cbd0:	6570      	str	r0, [r6, #84]	; 0x54
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800cbd2:	2103      	movs	r1, #3
 800cbd4:	4668      	mov	r0, sp
 800cbd6:	f7ff fd99 	bl	800c70c <xmp3fixpt_GetBits>
 800cbda:	65b0      	str	r0, [r6, #88]	; 0x58
				if (sis->blockType == 0) {
 800cbdc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f47f af68 	bne.w	800cab4 <xmp3fixpt_UnpackSideInfo+0xd0>
					sis->nBigvals = 0;
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	62f2      	str	r2, [r6, #44]	; 0x2c
					sis->part23Length = 0;
 800cbe8:	62b2      	str	r2, [r6, #40]	; 0x28
					sis->sfCompress = 0;
 800cbea:	6372      	str	r2, [r6, #52]	; 0x34
 800cbec:	e76f      	b.n	800cace <xmp3fixpt_UnpackSideInfo+0xea>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800cbee:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cbf2:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800cbf6:	0112      	lsls	r2, r2, #4
 800cbf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cbfc:	443b      	add	r3, r7
 800cbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f47f af5a 	bne.w	800caba <xmp3fixpt_UnpackSideInfo+0xd6>
					sis->region0Count = 8;
 800cc06:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cc0a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800cc0e:	0112      	lsls	r2, r2, #4
 800cc10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc14:	443b      	add	r3, r7
 800cc16:	2208      	movs	r2, #8
 800cc18:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc1a:	e758      	b.n	800cace <xmp3fixpt_UnpackSideInfo+0xea>
				sis->blockType = 0;
 800cc1c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cc20:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800cc24:	0112      	lsls	r2, r2, #4
 800cc26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc2a:	18fe      	adds	r6, r7, r3
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	63f3      	str	r3, [r6, #60]	; 0x3c
				sis->mixedBlock = 0;
 800cc30:	6433      	str	r3, [r6, #64]	; 0x40
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800cc32:	2105      	movs	r1, #5
 800cc34:	4668      	mov	r0, sp
 800cc36:	f7ff fd69 	bl	800c70c <xmp3fixpt_GetBits>
 800cc3a:	6470      	str	r0, [r6, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800cc3c:	2105      	movs	r1, #5
 800cc3e:	4668      	mov	r0, sp
 800cc40:	f7ff fd64 	bl	800c70c <xmp3fixpt_GetBits>
 800cc44:	64b0      	str	r0, [r6, #72]	; 0x48
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800cc46:	2105      	movs	r1, #5
 800cc48:	4668      	mov	r0, sp
 800cc4a:	f7ff fd5f 	bl	800c70c <xmp3fixpt_GetBits>
 800cc4e:	64f0      	str	r0, [r6, #76]	; 0x4c
				sis->region0Count =    GetBits(bsi, 4);
 800cc50:	2104      	movs	r1, #4
 800cc52:	4668      	mov	r0, sp
 800cc54:	f7ff fd5a 	bl	800c70c <xmp3fixpt_GetBits>
 800cc58:	65f0      	str	r0, [r6, #92]	; 0x5c
				sis->region1Count =    GetBits(bsi, 3);
 800cc5a:	2103      	movs	r1, #3
 800cc5c:	4668      	mov	r0, sp
 800cc5e:	f7ff fd55 	bl	800c70c <xmp3fixpt_GetBits>
 800cc62:	6630      	str	r0, [r6, #96]	; 0x60
 800cc64:	e73f      	b.n	800cae6 <xmp3fixpt_UnpackSideInfo+0x102>
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800cc66:	2101      	movs	r1, #1
 800cc68:	4668      	mov	r0, sp
 800cc6a:	f7ff fd4f 	bl	800c70c <xmp3fixpt_GetBits>
 800cc6e:	e740      	b.n	800caf2 <xmp3fixpt_UnpackSideInfo+0x10e>
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800cc70:	3501      	adds	r5, #1
 800cc72:	f8d8 37c4 	ldr.w	r3, [r8, #1988]	; 0x7c4
 800cc76:	42ab      	cmp	r3, r5
 800cc78:	dd01      	ble.n	800cc7e <xmp3fixpt_UnpackSideInfo+0x29a>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800cc7a:	2400      	movs	r4, #0
 800cc7c:	e74d      	b.n	800cb1a <xmp3fixpt_UnpackSideInfo+0x136>
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	f8c8 37d8 	str.w	r3, [r8, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
}
 800cc84:	4650      	mov	r0, sl
 800cc86:	b004      	add	sp, #16
 800cc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
 800cc8c:	f04f 3aff 	mov.w	sl, #4294967295
 800cc90:	e7f8      	b.n	800cc84 <xmp3fixpt_UnpackSideInfo+0x2a0>
 800cc92:	f04f 3aff 	mov.w	sl, #4294967295
 800cc96:	e7f5      	b.n	800cc84 <xmp3fixpt_UnpackSideInfo+0x2a0>
 800cc98:	f04f 3aff 	mov.w	sl, #4294967295
 800cc9c:	e7f2      	b.n	800cc84 <xmp3fixpt_UnpackSideInfo+0x2a0>

0800cc9e <ClearBuffer>:
static void ClearBuffer(void *buf, int nBytes)
{
	int i;
	unsigned char *cbuf = (unsigned char *)buf;

	for (i = 0; i < nBytes; i++)
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e002      	b.n	800cca8 <ClearBuffer+0xa>
		cbuf[i] = 0;
 800cca2:	2200      	movs	r2, #0
 800cca4:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < nBytes; i++)
 800cca6:	3301      	adds	r3, #1
 800cca8:	428b      	cmp	r3, r1
 800ccaa:	dbfa      	blt.n	800cca2 <ClearBuffer+0x4>

	return;
}
 800ccac:	4770      	bx	lr

0800ccae <xmp3fixpt_FreeBuffers>:
 *
 * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
 **************************************************************************************/
void FreeBuffers(MP3DecInfo *mp3DecInfo)
{
	if (!mp3DecInfo)
 800ccae:	b378      	cbz	r0, 800cd10 <xmp3fixpt_FreeBuffers+0x62>
{
 800ccb0:	b510      	push	{r4, lr}
 800ccb2:	4604      	mov	r4, r0
		return;

	SAFE_FREE(mp3DecInfo->FrameHeaderPS);
 800ccb4:	6800      	ldr	r0, [r0, #0]
 800ccb6:	b108      	cbz	r0, 800ccbc <xmp3fixpt_FreeBuffers+0xe>
 800ccb8:	f00d f870 	bl	8019d9c <free>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	6023      	str	r3, [r4, #0]
	SAFE_FREE(mp3DecInfo->SideInfoPS);
 800ccc0:	6860      	ldr	r0, [r4, #4]
 800ccc2:	b108      	cbz	r0, 800ccc8 <xmp3fixpt_FreeBuffers+0x1a>
 800ccc4:	f00d f86a 	bl	8019d9c <free>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	6063      	str	r3, [r4, #4]
	SAFE_FREE(mp3DecInfo->ScaleFactorInfoPS);
 800cccc:	68a0      	ldr	r0, [r4, #8]
 800ccce:	b108      	cbz	r0, 800ccd4 <xmp3fixpt_FreeBuffers+0x26>
 800ccd0:	f00d f864 	bl	8019d9c <free>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	60a3      	str	r3, [r4, #8]
	SAFE_FREE(mp3DecInfo->HuffmanInfoPS);
 800ccd8:	68e0      	ldr	r0, [r4, #12]
 800ccda:	b108      	cbz	r0, 800cce0 <xmp3fixpt_FreeBuffers+0x32>
 800ccdc:	f00d f85e 	bl	8019d9c <free>
 800cce0:	2300      	movs	r3, #0
 800cce2:	60e3      	str	r3, [r4, #12]
	SAFE_FREE(mp3DecInfo->DequantInfoPS);
 800cce4:	6920      	ldr	r0, [r4, #16]
 800cce6:	b108      	cbz	r0, 800ccec <xmp3fixpt_FreeBuffers+0x3e>
 800cce8:	f00d f858 	bl	8019d9c <free>
 800ccec:	2300      	movs	r3, #0
 800ccee:	6123      	str	r3, [r4, #16]
	SAFE_FREE(mp3DecInfo->IMDCTInfoPS);
 800ccf0:	6960      	ldr	r0, [r4, #20]
 800ccf2:	b108      	cbz	r0, 800ccf8 <xmp3fixpt_FreeBuffers+0x4a>
 800ccf4:	f00d f852 	bl	8019d9c <free>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	6163      	str	r3, [r4, #20]
	SAFE_FREE(mp3DecInfo->SubbandInfoPS);
 800ccfc:	69a0      	ldr	r0, [r4, #24]
 800ccfe:	b108      	cbz	r0, 800cd04 <xmp3fixpt_FreeBuffers+0x56>
 800cd00:	f00d f84c 	bl	8019d9c <free>
 800cd04:	2300      	movs	r3, #0
 800cd06:	61a3      	str	r3, [r4, #24]

	SAFE_FREE(mp3DecInfo);
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f00d f847 	bl	8019d9c <free>
}
 800cd0e:	bd10      	pop	{r4, pc}
 800cd10:	4770      	bx	lr

0800cd12 <xmp3fixpt_AllocateBuffers>:
{
 800cd12:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mp3DecInfo = (MP3DecInfo *)malloc(sizeof(MP3DecInfo));
 800cd16:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
 800cd1a:	f00d f837 	bl	8019d8c <malloc>
	if (!mp3DecInfo)
 800cd1e:	4604      	mov	r4, r0
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d063      	beq.n	800cdec <xmp3fixpt_AllocateBuffers+0xda>
	ClearBuffer(mp3DecInfo, sizeof(MP3DecInfo));
 800cd24:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800cd28:	f7ff ffb9 	bl	800cc9e <ClearBuffer>
	fh =  (FrameHeader *)     malloc(sizeof(FrameHeader));
 800cd2c:	2038      	movs	r0, #56	; 0x38
 800cd2e:	f00d f82d 	bl	8019d8c <malloc>
 800cd32:	4680      	mov	r8, r0
	si =  (SideInfo *)        malloc(sizeof(SideInfo));
 800cd34:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800cd38:	f00d f828 	bl	8019d8c <malloc>
 800cd3c:	4607      	mov	r7, r0
	sfi = (ScaleFactorInfo *) malloc(sizeof(ScaleFactorInfo));
 800cd3e:	f44f 708e 	mov.w	r0, #284	; 0x11c
 800cd42:	f00d f823 	bl	8019d8c <malloc>
 800cd46:	4606      	mov	r6, r0
	hi =  (HuffmanInfo *)     malloc(sizeof(HuffmanInfo));
 800cd48:	f241 2010 	movw	r0, #4624	; 0x1210
 800cd4c:	f00d f81e 	bl	8019d8c <malloc>
 800cd50:	4605      	mov	r5, r0
	di =  (DequantInfo *)     malloc(sizeof(DequantInfo));
 800cd52:	f44f 7052 	mov.w	r0, #840	; 0x348
 800cd56:	f00d f819 	bl	8019d8c <malloc>
 800cd5a:	4683      	mov	fp, r0
	mi =  (IMDCTInfo *)       malloc(sizeof(IMDCTInfo));
 800cd5c:	f44f 50d9 	mov.w	r0, #6944	; 0x1b20
 800cd60:	f00d f814 	bl	8019d8c <malloc>
 800cd64:	4682      	mov	sl, r0
	sbi = (SubbandInfo *)     malloc(sizeof(SubbandInfo));
 800cd66:	f242 2004 	movw	r0, #8708	; 0x2204
 800cd6a:	f00d f80f 	bl	8019d8c <malloc>
 800cd6e:	4681      	mov	r9, r0
	mp3DecInfo->FrameHeaderPS =     (void *)fh;
 800cd70:	f8c4 8000 	str.w	r8, [r4]
	mp3DecInfo->SideInfoPS =        (void *)si;
 800cd74:	6067      	str	r7, [r4, #4]
	mp3DecInfo->ScaleFactorInfoPS = (void *)sfi;
 800cd76:	60a6      	str	r6, [r4, #8]
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 800cd78:	60e5      	str	r5, [r4, #12]
	mp3DecInfo->DequantInfoPS =     (void *)di;
 800cd7a:	f8c4 b010 	str.w	fp, [r4, #16]
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 800cd7e:	f8c4 a014 	str.w	sl, [r4, #20]
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 800cd82:	61a0      	str	r0, [r4, #24]
	if (!fh || !si || !sfi || !hi || !di || !mi || !sbi) {
 800cd84:	2f00      	cmp	r7, #0
 800cd86:	bf18      	it	ne
 800cd88:	f1b8 0f00 	cmpne.w	r8, #0
 800cd8c:	d031      	beq.n	800cdf2 <xmp3fixpt_AllocateBuffers+0xe0>
 800cd8e:	fab5 f385 	clz	r3, r5
 800cd92:	095b      	lsrs	r3, r3, #5
 800cd94:	b36e      	cbz	r6, 800cdf2 <xmp3fixpt_AllocateBuffers+0xe0>
 800cd96:	bb63      	cbnz	r3, 800cdf2 <xmp3fixpt_AllocateBuffers+0xe0>
 800cd98:	faba f38a 	clz	r3, sl
 800cd9c:	095b      	lsrs	r3, r3, #5
 800cd9e:	f1bb 0f00 	cmp.w	fp, #0
 800cda2:	d026      	beq.n	800cdf2 <xmp3fixpt_AllocateBuffers+0xe0>
 800cda4:	bb2b      	cbnz	r3, 800cdf2 <xmp3fixpt_AllocateBuffers+0xe0>
 800cda6:	b320      	cbz	r0, 800cdf2 <xmp3fixpt_AllocateBuffers+0xe0>
	ClearBuffer(fh,  sizeof(FrameHeader));
 800cda8:	2138      	movs	r1, #56	; 0x38
 800cdaa:	4640      	mov	r0, r8
 800cdac:	f7ff ff77 	bl	800cc9e <ClearBuffer>
	ClearBuffer(si,  sizeof(SideInfo));
 800cdb0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	f7ff ff72 	bl	800cc9e <ClearBuffer>
	ClearBuffer(sfi, sizeof(ScaleFactorInfo));
 800cdba:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	f7ff ff6d 	bl	800cc9e <ClearBuffer>
	ClearBuffer(hi,  sizeof(HuffmanInfo));
 800cdc4:	f241 2110 	movw	r1, #4624	; 0x1210
 800cdc8:	4628      	mov	r0, r5
 800cdca:	f7ff ff68 	bl	800cc9e <ClearBuffer>
	ClearBuffer(di,  sizeof(DequantInfo));
 800cdce:	f44f 7152 	mov.w	r1, #840	; 0x348
 800cdd2:	4658      	mov	r0, fp
 800cdd4:	f7ff ff63 	bl	800cc9e <ClearBuffer>
	ClearBuffer(mi,  sizeof(IMDCTInfo));
 800cdd8:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 800cddc:	4650      	mov	r0, sl
 800cdde:	f7ff ff5e 	bl	800cc9e <ClearBuffer>
	ClearBuffer(sbi, sizeof(SubbandInfo));
 800cde2:	f242 2104 	movw	r1, #8708	; 0x2204
 800cde6:	4648      	mov	r0, r9
 800cde8:	f7ff ff59 	bl	800cc9e <ClearBuffer>
}
 800cdec:	4620      	mov	r0, r4
 800cdee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		FreeBuffers(mp3DecInfo);	/* safe to call - only frees memory that was successfully allocated */
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f7ff ff5b 	bl	800ccae <xmp3fixpt_FreeBuffers>
		return 0;
 800cdf8:	2400      	movs	r4, #0
 800cdfa:	e7f7      	b.n	800cdec <xmp3fixpt_AllocateBuffers+0xda>

0800cdfc <xmp3fixpt_FDCT32>:
 * TODO:        code organization and optimization for ARM
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 800cdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce00:	b085      	sub	sp, #20
 800ce02:	9100      	str	r1, [sp, #0]
 800ce04:	9201      	str	r2, [sp, #4]
 800ce06:	9302      	str	r3, [sp, #8]
 800ce08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
	if (gb < 6) {
 800ce0a:	2c05      	cmp	r4, #5
 800ce0c:	f300 8109 	bgt.w	800d022 <xmp3fixpt_FDCT32+0x226>
		es = 6 - gb;
 800ce10:	f1c4 0406 	rsb	r4, r4, #6
		for (i = 0; i < 32; i++)
 800ce14:	2300      	movs	r3, #0
 800ce16:	e005      	b.n	800ce24 <xmp3fixpt_FDCT32+0x28>
			buf[i] >>= es;
 800ce18:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800ce1c:	4122      	asrs	r2, r4
 800ce1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (i = 0; i < 32; i++)
 800ce22:	3301      	adds	r3, #1
 800ce24:	2b1f      	cmp	r3, #31
 800ce26:	ddf7      	ble.n	800ce18 <xmp3fixpt_FDCT32+0x1c>
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 800ce28:	6803      	ldr	r3, [r0, #0]
 800ce2a:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 800ce2c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800ce2e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800ce30:	195a      	adds	r2, r3, r5
 800ce32:	1b5b      	subs	r3, r3, r5
	 * For inline assembly, x and y are not assumed to be R0, R1 so it shouldn't matter
	 *   which one is returned. (If this were a function call, returning y (R1) would 
	 *   require an extra "mov r0, r1")
     */
    int zlow;
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ce34:	4d7c      	ldr	r5, [pc, #496]	; (800d028 <xmp3fixpt_FDCT32+0x22c>)
 800ce36:	fb85 7303 	smull	r7, r3, r5, r3
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	198d      	adds	r5, r1, r6
 800ce3e:	1b89      	subs	r1, r1, r6
 800ce40:	4e7a      	ldr	r6, [pc, #488]	; (800d02c <xmp3fixpt_FDCT32+0x230>)
 800ce42:	fb86 7101 	smull	r7, r1, r6, r1
 800ce46:	0149      	lsls	r1, r1, #5
 800ce48:	1956      	adds	r6, r2, r5
 800ce4a:	6006      	str	r6, [r0, #0]
 800ce4c:	1b52      	subs	r2, r2, r5
 800ce4e:	4d78      	ldr	r5, [pc, #480]	; (800d030 <xmp3fixpt_FDCT32+0x234>)
 800ce50:	fb85 6202 	smull	r6, r2, r5, r2
 800ce54:	0052      	lsls	r2, r2, #1
 800ce56:	63c2      	str	r2, [r0, #60]	; 0x3c
 800ce58:	185a      	adds	r2, r3, r1
 800ce5a:	6402      	str	r2, [r0, #64]	; 0x40
 800ce5c:	1a5b      	subs	r3, r3, r1
 800ce5e:	fb85 2303 	smull	r2, r3, r5, r3
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	67c3      	str	r3, [r0, #124]	; 0x7c
	D32FP(1, 1, 3, 1);
 800ce66:	6843      	ldr	r3, [r0, #4]
 800ce68:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800ce6a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ce6c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800ce6e:	195a      	adds	r2, r3, r5
 800ce70:	1b5b      	subs	r3, r3, r5
 800ce72:	4d70      	ldr	r5, [pc, #448]	; (800d034 <xmp3fixpt_FDCT32+0x238>)
 800ce74:	fb85 7303 	smull	r7, r3, r5, r3
 800ce78:	005b      	lsls	r3, r3, #1
 800ce7a:	198d      	adds	r5, r1, r6
 800ce7c:	1b89      	subs	r1, r1, r6
 800ce7e:	4e6e      	ldr	r6, [pc, #440]	; (800d038 <xmp3fixpt_FDCT32+0x23c>)
 800ce80:	fb86 7101 	smull	r7, r1, r6, r1
 800ce84:	00c9      	lsls	r1, r1, #3
 800ce86:	1956      	adds	r6, r2, r5
 800ce88:	6046      	str	r6, [r0, #4]
 800ce8a:	1b52      	subs	r2, r2, r5
 800ce8c:	4d6b      	ldr	r5, [pc, #428]	; (800d03c <xmp3fixpt_FDCT32+0x240>)
 800ce8e:	fb85 6202 	smull	r6, r2, r5, r2
 800ce92:	0052      	lsls	r2, r2, #1
 800ce94:	6382      	str	r2, [r0, #56]	; 0x38
 800ce96:	185a      	adds	r2, r3, r1
 800ce98:	6442      	str	r2, [r0, #68]	; 0x44
 800ce9a:	1a5b      	subs	r3, r3, r1
 800ce9c:	fb85 2303 	smull	r2, r3, r5, r3
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	6783      	str	r3, [r0, #120]	; 0x78
	D32FP(2, 1, 3, 1);
 800cea4:	6883      	ldr	r3, [r0, #8]
 800cea6:	6f45      	ldr	r5, [r0, #116]	; 0x74
 800cea8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800ceaa:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800ceac:	195a      	adds	r2, r3, r5
 800ceae:	1b5b      	subs	r3, r3, r5
 800ceb0:	4d63      	ldr	r5, [pc, #396]	; (800d040 <xmp3fixpt_FDCT32+0x244>)
 800ceb2:	fb85 7303 	smull	r7, r3, r5, r3
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	198d      	adds	r5, r1, r6
 800ceba:	1b89      	subs	r1, r1, r6
 800cebc:	4e61      	ldr	r6, [pc, #388]	; (800d044 <xmp3fixpt_FDCT32+0x248>)
 800cebe:	fb86 7101 	smull	r7, r1, r6, r1
 800cec2:	00c9      	lsls	r1, r1, #3
 800cec4:	1956      	adds	r6, r2, r5
 800cec6:	6086      	str	r6, [r0, #8]
 800cec8:	1b52      	subs	r2, r2, r5
 800ceca:	4d5f      	ldr	r5, [pc, #380]	; (800d048 <xmp3fixpt_FDCT32+0x24c>)
 800cecc:	fb85 6202 	smull	r6, r2, r5, r2
 800ced0:	0052      	lsls	r2, r2, #1
 800ced2:	6342      	str	r2, [r0, #52]	; 0x34
 800ced4:	185a      	adds	r2, r3, r1
 800ced6:	6482      	str	r2, [r0, #72]	; 0x48
 800ced8:	1a5b      	subs	r3, r3, r1
 800ceda:	fb85 2303 	smull	r2, r3, r5, r3
 800cede:	005b      	lsls	r3, r3, #1
 800cee0:	6743      	str	r3, [r0, #116]	; 0x74
	D32FP(3, 1, 2, 1);
 800cee2:	68c3      	ldr	r3, [r0, #12]
 800cee4:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800cee6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800cee8:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 800ceea:	195a      	adds	r2, r3, r5
 800ceec:	1b5b      	subs	r3, r3, r5
 800ceee:	4d57      	ldr	r5, [pc, #348]	; (800d04c <xmp3fixpt_FDCT32+0x250>)
 800cef0:	fb85 7303 	smull	r7, r3, r5, r3
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	198d      	adds	r5, r1, r6
 800cef8:	1b89      	subs	r1, r1, r6
 800cefa:	4e55      	ldr	r6, [pc, #340]	; (800d050 <xmp3fixpt_FDCT32+0x254>)
 800cefc:	fb86 7101 	smull	r7, r1, r6, r1
 800cf00:	0089      	lsls	r1, r1, #2
 800cf02:	1956      	adds	r6, r2, r5
 800cf04:	60c6      	str	r6, [r0, #12]
 800cf06:	1b52      	subs	r2, r2, r5
 800cf08:	4d52      	ldr	r5, [pc, #328]	; (800d054 <xmp3fixpt_FDCT32+0x258>)
 800cf0a:	fb85 6202 	smull	r6, r2, r5, r2
 800cf0e:	0052      	lsls	r2, r2, #1
 800cf10:	6302      	str	r2, [r0, #48]	; 0x30
 800cf12:	185a      	adds	r2, r3, r1
 800cf14:	64c2      	str	r2, [r0, #76]	; 0x4c
 800cf16:	1a5b      	subs	r3, r3, r1
 800cf18:	fb85 2303 	smull	r2, r3, r5, r3
 800cf1c:	005b      	lsls	r3, r3, #1
 800cf1e:	6703      	str	r3, [r0, #112]	; 0x70
	D32FP(4, 1, 2, 1);
 800cf20:	6903      	ldr	r3, [r0, #16]
 800cf22:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 800cf24:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800cf26:	6d06      	ldr	r6, [r0, #80]	; 0x50
 800cf28:	195a      	adds	r2, r3, r5
 800cf2a:	1b5b      	subs	r3, r3, r5
 800cf2c:	4d4a      	ldr	r5, [pc, #296]	; (800d058 <xmp3fixpt_FDCT32+0x25c>)
 800cf2e:	fb85 7303 	smull	r7, r3, r5, r3
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	198d      	adds	r5, r1, r6
 800cf36:	1b89      	subs	r1, r1, r6
 800cf38:	4e48      	ldr	r6, [pc, #288]	; (800d05c <xmp3fixpt_FDCT32+0x260>)
 800cf3a:	fb86 7101 	smull	r7, r1, r6, r1
 800cf3e:	0089      	lsls	r1, r1, #2
 800cf40:	1956      	adds	r6, r2, r5
 800cf42:	6106      	str	r6, [r0, #16]
 800cf44:	1b52      	subs	r2, r2, r5
 800cf46:	4d46      	ldr	r5, [pc, #280]	; (800d060 <xmp3fixpt_FDCT32+0x264>)
 800cf48:	fb85 6202 	smull	r6, r2, r5, r2
 800cf4c:	0052      	lsls	r2, r2, #1
 800cf4e:	62c2      	str	r2, [r0, #44]	; 0x2c
 800cf50:	185a      	adds	r2, r3, r1
 800cf52:	6502      	str	r2, [r0, #80]	; 0x50
 800cf54:	1a5b      	subs	r3, r3, r1
 800cf56:	fb85 2303 	smull	r2, r3, r5, r3
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	66c3      	str	r3, [r0, #108]	; 0x6c
	D32FP(5, 1, 1, 2);
 800cf5e:	6943      	ldr	r3, [r0, #20]
 800cf60:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800cf62:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cf64:	6d46      	ldr	r6, [r0, #84]	; 0x54
 800cf66:	195a      	adds	r2, r3, r5
 800cf68:	1b5b      	subs	r3, r3, r5
 800cf6a:	4d3e      	ldr	r5, [pc, #248]	; (800d064 <xmp3fixpt_FDCT32+0x268>)
 800cf6c:	fb85 7303 	smull	r7, r3, r5, r3
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	198d      	adds	r5, r1, r6
 800cf74:	1b89      	subs	r1, r1, r6
 800cf76:	4e3c      	ldr	r6, [pc, #240]	; (800d068 <xmp3fixpt_FDCT32+0x26c>)
 800cf78:	fb86 7101 	smull	r7, r1, r6, r1
 800cf7c:	0049      	lsls	r1, r1, #1
 800cf7e:	1956      	adds	r6, r2, r5
 800cf80:	6146      	str	r6, [r0, #20]
 800cf82:	1b52      	subs	r2, r2, r5
 800cf84:	4d39      	ldr	r5, [pc, #228]	; (800d06c <xmp3fixpt_FDCT32+0x270>)
 800cf86:	fb85 6202 	smull	r6, r2, r5, r2
 800cf8a:	0092      	lsls	r2, r2, #2
 800cf8c:	6282      	str	r2, [r0, #40]	; 0x28
 800cf8e:	185a      	adds	r2, r3, r1
 800cf90:	6542      	str	r2, [r0, #84]	; 0x54
 800cf92:	1a5b      	subs	r3, r3, r1
 800cf94:	fb85 2303 	smull	r2, r3, r5, r3
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	6683      	str	r3, [r0, #104]	; 0x68
	D32FP(6, 1, 1, 2);
 800cf9c:	6983      	ldr	r3, [r0, #24]
 800cf9e:	6e45      	ldr	r5, [r0, #100]	; 0x64
 800cfa0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800cfa2:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800cfa4:	195a      	adds	r2, r3, r5
 800cfa6:	1b5b      	subs	r3, r3, r5
 800cfa8:	4d31      	ldr	r5, [pc, #196]	; (800d070 <xmp3fixpt_FDCT32+0x274>)
 800cfaa:	fb85 7303 	smull	r7, r3, r5, r3
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	198d      	adds	r5, r1, r6
 800cfb2:	1b89      	subs	r1, r1, r6
 800cfb4:	4e2f      	ldr	r6, [pc, #188]	; (800d074 <xmp3fixpt_FDCT32+0x278>)
 800cfb6:	fb86 7101 	smull	r7, r1, r6, r1
 800cfba:	0049      	lsls	r1, r1, #1
 800cfbc:	1956      	adds	r6, r2, r5
 800cfbe:	6186      	str	r6, [r0, #24]
 800cfc0:	1b52      	subs	r2, r2, r5
 800cfc2:	4d2d      	ldr	r5, [pc, #180]	; (800d078 <xmp3fixpt_FDCT32+0x27c>)
 800cfc4:	fb85 6202 	smull	r6, r2, r5, r2
 800cfc8:	0092      	lsls	r2, r2, #2
 800cfca:	6242      	str	r2, [r0, #36]	; 0x24
 800cfcc:	185a      	adds	r2, r3, r1
 800cfce:	6582      	str	r2, [r0, #88]	; 0x58
 800cfd0:	1a5b      	subs	r3, r3, r1
 800cfd2:	fb85 2303 	smull	r2, r3, r5, r3
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	6643      	str	r3, [r0, #100]	; 0x64
	D32FP(7, 1, 1, 4);
 800cfda:	69c3      	ldr	r3, [r0, #28]
 800cfdc:	6e05      	ldr	r5, [r0, #96]	; 0x60
 800cfde:	6a01      	ldr	r1, [r0, #32]
 800cfe0:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 800cfe2:	195a      	adds	r2, r3, r5
 800cfe4:	1b5b      	subs	r3, r3, r5
 800cfe6:	4d25      	ldr	r5, [pc, #148]	; (800d07c <xmp3fixpt_FDCT32+0x280>)
 800cfe8:	fb85 7303 	smull	r7, r3, r5, r3
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	198d      	adds	r5, r1, r6
 800cff0:	1b89      	subs	r1, r1, r6
 800cff2:	4e23      	ldr	r6, [pc, #140]	; (800d080 <xmp3fixpt_FDCT32+0x284>)
 800cff4:	fb86 7101 	smull	r7, r1, r6, r1
 800cff8:	0049      	lsls	r1, r1, #1
 800cffa:	1956      	adds	r6, r2, r5
 800cffc:	61c6      	str	r6, [r0, #28]
 800cffe:	1b52      	subs	r2, r2, r5
 800d000:	4d20      	ldr	r5, [pc, #128]	; (800d084 <xmp3fixpt_FDCT32+0x288>)
 800d002:	fb85 6202 	smull	r6, r2, r5, r2
 800d006:	0112      	lsls	r2, r2, #4
 800d008:	6202      	str	r2, [r0, #32]
 800d00a:	185a      	adds	r2, r3, r1
 800d00c:	65c2      	str	r2, [r0, #92]	; 0x5c
 800d00e:	1a5b      	subs	r3, r3, r1
 800d010:	fb85 2303 	smull	r2, r3, r5, r3
 800d014:	011b      	lsls	r3, r3, #4
 800d016:	6603      	str	r3, [r0, #96]	; 0x60
 800d018:	4f1b      	ldr	r7, [pc, #108]	; (800d088 <xmp3fixpt_FDCT32+0x28c>)

	/* second pass */
	for (i = 4; i > 0; i--) {
 800d01a:	f04f 0804 	mov.w	r8, #4
 800d01e:	9403      	str	r4, [sp, #12]
 800d020:	e0ae      	b.n	800d180 <xmp3fixpt_FDCT32+0x384>
	es = 0;
 800d022:	2400      	movs	r4, #0
 800d024:	e700      	b.n	800ce28 <xmp3fixpt_FDCT32+0x2c>
 800d026:	bf00      	nop
 800d028:	4013c251 	.word	0x4013c251
 800d02c:	518522fb 	.word	0x518522fb
 800d030:	404f4672 	.word	0x404f4672
 800d034:	40b345bd 	.word	0x40b345bd
 800d038:	6d0b20cf 	.word	0x6d0b20cf
 800d03c:	42e13c10 	.word	0x42e13c10
 800d040:	41fa2d6d 	.word	0x41fa2d6d
 800d044:	41d95790 	.word	0x41d95790
 800d048:	48919f44 	.word	0x48919f44
 800d04c:	43f93421 	.word	0x43f93421
 800d050:	5efc8d96 	.word	0x5efc8d96
 800d054:	52cb0e63 	.word	0x52cb0e63
 800d058:	46cc1bc4 	.word	0x46cc1bc4
 800d05c:	4ad81a97 	.word	0x4ad81a97
 800d060:	64e2402e 	.word	0x64e2402e
 800d064:	4a9d9cf0 	.word	0x4a9d9cf0
 800d068:	7c7d1db3 	.word	0x7c7d1db3
 800d06c:	43e224a9 	.word	0x43e224a9
 800d070:	4fae3711 	.word	0x4fae3711
 800d074:	6b6fcf26 	.word	0x6b6fcf26
 800d078:	6e3c92c1 	.word	0x6e3c92c1
 800d07c:	56601ea7 	.word	0x56601ea7
 800d080:	5f4cf6eb 	.word	0x5f4cf6eb
 800d084:	519e4e04 	.word	0x519e4e04
 800d088:	0801b4dc 	.word	0x0801b4dc
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 800d08c:	6801      	ldr	r1, [r0, #0]
 800d08e:	69c5      	ldr	r5, [r0, #28]
 800d090:	68c3      	ldr	r3, [r0, #12]
 800d092:	6906      	ldr	r6, [r0, #16]
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800d094:	194a      	adds	r2, r1, r5
 800d096:	1b49      	subs	r1, r1, r5
 800d098:	683d      	ldr	r5, [r7, #0]
 800d09a:	fb85 c101 	smull	ip, r1, r5, r1
 800d09e:	0049      	lsls	r1, r1, #1
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800d0a0:	eb03 0c06 	add.w	ip, r3, r6
 800d0a4:	687d      	ldr	r5, [r7, #4]
 800d0a6:	1b9b      	subs	r3, r3, r6
 800d0a8:	fb85 6303 	smull	r6, r3, r5, r3
 800d0ac:	00db      	lsls	r3, r3, #3
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800d0ae:	eb02 090c 	add.w	r9, r2, ip
 800d0b2:	68be      	ldr	r6, [r7, #8]
 800d0b4:	eba2 020c 	sub.w	r2, r2, ip
 800d0b8:	fb86 5202 	smull	r5, r2, r6, r2
 800d0bc:	0052      	lsls	r2, r2, #1
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800d0be:	18cd      	adds	r5, r1, r3
 800d0c0:	1ac9      	subs	r1, r1, r3
 800d0c2:	fb86 3101 	smull	r3, r1, r6, r1
 800d0c6:	0049      	lsls	r1, r1, #1

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 800d0c8:	6843      	ldr	r3, [r0, #4]
 800d0ca:	f8d0 b018 	ldr.w	fp, [r0, #24]
 800d0ce:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800d0d2:	6946      	ldr	r6, [r0, #20]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800d0d4:	eb03 0c0b 	add.w	ip, r3, fp
 800d0d8:	eba3 030b 	sub.w	r3, r3, fp
 800d0dc:	68fc      	ldr	r4, [r7, #12]
 800d0de:	fb84 b303 	smull	fp, r3, r4, r3
 800d0e2:	005b      	lsls	r3, r3, #1
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800d0e4:	eb0e 0b06 	add.w	fp, lr, r6
 800d0e8:	ebae 0e06 	sub.w	lr, lr, r6
 800d0ec:	693c      	ldr	r4, [r7, #16]
 800d0ee:	fb84 ae0e 	smull	sl, lr, r4, lr
 800d0f2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800d0f6:	eb0c 0a0b 	add.w	sl, ip, fp
 800d0fa:	697e      	ldr	r6, [r7, #20]
 800d0fc:	ebac 0c0b 	sub.w	ip, ip, fp
 800d100:	fb86 bc0c 	smull	fp, ip, r6, ip
 800d104:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 800d108:	eb03 0b0e 	add.w	fp, r3, lr
 800d10c:	3718      	adds	r7, #24
 800d10e:	eba3 030e 	sub.w	r3, r3, lr
 800d112:	fb86 e303 	smull	lr, r3, r6, r3
 800d116:	009b      	lsls	r3, r3, #2

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800d118:	eb09 0e0a 	add.w	lr, r9, sl
 800d11c:	eba9 090a 	sub.w	r9, r9, sl
 800d120:	4ed6      	ldr	r6, [pc, #856]	; (800d47c <xmp3fixpt_FDCT32+0x680>)
 800d122:	fb86 a909 	smull	sl, r9, r6, r9
 800d126:	ea4f 0949 	mov.w	r9, r9, lsl #1
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800d12a:	eb02 0a0c 	add.w	sl, r2, ip
 800d12e:	eba2 020c 	sub.w	r2, r2, ip
 800d132:	fb86 c202 	smull	ip, r2, r6, r2
 800d136:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		buf[0] = b0;	    buf[1] = b1;
 800d13a:	f8c0 e000 	str.w	lr, [r0]
 800d13e:	f8c0 9004 	str.w	r9, [r0, #4]
		buf[2] = b2 + b3;	buf[3] = b3;
 800d142:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 800d146:	6082      	str	r2, [r0, #8]
 800d148:	f8c0 c00c 	str.w	ip, [r0, #12]

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800d14c:	eb05 0c0b 	add.w	ip, r5, fp
 800d150:	eba5 020b 	sub.w	r2, r5, fp
 800d154:	fb86 5202 	smull	r5, r2, r6, r2
 800d158:	0052      	lsls	r2, r2, #1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800d15a:	18cd      	adds	r5, r1, r3
 800d15c:	1acb      	subs	r3, r1, r3
 800d15e:	fb86 1303 	smull	r1, r3, r6, r3
 800d162:	005e      	lsls	r6, r3, #1
		b6 += b7;
 800d164:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800d168:	eb0c 0501 	add.w	r5, ip, r1
 800d16c:	6105      	str	r5, [r0, #16]
 800d16e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800d172:	6143      	str	r3, [r0, #20]
		buf[6] = b5 + b6;	buf[7] = b7;
 800d174:	440a      	add	r2, r1
 800d176:	6182      	str	r2, [r0, #24]
 800d178:	61c6      	str	r6, [r0, #28]

		buf += 8;
 800d17a:	3020      	adds	r0, #32
	for (i = 4; i > 0; i--) {
 800d17c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d180:	f1b8 0f00 	cmp.w	r8, #0
 800d184:	dc82      	bgt.n	800d08c <xmp3fixpt_FDCT32+0x290>
	}
	buf -= 32;	/* reset */

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800d186:	9c03      	ldr	r4, [sp, #12]
 800d188:	9a01      	ldr	r2, [sp, #4]
 800d18a:	9b02      	ldr	r3, [sp, #8]
 800d18c:	1ad1      	subs	r1, r2, r3
 800d18e:	f001 0107 	and.w	r1, r1, #7
 800d192:	f501 6280 	add.w	r2, r1, #1024	; 0x400
 800d196:	0092      	lsls	r2, r2, #2
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f000 813b 	beq.w	800d414 <xmp3fixpt_FDCT32+0x618>
 800d19e:	f04f 0c00 	mov.w	ip, #0
 800d1a2:	4462      	add	r2, ip
 800d1a4:	9d00      	ldr	r5, [sp, #0]
 800d1a6:	eb05 0e02 	add.w	lr, r5, r2
	s = buf[ 0];				d[0] = d[8] = s;
 800d1aa:	f850 3c80 	ldr.w	r3, [r0, #-128]
 800d1ae:	f8ce 3020 	str.w	r3, [lr, #32]
 800d1b2:	50ab      	str	r3, [r5, r2]
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800d1b4:	9b01      	ldr	r3, [sp, #4]
 800d1b6:	009d      	lsls	r5, r3, #2
 800d1b8:	9b02      	ldr	r3, [sp, #8]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f000 812d 	beq.w	800d41a <xmp3fixpt_FDCT32+0x61e>
 800d1c0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800d1c4:	441d      	add	r5, r3
 800d1c6:	9f00      	ldr	r7, [sp, #0]
 800d1c8:	197b      	adds	r3, r7, r5

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800d1ca:	f850 6c7c 	ldr.w	r6, [r0, #-124]
 800d1ce:	621e      	str	r6, [r3, #32]
 800d1d0:	517e      	str	r6, [r7, r5]

	tmp = buf[25] + buf[29];
 800d1d2:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 800d1d6:	f850 5c1c 	ldr.w	r5, [r0, #-28]
 800d1da:	442f      	add	r7, r5
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800d1dc:	f850 5c3c 	ldr.w	r5, [r0, #-60]
 800d1e0:	443d      	add	r5, r7
 800d1e2:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
 800d1e6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 800d1ea:	f850 6c4c 	ldr.w	r6, [r0, #-76]
 800d1ee:	f850 5c5c 	ldr.w	r5, [r0, #-92]
 800d1f2:	442e      	add	r6, r5
 800d1f4:	f8c3 6220 	str.w	r6, [r3, #544]	; 0x220
 800d1f8:	f8c3 6200 	str.w	r6, [r3, #512]	; 0x200
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800d1fc:	f850 5c2c 	ldr.w	r5, [r0, #-44]
 800d200:	443d      	add	r5, r7
 800d202:	f8c3 5320 	str.w	r5, [r3, #800]	; 0x320
 800d206:	f8c3 5300 	str.w	r5, [r3, #768]	; 0x300

	tmp = buf[29] + buf[27];
 800d20a:	f850 7c14 	ldr.w	r7, [r0, #-20]
 800d20e:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 800d212:	442f      	add	r7, r5
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 800d214:	f850 5c6c 	ldr.w	r5, [r0, #-108]
 800d218:	f8c3 5420 	str.w	r5, [r3, #1056]	; 0x420
 800d21c:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800d220:	f850 5c2c 	ldr.w	r5, [r0, #-44]
 800d224:	443d      	add	r5, r7
 800d226:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
 800d22a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 800d22e:	f850 6c54 	ldr.w	r6, [r0, #-84]
 800d232:	f850 5c4c 	ldr.w	r5, [r0, #-76]
 800d236:	442e      	add	r6, r5
 800d238:	f8c3 6620 	str.w	r6, [r3, #1568]	; 0x620
 800d23c:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800d240:	f850 5c34 	ldr.w	r5, [r0, #-52]
 800d244:	443d      	add	r5, r7
 800d246:	f8c3 5720 	str.w	r5, [r3, #1824]	; 0x720
 800d24a:	f8c3 5700 	str.w	r5, [r3, #1792]	; 0x700

	tmp = buf[27] + buf[31];
 800d24e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800d252:	f850 5c14 	ldr.w	r5, [r0, #-20]
 800d256:	442f      	add	r7, r5
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 800d258:	f850 5c74 	ldr.w	r5, [r0, #-116]
 800d25c:	f8c3 5820 	str.w	r5, [r3, #2080]	; 0x820
 800d260:	f8c3 5800 	str.w	r5, [r3, #2048]	; 0x800
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800d264:	f850 5c34 	ldr.w	r5, [r0, #-52]
 800d268:	443d      	add	r5, r7
 800d26a:	f8c3 5920 	str.w	r5, [r3, #2336]	; 0x920
 800d26e:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 800d272:	f850 6c44 	ldr.w	r6, [r0, #-68]
 800d276:	f850 5c54 	ldr.w	r5, [r0, #-84]
 800d27a:	442e      	add	r6, r5
 800d27c:	f8c3 6a20 	str.w	r6, [r3, #2592]	; 0xa20
 800d280:	f8c3 6a00 	str.w	r6, [r3, #2560]	; 0xa00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800d284:	f850 5c24 	ldr.w	r5, [r0, #-36]
 800d288:	443d      	add	r5, r7
 800d28a:	f8c3 5b20 	str.w	r5, [r3, #2848]	; 0xb20
 800d28e:	f8c3 5b00 	str.w	r5, [r3, #2816]	; 0xb00

	tmp = buf[31];
 800d292:	f850 6c04 	ldr.w	r6, [r0, #-4]
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800d296:	f850 5c64 	ldr.w	r5, [r0, #-100]
 800d29a:	f8c3 5c20 	str.w	r5, [r3, #3104]	; 0xc20
 800d29e:	f8c3 5c00 	str.w	r5, [r3, #3072]	; 0xc00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800d2a2:	f850 5c24 	ldr.w	r5, [r0, #-36]
 800d2a6:	4435      	add	r5, r6
 800d2a8:	f8c3 5d20 	str.w	r5, [r3, #3360]	; 0xd20
 800d2ac:	f8c3 5d00 	str.w	r5, [r3, #3328]	; 0xd00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800d2b0:	f850 5c44 	ldr.w	r5, [r0, #-68]
 800d2b4:	f8c3 5e20 	str.w	r5, [r3, #3616]	; 0xe20
 800d2b8:	f8c3 5e00 	str.w	r5, [r3, #3584]	; 0xe00
	s = tmp;					d[0] = d[8] = s;
 800d2bc:	f8c3 6f20 	str.w	r6, [r3, #3872]	; 0xf20
 800d2c0:	f8c3 6f00 	str.w	r6, [r3, #3840]	; 0xf00

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800d2c4:	3110      	adds	r1, #16
 800d2c6:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 800d2ca:	9e00      	ldr	r6, [sp, #0]
 800d2cc:	eb06 010c 	add.w	r1, r6, ip

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800d2d0:	f850 5c7c 	ldr.w	r5, [r0, #-124]
 800d2d4:	620d      	str	r5, [r1, #32]
 800d2d6:	f846 500c 	str.w	r5, [r6, ip]

	tmp = buf[30] + buf[25];
 800d2da:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800d2de:	f850 6c1c 	ldr.w	r6, [r0, #-28]
 800d2e2:	eb05 0c06 	add.w	ip, r5, r6
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800d2e6:	f850 7c3c 	ldr.w	r7, [r0, #-60]
 800d2ea:	4467      	add	r7, ip
 800d2ec:	f8c1 7120 	str.w	r7, [r1, #288]	; 0x120
 800d2f0:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 800d2f4:	f850 6c48 	ldr.w	r6, [r0, #-72]
 800d2f8:	f850 7c5c 	ldr.w	r7, [r0, #-92]
 800d2fc:	443e      	add	r6, r7
 800d2fe:	f8c1 6220 	str.w	r6, [r1, #544]	; 0x220
 800d302:	f8c1 6200 	str.w	r6, [r1, #512]	; 0x200
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800d306:	f850 5c28 	ldr.w	r5, [r0, #-40]
 800d30a:	4465      	add	r5, ip
 800d30c:	f8c1 5320 	str.w	r5, [r1, #800]	; 0x320
 800d310:	f8c1 5300 	str.w	r5, [r1, #768]	; 0x300
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 800d314:	f850 5c68 	ldr.w	r5, [r0, #-104]
 800d318:	f8c1 5420 	str.w	r5, [r1, #1056]	; 0x420
 800d31c:	f8c1 5400 	str.w	r5, [r1, #1024]	; 0x400

	tmp = buf[26] + buf[30];
 800d320:	f850 5c18 	ldr.w	r5, [r0, #-24]
 800d324:	f850 6c08 	ldr.w	r6, [r0, #-8]
 800d328:	eb05 0c06 	add.w	ip, r5, r6
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800d32c:	f850 7c28 	ldr.w	r7, [r0, #-40]
 800d330:	4467      	add	r7, ip
 800d332:	f8c1 7520 	str.w	r7, [r1, #1312]	; 0x520
 800d336:	f8c1 7500 	str.w	r7, [r1, #1280]	; 0x500
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 800d33a:	f850 6c58 	ldr.w	r6, [r0, #-88]
 800d33e:	f850 7c48 	ldr.w	r7, [r0, #-72]
 800d342:	443e      	add	r6, r7
 800d344:	f8c1 6620 	str.w	r6, [r1, #1568]	; 0x620
 800d348:	f8c1 6600 	str.w	r6, [r1, #1536]	; 0x600
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800d34c:	f850 5c38 	ldr.w	r5, [r0, #-56]
 800d350:	4465      	add	r5, ip
 800d352:	f8c1 5720 	str.w	r5, [r1, #1824]	; 0x720
 800d356:	f8c1 5700 	str.w	r5, [r1, #1792]	; 0x700
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 800d35a:	f850 5c78 	ldr.w	r5, [r0, #-120]
 800d35e:	f8c1 5820 	str.w	r5, [r1, #2080]	; 0x820
 800d362:	f8c1 5800 	str.w	r5, [r1, #2048]	; 0x800

	tmp = buf[28] + buf[26];
 800d366:	f850 5c10 	ldr.w	r5, [r0, #-16]
 800d36a:	f850 6c18 	ldr.w	r6, [r0, #-24]
 800d36e:	eb05 0c06 	add.w	ip, r5, r6
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800d372:	f850 7c38 	ldr.w	r7, [r0, #-56]
 800d376:	4467      	add	r7, ip
 800d378:	f8c1 7920 	str.w	r7, [r1, #2336]	; 0x920
 800d37c:	f8c1 7900 	str.w	r7, [r1, #2304]	; 0x900
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 800d380:	f850 6c50 	ldr.w	r6, [r0, #-80]
 800d384:	f850 7c58 	ldr.w	r7, [r0, #-88]
 800d388:	443e      	add	r6, r7
 800d38a:	f8c1 6a20 	str.w	r6, [r1, #2592]	; 0xa20
 800d38e:	f8c1 6a00 	str.w	r6, [r1, #2560]	; 0xa00
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800d392:	f850 5c30 	ldr.w	r5, [r0, #-48]
 800d396:	4465      	add	r5, ip
 800d398:	f8c1 5b20 	str.w	r5, [r1, #2848]	; 0xb20
 800d39c:	f8c1 5b00 	str.w	r5, [r1, #2816]	; 0xb00
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 800d3a0:	f850 5c70 	ldr.w	r5, [r0, #-112]
 800d3a4:	f8c1 5c20 	str.w	r5, [r1, #3104]	; 0xc20
 800d3a8:	f8c1 5c00 	str.w	r5, [r1, #3072]	; 0xc00

	tmp = buf[24] + buf[28];
 800d3ac:	f850 5c20 	ldr.w	r5, [r0, #-32]
 800d3b0:	f850 6c10 	ldr.w	r6, [r0, #-16]
 800d3b4:	4435      	add	r5, r6
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800d3b6:	f850 7c30 	ldr.w	r7, [r0, #-48]
 800d3ba:	442f      	add	r7, r5
 800d3bc:	f8c1 7d20 	str.w	r7, [r1, #3360]	; 0xd20
 800d3c0:	f8c1 7d00 	str.w	r7, [r1, #3328]	; 0xd00
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 800d3c4:	f850 6c60 	ldr.w	r6, [r0, #-96]
 800d3c8:	f850 7c50 	ldr.w	r7, [r0, #-80]
 800d3cc:	443e      	add	r6, r7
 800d3ce:	f8c1 6e20 	str.w	r6, [r1, #3616]	; 0xe20
 800d3d2:	f8c1 6e00 	str.w	r6, [r1, #3584]	; 0xe00
	s = buf[16] + tmp;			d[0] = d[8] = s;
 800d3d6:	f850 0c40 	ldr.w	r0, [r0, #-64]
 800d3da:	4405      	add	r5, r0
 800d3dc:	f8c1 5f20 	str.w	r5, [r1, #3872]	; 0xf20
 800d3e0:	f8c1 5f00 	str.w	r5, [r1, #3840]	; 0xf00

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 800d3e4:	2c00      	cmp	r4, #0
 800d3e6:	d046      	beq.n	800d476 <xmp3fixpt_FDCT32+0x67a>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 800d3e8:	9e00      	ldr	r6, [sp, #0]
 800d3ea:	58b5      	ldr	r5, [r6, r2]
 800d3ec:	17ef      	asrs	r7, r5, #31
 800d3ee:	f1c4 001f 	rsb	r0, r4, #31
 800d3f2:	fa45 f600 	asr.w	r6, r5, r0
 800d3f6:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800d3fa:	d004      	beq.n	800d406 <xmp3fixpt_FDCT32+0x60a>
 800d3fc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800d400:	40e5      	lsrs	r5, r4
 800d402:	3d01      	subs	r5, #1
 800d404:	407d      	eors	r5, r7
 800d406:	40a5      	lsls	r5, r4
 800d408:	f8ce 5020 	str.w	r5, [lr, #32]
 800d40c:	9e00      	ldr	r6, [sp, #0]
 800d40e:	50b5      	str	r5, [r6, r2]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
		for (i = 16; i <= 31; i++) {
 800d410:	2510      	movs	r5, #16
 800d412:	e00a      	b.n	800d42a <xmp3fixpt_FDCT32+0x62e>
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800d414:	f44f 5c88 	mov.w	ip, #4352	; 0x1100
 800d418:	e6c3      	b.n	800d1a2 <xmp3fixpt_FDCT32+0x3a6>
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800d41a:	2300      	movs	r3, #0
 800d41c:	e6d2      	b.n	800d1c4 <xmp3fixpt_FDCT32+0x3c8>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800d41e:	40a2      	lsls	r2, r4
 800d420:	621a      	str	r2, [r3, #32]
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	f503 7380 	add.w	r3, r3, #256	; 0x100
		for (i = 16; i <= 31; i++) {
 800d428:	3501      	adds	r5, #1
 800d42a:	2d1f      	cmp	r5, #31
 800d42c:	dc0c      	bgt.n	800d448 <xmp3fixpt_FDCT32+0x64c>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	17d7      	asrs	r7, r2, #31
 800d432:	fa42 f600 	asr.w	r6, r2, r0
 800d436:	ebb6 7fe2 	cmp.w	r6, r2, asr #31
 800d43a:	d0f0      	beq.n	800d41e <xmp3fixpt_FDCT32+0x622>
 800d43c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d440:	40e2      	lsrs	r2, r4
 800d442:	3a01      	subs	r2, #1
 800d444:	407a      	eors	r2, r7
 800d446:	e7ea      	b.n	800d41e <xmp3fixpt_FDCT32+0x622>
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		for (i = 15; i >= 0; i--) {
 800d448:	220f      	movs	r2, #15
 800d44a:	e005      	b.n	800d458 <xmp3fixpt_FDCT32+0x65c>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800d44c:	40a3      	lsls	r3, r4
 800d44e:	620b      	str	r3, [r1, #32]
 800d450:	600b      	str	r3, [r1, #0]
 800d452:	f501 7180 	add.w	r1, r1, #256	; 0x100
		for (i = 15; i >= 0; i--) {
 800d456:	3a01      	subs	r2, #1
 800d458:	2a00      	cmp	r2, #0
 800d45a:	db0c      	blt.n	800d476 <xmp3fixpt_FDCT32+0x67a>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800d45c:	680b      	ldr	r3, [r1, #0]
 800d45e:	17de      	asrs	r6, r3, #31
 800d460:	fa43 f500 	asr.w	r5, r3, r0
 800d464:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800d468:	d0f0      	beq.n	800d44c <xmp3fixpt_FDCT32+0x650>
 800d46a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d46e:	40e3      	lsrs	r3, r4
 800d470:	3b01      	subs	r3, #1
 800d472:	4073      	eors	r3, r6
 800d474:	e7ea      	b.n	800d44c <xmp3fixpt_FDCT32+0x650>
		}
	}
}
 800d476:	b005      	add	sp, #20
 800d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47c:	5a82799a 	.word	0x5a82799a

0800d480 <xmp3fixpt_Dequantize>:
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800d480:	2800      	cmp	r0, #0
 800d482:	f000 8133 	beq.w	800d6ec <xmp3fixpt_Dequantize+0x26c>
{
 800d486:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48a:	b08b      	sub	sp, #44	; 0x2c
 800d48c:	460e      	mov	r6, r1
 800d48e:	4680      	mov	r8, r0
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800d490:	6807      	ldr	r7, [r0, #0]
 800d492:	2f00      	cmp	r7, #0
 800d494:	f000 812d 	beq.w	800d6f2 <xmp3fixpt_Dequantize+0x272>
 800d498:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800d49c:	f1ba 0f00 	cmp.w	sl, #0
 800d4a0:	f000 812a 	beq.w	800d6f8 <xmp3fixpt_Dequantize+0x278>
 800d4a4:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800d4a8:	f1bb 0f00 	cmp.w	fp, #0
 800d4ac:	f000 8127 	beq.w	800d6fe <xmp3fixpt_Dequantize+0x27e>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800d4b0:	68c4      	ldr	r4, [r0, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800d4b2:	2c00      	cmp	r4, #0
 800d4b4:	f000 8126 	beq.w	800d704 <xmp3fixpt_Dequantize+0x284>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800d4b8:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d4bc:	f1b9 0f00 	cmp.w	r9, #0
 800d4c0:	f000 8123 	beq.w	800d70a <xmp3fixpt_Dequantize+0x28a>
	/* si is an array of up to 4 structs, stored as gr0ch0, gr0ch1, gr1ch0, gr1ch1 */
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
	sfi = (ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS);
	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
	cbi = di->cbi;
 800d4c4:	f509 7346 	add.w	r3, r9, #792	; 0x318
 800d4c8:	9307      	str	r3, [sp, #28]
	mOut[0] = mOut[1] = 0;
 800d4ca:	2500      	movs	r5, #0
 800d4cc:	9509      	str	r5, [sp, #36]	; 0x24
 800d4ce:	9508      	str	r5, [sp, #32]

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800d4d0:	e027      	b.n	800d522 <xmp3fixpt_Dequantize+0xa2>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800d4d2:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
			&si->sis[gr][ch], &sfi->sfis[gr][ch], &cbi[ch]);
 800d4d6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800d4da:	f505 6290 	add.w	r2, r5, #1152	; 0x480
 800d4de:	9907      	ldr	r1, [sp, #28]
 800d4e0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d4e4:	9302      	str	r3, [sp, #8]
 800d4e6:	ebc5 1145 	rsb	r1, r5, r5, lsl #5
 800d4ea:	ebc6 1346 	rsb	r3, r6, r6, lsl #5
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d4f4:	445b      	add	r3, fp
 800d4f6:	9301      	str	r3, [sp, #4]
 800d4f8:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800d502:	3328      	adds	r3, #40	; 0x28
 800d504:	4453      	add	r3, sl
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	463b      	mov	r3, r7
 800d50a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d50e:	4649      	mov	r1, r9
 800d510:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 800d514:	f000 f9be 	bl	800d894 <xmp3fixpt_DequantChannel>
 800d518:	f205 4382 	addw	r3, r5, #1154	; 0x482
 800d51c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800d520:	3501      	adds	r5, #1
 800d522:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800d526:	42ab      	cmp	r3, r5
 800d528:	dcd3      	bgt.n	800d4d2 <xmp3fixpt_Dequantize+0x52>
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 800d52a:	6a3b      	ldr	r3, [r7, #32]
 800d52c:	b15b      	cbz	r3, 800d546 <xmp3fixpt_Dequantize+0xc6>
 800d52e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800d532:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d536:	2b00      	cmp	r3, #0
 800d538:	dd2f      	ble.n	800d59a <xmp3fixpt_Dequantize+0x11a>
 800d53a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800d53e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d542:	2b00      	cmp	r3, #0
 800d544:	dd2b      	ble.n	800d59e <xmp3fixpt_Dequantize+0x11e>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	085a      	lsrs	r2, r3, #1
 800d54a:	d065      	beq.n	800d618 <xmp3fixpt_Dequantize+0x198>
		if (fh->modeExt & 0x01) {
 800d54c:	f013 0f01 	tst.w	r3, #1
 800d550:	d055      	beq.n	800d5fe <xmp3fixpt_Dequantize+0x17e>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 800d552:	f8d9 3330 	ldr.w	r3, [r9, #816]	; 0x330
 800d556:	2b00      	cmp	r3, #0
 800d558:	d146      	bne.n	800d5e8 <xmp3fixpt_Dequantize+0x168>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 800d55a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d55c:	f8d9 3344 	ldr.w	r3, [r9, #836]	; 0x344
 800d560:	3301      	adds	r3, #1
 800d562:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800d566:	e053      	b.n	800d610 <xmp3fixpt_Dequantize+0x190>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800d568:	3301      	adds	r3, #1
 800d56a:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800d56e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800d572:	429a      	cmp	r2, r3
 800d574:	dd15      	ble.n	800d5a2 <xmp3fixpt_Dequantize+0x122>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800d576:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800d57a:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800d57e:	dc02      	bgt.n	800d586 <xmp3fixpt_Dequantize+0x106>
 800d580:	4a63      	ldr	r2, [pc, #396]	; (800d710 <xmp3fixpt_Dequantize+0x290>)
 800d582:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800d586:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800d58a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d58e:	dbeb      	blt.n	800d568 <xmp3fixpt_Dequantize+0xe8>
 800d590:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800d594:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800d598:	e7e6      	b.n	800d568 <xmp3fixpt_Dequantize+0xe8>
 800d59a:	2300      	movs	r3, #0
 800d59c:	e7e5      	b.n	800d56a <xmp3fixpt_Dequantize+0xea>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	e7e3      	b.n	800d56a <xmp3fixpt_Dequantize+0xea>
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	e000      	b.n	800d5a8 <xmp3fixpt_Dequantize+0x128>
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800d5ac:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	ddc8      	ble.n	800d546 <xmp3fixpt_Dequantize+0xc6>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800d5b4:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800d5b8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5bc:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800d5c0:	dc04      	bgt.n	800d5cc <xmp3fixpt_Dequantize+0x14c>
 800d5c2:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800d5c6:	4952      	ldr	r1, [pc, #328]	; (800d710 <xmp3fixpt_Dequantize+0x290>)
 800d5c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800d5cc:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800d5d0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5d4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d5d8:	dbe5      	blt.n	800d5a6 <xmp3fixpt_Dequantize+0x126>
 800d5da:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800d5de:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800d5e2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800d5e6:	e7de      	b.n	800d5a6 <xmp3fixpt_Dequantize+0x126>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 800d5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ea:	f8d9 2340 	ldr.w	r2, [r9, #832]	; 0x340
 800d5ee:	3215      	adds	r2, #21
 800d5f0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800d5f4:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800d5f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d5fc:	e008      	b.n	800d610 <xmp3fixpt_Dequantize+0x190>
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800d5fe:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800d602:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800d606:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d60a:	4299      	cmp	r1, r3
 800d60c:	bfb8      	it	lt
 800d60e:	4619      	movlt	r1, r3
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 800d610:	aa08      	add	r2, sp, #32
 800d612:	4620      	mov	r0, r4
 800d614:	f003 fbb8 	bl	8010d88 <xmp3fixpt_MidSideProc>
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 800d618:	6a3a      	ldr	r2, [r7, #32]
 800d61a:	f012 0f01 	tst.w	r2, #1
 800d61e:	d01b      	beq.n	800d658 <xmp3fixpt_Dequantize+0x1d8>
		nSamps = hi->nonZeroBound[0];
 800d620:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800d624:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
		if (fh->ver == MPEG1) {
 800d628:	783b      	ldrb	r3, [r7, #0]
 800d62a:	b9e3      	cbnz	r3, 800d666 <xmp3fixpt_Dequantize+0x1e6>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800d62c:	ebc6 1346 	rsb	r3, r6, r6, lsl #5
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	333e      	adds	r3, #62	; 0x3e
 800d634:	a808      	add	r0, sp, #32
 800d636:	9003      	str	r0, [sp, #12]
 800d638:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800d63c:	eb0a 1a06 	add.w	sl, sl, r6, lsl #4
 800d640:	f8da 0088 	ldr.w	r0, [sl, #136]	; 0x88
 800d644:	9002      	str	r0, [sp, #8]
 800d646:	1052      	asrs	r2, r2, #1
 800d648:	9201      	str	r2, [sp, #4]
 800d64a:	9a07      	ldr	r2, [sp, #28]
 800d64c:	9200      	str	r2, [sp, #0]
 800d64e:	445b      	add	r3, fp
 800d650:	463a      	mov	r2, r7
 800d652:	4620      	mov	r0, r4
 800d654:	f003 fbc6 	bl	8010de4 <xmp3fixpt_IntensityProcMPEG1>
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 800d658:	6a38      	ldr	r0, [r7, #32]
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d041      	beq.n	800d6e2 <xmp3fixpt_Dequantize+0x262>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800d65e:	9b08      	ldr	r3, [sp, #32]

static __inline int CLZ(int x)
{
	int numZeros;

	if (!x)
 800d660:	b343      	cbz	r3, 800d6b4 <xmp3fixpt_Dequantize+0x234>
		return (sizeof(int) * 8);

	numZeros = 0;
 800d662:	2200      	movs	r2, #0
 800d664:	e01b      	b.n	800d69e <xmp3fixpt_Dequantize+0x21e>
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800d666:	ebc6 1346 	rsb	r3, r6, r6, lsl #5
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	333e      	adds	r3, #62	; 0x3e
 800d66e:	a808      	add	r0, sp, #32
 800d670:	9004      	str	r0, [sp, #16]
 800d672:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800d676:	eb0a 1606 	add.w	r6, sl, r6, lsl #4
 800d67a:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 800d67e:	9003      	str	r0, [sp, #12]
 800d680:	1052      	asrs	r2, r2, #1
 800d682:	9202      	str	r2, [sp, #8]
 800d684:	f10b 02f8 	add.w	r2, fp, #248	; 0xf8
 800d688:	9201      	str	r2, [sp, #4]
 800d68a:	9a07      	ldr	r2, [sp, #28]
 800d68c:	9200      	str	r2, [sp, #0]
 800d68e:	445b      	add	r3, fp
 800d690:	463a      	mov	r2, r7
 800d692:	4620      	mov	r0, r4
 800d694:	f003 fd08 	bl	80110a8 <xmp3fixpt_IntensityProcMPEG2>
 800d698:	e7de      	b.n	800d658 <xmp3fixpt_Dequantize+0x1d8>
	while (!(x & 0x80000000)) {
		numZeros++;
 800d69a:	3201      	adds	r2, #1
		x <<= 1;
 800d69c:	005b      	lsls	r3, r3, #1
	while (!(x & 0x80000000)) {
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	dafb      	bge.n	800d69a <xmp3fixpt_Dequantize+0x21a>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800d6a2:	3a01      	subs	r2, #1
 800d6a4:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800d6a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800d6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (!x)
 800d6ae:	b1db      	cbz	r3, 800d6e8 <xmp3fixpt_Dequantize+0x268>
	numZeros = 0;
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	e003      	b.n	800d6bc <xmp3fixpt_Dequantize+0x23c>
		return (sizeof(int) * 8);
 800d6b4:	2220      	movs	r2, #32
 800d6b6:	e7f4      	b.n	800d6a2 <xmp3fixpt_Dequantize+0x222>
		numZeros++;
 800d6b8:	3201      	adds	r2, #1
		x <<= 1;
 800d6ba:	005b      	lsls	r3, r3, #1
	while (!(x & 0x80000000)) {
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dafb      	bge.n	800d6b8 <xmp3fixpt_Dequantize+0x238>
 800d6c0:	3a01      	subs	r2, #1
 800d6c2:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800d6c6:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800d6ca:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 800d6ce:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	bfb8      	it	lt
 800d6d6:	4613      	movlt	r3, r2
		hi->nonZeroBound[0] = nSamps;
 800d6d8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
		hi->nonZeroBound[1] = nSamps;
 800d6dc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 800d6e0:	2000      	movs	r0, #0
}
 800d6e2:	b00b      	add	sp, #44	; 0x2c
 800d6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (sizeof(int) * 8);
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	e7e9      	b.n	800d6c0 <xmp3fixpt_Dequantize+0x240>
		return -1;
 800d6ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d6f0:	4770      	bx	lr
		return -1;
 800d6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f6:	e7f4      	b.n	800d6e2 <xmp3fixpt_Dequantize+0x262>
 800d6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6fc:	e7f1      	b.n	800d6e2 <xmp3fixpt_Dequantize+0x262>
 800d6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d702:	e7ee      	b.n	800d6e2 <xmp3fixpt_Dequantize+0x262>
 800d704:	f04f 30ff 	mov.w	r0, #4294967295
 800d708:	e7eb      	b.n	800d6e2 <xmp3fixpt_Dequantize+0x262>
 800d70a:	f04f 30ff 	mov.w	r0, #4294967295
 800d70e:	e7e8      	b.n	800d6e2 <xmp3fixpt_Dequantize+0x262>
 800d710:	c0000001 	.word	0xc0000001

0800d714 <DequantBlock>:
 * Outputs:     dequantized samples in Q25 format
 *
 * Return:      bitwise-OR of the unsigned outputs (for guard bit calculations)
 **************************************************************************************/
static int DequantBlock(int *inbuf, int *outbuf, int num, int scale)
{
 800d714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d718:	b087      	sub	sp, #28
 800d71a:	4684      	mov	ip, r0
 800d71c:	4688      	mov	r8, r1
	int scalef, scalei, shift;
	int sx, x, y;
	int mask = 0;
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
 800d71e:	f003 0103 	and.w	r1, r3, #3
 800d722:	4c51      	ldr	r4, [pc, #324]	; (800d868 <DequantBlock+0x154>)
 800d724:	eb04 1481 	add.w	r4, r4, r1, lsl #6
	scalef = pow14[scale & 0x3];
 800d728:	4850      	ldr	r0, [pc, #320]	; (800d86c <DequantBlock+0x158>)
 800d72a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800d72e:	9101      	str	r1, [sp, #4]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800d730:	ea4f 0ea3 	mov.w	lr, r3, asr #2
 800d734:	4677      	mov	r7, lr
 800d736:	2f1f      	cmp	r7, #31
 800d738:	bfa8      	it	ge
 800d73a:	271f      	movge	r7, #31

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 800d73c:	4671      	mov	r1, lr
 800d73e:	291c      	cmp	r1, #28
 800d740:	bfa8      	it	ge
 800d742:	211c      	movge	r1, #28
 800d744:	3103      	adds	r1, #3
	shift = MAX(shift, 0);
 800d746:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	tab4[0] = 0;
 800d74a:	2000      	movs	r0, #0
 800d74c:	9002      	str	r0, [sp, #8]
	tab4[1] = tab16[1] >> shift;
 800d74e:	6863      	ldr	r3, [r4, #4]
 800d750:	410b      	asrs	r3, r1
 800d752:	9303      	str	r3, [sp, #12]
	tab4[2] = tab16[2] >> shift;
 800d754:	68a3      	ldr	r3, [r4, #8]
 800d756:	410b      	asrs	r3, r1
 800d758:	9304      	str	r3, [sp, #16]
	tab4[3] = tab16[3] >> shift;
 800d75a:	68e3      	ldr	r3, [r4, #12]
 800d75c:	410b      	asrs	r3, r1
 800d75e:	9305      	str	r3, [sp, #20]
 800d760:	e00f      	b.n	800d782 <DequantBlock+0x6e>

		if (x < 4) {

			y = tab4[x];

		} else if (x < 16) {
 800d762:	4943      	ldr	r1, [pc, #268]	; (800d870 <DequantBlock+0x15c>)
 800d764:	4019      	ands	r1, r3
 800d766:	b9f9      	cbnz	r1, 800d7a8 <DequantBlock+0x94>

			y = tab16[x];
 800d768:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800d76c:	f1be 0f00 	cmp.w	lr, #0
 800d770:	db17      	blt.n	800d7a2 <DequantBlock+0x8e>
 800d772:	413d      	asrs	r5, r7
				y >>= shift;
			}
		}

		/* sign and store */
		mask |= y;
 800d774:	4328      	orrs	r0, r5
		*outbuf++ = (sx < 0) ? -y : y;
 800d776:	2b00      	cmp	r3, #0
 800d778:	db71      	blt.n	800d85e <DequantBlock+0x14a>
 800d77a:	f848 5b04 	str.w	r5, [r8], #4

	} while (--num);
 800d77e:	3a01      	subs	r2, #1
 800d780:	d06f      	beq.n	800d862 <DequantBlock+0x14e>
		sx = *inbuf++;
 800d782:	f8dc 3000 	ldr.w	r3, [ip]
 800d786:	f10c 0c04 	add.w	ip, ip, #4
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 800d78a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
		if (x < 4) {
 800d78e:	4939      	ldr	r1, [pc, #228]	; (800d874 <DequantBlock+0x160>)
 800d790:	4019      	ands	r1, r3
 800d792:	2900      	cmp	r1, #0
 800d794:	d1e5      	bne.n	800d762 <DequantBlock+0x4e>
			y = tab4[x];
 800d796:	a906      	add	r1, sp, #24
 800d798:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800d79c:	f855 5c10 	ldr.w	r5, [r5, #-16]
 800d7a0:	e7e8      	b.n	800d774 <DequantBlock+0x60>
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800d7a2:	4279      	negs	r1, r7
 800d7a4:	408d      	lsls	r5, r1
 800d7a6:	e7e5      	b.n	800d774 <DequantBlock+0x60>
			if (x < 64) {
 800d7a8:	4933      	ldr	r1, [pc, #204]	; (800d878 <DequantBlock+0x164>)
 800d7aa:	4019      	ands	r1, r3
 800d7ac:	b959      	cbnz	r1, 800d7c6 <DequantBlock+0xb2>
				y = pow43[x-16];
 800d7ae:	3d10      	subs	r5, #16
 800d7b0:	4932      	ldr	r1, [pc, #200]	; (800d87c <DequantBlock+0x168>)
 800d7b2:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800d7b6:	9d01      	ldr	r5, [sp, #4]
 800d7b8:	fb81 6505 	smull	r6, r5, r1, r5
				shift = scalei - 3;
 800d7bc:	1ef9      	subs	r1, r7, #3
			if (shift < 0) {
 800d7be:	2900      	cmp	r1, #0
 800d7c0:	db42      	blt.n	800d848 <DequantBlock+0x134>
				y >>= shift;
 800d7c2:	410d      	asrs	r5, r1
 800d7c4:	e7d6      	b.n	800d774 <DequantBlock+0x60>
				x <<= 17;
 800d7c6:	0469      	lsls	r1, r5, #17
				if (x < 0x08000000)
 800d7c8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800d7cc:	da37      	bge.n	800d83e <DequantBlock+0x12a>
					x <<= 4, shift += 4;
 800d7ce:	0569      	lsls	r1, r5, #21
 800d7d0:	2504      	movs	r5, #4
 800d7d2:	9500      	str	r5, [sp, #0]
				if (x < 0x20000000)
 800d7d4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800d7d8:	da03      	bge.n	800d7e2 <DequantBlock+0xce>
					x <<= 2, shift += 2;
 800d7da:	0089      	lsls	r1, r1, #2
 800d7dc:	9d00      	ldr	r5, [sp, #0]
 800d7de:	3502      	adds	r5, #2
 800d7e0:	9500      	str	r5, [sp, #0]
				if (x < 0x40000000)
 800d7e2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800d7e6:	da03      	bge.n	800d7f0 <DequantBlock+0xdc>
					x <<= 1, shift += 1;
 800d7e8:	0049      	lsls	r1, r1, #1
 800d7ea:	9d00      	ldr	r5, [sp, #0]
 800d7ec:	3501      	adds	r5, #1
 800d7ee:	9500      	str	r5, [sp, #0]
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800d7f0:	4d23      	ldr	r5, [pc, #140]	; (800d880 <DequantBlock+0x16c>)
 800d7f2:	42a9      	cmp	r1, r5
 800d7f4:	dc26      	bgt.n	800d844 <DequantBlock+0x130>
 800d7f6:	4d23      	ldr	r5, [pc, #140]	; (800d884 <DequantBlock+0x170>)
 800d7f8:	4689      	mov	r9, r1
 800d7fa:	682e      	ldr	r6, [r5, #0]
 800d7fc:	fb86 a909 	smull	sl, r9, r6, r9
				y = MULSHIFT32(y, x) + coef[1];
 800d800:	686e      	ldr	r6, [r5, #4]
 800d802:	44b1      	add	r9, r6
 800d804:	468a      	mov	sl, r1
 800d806:	fb89 ba0a 	smull	fp, sl, r9, sl
				y = MULSHIFT32(y, x) + coef[2];
 800d80a:	68ae      	ldr	r6, [r5, #8]
 800d80c:	44b2      	add	sl, r6
 800d80e:	4689      	mov	r9, r1
 800d810:	fb8a b909 	smull	fp, r9, sl, r9
				y = MULSHIFT32(y, x) + coef[3];
 800d814:	68ee      	ldr	r6, [r5, #12]
 800d816:	44b1      	add	r9, r6
 800d818:	fb89 a101 	smull	sl, r1, r9, r1
				y = MULSHIFT32(y, x) + coef[4];
 800d81c:	692d      	ldr	r5, [r5, #16]
 800d81e:	4429      	add	r1, r5
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800d820:	4d19      	ldr	r5, [pc, #100]	; (800d888 <DequantBlock+0x174>)
 800d822:	9e00      	ldr	r6, [sp, #0]
 800d824:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
 800d828:	fb81 9505 	smull	r9, r5, r1, r5
 800d82c:	00e9      	lsls	r1, r5, #3
 800d82e:	9d01      	ldr	r5, [sp, #4]
 800d830:	fb81 9505 	smull	r9, r5, r1, r5
				shift = scalei - pow2exp[shift];
 800d834:	4915      	ldr	r1, [pc, #84]	; (800d88c <DequantBlock+0x178>)
 800d836:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800d83a:	1a79      	subs	r1, r7, r1
 800d83c:	e7bf      	b.n	800d7be <DequantBlock+0xaa>
				shift = 0;
 800d83e:	2500      	movs	r5, #0
 800d840:	9500      	str	r5, [sp, #0]
 800d842:	e7c7      	b.n	800d7d4 <DequantBlock+0xc0>
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800d844:	4d12      	ldr	r5, [pc, #72]	; (800d890 <DequantBlock+0x17c>)
 800d846:	e7d7      	b.n	800d7f8 <DequantBlock+0xe4>
				shift = -shift;
 800d848:	4249      	negs	r1, r1
				if (y > (0x7fffffff >> shift))
 800d84a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800d84e:	410e      	asrs	r6, r1
 800d850:	42ae      	cmp	r6, r5
 800d852:	db01      	blt.n	800d858 <DequantBlock+0x144>
					y <<= shift;
 800d854:	408d      	lsls	r5, r1
 800d856:	e78d      	b.n	800d774 <DequantBlock+0x60>
					y = 0x7fffffff;		/* clip */
 800d858:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800d85c:	e78a      	b.n	800d774 <DequantBlock+0x60>
		*outbuf++ = (sx < 0) ? -y : y;
 800d85e:	426d      	negs	r5, r5
 800d860:	e78b      	b.n	800d77a <DequantBlock+0x66>

	return mask;
}
 800d862:	b007      	add	sp, #28
 800d864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d868:	0801b674 	.word	0x0801b674
 800d86c:	0801b564 	.word	0x0801b564
 800d870:	7ffffff0 	.word	0x7ffffff0
 800d874:	7ffffffc 	.word	0x7ffffffc
 800d878:	7fffffc0 	.word	0x7fffffc0
 800d87c:	0801b5b4 	.word	0x0801b5b4
 800d880:	5a827999 	.word	0x5a827999
 800d884:	0801b550 	.word	0x0801b550
 800d888:	0801b594 	.word	0x0801b594
 800d88c:	0801b574 	.word	0x0801b574
 800d890:	0801b53c 	.word	0x0801b53c

0800d894 <xmp3fixpt_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 800d894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d898:	b08b      	sub	sp, #44	; 0x2c
 800d89a:	4682      	mov	sl, r0
 800d89c:	460d      	mov	r5, r1
 800d89e:	9204      	str	r2, [sp, #16]
 800d8a0:	469b      	mov	fp, r3
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 800d8a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	2b02      	cmp	r3, #2
 800d8a8:	d01f      	beq.n	800d8ea <xmp3fixpt_DequantChannel+0x56>
		cbEndS = 13;
	} else {
		/* long block */
		cbStartL = 0;
		cbEndL =   22;
		cbStartS = 13;
 800d8aa:	f04f 080d 	mov.w	r8, #13
		cbEndL =   22;
 800d8ae:	2316      	movs	r3, #22
 800d8b0:	9300      	str	r3, [sp, #0]
		cbEndS =   13;
	}
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	9307      	str	r3, [sp, #28]
 800d8b6:	9308      	str	r3, [sp, #32]
 800d8b8:	9309      	str	r3, [sp, #36]	; 0x24

	/* sfactScale = 0 --> quantizer step size = 2
	 * sfactScale = 1 --> quantizer step size = sqrt(2)
	 *   so sfactMultiplier = 2 or 4 (jump through globalGain by powers of 2 or sqrt(2))
	 */
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800d8ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8be:	3301      	adds	r3, #1
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	9301      	str	r3, [sp, #4]

	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
 800d8c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8c6:	689b      	ldr	r3, [r3, #8]
	if (fh->modeExt >> 1)
 800d8c8:	f8db 2020 	ldr.w	r2, [fp, #32]
 800d8cc:	0852      	lsrs	r2, r2, #1
 800d8ce:	d000      	beq.n	800d8d2 <xmp3fixpt_DequantChannel+0x3e>
		 globalGain -= 2;
 800d8d0:	3b02      	subs	r3, #2
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 800d8d2:	3302      	adds	r3, #2
 800d8d4:	9302      	str	r3, [sp, #8]
	gbMask = 0;
 800d8d6:	f04f 0900 	mov.w	r9, #0

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 800d8da:	464c      	mov	r4, r9
	i = 0;
 800d8dc:	464f      	mov	r7, r9
 800d8de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8e2:	9505      	str	r5, [sp, #20]
 800d8e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
	for (cb = 0; cb < cbEndL; cb++) {
 800d8e8:	e01a      	b.n	800d920 <xmp3fixpt_DequantChannel+0x8c>
		if (sis->mixedBlock) { 
 800d8ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8ec:	699b      	ldr	r3, [r3, #24]
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	b13b      	cbz	r3, 800d902 <xmp3fixpt_DequantChannel+0x6e>
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800d8f2:	f89b 3000 	ldrb.w	r3, [fp]
 800d8f6:	b93b      	cbnz	r3, 800d908 <xmp3fixpt_DequantChannel+0x74>
			cbStartS = 3; 
 800d8f8:	f04f 0803 	mov.w	r8, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800d8fc:	2308      	movs	r3, #8
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	e7d7      	b.n	800d8b2 <xmp3fixpt_DequantChannel+0x1e>
			cbStartS = 0;
 800d902:	f8dd 8000 	ldr.w	r8, [sp]
 800d906:	e7d4      	b.n	800d8b2 <xmp3fixpt_DequantChannel+0x1e>
			cbStartS = 3; 
 800d908:	f04f 0803 	mov.w	r8, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800d90c:	2306      	movs	r3, #6
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	e7cf      	b.n	800d8b2 <xmp3fixpt_DequantChannel+0x1e>
		i += nSamps;

		/* update highest non-zero critical band */
		if (nonZero) 
			cbMax[0] = cb;
		gbMask |= nonZero;
 800d912:	ea49 0903 	orr.w	r9, r9, r3

		if (i >= *nonZeroBound) 
 800d916:	f8d8 3000 	ldr.w	r3, [r8]
 800d91a:	42bb      	cmp	r3, r7
 800d91c:	dd25      	ble.n	800d96a <xmp3fixpt_DequantChannel+0xd6>
	for (cb = 0; cb < cbEndL; cb++) {
 800d91e:	4634      	mov	r4, r6
 800d920:	9b00      	ldr	r3, [sp, #0]
 800d922:	429c      	cmp	r4, r3
 800d924:	da21      	bge.n	800d96a <xmp3fixpt_DequantChannel+0xd6>
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800d926:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800d92a:	1c66      	adds	r6, r4, #1
 800d92c:	f933 5016 	ldrsh.w	r5, [r3, r6, lsl #1]
 800d930:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 800d934:	1aed      	subs	r5, r5, r3
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800d936:	9b02      	ldr	r3, [sp, #8]
 800d938:	f1c3 01d2 	rsb	r1, r3, #210	; 0xd2
 800d93c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d93e:	5d1b      	ldrb	r3, [r3, r4]
 800d940:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d942:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d944:	b10a      	cbz	r2, 800d94a <xmp3fixpt_DequantChannel+0xb6>
 800d946:	4a66      	ldr	r2, [pc, #408]	; (800dae0 <xmp3fixpt_DequantChannel+0x24c>)
 800d948:	5d12      	ldrb	r2, [r2, r4]
 800d94a:	4413      	add	r3, r2
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800d94c:	eb0a 0087 	add.w	r0, sl, r7, lsl #2
 800d950:	9a01      	ldr	r2, [sp, #4]
 800d952:	fb02 1303 	mla	r3, r2, r3, r1
 800d956:	462a      	mov	r2, r5
 800d958:	4601      	mov	r1, r0
 800d95a:	f7ff fedb 	bl	800d714 <DequantBlock>
		i += nSamps;
 800d95e:	442f      	add	r7, r5
		if (nonZero) 
 800d960:	4603      	mov	r3, r0
 800d962:	2800      	cmp	r0, #0
 800d964:	d0d5      	beq.n	800d912 <xmp3fixpt_DequantChannel+0x7e>
			cbMax[0] = cb;
 800d966:	9407      	str	r4, [sp, #28]
 800d968:	e7d3      	b.n	800d912 <xmp3fixpt_DequantChannel+0x7e>
			break;
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
 800d96a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d96e:	9d05      	ldr	r5, [sp, #20]
 800d970:	2300      	movs	r3, #0
 800d972:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d974:	6013      	str	r3, [r2, #0]
	cbi->cbEndL  = cbMax[0];
 800d976:	9a07      	ldr	r2, [sp, #28]
 800d978:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d97a:	614a      	str	r2, [r1, #20]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800d97c:	60cb      	str	r3, [r1, #12]
 800d97e:	608b      	str	r3, [r1, #8]
 800d980:	604b      	str	r3, [r1, #4]
	cbi->cbEndSMax = 0;
 800d982:	610b      	str	r3, [r1, #16]

	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 800d984:	f1b8 0f0b 	cmp.w	r8, #11
 800d988:	dc0d      	bgt.n	800d9a6 <xmp3fixpt_DequantChannel+0x112>
		return CLZ(gbMask) - 1;
	
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800d98a:	f8cd 801c 	str.w	r8, [sp, #28]
 800d98e:	f8cd 8020 	str.w	r8, [sp, #32]
 800d992:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800d996:	4643      	mov	r3, r8
 800d998:	46b8      	mov	r8, r7
 800d99a:	f8cd b014 	str.w	fp, [sp, #20]
 800d99e:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 800d9a2:	461f      	mov	r7, r3
 800d9a4:	e059      	b.n	800da5a <xmp3fixpt_DequantChannel+0x1c6>
	if (!x)
 800d9a6:	f1b9 0f00 	cmp.w	r9, #0
 800d9aa:	d104      	bne.n	800d9b6 <xmp3fixpt_DequantChannel+0x122>
		return (sizeof(int) * 8);
 800d9ac:	2320      	movs	r3, #32
 800d9ae:	e005      	b.n	800d9bc <xmp3fixpt_DequantChannel+0x128>
		numZeros++;
 800d9b0:	3301      	adds	r3, #1
		x <<= 1;
 800d9b2:	ea4f 0949 	mov.w	r9, r9, lsl #1
	while (!(x & 0x80000000)) {
 800d9b6:	f1b9 0f00 	cmp.w	r9, #0
 800d9ba:	daf9      	bge.n	800d9b0 <xmp3fixpt_DequantChannel+0x11c>
		return CLZ(gbMask) - 1;
 800d9bc:	1e58      	subs	r0, r3, #1
 800d9be:	e089      	b.n	800dad4 <xmp3fixpt_DequantChannel+0x240>
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);

			/* update highest non-zero critical band */
			if (nonZero)
				cbMax[w] = cb;
			gbMask |= nonZero;
 800d9c0:	ea49 0903 	orr.w	r9, r9, r3
		for (w = 0; w < 3; w++) {
 800d9c4:	3601      	adds	r6, #1
 800d9c6:	2e02      	cmp	r6, #2
 800d9c8:	dc26      	bgt.n	800da18 <xmp3fixpt_DequantChannel+0x184>
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 800d9ca:	9b02      	ldr	r3, [sp, #8]
 800d9cc:	f1c3 03d2 	rsb	r3, r3, #210	; 0xd2
 800d9d0:	f106 020a 	add.w	r2, r6, #10
 800d9d4:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d9d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9de:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800d9e2:	445a      	add	r2, fp
 800d9e4:	4432      	add	r2, r6
 800d9e6:	7dd2      	ldrb	r2, [r2, #23]
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800d9e8:	fb04 f106 	mul.w	r1, r4, r6
 800d9ec:	eb08 0001 	add.w	r0, r8, r1
 800d9f0:	9d01      	ldr	r5, [sp, #4]
 800d9f2:	fb05 3302 	mla	r3, r5, r2, r3
 800d9f6:	4622      	mov	r2, r4
 800d9f8:	9d00      	ldr	r5, [sp, #0]
 800d9fa:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800d9fe:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800da02:	f7ff fe87 	bl	800d714 <DequantBlock>
			if (nonZero)
 800da06:	4603      	mov	r3, r0
 800da08:	2800      	cmp	r0, #0
 800da0a:	d0d9      	beq.n	800d9c0 <xmp3fixpt_DequantChannel+0x12c>
				cbMax[w] = cb;
 800da0c:	aa0a      	add	r2, sp, #40	; 0x28
 800da0e:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800da12:	f842 7c0c 	str.w	r7, [r2, #-12]
 800da16:	e7d3      	b.n	800d9c0 <xmp3fixpt_DequantChannel+0x12c>
		}

		/* reorder blocks */
		buf = (ARRAY3 *)(sampleBuf + i);
 800da18:	9d00      	ldr	r5, [sp, #0]
 800da1a:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
		i += 3*nSamps;
 800da1e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800da22:	4498      	add	r8, r3
		for (j = 0; j < nSamps; j++) {
 800da24:	2300      	movs	r3, #0
 800da26:	e011      	b.n	800da4c <xmp3fixpt_DequantChannel+0x1b8>
			buf[j][0] = workBuf[0*nSamps + j];
 800da28:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800da2c:	eb06 0281 	add.w	r2, r6, r1, lsl #2
 800da30:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800da34:	f846 0021 	str.w	r0, [r6, r1, lsl #2]
			buf[j][1] = workBuf[1*nSamps + j];
 800da38:	1919      	adds	r1, r3, r4
 800da3a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800da3e:	6051      	str	r1, [r2, #4]
			buf[j][2] = workBuf[2*nSamps + j];
 800da40:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800da44:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800da48:	6091      	str	r1, [r2, #8]
		for (j = 0; j < nSamps; j++) {
 800da4a:	3301      	adds	r3, #1
 800da4c:	42a3      	cmp	r3, r4
 800da4e:	dbeb      	blt.n	800da28 <xmp3fixpt_DequantChannel+0x194>
		}

		ASSERT(3*nSamps <= MAX_REORDER_SAMPS);

		if (i >= *nonZeroBound) 
 800da50:	9b04      	ldr	r3, [sp, #16]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4543      	cmp	r3, r8
 800da56:	dd16      	ble.n	800da86 <xmp3fixpt_DequantChannel+0x1f2>
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800da58:	9f03      	ldr	r7, [sp, #12]
 800da5a:	2f0c      	cmp	r7, #12
 800da5c:	dc13      	bgt.n	800da86 <xmp3fixpt_DequantChannel+0x1f2>
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800da5e:	9b05      	ldr	r3, [sp, #20]
 800da60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da62:	1c7a      	adds	r2, r7, #1
 800da64:	9203      	str	r2, [sp, #12]
 800da66:	f107 0215 	add.w	r2, r7, #21
 800da6a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800da6e:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 800da72:	f107 0214 	add.w	r2, r7, #20
 800da76:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800da7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800da7e:	1ae4      	subs	r4, r4, r3
		for (w = 0; w < 3; w++) {
 800da80:	2600      	movs	r6, #0
 800da82:	9500      	str	r5, [sp, #0]
 800da84:	e79f      	b.n	800d9c6 <xmp3fixpt_DequantChannel+0x132>
	 * however, the original nzb is no longer necessarily true
	 *   for each cb, buf[][] is updated with 3*nSamps samples (i increases 3*nSamps each time)
	 *   (buf[j + 1][0] = 3 (input) samples ahead of buf[j][0])
     * so update nonZeroBound to i
	 */
	*nonZeroBound = i;
 800da86:	9b04      	ldr	r3, [sp, #16]
 800da88:	f8c3 8000 	str.w	r8, [r3]

	ASSERT(*nonZeroBound <= MAX_NSAMP);

	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800da8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da8e:	699b      	ldr	r3, [r3, #24]
 800da90:	b1bb      	cbz	r3, 800dac2 <xmp3fixpt_DequantChannel+0x22e>
 800da92:	2302      	movs	r3, #2
 800da94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800da96:	6013      	str	r3, [r2, #0]

	cbi->cbEndS[0] = cbMax[0];
 800da98:	9b07      	ldr	r3, [sp, #28]
 800da9a:	6053      	str	r3, [r2, #4]
	cbi->cbEndS[1] = cbMax[1];
 800da9c:	9908      	ldr	r1, [sp, #32]
 800da9e:	6091      	str	r1, [r2, #8]
	cbi->cbEndS[2] = cbMax[2];
 800daa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daa2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800daa4:	60c2      	str	r2, [r0, #12]

	cbi->cbEndSMax = cbMax[0];
 800daa6:	6103      	str	r3, [r0, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 800daa8:	428b      	cmp	r3, r1
 800daaa:	bfb8      	it	lt
 800daac:	460b      	movlt	r3, r1
 800daae:	6103      	str	r3, [r0, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800dab0:	4293      	cmp	r3, r2
 800dab2:	bfb8      	it	lt
 800dab4:	4613      	movlt	r3, r2
 800dab6:	6103      	str	r3, [r0, #16]
	if (!x)
 800dab8:	f1b9 0f00 	cmp.w	r9, #0
 800dabc:	d00d      	beq.n	800dada <xmp3fixpt_DequantChannel+0x246>
	numZeros = 0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	e004      	b.n	800dacc <xmp3fixpt_DequantChannel+0x238>
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800dac2:	2301      	movs	r3, #1
 800dac4:	e7e6      	b.n	800da94 <xmp3fixpt_DequantChannel+0x200>
		numZeros++;
 800dac6:	3301      	adds	r3, #1
		x <<= 1;
 800dac8:	ea4f 0949 	mov.w	r9, r9, lsl #1
	while (!(x & 0x80000000)) {
 800dacc:	f1b9 0f00 	cmp.w	r9, #0
 800dad0:	daf9      	bge.n	800dac6 <xmp3fixpt_DequantChannel+0x232>

	return CLZ(gbMask) - 1;
 800dad2:	1e58      	subs	r0, r3, #1
}
 800dad4:	b00b      	add	sp, #44	; 0x2c
 800dad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (sizeof(int) * 8);
 800dada:	2320      	movs	r3, #32
 800dadc:	e7f9      	b.n	800dad2 <xmp3fixpt_DequantChannel+0x23e>
 800dade:	bf00      	nop
 800dae0:	0801b774 	.word	0x0801b774

0800dae4 <DecodeHuffmanPairs>:
 * Notes:       assumes that nVals is an even number
 *              si_huff.bit tests every Huffman codeword in every table (though not
 *                necessarily all linBits outputs for x,y > 15)
 **************************************************************************************/
static int DecodeHuffmanPairs(int *xy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 800dae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae8:	b085      	sub	sp, #20
 800daea:	4614      	mov	r4, r2
 800daec:	9303      	str	r3, [sp, #12]
 800daee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	int cachedBits, padBits, len, startBits, linBits, maxBits, minBits;
	HuffTabType tabType;
	unsigned short cw, *tBase, *tCurr;
	unsigned int cache;

	if(nVals <= 0) 
 800daf0:	1e0d      	subs	r5, r1, #0
 800daf2:	f340 81c1 	ble.w	800de78 <DecodeHuffmanPairs+0x394>
		return 0;

	if (bitsLeft < 0)
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f2c0 81c2 	blt.w	800de80 <DecodeHuffmanPairs+0x39c>
		return -1;
	startBits = bitsLeft;

	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800dafc:	4bb4      	ldr	r3, [pc, #720]	; (800ddd0 <DecodeHuffmanPairs+0x2ec>)
 800dafe:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 800db02:	49b4      	ldr	r1, [pc, #720]	; (800ddd4 <DecodeHuffmanPairs+0x2f0>)
 800db04:	eb01 0346 	add.w	r3, r1, r6, lsl #1
 800db08:	9301      	str	r3, [sp, #4]
	linBits = huffTabLookup[tabIdx].linBits;
 800db0a:	4bb3      	ldr	r3, [pc, #716]	; (800ddd8 <DecodeHuffmanPairs+0x2f4>)
 800db0c:	f853 a034 	ldr.w	sl, [r3, r4, lsl #3]
	tabType = huffTabLookup[tabIdx].tabType;
 800db10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db14:	f893 b004 	ldrb.w	fp, [r3, #4]
	ASSERT(tabIdx >= 0);
	ASSERT(tabType != invalidTab);

	/* initially fill cache with any partial byte */
	cache = 0;
	cachedBits = (8 - bitOffset) & 0x07;
 800db18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db1a:	425b      	negs	r3, r3
	if (cachedBits)
 800db1c:	f013 0307 	ands.w	r3, r3, #7
 800db20:	d006      	beq.n	800db30 <DecodeHuffmanPairs+0x4c>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800db22:	f812 cb01 	ldrb.w	ip, [r2], #1
 800db26:	f1c3 0420 	rsb	r4, r3, #32
 800db2a:	fa0c fc04 	lsl.w	ip, ip, r4
 800db2e:	e001      	b.n	800db34 <DecodeHuffmanPairs+0x50>
	cache = 0;
 800db30:	f04f 0c00 	mov.w	ip, #0
	bitsLeft -= cachedBits;
 800db34:	9c03      	ldr	r4, [sp, #12]
 800db36:	eba4 0e03 	sub.w	lr, r4, r3

	if (tabType == noBits) {
 800db3a:	f1bb 0f00 	cmp.w	fp, #0
 800db3e:	d030      	beq.n	800dba2 <DecodeHuffmanPairs+0xbe>
		for (i = 0; i < nVals; i+=2) {
			xy[i+0] = 0;
			xy[i+1] = 0;
		}
		return 0;
	} else if (tabType == oneShot) {
 800db40:	f1bb 0f01 	cmp.w	fp, #1
 800db44:	d02f      	beq.n	800dba6 <DecodeHuffmanPairs+0xc2>
				nVals -= 2;
			}
		}
		bitsLeft += (cachedBits - padBits);
		return (startBits - bitsLeft);
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 800db46:	f1ab 0102 	sub.w	r1, fp, #2
 800db4a:	b2c9      	uxtb	r1, r1
 800db4c:	2901      	cmp	r1, #1
 800db4e:	f200 80ae 	bhi.w	800dcae <DecodeHuffmanPairs+0x1ca>
		tCurr = tBase;
 800db52:	9e01      	ldr	r6, [sp, #4]
		padBits = 0;
 800db54:	2100      	movs	r1, #0
 800db56:	9102      	str	r1, [sp, #8]
		while (nVals > 0) {
 800db58:	2d00      	cmp	r5, #0
 800db5a:	f340 8186 	ble.w	800de6a <DecodeHuffmanPairs+0x386>
			/* refill cache - assumes cachedBits <= 16 */
			if (bitsLeft >= 16) {
 800db5e:	f1be 0f0f 	cmp.w	lr, #15
 800db62:	f340 80a7 	ble.w	800dcb4 <DecodeHuffmanPairs+0x1d0>
				/* load 2 new bytes into left-justified cache */
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800db66:	4611      	mov	r1, r2
 800db68:	f811 4b02 	ldrb.w	r4, [r1], #2
 800db6c:	f1c3 0718 	rsb	r7, r3, #24
 800db70:	40bc      	lsls	r4, r7
 800db72:	ea4c 0c04 	orr.w	ip, ip, r4
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800db76:	7852      	ldrb	r2, [r2, #1]
 800db78:	f1c3 0410 	rsb	r4, r3, #16
 800db7c:	40a2      	lsls	r2, r4
 800db7e:	ea4c 0c02 	orr.w	ip, ip, r2
				cachedBits += 16;
 800db82:	3310      	adds	r3, #16
				bitsLeft -= 16;
 800db84:	f1ae 0e10 	sub.w	lr, lr, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800db88:	460a      	mov	r2, r1
 800db8a:	e131      	b.n	800ddf0 <DecodeHuffmanPairs+0x30c>
			xy[i+0] = 0;
 800db8c:	2200      	movs	r2, #0
 800db8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			xy[i+1] = 0;
 800db92:	1c59      	adds	r1, r3, #1
 800db94:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		for (i = 0; i < nVals; i+=2) {
 800db98:	3302      	adds	r3, #2
 800db9a:	42ab      	cmp	r3, r5
 800db9c:	dbf6      	blt.n	800db8c <DecodeHuffmanPairs+0xa8>
		return 0;
 800db9e:	2000      	movs	r0, #0
 800dba0:	e16b      	b.n	800de7a <DecodeHuffmanPairs+0x396>
		for (i = 0; i < nVals; i+=2) {
 800dba2:	2300      	movs	r3, #0
 800dba4:	e7f9      	b.n	800db9a <DecodeHuffmanPairs+0xb6>
		maxBits = GetMaxbits(tBase[0]);
 800dba6:	f831 4016 	ldrh.w	r4, [r1, r6, lsl #1]
 800dbaa:	f004 040f 	and.w	r4, r4, #15
		padBits = 0;
 800dbae:	2600      	movs	r6, #0
 800dbb0:	9f01      	ldr	r7, [sp, #4]
 800dbb2:	4692      	mov	sl, r2
		while (nVals > 0) {
 800dbb4:	2d00      	cmp	r5, #0
 800dbb6:	dd74      	ble.n	800dca2 <DecodeHuffmanPairs+0x1be>
			if (bitsLeft >= 16) {
 800dbb8:	f1be 0f0f 	cmp.w	lr, #15
 800dbbc:	dd14      	ble.n	800dbe8 <DecodeHuffmanPairs+0x104>
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800dbbe:	46d0      	mov	r8, sl
 800dbc0:	f818 1b02 	ldrb.w	r1, [r8], #2
 800dbc4:	f1c3 0918 	rsb	r9, r3, #24
 800dbc8:	fa01 f109 	lsl.w	r1, r1, r9
 800dbcc:	ea4c 0c01 	orr.w	ip, ip, r1
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800dbd0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800dbd4:	f1c3 0110 	rsb	r1, r3, #16
 800dbd8:	408a      	lsls	r2, r1
 800dbda:	ea4c 0c02 	orr.w	ip, ip, r2
				cachedBits += 16;
 800dbde:	3310      	adds	r3, #16
				bitsLeft -= 16;
 800dbe0:	f1ae 0e10 	sub.w	lr, lr, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800dbe4:	46c2      	mov	sl, r8
 800dbe6:	e033      	b.n	800dc50 <DecodeHuffmanPairs+0x16c>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800dbe8:	eb0e 0103 	add.w	r1, lr, r3
 800dbec:	2900      	cmp	r1, #0
 800dbee:	f340 814a 	ble.w	800de86 <DecodeHuffmanPairs+0x3a2>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800dbf2:	f1be 0f00 	cmp.w	lr, #0
 800dbf6:	dd09      	ble.n	800dc0c <DecodeHuffmanPairs+0x128>
 800dbf8:	4652      	mov	r2, sl
 800dbfa:	f812 6b01 	ldrb.w	r6, [r2], #1
 800dbfe:	f1c3 0818 	rsb	r8, r3, #24
 800dc02:	fa06 f608 	lsl.w	r6, r6, r8
 800dc06:	ea4c 0c06 	orr.w	ip, ip, r6
 800dc0a:	4692      	mov	sl, r2
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800dc0c:	f1be 0f08 	cmp.w	lr, #8
 800dc10:	dd09      	ble.n	800dc26 <DecodeHuffmanPairs+0x142>
 800dc12:	4652      	mov	r2, sl
 800dc14:	f812 6b01 	ldrb.w	r6, [r2], #1
 800dc18:	f1c3 0310 	rsb	r3, r3, #16
 800dc1c:	fa06 f303 	lsl.w	r3, r6, r3
 800dc20:	ea4c 0c03 	orr.w	ip, ip, r3
 800dc24:	4692      	mov	sl, r2
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800dc26:	1e4e      	subs	r6, r1, #1
 800dc28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc2c:	4133      	asrs	r3, r6
 800dc2e:	ea0c 0c03 	and.w	ip, ip, r3
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800dc32:	f101 030b 	add.w	r3, r1, #11
				padBits = 11;
 800dc36:	260b      	movs	r6, #11
				bitsLeft = 0;
 800dc38:	f04f 0e00 	mov.w	lr, #0
 800dc3c:	e008      	b.n	800dc50 <DecodeHuffmanPairs+0x16c>
				if (cachedBits < padBits)
 800dc3e:	42b3      	cmp	r3, r6
 800dc40:	f2c0 8124 	blt.w	800de8c <DecodeHuffmanPairs+0x3a8>
				*xy++ = x;
 800dc44:	4601      	mov	r1, r0
 800dc46:	f841 9b08 	str.w	r9, [r1], #8
				*xy++ = y;
 800dc4a:	6042      	str	r2, [r0, #4]
				nVals -= 2;
 800dc4c:	3d02      	subs	r5, #2
				*xy++ = y;
 800dc4e:	4608      	mov	r0, r1
			while (nVals > 0 && cachedBits >= 11 ) {
 800dc50:	2d00      	cmp	r5, #0
 800dc52:	bfc8      	it	gt
 800dc54:	2b0a      	cmpgt	r3, #10
 800dc56:	ddad      	ble.n	800dbb4 <DecodeHuffmanPairs+0xd0>
				cw = tBase[cache >> (32 - maxBits)];
 800dc58:	f1c4 0120 	rsb	r1, r4, #32
 800dc5c:	fa2c f101 	lsr.w	r1, ip, r1
 800dc60:	3101      	adds	r1, #1
 800dc62:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
				len = GetHLen(cw);
 800dc66:	ea4f 3811 	mov.w	r8, r1, lsr #12
				cachedBits -= len;
 800dc6a:	eba3 3311 	sub.w	r3, r3, r1, lsr #12
				cache <<= len;
 800dc6e:	fa0c fc08 	lsl.w	ip, ip, r8
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800dc72:	f3c1 1203 	ubfx	r2, r1, #4, #4
 800dc76:	4691      	mov	r9, r2
 800dc78:	b132      	cbz	r2, 800dc88 <DecodeHuffmanPairs+0x1a4>
 800dc7a:	f00c 4900 	and.w	r9, ip, #2147483648	; 0x80000000
 800dc7e:	ea42 0909 	orr.w	r9, r2, r9
 800dc82:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800dc86:	3b01      	subs	r3, #1
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800dc88:	f3c1 2103 	ubfx	r1, r1, #8, #4
 800dc8c:	460a      	mov	r2, r1
 800dc8e:	2900      	cmp	r1, #0
 800dc90:	d0d5      	beq.n	800dc3e <DecodeHuffmanPairs+0x15a>
 800dc92:	f00c 4800 	and.w	r8, ip, #2147483648	; 0x80000000
 800dc96:	ea41 0208 	orr.w	r2, r1, r8
 800dc9a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	e7cd      	b.n	800dc3e <DecodeHuffmanPairs+0x15a>
		bitsLeft += (cachedBits - padBits);
 800dca2:	1b9b      	subs	r3, r3, r6
 800dca4:	449e      	add	lr, r3
		return (startBits - bitsLeft);
 800dca6:	9b03      	ldr	r3, [sp, #12]
 800dca8:	eba3 000e 	sub.w	r0, r3, lr
 800dcac:	e0e5      	b.n	800de7a <DecodeHuffmanPairs+0x396>
		bitsLeft += (cachedBits - padBits);
		return (startBits - bitsLeft);
	}

	/* error in bitstream - trying to access unused Huffman table */
	return -1;
 800dcae:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb2:	e0e2      	b.n	800de7a <DecodeHuffmanPairs+0x396>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800dcb4:	eb0e 0103 	add.w	r1, lr, r3
 800dcb8:	2900      	cmp	r1, #0
 800dcba:	f340 80ea 	ble.w	800de92 <DecodeHuffmanPairs+0x3ae>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800dcbe:	f1be 0f00 	cmp.w	lr, #0
 800dcc2:	dd06      	ble.n	800dcd2 <DecodeHuffmanPairs+0x1ee>
 800dcc4:	f812 4b01 	ldrb.w	r4, [r2], #1
 800dcc8:	f1c3 0718 	rsb	r7, r3, #24
 800dccc:	40bc      	lsls	r4, r7
 800dcce:	ea4c 0c04 	orr.w	ip, ip, r4
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800dcd2:	f1be 0f08 	cmp.w	lr, #8
 800dcd6:	dd07      	ble.n	800dce8 <DecodeHuffmanPairs+0x204>
 800dcd8:	f812 4b01 	ldrb.w	r4, [r2], #1
 800dcdc:	f1c3 0310 	rsb	r3, r3, #16
 800dce0:	fa04 f303 	lsl.w	r3, r4, r3
 800dce4:	ea4c 0c03 	orr.w	ip, ip, r3
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800dce8:	1e4c      	subs	r4, r1, #1
 800dcea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcee:	4123      	asrs	r3, r4
 800dcf0:	ea0c 0c03 	and.w	ip, ip, r3
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800dcf4:	f101 030b 	add.w	r3, r1, #11
				padBits = 11;
 800dcf8:	210b      	movs	r1, #11
 800dcfa:	9102      	str	r1, [sp, #8]
				bitsLeft = 0;
 800dcfc:	f04f 0e00 	mov.w	lr, #0
 800dd00:	e076      	b.n	800ddf0 <DecodeHuffmanPairs+0x30c>
					cachedBits -= maxBits;
 800dd02:	1b1b      	subs	r3, r3, r4
					cache <<= maxBits;
 800dd04:	fa0c fc04 	lsl.w	ip, ip, r4
					tCurr += cw;
 800dd08:	eb06 0641 	add.w	r6, r6, r1, lsl #1
					continue;
 800dd0c:	e070      	b.n	800ddf0 <DecodeHuffmanPairs+0x30c>
					minBits = linBits + 1 + (y ? 1 : 0);
 800dd0e:	f10a 0801 	add.w	r8, sl, #1
 800dd12:	2900      	cmp	r1, #0
 800dd14:	bf18      	it	ne
 800dd16:	f108 0801 	addne.w	r8, r8, #1
					if (cachedBits + bitsLeft < minBits)
 800dd1a:	eb0e 0403 	add.w	r4, lr, r3
 800dd1e:	4544      	cmp	r4, r8
 800dd20:	da0d      	bge.n	800dd3e <DecodeHuffmanPairs+0x25a>
						return -1;
 800dd22:	f04f 30ff 	mov.w	r0, #4294967295
 800dd26:	e0a8      	b.n	800de7a <DecodeHuffmanPairs+0x396>
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800dd28:	f812 4b01 	ldrb.w	r4, [r2], #1
 800dd2c:	f1c3 0918 	rsb	r9, r3, #24
 800dd30:	fa04 f409 	lsl.w	r4, r4, r9
 800dd34:	ea4c 0c04 	orr.w	ip, ip, r4
						cachedBits += 8;
 800dd38:	3308      	adds	r3, #8
						bitsLeft -= 8;
 800dd3a:	f1ae 0e08 	sub.w	lr, lr, #8
					while (cachedBits < minBits) {
 800dd3e:	4543      	cmp	r3, r8
 800dd40:	dbf2      	blt.n	800dd28 <DecodeHuffmanPairs+0x244>
					if (bitsLeft < 0) {
 800dd42:	f1be 0f00 	cmp.w	lr, #0
 800dd46:	db09      	blt.n	800dd5c <DecodeHuffmanPairs+0x278>
					x += (int)(cache >> (32 - linBits));
 800dd48:	f1ca 0420 	rsb	r4, sl, #32
 800dd4c:	fa2c f404 	lsr.w	r4, ip, r4
 800dd50:	4426      	add	r6, r4
					cachedBits -= linBits;
 800dd52:	eba3 030a 	sub.w	r3, r3, sl
					cache <<= linBits;
 800dd56:	fa0c fc0a 	lsl.w	ip, ip, sl
 800dd5a:	e06f      	b.n	800de3c <DecodeHuffmanPairs+0x358>
						cachedBits += bitsLeft;
 800dd5c:	4473      	add	r3, lr
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800dd5e:	f103 3eff 	add.w	lr, r3, #4294967295
 800dd62:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dd66:	fa44 f40e 	asr.w	r4, r4, lr
 800dd6a:	ea0c 0c04 	and.w	ip, ip, r4
						bitsLeft = 0;
 800dd6e:	f04f 0e00 	mov.w	lr, #0
 800dd72:	e7e9      	b.n	800dd48 <DecodeHuffmanPairs+0x264>
					minBits = linBits + 1;
 800dd74:	f10a 0701 	add.w	r7, sl, #1
					if (cachedBits + bitsLeft < minBits)
 800dd78:	eb0e 0403 	add.w	r4, lr, r3
 800dd7c:	42bc      	cmp	r4, r7
 800dd7e:	da0d      	bge.n	800dd9c <DecodeHuffmanPairs+0x2b8>
						return -1;
 800dd80:	f04f 30ff 	mov.w	r0, #4294967295
 800dd84:	e079      	b.n	800de7a <DecodeHuffmanPairs+0x396>
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800dd86:	f812 4b01 	ldrb.w	r4, [r2], #1
 800dd8a:	f1c3 0818 	rsb	r8, r3, #24
 800dd8e:	fa04 f408 	lsl.w	r4, r4, r8
 800dd92:	ea4c 0c04 	orr.w	ip, ip, r4
						cachedBits += 8;
 800dd96:	3308      	adds	r3, #8
						bitsLeft -= 8;
 800dd98:	f1ae 0e08 	sub.w	lr, lr, #8
					while (cachedBits < minBits) {
 800dd9c:	42bb      	cmp	r3, r7
 800dd9e:	dbf2      	blt.n	800dd86 <DecodeHuffmanPairs+0x2a2>
					if (bitsLeft < 0) {
 800dda0:	f1be 0f00 	cmp.w	lr, #0
 800dda4:	db09      	blt.n	800ddba <DecodeHuffmanPairs+0x2d6>
					y += (int)(cache >> (32 - linBits));
 800dda6:	f1ca 0420 	rsb	r4, sl, #32
 800ddaa:	fa2c f404 	lsr.w	r4, ip, r4
 800ddae:	4421      	add	r1, r4
					cachedBits -= linBits;
 800ddb0:	eba3 030a 	sub.w	r3, r3, sl
					cache <<= linBits;
 800ddb4:	fa0c fc0a 	lsl.w	ip, ip, sl
 800ddb8:	e04e      	b.n	800de58 <DecodeHuffmanPairs+0x374>
						cachedBits += bitsLeft;
 800ddba:	4473      	add	r3, lr
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ddbc:	1e5f      	subs	r7, r3, #1
 800ddbe:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ddc2:	413c      	asrs	r4, r7
 800ddc4:	ea0c 0c04 	and.w	ip, ip, r4
						bitsLeft = 0;
 800ddc8:	f04f 0e00 	mov.w	lr, #0
 800ddcc:	e7eb      	b.n	800dda6 <DecodeHuffmanPairs+0x2c2>
 800ddce:	bf00      	nop
 800ddd0:	0801b88c 	.word	0x0801b88c
 800ddd4:	0801b90c 	.word	0x0801b90c
 800ddd8:	0801b78c 	.word	0x0801b78c
				if (cachedBits < padBits)
 800dddc:	9c02      	ldr	r4, [sp, #8]
 800ddde:	42a3      	cmp	r3, r4
 800dde0:	db5a      	blt.n	800de98 <DecodeHuffmanPairs+0x3b4>
				*xy++ = x;
 800dde2:	4604      	mov	r4, r0
 800dde4:	f844 6b08 	str.w	r6, [r4], #8
				*xy++ = y;
 800dde8:	6041      	str	r1, [r0, #4]
				nVals -= 2;
 800ddea:	3d02      	subs	r5, #2
				tCurr = tBase;
 800ddec:	9e01      	ldr	r6, [sp, #4]
				*xy++ = y;
 800ddee:	4620      	mov	r0, r4
			while (nVals > 0 && cachedBits >= 11 ) {
 800ddf0:	2d00      	cmp	r5, #0
 800ddf2:	bfc8      	it	gt
 800ddf4:	2b0a      	cmpgt	r3, #10
 800ddf6:	f77f aeaf 	ble.w	800db58 <DecodeHuffmanPairs+0x74>
				maxBits = GetMaxbits(tCurr[0]);
 800ddfa:	8834      	ldrh	r4, [r6, #0]
 800ddfc:	f004 040f 	and.w	r4, r4, #15
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 800de00:	f1c4 0120 	rsb	r1, r4, #32
 800de04:	fa2c f101 	lsr.w	r1, ip, r1
 800de08:	3101      	adds	r1, #1
 800de0a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
				if (!len) {
 800de0e:	0b0f      	lsrs	r7, r1, #12
 800de10:	f43f af77 	beq.w	800dd02 <DecodeHuffmanPairs+0x21e>
				cachedBits -= len;
 800de14:	1bdb      	subs	r3, r3, r7
				cache <<= len;
 800de16:	fa0c fc07 	lsl.w	ip, ip, r7
				x = GetCWX(cw);
 800de1a:	f3c1 1603 	ubfx	r6, r1, #4, #4
				y = GetCWY(cw);
 800de1e:	f3c1 2103 	ubfx	r1, r1, #8, #4
				if (x == 15 && tabType == loopLinbits) {
 800de22:	f1bb 0f03 	cmp.w	fp, #3
 800de26:	bf14      	ite	ne
 800de28:	2700      	movne	r7, #0
 800de2a:	2701      	moveq	r7, #1
 800de2c:	2e0f      	cmp	r6, #15
 800de2e:	bf14      	ite	ne
 800de30:	2400      	movne	r4, #0
 800de32:	f007 0401 	andeq.w	r4, r7, #1
 800de36:	2c00      	cmp	r4, #0
 800de38:	f47f af69 	bne.w	800dd0e <DecodeHuffmanPairs+0x22a>
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800de3c:	b12e      	cbz	r6, 800de4a <DecodeHuffmanPairs+0x366>
 800de3e:	f00c 4400 	and.w	r4, ip, #2147483648	; 0x80000000
 800de42:	4326      	orrs	r6, r4
 800de44:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800de48:	3b01      	subs	r3, #1
				if (y == 15 && tabType == loopLinbits) {
 800de4a:	290f      	cmp	r1, #15
 800de4c:	bf14      	ite	ne
 800de4e:	2700      	movne	r7, #0
 800de50:	f007 0701 	andeq.w	r7, r7, #1
 800de54:	2f00      	cmp	r7, #0
 800de56:	d18d      	bne.n	800dd74 <DecodeHuffmanPairs+0x290>
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800de58:	2900      	cmp	r1, #0
 800de5a:	d0bf      	beq.n	800dddc <DecodeHuffmanPairs+0x2f8>
 800de5c:	f00c 4400 	and.w	r4, ip, #2147483648	; 0x80000000
 800de60:	4321      	orrs	r1, r4
 800de62:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800de66:	3b01      	subs	r3, #1
 800de68:	e7b8      	b.n	800dddc <DecodeHuffmanPairs+0x2f8>
		bitsLeft += (cachedBits - padBits);
 800de6a:	9a02      	ldr	r2, [sp, #8]
 800de6c:	1a9b      	subs	r3, r3, r2
 800de6e:	449e      	add	lr, r3
		return (startBits - bitsLeft);
 800de70:	9b03      	ldr	r3, [sp, #12]
 800de72:	eba3 000e 	sub.w	r0, r3, lr
 800de76:	e000      	b.n	800de7a <DecodeHuffmanPairs+0x396>
		return 0;
 800de78:	2000      	movs	r0, #0
}
 800de7a:	b005      	add	sp, #20
 800de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 800de80:	f04f 30ff 	mov.w	r0, #4294967295
 800de84:	e7f9      	b.n	800de7a <DecodeHuffmanPairs+0x396>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800de86:	f04f 30ff 	mov.w	r0, #4294967295
 800de8a:	e7f6      	b.n	800de7a <DecodeHuffmanPairs+0x396>
					return -1;
 800de8c:	f04f 30ff 	mov.w	r0, #4294967295
 800de90:	e7f3      	b.n	800de7a <DecodeHuffmanPairs+0x396>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800de92:	f04f 30ff 	mov.w	r0, #4294967295
 800de96:	e7f0      	b.n	800de7a <DecodeHuffmanPairs+0x396>
					return -1;
 800de98:	f04f 30ff 	mov.w	r0, #4294967295
 800de9c:	e7ed      	b.n	800de7a <DecodeHuffmanPairs+0x396>
 800de9e:	bf00      	nop

0800dea0 <DecodeHuffmanQuads>:
 *                of the quad word after which all samples are 0)
 * 
 * Notes:        si_huff.bit tests every vwxy output in both quad tables
 **************************************************************************************/
static int DecodeHuffmanQuads(int *vwxy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 800dea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	b083      	sub	sp, #12
 800dea6:	9101      	str	r1, [sp, #4]
	int i, v, w, x, y;
	int len, maxBits, cachedBits, padBits;
	unsigned int cache;
	unsigned char cw, *tBase;

	if (bitsLeft <= 0)
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f340 80a1 	ble.w	800dff0 <DecodeHuffmanQuads+0x150>
 800deae:	4684      	mov	ip, r0
		return 0;

	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 800deb0:	4951      	ldr	r1, [pc, #324]	; (800dff8 <DecodeHuffmanQuads+0x158>)
 800deb2:	f851 8022 	ldr.w	r8, [r1, r2, lsl #2]
	maxBits = quadTabMaxBits[tabIdx];
 800deb6:	4951      	ldr	r1, [pc, #324]	; (800dffc <DecodeHuffmanQuads+0x15c>)
 800deb8:	f851 9022 	ldr.w	r9, [r1, r2, lsl #2]

	/* initially fill cache with any partial byte */
	cache = 0;
	cachedBits = (8 - bitOffset) & 0x07;
 800debc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800debe:	4249      	negs	r1, r1
	if (cachedBits)
 800dec0:	f011 0107 	ands.w	r1, r1, #7
 800dec4:	d025      	beq.n	800df12 <DecodeHuffmanQuads+0x72>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800dec6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dec8:	f810 4b01 	ldrb.w	r4, [r0], #1
 800decc:	f1c1 0220 	rsb	r2, r1, #32
 800ded0:	fa04 f202 	lsl.w	r2, r4, r2
 800ded4:	900c      	str	r0, [sp, #48]	; 0x30
	bitsLeft -= cachedBits;
 800ded6:	eba3 0a01 	sub.w	sl, r3, r1

	i = padBits = 0;
 800deda:	2700      	movs	r7, #0
 800dedc:	4638      	mov	r0, r7
	while (i < (nVals - 3)) {
 800dede:	9b01      	ldr	r3, [sp, #4]
 800dee0:	1edc      	subs	r4, r3, #3
 800dee2:	4284      	cmp	r4, r0
 800dee4:	f340 8085 	ble.w	800dff2 <DecodeHuffmanQuads+0x152>
		/* refill cache - assumes cachedBits <= 16 */
		if (bitsLeft >= 16) {
 800dee8:	f1ba 0f0f 	cmp.w	sl, #15
 800deec:	dd13      	ble.n	800df16 <DecodeHuffmanQuads+0x76>
			/* load 2 new bytes into left-justified cache */
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800deee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800def0:	f815 3b02 	ldrb.w	r3, [r5], #2
 800def4:	f1c1 0618 	rsb	r6, r1, #24
 800def8:	40b3      	lsls	r3, r6
 800defa:	431a      	orrs	r2, r3
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800defc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800defe:	785b      	ldrb	r3, [r3, #1]
 800df00:	f1c1 0610 	rsb	r6, r1, #16
 800df04:	40b3      	lsls	r3, r6
 800df06:	431a      	orrs	r2, r3
			cachedBits += 16;
 800df08:	3110      	adds	r1, #16
			bitsLeft -= 16;
 800df0a:	f1aa 0a10 	sub.w	sl, sl, #16
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800df0e:	950c      	str	r5, [sp, #48]	; 0x30
 800df10:	e034      	b.n	800df7c <DecodeHuffmanQuads+0xdc>
	cache = 0;
 800df12:	2200      	movs	r2, #0
 800df14:	e7df      	b.n	800ded6 <DecodeHuffmanQuads+0x36>
		} else {
			/* last time through, pad cache with zeros and drain cache */
			if (cachedBits + bitsLeft <= 0) return i;
 800df16:	eb0a 0301 	add.w	r3, sl, r1
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	dd69      	ble.n	800dff2 <DecodeHuffmanQuads+0x152>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800df1e:	f1ba 0f00 	cmp.w	sl, #0
 800df22:	dd07      	ble.n	800df34 <DecodeHuffmanQuads+0x94>
 800df24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800df26:	f815 6b01 	ldrb.w	r6, [r5], #1
 800df2a:	f1c1 0718 	rsb	r7, r1, #24
 800df2e:	40be      	lsls	r6, r7
 800df30:	4332      	orrs	r2, r6
 800df32:	950c      	str	r5, [sp, #48]	; 0x30
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800df34:	f1ba 0f08 	cmp.w	sl, #8
 800df38:	dd08      	ble.n	800df4c <DecodeHuffmanQuads+0xac>
 800df3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800df3c:	f815 6b01 	ldrb.w	r6, [r5], #1
 800df40:	f1c1 0110 	rsb	r1, r1, #16
 800df44:	fa06 f101 	lsl.w	r1, r6, r1
 800df48:	430a      	orrs	r2, r1
 800df4a:	950c      	str	r5, [sp, #48]	; 0x30
			cachedBits += bitsLeft;
			bitsLeft = 0;

			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800df4c:	1e5d      	subs	r5, r3, #1
 800df4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800df52:	4129      	asrs	r1, r5
 800df54:	400a      	ands	r2, r1
			padBits = 10;
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800df56:	f103 010a 	add.w	r1, r3, #10
			padBits = 10;
 800df5a:	270a      	movs	r7, #10
			bitsLeft = 0;
 800df5c:	f04f 0a00 	mov.w	sl, #0
 800df60:	e00c      	b.n	800df7c <DecodeHuffmanQuads+0xdc>
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}

			/* ran out of bits - okay (means we're done) */
			if (cachedBits < padBits)
 800df62:	42b9      	cmp	r1, r7
 800df64:	db45      	blt.n	800dff2 <DecodeHuffmanQuads+0x152>
				return i;

			*vwxy++ = v;
 800df66:	f8cc e000 	str.w	lr, [ip]
			*vwxy++ = w;
 800df6a:	f8cc 6004 	str.w	r6, [ip, #4]
			*vwxy++ = x;
 800df6e:	f8cc 5008 	str.w	r5, [ip, #8]
			*vwxy++ = y;
 800df72:	f8cc b00c 	str.w	fp, [ip, #12]
			i += 4;
 800df76:	3004      	adds	r0, #4
			*vwxy++ = y;
 800df78:	f10c 0c10 	add.w	ip, ip, #16
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800df7c:	4284      	cmp	r4, r0
 800df7e:	ddae      	ble.n	800dede <DecodeHuffmanQuads+0x3e>
 800df80:	2909      	cmp	r1, #9
 800df82:	ddac      	ble.n	800dede <DecodeHuffmanQuads+0x3e>
			cw = tBase[cache >> (32 - maxBits)];
 800df84:	f1c9 0320 	rsb	r3, r9, #32
 800df88:	fa22 f303 	lsr.w	r3, r2, r3
 800df8c:	4443      	add	r3, r8
 800df8e:	4d1c      	ldr	r5, [pc, #112]	; (800e000 <DecodeHuffmanQuads+0x160>)
 800df90:	5d5b      	ldrb	r3, [r3, r5]
			len = GetHLenQ(cw);
 800df92:	091d      	lsrs	r5, r3, #4
			cachedBits -= len;
 800df94:	eba1 1113 	sub.w	r1, r1, r3, lsr #4
			cache <<= len;
 800df98:	40aa      	lsls	r2, r5
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800df9a:	f3c3 05c0 	ubfx	r5, r3, #3, #1
 800df9e:	46ae      	mov	lr, r5
 800dfa0:	b12d      	cbz	r5, 800dfae <DecodeHuffmanQuads+0x10e>
 800dfa2:	f002 4e00 	and.w	lr, r2, #2147483648	; 0x80000000
 800dfa6:	ea45 0e0e 	orr.w	lr, r5, lr
 800dfaa:	0052      	lsls	r2, r2, #1
 800dfac:	3901      	subs	r1, #1
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 800dfae:	f3c3 0580 	ubfx	r5, r3, #2, #1
 800dfb2:	462e      	mov	r6, r5
 800dfb4:	b125      	cbz	r5, 800dfc0 <DecodeHuffmanQuads+0x120>
 800dfb6:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800dfba:	432e      	orrs	r6, r5
 800dfbc:	0052      	lsls	r2, r2, #1
 800dfbe:	3901      	subs	r1, #1
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800dfc0:	f3c3 0b40 	ubfx	fp, r3, #1, #1
 800dfc4:	465d      	mov	r5, fp
 800dfc6:	f1bb 0f00 	cmp.w	fp, #0
 800dfca:	d005      	beq.n	800dfd8 <DecodeHuffmanQuads+0x138>
 800dfcc:	f002 4500 	and.w	r5, r2, #2147483648	; 0x80000000
 800dfd0:	ea4b 0505 	orr.w	r5, fp, r5
 800dfd4:	0052      	lsls	r2, r2, #1
 800dfd6:	3901      	subs	r1, #1
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800dfd8:	f003 0301 	and.w	r3, r3, #1
 800dfdc:	469b      	mov	fp, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d0bf      	beq.n	800df62 <DecodeHuffmanQuads+0xc2>
 800dfe2:	f002 4b00 	and.w	fp, r2, #2147483648	; 0x80000000
 800dfe6:	ea43 0b0b 	orr.w	fp, r3, fp
 800dfea:	0052      	lsls	r2, r2, #1
 800dfec:	3901      	subs	r1, #1
 800dfee:	e7b8      	b.n	800df62 <DecodeHuffmanQuads+0xc2>
		return 0;
 800dff0:	2000      	movs	r0, #0
		}
	}

	/* decoded max number of quad values */
	return i;
}
 800dff2:	b003      	add	sp, #12
 800dff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff8:	0801da38 	.word	0x0801da38
 800dffc:	0801da30 	.word	0x0801da30
 800e000:	0801da40 	.word	0x0801da40

0800e004 <xmp3fixpt_DecodeHuffman>:
 *                byte located at buf + offset)
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 800e004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e008:	b089      	sub	sp, #36	; 0x24
 800e00a:	9102      	str	r1, [sp, #8]
 800e00c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800e00e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	SideInfoSub *sis;
	ScaleFactorInfo *sfi;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS) {
 800e010:	2800      	cmp	r0, #0
 800e012:	f000 8118 	beq.w	800e246 <xmp3fixpt_DecodeHuffman+0x242>
 800e016:	4691      	mov	r9, r2
 800e018:	461e      	mov	r6, r3
 800e01a:	6802      	ldr	r2, [r0, #0]
 800e01c:	2a00      	cmp	r2, #0
 800e01e:	f000 8115 	beq.w	800e24c <xmp3fixpt_DecodeHuffman+0x248>
 800e022:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800e026:	f1ba 0f00 	cmp.w	sl, #0
 800e02a:	f000 8112 	beq.w	800e252 <xmp3fixpt_DecodeHuffman+0x24e>
 800e02e:	6881      	ldr	r1, [r0, #8]
 800e030:	2900      	cmp	r1, #0
 800e032:	f000 8111 	beq.w	800e258 <xmp3fixpt_DecodeHuffman+0x254>
 800e036:	68c7      	ldr	r7, [r0, #12]
 800e038:	2f00      	cmp	r7, #0
 800e03a:	f000 8110 	beq.w	800e25e <xmp3fixpt_DecodeHuffman+0x25a>
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
	sis = &si->sis[gr][ch];
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);

	if (huffBlockBits < 0) {
 800e03e:	2e00      	cmp	r6, #0
 800e040:	f2c0 8110 	blt.w	800e264 <xmp3fixpt_DecodeHuffman+0x260>
		i = 1;
		return -1;
	}

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800e044:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800e048:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800e04c:	011b      	lsls	r3, r3, #4
 800e04e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e052:	4453      	add	r3, sl
 800e054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e056:	b143      	cbz	r3, 800e06a <xmp3fixpt_DecodeHuffman+0x66>
 800e058:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800e05c:	011b      	lsls	r3, r3, #4
 800e05e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e062:	4453      	add	r3, sl
 800e064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e066:	2b02      	cmp	r3, #2
 800e068:	d072      	beq.n	800e150 <xmp3fixpt_DecodeHuffman+0x14c>
				r1Start = fh->sfBand->l[6] + 2*w;
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800e06a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800e06c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800e070:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800e074:	0109      	lsls	r1, r1, #4
 800e076:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e07a:	4451      	add	r1, sl
 800e07c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800e07e:	3301      	adds	r3, #1
 800e080:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800e084:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800e086:	440b      	add	r3, r1
 800e088:	3301      	adds	r3, #1
 800e08a:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800e08e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800e092:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800e096:	011b      	lsls	r3, r3, #4
 800e098:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800e09c:	4453      	add	r3, sl
 800e09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a0:	005b      	lsls	r3, r3, #1
 800e0a2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e0a6:	bfa8      	it	ge
 800e0a8:	f44f 7310 	movge.w	r3, #576	; 0x240
 800e0ac:	469b      	mov	fp, r3
 800e0ae:	9307      	str	r3, [sp, #28]
	rEnd[2] = MIN(r2Start, rEnd[3]);
 800e0b0:	4299      	cmp	r1, r3
 800e0b2:	bfa8      	it	ge
 800e0b4:	4619      	movge	r1, r3
 800e0b6:	9106      	str	r1, [sp, #24]
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	bfa8      	it	ge
 800e0bc:	461a      	movge	r2, r3
 800e0be:	9205      	str	r2, [sp, #20]
	rEnd[0] = 0;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	9304      	str	r3, [sp, #16]

	/* rounds up to first all-zero pair (we don't check last pair for (x,y) == (non-zero, zero)) */
	hi->nonZeroBound[ch] = rEnd[3];
 800e0c4:	f504 6290 	add.w	r2, r4, #1152	; 0x480
 800e0c8:	f847 b022 	str.w	fp, [r7, r2, lsl #2]

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
	for (i = 0; i < 3; i++) {
 800e0cc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e0d0:	f8cd b00c 	str.w	fp, [sp, #12]
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	dc7a      	bgt.n	800e1ce <xmp3fixpt_DecodeHuffman+0x1ca>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e0d8:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800e0dc:	eb07 2000 	add.w	r0, r7, r0, lsl #8
 800e0e0:	aa08      	add	r2, sp, #32
 800e0e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e0e6:	f852 cc10 	ldr.w	ip, [r2, #-16]
 800e0ea:	f103 0b01 	add.w	fp, r3, #1
 800e0ee:	aa08      	add	r2, sp, #32
 800e0f0:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 800e0f4:	f852 1c10 	ldr.w	r1, [r2, #-16]
 800e0f8:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
 800e0fc:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800e100:	0092      	lsls	r2, r2, #2
 800e102:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 800e106:	4413      	add	r3, r2
 800e108:	3310      	adds	r3, #16
 800e10a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800e10e:	685a      	ldr	r2, [r3, #4]
 800e110:	f8d9 3000 	ldr.w	r3, [r9]
 800e114:	9301      	str	r3, [sp, #4]
 800e116:	f8cd 8000 	str.w	r8, [sp]
 800e11a:	4633      	mov	r3, r6
 800e11c:	eba1 010c 	sub.w	r1, r1, ip
 800e120:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800e124:	f7ff fcde 	bl	800dae4 <DecodeHuffmanPairs>
		if (bitsUsed < 0 || bitsUsed > bitsLeft) {
 800e128:	4286      	cmp	r6, r0
 800e12a:	bfac      	ite	ge
 800e12c:	2300      	movge	r3, #0
 800e12e:	2301      	movlt	r3, #1
 800e130:	ea53 73d0 	orrs.w	r3, r3, r0, lsr #31
 800e134:	f040 8099 	bne.w	800e26a <xmp3fixpt_DecodeHuffman+0x266>
			i = 1;
			return -1;
		}

		/* update bitstream position */
		buf += (bitsUsed + *bitOffset) >> 3;
 800e138:	f8d9 3000 	ldr.w	r3, [r9]
 800e13c:	4403      	add	r3, r0
 800e13e:	eb08 08e3 	add.w	r8, r8, r3, asr #3
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	f8c9 3000 	str.w	r3, [r9]
		bitsLeft -= bitsUsed;
 800e14a:	1a36      	subs	r6, r6, r0
	for (i = 0; i < 3; i++) {
 800e14c:	465b      	mov	r3, fp
 800e14e:	e7c1      	b.n	800e0d4 <xmp3fixpt_DecodeHuffman+0xd0>
		if (sis->mixedBlock == 0) {
 800e150:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800e154:	011b      	lsls	r3, r3, #4
 800e156:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e15a:	4453      	add	r3, sl
 800e15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e15e:	b9bb      	cbnz	r3, 800e190 <xmp3fixpt_DecodeHuffman+0x18c>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800e160:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e162:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800e166:	011b      	lsls	r3, r3, #4
 800e168:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e16c:	4453      	add	r3, sl
 800e16e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e170:	3101      	adds	r1, #1
 800e172:	4b3f      	ldr	r3, [pc, #252]	; (800e270 <xmp3fixpt_DecodeHuffman+0x26c>)
 800e174:	fb83 0301 	smull	r0, r3, r3, r1
 800e178:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 800e17c:	3314      	adds	r3, #20
 800e17e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800e182:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e186:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800e18a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e18e:	e77e      	b.n	800e08e <xmp3fixpt_DecodeHuffman+0x8a>
			if (fh->ver == MPEG1) {
 800e190:	7813      	ldrb	r3, [r2, #0]
 800e192:	b97b      	cbnz	r3, 800e1b4 <xmp3fixpt_DecodeHuffman+0x1b0>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800e194:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e196:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800e19a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800e19e:	011b      	lsls	r3, r3, #4
 800e1a0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e1a4:	4453      	add	r3, sl
 800e1a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800e1ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e1b2:	e76c      	b.n	800e08e <xmp3fixpt_DecodeHuffman+0x8a>
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 800e1b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e1b6:	f9b2 3036 	ldrsh.w	r3, [r2, #54]	; 0x36
 800e1ba:	f9b2 1034 	ldrsh.w	r1, [r2, #52]	; 0x34
 800e1be:	1a5b      	subs	r3, r3, r1
				r1Start = fh->sfBand->l[6] + 2*w;
 800e1c0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800e1c4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800e1c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e1cc:	e75f      	b.n	800e08e <xmp3fixpt_DecodeHuffman+0x8a>
	}

	/* decode Huffman quads (if any) */
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e1ce:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e1d2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800e1d6:	eb07 2000 	add.w	r0, r7, r0, lsl #8
 800e1da:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800e1de:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800e1e2:	012d      	lsls	r5, r5, #4
 800e1e4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e1e8:	4455      	add	r5, sl
 800e1ea:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800e1ec:	f8d9 3000 	ldr.w	r3, [r9]
 800e1f0:	9301      	str	r3, [sp, #4]
 800e1f2:	f8cd 8000 	str.w	r8, [sp]
 800e1f6:	4633      	mov	r3, r6
 800e1f8:	f5cb 7110 	rsb	r1, fp, #576	; 0x240
 800e1fc:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800e200:	f7ff fe4e 	bl	800dea0 <DecodeHuffmanQuads>
 800e204:	f504 6390 	add.w	r3, r4, #1152	; 0x480
 800e208:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800e20c:	4410      	add	r0, r2
 800e20e:	f847 0023 	str.w	r0, [r7, r3, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800e212:	e007      	b.n	800e224 <xmp3fixpt_DecodeHuffman+0x220>
		hi->huffDecBuf[ch][i] = 0;
 800e214:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800e218:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800e21c:	2200      	movs	r2, #0
 800e21e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800e222:	3001      	adds	r0, #1
 800e224:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 800e228:	dbf4      	blt.n	800e214 <xmp3fixpt_DecodeHuffman+0x210>
	
	/* If bits used for 576 samples < huffBlockBits, then the extras are considered
	 *  to be stuffing bits (throw away, but need to return correct bitstream position) 
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
 800e22a:	f8d9 3000 	ldr.w	r3, [r9]
 800e22e:	441e      	add	r6, r3
 800e230:	eb08 00e6 	add.w	r0, r8, r6, asr #3
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 800e234:	f006 0607 	and.w	r6, r6, #7
 800e238:	f8c9 6000 	str.w	r6, [r9]
	
	return (buf - startBuf);
 800e23c:	9b02      	ldr	r3, [sp, #8]
 800e23e:	1ac0      	subs	r0, r0, r3
}
 800e240:	b009      	add	sp, #36	; 0x24
 800e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 800e246:	f04f 30ff 	mov.w	r0, #4294967295
 800e24a:	e7f9      	b.n	800e240 <xmp3fixpt_DecodeHuffman+0x23c>
 800e24c:	f04f 30ff 	mov.w	r0, #4294967295
 800e250:	e7f6      	b.n	800e240 <xmp3fixpt_DecodeHuffman+0x23c>
 800e252:	f04f 30ff 	mov.w	r0, #4294967295
 800e256:	e7f3      	b.n	800e240 <xmp3fixpt_DecodeHuffman+0x23c>
 800e258:	f04f 30ff 	mov.w	r0, #4294967295
 800e25c:	e7f0      	b.n	800e240 <xmp3fixpt_DecodeHuffman+0x23c>
 800e25e:	f04f 30ff 	mov.w	r0, #4294967295
 800e262:	e7ed      	b.n	800e240 <xmp3fixpt_DecodeHuffman+0x23c>
		return -1;
 800e264:	f04f 30ff 	mov.w	r0, #4294967295
 800e268:	e7ea      	b.n	800e240 <xmp3fixpt_DecodeHuffman+0x23c>
			return -1;
 800e26a:	f04f 30ff 	mov.w	r0, #4294967295
 800e26e:	e7e7      	b.n	800e240 <xmp3fixpt_DecodeHuffman+0x23c>
 800e270:	55555556 	.word	0x55555556

0800e274 <AntiAlias>:
{
	int k, a0, b0, c0, c1;
	const int *c;

	/* csa = Q31 */
	for (k = nBfly; k > 0; k--) {
 800e274:	2900      	cmp	r1, #0
 800e276:	f340 80c7 	ble.w	800e408 <AntiAlias+0x194>
{
 800e27a:	b570      	push	{r4, r5, r6, lr}
		c = csa[0];
		x += 18;
 800e27c:	3048      	adds	r0, #72	; 0x48

		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800e27e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e282:	4b62      	ldr	r3, [pc, #392]	; (800e40c <AntiAlias+0x198>)
 800e284:	681e      	ldr	r6, [r3, #0]
 800e286:	685d      	ldr	r5, [r3, #4]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e288:	4614      	mov	r4, r2
 800e28a:	fb86 c404 	smull	ip, r4, r6, r4
 800e28e:	f8d0 c000 	ldr.w	ip, [r0]
 800e292:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800e296:	eba4 040c 	sub.w	r4, r4, ip
 800e29a:	0064      	lsls	r4, r4, #1
 800e29c:	f840 4c04 	str.w	r4, [r0, #-4]
 800e2a0:	6804      	ldr	r4, [r0, #0]
 800e2a2:	fb86 c404 	smull	ip, r4, r6, r4
 800e2a6:	fb85 6202 	smull	r6, r2, r5, r2
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800e2aa:	4422      	add	r2, r4
 800e2ac:	0052      	lsls	r2, r2, #1
 800e2ae:	6002      	str	r2, [r0, #0]

		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800e2b0:	f850 2c08 	ldr.w	r2, [r0, #-8]
 800e2b4:	689e      	ldr	r6, [r3, #8]
 800e2b6:	68dd      	ldr	r5, [r3, #12]
 800e2b8:	4614      	mov	r4, r2
 800e2ba:	fb86 c404 	smull	ip, r4, r6, r4
 800e2be:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800e2c2:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800e2c6:	eba4 040c 	sub.w	r4, r4, ip
 800e2ca:	0064      	lsls	r4, r4, #1
 800e2cc:	f840 4c08 	str.w	r4, [r0, #-8]
 800e2d0:	6844      	ldr	r4, [r0, #4]
 800e2d2:	fb86 c404 	smull	ip, r4, r6, r4
 800e2d6:	fb85 6202 	smull	r6, r2, r5, r2
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800e2da:	4422      	add	r2, r4
 800e2dc:	0052      	lsls	r2, r2, #1
 800e2de:	6042      	str	r2, [r0, #4]
		
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800e2e0:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 800e2e4:	691e      	ldr	r6, [r3, #16]
 800e2e6:	695d      	ldr	r5, [r3, #20]
 800e2e8:	4614      	mov	r4, r2
 800e2ea:	fb86 c404 	smull	ip, r4, r6, r4
 800e2ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800e2f2:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800e2f6:	eba4 040c 	sub.w	r4, r4, ip
 800e2fa:	0064      	lsls	r4, r4, #1
 800e2fc:	f840 4c0c 	str.w	r4, [r0, #-12]
 800e300:	6884      	ldr	r4, [r0, #8]
 800e302:	fb86 c404 	smull	ip, r4, r6, r4
 800e306:	fb85 6202 	smull	r6, r2, r5, r2
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800e30a:	4422      	add	r2, r4
 800e30c:	0052      	lsls	r2, r2, #1
 800e30e:	6082      	str	r2, [r0, #8]

		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800e310:	f850 2c10 	ldr.w	r2, [r0, #-16]
 800e314:	699e      	ldr	r6, [r3, #24]
 800e316:	69dd      	ldr	r5, [r3, #28]
 800e318:	4614      	mov	r4, r2
 800e31a:	fb86 c404 	smull	ip, r4, r6, r4
 800e31e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800e322:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800e326:	eba4 040c 	sub.w	r4, r4, ip
 800e32a:	0064      	lsls	r4, r4, #1
 800e32c:	f840 4c10 	str.w	r4, [r0, #-16]
 800e330:	68c4      	ldr	r4, [r0, #12]
 800e332:	fb86 c404 	smull	ip, r4, r6, r4
 800e336:	fb85 6202 	smull	r6, r2, r5, r2
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800e33a:	4422      	add	r2, r4
 800e33c:	0052      	lsls	r2, r2, #1
 800e33e:	60c2      	str	r2, [r0, #12]

		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800e340:	f850 2c14 	ldr.w	r2, [r0, #-20]
 800e344:	6a1e      	ldr	r6, [r3, #32]
 800e346:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e348:	4614      	mov	r4, r2
 800e34a:	fb86 c404 	smull	ip, r4, r6, r4
 800e34e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800e352:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800e356:	eba4 040c 	sub.w	r4, r4, ip
 800e35a:	0064      	lsls	r4, r4, #1
 800e35c:	f840 4c14 	str.w	r4, [r0, #-20]
 800e360:	6904      	ldr	r4, [r0, #16]
 800e362:	fb86 c404 	smull	ip, r4, r6, r4
 800e366:	fb85 6202 	smull	r6, r2, r5, r2
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800e36a:	4422      	add	r2, r4
 800e36c:	0052      	lsls	r2, r2, #1
 800e36e:	6102      	str	r2, [r0, #16]

		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800e370:	f850 2c18 	ldr.w	r2, [r0, #-24]
 800e374:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800e376:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800e378:	4614      	mov	r4, r2
 800e37a:	fb86 c404 	smull	ip, r4, r6, r4
 800e37e:	f8d0 c014 	ldr.w	ip, [r0, #20]
 800e382:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800e386:	eba4 040c 	sub.w	r4, r4, ip
 800e38a:	0064      	lsls	r4, r4, #1
 800e38c:	f840 4c18 	str.w	r4, [r0, #-24]
 800e390:	6944      	ldr	r4, [r0, #20]
 800e392:	fb86 c404 	smull	ip, r4, r6, r4
 800e396:	fb85 6202 	smull	r6, r2, r5, r2
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800e39a:	4422      	add	r2, r4
 800e39c:	0052      	lsls	r2, r2, #1
 800e39e:	6142      	str	r2, [r0, #20]

		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800e3a0:	f850 2c1c 	ldr.w	r2, [r0, #-28]
 800e3a4:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800e3a6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800e3a8:	4694      	mov	ip, r2
 800e3aa:	fb86 4c0c 	smull	r4, ip, r6, ip
 800e3ae:	6984      	ldr	r4, [r0, #24]
 800e3b0:	fb85 e404 	smull	lr, r4, r5, r4
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800e3b4:	ebac 0c04 	sub.w	ip, ip, r4
 800e3b8:	ea4f 044c 	mov.w	r4, ip, lsl #1
 800e3bc:	f840 4c1c 	str.w	r4, [r0, #-28]
 800e3c0:	6984      	ldr	r4, [r0, #24]
 800e3c2:	fb86 c404 	smull	ip, r4, r6, r4
 800e3c6:	fb85 6202 	smull	r6, r2, r5, r2
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800e3ca:	4422      	add	r2, r4
 800e3cc:	0052      	lsls	r2, r2, #1
 800e3ce:	6182      	str	r2, [r0, #24]

		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800e3d0:	f850 2c20 	ldr.w	r2, [r0, #-32]
 800e3d4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800e3d6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800e3d8:	4613      	mov	r3, r2
 800e3da:	fb86 4303 	smull	r4, r3, r6, r3
 800e3de:	69c4      	ldr	r4, [r0, #28]
 800e3e0:	fb85 c404 	smull	ip, r4, r5, r4
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800e3e4:	1b1b      	subs	r3, r3, r4
 800e3e6:	005b      	lsls	r3, r3, #1
 800e3e8:	f840 3c20 	str.w	r3, [r0, #-32]
 800e3ec:	69c4      	ldr	r4, [r0, #28]
 800e3ee:	fb86 3404 	smull	r3, r4, r6, r4
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	fb85 2303 	smull	r2, r3, r5, r3
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800e3f8:	4423      	add	r3, r4
 800e3fa:	005b      	lsls	r3, r3, #1
 800e3fc:	61c3      	str	r3, [r0, #28]
	for (k = nBfly; k > 0; k--) {
 800e3fe:	3901      	subs	r1, #1
 800e400:	2900      	cmp	r1, #0
 800e402:	f73f af3b 	bgt.w	800e27c <AntiAlias+0x8>
	}
}
 800e406:	bd70      	pop	{r4, r5, r6, pc}
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	0801dcac 	.word	0x0801dcac

0800e410 <WinPrevious>:
 * Notes:       produces 9 output samples from 18 input samples via symmetry
 *              all blocks gain at least 1 guard bit via window (long blocks get extra
 *                sign bit, short blocks can have one addition but max gain < 1.0)
 **************************************************************************************/
static void WinPrevious(int *xPrev, int *xPrevWin, int btPrev)
{
 800e410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e414:	4604      	mov	r4, r0
 800e416:	4608      	mov	r0, r1
	int i, x, *xp, *xpwLo, *xpwHi, wLo, wHi;
	const int *wpLo, *wpHi;

	xp = xPrev;
	/* mapping (see IMDCT12x3): xPrev[0-2] = sum[6-8], xPrev[3-8] = sum[12-17] */
	if (btPrev == 2) {
 800e418:	2a02      	cmp	r2, #2
 800e41a:	d00b      	beq.n	800e434 <WinPrevious+0x24>
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
	} else {
		/* use ARM-style pointers (*ptr++) so that ADS compiles well */
		wpLo = imdctWin[btPrev] + 18;
 800e41c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800e420:	4a43      	ldr	r2, [pc, #268]	; (800e530 <WinPrevious+0x120>)
 800e422:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800e426:	f102 0c48 	add.w	ip, r2, #72	; 0x48
		wpHi = wpLo + 17;
 800e42a:	328c      	adds	r2, #140	; 0x8c
		xpwLo = xPrevWin;
		xpwHi = xPrevWin + 17;
 800e42c:	f101 0e44 	add.w	lr, r1, #68	; 0x44
		for (i = 9; i > 0; i--) {
 800e430:	2509      	movs	r5, #9
 800e432:	e079      	b.n	800e528 <WinPrevious+0x118>
		wpLo = imdctWin[btPrev];
 800e434:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800e438:	0116      	lsls	r6, r2, #4
 800e43a:	4d3d      	ldr	r5, [pc, #244]	; (800e530 <WinPrevious+0x120>)
 800e43c:	eb05 1302 	add.w	r3, r5, r2, lsl #4
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800e440:	699a      	ldr	r2, [r3, #24]
 800e442:	68a1      	ldr	r1, [r4, #8]
 800e444:	fb82 7101 	smull	r7, r1, r2, r1
 800e448:	5975      	ldr	r5, [r6, r5]
 800e44a:	69a2      	ldr	r2, [r4, #24]
 800e44c:	fb85 6202 	smull	r6, r2, r5, r2
 800e450:	440a      	add	r2, r1
 800e452:	6002      	str	r2, [r0, #0]
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 800e454:	69da      	ldr	r2, [r3, #28]
 800e456:	6861      	ldr	r1, [r4, #4]
 800e458:	fb82 5101 	smull	r5, r1, r2, r1
 800e45c:	685d      	ldr	r5, [r3, #4]
 800e45e:	69e2      	ldr	r2, [r4, #28]
 800e460:	fb85 6202 	smull	r6, r2, r5, r2
 800e464:	440a      	add	r2, r1
 800e466:	6042      	str	r2, [r0, #4]
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 800e468:	6a1a      	ldr	r2, [r3, #32]
 800e46a:	6821      	ldr	r1, [r4, #0]
 800e46c:	fb82 5101 	smull	r5, r1, r2, r1
 800e470:	689d      	ldr	r5, [r3, #8]
 800e472:	6a22      	ldr	r2, [r4, #32]
 800e474:	fb85 6202 	smull	r6, r2, r5, r2
 800e478:	440a      	add	r2, r1
 800e47a:	6082      	str	r2, [r0, #8]
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 800e47c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e47e:	6821      	ldr	r1, [r4, #0]
 800e480:	fb82 5101 	smull	r5, r1, r2, r1
 800e484:	68dd      	ldr	r5, [r3, #12]
 800e486:	6a22      	ldr	r2, [r4, #32]
 800e488:	fb85 6202 	smull	r6, r2, r5, r2
 800e48c:	440a      	add	r2, r1
 800e48e:	60c2      	str	r2, [r0, #12]
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 800e490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e492:	6861      	ldr	r1, [r4, #4]
 800e494:	fb82 5101 	smull	r5, r1, r2, r1
 800e498:	691d      	ldr	r5, [r3, #16]
 800e49a:	69e2      	ldr	r2, [r4, #28]
 800e49c:	fb85 6202 	smull	r6, r2, r5, r2
 800e4a0:	440a      	add	r2, r1
 800e4a2:	6102      	str	r2, [r0, #16]
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 800e4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a6:	68a1      	ldr	r1, [r4, #8]
 800e4a8:	fb82 5101 	smull	r5, r1, r2, r1
 800e4ac:	695d      	ldr	r5, [r3, #20]
 800e4ae:	69a2      	ldr	r2, [r4, #24]
 800e4b0:	fb85 6202 	smull	r6, r2, r5, r2
 800e4b4:	440a      	add	r2, r1
 800e4b6:	6142      	str	r2, [r0, #20]
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 800e4b8:	6999      	ldr	r1, [r3, #24]
 800e4ba:	6962      	ldr	r2, [r4, #20]
 800e4bc:	fb81 5202 	smull	r5, r2, r1, r2
 800e4c0:	6182      	str	r2, [r0, #24]
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 800e4c2:	69d9      	ldr	r1, [r3, #28]
 800e4c4:	6922      	ldr	r2, [r4, #16]
 800e4c6:	fb81 5202 	smull	r5, r2, r1, r2
 800e4ca:	61c2      	str	r2, [r0, #28]
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 800e4cc:	6a19      	ldr	r1, [r3, #32]
 800e4ce:	68e2      	ldr	r2, [r4, #12]
 800e4d0:	fb81 5202 	smull	r5, r2, r1, r2
 800e4d4:	6202      	str	r2, [r0, #32]
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 800e4d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e4d8:	68e2      	ldr	r2, [r4, #12]
 800e4da:	fb81 5202 	smull	r5, r2, r1, r2
 800e4de:	6242      	str	r2, [r0, #36]	; 0x24
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 800e4e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e4e2:	6922      	ldr	r2, [r4, #16]
 800e4e4:	fb81 5202 	smull	r5, r2, r1, r2
 800e4e8:	6282      	str	r2, [r0, #40]	; 0x28
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 800e4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ec:	6963      	ldr	r3, [r4, #20]
 800e4ee:	fb82 1303 	smull	r1, r3, r2, r3
 800e4f2:	62c3      	str	r3, [r0, #44]	; 0x2c
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	6443      	str	r3, [r0, #68]	; 0x44
 800e4f8:	6403      	str	r3, [r0, #64]	; 0x40
 800e4fa:	63c3      	str	r3, [r0, #60]	; 0x3c
 800e4fc:	6383      	str	r3, [r0, #56]	; 0x38
 800e4fe:	6343      	str	r3, [r0, #52]	; 0x34
 800e500:	6303      	str	r3, [r0, #48]	; 0x30
 800e502:	e013      	b.n	800e52c <WinPrevious+0x11c>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800e504:	f854 3b04 	ldr.w	r3, [r4], #4
 800e508:	f85c 7b04 	ldr.w	r7, [ip], #4
 800e50c:	f852 6904 	ldr.w	r6, [r2], #-4
 800e510:	4619      	mov	r1, r3
 800e512:	fb87 8101 	smull	r8, r1, r7, r1
			*xpwLo++ = MULSHIFT32(wLo, x);
 800e516:	f840 1b04 	str.w	r1, [r0], #4
			*xpwHi-- = MULSHIFT32(wHi, x);
 800e51a:	4671      	mov	r1, lr
 800e51c:	fb86 7303 	smull	r7, r3, r6, r3
 800e520:	f841 3904 	str.w	r3, [r1], #-4
		for (i = 9; i > 0; i--) {
 800e524:	3d01      	subs	r5, #1
			*xpwHi-- = MULSHIFT32(wHi, x);
 800e526:	468e      	mov	lr, r1
		for (i = 9; i > 0; i--) {
 800e528:	2d00      	cmp	r5, #0
 800e52a:	dceb      	bgt.n	800e504 <WinPrevious+0xf4>
		}
	}
}
 800e52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e530:	0801dcec 	.word	0x0801dcec

0800e534 <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 800e534:	b570      	push	{r4, r5, r6, lr}
 800e536:	4684      	mov	ip, r0
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 800e538:	469e      	mov	lr, r3
 800e53a:	bb8b      	cbnz	r3, 800e5a0 <FreqInvertRescale+0x6c>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 800e53c:	f012 0f01 	tst.w	r2, #1
 800e540:	d02c      	beq.n	800e59c <FreqInvertRescale+0x68>
			y += NBANDS;
			y0 = *y;	y += 2*NBANDS;
 800e542:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
			y1 = *y;	y += 2*NBANDS;
			y2 = *y;	y += 2*NBANDS;
			y3 = *y;	y += 2*NBANDS;
			y4 = *y;	y += 2*NBANDS;
			y5 = *y;	y += 2*NBANDS;
 800e546:	f8dc 1580 	ldr.w	r1, [ip, #1408]	; 0x580
			y6 = *y;	y += 2*NBANDS;
 800e54a:	f8dc 2680 	ldr.w	r2, [ip, #1664]	; 0x680
			y7 = *y;	y += 2*NBANDS;
 800e54e:	f8dc 3780 	ldr.w	r3, [ip, #1920]	; 0x780
			y8 = *y;	y += 2*NBANDS;

			y -= 18*NBANDS;
			*y = -y0;	y += 2*NBANDS;
 800e552:	4240      	negs	r0, r0
 800e554:	f8cc 0080 	str.w	r0, [ip, #128]	; 0x80
			*y = -y1;	y += 2*NBANDS;
 800e558:	f8dc 0180 	ldr.w	r0, [ip, #384]	; 0x180
 800e55c:	4240      	negs	r0, r0
 800e55e:	f8cc 0180 	str.w	r0, [ip, #384]	; 0x180
			*y = -y2;	y += 2*NBANDS;
 800e562:	f8dc 0280 	ldr.w	r0, [ip, #640]	; 0x280
 800e566:	4240      	negs	r0, r0
 800e568:	f8cc 0280 	str.w	r0, [ip, #640]	; 0x280
			*y = -y3;	y += 2*NBANDS;
 800e56c:	f8dc 0380 	ldr.w	r0, [ip, #896]	; 0x380
 800e570:	4240      	negs	r0, r0
 800e572:	f8cc 0380 	str.w	r0, [ip, #896]	; 0x380
			*y = -y4;	y += 2*NBANDS;
 800e576:	f8dc 0480 	ldr.w	r0, [ip, #1152]	; 0x480
 800e57a:	4240      	negs	r0, r0
 800e57c:	f8cc 0480 	str.w	r0, [ip, #1152]	; 0x480
			*y = -y5;	y += 2*NBANDS;
 800e580:	4249      	negs	r1, r1
 800e582:	f8cc 1580 	str.w	r1, [ip, #1408]	; 0x580
			*y = -y6;	y += 2*NBANDS;
 800e586:	4252      	negs	r2, r2
 800e588:	f8cc 2680 	str.w	r2, [ip, #1664]	; 0x680
			*y = -y7;	y += 2*NBANDS;
 800e58c:	425b      	negs	r3, r3
 800e58e:	f8cc 3780 	str.w	r3, [ip, #1920]	; 0x780
			*y = -y8;	y += 2*NBANDS;
 800e592:	f8dc 3880 	ldr.w	r3, [ip, #2176]	; 0x880
 800e596:	425b      	negs	r3, r3
 800e598:	f8cc 3880 	str.w	r3, [ip, #2176]	; 0x880
		}
		return 0;
 800e59c:	4670      	mov	r0, lr
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		}
		return mOut;
	}
}
 800e59e:	bd70      	pop	{r4, r5, r6, pc}
		if (blockIdx & 0x01) {
 800e5a0:	f012 0401 	ands.w	r4, r2, #1
 800e5a4:	d14b      	bne.n	800e63e <FreqInvertRescale+0x10a>
		mOut = 0;
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	e051      	b.n	800e64e <FreqInvertRescale+0x11a>
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800e5aa:	fa03 f30e 	lsl.w	r3, r3, lr
 800e5ae:	f841 3b04 	str.w	r3, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800e5b2:	3402      	adds	r4, #2
 800e5b4:	2c11      	cmp	r4, #17
 800e5b6:	dcf2      	bgt.n	800e59e <FreqInvertRescale+0x6a>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800e5b8:	f8dc 3000 	ldr.w	r3, [ip]
 800e5bc:	17de      	asrs	r6, r3, #31
 800e5be:	f1ce 021f 	rsb	r2, lr, #31
 800e5c2:	fa43 f502 	asr.w	r5, r3, r2
 800e5c6:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800e5ca:	d005      	beq.n	800e5d8 <FreqInvertRescale+0xa4>
 800e5cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5d0:	fa23 f30e 	lsr.w	r3, r3, lr
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	4073      	eors	r3, r6
 800e5d8:	fa03 f30e 	lsl.w	r3, r3, lr
 800e5dc:	f8cc 3000 	str.w	r3, [ip]
	__asm__ volatile (
 800e5e0:	2500      	movs	r5, #0
 800e5e2:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800e5e6:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 800e5ea:	4305      	orrs	r5, r0
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800e5ec:	f8dc 3080 	ldr.w	r3, [ip, #128]	; 0x80
 800e5f0:	425b      	negs	r3, r3
 800e5f2:	17de      	asrs	r6, r3, #31
 800e5f4:	fa43 f002 	asr.w	r0, r3, r2
 800e5f8:	ebb0 7fe3 	cmp.w	r0, r3, asr #31
 800e5fc:	d005      	beq.n	800e60a <FreqInvertRescale+0xd6>
 800e5fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e602:	fa23 f30e 	lsr.w	r3, r3, lr
 800e606:	3b01      	subs	r3, #1
 800e608:	4073      	eors	r3, r6
 800e60a:	fa03 f30e 	lsl.w	r3, r3, lr
 800e60e:	f8cc 3080 	str.w	r3, [ip, #128]	; 0x80
 800e612:	2000      	movs	r0, #0
 800e614:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 800e618:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800e61c:	4328      	orrs	r0, r5
 800e61e:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800e622:	680b      	ldr	r3, [r1, #0]
 800e624:	17dd      	asrs	r5, r3, #31
 800e626:	fa43 f202 	asr.w	r2, r3, r2
 800e62a:	ebb2 7fe3 	cmp.w	r2, r3, asr #31
 800e62e:	d0bc      	beq.n	800e5aa <FreqInvertRescale+0x76>
 800e630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e634:	fa23 f30e 	lsr.w	r3, r3, lr
 800e638:	3b01      	subs	r3, #1
 800e63a:	406b      	eors	r3, r5
 800e63c:	e7b5      	b.n	800e5aa <FreqInvertRescale+0x76>
		mOut = 0;
 800e63e:	2000      	movs	r0, #0
			for (i = 0; i < 18; i+=2) {
 800e640:	4604      	mov	r4, r0
 800e642:	e7b7      	b.n	800e5b4 <FreqInvertRescale+0x80>
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800e644:	fa03 f30e 	lsl.w	r3, r3, lr
 800e648:	f841 3b04 	str.w	r3, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800e64c:	3402      	adds	r4, #2
 800e64e:	2c11      	cmp	r4, #17
 800e650:	dca5      	bgt.n	800e59e <FreqInvertRescale+0x6a>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800e652:	f8dc 3000 	ldr.w	r3, [ip]
 800e656:	17de      	asrs	r6, r3, #31
 800e658:	f1ce 021f 	rsb	r2, lr, #31
 800e65c:	fa43 f502 	asr.w	r5, r3, r2
 800e660:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800e664:	d005      	beq.n	800e672 <FreqInvertRescale+0x13e>
 800e666:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e66a:	fa23 f30e 	lsr.w	r3, r3, lr
 800e66e:	3b01      	subs	r3, #1
 800e670:	4073      	eors	r3, r6
 800e672:	fa03 f30e 	lsl.w	r3, r3, lr
 800e676:	f8cc 3000 	str.w	r3, [ip]
 800e67a:	2500      	movs	r5, #0
 800e67c:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800e680:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 800e684:	4328      	orrs	r0, r5
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800e686:	f8dc 3080 	ldr.w	r3, [ip, #128]	; 0x80
 800e68a:	17de      	asrs	r6, r3, #31
 800e68c:	fa43 f502 	asr.w	r5, r3, r2
 800e690:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800e694:	d005      	beq.n	800e6a2 <FreqInvertRescale+0x16e>
 800e696:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e69a:	fa23 f30e 	lsr.w	r3, r3, lr
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	4073      	eors	r3, r6
 800e6a2:	fa03 f30e 	lsl.w	r3, r3, lr
 800e6a6:	f8cc 3080 	str.w	r3, [ip, #128]	; 0x80
 800e6aa:	2500      	movs	r5, #0
 800e6ac:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800e6b0:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 800e6b4:	4328      	orrs	r0, r5
 800e6b6:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800e6ba:	680b      	ldr	r3, [r1, #0]
 800e6bc:	17dd      	asrs	r5, r3, #31
 800e6be:	fa43 f202 	asr.w	r2, r3, r2
 800e6c2:	ebb2 7fe3 	cmp.w	r2, r3, asr #31
 800e6c6:	d0bd      	beq.n	800e644 <FreqInvertRescale+0x110>
 800e6c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6cc:	fa23 f30e 	lsr.w	r3, r3, lr
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	406b      	eors	r3, r5
 800e6d4:	e7b6      	b.n	800e644 <FreqInvertRescale+0x110>
	...

0800e6d8 <IMDCT36>:
 *
 * TODO:        optimize for ARM (reorder window coefs, ARM-style pointers in C, 
 *                inline asm may or may not be helpful)
 **************************************************************************************/
static int IMDCT36(int *xCurr, int *xPrev, int *y, int btCurr, int btPrev, int blockIdx, int gb)
{
 800e6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6dc:	b0af      	sub	sp, #188	; 0xbc
 800e6de:	9101      	str	r1, [sp, #4]
 800e6e0:	9202      	str	r2, [sp, #8]
 800e6e2:	9305      	str	r3, [sp, #20]
 800e6e4:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
	int acc1, acc2, s, d, t, mOut;
	int xo, xe, c, *xp, yLo, yHi;
	const int *cp, *wp;

	acc1 = acc2 = 0;
	xCurr += 17;
 800e6e6:	3044      	adds	r0, #68	; 0x44

	/* 7 gb is always adequate for antialias + accumulator loop + idct9 */
	if (gb < 7) {
 800e6e8:	2e06      	cmp	r6, #6
 800e6ea:	f300 8167 	bgt.w	800e9bc <IMDCT36+0x2e4>
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	4615      	mov	r5, r2
		/* rarely triggered - 5% to 10% of the time on normal clips (with Q25 input) */
		es = 7 - gb;
 800e6f2:	f1c6 0607 	rsb	r6, r6, #7
	acc1 = acc2 = 0;
 800e6f6:	f04f 0c00 	mov.w	ip, #0
 800e6fa:	4663      	mov	r3, ip
		for (i = 8; i >= 0; i--) {	
 800e6fc:	2108      	movs	r1, #8
 800e6fe:	4684      	mov	ip, r0
 800e700:	4618      	mov	r0, r3
 800e702:	e01c      	b.n	800e73e <IMDCT36+0x66>
			acc1 = ((*xCurr--) >> es) - acc1;
 800e704:	4667      	mov	r7, ip
 800e706:	f857 2908 	ldr.w	r2, [r7], #-8
 800e70a:	4132      	asrs	r2, r6
 800e70c:	1ad3      	subs	r3, r2, r3
			acc2 = acc1 - acc2;
 800e70e:	1a18      	subs	r0, r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800e710:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800e714:	4132      	asrs	r2, r6
 800e716:	1ad3      	subs	r3, r2, r3
			xBuf[i+9] = acc2;	/* odd */
 800e718:	f101 0209 	add.w	r2, r1, #9
 800e71c:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800e720:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 800e724:	f842 0c48 	str.w	r0, [r2, #-72]
			xBuf[i+0] = acc1;	/* even */
 800e728:	eb0c 0281 	add.w	r2, ip, r1, lsl #2
 800e72c:	f842 3c48 	str.w	r3, [r2, #-72]
			xPrev[i] >>= es;
 800e730:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800e734:	4132      	asrs	r2, r6
 800e736:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
		for (i = 8; i >= 0; i--) {	
 800e73a:	3901      	subs	r1, #1
			acc1 = ((*xCurr--) >> es) - acc1;
 800e73c:	46bc      	mov	ip, r7
		for (i = 8; i >= 0; i--) {	
 800e73e:	2900      	cmp	r1, #0
 800e740:	dae0      	bge.n	800e704 <IMDCT36+0x2c>
 800e742:	9603      	str	r6, [sp, #12]
 800e744:	9401      	str	r4, [sp, #4]
 800e746:	9502      	str	r5, [sp, #8]
			xBuf[i+9] = acc2;	/* odd */
			xBuf[i+0] = acc1;	/* even */
		}
	}
	/* xEven[0] and xOdd[0] scaled by 0.5 */
	xBuf[9] >>= 1;
 800e748:	9825      	ldr	r0, [sp, #148]	; 0x94
 800e74a:	1043      	asrs	r3, r0, #1
 800e74c:	9304      	str	r3, [sp, #16]
 800e74e:	9325      	str	r3, [sp, #148]	; 0x94
	xBuf[0] >>= 1;
 800e750:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e752:	1049      	asrs	r1, r1, #1
 800e754:	911c      	str	r1, [sp, #112]	; 0x70
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800e756:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e75a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e75c:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 800e760:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 800e764:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800e766:	9f24      	ldr	r7, [sp, #144]	; 0x90
	a1 = x0 - x6;
 800e768:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800e76a:	1b0e      	subs	r6, r1, r4
 800e76c:	9606      	str	r6, [sp, #24]
	a2 = x1 - x5;
 800e76e:	eba8 090a 	sub.w	r9, r8, sl
	a3 = x1 + x5;
 800e772:	eb08 040a 	add.w	r4, r8, sl
	a4 = x2 - x4;
 800e776:	eba2 0c0e 	sub.w	ip, r2, lr
	a5 = x2 + x4;
 800e77a:	eb02 030e 	add.w	r3, r2, lr
	a6 = x2 + x8;
 800e77e:	443a      	add	r2, r7
	a7 = x1 + x7;
 800e780:	eb08 0500 	add.w	r5, r8, r0
 800e784:	9507      	str	r5, [sp, #28]
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800e786:	eba7 0e0e 	sub.w	lr, r7, lr
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800e78a:	ebaa 0800 	sub.w	r8, sl, r0
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800e78e:	eba9 0000 	sub.w	r0, r9, r0
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800e792:	ebac 0507 	sub.w	r5, ip, r7
 800e796:	9508      	str	r5, [sp, #32]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e798:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 800e79c:	4eb8      	ldr	r6, [pc, #736]	; (800ea80 <IMDCT36+0x3a8>)
 800e79e:	fb86 7c0c 	smull	r7, ip, r6, ip
 800e7a2:	4605      	mov	r5, r0
 800e7a4:	fb86 0505 	smull	r0, r5, r6, r5
 800e7a8:	9509      	str	r5, [sp, #36]	; 0x24
 800e7aa:	469b      	mov	fp, r3
 800e7ac:	4fb5      	ldr	r7, [pc, #724]	; (800ea84 <IMDCT36+0x3ac>)
 800e7ae:	fb87 0b0b 	smull	r0, fp, r7, fp
 800e7b2:	4eb5      	ldr	r6, [pc, #724]	; (800ea88 <IMDCT36+0x3b0>)
 800e7b4:	fb86 0202 	smull	r0, r2, r6, r2
 800e7b8:	fb87 0e0e 	smull	r0, lr, r7, lr
 800e7bc:	fb86 0303 	smull	r0, r3, r6, r3
 800e7c0:	46c2      	mov	sl, r8
 800e7c2:	f106 5770 	add.w	r7, r6, #1006632960	; 0x3c000000
 800e7c6:	f507 274c 	add.w	r7, r7, #835584	; 0xcc000
 800e7ca:	f207 27cb 	addw	r7, r7, #715	; 0x2cb
 800e7ce:	463e      	mov	r6, r7
 800e7d0:	fb87 0a0a 	smull	r0, sl, r7, sl
 800e7d4:	9807      	ldr	r0, [sp, #28]
 800e7d6:	4dad      	ldr	r5, [pc, #692]	; (800ea8c <IMDCT36+0x3b4>)
 800e7d8:	fb85 7000 	smull	r7, r0, r5, r0
 800e7dc:	46a1      	mov	r9, r4
 800e7de:	fb86 7909 	smull	r7, r9, r6, r9
 800e7e2:	4647      	mov	r7, r8
 800e7e4:	fb85 8707 	smull	r8, r7, r5, r7
	a12 = x[0] +  (x[6] >> 1);
 800e7e8:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800e7ea:	eb01 0164 	add.w	r1, r1, r4, asr #1
	a13 = a12  +  (  m1 << 1);
 800e7ee:	eb01 084c 	add.w	r8, r1, ip, lsl #1
	a14 = a12  -  (  m1 << 1);
 800e7f2:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
	a15 = a1   +  ( a11 >> 1);
 800e7f6:	9e06      	ldr	r6, [sp, #24]
 800e7f8:	9c08      	ldr	r4, [sp, #32]
 800e7fa:	eb06 0c64 	add.w	ip, r6, r4, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800e7fe:	0052      	lsls	r2, r2, #1
 800e800:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	a17 = ( m7 << 1) - (m8 << 1);
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
	a18 = a16 + a17;
 800e80a:	eb02 0e03 	add.w	lr, r2, r3
	a19 = ( m9 << 1) + (m10 << 1);
 800e80e:	0040      	lsls	r0, r0, #1
 800e810:	eb00 004a 	add.w	r0, r0, sl, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800e814:	007f      	lsls	r7, r7, #1
 800e816:	ebc7 0749 	rsb	r7, r7, r9, lsl #1
	a21 = a20 - a19;
 800e81a:	eba7 0900 	sub.w	r9, r7, r0
	a22 = a13 + a16;
 800e81e:	eb08 0a02 	add.w	sl, r8, r2
	a23 = a14 + a16;
 800e822:	440a      	add	r2, r1
	a24 = a14 + a17;
 800e824:	eb01 0b03 	add.w	fp, r1, r3
	a25 = a13 + a17;
 800e828:	4443      	add	r3, r8
	a26 = a14 - a18;
 800e82a:	eba1 010e 	sub.w	r1, r1, lr
	a27 = a13 - a18;
 800e82e:	eba8 0e0e 	sub.w	lr, r8, lr
	x0 = a22 + a19;			x[0] = x0;
 800e832:	4482      	add	sl, r0
 800e834:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800e838:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e83a:	eb0c 0845 	add.w	r8, ip, r5, lsl #1
 800e83e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
	x2 = a24 + a20;			x[2] = x2;
 800e842:	44bb      	add	fp, r7
 800e844:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
	x3 = a26 - a21;			x[3] = x3;
 800e848:	eba1 0109 	sub.w	r1, r1, r9
 800e84c:	911f      	str	r1, [sp, #124]	; 0x7c
	x4 = a1 - a11;			x[4] = x4;
 800e84e:	1b31      	subs	r1, r6, r4
 800e850:	9120      	str	r1, [sp, #128]	; 0x80
	x5 = a27 + a21;			x[5] = x5;
 800e852:	eb09 010e 	add.w	r1, r9, lr
 800e856:	9121      	str	r1, [sp, #132]	; 0x84
	x6 = a25 - a20;			x[6] = x6;
 800e858:	1bdb      	subs	r3, r3, r7
 800e85a:	9322      	str	r3, [sp, #136]	; 0x88
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800e85c:	ebac 0345 	sub.w	r3, ip, r5, lsl #1
 800e860:	9323      	str	r3, [sp, #140]	; 0x8c
	x8 = a23 - a19;			x[8] = x8;
 800e862:	1a12      	subs	r2, r2, r0
 800e864:	9224      	str	r2, [sp, #144]	; 0x90
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800e866:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e868:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e86a:	9f29      	ldr	r7, [sp, #164]	; 0xa4
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 800e86c:	f8dd c0a8 	ldr.w	ip, [sp, #168]	; 0xa8
 800e870:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e872:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
	a1 = x0 - x6;
 800e876:	9b04      	ldr	r3, [sp, #16]
 800e878:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800e87a:	1b1c      	subs	r4, r3, r4
	a2 = x1 - x5;
 800e87c:	eba2 0a0c 	sub.w	sl, r2, ip
	a3 = x1 + x5;
 800e880:	eb02 090c 	add.w	r9, r2, ip
	a4 = x2 - x4;
 800e884:	eba1 0807 	sub.w	r8, r1, r7
	a5 = x2 + x4;
 800e888:	19cb      	adds	r3, r1, r7
	a6 = x2 + x8;
 800e88a:	4471      	add	r1, lr
	a7 = x1 + x7;
 800e88c:	1815      	adds	r5, r2, r0
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800e88e:	ebae 0707 	sub.w	r7, lr, r7
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800e892:	ebac 0c00 	sub.w	ip, ip, r0
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800e896:	ebaa 0000 	sub.w	r0, sl, r0
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800e89a:	eba8 020e 	sub.w	r2, r8, lr
 800e89e:	9206      	str	r2, [sp, #24]
 800e8a0:	f8dd e0a0 	ldr.w	lr, [sp, #160]	; 0xa0
 800e8a4:	4e76      	ldr	r6, [pc, #472]	; (800ea80 <IMDCT36+0x3a8>)
 800e8a6:	fb86 8e0e 	smull	r8, lr, r6, lr
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	fb86 0202 	smull	r0, r2, r6, r2
 800e8b0:	9207      	str	r2, [sp, #28]
 800e8b2:	469b      	mov	fp, r3
 800e8b4:	4e73      	ldr	r6, [pc, #460]	; (800ea84 <IMDCT36+0x3ac>)
 800e8b6:	fb86 0b0b 	smull	r0, fp, r6, fp
 800e8ba:	4a73      	ldr	r2, [pc, #460]	; (800ea88 <IMDCT36+0x3b0>)
 800e8bc:	fb82 0101 	smull	r0, r1, r2, r1
 800e8c0:	fb86 0707 	smull	r0, r7, r6, r7
 800e8c4:	fb82 0303 	smull	r0, r3, r2, r3
 800e8c8:	46e2      	mov	sl, ip
 800e8ca:	f1a6 667c 	sub.w	r6, r6, #264241152	; 0xfc00000
 800e8ce:	f5a6 26dc 	sub.w	r6, r6, #450560	; 0x6e000
 800e8d2:	f5a6 76a1 	sub.w	r6, r6, #322	; 0x142
 800e8d6:	fb86 0a0a 	smull	r0, sl, r6, sl
 800e8da:	462a      	mov	r2, r5
 800e8dc:	4d6b      	ldr	r5, [pc, #428]	; (800ea8c <IMDCT36+0x3b4>)
 800e8de:	fb85 0202 	smull	r0, r2, r5, r2
 800e8e2:	fb86 0909 	smull	r0, r9, r6, r9
 800e8e6:	fb85 0c0c 	smull	r0, ip, r5, ip
	a12 = x[0] +  (x[6] >> 1);
 800e8ea:	9804      	ldr	r0, [sp, #16]
 800e8ec:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800e8ee:	eb00 0065 	add.w	r0, r0, r5, asr #1
	a13 = a12  +  (  m1 << 1);
 800e8f2:	eb00 084e 	add.w	r8, r0, lr, lsl #1
	a14 = a12  -  (  m1 << 1);
 800e8f6:	eba0 004e 	sub.w	r0, r0, lr, lsl #1
	a15 = a1   +  ( a11 >> 1);
 800e8fa:	9e06      	ldr	r6, [sp, #24]
 800e8fc:	eb04 0e66 	add.w	lr, r4, r6, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800e900:	0049      	lsls	r1, r1, #1
 800e902:	eb01 014b 	add.w	r1, r1, fp, lsl #1
	a17 = ( m7 << 1) - (m8 << 1);
 800e906:	005b      	lsls	r3, r3, #1
 800e908:	ebc3 0347 	rsb	r3, r3, r7, lsl #1
	a18 = a16 + a17;
 800e90c:	18cf      	adds	r7, r1, r3
	a19 = ( m9 << 1) + (m10 << 1);
 800e90e:	0052      	lsls	r2, r2, #1
 800e910:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800e914:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800e918:	ebcc 0c49 	rsb	ip, ip, r9, lsl #1
	a21 = a20 - a19;
 800e91c:	ebac 0902 	sub.w	r9, ip, r2
	a22 = a13 + a16;
 800e920:	eb08 0a01 	add.w	sl, r8, r1
	a23 = a14 + a16;
 800e924:	4401      	add	r1, r0
	a24 = a14 + a17;
 800e926:	eb00 0b03 	add.w	fp, r0, r3
	a25 = a13 + a17;
 800e92a:	4443      	add	r3, r8
	a26 = a14 - a18;
 800e92c:	1bc0      	subs	r0, r0, r7
	a27 = a13 - a18;
 800e92e:	eba8 0707 	sub.w	r7, r8, r7
	x0 = a22 + a19;			x[0] = x0;
 800e932:	4492      	add	sl, r2
 800e934:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800e938:	9d07      	ldr	r5, [sp, #28]
 800e93a:	eb0e 0845 	add.w	r8, lr, r5, lsl #1
 800e93e:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
	x2 = a24 + a20;			x[2] = x2;
 800e942:	44e3      	add	fp, ip
 800e944:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
	x3 = a26 - a21;			x[3] = x3;
 800e948:	eba0 0009 	sub.w	r0, r0, r9
 800e94c:	9028      	str	r0, [sp, #160]	; 0xa0
	x4 = a1 - a11;			x[4] = x4;
 800e94e:	1ba0      	subs	r0, r4, r6
 800e950:	9029      	str	r0, [sp, #164]	; 0xa4
	x5 = a27 + a21;			x[5] = x5;
 800e952:	444f      	add	r7, r9
 800e954:	972a      	str	r7, [sp, #168]	; 0xa8
	x6 = a25 - a20;			x[6] = x6;
 800e956:	eba3 030c 	sub.w	r3, r3, ip
 800e95a:	932b      	str	r3, [sp, #172]	; 0xac
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800e95c:	ebae 0345 	sub.w	r3, lr, r5, lsl #1
 800e960:	932c      	str	r3, [sp, #176]	; 0xb0
	x8 = a23 - a19;			x[8] = x8;
 800e962:	1a89      	subs	r1, r1, r2
 800e964:	912d      	str	r1, [sp, #180]	; 0xb4
	idct9(xBuf+9);	/* odd */

	xp = xBuf + 8;
	cp = c18 + 8;
	mOut = 0;
	if (btPrev == 0 && btCurr == 0) {
 800e966:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800e968:	9a05      	ldr	r2, [sp, #20]
 800e96a:	ea53 0c02 	orrs.w	ip, r3, r2
 800e96e:	d172      	bne.n	800ea56 <IMDCT36+0x37e>
	mOut = 0;
 800e970:	4667      	mov	r7, ip
		/* fast path - use symmetry of sin window to reduce windowing multiplies to 18 (N/2) */
		wp = fastWin36;
 800e972:	4847      	ldr	r0, [pc, #284]	; (800ea90 <IMDCT36+0x3b8>)
	cp = c18 + 8;
 800e974:	f8df e120 	ldr.w	lr, [pc, #288]	; 800ea98 <IMDCT36+0x3c0>
	xp = xBuf + 8;
 800e978:	aa24      	add	r2, sp, #144	; 0x90
 800e97a:	9e03      	ldr	r6, [sp, #12]
 800e97c:	4601      	mov	r1, r0
 800e97e:	9c01      	ldr	r4, [sp, #4]
 800e980:	9d02      	ldr	r5, [sp, #8]
 800e982:	e057      	b.n	800ea34 <IMDCT36+0x35c>
			acc1 = (*xCurr--) - acc1;
 800e984:	4602      	mov	r2, r0
 800e986:	f852 6908 	ldr.w	r6, [r2], #-8
 800e98a:	1af3      	subs	r3, r6, r3
			acc2 = acc1 - acc2;
 800e98c:	1bdf      	subs	r7, r3, r7
			acc1 = (*xCurr--) - acc1;
 800e98e:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800e992:	1ac3      	subs	r3, r0, r3
			xBuf[i+9] = acc2;	/* odd */
 800e994:	f101 0009 	add.w	r0, r1, #9
 800e998:	ae2e      	add	r6, sp, #184	; 0xb8
 800e99a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800e99e:	f840 7c48 	str.w	r7, [r0, #-72]
			xBuf[i+0] = acc1;	/* even */
 800e9a2:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800e9a6:	f840 3c48 	str.w	r3, [r0, #-72]
		for (i = 8; i >= 0; i--) {	
 800e9aa:	3901      	subs	r1, #1
			acc1 = (*xCurr--) - acc1;
 800e9ac:	4610      	mov	r0, r2
		for (i = 8; i >= 0; i--) {	
 800e9ae:	2900      	cmp	r1, #0
 800e9b0:	dae8      	bge.n	800e984 <IMDCT36+0x2ac>
		es = 0;
 800e9b2:	9401      	str	r4, [sp, #4]
 800e9b4:	9502      	str	r5, [sp, #8]
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	9303      	str	r3, [sp, #12]
 800e9ba:	e6c5      	b.n	800e748 <IMDCT36+0x70>
	acc1 = acc2 = 0;
 800e9bc:	2700      	movs	r7, #0
 800e9be:	463b      	mov	r3, r7
		for (i = 8; i >= 0; i--) {	
 800e9c0:	2108      	movs	r1, #8
 800e9c2:	9c01      	ldr	r4, [sp, #4]
 800e9c4:	9d02      	ldr	r5, [sp, #8]
 800e9c6:	e7f2      	b.n	800e9ae <IMDCT36+0x2d6>
		for (i = 0; i < 9; i++) {
			/* do ARM-style pointer arithmetic (i still needed for y[] indexing - compiler spills if 2 y pointers) */
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800e9c8:	f85e 0904 	ldr.w	r0, [lr], #-4
 800e9cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e9ce:	f852 8904 	ldr.w	r8, [r2], #-4
 800e9d2:	fb80 9303 	smull	r9, r3, r0, r3
			/* gain 2 int bits here */
			xo = MULSHIFT32(c, xo);			/* 2*c18*xOdd (mul by 2 implicit in scaling)  */
			xe >>= 2;

			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800e9d6:	f8d4 9000 	ldr.w	r9, [r4]
 800e9da:	f1c9 0000 	rsb	r0, r9, #0
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 800e9de:	eba3 0aa8 	sub.w	sl, r3, r8, asr #2
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800e9e2:	eb03 03a8 	add.w	r3, r3, r8, asr #2
 800e9e6:	f844 3b04 	str.w	r3, [r4], #4
			t = s - d;
 800e9ea:	eba0 030a 	sub.w	r3, r0, sl

			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 800e9ee:	4688      	mov	r8, r1
 800e9f0:	f858 0b08 	ldr.w	r0, [r8], #8
 800e9f4:	fb83 b000 	smull	fp, r0, r3, r0
 800e9f8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
			yHi = (s + (MULSHIFT32(t, *wp++) << 2));
 800e9fc:	6849      	ldr	r1, [r1, #4]
 800e9fe:	fb83 a101 	smull	sl, r1, r3, r1
    return y;
 800ea02:	ebc9 0181 	rsb	r1, r9, r1, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 800ea06:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800ea0a:	50e8      	str	r0, [r5, r3]
			y[(17-i)*NBANDS] =  yHi;
 800ea0c:	f1cc 0311 	rsb	r3, ip, #17
 800ea10:	01db      	lsls	r3, r3, #7
 800ea12:	50e9      	str	r1, [r5, r3]
	__asm__ volatile (
 800ea14:	2300      	movs	r3, #0
 800ea16:	4699      	mov	r9, r3
 800ea18:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 800ea1c:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
			mOut |= FASTABS(yLo);
 800ea20:	ea47 0709 	orr.w	r7, r7, r9
 800ea24:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800ea28:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
			mOut |= FASTABS(yHi);
 800ea2c:	431f      	orrs	r7, r3
		for (i = 0; i < 9; i++) {
 800ea2e:	f10c 0c01 	add.w	ip, ip, #1
			yHi = (s + (MULSHIFT32(t, *wp++) << 2));
 800ea32:	4641      	mov	r1, r8
		for (i = 0; i < 9; i++) {
 800ea34:	f1bc 0f08 	cmp.w	ip, #8
 800ea38:	ddc6      	ble.n	800e9c8 <IMDCT36+0x2f0>
 800ea3a:	9603      	str	r6, [sp, #12]
 800ea3c:	9401      	str	r4, [sp, #4]
 800ea3e:	9502      	str	r5, [sp, #8]
			mOut |= FASTABS(yHi);
		}
	}

	xPrev -= 9;
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800ea40:	9b03      	ldr	r3, [sp, #12]
 800ea42:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800ea44:	9901      	ldr	r1, [sp, #4]
 800ea46:	3924      	subs	r1, #36	; 0x24
 800ea48:	9802      	ldr	r0, [sp, #8]
 800ea4a:	f7ff fd73 	bl	800e534 <FreqInvertRescale>

	return mOut;
}
 800ea4e:	4338      	orrs	r0, r7
 800ea50:	b02f      	add	sp, #188	; 0xbc
 800ea52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		WinPrevious(xPrev, xPrevWin, btPrev);
 800ea56:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800ea58:	a90a      	add	r1, sp, #40	; 0x28
 800ea5a:	9c01      	ldr	r4, [sp, #4]
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f7ff fcd7 	bl	800e410 <WinPrevious>
		wp = imdctWin[btCurr];
 800ea62:	9b05      	ldr	r3, [sp, #20]
 800ea64:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800ea68:	4a0a      	ldr	r2, [pc, #40]	; (800ea94 <IMDCT36+0x3bc>)
 800ea6a:	eb02 1e03 	add.w	lr, r2, r3, lsl #4
	cp = c18 + 8;
 800ea6e:	f8df c028 	ldr.w	ip, [pc, #40]	; 800ea98 <IMDCT36+0x3c0>
	xp = xBuf + 8;
 800ea72:	a824      	add	r0, sp, #144	; 0x90
	mOut = 0;
 800ea74:	2700      	movs	r7, #0
		for (i = 0; i < 9; i++) {
 800ea76:	463a      	mov	r2, r7
 800ea78:	9e03      	ldr	r6, [sp, #12]
 800ea7a:	9d02      	ldr	r5, [sp, #8]
 800ea7c:	e04a      	b.n	800eb14 <IMDCT36+0x43c>
 800ea7e:	bf00      	nop
 800ea80:	6ed9eba1 	.word	0x6ed9eba1
 800ea84:	620dbe8b 	.word	0x620dbe8b
 800ea88:	163a1a7e 	.word	0x163a1a7e
 800ea8c:	7e0e2e32 	.word	0x7e0e2e32
 800ea90:	0801dab4 	.word	0x0801dab4
 800ea94:	0801dcec 	.word	0x0801dcec
 800ea98:	0801dab0 	.word	0x0801dab0
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800ea9c:	f85c 8904 	ldr.w	r8, [ip], #-4
 800eaa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eaa2:	f850 1904 	ldr.w	r1, [r0], #-4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800eaa6:	fb88 9303 	smull	r9, r3, r8, r3
			d = xe - xo;
 800eaaa:	ebc3 09a1 	rsb	r9, r3, r1, asr #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800eaae:	eb03 03a1 	add.w	r3, r3, r1, asr #2
 800eab2:	f844 3b04 	str.w	r3, [r4], #4
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 800eab6:	ab2e      	add	r3, sp, #184	; 0xb8
 800eab8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800eabc:	f853 1c90 	ldr.w	r1, [r3, #-144]
 800eac0:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
 800eac4:	fb89 8303 	smull	r8, r3, r9, r3
 800eac8:	eb01 0803 	add.w	r8, r1, r3
 800eacc:	ea4f 0888 	mov.w	r8, r8, lsl #2
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800ead0:	f1c2 0a11 	rsb	sl, r2, #17
 800ead4:	ab2e      	add	r3, sp, #184	; 0xb8
 800ead6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800eada:	f853 1c90 	ldr.w	r1, [r3, #-144]
 800eade:	f85e 302a 	ldr.w	r3, [lr, sl, lsl #2]
 800eae2:	fb89 b303 	smull	fp, r3, r9, r3
 800eae6:	4419      	add	r1, r3
 800eae8:	0089      	lsls	r1, r1, #2
			y[(i)*NBANDS]    = yLo;
 800eaea:	01d3      	lsls	r3, r2, #7
 800eaec:	f845 8003 	str.w	r8, [r5, r3]
			y[(17-i)*NBANDS] = yHi;
 800eaf0:	ea4f 1aca 	mov.w	sl, sl, lsl #7
 800eaf4:	f845 100a 	str.w	r1, [r5, sl]
	__asm__ volatile (
 800eaf8:	2300      	movs	r3, #0
 800eafa:	4699      	mov	r9, r3
 800eafc:	ea88 79e8 	eor.w	r9, r8, r8, asr #31
 800eb00:	eba9 79e8 	sub.w	r9, r9, r8, asr #31
			mOut |= FASTABS(yLo);
 800eb04:	ea47 0709 	orr.w	r7, r7, r9
 800eb08:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800eb0c:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
			mOut |= FASTABS(yHi);
 800eb10:	431f      	orrs	r7, r3
		for (i = 0; i < 9; i++) {
 800eb12:	3201      	adds	r2, #1
 800eb14:	2a08      	cmp	r2, #8
 800eb16:	ddc1      	ble.n	800ea9c <IMDCT36+0x3c4>
 800eb18:	9603      	str	r6, [sp, #12]
 800eb1a:	9401      	str	r4, [sp, #4]
 800eb1c:	9502      	str	r5, [sp, #8]
 800eb1e:	e78f      	b.n	800ea40 <IMDCT36+0x368>

0800eb20 <IMDCT12x3>:
 * Return:      mOut (OR of abs(y) for all y calculated here)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
static int IMDCT12x3(int *xCurr, int *xPrev, int *y, int btPrev, int blockIdx, int gb)
{
 800eb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb24:	b0a9      	sub	sp, #164	; 0xa4
 800eb26:	9101      	str	r1, [sp, #4]
 800eb28:	9202      	str	r2, [sp, #8]
 800eb2a:	9303      	str	r3, [sp, #12]
 800eb2c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
	int i, es, mOut, yLo, xBuf[18], xPrevWin[18];	/* need temp buffer for reordering short blocks */
	const int *wp;

	es = 0;
	/* 7 gb is always adequate for accumulator loop + idct12 + window + overlap */
	if (gb < 7) {
 800eb2e:	2b06      	cmp	r3, #6
 800eb30:	f300 81a0 	bgt.w	800ee74 <IMDCT12x3+0x354>
		es = 7 - gb;
 800eb34:	f1c3 0b07 	rsb	fp, r3, #7
		for (i = 0; i < 18; i+=2) {
 800eb38:	2300      	movs	r3, #0
 800eb3a:	460d      	mov	r5, r1
 800eb3c:	4614      	mov	r4, r2
 800eb3e:	e014      	b.n	800eb6a <IMDCT12x3+0x4a>
			xCurr[i+0] >>= es;
 800eb40:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800eb44:	fa42 f20b 	asr.w	r2, r2, fp
 800eb48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			xCurr[i+1] >>= es;
 800eb4c:	1c59      	adds	r1, r3, #1
 800eb4e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 800eb52:	fa42 f20b 	asr.w	r2, r2, fp
 800eb56:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
			*xPrev++ >>= es;
 800eb5a:	462a      	mov	r2, r5
 800eb5c:	f852 1b04 	ldr.w	r1, [r2], #4
 800eb60:	fa41 f10b 	asr.w	r1, r1, fp
 800eb64:	6029      	str	r1, [r5, #0]
		for (i = 0; i < 18; i+=2) {
 800eb66:	3302      	adds	r3, #2
			*xPrev++ >>= es;
 800eb68:	4615      	mov	r5, r2
		for (i = 0; i < 18; i+=2) {
 800eb6a:	2b11      	cmp	r3, #17
 800eb6c:	dde8      	ble.n	800eb40 <IMDCT12x3+0x20>
		}
		xPrev -= 9;
 800eb6e:	9402      	str	r4, [sp, #8]
 800eb70:	f1a5 0324 	sub.w	r3, r5, #36	; 0x24
 800eb74:	9301      	str	r3, [sp, #4]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800eb76:	6801      	ldr	r1, [r0, #0]
 800eb78:	68c2      	ldr	r2, [r0, #12]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800eb7a:	6985      	ldr	r5, [r0, #24]
 800eb7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800eb7e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800eb80:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
	x4 -= x5;
 800eb84:	eba6 060c 	sub.w	r6, r6, ip
	x3 -= x4;
 800eb88:	1b9b      	subs	r3, r3, r6
	x2 -= x3;
 800eb8a:	1aed      	subs	r5, r5, r3
	x3 -= x5;
 800eb8c:	eba3 030c 	sub.w	r3, r3, ip
	x1 -= x2;
 800eb90:	1b52      	subs	r2, r2, r5
	x0 -= x1;
 800eb92:	1a89      	subs	r1, r1, r2
	x1 -= x3;
 800eb94:	1ad2      	subs	r2, r2, r3
	x0 >>= 1;
 800eb96:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800eb98:	1052      	asrs	r2, r2, #1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800eb9a:	4fcd      	ldr	r7, [pc, #820]	; (800eed0 <IMDCT12x3+0x3b0>)
 800eb9c:	fb87 e505 	smull	lr, r5, r7, r5
	a1 = x0 + (x4 >> 1);
 800eba0:	eb01 0866 	add.w	r8, r1, r6, asr #1
	a2 = x0 - x4;
 800eba4:	1b8e      	subs	r6, r1, r6
	x0 = a1 + a0;
 800eba6:	eb08 0e45 	add.w	lr, r8, r5, lsl #1
	x4 = a1 - a0;
 800ebaa:	eba8 0545 	sub.w	r5, r8, r5, lsl #1
 800ebae:	fb87 1303 	smull	r1, r3, r7, r3
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800ebb2:	ea4f 0843 	mov.w	r8, r3, lsl #1
	a1 = x1 + (x5 >> 1);
 800ebb6:	eb02 016c 	add.w	r1, r2, ip, asr #1
	a2 = x1 - x5;
 800ebba:	eba2 020c 	sub.w	r2, r2, ip
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800ebbe:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ebc2:	4cc4      	ldr	r4, [pc, #784]	; (800eed4 <IMDCT12x3+0x3b4>)
 800ebc4:	fb84 c303 	smull	ip, r3, r4, r3
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	f8df a310 	ldr.w	sl, [pc, #784]	; 800eedc <IMDCT12x3+0x3bc>
 800ebce:	fb8a c202 	smull	ip, r2, sl, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800ebd2:	0092      	lsls	r2, r2, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800ebd4:	eba1 0108 	sub.w	r1, r1, r8
 800ebd8:	f8df c304 	ldr.w	ip, [pc, #772]	; 800eee0 <IMDCT12x3+0x3c0>
 800ebdc:	fb8c 8101 	smull	r8, r1, ip, r1
	*out = x0 + x1;	out++;
 800ebe0:	eb0e 0803 	add.w	r8, lr, r3
 800ebe4:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
	*out = x2 + x3;	out++;
 800ebe8:	eb06 0802 	add.w	r8, r6, r2
 800ebec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
	*out = x4 + x5;	out++;
 800ebf0:	eb05 0881 	add.w	r8, r5, r1, lsl #2
 800ebf4:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
	*out = x4 - x5;	out++;
 800ebf8:	eba5 0181 	sub.w	r1, r5, r1, lsl #2
 800ebfc:	9119      	str	r1, [sp, #100]	; 0x64
	*out = x2 - x3;	out++;
 800ebfe:	1ab2      	subs	r2, r6, r2
 800ec00:	921a      	str	r2, [sp, #104]	; 0x68
	*out = x0 - x1;
 800ec02:	ebae 0303 	sub.w	r3, lr, r3
 800ec06:	931b      	str	r3, [sp, #108]	; 0x6c
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800ec08:	6845      	ldr	r5, [r0, #4]
 800ec0a:	6902      	ldr	r2, [r0, #16]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800ec0c:	69c6      	ldr	r6, [r0, #28]
 800ec0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800ec10:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800ec12:	f8d0 9040 	ldr.w	r9, [r0, #64]	; 0x40
	x4 -= x5;
 800ec16:	eba1 0e09 	sub.w	lr, r1, r9
	x3 -= x4;
 800ec1a:	eba3 030e 	sub.w	r3, r3, lr
	x2 -= x3;
 800ec1e:	1af6      	subs	r6, r6, r3
	x3 -= x5;
 800ec20:	eba3 0309 	sub.w	r3, r3, r9
	x1 -= x2;
 800ec24:	1b92      	subs	r2, r2, r6
	x0 -= x1;
 800ec26:	1aa9      	subs	r1, r5, r2
	x1 -= x3;
 800ec28:	1ad2      	subs	r2, r2, r3
	x0 >>= 1;
 800ec2a:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800ec2c:	1052      	asrs	r2, r2, #1
 800ec2e:	fb87 5606 	smull	r5, r6, r7, r6
	a1 = x0 + (x4 >> 1);
 800ec32:	eb01 086e 	add.w	r8, r1, lr, asr #1
	a2 = x0 - x4;
 800ec36:	eba1 010e 	sub.w	r1, r1, lr
	x0 = a1 + a0;
 800ec3a:	eb08 0e46 	add.w	lr, r8, r6, lsl #1
	x4 = a1 - a0;
 800ec3e:	eba8 0646 	sub.w	r6, r8, r6, lsl #1
 800ec42:	fb87 5303 	smull	r5, r3, r7, r3
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800ec46:	ea4f 0843 	mov.w	r8, r3, lsl #1
	a1 = x1 + (x5 >> 1);
 800ec4a:	eb02 0569 	add.w	r5, r2, r9, asr #1
	a2 = x1 - x5;
 800ec4e:	eba2 0209 	sub.w	r2, r2, r9
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800ec52:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ec56:	fb84 9303 	smull	r9, r3, r4, r3
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	fb8a 9202 	smull	r9, r2, sl, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800ec60:	0092      	lsls	r2, r2, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800ec62:	eba5 0508 	sub.w	r5, r5, r8
 800ec66:	fb8c 8505 	smull	r8, r5, ip, r5
	*out = x0 + x1;	out++;
 800ec6a:	eb0e 0803 	add.w	r8, lr, r3
 800ec6e:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
	*out = x2 + x3;	out++;
 800ec72:	eb01 0802 	add.w	r8, r1, r2
 800ec76:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
	*out = x4 + x5;	out++;
 800ec7a:	eb06 0885 	add.w	r8, r6, r5, lsl #2
 800ec7e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
	*out = x4 - x5;	out++;
 800ec82:	eba6 0585 	sub.w	r5, r6, r5, lsl #2
 800ec86:	951f      	str	r5, [sp, #124]	; 0x7c
	*out = x2 - x3;	out++;
 800ec88:	1a8a      	subs	r2, r1, r2
 800ec8a:	9220      	str	r2, [sp, #128]	; 0x80
	*out = x0 - x1;
 800ec8c:	ebae 0303 	sub.w	r3, lr, r3
 800ec90:	9321      	str	r3, [sp, #132]	; 0x84
	}

	/* requires 4 input guard bits for each imdct12 */
	imdct12(xCurr + 0, xBuf + 0);
	imdct12(xCurr + 1, xBuf + 6);
	imdct12(xCurr + 2, xBuf + 12);
 800ec92:	f100 0e08 	add.w	lr, r0, #8
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800ec96:	6880      	ldr	r0, [r0, #8]
 800ec98:	f8de 200c 	ldr.w	r2, [lr, #12]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800ec9c:	f8de 5018 	ldr.w	r5, [lr, #24]
 800eca0:	f8de 3024 	ldr.w	r3, [lr, #36]	; 0x24
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800eca4:	f8de 6030 	ldr.w	r6, [lr, #48]	; 0x30
 800eca8:	f8de e03c 	ldr.w	lr, [lr, #60]	; 0x3c
	x4 -= x5;
 800ecac:	eba6 060e 	sub.w	r6, r6, lr
	x3 -= x4;
 800ecb0:	1b9b      	subs	r3, r3, r6
	x2 -= x3;
 800ecb2:	1aed      	subs	r5, r5, r3
	x3 -= x5;
 800ecb4:	eba3 030e 	sub.w	r3, r3, lr
	x1 -= x2;
 800ecb8:	1b52      	subs	r2, r2, r5
	x0 -= x1;
 800ecba:	1a81      	subs	r1, r0, r2
	x1 -= x3;
 800ecbc:	1ad2      	subs	r2, r2, r3
	x0 >>= 1;
 800ecbe:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800ecc0:	1052      	asrs	r2, r2, #1
 800ecc2:	fb87 0505 	smull	r0, r5, r7, r5
	a1 = x0 + (x4 >> 1);
 800ecc6:	eb01 0066 	add.w	r0, r1, r6, asr #1
	a2 = x0 - x4;
 800ecca:	1b89      	subs	r1, r1, r6
	x0 = a1 + a0;
 800eccc:	eb00 0645 	add.w	r6, r0, r5, lsl #1
	x4 = a1 - a0;
 800ecd0:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
 800ecd4:	fb87 0303 	smull	r0, r3, r7, r3
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800ecd8:	005f      	lsls	r7, r3, #1
	a1 = x1 + (x5 >> 1);
 800ecda:	eb02 006e 	add.w	r0, r2, lr, asr #1
	a2 = x1 - x5;
 800ecde:	eba2 020e 	sub.w	r2, r2, lr
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800ece2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ece6:	fb84 e303 	smull	lr, r3, r4, r3
 800ecea:	009b      	lsls	r3, r3, #2
 800ecec:	fb8a e202 	smull	lr, r2, sl, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800ecf0:	0092      	lsls	r2, r2, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800ecf2:	1bc0      	subs	r0, r0, r7
 800ecf4:	fb8c 7000 	smull	r7, r0, ip, r0
	*out = x0 + x1;	out++;
 800ecf8:	18f7      	adds	r7, r6, r3
 800ecfa:	9722      	str	r7, [sp, #136]	; 0x88
	*out = x2 + x3;	out++;
 800ecfc:	188f      	adds	r7, r1, r2
 800ecfe:	9723      	str	r7, [sp, #140]	; 0x8c
	*out = x4 + x5;	out++;
 800ed00:	eb05 0780 	add.w	r7, r5, r0, lsl #2
 800ed04:	9724      	str	r7, [sp, #144]	; 0x90
	*out = x4 - x5;	out++;
 800ed06:	eba5 0080 	sub.w	r0, r5, r0, lsl #2
 800ed0a:	9025      	str	r0, [sp, #148]	; 0x94
	*out = x2 - x3;	out++;
 800ed0c:	1a8a      	subs	r2, r1, r2
 800ed0e:	9226      	str	r2, [sp, #152]	; 0x98
	*out = x0 - x1;
 800ed10:	1af3      	subs	r3, r6, r3
 800ed12:	9327      	str	r3, [sp, #156]	; 0x9c

	/* window previous from last time */
	WinPrevious(xPrev, xPrevWin, btPrev);
 800ed14:	9a03      	ldr	r2, [sp, #12]
 800ed16:	a904      	add	r1, sp, #16
 800ed18:	9801      	ldr	r0, [sp, #4]
 800ed1a:	f7ff fb79 	bl	800e410 <WinPrevious>
	/* could unroll this for speed, minimum loads (short blocks usually rare, so doesn't make much overall difference) 
	 * xPrevWin[i] << 2 still has 1 gb always, max gain of windowed xBuf stuff also < 1.0 and gain the sign bit
	 * so y calculations won't overflow
	 */
	wp = imdctWin[2];
	mOut = 0;
 800ed1e:	2500      	movs	r5, #0
	for (i = 0; i < 3; i++) {
 800ed20:	4629      	mov	r1, r5
 800ed22:	f8cd b00c 	str.w	fp, [sp, #12]
 800ed26:	9c02      	ldr	r4, [sp, #8]
 800ed28:	2902      	cmp	r1, #2
 800ed2a:	f300 80a6 	bgt.w	800ee7a <IMDCT12x3+0x35a>
		yLo = (xPrevWin[ 0+i] << 2);
 800ed2e:	ab28      	add	r3, sp, #160	; 0xa0
 800ed30:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800ed34:	f85c 2c90 	ldr.w	r2, [ip, #-144]
 800ed38:	0092      	lsls	r2, r2, #2
	__asm__ volatile (
 800ed3a:	f04f 0b00 	mov.w	fp, #0
 800ed3e:	465b      	mov	r3, fp
 800ed40:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800ed44:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 800ed48:	432b      	orrs	r3, r5
 800ed4a:	01c8      	lsls	r0, r1, #7
 800ed4c:	5022      	str	r2, [r4, r0]
		yLo = (xPrevWin[ 3+i] << 2);
 800ed4e:	1cce      	adds	r6, r1, #3
 800ed50:	aa28      	add	r2, sp, #160	; 0xa0
 800ed52:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 800ed56:	f85e 2c90 	ldr.w	r2, [lr, #-144]
 800ed5a:	0092      	lsls	r2, r2, #2
 800ed5c:	465d      	mov	r5, fp
 800ed5e:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800ed62:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 800ed66:	432b      	orrs	r3, r5
 800ed68:	01f0      	lsls	r0, r6, #7
 800ed6a:	5022      	str	r2, [r4, r0]
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 800ed6c:	f101 0806 	add.w	r8, r1, #6
 800ed70:	aa28      	add	r2, sp, #160	; 0xa0
 800ed72:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 800ed76:	f852 5c90 	ldr.w	r5, [r2, #-144]
 800ed7a:	00ad      	lsls	r5, r5, #2
 800ed7c:	4856      	ldr	r0, [pc, #344]	; (800eed8 <IMDCT12x3+0x3b8>)
 800ed7e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 800ed82:	f85e 7c48 	ldr.w	r7, [lr, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ed86:	fb82 e707 	smull	lr, r7, r2, r7
 800ed8a:	442f      	add	r7, r5
	__asm__ volatile (
 800ed8c:	465a      	mov	r2, fp
 800ed8e:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
 800ed92:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 800ed96:	4313      	orrs	r3, r2
 800ed98:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 800ed9c:	50a7      	str	r7, [r4, r2]
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 800ed9e:	f101 0709 	add.w	r7, r1, #9
 800eda2:	aa28      	add	r2, sp, #160	; 0xa0
 800eda4:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 800eda8:	f85e 2c90 	ldr.w	r2, [lr, #-144]
 800edac:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800edb0:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 800edb4:	f1c1 0205 	rsb	r2, r1, #5
 800edb8:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800edbc:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800edc0:	f852 2c48 	ldr.w	r2, [r2, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800edc4:	fb85 a202 	smull	sl, r2, r5, r2
 800edc8:	444a      	add	r2, r9
	__asm__ volatile (
 800edca:	465d      	mov	r5, fp
 800edcc:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800edd0:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 800edd4:	432b      	orrs	r3, r5
 800edd6:	9302      	str	r3, [sp, #8]
 800edd8:	01fd      	lsls	r5, r7, #7
 800edda:	5162      	str	r2, [r4, r5]
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 800eddc:	f101 090c 	add.w	r9, r1, #12
 800ede0:	ab28      	add	r3, sp, #160	; 0xa0
 800ede2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ede6:	f852 5c90 	ldr.w	r5, [r2, #-144]
 800edea:	00ad      	lsls	r5, r5, #2
 800edec:	f850 2028 	ldr.w	r2, [r0, r8, lsl #2]
 800edf0:	f1c1 0802 	rsb	r8, r1, #2
 800edf4:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800edf8:	f858 8c48 	ldr.w	r8, [r8, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800edfc:	fb82 a808 	smull	sl, r8, r2, r8
 800ee00:	f85e 2c48 	ldr.w	r2, [lr, #-72]
 800ee04:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ee08:	fb83 e202 	smull	lr, r2, r3, r2
 800ee0c:	4442      	add	r2, r8
 800ee0e:	442a      	add	r2, r5
	__asm__ volatile (
 800ee10:	465d      	mov	r5, fp
 800ee12:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800ee16:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 800ee1a:	9b02      	ldr	r3, [sp, #8]
 800ee1c:	432b      	orrs	r3, r5
 800ee1e:	ea4f 19c9 	mov.w	r9, r9, lsl #7
 800ee22:	f844 2009 	str.w	r2, [r4, r9]
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 800ee26:	f101 0e0f 	add.w	lr, r1, #15
 800ee2a:	aa28      	add	r2, sp, #160	; 0xa0
 800ee2c:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 800ee30:	f852 5c90 	ldr.w	r5, [r2, #-144]
 800ee34:	00ad      	lsls	r5, r5, #2
 800ee36:	f850 8027 	ldr.w	r8, [r0, r7, lsl #2]
 800ee3a:	f85c 7c48 	ldr.w	r7, [ip, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ee3e:	fb88 2707 	smull	r2, r7, r8, r7
 800ee42:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800ee46:	f1c1 020b 	rsb	r2, r1, #11
 800ee4a:	ae28      	add	r6, sp, #160	; 0xa0
 800ee4c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800ee50:	f852 2c48 	ldr.w	r2, [r2, #-72]
 800ee54:	fb80 6202 	smull	r6, r2, r0, r2
 800ee58:	443a      	add	r2, r7
 800ee5a:	442a      	add	r2, r5
	__asm__ volatile (
 800ee5c:	465d      	mov	r5, fp
 800ee5e:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800ee62:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 800ee66:	431d      	orrs	r5, r3
 800ee68:	ea4f 1ece 	mov.w	lr, lr, lsl #7
 800ee6c:	f844 200e 	str.w	r2, [r4, lr]
	for (i = 0; i < 3; i++) {
 800ee70:	3101      	adds	r1, #1
 800ee72:	e759      	b.n	800ed28 <IMDCT12x3+0x208>
	es = 0;
 800ee74:	f04f 0b00 	mov.w	fp, #0
 800ee78:	e67d      	b.n	800eb76 <IMDCT12x3+0x56>
	}

	/* save previous (unwindowed) for overlap - only need samples 6-8, 12-17 */
	for (i = 6; i < 9; i++)
 800ee7a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ee7e:	2306      	movs	r3, #6
 800ee80:	2b08      	cmp	r3, #8
 800ee82:	dc0b      	bgt.n	800ee9c <IMDCT12x3+0x37c>
		*xPrev++ = xBuf[i] >> 2;
 800ee84:	aa28      	add	r2, sp, #160	; 0xa0
 800ee86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ee8a:	f852 1c48 	ldr.w	r1, [r2, #-72]
 800ee8e:	9a01      	ldr	r2, [sp, #4]
 800ee90:	1089      	asrs	r1, r1, #2
 800ee92:	f842 1b04 	str.w	r1, [r2], #4
	for (i = 6; i < 9; i++)
 800ee96:	3301      	adds	r3, #1
		*xPrev++ = xBuf[i] >> 2;
 800ee98:	9201      	str	r2, [sp, #4]
 800ee9a:	e7f1      	b.n	800ee80 <IMDCT12x3+0x360>
	for (i = 12; i < 18; i++)
 800ee9c:	230c      	movs	r3, #12
 800ee9e:	e00a      	b.n	800eeb6 <IMDCT12x3+0x396>
		*xPrev++ = xBuf[i] >> 2;
 800eea0:	aa28      	add	r2, sp, #160	; 0xa0
 800eea2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eea6:	f852 1c48 	ldr.w	r1, [r2, #-72]
 800eeaa:	9a01      	ldr	r2, [sp, #4]
 800eeac:	1089      	asrs	r1, r1, #2
 800eeae:	f842 1b04 	str.w	r1, [r2], #4
	for (i = 12; i < 18; i++)
 800eeb2:	3301      	adds	r3, #1
		*xPrev++ = xBuf[i] >> 2;
 800eeb4:	9201      	str	r2, [sp, #4]
	for (i = 12; i < 18; i++)
 800eeb6:	2b11      	cmp	r3, #17
 800eeb8:	ddf2      	ble.n	800eea0 <IMDCT12x3+0x380>

	xPrev -= 9;
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800eeba:	4620      	mov	r0, r4
 800eebc:	465b      	mov	r3, fp
 800eebe:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800eec0:	9901      	ldr	r1, [sp, #4]
 800eec2:	3924      	subs	r1, #36	; 0x24
 800eec4:	f7ff fb36 	bl	800e534 <FreqInvertRescale>

	return mOut;
}
 800eec8:	4328      	orrs	r0, r5
 800eeca:	b029      	add	sp, #164	; 0xa4
 800eecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed0:	6ed9eba1 	.word	0x6ed9eba1
 800eed4:	7ba3751d 	.word	0x7ba3751d
 800eed8:	0801de0c 	.word	0x0801de0c
 800eedc:	5a82799a 	.word	0x5a82799a
 800eee0:	2120fb83 	.word	0x2120fb83

0800eee4 <HybridTransform>:
 *                (including overlap-add)
 *
 * TODO:        examine mixedBlock/winSwitch logic carefully (test he_mode.bit)
 **************************************************************************************/
static int HybridTransform(int *xCurr, int *xPrev, int y[BLOCK_SIZE][NBANDS], SideInfoSub *sis, BlockCount *bc)
{
 800eee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee8:	b097      	sub	sp, #92	; 0x5c
 800eeea:	4680      	mov	r8, r0
 800eeec:	4689      	mov	r9, r1
 800eeee:	4616      	mov	r6, r2
 800eef0:	469a      	mov	sl, r3
 800eef2:	9f20      	ldr	r7, [sp, #128]	; 0x80

	ASSERT(bc->nBlocksLong  <= NBANDS);
	ASSERT(bc->nBlocksTotal <= NBANDS);
	ASSERT(bc->nBlocksPrev  <= NBANDS);

	mOut = 0;
 800eef4:	2500      	movs	r5, #0

	/* do long blocks, if any */
	for(i = 0; i < bc->nBlocksLong; i++) {
 800eef6:	462c      	mov	r4, r5
 800eef8:	e014      	b.n	800ef24 <HybridTransform+0x40>
		/* currWinIdx picks the right window for long blocks (if mixed, long blocks use window type 0) */
		currWinIdx = sis->blockType;
		if (sis->mixedBlock && i < bc->currWinSwitch) 
			currWinIdx = 0;

		prevWinIdx = bc->prevType;
 800eefa:	68fa      	ldr	r2, [r7, #12]
		if (i < bc->prevWinSwitch)
 800eefc:	6939      	ldr	r1, [r7, #16]
 800eefe:	42a1      	cmp	r1, r4
 800ef00:	dd00      	ble.n	800ef04 <HybridTransform+0x20>
			 prevWinIdx = 0;
 800ef02:	2200      	movs	r2, #0

		/* do 36-point IMDCT, including windowing and overlap-add */
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 800ef04:	69b9      	ldr	r1, [r7, #24]
 800ef06:	9102      	str	r1, [sp, #8]
 800ef08:	9401      	str	r4, [sp, #4]
 800ef0a:	9200      	str	r2, [sp, #0]
 800ef0c:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 800ef10:	4649      	mov	r1, r9
 800ef12:	4640      	mov	r0, r8
 800ef14:	f7ff fbe0 	bl	800e6d8 <IMDCT36>
 800ef18:	4305      	orrs	r5, r0
		xCurr += 18;
 800ef1a:	f108 0848 	add.w	r8, r8, #72	; 0x48
		xPrev += 9;
 800ef1e:	f109 0924 	add.w	r9, r9, #36	; 0x24
	for(i = 0; i < bc->nBlocksLong; i++) {
 800ef22:	3401      	adds	r4, #1
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	42a3      	cmp	r3, r4
 800ef28:	dd19      	ble.n	800ef5e <HybridTransform+0x7a>
		currWinIdx = sis->blockType;
 800ef2a:	f8da 3014 	ldr.w	r3, [sl, #20]
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800ef2e:	f8da 2018 	ldr.w	r2, [sl, #24]
 800ef32:	2a00      	cmp	r2, #0
 800ef34:	d0e1      	beq.n	800eefa <HybridTransform+0x16>
 800ef36:	697a      	ldr	r2, [r7, #20]
 800ef38:	42a2      	cmp	r2, r4
 800ef3a:	ddde      	ble.n	800eefa <HybridTransform+0x16>
			currWinIdx = 0;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	e7dc      	b.n	800eefa <HybridTransform+0x16>

		prevWinIdx = bc->prevType;
		if (i < bc->prevWinSwitch)
			 prevWinIdx = 0;
		
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 800ef40:	69ba      	ldr	r2, [r7, #24]
 800ef42:	9201      	str	r2, [sp, #4]
 800ef44:	9400      	str	r4, [sp, #0]
 800ef46:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 800ef4a:	4649      	mov	r1, r9
 800ef4c:	4640      	mov	r0, r8
 800ef4e:	f7ff fde7 	bl	800eb20 <IMDCT12x3>
 800ef52:	4305      	orrs	r5, r0
		xCurr += 18;
 800ef54:	f108 0848 	add.w	r8, r8, #72	; 0x48
		xPrev += 9;
 800ef58:	f109 0924 	add.w	r9, r9, #36	; 0x24
	for (   ; i < bc->nBlocksTotal; i++) {
 800ef5c:	3401      	adds	r4, #1
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	42a3      	cmp	r3, r4
 800ef62:	dd05      	ble.n	800ef70 <HybridTransform+0x8c>
		prevWinIdx = bc->prevType;
 800ef64:	68fb      	ldr	r3, [r7, #12]
		if (i < bc->prevWinSwitch)
 800ef66:	693a      	ldr	r2, [r7, #16]
 800ef68:	42a2      	cmp	r2, r4
 800ef6a:	dde9      	ble.n	800ef40 <HybridTransform+0x5c>
			 prevWinIdx = 0;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	e7e7      	b.n	800ef40 <HybridTransform+0x5c>
	}
	nBlocksOut = i;
 800ef70:	46a0      	mov	r8, r4
 800ef72:	e006      	b.n	800ef82 <HybridTransform+0x9e>
			y[2*j+1][i] = xp;
			mOut |= FASTABS(xp);

			xPrev[j] = 0;
		}
		xPrev += 9;
 800ef74:	f109 0924 	add.w	r9, r9, #36	; 0x24
		if (nonZero)
 800ef78:	f1bc 0f00 	cmp.w	ip, #0
 800ef7c:	d000      	beq.n	800ef80 <HybridTransform+0x9c>
			nBlocksOut = i;
 800ef7e:	46a0      	mov	r8, r4
	for (   ; i < bc->nBlocksPrev; i++) {
 800ef80:	3401      	adds	r4, #1
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	42a3      	cmp	r3, r4
 800ef86:	dd4d      	ble.n	800f024 <HybridTransform+0x140>
		prevWinIdx = bc->prevType;
 800ef88:	68fa      	ldr	r2, [r7, #12]
		if (i < bc->prevWinSwitch)
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	42a3      	cmp	r3, r4
 800ef8e:	dd00      	ble.n	800ef92 <HybridTransform+0xae>
			 prevWinIdx = 0;
 800ef90:	2200      	movs	r2, #0
		WinPrevious(xPrev, xPrevWin, prevWinIdx);
 800ef92:	a904      	add	r1, sp, #16
 800ef94:	4648      	mov	r0, r9
 800ef96:	f7ff fa3b 	bl	800e410 <WinPrevious>
		fiBit = i << 31;
 800ef9a:	ea4f 7ec4 	mov.w	lr, r4, lsl #31
		nonZero = 0;
 800ef9e:	f04f 0c00 	mov.w	ip, #0
		for (j = 0; j < 9; j++) {
 800efa2:	4663      	mov	r3, ip
 800efa4:	2b08      	cmp	r3, #8
 800efa6:	dce5      	bgt.n	800ef74 <HybridTransform+0x90>
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 800efa8:	0058      	lsls	r0, r3, #1
 800efaa:	aa16      	add	r2, sp, #88	; 0x58
 800efac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800efb0:	f852 2c48 	ldr.w	r2, [r2, #-72]
 800efb4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
			nonZero |= xp;
 800efb8:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
			y[2*j+0][i] = xp;
 800efbc:	021a      	lsls	r2, r3, #8
 800efbe:	eb06 2103 	add.w	r1, r6, r3, lsl #8
 800efc2:	f841 a024 	str.w	sl, [r1, r4, lsl #2]
 800efc6:	2100      	movs	r1, #0
 800efc8:	468b      	mov	fp, r1
 800efca:	ea8a 7bea 	eor.w	fp, sl, sl, asr #31
 800efce:	ebab 7bea 	sub.w	fp, fp, sl, asr #31
			mOut |= FASTABS(xp);
 800efd2:	ea45 050b 	orr.w	r5, r5, fp
			xp = xPrevWin[2*j+1] << 2;
 800efd6:	3001      	adds	r0, #1
 800efd8:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 800efdc:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800efe0:	f850 ac48 	ldr.w	sl, [r0, #-72]
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 800efe4:	ea4f 70ee 	mov.w	r0, lr, asr #31
 800efe8:	ea80 008a 	eor.w	r0, r0, sl, lsl #2
 800efec:	f004 0a01 	and.w	sl, r4, #1
 800eff0:	4450      	add	r0, sl
			nonZero |= xp;
 800eff2:	ea4c 0c00 	orr.w	ip, ip, r0
			y[2*j+1][i] = xp;
 800eff6:	3280      	adds	r2, #128	; 0x80
 800eff8:	4432      	add	r2, r6
 800effa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800effe:	460a      	mov	r2, r1
 800f000:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800f004:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
			mOut |= FASTABS(xp);
 800f008:	4315      	orrs	r5, r2
			xPrev[j] = 0;
 800f00a:	f849 1023 	str.w	r1, [r9, r3, lsl #2]
		for (j = 0; j < 9; j++) {
 800f00e:	3301      	adds	r3, #1
 800f010:	e7c8      	b.n	800efa4 <HybridTransform+0xc0>
	}
	
	/* clear rest of blocks */
	for (   ; i < 32; i++) {
		for (j = 0; j < 18; j++) 
			y[j][i] = 0;
 800f012:	eb06 12c3 	add.w	r2, r6, r3, lsl #7
 800f016:	2100      	movs	r1, #0
 800f018:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
		for (j = 0; j < 18; j++) 
 800f01c:	3301      	adds	r3, #1
 800f01e:	2b11      	cmp	r3, #17
 800f020:	ddf7      	ble.n	800f012 <HybridTransform+0x12e>
	for (   ; i < 32; i++) {
 800f022:	3401      	adds	r4, #1
 800f024:	2c1f      	cmp	r4, #31
 800f026:	dc01      	bgt.n	800f02c <HybridTransform+0x148>
		for (j = 0; j < 18; j++) 
 800f028:	2300      	movs	r3, #0
 800f02a:	e7f8      	b.n	800f01e <HybridTransform+0x13a>
	if (!x)
 800f02c:	b15d      	cbz	r5, 800f046 <HybridTransform+0x162>
	numZeros = 0;
 800f02e:	2300      	movs	r3, #0
 800f030:	e001      	b.n	800f036 <HybridTransform+0x152>
		numZeros++;
 800f032:	3301      	adds	r3, #1
		x <<= 1;
 800f034:	006d      	lsls	r5, r5, #1
	while (!(x & 0x80000000)) {
 800f036:	2d00      	cmp	r5, #0
 800f038:	dafb      	bge.n	800f032 <HybridTransform+0x14e>
	}

	bc->gbOut = CLZ(mOut) - 1;
 800f03a:	3b01      	subs	r3, #1
 800f03c:	61fb      	str	r3, [r7, #28]

	return nBlocksOut;
}
 800f03e:	4640      	mov	r0, r8
 800f040:	b017      	add	sp, #92	; 0x5c
 800f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (sizeof(int) * 8);
 800f046:	2320      	movs	r3, #32
 800f048:	e7f7      	b.n	800f03a <HybridTransform+0x156>
	...

0800f04c <xmp3fixpt_IMDCT>:
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f000 80d2 	beq.w	800f1f6 <xmp3fixpt_IMDCT+0x1aa>
{
 800f052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f056:	b08b      	sub	sp, #44	; 0x2c
 800f058:	460e      	mov	r6, r1
 800f05a:	4614      	mov	r4, r2
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800f05c:	6802      	ldr	r2, [r0, #0]
 800f05e:	2a00      	cmp	r2, #0
 800f060:	f000 80cc 	beq.w	800f1fc <xmp3fixpt_IMDCT+0x1b0>
 800f064:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f068:	f1b9 0f00 	cmp.w	r9, #0
 800f06c:	f000 80c9 	beq.w	800f202 <xmp3fixpt_IMDCT+0x1b6>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800f070:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800f074:	f1ba 0f00 	cmp.w	sl, #0
 800f078:	f000 80c6 	beq.w	800f208 <xmp3fixpt_IMDCT+0x1bc>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800f07c:	6947      	ldr	r7, [r0, #20]
 800f07e:	2f00      	cmp	r7, #0
 800f080:	f000 80c5 	beq.w	800f20e <xmp3fixpt_IMDCT+0x1c2>
	/* anti-aliasing done on whole long blocks only
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800f084:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f086:	7812      	ldrb	r2, [r2, #0]
 800f088:	2a00      	cmp	r2, #0
 800f08a:	f040 809e 	bne.w	800f1ca <xmp3fixpt_IMDCT+0x17e>
 800f08e:	2208      	movs	r2, #8
 800f090:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800f094:	4a5f      	ldr	r2, [pc, #380]	; (800f214 <xmp3fixpt_IMDCT+0x1c8>)
 800f096:	fb82 1203 	smull	r1, r2, r2, r3
 800f09a:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800f09e:	ebc8 08a2 	rsb	r8, r8, r2, asr #2
 800f0a2:	fa0f f888 	sxth.w	r8, r8
	if (si->sis[gr][ch].blockType != 2) {
 800f0a6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800f0aa:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
 800f0ae:	0112      	lsls	r2, r2, #4
 800f0b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f0b4:	444b      	add	r3, r9
 800f0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0b8:	2b02      	cmp	r3, #2
 800f0ba:	f000 808a 	beq.w	800f1d2 <xmp3fixpt_IMDCT+0x186>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800f0be:	f504 6390 	add.w	r3, r4, #1152	; 0x480
 800f0c2:	f85a 5023 	ldr.w	r5, [sl, r3, lsl #2]
 800f0c6:	f240 2326 	movw	r3, #550	; 0x226
 800f0ca:	429d      	cmp	r5, r3
 800f0cc:	dc7f      	bgt.n	800f1ce <xmp3fixpt_IMDCT+0x182>
 800f0ce:	3507      	adds	r5, #7
 800f0d0:	4b50      	ldr	r3, [pc, #320]	; (800f214 <xmp3fixpt_IMDCT+0x1c8>)
 800f0d2:	fb83 2305 	smull	r2, r3, r3, r5
 800f0d6:	17ed      	asrs	r5, r5, #31
 800f0d8:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
 800f0dc:	3501      	adds	r5, #1
 800f0de:	9502      	str	r5, [sp, #8]
		nBfly = bc.nBlocksLong - 1;
 800f0e0:	3d01      	subs	r5, #1
		/* all short transforms */
		bc.nBlocksLong = 0;
		nBfly = 0;
	}
 
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800f0e2:	eb04 0bc4 	add.w	fp, r4, r4, lsl #3
 800f0e6:	eb0a 2b0b 	add.w	fp, sl, fp, lsl #8
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	4658      	mov	r0, fp
 800f0ee:	f7ff f8c1 	bl	800e274 <AntiAlias>
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f0f2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800f0f6:	005b      	lsls	r3, r3, #1
 800f0f8:	3308      	adds	r3, #8
 800f0fa:	f504 6290 	add.w	r2, r4, #1152	; 0x480
 800f0fe:	f85a 5022 	ldr.w	r5, [sl, r2, lsl #2]
 800f102:	42ab      	cmp	r3, r5
 800f104:	bfb8      	it	lt
 800f106:	462b      	movlt	r3, r5
 800f108:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);

	/* for readability, use a struct instead of passing a million parameters to HybridTransform() */
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800f10c:	3311      	adds	r3, #17
 800f10e:	4a41      	ldr	r2, [pc, #260]	; (800f214 <xmp3fixpt_IMDCT+0x1c8>)
 800f110:	fb82 1203 	smull	r1, r2, r2, r3
 800f114:	17db      	asrs	r3, r3, #31
 800f116:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800f11a:	9303      	str	r3, [sp, #12]
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f11c:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 800f120:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f124:	9304      	str	r3, [sp, #16]
	bc.prevType = mi->prevType[ch];
 800f126:	f204 63c2 	addw	r3, r4, #1730	; 0x6c2
 800f12a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f12e:	9305      	str	r3, [sp, #20]
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 800f130:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
 800f134:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f138:	9306      	str	r3, [sp, #24]
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f13a:	00e3      	lsls	r3, r4, #3
 800f13c:	191a      	adds	r2, r3, r4
 800f13e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f148:	444b      	add	r3, r9
 800f14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f14c:	b103      	cbz	r3, 800f150 <xmp3fixpt_IMDCT+0x104>
 800f14e:	4643      	mov	r3, r8
 800f150:	9307      	str	r3, [sp, #28]
	bc.gbIn = hi->gb[ch];
 800f152:	f204 4382 	addw	r3, r4, #1154	; 0x482
 800f156:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 800f15a:	9308      	str	r3, [sp, #32]

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f15c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800f160:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800f164:	01c9      	lsls	r1, r1, #7
 800f166:	f501 5190 	add.w	r1, r1, #4608	; 0x1200
 800f16a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800f16e:	00f5      	lsls	r5, r6, #3
 800f170:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800f174:	011b      	lsls	r3, r3, #4
 800f176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f17a:	3328      	adds	r3, #40	; 0x28
 800f17c:	a802      	add	r0, sp, #8
 800f17e:	9000      	str	r0, [sp, #0]
 800f180:	444b      	add	r3, r9
 800f182:	eb07 2202 	add.w	r2, r7, r2, lsl #8
 800f186:	4439      	add	r1, r7
 800f188:	4658      	mov	r0, fp
 800f18a:	f7ff feab 	bl	800eee4 <HybridTransform>
 800f18e:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 800f192:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800f196:	44a0      	add	r8, r4
 800f198:	442e      	add	r6, r5
 800f19a:	0136      	lsls	r6, r6, #4
 800f19c:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800f1a0:	44b1      	add	r9, r6
 800f1a2:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 800f1a6:	f204 63c2 	addw	r3, r4, #1730	; 0x6c2
 800f1aa:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 800f1ae:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
 800f1b2:	9a07      	ldr	r2, [sp, #28]
 800f1b4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	mi->gb[ch] = bc.gbOut;
 800f1b8:	f204 64c6 	addw	r4, r4, #1734	; 0x6c6
 800f1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1be:	f847 3024 	str.w	r3, [r7, r4, lsl #2]

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 800f1c2:	2000      	movs	r0, #0
}
 800f1c4:	b00b      	add	sp, #44	; 0x2c
 800f1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800f1ca:	2206      	movs	r2, #6
 800f1cc:	e760      	b.n	800f090 <xmp3fixpt_IMDCT+0x44>
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800f1ce:	2520      	movs	r5, #32
 800f1d0:	e785      	b.n	800f0de <xmp3fixpt_IMDCT+0x92>
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 800f1d2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800f1d6:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
 800f1da:	0112      	lsls	r2, r2, #4
 800f1dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f1e0:	444b      	add	r3, r9
 800f1e2:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800f1e4:	b125      	cbz	r5, 800f1f0 <xmp3fixpt_IMDCT+0x1a4>
		bc.nBlocksLong = blockCutoff;	
 800f1e6:	f8cd 8008 	str.w	r8, [sp, #8]
		nBfly = bc.nBlocksLong - 1;
 800f1ea:	f108 35ff 	add.w	r5, r8, #4294967295
 800f1ee:	e778      	b.n	800f0e2 <xmp3fixpt_IMDCT+0x96>
		bc.nBlocksLong = 0;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	9302      	str	r3, [sp, #8]
		nBfly = 0;
 800f1f4:	e775      	b.n	800f0e2 <xmp3fixpt_IMDCT+0x96>
		return -1;
 800f1f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f1fa:	4770      	bx	lr
		return -1;
 800f1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f200:	e7e0      	b.n	800f1c4 <xmp3fixpt_IMDCT+0x178>
 800f202:	f04f 30ff 	mov.w	r0, #4294967295
 800f206:	e7dd      	b.n	800f1c4 <xmp3fixpt_IMDCT+0x178>
 800f208:	f04f 30ff 	mov.w	r0, #4294967295
 800f20c:	e7da      	b.n	800f1c4 <xmp3fixpt_IMDCT+0x178>
 800f20e:	f04f 30ff 	mov.w	r0, #4294967295
 800f212:	e7d7      	b.n	800f1c4 <xmp3fixpt_IMDCT+0x178>
 800f214:	38e38e39 	.word	0x38e38e39

0800f218 <xmp3fixpt_PolyphaseMono>:
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 *                (note max filter gain - see polyCoef[] comments)
 **************************************************************************************/
void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
{	
 800f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f21c:	b085      	sub	sp, #20
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = rndVal;

	MC0M(0)
 800f21e:	6814      	ldr	r4, [r2, #0]
 800f220:	6853      	ldr	r3, [r2, #4]
 800f222:	680e      	ldr	r6, [r1, #0]
 800f224:	6dcf      	ldr	r7, [r1, #92]	; 0x5c
}

//mw
static __inline Word64 MADD64(Word64 sum, int x, int y)
{
   return (sum + ((int64_t)x * y));
 800f226:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800f22a:	17e5      	asrs	r5, r4, #31
 800f22c:	fb04 fc0c 	mul.w	ip, r4, ip
 800f230:	fb06 cc05 	mla	ip, r6, r5, ip
 800f234:	fba4 4606 	umull	r4, r6, r4, r6
 800f238:	f114 7400 	adds.w	r4, r4, #33554432	; 0x2000000
 800f23c:	eb4c 0506 	adc.w	r5, ip, r6
 800f240:	425b      	negs	r3, r3
 800f242:	17fe      	asrs	r6, r7, #31
 800f244:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800f248:	fb03 f606 	mul.w	r6, r3, r6
 800f24c:	fb07 660c 	mla	r6, r7, ip, r6
 800f250:	fba3 3c07 	umull	r3, ip, r3, r7
 800f254:	4466      	add	r6, ip
 800f256:	191b      	adds	r3, r3, r4
 800f258:	eb46 0c05 	adc.w	ip, r6, r5
	MC0M(1)
 800f25c:	6895      	ldr	r5, [r2, #8]
 800f25e:	684c      	ldr	r4, [r1, #4]
 800f260:	6d8f      	ldr	r7, [r1, #88]	; 0x58
 800f262:	17e6      	asrs	r6, r4, #31
 800f264:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f268:	fb05 f606 	mul.w	r6, r5, r6
 800f26c:	fb04 6608 	mla	r6, r4, r8, r6
 800f270:	fba5 5e04 	umull	r5, lr, r5, r4
 800f274:	4476      	add	r6, lr
 800f276:	18ed      	adds	r5, r5, r3
 800f278:	eb46 060c 	adc.w	r6, r6, ip
 800f27c:	68d3      	ldr	r3, [r2, #12]
 800f27e:	425b      	negs	r3, r3
 800f280:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800f284:	17dc      	asrs	r4, r3, #31
 800f286:	fb03 fc0c 	mul.w	ip, r3, ip
 800f28a:	fb07 cc04 	mla	ip, r7, r4, ip
 800f28e:	fba3 3707 	umull	r3, r7, r3, r7
 800f292:	44bc      	add	ip, r7
 800f294:	195b      	adds	r3, r3, r5
 800f296:	eb4c 0706 	adc.w	r7, ip, r6
	MC0M(2)
 800f29a:	6915      	ldr	r5, [r2, #16]
 800f29c:	688c      	ldr	r4, [r1, #8]
 800f29e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 800f2a0:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800f2a4:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f2a8:	fb05 fc0c 	mul.w	ip, r5, ip
 800f2ac:	fb04 cc08 	mla	ip, r4, r8, ip
 800f2b0:	fba5 5e04 	umull	r5, lr, r5, r4
 800f2b4:	44f4      	add	ip, lr
 800f2b6:	18ed      	adds	r5, r5, r3
 800f2b8:	eb4c 0c07 	adc.w	ip, ip, r7
 800f2bc:	6953      	ldr	r3, [r2, #20]
 800f2be:	425b      	negs	r3, r3
 800f2c0:	17f7      	asrs	r7, r6, #31
 800f2c2:	17dc      	asrs	r4, r3, #31
 800f2c4:	fb03 f707 	mul.w	r7, r3, r7
 800f2c8:	fb06 7704 	mla	r7, r6, r4, r7
 800f2cc:	fba3 3606 	umull	r3, r6, r3, r6
 800f2d0:	4437      	add	r7, r6
 800f2d2:	195b      	adds	r3, r3, r5
 800f2d4:	eb47 060c 	adc.w	r6, r7, ip
	MC0M(3)
 800f2d8:	6995      	ldr	r5, [r2, #24]
 800f2da:	68cf      	ldr	r7, [r1, #12]
 800f2dc:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 800f2de:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800f2e2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f2e6:	fb05 fc0c 	mul.w	ip, r5, ip
 800f2ea:	fb07 cc08 	mla	ip, r7, r8, ip
 800f2ee:	fba5 5707 	umull	r5, r7, r5, r7
 800f2f2:	44bc      	add	ip, r7
 800f2f4:	18ed      	adds	r5, r5, r3
 800f2f6:	eb4c 0706 	adc.w	r7, ip, r6
 800f2fa:	69d3      	ldr	r3, [r2, #28]
 800f2fc:	425b      	negs	r3, r3
 800f2fe:	17e6      	asrs	r6, r4, #31
 800f300:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800f304:	fb03 f606 	mul.w	r6, r3, r6
 800f308:	fb04 660c 	mla	r6, r4, ip, r6
 800f30c:	fba3 3c04 	umull	r3, ip, r3, r4
 800f310:	4466      	add	r6, ip
 800f312:	195b      	adds	r3, r3, r5
 800f314:	eb46 0c07 	adc.w	ip, r6, r7
	MC0M(4)
 800f318:	6a15      	ldr	r5, [r2, #32]
 800f31a:	690c      	ldr	r4, [r1, #16]
 800f31c:	6ccf      	ldr	r7, [r1, #76]	; 0x4c
 800f31e:	17e6      	asrs	r6, r4, #31
 800f320:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f324:	fb05 f606 	mul.w	r6, r5, r6
 800f328:	fb04 6608 	mla	r6, r4, r8, r6
 800f32c:	fba5 5e04 	umull	r5, lr, r5, r4
 800f330:	4476      	add	r6, lr
 800f332:	18ed      	adds	r5, r5, r3
 800f334:	eb46 060c 	adc.w	r6, r6, ip
 800f338:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f33a:	425b      	negs	r3, r3
 800f33c:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800f340:	17dc      	asrs	r4, r3, #31
 800f342:	fb03 fc0c 	mul.w	ip, r3, ip
 800f346:	fb07 cc04 	mla	ip, r7, r4, ip
 800f34a:	fba3 3707 	umull	r3, r7, r3, r7
 800f34e:	44bc      	add	ip, r7
 800f350:	195b      	adds	r3, r3, r5
 800f352:	eb4c 0706 	adc.w	r7, ip, r6
	MC0M(5)
 800f356:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800f358:	694c      	ldr	r4, [r1, #20]
 800f35a:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 800f35c:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800f360:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f364:	fb05 fc0c 	mul.w	ip, r5, ip
 800f368:	fb04 cc08 	mla	ip, r4, r8, ip
 800f36c:	fba5 5e04 	umull	r5, lr, r5, r4
 800f370:	44f4      	add	ip, lr
 800f372:	18ed      	adds	r5, r5, r3
 800f374:	eb4c 0c07 	adc.w	ip, ip, r7
 800f378:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f37a:	425b      	negs	r3, r3
 800f37c:	17f7      	asrs	r7, r6, #31
 800f37e:	17dc      	asrs	r4, r3, #31
 800f380:	fb03 f707 	mul.w	r7, r3, r7
 800f384:	fb06 7704 	mla	r7, r6, r4, r7
 800f388:	fba3 3606 	umull	r3, r6, r3, r6
 800f38c:	4437      	add	r7, r6
 800f38e:	195b      	adds	r3, r3, r5
 800f390:	eb47 060c 	adc.w	r6, r7, ip
	MC0M(6)
 800f394:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800f396:	698f      	ldr	r7, [r1, #24]
 800f398:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800f39a:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800f39e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f3a2:	fb05 fc0c 	mul.w	ip, r5, ip
 800f3a6:	fb07 cc08 	mla	ip, r7, r8, ip
 800f3aa:	fba5 5707 	umull	r5, r7, r5, r7
 800f3ae:	44bc      	add	ip, r7
 800f3b0:	18ed      	adds	r5, r5, r3
 800f3b2:	eb4c 0706 	adc.w	r7, ip, r6
 800f3b6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f3b8:	425b      	negs	r3, r3
 800f3ba:	17e6      	asrs	r6, r4, #31
 800f3bc:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800f3c0:	fb03 f606 	mul.w	r6, r3, r6
 800f3c4:	fb04 660c 	mla	r6, r4, ip, r6
 800f3c8:	fba3 3c04 	umull	r3, ip, r3, r4
 800f3cc:	4466      	add	r6, ip
 800f3ce:	195b      	adds	r3, r3, r5
 800f3d0:	eb46 0c07 	adc.w	ip, r6, r7
	MC0M(7)
 800f3d4:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800f3d6:	69cd      	ldr	r5, [r1, #28]
 800f3d8:	6c0f      	ldr	r7, [r1, #64]	; 0x40
 800f3da:	17ec      	asrs	r4, r5, #31
 800f3dc:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800f3e0:	fb06 f404 	mul.w	r4, r6, r4
 800f3e4:	fb05 4408 	mla	r4, r5, r8, r4
 800f3e8:	fba6 6e05 	umull	r6, lr, r6, r5
 800f3ec:	4474      	add	r4, lr
 800f3ee:	18f3      	adds	r3, r6, r3
 800f3f0:	eb44 060c 	adc.w	r6, r4, ip
 800f3f4:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800f3f6:	4265      	negs	r5, r4
 800f3f8:	17fc      	asrs	r4, r7, #31
 800f3fa:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800f3fe:	fb05 f404 	mul.w	r4, r5, r4
 800f402:	fb07 440c 	mla	r4, r7, ip, r4
 800f406:	fba5 5707 	umull	r5, r7, r5, r7
 800f40a:	443c      	add	r4, r7
 800f40c:	195b      	adds	r3, r3, r5
 800f40e:	eb44 0406 	adc.w	r4, r4, r6
  return x << n;
}

static __inline Word64 SAR64(Word64 x, int n)
{
  return x >> n;
 800f412:	0d1b      	lsrs	r3, r3, #20
 800f414:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	x >>= fracBits;
 800f418:	119c      	asrs	r4, r3, #6
	if (sign != (x >> 15))
 800f41a:	155d      	asrs	r5, r3, #21
 800f41c:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800f420:	d003      	beq.n	800f42a <xmp3fixpt_PolyphaseMono+0x212>
 800f422:	17de      	asrs	r6, r3, #31
		x = sign ^ ((1 << 15) - 1);
 800f424:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800f428:	4074      	eors	r4, r6

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800f42a:	8004      	strh	r4, [r0, #0]
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = rndVal;

	MC1M(0)
 800f42c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 800f430:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
 800f434:	6835      	ldr	r5, [r6, #0]
   return (sum + ((int64_t)x * y));
 800f436:	17ec      	asrs	r4, r5, #31
 800f438:	17df      	asrs	r7, r3, #31
 800f43a:	fb03 f404 	mul.w	r4, r3, r4
 800f43e:	fb05 4407 	mla	r4, r5, r7, r4
 800f442:	fba3 3505 	umull	r3, r5, r3, r5
 800f446:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 800f44a:	eb44 0405 	adc.w	r4, r4, r5
	MC1M(1)
 800f44e:	f8d2 5404 	ldr.w	r5, [r2, #1028]	; 0x404
 800f452:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800f456:	ea4f 77ec 	mov.w	r7, ip, asr #31
 800f45a:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800f45e:	fb05 f707 	mul.w	r7, r5, r7
 800f462:	fb0c 770e 	mla	r7, ip, lr, r7
 800f466:	fba5 5c0c 	umull	r5, ip, r5, ip
 800f46a:	4467      	add	r7, ip
 800f46c:	195b      	adds	r3, r3, r5
 800f46e:	eb47 0404 	adc.w	r4, r7, r4
	MC1M(2)
 800f472:	f8d2 7408 	ldr.w	r7, [r2, #1032]	; 0x408
 800f476:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800f47a:	ea4f 75ec 	mov.w	r5, ip, asr #31
 800f47e:	ea4f 7ee7 	mov.w	lr, r7, asr #31
 800f482:	fb07 f505 	mul.w	r5, r7, r5
 800f486:	fb0c 550e 	mla	r5, ip, lr, r5
 800f48a:	fba7 7c0c 	umull	r7, ip, r7, ip
 800f48e:	4465      	add	r5, ip
 800f490:	19db      	adds	r3, r3, r7
 800f492:	eb45 0704 	adc.w	r7, r5, r4
	MC1M(3)
 800f496:	f8d2 540c 	ldr.w	r5, [r2, #1036]	; 0x40c
 800f49a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800f49e:	ea4f 74ec 	mov.w	r4, ip, asr #31
 800f4a2:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800f4a6:	fb05 f404 	mul.w	r4, r5, r4
 800f4aa:	fb0c 440e 	mla	r4, ip, lr, r4
 800f4ae:	fba5 5c0c 	umull	r5, ip, r5, ip
 800f4b2:	4464      	add	r4, ip
 800f4b4:	195b      	adds	r3, r3, r5
 800f4b6:	eb44 0507 	adc.w	r5, r4, r7
	MC1M(4)
 800f4ba:	f8d2 4410 	ldr.w	r4, [r2, #1040]	; 0x410
 800f4be:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800f4c2:	ea4f 77ec 	mov.w	r7, ip, asr #31
 800f4c6:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800f4ca:	fb04 f707 	mul.w	r7, r4, r7
 800f4ce:	fb0c 770e 	mla	r7, ip, lr, r7
 800f4d2:	fba4 4c0c 	umull	r4, ip, r4, ip
 800f4d6:	4467      	add	r7, ip
 800f4d8:	191b      	adds	r3, r3, r4
 800f4da:	eb47 0405 	adc.w	r4, r7, r5
	MC1M(5)
 800f4de:	f8d2 7414 	ldr.w	r7, [r2, #1044]	; 0x414
 800f4e2:	f8d6 c014 	ldr.w	ip, [r6, #20]
 800f4e6:	ea4f 75ec 	mov.w	r5, ip, asr #31
 800f4ea:	ea4f 7ee7 	mov.w	lr, r7, asr #31
 800f4ee:	fb07 f505 	mul.w	r5, r7, r5
 800f4f2:	fb0c 550e 	mla	r5, ip, lr, r5
 800f4f6:	fba7 7c0c 	umull	r7, ip, r7, ip
 800f4fa:	4465      	add	r5, ip
 800f4fc:	19db      	adds	r3, r3, r7
 800f4fe:	eb45 0704 	adc.w	r7, r5, r4
	MC1M(6)
 800f502:	f8d2 5418 	ldr.w	r5, [r2, #1048]	; 0x418
 800f506:	f8d6 c018 	ldr.w	ip, [r6, #24]
 800f50a:	ea4f 74ec 	mov.w	r4, ip, asr #31
 800f50e:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800f512:	fb05 f404 	mul.w	r4, r5, r4
 800f516:	fb0c 440e 	mla	r4, ip, lr, r4
 800f51a:	fba5 5c0c 	umull	r5, ip, r5, ip
 800f51e:	4464      	add	r4, ip
 800f520:	195b      	adds	r3, r3, r5
 800f522:	eb44 0507 	adc.w	r5, r4, r7
	MC1M(7)
 800f526:	f8d2 741c 	ldr.w	r7, [r2, #1052]	; 0x41c
 800f52a:	69f6      	ldr	r6, [r6, #28]
 800f52c:	17f4      	asrs	r4, r6, #31
 800f52e:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800f532:	fb07 f404 	mul.w	r4, r7, r4
 800f536:	fb06 440c 	mla	r4, r6, ip, r4
 800f53a:	fba7 7606 	umull	r7, r6, r7, r6
 800f53e:	4434      	add	r4, r6
 800f540:	19db      	adds	r3, r3, r7
 800f542:	eb44 0405 	adc.w	r4, r4, r5
  return x >> n;
 800f546:	0d1b      	lsrs	r3, r3, #20
 800f548:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	x >>= fracBits;
 800f54c:	119c      	asrs	r4, r3, #6
	sign = x >> 31;
 800f54e:	17de      	asrs	r6, r3, #31
	if (sign != (x >> 15))
 800f550:	155d      	asrs	r5, r3, #21
 800f552:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800f556:	d002      	beq.n	800f55e <xmp3fixpt_PolyphaseMono+0x346>
		x = sign ^ ((1 << 15) - 1);
 800f558:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800f55c:	4074      	eors	r4, r6

	*(pcm + 16) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800f55e:	8404      	strh	r4, [r0, #32]

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 800f560:	f102 0b40 	add.w	fp, r2, #64	; 0x40
	vb1 = vbuf + 64;
 800f564:	f501 7180 	add.w	r1, r1, #256	; 0x100
	pcm++;
 800f568:	1c83      	adds	r3, r0, #2
 800f56a:	9302      	str	r3, [sp, #8]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 800f56c:	230f      	movs	r3, #15
 800f56e:	9301      	str	r3, [sp, #4]
 800f570:	e006      	b.n	800f580 <xmp3fixpt_PolyphaseMono+0x368>
		MC2M(6)
		MC2M(7)

		vb1 += 64;
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800f572:	8013      	strh	r3, [r2, #0]
		pcm++;
 800f574:	9b02      	ldr	r3, [sp, #8]
 800f576:	3302      	adds	r3, #2
 800f578:	9302      	str	r3, [sp, #8]
	for (i = 15; i > 0; i--) {
 800f57a:	9b01      	ldr	r3, [sp, #4]
 800f57c:	3b01      	subs	r3, #1
 800f57e:	9301      	str	r3, [sp, #4]
 800f580:	9b01      	ldr	r3, [sp, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	f340 8201 	ble.w	800f98a <xmp3fixpt_PolyphaseMono+0x772>
		MC2M(0)
 800f588:	f8db 5000 	ldr.w	r5, [fp]
 800f58c:	f8db 2004 	ldr.w	r2, [fp, #4]
 800f590:	680c      	ldr	r4, [r1, #0]
 800f592:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
   return (sum + ((int64_t)x * y));
 800f594:	17e3      	asrs	r3, r4, #31
 800f596:	17ef      	asrs	r7, r5, #31
 800f598:	fb04 fe07 	mul.w	lr, r4, r7
 800f59c:	fb05 ee03 	mla	lr, r5, r3, lr
 800f5a0:	fba4 9605 	umull	r9, r6, r4, r5
 800f5a4:	f119 7c00 	adds.w	ip, r9, #33554432	; 0x2000000
 800f5a8:	eb4e 0e06 	adc.w	lr, lr, r6
 800f5ac:	ea4f 78e2 	mov.w	r8, r2, asr #31
 800f5b0:	fb02 f603 	mul.w	r6, r2, r3
 800f5b4:	fb04 6608 	mla	r6, r4, r8, r6
 800f5b8:	fba2 4804 	umull	r4, r8, r2, r4
 800f5bc:	f114 7300 	adds.w	r3, r4, #33554432	; 0x2000000
 800f5c0:	eb46 0608 	adc.w	r6, r6, r8
 800f5c4:	f1c2 0900 	rsb	r9, r2, #0
 800f5c8:	17c4      	asrs	r4, r0, #31
 800f5ca:	ea4f 78e9 	mov.w	r8, r9, asr #31
 800f5ce:	fb09 f204 	mul.w	r2, r9, r4
 800f5d2:	fb00 2808 	mla	r8, r0, r8, r2
 800f5d6:	fba9 9200 	umull	r9, r2, r9, r0
 800f5da:	4442      	add	r2, r8
 800f5dc:	eb19 090c 	adds.w	r9, r9, ip
 800f5e0:	eb42 020e 	adc.w	r2, r2, lr
 800f5e4:	fb00 f707 	mul.w	r7, r0, r7
 800f5e8:	fb05 7404 	mla	r4, r5, r4, r7
 800f5ec:	fba0 0505 	umull	r0, r5, r0, r5
 800f5f0:	4425      	add	r5, r4
 800f5f2:	18c4      	adds	r4, r0, r3
 800f5f4:	eb45 0306 	adc.w	r3, r5, r6
 800f5f8:	9303      	str	r3, [sp, #12]
		MC2M(1)
 800f5fa:	f8db 6008 	ldr.w	r6, [fp, #8]
 800f5fe:	f8db 300c 	ldr.w	r3, [fp, #12]
 800f602:	684d      	ldr	r5, [r1, #4]
 800f604:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800f606:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f60a:	17f7      	asrs	r7, r6, #31
 800f60c:	fb05 fc07 	mul.w	ip, r5, r7
 800f610:	fb06 cc08 	mla	ip, r6, r8, ip
 800f614:	fba5 ea06 	umull	lr, sl, r5, r6
 800f618:	44e2      	add	sl, ip
 800f61a:	eb1e 0909 	adds.w	r9, lr, r9
 800f61e:	eb4a 0a02 	adc.w	sl, sl, r2
 800f622:	17da      	asrs	r2, r3, #31
 800f624:	fb03 f808 	mul.w	r8, r3, r8
 800f628:	fb05 8802 	mla	r8, r5, r2, r8
 800f62c:	fba3 2505 	umull	r2, r5, r3, r5
 800f630:	44a8      	add	r8, r5
 800f632:	1914      	adds	r4, r2, r4
 800f634:	9a03      	ldr	r2, [sp, #12]
 800f636:	eb48 0802 	adc.w	r8, r8, r2
 800f63a:	f1c3 0e00 	rsb	lr, r3, #0
 800f63e:	17c5      	asrs	r5, r0, #31
 800f640:	ea4f 7cee 	mov.w	ip, lr, asr #31
 800f644:	fb0e f205 	mul.w	r2, lr, r5
 800f648:	fb00 2c0c 	mla	ip, r0, ip, r2
 800f64c:	fbae e200 	umull	lr, r2, lr, r0
 800f650:	4462      	add	r2, ip
 800f652:	eb1e 0e09 	adds.w	lr, lr, r9
 800f656:	eb42 020a 	adc.w	r2, r2, sl
 800f65a:	fb00 f707 	mul.w	r7, r0, r7
 800f65e:	fb06 7505 	mla	r5, r6, r5, r7
 800f662:	fba0 0606 	umull	r0, r6, r0, r6
 800f666:	442e      	add	r6, r5
 800f668:	1904      	adds	r4, r0, r4
 800f66a:	eb46 0308 	adc.w	r3, r6, r8
 800f66e:	9303      	str	r3, [sp, #12]
		MC2M(2)
 800f670:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f674:	f8db 7014 	ldr.w	r7, [fp, #20]
 800f678:	6888      	ldr	r0, [r1, #8]
 800f67a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f67c:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800f680:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800f684:	fb00 f608 	mul.w	r6, r0, r8
 800f688:	fb03 660c 	mla	r6, r3, ip, r6
 800f68c:	fba0 9a03 	umull	r9, sl, r0, r3
 800f690:	44b2      	add	sl, r6
 800f692:	eb19 0e0e 	adds.w	lr, r9, lr
 800f696:	eb4a 0a02 	adc.w	sl, sl, r2
 800f69a:	17fa      	asrs	r2, r7, #31
 800f69c:	fb07 fc0c 	mul.w	ip, r7, ip
 800f6a0:	fb00 cc02 	mla	ip, r0, r2, ip
 800f6a4:	fba7 0200 	umull	r0, r2, r7, r0
 800f6a8:	4494      	add	ip, r2
 800f6aa:	1904      	adds	r4, r0, r4
 800f6ac:	9a03      	ldr	r2, [sp, #12]
 800f6ae:	eb4c 0c02 	adc.w	ip, ip, r2
 800f6b2:	f1c7 0900 	rsb	r9, r7, #0
 800f6b6:	17e8      	asrs	r0, r5, #31
 800f6b8:	ea4f 76e9 	mov.w	r6, r9, asr #31
 800f6bc:	fb09 f200 	mul.w	r2, r9, r0
 800f6c0:	fb05 2606 	mla	r6, r5, r6, r2
 800f6c4:	fba9 9205 	umull	r9, r2, r9, r5
 800f6c8:	4432      	add	r2, r6
 800f6ca:	eb19 090e 	adds.w	r9, r9, lr
 800f6ce:	eb42 020a 	adc.w	r2, r2, sl
 800f6d2:	fb05 f808 	mul.w	r8, r5, r8
 800f6d6:	fb03 8000 	mla	r0, r3, r0, r8
 800f6da:	fba5 5303 	umull	r5, r3, r5, r3
 800f6de:	4403      	add	r3, r0
 800f6e0:	192c      	adds	r4, r5, r4
 800f6e2:	eb43 030c 	adc.w	r3, r3, ip
 800f6e6:	9303      	str	r3, [sp, #12]
		MC2M(3)
 800f6e8:	f8db 7018 	ldr.w	r7, [fp, #24]
 800f6ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f6f0:	68cb      	ldr	r3, [r1, #12]
 800f6f2:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 800f6f4:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800f6f8:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800f6fc:	fb03 f50c 	mul.w	r5, r3, ip
 800f700:	fb07 5508 	mla	r5, r7, r8, r5
 800f704:	fba3 ea07 	umull	lr, sl, r3, r7
 800f708:	44aa      	add	sl, r5
 800f70a:	eb1e 0e09 	adds.w	lr, lr, r9
 800f70e:	eb4a 0a02 	adc.w	sl, sl, r2
 800f712:	17c2      	asrs	r2, r0, #31
 800f714:	fb00 f808 	mul.w	r8, r0, r8
 800f718:	fb03 8802 	mla	r8, r3, r2, r8
 800f71c:	fba0 3203 	umull	r3, r2, r0, r3
 800f720:	4490      	add	r8, r2
 800f722:	191c      	adds	r4, r3, r4
 800f724:	9b03      	ldr	r3, [sp, #12]
 800f726:	eb48 0803 	adc.w	r8, r8, r3
 800f72a:	f1c0 0900 	rsb	r9, r0, #0
 800f72e:	17f3      	asrs	r3, r6, #31
 800f730:	ea4f 75e9 	mov.w	r5, r9, asr #31
 800f734:	fb09 f203 	mul.w	r2, r9, r3
 800f738:	fb06 2505 	mla	r5, r6, r5, r2
 800f73c:	fba9 9206 	umull	r9, r2, r9, r6
 800f740:	442a      	add	r2, r5
 800f742:	eb19 090e 	adds.w	r9, r9, lr
 800f746:	eb42 020a 	adc.w	r2, r2, sl
 800f74a:	fb06 fc0c 	mul.w	ip, r6, ip
 800f74e:	fb07 c303 	mla	r3, r7, r3, ip
 800f752:	fba6 6707 	umull	r6, r7, r6, r7
 800f756:	441f      	add	r7, r3
 800f758:	1934      	adds	r4, r6, r4
 800f75a:	eb47 0308 	adc.w	r3, r7, r8
 800f75e:	9303      	str	r3, [sp, #12]
		MC2M(4)
 800f760:	f8db 0020 	ldr.w	r0, [fp, #32]
 800f764:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
 800f768:	690e      	ldr	r6, [r1, #16]
 800f76a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800f76c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800f770:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800f774:	fb06 f70c 	mul.w	r7, r6, ip
 800f778:	fb00 7708 	mla	r7, r0, r8, r7
 800f77c:	fba6 ea00 	umull	lr, sl, r6, r0
 800f780:	44ba      	add	sl, r7
 800f782:	eb1e 0909 	adds.w	r9, lr, r9
 800f786:	eb4a 0a02 	adc.w	sl, sl, r2
 800f78a:	17ea      	asrs	r2, r5, #31
 800f78c:	fb05 f808 	mul.w	r8, r5, r8
 800f790:	fb06 8802 	mla	r8, r6, r2, r8
 800f794:	fba5 6206 	umull	r6, r2, r5, r6
 800f798:	4490      	add	r8, r2
 800f79a:	1934      	adds	r4, r6, r4
 800f79c:	9a03      	ldr	r2, [sp, #12]
 800f79e:	eb48 0802 	adc.w	r8, r8, r2
 800f7a2:	f1c5 0e00 	rsb	lr, r5, #0
 800f7a6:	17de      	asrs	r6, r3, #31
 800f7a8:	ea4f 77ee 	mov.w	r7, lr, asr #31
 800f7ac:	fb0e f206 	mul.w	r2, lr, r6
 800f7b0:	fb03 2707 	mla	r7, r3, r7, r2
 800f7b4:	fbae e203 	umull	lr, r2, lr, r3
 800f7b8:	443a      	add	r2, r7
 800f7ba:	eb1e 0e09 	adds.w	lr, lr, r9
 800f7be:	eb42 020a 	adc.w	r2, r2, sl
 800f7c2:	fb03 fc0c 	mul.w	ip, r3, ip
 800f7c6:	fb00 c606 	mla	r6, r0, r6, ip
 800f7ca:	fba3 3000 	umull	r3, r0, r3, r0
 800f7ce:	4430      	add	r0, r6
 800f7d0:	191c      	adds	r4, r3, r4
 800f7d2:	eb40 0308 	adc.w	r3, r0, r8
 800f7d6:	9303      	str	r3, [sp, #12]
		MC2M(5)
 800f7d8:	f8db 5028 	ldr.w	r5, [fp, #40]	; 0x28
 800f7dc:	f8db 602c 	ldr.w	r6, [fp, #44]	; 0x2c
 800f7e0:	694b      	ldr	r3, [r1, #20]
 800f7e2:	6c8f      	ldr	r7, [r1, #72]	; 0x48
 800f7e4:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800f7e8:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800f7ec:	fb03 f00c 	mul.w	r0, r3, ip
 800f7f0:	fb05 0008 	mla	r0, r5, r8, r0
 800f7f4:	fba3 9a05 	umull	r9, sl, r3, r5
 800f7f8:	4482      	add	sl, r0
 800f7fa:	eb19 090e 	adds.w	r9, r9, lr
 800f7fe:	eb4a 0a02 	adc.w	sl, sl, r2
 800f802:	17f2      	asrs	r2, r6, #31
 800f804:	fb06 f808 	mul.w	r8, r6, r8
 800f808:	fb03 8802 	mla	r8, r3, r2, r8
 800f80c:	fba6 3203 	umull	r3, r2, r6, r3
 800f810:	4490      	add	r8, r2
 800f812:	191c      	adds	r4, r3, r4
 800f814:	9b03      	ldr	r3, [sp, #12]
 800f816:	eb48 0803 	adc.w	r8, r8, r3
 800f81a:	f1c6 0e00 	rsb	lr, r6, #0
 800f81e:	17fb      	asrs	r3, r7, #31
 800f820:	ea4f 70ee 	mov.w	r0, lr, asr #31
 800f824:	fb0e f203 	mul.w	r2, lr, r3
 800f828:	fb07 2000 	mla	r0, r7, r0, r2
 800f82c:	fbae e207 	umull	lr, r2, lr, r7
 800f830:	4402      	add	r2, r0
 800f832:	eb1e 0e09 	adds.w	lr, lr, r9
 800f836:	eb42 020a 	adc.w	r2, r2, sl
 800f83a:	fb07 fc0c 	mul.w	ip, r7, ip
 800f83e:	fb05 c303 	mla	r3, r5, r3, ip
 800f842:	fba7 7505 	umull	r7, r5, r7, r5
 800f846:	441d      	add	r5, r3
 800f848:	193c      	adds	r4, r7, r4
 800f84a:	eb45 0308 	adc.w	r3, r5, r8
 800f84e:	9303      	str	r3, [sp, #12]
		MC2M(6)
 800f850:	f8db 6030 	ldr.w	r6, [fp, #48]	; 0x30
 800f854:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800f858:	698d      	ldr	r5, [r1, #24]
 800f85a:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800f85c:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f860:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800f864:	fb05 f70c 	mul.w	r7, r5, ip
 800f868:	fb06 7708 	mla	r7, r6, r8, r7
 800f86c:	fba5 9a06 	umull	r9, sl, r5, r6
 800f870:	44ba      	add	sl, r7
 800f872:	eb19 0e0e 	adds.w	lr, r9, lr
 800f876:	eb4a 0a02 	adc.w	sl, sl, r2
 800f87a:	17da      	asrs	r2, r3, #31
 800f87c:	fb03 f808 	mul.w	r8, r3, r8
 800f880:	fb05 8802 	mla	r8, r5, r2, r8
 800f884:	fba3 5205 	umull	r5, r2, r3, r5
 800f888:	4490      	add	r8, r2
 800f88a:	192c      	adds	r4, r5, r4
 800f88c:	9a03      	ldr	r2, [sp, #12]
 800f88e:	eb48 0802 	adc.w	r8, r8, r2
 800f892:	f1c3 0900 	rsb	r9, r3, #0
 800f896:	17c5      	asrs	r5, r0, #31
 800f898:	ea4f 77e9 	mov.w	r7, r9, asr #31
 800f89c:	fb09 f205 	mul.w	r2, r9, r5
 800f8a0:	fb00 2707 	mla	r7, r0, r7, r2
 800f8a4:	fba9 9200 	umull	r9, r2, r9, r0
 800f8a8:	443a      	add	r2, r7
 800f8aa:	eb19 090e 	adds.w	r9, r9, lr
 800f8ae:	eb42 020a 	adc.w	r2, r2, sl
 800f8b2:	fb00 fc0c 	mul.w	ip, r0, ip
 800f8b6:	fb06 c505 	mla	r5, r6, r5, ip
 800f8ba:	fba0 0606 	umull	r0, r6, r0, r6
 800f8be:	442e      	add	r6, r5
 800f8c0:	1904      	adds	r4, r0, r4
 800f8c2:	eb46 0308 	adc.w	r3, r6, r8
 800f8c6:	9303      	str	r3, [sp, #12]
		MC2M(7)
 800f8c8:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800f8cc:	f8db 703c 	ldr.w	r7, [fp, #60]	; 0x3c
 800f8d0:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 800f8d4:	69c8      	ldr	r0, [r1, #28]
 800f8d6:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800f8d8:	ea4f 78e0 	mov.w	r8, r0, asr #31
 800f8dc:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800f8e0:	fb00 f60c 	mul.w	r6, r0, ip
 800f8e4:	fb03 6608 	mla	r6, r3, r8, r6
 800f8e8:	fba0 ea03 	umull	lr, sl, r0, r3
 800f8ec:	4456      	add	r6, sl
 800f8ee:	eb1e 0e09 	adds.w	lr, lr, r9
 800f8f2:	eb46 0602 	adc.w	r6, r6, r2
 800f8f6:	17fa      	asrs	r2, r7, #31
 800f8f8:	fb07 f808 	mul.w	r8, r7, r8
 800f8fc:	fb00 8802 	mla	r8, r0, r2, r8
 800f900:	fba7 2000 	umull	r2, r0, r7, r0
 800f904:	4480      	add	r8, r0
 800f906:	1914      	adds	r4, r2, r4
 800f908:	9a03      	ldr	r2, [sp, #12]
 800f90a:	eb48 0802 	adc.w	r8, r8, r2
 800f90e:	427f      	negs	r7, r7
 800f910:	17e8      	asrs	r0, r5, #31
 800f912:	ea4f 79e7 	mov.w	r9, r7, asr #31
 800f916:	fb07 f200 	mul.w	r2, r7, r0
 800f91a:	fb05 2209 	mla	r2, r5, r9, r2
 800f91e:	fba7 7905 	umull	r7, r9, r7, r5
 800f922:	444a      	add	r2, r9
 800f924:	eb17 0e0e 	adds.w	lr, r7, lr
 800f928:	eb42 0206 	adc.w	r2, r2, r6
 800f92c:	fb05 fc0c 	mul.w	ip, r5, ip
 800f930:	fb03 c000 	mla	r0, r3, r0, ip
 800f934:	fba5 5303 	umull	r5, r3, r5, r3
 800f938:	4403      	add	r3, r0
 800f93a:	192c      	adds	r4, r5, r4
 800f93c:	eb43 0808 	adc.w	r8, r3, r8
		vb1 += 64;
 800f940:	f501 7180 	add.w	r1, r1, #256	; 0x100
  return x >> n;
 800f944:	ea4f 5e1e 	mov.w	lr, lr, lsr #20
 800f948:	ea4e 3e02 	orr.w	lr, lr, r2, lsl #12
	x >>= fracBits;
 800f94c:	ea4f 13ae 	mov.w	r3, lr, asr #6
	sign = x >> 31;
 800f950:	ea4f 70ee 	mov.w	r0, lr, asr #31
	if (sign != (x >> 15))
 800f954:	ea4f 526e 	mov.w	r2, lr, asr #21
 800f958:	ebb2 7fee 	cmp.w	r2, lr, asr #31
 800f95c:	d002      	beq.n	800f964 <xmp3fixpt_PolyphaseMono+0x74c>
		x = sign ^ ((1 << 15) - 1);
 800f95e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f962:	4043      	eors	r3, r0
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800f964:	9a02      	ldr	r2, [sp, #8]
 800f966:	8013      	strh	r3, [r2, #0]
 800f968:	0d24      	lsrs	r4, r4, #20
 800f96a:	ea44 3408 	orr.w	r4, r4, r8, lsl #12
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800f96e:	9b01      	ldr	r3, [sp, #4]
 800f970:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	x >>= fracBits;
 800f974:	11a3      	asrs	r3, r4, #6
	sign = x >> 31;
 800f976:	17e5      	asrs	r5, r4, #31
	if (sign != (x >> 15))
 800f978:	1560      	asrs	r0, r4, #21
 800f97a:	ebb0 7fe4 	cmp.w	r0, r4, asr #31
 800f97e:	f43f adf8 	beq.w	800f572 <xmp3fixpt_PolyphaseMono+0x35a>
		x = sign ^ ((1 << 15) - 1);
 800f982:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f986:	406b      	eors	r3, r5
 800f988:	e5f3      	b.n	800f572 <xmp3fixpt_PolyphaseMono+0x35a>
	}
}
 800f98a:	b005      	add	sp, #20
 800f98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f990 <xmp3fixpt_PolyphaseStereo>:
 * Notes:       interleaves PCM samples LRLRLR...
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 **************************************************************************************/
void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
{
 800f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	b08d      	sub	sp, #52	; 0x34
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = sum1R = rndVal;

	MC0S(0)
 800f996:	6814      	ldr	r4, [r2, #0]
 800f998:	6853      	ldr	r3, [r2, #4]
 800f99a:	680e      	ldr	r6, [r1, #0]
 800f99c:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
   return (sum + ((int64_t)x * y));
 800f99e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800f9a2:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800f9a6:	fb06 f70c 	mul.w	r7, r6, ip
 800f9aa:	fb04 7909 	mla	r9, r4, r9, r7
 800f9ae:	fba6 6704 	umull	r6, r7, r6, r4
 800f9b2:	f116 7600 	adds.w	r6, r6, #33554432	; 0x2000000
 800f9b6:	eb49 0707 	adc.w	r7, r9, r7
 800f9ba:	425b      	negs	r3, r3
 800f9bc:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f9c0:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 800f9c4:	fb05 f90e 	mul.w	r9, r5, lr
 800f9c8:	fb03 9908 	mla	r9, r3, r8, r9
 800f9cc:	fba5 5803 	umull	r5, r8, r5, r3
 800f9d0:	44c1      	add	r9, r8
 800f9d2:	19ad      	adds	r5, r5, r6
 800f9d4:	eb49 0907 	adc.w	r9, r9, r7
 800f9d8:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
 800f9dc:	f8d1 70dc 	ldr.w	r7, [r1, #220]	; 0xdc
 800f9e0:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800f9e4:	fb06 fc0c 	mul.w	ip, r6, ip
 800f9e8:	fb04 cc08 	mla	ip, r4, r8, ip
 800f9ec:	fba6 6404 	umull	r6, r4, r6, r4
 800f9f0:	f116 7600 	adds.w	r6, r6, #33554432	; 0x2000000
 800f9f4:	eb4c 0404 	adc.w	r4, ip, r4
 800f9f8:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800f9fc:	fb07 fe0e 	mul.w	lr, r7, lr
 800fa00:	fb03 ee0c 	mla	lr, r3, ip, lr
 800fa04:	fba7 7303 	umull	r7, r3, r7, r3
 800fa08:	4473      	add	r3, lr
 800fa0a:	eb17 0c06 	adds.w	ip, r7, r6
 800fa0e:	eb43 0e04 	adc.w	lr, r3, r4
	MC0S(1)
 800fa12:	6894      	ldr	r4, [r2, #8]
 800fa14:	68d3      	ldr	r3, [r2, #12]
 800fa16:	684e      	ldr	r6, [r1, #4]
 800fa18:	6d8f      	ldr	r7, [r1, #88]	; 0x58
 800fa1a:	ea4f 7ae6 	mov.w	sl, r6, asr #31
 800fa1e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800fa22:	fb06 fb08 	mul.w	fp, r6, r8
 800fa26:	fb04 bb0a 	mla	fp, r4, sl, fp
 800fa2a:	fba6 a604 	umull	sl, r6, r6, r4
 800fa2e:	445e      	add	r6, fp
 800fa30:	eb1a 0505 	adds.w	r5, sl, r5
 800fa34:	eb46 0609 	adc.w	r6, r6, r9
 800fa38:	425b      	negs	r3, r3
 800fa3a:	ea4f 7ae7 	mov.w	sl, r7, asr #31
 800fa3e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800fa42:	fb07 fb09 	mul.w	fp, r7, r9
 800fa46:	fb03 bb0a 	mla	fp, r3, sl, fp
 800fa4a:	fba7 a703 	umull	sl, r7, r7, r3
 800fa4e:	44bb      	add	fp, r7
 800fa50:	eb1a 0a05 	adds.w	sl, sl, r5
 800fa54:	eb4b 0b06 	adc.w	fp, fp, r6
 800fa58:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
 800fa5c:	f8d1 50d8 	ldr.w	r5, [r1, #216]	; 0xd8
 800fa60:	17f7      	asrs	r7, r6, #31
 800fa62:	fb06 f808 	mul.w	r8, r6, r8
 800fa66:	fb04 8807 	mla	r8, r4, r7, r8
 800fa6a:	fba6 6404 	umull	r6, r4, r6, r4
 800fa6e:	4444      	add	r4, r8
 800fa70:	eb16 070c 	adds.w	r7, r6, ip
 800fa74:	eb44 040e 	adc.w	r4, r4, lr
 800fa78:	17ee      	asrs	r6, r5, #31
 800fa7a:	fb05 f809 	mul.w	r8, r5, r9
 800fa7e:	fb03 8806 	mla	r8, r3, r6, r8
 800fa82:	fba5 5303 	umull	r5, r3, r5, r3
 800fa86:	4498      	add	r8, r3
 800fa88:	19ee      	adds	r6, r5, r7
 800fa8a:	eb48 0804 	adc.w	r8, r8, r4
	MC0S(2)
 800fa8e:	6914      	ldr	r4, [r2, #16]
 800fa90:	6953      	ldr	r3, [r2, #20]
 800fa92:	688f      	ldr	r7, [r1, #8]
 800fa94:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fa96:	ea4f 79e7 	mov.w	r9, r7, asr #31
 800fa9a:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800fa9e:	fb07 fc0e 	mul.w	ip, r7, lr
 800faa2:	fb04 cc09 	mla	ip, r4, r9, ip
 800faa6:	fba7 9704 	umull	r9, r7, r7, r4
 800faaa:	4467      	add	r7, ip
 800faac:	eb19 0a0a 	adds.w	sl, r9, sl
 800fab0:	eb47 0b0b 	adc.w	fp, r7, fp
 800fab4:	425b      	negs	r3, r3
 800fab6:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800faba:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800fabe:	fb05 f709 	mul.w	r7, r5, r9
 800fac2:	fb03 770c 	mla	r7, r3, ip, r7
 800fac6:	fba5 c503 	umull	ip, r5, r5, r3
 800faca:	443d      	add	r5, r7
 800facc:	eb1c 0a0a 	adds.w	sl, ip, sl
 800fad0:	eb45 0b0b 	adc.w	fp, r5, fp
 800fad4:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 800fad8:	f8d1 70d4 	ldr.w	r7, [r1, #212]	; 0xd4
 800fadc:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800fae0:	fb05 fe0e 	mul.w	lr, r5, lr
 800fae4:	fb04 ee0c 	mla	lr, r4, ip, lr
 800fae8:	fba5 5404 	umull	r5, r4, r5, r4
 800faec:	4474      	add	r4, lr
 800faee:	19ad      	adds	r5, r5, r6
 800faf0:	eb44 0808 	adc.w	r8, r4, r8
 800faf4:	17fe      	asrs	r6, r7, #31
 800faf6:	fb07 f409 	mul.w	r4, r7, r9
 800fafa:	fb03 4406 	mla	r4, r3, r6, r4
 800fafe:	fba7 7303 	umull	r7, r3, r7, r3
 800fb02:	441c      	add	r4, r3
 800fb04:	eb17 0c05 	adds.w	ip, r7, r5
 800fb08:	eb44 0908 	adc.w	r9, r4, r8
	MC0S(3)
 800fb0c:	6994      	ldr	r4, [r2, #24]
 800fb0e:	69d3      	ldr	r3, [r2, #28]
 800fb10:	68cd      	ldr	r5, [r1, #12]
 800fb12:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 800fb14:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fb18:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800fb1c:	fb05 f70e 	mul.w	r7, r5, lr
 800fb20:	fb04 7708 	mla	r7, r4, r8, r7
 800fb24:	fba5 8504 	umull	r8, r5, r5, r4
 800fb28:	443d      	add	r5, r7
 800fb2a:	eb18 0a0a 	adds.w	sl, r8, sl
 800fb2e:	eb45 0b0b 	adc.w	fp, r5, fp
 800fb32:	425b      	negs	r3, r3
 800fb34:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800fb38:	17dd      	asrs	r5, r3, #31
 800fb3a:	fb06 f705 	mul.w	r7, r6, r5
 800fb3e:	fb03 7708 	mla	r7, r3, r8, r7
 800fb42:	fba6 8603 	umull	r8, r6, r6, r3
 800fb46:	443e      	add	r6, r7
 800fb48:	eb18 0a0a 	adds.w	sl, r8, sl
 800fb4c:	eb46 0b0b 	adc.w	fp, r6, fp
 800fb50:	f8d1 708c 	ldr.w	r7, [r1, #140]	; 0x8c
 800fb54:	f8d1 60d0 	ldr.w	r6, [r1, #208]	; 0xd0
 800fb58:	ea4f 78e7 	mov.w	r8, r7, asr #31
 800fb5c:	fb07 fe0e 	mul.w	lr, r7, lr
 800fb60:	fb04 ee08 	mla	lr, r4, r8, lr
 800fb64:	fba7 7404 	umull	r7, r4, r7, r4
 800fb68:	4474      	add	r4, lr
 800fb6a:	eb17 070c 	adds.w	r7, r7, ip
 800fb6e:	eb44 0409 	adc.w	r4, r4, r9
 800fb72:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800fb76:	fb06 f805 	mul.w	r8, r6, r5
 800fb7a:	fb03 880c 	mla	r8, r3, ip, r8
 800fb7e:	fba6 6303 	umull	r6, r3, r6, r3
 800fb82:	4498      	add	r8, r3
 800fb84:	19f6      	adds	r6, r6, r7
 800fb86:	eb48 0804 	adc.w	r8, r8, r4
	MC0S(4)
 800fb8a:	6a14      	ldr	r4, [r2, #32]
 800fb8c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fb8e:	690f      	ldr	r7, [r1, #16]
 800fb90:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 800fb92:	ea4f 79e7 	mov.w	r9, r7, asr #31
 800fb96:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800fb9a:	fb07 fc0e 	mul.w	ip, r7, lr
 800fb9e:	fb04 cc09 	mla	ip, r4, r9, ip
 800fba2:	fba7 9704 	umull	r9, r7, r7, r4
 800fba6:	4467      	add	r7, ip
 800fba8:	eb19 0a0a 	adds.w	sl, r9, sl
 800fbac:	eb47 0b0b 	adc.w	fp, r7, fp
 800fbb0:	425b      	negs	r3, r3
 800fbb2:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800fbb6:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800fbba:	fb05 f709 	mul.w	r7, r5, r9
 800fbbe:	fb03 770c 	mla	r7, r3, ip, r7
 800fbc2:	fba5 c503 	umull	ip, r5, r5, r3
 800fbc6:	443d      	add	r5, r7
 800fbc8:	eb1c 0a0a 	adds.w	sl, ip, sl
 800fbcc:	eb45 0b0b 	adc.w	fp, r5, fp
 800fbd0:	f8d1 5090 	ldr.w	r5, [r1, #144]	; 0x90
 800fbd4:	f8d1 70cc 	ldr.w	r7, [r1, #204]	; 0xcc
 800fbd8:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800fbdc:	fb05 fe0e 	mul.w	lr, r5, lr
 800fbe0:	fb04 ee0c 	mla	lr, r4, ip, lr
 800fbe4:	fba5 5404 	umull	r5, r4, r5, r4
 800fbe8:	4474      	add	r4, lr
 800fbea:	19ad      	adds	r5, r5, r6
 800fbec:	eb44 0808 	adc.w	r8, r4, r8
 800fbf0:	17fe      	asrs	r6, r7, #31
 800fbf2:	fb07 f409 	mul.w	r4, r7, r9
 800fbf6:	fb03 4406 	mla	r4, r3, r6, r4
 800fbfa:	fba7 7303 	umull	r7, r3, r7, r3
 800fbfe:	441c      	add	r4, r3
 800fc00:	eb17 0c05 	adds.w	ip, r7, r5
 800fc04:	eb44 0908 	adc.w	r9, r4, r8
	MC0S(5)
 800fc08:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800fc0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800fc0c:	694d      	ldr	r5, [r1, #20]
 800fc0e:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 800fc10:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fc14:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800fc18:	fb05 f70e 	mul.w	r7, r5, lr
 800fc1c:	fb04 7708 	mla	r7, r4, r8, r7
 800fc20:	fba5 8504 	umull	r8, r5, r5, r4
 800fc24:	443d      	add	r5, r7
 800fc26:	eb18 0a0a 	adds.w	sl, r8, sl
 800fc2a:	eb45 0b0b 	adc.w	fp, r5, fp
 800fc2e:	425b      	negs	r3, r3
 800fc30:	17f7      	asrs	r7, r6, #31
 800fc32:	17dd      	asrs	r5, r3, #31
 800fc34:	fb06 f805 	mul.w	r8, r6, r5
 800fc38:	fb03 8807 	mla	r8, r3, r7, r8
 800fc3c:	fba6 7603 	umull	r7, r6, r6, r3
 800fc40:	4446      	add	r6, r8
 800fc42:	eb17 0a0a 	adds.w	sl, r7, sl
 800fc46:	eb46 0b0b 	adc.w	fp, r6, fp
 800fc4a:	f8d1 7094 	ldr.w	r7, [r1, #148]	; 0x94
 800fc4e:	f8d1 60c8 	ldr.w	r6, [r1, #200]	; 0xc8
 800fc52:	ea4f 78e7 	mov.w	r8, r7, asr #31
 800fc56:	fb07 fe0e 	mul.w	lr, r7, lr
 800fc5a:	fb04 ee08 	mla	lr, r4, r8, lr
 800fc5e:	fba7 7404 	umull	r7, r4, r7, r4
 800fc62:	4474      	add	r4, lr
 800fc64:	eb17 070c 	adds.w	r7, r7, ip
 800fc68:	eb44 0409 	adc.w	r4, r4, r9
 800fc6c:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800fc70:	fb06 f805 	mul.w	r8, r6, r5
 800fc74:	fb03 880c 	mla	r8, r3, ip, r8
 800fc78:	fba6 6303 	umull	r6, r3, r6, r3
 800fc7c:	4498      	add	r8, r3
 800fc7e:	19f6      	adds	r6, r6, r7
 800fc80:	eb48 0804 	adc.w	r8, r8, r4
	MC0S(6)
 800fc84:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800fc86:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fc88:	698d      	ldr	r5, [r1, #24]
 800fc8a:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 800fc8c:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800fc90:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800fc94:	fb05 fc0e 	mul.w	ip, r5, lr
 800fc98:	fb04 cc09 	mla	ip, r4, r9, ip
 800fc9c:	fba5 9504 	umull	r9, r5, r5, r4
 800fca0:	4465      	add	r5, ip
 800fca2:	eb19 0a0a 	adds.w	sl, r9, sl
 800fca6:	eb45 050b 	adc.w	r5, r5, fp
 800fcaa:	425b      	negs	r3, r3
 800fcac:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800fcb0:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800fcb4:	fb07 f90b 	mul.w	r9, r7, fp
 800fcb8:	fb03 990c 	mla	r9, r3, ip, r9
 800fcbc:	fba7 7c03 	umull	r7, ip, r7, r3
 800fcc0:	44cc      	add	ip, r9
 800fcc2:	eb17 070a 	adds.w	r7, r7, sl
 800fcc6:	eb4c 0c05 	adc.w	ip, ip, r5
 800fcca:	f8d1 5098 	ldr.w	r5, [r1, #152]	; 0x98
 800fcce:	f8d1 a0c4 	ldr.w	sl, [r1, #196]	; 0xc4
 800fcd2:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800fcd6:	fb05 fe0e 	mul.w	lr, r5, lr
 800fcda:	fb04 ee09 	mla	lr, r4, r9, lr
 800fcde:	fba5 5404 	umull	r5, r4, r5, r4
 800fce2:	4474      	add	r4, lr
 800fce4:	19ad      	adds	r5, r5, r6
 800fce6:	eb44 0808 	adc.w	r8, r4, r8
 800fcea:	ea4f 74ea 	mov.w	r4, sl, asr #31
 800fcee:	fb0a f60b 	mul.w	r6, sl, fp
 800fcf2:	fb03 6604 	mla	r6, r3, r4, r6
 800fcf6:	fbaa 9303 	umull	r9, r3, sl, r3
 800fcfa:	441e      	add	r6, r3
 800fcfc:	eb19 0905 	adds.w	r9, r9, r5
 800fd00:	eb46 0a08 	adc.w	sl, r6, r8
	MC0S(7)
 800fd04:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800fd06:	69cc      	ldr	r4, [r1, #28]
 800fd08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd0a:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800fd0e:	17f5      	asrs	r5, r6, #31
 800fd10:	fb06 fe0e 	mul.w	lr, r6, lr
 800fd14:	fb04 ee05 	mla	lr, r4, r5, lr
 800fd18:	fba6 b804 	umull	fp, r8, r6, r4
 800fd1c:	44f0      	add	r8, lr
 800fd1e:	eb1b 0707 	adds.w	r7, fp, r7
 800fd22:	eb48 0c0c 	adc.w	ip, r8, ip
 800fd26:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800fd28:	4264      	negs	r4, r4
 800fd2a:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 800fd2e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800fd32:	fb04 fe0e 	mul.w	lr, r4, lr
 800fd36:	fb03 ee08 	mla	lr, r3, r8, lr
 800fd3a:	fba4 b303 	umull	fp, r3, r4, r3
 800fd3e:	4473      	add	r3, lr
 800fd40:	eb17 070b 	adds.w	r7, r7, fp
 800fd44:	eb43 0c0c 	adc.w	ip, r3, ip
 800fd48:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 800fd4c:	f8d1 e0c0 	ldr.w	lr, [r1, #192]	; 0xc0
 800fd50:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800fd54:	fb06 fb0b 	mul.w	fp, r6, fp
 800fd58:	fb03 b505 	mla	r5, r3, r5, fp
 800fd5c:	fba6 3603 	umull	r3, r6, r6, r3
 800fd60:	442e      	add	r6, r5
 800fd62:	eb13 0309 	adds.w	r3, r3, r9
 800fd66:	eb46 060a 	adc.w	r6, r6, sl
 800fd6a:	ea4f 75ee 	mov.w	r5, lr, asr #31
 800fd6e:	fb04 f505 	mul.w	r5, r4, r5
 800fd72:	fb0e 5508 	mla	r5, lr, r8, r5
 800fd76:	fba4 4e0e 	umull	r4, lr, r4, lr
 800fd7a:	4475      	add	r5, lr
 800fd7c:	191b      	adds	r3, r3, r4
 800fd7e:	eb45 0406 	adc.w	r4, r5, r6
  return x >> n;
 800fd82:	0d3f      	lsrs	r7, r7, #20
 800fd84:	ea47 370c 	orr.w	r7, r7, ip, lsl #12
	x >>= fracBits;
 800fd88:	11bd      	asrs	r5, r7, #6
	if (sign != (x >> 15))
 800fd8a:	157e      	asrs	r6, r7, #21
 800fd8c:	ebb6 7fe7 	cmp.w	r6, r7, asr #31
 800fd90:	d005      	beq.n	800fd9e <xmp3fixpt_PolyphaseStereo+0x40e>
 800fd92:	ea4f 7ce7 	mov.w	ip, r7, asr #31
		x = sign ^ ((1 << 15) - 1);
 800fd96:	f647 75ff 	movw	r5, #32767	; 0x7fff
 800fd9a:	ea8c 0505 	eor.w	r5, ip, r5

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800fd9e:	8005      	strh	r5, [r0, #0]
 800fda0:	0d1b      	lsrs	r3, r3, #20
 800fda2:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	x >>= fracBits;
 800fda6:	119c      	asrs	r4, r3, #6
	sign = x >> 31;
 800fda8:	17de      	asrs	r6, r3, #31
	if (sign != (x >> 15))
 800fdaa:	155d      	asrs	r5, r3, #21
 800fdac:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800fdb0:	d002      	beq.n	800fdb8 <xmp3fixpt_PolyphaseStereo+0x428>
		x = sign ^ ((1 << 15) - 1);
 800fdb2:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800fdb6:	4074      	eors	r4, r6
	*(pcm + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 800fdb8:	8044      	strh	r4, [r0, #2]
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = sum1R = rndVal;

	MC1S(0)
 800fdba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 800fdbe:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
 800fdc2:	6825      	ldr	r5, [r4, #0]
   return (sum + ((int64_t)x * y));
 800fdc4:	17ee      	asrs	r6, r5, #31
 800fdc6:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800fdca:	fb03 f606 	mul.w	r6, r3, r6
 800fdce:	fb05 660c 	mla	r6, r5, ip, r6
 800fdd2:	fba3 7505 	umull	r7, r5, r3, r5
 800fdd6:	f117 7700 	adds.w	r7, r7, #33554432	; 0x2000000
 800fdda:	eb46 0805 	adc.w	r8, r6, r5
 800fdde:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800fde2:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800fde6:	fb03 fa0a 	mul.w	sl, r3, sl
 800fdea:	fb05 aa0c 	mla	sl, r5, ip, sl
 800fdee:	fba3 3505 	umull	r3, r5, r3, r5
 800fdf2:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 800fdf6:	eb4a 0c05 	adc.w	ip, sl, r5
	MC1S(1)
 800fdfa:	f8d2 5404 	ldr.w	r5, [r2, #1028]	; 0x404
 800fdfe:	6866      	ldr	r6, [r4, #4]
 800fe00:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800fe04:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800fe08:	fb05 f909 	mul.w	r9, r5, r9
 800fe0c:	fb06 990a 	mla	r9, r6, sl, r9
 800fe10:	fba5 6e06 	umull	r6, lr, r5, r6
 800fe14:	44f1      	add	r9, lr
 800fe16:	19bf      	adds	r7, r7, r6
 800fe18:	eb49 0608 	adc.w	r6, r9, r8
 800fe1c:	f8d4 8084 	ldr.w	r8, [r4, #132]	; 0x84
 800fe20:	ea4f 7ee8 	mov.w	lr, r8, asr #31
 800fe24:	fb05 fe0e 	mul.w	lr, r5, lr
 800fe28:	fb08 ee0a 	mla	lr, r8, sl, lr
 800fe2c:	fba5 5a08 	umull	r5, sl, r5, r8
 800fe30:	44d6      	add	lr, sl
 800fe32:	195b      	adds	r3, r3, r5
 800fe34:	eb4e 0a0c 	adc.w	sl, lr, ip
	MC1S(2)
 800fe38:	f8d2 5408 	ldr.w	r5, [r2, #1032]	; 0x408
 800fe3c:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800fe40:	ea4f 78e9 	mov.w	r8, r9, asr #31
 800fe44:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800fe48:	fb05 f808 	mul.w	r8, r5, r8
 800fe4c:	fb09 880e 	mla	r8, r9, lr, r8
 800fe50:	fba5 9c09 	umull	r9, ip, r5, r9
 800fe54:	44e0      	add	r8, ip
 800fe56:	eb17 0709 	adds.w	r7, r7, r9
 800fe5a:	eb48 0906 	adc.w	r9, r8, r6
 800fe5e:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800fe62:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800fe66:	fb05 fc0c 	mul.w	ip, r5, ip
 800fe6a:	fb06 cc0e 	mla	ip, r6, lr, ip
 800fe6e:	fba5 5e06 	umull	r5, lr, r5, r6
 800fe72:	44f4      	add	ip, lr
 800fe74:	195b      	adds	r3, r3, r5
 800fe76:	eb4c 0e0a 	adc.w	lr, ip, sl
	MC1S(3)
 800fe7a:	f8d2 540c 	ldr.w	r5, [r2, #1036]	; 0x40c
 800fe7e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800fe82:	ea4f 76e8 	mov.w	r6, r8, asr #31
 800fe86:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800fe8a:	fb05 f606 	mul.w	r6, r5, r6
 800fe8e:	fb08 660c 	mla	r6, r8, ip, r6
 800fe92:	fba5 8a08 	umull	r8, sl, r5, r8
 800fe96:	4456      	add	r6, sl
 800fe98:	eb17 0708 	adds.w	r7, r7, r8
 800fe9c:	eb46 0809 	adc.w	r8, r6, r9
 800fea0:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800fea4:	ea4f 7ae6 	mov.w	sl, r6, asr #31
 800fea8:	fb05 fa0a 	mul.w	sl, r5, sl
 800feac:	fb06 aa0c 	mla	sl, r6, ip, sl
 800feb0:	fba5 5c06 	umull	r5, ip, r5, r6
 800feb4:	44e2      	add	sl, ip
 800feb6:	195b      	adds	r3, r3, r5
 800feb8:	eb4a 0c0e 	adc.w	ip, sl, lr
	MC1S(4)
 800febc:	f8d2 5410 	ldr.w	r5, [r2, #1040]	; 0x410
 800fec0:	6926      	ldr	r6, [r4, #16]
 800fec2:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800fec6:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800feca:	fb05 f909 	mul.w	r9, r5, r9
 800fece:	fb06 990a 	mla	r9, r6, sl, r9
 800fed2:	fba5 6e06 	umull	r6, lr, r5, r6
 800fed6:	44f1      	add	r9, lr
 800fed8:	19bf      	adds	r7, r7, r6
 800feda:	eb49 0608 	adc.w	r6, r9, r8
 800fede:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 800fee2:	ea4f 7ee8 	mov.w	lr, r8, asr #31
 800fee6:	fb05 fe0e 	mul.w	lr, r5, lr
 800feea:	fb08 ee0a 	mla	lr, r8, sl, lr
 800feee:	fba5 5a08 	umull	r5, sl, r5, r8
 800fef2:	44d6      	add	lr, sl
 800fef4:	195b      	adds	r3, r3, r5
 800fef6:	eb4e 0a0c 	adc.w	sl, lr, ip
	MC1S(5)
 800fefa:	f8d2 5414 	ldr.w	r5, [r2, #1044]	; 0x414
 800fefe:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800ff02:	ea4f 78e9 	mov.w	r8, r9, asr #31
 800ff06:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800ff0a:	fb05 f808 	mul.w	r8, r5, r8
 800ff0e:	fb09 880e 	mla	r8, r9, lr, r8
 800ff12:	fba5 9c09 	umull	r9, ip, r5, r9
 800ff16:	44e0      	add	r8, ip
 800ff18:	eb17 0709 	adds.w	r7, r7, r9
 800ff1c:	eb48 0906 	adc.w	r9, r8, r6
 800ff20:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 800ff24:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800ff28:	fb05 fc0c 	mul.w	ip, r5, ip
 800ff2c:	fb06 cc0e 	mla	ip, r6, lr, ip
 800ff30:	fba5 5e06 	umull	r5, lr, r5, r6
 800ff34:	44f4      	add	ip, lr
 800ff36:	195b      	adds	r3, r3, r5
 800ff38:	eb4c 0e0a 	adc.w	lr, ip, sl
	MC1S(6)
 800ff3c:	f8d2 5418 	ldr.w	r5, [r2, #1048]	; 0x418
 800ff40:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800ff44:	ea4f 76e8 	mov.w	r6, r8, asr #31
 800ff48:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800ff4c:	fb05 f606 	mul.w	r6, r5, r6
 800ff50:	fb08 660a 	mla	r6, r8, sl, r6
 800ff54:	fba5 8c08 	umull	r8, ip, r5, r8
 800ff58:	4466      	add	r6, ip
 800ff5a:	eb17 0708 	adds.w	r7, r7, r8
 800ff5e:	eb46 0809 	adc.w	r8, r6, r9
 800ff62:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 800ff66:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800ff6a:	fb05 fc0c 	mul.w	ip, r5, ip
 800ff6e:	fb06 cc0a 	mla	ip, r6, sl, ip
 800ff72:	fba5 5606 	umull	r5, r6, r5, r6
 800ff76:	44b4      	add	ip, r6
 800ff78:	195b      	adds	r3, r3, r5
 800ff7a:	eb4c 0c0e 	adc.w	ip, ip, lr
	MC1S(7)
 800ff7e:	f8d2 e41c 	ldr.w	lr, [r2, #1052]	; 0x41c
 800ff82:	69e5      	ldr	r5, [r4, #28]
 800ff84:	17ee      	asrs	r6, r5, #31
 800ff86:	ea4f 79ee 	mov.w	r9, lr, asr #31
 800ff8a:	fb0e f606 	mul.w	r6, lr, r6
 800ff8e:	fb05 6609 	mla	r6, r5, r9, r6
 800ff92:	fbae 5a05 	umull	r5, sl, lr, r5
 800ff96:	4456      	add	r6, sl
 800ff98:	197f      	adds	r7, r7, r5
 800ff9a:	eb46 0608 	adc.w	r6, r6, r8
 800ff9e:	f8d4 409c 	ldr.w	r4, [r4, #156]	; 0x9c
 800ffa2:	17e5      	asrs	r5, r4, #31
 800ffa4:	fb0e f505 	mul.w	r5, lr, r5
 800ffa8:	fb04 5509 	mla	r5, r4, r9, r5
 800ffac:	fbae 4e04 	umull	r4, lr, lr, r4
 800ffb0:	4475      	add	r5, lr
 800ffb2:	191b      	adds	r3, r3, r4
 800ffb4:	eb45 040c 	adc.w	r4, r5, ip
  return x >> n;
 800ffb8:	0d3d      	lsrs	r5, r7, #20
 800ffba:	ea45 3506 	orr.w	r5, r5, r6, lsl #12
	x >>= fracBits;
 800ffbe:	11ae      	asrs	r6, r5, #6
	sign = x >> 31;
 800ffc0:	ea4f 7ce5 	mov.w	ip, r5, asr #31
	if (sign != (x >> 15))
 800ffc4:	156f      	asrs	r7, r5, #21
 800ffc6:	ebb7 7fe5 	cmp.w	r7, r5, asr #31
 800ffca:	d003      	beq.n	800ffd4 <xmp3fixpt_PolyphaseStereo+0x644>
		x = sign ^ ((1 << 15) - 1);
 800ffcc:	f647 76ff 	movw	r6, #32767	; 0x7fff
 800ffd0:	ea8c 0606 	eor.w	r6, ip, r6

	*(pcm + 2*16 + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800ffd4:	f8a0 6040 	strh.w	r6, [r0, #64]	; 0x40
 800ffd8:	0d1b      	lsrs	r3, r3, #20
 800ffda:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	x >>= fracBits;
 800ffde:	119c      	asrs	r4, r3, #6
	sign = x >> 31;
 800ffe0:	17de      	asrs	r6, r3, #31
	if (sign != (x >> 15))
 800ffe2:	155d      	asrs	r5, r3, #21
 800ffe4:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800ffe8:	d002      	beq.n	800fff0 <xmp3fixpt_PolyphaseStereo+0x660>
		x = sign ^ ((1 << 15) - 1);
 800ffea:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800ffee:	4074      	eors	r4, r6
	*(pcm + 2*16 + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 800fff0:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 800fff4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800fff8:	9301      	str	r3, [sp, #4]
	vb1 = vbuf + 64;
 800fffa:	f501 7a80 	add.w	sl, r1, #256	; 0x100
	pcm += 2;
 800fffe:	1d03      	adds	r3, r0, #4
 8010000:	9302      	str	r3, [sp, #8]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 8010002:	230f      	movs	r3, #15
 8010004:	9303      	str	r3, [sp, #12]
 8010006:	e006      	b.n	8010016 <xmp3fixpt_PolyphaseStereo+0x686>

		vb1 += 64;
		*(pcm + 0)         = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
 8010008:	8019      	strh	r1, [r3, #0]
		pcm += 2;
 801000a:	9b02      	ldr	r3, [sp, #8]
 801000c:	3304      	adds	r3, #4
 801000e:	9302      	str	r3, [sp, #8]
	for (i = 15; i > 0; i--) {
 8010010:	9b03      	ldr	r3, [sp, #12]
 8010012:	3b01      	subs	r3, #1
 8010014:	9303      	str	r3, [sp, #12]
 8010016:	9b03      	ldr	r3, [sp, #12]
 8010018:	2b00      	cmp	r3, #0
 801001a:	f340 8416 	ble.w	801084a <xmp3fixpt_PolyphaseStereo+0xeba>
		MC2S(0)
 801001e:	9a01      	ldr	r2, [sp, #4]
 8010020:	6813      	ldr	r3, [r2, #0]
 8010022:	6854      	ldr	r4, [r2, #4]
 8010024:	f8da 2000 	ldr.w	r2, [sl]
 8010028:	f8da 005c 	ldr.w	r0, [sl, #92]	; 0x5c
   return (sum + ((int64_t)x * y));
 801002c:	17d6      	asrs	r6, r2, #31
 801002e:	17dd      	asrs	r5, r3, #31
 8010030:	9504      	str	r5, [sp, #16]
 8010032:	fb02 fc05 	mul.w	ip, r2, r5
 8010036:	fb03 cc06 	mla	ip, r3, r6, ip
 801003a:	fba2 7103 	umull	r7, r1, r2, r3
 801003e:	f117 7700 	adds.w	r7, r7, #33554432	; 0x2000000
 8010042:	eb4c 0c01 	adc.w	ip, ip, r1
 8010046:	17e1      	asrs	r1, r4, #31
 8010048:	fb04 f606 	mul.w	r6, r4, r6
 801004c:	9105      	str	r1, [sp, #20]
 801004e:	fb02 6601 	mla	r6, r2, r1, r6
 8010052:	fba4 2102 	umull	r2, r1, r4, r2
 8010056:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 801005a:	eb46 0601 	adc.w	r6, r6, r1
 801005e:	4261      	negs	r1, r4
 8010060:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8010064:	17cd      	asrs	r5, r1, #31
 8010066:	9506      	str	r5, [sp, #24]
 8010068:	fb00 fe05 	mul.w	lr, r0, r5
 801006c:	fb01 ee09 	mla	lr, r1, r9, lr
 8010070:	fba0 8b01 	umull	r8, fp, r0, r1
 8010074:	44de      	add	lr, fp
 8010076:	eb18 0807 	adds.w	r8, r8, r7
 801007a:	eb4e 0b0c 	adc.w	fp, lr, ip
 801007e:	9d04      	ldr	r5, [sp, #16]
 8010080:	fb00 f705 	mul.w	r7, r0, r5
 8010084:	fb03 7909 	mla	r9, r3, r9, r7
 8010088:	fba0 0703 	umull	r0, r7, r0, r3
 801008c:	44b9      	add	r9, r7
 801008e:	1880      	adds	r0, r0, r2
 8010090:	900b      	str	r0, [sp, #44]	; 0x2c
 8010092:	eb49 0906 	adc.w	r9, r9, r6
 8010096:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 801009a:	f8da 00dc 	ldr.w	r0, [sl, #220]	; 0xdc
 801009e:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 80100a2:	fb02 fc05 	mul.w	ip, r2, r5
 80100a6:	fb03 cc0e 	mla	ip, r3, lr, ip
 80100aa:	fba2 6703 	umull	r6, r7, r2, r3
 80100ae:	f116 7600 	adds.w	r6, r6, #33554432	; 0x2000000
 80100b2:	eb4c 0707 	adc.w	r7, ip, r7
 80100b6:	9d05      	ldr	r5, [sp, #20]
 80100b8:	fb02 fc05 	mul.w	ip, r2, r5
 80100bc:	fb04 ce0e 	mla	lr, r4, lr, ip
 80100c0:	fba2 2404 	umull	r2, r4, r2, r4
 80100c4:	f112 7c00 	adds.w	ip, r2, #33554432	; 0x2000000
 80100c8:	f8cd c014 	str.w	ip, [sp, #20]
 80100cc:	eb4e 0404 	adc.w	r4, lr, r4
 80100d0:	17c2      	asrs	r2, r0, #31
 80100d2:	9d06      	ldr	r5, [sp, #24]
 80100d4:	fb00 fc05 	mul.w	ip, r0, r5
 80100d8:	fb01 cc02 	mla	ip, r1, r2, ip
 80100dc:	fba0 1e01 	umull	r1, lr, r0, r1
 80100e0:	44f4      	add	ip, lr
 80100e2:	1989      	adds	r1, r1, r6
 80100e4:	9109      	str	r1, [sp, #36]	; 0x24
 80100e6:	eb4c 0507 	adc.w	r5, ip, r7
 80100ea:	950a      	str	r5, [sp, #40]	; 0x28
 80100ec:	9d04      	ldr	r5, [sp, #16]
 80100ee:	fb00 f505 	mul.w	r5, r0, r5
 80100f2:	fb03 5502 	mla	r5, r3, r2, r5
 80100f6:	fba0 1e03 	umull	r1, lr, r0, r3
 80100fa:	44ae      	add	lr, r5
 80100fc:	9b05      	ldr	r3, [sp, #20]
 80100fe:	18cb      	adds	r3, r1, r3
 8010100:	9307      	str	r3, [sp, #28]
 8010102:	eb4e 0404 	adc.w	r4, lr, r4
 8010106:	9408      	str	r4, [sp, #32]
		MC2S(1)
 8010108:	9a01      	ldr	r2, [sp, #4]
 801010a:	6894      	ldr	r4, [r2, #8]
 801010c:	68d3      	ldr	r3, [r2, #12]
 801010e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010112:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
 8010116:	17d6      	asrs	r6, r2, #31
 8010118:	17e7      	asrs	r7, r4, #31
 801011a:	9704      	str	r7, [sp, #16]
 801011c:	fb02 fe07 	mul.w	lr, r2, r7
 8010120:	fb04 ec06 	mla	ip, r4, r6, lr
 8010124:	fba2 7e04 	umull	r7, lr, r2, r4
 8010128:	44e6      	add	lr, ip
 801012a:	eb17 0708 	adds.w	r7, r7, r8
 801012e:	eb4e 050b 	adc.w	r5, lr, fp
 8010132:	9505      	str	r5, [sp, #20]
 8010134:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 8010138:	fb03 f606 	mul.w	r6, r3, r6
 801013c:	fb02 660e 	mla	r6, r2, lr, r6
 8010140:	fba3 2002 	umull	r2, r0, r3, r2
 8010144:	4406      	add	r6, r0
 8010146:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010148:	1812      	adds	r2, r2, r0
 801014a:	eb46 0609 	adc.w	r6, r6, r9
 801014e:	425d      	negs	r5, r3
 8010150:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8010154:	ea4f 79e5 	mov.w	r9, r5, asr #31
 8010158:	fb01 f009 	mul.w	r0, r1, r9
 801015c:	fb05 000c 	mla	r0, r5, ip, r0
 8010160:	fba1 8b05 	umull	r8, fp, r1, r5
 8010164:	4483      	add	fp, r0
 8010166:	eb18 0007 	adds.w	r0, r8, r7
 801016a:	900b      	str	r0, [sp, #44]	; 0x2c
 801016c:	9805      	ldr	r0, [sp, #20]
 801016e:	eb4b 0b00 	adc.w	fp, fp, r0
 8010172:	9f04      	ldr	r7, [sp, #16]
 8010174:	fb01 f007 	mul.w	r0, r1, r7
 8010178:	fb04 0c0c 	mla	ip, r4, ip, r0
 801017c:	fba1 1004 	umull	r1, r0, r1, r4
 8010180:	4484      	add	ip, r0
 8010182:	1889      	adds	r1, r1, r2
 8010184:	9105      	str	r1, [sp, #20]
 8010186:	eb4c 0606 	adc.w	r6, ip, r6
 801018a:	9606      	str	r6, [sp, #24]
 801018c:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 8010190:	f8da 00d8 	ldr.w	r0, [sl, #216]	; 0xd8
 8010194:	ea4f 78e1 	mov.w	r8, r1, asr #31
 8010198:	463a      	mov	r2, r7
 801019a:	fb01 f707 	mul.w	r7, r1, r7
 801019e:	fb04 7708 	mla	r7, r4, r8, r7
 80101a2:	fba1 6c04 	umull	r6, ip, r1, r4
 80101a6:	44bc      	add	ip, r7
 80101a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80101aa:	19f6      	adds	r6, r6, r7
 80101ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80101ae:	eb4c 0c07 	adc.w	ip, ip, r7
 80101b2:	fb01 fe0e 	mul.w	lr, r1, lr
 80101b6:	fb03 ee08 	mla	lr, r3, r8, lr
 80101ba:	fba1 1303 	umull	r1, r3, r1, r3
 80101be:	449e      	add	lr, r3
 80101c0:	9b07      	ldr	r3, [sp, #28]
 80101c2:	18c9      	adds	r1, r1, r3
 80101c4:	9b08      	ldr	r3, [sp, #32]
 80101c6:	eb4e 0e03 	adc.w	lr, lr, r3
 80101ca:	17c3      	asrs	r3, r0, #31
 80101cc:	fb00 f909 	mul.w	r9, r0, r9
 80101d0:	fb05 9903 	mla	r9, r5, r3, r9
 80101d4:	fba0 5705 	umull	r5, r7, r0, r5
 80101d8:	44b9      	add	r9, r7
 80101da:	19ad      	adds	r5, r5, r6
 80101dc:	9509      	str	r5, [sp, #36]	; 0x24
 80101de:	eb49 070c 	adc.w	r7, r9, ip
 80101e2:	970a      	str	r7, [sp, #40]	; 0x28
 80101e4:	fb00 f202 	mul.w	r2, r0, r2
 80101e8:	fb04 2303 	mla	r3, r4, r3, r2
 80101ec:	fba0 4004 	umull	r4, r0, r0, r4
 80101f0:	4403      	add	r3, r0
 80101f2:	1864      	adds	r4, r4, r1
 80101f4:	9407      	str	r4, [sp, #28]
 80101f6:	eb43 030e 	adc.w	r3, r3, lr
 80101fa:	9308      	str	r3, [sp, #32]
		MC2S(2)
 80101fc:	9a01      	ldr	r2, [sp, #4]
 80101fe:	6913      	ldr	r3, [r2, #16]
 8010200:	6954      	ldr	r4, [r2, #20]
 8010202:	f8da 2008 	ldr.w	r2, [sl, #8]
 8010206:	f8da 5054 	ldr.w	r5, [sl, #84]	; 0x54
 801020a:	17d6      	asrs	r6, r2, #31
 801020c:	17df      	asrs	r7, r3, #31
 801020e:	fb02 fe07 	mul.w	lr, r2, r7
 8010212:	fb03 e006 	mla	r0, r3, r6, lr
 8010216:	fba2 8e03 	umull	r8, lr, r2, r3
 801021a:	4486      	add	lr, r0
 801021c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801021e:	eb18 0800 	adds.w	r8, r8, r0
 8010222:	eb4e 0e0b 	adc.w	lr, lr, fp
 8010226:	17e1      	asrs	r1, r4, #31
 8010228:	fb04 f606 	mul.w	r6, r4, r6
 801022c:	9104      	str	r1, [sp, #16]
 801022e:	fb02 6601 	mla	r6, r2, r1, r6
 8010232:	fba4 2102 	umull	r2, r1, r4, r2
 8010236:	440e      	add	r6, r1
 8010238:	9805      	ldr	r0, [sp, #20]
 801023a:	1812      	adds	r2, r2, r0
 801023c:	9806      	ldr	r0, [sp, #24]
 801023e:	eb46 0100 	adc.w	r1, r6, r0
 8010242:	9105      	str	r1, [sp, #20]
 8010244:	f1c4 0c00 	rsb	ip, r4, #0
 8010248:	17e8      	asrs	r0, r5, #31
 801024a:	ea4f 79ec 	mov.w	r9, ip, asr #31
 801024e:	fb05 f109 	mul.w	r1, r5, r9
 8010252:	fb0c 1100 	mla	r1, ip, r0, r1
 8010256:	fba5 6b0c 	umull	r6, fp, r5, ip
 801025a:	448b      	add	fp, r1
 801025c:	eb16 0808 	adds.w	r8, r6, r8
 8010260:	eb4b 0b0e 	adc.w	fp, fp, lr
 8010264:	fb05 f107 	mul.w	r1, r5, r7
 8010268:	fb03 1000 	mla	r0, r3, r0, r1
 801026c:	fba5 5103 	umull	r5, r1, r5, r3
 8010270:	4408      	add	r0, r1
 8010272:	18ae      	adds	r6, r5, r2
 8010274:	9606      	str	r6, [sp, #24]
 8010276:	9a05      	ldr	r2, [sp, #20]
 8010278:	eb40 0002 	adc.w	r0, r0, r2
 801027c:	900b      	str	r0, [sp, #44]	; 0x2c
 801027e:	f8da 1088 	ldr.w	r1, [sl, #136]	; 0x88
 8010282:	f8da 20d4 	ldr.w	r2, [sl, #212]	; 0xd4
 8010286:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 801028a:	fb01 f507 	mul.w	r5, r1, r7
 801028e:	fb03 550e 	mla	r5, r3, lr, r5
 8010292:	fba1 6003 	umull	r6, r0, r1, r3
 8010296:	4428      	add	r0, r5
 8010298:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801029a:	1976      	adds	r6, r6, r5
 801029c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801029e:	eb40 0005 	adc.w	r0, r0, r5
 80102a2:	9d04      	ldr	r5, [sp, #16]
 80102a4:	fb01 f505 	mul.w	r5, r1, r5
 80102a8:	fb04 5e0e 	mla	lr, r4, lr, r5
 80102ac:	fba1 1404 	umull	r1, r4, r1, r4
 80102b0:	44a6      	add	lr, r4
 80102b2:	9c07      	ldr	r4, [sp, #28]
 80102b4:	1909      	adds	r1, r1, r4
 80102b6:	9c08      	ldr	r4, [sp, #32]
 80102b8:	eb4e 0e04 	adc.w	lr, lr, r4
 80102bc:	17d4      	asrs	r4, r2, #31
 80102be:	fb02 f909 	mul.w	r9, r2, r9
 80102c2:	fb0c 9904 	mla	r9, ip, r4, r9
 80102c6:	fba2 c50c 	umull	ip, r5, r2, ip
 80102ca:	444d      	add	r5, r9
 80102cc:	eb1c 0606 	adds.w	r6, ip, r6
 80102d0:	9609      	str	r6, [sp, #36]	; 0x24
 80102d2:	eb45 0000 	adc.w	r0, r5, r0
 80102d6:	900a      	str	r0, [sp, #40]	; 0x28
 80102d8:	fb02 f007 	mul.w	r0, r2, r7
 80102dc:	fb03 0004 	mla	r0, r3, r4, r0
 80102e0:	fba2 3403 	umull	r3, r4, r2, r3
 80102e4:	4404      	add	r4, r0
 80102e6:	185b      	adds	r3, r3, r1
 80102e8:	9307      	str	r3, [sp, #28]
 80102ea:	eb44 010e 	adc.w	r1, r4, lr
 80102ee:	9108      	str	r1, [sp, #32]
		MC2S(3)
 80102f0:	9a01      	ldr	r2, [sp, #4]
 80102f2:	6990      	ldr	r0, [r2, #24]
 80102f4:	69d3      	ldr	r3, [r2, #28]
 80102f6:	f8da 200c 	ldr.w	r2, [sl, #12]
 80102fa:	f8da 1050 	ldr.w	r1, [sl, #80]	; 0x50
 80102fe:	17d6      	asrs	r6, r2, #31
 8010300:	17c4      	asrs	r4, r0, #31
 8010302:	9404      	str	r4, [sp, #16]
 8010304:	fb02 fe04 	mul.w	lr, r2, r4
 8010308:	fb00 e506 	mla	r5, r0, r6, lr
 801030c:	fba2 4e00 	umull	r4, lr, r2, r0
 8010310:	44ae      	add	lr, r5
 8010312:	eb14 0808 	adds.w	r8, r4, r8
 8010316:	eb4e 0e0b 	adc.w	lr, lr, fp
 801031a:	17df      	asrs	r7, r3, #31
 801031c:	fb03 f606 	mul.w	r6, r3, r6
 8010320:	9705      	str	r7, [sp, #20]
 8010322:	fb02 6607 	mla	r6, r2, r7, r6
 8010326:	fba3 2402 	umull	r2, r4, r3, r2
 801032a:	4426      	add	r6, r4
 801032c:	9d06      	ldr	r5, [sp, #24]
 801032e:	1952      	adds	r2, r2, r5
 8010330:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010332:	eb46 0605 	adc.w	r6, r6, r5
 8010336:	425c      	negs	r4, r3
 8010338:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 801033c:	ea4f 79e4 	mov.w	r9, r4, asr #31
 8010340:	fb01 f509 	mul.w	r5, r1, r9
 8010344:	fb04 550c 	mla	r5, r4, ip, r5
 8010348:	fba1 7b04 	umull	r7, fp, r1, r4
 801034c:	44ab      	add	fp, r5
 801034e:	eb17 0808 	adds.w	r8, r7, r8
 8010352:	eb4b 0b0e 	adc.w	fp, fp, lr
 8010356:	9d04      	ldr	r5, [sp, #16]
 8010358:	fb01 f505 	mul.w	r5, r1, r5
 801035c:	fb00 5c0c 	mla	ip, r0, ip, r5
 8010360:	fba1 1500 	umull	r1, r5, r1, r0
 8010364:	44ac      	add	ip, r5
 8010366:	1889      	adds	r1, r1, r2
 8010368:	9106      	str	r1, [sp, #24]
 801036a:	eb4c 0c06 	adc.w	ip, ip, r6
 801036e:	f8da 108c 	ldr.w	r1, [sl, #140]	; 0x8c
 8010372:	f8da 70d0 	ldr.w	r7, [sl, #208]	; 0xd0
 8010376:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 801037a:	9d04      	ldr	r5, [sp, #16]
 801037c:	fb01 f505 	mul.w	r5, r1, r5
 8010380:	fb00 550e 	mla	r5, r0, lr, r5
 8010384:	fba1 6200 	umull	r6, r2, r1, r0
 8010388:	4415      	add	r5, r2
 801038a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801038c:	18b6      	adds	r6, r6, r2
 801038e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010390:	eb45 0502 	adc.w	r5, r5, r2
 8010394:	9a05      	ldr	r2, [sp, #20]
 8010396:	fb01 f202 	mul.w	r2, r1, r2
 801039a:	fb03 2e0e 	mla	lr, r3, lr, r2
 801039e:	fba1 1303 	umull	r1, r3, r1, r3
 80103a2:	449e      	add	lr, r3
 80103a4:	9b07      	ldr	r3, [sp, #28]
 80103a6:	18c9      	adds	r1, r1, r3
 80103a8:	9b08      	ldr	r3, [sp, #32]
 80103aa:	eb4e 0e03 	adc.w	lr, lr, r3
 80103ae:	17fb      	asrs	r3, r7, #31
 80103b0:	fb07 f909 	mul.w	r9, r7, r9
 80103b4:	fb04 9903 	mla	r9, r4, r3, r9
 80103b8:	fba7 4204 	umull	r4, r2, r7, r4
 80103bc:	4491      	add	r9, r2
 80103be:	19a6      	adds	r6, r4, r6
 80103c0:	9609      	str	r6, [sp, #36]	; 0x24
 80103c2:	eb49 0605 	adc.w	r6, r9, r5
 80103c6:	960a      	str	r6, [sp, #40]	; 0x28
 80103c8:	9d04      	ldr	r5, [sp, #16]
 80103ca:	fb07 f205 	mul.w	r2, r7, r5
 80103ce:	fb00 2203 	mla	r2, r0, r3, r2
 80103d2:	fba7 0300 	umull	r0, r3, r7, r0
 80103d6:	4413      	add	r3, r2
 80103d8:	1840      	adds	r0, r0, r1
 80103da:	9007      	str	r0, [sp, #28]
 80103dc:	eb43 030e 	adc.w	r3, r3, lr
 80103e0:	9308      	str	r3, [sp, #32]
		MC2S(4)
 80103e2:	9a01      	ldr	r2, [sp, #4]
 80103e4:	6a13      	ldr	r3, [r2, #32]
 80103e6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80103e8:	f8da 2010 	ldr.w	r2, [sl, #16]
 80103ec:	f8da 404c 	ldr.w	r4, [sl, #76]	; 0x4c
 80103f0:	17d6      	asrs	r6, r2, #31
 80103f2:	17d9      	asrs	r1, r3, #31
 80103f4:	9104      	str	r1, [sp, #16]
 80103f6:	fb02 fe01 	mul.w	lr, r2, r1
 80103fa:	fb03 e506 	mla	r5, r3, r6, lr
 80103fe:	fba2 7e03 	umull	r7, lr, r2, r3
 8010402:	44ae      	add	lr, r5
 8010404:	eb17 0708 	adds.w	r7, r7, r8
 8010408:	eb4e 050b 	adc.w	r5, lr, fp
 801040c:	9505      	str	r5, [sp, #20]
 801040e:	ea4f 7ee0 	mov.w	lr, r0, asr #31
 8010412:	fb00 f606 	mul.w	r6, r0, r6
 8010416:	fb02 660e 	mla	r6, r2, lr, r6
 801041a:	fba0 2102 	umull	r2, r1, r0, r2
 801041e:	440e      	add	r6, r1
 8010420:	9d06      	ldr	r5, [sp, #24]
 8010422:	1952      	adds	r2, r2, r5
 8010424:	eb46 060c 	adc.w	r6, r6, ip
 8010428:	f1c0 0c00 	rsb	ip, r0, #0
 801042c:	17e5      	asrs	r5, r4, #31
 801042e:	ea4f 79ec 	mov.w	r9, ip, asr #31
 8010432:	fb04 f109 	mul.w	r1, r4, r9
 8010436:	fb0c 1105 	mla	r1, ip, r5, r1
 801043a:	fba4 8b0c 	umull	r8, fp, r4, ip
 801043e:	448b      	add	fp, r1
 8010440:	eb18 0807 	adds.w	r8, r8, r7
 8010444:	9f05      	ldr	r7, [sp, #20]
 8010446:	eb4b 0b07 	adc.w	fp, fp, r7
 801044a:	9904      	ldr	r1, [sp, #16]
 801044c:	fb04 f101 	mul.w	r1, r4, r1
 8010450:	fb03 1505 	mla	r5, r3, r5, r1
 8010454:	fba4 4103 	umull	r4, r1, r4, r3
 8010458:	440d      	add	r5, r1
 801045a:	18a7      	adds	r7, r4, r2
 801045c:	9706      	str	r7, [sp, #24]
 801045e:	eb45 0506 	adc.w	r5, r5, r6
 8010462:	950b      	str	r5, [sp, #44]	; 0x2c
 8010464:	f8da 1090 	ldr.w	r1, [sl, #144]	; 0x90
 8010468:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
 801046c:	17cf      	asrs	r7, r1, #31
 801046e:	9c04      	ldr	r4, [sp, #16]
 8010470:	fb01 f404 	mul.w	r4, r1, r4
 8010474:	fb03 4407 	mla	r4, r3, r7, r4
 8010478:	fba1 6503 	umull	r6, r5, r1, r3
 801047c:	4425      	add	r5, r4
 801047e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010480:	1936      	adds	r6, r6, r4
 8010482:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010484:	eb45 0504 	adc.w	r5, r5, r4
 8010488:	fb01 fe0e 	mul.w	lr, r1, lr
 801048c:	fb00 ee07 	mla	lr, r0, r7, lr
 8010490:	fba1 1000 	umull	r1, r0, r1, r0
 8010494:	4486      	add	lr, r0
 8010496:	9807      	ldr	r0, [sp, #28]
 8010498:	1809      	adds	r1, r1, r0
 801049a:	9808      	ldr	r0, [sp, #32]
 801049c:	eb4e 0e00 	adc.w	lr, lr, r0
 80104a0:	17d0      	asrs	r0, r2, #31
 80104a2:	fb02 f909 	mul.w	r9, r2, r9
 80104a6:	fb0c 9900 	mla	r9, ip, r0, r9
 80104aa:	fba2 c40c 	umull	ip, r4, r2, ip
 80104ae:	444c      	add	r4, r9
 80104b0:	eb1c 0606 	adds.w	r6, ip, r6
 80104b4:	9609      	str	r6, [sp, #36]	; 0x24
 80104b6:	eb44 0605 	adc.w	r6, r4, r5
 80104ba:	960a      	str	r6, [sp, #40]	; 0x28
 80104bc:	9c04      	ldr	r4, [sp, #16]
 80104be:	fb02 f404 	mul.w	r4, r2, r4
 80104c2:	fb03 4400 	mla	r4, r3, r0, r4
 80104c6:	fba2 3003 	umull	r3, r0, r2, r3
 80104ca:	4420      	add	r0, r4
 80104cc:	185b      	adds	r3, r3, r1
 80104ce:	9307      	str	r3, [sp, #28]
 80104d0:	eb40 010e 	adc.w	r1, r0, lr
 80104d4:	9108      	str	r1, [sp, #32]
		MC2S(5)
 80104d6:	9a01      	ldr	r2, [sp, #4]
 80104d8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80104da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80104dc:	f8da 2014 	ldr.w	r2, [sl, #20]
 80104e0:	f8da 1048 	ldr.w	r1, [sl, #72]	; 0x48
 80104e4:	17d6      	asrs	r6, r2, #31
 80104e6:	17c4      	asrs	r4, r0, #31
 80104e8:	9404      	str	r4, [sp, #16]
 80104ea:	fb02 fe04 	mul.w	lr, r2, r4
 80104ee:	fb00 e406 	mla	r4, r0, r6, lr
 80104f2:	fba2 7e00 	umull	r7, lr, r2, r0
 80104f6:	44a6      	add	lr, r4
 80104f8:	eb17 0708 	adds.w	r7, r7, r8
 80104fc:	eb4e 0e0b 	adc.w	lr, lr, fp
 8010500:	17dd      	asrs	r5, r3, #31
 8010502:	fb03 f606 	mul.w	r6, r3, r6
 8010506:	9505      	str	r5, [sp, #20]
 8010508:	fb02 6605 	mla	r6, r2, r5, r6
 801050c:	fba3 2402 	umull	r2, r4, r3, r2
 8010510:	4426      	add	r6, r4
 8010512:	9d06      	ldr	r5, [sp, #24]
 8010514:	1952      	adds	r2, r2, r5
 8010516:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010518:	eb46 0605 	adc.w	r6, r6, r5
 801051c:	425d      	negs	r5, r3
 801051e:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8010522:	ea4f 79e5 	mov.w	r9, r5, asr #31
 8010526:	fb01 f409 	mul.w	r4, r1, r9
 801052a:	fb05 440c 	mla	r4, r5, ip, r4
 801052e:	fba1 8b05 	umull	r8, fp, r1, r5
 8010532:	44a3      	add	fp, r4
 8010534:	eb18 0807 	adds.w	r8, r8, r7
 8010538:	eb4b 0b0e 	adc.w	fp, fp, lr
 801053c:	9c04      	ldr	r4, [sp, #16]
 801053e:	fb01 f404 	mul.w	r4, r1, r4
 8010542:	fb00 4c0c 	mla	ip, r0, ip, r4
 8010546:	fba1 1400 	umull	r1, r4, r1, r0
 801054a:	44a4      	add	ip, r4
 801054c:	188f      	adds	r7, r1, r2
 801054e:	9706      	str	r7, [sp, #24]
 8010550:	eb4c 0c06 	adc.w	ip, ip, r6
 8010554:	f8da 1094 	ldr.w	r1, [sl, #148]	; 0x94
 8010558:	f8da 70c8 	ldr.w	r7, [sl, #200]	; 0xc8
 801055c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 8010560:	9c04      	ldr	r4, [sp, #16]
 8010562:	fb01 f404 	mul.w	r4, r1, r4
 8010566:	fb00 440e 	mla	r4, r0, lr, r4
 801056a:	fba1 6200 	umull	r6, r2, r1, r0
 801056e:	4414      	add	r4, r2
 8010570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010572:	18b6      	adds	r6, r6, r2
 8010574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010576:	eb44 0402 	adc.w	r4, r4, r2
 801057a:	9a05      	ldr	r2, [sp, #20]
 801057c:	fb01 f202 	mul.w	r2, r1, r2
 8010580:	fb03 2e0e 	mla	lr, r3, lr, r2
 8010584:	fba1 1303 	umull	r1, r3, r1, r3
 8010588:	449e      	add	lr, r3
 801058a:	9b07      	ldr	r3, [sp, #28]
 801058c:	18c9      	adds	r1, r1, r3
 801058e:	9b08      	ldr	r3, [sp, #32]
 8010590:	eb4e 0e03 	adc.w	lr, lr, r3
 8010594:	17fb      	asrs	r3, r7, #31
 8010596:	fb07 f909 	mul.w	r9, r7, r9
 801059a:	fb05 9903 	mla	r9, r5, r3, r9
 801059e:	fba7 5205 	umull	r5, r2, r7, r5
 80105a2:	4491      	add	r9, r2
 80105a4:	19ad      	adds	r5, r5, r6
 80105a6:	9509      	str	r5, [sp, #36]	; 0x24
 80105a8:	eb49 0604 	adc.w	r6, r9, r4
 80105ac:	960a      	str	r6, [sp, #40]	; 0x28
 80105ae:	9c04      	ldr	r4, [sp, #16]
 80105b0:	fb07 f204 	mul.w	r2, r7, r4
 80105b4:	fb00 2203 	mla	r2, r0, r3, r2
 80105b8:	fba7 0300 	umull	r0, r3, r7, r0
 80105bc:	4413      	add	r3, r2
 80105be:	1841      	adds	r1, r0, r1
 80105c0:	9107      	str	r1, [sp, #28]
 80105c2:	eb43 030e 	adc.w	r3, r3, lr
 80105c6:	9308      	str	r3, [sp, #32]
		MC2S(6)
 80105c8:	9a01      	ldr	r2, [sp, #4]
 80105ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80105cc:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80105ce:	f8da 2018 	ldr.w	r2, [sl, #24]
 80105d2:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
 80105d6:	17d6      	asrs	r6, r2, #31
 80105d8:	17d9      	asrs	r1, r3, #31
 80105da:	9104      	str	r1, [sp, #16]
 80105dc:	fb02 fe01 	mul.w	lr, r2, r1
 80105e0:	fb03 e406 	mla	r4, r3, r6, lr
 80105e4:	fba2 7e03 	umull	r7, lr, r2, r3
 80105e8:	44a6      	add	lr, r4
 80105ea:	eb17 0808 	adds.w	r8, r7, r8
 80105ee:	eb4e 040b 	adc.w	r4, lr, fp
 80105f2:	9405      	str	r4, [sp, #20]
 80105f4:	ea4f 7ee0 	mov.w	lr, r0, asr #31
 80105f8:	fb00 f606 	mul.w	r6, r0, r6
 80105fc:	fb02 660e 	mla	r6, r2, lr, r6
 8010600:	fba0 2102 	umull	r2, r1, r0, r2
 8010604:	440e      	add	r6, r1
 8010606:	9f06      	ldr	r7, [sp, #24]
 8010608:	19d2      	adds	r2, r2, r7
 801060a:	eb46 060c 	adc.w	r6, r6, ip
 801060e:	f1c0 0c00 	rsb	ip, r0, #0
 8010612:	17ec      	asrs	r4, r5, #31
 8010614:	ea4f 79ec 	mov.w	r9, ip, asr #31
 8010618:	fb05 f109 	mul.w	r1, r5, r9
 801061c:	fb0c 1104 	mla	r1, ip, r4, r1
 8010620:	fba5 7b0c 	umull	r7, fp, r5, ip
 8010624:	448b      	add	fp, r1
 8010626:	eb17 0808 	adds.w	r8, r7, r8
 801062a:	9f05      	ldr	r7, [sp, #20]
 801062c:	eb4b 0b07 	adc.w	fp, fp, r7
 8010630:	9904      	ldr	r1, [sp, #16]
 8010632:	fb05 f101 	mul.w	r1, r5, r1
 8010636:	fb03 1404 	mla	r4, r3, r4, r1
 801063a:	fba5 5103 	umull	r5, r1, r5, r3
 801063e:	440c      	add	r4, r1
 8010640:	18af      	adds	r7, r5, r2
 8010642:	9705      	str	r7, [sp, #20]
 8010644:	eb44 0406 	adc.w	r4, r4, r6
 8010648:	9406      	str	r4, [sp, #24]
 801064a:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
 801064e:	f8da 20c4 	ldr.w	r2, [sl, #196]	; 0xc4
 8010652:	17cf      	asrs	r7, r1, #31
 8010654:	9c04      	ldr	r4, [sp, #16]
 8010656:	fb01 f504 	mul.w	r5, r1, r4
 801065a:	fb03 5507 	mla	r5, r3, r7, r5
 801065e:	fba1 6403 	umull	r6, r4, r1, r3
 8010662:	442c      	add	r4, r5
 8010664:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010666:	1976      	adds	r6, r6, r5
 8010668:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801066a:	eb44 0405 	adc.w	r4, r4, r5
 801066e:	fb01 fe0e 	mul.w	lr, r1, lr
 8010672:	fb00 ee07 	mla	lr, r0, r7, lr
 8010676:	fba1 1000 	umull	r1, r0, r1, r0
 801067a:	4486      	add	lr, r0
 801067c:	9807      	ldr	r0, [sp, #28]
 801067e:	1809      	adds	r1, r1, r0
 8010680:	9808      	ldr	r0, [sp, #32]
 8010682:	eb4e 0e00 	adc.w	lr, lr, r0
 8010686:	17d0      	asrs	r0, r2, #31
 8010688:	fb02 f909 	mul.w	r9, r2, r9
 801068c:	fb0c 9900 	mla	r9, ip, r0, r9
 8010690:	fba2 c50c 	umull	ip, r5, r2, ip
 8010694:	444d      	add	r5, r9
 8010696:	eb1c 0606 	adds.w	r6, ip, r6
 801069a:	960a      	str	r6, [sp, #40]	; 0x28
 801069c:	eb45 0504 	adc.w	r5, r5, r4
 80106a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80106a2:	9c04      	ldr	r4, [sp, #16]
 80106a4:	fb02 f404 	mul.w	r4, r2, r4
 80106a8:	fb03 4400 	mla	r4, r3, r0, r4
 80106ac:	fba2 3003 	umull	r3, r0, r2, r3
 80106b0:	4420      	add	r0, r4
 80106b2:	185b      	adds	r3, r3, r1
 80106b4:	9308      	str	r3, [sp, #32]
 80106b6:	eb40 010e 	adc.w	r1, r0, lr
 80106ba:	9109      	str	r1, [sp, #36]	; 0x24
		MC2S(7)
 80106bc:	9a01      	ldr	r2, [sp, #4]
 80106be:	6b94      	ldr	r4, [r2, #56]	; 0x38
 80106c0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80106c2:	3240      	adds	r2, #64	; 0x40
 80106c4:	9201      	str	r2, [sp, #4]
 80106c6:	f8da 201c 	ldr.w	r2, [sl, #28]
 80106ca:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 80106ce:	17d6      	asrs	r6, r2, #31
 80106d0:	17e7      	asrs	r7, r4, #31
 80106d2:	9704      	str	r7, [sp, #16]
 80106d4:	fb02 fe07 	mul.w	lr, r2, r7
 80106d8:	fb04 e006 	mla	r0, r4, r6, lr
 80106dc:	fba2 7e04 	umull	r7, lr, r2, r4
 80106e0:	4486      	add	lr, r0
 80106e2:	eb17 0708 	adds.w	r7, r7, r8
 80106e6:	eb4e 0e0b 	adc.w	lr, lr, fp
 80106ea:	ea4f 78e3 	mov.w	r8, r3, asr #31
 80106ee:	fb03 f606 	mul.w	r6, r3, r6
 80106f2:	fb02 6608 	mla	r6, r2, r8, r6
 80106f6:	fba3 2002 	umull	r2, r0, r3, r2
 80106fa:	4406      	add	r6, r0
 80106fc:	9805      	ldr	r0, [sp, #20]
 80106fe:	1812      	adds	r2, r2, r0
 8010700:	9207      	str	r2, [sp, #28]
 8010702:	9806      	ldr	r0, [sp, #24]
 8010704:	eb46 0600 	adc.w	r6, r6, r0
 8010708:	4258      	negs	r0, r3
 801070a:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 801070e:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8010712:	fb01 f509 	mul.w	r5, r1, r9
 8010716:	fb00 550c 	mla	r5, r0, ip, r5
 801071a:	fba1 2b00 	umull	r2, fp, r1, r0
 801071e:	445d      	add	r5, fp
 8010720:	19d2      	adds	r2, r2, r7
 8010722:	9205      	str	r2, [sp, #20]
 8010724:	eb45 020e 	adc.w	r2, r5, lr
 8010728:	9206      	str	r2, [sp, #24]
 801072a:	9f04      	ldr	r7, [sp, #16]
 801072c:	fb01 f507 	mul.w	r5, r1, r7
 8010730:	fb04 5c0c 	mla	ip, r4, ip, r5
 8010734:	fba1 b104 	umull	fp, r1, r1, r4
 8010738:	448c      	add	ip, r1
 801073a:	9a07      	ldr	r2, [sp, #28]
 801073c:	eb1b 0b02 	adds.w	fp, fp, r2
 8010740:	eb4c 0606 	adc.w	r6, ip, r6
 8010744:	f8da 109c 	ldr.w	r1, [sl, #156]	; 0x9c
 8010748:	f8da 20c0 	ldr.w	r2, [sl, #192]	; 0xc0
 801074c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 8010750:	fb01 f707 	mul.w	r7, r1, r7
 8010754:	fb04 770e 	mla	r7, r4, lr, r7
 8010758:	fba1 c504 	umull	ip, r5, r1, r4
 801075c:	443d      	add	r5, r7
 801075e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010760:	eb1c 0c07 	adds.w	ip, ip, r7
 8010764:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8010766:	eb45 0507 	adc.w	r5, r5, r7
 801076a:	fb01 f708 	mul.w	r7, r1, r8
 801076e:	fb03 7e0e 	mla	lr, r3, lr, r7
 8010772:	fba1 8303 	umull	r8, r3, r1, r3
 8010776:	449e      	add	lr, r3
 8010778:	9b08      	ldr	r3, [sp, #32]
 801077a:	eb18 0803 	adds.w	r8, r8, r3
 801077e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010780:	eb4e 0e01 	adc.w	lr, lr, r1
 8010784:	17d3      	asrs	r3, r2, #31
 8010786:	fb02 f909 	mul.w	r9, r2, r9
 801078a:	fb00 9903 	mla	r9, r0, r3, r9
 801078e:	fba2 0700 	umull	r0, r7, r2, r0
 8010792:	44b9      	add	r9, r7
 8010794:	eb10 0c0c 	adds.w	ip, r0, ip
 8010798:	eb49 0505 	adc.w	r5, r9, r5
 801079c:	9f04      	ldr	r7, [sp, #16]
 801079e:	fb02 f107 	mul.w	r1, r2, r7
 80107a2:	fb04 1303 	mla	r3, r4, r3, r1
 80107a6:	fba2 2404 	umull	r2, r4, r2, r4
 80107aa:	4423      	add	r3, r4
 80107ac:	eb12 0208 	adds.w	r2, r2, r8
 80107b0:	eb43 030e 	adc.w	r3, r3, lr
		vb1 += 64;
 80107b4:	f50a 7a80 	add.w	sl, sl, #256	; 0x100
  return x >> n;
 80107b8:	9905      	ldr	r1, [sp, #20]
 80107ba:	0d0f      	lsrs	r7, r1, #20
 80107bc:	9906      	ldr	r1, [sp, #24]
 80107be:	ea47 3701 	orr.w	r7, r7, r1, lsl #12
	x >>= fracBits;
 80107c2:	11b9      	asrs	r1, r7, #6
	sign = x >> 31;
 80107c4:	17fc      	asrs	r4, r7, #31
	if (sign != (x >> 15))
 80107c6:	1578      	asrs	r0, r7, #21
 80107c8:	ebb0 7fe7 	cmp.w	r0, r7, asr #31
 80107cc:	d002      	beq.n	80107d4 <xmp3fixpt_PolyphaseStereo+0xe44>
		x = sign ^ ((1 << 15) - 1);
 80107ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80107d2:	4061      	eors	r1, r4
		*(pcm + 0)         = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 80107d4:	9802      	ldr	r0, [sp, #8]
 80107d6:	8001      	strh	r1, [r0, #0]
 80107d8:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
 80107dc:	ea4c 3c05 	orr.w	ip, ip, r5, lsl #12
	x >>= fracBits;
 80107e0:	ea4f 11ac 	mov.w	r1, ip, asr #6
	sign = x >> 31;
 80107e4:	ea4f 74ec 	mov.w	r4, ip, asr #31
	if (sign != (x >> 15))
 80107e8:	ea4f 506c 	mov.w	r0, ip, asr #21
 80107ec:	ebb0 7fec 	cmp.w	r0, ip, asr #31
 80107f0:	d002      	beq.n	80107f8 <xmp3fixpt_PolyphaseStereo+0xe68>
		x = sign ^ ((1 << 15) - 1);
 80107f2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80107f6:	4061      	eors	r1, r4
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 80107f8:	9802      	ldr	r0, [sp, #8]
 80107fa:	8041      	strh	r1, [r0, #2]
 80107fc:	ea4f 5b1b 	mov.w	fp, fp, lsr #20
 8010800:	ea4b 3b06 	orr.w	fp, fp, r6, lsl #12
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 8010804:	9c03      	ldr	r4, [sp, #12]
 8010806:	00e1      	lsls	r1, r4, #3
 8010808:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	x >>= fracBits;
 801080c:	ea4f 10ab 	mov.w	r0, fp, asr #6
	sign = x >> 31;
 8010810:	ea4f 76eb 	mov.w	r6, fp, asr #31
	if (sign != (x >> 15))
 8010814:	ea4f 556b 	mov.w	r5, fp, asr #21
 8010818:	ebb5 7feb 	cmp.w	r5, fp, asr #31
 801081c:	d002      	beq.n	8010824 <xmp3fixpt_PolyphaseStereo+0xe94>
		x = sign ^ ((1 << 15) - 1);
 801081e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8010822:	4070      	eors	r0, r6
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 8010824:	8020      	strh	r0, [r4, #0]
 8010826:	0d12      	lsrs	r2, r2, #20
 8010828:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
 801082c:	1c8b      	adds	r3, r1, #2
 801082e:	9902      	ldr	r1, [sp, #8]
 8010830:	440b      	add	r3, r1
	x >>= fracBits;
 8010832:	1191      	asrs	r1, r2, #6
	sign = x >> 31;
 8010834:	17d4      	asrs	r4, r2, #31
	if (sign != (x >> 15))
 8010836:	1550      	asrs	r0, r2, #21
 8010838:	ebb0 7fe2 	cmp.w	r0, r2, asr #31
 801083c:	f43f abe4 	beq.w	8010008 <xmp3fixpt_PolyphaseStereo+0x678>
		x = sign ^ ((1 << 15) - 1);
 8010840:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010844:	4061      	eors	r1, r4
 8010846:	f7ff bbdf 	b.w	8010008 <xmp3fixpt_PolyphaseStereo+0x678>
	}
}
 801084a:	b00d      	add	sp, #52	; 0x34
 801084c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010850 <UnpackSFMPEG1>:
 *                so that we index through consectutive memory locations when unpacking 
 *                (make sure dequantizer follows same convention)
 *              Illegal Intensity Position = 7 (always) for MPEG1 scale factors
 **************************************************************************************/
static void UnpackSFMPEG1(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int *scfsi, int gr, ScaleFactorInfoSub *sfisGr0)
{
 8010850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010854:	4605      	mov	r5, r0
 8010856:	4616      	mov	r6, r2
 8010858:	469a      	mov	sl, r3
 801085a:	9c08      	ldr	r4, [sp, #32]
 801085c:	9f09      	ldr	r7, [sp, #36]	; 0x24
	int sfb;
	int slen0, slen1;
	
	/* these can be 0, so make sure GetBits(bsi, 0) returns 0 (no >> 32 or anything) */
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 801085e:	68ca      	ldr	r2, [r1, #12]
 8010860:	4b57      	ldr	r3, [pc, #348]	; (80109c0 <UnpackSFMPEG1+0x170>)
 8010862:	f813 8012 	ldrb.w	r8, [r3, r2, lsl #1]
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 8010866:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801086a:	f893 9001 	ldrb.w	r9, [r3, #1]
	
	if (sis->blockType == 2) {
 801086e:	694b      	ldr	r3, [r1, #20]
 8010870:	2b02      	cmp	r3, #2
 8010872:	d007      	beq.n	8010884 <UnpackSFMPEG1+0x34>

		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
	} else {
		/* long blocks, type 0, 1, or 3 */
		if(gr == 0) {
 8010874:	2c00      	cmp	r4, #0
 8010876:	d04c      	beq.n	8010912 <UnpackSFMPEG1+0xc2>
			/* second granule
			 * scfsi: 0 = different scalefactors for each granule, 1 = copy sf's from granule 0 into granule 1 
			 * for block type == 2, scfsi is always 0
			 */
			sfb = 0;
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010878:	f8da 4000 	ldr.w	r4, [sl]
 801087c:	2c00      	cmp	r4, #0
 801087e:	d064      	beq.n	801094a <UnpackSFMPEG1+0xfa>
			sfb = 0;
 8010880:	2400      	movs	r4, #0
 8010882:	e056      	b.n	8010932 <UnpackSFMPEG1+0xe2>
		if (sis->mixedBlock) {          
 8010884:	698c      	ldr	r4, [r1, #24]
 8010886:	b1f4      	cbz	r4, 80108c6 <UnpackSFMPEG1+0x76>
			for (sfb = 0; sfb < 8; sfb++)
 8010888:	2400      	movs	r4, #0
 801088a:	e005      	b.n	8010898 <UnpackSFMPEG1+0x48>
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 801088c:	4641      	mov	r1, r8
 801088e:	4628      	mov	r0, r5
 8010890:	f7fb ff3c 	bl	800c70c <xmp3fixpt_GetBits>
 8010894:	5530      	strb	r0, [r6, r4]
			for (sfb = 0; sfb < 8; sfb++)
 8010896:	3401      	adds	r4, #1
 8010898:	2c07      	cmp	r4, #7
 801089a:	ddf7      	ble.n	801088c <UnpackSFMPEG1+0x3c>
			sfb = 3;
 801089c:	2403      	movs	r4, #3
 801089e:	e012      	b.n	80108c6 <UnpackSFMPEG1+0x76>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 80108a0:	4641      	mov	r1, r8
 80108a2:	4628      	mov	r0, r5
 80108a4:	f7fb ff32 	bl	800c70c <xmp3fixpt_GetBits>
 80108a8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80108ac:	4437      	add	r7, r6
 80108ae:	75f8      	strb	r0, [r7, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 80108b0:	4641      	mov	r1, r8
 80108b2:	4628      	mov	r0, r5
 80108b4:	f7fb ff2a 	bl	800c70c <xmp3fixpt_GetBits>
 80108b8:	7638      	strb	r0, [r7, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 80108ba:	4641      	mov	r1, r8
 80108bc:	4628      	mov	r0, r5
 80108be:	f7fb ff25 	bl	800c70c <xmp3fixpt_GetBits>
 80108c2:	7678      	strb	r0, [r7, #25]
		for (      ; sfb < 6; sfb++) {
 80108c4:	3401      	adds	r4, #1
 80108c6:	2c05      	cmp	r4, #5
 80108c8:	ddea      	ble.n	80108a0 <UnpackSFMPEG1+0x50>
 80108ca:	e012      	b.n	80108f2 <UnpackSFMPEG1+0xa2>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 80108cc:	4649      	mov	r1, r9
 80108ce:	4628      	mov	r0, r5
 80108d0:	f7fb ff1c 	bl	800c70c <xmp3fixpt_GetBits>
 80108d4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80108d8:	4437      	add	r7, r6
 80108da:	75f8      	strb	r0, [r7, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 80108dc:	4649      	mov	r1, r9
 80108de:	4628      	mov	r0, r5
 80108e0:	f7fb ff14 	bl	800c70c <xmp3fixpt_GetBits>
 80108e4:	7638      	strb	r0, [r7, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 80108e6:	4649      	mov	r1, r9
 80108e8:	4628      	mov	r0, r5
 80108ea:	f7fb ff0f 	bl	800c70c <xmp3fixpt_GetBits>
 80108ee:	7678      	strb	r0, [r7, #25]
		for (      ; sfb < 12; sfb++) {
 80108f0:	3401      	adds	r4, #1
 80108f2:	2c0b      	cmp	r4, #11
 80108f4:	ddea      	ble.n	80108cc <UnpackSFMPEG1+0x7c>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 80108f6:	2300      	movs	r3, #0
 80108f8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
 80108fc:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 8010900:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
 8010904:	e050      	b.n	80109a8 <UnpackSFMPEG1+0x158>
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8010906:	4641      	mov	r1, r8
 8010908:	4628      	mov	r0, r5
 801090a:	f7fb feff 	bl	800c70c <xmp3fixpt_GetBits>
 801090e:	5530      	strb	r0, [r6, r4]
			for (sfb = 0;  sfb < 11; sfb++) 
 8010910:	3401      	adds	r4, #1
 8010912:	2c0a      	cmp	r4, #10
 8010914:	ddf7      	ble.n	8010906 <UnpackSFMPEG1+0xb6>
			for (sfb = 11; sfb < 21; sfb++) 
 8010916:	240b      	movs	r4, #11
 8010918:	e005      	b.n	8010926 <UnpackSFMPEG1+0xd6>
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 801091a:	4649      	mov	r1, r9
 801091c:	4628      	mov	r0, r5
 801091e:	f7fb fef5 	bl	800c70c <xmp3fixpt_GetBits>
 8010922:	5530      	strb	r0, [r6, r4]
			for (sfb = 11; sfb < 21; sfb++) 
 8010924:	3401      	adds	r4, #1
 8010926:	2c14      	cmp	r4, #20
 8010928:	ddf7      	ble.n	801091a <UnpackSFMPEG1+0xca>
 801092a:	e03d      	b.n	80109a8 <UnpackSFMPEG1+0x158>
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801092c:	5d3b      	ldrb	r3, [r7, r4]
 801092e:	5533      	strb	r3, [r6, r4]
 8010930:	3401      	adds	r4, #1
 8010932:	2c05      	cmp	r4, #5
 8010934:	ddfa      	ble.n	801092c <UnpackSFMPEG1+0xdc>
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010936:	f8da 3004 	ldr.w	r3, [sl, #4]
 801093a:	b963      	cbnz	r3, 8010956 <UnpackSFMPEG1+0x106>
 801093c:	e017      	b.n	801096e <UnpackSFMPEG1+0x11e>
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 801093e:	4641      	mov	r1, r8
 8010940:	4628      	mov	r0, r5
 8010942:	f7fb fee3 	bl	800c70c <xmp3fixpt_GetBits>
 8010946:	5530      	strb	r0, [r6, r4]
 8010948:	3401      	adds	r4, #1
 801094a:	2c05      	cmp	r4, #5
 801094c:	ddf7      	ble.n	801093e <UnpackSFMPEG1+0xee>
 801094e:	e7f2      	b.n	8010936 <UnpackSFMPEG1+0xe6>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010950:	5d3b      	ldrb	r3, [r7, r4]
 8010952:	5533      	strb	r3, [r6, r4]
 8010954:	3401      	adds	r4, #1
 8010956:	2c0a      	cmp	r4, #10
 8010958:	ddfa      	ble.n	8010950 <UnpackSFMPEG1+0x100>
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801095a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801095e:	b963      	cbnz	r3, 801097a <UnpackSFMPEG1+0x12a>
 8010960:	e017      	b.n	8010992 <UnpackSFMPEG1+0x142>
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8010962:	4641      	mov	r1, r8
 8010964:	4628      	mov	r0, r5
 8010966:	f7fb fed1 	bl	800c70c <xmp3fixpt_GetBits>
 801096a:	5530      	strb	r0, [r6, r4]
 801096c:	3401      	adds	r4, #1
 801096e:	2c0a      	cmp	r4, #10
 8010970:	ddf7      	ble.n	8010962 <UnpackSFMPEG1+0x112>
 8010972:	e7f2      	b.n	801095a <UnpackSFMPEG1+0x10a>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010974:	5d3b      	ldrb	r3, [r7, r4]
 8010976:	5533      	strb	r3, [r6, r4]
 8010978:	3401      	adds	r4, #1
 801097a:	2c0f      	cmp	r4, #15
 801097c:	ddfa      	ble.n	8010974 <UnpackSFMPEG1+0x124>
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801097e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8010982:	b963      	cbnz	r3, 801099e <UnpackSFMPEG1+0x14e>
 8010984:	e018      	b.n	80109b8 <UnpackSFMPEG1+0x168>
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8010986:	4649      	mov	r1, r9
 8010988:	4628      	mov	r0, r5
 801098a:	f7fb febf 	bl	800c70c <xmp3fixpt_GetBits>
 801098e:	5530      	strb	r0, [r6, r4]
 8010990:	3401      	adds	r4, #1
 8010992:	2c0f      	cmp	r4, #15
 8010994:	ddf7      	ble.n	8010986 <UnpackSFMPEG1+0x136>
 8010996:	e7f2      	b.n	801097e <UnpackSFMPEG1+0x12e>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010998:	5d3b      	ldrb	r3, [r7, r4]
 801099a:	5533      	strb	r3, [r6, r4]
 801099c:	3401      	adds	r4, #1
 801099e:	2c14      	cmp	r4, #20
 80109a0:	ddfa      	ble.n	8010998 <UnpackSFMPEG1+0x148>
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
		}
		/* last sf band not transmitted */
		sfis->l[21] = 0;
 80109a2:	2300      	movs	r3, #0
 80109a4:	7573      	strb	r3, [r6, #21]
		sfis->l[22] = 0;
 80109a6:	75b3      	strb	r3, [r6, #22]
	}
}
 80109a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 80109ac:	4649      	mov	r1, r9
 80109ae:	4628      	mov	r0, r5
 80109b0:	f7fb feac 	bl	800c70c <xmp3fixpt_GetBits>
 80109b4:	5530      	strb	r0, [r6, r4]
 80109b6:	3401      	adds	r4, #1
 80109b8:	2c14      	cmp	r4, #20
 80109ba:	ddf7      	ble.n	80109ac <UnpackSFMPEG1+0x15c>
 80109bc:	e7f1      	b.n	80109a2 <UnpackSFMPEG1+0x152>
 80109be:	bf00      	nop
 80109c0:	0801db44 	.word	0x0801db44

080109c4 <UnpackSFMPEG2>:
 *
 * TODO:        optimize the / and % stuff (only do one divide, get modulo x 
 *                with (x / m) * m, etc.)
 **************************************************************************************/
static void UnpackSFMPEG2(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int gr, int ch, int modeExt, ScaleFactorJS *sfjs)
{
 80109c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109c8:	b088      	sub	sp, #32
 80109ca:	4606      	mov	r6, r0
 80109cc:	4617      	mov	r7, r2
 80109ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80109d0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48

	int i, sfb, sfcIdx, btIdx, nrIdx, iipTest;
	int slen[4], nr[4];
	int sfCompress, preFlag, intensityScale;
	
	sfCompress = sis->sfCompress;
 80109d4:	68cb      	ldr	r3, [r1, #12]
	preFlag = 0;
	intensityScale = 0;

	/* stereo mode bits (1 = on): bit 1 = mid-side on/off, bit 0 = intensity on/off */
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 80109d6:	f012 0c01 	ands.w	ip, r2, #1
 80109da:	d002      	beq.n	80109e2 <UnpackSFMPEG2+0x1e>
 80109dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109de:	2a01      	cmp	r2, #1
 80109e0:	d053      	beq.n	8010a8a <UnpackSFMPEG2+0xc6>
		/* in other words: if ((modeExt & 0x01) == 0 || ch == 0) */
		if (sfCompress < 400) {
 80109e2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80109e6:	da1b      	bge.n	8010a20 <UnpackSFMPEG2+0x5c>
			/* max slen = floor[(399/16) / 5] = 4 */
			slen[0] = (sfCompress >> 4) / 5;
 80109e8:	1118      	asrs	r0, r3, #4
 80109ea:	4c9a      	ldr	r4, [pc, #616]	; (8010c54 <UnpackSFMPEG2+0x290>)
 80109ec:	fb84 2400 	smull	r2, r4, r4, r0
 80109f0:	17da      	asrs	r2, r3, #31
 80109f2:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 80109f6:	9204      	str	r2, [sp, #16]
			slen[1]= (sfCompress >> 4) % 5;
 80109f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80109fc:	1a82      	subs	r2, r0, r2
 80109fe:	9205      	str	r2, [sp, #20]
			slen[2]= (sfCompress & 0x0f) >> 2;
 8010a00:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8010a04:	9206      	str	r2, [sp, #24]
			slen[3]= (sfCompress & 0x03);
 8010a06:	f003 0303 	and.w	r3, r3, #3
 8010a0a:	9307      	str	r3, [sp, #28]
	intensityScale = 0;
 8010a0c:	f04f 0900 	mov.w	r9, #0
	preFlag = 0;
 8010a10:	46ce      	mov	lr, r9
			sfcIdx = 0;
 8010a12:	464c      	mov	r4, r9
		}
	}
	
	/* set index based on block type: (0,1,3) --> 0, (2 non-mixed) --> 1, (2 mixed) ---> 2 */
	btIdx = 0;
	if (sis->blockType == 2) 
 8010a14:	694d      	ldr	r5, [r1, #20]
 8010a16:	2d02      	cmp	r5, #2
 8010a18:	d07e      	beq.n	8010b18 <UnpackSFMPEG2+0x154>
	btIdx = 0;
 8010a1a:	2500      	movs	r5, #0
		btIdx = (sis->mixedBlock ? 2 : 1);
	for (i = 0; i < 4; i++)
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	e08e      	b.n	8010b3e <UnpackSFMPEG2+0x17a>
		} else if (sfCompress < 500) {
 8010a20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010a24:	da16      	bge.n	8010a54 <UnpackSFMPEG2+0x90>
			sfCompress -= 400;
 8010a26:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
			slen[0] = (sfCompress >> 2) / 5;
 8010a2a:	1098      	asrs	r0, r3, #2
 8010a2c:	4c89      	ldr	r4, [pc, #548]	; (8010c54 <UnpackSFMPEG2+0x290>)
 8010a2e:	fb84 2400 	smull	r2, r4, r4, r0
 8010a32:	17da      	asrs	r2, r3, #31
 8010a34:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 8010a38:	9204      	str	r2, [sp, #16]
			slen[1]= (sfCompress >> 2) % 5;
 8010a3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010a3e:	1a82      	subs	r2, r0, r2
 8010a40:	9205      	str	r2, [sp, #20]
			slen[2]= (sfCompress & 0x03);
 8010a42:	f003 0303 	and.w	r3, r3, #3
 8010a46:	9306      	str	r3, [sp, #24]
			slen[3]= 0;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	9307      	str	r3, [sp, #28]
	intensityScale = 0;
 8010a4c:	4699      	mov	r9, r3
	preFlag = 0;
 8010a4e:	469e      	mov	lr, r3
			sfcIdx = 1;
 8010a50:	2401      	movs	r4, #1
 8010a52:	e7df      	b.n	8010a14 <UnpackSFMPEG2+0x50>
			sfCompress -= 500;
 8010a54:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
			slen[0] = sfCompress / 3;
 8010a58:	4a7f      	ldr	r2, [pc, #508]	; (8010c58 <UnpackSFMPEG2+0x294>)
 8010a5a:	fb82 0203 	smull	r0, r2, r2, r3
 8010a5e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010a62:	9204      	str	r2, [sp, #16]
			slen[1] = sfCompress % 3;
 8010a64:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8010a68:	1a1b      	subs	r3, r3, r0
 8010a6a:	9305      	str	r3, [sp, #20]
			slen[2] = slen[3] = 0;
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	9007      	str	r0, [sp, #28]
 8010a70:	9006      	str	r0, [sp, #24]
			if (sis->mixedBlock) {
 8010a72:	f8d1 9018 	ldr.w	r9, [r1, #24]
 8010a76:	f1b9 0f00 	cmp.w	r9, #0
 8010a7a:	d049      	beq.n	8010b10 <UnpackSFMPEG2+0x14c>
				slen[2] = slen[1];  
 8010a7c:	9306      	str	r3, [sp, #24]
				slen[1] = slen[0];
 8010a7e:	9205      	str	r2, [sp, #20]
	intensityScale = 0;
 8010a80:	4681      	mov	r9, r0
			preFlag = 1;
 8010a82:	f04f 0e01 	mov.w	lr, #1
			sfcIdx = 2;
 8010a86:	2402      	movs	r4, #2
 8010a88:	e7c4      	b.n	8010a14 <UnpackSFMPEG2+0x50>
		intensityScale = sfCompress & 0x01;
 8010a8a:	f003 0901 	and.w	r9, r3, #1
		sfCompress >>= 1;
 8010a8e:	105a      	asrs	r2, r3, #1
		if (sfCompress < 180) {
 8010a90:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010a94:	da1a      	bge.n	8010acc <UnpackSFMPEG2+0x108>
			slen[0] = (sfCompress / 36);
 8010a96:	4871      	ldr	r0, [pc, #452]	; (8010c5c <UnpackSFMPEG2+0x298>)
 8010a98:	fb80 3002 	smull	r3, r0, r0, r2
 8010a9c:	17d3      	asrs	r3, r2, #31
 8010a9e:	ebc3 03e0 	rsb	r3, r3, r0, asr #3
 8010aa2:	9304      	str	r3, [sp, #16]
			slen[1] = (sfCompress % 36) / 6;
 8010aa4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8010aa8:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
 8010aac:	4b6c      	ldr	r3, [pc, #432]	; (8010c60 <UnpackSFMPEG2+0x29c>)
 8010aae:	fb83 0302 	smull	r0, r3, r3, r2
 8010ab2:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8010ab6:	9305      	str	r3, [sp, #20]
			slen[2] = (sfCompress % 36) % 6;
 8010ab8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010abc:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
 8010ac0:	9206      	str	r2, [sp, #24]
			slen[3] = 0;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	9307      	str	r3, [sp, #28]
	preFlag = 0;
 8010ac6:	469e      	mov	lr, r3
			sfcIdx = 3;
 8010ac8:	2403      	movs	r4, #3
 8010aca:	e7a3      	b.n	8010a14 <UnpackSFMPEG2+0x50>
		} else if (sfCompress < 244) {
 8010acc:	2af3      	cmp	r2, #243	; 0xf3
 8010ace:	dc0e      	bgt.n	8010aee <UnpackSFMPEG2+0x12a>
			sfCompress -= 180;
 8010ad0:	3ab4      	subs	r2, #180	; 0xb4
			slen[0] = (sfCompress & 0x3f) >> 4;
 8010ad2:	f3c2 1301 	ubfx	r3, r2, #4, #2
 8010ad6:	9304      	str	r3, [sp, #16]
			slen[1] = (sfCompress & 0x0f) >> 2;
 8010ad8:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8010adc:	9305      	str	r3, [sp, #20]
			slen[2] = (sfCompress & 0x03);
 8010ade:	f002 0203 	and.w	r2, r2, #3
 8010ae2:	9206      	str	r2, [sp, #24]
			slen[3] = 0;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	9307      	str	r3, [sp, #28]
	preFlag = 0;
 8010ae8:	469e      	mov	lr, r3
			sfcIdx = 4;
 8010aea:	2404      	movs	r4, #4
 8010aec:	e792      	b.n	8010a14 <UnpackSFMPEG2+0x50>
			sfCompress -= 244;
 8010aee:	3af4      	subs	r2, #244	; 0xf4
			slen[0] = (sfCompress / 3);
 8010af0:	4b59      	ldr	r3, [pc, #356]	; (8010c58 <UnpackSFMPEG2+0x294>)
 8010af2:	fb83 0302 	smull	r0, r3, r3, r2
 8010af6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8010afa:	9304      	str	r3, [sp, #16]
			slen[1] = (sfCompress % 3);
 8010afc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010b00:	1ad2      	subs	r2, r2, r3
 8010b02:	9205      	str	r2, [sp, #20]
			slen[2] = slen[3] = 0;
 8010b04:	2300      	movs	r3, #0
 8010b06:	9307      	str	r3, [sp, #28]
 8010b08:	9306      	str	r3, [sp, #24]
	preFlag = 0;
 8010b0a:	469e      	mov	lr, r3
			sfcIdx = 5;
 8010b0c:	2405      	movs	r4, #5
 8010b0e:	e781      	b.n	8010a14 <UnpackSFMPEG2+0x50>
			preFlag = 1;
 8010b10:	f04f 0e01 	mov.w	lr, #1
			sfcIdx = 2;
 8010b14:	2402      	movs	r4, #2
 8010b16:	e77d      	b.n	8010a14 <UnpackSFMPEG2+0x50>
		btIdx = (sis->mixedBlock ? 2 : 1);
 8010b18:	698b      	ldr	r3, [r1, #24]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f47f af7e 	bne.w	8010a1c <UnpackSFMPEG2+0x58>
 8010b20:	2501      	movs	r5, #1
 8010b22:	e77b      	b.n	8010a1c <UnpackSFMPEG2+0x58>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8010b24:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8010b28:	1950      	adds	r0, r2, r5
 8010b2a:	4a4e      	ldr	r2, [pc, #312]	; (8010c64 <UnpackSFMPEG2+0x2a0>)
 8010b2c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8010b30:	5cd0      	ldrb	r0, [r2, r3]
 8010b32:	aa08      	add	r2, sp, #32
 8010b34:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010b38:	f842 0c20 	str.w	r0, [r2, #-32]
	for (i = 0; i < 4; i++)
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	2b03      	cmp	r3, #3
 8010b40:	ddf0      	ble.n	8010b24 <UnpackSFMPEG2+0x160>

	/* save intensity stereo scale factor info */
	if( (modeExt & 0x01) && (ch == 1) ) {
 8010b42:	f1bc 0f00 	cmp.w	ip, #0
 8010b46:	d002      	beq.n	8010b4e <UnpackSFMPEG2+0x18a>
 8010b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	d01c      	beq.n	8010b88 <UnpackSFMPEG2+0x1c4>
			sfjs->slen[i] = slen[i];
			sfjs->nr[i] = nr[i];
		}
		sfjs->intensityScale = intensityScale;
	}
	sis->preFlag = preFlag;
 8010b4e:	f8c1 e03c 	str.w	lr, [r1, #60]	; 0x3c

	/* short blocks */
	if(sis->blockType == 2) {
 8010b52:	694b      	ldr	r3, [r1, #20]
 8010b54:	2b02      	cmp	r3, #2
 8010b56:	d019      	beq.n	8010b8c <UnpackSFMPEG2+0x1c8>
		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
	} else {
		/* long blocks */
		sfb = 0;
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 8010b58:	f04f 0800 	mov.w	r8, #0
		sfb = 0;
 8010b5c:	4645      	mov	r5, r8
 8010b5e:	e069      	b.n	8010c34 <UnpackSFMPEG2+0x270>
			sfjs->slen[i] = slen[i];
 8010b60:	aa08      	add	r2, sp, #32
 8010b62:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8010b66:	f850 2c10 	ldr.w	r2, [r0, #-16]
 8010b6a:	eb08 0483 	add.w	r4, r8, r3, lsl #2
 8010b6e:	6062      	str	r2, [r4, #4]
			sfjs->nr[i] = nr[i];
 8010b70:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8010b74:	1d1a      	adds	r2, r3, #4
 8010b76:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8010b7a:	6050      	str	r0, [r2, #4]
		for (i = 0; i < 4; i++) {
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	2b03      	cmp	r3, #3
 8010b80:	ddee      	ble.n	8010b60 <UnpackSFMPEG2+0x19c>
		sfjs->intensityScale = intensityScale;
 8010b82:	f8c8 9000 	str.w	r9, [r8]
 8010b86:	e7e2      	b.n	8010b4e <UnpackSFMPEG2+0x18a>
		for (i = 0; i < 4; i++) {
 8010b88:	2300      	movs	r3, #0
 8010b8a:	e7f8      	b.n	8010b7e <UnpackSFMPEG2+0x1ba>
		if(sis->mixedBlock) {
 8010b8c:	698d      	ldr	r5, [r1, #24]
 8010b8e:	b3bd      	cbz	r5, 8010c00 <UnpackSFMPEG2+0x23c>
			iipTest = (1 << slen[0]) - 1;
 8010b90:	9d04      	ldr	r5, [sp, #16]
			for (sfb=0; sfb < 6; sfb++) {
 8010b92:	2400      	movs	r4, #0
 8010b94:	e005      	b.n	8010ba2 <UnpackSFMPEG2+0x1de>
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 8010b96:	4629      	mov	r1, r5
 8010b98:	4630      	mov	r0, r6
 8010b9a:	f7fb fdb7 	bl	800c70c <xmp3fixpt_GetBits>
 8010b9e:	5538      	strb	r0, [r7, r4]
			for (sfb=0; sfb < 6; sfb++) {
 8010ba0:	3401      	adds	r4, #1
 8010ba2:	2c05      	cmp	r4, #5
 8010ba4:	ddf7      	ble.n	8010b96 <UnpackSFMPEG2+0x1d2>
			nrIdx = 1;
 8010ba6:	f04f 0a01 	mov.w	sl, #1
			sfb = 3;  /* start sfb for short */
 8010baa:	2503      	movs	r5, #3
 8010bac:	e01d      	b.n	8010bea <UnpackSFMPEG2+0x226>
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 8010bae:	4649      	mov	r1, r9
 8010bb0:	4630      	mov	r0, r6
 8010bb2:	f7fb fdab 	bl	800c70c <xmp3fixpt_GetBits>
 8010bb6:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8010bba:	443c      	add	r4, r7
 8010bbc:	75e0      	strb	r0, [r4, #23]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 8010bbe:	4649      	mov	r1, r9
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	f7fb fda3 	bl	800c70c <xmp3fixpt_GetBits>
 8010bc6:	7620      	strb	r0, [r4, #24]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8010bc8:	4649      	mov	r1, r9
 8010bca:	4630      	mov	r0, r6
 8010bcc:	f7fb fd9e 	bl	800c70c <xmp3fixpt_GetBits>
 8010bd0:	7660      	strb	r0, [r4, #25]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010bd2:	f108 0801 	add.w	r8, r8, #1
 8010bd6:	3501      	adds	r5, #1
 8010bd8:	ab08      	add	r3, sp, #32
 8010bda:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8010bde:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8010be2:	4543      	cmp	r3, r8
 8010be4:	dce3      	bgt.n	8010bae <UnpackSFMPEG2+0x1ea>
		for (    ; nrIdx <= 3; nrIdx++) {
 8010be6:	f10a 0a01 	add.w	sl, sl, #1
 8010bea:	f1ba 0f03 	cmp.w	sl, #3
 8010bee:	dc09      	bgt.n	8010c04 <UnpackSFMPEG2+0x240>
			iipTest = (1 << slen[nrIdx]) - 1;
 8010bf0:	ab08      	add	r3, sp, #32
 8010bf2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8010bf6:	f853 9c10 	ldr.w	r9, [r3, #-16]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010bfa:	f04f 0800 	mov.w	r8, #0
 8010bfe:	e7eb      	b.n	8010bd8 <UnpackSFMPEG2+0x214>
			nrIdx = 0;
 8010c00:	46aa      	mov	sl, r5
 8010c02:	e7f2      	b.n	8010bea <UnpackSFMPEG2+0x226>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 8010c04:	2300      	movs	r3, #0
 8010c06:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8010c0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8010c0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8010c12:	e01c      	b.n	8010c4e <UnpackSFMPEG2+0x28a>
			iipTest = (1 << slen[nrIdx]) - 1;
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 8010c14:	4649      	mov	r1, r9
 8010c16:	4630      	mov	r0, r6
 8010c18:	f7fb fd78 	bl	800c70c <xmp3fixpt_GetBits>
 8010c1c:	5578      	strb	r0, [r7, r5]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8010c1e:	3401      	adds	r4, #1
 8010c20:	3501      	adds	r5, #1
 8010c22:	ab08      	add	r3, sp, #32
 8010c24:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8010c28:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8010c2c:	42a3      	cmp	r3, r4
 8010c2e:	dcf1      	bgt.n	8010c14 <UnpackSFMPEG2+0x250>
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 8010c30:	f108 0801 	add.w	r8, r8, #1
 8010c34:	f1b8 0f03 	cmp.w	r8, #3
 8010c38:	dc06      	bgt.n	8010c48 <UnpackSFMPEG2+0x284>
			iipTest = (1 << slen[nrIdx]) - 1;
 8010c3a:	ab08      	add	r3, sp, #32
 8010c3c:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8010c40:	f853 9c10 	ldr.w	r9, [r3, #-16]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8010c44:	2400      	movs	r4, #0
 8010c46:	e7ec      	b.n	8010c22 <UnpackSFMPEG2+0x25e>
			}
		}
		/* last sf band not transmitted */
		sfis->l[21] = sfis->l[22] = 0;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	75bb      	strb	r3, [r7, #22]
 8010c4c:	757b      	strb	r3, [r7, #21]

	}
}
 8010c4e:	b008      	add	sp, #32
 8010c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c54:	66666667 	.word	0x66666667
 8010c58:	55555556 	.word	0x55555556
 8010c5c:	38e38e39 	.word	0x38e38e39
 8010c60:	2aaaaaab 	.word	0x2aaaaaab
 8010c64:	0801dafc 	.word	0x0801dafc

08010c68 <xmp3fixpt_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 8010c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	b089      	sub	sp, #36	; 0x24
 8010c6e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8010c70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d07c      	beq.n	8010d70 <xmp3fixpt_UnpackScaleFactors+0x108>
 8010c76:	4688      	mov	r8, r1
 8010c78:	4616      	mov	r6, r2
 8010c7a:	4681      	mov	r9, r0
 8010c7c:	f8d0 b000 	ldr.w	fp, [r0]
 8010c80:	f1bb 0f00 	cmp.w	fp, #0
 8010c84:	d077      	beq.n	8010d76 <xmp3fixpt_UnpackScaleFactors+0x10e>
 8010c86:	6847      	ldr	r7, [r0, #4]
 8010c88:	2f00      	cmp	r7, #0
 8010c8a:	d077      	beq.n	8010d7c <xmp3fixpt_UnpackScaleFactors+0x114>
 8010c8c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8010c90:	f1ba 0f00 	cmp.w	sl, #0
 8010c94:	d075      	beq.n	8010d82 <xmp3fixpt_UnpackScaleFactors+0x11a>
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));

	/* init GetBits reader */
	startBuf = buf;
	bsi = &bitStreamInfo;
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 8010c96:	6811      	ldr	r1, [r2, #0]
 8010c98:	4419      	add	r1, r3
 8010c9a:	3107      	adds	r1, #7
 8010c9c:	d445      	bmi.n	8010d2a <xmp3fixpt_UnpackScaleFactors+0xc2>
 8010c9e:	4642      	mov	r2, r8
 8010ca0:	10c9      	asrs	r1, r1, #3
 8010ca2:	a804      	add	r0, sp, #16
 8010ca4:	f7fb fd2c 	bl	800c700 <xmp3fixpt_SetBitstreamPointer>
	if (*bitOffset)
 8010ca8:	6831      	ldr	r1, [r6, #0]
 8010caa:	2900      	cmp	r1, #0
 8010cac:	d13f      	bne.n	8010d2e <xmp3fixpt_UnpackScaleFactors+0xc6>
		GetBits(bsi, *bitOffset);

	if (fh->ver == MPEG1) 
 8010cae:	f89b 3000 	ldrb.w	r3, [fp]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d13f      	bne.n	8010d36 <xmp3fixpt_UnpackScaleFactors+0xce>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 8010cb6:	0123      	lsls	r3, r4, #4
 8010cb8:	3308      	adds	r3, #8
 8010cba:	ebc4 1144 	rsb	r1, r4, r4, lsl #5
 8010cbe:	ebc5 1245 	rsb	r2, r5, r5, lsl #5
 8010cc2:	0092      	lsls	r2, r2, #2
 8010cc4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8010cc8:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8010ccc:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8010cd0:	0109      	lsls	r1, r1, #4
 8010cd2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010cd6:	3128      	adds	r1, #40	; 0x28
 8010cd8:	ebc4 1044 	rsb	r0, r4, r4, lsl #5
 8010cdc:	eb0a 0040 	add.w	r0, sl, r0, lsl #1
 8010ce0:	9001      	str	r0, [sp, #4]
 8010ce2:	9500      	str	r5, [sp, #0]
 8010ce4:	443b      	add	r3, r7
 8010ce6:	4452      	add	r2, sl
 8010ce8:	4439      	add	r1, r7
 8010cea:	a804      	add	r0, sp, #16
 8010cec:	f7ff fdb0 	bl	8010850 <UnpackSFMPEG1>
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 8010cf0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8010cf4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8010cf8:	011b      	lsls	r3, r3, #4
 8010cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cfe:	441f      	add	r7, r3
 8010d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d02:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8010d06:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8010d0a:	f849 3024 	str.w	r3, [r9, r4, lsl #2]

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 8010d0e:	6832      	ldr	r2, [r6, #0]
 8010d10:	4641      	mov	r1, r8
 8010d12:	a804      	add	r0, sp, #16
 8010d14:	f7fb fd55 	bl	800c7c2 <xmp3fixpt_CalcBitsUsed>
	buf += (bitsUsed + *bitOffset) >> 3;
 8010d18:	6833      	ldr	r3, [r6, #0]
 8010d1a:	4403      	add	r3, r0
 8010d1c:	10d8      	asrs	r0, r3, #3
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 8010d1e:	f003 0307 	and.w	r3, r3, #7
 8010d22:	6033      	str	r3, [r6, #0]

	return (buf - startBuf);
}
 8010d24:	b009      	add	sp, #36	; 0x24
 8010d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 8010d2a:	3107      	adds	r1, #7
 8010d2c:	e7b7      	b.n	8010c9e <xmp3fixpt_UnpackScaleFactors+0x36>
		GetBits(bsi, *bitOffset);
 8010d2e:	a804      	add	r0, sp, #16
 8010d30:	f7fb fcec 	bl	800c70c <xmp3fixpt_GetBits>
 8010d34:	e7bb      	b.n	8010cae <xmp3fixpt_UnpackScaleFactors+0x46>
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);
 8010d36:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 8010d3a:	ebc5 1245 	rsb	r2, r5, r5, lsl #5
 8010d3e:	0092      	lsls	r2, r2, #2
 8010d40:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8010d44:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8010d48:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8010d4c:	0109      	lsls	r1, r1, #4
 8010d4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010d52:	3128      	adds	r1, #40	; 0x28
 8010d54:	f10a 03f8 	add.w	r3, sl, #248	; 0xf8
 8010d58:	9302      	str	r3, [sp, #8]
 8010d5a:	f8db 3020 	ldr.w	r3, [fp, #32]
 8010d5e:	9301      	str	r3, [sp, #4]
 8010d60:	9400      	str	r4, [sp, #0]
 8010d62:	462b      	mov	r3, r5
 8010d64:	4452      	add	r2, sl
 8010d66:	4439      	add	r1, r7
 8010d68:	a804      	add	r0, sp, #16
 8010d6a:	f7ff fe2b 	bl	80109c4 <UnpackSFMPEG2>
 8010d6e:	e7bf      	b.n	8010cf0 <xmp3fixpt_UnpackScaleFactors+0x88>
		return -1;
 8010d70:	f04f 30ff 	mov.w	r0, #4294967295
 8010d74:	e7d6      	b.n	8010d24 <xmp3fixpt_UnpackScaleFactors+0xbc>
 8010d76:	f04f 30ff 	mov.w	r0, #4294967295
 8010d7a:	e7d3      	b.n	8010d24 <xmp3fixpt_UnpackScaleFactors+0xbc>
 8010d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d80:	e7d0      	b.n	8010d24 <xmp3fixpt_UnpackScaleFactors+0xbc>
 8010d82:	f04f 30ff 	mov.w	r0, #4294967295
 8010d86:	e7cd      	b.n	8010d24 <xmp3fixpt_UnpackScaleFactors+0xbc>

08010d88 <xmp3fixpt_MidSideProc>:
 * Return:      none
 *
 * Notes:       assume at least 1 GB in input
 **************************************************************************************/
void MidSideProc(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, int mOut[2])  
{
 8010d88:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, xr, xl, mOutL, mOutR;
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
 8010d8a:	2600      	movs	r6, #0
 8010d8c:	4637      	mov	r7, r6
	for(i = 0; i < nSamps; i++) {
 8010d8e:	4633      	mov	r3, r6
 8010d90:	e01e      	b.n	8010dd0 <xmp3fixpt_MidSideProc+0x48>
		xl = x[0][i];
 8010d92:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		xr = x[1][i];
 8010d96:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8010d9a:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
		x[0][i] = xl + xr;
 8010d9e:	eb04 0e05 	add.w	lr, r4, r5
 8010da2:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
		x[1][i] = xl - xr;
 8010da6:	1b64      	subs	r4, r4, r5
 8010da8:	f8cc 4900 	str.w	r4, [ip, #2304]	; 0x900
		mOutL |= FASTABS(x[0][i]);
 8010dac:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
	__asm__ volatile (
 8010db0:	f04f 0c00 	mov.w	ip, #0
 8010db4:	46e6      	mov	lr, ip
 8010db6:	ea85 7ee5 	eor.w	lr, r5, r5, asr #31
 8010dba:	ebae 7ee5 	sub.w	lr, lr, r5, asr #31
 8010dbe:	ea47 070e 	orr.w	r7, r7, lr
 8010dc2:	ea84 7ce4 	eor.w	ip, r4, r4, asr #31
 8010dc6:	ebac 7ce4 	sub.w	ip, ip, r4, asr #31
		mOutR |= FASTABS(x[1][i]);
 8010dca:	ea46 060c 	orr.w	r6, r6, ip
	for(i = 0; i < nSamps; i++) {
 8010dce:	3301      	adds	r3, #1
 8010dd0:	428b      	cmp	r3, r1
 8010dd2:	dbde      	blt.n	8010d92 <xmp3fixpt_MidSideProc+0xa>
	}
	mOut[0] |= mOutL;
 8010dd4:	6813      	ldr	r3, [r2, #0]
 8010dd6:	433b      	orrs	r3, r7
 8010dd8:	6013      	str	r3, [r2, #0]
	mOut[1] |= mOutR;
 8010dda:	6853      	ldr	r3, [r2, #4]
 8010ddc:	4333      	orrs	r3, r6
 8010dde:	6053      	str	r3, [r2, #4]
}
 8010de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08010de4 <xmp3fixpt_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 8010de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	b08d      	sub	sp, #52	; 0x34
 8010dea:	9201      	str	r2, [sp, #4]
 8010dec:	9302      	str	r3, [sp, #8]
 8010dee:	9b16      	ldr	r3, [sp, #88]	; 0x58
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 8010df0:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8010df4:	f1b9 0f00 	cmp.w	r9, #0
 8010df8:	d116      	bne.n	8010e28 <xmp3fixpt_IntensityProcMPEG1+0x44>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
 8010dfa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010dfc:	3401      	adds	r4, #1
		cbEndL =   cbi[0].cbEndL + 1;
 8010dfe:	695b      	ldr	r3, [r3, #20]
 8010e00:	3301      	adds	r3, #1
 8010e02:	9303      	str	r3, [sp, #12]
		cbStartS = cbEndS = 0;
		i = fh->sfBand->l[cbStartL];
 8010e04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8010e06:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
		cbStartS = cbEndS = 0;
 8010e0a:	f8cd 9010 	str.w	r9, [sp, #16]
		cbEndS =   cbi[0].cbEndSMax + 1;
		cbStartL = cbEndL = 0;
		i = 3 * fh->sfBand->s[cbStartS];
	}

	sampsLeft = nSamps - i;		/* process to length of left */
 8010e0e:	1acd      	subs	r5, r1, r3
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8010e10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e12:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010e16:	49a2      	ldr	r1, [pc, #648]	; (80110a0 <xmp3fixpt_IntensityProcMPEG1+0x2bc>)
 8010e18:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
	mOutL = mOutR = 0;
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	f8cd 9014 	str.w	r9, [sp, #20]
 8010e22:	4694      	mov	ip, r2
 8010e24:	4696      	mov	lr, r2

	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8010e26:	e051      	b.n	8010ecc <xmp3fixpt_IntensityProcMPEG1+0xe8>
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 8010e28:	f109 39ff 	add.w	r9, r9, #4294967295
 8010e2c:	f1b9 0f01 	cmp.w	r9, #1
 8010e30:	d905      	bls.n	8010e3e <xmp3fixpt_IntensityProcMPEG1+0x5a>
	int cbStartL=0, cbStartS=0, cbEndL=0, cbEndS=0;
 8010e32:	2300      	movs	r3, #0
 8010e34:	9304      	str	r3, [sp, #16]
 8010e36:	9303      	str	r3, [sp, #12]
 8010e38:	4699      	mov	r9, r3
 8010e3a:	461c      	mov	r4, r3
 8010e3c:	e7e7      	b.n	8010e0e <xmp3fixpt_IntensityProcMPEG1+0x2a>
		cbStartS = cbi[1].cbEndSMax + 1;
 8010e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e40:	f102 0901 	add.w	r9, r2, #1
		cbEndS =   cbi[0].cbEndSMax + 1;
 8010e44:	691b      	ldr	r3, [r3, #16]
 8010e46:	3301      	adds	r3, #1
 8010e48:	9304      	str	r3, [sp, #16]
		i = 3 * fh->sfBand->s[cbStartS];
 8010e4a:	9b01      	ldr	r3, [sp, #4]
 8010e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4e:	3215      	adds	r2, #21
 8010e50:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010e54:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010e58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		cbStartL = cbEndL = 0;
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	9203      	str	r2, [sp, #12]
 8010e60:	4614      	mov	r4, r2
 8010e62:	e7d4      	b.n	8010e0e <xmp3fixpt_IntensityProcMPEG1+0x2a>
		isf = sfis->l[cb];
		if (isf == 7) {
			fl = ISFIIP[midSideFlag][0];
 8010e64:	4a8f      	ldr	r2, [pc, #572]	; (80110a4 <xmp3fixpt_IntensityProcMPEG1+0x2c0>)
 8010e66:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010e68:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
			fr = ISFIIP[midSideFlag][1];
 8010e6c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010e6e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8010e72:	6852      	ldr	r2, [r2, #4]
 8010e74:	e03c      	b.n	8010ef0 <xmp3fixpt_IntensityProcMPEG1+0x10c>
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010e76:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8010e7a:	fb82 6404 	smull	r6, r4, r2, r4
			fr = isfTab[6] - isfTab[isf];
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 8010e7e:	00a4      	lsls	r4, r4, #2
 8010e80:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8010e84:	f8c6 4900 	str.w	r4, [r6, #2304]	; 0x900
	__asm__ volatile (
 8010e88:	2600      	movs	r6, #0
 8010e8a:	46b2      	mov	sl, r6
 8010e8c:	ea84 7ae4 	eor.w	sl, r4, r4, asr #31
 8010e90:	ebaa 7ae4 	sub.w	sl, sl, r4, asr #31
 8010e94:	ea4e 0e0a 	orr.w	lr, lr, sl
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010e98:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8010e9c:	fb81 a404 	smull	sl, r4, r1, r4
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 8010ea0:	00a4      	lsls	r4, r4, #2
 8010ea2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	__asm__ volatile (
 8010ea6:	ea84 76e4 	eor.w	r6, r4, r4, asr #31
 8010eaa:	eba6 76e4 	sub.w	r6, r6, r4, asr #31
 8010eae:	ea4c 0c06 	orr.w	ip, ip, r6
			sampsLeft--;
 8010eb2:	3d01      	subs	r5, #1
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8010eb4:	3701      	adds	r7, #1
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	4547      	cmp	r7, r8
 8010eba:	bfac      	ite	ge
 8010ebc:	2400      	movge	r4, #0
 8010ebe:	2401      	movlt	r4, #1
 8010ec0:	2d00      	cmp	r5, #0
 8010ec2:	bfd8      	it	le
 8010ec4:	2400      	movle	r4, #0
 8010ec6:	2c00      	cmp	r4, #0
 8010ec8:	d1d5      	bne.n	8010e76 <xmp3fixpt_IntensityProcMPEG1+0x92>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8010eca:	464c      	mov	r4, r9
 8010ecc:	9a03      	ldr	r2, [sp, #12]
 8010ece:	4294      	cmp	r4, r2
 8010ed0:	bfac      	ite	ge
 8010ed2:	2200      	movge	r2, #0
 8010ed4:	2201      	movlt	r2, #1
 8010ed6:	2d00      	cmp	r5, #0
 8010ed8:	bfd8      	it	le
 8010eda:	2200      	movle	r2, #0
 8010edc:	b1a2      	cbz	r2, 8010f08 <xmp3fixpt_IntensityProcMPEG1+0x124>
		isf = sfis->l[cb];
 8010ede:	9a02      	ldr	r2, [sp, #8]
 8010ee0:	5d12      	ldrb	r2, [r2, r4]
		if (isf == 7) {
 8010ee2:	2a07      	cmp	r2, #7
 8010ee4:	d0be      	beq.n	8010e64 <xmp3fixpt_IntensityProcMPEG1+0x80>
			fl = isfTab[isf];	
 8010ee6:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
			fr = isfTab[6] - isfTab[isf];
 8010eea:	f8db 2018 	ldr.w	r2, [fp, #24]
 8010eee:	1a52      	subs	r2, r2, r1
		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8010ef0:	9e01      	ldr	r6, [sp, #4]
 8010ef2:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8010ef4:	f104 0901 	add.w	r9, r4, #1
 8010ef8:	f936 8019 	ldrsh.w	r8, [r6, r9, lsl #1]
 8010efc:	f936 4014 	ldrsh.w	r4, [r6, r4, lsl #1]
 8010f00:	eba8 0804 	sub.w	r8, r8, r4
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8010f04:	2700      	movs	r7, #0
 8010f06:	e7d7      	b.n	8010eb8 <xmp3fixpt_IntensityProcMPEG1+0xd4>
 8010f08:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010f0c:	4661      	mov	r1, ip
 8010f0e:	4672      	mov	r2, lr
 8010f10:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8010f14:	e0b0      	b.n	8011078 <xmp3fixpt_IntensityProcMPEG1+0x294>
	/* short blocks */
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
		for (w = 0; w < 3; w++) {
			isf = sfis->s[cb][w];
			if (isf == 7) {
				fls[w] = ISFIIP[midSideFlag][0];
 8010f16:	4c63      	ldr	r4, [pc, #396]	; (80110a4 <xmp3fixpt_IntensityProcMPEG1+0x2c0>)
 8010f18:	ab0c      	add	r3, sp, #48	; 0x30
 8010f1a:	eb03 0886 	add.w	r8, r3, r6, lsl #2
 8010f1e:	f854 303e 	ldr.w	r3, [r4, lr, lsl #3]
 8010f22:	f848 3c0c 	str.w	r3, [r8, #-12]
				frs[w] = ISFIIP[midSideFlag][1];
 8010f26:	eb04 0cce 	add.w	ip, r4, lr, lsl #3
 8010f2a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8010f2e:	f848 4c18 	str.w	r4, [r8, #-24]
		for (w = 0; w < 3; w++) {
 8010f32:	3601      	adds	r6, #1
 8010f34:	2e02      	cmp	r6, #2
 8010f36:	dc13      	bgt.n	8010f60 <xmp3fixpt_IntensityProcMPEG1+0x17c>
			isf = sfis->s[cb][w];
 8010f38:	eb09 0449 	add.w	r4, r9, r9, lsl #1
 8010f3c:	443c      	add	r4, r7
 8010f3e:	4434      	add	r4, r6
 8010f40:	7de4      	ldrb	r4, [r4, #23]
			if (isf == 7) {
 8010f42:	2c07      	cmp	r4, #7
 8010f44:	d0e7      	beq.n	8010f16 <xmp3fixpt_IntensityProcMPEG1+0x132>
			} else {
				fls[w] = isfTab[isf];
 8010f46:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 8010f4a:	ab0c      	add	r3, sp, #48	; 0x30
 8010f4c:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 8010f50:	f84c 4c0c 	str.w	r4, [ip, #-12]
				frs[w] = isfTab[6] - isfTab[isf];
 8010f54:	f8db 3018 	ldr.w	r3, [fp, #24]
 8010f58:	1b1c      	subs	r4, r3, r4
 8010f5a:	f84c 4c18 	str.w	r4, [ip, #-24]
 8010f5e:	e7e8      	b.n	8010f32 <xmp3fixpt_IntensityProcMPEG1+0x14e>
			}
		}

		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8010f60:	4653      	mov	r3, sl
 8010f62:	9c01      	ldr	r4, [sp, #4]
 8010f64:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8010f66:	f109 0601 	add.w	r6, r9, #1
 8010f6a:	9603      	str	r6, [sp, #12]
 8010f6c:	f109 0615 	add.w	r6, r9, #21
 8010f70:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8010f74:	f9b6 c006 	ldrsh.w	ip, [r6, #6]
 8010f78:	f109 0914 	add.w	r9, r9, #20
 8010f7c:	eb04 0449 	add.w	r4, r4, r9, lsl #1
 8010f80:	f9b4 4006 	ldrsh.w	r4, [r4, #6]
 8010f84:	ebac 0c04 	sub.w	ip, ip, r4
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8010f88:	2600      	movs	r6, #0
 8010f8a:	e06a      	b.n	8011062 <xmp3fixpt_IntensityProcMPEG1+0x27e>
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010f8c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8010f90:	9f06      	ldr	r7, [sp, #24]
 8010f92:	fb87 8404 	smull	r8, r4, r7, r4
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 8010f96:	00a7      	lsls	r7, r4, #2
 8010f98:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 8010f9c:	f8c4 7900 	str.w	r7, [r4, #2304]	; 0x900
	__asm__ volatile (
 8010fa0:	2400      	movs	r4, #0
 8010fa2:	46a0      	mov	r8, r4
 8010fa4:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8010fa8:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8010fac:	ea42 0208 	orr.w	r2, r2, r8
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010fb0:	f850 8023 	ldr.w	r8, [r0, r3, lsl #2]
 8010fb4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010fb6:	fb87 9808 	smull	r9, r8, r7, r8
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 8010fba:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8010fbe:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
	__asm__ volatile (
 8010fc2:	46a0      	mov	r8, r4
 8010fc4:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8010fc8:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8010fcc:	ea41 0108 	orr.w	r1, r1, r8
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 8010fd0:	f103 0901 	add.w	r9, r3, #1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010fd4:	f850 8029 	ldr.w	r8, [r0, r9, lsl #2]
 8010fd8:	9f07      	ldr	r7, [sp, #28]
 8010fda:	fb87 a808 	smull	sl, r8, r7, r8
 8010fde:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8010fe2:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 8010fe6:	f8c8 7900 	str.w	r7, [r8, #2304]	; 0x900
	__asm__ volatile (
 8010fea:	46a0      	mov	r8, r4
 8010fec:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8010ff0:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8010ff4:	ea42 0208 	orr.w	r2, r2, r8
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010ff8:	f850 8029 	ldr.w	r8, [r0, r9, lsl #2]
 8010ffc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010ffe:	fb87 a808 	smull	sl, r8, r7, r8
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 8011002:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8011006:	f840 7029 	str.w	r7, [r0, r9, lsl #2]
	__asm__ volatile (
 801100a:	46a0      	mov	r8, r4
 801100c:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8011010:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8011014:	ea41 0108 	orr.w	r1, r1, r8
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 8011018:	f103 0902 	add.w	r9, r3, #2
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801101c:	f850 8029 	ldr.w	r8, [r0, r9, lsl #2]
 8011020:	9f08      	ldr	r7, [sp, #32]
 8011022:	fb87 a808 	smull	sl, r8, r7, r8
 8011026:	ea4f 0788 	mov.w	r7, r8, lsl #2
 801102a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 801102e:	f8c8 7900 	str.w	r7, [r8, #2304]	; 0x900
	__asm__ volatile (
 8011032:	46a0      	mov	r8, r4
 8011034:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8011038:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 801103c:	ea42 0208 	orr.w	r2, r2, r8
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011040:	f850 8029 	ldr.w	r8, [r0, r9, lsl #2]
 8011044:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8011046:	fb87 a808 	smull	sl, r8, r7, r8
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 801104a:	ea4f 0788 	mov.w	r7, r8, lsl #2
 801104e:	f840 7029 	str.w	r7, [r0, r9, lsl #2]
	__asm__ volatile (
 8011052:	ea87 74e7 	eor.w	r4, r7, r7, asr #31
 8011056:	eba4 74e7 	sub.w	r4, r4, r7, asr #31
 801105a:	4321      	orrs	r1, r4
			sampsLeft -= 3;
 801105c:	3d03      	subs	r5, #3
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 801105e:	3601      	adds	r6, #1
 8011060:	3303      	adds	r3, #3
 8011062:	4566      	cmp	r6, ip
 8011064:	bfac      	ite	ge
 8011066:	2400      	movge	r4, #0
 8011068:	2401      	movlt	r4, #1
 801106a:	2d02      	cmp	r5, #2
 801106c:	bfd8      	it	le
 801106e:	2400      	movle	r4, #0
 8011070:	2c00      	cmp	r4, #0
 8011072:	d18b      	bne.n	8010f8c <xmp3fixpt_IntensityProcMPEG1+0x1a8>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8011074:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011078:	9c04      	ldr	r4, [sp, #16]
 801107a:	45a1      	cmp	r9, r4
 801107c:	bfac      	ite	ge
 801107e:	2400      	movge	r4, #0
 8011080:	2401      	movlt	r4, #1
 8011082:	2d02      	cmp	r5, #2
 8011084:	bfd8      	it	le
 8011086:	2400      	movle	r4, #0
 8011088:	b11c      	cbz	r4, 8011092 <xmp3fixpt_IntensityProcMPEG1+0x2ae>
		for (w = 0; w < 3; w++) {
 801108a:	2600      	movs	r6, #0
 801108c:	469a      	mov	sl, r3
 801108e:	9f02      	ldr	r7, [sp, #8]
 8011090:	e750      	b.n	8010f34 <xmp3fixpt_IntensityProcMPEG1+0x150>
		}
	}
	mOut[0] = mOutL;
 8011092:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011094:	6019      	str	r1, [r3, #0]
	mOut[1] = mOutR;
 8011096:	605a      	str	r2, [r3, #4]
	
	return;
}
 8011098:	b00d      	add	sp, #52	; 0x34
 801109a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801109e:	bf00      	nop
 80110a0:	0801db74 	.word	0x0801db74
 80110a4:	0801db64 	.word	0x0801db64

080110a8 <xmp3fixpt_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 80110a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ac:	b09d      	sub	sp, #116	; 0x74
 80110ae:	4690      	mov	r8, r2
 80110b0:	9301      	str	r3, [sp, #4]
 80110b2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 80110b4:	6833      	ldr	r3, [r6, #0]
 80110b6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80110b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80110bc:	4a89      	ldr	r2, [pc, #548]	; (80112e4 <xmp3fixpt_IntensityProcMPEG2+0x23c>)
 80110be:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 80110c2:	9300      	str	r3, [sp, #0]
	mOutL = mOutR = 0;

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
 80110c4:	2500      	movs	r5, #0
 80110c6:	462c      	mov	r4, r5
 80110c8:	e00d      	b.n	80110e6 <xmp3fixpt_IntensityProcMPEG2+0x3e>
		tmp = (1 << sfjs->slen[r]) - 1;
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
			il[k] = tmp;
 80110ca:	ab1c      	add	r3, sp, #112	; 0x70
 80110cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80110d0:	f843 7c5c 	str.w	r7, [r3, #-92]
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80110d4:	3201      	adds	r2, #1
 80110d6:	3401      	adds	r4, #1
 80110d8:	1d2b      	adds	r3, r5, #4
 80110da:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	4293      	cmp	r3, r2
 80110e2:	dcf2      	bgt.n	80110ca <xmp3fixpt_IntensityProcMPEG2+0x22>
	for (k = r = 0; r < 4; r++) {
 80110e4:	3501      	adds	r5, #1
 80110e6:	2d03      	cmp	r5, #3
 80110e8:	dc07      	bgt.n	80110fa <xmp3fixpt_IntensityProcMPEG2+0x52>
		tmp = (1 << sfjs->slen[r]) - 1;
 80110ea:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	2701      	movs	r7, #1
 80110f2:	409f      	lsls	r7, r3
 80110f4:	3f01      	subs	r7, #1
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80110f6:	2200      	movs	r2, #0
 80110f8:	e7ee      	b.n	80110d8 <xmp3fixpt_IntensityProcMPEG2+0x30>
	}

	if (cbi[1].cbType == 0) {
 80110fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80110fc:	699c      	ldr	r4, [r3, #24]
 80110fe:	9402      	str	r4, [sp, #8]
 8011100:	2c00      	cmp	r4, #0
 8011102:	d16a      	bne.n	80111da <xmp3fixpt_IntensityProcMPEG2+0x132>
		/* long blocks */
		il[21] = il[22] = 1;
 8011104:	2301      	movs	r3, #1
 8011106:	931b      	str	r3, [sp, #108]	; 0x6c
 8011108:	931a      	str	r3, [sp, #104]	; 0x68
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 801110a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110e:	3301      	adds	r3, #1
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 8011110:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011112:	6952      	ldr	r2, [r2, #20]
 8011114:	9203      	str	r2, [sp, #12]
		i = fh->sfBand->l[cbStartL];
 8011116:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801111a:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
		sampsLeft = nSamps - i;
 801111e:	eba1 0b05 	sub.w	fp, r1, r5
	mOutL = mOutR = 0;
 8011122:	46a6      	mov	lr, r4

		for(cb = cbStartL; cb < cbEndL; cb++) {
 8011124:	e045      	b.n	80111b2 <xmp3fixpt_IntensityProcMPEG2+0x10a>
			sfIdx = sfis->l[cb];
			if (sfIdx == il[cb]) {
				fl = ISFIIP[midSideFlag][0];
 8011126:	4a70      	ldr	r2, [pc, #448]	; (80112e8 <xmp3fixpt_IntensityProcMPEG2+0x240>)
 8011128:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801112a:	f852 6031 	ldr.w	r6, [r2, r1, lsl #3]
				fr = ISFIIP[midSideFlag][1];
 801112e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011132:	6857      	ldr	r7, [r2, #4]
 8011134:	e008      	b.n	8011148 <xmp3fixpt_IntensityProcMPEG2+0xa0>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8011136:	2600      	movs	r6, #0
 8011138:	9f00      	ldr	r7, [sp, #0]
 801113a:	59be      	ldr	r6, [r7, r6]
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 801113c:	b90a      	cbnz	r2, 8011142 <xmp3fixpt_IntensityProcMPEG2+0x9a>
 801113e:	008a      	lsls	r2, r1, #2
 8011140:	e000      	b.n	8011144 <xmp3fixpt_IntensityProcMPEG2+0x9c>
 8011142:	2200      	movs	r2, #0
 8011144:	9900      	ldr	r1, [sp, #0]
 8011146:	588f      	ldr	r7, [r1, r2]
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 8011148:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801114c:	f103 0901 	add.w	r9, r3, #1
 8011150:	f932 c019 	ldrsh.w	ip, [r2, r9, lsl #1]
 8011154:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011158:	ebac 0c03 	sub.w	ip, ip, r3
 801115c:	45dc      	cmp	ip, fp
 801115e:	bfa8      	it	ge
 8011160:	46dc      	movge	ip, fp

			for(j = 0; j < n; j++, i++) {
 8011162:	9902      	ldr	r1, [sp, #8]
 8011164:	e01e      	b.n	80111a4 <xmp3fixpt_IntensityProcMPEG2+0xfc>
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011166:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 801116a:	fb87 2303 	smull	r2, r3, r7, r3
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 801116e:	009b      	lsls	r3, r3, #2
 8011170:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8011174:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
	__asm__ volatile (
 8011178:	2200      	movs	r2, #0
 801117a:	4692      	mov	sl, r2
 801117c:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 8011180:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
 8011184:	ea4e 0e0a 	orr.w	lr, lr, sl
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011188:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 801118c:	fb86 a303 	smull	sl, r3, r6, r3
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
	__asm__ volatile (
 8011196:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801119a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801119e:	4314      	orrs	r4, r2
			for(j = 0; j < n; j++, i++) {
 80111a0:	3101      	adds	r1, #1
 80111a2:	3501      	adds	r5, #1
 80111a4:	4561      	cmp	r1, ip
 80111a6:	dbde      	blt.n	8011166 <xmp3fixpt_IntensityProcMPEG2+0xbe>
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
			if (sampsLeft == 0)		
 80111a8:	ebbb 0b0c 	subs.w	fp, fp, ip
 80111ac:	f000 8093 	beq.w	80112d6 <xmp3fixpt_IntensityProcMPEG2+0x22e>
		for(cb = cbStartL; cb < cbEndL; cb++) {
 80111b0:	464b      	mov	r3, r9
 80111b2:	9a03      	ldr	r2, [sp, #12]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	f2c0 808e 	blt.w	80112d6 <xmp3fixpt_IntensityProcMPEG2+0x22e>
			sfIdx = sfis->l[cb];
 80111ba:	9a01      	ldr	r2, [sp, #4]
 80111bc:	5cd2      	ldrb	r2, [r2, r3]
			if (sfIdx == il[cb]) {
 80111be:	a91c      	add	r1, sp, #112	; 0x70
 80111c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80111c4:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 80111c8:	4291      	cmp	r1, r2
 80111ca:	d0ac      	beq.n	8011126 <xmp3fixpt_IntensityProcMPEG2+0x7e>
				isf = (sfis->l[cb] + 1) >> 1;
 80111cc:	1c51      	adds	r1, r2, #1
 80111ce:	1049      	asrs	r1, r1, #1
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 80111d0:	f012 0201 	ands.w	r2, r2, #1
 80111d4:	d0af      	beq.n	8011136 <xmp3fixpt_IntensityProcMPEG2+0x8e>
 80111d6:	008e      	lsls	r6, r1, #2
 80111d8:	e7ae      	b.n	8011138 <xmp3fixpt_IntensityProcMPEG2+0x90>
				break;
		}
	} else {
		/* short or mixed blocks */
		il[12] = 1;
 80111da:	2301      	movs	r3, #1
 80111dc:	9311      	str	r3, [sp, #68]	; 0x44
	mOutL = mOutR = 0;
 80111de:	f04f 0e00 	mov.w	lr, #0
 80111e2:	4674      	mov	r4, lr

		for(w = 0; w < 3; w++) {
 80111e4:	46f1      	mov	r9, lr
 80111e6:	f8dd a000 	ldr.w	sl, [sp]
 80111ea:	e05f      	b.n	80112ac <xmp3fixpt_IntensityProcMPEG2+0x204>

			/* skip through sample array by 3, so early-exit logic would be more tricky */
			for(cb = cbStartS; cb < cbEndS; cb++) {
				sfIdx = sfis->s[cb][w];
				if (sfIdx == il[cb]) {
					fl = ISFIIP[midSideFlag][0];
 80111ec:	4b3e      	ldr	r3, [pc, #248]	; (80112e8 <xmp3fixpt_IntensityProcMPEG2+0x240>)
 80111ee:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80111f0:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
					fr = ISFIIP[midSideFlag][1];
 80111f4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80111f8:	685f      	ldr	r7, [r3, #4]
 80111fa:	e042      	b.n	8011282 <xmp3fixpt_IntensityProcMPEG2+0x1da>
				} else {
					isf = (sfis->s[cb][w] + 1) >> 1;
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 80111fc:	2600      	movs	r6, #0
 80111fe:	e039      	b.n	8011274 <xmp3fixpt_IntensityProcMPEG2+0x1cc>
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8011200:	2300      	movs	r3, #0
 8011202:	e03c      	b.n	801127e <xmp3fixpt_IntensityProcMPEG2+0x1d6>
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011204:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8011208:	fb87 2303 	smull	r2, r3, r7, r3
				}
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];

				for(j = 0; j < n; j++, i+=3) {
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 801120c:	009b      	lsls	r3, r3, #2
 801120e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8011212:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
	__asm__ volatile (
 8011216:	2200      	movs	r2, #0
 8011218:	4693      	mov	fp, r2
 801121a:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 801121e:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
 8011222:	ea4e 0e0b 	orr.w	lr, lr, fp
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011226:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801122a:	fb86 b303 	smull	fp, r3, r6, r3
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	__asm__ volatile (
 8011234:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011238:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801123c:	4314      	orrs	r4, r2
				for(j = 0; j < n; j++, i+=3) {
 801123e:	3501      	adds	r5, #1
 8011240:	3103      	adds	r1, #3
 8011242:	4565      	cmp	r5, ip
 8011244:	dbde      	blt.n	8011204 <xmp3fixpt_IntensityProcMPEG2+0x15c>
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8011246:	9a00      	ldr	r2, [sp, #0]
 8011248:	9b02      	ldr	r3, [sp, #8]
 801124a:	4293      	cmp	r3, r2
 801124c:	db2c      	blt.n	80112a8 <xmp3fixpt_IntensityProcMPEG2+0x200>
				sfIdx = sfis->s[cb][w];
 801124e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8011252:	9d01      	ldr	r5, [sp, #4]
 8011254:	442b      	add	r3, r5
 8011256:	444b      	add	r3, r9
 8011258:	7ddb      	ldrb	r3, [r3, #23]
				if (sfIdx == il[cb]) {
 801125a:	ad1c      	add	r5, sp, #112	; 0x70
 801125c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8011260:	f855 5c5c 	ldr.w	r5, [r5, #-92]
 8011264:	429d      	cmp	r5, r3
 8011266:	d0c1      	beq.n	80111ec <xmp3fixpt_IntensityProcMPEG2+0x144>
					isf = (sfis->s[cb][w] + 1) >> 1;
 8011268:	1c5d      	adds	r5, r3, #1
 801126a:	106d      	asrs	r5, r5, #1
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 801126c:	f013 0301 	ands.w	r3, r3, #1
 8011270:	d0c4      	beq.n	80111fc <xmp3fixpt_IntensityProcMPEG2+0x154>
 8011272:	00ae      	lsls	r6, r5, #2
 8011274:	f85a 6006 	ldr.w	r6, [sl, r6]
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8011278:	2b00      	cmp	r3, #0
 801127a:	d1c1      	bne.n	8011200 <xmp3fixpt_IntensityProcMPEG2+0x158>
 801127c:	00ab      	lsls	r3, r5, #2
 801127e:	f85a 7003 	ldr.w	r7, [sl, r3]
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8011282:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8011286:	1c55      	adds	r5, r2, #1
 8011288:	9500      	str	r5, [sp, #0]
 801128a:	f102 0515 	add.w	r5, r2, #21
 801128e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8011292:	f9b5 c006 	ldrsh.w	ip, [r5, #6]
 8011296:	3214      	adds	r2, #20
 8011298:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801129c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80112a0:	ebac 0c03 	sub.w	ip, ip, r3
				for(j = 0; j < n; j++, i+=3) {
 80112a4:	2500      	movs	r5, #0
 80112a6:	e7cc      	b.n	8011242 <xmp3fixpt_IntensityProcMPEG2+0x19a>
		for(w = 0; w < 3; w++) {
 80112a8:	f109 0901 	add.w	r9, r9, #1
 80112ac:	f1b9 0f02 	cmp.w	r9, #2
 80112b0:	dc11      	bgt.n	80112d6 <xmp3fixpt_IntensityProcMPEG2+0x22e>
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 80112b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80112b4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80112b8:	69d9      	ldr	r1, [r3, #28]
 80112ba:	1c4a      	adds	r2, r1, #1
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	9302      	str	r3, [sp, #8]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 80112c0:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80112c4:	3115      	adds	r1, #21
 80112c6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80112ca:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80112ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80112d2:	4449      	add	r1, r9
			for(cb = cbStartS; cb < cbEndS; cb++) {
 80112d4:	e7b8      	b.n	8011248 <xmp3fixpt_IntensityProcMPEG2+0x1a0>
				}
			}
		}
	}
	mOut[0] = mOutL;
 80112d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80112d8:	601c      	str	r4, [r3, #0]
	mOut[1] = mOutR;
 80112da:	f8c3 e004 	str.w	lr, [r3, #4]

	return;
}
 80112de:	b01d      	add	sp, #116	; 0x74
 80112e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e4:	0801dbac 	.word	0x0801dbac
 80112e8:	0801db64 	.word	0x0801db64

080112ec <xmp3fixpt_Subband>:
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 80112ec:	2800      	cmp	r0, #0
 80112ee:	d07c      	beq.n	80113ea <xmp3fixpt_Subband+0xfe>
{
 80112f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f4:	b082      	sub	sp, #8
 80112f6:	460f      	mov	r7, r1
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 80112f8:	68c2      	ldr	r2, [r0, #12]
 80112fa:	2a00      	cmp	r2, #0
 80112fc:	d078      	beq.n	80113f0 <xmp3fixpt_Subband+0x104>
 80112fe:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8011302:	f1b8 0f00 	cmp.w	r8, #0
 8011306:	d076      	beq.n	80113f6 <xmp3fixpt_Subband+0x10a>
 8011308:	6984      	ldr	r4, [r0, #24]
 801130a:	2c00      	cmp	r4, #0
 801130c:	d076      	beq.n	80113fc <xmp3fixpt_Subband+0x110>

	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);

	if (mp3DecInfo->nChans == 2) {
 801130e:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
 8011312:	2b02      	cmp	r3, #2
 8011314:	d03a      	beq.n	801138c <xmp3fixpt_Subband+0xa0>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += (2 * NBANDS);
		}
	} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
 8011316:	2500      	movs	r5, #0
 8011318:	e061      	b.n	80113de <xmp3fixpt_Subband+0xf2>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 801131a:	f005 0901 	and.w	r9, r5, #1
 801131e:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
 8011322:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 8011326:	f508 5a80 	add.w	sl, r8, #4096	; 0x1000
 801132a:	f8da 3b18 	ldr.w	r3, [sl, #2840]	; 0xb18
 801132e:	9300      	str	r3, [sp, #0]
 8011330:	464b      	mov	r3, r9
 8011332:	4621      	mov	r1, r4
 8011334:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
 8011338:	f7fb fd60 	bl	800cdfc <xmp3fixpt_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 801133c:	f105 0012 	add.w	r0, r5, #18
 8011340:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 8011344:	f8da 3b1c 	ldr.w	r3, [sl, #2844]	; 0xb1c
 8011348:	9300      	str	r3, [sp, #0]
 801134a:	464b      	mov	r3, r9
 801134c:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8011350:	eb08 10c0 	add.w	r0, r8, r0, lsl #7
 8011354:	f7fb fd52 	bl	800cdfc <xmp3fixpt_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 8011358:	f8d6 1200 	ldr.w	r1, [r6, #512]	; 0x200
 801135c:	eb09 1309 	add.w	r3, r9, r9, lsl #4
 8011360:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 8011364:	4a27      	ldr	r2, [pc, #156]	; (8011404 <xmp3fixpt_Subband+0x118>)
 8011366:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801136a:	4638      	mov	r0, r7
 801136c:	f7fe fb10 	bl	800f990 <xmp3fixpt_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8011370:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 8011374:	eba2 0209 	sub.w	r2, r2, r9
 8011378:	f002 0207 	and.w	r2, r2, #7
 801137c:	f8c6 2200 	str.w	r2, [r6, #512]	; 0x200
			pcmBuf += (2 * NBANDS);
 8011380:	3780      	adds	r7, #128	; 0x80
		for (b = 0; b < BLOCK_SIZE; b++) {
 8011382:	3501      	adds	r5, #1
 8011384:	2d11      	cmp	r5, #17
 8011386:	ddc8      	ble.n	801131a <xmp3fixpt_Subband+0x2e>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += NBANDS;
		}
	}

	return 0;
 8011388:	2000      	movs	r0, #0
 801138a:	e02b      	b.n	80113e4 <xmp3fixpt_Subband+0xf8>
		for (b = 0; b < BLOCK_SIZE; b++) {
 801138c:	2500      	movs	r5, #0
 801138e:	e7f9      	b.n	8011384 <xmp3fixpt_Subband+0x98>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 8011390:	f005 0901 	and.w	r9, r5, #1
 8011394:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
 8011398:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 801139c:	f508 5380 	add.w	r3, r8, #4096	; 0x1000
 80113a0:	f8d3 3b18 	ldr.w	r3, [r3, #2840]	; 0xb18
 80113a4:	9300      	str	r3, [sp, #0]
 80113a6:	464b      	mov	r3, r9
 80113a8:	4621      	mov	r1, r4
 80113aa:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
 80113ae:	f7fb fd25 	bl	800cdfc <xmp3fixpt_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 80113b2:	f8d6 1200 	ldr.w	r1, [r6, #512]	; 0x200
 80113b6:	eb09 1309 	add.w	r3, r9, r9, lsl #4
 80113ba:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 80113be:	4a11      	ldr	r2, [pc, #68]	; (8011404 <xmp3fixpt_Subband+0x118>)
 80113c0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80113c4:	4638      	mov	r0, r7
 80113c6:	f7fd ff27 	bl	800f218 <xmp3fixpt_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80113ca:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 80113ce:	eba2 0209 	sub.w	r2, r2, r9
 80113d2:	f002 0207 	and.w	r2, r2, #7
 80113d6:	f8c6 2200 	str.w	r2, [r6, #512]	; 0x200
			pcmBuf += NBANDS;
 80113da:	3740      	adds	r7, #64	; 0x40
		for (b = 0; b < BLOCK_SIZE; b++) {
 80113dc:	3501      	adds	r5, #1
 80113de:	2d11      	cmp	r5, #17
 80113e0:	ddd6      	ble.n	8011390 <xmp3fixpt_Subband+0xa4>
	return 0;
 80113e2:	2000      	movs	r0, #0
}
 80113e4:	b002      	add	sp, #8
 80113e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
 80113ea:	f04f 30ff 	mov.w	r0, #4294967295
}
 80113ee:	4770      	bx	lr
		return -1;
 80113f0:	f04f 30ff 	mov.w	r0, #4294967295
 80113f4:	e7f6      	b.n	80113e4 <xmp3fixpt_Subband+0xf8>
 80113f6:	f04f 30ff 	mov.w	r0, #4294967295
 80113fa:	e7f3      	b.n	80113e4 <xmp3fixpt_Subband+0xf8>
 80113fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011400:	e7f0      	b.n	80113e4 <xmp3fixpt_Subband+0xf8>
 8011402:	bf00      	nop
 8011404:	0801df2c 	.word	0x0801df2c

08011408 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011408:	b500      	push	{lr}
 801140a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801140c:	9300      	str	r3, [sp, #0]
 801140e:	4613      	mov	r3, r2
 8011410:	460a      	mov	r2, r1
 8011412:	4601      	mov	r1, r0
 8011414:	4803      	ldr	r0, [pc, #12]	; (8011424 <BSP_SD_ReadBlocks+0x1c>)
 8011416:	f7f4 fd01 	bl	8005e1c <HAL_SD_ReadBlocks>
 801141a:	b100      	cbz	r0, 801141e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 801141c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 801141e:	b003      	add	sp, #12
 8011420:	f85d fb04 	ldr.w	pc, [sp], #4
 8011424:	200172ac 	.word	0x200172ac

08011428 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011428:	b500      	push	{lr}
 801142a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801142c:	9300      	str	r3, [sp, #0]
 801142e:	4613      	mov	r3, r2
 8011430:	460a      	mov	r2, r1
 8011432:	4601      	mov	r1, r0
 8011434:	4803      	ldr	r0, [pc, #12]	; (8011444 <BSP_SD_WriteBlocks+0x1c>)
 8011436:	f7f4 fdfe 	bl	8006036 <HAL_SD_WriteBlocks>
 801143a:	b100      	cbz	r0, 801143e <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 801143c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 801143e:	b003      	add	sp, #12
 8011440:	f85d fb04 	ldr.w	pc, [sp], #4
 8011444:	200172ac 	.word	0x200172ac

08011448 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011448:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801144a:	4803      	ldr	r0, [pc, #12]	; (8011458 <BSP_SD_GetCardState+0x10>)
 801144c:	f7f5 f978 	bl	8006740 <HAL_SD_GetCardState>
}
 8011450:	3804      	subs	r0, #4
 8011452:	bf18      	it	ne
 8011454:	2001      	movne	r0, #1
 8011456:	bd08      	pop	{r3, pc}
 8011458:	200172ac 	.word	0x200172ac

0801145c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801145c:	b508      	push	{r3, lr}
 801145e:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011460:	4801      	ldr	r0, [pc, #4]	; (8011468 <BSP_SD_GetCardInfo+0xc>)
 8011462:	f7f5 f8f9 	bl	8006658 <HAL_SD_GetCardInfo>
}
 8011466:	bd08      	pop	{r3, pc}
 8011468:	200172ac 	.word	0x200172ac

0801146c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801146c:	b500      	push	{lr}
 801146e:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8011470:	2301      	movs	r3, #1
 8011472:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011476:	f002 fc17 	bl	8013ca8 <BSP_PlatformIsDetected>
 801147a:	b910      	cbnz	r0, 8011482 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 801147c:	2300      	movs	r3, #0
 801147e:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8011482:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8011486:	b003      	add	sp, #12
 8011488:	f85d fb04 	ldr.w	pc, [sp], #4

0801148c <BSP_SD_Init>:
{
 801148c:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801148e:	f7ff ffed 	bl	801146c <BSP_SD_IsDetected>
 8011492:	2801      	cmp	r0, #1
 8011494:	d002      	beq.n	801149c <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 8011496:	2502      	movs	r5, #2
}
 8011498:	4628      	mov	r0, r5
 801149a:	bd38      	pop	{r3, r4, r5, pc}
 801149c:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
 801149e:	4807      	ldr	r0, [pc, #28]	; (80114bc <BSP_SD_Init+0x30>)
 80114a0:	f7f5 f86a 	bl	8006578 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80114a4:	4605      	mov	r5, r0
 80114a6:	2800      	cmp	r0, #0
 80114a8:	d1f6      	bne.n	8011498 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80114aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80114ae:	4803      	ldr	r0, [pc, #12]	; (80114bc <BSP_SD_Init+0x30>)
 80114b0:	f7f5 f8e4 	bl	800667c <HAL_SD_ConfigWideBusOperation>
 80114b4:	2800      	cmp	r0, #0
 80114b6:	d0ef      	beq.n	8011498 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 80114b8:	4625      	mov	r5, r4
 80114ba:	e7ed      	b.n	8011498 <BSP_SD_Init+0xc>
 80114bc:	200172ac 	.word	0x200172ac

080114c0 <Color_Convertion>:
extern uint8_t acue_sensitivity;

// converts ARGB8888 to RGB565
static uint16_t Color_Convertion(uint32_t in_color)
{
	uint16_t red = (in_color & 0x00FF0000) >> 16;
 80114c0:	f3c0 4107 	ubfx	r1, r0, #16, #8
	uint16_t green = (in_color & 0x0000FF00) >> 8;
 80114c4:	f3c0 2207 	ubfx	r2, r0, #8, #8
	uint16_t blue = (in_color & 0x000000FF);
	uint16_t out_color = ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
 80114c8:	4b06      	ldr	r3, [pc, #24]	; (80114e4 <Color_Convertion+0x24>)
 80114ca:	ea03 2301 	and.w	r3, r3, r1, lsl #8
 80114ce:	b21b      	sxth	r3, r3
 80114d0:	00d2      	lsls	r2, r2, #3
 80114d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80114d6:	4313      	orrs	r3, r2
 80114d8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80114dc:	4318      	orrs	r0, r3
	return out_color;
}
 80114de:	b280      	uxth	r0, r0
 80114e0:	4770      	bx	lr
 80114e2:	bf00      	nop
 80114e4:	fffff800 	.word	0xfffff800

080114e8 <ClearLayer>:

// clears selected ActiveLayer
void ClearLayer()
{
 80114e8:	b500      	push	{lr}
 80114ea:	b083      	sub	sp, #12
	hdma2d.Init.OutputOffset = 0;
 80114ec:	480e      	ldr	r0, [pc, #56]	; (8011528 <ClearLayer+0x40>)
 80114ee:	2300      	movs	r3, #0
 80114f0:	60c3      	str	r3, [r0, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 80114f2:	f7f0 fb41 	bl	8001b78 <HAL_DMA2D_Init>
 80114f6:	b110      	cbz	r0, 80114fe <ClearLayer+0x16>
				hltdc.LayerCfg[ActiveLayer].ImageWidth, hltdc.LayerCfg[ActiveLayer].ImageHeight) == HAL_OK) {
			/* Polling For DMA transfer */
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
		}
	}
}
 80114f8:	b003      	add	sp, #12
 80114fa:	f85d fb04 	ldr.w	pc, [sp], #4
		if(HAL_DMA2D_Start(&hdma2d, 0, hltdc.LayerCfg[ActiveLayer].FBStartAdress,
 80114fe:	4b0b      	ldr	r3, [pc, #44]	; (801152c <ClearLayer+0x44>)
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	4a0b      	ldr	r2, [pc, #44]	; (8011530 <ClearLayer+0x48>)
 8011504:	2134      	movs	r1, #52	; 0x34
 8011506:	fb01 2203 	mla	r2, r1, r3, r2
 801150a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801150c:	9300      	str	r3, [sp, #0]
 801150e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8011510:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8011512:	2100      	movs	r1, #0
 8011514:	4804      	ldr	r0, [pc, #16]	; (8011528 <ClearLayer+0x40>)
 8011516:	f7f0 fb8d 	bl	8001c34 <HAL_DMA2D_Start>
 801151a:	2800      	cmp	r0, #0
 801151c:	d1ec      	bne.n	80114f8 <ClearLayer+0x10>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 801151e:	2164      	movs	r1, #100	; 0x64
 8011520:	4801      	ldr	r0, [pc, #4]	; (8011528 <ClearLayer+0x40>)
 8011522:	f7f0 fbbf 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
}
 8011526:	e7e7      	b.n	80114f8 <ClearLayer+0x10>
 8011528:	20000614 	.word	0x20000614
 801152c:	200007a8 	.word	0x200007a8
 8011530:	20000700 	.word	0x20000700

08011534 <ChangeLayers>:

// changes ActiveLayers
void ChangeLayers(void)
{
 8011534:	b538      	push	{r3, r4, r5, lr}
	if(ActiveLayer == 0) {
 8011536:	4b11      	ldr	r3, [pc, #68]	; (801157c <ChangeLayers+0x48>)
 8011538:	781a      	ldrb	r2, [r3, #0]
 801153a:	b98a      	cbnz	r2, 8011560 <ChangeLayers+0x2c>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer++);
 801153c:	461d      	mov	r5, r3
 801153e:	1c53      	adds	r3, r2, #1
 8011540:	702b      	strb	r3, [r5, #0]
 8011542:	4c0f      	ldr	r4, [pc, #60]	; (8011580 <ChangeLayers+0x4c>)
 8011544:	21ff      	movs	r1, #255	; 0xff
 8011546:	4620      	mov	r0, r4
 8011548:	f7f2 fc36 	bl	8003db8 <HAL_LTDC_SetAlpha_NoReload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
 801154c:	782a      	ldrb	r2, [r5, #0]
 801154e:	2100      	movs	r1, #0
 8011550:	4620      	mov	r0, r4
 8011552:	f7f2 fc31 	bl	8003db8 <HAL_LTDC_SetAlpha_NoReload>
	}
	else {
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
	}
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8011556:	2102      	movs	r1, #2
 8011558:	4809      	ldr	r0, [pc, #36]	; (8011580 <ChangeLayers+0x4c>)
 801155a:	f7f2 fc05 	bl	8003d68 <HAL_LTDC_Reload>
}
 801155e:	bd38      	pop	{r3, r4, r5, pc}
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 8011560:	4d06      	ldr	r5, [pc, #24]	; (801157c <ChangeLayers+0x48>)
 8011562:	1e53      	subs	r3, r2, #1
 8011564:	702b      	strb	r3, [r5, #0]
 8011566:	4c06      	ldr	r4, [pc, #24]	; (8011580 <ChangeLayers+0x4c>)
 8011568:	21ff      	movs	r1, #255	; 0xff
 801156a:	4620      	mov	r0, r4
 801156c:	f7f2 fc24 	bl	8003db8 <HAL_LTDC_SetAlpha_NoReload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
 8011570:	782a      	ldrb	r2, [r5, #0]
 8011572:	2100      	movs	r1, #0
 8011574:	4620      	mov	r0, r4
 8011576:	f7f2 fc1f 	bl	8003db8 <HAL_LTDC_SetAlpha_NoReload>
 801157a:	e7ec      	b.n	8011556 <ChangeLayers+0x22>
 801157c:	200007a8 	.word	0x200007a8
 8011580:	20000700 	.word	0x20000700

08011584 <SetBeatGrid>:
	VLine(41 + file_pos, 220, 40, 0x00FFFFFF);
}

void SetBeatGrid()
{
	if(position != file_pos_wide) {
 8011584:	4b3e      	ldr	r3, [pc, #248]	; (8011680 <SetBeatGrid+0xfc>)
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	4b3e      	ldr	r3, [pc, #248]	; (8011684 <SetBeatGrid+0x100>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	429a      	cmp	r2, r3
 801158e:	d022      	beq.n	80115d6 <SetBeatGrid+0x52>
		position = file_pos_wide;
 8011590:	4a3b      	ldr	r2, [pc, #236]	; (8011680 <SetBeatGrid+0xfc>)
 8011592:	6013      	str	r3, [r2, #0]
		if(stretch > 1) {
 8011594:	4b3c      	ldr	r3, [pc, #240]	; (8011688 <SetBeatGrid+0x104>)
 8011596:	edd3 7a00 	vldr	s15, [r3]
 801159a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a6:	dc04      	bgt.n	80115b2 <SetBeatGrid+0x2e>
 80115a8:	e015      	b.n	80115d6 <SetBeatGrid+0x52>
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
				position++;
 80115aa:	4a35      	ldr	r2, [pc, #212]	; (8011680 <SetBeatGrid+0xfc>)
 80115ac:	6813      	ldr	r3, [r2, #0]
 80115ae:	3301      	adds	r3, #1
 80115b0:	6013      	str	r3, [r2, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 80115b2:	4b33      	ldr	r3, [pc, #204]	; (8011680 <SetBeatGrid+0xfc>)
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80115ba:	ee17 1a10 	vmov	r1, s14
 80115be:	fb92 f3f1 	sdiv	r3, r2, r1
 80115c2:	fb01 2213 	mls	r2, r1, r3, r2
 80115c6:	4b31      	ldr	r3, [pc, #196]	; (801168c <SetBeatGrid+0x108>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	fb93 f0f1 	sdiv	r0, r3, r1
 80115ce:	fb01 3310 	mls	r3, r1, r0, r3
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d1e9      	bne.n	80115aa <SetBeatGrid+0x26>
			}
		}
	}
	beat = 0;
 80115d6:	2300      	movs	r3, #0
 80115d8:	4a2d      	ldr	r2, [pc, #180]	; (8011690 <SetBeatGrid+0x10c>)
 80115da:	6013      	str	r3, [r2, #0]
	first_beat = 0;
 80115dc:	4a2d      	ldr	r2, [pc, #180]	; (8011694 <SetBeatGrid+0x110>)
 80115de:	6013      	str	r3, [r2, #0]
	int32_t check = position + (-240)*stretch;
 80115e0:	4b27      	ldr	r3, [pc, #156]	; (8011680 <SetBeatGrid+0xfc>)
 80115e2:	edd3 7a00 	vldr	s15, [r3]
 80115e6:	4b28      	ldr	r3, [pc, #160]	; (8011688 <SetBeatGrid+0x104>)
 80115e8:	ed93 7a00 	vldr	s14, [r3]
 80115ec:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8011698 <SetBeatGrid+0x114>
 80115f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80115f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011600:	ee17 1a90 	vmov	r1, s15
	if(check > 0) {
 8011604:	2900      	cmp	r1, #0
 8011606:	dc07      	bgt.n	8011618 <SetBeatGrid+0x94>
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
			first_beat++;
		}
	}
	if(position > 0) {
 8011608:	4b1d      	ldr	r3, [pc, #116]	; (8011680 <SetBeatGrid+0xfc>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	dc1c      	bgt.n	801164a <SetBeatGrid+0xc6>
 8011610:	4770      	bx	lr
			first_beat++;
 8011612:	3201      	adds	r2, #1
 8011614:	4b1f      	ldr	r3, [pc, #124]	; (8011694 <SetBeatGrid+0x110>)
 8011616:	601a      	str	r2, [r3, #0]
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
 8011618:	4b1e      	ldr	r3, [pc, #120]	; (8011694 <SetBeatGrid+0x110>)
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	f202 40aa 	addw	r0, r2, #1194	; 0x4aa
 8011620:	4b1e      	ldr	r3, [pc, #120]	; (801169c <SetBeatGrid+0x118>)
 8011622:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011626:	2096      	movs	r0, #150	; 0x96
 8011628:	fb00 f303 	mul.w	r3, r0, r3
 801162c:	481c      	ldr	r0, [pc, #112]	; (80116a0 <SetBeatGrid+0x11c>)
 801162e:	fba0 0303 	umull	r0, r3, r0, r3
 8011632:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 8011636:	d3e7      	bcc.n	8011608 <SetBeatGrid+0x84>
 8011638:	4b18      	ldr	r3, [pc, #96]	; (801169c <SetBeatGrid+0x118>)
 801163a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 801163e:	429a      	cmp	r2, r3
 8011640:	d9e7      	bls.n	8011612 <SetBeatGrid+0x8e>
 8011642:	e7e1      	b.n	8011608 <SetBeatGrid+0x84>
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
			beat++;
 8011644:	3201      	adds	r2, #1
 8011646:	4b12      	ldr	r3, [pc, #72]	; (8011690 <SetBeatGrid+0x10c>)
 8011648:	601a      	str	r2, [r3, #0]
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
 801164a:	4b11      	ldr	r3, [pc, #68]	; (8011690 <SetBeatGrid+0x10c>)
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	f202 41aa 	addw	r1, r2, #1194	; 0x4aa
 8011652:	4b12      	ldr	r3, [pc, #72]	; (801169c <SetBeatGrid+0x118>)
 8011654:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011658:	2196      	movs	r1, #150	; 0x96
 801165a:	fb01 f303 	mul.w	r3, r1, r3
 801165e:	4910      	ldr	r1, [pc, #64]	; (80116a0 <SetBeatGrid+0x11c>)
 8011660:	fba1 1303 	umull	r1, r3, r1, r3
 8011664:	4906      	ldr	r1, [pc, #24]	; (8011680 <SetBeatGrid+0xfc>)
 8011666:	6809      	ldr	r1, [r1, #0]
 8011668:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 801166c:	d304      	bcc.n	8011678 <SetBeatGrid+0xf4>
 801166e:	4b0b      	ldr	r3, [pc, #44]	; (801169c <SetBeatGrid+0x118>)
 8011670:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8011674:	4293      	cmp	r3, r2
 8011676:	d2e5      	bcs.n	8011644 <SetBeatGrid+0xc0>
		}
		beat--;
 8011678:	3a01      	subs	r2, #1
 801167a:	4b05      	ldr	r3, [pc, #20]	; (8011690 <SetBeatGrid+0x10c>)
 801167c:	601a      	str	r2, [r3, #0]
	}
}
 801167e:	4770      	bx	lr
 8011680:	20000610 	.word	0x20000610
 8011684:	2000e3d4 	.word	0x2000e3d4
 8011688:	20000028 	.word	0x20000028
 801168c:	200005e8 	.word	0x200005e8
 8011690:	200005e4 	.word	0x200005e4
 8011694:	20000604 	.word	0x20000604
 8011698:	c3700000 	.word	0xc3700000
 801169c:	20014620 	.word	0x20014620
 80116a0:	10624dd3 	.word	0x10624dd3

080116a4 <DrawElement>:

// draws element
void DrawElement(uint16_t width, uint16_t height, uint16_t xpos, uint16_t ypos, uint32_t color, const uint16_t* element)
{
 80116a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a8:	b083      	sub	sp, #12
 80116aa:	9001      	str	r0, [sp, #4]
 80116ac:	460f      	mov	r7, r1
 80116ae:	4691      	mov	r9, r2
 80116b0:	4698      	mov	r8, r3
 80116b2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
	uint16_t i = 0;
 80116b6:	2600      	movs	r6, #0
	while(i < width) {
 80116b8:	e02f      	b.n	801171a <DrawElement+0x76>
		while(k < height) {
			if(((element[i] >> k) & 1) == 1) {
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
			}
			else {
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80116ba:	4b1c      	ldr	r3, [pc, #112]	; (801172c <DrawElement+0x88>)
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	4a1c      	ldr	r2, [pc, #112]	; (8011730 <DrawElement+0x8c>)
 80116c0:	2134      	movs	r1, #52	; 0x34
 80116c2:	fb01 2203 	mla	r2, r1, r3, r2
 80116c6:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80116c8:	eba8 0304 	sub.w	r3, r8, r4
 80116cc:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80116ce:	fb02 9303 	mla	r3, r2, r3, r9
 80116d2:	4433      	add	r3, r6
 80116d4:	2200      	movs	r2, #0
 80116d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			k++;
 80116da:	3401      	adds	r4, #1
 80116dc:	b2a4      	uxth	r4, r4
		while(k < height) {
 80116de:	42bc      	cmp	r4, r7
 80116e0:	d219      	bcs.n	8011716 <DrawElement+0x72>
			if(((element[i] >> k) & 1) == 1) {
 80116e2:	f83a 3016 	ldrh.w	r3, [sl, r6, lsl #1]
 80116e6:	4123      	asrs	r3, r4
 80116e8:	f013 0f01 	tst.w	r3, #1
 80116ec:	d0e5      	beq.n	80116ba <DrawElement+0x16>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80116ee:	4b0f      	ldr	r3, [pc, #60]	; (801172c <DrawElement+0x88>)
 80116f0:	781a      	ldrb	r2, [r3, #0]
 80116f2:	4b0f      	ldr	r3, [pc, #60]	; (8011730 <DrawElement+0x8c>)
 80116f4:	2134      	movs	r1, #52	; 0x34
 80116f6:	fb01 3302 	mla	r3, r1, r2, r3
 80116fa:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 80116fe:	eba8 0504 	sub.w	r5, r8, r4
 8011702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011704:	fb03 9505 	mla	r5, r3, r5, r9
 8011708:	4435      	add	r5, r6
 801170a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801170c:	f7ff fed8 	bl	80114c0 <Color_Convertion>
 8011710:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
 8011714:	e7e1      	b.n	80116da <DrawElement+0x36>
		}
		i++;
 8011716:	3601      	adds	r6, #1
 8011718:	b2b6      	uxth	r6, r6
	while(i < width) {
 801171a:	9b01      	ldr	r3, [sp, #4]
 801171c:	429e      	cmp	r6, r3
 801171e:	d201      	bcs.n	8011724 <DrawElement+0x80>
		uint16_t k = 0;
 8011720:	2400      	movs	r4, #0
 8011722:	e7dc      	b.n	80116de <DrawElement+0x3a>
	}
}
 8011724:	b003      	add	sp, #12
 8011726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172a:	bf00      	nop
 801172c:	200007a8 	.word	0x200007a8
 8011730:	20000700 	.word	0x20000700

08011734 <VLine>:
	VLine(299, 54, 9, 0x000000FF);
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
}

void VLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
{
 8011734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011736:	b083      	sub	sp, #12
 8011738:	4616      	mov	r6, r2
 801173a:	461d      	mov	r5, r3
	uint32_t Xaddress = 0;
    /* Get the line address */
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 801173c:	4b17      	ldr	r3, [pc, #92]	; (801179c <VLine+0x68>)
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	4c17      	ldr	r4, [pc, #92]	; (80117a0 <VLine+0x6c>)
 8011742:	2234      	movs	r2, #52	; 0x34
 8011744:	fb02 4403 	mla	r4, r2, r3, r4
 8011748:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 801174a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 801174c:	fb04 0001 	mla	r0, r4, r1, r0
 8011750:	eb07 0740 	add.w	r7, r7, r0, lsl #1
    /* Write line */
    hdma2d.Init.Mode = DMA2D_R2M;
 8011754:	4813      	ldr	r0, [pc, #76]	; (80117a4 <VLine+0x70>)
 8011756:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801175a:	6043      	str	r3, [r0, #4]
    /* RGB565 format */
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 801175c:	2302      	movs	r3, #2
 801175e:	6083      	str	r3, [r0, #8]
    hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - 1;
 8011760:	3c01      	subs	r4, #1
 8011762:	60c4      	str	r4, [r0, #12]
    hdma2d.Instance = DMA2D;
 8011764:	4b10      	ldr	r3, [pc, #64]	; (80117a8 <VLine+0x74>)
 8011766:	6003      	str	r3, [r0, #0]
    /* DMA2D Initialization */
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8011768:	f7f0 fa06 	bl	8001b78 <HAL_DMA2D_Init>
 801176c:	b108      	cbz	r0, 8011772 <VLine+0x3e>
    			/* Polling For DMA transfer */
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
    		}
    	}
    }
}
 801176e:	b003      	add	sp, #12
 8011770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 8011772:	4b0a      	ldr	r3, [pc, #40]	; (801179c <VLine+0x68>)
 8011774:	7819      	ldrb	r1, [r3, #0]
 8011776:	480b      	ldr	r0, [pc, #44]	; (80117a4 <VLine+0x70>)
 8011778:	f7f0 fb34 	bl	8001de4 <HAL_DMA2D_ConfigLayer>
 801177c:	2800      	cmp	r0, #0
 801177e:	d1f6      	bne.n	801176e <VLine+0x3a>
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 8011780:	9600      	str	r6, [sp, #0]
 8011782:	2301      	movs	r3, #1
 8011784:	463a      	mov	r2, r7
 8011786:	4629      	mov	r1, r5
 8011788:	4806      	ldr	r0, [pc, #24]	; (80117a4 <VLine+0x70>)
 801178a:	f7f0 fa53 	bl	8001c34 <HAL_DMA2D_Start>
 801178e:	2800      	cmp	r0, #0
 8011790:	d1ed      	bne.n	801176e <VLine+0x3a>
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8011792:	210a      	movs	r1, #10
 8011794:	4803      	ldr	r0, [pc, #12]	; (80117a4 <VLine+0x70>)
 8011796:	f7f0 fa85 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
}
 801179a:	e7e8      	b.n	801176e <VLine+0x3a>
 801179c:	200007a8 	.word	0x200007a8
 80117a0:	20000700 	.word	0x20000700
 80117a4:	20000614 	.word	0x20000614
 80117a8:	4002b000 	.word	0x4002b000

080117ac <HLine>:

void HLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
{
 80117ac:	b570      	push	{r4, r5, r6, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	4616      	mov	r6, r2
 80117b2:	461d      	mov	r5, r3
	uint32_t Xaddress = 0;
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80117b4:	4b19      	ldr	r3, [pc, #100]	; (801181c <HLine+0x70>)
 80117b6:	f893 c000 	ldrb.w	ip, [r3]
 80117ba:	4c19      	ldr	r4, [pc, #100]	; (8011820 <HLine+0x74>)
 80117bc:	2334      	movs	r3, #52	; 0x34
 80117be:	fb03 4c0c 	mla	ip, r3, ip, r4
 80117c2:	f8dc 405c 	ldr.w	r4, [ip, #92]	; 0x5c
 80117c6:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80117ca:	fb03 0001 	mla	r0, r3, r1, r0
 80117ce:	eb04 0440 	add.w	r4, r4, r0, lsl #1
	/* Write line */
	hdma2d.Init.Mode = DMA2D_R2M;
 80117d2:	4814      	ldr	r0, [pc, #80]	; (8011824 <HLine+0x78>)
 80117d4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80117d8:	6043      	str	r3, [r0, #4]
	/* RGB565 format */
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 80117da:	2302      	movs	r3, #2
 80117dc:	6083      	str	r3, [r0, #8]
	hdma2d.Init.OutputOffset = 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	60c3      	str	r3, [r0, #12]
	hdma2d.Instance = DMA2D;
 80117e2:	4b11      	ldr	r3, [pc, #68]	; (8011828 <HLine+0x7c>)
 80117e4:	6003      	str	r3, [r0, #0]
	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 80117e6:	f7f0 f9c7 	bl	8001b78 <HAL_DMA2D_Init>
 80117ea:	b108      	cbz	r0, 80117f0 <HLine+0x44>
	   			/* Polling For DMA transfer */
	   			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
	   		}
	   	}
	}
}
 80117ec:	b002      	add	sp, #8
 80117ee:	bd70      	pop	{r4, r5, r6, pc}
	 	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 80117f0:	4b0a      	ldr	r3, [pc, #40]	; (801181c <HLine+0x70>)
 80117f2:	7819      	ldrb	r1, [r3, #0]
 80117f4:	480b      	ldr	r0, [pc, #44]	; (8011824 <HLine+0x78>)
 80117f6:	f7f0 faf5 	bl	8001de4 <HAL_DMA2D_ConfigLayer>
 80117fa:	2800      	cmp	r0, #0
 80117fc:	d1f6      	bne.n	80117ec <HLine+0x40>
	   		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, Length, 1) == HAL_OK) {
 80117fe:	2301      	movs	r3, #1
 8011800:	9300      	str	r3, [sp, #0]
 8011802:	4633      	mov	r3, r6
 8011804:	4622      	mov	r2, r4
 8011806:	4629      	mov	r1, r5
 8011808:	4806      	ldr	r0, [pc, #24]	; (8011824 <HLine+0x78>)
 801180a:	f7f0 fa13 	bl	8001c34 <HAL_DMA2D_Start>
 801180e:	2800      	cmp	r0, #0
 8011810:	d1ec      	bne.n	80117ec <HLine+0x40>
	   			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8011812:	210a      	movs	r1, #10
 8011814:	4803      	ldr	r0, [pc, #12]	; (8011824 <HLine+0x78>)
 8011816:	f7f0 fa45 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
}
 801181a:	e7e7      	b.n	80117ec <HLine+0x40>
 801181c:	200007a8 	.word	0x200007a8
 8011820:	20000700 	.word	0x20000700
 8011824:	20000614 	.word	0x20000614
 8011828:	4002b000 	.word	0x4002b000

0801182c <Rectangle>:

void Rectangle(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint32_t color)
{
 801182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801182e:	b083      	sub	sp, #12
 8011830:	4615      	mov	r5, r2
 8011832:	461e      	mov	r6, r3
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8011834:	4b10      	ldr	r3, [pc, #64]	; (8011878 <Rectangle+0x4c>)
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	4c10      	ldr	r4, [pc, #64]	; (801187c <Rectangle+0x50>)
 801183a:	2234      	movs	r2, #52	; 0x34
 801183c:	fb02 4403 	mla	r4, r2, r3, r4
 8011840:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8011842:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8011844:	fb04 0001 	mla	r0, r4, r1, r0
 8011848:	eb07 0740 	add.w	r7, r7, r0, lsl #1
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 801184c:	1b64      	subs	r4, r4, r5
 801184e:	480c      	ldr	r0, [pc, #48]	; (8011880 <Rectangle+0x54>)
 8011850:	60c4      	str	r4, [r0, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8011852:	f7f0 f991 	bl	8001b78 <HAL_DMA2D_Init>
 8011856:	b108      	cbz	r0, 801185c <Rectangle+0x30>
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
		}
	}

}
 8011858:	b003      	add	sp, #12
 801185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 801185c:	9600      	str	r6, [sp, #0]
 801185e:	462b      	mov	r3, r5
 8011860:	463a      	mov	r2, r7
 8011862:	9908      	ldr	r1, [sp, #32]
 8011864:	4806      	ldr	r0, [pc, #24]	; (8011880 <Rectangle+0x54>)
 8011866:	f7f0 f9e5 	bl	8001c34 <HAL_DMA2D_Start>
 801186a:	2800      	cmp	r0, #0
 801186c:	d1f4      	bne.n	8011858 <Rectangle+0x2c>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 801186e:	2164      	movs	r1, #100	; 0x64
 8011870:	4803      	ldr	r0, [pc, #12]	; (8011880 <Rectangle+0x54>)
 8011872:	f7f0 fa17 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
}
 8011876:	e7ef      	b.n	8011858 <Rectangle+0x2c>
 8011878:	200007a8 	.word	0x200007a8
 801187c:	20000700 	.word	0x20000700
 8011880:	20000614 	.word	0x20000614

08011884 <Pixel>:

void Pixel(uint16_t Xpos, uint16_t Ypos, uint32_t color)
{
 8011884:	b538      	push	{r3, r4, r5, lr}
 8011886:	4604      	mov	r4, r0
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8011888:	4b07      	ldr	r3, [pc, #28]	; (80118a8 <Pixel+0x24>)
 801188a:	7818      	ldrb	r0, [r3, #0]
 801188c:	4b07      	ldr	r3, [pc, #28]	; (80118ac <Pixel+0x28>)
 801188e:	2534      	movs	r5, #52	; 0x34
 8011890:	fb05 3300 	mla	r3, r5, r0, r3
 8011894:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8011896:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8011898:	fb00 4401 	mla	r4, r0, r1, r4
 801189c:	4610      	mov	r0, r2
 801189e:	f7ff fe0f 	bl	80114c0 <Color_Convertion>
 80118a2:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
}
 80118a6:	bd38      	pop	{r3, r4, r5, pc}
 80118a8:	200007a8 	.word	0x200007a8
 80118ac:	20000700 	.word	0x20000700

080118b0 <DrawDigit>:

void DrawDigit(uint8_t digit, uint16_t Xpos, uint16_t Ypos, uint8_t width, uint32_t color)
{
 80118b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b4:	b085      	sub	sp, #20
 80118b6:	468b      	mov	fp, r1
 80118b8:	4615      	mov	r5, r2
 80118ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	switch(digit) {
 80118bc:	2809      	cmp	r0, #9
 80118be:	d87c      	bhi.n	80119ba <DrawDigit+0x10a>
 80118c0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80118c4:	007e000a 	.word	0x007e000a
 80118c8:	011300b0 	.word	0x011300b0
 80118cc:	01cc017a 	.word	0x01cc017a
 80118d0:	02a1022f 	.word	0x02a1022f
 80118d4:	036802e4 	.word	0x036802e4
	case 0: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 80118d8:	f101 0901 	add.w	r9, r1, #1
 80118dc:	fa1f f989 	uxth.w	r9, r9
 80118e0:	b29f      	uxth	r7, r3
 80118e2:	1e9c      	subs	r4, r3, #2
 80118e4:	b2a4      	uxth	r4, r4
 80118e6:	4633      	mov	r3, r6
 80118e8:	4622      	mov	r2, r4
 80118ea:	4629      	mov	r1, r5
 80118ec:	4648      	mov	r0, r9
 80118ee:	f7ff ff5d 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 80118f2:	f10b 0302 	add.w	r3, fp, #2
 80118f6:	b298      	uxth	r0, r3
 80118f8:	1c6b      	adds	r3, r5, #1
 80118fa:	b299      	uxth	r1, r3
 80118fc:	f1a7 0804 	sub.w	r8, r7, #4
 8011900:	fa1f f888 	uxth.w	r8, r8
 8011904:	4633      	mov	r3, r6
 8011906:	4642      	mov	r2, r8
 8011908:	468a      	mov	sl, r1
 801190a:	9000      	str	r0, [sp, #0]
 801190c:	f7ff ff4e 	bl	80117ac <HLine>
		// f
		VLine(Xpos, Ypos + 1, width - 2, color);
 8011910:	4633      	mov	r3, r6
 8011912:	4622      	mov	r2, r4
 8011914:	f8cd a004 	str.w	sl, [sp, #4]
 8011918:	4651      	mov	r1, sl
 801191a:	4658      	mov	r0, fp
 801191c:	f7ff ff0a 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8011920:	1cab      	adds	r3, r5, #2
 8011922:	b29b      	uxth	r3, r3
 8011924:	4619      	mov	r1, r3
 8011926:	4633      	mov	r3, r6
 8011928:	4642      	mov	r2, r8
 801192a:	9102      	str	r1, [sp, #8]
 801192c:	4648      	mov	r0, r9
 801192e:	f7ff ff01 	bl	8011734 <VLine>
		// e
		VLine(Xpos, Ypos + width, width - 2, color);
 8011932:	eb07 0a05 	add.w	sl, r7, r5
 8011936:	fa1f fa8a 	uxth.w	sl, sl
 801193a:	4633      	mov	r3, r6
 801193c:	4622      	mov	r2, r4
 801193e:	4651      	mov	r1, sl
 8011940:	4658      	mov	r0, fp
 8011942:	f7ff fef7 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8011946:	f10a 0301 	add.w	r3, sl, #1
 801194a:	b29a      	uxth	r2, r3
 801194c:	4610      	mov	r0, r2
 801194e:	4633      	mov	r3, r6
 8011950:	4642      	mov	r2, r8
 8011952:	9003      	str	r0, [sp, #12]
 8011954:	4601      	mov	r1, r0
 8011956:	4648      	mov	r0, r9
 8011958:	f7ff feec 	bl	8011734 <VLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 801195c:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8011960:	b2ad      	uxth	r5, r5
 8011962:	1ea9      	subs	r1, r5, #2
 8011964:	4633      	mov	r3, r6
 8011966:	4622      	mov	r2, r4
 8011968:	b289      	uxth	r1, r1
 801196a:	4648      	mov	r0, r9
 801196c:	f7ff ff1e 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8011970:	3d03      	subs	r5, #3
 8011972:	4633      	mov	r3, r6
 8011974:	4642      	mov	r2, r8
 8011976:	b2a9      	uxth	r1, r5
 8011978:	9800      	ldr	r0, [sp, #0]
 801197a:	f7ff ff17 	bl	80117ac <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801197e:	445f      	add	r7, fp
 8011980:	b2bf      	uxth	r7, r7
 8011982:	1e7d      	subs	r5, r7, #1
 8011984:	b2ad      	uxth	r5, r5
 8011986:	4633      	mov	r3, r6
 8011988:	4622      	mov	r2, r4
 801198a:	4651      	mov	r1, sl
 801198c:	4628      	mov	r0, r5
 801198e:	f7ff fed1 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8011992:	3f02      	subs	r7, #2
 8011994:	b2bf      	uxth	r7, r7
 8011996:	4633      	mov	r3, r6
 8011998:	4642      	mov	r2, r8
 801199a:	9903      	ldr	r1, [sp, #12]
 801199c:	4638      	mov	r0, r7
 801199e:	f7ff fec9 	bl	8011734 <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 80119a2:	4633      	mov	r3, r6
 80119a4:	4622      	mov	r2, r4
 80119a6:	9901      	ldr	r1, [sp, #4]
 80119a8:	4628      	mov	r0, r5
 80119aa:	f7ff fec3 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 80119ae:	4633      	mov	r3, r6
 80119b0:	4642      	mov	r2, r8
 80119b2:	9902      	ldr	r1, [sp, #8]
 80119b4:	4638      	mov	r0, r7
 80119b6:	f7ff febd 	bl	8011734 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
		break;
	}
	}
}
 80119ba:	b005      	add	sp, #20
 80119bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 80119c0:	b29f      	uxth	r7, r3
 80119c2:	eb03 0a01 	add.w	sl, r3, r1
 80119c6:	fa1f fa8a 	uxth.w	sl, sl
 80119ca:	f10a 39ff 	add.w	r9, sl, #4294967295
 80119ce:	fa1f f989 	uxth.w	r9, r9
 80119d2:	eb03 0805 	add.w	r8, r3, r5
 80119d6:	fa1f f888 	uxth.w	r8, r8
 80119da:	1e9c      	subs	r4, r3, #2
 80119dc:	b2a4      	uxth	r4, r4
 80119de:	4633      	mov	r3, r6
 80119e0:	4622      	mov	r2, r4
 80119e2:	4641      	mov	r1, r8
 80119e4:	4648      	mov	r0, r9
 80119e6:	f7ff fea5 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 80119ea:	f1aa 0a02 	sub.w	sl, sl, #2
 80119ee:	fa1f fa8a 	uxth.w	sl, sl
 80119f2:	3f04      	subs	r7, #4
 80119f4:	b2bf      	uxth	r7, r7
 80119f6:	f108 0101 	add.w	r1, r8, #1
 80119fa:	4633      	mov	r3, r6
 80119fc:	463a      	mov	r2, r7
 80119fe:	b289      	uxth	r1, r1
 8011a00:	4650      	mov	r0, sl
 8011a02:	f7ff fe97 	bl	8011734 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011a06:	1c69      	adds	r1, r5, #1
 8011a08:	4633      	mov	r3, r6
 8011a0a:	4622      	mov	r2, r4
 8011a0c:	b289      	uxth	r1, r1
 8011a0e:	4648      	mov	r0, r9
 8011a10:	f7ff fe90 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011a14:	1ca9      	adds	r1, r5, #2
 8011a16:	4633      	mov	r3, r6
 8011a18:	463a      	mov	r2, r7
 8011a1a:	b289      	uxth	r1, r1
 8011a1c:	4650      	mov	r0, sl
 8011a1e:	f7ff fe89 	bl	8011734 <VLine>
		break;
 8011a22:	e7ca      	b.n	80119ba <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8011a24:	f101 0a01 	add.w	sl, r1, #1
 8011a28:	fa1f fa8a 	uxth.w	sl, sl
 8011a2c:	b29f      	uxth	r7, r3
 8011a2e:	1e9c      	subs	r4, r3, #2
 8011a30:	b2a4      	uxth	r4, r4
 8011a32:	4633      	mov	r3, r6
 8011a34:	4622      	mov	r2, r4
 8011a36:	4629      	mov	r1, r5
 8011a38:	4650      	mov	r0, sl
 8011a3a:	f7ff feb7 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8011a3e:	f10b 0302 	add.w	r3, fp, #2
 8011a42:	b298      	uxth	r0, r3
 8011a44:	1c6b      	adds	r3, r5, #1
 8011a46:	b299      	uxth	r1, r3
 8011a48:	f1a7 0904 	sub.w	r9, r7, #4
 8011a4c:	fa1f f989 	uxth.w	r9, r9
 8011a50:	4633      	mov	r3, r6
 8011a52:	464a      	mov	r2, r9
 8011a54:	9101      	str	r1, [sp, #4]
 8011a56:	9000      	str	r0, [sp, #0]
 8011a58:	f7ff fea8 	bl	80117ac <HLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 8011a5c:	eb07 0805 	add.w	r8, r7, r5
 8011a60:	fa1f f888 	uxth.w	r8, r8
 8011a64:	4633      	mov	r3, r6
 8011a66:	4622      	mov	r2, r4
 8011a68:	4641      	mov	r1, r8
 8011a6a:	4658      	mov	r0, fp
 8011a6c:	f7ff fe62 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8011a70:	f108 0101 	add.w	r1, r8, #1
 8011a74:	4633      	mov	r3, r6
 8011a76:	464a      	mov	r2, r9
 8011a78:	b289      	uxth	r1, r1
 8011a7a:	4650      	mov	r0, sl
 8011a7c:	f7ff fe5a 	bl	8011734 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8011a80:	eb05 0347 	add.w	r3, r5, r7, lsl #1
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	9302      	str	r3, [sp, #8]
 8011a88:	1e99      	subs	r1, r3, #2
 8011a8a:	4633      	mov	r3, r6
 8011a8c:	4622      	mov	r2, r4
 8011a8e:	b289      	uxth	r1, r1
 8011a90:	4650      	mov	r0, sl
 8011a92:	f7ff fe8b 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8011a96:	9b02      	ldr	r3, [sp, #8]
 8011a98:	1ed9      	subs	r1, r3, #3
 8011a9a:	4633      	mov	r3, r6
 8011a9c:	464a      	mov	r2, r9
 8011a9e:	b289      	uxth	r1, r1
 8011aa0:	9800      	ldr	r0, [sp, #0]
 8011aa2:	f7ff fe83 	bl	80117ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8011aa6:	f108 31ff 	add.w	r1, r8, #4294967295
 8011aaa:	4633      	mov	r3, r6
 8011aac:	4622      	mov	r2, r4
 8011aae:	b289      	uxth	r1, r1
 8011ab0:	4650      	mov	r0, sl
 8011ab2:	f7ff fe7b 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011ab6:	f1a8 0102 	sub.w	r1, r8, #2
 8011aba:	4633      	mov	r3, r6
 8011abc:	464a      	mov	r2, r9
 8011abe:	b289      	uxth	r1, r1
 8011ac0:	9800      	ldr	r0, [sp, #0]
 8011ac2:	f7ff fe73 	bl	80117ac <HLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011ac6:	445f      	add	r7, fp
 8011ac8:	b2bf      	uxth	r7, r7
 8011aca:	1e78      	subs	r0, r7, #1
 8011acc:	4633      	mov	r3, r6
 8011ace:	4622      	mov	r2, r4
 8011ad0:	9901      	ldr	r1, [sp, #4]
 8011ad2:	b280      	uxth	r0, r0
 8011ad4:	f7ff fe2e 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011ad8:	1ca9      	adds	r1, r5, #2
 8011ada:	3f02      	subs	r7, #2
 8011adc:	4633      	mov	r3, r6
 8011ade:	464a      	mov	r2, r9
 8011ae0:	b289      	uxth	r1, r1
 8011ae2:	b2b8      	uxth	r0, r7
 8011ae4:	f7ff fe26 	bl	8011734 <VLine>
		break;
 8011ae8:	e767      	b.n	80119ba <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8011aea:	1c4a      	adds	r2, r1, #1
 8011aec:	b290      	uxth	r0, r2
 8011aee:	b29f      	uxth	r7, r3
 8011af0:	1e9c      	subs	r4, r3, #2
 8011af2:	b2a4      	uxth	r4, r4
 8011af4:	4633      	mov	r3, r6
 8011af6:	4622      	mov	r2, r4
 8011af8:	4629      	mov	r1, r5
 8011afa:	9000      	str	r0, [sp, #0]
 8011afc:	f7ff fe56 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8011b00:	f10b 0a02 	add.w	sl, fp, #2
 8011b04:	fa1f fa8a 	uxth.w	sl, sl
 8011b08:	1c6b      	adds	r3, r5, #1
 8011b0a:	b299      	uxth	r1, r3
 8011b0c:	f1a7 0904 	sub.w	r9, r7, #4
 8011b10:	fa1f f989 	uxth.w	r9, r9
 8011b14:	4633      	mov	r3, r6
 8011b16:	464a      	mov	r2, r9
 8011b18:	9101      	str	r1, [sp, #4]
 8011b1a:	4650      	mov	r0, sl
 8011b1c:	f7ff fe46 	bl	80117ac <HLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8011b20:	eb05 0847 	add.w	r8, r5, r7, lsl #1
 8011b24:	fa1f f888 	uxth.w	r8, r8
 8011b28:	f1a8 0102 	sub.w	r1, r8, #2
 8011b2c:	4633      	mov	r3, r6
 8011b2e:	4622      	mov	r2, r4
 8011b30:	b289      	uxth	r1, r1
 8011b32:	9800      	ldr	r0, [sp, #0]
 8011b34:	f7ff fe3a 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8011b38:	f1a8 0103 	sub.w	r1, r8, #3
 8011b3c:	4633      	mov	r3, r6
 8011b3e:	464a      	mov	r2, r9
 8011b40:	b289      	uxth	r1, r1
 8011b42:	4650      	mov	r0, sl
 8011b44:	f7ff fe32 	bl	80117ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8011b48:	eb07 0805 	add.w	r8, r7, r5
 8011b4c:	fa1f f888 	uxth.w	r8, r8
 8011b50:	f108 31ff 	add.w	r1, r8, #4294967295
 8011b54:	4633      	mov	r3, r6
 8011b56:	4622      	mov	r2, r4
 8011b58:	b289      	uxth	r1, r1
 8011b5a:	9800      	ldr	r0, [sp, #0]
 8011b5c:	f7ff fe26 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011b60:	f1a8 0102 	sub.w	r1, r8, #2
 8011b64:	4633      	mov	r3, r6
 8011b66:	464a      	mov	r2, r9
 8011b68:	b289      	uxth	r1, r1
 8011b6a:	4650      	mov	r0, sl
 8011b6c:	f7ff fe1e 	bl	80117ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8011b70:	445f      	add	r7, fp
 8011b72:	b2bf      	uxth	r7, r7
 8011b74:	f107 3aff 	add.w	sl, r7, #4294967295
 8011b78:	fa1f fa8a 	uxth.w	sl, sl
 8011b7c:	4633      	mov	r3, r6
 8011b7e:	4622      	mov	r2, r4
 8011b80:	4641      	mov	r1, r8
 8011b82:	4650      	mov	r0, sl
 8011b84:	f7ff fdd6 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8011b88:	3f02      	subs	r7, #2
 8011b8a:	b2bf      	uxth	r7, r7
 8011b8c:	f108 0101 	add.w	r1, r8, #1
 8011b90:	4633      	mov	r3, r6
 8011b92:	464a      	mov	r2, r9
 8011b94:	b289      	uxth	r1, r1
 8011b96:	4638      	mov	r0, r7
 8011b98:	f7ff fdcc 	bl	8011734 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011b9c:	4633      	mov	r3, r6
 8011b9e:	4622      	mov	r2, r4
 8011ba0:	9901      	ldr	r1, [sp, #4]
 8011ba2:	4650      	mov	r0, sl
 8011ba4:	f7ff fdc6 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011ba8:	1ca9      	adds	r1, r5, #2
 8011baa:	4633      	mov	r3, r6
 8011bac:	464a      	mov	r2, r9
 8011bae:	b289      	uxth	r1, r1
 8011bb0:	4638      	mov	r0, r7
 8011bb2:	f7ff fdbf 	bl	8011734 <VLine>
		break;
 8011bb6:	e700      	b.n	80119ba <DrawDigit+0x10a>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8011bb8:	f105 0a01 	add.w	sl, r5, #1
 8011bbc:	fa1f fa8a 	uxth.w	sl, sl
 8011bc0:	b29f      	uxth	r7, r3
 8011bc2:	1e9c      	subs	r4, r3, #2
 8011bc4:	b2a4      	uxth	r4, r4
 8011bc6:	4633      	mov	r3, r6
 8011bc8:	4622      	mov	r2, r4
 8011bca:	4651      	mov	r1, sl
 8011bcc:	4658      	mov	r0, fp
 8011bce:	f7ff fdb1 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8011bd2:	f10b 0301 	add.w	r3, fp, #1
 8011bd6:	b298      	uxth	r0, r3
 8011bd8:	f105 0902 	add.w	r9, r5, #2
 8011bdc:	fa1f f989 	uxth.w	r9, r9
 8011be0:	f1a7 0804 	sub.w	r8, r7, #4
 8011be4:	fa1f f888 	uxth.w	r8, r8
 8011be8:	4633      	mov	r3, r6
 8011bea:	4642      	mov	r2, r8
 8011bec:	4649      	mov	r1, r9
 8011bee:	9000      	str	r0, [sp, #0]
 8011bf0:	f7ff fda0 	bl	8011734 <VLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8011bf4:	443d      	add	r5, r7
 8011bf6:	b2ad      	uxth	r5, r5
 8011bf8:	1e69      	subs	r1, r5, #1
 8011bfa:	4633      	mov	r3, r6
 8011bfc:	4622      	mov	r2, r4
 8011bfe:	b289      	uxth	r1, r1
 8011c00:	9800      	ldr	r0, [sp, #0]
 8011c02:	f7ff fdd3 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011c06:	1ea9      	subs	r1, r5, #2
 8011c08:	f10b 0002 	add.w	r0, fp, #2
 8011c0c:	4633      	mov	r3, r6
 8011c0e:	4642      	mov	r2, r8
 8011c10:	b289      	uxth	r1, r1
 8011c12:	b280      	uxth	r0, r0
 8011c14:	f7ff fdca 	bl	80117ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8011c18:	445f      	add	r7, fp
 8011c1a:	b2bf      	uxth	r7, r7
 8011c1c:	f107 3bff 	add.w	fp, r7, #4294967295
 8011c20:	fa1f fb8b 	uxth.w	fp, fp
 8011c24:	4633      	mov	r3, r6
 8011c26:	4622      	mov	r2, r4
 8011c28:	4629      	mov	r1, r5
 8011c2a:	4658      	mov	r0, fp
 8011c2c:	f7ff fd82 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8011c30:	3f02      	subs	r7, #2
 8011c32:	b2bf      	uxth	r7, r7
 8011c34:	3501      	adds	r5, #1
 8011c36:	4633      	mov	r3, r6
 8011c38:	4642      	mov	r2, r8
 8011c3a:	b2a9      	uxth	r1, r5
 8011c3c:	4638      	mov	r0, r7
 8011c3e:	f7ff fd79 	bl	8011734 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011c42:	4633      	mov	r3, r6
 8011c44:	4622      	mov	r2, r4
 8011c46:	4651      	mov	r1, sl
 8011c48:	4658      	mov	r0, fp
 8011c4a:	f7ff fd73 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011c4e:	4633      	mov	r3, r6
 8011c50:	4642      	mov	r2, r8
 8011c52:	4649      	mov	r1, r9
 8011c54:	4638      	mov	r0, r7
 8011c56:	f7ff fd6d 	bl	8011734 <VLine>
		break;
 8011c5a:	e6ae      	b.n	80119ba <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8011c5c:	f101 0901 	add.w	r9, r1, #1
 8011c60:	fa1f f989 	uxth.w	r9, r9
 8011c64:	b29f      	uxth	r7, r3
 8011c66:	1e9c      	subs	r4, r3, #2
 8011c68:	b2a4      	uxth	r4, r4
 8011c6a:	4633      	mov	r3, r6
 8011c6c:	4622      	mov	r2, r4
 8011c6e:	4629      	mov	r1, r5
 8011c70:	4648      	mov	r0, r9
 8011c72:	f7ff fd9b 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8011c76:	f10b 0302 	add.w	r3, fp, #2
 8011c7a:	b298      	uxth	r0, r3
 8011c7c:	f105 0a01 	add.w	sl, r5, #1
 8011c80:	fa1f fa8a 	uxth.w	sl, sl
 8011c84:	f1a7 0804 	sub.w	r8, r7, #4
 8011c88:	fa1f f888 	uxth.w	r8, r8
 8011c8c:	4633      	mov	r3, r6
 8011c8e:	4642      	mov	r2, r8
 8011c90:	4651      	mov	r1, sl
 8011c92:	9000      	str	r0, [sp, #0]
 8011c94:	f7ff fd8a 	bl	80117ac <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8011c98:	4633      	mov	r3, r6
 8011c9a:	4622      	mov	r2, r4
 8011c9c:	4651      	mov	r1, sl
 8011c9e:	4658      	mov	r0, fp
 8011ca0:	f7ff fd48 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8011ca4:	1ca9      	adds	r1, r5, #2
 8011ca6:	4633      	mov	r3, r6
 8011ca8:	4642      	mov	r2, r8
 8011caa:	b289      	uxth	r1, r1
 8011cac:	4648      	mov	r0, r9
 8011cae:	f7ff fd41 	bl	8011734 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8011cb2:	eb05 0a47 	add.w	sl, r5, r7, lsl #1
 8011cb6:	fa1f fa8a 	uxth.w	sl, sl
 8011cba:	f1aa 0102 	sub.w	r1, sl, #2
 8011cbe:	4633      	mov	r3, r6
 8011cc0:	4622      	mov	r2, r4
 8011cc2:	b289      	uxth	r1, r1
 8011cc4:	4648      	mov	r0, r9
 8011cc6:	f7ff fd71 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8011cca:	f1aa 0103 	sub.w	r1, sl, #3
 8011cce:	4633      	mov	r3, r6
 8011cd0:	4642      	mov	r2, r8
 8011cd2:	b289      	uxth	r1, r1
 8011cd4:	f8dd a000 	ldr.w	sl, [sp]
 8011cd8:	4650      	mov	r0, sl
 8011cda:	f7ff fd67 	bl	80117ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8011cde:	443d      	add	r5, r7
 8011ce0:	b2ad      	uxth	r5, r5
 8011ce2:	1e69      	subs	r1, r5, #1
 8011ce4:	4633      	mov	r3, r6
 8011ce6:	4622      	mov	r2, r4
 8011ce8:	b289      	uxth	r1, r1
 8011cea:	4648      	mov	r0, r9
 8011cec:	f7ff fd5e 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011cf0:	1ea9      	subs	r1, r5, #2
 8011cf2:	4633      	mov	r3, r6
 8011cf4:	4642      	mov	r2, r8
 8011cf6:	b289      	uxth	r1, r1
 8011cf8:	4650      	mov	r0, sl
 8011cfa:	f7ff fd57 	bl	80117ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8011cfe:	445f      	add	r7, fp
 8011d00:	b2bf      	uxth	r7, r7
 8011d02:	1e78      	subs	r0, r7, #1
 8011d04:	4633      	mov	r3, r6
 8011d06:	4622      	mov	r2, r4
 8011d08:	4629      	mov	r1, r5
 8011d0a:	b280      	uxth	r0, r0
 8011d0c:	f7ff fd12 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8011d10:	3501      	adds	r5, #1
 8011d12:	3f02      	subs	r7, #2
 8011d14:	4633      	mov	r3, r6
 8011d16:	4642      	mov	r2, r8
 8011d18:	b2a9      	uxth	r1, r5
 8011d1a:	b2b8      	uxth	r0, r7
 8011d1c:	f7ff fd0a 	bl	8011734 <VLine>
		break;
 8011d20:	e64b      	b.n	80119ba <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8011d22:	f101 0a01 	add.w	sl, r1, #1
 8011d26:	fa1f fa8a 	uxth.w	sl, sl
 8011d2a:	b29f      	uxth	r7, r3
 8011d2c:	1e9c      	subs	r4, r3, #2
 8011d2e:	b2a4      	uxth	r4, r4
 8011d30:	4633      	mov	r3, r6
 8011d32:	4622      	mov	r2, r4
 8011d34:	4629      	mov	r1, r5
 8011d36:	4650      	mov	r0, sl
 8011d38:	f7ff fd38 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8011d3c:	f10b 0302 	add.w	r3, fp, #2
 8011d40:	b298      	uxth	r0, r3
 8011d42:	f105 0901 	add.w	r9, r5, #1
 8011d46:	fa1f f989 	uxth.w	r9, r9
 8011d4a:	f1a7 0804 	sub.w	r8, r7, #4
 8011d4e:	fa1f f888 	uxth.w	r8, r8
 8011d52:	4633      	mov	r3, r6
 8011d54:	4642      	mov	r2, r8
 8011d56:	4649      	mov	r1, r9
 8011d58:	9000      	str	r0, [sp, #0]
 8011d5a:	f7ff fd27 	bl	80117ac <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8011d5e:	4633      	mov	r3, r6
 8011d60:	4622      	mov	r2, r4
 8011d62:	4649      	mov	r1, r9
 8011d64:	4658      	mov	r0, fp
 8011d66:	f7ff fce5 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8011d6a:	1ca9      	adds	r1, r5, #2
 8011d6c:	4633      	mov	r3, r6
 8011d6e:	4642      	mov	r2, r8
 8011d70:	b289      	uxth	r1, r1
 8011d72:	4650      	mov	r0, sl
 8011d74:	f7ff fcde 	bl	8011734 <VLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 8011d78:	eb07 0905 	add.w	r9, r7, r5
 8011d7c:	fa1f f989 	uxth.w	r9, r9
 8011d80:	4633      	mov	r3, r6
 8011d82:	4622      	mov	r2, r4
 8011d84:	4649      	mov	r1, r9
 8011d86:	4658      	mov	r0, fp
 8011d88:	f7ff fcd4 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8011d8c:	f109 0301 	add.w	r3, r9, #1
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	4619      	mov	r1, r3
 8011d94:	4633      	mov	r3, r6
 8011d96:	4642      	mov	r2, r8
 8011d98:	9101      	str	r1, [sp, #4]
 8011d9a:	4650      	mov	r0, sl
 8011d9c:	f7ff fcca 	bl	8011734 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8011da0:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8011da4:	b2ad      	uxth	r5, r5
 8011da6:	1ea9      	subs	r1, r5, #2
 8011da8:	4633      	mov	r3, r6
 8011daa:	4622      	mov	r2, r4
 8011dac:	b289      	uxth	r1, r1
 8011dae:	4650      	mov	r0, sl
 8011db0:	f7ff fcfc 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8011db4:	3d03      	subs	r5, #3
 8011db6:	4633      	mov	r3, r6
 8011db8:	4642      	mov	r2, r8
 8011dba:	b2a9      	uxth	r1, r5
 8011dbc:	9d00      	ldr	r5, [sp, #0]
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	f7ff fcf4 	bl	80117ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8011dc4:	f109 31ff 	add.w	r1, r9, #4294967295
 8011dc8:	4633      	mov	r3, r6
 8011dca:	4622      	mov	r2, r4
 8011dcc:	b289      	uxth	r1, r1
 8011dce:	4650      	mov	r0, sl
 8011dd0:	f7ff fcec 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011dd4:	f1a9 0102 	sub.w	r1, r9, #2
 8011dd8:	4633      	mov	r3, r6
 8011dda:	4642      	mov	r2, r8
 8011ddc:	b289      	uxth	r1, r1
 8011dde:	4628      	mov	r0, r5
 8011de0:	f7ff fce4 	bl	80117ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8011de4:	445f      	add	r7, fp
 8011de6:	b2bf      	uxth	r7, r7
 8011de8:	1e78      	subs	r0, r7, #1
 8011dea:	4633      	mov	r3, r6
 8011dec:	4622      	mov	r2, r4
 8011dee:	4649      	mov	r1, r9
 8011df0:	b280      	uxth	r0, r0
 8011df2:	f7ff fc9f 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8011df6:	3f02      	subs	r7, #2
 8011df8:	4633      	mov	r3, r6
 8011dfa:	4642      	mov	r2, r8
 8011dfc:	9901      	ldr	r1, [sp, #4]
 8011dfe:	b2b8      	uxth	r0, r7
 8011e00:	f7ff fc98 	bl	8011734 <VLine>
		break;
 8011e04:	e5d9      	b.n	80119ba <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8011e06:	b29f      	uxth	r7, r3
 8011e08:	1e9c      	subs	r4, r3, #2
 8011e0a:	b2a4      	uxth	r4, r4
 8011e0c:	1c48      	adds	r0, r1, #1
 8011e0e:	4633      	mov	r3, r6
 8011e10:	4622      	mov	r2, r4
 8011e12:	4629      	mov	r1, r5
 8011e14:	b280      	uxth	r0, r0
 8011e16:	f7ff fcc9 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8011e1a:	f105 0a01 	add.w	sl, r5, #1
 8011e1e:	fa1f fa8a 	uxth.w	sl, sl
 8011e22:	f1a7 0904 	sub.w	r9, r7, #4
 8011e26:	fa1f f989 	uxth.w	r9, r9
 8011e2a:	f10b 0002 	add.w	r0, fp, #2
 8011e2e:	4633      	mov	r3, r6
 8011e30:	464a      	mov	r2, r9
 8011e32:	4651      	mov	r1, sl
 8011e34:	b280      	uxth	r0, r0
 8011e36:	f7ff fcb9 	bl	80117ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8011e3a:	eb07 080b 	add.w	r8, r7, fp
 8011e3e:	fa1f f888 	uxth.w	r8, r8
 8011e42:	f108 3bff 	add.w	fp, r8, #4294967295
 8011e46:	fa1f fb8b 	uxth.w	fp, fp
 8011e4a:	442f      	add	r7, r5
 8011e4c:	b2bf      	uxth	r7, r7
 8011e4e:	4633      	mov	r3, r6
 8011e50:	4622      	mov	r2, r4
 8011e52:	4639      	mov	r1, r7
 8011e54:	4658      	mov	r0, fp
 8011e56:	f7ff fc6d 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8011e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8011e5e:	fa1f f888 	uxth.w	r8, r8
 8011e62:	3701      	adds	r7, #1
 8011e64:	4633      	mov	r3, r6
 8011e66:	464a      	mov	r2, r9
 8011e68:	b2b9      	uxth	r1, r7
 8011e6a:	4640      	mov	r0, r8
 8011e6c:	f7ff fc62 	bl	8011734 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011e70:	4633      	mov	r3, r6
 8011e72:	4622      	mov	r2, r4
 8011e74:	4651      	mov	r1, sl
 8011e76:	4658      	mov	r0, fp
 8011e78:	f7ff fc5c 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011e7c:	1ca9      	adds	r1, r5, #2
 8011e7e:	4633      	mov	r3, r6
 8011e80:	464a      	mov	r2, r9
 8011e82:	b289      	uxth	r1, r1
 8011e84:	4640      	mov	r0, r8
 8011e86:	f7ff fc55 	bl	8011734 <VLine>
		break;
 8011e8a:	e596      	b.n	80119ba <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8011e8c:	f101 0a01 	add.w	sl, r1, #1
 8011e90:	fa1f fa8a 	uxth.w	sl, sl
 8011e94:	b29f      	uxth	r7, r3
 8011e96:	1e9c      	subs	r4, r3, #2
 8011e98:	b2a4      	uxth	r4, r4
 8011e9a:	4633      	mov	r3, r6
 8011e9c:	4622      	mov	r2, r4
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	4650      	mov	r0, sl
 8011ea2:	f7ff fc83 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8011ea6:	f10b 0302 	add.w	r3, fp, #2
 8011eaa:	b298      	uxth	r0, r3
 8011eac:	1c6b      	adds	r3, r5, #1
 8011eae:	b299      	uxth	r1, r3
 8011eb0:	f1a7 0804 	sub.w	r8, r7, #4
 8011eb4:	fa1f f888 	uxth.w	r8, r8
 8011eb8:	4633      	mov	r3, r6
 8011eba:	4642      	mov	r2, r8
 8011ebc:	4689      	mov	r9, r1
 8011ebe:	9000      	str	r0, [sp, #0]
 8011ec0:	f7ff fc74 	bl	80117ac <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8011ec4:	4633      	mov	r3, r6
 8011ec6:	4622      	mov	r2, r4
 8011ec8:	f8cd 9004 	str.w	r9, [sp, #4]
 8011ecc:	4649      	mov	r1, r9
 8011ece:	4658      	mov	r0, fp
 8011ed0:	f7ff fc30 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8011ed4:	1cab      	adds	r3, r5, #2
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	4618      	mov	r0, r3
 8011eda:	4633      	mov	r3, r6
 8011edc:	4642      	mov	r2, r8
 8011ede:	9002      	str	r0, [sp, #8]
 8011ee0:	4601      	mov	r1, r0
 8011ee2:	4650      	mov	r0, sl
 8011ee4:	f7ff fc26 	bl	8011734 <VLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 8011ee8:	eb07 0905 	add.w	r9, r7, r5
 8011eec:	fa1f f989 	uxth.w	r9, r9
 8011ef0:	4633      	mov	r3, r6
 8011ef2:	4622      	mov	r2, r4
 8011ef4:	4649      	mov	r1, r9
 8011ef6:	4658      	mov	r0, fp
 8011ef8:	f7ff fc1c 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8011efc:	f109 0301 	add.w	r3, r9, #1
 8011f00:	b29b      	uxth	r3, r3
 8011f02:	4618      	mov	r0, r3
 8011f04:	4633      	mov	r3, r6
 8011f06:	4642      	mov	r2, r8
 8011f08:	9003      	str	r0, [sp, #12]
 8011f0a:	4601      	mov	r1, r0
 8011f0c:	4650      	mov	r0, sl
 8011f0e:	f7ff fc11 	bl	8011734 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8011f12:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8011f16:	b2ad      	uxth	r5, r5
 8011f18:	1ea9      	subs	r1, r5, #2
 8011f1a:	4633      	mov	r3, r6
 8011f1c:	4622      	mov	r2, r4
 8011f1e:	b289      	uxth	r1, r1
 8011f20:	4650      	mov	r0, sl
 8011f22:	f7ff fc43 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8011f26:	3d03      	subs	r5, #3
 8011f28:	4633      	mov	r3, r6
 8011f2a:	4642      	mov	r2, r8
 8011f2c:	b2a9      	uxth	r1, r5
 8011f2e:	9d00      	ldr	r5, [sp, #0]
 8011f30:	4628      	mov	r0, r5
 8011f32:	f7ff fc3b 	bl	80117ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8011f36:	f109 31ff 	add.w	r1, r9, #4294967295
 8011f3a:	4633      	mov	r3, r6
 8011f3c:	4622      	mov	r2, r4
 8011f3e:	b289      	uxth	r1, r1
 8011f40:	4650      	mov	r0, sl
 8011f42:	f7ff fc33 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011f46:	f1a9 0102 	sub.w	r1, r9, #2
 8011f4a:	4633      	mov	r3, r6
 8011f4c:	4642      	mov	r2, r8
 8011f4e:	b289      	uxth	r1, r1
 8011f50:	4628      	mov	r0, r5
 8011f52:	f7ff fc2b 	bl	80117ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8011f56:	445f      	add	r7, fp
 8011f58:	b2bf      	uxth	r7, r7
 8011f5a:	1e7d      	subs	r5, r7, #1
 8011f5c:	b2ad      	uxth	r5, r5
 8011f5e:	4633      	mov	r3, r6
 8011f60:	4622      	mov	r2, r4
 8011f62:	4649      	mov	r1, r9
 8011f64:	4628      	mov	r0, r5
 8011f66:	f7ff fbe5 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8011f6a:	3f02      	subs	r7, #2
 8011f6c:	b2bf      	uxth	r7, r7
 8011f6e:	4633      	mov	r3, r6
 8011f70:	4642      	mov	r2, r8
 8011f72:	9903      	ldr	r1, [sp, #12]
 8011f74:	4638      	mov	r0, r7
 8011f76:	f7ff fbdd 	bl	8011734 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011f7a:	4633      	mov	r3, r6
 8011f7c:	4622      	mov	r2, r4
 8011f7e:	9901      	ldr	r1, [sp, #4]
 8011f80:	4628      	mov	r0, r5
 8011f82:	f7ff fbd7 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011f86:	4633      	mov	r3, r6
 8011f88:	4642      	mov	r2, r8
 8011f8a:	9902      	ldr	r1, [sp, #8]
 8011f8c:	4638      	mov	r0, r7
 8011f8e:	f7ff fbd1 	bl	8011734 <VLine>
		break;
 8011f92:	e512      	b.n	80119ba <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8011f94:	f101 0901 	add.w	r9, r1, #1
 8011f98:	fa1f f989 	uxth.w	r9, r9
 8011f9c:	b29f      	uxth	r7, r3
 8011f9e:	1e9c      	subs	r4, r3, #2
 8011fa0:	b2a4      	uxth	r4, r4
 8011fa2:	4633      	mov	r3, r6
 8011fa4:	4622      	mov	r2, r4
 8011fa6:	4629      	mov	r1, r5
 8011fa8:	4648      	mov	r0, r9
 8011faa:	f7ff fbff 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8011fae:	f10b 0302 	add.w	r3, fp, #2
 8011fb2:	b298      	uxth	r0, r3
 8011fb4:	1c6b      	adds	r3, r5, #1
 8011fb6:	b299      	uxth	r1, r3
 8011fb8:	f1a7 0804 	sub.w	r8, r7, #4
 8011fbc:	fa1f f888 	uxth.w	r8, r8
 8011fc0:	4633      	mov	r3, r6
 8011fc2:	4642      	mov	r2, r8
 8011fc4:	468a      	mov	sl, r1
 8011fc6:	9000      	str	r0, [sp, #0]
 8011fc8:	f7ff fbf0 	bl	80117ac <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8011fcc:	4633      	mov	r3, r6
 8011fce:	4622      	mov	r2, r4
 8011fd0:	f8cd a004 	str.w	sl, [sp, #4]
 8011fd4:	4651      	mov	r1, sl
 8011fd6:	4658      	mov	r0, fp
 8011fd8:	f7ff fbac 	bl	8011734 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8011fdc:	1cab      	adds	r3, r5, #2
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	4633      	mov	r3, r6
 8011fe4:	4642      	mov	r2, r8
 8011fe6:	9002      	str	r0, [sp, #8]
 8011fe8:	4601      	mov	r1, r0
 8011fea:	4648      	mov	r0, r9
 8011fec:	f7ff fba2 	bl	8011734 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8011ff0:	eb05 0a47 	add.w	sl, r5, r7, lsl #1
 8011ff4:	fa1f fa8a 	uxth.w	sl, sl
 8011ff8:	f1aa 0102 	sub.w	r1, sl, #2
 8011ffc:	4633      	mov	r3, r6
 8011ffe:	4622      	mov	r2, r4
 8012000:	b289      	uxth	r1, r1
 8012002:	4648      	mov	r0, r9
 8012004:	f7ff fbd2 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8012008:	f1aa 0103 	sub.w	r1, sl, #3
 801200c:	4633      	mov	r3, r6
 801200e:	4642      	mov	r2, r8
 8012010:	b289      	uxth	r1, r1
 8012012:	f8dd a000 	ldr.w	sl, [sp]
 8012016:	4650      	mov	r0, sl
 8012018:	f7ff fbc8 	bl	80117ac <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 801201c:	443d      	add	r5, r7
 801201e:	b2ad      	uxth	r5, r5
 8012020:	1e69      	subs	r1, r5, #1
 8012022:	4633      	mov	r3, r6
 8012024:	4622      	mov	r2, r4
 8012026:	b289      	uxth	r1, r1
 8012028:	4648      	mov	r0, r9
 801202a:	f7ff fbbf 	bl	80117ac <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 801202e:	1ea9      	subs	r1, r5, #2
 8012030:	4633      	mov	r3, r6
 8012032:	4642      	mov	r2, r8
 8012034:	b289      	uxth	r1, r1
 8012036:	4650      	mov	r0, sl
 8012038:	f7ff fbb8 	bl	80117ac <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801203c:	445f      	add	r7, fp
 801203e:	b2bf      	uxth	r7, r7
 8012040:	f107 39ff 	add.w	r9, r7, #4294967295
 8012044:	fa1f f989 	uxth.w	r9, r9
 8012048:	4633      	mov	r3, r6
 801204a:	4622      	mov	r2, r4
 801204c:	4629      	mov	r1, r5
 801204e:	4648      	mov	r0, r9
 8012050:	f7ff fb70 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8012054:	3f02      	subs	r7, #2
 8012056:	b2bf      	uxth	r7, r7
 8012058:	3501      	adds	r5, #1
 801205a:	4633      	mov	r3, r6
 801205c:	4642      	mov	r2, r8
 801205e:	b2a9      	uxth	r1, r5
 8012060:	4638      	mov	r0, r7
 8012062:	f7ff fb67 	bl	8011734 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8012066:	4633      	mov	r3, r6
 8012068:	4622      	mov	r2, r4
 801206a:	9901      	ldr	r1, [sp, #4]
 801206c:	4648      	mov	r0, r9
 801206e:	f7ff fb61 	bl	8011734 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8012072:	4633      	mov	r3, r6
 8012074:	4642      	mov	r2, r8
 8012076:	9902      	ldr	r1, [sp, #8]
 8012078:	4638      	mov	r0, r7
 801207a:	f7ff fb5b 	bl	8011734 <VLine>
}
 801207e:	e49c      	b.n	80119ba <DrawDigit+0x10a>

08012080 <DrawLowSpectrum>:
{
 8012080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012082:	b083      	sub	sp, #12
	for(i = 0; i < 400; i++)
 8012084:	2400      	movs	r4, #0
 8012086:	e013      	b.n	80120b0 <DrawLowSpectrum+0x30>
		color = (uint32_t)(lowp_wavebuffer[i] & 0xE0); // read color data - first 3 bits
 8012088:	4b68      	ldr	r3, [pc, #416]	; (801222c <DrawLowSpectrum+0x1ac>)
 801208a:	5d1a      	ldrb	r2, [r3, r4]
 801208c:	f002 03e0 	and.w	r3, r2, #224	; 0xe0
		color |= (uint32_t)(lowp_wavebuffer[i] & 0xE0);
 8012090:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
		color <<= 8;
 8012094:	021b      	lsls	r3, r3, #8
		VLine(i + 40, 250 - height, height, color);
 8012096:	f002 021f 	and.w	r2, r2, #31
 801209a:	f1c2 01fa 	rsb	r1, r2, #250	; 0xfa
 801209e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80120a2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80120a6:	b289      	uxth	r1, r1
 80120a8:	b280      	uxth	r0, r0
 80120aa:	f7ff fb43 	bl	8011734 <VLine>
	for(i = 0; i < 400; i++)
 80120ae:	3401      	adds	r4, #1
 80120b0:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 80120b4:	d3e8      	bcc.n	8012088 <DrawLowSpectrum+0x8>
	VLine(397, 174, 32, 0x00FFFFFF);
 80120b6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80120ba:	2220      	movs	r2, #32
 80120bc:	21ae      	movs	r1, #174	; 0xae
 80120be:	f240 108d 	movw	r0, #397	; 0x18d
 80120c2:	f7ff fb37 	bl	8011734 <VLine>
	VLine(453, 174, 32, 0x00FFFFFF);
 80120c6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80120ca:	2220      	movs	r2, #32
 80120cc:	21ae      	movs	r1, #174	; 0xae
 80120ce:	f240 10c5 	movw	r0, #453	; 0x1c5
 80120d2:	f7ff fb2f 	bl	8011734 <VLine>
	HLine(399, 172, 53, 0x00FFFFFF);
 80120d6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80120da:	2235      	movs	r2, #53	; 0x35
 80120dc:	21ac      	movs	r1, #172	; 0xac
 80120de:	f240 108f 	movw	r0, #399	; 0x18f
 80120e2:	f7ff fb63 	bl	80117ac <HLine>
	HLine(399, 207, 53, 0x00FFFFFF);
 80120e6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80120ea:	2235      	movs	r2, #53	; 0x35
 80120ec:	21cf      	movs	r1, #207	; 0xcf
 80120ee:	f240 108f 	movw	r0, #399	; 0x18f
 80120f2:	f7ff fb5b 	bl	80117ac <HLine>
	Pixel(398, 173, 0xFFFF);
 80120f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120fa:	21ad      	movs	r1, #173	; 0xad
 80120fc:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8012100:	f7ff fbc0 	bl	8011884 <Pixel>
	Pixel(452, 173, 0xFFFF);
 8012104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012108:	21ad      	movs	r1, #173	; 0xad
 801210a:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
 801210e:	f7ff fbb9 	bl	8011884 <Pixel>
	Pixel(398, 206, 0xFFFF);
 8012112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012116:	21ce      	movs	r1, #206	; 0xce
 8012118:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 801211c:	f7ff fbb2 	bl	8011884 <Pixel>
	Pixel(452, 206, 0xFFFF);
 8012120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012124:	21ce      	movs	r1, #206	; 0xce
 8012126:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
 801212a:	f7ff fbab 	bl	8011884 <Pixel>
	DrawElement(20, 5, 430, 205, 0x00FFFFFF, bpm);
 801212e:	4b40      	ldr	r3, [pc, #256]	; (8012230 <DrawLowSpectrum+0x1b0>)
 8012130:	9301      	str	r3, [sp, #4]
 8012132:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 8012136:	9400      	str	r4, [sp, #0]
 8012138:	23cd      	movs	r3, #205	; 0xcd
 801213a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801213e:	2105      	movs	r1, #5
 8012140:	2014      	movs	r0, #20
 8012142:	f7ff faaf 	bl	80116a4 <DrawElement>
	VLine(40, 252, 4, 0x00FFFFFF);
 8012146:	4623      	mov	r3, r4
 8012148:	2204      	movs	r2, #4
 801214a:	21fc      	movs	r1, #252	; 0xfc
 801214c:	2028      	movs	r0, #40	; 0x28
 801214e:	f7ff faf1 	bl	8011734 <VLine>
	VLine(440, 252, 4, 0x00FFFFFF);
 8012152:	4623      	mov	r3, r4
 8012154:	2204      	movs	r2, #4
 8012156:	21fc      	movs	r1, #252	; 0xfc
 8012158:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 801215c:	f7ff faea 	bl	8011734 <VLine>
	HLine(40, 252, 400, 0x00FFFFFF);
 8012160:	4623      	mov	r3, r4
 8012162:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012166:	21fc      	movs	r1, #252	; 0xfc
 8012168:	2028      	movs	r0, #40	; 0x28
 801216a:	f7ff fb1f 	bl	80117ac <HLine>
	HLine(40, 256, 401, 0x00FFFFFF);
 801216e:	4623      	mov	r3, r4
 8012170:	f240 1291 	movw	r2, #401	; 0x191
 8012174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012178:	2028      	movs	r0, #40	; 0x28
 801217a:	f7ff fb17 	bl	80117ac <HLine>
	if(display.timemode == 0) {
 801217e:	4b2d      	ldr	r3, [pc, #180]	; (8012234 <DrawLowSpectrum+0x1b4>)
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	b19b      	cbz	r3, 80121ac <DrawLowSpectrum+0x12c>
	if(display.trackbarmode == 0) {
 8012184:	4b2b      	ldr	r3, [pc, #172]	; (8012234 <DrawLowSpectrum+0x1b4>)
 8012186:	791b      	ldrb	r3, [r3, #4]
 8012188:	b9d3      	cbnz	r3, 80121c0 <DrawLowSpectrum+0x140>
		Rectangle(file_pos+40, 253, 400-file_pos, 3, 0x00FFFFFF);
 801218a:	4b2b      	ldr	r3, [pc, #172]	; (8012238 <DrawLowSpectrum+0x1b8>)
 801218c:	881b      	ldrh	r3, [r3, #0]
 801218e:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8012192:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8012196:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	2303      	movs	r3, #3
 801219e:	b292      	uxth	r2, r2
 80121a0:	21fd      	movs	r1, #253	; 0xfd
 80121a2:	b280      	uxth	r0, r0
 80121a4:	f7ff fb42 	bl	801182c <Rectangle>
	for(i = 0; i < 400; i++)
 80121a8:	2400      	movs	r4, #0
 80121aa:	e025      	b.n	80121f8 <DrawLowSpectrum+0x178>
		DrawElement(37, 5, 84, 191, 0x00FFFFFF, remain);
 80121ac:	4b23      	ldr	r3, [pc, #140]	; (801223c <DrawLowSpectrum+0x1bc>)
 80121ae:	9301      	str	r3, [sp, #4]
 80121b0:	9400      	str	r4, [sp, #0]
 80121b2:	23bf      	movs	r3, #191	; 0xbf
 80121b4:	2254      	movs	r2, #84	; 0x54
 80121b6:	2105      	movs	r1, #5
 80121b8:	2025      	movs	r0, #37	; 0x25
 80121ba:	f7ff fa73 	bl	80116a4 <DrawElement>
 80121be:	e7e1      	b.n	8012184 <DrawLowSpectrum+0x104>
		Rectangle(40, 253, file_pos, 3, 0x00FFFFFF);
 80121c0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	2303      	movs	r3, #3
 80121c8:	4a1b      	ldr	r2, [pc, #108]	; (8012238 <DrawLowSpectrum+0x1b8>)
 80121ca:	8812      	ldrh	r2, [r2, #0]
 80121cc:	21fd      	movs	r1, #253	; 0xfd
 80121ce:	2028      	movs	r0, #40	; 0x28
 80121d0:	f7ff fb2c 	bl	801182c <Rectangle>
 80121d4:	e7e8      	b.n	80121a8 <DrawLowSpectrum+0x128>
			VLine(40 + rekordbox.elminticks[i], 260, 4, 0x00FFFFFF);
 80121d6:	f241 1268 	movw	r2, #4456	; 0x1168
 80121da:	4422      	add	r2, r4
 80121dc:	4b18      	ldr	r3, [pc, #96]	; (8012240 <DrawLowSpectrum+0x1c0>)
 80121de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80121e2:	8898      	ldrh	r0, [r3, #4]
 80121e4:	3028      	adds	r0, #40	; 0x28
 80121e6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80121ea:	2204      	movs	r2, #4
 80121ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80121f0:	b280      	uxth	r0, r0
 80121f2:	f7ff fa9f 	bl	8011734 <VLine>
		i++;
 80121f6:	3401      	adds	r4, #1
	while(i < rekordbox.minutes) {
 80121f8:	4b12      	ldr	r3, [pc, #72]	; (8012244 <DrawLowSpectrum+0x1c4>)
 80121fa:	f893 3354 	ldrb.w	r3, [r3, #852]	; 0x354
 80121fe:	42a3      	cmp	r3, r4
 8012200:	d922      	bls.n	8012248 <DrawLowSpectrum+0x1c8>
		if(display.timemode == 0) {
 8012202:	4b0c      	ldr	r3, [pc, #48]	; (8012234 <DrawLowSpectrum+0x1b4>)
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d1e5      	bne.n	80121d6 <DrawLowSpectrum+0x156>
			VLine(40 + rekordbox.remminticks[i], 260, 4, 0x00FFFFFF);
 801220a:	f241 1228 	movw	r2, #4392	; 0x1128
 801220e:	4422      	add	r2, r4
 8012210:	4b0b      	ldr	r3, [pc, #44]	; (8012240 <DrawLowSpectrum+0x1c0>)
 8012212:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8012216:	8898      	ldrh	r0, [r3, #4]
 8012218:	3028      	adds	r0, #40	; 0x28
 801221a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801221e:	2204      	movs	r2, #4
 8012220:	f44f 7182 	mov.w	r1, #260	; 0x104
 8012224:	b280      	uxth	r0, r0
 8012226:	f7ff fa85 	bl	8011734 <VLine>
 801222a:	e7e4      	b.n	80121f6 <DrawLowSpectrum+0x176>
 801222c:	2000e608 	.word	0x2000e608
 8012230:	0801e438 	.word	0x0801e438
 8012234:	200005f0 	.word	0x200005f0
 8012238:	2000e3d0 	.word	0x2000e3d0
 801223c:	0801eff8 	.word	0x0801eff8
 8012240:	20014620 	.word	0x20014620
 8012244:	20016620 	.word	0x20016620
	DrawElement(7, 8, 375, 204, 0x00FFFFFF, percent);
 8012248:	4bcb      	ldr	r3, [pc, #812]	; (8012578 <DrawLowSpectrum+0x4f8>)
 801224a:	9301      	str	r3, [sp, #4]
 801224c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012250:	9300      	str	r3, [sp, #0]
 8012252:	23cc      	movs	r3, #204	; 0xcc
 8012254:	f240 1277 	movw	r2, #375	; 0x177
 8012258:	2108      	movs	r1, #8
 801225a:	2007      	movs	r0, #7
 801225c:	f7ff fa22 	bl	80116a4 <DrawElement>
	if(trak.percent < 0) DrawElement(10, 2, 308, 195, 0x00FFFFFF, minus);
 8012260:	4bc6      	ldr	r3, [pc, #792]	; (801257c <DrawLowSpectrum+0x4fc>)
 8012262:	edd3 7a01 	vldr	s15, [r3, #4]
 8012266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801226e:	f100 81b6 	bmi.w	80125de <DrawLowSpectrum+0x55e>
	else DrawElement(10, 10, 308, 199, 0x00FFFFFF, plus);
 8012272:	4bc3      	ldr	r3, [pc, #780]	; (8012580 <DrawLowSpectrum+0x500>)
 8012274:	9301      	str	r3, [sp, #4]
 8012276:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801227a:	9300      	str	r3, [sp, #0]
 801227c:	23c7      	movs	r3, #199	; 0xc7
 801227e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8012282:	210a      	movs	r1, #10
 8012284:	4608      	mov	r0, r1
 8012286:	f7ff fa0d 	bl	80116a4 <DrawElement>
	uint16_t percent = (abs)(trak.percent * 10000);
 801228a:	4bbc      	ldr	r3, [pc, #752]	; (801257c <DrawLowSpectrum+0x4fc>)
 801228c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012290:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8012584 <DrawLowSpectrum+0x504>
 8012294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801229c:	ee17 4a90 	vmov	r4, s15
 80122a0:	2c00      	cmp	r4, #0
 80122a2:	bfb8      	it	lt
 80122a4:	4264      	neglt	r4, r4
 80122a6:	b2a5      	uxth	r5, r4
	if(display.pitchmode == 0) {
 80122a8:	4bb7      	ldr	r3, [pc, #732]	; (8012588 <DrawLowSpectrum+0x508>)
 80122aa:	785b      	ldrb	r3, [r3, #1]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	f000 81a3 	beq.w	80125f8 <DrawLowSpectrum+0x578>
	else if(display.pitchmode == 1) {
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	f000 821b 	beq.w	80126ee <DrawLowSpectrum+0x66e>
	else if(display.pitchmode == 2) {
 80122b8:	2b02      	cmp	r3, #2
 80122ba:	f000 8286 	beq.w	80127ca <DrawLowSpectrum+0x74a>
	else if(display.pitchmode == 3) {
 80122be:	2b03      	cmp	r3, #3
 80122c0:	f000 8302 	beq.w	80128c8 <DrawLowSpectrum+0x848>
	DrawElement(34, 5, 40, 178, 0x00FFFFFF, track);
 80122c4:	4bb1      	ldr	r3, [pc, #708]	; (801258c <DrawLowSpectrum+0x50c>)
 80122c6:	9301      	str	r3, [sp, #4]
 80122c8:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 80122cc:	9400      	str	r4, [sp, #0]
 80122ce:	23b2      	movs	r3, #178	; 0xb2
 80122d0:	2228      	movs	r2, #40	; 0x28
 80122d2:	2105      	movs	r1, #5
 80122d4:	2022      	movs	r0, #34	; 0x22
 80122d6:	f7ff f9e5 	bl	80116a4 <DrawElement>
	DrawElement(31, 5, 310, 178, 0x00FFFFFF, tempo);
 80122da:	4bad      	ldr	r3, [pc, #692]	; (8012590 <DrawLowSpectrum+0x510>)
 80122dc:	9301      	str	r3, [sp, #4]
 80122de:	9400      	str	r4, [sp, #0]
 80122e0:	23b2      	movs	r3, #178	; 0xb2
 80122e2:	f44f 729b 	mov.w	r2, #310	; 0x136
 80122e6:	2105      	movs	r1, #5
 80122e8:	201f      	movs	r0, #31
 80122ea:	f7ff f9db 	bl	80116a4 <DrawElement>
	if(display.cuemode == 1) {
 80122ee:	4ba6      	ldr	r3, [pc, #664]	; (8012588 <DrawLowSpectrum+0x508>)
 80122f0:	789b      	ldrb	r3, [r3, #2]
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	f000 833d 	beq.w	8012972 <DrawLowSpectrum+0x8f2>
	if(display.quantize == 1) {
 80122f8:	4ba3      	ldr	r3, [pc, #652]	; (8012588 <DrawLowSpectrum+0x508>)
 80122fa:	7c5b      	ldrb	r3, [r3, #17]
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	f000 8344 	beq.w	801298a <DrawLowSpectrum+0x90a>
	if(display.mastertempomode == 1) {
 8012302:	4ba1      	ldr	r3, [pc, #644]	; (8012588 <DrawLowSpectrum+0x508>)
 8012304:	795b      	ldrb	r3, [r3, #5]
 8012306:	2b01      	cmp	r3, #1
 8012308:	f000 834b 	beq.w	80129a2 <DrawLowSpectrum+0x922>
	DrawElement(15, 16, 165, 204, 0x00FFFFFF, minutes);
 801230c:	4ba1      	ldr	r3, [pc, #644]	; (8012594 <DrawLowSpectrum+0x514>)
 801230e:	9301      	str	r3, [sp, #4]
 8012310:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 8012314:	9400      	str	r4, [sp, #0]
 8012316:	23cc      	movs	r3, #204	; 0xcc
 8012318:	22a5      	movs	r2, #165	; 0xa5
 801231a:	2110      	movs	r1, #16
 801231c:	200f      	movs	r0, #15
 801231e:	f7ff f9c1 	bl	80116a4 <DrawElement>
	DrawElement(6, 7, 213, 204, 0x00FFFFFF, seconds);
 8012322:	4b9d      	ldr	r3, [pc, #628]	; (8012598 <DrawLowSpectrum+0x518>)
 8012324:	9301      	str	r3, [sp, #4]
 8012326:	9400      	str	r4, [sp, #0]
 8012328:	23cc      	movs	r3, #204	; 0xcc
 801232a:	22d5      	movs	r2, #213	; 0xd5
 801232c:	2107      	movs	r1, #7
 801232e:	2006      	movs	r0, #6
 8012330:	f7ff f9b8 	bl	80116a4 <DrawElement>
	DrawElement(5, 6, 252, 204, 0x00FFFFFF, frames);
 8012334:	4b99      	ldr	r3, [pc, #612]	; (801259c <DrawLowSpectrum+0x51c>)
 8012336:	9301      	str	r3, [sp, #4]
 8012338:	9400      	str	r4, [sp, #0]
 801233a:	23cc      	movs	r3, #204	; 0xcc
 801233c:	22fc      	movs	r2, #252	; 0xfc
 801233e:	2106      	movs	r1, #6
 8012340:	2005      	movs	r0, #5
 8012342:	f7ff f9af 	bl	80116a4 <DrawElement>
	DrawElement(3, 4, 252, 204, 0x00FFFFFF, point);
 8012346:	4b96      	ldr	r3, [pc, #600]	; (80125a0 <DrawLowSpectrum+0x520>)
 8012348:	9301      	str	r3, [sp, #4]
 801234a:	9400      	str	r4, [sp, #0]
 801234c:	23cc      	movs	r3, #204	; 0xcc
 801234e:	22fc      	movs	r2, #252	; 0xfc
 8012350:	2104      	movs	r1, #4
 8012352:	2003      	movs	r0, #3
 8012354:	f7ff f9a6 	bl	80116a4 <DrawElement>
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 8012358:	4d92      	ldr	r5, [pc, #584]	; (80125a4 <DrawLowSpectrum+0x524>)
 801235a:	682b      	ldr	r3, [r5, #0]
 801235c:	3301      	adds	r3, #1
 801235e:	4e92      	ldr	r6, [pc, #584]	; (80125a8 <DrawLowSpectrum+0x528>)
 8012360:	fb86 2003 	smull	r2, r0, r6, r3
 8012364:	17db      	asrs	r3, r3, #31
 8012366:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 801236a:	9400      	str	r4, [sp, #0]
 801236c:	230d      	movs	r3, #13
 801236e:	22b7      	movs	r2, #183	; 0xb7
 8012370:	2128      	movs	r1, #40	; 0x28
 8012372:	b2c0      	uxtb	r0, r0
 8012374:	f7ff fa9c 	bl	80118b0 <DrawDigit>
	DrawDigit((Track_number + 1) % 10, 60, 183, 13, 0x00FFFFFF);
 8012378:	682b      	ldr	r3, [r5, #0]
 801237a:	3301      	adds	r3, #1
 801237c:	fb86 1203 	smull	r1, r2, r6, r3
 8012380:	17d8      	asrs	r0, r3, #31
 8012382:	ebc0 00a2 	rsb	r0, r0, r2, asr #2
 8012386:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801238a:	0042      	lsls	r2, r0, #1
 801238c:	1a98      	subs	r0, r3, r2
 801238e:	9400      	str	r4, [sp, #0]
 8012390:	230d      	movs	r3, #13
 8012392:	22b7      	movs	r2, #183	; 0xb7
 8012394:	213c      	movs	r1, #60	; 0x3c
 8012396:	b2c0      	uxtb	r0, r0
 8012398:	f7ff fa8a 	bl	80118b0 <DrawDigit>
	if(display.timemode == 0) {
 801239c:	4b7a      	ldr	r3, [pc, #488]	; (8012588 <DrawLowSpectrum+0x508>)
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	f040 830d 	bne.w	80129c0 <DrawLowSpectrum+0x940>
		DrawDigit(rmin / 10, 134, 184, 11, 0x00FFFFFF);
 80123a6:	4e81      	ldr	r6, [pc, #516]	; (80125ac <DrawLowSpectrum+0x52c>)
 80123a8:	f996 3000 	ldrsb.w	r3, [r6]
 80123ac:	4d7e      	ldr	r5, [pc, #504]	; (80125a8 <DrawLowSpectrum+0x528>)
 80123ae:	fb85 2003 	smull	r2, r0, r5, r3
 80123b2:	17db      	asrs	r3, r3, #31
 80123b4:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 80123b8:	9400      	str	r4, [sp, #0]
 80123ba:	230b      	movs	r3, #11
 80123bc:	22b8      	movs	r2, #184	; 0xb8
 80123be:	2186      	movs	r1, #134	; 0x86
 80123c0:	b2c0      	uxtb	r0, r0
 80123c2:	f7ff fa75 	bl	80118b0 <DrawDigit>
		DrawDigit(rmin % 10, 148, 184, 11, 0x00FFFFFF);
 80123c6:	f996 2000 	ldrsb.w	r2, [r6]
 80123ca:	fb85 3102 	smull	r3, r1, r5, r2
 80123ce:	17d3      	asrs	r3, r2, #31
 80123d0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80123d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80123d8:	0058      	lsls	r0, r3, #1
 80123da:	1a10      	subs	r0, r2, r0
 80123dc:	9400      	str	r4, [sp, #0]
 80123de:	230b      	movs	r3, #11
 80123e0:	22b8      	movs	r2, #184	; 0xb8
 80123e2:	2194      	movs	r1, #148	; 0x94
 80123e4:	b2c0      	uxtb	r0, r0
 80123e6:	f7ff fa63 	bl	80118b0 <DrawDigit>
		DrawDigit(rsec / 10, 185, 184, 11, 0x00FFFFFF);
 80123ea:	4e71      	ldr	r6, [pc, #452]	; (80125b0 <DrawLowSpectrum+0x530>)
 80123ec:	f996 3000 	ldrsb.w	r3, [r6]
 80123f0:	fb85 2003 	smull	r2, r0, r5, r3
 80123f4:	17db      	asrs	r3, r3, #31
 80123f6:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 80123fa:	9400      	str	r4, [sp, #0]
 80123fc:	230b      	movs	r3, #11
 80123fe:	22b8      	movs	r2, #184	; 0xb8
 8012400:	21b9      	movs	r1, #185	; 0xb9
 8012402:	b2c0      	uxtb	r0, r0
 8012404:	f7ff fa54 	bl	80118b0 <DrawDigit>
		DrawDigit(rsec % 10, 199, 184, 11, 0x00FFFFFF);
 8012408:	f996 2000 	ldrsb.w	r2, [r6]
 801240c:	fb85 3102 	smull	r3, r1, r5, r2
 8012410:	17d3      	asrs	r3, r2, #31
 8012412:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8012416:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801241a:	0058      	lsls	r0, r3, #1
 801241c:	1a10      	subs	r0, r2, r0
 801241e:	9400      	str	r4, [sp, #0]
 8012420:	230b      	movs	r3, #11
 8012422:	22b8      	movs	r2, #184	; 0xb8
 8012424:	21c7      	movs	r1, #199	; 0xc7
 8012426:	b2c0      	uxtb	r0, r0
 8012428:	f7ff fa42 	bl	80118b0 <DrawDigit>
		DrawDigit(rfr / 20, 224, 184, 11, 0x00FFFFFF);
 801242c:	4e61      	ldr	r6, [pc, #388]	; (80125b4 <DrawLowSpectrum+0x534>)
 801242e:	f9b6 2000 	ldrsh.w	r2, [r6]
 8012432:	fb85 1302 	smull	r1, r3, r5, r2
 8012436:	17d2      	asrs	r2, r2, #31
 8012438:	ebc2 00e3 	rsb	r0, r2, r3, asr #3
 801243c:	9400      	str	r4, [sp, #0]
 801243e:	230b      	movs	r3, #11
 8012440:	22b8      	movs	r2, #184	; 0xb8
 8012442:	21e0      	movs	r1, #224	; 0xe0
 8012444:	b2c0      	uxtb	r0, r0
 8012446:	f7ff fa33 	bl	80118b0 <DrawDigit>
		DrawDigit((rfr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 801244a:	f9b6 3000 	ldrsh.w	r3, [r6]
 801244e:	2b00      	cmp	r3, #0
 8012450:	f2c0 82b4 	blt.w	80129bc <DrawLowSpectrum+0x93c>
 8012454:	105b      	asrs	r3, r3, #1
 8012456:	4954      	ldr	r1, [pc, #336]	; (80125a8 <DrawLowSpectrum+0x528>)
 8012458:	fb81 2103 	smull	r2, r1, r1, r3
 801245c:	17da      	asrs	r2, r3, #31
 801245e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8012462:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012466:	0050      	lsls	r0, r2, #1
 8012468:	1a18      	subs	r0, r3, r0
 801246a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801246e:	9300      	str	r3, [sp, #0]
 8012470:	230b      	movs	r3, #11
 8012472:	22b8      	movs	r2, #184	; 0xb8
 8012474:	21ee      	movs	r1, #238	; 0xee
 8012476:	b2c0      	uxtb	r0, r0
 8012478:	f7ff fa1a 	bl	80118b0 <DrawDigit>
	uint16_t bpm = rekordbox.bpm[beat] * (1 + trak.percent);
 801247c:	4b4e      	ldr	r3, [pc, #312]	; (80125b8 <DrawLowSpectrum+0x538>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8012484:	4a4d      	ldr	r2, [pc, #308]	; (80125bc <DrawLowSpectrum+0x53c>)
 8012486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801248a:	ee07 3a90 	vmov	s15, r3
 801248e:	4b3b      	ldr	r3, [pc, #236]	; (801257c <DrawLowSpectrum+0x4fc>)
 8012490:	ed93 7a01 	vldr	s14, [r3, #4]
 8012494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012498:	ee37 7a26 	vadd.f32	s14, s14, s13
 801249c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80124a8:	ee17 3a90 	vmov	r3, s15
 80124ac:	b29d      	uxth	r5, r3
	if(bpm / 10000 > 0) {
 80124ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80124b2:	429d      	cmp	r5, r3
 80124b4:	f200 82f3 	bhi.w	8012a9e <DrawLowSpectrum+0xa1e>
	if(bpm / 1000 > 0) {
 80124b8:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80124bc:	f080 82fd 	bcs.w	8012aba <DrawLowSpectrum+0xa3a>
	DrawDigit(((bpm / 100) % 100) % 10, 430, 176, 10, 0x00FFFFFF);
 80124c0:	4a3f      	ldr	r2, [pc, #252]	; (80125c0 <DrawLowSpectrum+0x540>)
 80124c2:	fba2 1305 	umull	r1, r3, r2, r5
 80124c6:	095b      	lsrs	r3, r3, #5
 80124c8:	fba2 1203 	umull	r1, r2, r2, r3
 80124cc:	0952      	lsrs	r2, r2, #5
 80124ce:	2164      	movs	r1, #100	; 0x64
 80124d0:	fb01 3312 	mls	r3, r1, r2, r3
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	4e3b      	ldr	r6, [pc, #236]	; (80125c4 <DrawLowSpectrum+0x544>)
 80124d8:	fba6 1203 	umull	r1, r2, r6, r3
 80124dc:	08d2      	lsrs	r2, r2, #3
 80124de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80124e2:	0050      	lsls	r0, r2, #1
 80124e4:	1a18      	subs	r0, r3, r0
 80124e6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 80124ea:	9400      	str	r4, [sp, #0]
 80124ec:	230a      	movs	r3, #10
 80124ee:	22b0      	movs	r2, #176	; 0xb0
 80124f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80124f4:	b2c0      	uxtb	r0, r0
 80124f6:	f7ff f9db 	bl	80118b0 <DrawDigit>
	DrawElement(2, 2, 442, 194, 0x00FFFFFF, small_point);
 80124fa:	4b33      	ldr	r3, [pc, #204]	; (80125c8 <DrawLowSpectrum+0x548>)
 80124fc:	9301      	str	r3, [sp, #4]
 80124fe:	9400      	str	r4, [sp, #0]
 8012500:	23c2      	movs	r3, #194	; 0xc2
 8012502:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 8012506:	2102      	movs	r1, #2
 8012508:	4608      	mov	r0, r1
 801250a:	f7ff f8cb 	bl	80116a4 <DrawElement>
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 801250e:	fba6 2305 	umull	r2, r3, r6, r5
 8012512:	08db      	lsrs	r3, r3, #3
 8012514:	fba6 1203 	umull	r1, r2, r6, r3
 8012518:	08d2      	lsrs	r2, r2, #3
 801251a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801251e:	0050      	lsls	r0, r2, #1
 8012520:	1a18      	subs	r0, r3, r0
 8012522:	9400      	str	r4, [sp, #0]
 8012524:	2307      	movs	r3, #7
 8012526:	22b6      	movs	r2, #182	; 0xb6
 8012528:	f240 11bd 	movw	r1, #445	; 0x1bd
 801252c:	b2c0      	uxtb	r0, r0
 801252e:	f7ff f9bf 	bl	80118b0 <DrawDigit>
	if(rekordbox.state == 1) {
 8012532:	4b26      	ldr	r3, [pc, #152]	; (80125cc <DrawLowSpectrum+0x54c>)
 8012534:	f893 3b98 	ldrb.w	r3, [r3, #2968]	; 0xb98
 8012538:	2b01      	cmp	r3, #1
 801253a:	f000 82d8 	beq.w	8012aee <DrawLowSpectrum+0xa6e>
	if(rekordbox.cues > 1) {
 801253e:	4b23      	ldr	r3, [pc, #140]	; (80125cc <DrawLowSpectrum+0x54c>)
 8012540:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8012544:	2b01      	cmp	r3, #1
 8012546:	f300 82fe 	bgt.w	8012b46 <DrawLowSpectrum+0xac6>
	if(display.loop == 1) {
 801254a:	4b0f      	ldr	r3, [pc, #60]	; (8012588 <DrawLowSpectrum+0x508>)
 801254c:	7c1b      	ldrb	r3, [r3, #16]
 801254e:	2b01      	cmp	r3, #1
 8012550:	f000 83b4 	beq.w	8012cbc <DrawLowSpectrum+0xc3c>
	VLine(40 + file_pos, 220, 40, 0x00FFFFFF);
 8012554:	4c1e      	ldr	r4, [pc, #120]	; (80125d0 <DrawLowSpectrum+0x550>)
 8012556:	6823      	ldr	r3, [r4, #0]
 8012558:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801255c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012560:	2228      	movs	r2, #40	; 0x28
 8012562:	21dc      	movs	r1, #220	; 0xdc
 8012564:	b280      	uxth	r0, r0
 8012566:	f7ff f8e5 	bl	8011734 <VLine>
	VLine(41 + file_pos, 220, 40, 0x00FFFFFF);
 801256a:	6820      	ldr	r0, [r4, #0]
 801256c:	3029      	adds	r0, #41	; 0x29
 801256e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012572:	2228      	movs	r2, #40	; 0x28
 8012574:	21dc      	movs	r1, #220	; 0xdc
 8012576:	e02d      	b.n	80125d4 <DrawLowSpectrum+0x554>
 8012578:	0801ee5c 	.word	0x0801ee5c
 801257c:	2000ebac 	.word	0x2000ebac
 8012580:	0801ef7c 	.word	0x0801ef7c
 8012584:	461c4000 	.word	0x461c4000
 8012588:	200005f0 	.word	0x200005f0
 801258c:	0801f698 	.word	0x0801f698
 8012590:	0801f658 	.word	0x0801f658
 8012594:	0801ee3c 	.word	0x0801ee3c
 8012598:	0801f648 	.word	0x0801f648
 801259c:	0801ed30 	.word	0x0801ed30
 80125a0:	0801ef90 	.word	0x0801ef90
 80125a4:	2000e374 	.word	0x2000e374
 80125a8:	66666667 	.word	0x66666667
 80125ac:	2000eb9e 	.word	0x2000eb9e
 80125b0:	2000eb9f 	.word	0x2000eb9f
 80125b4:	2000eb9c 	.word	0x2000eb9c
 80125b8:	200005e4 	.word	0x200005e4
 80125bc:	20014620 	.word	0x20014620
 80125c0:	51eb851f 	.word	0x51eb851f
 80125c4:	cccccccd 	.word	0xcccccccd
 80125c8:	0801f654 	.word	0x0801f654
 80125cc:	20016620 	.word	0x20016620
 80125d0:	2000e3d0 	.word	0x2000e3d0
 80125d4:	b280      	uxth	r0, r0
 80125d6:	f7ff f8ad 	bl	8011734 <VLine>
}
 80125da:	b003      	add	sp, #12
 80125dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(trak.percent < 0) DrawElement(10, 2, 308, 195, 0x00FFFFFF, minus);
 80125de:	4bb2      	ldr	r3, [pc, #712]	; (80128a8 <DrawLowSpectrum+0x828>)
 80125e0:	9301      	str	r3, [sp, #4]
 80125e2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80125e6:	9300      	str	r3, [sp, #0]
 80125e8:	23c3      	movs	r3, #195	; 0xc3
 80125ea:	f44f 729a 	mov.w	r2, #308	; 0x134
 80125ee:	2102      	movs	r1, #2
 80125f0:	200a      	movs	r0, #10
 80125f2:	f7ff f857 	bl	80116a4 <DrawElement>
 80125f6:	e648      	b.n	801228a <DrawLowSpectrum+0x20a>
		DrawElement(34, 7, 445, 230, 0x00FF0000, pitch_wide);
 80125f8:	4bac      	ldr	r3, [pc, #688]	; (80128ac <DrawLowSpectrum+0x82c>)
 80125fa:	9301      	str	r3, [sp, #4]
 80125fc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	23e6      	movs	r3, #230	; 0xe6
 8012604:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012608:	2107      	movs	r1, #7
 801260a:	2022      	movs	r0, #34	; 0x22
 801260c:	f7ff f84a 	bl	80116a4 <DrawElement>
		if(percent / 10000 > 0) {
 8012610:	f242 730f 	movw	r3, #9999	; 0x270f
 8012614:	429d      	cmp	r5, r3
 8012616:	d837      	bhi.n	8012688 <DrawLowSpectrum+0x608>
		if(percent / 1000 > 0) {
 8012618:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 801261c:	d242      	bcs.n	80126a4 <DrawLowSpectrum+0x624>
		DrawDigit(((percent / 100) % 100) % 10, 345, 186, 10, 0x00FFFFFF);
 801261e:	4aa4      	ldr	r2, [pc, #656]	; (80128b0 <DrawLowSpectrum+0x830>)
 8012620:	fba2 1305 	umull	r1, r3, r2, r5
 8012624:	095c      	lsrs	r4, r3, #5
 8012626:	fba2 1204 	umull	r1, r2, r2, r4
 801262a:	0952      	lsrs	r2, r2, #5
 801262c:	2664      	movs	r6, #100	; 0x64
 801262e:	fb06 4312 	mls	r3, r6, r2, r4
 8012632:	b29b      	uxth	r3, r3
 8012634:	4a9f      	ldr	r2, [pc, #636]	; (80128b4 <DrawLowSpectrum+0x834>)
 8012636:	fba2 1203 	umull	r1, r2, r2, r3
 801263a:	08d2      	lsrs	r2, r2, #3
 801263c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012640:	0050      	lsls	r0, r2, #1
 8012642:	1a18      	subs	r0, r3, r0
 8012644:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8012648:	9700      	str	r7, [sp, #0]
 801264a:	230a      	movs	r3, #10
 801264c:	22ba      	movs	r2, #186	; 0xba
 801264e:	f240 1159 	movw	r1, #345	; 0x159
 8012652:	b2c0      	uxtb	r0, r0
 8012654:	f7ff f92c 	bl	80118b0 <DrawDigit>
		DrawElement(2, 2, 356, 204, 0x00FFFFFF, small_point);
 8012658:	4b97      	ldr	r3, [pc, #604]	; (80128b8 <DrawLowSpectrum+0x838>)
 801265a:	9301      	str	r3, [sp, #4]
 801265c:	9700      	str	r7, [sp, #0]
 801265e:	23cc      	movs	r3, #204	; 0xcc
 8012660:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012664:	2102      	movs	r1, #2
 8012666:	4608      	mov	r0, r1
 8012668:	f7ff f81c 	bl	80116a4 <DrawElement>
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 801266c:	fb06 5314 	mls	r3, r6, r4, r5
 8012670:	b29b      	uxth	r3, r3
 8012672:	2b04      	cmp	r3, #4
 8012674:	d930      	bls.n	80126d8 <DrawLowSpectrum+0x658>
 8012676:	9700      	str	r7, [sp, #0]
 8012678:	230a      	movs	r3, #10
 801267a:	22ba      	movs	r2, #186	; 0xba
 801267c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8012680:	2005      	movs	r0, #5
 8012682:	f7ff f915 	bl	80118b0 <DrawDigit>
 8012686:	e61d      	b.n	80122c4 <DrawLowSpectrum+0x244>
			DrawDigit(percent / 10000, 315, 186, 10, 0x00FFFFFF);
 8012688:	488c      	ldr	r0, [pc, #560]	; (80128bc <DrawLowSpectrum+0x83c>)
 801268a:	fba0 3005 	umull	r3, r0, r0, r5
 801268e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012692:	9300      	str	r3, [sp, #0]
 8012694:	230a      	movs	r3, #10
 8012696:	22ba      	movs	r2, #186	; 0xba
 8012698:	f240 113b 	movw	r1, #315	; 0x13b
 801269c:	0b40      	lsrs	r0, r0, #13
 801269e:	f7ff f907 	bl	80118b0 <DrawDigit>
 80126a2:	e7b9      	b.n	8012618 <DrawLowSpectrum+0x598>
			DrawDigit(((percent / 100) % 100) / 10, 330, 186, 10, 0x00FFFFFF);
 80126a4:	4882      	ldr	r0, [pc, #520]	; (80128b0 <DrawLowSpectrum+0x830>)
 80126a6:	fba0 2305 	umull	r2, r3, r0, r5
 80126aa:	095b      	lsrs	r3, r3, #5
 80126ac:	fba0 2003 	umull	r2, r0, r0, r3
 80126b0:	0940      	lsrs	r0, r0, #5
 80126b2:	2264      	movs	r2, #100	; 0x64
 80126b4:	fb02 3010 	mls	r0, r2, r0, r3
 80126b8:	b280      	uxth	r0, r0
 80126ba:	4b7e      	ldr	r3, [pc, #504]	; (80128b4 <DrawLowSpectrum+0x834>)
 80126bc:	fba3 3000 	umull	r3, r0, r3, r0
 80126c0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80126c4:	9300      	str	r3, [sp, #0]
 80126c6:	230a      	movs	r3, #10
 80126c8:	22ba      	movs	r2, #186	; 0xba
 80126ca:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80126ce:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 80126d2:	f7ff f8ed 	bl	80118b0 <DrawDigit>
 80126d6:	e7a2      	b.n	801261e <DrawLowSpectrum+0x59e>
		else DrawDigit(0, 360, 186, 10, 0x00FFFFFF);
 80126d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80126dc:	9300      	str	r3, [sp, #0]
 80126de:	230a      	movs	r3, #10
 80126e0:	22ba      	movs	r2, #186	; 0xba
 80126e2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80126e6:	2000      	movs	r0, #0
 80126e8:	f7ff f8e2 	bl	80118b0 <DrawDigit>
 80126ec:	e5ea      	b.n	80122c4 <DrawLowSpectrum+0x244>
		DrawElement(34, 9, 445, 241, 0x00FFFFFF, pitch16);
 80126ee:	4b74      	ldr	r3, [pc, #464]	; (80128c0 <DrawLowSpectrum+0x840>)
 80126f0:	9301      	str	r3, [sp, #4]
 80126f2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80126f6:	9300      	str	r3, [sp, #0]
 80126f8:	23f1      	movs	r3, #241	; 0xf1
 80126fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80126fe:	2109      	movs	r1, #9
 8012700:	2022      	movs	r0, #34	; 0x22
 8012702:	f7fe ffcf 	bl	80116a4 <DrawElement>
		if(percent / 1000 > 0) {
 8012706:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 801270a:	d244      	bcs.n	8012796 <DrawLowSpectrum+0x716>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 801270c:	4a68      	ldr	r2, [pc, #416]	; (80128b0 <DrawLowSpectrum+0x830>)
 801270e:	fba2 1305 	umull	r1, r3, r2, r5
 8012712:	095b      	lsrs	r3, r3, #5
 8012714:	fba2 1203 	umull	r1, r2, r2, r3
 8012718:	0952      	lsrs	r2, r2, #5
 801271a:	2164      	movs	r1, #100	; 0x64
 801271c:	fb01 3312 	mls	r3, r1, r2, r3
 8012720:	b29b      	uxth	r3, r3
 8012722:	4e64      	ldr	r6, [pc, #400]	; (80128b4 <DrawLowSpectrum+0x834>)
 8012724:	fba6 1203 	umull	r1, r2, r6, r3
 8012728:	08d2      	lsrs	r2, r2, #3
 801272a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801272e:	0050      	lsls	r0, r2, #1
 8012730:	1a18      	subs	r0, r3, r0
 8012732:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8012736:	9700      	str	r7, [sp, #0]
 8012738:	230a      	movs	r3, #10
 801273a:	22ba      	movs	r2, #186	; 0xba
 801273c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8012740:	b2c0      	uxtb	r0, r0
 8012742:	f7ff f8b5 	bl	80118b0 <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 8012746:	4b5c      	ldr	r3, [pc, #368]	; (80128b8 <DrawLowSpectrum+0x838>)
 8012748:	9301      	str	r3, [sp, #4]
 801274a:	9700      	str	r7, [sp, #0]
 801274c:	23cc      	movs	r3, #204	; 0xcc
 801274e:	f240 1255 	movw	r2, #341	; 0x155
 8012752:	2102      	movs	r1, #2
 8012754:	4608      	mov	r0, r1
 8012756:	f7fe ffa5 	bl	80116a4 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 801275a:	fba6 3205 	umull	r3, r2, r6, r5
 801275e:	08d2      	lsrs	r2, r2, #3
 8012760:	fba6 1302 	umull	r1, r3, r6, r2
 8012764:	08db      	lsrs	r3, r3, #3
 8012766:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801276a:	0058      	lsls	r0, r3, #1
 801276c:	1a10      	subs	r0, r2, r0
 801276e:	9700      	str	r7, [sp, #0]
 8012770:	230a      	movs	r3, #10
 8012772:	22ba      	movs	r2, #186	; 0xba
 8012774:	f240 1159 	movw	r1, #345	; 0x159
 8012778:	b2c0      	uxtb	r0, r0
 801277a:	f7ff f899 	bl	80118b0 <DrawDigit>
		DrawDigit((percent % 2) * 5, 360, 186, 10, 0x00FFFFFF);
 801277e:	f004 0001 	and.w	r0, r4, #1
 8012782:	9700      	str	r7, [sp, #0]
 8012784:	230a      	movs	r3, #10
 8012786:	22ba      	movs	r2, #186	; 0xba
 8012788:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801278c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012790:	f7ff f88e 	bl	80118b0 <DrawDigit>
 8012794:	e596      	b.n	80122c4 <DrawLowSpectrum+0x244>
			DrawDigit(((percent / 100) % 100) / 10, 315, 186, 10, 0x00FFFFFF);
 8012796:	4846      	ldr	r0, [pc, #280]	; (80128b0 <DrawLowSpectrum+0x830>)
 8012798:	fba0 2305 	umull	r2, r3, r0, r5
 801279c:	095b      	lsrs	r3, r3, #5
 801279e:	fba0 2003 	umull	r2, r0, r0, r3
 80127a2:	0940      	lsrs	r0, r0, #5
 80127a4:	2264      	movs	r2, #100	; 0x64
 80127a6:	fb02 3010 	mls	r0, r2, r0, r3
 80127aa:	b280      	uxth	r0, r0
 80127ac:	4b41      	ldr	r3, [pc, #260]	; (80128b4 <DrawLowSpectrum+0x834>)
 80127ae:	fba3 3000 	umull	r3, r0, r3, r0
 80127b2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	230a      	movs	r3, #10
 80127ba:	22ba      	movs	r2, #186	; 0xba
 80127bc:	f240 113b 	movw	r1, #315	; 0x13b
 80127c0:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 80127c4:	f7ff f874 	bl	80118b0 <DrawDigit>
 80127c8:	e7a0      	b.n	801270c <DrawLowSpectrum+0x68c>
		DrawElement(34, 9, 445, 252, 0x00FF0000, pitch10);
 80127ca:	4b3e      	ldr	r3, [pc, #248]	; (80128c4 <DrawLowSpectrum+0x844>)
 80127cc:	9301      	str	r3, [sp, #4]
 80127ce:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80127d2:	9300      	str	r3, [sp, #0]
 80127d4:	23fc      	movs	r3, #252	; 0xfc
 80127d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80127da:	2109      	movs	r1, #9
 80127dc:	2022      	movs	r0, #34	; 0x22
 80127de:	f7fe ff61 	bl	80116a4 <DrawElement>
		if(percent / 1000 > 0) {
 80127e2:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80127e6:	d244      	bcs.n	8012872 <DrawLowSpectrum+0x7f2>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 80127e8:	4a31      	ldr	r2, [pc, #196]	; (80128b0 <DrawLowSpectrum+0x830>)
 80127ea:	fba2 1305 	umull	r1, r3, r2, r5
 80127ee:	095b      	lsrs	r3, r3, #5
 80127f0:	fba2 1203 	umull	r1, r2, r2, r3
 80127f4:	0952      	lsrs	r2, r2, #5
 80127f6:	2164      	movs	r1, #100	; 0x64
 80127f8:	fb01 3312 	mls	r3, r1, r2, r3
 80127fc:	b29b      	uxth	r3, r3
 80127fe:	4e2d      	ldr	r6, [pc, #180]	; (80128b4 <DrawLowSpectrum+0x834>)
 8012800:	fba6 1203 	umull	r1, r2, r6, r3
 8012804:	08d2      	lsrs	r2, r2, #3
 8012806:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801280a:	0050      	lsls	r0, r2, #1
 801280c:	1a18      	subs	r0, r3, r0
 801280e:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8012812:	9700      	str	r7, [sp, #0]
 8012814:	230a      	movs	r3, #10
 8012816:	22ba      	movs	r2, #186	; 0xba
 8012818:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801281c:	b2c0      	uxtb	r0, r0
 801281e:	f7ff f847 	bl	80118b0 <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 8012822:	4b25      	ldr	r3, [pc, #148]	; (80128b8 <DrawLowSpectrum+0x838>)
 8012824:	9301      	str	r3, [sp, #4]
 8012826:	9700      	str	r7, [sp, #0]
 8012828:	23cc      	movs	r3, #204	; 0xcc
 801282a:	f240 1255 	movw	r2, #341	; 0x155
 801282e:	2102      	movs	r1, #2
 8012830:	4608      	mov	r0, r1
 8012832:	f7fe ff37 	bl	80116a4 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8012836:	fba6 3205 	umull	r3, r2, r6, r5
 801283a:	08d2      	lsrs	r2, r2, #3
 801283c:	fba6 1302 	umull	r1, r3, r6, r2
 8012840:	08db      	lsrs	r3, r3, #3
 8012842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012846:	0058      	lsls	r0, r3, #1
 8012848:	1a10      	subs	r0, r2, r0
 801284a:	9700      	str	r7, [sp, #0]
 801284c:	230a      	movs	r3, #10
 801284e:	22ba      	movs	r2, #186	; 0xba
 8012850:	f240 1159 	movw	r1, #345	; 0x159
 8012854:	b2c0      	uxtb	r0, r0
 8012856:	f7ff f82b 	bl	80118b0 <DrawDigit>
		DrawDigit((percent % 2) * 5, 360, 186, 10, 0x00FFFFFF);
 801285a:	f004 0001 	and.w	r0, r4, #1
 801285e:	9700      	str	r7, [sp, #0]
 8012860:	230a      	movs	r3, #10
 8012862:	22ba      	movs	r2, #186	; 0xba
 8012864:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8012868:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801286c:	f7ff f820 	bl	80118b0 <DrawDigit>
 8012870:	e528      	b.n	80122c4 <DrawLowSpectrum+0x244>
			DrawDigit(((percent / 100) % 100) / 10, 315, 186, 10, 0x00FFFFFF);
 8012872:	480f      	ldr	r0, [pc, #60]	; (80128b0 <DrawLowSpectrum+0x830>)
 8012874:	fba0 2305 	umull	r2, r3, r0, r5
 8012878:	095b      	lsrs	r3, r3, #5
 801287a:	fba0 2003 	umull	r2, r0, r0, r3
 801287e:	0940      	lsrs	r0, r0, #5
 8012880:	2264      	movs	r2, #100	; 0x64
 8012882:	fb02 3010 	mls	r0, r2, r0, r3
 8012886:	b280      	uxth	r0, r0
 8012888:	4b0a      	ldr	r3, [pc, #40]	; (80128b4 <DrawLowSpectrum+0x834>)
 801288a:	fba3 3000 	umull	r3, r0, r3, r0
 801288e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012892:	9300      	str	r3, [sp, #0]
 8012894:	230a      	movs	r3, #10
 8012896:	22ba      	movs	r2, #186	; 0xba
 8012898:	f240 113b 	movw	r1, #315	; 0x13b
 801289c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 80128a0:	f7ff f806 	bl	80118b0 <DrawDigit>
 80128a4:	e7a0      	b.n	80127e8 <DrawLowSpectrum+0x768>
 80128a6:	bf00      	nop
 80128a8:	0801ee28 	.word	0x0801ee28
 80128ac:	0801ef38 	.word	0x0801ef38
 80128b0:	51eb851f 	.word	0x51eb851f
 80128b4:	cccccccd 	.word	0xcccccccd
 80128b8:	0801f654 	.word	0x0801f654
 80128bc:	d1b71759 	.word	0xd1b71759
 80128c0:	0801eeb0 	.word	0x0801eeb0
 80128c4:	0801ee6c 	.word	0x0801ee6c
		DrawElement(34, 9, 445, 263, 0x0000FF00, pitch6);
 80128c8:	4bac      	ldr	r3, [pc, #688]	; (8012b7c <DrawLowSpectrum+0xafc>)
 80128ca:	9301      	str	r3, [sp, #4]
 80128cc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80128d0:	9300      	str	r3, [sp, #0]
 80128d2:	f240 1307 	movw	r3, #263	; 0x107
 80128d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80128da:	2109      	movs	r1, #9
 80128dc:	2022      	movs	r0, #34	; 0x22
 80128de:	f7fe fee1 	bl	80116a4 <DrawElement>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 80128e2:	4aa7      	ldr	r2, [pc, #668]	; (8012b80 <DrawLowSpectrum+0xb00>)
 80128e4:	fba2 1305 	umull	r1, r3, r2, r5
 80128e8:	095b      	lsrs	r3, r3, #5
 80128ea:	fba2 1203 	umull	r1, r2, r2, r3
 80128ee:	0952      	lsrs	r2, r2, #5
 80128f0:	2164      	movs	r1, #100	; 0x64
 80128f2:	fb01 3312 	mls	r3, r1, r2, r3
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	4ca2      	ldr	r4, [pc, #648]	; (8012b84 <DrawLowSpectrum+0xb04>)
 80128fa:	fba4 1203 	umull	r1, r2, r4, r3
 80128fe:	08d2      	lsrs	r2, r2, #3
 8012900:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012904:	0050      	lsls	r0, r2, #1
 8012906:	1a18      	subs	r0, r3, r0
 8012908:	f06f 467f 	mvn.w	r6, #4278190080	; 0xff000000
 801290c:	9600      	str	r6, [sp, #0]
 801290e:	230a      	movs	r3, #10
 8012910:	22ba      	movs	r2, #186	; 0xba
 8012912:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8012916:	b2c0      	uxtb	r0, r0
 8012918:	f7fe ffca 	bl	80118b0 <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 801291c:	4b9a      	ldr	r3, [pc, #616]	; (8012b88 <DrawLowSpectrum+0xb08>)
 801291e:	9301      	str	r3, [sp, #4]
 8012920:	9600      	str	r6, [sp, #0]
 8012922:	23cc      	movs	r3, #204	; 0xcc
 8012924:	f240 1255 	movw	r2, #341	; 0x155
 8012928:	2102      	movs	r1, #2
 801292a:	4608      	mov	r0, r1
 801292c:	f7fe feba 	bl	80116a4 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8012930:	fba4 3705 	umull	r3, r7, r4, r5
 8012934:	08fa      	lsrs	r2, r7, #3
 8012936:	fba4 1302 	umull	r1, r3, r4, r2
 801293a:	08db      	lsrs	r3, r3, #3
 801293c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012940:	0058      	lsls	r0, r3, #1
 8012942:	1a10      	subs	r0, r2, r0
 8012944:	9600      	str	r6, [sp, #0]
 8012946:	230a      	movs	r3, #10
 8012948:	22ba      	movs	r2, #186	; 0xba
 801294a:	f240 1159 	movw	r1, #345	; 0x159
 801294e:	b2c0      	uxtb	r0, r0
 8012950:	f7fe ffae 	bl	80118b0 <DrawDigit>
		DrawDigit((percent % 5) * 2, 360, 186, 10, 0x00FFFFFF);
 8012954:	08b8      	lsrs	r0, r7, #2
 8012956:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801295a:	1a28      	subs	r0, r5, r0
 801295c:	0040      	lsls	r0, r0, #1
 801295e:	9600      	str	r6, [sp, #0]
 8012960:	230a      	movs	r3, #10
 8012962:	22ba      	movs	r2, #186	; 0xba
 8012964:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8012968:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 801296c:	f7fe ffa0 	bl	80118b0 <DrawDigit>
 8012970:	e4a8      	b.n	80122c4 <DrawLowSpectrum+0x244>
		DrawElement(34, 11, 86, 207, 0x00FF0000, auto_cue);
 8012972:	4b86      	ldr	r3, [pc, #536]	; (8012b8c <DrawLowSpectrum+0xb0c>)
 8012974:	9301      	str	r3, [sp, #4]
 8012976:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801297a:	9300      	str	r3, [sp, #0]
 801297c:	23cf      	movs	r3, #207	; 0xcf
 801297e:	2256      	movs	r2, #86	; 0x56
 8012980:	210b      	movs	r1, #11
 8012982:	2022      	movs	r0, #34	; 0x22
 8012984:	f7fe fe8e 	bl	80116a4 <DrawElement>
 8012988:	e4b6      	b.n	80122f8 <DrawLowSpectrum+0x278>
		DrawElement(48, 5, 200, 178, 0x00FF0000, quantize);
 801298a:	4b81      	ldr	r3, [pc, #516]	; (8012b90 <DrawLowSpectrum+0xb10>)
 801298c:	9301      	str	r3, [sp, #4]
 801298e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012992:	9300      	str	r3, [sp, #0]
 8012994:	23b2      	movs	r3, #178	; 0xb2
 8012996:	22c8      	movs	r2, #200	; 0xc8
 8012998:	2105      	movs	r1, #5
 801299a:	2030      	movs	r0, #48	; 0x30
 801299c:	f7fe fe82 	bl	80116a4 <DrawElement>
 80129a0:	e4af      	b.n	8012302 <DrawLowSpectrum+0x282>
		DrawElement(34, 11, 355, 183, 0x00FF0000, master_tempo);
 80129a2:	4b7c      	ldr	r3, [pc, #496]	; (8012b94 <DrawLowSpectrum+0xb14>)
 80129a4:	9301      	str	r3, [sp, #4]
 80129a6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80129aa:	9300      	str	r3, [sp, #0]
 80129ac:	23b7      	movs	r3, #183	; 0xb7
 80129ae:	f240 1263 	movw	r2, #355	; 0x163
 80129b2:	210b      	movs	r1, #11
 80129b4:	2022      	movs	r0, #34	; 0x22
 80129b6:	f7fe fe75 	bl	80116a4 <DrawElement>
 80129ba:	e4a7      	b.n	801230c <DrawLowSpectrum+0x28c>
		DrawDigit((rfr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 80129bc:	3301      	adds	r3, #1
 80129be:	e549      	b.n	8012454 <DrawLowSpectrum+0x3d4>
		DrawDigit(min / 10, 134, 184, 11, 0x00FFFFFF);
 80129c0:	4e75      	ldr	r6, [pc, #468]	; (8012b98 <DrawLowSpectrum+0xb18>)
 80129c2:	f996 3000 	ldrsb.w	r3, [r6]
 80129c6:	4d75      	ldr	r5, [pc, #468]	; (8012b9c <DrawLowSpectrum+0xb1c>)
 80129c8:	fb85 2003 	smull	r2, r0, r5, r3
 80129cc:	17db      	asrs	r3, r3, #31
 80129ce:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 80129d2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 80129d6:	9400      	str	r4, [sp, #0]
 80129d8:	230b      	movs	r3, #11
 80129da:	22b8      	movs	r2, #184	; 0xb8
 80129dc:	2186      	movs	r1, #134	; 0x86
 80129de:	b2c0      	uxtb	r0, r0
 80129e0:	f7fe ff66 	bl	80118b0 <DrawDigit>
		DrawDigit(min % 10, 148, 184, 11, 0x00FFFFFF);
 80129e4:	f996 2000 	ldrsb.w	r2, [r6]
 80129e8:	fb85 3102 	smull	r3, r1, r5, r2
 80129ec:	17d3      	asrs	r3, r2, #31
 80129ee:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80129f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80129f6:	0058      	lsls	r0, r3, #1
 80129f8:	1a10      	subs	r0, r2, r0
 80129fa:	9400      	str	r4, [sp, #0]
 80129fc:	230b      	movs	r3, #11
 80129fe:	22b8      	movs	r2, #184	; 0xb8
 8012a00:	2194      	movs	r1, #148	; 0x94
 8012a02:	b2c0      	uxtb	r0, r0
 8012a04:	f7fe ff54 	bl	80118b0 <DrawDigit>
		DrawDigit(sec / 10, 185, 184, 11, 0x00FFFFFF);
 8012a08:	4e65      	ldr	r6, [pc, #404]	; (8012ba0 <DrawLowSpectrum+0xb20>)
 8012a0a:	f996 3000 	ldrsb.w	r3, [r6]
 8012a0e:	fb85 2003 	smull	r2, r0, r5, r3
 8012a12:	17db      	asrs	r3, r3, #31
 8012a14:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 8012a18:	9400      	str	r4, [sp, #0]
 8012a1a:	230b      	movs	r3, #11
 8012a1c:	22b8      	movs	r2, #184	; 0xb8
 8012a1e:	21b9      	movs	r1, #185	; 0xb9
 8012a20:	b2c0      	uxtb	r0, r0
 8012a22:	f7fe ff45 	bl	80118b0 <DrawDigit>
		DrawDigit(sec % 10, 199, 184, 11, 0x00FFFFFF);
 8012a26:	f996 2000 	ldrsb.w	r2, [r6]
 8012a2a:	fb85 3102 	smull	r3, r1, r5, r2
 8012a2e:	17d3      	asrs	r3, r2, #31
 8012a30:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8012a34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012a38:	0058      	lsls	r0, r3, #1
 8012a3a:	1a10      	subs	r0, r2, r0
 8012a3c:	9400      	str	r4, [sp, #0]
 8012a3e:	230b      	movs	r3, #11
 8012a40:	22b8      	movs	r2, #184	; 0xb8
 8012a42:	21c7      	movs	r1, #199	; 0xc7
 8012a44:	b2c0      	uxtb	r0, r0
 8012a46:	f7fe ff33 	bl	80118b0 <DrawDigit>
		DrawDigit(fr / 20, 224, 184, 11, 0x00FFFFFF);
 8012a4a:	4e56      	ldr	r6, [pc, #344]	; (8012ba4 <DrawLowSpectrum+0xb24>)
 8012a4c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8012a50:	fb85 1302 	smull	r1, r3, r5, r2
 8012a54:	17d2      	asrs	r2, r2, #31
 8012a56:	ebc2 00e3 	rsb	r0, r2, r3, asr #3
 8012a5a:	9400      	str	r4, [sp, #0]
 8012a5c:	230b      	movs	r3, #11
 8012a5e:	22b8      	movs	r2, #184	; 0xb8
 8012a60:	21e0      	movs	r1, #224	; 0xe0
 8012a62:	b2c0      	uxtb	r0, r0
 8012a64:	f7fe ff24 	bl	80118b0 <DrawDigit>
		DrawDigit((fr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 8012a68:	f9b6 3000 	ldrsh.w	r3, [r6]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	db14      	blt.n	8012a9a <DrawLowSpectrum+0xa1a>
 8012a70:	105b      	asrs	r3, r3, #1
 8012a72:	494a      	ldr	r1, [pc, #296]	; (8012b9c <DrawLowSpectrum+0xb1c>)
 8012a74:	fb81 2103 	smull	r2, r1, r1, r3
 8012a78:	17da      	asrs	r2, r3, #31
 8012a7a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8012a7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012a82:	0050      	lsls	r0, r2, #1
 8012a84:	1a18      	subs	r0, r3, r0
 8012a86:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012a8a:	9300      	str	r3, [sp, #0]
 8012a8c:	230b      	movs	r3, #11
 8012a8e:	22b8      	movs	r2, #184	; 0xb8
 8012a90:	21ee      	movs	r1, #238	; 0xee
 8012a92:	b2c0      	uxtb	r0, r0
 8012a94:	f7fe ff0c 	bl	80118b0 <DrawDigit>
 8012a98:	e4f0      	b.n	801247c <DrawLowSpectrum+0x3fc>
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	e7e8      	b.n	8012a70 <DrawLowSpectrum+0x9f0>
		DrawDigit(bpm / 10000, 400, 176, 10, 0x00FFFFFF);
 8012a9e:	4842      	ldr	r0, [pc, #264]	; (8012ba8 <DrawLowSpectrum+0xb28>)
 8012aa0:	fba0 3005 	umull	r3, r0, r0, r5
 8012aa4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012aa8:	9300      	str	r3, [sp, #0]
 8012aaa:	230a      	movs	r3, #10
 8012aac:	22b0      	movs	r2, #176	; 0xb0
 8012aae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012ab2:	0b40      	lsrs	r0, r0, #13
 8012ab4:	f7fe fefc 	bl	80118b0 <DrawDigit>
 8012ab8:	e4fe      	b.n	80124b8 <DrawLowSpectrum+0x438>
		DrawDigit(((bpm / 100) % 100) / 10, 415, 176, 10, 0x00FFFFFF);
 8012aba:	4831      	ldr	r0, [pc, #196]	; (8012b80 <DrawLowSpectrum+0xb00>)
 8012abc:	fba0 2305 	umull	r2, r3, r0, r5
 8012ac0:	095b      	lsrs	r3, r3, #5
 8012ac2:	fba0 2003 	umull	r2, r0, r0, r3
 8012ac6:	0940      	lsrs	r0, r0, #5
 8012ac8:	2264      	movs	r2, #100	; 0x64
 8012aca:	fb02 3010 	mls	r0, r2, r0, r3
 8012ace:	b280      	uxth	r0, r0
 8012ad0:	4b2c      	ldr	r3, [pc, #176]	; (8012b84 <DrawLowSpectrum+0xb04>)
 8012ad2:	fba3 3000 	umull	r3, r0, r3, r0
 8012ad6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	230a      	movs	r3, #10
 8012ade:	22b0      	movs	r2, #176	; 0xb0
 8012ae0:	f240 119f 	movw	r1, #415	; 0x19f
 8012ae4:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8012ae8:	f7fe fee2 	bl	80118b0 <DrawDigit>
 8012aec:	e4e8      	b.n	80124c0 <DrawLowSpectrum+0x440>
		if(rekordbox.cue_start_position[0] != 0) {
 8012aee:	4b2f      	ldr	r3, [pc, #188]	; (8012bac <DrawLowSpectrum+0xb2c>)
 8012af0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8012af4:	b993      	cbnz	r3, 8012b1c <DrawLowSpectrum+0xa9c>
		if(rekordbox.cue_start_position[0] != 0) {
 8012af6:	4b2d      	ldr	r3, [pc, #180]	; (8012bac <DrawLowSpectrum+0xb2c>)
 8012af8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f43f ad1e 	beq.w	801253e <DrawLowSpectrum+0x4be>
			DrawElement(36, 11, 1, 260, 0x00FF0000, cue_ind);
 8012b02:	4b2b      	ldr	r3, [pc, #172]	; (8012bb0 <DrawLowSpectrum+0xb30>)
 8012b04:	9301      	str	r3, [sp, #4]
 8012b06:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012b0a:	9300      	str	r3, [sp, #0]
 8012b0c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012b10:	2201      	movs	r2, #1
 8012b12:	210b      	movs	r1, #11
 8012b14:	2024      	movs	r0, #36	; 0x24
 8012b16:	f7fe fdc5 	bl	80116a4 <DrawElement>
 8012b1a:	e510      	b.n	801253e <DrawLowSpectrum+0x4be>
				*400/rekordbox.spectrum_size), 219, 0x00FFFF00, hot_cue);
 8012b1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012b20:	fb03 f202 	mul.w	r2, r3, r2
 8012b24:	4b21      	ldr	r3, [pc, #132]	; (8012bac <DrawLowSpectrum+0xb2c>)
 8012b26:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8012b2a:	fbb2 f2f3 	udiv	r2, r2, r3
			DrawElement(9, 5, 36+(rekordbox.cue_start_position[0]
 8012b2e:	3224      	adds	r2, #36	; 0x24
 8012b30:	4b20      	ldr	r3, [pc, #128]	; (8012bb4 <DrawLowSpectrum+0xb34>)
 8012b32:	9301      	str	r3, [sp, #4]
 8012b34:	4b20      	ldr	r3, [pc, #128]	; (8012bb8 <DrawLowSpectrum+0xb38>)
 8012b36:	9300      	str	r3, [sp, #0]
 8012b38:	23db      	movs	r3, #219	; 0xdb
 8012b3a:	b292      	uxth	r2, r2
 8012b3c:	2105      	movs	r1, #5
 8012b3e:	2009      	movs	r0, #9
 8012b40:	f7fe fdb0 	bl	80116a4 <DrawElement>
 8012b44:	e7d7      	b.n	8012af6 <DrawLowSpectrum+0xa76>
		DrawElement(36, 11, 1, 230, 0x00FF0000, memory_ind);
 8012b46:	4b1d      	ldr	r3, [pc, #116]	; (8012bbc <DrawLowSpectrum+0xb3c>)
 8012b48:	9301      	str	r3, [sp, #4]
 8012b4a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012b4e:	9300      	str	r3, [sp, #0]
 8012b50:	23e6      	movs	r3, #230	; 0xe6
 8012b52:	2201      	movs	r2, #1
 8012b54:	210b      	movs	r1, #11
 8012b56:	2024      	movs	r0, #36	; 0x24
 8012b58:	f7fe fda4 	bl	80116a4 <DrawElement>
		for(i = 1; i < rekordbox.cues; i++) {
 8012b5c:	2501      	movs	r5, #1
 8012b5e:	e030      	b.n	8012bc2 <DrawLowSpectrum+0xb42>
				DrawElement(9, 5, 37+start_pos, 219, 0x00FF0000, hot_cue);
 8012b60:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8012b64:	4b13      	ldr	r3, [pc, #76]	; (8012bb4 <DrawLowSpectrum+0xb34>)
 8012b66:	9301      	str	r3, [sp, #4]
 8012b68:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	23db      	movs	r3, #219	; 0xdb
 8012b70:	b292      	uxth	r2, r2
 8012b72:	2105      	movs	r1, #5
 8012b74:	2009      	movs	r0, #9
 8012b76:	f7fe fd95 	bl	80116a4 <DrawElement>
 8012b7a:	e04a      	b.n	8012c12 <DrawLowSpectrum+0xb92>
 8012b7c:	0801eef4 	.word	0x0801eef4
 8012b80:	51eb851f 	.word	0x51eb851f
 8012b84:	cccccccd 	.word	0xcccccccd
 8012b88:	0801f654 	.word	0x0801f654
 8012b8c:	0801e3cc 	.word	0x0801e3cc
 8012b90:	0801ef98 	.word	0x0801ef98
 8012b94:	0801ed9c 	.word	0x0801ed9c
 8012b98:	2000e798 	.word	0x2000e798
 8012b9c:	66666667 	.word	0x66666667
 8012ba0:	2000eba0 	.word	0x2000eba0
 8012ba4:	2000e600 	.word	0x2000e600
 8012ba8:	d1b71759 	.word	0xd1b71759
 8012bac:	20016620 	.word	0x20016620
 8012bb0:	0801e460 	.word	0x0801e460
 8012bb4:	0801ed3c 	.word	0x0801ed3c
 8012bb8:	00ffff00 	.word	0x00ffff00
 8012bbc:	0801ede0 	.word	0x0801ede0
		for(i = 1; i < rekordbox.cues; i++) {
 8012bc0:	3501      	adds	r5, #1
 8012bc2:	4b6c      	ldr	r3, [pc, #432]	; (8012d74 <DrawLowSpectrum+0xcf4>)
 8012bc4:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8012bc8:	42ab      	cmp	r3, r5
 8012bca:	f67f acbe 	bls.w	801254a <DrawLowSpectrum+0x4ca>
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8012bce:	4b6a      	ldr	r3, [pc, #424]	; (8012d78 <DrawLowSpectrum+0xcf8>)
 8012bd0:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 8012bd4:	f605 2202 	addw	r2, r5, #2562	; 0xa02
 8012bd8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8012bdc:	ed92 7a01 	vldr	s14, [r2, #4]
 8012be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8012be4:	edd1 7a93 	vldr	s15, [r1, #588]	; 0x24c
 8012be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012bec:	ee67 7a87 	vmul.f32	s15, s15, s14
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 8012bf0:	edd1 6a94 	vldr	s13, [r1, #592]	; 0x250
 8012bf4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8012bf8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8012bfc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8012c00:	ee17 2a90 	vmov	r2, s15
 8012c04:	b294      	uxth	r4, r2
			if(rekordbox.cue_singleloop[i] == 1) {
 8012c06:	442b      	add	r3, r5
 8012c08:	f642 322c 	movw	r2, #11052	; 0x2b2c
 8012c0c:	5c9b      	ldrb	r3, [r3, r2]
 8012c0e:	2b01      	cmp	r3, #1
 8012c10:	d0a6      	beq.n	8012b60 <DrawLowSpectrum+0xae0>
			if(rekordbox.cue_singleloop[i] == 2) {
 8012c12:	4b59      	ldr	r3, [pc, #356]	; (8012d78 <DrawLowSpectrum+0xcf8>)
 8012c14:	442b      	add	r3, r5
 8012c16:	f642 322c 	movw	r2, #11052	; 0x2b2c
 8012c1a:	5c9b      	ldrb	r3, [r3, r2]
 8012c1c:	2b02      	cmp	r3, #2
 8012c1e:	d1cf      	bne.n	8012bc0 <DrawLowSpectrum+0xb40>
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8012c20:	4b55      	ldr	r3, [pc, #340]	; (8012d78 <DrawLowSpectrum+0xcf8>)
 8012c22:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 8012c26:	f605 2166 	addw	r1, r5, #2662	; 0xa66
 8012c2a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8012c2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8012c36:	ed92 7a93 	vldr	s14, [r2, #588]	; 0x24c
 8012c3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 8012c42:	edd2 6a94 	vldr	s13, [r2, #592]	; 0x250
 8012c46:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8012c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8012c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c52:	ee17 3a90 	vmov	r3, s15
 8012c56:	b29e      	uxth	r6, r3
				VLine(40+start_pos, 220, 40, 0x0000FF00);
 8012c58:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012c5c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8012c60:	2228      	movs	r2, #40	; 0x28
 8012c62:	21dc      	movs	r1, #220	; 0xdc
 8012c64:	b280      	uxth	r0, r0
 8012c66:	f7fe fd65 	bl	8011734 <VLine>
				Pixel(41+start_pos, 220, 0x0000FF00);
 8012c6a:	3429      	adds	r4, #41	; 0x29
 8012c6c:	b2a4      	uxth	r4, r4
 8012c6e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8012c72:	21dc      	movs	r1, #220	; 0xdc
 8012c74:	4620      	mov	r0, r4
 8012c76:	f7fe fe05 	bl	8011884 <Pixel>
				Pixel(41+start_pos, 259, 0x0000FF00);
 8012c7a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8012c7e:	f240 1103 	movw	r1, #259	; 0x103
 8012c82:	4620      	mov	r0, r4
 8012c84:	f7fe fdfe 	bl	8011884 <Pixel>
				VLine(40+end_pos, 220, 40, 0x0000FF00);
 8012c88:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8012c8c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8012c90:	2228      	movs	r2, #40	; 0x28
 8012c92:	21dc      	movs	r1, #220	; 0xdc
 8012c94:	b280      	uxth	r0, r0
 8012c96:	f7fe fd4d 	bl	8011734 <VLine>
				Pixel(39+end_pos, 220, 0x0000FF00);
 8012c9a:	f106 0427 	add.w	r4, r6, #39	; 0x27
 8012c9e:	b2a4      	uxth	r4, r4
 8012ca0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8012ca4:	21dc      	movs	r1, #220	; 0xdc
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	f7fe fdec 	bl	8011884 <Pixel>
				Pixel(39+end_pos, 259, 0x0000FF00);
 8012cac:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8012cb0:	f240 1103 	movw	r1, #259	; 0x103
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	f7fe fde5 	bl	8011884 <Pixel>
 8012cba:	e781      	b.n	8012bc0 <DrawLowSpectrum+0xb40>
		DrawElement(22, 11, 270, 199, 0x0000FF00, loop_l);
 8012cbc:	4b2f      	ldr	r3, [pc, #188]	; (8012d7c <DrawLowSpectrum+0xcfc>)
 8012cbe:	9301      	str	r3, [sp, #4]
 8012cc0:	f44f 467f 	mov.w	r6, #65280	; 0xff00
 8012cc4:	9600      	str	r6, [sp, #0]
 8012cc6:	23c7      	movs	r3, #199	; 0xc7
 8012cc8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8012ccc:	210b      	movs	r1, #11
 8012cce:	2016      	movs	r0, #22
 8012cd0:	f7fe fce8 	bl	80116a4 <DrawElement>
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8012cd4:	4a27      	ldr	r2, [pc, #156]	; (8012d74 <DrawLowSpectrum+0xcf4>)
 8012cd6:	edd2 7a93 	vldr	s15, [r2, #588]	; 0x24c
 8012cda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
				(float)display.loopstart/rekordbox.spectrum_size;
 8012cde:	4b28      	ldr	r3, [pc, #160]	; (8012d80 <DrawLowSpectrum+0xd00>)
 8012ce0:	edd3 7a02 	vldr	s15, [r3, #8]
 8012ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8012ce8:	ee67 6a26 	vmul.f32	s13, s14, s13
				(float)display.loopstart/rekordbox.spectrum_size;
 8012cec:	ed92 6a94 	vldr	s12, [r2, #592]	; 0x250
 8012cf0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8012cf4:	eec6 7a86 	vdiv.f32	s15, s13, s12
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8012cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012cfc:	ee17 2a90 	vmov	r2, s15
 8012d00:	b295      	uxth	r5, r2
				(float)display.loopend/rekordbox.spectrum_size;
 8012d02:	edd3 7a03 	vldr	s15, [r3, #12]
 8012d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8012d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
				(float)display.loopend/rekordbox.spectrum_size;
 8012d0e:	eec7 7a06 	vdiv.f32	s15, s14, s12
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8012d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012d16:	ee17 3a90 	vmov	r3, s15
 8012d1a:	b29c      	uxth	r4, r3
		VLine(40+start_pos, 220, 40, 0x0000FF00);
 8012d1c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8012d20:	4633      	mov	r3, r6
 8012d22:	2228      	movs	r2, #40	; 0x28
 8012d24:	21dc      	movs	r1, #220	; 0xdc
 8012d26:	b280      	uxth	r0, r0
 8012d28:	f7fe fd04 	bl	8011734 <VLine>
		Pixel(41+start_pos, 220, 0x0000FF00);
 8012d2c:	3529      	adds	r5, #41	; 0x29
 8012d2e:	b2ad      	uxth	r5, r5
 8012d30:	4632      	mov	r2, r6
 8012d32:	21dc      	movs	r1, #220	; 0xdc
 8012d34:	4628      	mov	r0, r5
 8012d36:	f7fe fda5 	bl	8011884 <Pixel>
		Pixel(41+start_pos, 259, 0x0000FF00);
 8012d3a:	4632      	mov	r2, r6
 8012d3c:	f240 1103 	movw	r1, #259	; 0x103
 8012d40:	4628      	mov	r0, r5
 8012d42:	f7fe fd9f 	bl	8011884 <Pixel>
		VLine(40+end_pos, 220, 40, 0x0000FF00);
 8012d46:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012d4a:	4633      	mov	r3, r6
 8012d4c:	2228      	movs	r2, #40	; 0x28
 8012d4e:	21dc      	movs	r1, #220	; 0xdc
 8012d50:	b280      	uxth	r0, r0
 8012d52:	f7fe fcef 	bl	8011734 <VLine>
		Pixel(39+end_pos, 220, 0x0000FF00);
 8012d56:	3427      	adds	r4, #39	; 0x27
 8012d58:	b2a4      	uxth	r4, r4
 8012d5a:	4632      	mov	r2, r6
 8012d5c:	21dc      	movs	r1, #220	; 0xdc
 8012d5e:	4620      	mov	r0, r4
 8012d60:	f7fe fd90 	bl	8011884 <Pixel>
		Pixel(39+end_pos, 259, 0x0000FF00);
 8012d64:	4632      	mov	r2, r6
 8012d66:	f240 1103 	movw	r1, #259	; 0x103
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	f7fe fd8a 	bl	8011884 <Pixel>
 8012d70:	f7ff bbf0 	b.w	8012554 <DrawLowSpectrum+0x4d4>
 8012d74:	20016620 	.word	0x20016620
 8012d78:	20014620 	.word	0x20014620
 8012d7c:	0801ed70 	.word	0x0801ed70
 8012d80:	200005f0 	.word	0x200005f0

08012d84 <DrawSpectrum>:
{
 8012d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d86:	b0fb      	sub	sp, #492	; 0x1ec
 8012d88:	af02      	add	r7, sp, #8
	uint8_t spectrum_frame[480] = {0};
 8012d8a:	2100      	movs	r1, #0
 8012d8c:	6039      	str	r1, [r7, #0]
 8012d8e:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8012d92:	1d38      	adds	r0, r7, #4
 8012d94:	f007 f832 	bl	8019dfc <memset>
	uint32_t new_cues[rekordbox.cues];
 8012d98:	4b98      	ldr	r3, [pc, #608]	; (8012ffc <DrawSpectrum+0x278>)
 8012d9a:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	3307      	adds	r3, #7
 8012da2:	f023 0307 	bic.w	r3, r3, #7
 8012da6:	ebad 0d03 	sub.w	sp, sp, r3
 8012daa:	ad02      	add	r5, sp, #8
	if(position != file_pos_wide) {
 8012dac:	4b94      	ldr	r3, [pc, #592]	; (8013000 <DrawSpectrum+0x27c>)
 8012dae:	681a      	ldr	r2, [r3, #0]
 8012db0:	4b94      	ldr	r3, [pc, #592]	; (8013004 <DrawSpectrum+0x280>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d022      	beq.n	8012dfe <DrawSpectrum+0x7a>
		position = file_pos_wide;
 8012db8:	4a91      	ldr	r2, [pc, #580]	; (8013000 <DrawSpectrum+0x27c>)
 8012dba:	6013      	str	r3, [r2, #0]
		if(stretch > 1) {
 8012dbc:	4b92      	ldr	r3, [pc, #584]	; (8013008 <DrawSpectrum+0x284>)
 8012dbe:	edd3 7a00 	vldr	s15, [r3]
 8012dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dce:	dc04      	bgt.n	8012dda <DrawSpectrum+0x56>
 8012dd0:	e015      	b.n	8012dfe <DrawSpectrum+0x7a>
				position++;
 8012dd2:	4a8b      	ldr	r2, [pc, #556]	; (8013000 <DrawSpectrum+0x27c>)
 8012dd4:	6813      	ldr	r3, [r2, #0]
 8012dd6:	3301      	adds	r3, #1
 8012dd8:	6013      	str	r3, [r2, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 8012dda:	4b89      	ldr	r3, [pc, #548]	; (8013000 <DrawSpectrum+0x27c>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012de2:	ee17 1a10 	vmov	r1, s14
 8012de6:	fb93 f2f1 	sdiv	r2, r3, r1
 8012dea:	fb01 3212 	mls	r2, r1, r2, r3
 8012dee:	4b87      	ldr	r3, [pc, #540]	; (801300c <DrawSpectrum+0x288>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	fb93 f0f1 	sdiv	r0, r3, r1
 8012df6:	fb01 3310 	mls	r3, r1, r0, r3
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d1e9      	bne.n	8012dd2 <DrawSpectrum+0x4e>
		i = 0;
 8012dfe:	2100      	movs	r1, #0
 8012e00:	e021      	b.n	8012e46 <DrawSpectrum+0xc2>
				check = position + (int32_t)((i-240)*stretch);
 8012e02:	f1a2 03ef 	sub.w	r3, r2, #239	; 0xef
 8012e06:	ee07 3a90 	vmov	s15, r3
 8012e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e16:	4b7a      	ldr	r3, [pc, #488]	; (8013000 <DrawSpectrum+0x27c>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	ee17 4a90 	vmov	r4, s15
 8012e1e:	441c      	add	r4, r3
 8012e20:	4623      	mov	r3, r4
 8012e22:	4c7a      	ldr	r4, [pc, #488]	; (801300c <DrawSpectrum+0x288>)
 8012e24:	6023      	str	r3, [r4, #0]
				i++;
 8012e26:	3201      	adds	r2, #1
			while(check < rekordbox.cue_start_position[k]) {
 8012e28:	4b78      	ldr	r3, [pc, #480]	; (801300c <DrawSpectrum+0x288>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	4298      	cmp	r0, r3
 8012e2e:	dce8      	bgt.n	8012e02 <DrawSpectrum+0x7e>
			if(new_cues[k] != check) new_cues[k] = check;
 8012e30:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8012e34:	4b75      	ldr	r3, [pc, #468]	; (801300c <DrawSpectrum+0x288>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d003      	beq.n	8012e44 <DrawSpectrum+0xc0>
 8012e3c:	4b73      	ldr	r3, [pc, #460]	; (801300c <DrawSpectrum+0x288>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	for(k = 0; k < rekordbox.cues; k++) {
 8012e44:	3101      	adds	r1, #1
 8012e46:	4b6d      	ldr	r3, [pc, #436]	; (8012ffc <DrawSpectrum+0x278>)
 8012e48:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8012e4c:	4299      	cmp	r1, r3
 8012e4e:	da1d      	bge.n	8012e8c <DrawSpectrum+0x108>
		new_cues[k] = 0;
 8012e50:	2300      	movs	r3, #0
 8012e52:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
		check = position + (int32_t)((i-240)*stretch);
 8012e56:	4b6c      	ldr	r3, [pc, #432]	; (8013008 <DrawSpectrum+0x284>)
 8012e58:	ed93 7a00 	vldr	s14, [r3]
 8012e5c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8013010 <DrawSpectrum+0x28c>
 8012e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e68:	4b65      	ldr	r3, [pc, #404]	; (8013000 <DrawSpectrum+0x27c>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	ee17 2a90 	vmov	r2, s15
 8012e70:	441a      	add	r2, r3
 8012e72:	4c66      	ldr	r4, [pc, #408]	; (801300c <DrawSpectrum+0x288>)
 8012e74:	6022      	str	r2, [r4, #0]
		if(check < rekordbox.cue_start_position[k]) {
 8012e76:	f601 2302 	addw	r3, r1, #2562	; 0xa02
 8012e7a:	4a66      	ldr	r2, [pc, #408]	; (8013014 <DrawSpectrum+0x290>)
 8012e7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012e80:	6858      	ldr	r0, [r3, #4]
 8012e82:	6823      	ldr	r3, [r4, #0]
 8012e84:	4298      	cmp	r0, r3
 8012e86:	dddd      	ble.n	8012e44 <DrawSpectrum+0xc0>
		i = 0;
 8012e88:	2200      	movs	r2, #0
 8012e8a:	e7cd      	b.n	8012e28 <DrawSpectrum+0xa4>
	for(i = 0; i < 480; i++) {
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	e000      	b.n	8012e92 <DrawSpectrum+0x10e>
 8012e90:	3201      	adds	r2, #1
 8012e92:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8012e96:	da1c      	bge.n	8012ed2 <DrawSpectrum+0x14e>
		check = position + (int32_t)((i-240)*stretch);
 8012e98:	f1a2 03f0 	sub.w	r3, r2, #240	; 0xf0
 8012e9c:	ee07 3a90 	vmov	s15, r3
 8012ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ea4:	4b58      	ldr	r3, [pc, #352]	; (8013008 <DrawSpectrum+0x284>)
 8012ea6:	ed93 7a00 	vldr	s14, [r3]
 8012eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012eb2:	4b53      	ldr	r3, [pc, #332]	; (8013000 <DrawSpectrum+0x27c>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	ee17 1a90 	vmov	r1, s15
 8012eba:	4419      	add	r1, r3
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	4953      	ldr	r1, [pc, #332]	; (801300c <DrawSpectrum+0x288>)
 8012ec0:	600b      	str	r3, [r1, #0]
		if(check > 0) {
 8012ec2:	680b      	ldr	r3, [r1, #0]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dde3      	ble.n	8012e90 <DrawSpectrum+0x10c>
			spectrum_frame[i] = *(__IO uint8_t*)(WAVE_BUFFER+check);
 8012ec8:	6809      	ldr	r1, [r1, #0]
 8012eca:	4b53      	ldr	r3, [pc, #332]	; (8013018 <DrawSpectrum+0x294>)
 8012ecc:	5ccb      	ldrb	r3, [r1, r3]
 8012ece:	54bb      	strb	r3, [r7, r2]
 8012ed0:	e7de      	b.n	8012e90 <DrawSpectrum+0x10c>
	for(i = 0; i < 480; i++)
 8012ed2:	2400      	movs	r4, #0
 8012ed4:	e017      	b.n	8012f06 <DrawSpectrum+0x182>
			color = spectrum_frame[i] & 0xE0; // read color data - first 3 bits
 8012ed6:	5d3a      	ldrb	r2, [r7, r4]
 8012ed8:	f002 00e0 	and.w	r0, r2, #224	; 0xe0
 8012edc:	494f      	ldr	r1, [pc, #316]	; (801301c <DrawSpectrum+0x298>)
 8012ede:	6008      	str	r0, [r1, #0]
			color <<= 8;
 8012ee0:	0203      	lsls	r3, r0, #8
 8012ee2:	600b      	str	r3, [r1, #0]
			color = spectrum_frame[i] & 0xE0;
 8012ee4:	6008      	str	r0, [r1, #0]
			color <<= 8;
 8012ee6:	600b      	str	r3, [r1, #0]
			color |= 0x000000FF;
 8012ee8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8012eec:	600b      	str	r3, [r1, #0]
			height = spectrum_frame[i] & 0x1F; //read height data - last 5 bits
 8012eee:	f002 021f 	and.w	r2, r2, #31
 8012ef2:	494b      	ldr	r1, [pc, #300]	; (8013020 <DrawSpectrum+0x29c>)
 8012ef4:	600a      	str	r2, [r1, #0]
			VLine(i, 120-height, height*2, color);
 8012ef6:	f1c2 0178 	rsb	r1, r2, #120	; 0x78
 8012efa:	0052      	lsls	r2, r2, #1
 8012efc:	b289      	uxth	r1, r1
 8012efe:	b2a0      	uxth	r0, r4
 8012f00:	f7fe fc18 	bl	8011734 <VLine>
	for(i = 0; i < 480; i++)
 8012f04:	3401      	adds	r4, #1
 8012f06:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8012f0a:	da2e      	bge.n	8012f6a <DrawSpectrum+0x1e6>
		check = position + (int32_t)((i-240)*stretch);
 8012f0c:	f1a4 03f0 	sub.w	r3, r4, #240	; 0xf0
 8012f10:	ee07 3a90 	vmov	s15, r3
 8012f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f18:	4b3b      	ldr	r3, [pc, #236]	; (8013008 <DrawSpectrum+0x284>)
 8012f1a:	ed93 7a00 	vldr	s14, [r3]
 8012f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f26:	4b36      	ldr	r3, [pc, #216]	; (8013000 <DrawSpectrum+0x27c>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	ee17 2a90 	vmov	r2, s15
 8012f2e:	441a      	add	r2, r3
 8012f30:	4613      	mov	r3, r2
 8012f32:	4a36      	ldr	r2, [pc, #216]	; (801300c <DrawSpectrum+0x288>)
 8012f34:	6013      	str	r3, [r2, #0]
		if(check > 0) {
 8012f36:	6813      	ldr	r3, [r2, #0]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	dde3      	ble.n	8012f04 <DrawSpectrum+0x180>
			if(display.loop == 1) {
 8012f3c:	4b39      	ldr	r3, [pc, #228]	; (8013024 <DrawSpectrum+0x2a0>)
 8012f3e:	7c1b      	ldrb	r3, [r3, #16]
 8012f40:	2b01      	cmp	r3, #1
 8012f42:	d1c8      	bne.n	8012ed6 <DrawSpectrum+0x152>
				if((check >= display.loopstart) && (check <= display.loopend)) {
 8012f44:	4b37      	ldr	r3, [pc, #220]	; (8013024 <DrawSpectrum+0x2a0>)
 8012f46:	689a      	ldr	r2, [r3, #8]
 8012f48:	4b30      	ldr	r3, [pc, #192]	; (801300c <DrawSpectrum+0x288>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d8c2      	bhi.n	8012ed6 <DrawSpectrum+0x152>
 8012f50:	4b34      	ldr	r3, [pc, #208]	; (8013024 <DrawSpectrum+0x2a0>)
 8012f52:	68da      	ldr	r2, [r3, #12]
 8012f54:	4b2d      	ldr	r3, [pc, #180]	; (801300c <DrawSpectrum+0x288>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	d3bc      	bcc.n	8012ed6 <DrawSpectrum+0x152>
					VLine(i, 75, 90, 0x008F8F8F);
 8012f5c:	4b32      	ldr	r3, [pc, #200]	; (8013028 <DrawSpectrum+0x2a4>)
 8012f5e:	225a      	movs	r2, #90	; 0x5a
 8012f60:	214b      	movs	r1, #75	; 0x4b
 8012f62:	b2a0      	uxth	r0, r4
 8012f64:	f7fe fbe6 	bl	8011734 <VLine>
 8012f68:	e7b5      	b.n	8012ed6 <DrawSpectrum+0x152>
	for(i = 0; i < 480; i++)
 8012f6a:	2600      	movs	r6, #0
 8012f6c:	e063      	b.n	8013036 <DrawSpectrum+0x2b2>
						VLine(i, 75, 4, 0x00FF0000);
 8012f6e:	b2b4      	uxth	r4, r6
 8012f70:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012f74:	2204      	movs	r2, #4
 8012f76:	214b      	movs	r1, #75	; 0x4b
 8012f78:	4620      	mov	r0, r4
 8012f7a:	f7fe fbdb 	bl	8011734 <VLine>
						VLine(i, 161, 4, 0x00FF0000);
 8012f7e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012f82:	2204      	movs	r2, #4
 8012f84:	21a1      	movs	r1, #161	; 0xa1
 8012f86:	4620      	mov	r0, r4
 8012f88:	f7fe fbd4 	bl	8011734 <VLine>
 8012f8c:	e09c      	b.n	80130c8 <DrawSpectrum+0x344>
				if(check == new_cues[0]) {
 8012f8e:	682a      	ldr	r2, [r5, #0]
 8012f90:	4b1e      	ldr	r3, [pc, #120]	; (801300c <DrawSpectrum+0x288>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	f040 80a1 	bne.w	80130dc <DrawSpectrum+0x358>
					if((i > 10) && (i < 472))
 8012f9a:	f1a6 030b 	sub.w	r3, r6, #11
 8012f9e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8012fa2:	f200 809b 	bhi.w	80130dc <DrawSpectrum+0x358>
						DrawElement(15, 5, i - 11, 72, 0x00FFFF00, hot_cue_wide);
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	4b20      	ldr	r3, [pc, #128]	; (801302c <DrawSpectrum+0x2a8>)
 8012faa:	9301      	str	r3, [sp, #4]
 8012fac:	4b20      	ldr	r3, [pc, #128]	; (8013030 <DrawSpectrum+0x2ac>)
 8012fae:	9300      	str	r3, [sp, #0]
 8012fb0:	2348      	movs	r3, #72	; 0x48
 8012fb2:	b292      	uxth	r2, r2
 8012fb4:	2105      	movs	r1, #5
 8012fb6:	200f      	movs	r0, #15
 8012fb8:	f7fe fb74 	bl	80116a4 <DrawElement>
 8012fbc:	e08e      	b.n	80130dc <DrawSpectrum+0x358>
			for(int k = 1; k < rekordbox.cues; k++) {
 8012fbe:	3401      	adds	r4, #1
 8012fc0:	4b0e      	ldr	r3, [pc, #56]	; (8012ffc <DrawSpectrum+0x278>)
 8012fc2:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8012fc6:	42a3      	cmp	r3, r4
 8012fc8:	dd34      	ble.n	8013034 <DrawSpectrum+0x2b0>
				if(check == new_cues[k]) {
 8012fca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012fce:	4b0f      	ldr	r3, [pc, #60]	; (801300c <DrawSpectrum+0x288>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d1f3      	bne.n	8012fbe <DrawSpectrum+0x23a>
					if((i > 10) && (i < 472))
 8012fd6:	f1a6 030b 	sub.w	r3, r6, #11
 8012fda:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8012fde:	d8ee      	bhi.n	8012fbe <DrawSpectrum+0x23a>
						DrawElement(15, 5, i - 11, 72, 0x00FF0000, hot_cue_wide);
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	4b12      	ldr	r3, [pc, #72]	; (801302c <DrawSpectrum+0x2a8>)
 8012fe4:	9301      	str	r3, [sp, #4]
 8012fe6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012fea:	9300      	str	r3, [sp, #0]
 8012fec:	2348      	movs	r3, #72	; 0x48
 8012fee:	b292      	uxth	r2, r2
 8012ff0:	2105      	movs	r1, #5
 8012ff2:	200f      	movs	r0, #15
 8012ff4:	f7fe fb56 	bl	80116a4 <DrawElement>
 8012ff8:	e7e1      	b.n	8012fbe <DrawSpectrum+0x23a>
 8012ffa:	bf00      	nop
 8012ffc:	20016620 	.word	0x20016620
 8013000:	20000610 	.word	0x20000610
 8013004:	2000e3d4 	.word	0x2000e3d4
 8013008:	20000028 	.word	0x20000028
 801300c:	200005e8 	.word	0x200005e8
 8013010:	c3700000 	.word	0xc3700000
 8013014:	20014620 	.word	0x20014620
 8013018:	c00ff000 	.word	0xc00ff000
 801301c:	200005ec 	.word	0x200005ec
 8013020:	20000608 	.word	0x20000608
 8013024:	200005f0 	.word	0x200005f0
 8013028:	008f8f8f 	.word	0x008f8f8f
 801302c:	0801ed50 	.word	0x0801ed50
 8013030:	00ffff00 	.word	0x00ffff00
	for(i = 0; i < 480; i++)
 8013034:	3601      	adds	r6, #1
 8013036:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 801303a:	da51      	bge.n	80130e0 <DrawSpectrum+0x35c>
		check = position + (int32_t)((i-240)*stretch);
 801303c:	f1a6 03f0 	sub.w	r3, r6, #240	; 0xf0
 8013040:	ee07 3a90 	vmov	s15, r3
 8013044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013048:	4bc8      	ldr	r3, [pc, #800]	; (801336c <DrawSpectrum+0x5e8>)
 801304a:	ed93 7a00 	vldr	s14, [r3]
 801304e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013056:	4bc6      	ldr	r3, [pc, #792]	; (8013370 <DrawSpectrum+0x5ec>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	ee17 2a90 	vmov	r2, s15
 801305e:	441a      	add	r2, r3
 8013060:	4613      	mov	r3, r2
 8013062:	4ac4      	ldr	r2, [pc, #784]	; (8013374 <DrawSpectrum+0x5f0>)
 8013064:	6013      	str	r3, [r2, #0]
		if(check > 0) {
 8013066:	6813      	ldr	r3, [r2, #0]
 8013068:	2b00      	cmp	r3, #0
 801306a:	dde3      	ble.n	8013034 <DrawSpectrum+0x2b0>
			if(first_beat <= rekordbox.timezones) {
 801306c:	4bc2      	ldr	r3, [pc, #776]	; (8013378 <DrawSpectrum+0x5f4>)
 801306e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8013072:	4bc2      	ldr	r3, [pc, #776]	; (801337c <DrawSpectrum+0x5f8>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	429a      	cmp	r2, r3
 8013078:	d32a      	bcc.n	80130d0 <DrawSpectrum+0x34c>
				if(check >= (int32_t)(rekordbox.timeindex[first_beat]*150/1000)) {
 801307a:	f203 42aa 	addw	r2, r3, #1194	; 0x4aa
 801307e:	49be      	ldr	r1, [pc, #760]	; (8013378 <DrawSpectrum+0x5f4>)
 8013080:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8013084:	2196      	movs	r1, #150	; 0x96
 8013086:	fb01 f202 	mul.w	r2, r1, r2
 801308a:	49bd      	ldr	r1, [pc, #756]	; (8013380 <DrawSpectrum+0x5fc>)
 801308c:	fba1 1202 	umull	r1, r2, r1, r2
 8013090:	49b8      	ldr	r1, [pc, #736]	; (8013374 <DrawSpectrum+0x5f0>)
 8013092:	6809      	ldr	r1, [r1, #0]
 8013094:	ebb1 1f92 	cmp.w	r1, r2, lsr #6
 8013098:	db1a      	blt.n	80130d0 <DrawSpectrum+0x34c>
					if(rekordbox.phase[first_beat] == 1) {
 801309a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801309e:	4ab6      	ldr	r2, [pc, #728]	; (8013378 <DrawSpectrum+0x5f4>)
 80130a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	f43f af62 	beq.w	8012f6e <DrawSpectrum+0x1ea>
						VLine(i, 75, 4, 0x00FFFFFF);
 80130aa:	b2b4      	uxth	r4, r6
 80130ac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80130b0:	2204      	movs	r2, #4
 80130b2:	214b      	movs	r1, #75	; 0x4b
 80130b4:	4620      	mov	r0, r4
 80130b6:	f7fe fb3d 	bl	8011734 <VLine>
						VLine(i, 161, 4, 0x00FFFFFF);
 80130ba:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80130be:	2204      	movs	r2, #4
 80130c0:	21a1      	movs	r1, #161	; 0xa1
 80130c2:	4620      	mov	r0, r4
 80130c4:	f7fe fb36 	bl	8011734 <VLine>
					first_beat++;
 80130c8:	4aac      	ldr	r2, [pc, #688]	; (801337c <DrawSpectrum+0x5f8>)
 80130ca:	6813      	ldr	r3, [r2, #0]
 80130cc:	3301      	adds	r3, #1
 80130ce:	6013      	str	r3, [r2, #0]
			if(rekordbox.state == 1) {
 80130d0:	4bac      	ldr	r3, [pc, #688]	; (8013384 <DrawSpectrum+0x600>)
 80130d2:	f893 3b98 	ldrb.w	r3, [r3, #2968]	; 0xb98
 80130d6:	2b01      	cmp	r3, #1
 80130d8:	f43f af59 	beq.w	8012f8e <DrawSpectrum+0x20a>
	for(i = 0; i < 480; i++)
 80130dc:	2401      	movs	r4, #1
 80130de:	e76f      	b.n	8012fc0 <DrawSpectrum+0x23c>
	VLine(239, 75, 90, 0x00FFFFFF);
 80130e0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80130e4:	225a      	movs	r2, #90	; 0x5a
 80130e6:	214b      	movs	r1, #75	; 0x4b
 80130e8:	20ef      	movs	r0, #239	; 0xef
 80130ea:	f7fe fb23 	bl	8011734 <VLine>
	VLine(240, 75, 90, 0x00FFFFFF);
 80130ee:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80130f2:	225a      	movs	r2, #90	; 0x5a
 80130f4:	214b      	movs	r1, #75	; 0x4b
 80130f6:	20f0      	movs	r0, #240	; 0xf0
 80130f8:	f7fe fb1c 	bl	8011734 <VLine>
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 80130fc:	4ba1      	ldr	r3, [pc, #644]	; (8013384 <DrawSpectrum+0x600>)
 80130fe:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 8013102:	4aa1      	ldr	r2, [pc, #644]	; (8013388 <DrawSpectrum+0x604>)
 8013104:	6812      	ldr	r2, [r2, #0]
 8013106:	189b      	adds	r3, r3, r2
 8013108:	f100 80e9 	bmi.w	80132de <DrawSpectrum+0x55a>
 801310c:	109b      	asrs	r3, r3, #2
 801310e:	4a9f      	ldr	r2, [pc, #636]	; (801338c <DrawSpectrum+0x608>)
 8013110:	6013      	str	r3, [r2, #0]
	if(bar / 100 > 0) {
 8013112:	2b63      	cmp	r3, #99	; 0x63
 8013114:	f300 80e5 	bgt.w	80132e2 <DrawSpectrum+0x55e>
	else if(bar / 10 > 0) DrawDigit(bar / 10, 314, 51, 7, 0x000000FF);
 8013118:	2b09      	cmp	r3, #9
 801311a:	f300 810a 	bgt.w	8013332 <DrawSpectrum+0x5ae>
	DrawDigit(bar % 10, 323, 51, 7, 0x000000FF);
 801311e:	4b9b      	ldr	r3, [pc, #620]	; (801338c <DrawSpectrum+0x608>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	4a9b      	ldr	r2, [pc, #620]	; (8013390 <DrawSpectrum+0x60c>)
 8013124:	fb82 1203 	smull	r1, r2, r2, r3
 8013128:	17d8      	asrs	r0, r3, #31
 801312a:	ebc0 00a2 	rsb	r0, r0, r2, asr #2
 801312e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013132:	0042      	lsls	r2, r0, #1
 8013134:	1a98      	subs	r0, r3, r2
 8013136:	24ff      	movs	r4, #255	; 0xff
 8013138:	9400      	str	r4, [sp, #0]
 801313a:	2307      	movs	r3, #7
 801313c:	2233      	movs	r2, #51	; 0x33
 801313e:	f240 1143 	movw	r1, #323	; 0x143
 8013142:	b2c0      	uxtb	r0, r0
 8013144:	f7fe fbb4 	bl	80118b0 <DrawDigit>
	DrawElement(2, 2, 332, 63, 0x000000FF, small_point);
 8013148:	4b92      	ldr	r3, [pc, #584]	; (8013394 <DrawSpectrum+0x610>)
 801314a:	9301      	str	r3, [sp, #4]
 801314c:	9400      	str	r4, [sp, #0]
 801314e:	233f      	movs	r3, #63	; 0x3f
 8013150:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8013154:	2102      	movs	r1, #2
 8013156:	4608      	mov	r0, r1
 8013158:	f7fe faa4 	bl	80116a4 <DrawElement>
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 801315c:	4d86      	ldr	r5, [pc, #536]	; (8013378 <DrawSpectrum+0x5f4>)
 801315e:	4e8a      	ldr	r6, [pc, #552]	; (8013388 <DrawSpectrum+0x604>)
 8013160:	6833      	ldr	r3, [r6, #0]
 8013162:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 8013166:	9400      	str	r4, [sp, #0]
 8013168:	2307      	movs	r3, #7
 801316a:	2233      	movs	r2, #51	; 0x33
 801316c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8013170:	f815 0010 	ldrb.w	r0, [r5, r0, lsl #1]
 8013174:	f7fe fb9c 	bl	80118b0 <DrawDigit>
	DrawElement(19, 6, 348, 63, 0x000000FF, bars);
 8013178:	4b87      	ldr	r3, [pc, #540]	; (8013398 <DrawSpectrum+0x614>)
 801317a:	9301      	str	r3, [sp, #4]
 801317c:	9400      	str	r4, [sp, #0]
 801317e:	233f      	movs	r3, #63	; 0x3f
 8013180:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8013184:	2106      	movs	r1, #6
 8013186:	2013      	movs	r0, #19
 8013188:	f7fe fa8c 	bl	80116a4 <DrawElement>
	VLine(171, 54, 9, 0x000000FF);
 801318c:	4623      	mov	r3, r4
 801318e:	2209      	movs	r2, #9
 8013190:	2136      	movs	r1, #54	; 0x36
 8013192:	20ab      	movs	r0, #171	; 0xab
 8013194:	f7fe face 	bl	8011734 <VLine>
	HLine(172, 54, 28, 0x000000FF);
 8013198:	4623      	mov	r3, r4
 801319a:	221c      	movs	r2, #28
 801319c:	2136      	movs	r1, #54	; 0x36
 801319e:	20ac      	movs	r0, #172	; 0xac
 80131a0:	f7fe fb04 	bl	80117ac <HLine>
	HLine(172, 62, 28, 0x000000FF);
 80131a4:	4623      	mov	r3, r4
 80131a6:	221c      	movs	r2, #28
 80131a8:	213e      	movs	r1, #62	; 0x3e
 80131aa:	20ac      	movs	r0, #172	; 0xac
 80131ac:	f7fe fafe 	bl	80117ac <HLine>
	VLine(200, 54, 9, 0x000000FF);
 80131b0:	4623      	mov	r3, r4
 80131b2:	2209      	movs	r2, #9
 80131b4:	2136      	movs	r1, #54	; 0x36
 80131b6:	20c8      	movs	r0, #200	; 0xc8
 80131b8:	f7fe fabc 	bl	8011734 <VLine>
	VLine(201, 57, 3, 0x000000FF);
 80131bc:	4623      	mov	r3, r4
 80131be:	2203      	movs	r2, #3
 80131c0:	2139      	movs	r1, #57	; 0x39
 80131c2:	20c9      	movs	r0, #201	; 0xc9
 80131c4:	f7fe fab6 	bl	8011734 <VLine>
	VLine(202, 57, 3, 0x000000FF);
 80131c8:	4623      	mov	r3, r4
 80131ca:	2203      	movs	r2, #3
 80131cc:	2139      	movs	r1, #57	; 0x39
 80131ce:	20ca      	movs	r0, #202	; 0xca
 80131d0:	f7fe fab0 	bl	8011734 <VLine>
	VLine(203, 57, 3, 0x000000FF);
 80131d4:	4623      	mov	r3, r4
 80131d6:	2203      	movs	r2, #3
 80131d8:	2139      	movs	r1, #57	; 0x39
 80131da:	20cb      	movs	r0, #203	; 0xcb
 80131dc:	f7fe faaa 	bl	8011734 <VLine>
	VLine(204, 54, 9, 0x000000FF);
 80131e0:	4623      	mov	r3, r4
 80131e2:	2209      	movs	r2, #9
 80131e4:	2136      	movs	r1, #54	; 0x36
 80131e6:	20cc      	movs	r0, #204	; 0xcc
 80131e8:	f7fe faa4 	bl	8011734 <VLine>
	HLine(205, 54, 28, 0x000000FF);
 80131ec:	4623      	mov	r3, r4
 80131ee:	221c      	movs	r2, #28
 80131f0:	2136      	movs	r1, #54	; 0x36
 80131f2:	20cd      	movs	r0, #205	; 0xcd
 80131f4:	f7fe fada 	bl	80117ac <HLine>
	HLine(205, 62, 28, 0x000000FF);
 80131f8:	4623      	mov	r3, r4
 80131fa:	221c      	movs	r2, #28
 80131fc:	213e      	movs	r1, #62	; 0x3e
 80131fe:	20cd      	movs	r0, #205	; 0xcd
 8013200:	f7fe fad4 	bl	80117ac <HLine>
	VLine(233, 54, 9, 0x000000FF);
 8013204:	4623      	mov	r3, r4
 8013206:	2209      	movs	r2, #9
 8013208:	2136      	movs	r1, #54	; 0x36
 801320a:	20e9      	movs	r0, #233	; 0xe9
 801320c:	f7fe fa92 	bl	8011734 <VLine>
	VLine(234, 57, 3, 0x000000FF);
 8013210:	4623      	mov	r3, r4
 8013212:	2203      	movs	r2, #3
 8013214:	2139      	movs	r1, #57	; 0x39
 8013216:	20ea      	movs	r0, #234	; 0xea
 8013218:	f7fe fa8c 	bl	8011734 <VLine>
	VLine(235, 57, 3, 0x000000FF);
 801321c:	4623      	mov	r3, r4
 801321e:	2203      	movs	r2, #3
 8013220:	2139      	movs	r1, #57	; 0x39
 8013222:	20eb      	movs	r0, #235	; 0xeb
 8013224:	f7fe fa86 	bl	8011734 <VLine>
	VLine(236, 57, 3, 0x000000FF);
 8013228:	4623      	mov	r3, r4
 801322a:	2203      	movs	r2, #3
 801322c:	2139      	movs	r1, #57	; 0x39
 801322e:	20ec      	movs	r0, #236	; 0xec
 8013230:	f7fe fa80 	bl	8011734 <VLine>
	VLine(237, 54, 9, 0x000000FF);
 8013234:	4623      	mov	r3, r4
 8013236:	2209      	movs	r2, #9
 8013238:	2136      	movs	r1, #54	; 0x36
 801323a:	20ed      	movs	r0, #237	; 0xed
 801323c:	f7fe fa7a 	bl	8011734 <VLine>
	HLine(238, 54, 28, 0x000000FF);
 8013240:	4623      	mov	r3, r4
 8013242:	221c      	movs	r2, #28
 8013244:	2136      	movs	r1, #54	; 0x36
 8013246:	20ee      	movs	r0, #238	; 0xee
 8013248:	f7fe fab0 	bl	80117ac <HLine>
	HLine(238, 62, 28, 0x000000FF);
 801324c:	4623      	mov	r3, r4
 801324e:	221c      	movs	r2, #28
 8013250:	213e      	movs	r1, #62	; 0x3e
 8013252:	20ee      	movs	r0, #238	; 0xee
 8013254:	f7fe faaa 	bl	80117ac <HLine>
	VLine(266, 54, 9, 0x000000FF);
 8013258:	4623      	mov	r3, r4
 801325a:	2209      	movs	r2, #9
 801325c:	2136      	movs	r1, #54	; 0x36
 801325e:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8013262:	f7fe fa67 	bl	8011734 <VLine>
	VLine(267, 57, 3, 0x000000FF);
 8013266:	4623      	mov	r3, r4
 8013268:	2203      	movs	r2, #3
 801326a:	2139      	movs	r1, #57	; 0x39
 801326c:	f240 100b 	movw	r0, #267	; 0x10b
 8013270:	f7fe fa60 	bl	8011734 <VLine>
	VLine(268, 57, 3, 0x000000FF);
 8013274:	4623      	mov	r3, r4
 8013276:	2203      	movs	r2, #3
 8013278:	2139      	movs	r1, #57	; 0x39
 801327a:	f44f 7086 	mov.w	r0, #268	; 0x10c
 801327e:	f7fe fa59 	bl	8011734 <VLine>
	VLine(269, 57, 3, 0x000000FF);
 8013282:	4623      	mov	r3, r4
 8013284:	2203      	movs	r2, #3
 8013286:	2139      	movs	r1, #57	; 0x39
 8013288:	f240 100d 	movw	r0, #269	; 0x10d
 801328c:	f7fe fa52 	bl	8011734 <VLine>
	VLine(270, 54, 9, 0x000000FF);
 8013290:	4623      	mov	r3, r4
 8013292:	2209      	movs	r2, #9
 8013294:	2136      	movs	r1, #54	; 0x36
 8013296:	f44f 7087 	mov.w	r0, #270	; 0x10e
 801329a:	f7fe fa4b 	bl	8011734 <VLine>
	HLine(271, 54, 28, 0x000000FF);
 801329e:	4623      	mov	r3, r4
 80132a0:	221c      	movs	r2, #28
 80132a2:	2136      	movs	r1, #54	; 0x36
 80132a4:	f240 100f 	movw	r0, #271	; 0x10f
 80132a8:	f7fe fa80 	bl	80117ac <HLine>
	HLine(271, 62, 28, 0x000000FF);
 80132ac:	4623      	mov	r3, r4
 80132ae:	221c      	movs	r2, #28
 80132b0:	213e      	movs	r1, #62	; 0x3e
 80132b2:	f240 100f 	movw	r0, #271	; 0x10f
 80132b6:	f7fe fa79 	bl	80117ac <HLine>
	VLine(299, 54, 9, 0x000000FF);
 80132ba:	4623      	mov	r3, r4
 80132bc:	2209      	movs	r2, #9
 80132be:	2136      	movs	r1, #54	; 0x36
 80132c0:	f240 102b 	movw	r0, #299	; 0x12b
 80132c4:	f7fe fa36 	bl	8011734 <VLine>
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 80132c8:	6833      	ldr	r3, [r6, #0]
 80132ca:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80132ce:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d13d      	bne.n	8013352 <DrawSpectrum+0x5ce>
}
 80132d6:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 80132da:	46bd      	mov	sp, r7
 80132dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 80132de:	3303      	adds	r3, #3
 80132e0:	e714      	b.n	801310c <DrawSpectrum+0x388>
		DrawDigit(bar / 100, 305, 51, 7, 0x000000FF);
 80132e2:	4c2e      	ldr	r4, [pc, #184]	; (801339c <DrawSpectrum+0x618>)
 80132e4:	fb84 2003 	smull	r2, r0, r4, r3
 80132e8:	17db      	asrs	r3, r3, #31
 80132ea:	ebc3 1060 	rsb	r0, r3, r0, asr #5
 80132ee:	25ff      	movs	r5, #255	; 0xff
 80132f0:	9500      	str	r5, [sp, #0]
 80132f2:	2307      	movs	r3, #7
 80132f4:	2233      	movs	r2, #51	; 0x33
 80132f6:	f240 1131 	movw	r1, #305	; 0x131
 80132fa:	b2c0      	uxtb	r0, r0
 80132fc:	f7fe fad8 	bl	80118b0 <DrawDigit>
		DrawDigit(bar % 100 / 10 , 314, 51, 7, 0x000000FF);
 8013300:	4b22      	ldr	r3, [pc, #136]	; (801338c <DrawSpectrum+0x608>)
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	fb84 3402 	smull	r3, r4, r4, r2
 8013308:	17d3      	asrs	r3, r2, #31
 801330a:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 801330e:	2164      	movs	r1, #100	; 0x64
 8013310:	fb01 2313 	mls	r3, r1, r3, r2
 8013314:	481e      	ldr	r0, [pc, #120]	; (8013390 <DrawSpectrum+0x60c>)
 8013316:	fb80 2003 	smull	r2, r0, r0, r3
 801331a:	17db      	asrs	r3, r3, #31
 801331c:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 8013320:	9500      	str	r5, [sp, #0]
 8013322:	2307      	movs	r3, #7
 8013324:	2233      	movs	r2, #51	; 0x33
 8013326:	f44f 719d 	mov.w	r1, #314	; 0x13a
 801332a:	b2c0      	uxtb	r0, r0
 801332c:	f7fe fac0 	bl	80118b0 <DrawDigit>
 8013330:	e6f5      	b.n	801311e <DrawSpectrum+0x39a>
	else if(bar / 10 > 0) DrawDigit(bar / 10, 314, 51, 7, 0x000000FF);
 8013332:	4817      	ldr	r0, [pc, #92]	; (8013390 <DrawSpectrum+0x60c>)
 8013334:	fb80 2003 	smull	r2, r0, r0, r3
 8013338:	17db      	asrs	r3, r3, #31
 801333a:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 801333e:	23ff      	movs	r3, #255	; 0xff
 8013340:	9300      	str	r3, [sp, #0]
 8013342:	2307      	movs	r3, #7
 8013344:	2233      	movs	r2, #51	; 0x33
 8013346:	f44f 719d 	mov.w	r1, #314	; 0x13a
 801334a:	b2c0      	uxtb	r0, r0
 801334c:	f7fe fab0 	bl	80118b0 <DrawDigit>
 8013350:	e6e5      	b.n	801311e <DrawSpectrum+0x39a>
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 8013352:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8013356:	f103 008b 	add.w	r0, r3, #139	; 0x8b
 801335a:	9400      	str	r4, [sp, #0]
 801335c:	2307      	movs	r3, #7
 801335e:	221c      	movs	r2, #28
 8013360:	2137      	movs	r1, #55	; 0x37
 8013362:	b280      	uxth	r0, r0
 8013364:	f7fe fa62 	bl	801182c <Rectangle>
}
 8013368:	e7b5      	b.n	80132d6 <DrawSpectrum+0x552>
 801336a:	bf00      	nop
 801336c:	20000028 	.word	0x20000028
 8013370:	20000610 	.word	0x20000610
 8013374:	200005e8 	.word	0x200005e8
 8013378:	20014620 	.word	0x20014620
 801337c:	20000604 	.word	0x20000604
 8013380:	10624dd3 	.word	0x10624dd3
 8013384:	20016620 	.word	0x20016620
 8013388:	200005e4 	.word	0x200005e4
 801338c:	200005e0 	.word	0x200005e0
 8013390:	66666667 	.word	0x66666667
 8013394:	0801f654 	.word	0x0801f654
 8013398:	0801e410 	.word	0x0801e410
 801339c:	51eb851f 	.word	0x51eb851f

080133a0 <DrawString>:

void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
{
 80133a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a4:	b087      	sub	sp, #28
 80133a6:	9005      	str	r0, [sp, #20]
 80133a8:	460f      	mov	r7, r1
 80133aa:	4614      	mov	r4, r2
 80133ac:	9303      	str	r3, [sp, #12]
 80133ae:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	hdma2d.Init.Mode = DMA2D_R2M;
 80133b2:	4883      	ldr	r0, [pc, #524]	; (80135c0 <DrawString+0x220>)
 80133b4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80133b8:	6043      	str	r3, [r0, #4]
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 80133ba:	2302      	movs	r3, #2
 80133bc:	6083      	str	r3, [r0, #8]
	hdma2d.Init.OutputOffset = Xpos;
 80133be:	60c1      	str	r1, [r0, #12]
	hdma2d.Instance = DMA2D;
 80133c0:	4b80      	ldr	r3, [pc, #512]	; (80135c4 <DrawString+0x224>)
 80133c2:	6003      	str	r3, [r0, #0]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80133c4:	f7ee fbd8 	bl	8001b78 <HAL_DMA2D_Init>
 80133c8:	b130      	cbz	r0, 80133d8 <DrawString+0x38>
			{
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
			}
		}
	}
	int xpos = Xpos + 5;
 80133ca:	3705      	adds	r7, #5
	Ypos -= 4;
 80133cc:	3c04      	subs	r4, #4
 80133ce:	fa1f f884 	uxth.w	r8, r4
	uint16_t k = 0;
	int i = 0;
	int l = 0;
 80133d2:	2300      	movs	r3, #0
 80133d4:	9304      	str	r3, [sp, #16]
	while(str[l] != 0) {
 80133d6:	e0dd      	b.n	8013594 <DrawString+0x1f4>
		if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK)
 80133d8:	4b7b      	ldr	r3, [pc, #492]	; (80135c8 <DrawString+0x228>)
 80133da:	7819      	ldrb	r1, [r3, #0]
 80133dc:	4878      	ldr	r0, [pc, #480]	; (80135c0 <DrawString+0x220>)
 80133de:	f7ee fd01 	bl	8001de4 <HAL_DMA2D_ConfigLayer>
 80133e2:	2800      	cmp	r0, #0
 80133e4:	d1f1      	bne.n	80133ca <DrawString+0x2a>
			if (HAL_DMA2D_Start(&hdma2d, fontcolor, hltdc.LayerCfg[ActiveLayer].FBStartAdress + 2*(480*(Ypos-20)+Xpos),
 80133e6:	4b78      	ldr	r3, [pc, #480]	; (80135c8 <DrawString+0x228>)
 80133e8:	781a      	ldrb	r2, [r3, #0]
 80133ea:	4b78      	ldr	r3, [pc, #480]	; (80135cc <DrawString+0x22c>)
 80133ec:	2134      	movs	r1, #52	; 0x34
 80133ee:	fb01 3302 	mla	r3, r1, r2, r3
 80133f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80133f4:	f1a4 0314 	sub.w	r3, r4, #20
 80133f8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80133fc:	eb07 1243 	add.w	r2, r7, r3, lsl #5
 8013400:	2314      	movs	r3, #20
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	f5c7 73f0 	rsb	r3, r7, #480	; 0x1e0
 8013408:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801340c:	4649      	mov	r1, r9
 801340e:	486c      	ldr	r0, [pc, #432]	; (80135c0 <DrawString+0x220>)
 8013410:	f7ee fc10 	bl	8001c34 <HAL_DMA2D_Start>
 8013414:	2800      	cmp	r0, #0
 8013416:	d1d8      	bne.n	80133ca <DrawString+0x2a>
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8013418:	210a      	movs	r1, #10
 801341a:	4869      	ldr	r0, [pc, #420]	; (80135c0 <DrawString+0x220>)
 801341c:	f7ee fc42 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
 8013420:	e7d3      	b.n	80133ca <DrawString+0x2a>
		if((str[l] > 32) && (str[l] < 128)) {
			i = 0;
 8013422:	f04f 0a00 	mov.w	sl, #0
 8013426:	e040      	b.n	80134aa <DrawString+0x10a>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
						}
						else {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8013428:	4b67      	ldr	r3, [pc, #412]	; (80135c8 <DrawString+0x228>)
 801342a:	781a      	ldrb	r2, [r3, #0]
 801342c:	4b67      	ldr	r3, [pc, #412]	; (80135cc <DrawString+0x22c>)
 801342e:	2134      	movs	r1, #52	; 0x34
 8013430:	fb01 3302 	mla	r3, r1, r2, r3
 8013434:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 8013438:	eba8 0504 	sub.w	r5, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 801343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801343e:	fb03 7505 	mla	r5, r3, r5, r7
 8013442:	4455      	add	r5, sl
 8013444:	4648      	mov	r0, r9
 8013446:	f7fe f83b 	bl	80114c0 <Color_Convertion>
 801344a:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
						}
						k++;
 801344e:	3401      	adds	r4, #1
 8013450:	b2a4      	uxth	r4, r4
					while(k < 13) {
 8013452:	2c0c      	cmp	r4, #12
 8013454:	d82c      	bhi.n	80134b0 <DrawString+0x110>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 8013456:	7833      	ldrb	r3, [r6, #0]
 8013458:	3b21      	subs	r3, #33	; 0x21
 801345a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801345e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8013462:	4a5b      	ldr	r2, [pc, #364]	; (80135d0 <DrawString+0x230>)
 8013464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013468:	4123      	asrs	r3, r4
 801346a:	f013 0f01 	tst.w	r3, #1
 801346e:	d0db      	beq.n	8013428 <DrawString+0x88>
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8013470:	4b55      	ldr	r3, [pc, #340]	; (80135c8 <DrawString+0x228>)
 8013472:	781b      	ldrb	r3, [r3, #0]
 8013474:	4a55      	ldr	r2, [pc, #340]	; (80135cc <DrawString+0x22c>)
 8013476:	2134      	movs	r1, #52	; 0x34
 8013478:	fb01 2203 	mla	r2, r1, r3, r2
 801347c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 801347e:	eba8 0304 	sub.w	r3, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013482:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8013484:	fb02 7303 	mla	r3, r2, r3, r7
 8013488:	4453      	add	r3, sl
 801348a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801348e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8013492:	e7dc      	b.n	801344e <DrawString+0xae>
				k = 0;
 8013494:	2400      	movs	r4, #0
 8013496:	e7dc      	b.n	8013452 <DrawString+0xb2>
					}
				}
				if(font[(str[l]-33)*12+i] == 0) {
					if(font[(str[l]-33)*12+i+1] == 0) {
						i++;
 8013498:	f10a 0a01 	add.w	sl, sl, #1
				else {
					i++;
				}
			}
			while(i < 12);
			xpos += i;
 801349c:	4457      	add	r7, sl
 801349e:	e083      	b.n	80135a8 <DrawString+0x208>
					i++;
 80134a0:	f10a 0a01 	add.w	sl, sl, #1
			while(i < 12);
 80134a4:	f1ba 0f0b 	cmp.w	sl, #11
 80134a8:	dcf8      	bgt.n	801349c <DrawString+0xfc>
				if(xpos < 470) {
 80134aa:	f5b7 7feb 	cmp.w	r7, #470	; 0x1d6
 80134ae:	dbf1      	blt.n	8013494 <DrawString+0xf4>
				if(font[(str[l]-33)*12+i] == 0) {
 80134b0:	7833      	ldrb	r3, [r6, #0]
 80134b2:	3b21      	subs	r3, #33	; 0x21
 80134b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80134b8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80134bc:	4a44      	ldr	r2, [pc, #272]	; (80135d0 <DrawString+0x230>)
 80134be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80134c2:	2a00      	cmp	r2, #0
 80134c4:	d1ec      	bne.n	80134a0 <DrawString+0x100>
					if(font[(str[l]-33)*12+i+1] == 0) {
 80134c6:	3301      	adds	r3, #1
 80134c8:	4a41      	ldr	r2, [pc, #260]	; (80135d0 <DrawString+0x230>)
 80134ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d0e2      	beq.n	8013498 <DrawString+0xf8>
					i++;
 80134d2:	f10a 0a01 	add.w	sl, sl, #1
 80134d6:	e7e5      	b.n	80134a4 <DrawString+0x104>
		}
		if(str[l] > 191) {
			i = 0;
 80134d8:	f04f 0a00 	mov.w	sl, #0
 80134dc:	e040      	b.n	8013560 <DrawString+0x1c0>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
						}
						else {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 80134de:	4b3a      	ldr	r3, [pc, #232]	; (80135c8 <DrawString+0x228>)
 80134e0:	781a      	ldrb	r2, [r3, #0]
 80134e2:	4b3a      	ldr	r3, [pc, #232]	; (80135cc <DrawString+0x22c>)
 80134e4:	2134      	movs	r1, #52	; 0x34
 80134e6:	fb01 3302 	mla	r3, r1, r2, r3
 80134ea:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 80134ee:	eba8 0504 	sub.w	r5, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 80134f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80134f4:	fb03 7505 	mla	r5, r3, r5, r7
 80134f8:	4455      	add	r5, sl
 80134fa:	4648      	mov	r0, r9
 80134fc:	f7fd ffe0 	bl	80114c0 <Color_Convertion>
 8013500:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
						}
						k++;
 8013504:	3401      	adds	r4, #1
 8013506:	b2a4      	uxth	r4, r4
					while(k < 13) {
 8013508:	2c0c      	cmp	r4, #12
 801350a:	d82c      	bhi.n	8013566 <DrawString+0x1c6>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 801350c:	7833      	ldrb	r3, [r6, #0]
 801350e:	3bc0      	subs	r3, #192	; 0xc0
 8013510:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013514:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8013518:	4a2e      	ldr	r2, [pc, #184]	; (80135d4 <DrawString+0x234>)
 801351a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801351e:	4123      	asrs	r3, r4
 8013520:	f013 0f01 	tst.w	r3, #1
 8013524:	d0db      	beq.n	80134de <DrawString+0x13e>
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8013526:	4b28      	ldr	r3, [pc, #160]	; (80135c8 <DrawString+0x228>)
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	4a28      	ldr	r2, [pc, #160]	; (80135cc <DrawString+0x22c>)
 801352c:	2134      	movs	r1, #52	; 0x34
 801352e:	fb01 2203 	mla	r2, r1, r3, r2
 8013532:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8013534:	eba8 0304 	sub.w	r3, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013538:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801353a:	fb02 7303 	mla	r3, r2, r3, r7
 801353e:	4453      	add	r3, sl
 8013540:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013544:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8013548:	e7dc      	b.n	8013504 <DrawString+0x164>
				k = 0;
 801354a:	2400      	movs	r4, #0
 801354c:	e7dc      	b.n	8013508 <DrawString+0x168>
					}
				}
				if(ru_font[(str[l]-192)*12+i] == 0) {
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
						i++;
 801354e:	f10a 0a01 	add.w	sl, sl, #1
				else {
					i++;
				}
			}
			while(i < 12);
			xpos += i;
 8013552:	4457      	add	r7, sl
 8013554:	e02b      	b.n	80135ae <DrawString+0x20e>
					i++;
 8013556:	f10a 0a01 	add.w	sl, sl, #1
			while(i < 12);
 801355a:	f1ba 0f0b 	cmp.w	sl, #11
 801355e:	dcf8      	bgt.n	8013552 <DrawString+0x1b2>
				if(xpos < 470) {
 8013560:	f5b7 7feb 	cmp.w	r7, #470	; 0x1d6
 8013564:	dbf1      	blt.n	801354a <DrawString+0x1aa>
				if(ru_font[(str[l]-192)*12+i] == 0) {
 8013566:	7833      	ldrb	r3, [r6, #0]
 8013568:	3bc0      	subs	r3, #192	; 0xc0
 801356a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801356e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8013572:	4a18      	ldr	r2, [pc, #96]	; (80135d4 <DrawString+0x234>)
 8013574:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013578:	2a00      	cmp	r2, #0
 801357a:	d1ec      	bne.n	8013556 <DrawString+0x1b6>
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
 801357c:	3301      	adds	r3, #1
 801357e:	4a15      	ldr	r2, [pc, #84]	; (80135d4 <DrawString+0x234>)
 8013580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d0e2      	beq.n	801354e <DrawString+0x1ae>
					i++;
 8013588:	f10a 0a01 	add.w	sl, sl, #1
 801358c:	e7e5      	b.n	801355a <DrawString+0x1ba>
		}
		if(str[l] == 32) {
			xpos += 5;
		}
		l++;
 801358e:	9b04      	ldr	r3, [sp, #16]
 8013590:	3301      	adds	r3, #1
 8013592:	9304      	str	r3, [sp, #16]
	while(str[l] != 0) {
 8013594:	9b05      	ldr	r3, [sp, #20]
 8013596:	9a04      	ldr	r2, [sp, #16]
 8013598:	189e      	adds	r6, r3, r2
 801359a:	5c9b      	ldrb	r3, [r3, r2]
 801359c:	b163      	cbz	r3, 80135b8 <DrawString+0x218>
		if((str[l] > 32) && (str[l] < 128)) {
 801359e:	3b21      	subs	r3, #33	; 0x21
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	2b5e      	cmp	r3, #94	; 0x5e
 80135a4:	f67f af3d 	bls.w	8013422 <DrawString+0x82>
		if(str[l] > 191) {
 80135a8:	7833      	ldrb	r3, [r6, #0]
 80135aa:	2bbf      	cmp	r3, #191	; 0xbf
 80135ac:	d894      	bhi.n	80134d8 <DrawString+0x138>
		if(str[l] == 32) {
 80135ae:	7833      	ldrb	r3, [r6, #0]
 80135b0:	2b20      	cmp	r3, #32
 80135b2:	d1ec      	bne.n	801358e <DrawString+0x1ee>
			xpos += 5;
 80135b4:	3705      	adds	r7, #5
 80135b6:	e7ea      	b.n	801358e <DrawString+0x1ee>
	}
}
 80135b8:	b007      	add	sp, #28
 80135ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135be:	bf00      	nop
 80135c0:	20000614 	.word	0x20000614
 80135c4:	4002b000 	.word	0x4002b000
 80135c8:	200007a8 	.word	0x200007a8
 80135cc:	20000700 	.word	0x20000700
 80135d0:	0801e4a8 	.word	0x0801e4a8
 80135d4:	0801f044 	.word	0x0801f044

080135d8 <DrawMenu>:
{
 80135d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135da:	ed2d 8b02 	vpush	{d8}
 80135de:	b0c3      	sub	sp, #268	; 0x10c
	if(menu_mode == 0) {
 80135e0:	4bb9      	ldr	r3, [pc, #740]	; (80138c8 <DrawMenu+0x2f0>)
 80135e2:	f993 3000 	ldrsb.w	r3, [r3]
 80135e6:	b18b      	cbz	r3, 801360c <DrawMenu+0x34>
	else if(menu_mode == 1) {
 80135e8:	2b01      	cmp	r3, #1
 80135ea:	d026      	beq.n	801363a <DrawMenu+0x62>
	else if(menu_mode == 2) {
 80135ec:	2b02      	cmp	r3, #2
 80135ee:	f000 8187 	beq.w	8013900 <DrawMenu+0x328>
	else if(menu_mode == 3) {
 80135f2:	2b03      	cmp	r3, #3
 80135f4:	d11d      	bne.n	8013632 <DrawMenu+0x5a>
		DrawString("ERROR! INSERT SD CARD AND RESTART!", 0, 20, 0x00FFFFFF, 0x00FF0000);
 80135f6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80135fa:	9300      	str	r3, [sp, #0]
 80135fc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013600:	2214      	movs	r2, #20
 8013602:	2100      	movs	r1, #0
 8013604:	48b1      	ldr	r0, [pc, #708]	; (80138cc <DrawMenu+0x2f4>)
 8013606:	f7ff fecb 	bl	80133a0 <DrawString>
}
 801360a:	e012      	b.n	8013632 <DrawMenu+0x5a>
		char string[255] = " { ";
 801360c:	4bb0      	ldr	r3, [pc, #704]	; (80138d0 <DrawMenu+0x2f8>)
 801360e:	9302      	str	r3, [sp, #8]
 8013610:	22fb      	movs	r2, #251	; 0xfb
 8013612:	2100      	movs	r1, #0
 8013614:	a803      	add	r0, sp, #12
 8013616:	f006 fbf1 	bl	8019dfc <memset>
		DrawString(strcat(string, rekordbox.file), 0, 20, 0x00FFFFFF, 0x000000FF);
 801361a:	49ae      	ldr	r1, [pc, #696]	; (80138d4 <DrawMenu+0x2fc>)
 801361c:	a802      	add	r0, sp, #8
 801361e:	f006 fd05 	bl	801a02c <strcat>
 8013622:	23ff      	movs	r3, #255	; 0xff
 8013624:	9300      	str	r3, [sp, #0]
 8013626:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801362a:	2214      	movs	r2, #20
 801362c:	2100      	movs	r1, #0
 801362e:	f7ff feb7 	bl	80133a0 <DrawString>
}
 8013632:	b043      	add	sp, #268	; 0x10c
 8013634:	ecbd 8b02 	vpop	{d8}
 8013638:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(Total_tracks > 7) {
 801363a:	4ba7      	ldr	r3, [pc, #668]	; (80138d8 <DrawMenu+0x300>)
 801363c:	881b      	ldrh	r3, [r3, #0]
 801363e:	2b07      	cmp	r3, #7
 8013640:	d957      	bls.n	80136f2 <DrawMenu+0x11a>
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 8013642:	ee07 3a90 	vmov	s15, r3
 8013646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801364a:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80138dc <DrawMenu+0x304>
 801364e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013652:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8013656:	ee27 7a87 	vmul.f32	s14, s15, s14
 801365a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801365e:	ee17 3a10 	vmov	r3, s14
 8013662:	b29d      	uxth	r5, r3
			uint16_t step_scroll = (140/(float)Total_tracks)*(float)str_increment;
 8013664:	4b9e      	ldr	r3, [pc, #632]	; (80138e0 <DrawMenu+0x308>)
 8013666:	ed93 7a00 	vldr	s14, [r3]
 801366a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801366e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013676:	ee17 3a90 	vmov	r3, s15
 801367a:	b29c      	uxth	r4, r3
			if(scroll_lenght < 5) scroll_lenght = 5;
 801367c:	2d04      	cmp	r5, #4
 801367e:	d800      	bhi.n	8013682 <DrawMenu+0xaa>
 8013680:	2505      	movs	r5, #5
			VLine(1, 21, 140, 0x00FFFFFF);
 8013682:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013686:	228c      	movs	r2, #140	; 0x8c
 8013688:	2115      	movs	r1, #21
 801368a:	2001      	movs	r0, #1
 801368c:	f7fe f852 	bl	8011734 <VLine>
			VLine(3, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 8013690:	f104 0616 	add.w	r6, r4, #22
 8013694:	b2b6      	uxth	r6, r6
 8013696:	1eaf      	subs	r7, r5, #2
 8013698:	b2bf      	uxth	r7, r7
 801369a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801369e:	463a      	mov	r2, r7
 80136a0:	4631      	mov	r1, r6
 80136a2:	2003      	movs	r0, #3
 80136a4:	f7fe f846 	bl	8011734 <VLine>
			VLine(4, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80136a8:	3415      	adds	r4, #21
 80136aa:	b2a4      	uxth	r4, r4
 80136ac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80136b0:	462a      	mov	r2, r5
 80136b2:	4621      	mov	r1, r4
 80136b4:	2004      	movs	r0, #4
 80136b6:	f7fe f83d 	bl	8011734 <VLine>
			VLine(5, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80136ba:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80136be:	462a      	mov	r2, r5
 80136c0:	4621      	mov	r1, r4
 80136c2:	2005      	movs	r0, #5
 80136c4:	f7fe f836 	bl	8011734 <VLine>
			VLine(6, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80136c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80136cc:	462a      	mov	r2, r5
 80136ce:	4621      	mov	r1, r4
 80136d0:	2006      	movs	r0, #6
 80136d2:	f7fe f82f 	bl	8011734 <VLine>
			VLine(7, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 80136d6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80136da:	463a      	mov	r2, r7
 80136dc:	4631      	mov	r1, r6
 80136de:	2007      	movs	r0, #7
 80136e0:	f7fe f828 	bl	8011734 <VLine>
			VLine(9, 21, 140, 0x00FFFFFF);
 80136e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80136e8:	228c      	movs	r2, #140	; 0x8c
 80136ea:	2115      	movs	r1, #21
 80136ec:	2009      	movs	r0, #9
 80136ee:	f7fe f821 	bl	8011734 <VLine>
		DrawString(" [FILES]", 0, 20, 0x00FFFFFF, 0x000000FF);
 80136f2:	23ff      	movs	r3, #255	; 0xff
 80136f4:	9300      	str	r3, [sp, #0]
 80136f6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80136fa:	2214      	movs	r2, #20
 80136fc:	2100      	movs	r1, #0
 80136fe:	4879      	ldr	r0, [pc, #484]	; (80138e4 <DrawMenu+0x30c>)
 8013700:	f7ff fe4e 	bl	80133a0 <DrawString>
		int i = 0;
 8013704:	2600      	movs	r6, #0
	uint32_t backcolor = 0;
 8013706:	4635      	mov	r5, r6
		while(21+20*(i+1) < 165) {
 8013708:	e025      	b.n	8013756 <DrawMenu+0x17e>
				if(i == Mark_number) {
 801370a:	4b77      	ldr	r3, [pc, #476]	; (80138e8 <DrawMenu+0x310>)
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	42b3      	cmp	r3, r6
 8013710:	d05c      	beq.n	80137cc <DrawMenu+0x1f4>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, 0x000000FF);
 8013712:	4431      	add	r1, r6
 8013714:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8013718:	4b74      	ldr	r3, [pc, #464]	; (80138ec <DrawMenu+0x314>)
 801371a:	4419      	add	r1, r3
 801371c:	a802      	add	r0, sp, #8
 801371e:	f006 fc85 	bl	801a02c <strcat>
 8013722:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013726:	009a      	lsls	r2, r3, #2
 8013728:	3215      	adds	r2, #21
 801372a:	23ff      	movs	r3, #255	; 0xff
 801372c:	9300      	str	r3, [sp, #0]
 801372e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013732:	b292      	uxth	r2, r2
 8013734:	210b      	movs	r1, #11
 8013736:	f7ff fe33 	bl	80133a0 <DrawString>
				backcolor += 0x00202020;
 801373a:	f105 1520 	add.w	r5, r5, #2097184	; 0x200020
 801373e:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
				if(backcolor > 0x00404040) backcolor = 0;
 8013742:	4b6b      	ldr	r3, [pc, #428]	; (80138f0 <DrawMenu+0x318>)
 8013744:	429d      	cmp	r5, r3
 8013746:	f200 80bc 	bhi.w	80138c2 <DrawMenu+0x2ea>
			if(i >= Total_tracks) break;
 801374a:	4b63      	ldr	r3, [pc, #396]	; (80138d8 <DrawMenu+0x300>)
 801374c:	881b      	ldrh	r3, [r3, #0]
 801374e:	42a3      	cmp	r3, r4
 8013750:	f77f af6f 	ble.w	8013632 <DrawMenu+0x5a>
			i++;
 8013754:	4626      	mov	r6, r4
		while(21+20*(i+1) < 165) {
 8013756:	1c74      	adds	r4, r6, #1
 8013758:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801375c:	0093      	lsls	r3, r2, #2
 801375e:	2b8f      	cmp	r3, #143	; 0x8f
 8013760:	f73f af67 	bgt.w	8013632 <DrawMenu+0x5a>
			char string[255] = "{ ";
 8013764:	f242 037b 	movw	r3, #8315	; 0x207b
 8013768:	9302      	str	r3, [sp, #8]
 801376a:	22fb      	movs	r2, #251	; 0xfb
 801376c:	2100      	movs	r1, #0
 801376e:	a803      	add	r0, sp, #12
 8013770:	f006 fb44 	bl	8019dfc <memset>
			if(i == Track_number - str_increment) {
 8013774:	4b5a      	ldr	r3, [pc, #360]	; (80138e0 <DrawMenu+0x308>)
 8013776:	6819      	ldr	r1, [r3, #0]
 8013778:	4b5e      	ldr	r3, [pc, #376]	; (80138f4 <DrawMenu+0x31c>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	1a5b      	subs	r3, r3, r1
 801377e:	42b3      	cmp	r3, r6
 8013780:	d0c3      	beq.n	801370a <DrawMenu+0x132>
			else if(i == String_number) {
 8013782:	4b5d      	ldr	r3, [pc, #372]	; (80138f8 <DrawMenu+0x320>)
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	42b3      	cmp	r3, r6
 8013788:	d035      	beq.n	80137f6 <DrawMenu+0x21e>
				if(i == Mark_number) {
 801378a:	4b57      	ldr	r3, [pc, #348]	; (80138e8 <DrawMenu+0x310>)
 801378c:	781b      	ldrb	r3, [r3, #0]
 801378e:	42b3      	cmp	r3, r6
 8013790:	f000 8082 	beq.w	8013898 <DrawMenu+0x2c0>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, backcolor);
 8013794:	4431      	add	r1, r6
 8013796:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 801379a:	4b54      	ldr	r3, [pc, #336]	; (80138ec <DrawMenu+0x314>)
 801379c:	4419      	add	r1, r3
 801379e:	a802      	add	r0, sp, #8
 80137a0:	f006 fc44 	bl	801a02c <strcat>
 80137a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80137a8:	009a      	lsls	r2, r3, #2
 80137aa:	3215      	adds	r2, #21
 80137ac:	9500      	str	r5, [sp, #0]
 80137ae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80137b2:	b292      	uxth	r2, r2
 80137b4:	210b      	movs	r1, #11
 80137b6:	f7ff fdf3 	bl	80133a0 <DrawString>
				backcolor += 0x00202020;
 80137ba:	f105 1520 	add.w	r5, r5, #2097184	; 0x200020
 80137be:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
				if(backcolor > 0x00404040) backcolor = 0;
 80137c2:	4b4b      	ldr	r3, [pc, #300]	; (80138f0 <DrawMenu+0x318>)
 80137c4:	429d      	cmp	r5, r3
 80137c6:	d9c0      	bls.n	801374a <DrawMenu+0x172>
 80137c8:	2500      	movs	r5, #0
 80137ca:	e7be      	b.n	801374a <DrawMenu+0x172>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 80137cc:	4431      	add	r1, r6
 80137ce:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80137d2:	4b46      	ldr	r3, [pc, #280]	; (80138ec <DrawMenu+0x314>)
 80137d4:	4419      	add	r1, r3
 80137d6:	a802      	add	r0, sp, #8
 80137d8:	f006 fc28 	bl	801a02c <strcat>
 80137dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80137e0:	009a      	lsls	r2, r3, #2
 80137e2:	3215      	adds	r2, #21
 80137e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80137e8:	9300      	str	r3, [sp, #0]
 80137ea:	2300      	movs	r3, #0
 80137ec:	b292      	uxth	r2, r2
 80137ee:	210b      	movs	r1, #11
 80137f0:	f7ff fdd6 	bl	80133a0 <DrawString>
 80137f4:	e7a1      	b.n	801373a <DrawMenu+0x162>
				if(str_offset > 10) {
 80137f6:	4b41      	ldr	r3, [pc, #260]	; (80138fc <DrawMenu+0x324>)
 80137f8:	681f      	ldr	r7, [r3, #0]
 80137fa:	2f0a      	cmp	r7, #10
 80137fc:	dc1f      	bgt.n	801383e <DrawMenu+0x266>
					if(i == Mark_number) {
 80137fe:	4b3a      	ldr	r3, [pc, #232]	; (80138e8 <DrawMenu+0x310>)
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	42b3      	cmp	r3, r6
 8013804:	d033      	beq.n	801386e <DrawMenu+0x296>
						DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, backcolor);
 8013806:	4431      	add	r1, r6
 8013808:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 801380c:	4b37      	ldr	r3, [pc, #220]	; (80138ec <DrawMenu+0x314>)
 801380e:	4419      	add	r1, r3
 8013810:	a802      	add	r0, sp, #8
 8013812:	f006 fc0b 	bl	801a02c <strcat>
 8013816:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801381a:	009a      	lsls	r2, r3, #2
 801381c:	3215      	adds	r2, #21
 801381e:	9500      	str	r5, [sp, #0]
 8013820:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013824:	b292      	uxth	r2, r2
 8013826:	210b      	movs	r1, #11
 8013828:	f7ff fdba 	bl	80133a0 <DrawString>
				backcolor += 0x00202020;
 801382c:	f105 1520 	add.w	r5, r5, #2097184	; 0x200020
 8013830:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
				if(backcolor > 0x00404040) backcolor = 0;
 8013834:	4b2e      	ldr	r3, [pc, #184]	; (80138f0 <DrawMenu+0x318>)
 8013836:	429d      	cmp	r5, r3
 8013838:	d987      	bls.n	801374a <DrawMenu+0x172>
 801383a:	2500      	movs	r5, #0
 801383c:	e785      	b.n	801374a <DrawMenu+0x172>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11 + str_offset, 21+20*(i+1), 0x00FFFFFF, 0x00008F00);
 801383e:	4431      	add	r1, r6
 8013840:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8013844:	4b29      	ldr	r3, [pc, #164]	; (80138ec <DrawMenu+0x314>)
 8013846:	4419      	add	r1, r3
 8013848:	a802      	add	r0, sp, #8
 801384a:	f006 fbef 	bl	801a02c <strcat>
 801384e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013852:	009a      	lsls	r2, r3, #2
 8013854:	3215      	adds	r2, #21
 8013856:	f107 010b 	add.w	r1, r7, #11
 801385a:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013864:	b292      	uxth	r2, r2
 8013866:	b289      	uxth	r1, r1
 8013868:	f7ff fd9a 	bl	80133a0 <DrawString>
 801386c:	e7de      	b.n	801382c <DrawMenu+0x254>
						DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 801386e:	4431      	add	r1, r6
 8013870:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8013874:	4b1d      	ldr	r3, [pc, #116]	; (80138ec <DrawMenu+0x314>)
 8013876:	4419      	add	r1, r3
 8013878:	a802      	add	r0, sp, #8
 801387a:	f006 fbd7 	bl	801a02c <strcat>
 801387e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013882:	009a      	lsls	r2, r3, #2
 8013884:	3215      	adds	r2, #21
 8013886:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801388a:	9300      	str	r3, [sp, #0]
 801388c:	2300      	movs	r3, #0
 801388e:	b292      	uxth	r2, r2
 8013890:	210b      	movs	r1, #11
 8013892:	f7ff fd85 	bl	80133a0 <DrawString>
 8013896:	e7c9      	b.n	801382c <DrawMenu+0x254>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 8013898:	4431      	add	r1, r6
 801389a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 801389e:	4b13      	ldr	r3, [pc, #76]	; (80138ec <DrawMenu+0x314>)
 80138a0:	4419      	add	r1, r3
 80138a2:	a802      	add	r0, sp, #8
 80138a4:	f006 fbc2 	bl	801a02c <strcat>
 80138a8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80138ac:	009a      	lsls	r2, r3, #2
 80138ae:	3215      	adds	r2, #21
 80138b0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80138b4:	9300      	str	r3, [sp, #0]
 80138b6:	2300      	movs	r3, #0
 80138b8:	b292      	uxth	r2, r2
 80138ba:	210b      	movs	r1, #11
 80138bc:	f7ff fd70 	bl	80133a0 <DrawString>
 80138c0:	e77b      	b.n	80137ba <DrawMenu+0x1e2>
				if(backcolor > 0x00404040) backcolor = 0;
 80138c2:	2500      	movs	r5, #0
 80138c4:	e741      	b.n	801374a <DrawMenu+0x172>
 80138c6:	bf00      	nop
 80138c8:	2000060c 	.word	0x2000060c
 80138cc:	0801e3a8 	.word	0x0801e3a8
 80138d0:	00207b20 	.word	0x00207b20
 80138d4:	2001481e 	.word	0x2001481e
 80138d8:	20001c38 	.word	0x20001c38
 80138dc:	430c0000 	.word	0x430c0000
 80138e0:	20017464 	.word	0x20017464
 80138e4:	0801e34c 	.word	0x0801e34c
 80138e8:	20000094 	.word	0x20000094
 80138ec:	20007fd8 	.word	0x20007fd8
 80138f0:	00404040 	.word	0x00404040
 80138f4:	2000e374 	.word	0x2000e374
 80138f8:	2000009c 	.word	0x2000009c
 80138fc:	20017468 	.word	0x20017468
		DrawString(" [SETTINGS]", 0, 20, 0x00FFFFFF, 0x000000FF);
 8013900:	23ff      	movs	r3, #255	; 0xff
 8013902:	9300      	str	r3, [sp, #0]
 8013904:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013908:	2214      	movs	r2, #20
 801390a:	2100      	movs	r1, #0
 801390c:	487e      	ldr	r0, [pc, #504]	; (8013b08 <DrawMenu+0x530>)
 801390e:	f7ff fd47 	bl	80133a0 <DrawString>
		char stri[50] = {0};
 8013912:	2400      	movs	r4, #0
 8013914:	9402      	str	r4, [sp, #8]
 8013916:	222e      	movs	r2, #46	; 0x2e
 8013918:	4621      	mov	r1, r4
 801391a:	a803      	add	r0, sp, #12
 801391c:	f006 fa6e 	bl	8019dfc <memset>
		sprintf(stri, "%s %d %s", " Volume", volume, "%");
 8013920:	4d7a      	ldr	r5, [pc, #488]	; (8013b0c <DrawMenu+0x534>)
 8013922:	4b7b      	ldr	r3, [pc, #492]	; (8013b10 <DrawMenu+0x538>)
 8013924:	9300      	str	r3, [sp, #0]
 8013926:	782b      	ldrb	r3, [r5, #0]
 8013928:	4a7a      	ldr	r2, [pc, #488]	; (8013b14 <DrawMenu+0x53c>)
 801392a:	497b      	ldr	r1, [pc, #492]	; (8013b18 <DrawMenu+0x540>)
 801392c:	a802      	add	r0, sp, #8
 801392e:	f006 fb5d 	bl	8019fec <siprintf>
		DrawString(stri, 0, 40, 0x00FFFFFF, backcolor);
 8013932:	4b7a      	ldr	r3, [pc, #488]	; (8013b1c <DrawMenu+0x544>)
 8013934:	9300      	str	r3, [sp, #0]
 8013936:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801393a:	2228      	movs	r2, #40	; 0x28
 801393c:	4621      	mov	r1, r4
 801393e:	a802      	add	r0, sp, #8
 8013940:	f7ff fd2e 	bl	80133a0 <DrawString>
		VLine(40, 41, 18, 0x00FFFFFF);
 8013944:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013948:	2212      	movs	r2, #18
 801394a:	2129      	movs	r1, #41	; 0x29
 801394c:	2028      	movs	r0, #40	; 0x28
 801394e:	f7fd fef1 	bl	8011734 <VLine>
		VLine(440, 41, 18, 0x00FFFFFF);
 8013952:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013956:	2212      	movs	r2, #18
 8013958:	2129      	movs	r1, #41	; 0x29
 801395a:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 801395e:	f7fd fee9 	bl	8011734 <VLine>
		HLine(40, 41, 400, 0x00FFFFFF);
 8013962:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013966:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801396a:	2129      	movs	r1, #41	; 0x29
 801396c:	2028      	movs	r0, #40	; 0x28
 801396e:	f7fd ff1d 	bl	80117ac <HLine>
		HLine(40, 59, 401, 0x00FFFFFF);
 8013972:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013976:	f240 1291 	movw	r2, #401	; 0x191
 801397a:	213b      	movs	r1, #59	; 0x3b
 801397c:	2028      	movs	r0, #40	; 0x28
 801397e:	f7fd ff15 	bl	80117ac <HLine>
		uint32_t vol_pos = (float)volume/100*400;
 8013982:	782b      	ldrb	r3, [r5, #0]
 8013984:	ee07 3a10 	vmov	s14, r3
 8013988:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801398c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8013b20 <DrawMenu+0x548>
 8013990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013994:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8013b24 <DrawMenu+0x54c>
 8013998:	ee67 7a87 	vmul.f32	s15, s15, s14
 801399c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80139a0:	ee17 2a90 	vmov	r2, s15
		if(vol_pos != 0) Rectangle(40, 42, vol_pos, 17, 0x00FFFFFF);
 80139a4:	2a00      	cmp	r2, #0
 80139a6:	f040 809b 	bne.w	8013ae0 <DrawMenu+0x508>
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 80139aa:	4b5f      	ldr	r3, [pc, #380]	; (8013b28 <DrawMenu+0x550>)
 80139ac:	edd3 7a00 	vldr	s15, [r3]
 80139b0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8013b2c <DrawMenu+0x554>
 80139b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80139b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80139bc:	ee17 4a90 	vmov	r4, s15
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 80139c0:	4b53      	ldr	r3, [pc, #332]	; (8013b10 <DrawMenu+0x538>)
 80139c2:	9300      	str	r3, [sp, #0]
 80139c4:	ee17 3a90 	vmov	r3, s15
 80139c8:	4a59      	ldr	r2, [pc, #356]	; (8013b30 <DrawMenu+0x558>)
 80139ca:	4953      	ldr	r1, [pc, #332]	; (8013b18 <DrawMenu+0x540>)
 80139cc:	a802      	add	r0, sp, #8
 80139ce:	f006 fb0d 	bl	8019fec <siprintf>
		DrawString(stri, 0, 80, 0x00FFFFFF, backcolor);
 80139d2:	4b58      	ldr	r3, [pc, #352]	; (8013b34 <DrawMenu+0x55c>)
 80139d4:	9300      	str	r3, [sp, #0]
 80139d6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80139da:	2250      	movs	r2, #80	; 0x50
 80139dc:	2100      	movs	r1, #0
 80139de:	a802      	add	r0, sp, #8
 80139e0:	f7ff fcde 	bl	80133a0 <DrawString>
		VLine(40, 81, 18, 0x00FFFFFF);
 80139e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80139e8:	2212      	movs	r2, #18
 80139ea:	2151      	movs	r1, #81	; 0x51
 80139ec:	2028      	movs	r0, #40	; 0x28
 80139ee:	f7fd fea1 	bl	8011734 <VLine>
		VLine(440, 81, 18, 0x00FFFFFF);
 80139f2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80139f6:	2212      	movs	r2, #18
 80139f8:	2151      	movs	r1, #81	; 0x51
 80139fa:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80139fe:	f7fd fe99 	bl	8011734 <VLine>
		HLine(40, 81, 400, 0x00FFFFFF);
 8013a02:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013a06:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013a0a:	2151      	movs	r1, #81	; 0x51
 8013a0c:	2028      	movs	r0, #40	; 0x28
 8013a0e:	f7fd fecd 	bl	80117ac <HLine>
		HLine(40, 99, 401, 0x00FFFFFF);
 8013a12:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013a16:	f240 1291 	movw	r2, #401	; 0x191
 8013a1a:	2163      	movs	r1, #99	; 0x63
 8013a1c:	2028      	movs	r0, #40	; 0x28
 8013a1e:	f7fd fec5 	bl	80117ac <HLine>
		if(jogsens_pos != 0) Rectangle(40, 82, jogsens_pos, 17, 0x00FFFFFF);
 8013a22:	00a4      	lsls	r4, r4, #2
 8013a24:	d166      	bne.n	8013af4 <DrawMenu+0x51c>
		sprintf(stri, "%s %d %s", " Auto cue sensitivity", (int)((float)acue_sensitivity/250*100), "%");
 8013a26:	4c44      	ldr	r4, [pc, #272]	; (8013b38 <DrawMenu+0x560>)
 8013a28:	7823      	ldrb	r3, [r4, #0]
 8013a2a:	ee07 3a10 	vmov	s14, r3
 8013a2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013a32:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8013b3c <DrawMenu+0x564>
 8013a36:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8013a3a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8013b20 <DrawMenu+0x548>
 8013a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a42:	4b33      	ldr	r3, [pc, #204]	; (8013b10 <DrawMenu+0x538>)
 8013a44:	9300      	str	r3, [sp, #0]
 8013a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a4a:	ee17 3a90 	vmov	r3, s15
 8013a4e:	4a3c      	ldr	r2, [pc, #240]	; (8013b40 <DrawMenu+0x568>)
 8013a50:	4931      	ldr	r1, [pc, #196]	; (8013b18 <DrawMenu+0x540>)
 8013a52:	a802      	add	r0, sp, #8
 8013a54:	f006 faca 	bl	8019fec <siprintf>
		DrawString(stri, 0, 120, 0x00FFFFFF, backcolor);
 8013a58:	4b3a      	ldr	r3, [pc, #232]	; (8013b44 <DrawMenu+0x56c>)
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013a60:	2278      	movs	r2, #120	; 0x78
 8013a62:	2100      	movs	r1, #0
 8013a64:	a802      	add	r0, sp, #8
 8013a66:	f7ff fc9b 	bl	80133a0 <DrawString>
		VLine(40, 121, 18, 0x00FFFFFF);
 8013a6a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013a6e:	2212      	movs	r2, #18
 8013a70:	2179      	movs	r1, #121	; 0x79
 8013a72:	2028      	movs	r0, #40	; 0x28
 8013a74:	f7fd fe5e 	bl	8011734 <VLine>
		VLine(440, 121, 18, 0x00FFFFFF);
 8013a78:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013a7c:	2212      	movs	r2, #18
 8013a7e:	2179      	movs	r1, #121	; 0x79
 8013a80:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8013a84:	f7fd fe56 	bl	8011734 <VLine>
		HLine(40, 121, 400, 0x00FFFFFF);
 8013a88:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013a8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013a90:	2179      	movs	r1, #121	; 0x79
 8013a92:	2028      	movs	r0, #40	; 0x28
 8013a94:	f7fd fe8a 	bl	80117ac <HLine>
		HLine(40, 139, 401, 0x00FFFFFF);
 8013a98:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013a9c:	f240 1291 	movw	r2, #401	; 0x191
 8013aa0:	218b      	movs	r1, #139	; 0x8b
 8013aa2:	2028      	movs	r0, #40	; 0x28
 8013aa4:	f7fd fe82 	bl	80117ac <HLine>
		uint32_t acu_pos = (float)acue_sensitivity/250*400;
 8013aa8:	7823      	ldrb	r3, [r4, #0]
 8013aaa:	ee07 3a10 	vmov	s14, r3
 8013aae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013ab2:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8013ab6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8013b24 <DrawMenu+0x54c>
 8013aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ac2:	ee17 2a90 	vmov	r2, s15
		if(acu_pos != 0) Rectangle(40, 122, acu_pos, 17, 0x00FFFFFF);
 8013ac6:	2a00      	cmp	r2, #0
 8013ac8:	f43f adb3 	beq.w	8013632 <DrawMenu+0x5a>
 8013acc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013ad0:	9300      	str	r3, [sp, #0]
 8013ad2:	2311      	movs	r3, #17
 8013ad4:	b292      	uxth	r2, r2
 8013ad6:	217a      	movs	r1, #122	; 0x7a
 8013ad8:	2028      	movs	r0, #40	; 0x28
 8013ada:	f7fd fea7 	bl	801182c <Rectangle>
 8013ade:	e5a8      	b.n	8013632 <DrawMenu+0x5a>
		if(vol_pos != 0) Rectangle(40, 42, vol_pos, 17, 0x00FFFFFF);
 8013ae0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	2311      	movs	r3, #17
 8013ae8:	b292      	uxth	r2, r2
 8013aea:	212a      	movs	r1, #42	; 0x2a
 8013aec:	2028      	movs	r0, #40	; 0x28
 8013aee:	f7fd fe9d 	bl	801182c <Rectangle>
 8013af2:	e75a      	b.n	80139aa <DrawMenu+0x3d2>
		if(jogsens_pos != 0) Rectangle(40, 82, jogsens_pos, 17, 0x00FFFFFF);
 8013af4:	b2a2      	uxth	r2, r4
 8013af6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013afa:	9300      	str	r3, [sp, #0]
 8013afc:	2311      	movs	r3, #17
 8013afe:	2152      	movs	r1, #82	; 0x52
 8013b00:	2028      	movs	r0, #40	; 0x28
 8013b02:	f7fd fe93 	bl	801182c <Rectangle>
 8013b06:	e78e      	b.n	8013a26 <DrawMenu+0x44e>
 8013b08:	0801e358 	.word	0x0801e358
 8013b0c:	2000005c 	.word	0x2000005c
 8013b10:	0801e378 	.word	0x0801e378
 8013b14:	0801e364 	.word	0x0801e364
 8013b18:	0801e36c 	.word	0x0801e36c
 8013b1c:	00202020 	.word	0x00202020
 8013b20:	42c80000 	.word	0x42c80000
 8013b24:	43c80000 	.word	0x43c80000
 8013b28:	200000a0 	.word	0x200000a0
 8013b2c:	461c4000 	.word	0x461c4000
 8013b30:	0801e37c 	.word	0x0801e37c
 8013b34:	00404040 	.word	0x00404040
 8013b38:	20000054 	.word	0x20000054
 8013b3c:	437a0000 	.word	0x437a0000
 8013b40:	0801e390 	.word	0x0801e390
 8013b44:	00606060 	.word	0x00606060

08013b48 <QuantizePosition>:

// snaps file position on the spectra to the nearest beat
uint32_t QuantizePosition(int beat_offset) {
 8013b48:	b530      	push	{r4, r5, lr}
	uint32_t quantized_pos = file_pos_wide;
 8013b4a:	4b1d      	ldr	r3, [pc, #116]	; (8013bc0 <QuantizePosition+0x78>)
 8013b4c:	681c      	ldr	r4, [r3, #0]
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 8013b4e:	4b1d      	ldr	r3, [pc, #116]	; (8013bc4 <QuantizePosition+0x7c>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	491d      	ldr	r1, [pc, #116]	; (8013bc8 <QuantizePosition+0x80>)
 8013b54:	f203 42aa 	addw	r2, r3, #1194	; 0x4aa
 8013b58:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8013b5c:	f04f 0c96 	mov.w	ip, #150	; 0x96
 8013b60:	fb0c f202 	mul.w	r2, ip, r2
 8013b64:	4d19      	ldr	r5, [pc, #100]	; (8013bcc <QuantizePosition+0x84>)
 8013b66:	fba5 e202 	umull	lr, r2, r5, r2
 8013b6a:	eba4 1292 	sub.w	r2, r4, r2, lsr #6
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 8013b6e:	f203 4eab 	addw	lr, r3, #1195	; 0x4ab
 8013b72:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 8013b76:	fb0c f101 	mul.w	r1, ip, r1
 8013b7a:	fba5 5101 	umull	r5, r1, r5, r1
 8013b7e:	ebc4 1191 	rsb	r1, r4, r1, lsr #6
	if(time1 > time2) {
 8013b82:	428a      	cmp	r2, r1
 8013b84:	dd0d      	ble.n	8013ba2 <QuantizePosition+0x5a>
		quantized_pos = rekordbox.timeindex[beat+beat_offset+1]*150/1000;							;
 8013b86:	4403      	add	r3, r0
 8013b88:	f203 43ab 	addw	r3, r3, #1195	; 0x4ab
 8013b8c:	4a0e      	ldr	r2, [pc, #56]	; (8013bc8 <QuantizePosition+0x80>)
 8013b8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013b92:	4663      	mov	r3, ip
 8013b94:	fb03 f000 	mul.w	r0, r3, r0
 8013b98:	4b0c      	ldr	r3, [pc, #48]	; (8013bcc <QuantizePosition+0x84>)
 8013b9a:	fba3 3000 	umull	r3, r0, r3, r0
 8013b9e:	0980      	lsrs	r0, r0, #6
	}
	else {
		quantized_pos = rekordbox.timeindex[beat+beat_offset]*150/1000;
	}
	return quantized_pos;
}
 8013ba0:	bd30      	pop	{r4, r5, pc}
		quantized_pos = rekordbox.timeindex[beat+beat_offset]*150/1000;
 8013ba2:	4403      	add	r3, r0
 8013ba4:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8013ba8:	4a07      	ldr	r2, [pc, #28]	; (8013bc8 <QuantizePosition+0x80>)
 8013baa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013bae:	2396      	movs	r3, #150	; 0x96
 8013bb0:	fb03 f000 	mul.w	r0, r3, r0
 8013bb4:	4b05      	ldr	r3, [pc, #20]	; (8013bcc <QuantizePosition+0x84>)
 8013bb6:	fba3 3000 	umull	r3, r0, r3, r0
 8013bba:	0980      	lsrs	r0, r0, #6
	return quantized_pos;
 8013bbc:	e7f0      	b.n	8013ba0 <QuantizePosition+0x58>
 8013bbe:	bf00      	nop
 8013bc0:	2000e3d4 	.word	0x2000e3d4
 8013bc4:	200005e4 	.word	0x200005e4
 8013bc8:	20014620 	.word	0x20014620
 8013bcc:	10624dd3 	.word	0x10624dd3

08013bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8013bd0:	b500      	push	{lr}
 8013bd2:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8013bd4:	4b0a      	ldr	r3, [pc, #40]	; (8013c00 <MX_DMA_Init+0x30>)
 8013bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bd8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8013bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8013bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013be4:	9301      	str	r3, [sp, #4]
 8013be6:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8013be8:	2200      	movs	r2, #0
 8013bea:	4611      	mov	r1, r2
 8013bec:	203c      	movs	r0, #60	; 0x3c
 8013bee:	f7ed fb61 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8013bf2:	203c      	movs	r0, #60	; 0x3c
 8013bf4:	f7ed fba2 	bl	800133c <HAL_NVIC_EnableIRQ>

}
 8013bf8:	b003      	add	sp, #12
 8013bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8013bfe:	bf00      	nop
 8013c00:	40023800 	.word	0x40023800

08013c04 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8013c04:	b508      	push	{r3, lr}
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8013c06:	4808      	ldr	r0, [pc, #32]	; (8013c28 <MX_DMA2D_Init+0x24>)
 8013c08:	4b08      	ldr	r3, [pc, #32]	; (8013c2c <MX_DMA2D_Init+0x28>)
 8013c0a:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8013c0c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8013c10:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8013c12:	2302      	movs	r3, #2
 8013c14:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8013c16:	2300      	movs	r3, #0
 8013c18:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8013c1a:	f7ed ffad 	bl	8001b78 <HAL_DMA2D_Init>
 8013c1e:	b900      	cbnz	r0, 8013c22 <MX_DMA2D_Init+0x1e>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8013c20:	bd08      	pop	{r3, pc}
    Error_Handler();
 8013c22:	f000 ff5f 	bl	8014ae4 <Error_Handler>
}
 8013c26:	e7fb      	b.n	8013c20 <MX_DMA2D_Init+0x1c>
 8013c28:	20000614 	.word	0x20000614
 8013c2c:	4002b000 	.word	0x4002b000

08013c30 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8013c30:	6802      	ldr	r2, [r0, #0]
 8013c32:	4b0d      	ldr	r3, [pc, #52]	; (8013c68 <HAL_DMA2D_MspInit+0x38>)
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d000      	beq.n	8013c3a <HAL_DMA2D_MspInit+0xa>
 8013c38:	4770      	bx	lr
{
 8013c3a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */
	__HAL_DMA2D_ENABLE_IT(&hdma2d, DMA2D_IT_TC);
 8013c3c:	4a0b      	ldr	r2, [pc, #44]	; (8013c6c <HAL_DMA2D_MspInit+0x3c>)
 8013c3e:	6811      	ldr	r1, [r2, #0]
 8013c40:	680b      	ldr	r3, [r1, #0]
 8013c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013c46:	600b      	str	r3, [r1, #0]
	__HAL_DMA2D_CLEAR_FLAG(&hdma2d, DMA2D_IT_TC);
 8013c48:	6813      	ldr	r3, [r2, #0]
 8013c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c4e:	609a      	str	r2, [r3, #8]
  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8013c50:	4b07      	ldr	r3, [pc, #28]	; (8013c70 <HAL_DMA2D_MspInit+0x40>)
 8013c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013c54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8013c58:	631a      	str	r2, [r3, #48]	; 0x30
 8013c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013c60:	9301      	str	r3, [sp, #4]
 8013c62:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8013c64:	b002      	add	sp, #8
 8013c66:	4770      	bx	lr
 8013c68:	4002b000 	.word	0x4002b000
 8013c6c:	20000614 	.word	0x20000614
 8013c70:	40023800 	.word	0x40023800

08013c74 <MX_FATFS_Init>:
#include "ff.h"

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013c74:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013c76:	4906      	ldr	r1, [pc, #24]	; (8013c90 <MX_FATFS_Init+0x1c>)
 8013c78:	4806      	ldr	r0, [pc, #24]	; (8013c94 <MX_FATFS_Init+0x20>)
 8013c7a:	f7f8 fadd 	bl	800c238 <FATFS_LinkDriver>
 8013c7e:	4b06      	ldr	r3, [pc, #24]	; (8013c98 <MX_FATFS_Init+0x24>)
 8013c80:	7018      	strb	r0, [r3, #0]
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8013c82:	4906      	ldr	r1, [pc, #24]	; (8013c9c <MX_FATFS_Init+0x28>)
 8013c84:	4806      	ldr	r0, [pc, #24]	; (8013ca0 <MX_FATFS_Init+0x2c>)
 8013c86:	f7f8 fad7 	bl	800c238 <FATFS_LinkDriver>
 8013c8a:	4b06      	ldr	r3, [pc, #24]	; (8013ca4 <MX_FATFS_Init+0x30>)
 8013c8c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8013c8e:	bd08      	pop	{r3, pc}
 8013c90:	20000654 	.word	0x20000654
 8013c94:	0801f87c 	.word	0x0801f87c
 8013c98:	2000065c 	.word	0x2000065c
 8013c9c:	20000658 	.word	0x20000658
 8013ca0:	0801f8a0 	.word	0x0801f8a0
 8013ca4:	2000065d 	.word	0x2000065d

08013ca8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013ca8:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013cae:	4804      	ldr	r0, [pc, #16]	; (8013cc0 <BSP_PlatformIsDetected+0x18>)
 8013cb0:	f7ee faae 	bl	8002210 <HAL_GPIO_ReadPin>
 8013cb4:	b908      	cbnz	r0, 8013cba <BSP_PlatformIsDetected+0x12>
    uint8_t status = SD_PRESENT;
 8013cb6:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8013cb8:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 8013cba:	2000      	movs	r0, #0
 8013cbc:	e7fc      	b.n	8013cb8 <BSP_PlatformIsDetected+0x10>
 8013cbe:	bf00      	nop
 8013cc0:	40020800 	.word	0x40020800

08013cc4 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8013cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cc6:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013cc8:	2300      	movs	r3, #0
 8013cca:	9301      	str	r3, [sp, #4]
 8013ccc:	9302      	str	r3, [sp, #8]
 8013cce:	9303      	str	r3, [sp, #12]
 8013cd0:	9304      	str	r3, [sp, #16]
 8013cd2:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8013cd4:	4b2a      	ldr	r3, [pc, #168]	; (8013d80 <HAL_FMC_MspInit+0xbc>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	b10b      	cbz	r3, 8013cde <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8013cda:	b007      	add	sp, #28
 8013cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8013cde:	4b28      	ldr	r3, [pc, #160]	; (8013d80 <HAL_FMC_MspInit+0xbc>)
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8013ce4:	4b27      	ldr	r3, [pc, #156]	; (8013d84 <HAL_FMC_MspInit+0xc0>)
 8013ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ce8:	f042 0201 	orr.w	r2, r2, #1
 8013cec:	639a      	str	r2, [r3, #56]	; 0x38
 8013cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cf0:	f003 0301 	and.w	r3, r3, #1
 8013cf4:	9300      	str	r3, [sp, #0]
 8013cf6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8013cf8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8013cfc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013cfe:	2602      	movs	r6, #2
 8013d00:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d02:	2503      	movs	r5, #3
 8013d04:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013d06:	240c      	movs	r4, #12
 8013d08:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013d0a:	a901      	add	r1, sp, #4
 8013d0c:	481e      	ldr	r0, [pc, #120]	; (8013d88 <HAL_FMC_MspInit+0xc4>)
 8013d0e:	f7ee f8ff 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8013d12:	f248 1313 	movw	r3, #33043	; 0x8113
 8013d16:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d18:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d1a:	2700      	movs	r7, #0
 8013d1c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d1e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013d20:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013d22:	a901      	add	r1, sp, #4
 8013d24:	4819      	ldr	r0, [pc, #100]	; (8013d8c <HAL_FMC_MspInit+0xc8>)
 8013d26:	f7ee f8f3 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8013d2a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8013d2e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d30:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d32:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d34:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013d36:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013d38:	a901      	add	r1, sp, #4
 8013d3a:	4815      	ldr	r0, [pc, #84]	; (8013d90 <HAL_FMC_MspInit+0xcc>)
 8013d3c:	f7ee f8e8 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8013d40:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8013d44:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d46:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d48:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d4a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013d4c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013d4e:	a901      	add	r1, sp, #4
 8013d50:	4810      	ldr	r0, [pc, #64]	; (8013d94 <HAL_FMC_MspInit+0xd0>)
 8013d52:	f7ee f8dd 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8013d56:	2328      	movs	r3, #40	; 0x28
 8013d58:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d5a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d5c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d5e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013d60:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013d62:	a901      	add	r1, sp, #4
 8013d64:	480c      	ldr	r0, [pc, #48]	; (8013d98 <HAL_FMC_MspInit+0xd4>)
 8013d66:	f7ee f8d3 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8013d6a:	2308      	movs	r3, #8
 8013d6c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d6e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d70:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d72:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013d74:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013d76:	a901      	add	r1, sp, #4
 8013d78:	4808      	ldr	r0, [pc, #32]	; (8013d9c <HAL_FMC_MspInit+0xd8>)
 8013d7a:	f7ee f8c9 	bl	8001f10 <HAL_GPIO_Init>
 8013d7e:	e7ac      	b.n	8013cda <HAL_FMC_MspInit+0x16>
 8013d80:	20000660 	.word	0x20000660
 8013d84:	40023800 	.word	0x40023800
 8013d88:	40021000 	.word	0x40021000
 8013d8c:	40021800 	.word	0x40021800
 8013d90:	40020c00 	.word	0x40020c00
 8013d94:	40021400 	.word	0x40021400
 8013d98:	40021c00 	.word	0x40021c00
 8013d9c:	40020800 	.word	0x40020800

08013da0 <SDRAM_Init>:
{
 8013da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013da4:	b083      	sub	sp, #12
	__IO uint32_t tmpmrd = 0;
 8013da6:	f04f 0900 	mov.w	r9, #0
 8013daa:	f8cd 9004 	str.w	r9, [sp, #4]
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8013dae:	4c29      	ldr	r4, [pc, #164]	; (8013e54 <SDRAM_Init+0xb4>)
 8013db0:	2501      	movs	r5, #1
 8013db2:	6025      	str	r5, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013db4:	f04f 0810 	mov.w	r8, #16
 8013db8:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 8013dbc:	60a5      	str	r5, [r4, #8]
	command.ModeRegisterDefinition = 0;
 8013dbe:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8013dc2:	4e25      	ldr	r6, [pc, #148]	; (8013e58 <SDRAM_Init+0xb8>)
 8013dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013dc8:	4621      	mov	r1, r4
 8013dca:	4630      	mov	r0, r6
 8013dcc:	f7f2 fce9 	bl	80067a2 <HAL_SDRAM_SendCommand>
 8013dd0:	4f22      	ldr	r7, [pc, #136]	; (8013e5c <SDRAM_Init+0xbc>)
 8013dd2:	7038      	strb	r0, [r7, #0]
	HAL_Delay(1);
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	f7ed fa3b 	bl	8001250 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8013dda:	2302      	movs	r3, #2
 8013ddc:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013dde:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 8013de2:	60a5      	str	r5, [r4, #8]
	command.ModeRegisterDefinition = 0;
 8013de4:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8013de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013dec:	4621      	mov	r1, r4
 8013dee:	4630      	mov	r0, r6
 8013df0:	f7f2 fcd7 	bl	80067a2 <HAL_SDRAM_SendCommand>
 8013df4:	7038      	strb	r0, [r7, #0]
	HAL_Delay(1);
 8013df6:	4628      	mov	r0, r5
 8013df8:	f7ed fa2a 	bl	8001250 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8013dfc:	2303      	movs	r3, #3
 8013dfe:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013e00:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 8;
 8013e04:	2308      	movs	r3, #8
 8013e06:	60a3      	str	r3, [r4, #8]
	command.ModeRegisterDefinition = 0;
 8013e08:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8013e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e10:	4621      	mov	r1, r4
 8013e12:	4630      	mov	r0, r6
 8013e14:	f7f2 fcc5 	bl	80067a2 <HAL_SDRAM_SendCommand>
 8013e18:	7038      	strb	r0, [r7, #0]
	HAL_Delay(1);
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	f7ed fa18 	bl	8001250 <HAL_Delay>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |
 8013e20:	f44f 7308 	mov.w	r3, #544	; 0x220
 8013e24:	9301      	str	r3, [sp, #4]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8013e26:	2304      	movs	r3, #4
 8013e28:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013e2a:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 8013e2e:	60a5      	str	r5, [r4, #8]
	command.ModeRegisterDefinition = tmpmrd;
 8013e30:	9b01      	ldr	r3, [sp, #4]
 8013e32:	60e3      	str	r3, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8013e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e38:	4621      	mov	r1, r4
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	f7f2 fcb1 	bl	80067a2 <HAL_SDRAM_SendCommand>
 8013e40:	7038      	strb	r0, [r7, #0]
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8013e42:	f240 6103 	movw	r1, #1539	; 0x603
 8013e46:	4630      	mov	r0, r6
 8013e48:	f7f2 fcc6 	bl	80067d8 <HAL_SDRAM_ProgramRefreshRate>
}
 8013e4c:	b003      	add	sp, #12
 8013e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e52:	bf00      	nop
 8013e54:	20000664 	.word	0x20000664
 8013e58:	20000678 	.word	0x20000678
 8013e5c:	20000674 	.word	0x20000674

08013e60 <MX_FMC_Init>:
{
 8013e60:	b500      	push	{lr}
 8013e62:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8013e64:	2300      	movs	r3, #0
 8013e66:	9301      	str	r3, [sp, #4]
 8013e68:	9302      	str	r3, [sp, #8]
 8013e6a:	9303      	str	r3, [sp, #12]
 8013e6c:	9304      	str	r3, [sp, #16]
 8013e6e:	9305      	str	r3, [sp, #20]
 8013e70:	9306      	str	r3, [sp, #24]
 8013e72:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8013e74:	4813      	ldr	r0, [pc, #76]	; (8013ec4 <MX_FMC_Init+0x64>)
 8013e76:	4a14      	ldr	r2, [pc, #80]	; (8013ec8 <MX_FMC_Init+0x68>)
 8013e78:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8013e7a:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8013e7c:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8013e7e:	2104      	movs	r1, #4
 8013e80:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8013e82:	2210      	movs	r2, #16
 8013e84:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8013e86:	6143      	str	r3, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8013e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013e8c:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8013e8e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8013e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013e94:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8013e96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013e9a:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8013e9c:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8013e9e:	2302      	movs	r3, #2
 8013ea0:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8013ea2:	2206      	movs	r2, #6
 8013ea4:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8013ea6:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8013ea8:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8013eaa:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8013eac:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8013eae:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8013eb0:	4469      	add	r1, sp
 8013eb2:	f7f2 fc56 	bl	8006762 <HAL_SDRAM_Init>
 8013eb6:	b910      	cbnz	r0, 8013ebe <MX_FMC_Init+0x5e>
}
 8013eb8:	b009      	add	sp, #36	; 0x24
 8013eba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8013ebe:	f000 fe11 	bl	8014ae4 <Error_Handler>
}
 8013ec2:	e7f9      	b.n	8013eb8 <MX_FMC_Init+0x58>
 8013ec4:	20000678 	.word	0x20000678
 8013ec8:	a0000140 	.word	0xa0000140

08013ecc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8013ecc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8013ece:	f7ff fef9 	bl	8013cc4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8013ed2:	bd08      	pop	{r3, pc}

08013ed4 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8013ed4:	4770      	bx	lr

08013ed6 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8013ed6:	2000      	movs	r0, #0
 8013ed8:	4770      	bx	lr

08013eda <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 8013eda:	4770      	bx	lr

08013edc <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 8013edc:	4b01      	ldr	r3, [pc, #4]	; (8013ee4 <ft5336_Get_I2C_InitializedStatus+0x8>)
 8013ede:	7818      	ldrb	r0, [r3, #0]
 8013ee0:	4770      	bx	lr
 8013ee2:	bf00      	nop
 8013ee4:	200006b0 	.word	0x200006b0

08013ee8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8013ee8:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8013eea:	f7ff fff7 	bl	8013edc <ft5336_Get_I2C_InitializedStatus>
 8013eee:	b100      	cbz	r0, 8013ef2 <ft5336_I2C_InitializeIfRequired+0xa>
    TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
  }
}
 8013ef0:	bd08      	pop	{r3, pc}
    TS_IO_Init();
 8013ef2:	f003 f80b 	bl	8016f0c <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8013ef6:	4b02      	ldr	r3, [pc, #8]	; (8013f00 <ft5336_I2C_InitializeIfRequired+0x18>)
 8013ef8:	2201      	movs	r2, #1
 8013efa:	701a      	strb	r2, [r3, #0]
}
 8013efc:	e7f8      	b.n	8013ef0 <ft5336_I2C_InitializeIfRequired+0x8>
 8013efe:	bf00      	nop
 8013f00:	200006b0 	.word	0x200006b0

08013f04 <ft5336_Init>:
{
 8013f04:	b508      	push	{r3, lr}
  TS_IO_Delay(200);
 8013f06:	20c8      	movs	r0, #200	; 0xc8
 8013f08:	f003 f838 	bl	8016f7c <TS_IO_Delay>
  ft5336_I2C_InitializeIfRequired();
 8013f0c:	f7ff ffec 	bl	8013ee8 <ft5336_I2C_InitializeIfRequired>
}
 8013f10:	bd08      	pop	{r3, pc}

08013f12 <ft5336_ReadID>:
{
 8013f12:	b570      	push	{r4, r5, r6, lr}
 8013f14:	b082      	sub	sp, #8
 8013f16:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8013f18:	2400      	movs	r4, #0
 8013f1a:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 8013f1e:	f7ff ffe3 	bl	8013ee8 <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8013f22:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8013f24:	e001      	b.n	8013f2a <ft5336_ReadID+0x18>
 8013f26:	3401      	adds	r4, #1
 8013f28:	b2e4      	uxtb	r4, r4
 8013f2a:	f085 0301 	eor.w	r3, r5, #1
 8013f2e:	2c02      	cmp	r4, #2
 8013f30:	bf8c      	ite	hi
 8013f32:	2300      	movhi	r3, #0
 8013f34:	f003 0301 	andls.w	r3, r3, #1
 8013f38:	b163      	cbz	r3, 8013f54 <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8013f3a:	21a8      	movs	r1, #168	; 0xa8
 8013f3c:	b2f0      	uxtb	r0, r6
 8013f3e:	f003 f803 	bl	8016f48 <TS_IO_Read>
 8013f42:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8013f46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	2b51      	cmp	r3, #81	; 0x51
 8013f4e:	d1ea      	bne.n	8013f26 <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 8013f50:	2501      	movs	r5, #1
 8013f52:	e7e8      	b.n	8013f26 <ft5336_ReadID+0x14>
  return (ucReadId);
 8013f54:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8013f58:	b002      	add	sp, #8
 8013f5a:	bd70      	pop	{r4, r5, r6, pc}

08013f5c <ft5336_TS_DetectTouch>:
{
 8013f5c:	b500      	push	{lr}
 8013f5e:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 8013f60:	2300      	movs	r3, #0
 8013f62:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8013f66:	2102      	movs	r1, #2
 8013f68:	b2c0      	uxtb	r0, r0
 8013f6a:	f002 ffed 	bl	8016f48 <TS_IO_Read>
 8013f6e:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8013f72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f76:	f003 030f 	and.w	r3, r3, #15
 8013f7a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8013f7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f82:	b2db      	uxtb	r3, r3
 8013f84:	2b05      	cmp	r3, #5
 8013f86:	d902      	bls.n	8013f8e <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 8013f88:	2300      	movs	r3, #0
 8013f8a:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8013f8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013f92:	4b04      	ldr	r3, [pc, #16]	; (8013fa4 <ft5336_TS_DetectTouch+0x48>)
 8013f94:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8013f96:	2200      	movs	r2, #0
 8013f98:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 8013f9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8013f9e:	b003      	add	sp, #12
 8013fa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fa4:	200006b0 	.word	0x200006b0

08013fa8 <ft5336_TS_GetXY>:
{
 8013fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fac:	b082      	sub	sp, #8
 8013fae:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8013fb6:	4a4f      	ldr	r2, [pc, #316]	; (80140f4 <ft5336_TS_GetXY+0x14c>)
 8013fb8:	7893      	ldrb	r3, [r2, #2]
 8013fba:	7852      	ldrb	r2, [r2, #1]
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	f080 8096 	bcs.w	80140ee <ft5336_TS_GetXY+0x146>
 8013fc2:	460f      	mov	r7, r1
    switch(ft5336_handle.currActiveTouchIdx)
 8013fc4:	2b09      	cmp	r3, #9
 8013fc6:	d806      	bhi.n	8013fd6 <ft5336_TS_GetXY+0x2e>
 8013fc8:	e8df f003 	tbb	[pc, r3]
 8013fcc:	1b130b53 	.word	0x1b130b53
 8013fd0:	3b332b23 	.word	0x3b332b23
 8013fd4:	4b43      	.short	0x4b43
 8013fd6:	f04f 0800 	mov.w	r8, #0
 8013fda:	46c1      	mov	r9, r8
 8013fdc:	46c2      	mov	sl, r8
 8013fde:	4641      	mov	r1, r8
 8013fe0:	e04e      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P2_YH_REG;
 8013fe2:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 8013fe6:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 8013fea:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 8013fee:	210a      	movs	r1, #10
      break;
 8013ff0:	e046      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P3_YH_REG;
 8013ff2:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 8013ff6:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 8013ffa:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 8013ffe:	2110      	movs	r1, #16
      break;
 8014000:	e03e      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P4_YH_REG;
 8014002:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 8014006:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 801400a:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 801400e:	2116      	movs	r1, #22
      break;
 8014010:	e036      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P5_YH_REG;
 8014012:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 8014016:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 801401a:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 801401e:	211c      	movs	r1, #28
      break;
 8014020:	e02e      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P6_YH_REG;
 8014022:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 8014026:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 801402a:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 801402e:	2122      	movs	r1, #34	; 0x22
      break;
 8014030:	e026      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P7_YH_REG;
 8014032:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 8014036:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 801403a:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 801403e:	2128      	movs	r1, #40	; 0x28
      break;
 8014040:	e01e      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P8_YH_REG;
 8014042:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 8014046:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 801404a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 801404e:	212e      	movs	r1, #46	; 0x2e
      break;
 8014050:	e016      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P9_YH_REG;
 8014052:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 8014056:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 801405a:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 801405e:	2134      	movs	r1, #52	; 0x34
      break;
 8014060:	e00e      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P10_YH_REG;
 8014062:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 8014066:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 801406a:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 801406e:	213a      	movs	r1, #58	; 0x3a
      break;
 8014070:	e006      	b.n	8014080 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P1_YH_REG;
 8014072:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 8014076:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 801407a:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 801407e:	2104      	movs	r1, #4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8014080:	b2c4      	uxtb	r4, r0
 8014082:	4620      	mov	r0, r4
 8014084:	f002 ff60 	bl	8016f48 <TS_IO_Read>
 8014088:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801408c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014090:	4e19      	ldr	r6, [pc, #100]	; (80140f8 <ft5336_TS_GetXY+0x150>)
 8014092:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8014094:	4651      	mov	r1, sl
 8014096:	4620      	mov	r0, r4
 8014098:	f002 ff56 	bl	8016f48 <TS_IO_Read>
 801409c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80140a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80140a4:	021b      	lsls	r3, r3, #8
 80140a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80140aa:	8832      	ldrh	r2, [r6, #0]
 80140ac:	4313      	orrs	r3, r2
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	8033      	strh	r3, [r6, #0]
    *X = coord;
 80140b2:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80140b4:	4649      	mov	r1, r9
 80140b6:	4620      	mov	r0, r4
 80140b8:	f002 ff46 	bl	8016f48 <TS_IO_Read>
 80140bc:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80140c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80140c4:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80140c6:	4641      	mov	r1, r8
 80140c8:	4620      	mov	r0, r4
 80140ca:	f002 ff3d 	bl	8016f48 <TS_IO_Read>
 80140ce:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80140d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80140d6:	021b      	lsls	r3, r3, #8
 80140d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80140dc:	8832      	ldrh	r2, [r6, #0]
 80140de:	4313      	orrs	r3, r2
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	8033      	strh	r3, [r6, #0]
    *Y = coord;
 80140e4:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80140e6:	4a03      	ldr	r2, [pc, #12]	; (80140f4 <ft5336_TS_GetXY+0x14c>)
 80140e8:	7893      	ldrb	r3, [r2, #2]
 80140ea:	3301      	adds	r3, #1
 80140ec:	7093      	strb	r3, [r2, #2]
}
 80140ee:	b002      	add	sp, #8
 80140f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140f4:	200006b0 	.word	0x200006b0
 80140f8:	200006ac 	.word	0x200006ac

080140fc <ft5336_TS_EnableIT>:
{
 80140fc:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80140fe:	2201      	movs	r2, #1
 8014100:	21a4      	movs	r1, #164	; 0xa4
 8014102:	b2c0      	uxtb	r0, r0
 8014104:	f002 ff0a 	bl	8016f1c <TS_IO_Write>
}
 8014108:	bd08      	pop	{r3, pc}

0801410a <ft5336_TS_DisableIT>:
{
 801410a:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801410c:	2200      	movs	r2, #0
 801410e:	21a4      	movs	r1, #164	; 0xa4
 8014110:	b2c0      	uxtb	r0, r0
 8014112:	f002 ff03 	bl	8016f1c <TS_IO_Write>
}
 8014116:	bd08      	pop	{r3, pc}

08014118 <ft5336_TS_Start>:
{
 8014118:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 801411a:	f7ff fff6 	bl	801410a <ft5336_TS_DisableIT>
}
 801411e:	bd08      	pop	{r3, pc}

08014120 <ft5336_TS_GetGestureID>:
{
 8014120:	b510      	push	{r4, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	460c      	mov	r4, r1
  volatile uint8_t ucReadData = 0;
 8014126:	2300      	movs	r3, #0
 8014128:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 801412c:	2101      	movs	r1, #1
 801412e:	b2c0      	uxtb	r0, r0
 8014130:	f002 ff0a 	bl	8016f48 <TS_IO_Read>
 8014134:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8014138:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801413c:	6023      	str	r3, [r4, #0]
}
 801413e:	b002      	add	sp, #8
 8014140:	bd10      	pop	{r4, pc}
	...

08014144 <ft5336_TS_GetTouchInfo>:
{
 8014144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014148:	b082      	sub	sp, #8
 801414a:	461d      	mov	r5, r3
  volatile uint8_t ucReadData = 0;
 801414c:	2300      	movs	r3, #0
 801414e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8014152:	4b33      	ldr	r3, [pc, #204]	; (8014220 <ft5336_TS_GetTouchInfo+0xdc>)
 8014154:	785b      	ldrb	r3, [r3, #1]
 8014156:	428b      	cmp	r3, r1
 8014158:	d95e      	bls.n	8014218 <ft5336_TS_GetTouchInfo+0xd4>
 801415a:	4616      	mov	r6, r2
    switch(touchIdx)
 801415c:	2909      	cmp	r1, #9
 801415e:	d806      	bhi.n	801416e <ft5336_TS_GetTouchInfo+0x2a>
 8014160:	e8df f001 	tbb	[pc, r1]
 8014164:	130e0936 	.word	0x130e0936
 8014168:	27221d18 	.word	0x27221d18
 801416c:	312c      	.short	0x312c
 801416e:	2700      	movs	r7, #0
 8014170:	46b8      	mov	r8, r7
 8014172:	4639      	mov	r1, r7
 8014174:	e030      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8014176:	270e      	movs	r7, #14
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8014178:	f04f 080d 	mov.w	r8, #13
      regAddressXHigh   = FT5336_P2_XH_REG;
 801417c:	2109      	movs	r1, #9
      break;
 801417e:	e02b      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8014180:	2714      	movs	r7, #20
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8014182:	f04f 0813 	mov.w	r8, #19
      regAddressXHigh   = FT5336_P3_XH_REG;
 8014186:	210f      	movs	r1, #15
      break;
 8014188:	e026      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P4_MISC_REG;
 801418a:	271a      	movs	r7, #26
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 801418c:	f04f 0819 	mov.w	r8, #25
      regAddressXHigh   = FT5336_P4_XH_REG;
 8014190:	2115      	movs	r1, #21
      break;
 8014192:	e021      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8014194:	2720      	movs	r7, #32
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8014196:	f04f 081f 	mov.w	r8, #31
      regAddressXHigh   = FT5336_P5_XH_REG;
 801419a:	211b      	movs	r1, #27
      break;
 801419c:	e01c      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P6_MISC_REG;
 801419e:	2726      	movs	r7, #38	; 0x26
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80141a0:	f04f 0825 	mov.w	r8, #37	; 0x25
      regAddressXHigh   = FT5336_P6_XH_REG;
 80141a4:	2121      	movs	r1, #33	; 0x21
      break;
 80141a6:	e017      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80141a8:	272c      	movs	r7, #44	; 0x2c
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80141aa:	f04f 082b 	mov.w	r8, #43	; 0x2b
      regAddressXHigh   = FT5336_P7_XH_REG;
 80141ae:	2127      	movs	r1, #39	; 0x27
      break;
 80141b0:	e012      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80141b2:	2732      	movs	r7, #50	; 0x32
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80141b4:	f04f 0831 	mov.w	r8, #49	; 0x31
      regAddressXHigh   = FT5336_P8_XH_REG;
 80141b8:	212d      	movs	r1, #45	; 0x2d
      break;
 80141ba:	e00d      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80141bc:	2738      	movs	r7, #56	; 0x38
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80141be:	f04f 0837 	mov.w	r8, #55	; 0x37
      regAddressXHigh   = FT5336_P9_XH_REG;
 80141c2:	2133      	movs	r1, #51	; 0x33
      break;
 80141c4:	e008      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80141c6:	273e      	movs	r7, #62	; 0x3e
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80141c8:	f04f 083d 	mov.w	r8, #61	; 0x3d
      regAddressXHigh   = FT5336_P10_XH_REG;
 80141cc:	2139      	movs	r1, #57	; 0x39
      break;
 80141ce:	e003      	b.n	80141d8 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80141d0:	2708      	movs	r7, #8
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80141d2:	f04f 0807 	mov.w	r8, #7
      regAddressXHigh   = FT5336_P1_XH_REG;
 80141d6:	2103      	movs	r1, #3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80141d8:	b2c4      	uxtb	r4, r0
 80141da:	4620      	mov	r0, r4
 80141dc:	f002 feb4 	bl	8016f48 <TS_IO_Read>
 80141e0:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80141e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80141e8:	099b      	lsrs	r3, r3, #6
 80141ea:	9a08      	ldr	r2, [sp, #32]
 80141ec:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80141ee:	4641      	mov	r1, r8
 80141f0:	4620      	mov	r0, r4
 80141f2:	f002 fea9 	bl	8016f48 <TS_IO_Read>
 80141f6:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80141fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80141fe:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8014200:	4639      	mov	r1, r7
 8014202:	4620      	mov	r0, r4
 8014204:	f002 fea0 	bl	8016f48 <TS_IO_Read>
 8014208:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 801420c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014210:	091b      	lsrs	r3, r3, #4
 8014212:	f003 0304 	and.w	r3, r3, #4
 8014216:	602b      	str	r3, [r5, #0]
}
 8014218:	b002      	add	sp, #8
 801421a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801421e:	bf00      	nop
 8014220:	200006b0 	.word	0x200006b0

08014224 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8014224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014228:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801422a:	2400      	movs	r4, #0
 801422c:	940b      	str	r4, [sp, #44]	; 0x2c
 801422e:	940c      	str	r4, [sp, #48]	; 0x30
 8014230:	940d      	str	r4, [sp, #52]	; 0x34
 8014232:	940e      	str	r4, [sp, #56]	; 0x38
 8014234:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8014236:	4b96      	ldr	r3, [pc, #600]	; (8014490 <MX_GPIO_Init+0x26c>)
 8014238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801423a:	f042 0210 	orr.w	r2, r2, #16
 801423e:	631a      	str	r2, [r3, #48]	; 0x30
 8014240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014242:	f002 0210 	and.w	r2, r2, #16
 8014246:	9200      	str	r2, [sp, #0]
 8014248:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801424a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801424c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014250:	631a      	str	r2, [r3, #48]	; 0x30
 8014252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014254:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8014258:	9201      	str	r2, [sp, #4]
 801425a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801425c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801425e:	f042 0202 	orr.w	r2, r2, #2
 8014262:	631a      	str	r2, [r3, #48]	; 0x30
 8014264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014266:	f002 0202 	and.w	r2, r2, #2
 801426a:	9202      	str	r2, [sp, #8]
 801426c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801426e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014270:	f042 0208 	orr.w	r2, r2, #8
 8014274:	631a      	str	r2, [r3, #48]	; 0x30
 8014276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014278:	f002 0208 	and.w	r2, r2, #8
 801427c:	9203      	str	r2, [sp, #12]
 801427e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8014280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014282:	f042 0204 	orr.w	r2, r2, #4
 8014286:	631a      	str	r2, [r3, #48]	; 0x30
 8014288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801428a:	f002 0204 	and.w	r2, r2, #4
 801428e:	9204      	str	r2, [sp, #16]
 8014290:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014294:	f042 0201 	orr.w	r2, r2, #1
 8014298:	631a      	str	r2, [r3, #48]	; 0x30
 801429a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801429c:	f002 0201 	and.w	r2, r2, #1
 80142a0:	9205      	str	r2, [sp, #20]
 80142a2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80142a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80142aa:	631a      	str	r2, [r3, #48]	; 0x30
 80142ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142ae:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80142b2:	9206      	str	r2, [sp, #24]
 80142b4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80142b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80142bc:	631a      	str	r2, [r3, #48]	; 0x30
 80142be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142c0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80142c4:	9207      	str	r2, [sp, #28]
 80142c6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80142c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80142ce:	631a      	str	r2, [r3, #48]	; 0x30
 80142d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142d2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80142d6:	9208      	str	r2, [sp, #32]
 80142d8:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80142da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142dc:	f042 0220 	orr.w	r2, r2, #32
 80142e0:	631a      	str	r2, [r3, #48]	; 0x30
 80142e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142e4:	f002 0220 	and.w	r2, r2, #32
 80142e8:	9209      	str	r2, [sp, #36]	; 0x24
 80142ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80142ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80142f2:	631a      	str	r2, [r3, #48]	; 0x30
 80142f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142fa:	930a      	str	r3, [sp, #40]	; 0x28
 80142fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FS_PowerSwitchOn_GPIO_Port, FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80142fe:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80144c0 <MX_GPIO_Init+0x29c>
 8014302:	4622      	mov	r2, r4
 8014304:	2120      	movs	r1, #32
 8014306:	4640      	mov	r0, r8
 8014308:	f7ed ff96 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 801430c:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 80144c4 <MX_GPIO_Init+0x2a0>
 8014310:	2201      	movs	r2, #1
 8014312:	2108      	movs	r1, #8
 8014314:	4658      	mov	r0, fp
 8014316:	f7ed ff8f 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 801431a:	4f5e      	ldr	r7, [pc, #376]	; (8014494 <MX_GPIO_Init+0x270>)
 801431c:	2201      	movs	r2, #1
 801431e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014322:	4638      	mov	r0, r7
 8014324:	f7ed ff88 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8014328:	236c      	movs	r3, #108	; 0x6c
 801432a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801432c:	2503      	movs	r5, #3
 801432e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014330:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014332:	a90b      	add	r1, sp, #44	; 0x2c
 8014334:	4858      	ldr	r0, [pc, #352]	; (8014498 <MX_GPIO_Init+0x274>)
 8014336:	f7ed fdeb 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 PG10
                           PG9 PG7 PG6 PG3
                           PG2 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10
 801433a:	f646 63ec 	movw	r3, #28396	; 0x6eec
 801433e:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014340:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014342:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014344:	a90b      	add	r1, sp, #44	; 0x2c
 8014346:	4855      	ldr	r0, [pc, #340]	; (801449c <MX_GPIO_Init+0x278>)
 8014348:	f7ed fde2 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 801434c:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 8014350:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014352:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014354:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014356:	a90b      	add	r1, sp, #44	; 0x2c
 8014358:	4851      	ldr	r0, [pc, #324]	; (80144a0 <MX_GPIO_Init+0x27c>)
 801435a:	f7ed fdd9 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD3 PD4
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 801435e:	f643 03d8 	movw	r3, #14552	; 0x38d8
 8014362:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014364:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014366:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014368:	a90b      	add	r1, sp, #44	; 0x2c
 801436a:	4640      	mov	r0, r8
 801436c:	f7ed fdd0 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA8
                           PA1 PA0 PA4 PA2
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
 8014370:	f248 73d7 	movw	r3, #34775	; 0x87d7
 8014374:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014376:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014378:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801437a:	a90b      	add	r1, sp, #44	; 0x2c
 801437c:	4849      	ldr	r0, [pc, #292]	; (80144a4 <MX_GPIO_Init+0x280>)
 801437e:	f7ed fdc7 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8014382:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 8014386:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801438a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801438c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801438e:	a90b      	add	r1, sp, #44	; 0x2c
 8014390:	4845      	ldr	r0, [pc, #276]	; (80144a8 <MX_GPIO_Init+0x284>)
 8014392:	f7ed fdbd 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3;
 8014396:	f44f 7384 	mov.w	r3, #264	; 0x108
 801439a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801439c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801439e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80143a0:	a90b      	add	r1, sp, #44	; 0x2c
 80143a2:	4638      	mov	r0, r7
 80143a4:	f7ed fdb4 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FS_PowerSwitchOn_Pin;
 80143a8:	2320      	movs	r3, #32
 80143aa:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80143ac:	2601      	movs	r6, #1
 80143ae:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143b0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80143b2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80143b4:	a90b      	add	r1, sp, #44	; 0x2c
 80143b6:	4640      	mov	r0, r8
 80143b8:	f7ed fdaa 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = KBD_INT_Pin|LCD_INT_Pin;
 80143bc:	f242 0304 	movw	r3, #8196	; 0x2004
 80143c0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80143c2:	4b3a      	ldr	r3, [pc, #232]	; (80144ac <MX_GPIO_Init+0x288>)
 80143c4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143c6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80143c8:	a90b      	add	r1, sp, #44	; 0x2c
 80143ca:	4638      	mov	r0, r7
 80143cc:	f7ed fda0 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80143d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80143d4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80143d6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80143d8:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80143da:	a90b      	add	r1, sp, #44	; 0x2c
 80143dc:	4834      	ldr	r0, [pc, #208]	; (80144b0 <MX_GPIO_Init+0x28c>)
 80143de:	f7ed fd97 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80143e2:	f04f 0908 	mov.w	r9, #8
 80143e6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80143ea:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143ec:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80143ee:	f04f 0802 	mov.w	r8, #2
 80143f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80143f6:	a90b      	add	r1, sp, #44	; 0x2c
 80143f8:	4658      	mov	r0, fp
 80143fa:	f7ed fd89 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH2
                           PH12 PH9 PH11 PH6
                           PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 80143fe:	f64f 6344 	movw	r3, #65092	; 0xfe44
 8014402:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014404:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014406:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014408:	a90b      	add	r1, sp, #44	; 0x2c
 801440a:	482a      	ldr	r0, [pc, #168]	; (80144b4 <MX_GPIO_Init+0x290>)
 801440c:	f7ed fd80 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 8014410:	f24c 03f6 	movw	r3, #49398	; 0xc0f6
 8014414:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014416:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014418:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801441a:	a90b      	add	r1, sp, #44	; 0x2c
 801441c:	4824      	ldr	r0, [pc, #144]	; (80144b0 <MX_GPIO_Init+0x28c>)
 801441e:	f7ed fd77 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8014422:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014426:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014428:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801442a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 801442e:	a90b      	add	r1, sp, #44	; 0x2c
 8014430:	4638      	mov	r0, r7
 8014432:	f7ed fd6d 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8014436:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8014438:	4b1f      	ldr	r3, [pc, #124]	; (80144b8 <MX_GPIO_Init+0x294>)
 801443a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801443c:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 801443e:	a90b      	add	r1, sp, #44	; 0x2c
 8014440:	4638      	mov	r0, r7
 8014442:	f7ed fd65 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8014446:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801444a:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801444c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801444e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014450:	a90b      	add	r1, sp, #44	; 0x2c
 8014452:	481a      	ldr	r0, [pc, #104]	; (80144bc <MX_GPIO_Init+0x298>)
 8014454:	f7ed fd5c 	bl	8001f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8014458:	4622      	mov	r2, r4
 801445a:	4641      	mov	r1, r8
 801445c:	2006      	movs	r0, #6
 801445e:	f7ec ff29 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8014462:	2006      	movs	r0, #6
 8014464:	f7ec ff6a 	bl	800133c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8014468:	4622      	mov	r2, r4
 801446a:	4641      	mov	r1, r8
 801446c:	4648      	mov	r0, r9
 801446e:	f7ec ff21 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8014472:	4648      	mov	r0, r9
 8014474:	f7ec ff62 	bl	800133c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8014478:	4622      	mov	r2, r4
 801447a:	4629      	mov	r1, r5
 801447c:	2028      	movs	r0, #40	; 0x28
 801447e:	f7ec ff19 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8014482:	2028      	movs	r0, #40	; 0x28
 8014484:	f7ec ff5a 	bl	800133c <HAL_NVIC_EnableIRQ>

}
 8014488:	b011      	add	sp, #68	; 0x44
 801448a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801448e:	bf00      	nop
 8014490:	40023800 	.word	0x40023800
 8014494:	40022000 	.word	0x40022000
 8014498:	40021000 	.word	0x40021000
 801449c:	40021800 	.word	0x40021800
 80144a0:	40020400 	.word	0x40020400
 80144a4:	40020000 	.word	0x40020000
 80144a8:	40022400 	.word	0x40022400
 80144ac:	10110000 	.word	0x10110000
 80144b0:	40020800 	.word	0x40020800
 80144b4:	40021c00 	.word	0x40021c00
 80144b8:	10210000 	.word	0x10210000
 80144bc:	40021400 	.word	0x40021400
 80144c0:	40020c00 	.word	0x40020c00
 80144c4:	40022800 	.word	0x40022800

080144c8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80144c8:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80144ca:	4812      	ldr	r0, [pc, #72]	; (8014514 <MX_I2C3_Init+0x4c>)
 80144cc:	4b12      	ldr	r3, [pc, #72]	; (8014518 <MX_I2C3_Init+0x50>)
 80144ce:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 80144d0:	4b12      	ldr	r3, [pc, #72]	; (801451c <MX_I2C3_Init+0x54>)
 80144d2:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80144d4:	2300      	movs	r3, #0
 80144d6:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80144d8:	2201      	movs	r2, #1
 80144da:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80144dc:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80144de:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80144e0:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80144e2:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80144e4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80144e6:	f7ee fe53 	bl	8003190 <HAL_I2C_Init>
 80144ea:	b950      	cbnz	r0, 8014502 <MX_I2C3_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80144ec:	2100      	movs	r1, #0
 80144ee:	4809      	ldr	r0, [pc, #36]	; (8014514 <MX_I2C3_Init+0x4c>)
 80144f0:	f7ef f8d8 	bl	80036a4 <HAL_I2CEx_ConfigAnalogFilter>
 80144f4:	b940      	cbnz	r0, 8014508 <MX_I2C3_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80144f6:	2100      	movs	r1, #0
 80144f8:	4806      	ldr	r0, [pc, #24]	; (8014514 <MX_I2C3_Init+0x4c>)
 80144fa:	f7ef f927 	bl	800374c <HAL_I2CEx_ConfigDigitalFilter>
 80144fe:	b930      	cbnz	r0, 801450e <MX_I2C3_Init+0x46>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8014500:	bd08      	pop	{r3, pc}
    Error_Handler();
 8014502:	f000 faef 	bl	8014ae4 <Error_Handler>
 8014506:	e7f1      	b.n	80144ec <MX_I2C3_Init+0x24>
    Error_Handler();
 8014508:	f000 faec 	bl	8014ae4 <Error_Handler>
 801450c:	e7f3      	b.n	80144f6 <MX_I2C3_Init+0x2e>
    Error_Handler();
 801450e:	f000 fae9 	bl	8014ae4 <Error_Handler>
}
 8014512:	e7f5      	b.n	8014500 <MX_I2C3_Init+0x38>
 8014514:	200006b4 	.word	0x200006b4
 8014518:	40005c00 	.word	0x40005c00
 801451c:	20303e5d 	.word	0x20303e5d

08014520 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8014520:	b510      	push	{r4, lr}
 8014522:	b0a8      	sub	sp, #160	; 0xa0
 8014524:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014526:	2100      	movs	r1, #0
 8014528:	9123      	str	r1, [sp, #140]	; 0x8c
 801452a:	9124      	str	r1, [sp, #144]	; 0x90
 801452c:	9125      	str	r1, [sp, #148]	; 0x94
 801452e:	9126      	str	r1, [sp, #152]	; 0x98
 8014530:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014532:	2284      	movs	r2, #132	; 0x84
 8014534:	a802      	add	r0, sp, #8
 8014536:	f005 fc61 	bl	8019dfc <memset>
  if(i2cHandle->Instance==I2C3)
 801453a:	6822      	ldr	r2, [r4, #0]
 801453c:	4b18      	ldr	r3, [pc, #96]	; (80145a0 <HAL_I2C_MspInit+0x80>)
 801453e:	429a      	cmp	r2, r3
 8014540:	d001      	beq.n	8014546 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8014542:	b028      	add	sp, #160	; 0xa0
 8014544:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8014546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801454a:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801454c:	a802      	add	r0, sp, #8
 801454e:	f7f0 f881 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8014552:	bb10      	cbnz	r0, 801459a <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8014554:	4c13      	ldr	r4, [pc, #76]	; (80145a4 <HAL_I2C_MspInit+0x84>)
 8014556:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801455c:	6323      	str	r3, [r4, #48]	; 0x30
 801455e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014564:	9300      	str	r3, [sp, #0]
 8014566:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8014568:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801456c:	9323      	str	r3, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801456e:	2312      	movs	r3, #18
 8014570:	9324      	str	r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014572:	2301      	movs	r3, #1
 8014574:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014576:	2303      	movs	r3, #3
 8014578:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801457a:	2304      	movs	r3, #4
 801457c:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801457e:	a923      	add	r1, sp, #140	; 0x8c
 8014580:	4809      	ldr	r0, [pc, #36]	; (80145a8 <HAL_I2C_MspInit+0x88>)
 8014582:	f7ed fcc5 	bl	8001f10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8014586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014588:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801458c:	6423      	str	r3, [r4, #64]	; 0x40
 801458e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014594:	9301      	str	r3, [sp, #4]
 8014596:	9b01      	ldr	r3, [sp, #4]
}
 8014598:	e7d3      	b.n	8014542 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 801459a:	f000 faa3 	bl	8014ae4 <Error_Handler>
 801459e:	e7d9      	b.n	8014554 <HAL_I2C_MspInit+0x34>
 80145a0:	40005c00 	.word	0x40005c00
 80145a4:	40023800 	.word	0x40023800
 80145a8:	40021c00 	.word	0x40021c00

080145ac <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80145ac:	b510      	push	{r4, lr}
 80145ae:	b09a      	sub	sp, #104	; 0x68

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80145b0:	2434      	movs	r4, #52	; 0x34
 80145b2:	4622      	mov	r2, r4
 80145b4:	2100      	movs	r1, #0
 80145b6:	eb0d 0004 	add.w	r0, sp, r4
 80145ba:	f005 fc1f 	bl	8019dfc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80145be:	4622      	mov	r2, r4
 80145c0:	2100      	movs	r1, #0
 80145c2:	4668      	mov	r0, sp
 80145c4:	f005 fc1a 	bl	8019dfc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80145c8:	4838      	ldr	r0, [pc, #224]	; (80146ac <MX_LTDC_Init+0x100>)
 80145ca:	4b39      	ldr	r3, [pc, #228]	; (80146b0 <MX_LTDC_Init+0x104>)
 80145cc:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80145ce:	2300      	movs	r3, #0
 80145d0:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80145d2:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80145d4:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80145d6:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 0;
 80145d8:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 80145da:	2209      	movs	r2, #9
 80145dc:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 43;
 80145de:	222b      	movs	r2, #43	; 0x2b
 80145e0:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 29;
 80145e2:	221d      	movs	r2, #29
 80145e4:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 80145e6:	f240 220b 	movw	r2, #523	; 0x20b
 80145ea:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 301;
 80145ec:	f240 122d 	movw	r2, #301	; 0x12d
 80145f0:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 80145f2:	f240 2213 	movw	r2, #531	; 0x213
 80145f6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 305;
 80145f8:	f240 1231 	movw	r2, #305	; 0x131
 80145fc:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80145fe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8014602:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8014606:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801460a:	f7ef f9c9 	bl	80039a0 <HAL_LTDC_Init>
 801460e:	2800      	cmp	r0, #0
 8014610:	d142      	bne.n	8014698 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 8014612:	2200      	movs	r2, #0
 8014614:	920d      	str	r2, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8014616:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801461a:	910e      	str	r1, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 801461c:	920f      	str	r2, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 801461e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014622:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8014624:	2002      	movs	r0, #2
 8014626:	9011      	str	r0, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8014628:	9212      	str	r2, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 801462a:	9213      	str	r2, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801462c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014630:	9014      	str	r0, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8014632:	2005      	movs	r0, #5
 8014634:	9015      	str	r0, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8014636:	9216      	str	r2, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8014638:	9117      	str	r1, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 801463a:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 801463c:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8014640:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8014644:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8014648:	a90d      	add	r1, sp, #52	; 0x34
 801464a:	4818      	ldr	r0, [pc, #96]	; (80146ac <MX_LTDC_Init+0x100>)
 801464c:	f7ef fab0 	bl	8003bb0 <HAL_LTDC_ConfigLayer>
 8014650:	bb28      	cbnz	r0, 801469e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
  }
  pLayerCfg1.WindowX0 = 0;
 8014652:	2300      	movs	r3, #0
 8014654:	9300      	str	r3, [sp, #0]
  pLayerCfg1.WindowX1 = 480;
 8014656:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801465a:	9101      	str	r1, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 801465c:	9302      	str	r3, [sp, #8]
  pLayerCfg1.WindowY1 = 272;
 801465e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014662:	9203      	str	r2, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8014664:	2002      	movs	r0, #2
 8014666:	9004      	str	r0, [sp, #16]
  pLayerCfg1.Alpha = 0;
 8014668:	9305      	str	r3, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 801466a:	9306      	str	r3, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801466c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014670:	9007      	str	r0, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8014672:	2005      	movs	r0, #5
 8014674:	9008      	str	r0, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 8014676:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 8014678:	910a      	str	r1, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 801467a:	920b      	str	r2, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 801467c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8014680:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8014684:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8014688:	2201      	movs	r2, #1
 801468a:	4669      	mov	r1, sp
 801468c:	4807      	ldr	r0, [pc, #28]	; (80146ac <MX_LTDC_Init+0x100>)
 801468e:	f7ef fa8f 	bl	8003bb0 <HAL_LTDC_ConfigLayer>
 8014692:	b938      	cbnz	r0, 80146a4 <MX_LTDC_Init+0xf8>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8014694:	b01a      	add	sp, #104	; 0x68
 8014696:	bd10      	pop	{r4, pc}
    Error_Handler();
 8014698:	f000 fa24 	bl	8014ae4 <Error_Handler>
 801469c:	e7b9      	b.n	8014612 <MX_LTDC_Init+0x66>
    Error_Handler();
 801469e:	f000 fa21 	bl	8014ae4 <Error_Handler>
 80146a2:	e7d6      	b.n	8014652 <MX_LTDC_Init+0xa6>
    Error_Handler();
 80146a4:	f000 fa1e 	bl	8014ae4 <Error_Handler>
}
 80146a8:	e7f4      	b.n	8014694 <MX_LTDC_Init+0xe8>
 80146aa:	bf00      	nop
 80146ac:	20000700 	.word	0x20000700
 80146b0:	40016800 	.word	0x40016800

080146b4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80146b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146b6:	b0ad      	sub	sp, #180	; 0xb4
 80146b8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80146ba:	2100      	movs	r1, #0
 80146bc:	9127      	str	r1, [sp, #156]	; 0x9c
 80146be:	9128      	str	r1, [sp, #160]	; 0xa0
 80146c0:	9129      	str	r1, [sp, #164]	; 0xa4
 80146c2:	912a      	str	r1, [sp, #168]	; 0xa8
 80146c4:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80146c6:	2284      	movs	r2, #132	; 0x84
 80146c8:	a806      	add	r0, sp, #24
 80146ca:	f005 fb97 	bl	8019dfc <memset>
  if(ltdcHandle->Instance==LTDC)
 80146ce:	6822      	ldr	r2, [r4, #0]
 80146d0:	4b46      	ldr	r3, [pc, #280]	; (80147ec <HAL_LTDC_MspInit+0x138>)
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d001      	beq.n	80146da <HAL_LTDC_MspInit+0x26>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80146d6:	b02d      	add	sp, #180	; 0xb4
 80146d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80146da:	2308      	movs	r3, #8
 80146dc:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 240;
 80146de:	23f0      	movs	r3, #240	; 0xf0
 80146e0:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 6;
 80146e2:	2306      	movs	r3, #6
 80146e4:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80146e6:	2302      	movs	r3, #2
 80146e8:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 80146ea:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80146ec:	2301      	movs	r3, #1
 80146ee:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80146f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80146f4:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80146f6:	a806      	add	r0, sp, #24
 80146f8:	f7ef ffac 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 80146fc:	2800      	cmp	r0, #0
 80146fe:	d171      	bne.n	80147e4 <HAL_LTDC_MspInit+0x130>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8014700:	4b3b      	ldr	r3, [pc, #236]	; (80147f0 <HAL_LTDC_MspInit+0x13c>)
 8014702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014704:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8014708:	645a      	str	r2, [r3, #68]	; 0x44
 801470a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801470c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8014710:	9200      	str	r2, [sp, #0]
 8014712:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014716:	f042 0210 	orr.w	r2, r2, #16
 801471a:	631a      	str	r2, [r3, #48]	; 0x30
 801471c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801471e:	f002 0210 	and.w	r2, r2, #16
 8014722:	9201      	str	r2, [sp, #4]
 8014724:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8014726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801472c:	631a      	str	r2, [r3, #48]	; 0x30
 801472e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014730:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8014734:	9202      	str	r2, [sp, #8]
 8014736:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8014738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801473a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801473e:	631a      	str	r2, [r3, #48]	; 0x30
 8014740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014742:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8014746:	9203      	str	r2, [sp, #12]
 8014748:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801474a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801474c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014750:	631a      	str	r2, [r3, #48]	; 0x30
 8014752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014754:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8014758:	9204      	str	r2, [sp, #16]
 801475a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801475c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801475e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014762:	631a      	str	r2, [r3, #48]	; 0x30
 8014764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801476a:	9305      	str	r3, [sp, #20]
 801476c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 801476e:	2310      	movs	r3, #16
 8014770:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014772:	2602      	movs	r6, #2
 8014774:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014776:	2500      	movs	r5, #0
 8014778:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801477a:	2403      	movs	r4, #3
 801477c:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801477e:	270e      	movs	r7, #14
 8014780:	972b      	str	r7, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014782:	a927      	add	r1, sp, #156	; 0x9c
 8014784:	481b      	ldr	r0, [pc, #108]	; (80147f4 <HAL_LTDC_MspInit+0x140>)
 8014786:	f7ed fbc3 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 801478a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 801478e:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014790:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014792:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014794:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014796:	972b      	str	r7, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8014798:	a927      	add	r1, sp, #156	; 0x9c
 801479a:	4817      	ldr	r0, [pc, #92]	; (80147f8 <HAL_LTDC_MspInit+0x144>)
 801479c:	f7ed fbb8 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80147a0:	23f7      	movs	r3, #247	; 0xf7
 80147a2:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147a4:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147a6:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80147a8:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80147aa:	972b      	str	r7, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80147ac:	a927      	add	r1, sp, #156	; 0x9c
 80147ae:	4813      	ldr	r0, [pc, #76]	; (80147fc <HAL_LTDC_MspInit+0x148>)
 80147b0:	f7ed fbae 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80147b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80147b8:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147ba:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147bc:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80147be:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80147c0:	2309      	movs	r3, #9
 80147c2:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80147c4:	a927      	add	r1, sp, #156	; 0x9c
 80147c6:	480e      	ldr	r0, [pc, #56]	; (8014800 <HAL_LTDC_MspInit+0x14c>)
 80147c8:	f7ed fba2 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80147cc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80147d0:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147d2:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147d4:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80147d6:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80147d8:	972b      	str	r7, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80147da:	a927      	add	r1, sp, #156	; 0x9c
 80147dc:	4809      	ldr	r0, [pc, #36]	; (8014804 <HAL_LTDC_MspInit+0x150>)
 80147de:	f7ed fb97 	bl	8001f10 <HAL_GPIO_Init>
}
 80147e2:	e778      	b.n	80146d6 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 80147e4:	f000 f97e 	bl	8014ae4 <Error_Handler>
 80147e8:	e78a      	b.n	8014700 <HAL_LTDC_MspInit+0x4c>
 80147ea:	bf00      	nop
 80147ec:	40016800 	.word	0x40016800
 80147f0:	40023800 	.word	0x40023800
 80147f4:	40021000 	.word	0x40021000
 80147f8:	40022400 	.word	0x40022400
 80147fc:	40022800 	.word	0x40022800
 8014800:	40021800 	.word	0x40021800
 8014804:	40022000 	.word	0x40022000

08014808 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8014808:	b508      	push	{r3, lr}
  /* Display On */
  __HAL_LTDC_ENABLE(&hltdc);
 801480a:	4b09      	ldr	r3, [pc, #36]	; (8014830 <BSP_LCD_DisplayOn+0x28>)
 801480c:	681a      	ldr	r2, [r3, #0]
 801480e:	6993      	ldr	r3, [r2, #24]
 8014810:	f043 0301 	orr.w	r3, r3, #1
 8014814:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8014816:	2201      	movs	r2, #1
 8014818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801481c:	4805      	ldr	r0, [pc, #20]	; (8014834 <BSP_LCD_DisplayOn+0x2c>)
 801481e:	f7ed fd0b 	bl	8002238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8014822:	2201      	movs	r2, #1
 8014824:	2108      	movs	r1, #8
 8014826:	4804      	ldr	r0, [pc, #16]	; (8014838 <BSP_LCD_DisplayOn+0x30>)
 8014828:	f7ed fd06 	bl	8002238 <HAL_GPIO_WritePin>
}
 801482c:	bd08      	pop	{r3, pc}
 801482e:	bf00      	nop
 8014830:	20000700 	.word	0x20000700
 8014834:	40022000 	.word	0x40022000
 8014838:	40022800 	.word	0x40022800

0801483c <BSP_LCD_DisplayOff>:
/**
  * @brief  Disables the display.
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 801483c:	b508      	push	{r3, lr}
  /* Display Off */
  __HAL_LTDC_DISABLE(&hltdc);
 801483e:	4b09      	ldr	r3, [pc, #36]	; (8014864 <BSP_LCD_DisplayOff+0x28>)
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	6993      	ldr	r3, [r2, #24]
 8014844:	f023 0301 	bic.w	r3, r3, #1
 8014848:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
 801484a:	2200      	movs	r2, #0
 801484c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014850:	4805      	ldr	r0, [pc, #20]	; (8014868 <BSP_LCD_DisplayOff+0x2c>)
 8014852:	f7ed fcf1 	bl	8002238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
 8014856:	2200      	movs	r2, #0
 8014858:	2108      	movs	r1, #8
 801485a:	4804      	ldr	r0, [pc, #16]	; (801486c <BSP_LCD_DisplayOff+0x30>)
 801485c:	f7ed fcec 	bl	8002238 <HAL_GPIO_WritePin>
}
 8014860:	bd08      	pop	{r3, pc}
 8014862:	bf00      	nop
 8014864:	20000700 	.word	0x20000700
 8014868:	40022000 	.word	0x40022000
 801486c:	40022800 	.word	0x40022800

08014870 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8014870:	b508      	push	{r3, lr}

  /* Disables the MPU */
  HAL_MPU_Disable();
 8014872:	f7ec fdab 	bl	80013cc <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8014876:	2004      	movs	r0, #4
 8014878:	f7ec fdb6 	bl	80013e8 <HAL_MPU_Enable>

}
 801487c:	bd08      	pop	{r3, pc}
	...

08014880 <scan_files>:
{
 8014880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014884:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    TCHAR relative_path[255] = {0};
 8014888:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 801488c:	2100      	movs	r1, #0
 801488e:	4668      	mov	r0, sp
 8014890:	f005 fab4 	bl	8019dfc <memset>
    UINT folders = 0;
 8014894:	2400      	movs	r4, #0
    	res = f_opendir(&folder, L"/PIONEER/USBANLZ");	/* Open the directory */
 8014896:	4969      	ldr	r1, [pc, #420]	; (8014a3c <scan_files+0x1bc>)
 8014898:	a880      	add	r0, sp, #512	; 0x200
 801489a:	f7f7 fc19 	bl	800c0d0 <f_opendir>
 801489e:	4b68      	ldr	r3, [pc, #416]	; (8014a40 <scan_files+0x1c0>)
 80148a0:	7018      	strb	r0, [r3, #0]
    	i = 0;
 80148a2:	2500      	movs	r5, #0
    		res = f_readdir(&folder, &fno);	/* Read a directory item */
 80148a4:	4967      	ldr	r1, [pc, #412]	; (8014a44 <scan_files+0x1c4>)
 80148a6:	a880      	add	r0, sp, #512	; 0x200
 80148a8:	f7f7 fc74 	bl	800c194 <f_readdir>
 80148ac:	4b64      	ldr	r3, [pc, #400]	; (8014a40 <scan_files+0x1c0>)
 80148ae:	7018      	strb	r0, [r3, #0]
    	while(i++ < folders);
 80148b0:	42a5      	cmp	r5, r4
 80148b2:	f105 0501 	add.w	r5, r5, #1
 80148b6:	d3f5      	bcc.n	80148a4 <scan_files+0x24>
    	if (res != FR_OK || fno.fname[0] == 0) {
 80148b8:	2800      	cmp	r0, #0
 80148ba:	f040 80b6 	bne.w	8014a2a <scan_files+0x1aa>
 80148be:	4b61      	ldr	r3, [pc, #388]	; (8014a44 <scan_files+0x1c4>)
 80148c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	f000 80b1 	beq.w	8014a2a <scan_files+0x1aa>
    	if (fno.fattrib & AM_DIR) {	/* It is a directory */
 80148c8:	4b5e      	ldr	r3, [pc, #376]	; (8014a44 <scan_files+0x1c4>)
 80148ca:	7b1b      	ldrb	r3, [r3, #12]
 80148cc:	f013 0f10 	tst.w	r3, #16
 80148d0:	d0e1      	beq.n	8014896 <scan_files+0x16>
    		folders++;
 80148d2:	3401      	adds	r4, #1
    		wcscpy(new_path, L"/PIONEER/USBANLZ/");
 80148d4:	4d5c      	ldr	r5, [pc, #368]	; (8014a48 <scan_files+0x1c8>)
 80148d6:	495d      	ldr	r1, [pc, #372]	; (8014a4c <scan_files+0x1cc>)
 80148d8:	4628      	mov	r0, r5
 80148da:	f005 fbda 	bl	801a092 <wcscpy>
    		wcscat(new_path, fno.fname);
 80148de:	495c      	ldr	r1, [pc, #368]	; (8014a50 <scan_files+0x1d0>)
 80148e0:	4628      	mov	r0, r5
 80148e2:	f005 fbc6 	bl	801a072 <wcscat>
    	  	for(i = 0; i < 255; i++) relative_path[i] = 0;
 80148e6:	2300      	movs	r3, #0
 80148e8:	e003      	b.n	80148f2 <scan_files+0x72>
 80148ea:	2200      	movs	r2, #0
 80148ec:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
 80148f0:	3301      	adds	r3, #1
 80148f2:	2bfe      	cmp	r3, #254	; 0xfe
 80148f4:	d9f9      	bls.n	80148ea <scan_files+0x6a>
    		wcscpy(relative_path, fno.fname);
 80148f6:	4956      	ldr	r1, [pc, #344]	; (8014a50 <scan_files+0x1d0>)
 80148f8:	4668      	mov	r0, sp
 80148fa:	f005 fbca 	bl	801a092 <wcscpy>
    		wcscpy(old_path, new_path);
 80148fe:	4952      	ldr	r1, [pc, #328]	; (8014a48 <scan_files+0x1c8>)
 8014900:	4854      	ldr	r0, [pc, #336]	; (8014a54 <scan_files+0x1d4>)
 8014902:	f005 fbc6 	bl	801a092 <wcscpy>
    		f_closedir(&folder);
 8014906:	a880      	add	r0, sp, #512	; 0x200
 8014908:	f7f7 fc3a 	bl	800c180 <f_closedir>
    		subfolders = 0;
 801490c:	2500      	movs	r5, #0
 801490e:	e01e      	b.n	801494e <scan_files+0xce>
    			for(i = 0; i < 255; i++) new_path[i] = 0;
 8014910:	4a4d      	ldr	r2, [pc, #308]	; (8014a48 <scan_files+0x1c8>)
 8014912:	2100      	movs	r1, #0
 8014914:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8014918:	3301      	adds	r3, #1
 801491a:	2bfe      	cmp	r3, #254	; 0xfe
 801491c:	d9f8      	bls.n	8014910 <scan_files+0x90>
    			wcscpy(new_path, old_path);
 801491e:	494d      	ldr	r1, [pc, #308]	; (8014a54 <scan_files+0x1d4>)
 8014920:	4849      	ldr	r0, [pc, #292]	; (8014a48 <scan_files+0x1c8>)
 8014922:	f005 fbb6 	bl	801a092 <wcscpy>
    			i = 0;
 8014926:	2600      	movs	r6, #0
    				res = f_readdir(&folder, &fno);	/* Read a directory item */
 8014928:	4946      	ldr	r1, [pc, #280]	; (8014a44 <scan_files+0x1c4>)
 801492a:	a880      	add	r0, sp, #512	; 0x200
 801492c:	f7f7 fc32 	bl	800c194 <f_readdir>
 8014930:	4b43      	ldr	r3, [pc, #268]	; (8014a40 <scan_files+0x1c0>)
 8014932:	7018      	strb	r0, [r3, #0]
    			while(i++ < subfolders);
 8014934:	42ae      	cmp	r6, r5
 8014936:	f106 0601 	add.w	r6, r6, #1
 801493a:	d3f5      	bcc.n	8014928 <scan_files+0xa8>
    			if (res != FR_OK || fno.fname[0] == 0) {
 801493c:	b978      	cbnz	r0, 801495e <scan_files+0xde>
 801493e:	4b41      	ldr	r3, [pc, #260]	; (8014a44 <scan_files+0x1c4>)
 8014940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014942:	b163      	cbz	r3, 801495e <scan_files+0xde>
    			if (fno.fattrib & AM_DIR) {	/* It is a directory */
 8014944:	4b3f      	ldr	r3, [pc, #252]	; (8014a44 <scan_files+0x1c4>)
 8014946:	7b1b      	ldrb	r3, [r3, #12]
 8014948:	f013 0f10 	tst.w	r3, #16
 801494c:	d10b      	bne.n	8014966 <scan_files+0xe6>
    			res = f_opendir(&folder, old_path);
 801494e:	4941      	ldr	r1, [pc, #260]	; (8014a54 <scan_files+0x1d4>)
 8014950:	a880      	add	r0, sp, #512	; 0x200
 8014952:	f7f7 fbbd 	bl	800c0d0 <f_opendir>
 8014956:	4b3a      	ldr	r3, [pc, #232]	; (8014a40 <scan_files+0x1c0>)
 8014958:	7018      	strb	r0, [r3, #0]
    			for(i = 0; i < 255; i++) new_path[i] = 0;
 801495a:	2300      	movs	r3, #0
 801495c:	e7dd      	b.n	801491a <scan_files+0x9a>
    				f_closedir(&folder);
 801495e:	a880      	add	r0, sp, #512	; 0x200
 8014960:	f7f7 fc0e 	bl	800c180 <f_closedir>
    				break;  /* Break on error or end of dir */
 8014964:	e797      	b.n	8014896 <scan_files+0x16>
    				subfolders++;
 8014966:	3501      	adds	r5, #1
    				wcscat(new_path, L"/");
 8014968:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8014a60 <scan_files+0x1e0>
 801496c:	4e36      	ldr	r6, [pc, #216]	; (8014a48 <scan_files+0x1c8>)
 801496e:	4641      	mov	r1, r8
 8014970:	4630      	mov	r0, r6
 8014972:	f005 fb7e 	bl	801a072 <wcscat>
    				wcscat(new_path, fno.fname);
 8014976:	4f36      	ldr	r7, [pc, #216]	; (8014a50 <scan_files+0x1d0>)
 8014978:	4639      	mov	r1, r7
 801497a:	4630      	mov	r0, r6
 801497c:	f005 fb79 	bl	801a072 <wcscat>
    				wcscat(relative_path, L"/");
 8014980:	4641      	mov	r1, r8
 8014982:	4668      	mov	r0, sp
 8014984:	f005 fb75 	bl	801a072 <wcscat>
    				wcscat(relative_path, fno.fname);
 8014988:	4639      	mov	r1, r7
 801498a:	4668      	mov	r0, sp
 801498c:	f005 fb71 	bl	801a072 <wcscat>
    				f_closedir(&folder);
 8014990:	a880      	add	r0, sp, #512	; 0x200
 8014992:	f7f7 fbf5 	bl	800c180 <f_closedir>
    				res = f_opendir(&folder, new_path);
 8014996:	4631      	mov	r1, r6
 8014998:	a880      	add	r0, sp, #512	; 0x200
 801499a:	f7f7 fb99 	bl	800c0d0 <f_opendir>
 801499e:	4a28      	ldr	r2, [pc, #160]	; (8014a40 <scan_files+0x1c0>)
 80149a0:	7010      	strb	r0, [r2, #0]
    				if(res == FR_OK) {
 80149a2:	2800      	cmp	r0, #0
 80149a4:	d1d3      	bne.n	801494e <scan_files+0xce>
    					res = f_readdir(&folder, &fno);
 80149a6:	f1a7 0628 	sub.w	r6, r7, #40	; 0x28
 80149aa:	4631      	mov	r1, r6
 80149ac:	a880      	add	r0, sp, #512	; 0x200
 80149ae:	f7f7 fbf1 	bl	800c194 <f_readdir>
 80149b2:	4b23      	ldr	r3, [pc, #140]	; (8014a40 <scan_files+0x1c0>)
 80149b4:	7018      	strb	r0, [r3, #0]
    					if (!(fno.fattrib & AM_DIR)) {
 80149b6:	7b33      	ldrb	r3, [r6, #12]
 80149b8:	f013 0f10 	tst.w	r3, #16
 80149bc:	d1c7      	bne.n	801494e <scan_files+0xce>
    						for(i=0; i<255; i++) TrackPaths[Total_tracks][i] = ff_convert(new_path[i], 0);
 80149be:	2600      	movs	r6, #0
 80149c0:	e00d      	b.n	80149de <scan_files+0x15e>
 80149c2:	2100      	movs	r1, #0
 80149c4:	4b20      	ldr	r3, [pc, #128]	; (8014a48 <scan_files+0x1c8>)
 80149c6:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 80149ca:	f7f7 fc3b 	bl	800c244 <ff_convert>
 80149ce:	4b22      	ldr	r3, [pc, #136]	; (8014a58 <scan_files+0x1d8>)
 80149d0:	881b      	ldrh	r3, [r3, #0]
 80149d2:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80149d6:	4a21      	ldr	r2, [pc, #132]	; (8014a5c <scan_files+0x1dc>)
 80149d8:	4413      	add	r3, r2
 80149da:	5598      	strb	r0, [r3, r6]
 80149dc:	3601      	adds	r6, #1
 80149de:	2efe      	cmp	r6, #254	; 0xfe
 80149e0:	d9ef      	bls.n	80149c2 <scan_files+0x142>
    						wcscat(new_path, L"/");
 80149e2:	4e19      	ldr	r6, [pc, #100]	; (8014a48 <scan_files+0x1c8>)
 80149e4:	491e      	ldr	r1, [pc, #120]	; (8014a60 <scan_files+0x1e0>)
 80149e6:	4630      	mov	r0, r6
 80149e8:	f005 fb43 	bl	801a072 <wcscat>
    						wcscat(new_path, fno.fname);
 80149ec:	4918      	ldr	r1, [pc, #96]	; (8014a50 <scan_files+0x1d0>)
 80149ee:	4630      	mov	r0, r6
 80149f0:	f005 fb3f 	bl	801a072 <wcscat>
    						GetFileName(new_path);
 80149f4:	4630      	mov	r0, r6
 80149f6:	f001 fc31 	bl	801625c <GetFileName>
    						for(i = 0; i < 255; i++) TrackTable[Total_tracks][i] = rekordbox.file[i];
 80149fa:	2300      	movs	r3, #0
 80149fc:	e00b      	b.n	8014a16 <scan_files+0x196>
 80149fe:	4a16      	ldr	r2, [pc, #88]	; (8014a58 <scan_files+0x1d8>)
 8014a00:	8812      	ldrh	r2, [r2, #0]
 8014a02:	4918      	ldr	r1, [pc, #96]	; (8014a64 <scan_files+0x1e4>)
 8014a04:	4419      	add	r1, r3
 8014a06:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
 8014a0a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8014a0e:	4916      	ldr	r1, [pc, #88]	; (8014a68 <scan_files+0x1e8>)
 8014a10:	440a      	add	r2, r1
 8014a12:	54d0      	strb	r0, [r2, r3]
 8014a14:	3301      	adds	r3, #1
 8014a16:	2bfe      	cmp	r3, #254	; 0xfe
 8014a18:	d9f1      	bls.n	80149fe <scan_files+0x17e>
    						Total_tracks++;
 8014a1a:	4a0f      	ldr	r2, [pc, #60]	; (8014a58 <scan_files+0x1d8>)
 8014a1c:	8813      	ldrh	r3, [r2, #0]
 8014a1e:	3301      	adds	r3, #1
 8014a20:	8013      	strh	r3, [r2, #0]
    						f_closedir(&folder);
 8014a22:	a880      	add	r0, sp, #512	; 0x200
 8014a24:	f7f7 fbac 	bl	800c180 <f_closedir>
 8014a28:	e791      	b.n	801494e <scan_files+0xce>
    		f_closedir(&folder);
 8014a2a:	a880      	add	r0, sp, #512	; 0x200
 8014a2c:	f7f7 fba8 	bl	800c180 <f_closedir>
    return res;
 8014a30:	4b03      	ldr	r3, [pc, #12]	; (8014a40 <scan_files+0x1c0>)
 8014a32:	7818      	ldrb	r0, [r3, #0]
}
 8014a34:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
 8014a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a3c:	0801f6dc 	.word	0x0801f6dc
 8014a40:	2000eb9a 	.word	0x2000eb9a
 8014a44:	2000e3d8 	.word	0x2000e3d8
 8014a48:	2000e79c 	.word	0x2000e79c
 8014a4c:	0801f720 	.word	0x0801f720
 8014a50:	2000e400 	.word	0x2000e400
 8014a54:	2000e99c 	.word	0x2000e99c
 8014a58:	20001c38 	.word	0x20001c38
 8014a5c:	20001c3c 	.word	0x20001c3c
 8014a60:	0801f760 	.word	0x0801f760
 8014a64:	20014620 	.word	0x20014620
 8014a68:	20007fd8 	.word	0x20007fd8

08014a6c <find_file>:
{
 8014a6c:	b510      	push	{r4, lr}
 8014a6e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    TCHAR path[255] = {0};
 8014a72:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8014a76:	2100      	movs	r1, #0
 8014a78:	4668      	mov	r0, sp
 8014a7a:	f005 f9bf 	bl	8019dfc <memset>
    for(int i=0; i<255; i++) path[i] = ff_convert(TrackPaths[Track_number][i], 1);
 8014a7e:	2400      	movs	r4, #0
 8014a80:	e00c      	b.n	8014a9c <find_file+0x30>
 8014a82:	4b13      	ldr	r3, [pc, #76]	; (8014ad0 <find_file+0x64>)
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8014a8a:	4a12      	ldr	r2, [pc, #72]	; (8014ad4 <find_file+0x68>)
 8014a8c:	4413      	add	r3, r2
 8014a8e:	2101      	movs	r1, #1
 8014a90:	5d18      	ldrb	r0, [r3, r4]
 8014a92:	f7f7 fbd7 	bl	800c244 <ff_convert>
 8014a96:	f82d 0014 	strh.w	r0, [sp, r4, lsl #1]
 8014a9a:	3401      	adds	r4, #1
 8014a9c:	2cfe      	cmp	r4, #254	; 0xfe
 8014a9e:	ddf0      	ble.n	8014a82 <find_file+0x16>
    wcscpy(new_path, path);
 8014aa0:	4c0d      	ldr	r4, [pc, #52]	; (8014ad8 <find_file+0x6c>)
 8014aa2:	4669      	mov	r1, sp
 8014aa4:	4620      	mov	r0, r4
 8014aa6:	f005 faf4 	bl	801a092 <wcscpy>
	res = f_opendir(&folder, new_path);
 8014aaa:	4621      	mov	r1, r4
 8014aac:	a880      	add	r0, sp, #512	; 0x200
 8014aae:	f7f7 fb0f 	bl	800c0d0 <f_opendir>
 8014ab2:	4b0a      	ldr	r3, [pc, #40]	; (8014adc <find_file+0x70>)
 8014ab4:	7018      	strb	r0, [r3, #0]
	if(res == FR_OK) {
 8014ab6:	b120      	cbz	r0, 8014ac2 <find_file+0x56>
}
 8014ab8:	4b08      	ldr	r3, [pc, #32]	; (8014adc <find_file+0x70>)
 8014aba:	7818      	ldrb	r0, [r3, #0]
 8014abc:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
 8014ac0:	bd10      	pop	{r4, pc}
		res = f_readdir(&folder, &fno);
 8014ac2:	4907      	ldr	r1, [pc, #28]	; (8014ae0 <find_file+0x74>)
 8014ac4:	a880      	add	r0, sp, #512	; 0x200
 8014ac6:	f7f7 fb65 	bl	800c194 <f_readdir>
 8014aca:	4b04      	ldr	r3, [pc, #16]	; (8014adc <find_file+0x70>)
 8014acc:	7018      	strb	r0, [r3, #0]
		if (!(fno.fattrib & AM_DIR)) {
 8014ace:	e7f3      	b.n	8014ab8 <find_file+0x4c>
 8014ad0:	2000e374 	.word	0x2000e374
 8014ad4:	20001c3c 	.word	0x20001c3c
 8014ad8:	2000e79c 	.word	0x2000e79c
 8014adc:	2000eb9a 	.word	0x2000eb9a
 8014ae0:	2000e3d8 	.word	0x2000e3d8

08014ae4 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8014ae4:	e7fe      	b.n	8014ae4 <Error_Handler>
	...

08014ae8 <SystemClock_Config>:
{
 8014ae8:	b500      	push	{lr}
 8014aea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014aec:	2230      	movs	r2, #48	; 0x30
 8014aee:	2100      	movs	r1, #0
 8014af0:	a808      	add	r0, sp, #32
 8014af2:	f005 f983 	bl	8019dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014af6:	2300      	movs	r3, #0
 8014af8:	9303      	str	r3, [sp, #12]
 8014afa:	9304      	str	r3, [sp, #16]
 8014afc:	9305      	str	r3, [sp, #20]
 8014afe:	9306      	str	r3, [sp, #24]
 8014b00:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014b02:	4b23      	ldr	r3, [pc, #140]	; (8014b90 <SystemClock_Config+0xa8>)
 8014b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014b06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8014b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8014b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b12:	9301      	str	r3, [sp, #4]
 8014b14:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8014b16:	4b1f      	ldr	r3, [pc, #124]	; (8014b94 <SystemClock_Config+0xac>)
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8014b1e:	601a      	str	r2, [r3, #0]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8014b26:	9302      	str	r3, [sp, #8]
 8014b28:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8014b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014b32:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8014b34:	2302      	movs	r3, #2
 8014b36:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8014b38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8014b3c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8014b3e:	2219      	movs	r2, #25
 8014b40:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 8014b42:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8014b46:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8014b48:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8014b4a:	2308      	movs	r3, #8
 8014b4c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014b4e:	a808      	add	r0, sp, #32
 8014b50:	f7ef f9a4 	bl	8003e9c <HAL_RCC_OscConfig>
 8014b54:	b9b0      	cbnz	r0, 8014b84 <SystemClock_Config+0x9c>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8014b56:	f7ef f963 	bl	8003e20 <HAL_PWREx_EnableOverDrive>
 8014b5a:	b9a8      	cbnz	r0, 8014b88 <SystemClock_Config+0xa0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014b5c:	230f      	movs	r3, #15
 8014b5e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014b60:	2302      	movs	r3, #2
 8014b62:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014b64:	2300      	movs	r3, #0
 8014b66:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8014b68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8014b6c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8014b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014b72:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8014b74:	2106      	movs	r1, #6
 8014b76:	a803      	add	r0, sp, #12
 8014b78:	f7ef fc58 	bl	800442c <HAL_RCC_ClockConfig>
 8014b7c:	b930      	cbnz	r0, 8014b8c <SystemClock_Config+0xa4>
}
 8014b7e:	b015      	add	sp, #84	; 0x54
 8014b80:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8014b84:	f7ff ffae 	bl	8014ae4 <Error_Handler>
    Error_Handler();
 8014b88:	f7ff ffac 	bl	8014ae4 <Error_Handler>
    Error_Handler();
 8014b8c:	f7ff ffaa 	bl	8014ae4 <Error_Handler>
 8014b90:	40023800 	.word	0x40023800
 8014b94:	40007000 	.word	0x40007000

08014b98 <main>:
{
 8014b98:	b508      	push	{r3, lr}
  MPU_Config();
 8014b9a:	f7ff fe69 	bl	8014870 <MPU_Config>
  __ASM volatile ("dsb 0xF":::"memory");
 8014b9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014ba2:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8014ba6:	4bb8      	ldr	r3, [pc, #736]	; (8014e88 <main+0x2f0>)
 8014ba8:	2100      	movs	r1, #0
 8014baa:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8014bae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014bb2:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8014bb6:	695a      	ldr	r2, [r3, #20]
 8014bb8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8014bbc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8014bbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014bc2:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8014bc6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8014bca:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8014bce:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8014bd2:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8014bd6:	e000      	b.n	8014bda <main+0x42>
    } while(sets-- != 0U);
 8014bd8:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8014bda:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8014bde:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8014be2:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8014be6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8014bea:	49a7      	ldr	r1, [pc, #668]	; (8014e88 <main+0x2f0>)
 8014bec:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	3a01      	subs	r2, #1
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d1f2      	bne.n	8014bde <main+0x46>
    } while(sets-- != 0U);
 8014bf8:	1e43      	subs	r3, r0, #1
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	d1ec      	bne.n	8014bd8 <main+0x40>
 8014bfe:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8014c02:	694b      	ldr	r3, [r1, #20]
 8014c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014c08:	614b      	str	r3, [r1, #20]
 8014c0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014c0e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8014c12:	f7ec faf9 	bl	8001208 <HAL_Init>
  SystemClock_Config();
 8014c16:	f7ff ff67 	bl	8014ae8 <SystemClock_Config>
  MX_GPIO_Init();
 8014c1a:	f7ff fb03 	bl	8014224 <MX_GPIO_Init>
  MX_DMA_Init();
 8014c1e:	f7fe ffd7 	bl	8013bd0 <MX_DMA_Init>
  MX_LTDC_Init();
 8014c22:	f7ff fcc3 	bl	80145ac <MX_LTDC_Init>
  MX_FMC_Init();
 8014c26:	f7ff f91b 	bl	8013e60 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8014c2a:	f001 fcdf 	bl	80165ec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8014c2e:	f7ff f821 	bl	8013c74 <MX_FATFS_Init>
  MX_DMA2D_Init();
 8014c32:	f7fe ffe7 	bl	8013c04 <MX_DMA2D_Init>
  MX_SAI2_Init();
 8014c36:	f001 fbb9 	bl	80163ac <MX_SAI2_Init>
  MX_I2C3_Init();
 8014c3a:	f7ff fc45 	bl	80144c8 <MX_I2C3_Init>
  MX_TIM4_Init();
 8014c3e:	f003 faa7 	bl	8018190 <MX_TIM4_Init>
  MX_TIM6_Init();
 8014c42:	f003 fb19 	bl	8018278 <MX_TIM6_Init>
  MX_TIM7_Init();
 8014c46:	f003 fb41 	bl	80182cc <MX_TIM7_Init>
  MX_TIM8_Init();
 8014c4a:	f003 fb69 	bl	8018320 <MX_TIM8_Init>
  MX_SPI2_Init();
 8014c4e:	f001 fd3d 	bl	80166cc <MX_SPI2_Init>
  MX_TIM5_Init();
 8014c52:	f003 fad7 	bl	8018204 <MX_TIM5_Init>
  MX_TIM9_Init();
 8014c56:	f003 fb9f 	bl	8018398 <MX_TIM9_Init>
  MX_USB_HOST_Init();
 8014c5a:	f003 fcbb 	bl	80185d4 <MX_USB_HOST_Init>
  SDRAM_Init(); // MT48LC4M32B2B5-6A SDRAM initialization
 8014c5e:	f7ff f89f 	bl	8013da0 <SDRAM_Init>
  BSP_LCD_DisplayOff();
 8014c62:	f7ff fdeb 	bl	801483c <BSP_LCD_DisplayOff>
  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_0, 0); // set layer 0 framebuffer address
 8014c66:	4c89      	ldr	r4, [pc, #548]	; (8014e8c <main+0x2f4>)
 8014c68:	2200      	movs	r2, #0
 8014c6a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014c6e:	4620      	mov	r0, r4
 8014c70:	f7ef f84c 	bl	8003d0c <HAL_LTDC_SetAddress>
  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_1, 1); // set layer 1 framebuffer address
 8014c74:	2201      	movs	r2, #1
 8014c76:	4986      	ldr	r1, [pc, #536]	; (8014e90 <main+0x2f8>)
 8014c78:	4620      	mov	r0, r4
 8014c7a:	f7ef f847 	bl	8003d0c <HAL_LTDC_SetAddress>
  ClearLayer(); // clear framebuffer 0
 8014c7e:	f7fc fc33 	bl	80114e8 <ClearLayer>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer++);
 8014c82:	4d84      	ldr	r5, [pc, #528]	; (8014e94 <main+0x2fc>)
 8014c84:	782a      	ldrb	r2, [r5, #0]
 8014c86:	1c53      	adds	r3, r2, #1
 8014c88:	702b      	strb	r3, [r5, #0]
 8014c8a:	2100      	movs	r1, #0
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	f7ef f893 	bl	8003db8 <HAL_LTDC_SetAlpha_NoReload>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 8014c92:	782a      	ldrb	r2, [r5, #0]
 8014c94:	1e53      	subs	r3, r2, #1
 8014c96:	702b      	strb	r3, [r5, #0]
 8014c98:	21ff      	movs	r1, #255	; 0xff
 8014c9a:	4620      	mov	r0, r4
 8014c9c:	f7ef f88c 	bl	8003db8 <HAL_LTDC_SetAlpha_NoReload>
  ChangeLayers();
 8014ca0:	f7fc fc48 	bl	8011534 <ChangeLayers>
  ClearLayer(); // clear framebuffer 1
 8014ca4:	f7fc fc20 	bl	80114e8 <ClearLayer>
  HAL_TIM_Base_Start_IT(&htim4); // starft display refresh timer
 8014ca8:	487b      	ldr	r0, [pc, #492]	; (8014e98 <main+0x300>)
 8014caa:	f7f2 f9d5 	bl	8007058 <HAL_TIM_Base_Start_IT>
  if(BSP_SD_IsDetected() != SD_PRESENT) {
 8014cae:	f7fc fbdd 	bl	801146c <BSP_SD_IsDetected>
 8014cb2:	2801      	cmp	r0, #1
 8014cb4:	d005      	beq.n	8014cc2 <main+0x12a>
	  menu_mode = 3;
 8014cb6:	4b79      	ldr	r3, [pc, #484]	; (8014e9c <main+0x304>)
 8014cb8:	2203      	movs	r2, #3
 8014cba:	701a      	strb	r2, [r3, #0]
	  BSP_LCD_DisplayOn();
 8014cbc:	f7ff fda4 	bl	8014808 <BSP_LCD_DisplayOn>
	  while(1);
 8014cc0:	e7fe      	b.n	8014cc0 <main+0x128>
  BSP_TS_Init(480, 272); // touchscreen initialization
 8014cc2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8014cc6:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8014cca:	f001 ff7b 	bl	8016bc4 <BSP_TS_Init>
  BSP_TS_ITClear();
 8014cce:	f002 f8f5 	bl	8016ebc <BSP_TS_ITClear>
  BSP_TS_ITConfig();
 8014cd2:	f001 ff9f 	bl	8016c14 <BSP_TS_ITConfig>
  f_mount(&SDFatFs, (TCHAR const*)SDPath, 0); // SD card disk mount
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	4971      	ldr	r1, [pc, #452]	; (8014ea0 <main+0x308>)
 8014cda:	4872      	ldr	r0, [pc, #456]	; (8014ea4 <main+0x30c>)
 8014cdc:	f7f6 ff36 	bl	800bb4c <f_mount>
  hMP3Decoder = MP3InitDecoder(); // mp3 decoder initialization
 8014ce0:	f7f7 fb31 	bl	800c346 <MP3InitDecoder>
 8014ce4:	4b70      	ldr	r3, [pc, #448]	; (8014ea8 <main+0x310>)
 8014ce6:	6018      	str	r0, [r3, #0]
  scan_files(); // get total track number
 8014ce8:	f7ff fdca 	bl	8014880 <scan_files>
  HAL_TIM_Base_Start_IT(&htim5); // start jog speed counting timer
 8014cec:	486f      	ldr	r0, [pc, #444]	; (8014eac <main+0x314>)
 8014cee:	f7f2 f9b3 	bl	8007058 <HAL_TIM_Base_Start_IT>
  HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 8014cf2:	2304      	movs	r3, #4
 8014cf4:	4a6e      	ldr	r2, [pc, #440]	; (8014eb0 <main+0x318>)
 8014cf6:	496f      	ldr	r1, [pc, #444]	; (8014eb4 <main+0x31c>)
 8014cf8:	486f      	ldr	r0, [pc, #444]	; (8014eb8 <main+0x320>)
 8014cfa:	f7f1 ff87 	bl	8006c0c <HAL_SPI_TransmitReceive_IT>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, volume, (uint32_t)(AUDIO_FREQUENCY_22K)*(1 + trak.percent));
 8014cfe:	4b6f      	ldr	r3, [pc, #444]	; (8014ebc <main+0x324>)
 8014d00:	edd3 7a01 	vldr	s15, [r3, #4]
 8014d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d0c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8014ec0 <main+0x328>
 8014d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014d18:	ee17 2a90 	vmov	r2, s15
 8014d1c:	4b69      	ldr	r3, [pc, #420]	; (8014ec4 <main+0x32c>)
 8014d1e:	7819      	ldrb	r1, [r3, #0]
 8014d20:	2002      	movs	r0, #2
 8014d22:	f001 feaf 	bl	8016a84 <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetVolume(0);
 8014d26:	2000      	movs	r0, #0
 8014d28:	f001 fdc2 	bl	80168b0 <BSP_AUDIO_OUT_SetVolume>
  BSP_LCD_DisplayOn();
 8014d2c:	f7ff fd6c 	bl	8014808 <BSP_LCD_DisplayOn>
 8014d30:	e03f      	b.n	8014db2 <main+0x21a>
	  if(display.cuemode == 1) rekordbox.autocue = 1;
 8014d32:	4b65      	ldr	r3, [pc, #404]	; (8014ec8 <main+0x330>)
 8014d34:	2201      	movs	r2, #1
 8014d36:	f883 2b90 	strb.w	r2, [r3, #2960]	; 0xb90
 8014d3a:	e05b      	b.n	8014df4 <main+0x25c>
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 8014d3c:	f023 0302 	bic.w	r3, r3, #2
 8014d40:	4a5c      	ldr	r2, [pc, #368]	; (8014eb4 <main+0x31c>)
 8014d42:	7093      	strb	r3, [r2, #2]
 8014d44:	e080      	b.n	8014e48 <main+0x2b0>
			  PlayMp3File();
 8014d46:	f000 fa4f 	bl	80151e8 <PlayMp3File>
		  spi_tx[2] |= (1 << 3);
 8014d4a:	4a5a      	ldr	r2, [pc, #360]	; (8014eb4 <main+0x31c>)
 8014d4c:	7893      	ldrb	r3, [r2, #2]
 8014d4e:	f043 0308 	orr.w	r3, r3, #8
 8014d52:	7093      	strb	r3, [r2, #2]
		  trak.state = STOPPED;
 8014d54:	4b59      	ldr	r3, [pc, #356]	; (8014ebc <main+0x324>)
 8014d56:	2201      	movs	r2, #1
 8014d58:	701a      	strb	r2, [r3, #0]
		  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8014d5a:	2002      	movs	r0, #2
 8014d5c:	f001 fd8e 	bl	801687c <BSP_AUDIO_OUT_Stop>
	  if(file_pos_wide >= rekordbox.spectrum_size) {
 8014d60:	4b59      	ldr	r3, [pc, #356]	; (8014ec8 <main+0x330>)
 8014d62:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8014d66:	4b59      	ldr	r3, [pc, #356]	; (8014ecc <main+0x334>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d803      	bhi.n	8014d76 <main+0x1de>
		  Track_number++;
 8014d6e:	4a58      	ldr	r2, [pc, #352]	; (8014ed0 <main+0x338>)
 8014d70:	6813      	ldr	r3, [r2, #0]
 8014d72:	3301      	adds	r3, #1
 8014d74:	6013      	str	r3, [r2, #0]
	  file_pos_wide = 0;
 8014d76:	4b55      	ldr	r3, [pc, #340]	; (8014ecc <main+0x334>)
 8014d78:	2200      	movs	r2, #0
 8014d7a:	601a      	str	r2, [r3, #0]
	  menu_mode = 4;
 8014d7c:	4b47      	ldr	r3, [pc, #284]	; (8014e9c <main+0x304>)
 8014d7e:	2204      	movs	r2, #4
 8014d80:	701a      	strb	r2, [r3, #0]
	  f_close(&MyFile);
 8014d82:	4854      	ldr	r0, [pc, #336]	; (8014ed4 <main+0x33c>)
 8014d84:	f7f7 f846 	bl	800be14 <f_close>
	  f_closedir(&dir);
 8014d88:	4853      	ldr	r0, [pc, #332]	; (8014ed8 <main+0x340>)
 8014d8a:	f7f7 f9f9 	bl	800c180 <f_closedir>
	  if(Track_number >= Total_tracks) Track_number = 0;
 8014d8e:	4b53      	ldr	r3, [pc, #332]	; (8014edc <main+0x344>)
 8014d90:	881b      	ldrh	r3, [r3, #0]
 8014d92:	4a4f      	ldr	r2, [pc, #316]	; (8014ed0 <main+0x338>)
 8014d94:	6812      	ldr	r2, [r2, #0]
 8014d96:	4293      	cmp	r3, r2
 8014d98:	dc02      	bgt.n	8014da0 <main+0x208>
 8014d9a:	4a4d      	ldr	r2, [pc, #308]	; (8014ed0 <main+0x338>)
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	6011      	str	r1, [r2, #0]
	  if(Track_number < 0) Track_number = Total_tracks - 1;
 8014da0:	4a4b      	ldr	r2, [pc, #300]	; (8014ed0 <main+0x338>)
 8014da2:	6812      	ldr	r2, [r2, #0]
 8014da4:	2a00      	cmp	r2, #0
 8014da6:	da02      	bge.n	8014dae <main+0x216>
 8014da8:	3b01      	subs	r3, #1
 8014daa:	4a49      	ldr	r2, [pc, #292]	; (8014ed0 <main+0x338>)
 8014dac:	6013      	str	r3, [r2, #0]
	  MX_USB_HOST_Process();
 8014dae:	f003 fc4d 	bl	801864c <MX_USB_HOST_Process>
	  find_file(Track_number);
 8014db2:	4b47      	ldr	r3, [pc, #284]	; (8014ed0 <main+0x338>)
 8014db4:	8818      	ldrh	r0, [r3, #0]
 8014db6:	f7ff fe59 	bl	8014a6c <find_file>
	  fr = 0;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	4a48      	ldr	r2, [pc, #288]	; (8014ee0 <main+0x348>)
 8014dbe:	8013      	strh	r3, [r2, #0]
	  sec = 0;
 8014dc0:	4a48      	ldr	r2, [pc, #288]	; (8014ee4 <main+0x34c>)
 8014dc2:	7013      	strb	r3, [r2, #0]
	  min = 0;
 8014dc4:	4a48      	ldr	r2, [pc, #288]	; (8014ee8 <main+0x350>)
 8014dc6:	7013      	strb	r3, [r2, #0]
	  rfr = 0;
 8014dc8:	4a48      	ldr	r2, [pc, #288]	; (8014eec <main+0x354>)
 8014dca:	8013      	strh	r3, [r2, #0]
	  rsec = 0;
 8014dcc:	4a48      	ldr	r2, [pc, #288]	; (8014ef0 <main+0x358>)
 8014dce:	7013      	strb	r3, [r2, #0]
	  rmin = 0;
 8014dd0:	4a48      	ldr	r2, [pc, #288]	; (8014ef4 <main+0x35c>)
 8014dd2:	7013      	strb	r3, [r2, #0]
	  file_pos_wide = 0;
 8014dd4:	4a3d      	ldr	r2, [pc, #244]	; (8014ecc <main+0x334>)
 8014dd6:	6013      	str	r3, [r2, #0]
	  position = 0;
 8014dd8:	4a47      	ldr	r2, [pc, #284]	; (8014ef8 <main+0x360>)
 8014dda:	6013      	str	r3, [r2, #0]
	  rekordbox.state = 0;
 8014ddc:	4a3a      	ldr	r2, [pc, #232]	; (8014ec8 <main+0x330>)
 8014dde:	f882 3b98 	strb.w	r3, [r2, #2968]	; 0xb98
	  display.loop = 0;
 8014de2:	4a46      	ldr	r2, [pc, #280]	; (8014efc <main+0x364>)
 8014de4:	7413      	strb	r3, [r2, #16]
	  if(display.cuemode == 1) rekordbox.autocue = 1;
 8014de6:	7893      	ldrb	r3, [r2, #2]
 8014de8:	2b01      	cmp	r3, #1
 8014dea:	d0a2      	beq.n	8014d32 <main+0x19a>
	  else rekordbox.autocue = 0;
 8014dec:	4b36      	ldr	r3, [pc, #216]	; (8014ec8 <main+0x330>)
 8014dee:	2200      	movs	r2, #0
 8014df0:	f883 2b90 	strb.w	r2, [r3, #2960]	; 0xb90
	  rekordbox.currentcue = 0;
 8014df4:	4d42      	ldr	r5, [pc, #264]	; (8014f00 <main+0x368>)
 8014df6:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
 8014dfa:	2400      	movs	r4, #0
 8014dfc:	f8c3 4b94 	str.w	r4, [r3, #2964]	; 0xb94
	  DecodeRekordboxFiles(new_path);
 8014e00:	4840      	ldr	r0, [pc, #256]	; (8014f04 <main+0x36c>)
 8014e02:	f000 fb9f 	bl	8015544 <DecodeRekordboxFiles>
	  menu_mode = 0;
 8014e06:	4b25      	ldr	r3, [pc, #148]	; (8014e9c <main+0x304>)
 8014e08:	701c      	strb	r4, [r3, #0]
	  bar = 0;
 8014e0a:	4b3f      	ldr	r3, [pc, #252]	; (8014f08 <main+0x370>)
 8014e0c:	601c      	str	r4, [r3, #0]
	  beat = 0;
 8014e0e:	4b3f      	ldr	r3, [pc, #252]	; (8014f0c <main+0x374>)
 8014e10:	601c      	str	r4, [r3, #0]
	  res = f_open(&MyFile, rekordbox.filename, FA_READ);
 8014e12:	2201      	movs	r2, #1
 8014e14:	4629      	mov	r1, r5
 8014e16:	482f      	ldr	r0, [pc, #188]	; (8014ed4 <main+0x33c>)
 8014e18:	f7f6 fec6 	bl	800bba8 <f_open>
 8014e1c:	4b3c      	ldr	r3, [pc, #240]	; (8014f10 <main+0x378>)
 8014e1e:	7018      	strb	r0, [r3, #0]
	  if(res == FR_OK)
 8014e20:	2800      	cmp	r0, #0
 8014e22:	d19d      	bne.n	8014d60 <main+0x1c8>
		  trak.state = PLAYING;
 8014e24:	4b25      	ldr	r3, [pc, #148]	; (8014ebc <main+0x324>)
 8014e26:	701c      	strb	r4, [r3, #0]
		  spi_tx[2] &= ~(1 << 0);
 8014e28:	4a22      	ldr	r2, [pc, #136]	; (8014eb4 <main+0x31c>)
 8014e2a:	7893      	ldrb	r3, [r2, #2]
 8014e2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8014e30:	7093      	strb	r3, [r2, #2]
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 8014e32:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 8014e36:	f892 2b90 	ldrb.w	r2, [r2, #2960]	; 0xb90
 8014e3a:	2a02      	cmp	r2, #2
 8014e3c:	f43f af7e 	beq.w	8014d3c <main+0x1a4>
		  else spi_tx[2] |= (1 << 1);
 8014e40:	f043 0302 	orr.w	r3, r3, #2
 8014e44:	4a1b      	ldr	r2, [pc, #108]	; (8014eb4 <main+0x31c>)
 8014e46:	7093      	strb	r3, [r2, #2]
		  spi_tx[2] &= ~(1 << 3);
 8014e48:	4a1a      	ldr	r2, [pc, #104]	; (8014eb4 <main+0x31c>)
 8014e4a:	7893      	ldrb	r3, [r2, #2]
 8014e4c:	f023 0308 	bic.w	r3, r3, #8
 8014e50:	7093      	strb	r3, [r2, #2]
		  if((strcmp(rekordbox.filetype, ".wav") == 0) || (strcmp(rekordbox.filetype, ".WAV") == 0)) {
 8014e52:	4930      	ldr	r1, [pc, #192]	; (8014f14 <main+0x37c>)
 8014e54:	4830      	ldr	r0, [pc, #192]	; (8014f18 <main+0x380>)
 8014e56:	f7eb f9db 	bl	8000210 <strcmp>
 8014e5a:	b120      	cbz	r0, 8014e66 <main+0x2ce>
 8014e5c:	492f      	ldr	r1, [pc, #188]	; (8014f1c <main+0x384>)
 8014e5e:	482e      	ldr	r0, [pc, #184]	; (8014f18 <main+0x380>)
 8014e60:	f7eb f9d6 	bl	8000210 <strcmp>
 8014e64:	b908      	cbnz	r0, 8014e6a <main+0x2d2>
			  PlayWavFile();
 8014e66:	f004 f84b 	bl	8018f00 <PlayWavFile>
		  if((strcmp(rekordbox.filetype, ".mp3") == 0) || (strcmp(rekordbox.filetype, ".MP3") == 0)) {
 8014e6a:	492d      	ldr	r1, [pc, #180]	; (8014f20 <main+0x388>)
 8014e6c:	482a      	ldr	r0, [pc, #168]	; (8014f18 <main+0x380>)
 8014e6e:	f7eb f9cf 	bl	8000210 <strcmp>
 8014e72:	2800      	cmp	r0, #0
 8014e74:	f43f af67 	beq.w	8014d46 <main+0x1ae>
 8014e78:	492a      	ldr	r1, [pc, #168]	; (8014f24 <main+0x38c>)
 8014e7a:	4827      	ldr	r0, [pc, #156]	; (8014f18 <main+0x380>)
 8014e7c:	f7eb f9c8 	bl	8000210 <strcmp>
 8014e80:	2800      	cmp	r0, #0
 8014e82:	f47f af62 	bne.w	8014d4a <main+0x1b2>
 8014e86:	e75e      	b.n	8014d46 <main+0x1ae>
 8014e88:	e000ed00 	.word	0xe000ed00
 8014e8c:	20000700 	.word	0x20000700
 8014e90:	c007f800 	.word	0xc007f800
 8014e94:	200007a8 	.word	0x200007a8
 8014e98:	20017474 	.word	0x20017474
 8014e9c:	2000060c 	.word	0x2000060c
 8014ea0:	20000654 	.word	0x20000654
 8014ea4:	20001a08 	.word	0x20001a08
 8014ea8:	2000e604 	.word	0x2000e604
 8014eac:	200174b4 	.word	0x200174b4
 8014eb0:	2000eba4 	.word	0x2000eba4
 8014eb4:	20000058 	.word	0x20000058
 8014eb8:	20017330 	.word	0x20017330
 8014ebc:	2000ebac 	.word	0x2000ebac
 8014ec0:	46ac4400 	.word	0x46ac4400
 8014ec4:	2000005c 	.word	0x2000005c
 8014ec8:	20016620 	.word	0x20016620
 8014ecc:	2000e3d4 	.word	0x2000e3d4
 8014ed0:	2000e374 	.word	0x2000e374
 8014ed4:	200017b8 	.word	0x200017b8
 8014ed8:	2000e380 	.word	0x2000e380
 8014edc:	20001c38 	.word	0x20001c38
 8014ee0:	2000e600 	.word	0x2000e600
 8014ee4:	2000eba0 	.word	0x2000eba0
 8014ee8:	2000e798 	.word	0x2000e798
 8014eec:	2000eb9c 	.word	0x2000eb9c
 8014ef0:	2000eb9f 	.word	0x2000eb9f
 8014ef4:	2000eb9e 	.word	0x2000eb9e
 8014ef8:	20000610 	.word	0x20000610
 8014efc:	200005f0 	.word	0x200005f0
 8014f00:	20014620 	.word	0x20014620
 8014f04:	2000e79c 	.word	0x2000e79c
 8014f08:	200005e0 	.word	0x200005e0
 8014f0c:	200005e4 	.word	0x200005e4
 8014f10:	2000eb9a 	.word	0x2000eb9a
 8014f14:	0801f768 	.word	0x0801f768
 8014f18:	2001491d 	.word	0x2001491d
 8014f1c:	0801f770 	.word	0x0801f770
 8014f20:	0801f778 	.word	0x0801f778
 8014f24:	0801f780 	.word	0x0801f780

08014f28 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8014f28:	4770      	bx	lr

08014f2a <Mp3ReadId3V2Text>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Text(FIL* pInFile, uint32_t unDataLen, char* pszBuffer, uint32_t unBufferSize)
{
 8014f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	4607      	mov	r7, r0
 8014f32:	460e      	mov	r6, r1
 8014f34:	4690      	mov	r8, r2
 8014f36:	461c      	mov	r4, r3
	UINT unRead = 0;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	9301      	str	r3, [sp, #4]
	BYTE byEncoding = 0;
 8014f3c:	f88d 3003 	strb.w	r3, [sp, #3]
	if((f_read(pInFile, &byEncoding, 1, &unRead) == FR_OK) && (unRead == 1))
 8014f40:	ab01      	add	r3, sp, #4
 8014f42:	2201      	movs	r2, #1
 8014f44:	f10d 0103 	add.w	r1, sp, #3
 8014f48:	f7f6 fe9d 	bl	800bc86 <f_read>
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	d145      	bne.n	8014fdc <Mp3ReadId3V2Text+0xb2>
 8014f50:	9d01      	ldr	r5, [sp, #4]
 8014f52:	2d01      	cmp	r5, #1
 8014f54:	d147      	bne.n	8014fe6 <Mp3ReadId3V2Text+0xbc>
	{
		unDataLen--;
 8014f56:	3e01      	subs	r6, #1
		if(unDataLen <= (unBufferSize - 1))
 8014f58:	1e63      	subs	r3, r4, #1
 8014f5a:	42b3      	cmp	r3, r6
 8014f5c:	d333      	bcc.n	8014fc6 <Mp3ReadId3V2Text+0x9c>
		{
			if((f_read(pInFile, pszBuffer, unDataLen, &unRead) == FR_OK) ||
 8014f5e:	ab01      	add	r3, sp, #4
 8014f60:	4632      	mov	r2, r6
 8014f62:	4641      	mov	r1, r8
 8014f64:	4638      	mov	r0, r7
 8014f66:	f7f6 fe8e 	bl	800bc86 <f_read>
 8014f6a:	b110      	cbz	r0, 8014f72 <Mp3ReadId3V2Text+0x48>
					(unRead == unDataLen))
 8014f6c:	9b01      	ldr	r3, [sp, #4]
			if((f_read(pInFile, pszBuffer, unDataLen, &unRead) == FR_OK) ||
 8014f6e:	42b3      	cmp	r3, r6
 8014f70:	d135      	bne.n	8014fde <Mp3ReadId3V2Text+0xb4>
			{
				if(byEncoding == 0)
 8014f72:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014f76:	b91b      	cbnz	r3, 8014f80 <Mp3ReadId3V2Text+0x56>
				{
					// ISO-8859-1 multibyte
					// just add a terminating zero
					pszBuffer[unDataLen] = 0;
 8014f78:	2500      	movs	r5, #0
 8014f7a:	f808 5006 	strb.w	r5, [r8, r6]
 8014f7e:	e02e      	b.n	8014fde <Mp3ReadId3V2Text+0xb4>
				}
				else if(byEncoding == 1)
 8014f80:	2b01      	cmp	r3, #1
 8014f82:	d001      	beq.n	8014f88 <Mp3ReadId3V2Text+0x5e>
	}
	else
	{
		return 1;
	}
	return 0;
 8014f84:	2500      	movs	r5, #0
 8014f86:	e02a      	b.n	8014fde <Mp3ReadId3V2Text+0xb4>
					if((unDataLen > 2) && (pszBuffer[0] == 0xFF) && (pszBuffer[1] == 0xFE))
 8014f88:	2e02      	cmp	r6, #2
 8014f8a:	d90b      	bls.n	8014fa4 <Mp3ReadId3V2Text+0x7a>
 8014f8c:	f898 3000 	ldrb.w	r3, [r8]
 8014f90:	2bff      	cmp	r3, #255	; 0xff
 8014f92:	d001      	beq.n	8014f98 <Mp3ReadId3V2Text+0x6e>
					uint32_t r = 0;
 8014f94:	2300      	movs	r3, #0
 8014f96:	e006      	b.n	8014fa6 <Mp3ReadId3V2Text+0x7c>
					if((unDataLen > 2) && (pszBuffer[0] == 0xFF) && (pszBuffer[1] == 0xFE))
 8014f98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014f9c:	2bfe      	cmp	r3, #254	; 0xfe
 8014f9e:	d004      	beq.n	8014faa <Mp3ReadId3V2Text+0x80>
					uint32_t r = 0;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	e000      	b.n	8014fa6 <Mp3ReadId3V2Text+0x7c>
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	e007      	b.n	8014fba <Mp3ReadId3V2Text+0x90>
						r = 2;
 8014faa:	2302      	movs	r3, #2
 8014fac:	e7fb      	b.n	8014fa6 <Mp3ReadId3V2Text+0x7c>
						pszBuffer[w] = pszBuffer[r];
 8014fae:	f818 1003 	ldrb.w	r1, [r8, r3]
 8014fb2:	f808 1002 	strb.w	r1, [r8, r2]
					for(; r < unDataLen; r += 2, w += 1)
 8014fb6:	3302      	adds	r3, #2
 8014fb8:	3201      	adds	r2, #1
 8014fba:	42b3      	cmp	r3, r6
 8014fbc:	d3f7      	bcc.n	8014fae <Mp3ReadId3V2Text+0x84>
					pszBuffer[w] = 0;
 8014fbe:	2500      	movs	r5, #0
 8014fc0:	f808 5002 	strb.w	r5, [r8, r2]
 8014fc4:	e00b      	b.n	8014fde <Mp3ReadId3V2Text+0xb4>
			if(f_lseek(pInFile, f_tell(pInFile) + unDataLen) != FR_OK)
 8014fc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fca:	18b2      	adds	r2, r6, r2
 8014fcc:	f143 0300 	adc.w	r3, r3, #0
 8014fd0:	4638      	mov	r0, r7
 8014fd2:	f7f6 ff29 	bl	800be28 <f_lseek>
 8014fd6:	b910      	cbnz	r0, 8014fde <Mp3ReadId3V2Text+0xb4>
	return 0;
 8014fd8:	2500      	movs	r5, #0
 8014fda:	e000      	b.n	8014fde <Mp3ReadId3V2Text+0xb4>
		return 1;
 8014fdc:	2501      	movs	r5, #1
}
 8014fde:	4628      	mov	r0, r5
 8014fe0:	b002      	add	sp, #8
 8014fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
 8014fe6:	2501      	movs	r5, #1
 8014fe8:	e7f9      	b.n	8014fde <Mp3ReadId3V2Text+0xb4>
	...

08014fec <Mp3ReadId3V2Tag>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Tag(FIL* pInFile, char* pszArtist, uint32_t unArtistSize, char* pszTitle, uint32_t unTitleSize)
{
 8014fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff0:	b08b      	sub	sp, #44	; 0x2c
 8014ff2:	4606      	mov	r6, r0
 8014ff4:	460c      	mov	r4, r1
 8014ff6:	4617      	mov	r7, r2
 8014ff8:	461d      	mov	r5, r3
	pszArtist[0] = 0;
 8014ffa:	2100      	movs	r1, #0
 8014ffc:	7021      	strb	r1, [r4, #0]
	pszTitle[0] = 0;
 8014ffe:	7019      	strb	r1, [r3, #0]

	BYTE id3hd[10];
	UINT unRead = 0;
 8015000:	9106      	str	r1, [sp, #24]
	// read ID3 tag header (10 bytes)
	if((f_read(pInFile, id3hd, 10, &unRead) != FR_OK) || (unRead != 10))
 8015002:	ab06      	add	r3, sp, #24
 8015004:	220a      	movs	r2, #10
 8015006:	a907      	add	r1, sp, #28
 8015008:	f7f6 fe3d 	bl	800bc86 <f_read>
 801500c:	2800      	cmp	r0, #0
 801500e:	f040 80db 	bne.w	80151c8 <Mp3ReadId3V2Tag+0x1dc>
 8015012:	9b06      	ldr	r3, [sp, #24]
 8015014:	2b0a      	cmp	r3, #10
 8015016:	f040 80db 	bne.w	80151d0 <Mp3ReadId3V2Tag+0x1e4>
		return 1;
	}
	else
	{
		uint32_t unSkip = 0;
		id3tagsize = 0;
 801501a:	4b6e      	ldr	r3, [pc, #440]	; (80151d4 <Mp3ReadId3V2Tag+0x1e8>)
 801501c:	2200      	movs	r2, #0
 801501e:	601a      	str	r2, [r3, #0]
		if((unRead == 10) &&
				(id3hd[0] == 'I') &&
 8015020:	f89d 301c 	ldrb.w	r3, [sp, #28]
		if((unRead == 10) &&
 8015024:	2b49      	cmp	r3, #73	; 0x49
 8015026:	f040 80c5 	bne.w	80151b4 <Mp3ReadId3V2Tag+0x1c8>
				(id3hd[1] == 'D') &&
 801502a:	f89d 301d 	ldrb.w	r3, [sp, #29]
				(id3hd[0] == 'I') &&
 801502e:	2b44      	cmp	r3, #68	; 0x44
 8015030:	d002      	beq.n	8015038 <Mp3ReadId3V2Tag+0x4c>
		uint32_t unSkip = 0;
 8015032:	f04f 0a00 	mov.w	sl, #0
 8015036:	e0bf      	b.n	80151b8 <Mp3ReadId3V2Tag+0x1cc>
				(id3hd[2] == '3'))
 8015038:	f89d 301e 	ldrb.w	r3, [sp, #30]
				(id3hd[1] == 'D') &&
 801503c:	2b33      	cmp	r3, #51	; 0x33
 801503e:	d002      	beq.n	8015046 <Mp3ReadId3V2Tag+0x5a>
		uint32_t unSkip = 0;
 8015040:	f04f 0a00 	mov.w	sl, #0
 8015044:	e0b8      	b.n	80151b8 <Mp3ReadId3V2Tag+0x1cc>
		{
			// include ID3 header size (10 bytes)
			unSkip += 10;
			// ID3 tag full size
			unSkip = ((id3hd[6] & 0x7f) << 21) | ((id3hd[7] & 0x7f) << 14) | ((id3hd[8] & 0x7f) << 7) | (id3hd[9] & 0x7f);
 8015046:	f89d a022 	ldrb.w	sl, [sp, #34]	; 0x22
 801504a:	ea4f 5a4a 	mov.w	sl, sl, lsl #21
 801504e:	f00a 6a7e 	and.w	sl, sl, #266338304	; 0xfe00000
 8015052:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015056:	039b      	lsls	r3, r3, #14
 8015058:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
 801505c:	ea4a 0a03 	orr.w	sl, sl, r3
 8015060:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015064:	01db      	lsls	r3, r3, #7
 8015066:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 801506a:	ea4a 0a03 	orr.w	sl, sl, r3
 801506e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8015072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015076:	ea4a 0a03 	orr.w	sl, sl, r3
			id3tagsize = unSkip;
 801507a:	4b56      	ldr	r3, [pc, #344]	; (80151d4 <Mp3ReadId3V2Tag+0x1e8>)
 801507c:	f8c3 a000 	str.w	sl, [r3]
			// try to get some information from the tag
			// skip the extended header, if present
			uint8_t unVersion = id3hd[3];
 8015080:	f89d 901f 	ldrb.w	r9, [sp, #31]
			if(id3hd[5] & 0x40)
 8015084:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8015088:	f013 0f40 	tst.w	r3, #64	; 0x40
 801508c:	d102      	bne.n	8015094 <Mp3ReadId3V2Tag+0xa8>
				{
					break;
				}
				char szFrameId[5] = {0, 0, 0, 0, 0};
				memcpy(szFrameId, frhd, 4);
				uint32_t unFrameSize = 0;
 801508e:	f04f 0b02 	mov.w	fp, #2
 8015092:	e06c      	b.n	801516e <Mp3ReadId3V2Tag+0x182>
				f_read(pInFile, exhd, 4, &unRead);
 8015094:	ab06      	add	r3, sp, #24
 8015096:	2204      	movs	r2, #4
 8015098:	a903      	add	r1, sp, #12
 801509a:	4630      	mov	r0, r6
 801509c:	f7f6 fdf3 	bl	800bc86 <f_read>
				size_t unExHdrSkip = ((exhd[0] & 0x7f) << 21) | ((exhd[1] & 0x7f) << 14) | ((exhd[2] & 0x7f) << 7) | (exhd[3] & 0x7f);
 80150a0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80150a4:	0552      	lsls	r2, r2, #21
 80150a6:	f002 627e 	and.w	r2, r2, #266338304	; 0xfe00000
 80150aa:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80150ae:	039b      	lsls	r3, r3, #14
 80150b0:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
 80150b4:	431a      	orrs	r2, r3
 80150b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80150ba:	01db      	lsls	r3, r3, #7
 80150bc:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 80150c0:	431a      	orrs	r2, r3
 80150c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80150c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150ca:	431a      	orrs	r2, r3
				unExHdrSkip -= 4;
 80150cc:	3a04      	subs	r2, #4
				if(f_lseek(pInFile, f_tell(pInFile) + unExHdrSkip) != FR_OK)
 80150ce:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80150d0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80150d2:	1852      	adds	r2, r2, r1
 80150d4:	f143 0300 	adc.w	r3, r3, #0
 80150d8:	4630      	mov	r0, r6
 80150da:	f7f6 fea5 	bl	800be28 <f_lseek>
 80150de:	2800      	cmp	r0, #0
 80150e0:	d0d5      	beq.n	801508e <Mp3ReadId3V2Tag+0xa2>
					return 1;
 80150e2:	2001      	movs	r0, #1
 80150e4:	e071      	b.n	80151ca <Mp3ReadId3V2Tag+0x1de>
				{
					if(unVersion == 3)
					{
						// ID3v2.3
						unFrameSize <<= 8;
						unFrameSize += frhd[i + 4];
 80150e6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80150ea:	446a      	add	r2, sp
 80150ec:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80150f0:	eb02 2808 	add.w	r8, r2, r8, lsl #8
 80150f4:	e005      	b.n	8015102 <Mp3ReadId3V2Tag+0x116>
				for(; i < 4; i++)
 80150f6:	3301      	adds	r3, #1
 80150f8:	2b03      	cmp	r3, #3
 80150fa:	d80f      	bhi.n	801511c <Mp3ReadId3V2Tag+0x130>
					if(unVersion == 3)
 80150fc:	f1b9 0f03 	cmp.w	r9, #3
 8015100:	d0f1      	beq.n	80150e6 <Mp3ReadId3V2Tag+0xfa>
					}
					if(unVersion == 4)
 8015102:	f1b9 0f04 	cmp.w	r9, #4
 8015106:	d1f6      	bne.n	80150f6 <Mp3ReadId3V2Tag+0x10a>
					{
						// ID3v2.4
						unFrameSize <<= 7;
						unFrameSize += frhd[i + 4] & 0x7F;
 8015108:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801510c:	446a      	add	r2, sp
 801510e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8015112:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015116:	eb02 18c8 	add.w	r8, r2, r8, lsl #7
 801511a:	e7ec      	b.n	80150f6 <Mp3ReadId3V2Tag+0x10a>
					}
				}

				if(strcmp(szFrameId, "TPE1") == 0)
 801511c:	492e      	ldr	r1, [pc, #184]	; (80151d8 <Mp3ReadId3V2Tag+0x1ec>)
 801511e:	a801      	add	r0, sp, #4
 8015120:	f7eb f876 	bl	8000210 <strcmp>
 8015124:	b178      	cbz	r0, 8015146 <Mp3ReadId3V2Tag+0x15a>
					{
						break;
					}
					nFramesToRead--;
				}
				else if(strcmp(szFrameId, "TIT2") == 0)
 8015126:	492d      	ldr	r1, [pc, #180]	; (80151dc <Mp3ReadId3V2Tag+0x1f0>)
 8015128:	a801      	add	r0, sp, #4
 801512a:	f7eb f871 	bl	8000210 <strcmp>
 801512e:	b9a0      	cbnz	r0, 801515a <Mp3ReadId3V2Tag+0x16e>
				{
					// title
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszTitle, unTitleSize) != 0)
 8015130:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015132:	462a      	mov	r2, r5
 8015134:	4641      	mov	r1, r8
 8015136:	4630      	mov	r0, r6
 8015138:	f7ff fef7 	bl	8014f2a <Mp3ReadId3V2Text>
 801513c:	2800      	cmp	r0, #0
 801513e:	d13b      	bne.n	80151b8 <Mp3ReadId3V2Tag+0x1cc>
					{
						break;
					}
					nFramesToRead--;
 8015140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015144:	e013      	b.n	801516e <Mp3ReadId3V2Tag+0x182>
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszArtist, unArtistSize) != 0)
 8015146:	463b      	mov	r3, r7
 8015148:	4622      	mov	r2, r4
 801514a:	4641      	mov	r1, r8
 801514c:	4630      	mov	r0, r6
 801514e:	f7ff feec 	bl	8014f2a <Mp3ReadId3V2Text>
 8015152:	bb88      	cbnz	r0, 80151b8 <Mp3ReadId3V2Tag+0x1cc>
					nFramesToRead--;
 8015154:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015158:	e009      	b.n	801516e <Mp3ReadId3V2Tag+0x182>
				}
				else
				{
					if(f_lseek(pInFile, f_tell(pInFile) + unFrameSize) != FR_OK)
 801515a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 801515c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801515e:	eb18 0202 	adds.w	r2, r8, r2
 8015162:	f143 0300 	adc.w	r3, r3, #0
 8015166:	4630      	mov	r0, r6
 8015168:	f7f6 fe5e 	bl	800be28 <f_lseek>
 801516c:	bb00      	cbnz	r0, 80151b0 <Mp3ReadId3V2Tag+0x1c4>
			while(nFramesToRead > 0)
 801516e:	f1bb 0f00 	cmp.w	fp, #0
 8015172:	d021      	beq.n	80151b8 <Mp3ReadId3V2Tag+0x1cc>
				if((f_read(pInFile, frhd, 10, &unRead) != FR_OK) || (unRead != 10))
 8015174:	ab06      	add	r3, sp, #24
 8015176:	220a      	movs	r2, #10
 8015178:	a903      	add	r1, sp, #12
 801517a:	4630      	mov	r0, r6
 801517c:	f7f6 fd83 	bl	800bc86 <f_read>
 8015180:	b9b0      	cbnz	r0, 80151b0 <Mp3ReadId3V2Tag+0x1c4>
 8015182:	9b06      	ldr	r3, [sp, #24]
 8015184:	2b0a      	cmp	r3, #10
 8015186:	d113      	bne.n	80151b0 <Mp3ReadId3V2Tag+0x1c4>
				if((frhd[0] == 0) || (strncmp(frhd, "3DI", 3) == 0))
 8015188:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801518c:	b1a3      	cbz	r3, 80151b8 <Mp3ReadId3V2Tag+0x1cc>
 801518e:	2203      	movs	r2, #3
 8015190:	4913      	ldr	r1, [pc, #76]	; (80151e0 <Mp3ReadId3V2Tag+0x1f4>)
 8015192:	a803      	add	r0, sp, #12
 8015194:	f004 ff59 	bl	801a04a <strncmp>
 8015198:	b170      	cbz	r0, 80151b8 <Mp3ReadId3V2Tag+0x1cc>
				char szFrameId[5] = {0, 0, 0, 0, 0};
 801519a:	4b12      	ldr	r3, [pc, #72]	; (80151e4 <Mp3ReadId3V2Tag+0x1f8>)
 801519c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80151a0:	9001      	str	r0, [sp, #4]
 80151a2:	f88d 1008 	strb.w	r1, [sp, #8]
				memcpy(szFrameId, frhd, 4);
 80151a6:	9b03      	ldr	r3, [sp, #12]
 80151a8:	9301      	str	r3, [sp, #4]
				uint32_t i = 0;
 80151aa:	2300      	movs	r3, #0
				uint32_t unFrameSize = 0;
 80151ac:	4698      	mov	r8, r3
				for(; i < 4; i++)
 80151ae:	e7a3      	b.n	80150f8 <Mp3ReadId3V2Tag+0x10c>
					return 1;
 80151b0:	2001      	movs	r0, #1
 80151b2:	e00a      	b.n	80151ca <Mp3ReadId3V2Tag+0x1de>
		uint32_t unSkip = 0;
 80151b4:	f04f 0a00 	mov.w	sl, #0
						return 1;
					}
				}
			}
		}
		if(f_lseek(pInFile, unSkip) != FR_OK)
 80151b8:	4652      	mov	r2, sl
 80151ba:	2300      	movs	r3, #0
 80151bc:	4630      	mov	r0, r6
 80151be:	f7f6 fe33 	bl	800be28 <f_lseek>
 80151c2:	b110      	cbz	r0, 80151ca <Mp3ReadId3V2Tag+0x1de>
		{
			return 1;
 80151c4:	2001      	movs	r0, #1
 80151c6:	e000      	b.n	80151ca <Mp3ReadId3V2Tag+0x1de>
		return 1;
 80151c8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
 80151ca:	b00b      	add	sp, #44	; 0x2c
 80151cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 1;
 80151d0:	2001      	movs	r0, #1
 80151d2:	e7fa      	b.n	80151ca <Mp3ReadId3V2Tag+0x1de>
 80151d4:	200145f0 	.word	0x200145f0
 80151d8:	0801f78c 	.word	0x0801f78c
 80151dc:	0801f794 	.word	0x0801f794
 80151e0:	0801f788 	.word	0x0801f788
 80151e4:	0801a730 	.word	0x0801a730

080151e8 <PlayMp3File>:
		}
	}
	return res;
}

void PlayMp3File() {
 80151e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151ec:	b0bf      	sub	sp, #252	; 0xfc
	BufferCtl.filetype = 1;
 80151ee:	4d89      	ldr	r5, [pc, #548]	; (8015414 <PlayMp3File+0x22c>)
 80151f0:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 80151f4:	2201      	movs	r2, #1
 80151f6:	721a      	strb	r2, [r3, #8]
	char szArtist[120];
	char szTitle[120];
	id3tagsize = 0;
 80151f8:	2400      	movs	r4, #0
 80151fa:	4b87      	ldr	r3, [pc, #540]	; (8015418 <PlayMp3File+0x230>)
 80151fc:	601c      	str	r4, [r3, #0]
	Mp3ReadId3V2Tag(&MyFile, szArtist, sizeof(szArtist), szTitle, sizeof(szTitle));
 80151fe:	2278      	movs	r2, #120	; 0x78
 8015200:	9200      	str	r2, [sp, #0]
 8015202:	ab02      	add	r3, sp, #8
 8015204:	a920      	add	r1, sp, #128	; 0x80
 8015206:	4885      	ldr	r0, [pc, #532]	; (801541c <PlayMp3File+0x234>)
 8015208:	f7ff fef0 	bl	8014fec <Mp3ReadId3V2Tag>
	bOutOfData = 0;
 801520c:	4b84      	ldr	r3, [pc, #528]	; (8015420 <PlayMp3File+0x238>)
 801520e:	601c      	str	r4, [r3, #0]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 8015210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015214:	4621      	mov	r1, r4
 8015216:	4628      	mov	r0, r5
 8015218:	f004 fdf0 	bl	8019dfc <memset>
	//memset(g_pMp3DmaBuffer, 0, MP3_DMA_BUFFER_SIZE);
	g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 801521c:	4b81      	ldr	r3, [pc, #516]	; (8015424 <PlayMp3File+0x23c>)
 801521e:	4a82      	ldr	r2, [pc, #520]	; (8015428 <PlayMp3File+0x240>)
 8015220:	601a      	str	r2, [r3, #0]
	unInDataLeft = 0;
 8015222:	4b82      	ldr	r3, [pc, #520]	; (801542c <PlayMp3File+0x244>)
 8015224:	601c      	str	r4, [r3, #0]
	unDmaBufferSpace = 0;
 8015226:	4b82      	ldr	r3, [pc, #520]	; (8015430 <PlayMp3File+0x248>)
 8015228:	601c      	str	r4, [r3, #0]
	unFramesDecoded = 0;
 801522a:	4b82      	ldr	r3, [pc, #520]	; (8015434 <PlayMp3File+0x24c>)
 801522c:	601c      	str	r4, [r3, #0]
	nDecodeRes = ERR_MP3_INDATA_UNDERFLOW;
 801522e:	4b82      	ldr	r3, [pc, #520]	; (8015438 <PlayMp3File+0x250>)
 8015230:	f04f 32ff 	mov.w	r2, #4294967295
 8015234:	601a      	str	r2, [r3, #0]
	unDmaBufMode = 0;
 8015236:	4b81      	ldr	r3, [pc, #516]	; (801543c <PlayMp3File+0x254>)
 8015238:	601c      	str	r4, [r3, #0]
 801523a:	e034      	b.n	80152a6 <PlayMp3File+0xbe>
	do {
		// fill the whole buffer for the first time
		if(unInDataLeft < (2 * MAINBUF_SIZE)) {
			UINT unRead = Mp3FillReadBuffer(pInData, unInDataLeft, &MyFile);
 801523c:	4c80      	ldr	r4, [pc, #512]	; (8015440 <PlayMp3File+0x258>)
 801523e:	4a77      	ldr	r2, [pc, #476]	; (801541c <PlayMp3File+0x234>)
 8015240:	6820      	ldr	r0, [r4, #0]
 8015242:	f001 fc97 	bl	8016b74 <Mp3FillReadBuffer>
			unInDataLeft += unRead;
 8015246:	4a79      	ldr	r2, [pc, #484]	; (801542c <PlayMp3File+0x244>)
 8015248:	6813      	ldr	r3, [r2, #0]
 801524a:	4403      	add	r3, r0
 801524c:	6013      	str	r3, [r2, #0]
			pInData = BufferCtl.buff;
 801524e:	4b71      	ldr	r3, [pc, #452]	; (8015414 <PlayMp3File+0x22c>)
 8015250:	6023      	str	r3, [r4, #0]
 8015252:	e02e      	b.n	80152b2 <PlayMp3File+0xca>
			unInDataLeft = 0;
			//bOutOfData = 1;
			//break;
		}
		else {
			pInData += nOffset;
 8015254:	497a      	ldr	r1, [pc, #488]	; (8015440 <PlayMp3File+0x258>)
 8015256:	680b      	ldr	r3, [r1, #0]
 8015258:	4423      	add	r3, r4
 801525a:	600b      	str	r3, [r1, #0]
			unInDataLeft -= nOffset;
 801525c:	4a73      	ldr	r2, [pc, #460]	; (801542c <PlayMp3File+0x244>)
 801525e:	6813      	ldr	r3, [r2, #0]
 8015260:	1b1b      	subs	r3, r3, r4
 8015262:	6013      	str	r3, [r2, #0]
			// decode one MP3 frame - if offset < 0 then bytesLeft was less than a full frame
			nDecodeRes = MP3Decode(hMP3Decoder, &pInData, (int*)&unInDataLeft, (short*)g_pMp3OutBuffer, 0);
 8015264:	2300      	movs	r3, #0
 8015266:	9300      	str	r3, [sp, #0]
 8015268:	4b76      	ldr	r3, [pc, #472]	; (8015444 <PlayMp3File+0x25c>)
 801526a:	4877      	ldr	r0, [pc, #476]	; (8015448 <PlayMp3File+0x260>)
 801526c:	6800      	ldr	r0, [r0, #0]
 801526e:	f7f7 f8e1 	bl	800c434 <MP3Decode>
 8015272:	4b71      	ldr	r3, [pc, #452]	; (8015438 <PlayMp3File+0x250>)
 8015274:	6018      	str	r0, [r3, #0]
			switch(nDecodeRes) {
 8015276:	f1b0 3fff 	cmp.w	r0, #4294967295
 801527a:	f000 80b8 	beq.w	80153ee <PlayMp3File+0x206>
 801527e:	b320      	cbz	r0, 80152ca <PlayMp3File+0xe2>
 8015280:	f110 0f02 	cmn.w	r0, #2
 8015284:	d00a      	beq.n	801529c <PlayMp3File+0xb4>
				break;
			}
			default:
			{
				// just try to skip the offending frame...
				if(unInDataLeft > 0) {
 8015286:	4b69      	ldr	r3, [pc, #420]	; (801542c <PlayMp3File+0x244>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	2b00      	cmp	r3, #0
 801528c:	dd06      	ble.n	801529c <PlayMp3File+0xb4>
					unInDataLeft-=MP3_BYTES_SKIP;
 801528e:	3b01      	subs	r3, #1
 8015290:	4a66      	ldr	r2, [pc, #408]	; (801542c <PlayMp3File+0x244>)
 8015292:	6013      	str	r3, [r2, #0]
					pInData+=MP3_BYTES_SKIP;
 8015294:	4a6a      	ldr	r2, [pc, #424]	; (8015440 <PlayMp3File+0x258>)
 8015296:	6813      	ldr	r3, [r2, #0]
 8015298:	3301      	adds	r3, #1
 801529a:	6013      	str	r3, [r2, #0]
				break;
			}
			}
		}
	}
	while(!bOutOfData);
 801529c:	4b60      	ldr	r3, [pc, #384]	; (8015420 <PlayMp3File+0x238>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	f040 80ad 	bne.w	8015400 <PlayMp3File+0x218>
		if(unInDataLeft < (2 * MAINBUF_SIZE)) {
 80152a6:	4b61      	ldr	r3, [pc, #388]	; (801542c <PlayMp3File+0x244>)
 80152a8:	6819      	ldr	r1, [r3, #0]
 80152aa:	f640 7327 	movw	r3, #3879	; 0xf27
 80152ae:	4299      	cmp	r1, r3
 80152b0:	ddc4      	ble.n	801523c <PlayMp3File+0x54>
		int nOffset = MP3FindSyncWord(pInData, unInDataLeft);
 80152b2:	4b5e      	ldr	r3, [pc, #376]	; (801542c <PlayMp3File+0x244>)
 80152b4:	6819      	ldr	r1, [r3, #0]
 80152b6:	4b62      	ldr	r3, [pc, #392]	; (8015440 <PlayMp3File+0x258>)
 80152b8:	6818      	ldr	r0, [r3, #0]
 80152ba:	f7f7 f848 	bl	800c34e <MP3FindSyncWord>
		if(nOffset < 0) {
 80152be:	1e04      	subs	r4, r0, #0
 80152c0:	dac8      	bge.n	8015254 <PlayMp3File+0x6c>
			unInDataLeft = 0;
 80152c2:	4b5a      	ldr	r3, [pc, #360]	; (801542c <PlayMp3File+0x244>)
 80152c4:	2200      	movs	r2, #0
 80152c6:	601a      	str	r2, [r3, #0]
 80152c8:	e7e8      	b.n	801529c <PlayMp3File+0xb4>
				MP3GetLastFrameInfo(hMP3Decoder, &mp3FrameInfo);
 80152ca:	4c60      	ldr	r4, [pc, #384]	; (801544c <PlayMp3File+0x264>)
 80152cc:	4621      	mov	r1, r4
 80152ce:	4b5e      	ldr	r3, [pc, #376]	; (8015448 <PlayMp3File+0x260>)
 80152d0:	6818      	ldr	r0, [r3, #0]
 80152d2:	f7f7 f877 	bl	800c3c4 <MP3GetLastFrameInfo>
				unFramesDecoded++;
 80152d6:	4a57      	ldr	r2, [pc, #348]	; (8015434 <PlayMp3File+0x24c>)
 80152d8:	6813      	ldr	r3, [r2, #0]
 80152da:	3301      	adds	r3, #1
 80152dc:	6013      	str	r3, [r2, #0]
				g_pMp3OutBufferPtr = g_pMp3OutBuffer;
 80152de:	4b5c      	ldr	r3, [pc, #368]	; (8015450 <PlayMp3File+0x268>)
 80152e0:	4a58      	ldr	r2, [pc, #352]	; (8015444 <PlayMp3File+0x25c>)
 80152e2:	601a      	str	r2, [r3, #0]
				uint32_t unOutBufferAvail = mp3FrameInfo.outputSamps;
 80152e4:	6926      	ldr	r6, [r4, #16]
				while(unOutBufferAvail > 0) {
 80152e6:	e00e      	b.n	8015306 <PlayMp3File+0x11e>
					else if(unDmaBufMode == 1) {
 80152e8:	4b54      	ldr	r3, [pc, #336]	; (801543c <PlayMp3File+0x254>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d016      	beq.n	801531e <PlayMp3File+0x136>
						unDmaBufferSpace = g_pMp3DmaBuffer + MP3_DMA_BUFFER_SIZE - g_pMp3DmaBufferPtr;
 80152f0:	4b4c      	ldr	r3, [pc, #304]	; (8015424 <PlayMp3File+0x23c>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	4c57      	ldr	r4, [pc, #348]	; (8015454 <PlayMp3File+0x26c>)
 80152f6:	1ae4      	subs	r4, r4, r3
 80152f8:	1064      	asrs	r4, r4, #1
					uint32_t unCopy = unDmaBufferSpace > unOutBufferAvail ? unOutBufferAvail : unDmaBufferSpace;
 80152fa:	4635      	mov	r5, r6
 80152fc:	42a6      	cmp	r6, r4
 80152fe:	bf28      	it	cs
 8015300:	4625      	movcs	r5, r4
					if(unCopy > 0) {
 8015302:	b995      	cbnz	r5, 801532a <PlayMp3File+0x142>
					if(unDmaBufferSpace == 0) {
 8015304:	b33c      	cbz	r4, 8015356 <PlayMp3File+0x16e>
				while(unOutBufferAvail > 0) {
 8015306:	2e00      	cmp	r6, #0
 8015308:	d0c8      	beq.n	801529c <PlayMp3File+0xb4>
					if(unDmaBufMode == 0) {
 801530a:	4b4c      	ldr	r3, [pc, #304]	; (801543c <PlayMp3File+0x254>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d1ea      	bne.n	80152e8 <PlayMp3File+0x100>
						unDmaBufferSpace = g_pMp3DmaBuffer + MP3_DMA_BUFFER_SIZE - g_pMp3DmaBufferPtr;
 8015312:	4b44      	ldr	r3, [pc, #272]	; (8015424 <PlayMp3File+0x23c>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	4c4f      	ldr	r4, [pc, #316]	; (8015454 <PlayMp3File+0x26c>)
 8015318:	1ae4      	subs	r4, r4, r3
 801531a:	1064      	asrs	r4, r4, #1
 801531c:	e7ed      	b.n	80152fa <PlayMp3File+0x112>
						unDmaBufferSpace = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2) - g_pMp3DmaBufferPtr;
 801531e:	4b41      	ldr	r3, [pc, #260]	; (8015424 <PlayMp3File+0x23c>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	4c4d      	ldr	r4, [pc, #308]	; (8015458 <PlayMp3File+0x270>)
 8015324:	1ae4      	subs	r4, r4, r3
 8015326:	1064      	asrs	r4, r4, #1
 8015328:	e7e7      	b.n	80152fa <PlayMp3File+0x112>
						memcpy(g_pMp3DmaBufferPtr, g_pMp3OutBufferPtr, unCopy * sizeof(uint16_t));
 801532a:	ea4f 0845 	mov.w	r8, r5, lsl #1
 801532e:	4f3d      	ldr	r7, [pc, #244]	; (8015424 <PlayMp3File+0x23c>)
 8015330:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8015450 <PlayMp3File+0x268>
 8015334:	4642      	mov	r2, r8
 8015336:	f8d9 1000 	ldr.w	r1, [r9]
 801533a:	6838      	ldr	r0, [r7, #0]
 801533c:	f004 fd36 	bl	8019dac <memcpy>
						unOutBufferAvail -= unCopy;
 8015340:	1b76      	subs	r6, r6, r5
						g_pMp3OutBufferPtr += unCopy;
 8015342:	f8d9 3000 	ldr.w	r3, [r9]
 8015346:	4443      	add	r3, r8
 8015348:	f8c9 3000 	str.w	r3, [r9]
						unDmaBufferSpace -= unCopy;
 801534c:	1b64      	subs	r4, r4, r5
						g_pMp3DmaBufferPtr += unCopy;
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	4443      	add	r3, r8
 8015352:	603b      	str	r3, [r7, #0]
 8015354:	e7d6      	b.n	8015304 <PlayMp3File+0x11c>
						if(unDmaBufMode == 0) {
 8015356:	4b39      	ldr	r3, [pc, #228]	; (801543c <PlayMp3File+0x254>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	bb53      	cbnz	r3, 80153b2 <PlayMp3File+0x1ca>
							if(mp3FrameInfo.samprate > 0) trak.bitrate = mp3FrameInfo.samprate;
 801535c:	4b3b      	ldr	r3, [pc, #236]	; (801544c <PlayMp3File+0x264>)
 801535e:	689b      	ldr	r3, [r3, #8]
 8015360:	2b00      	cmp	r3, #0
 8015362:	dd2b      	ble.n	80153bc <PlayMp3File+0x1d4>
 8015364:	4a3d      	ldr	r2, [pc, #244]	; (801545c <PlayMp3File+0x274>)
 8015366:	8113      	strh	r3, [r2, #8]
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 8015368:	4a3c      	ldr	r2, [pc, #240]	; (801545c <PlayMp3File+0x274>)
 801536a:	8913      	ldrh	r3, [r2, #8]
									*(1 + trak.percent), NULL);
 801536c:	edd2 7a01 	vldr	s15, [r2, #4]
 8015370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015374:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015378:	085b      	lsrs	r3, r3, #1
 801537a:	ee07 3a90 	vmov	s15, r3
 801537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015382:	ee67 7a87 	vmul.f32	s15, s15, s14
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 8015386:	2200      	movs	r2, #0
 8015388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801538c:	ee17 1a90 	vmov	r1, s15
 8015390:	4833      	ldr	r0, [pc, #204]	; (8015460 <PlayMp3File+0x278>)
 8015392:	f001 fb31 	bl	80169f8 <BSP_AUDIO_OUT_ClockConfig>
							BSP_AUDIO_OUT_Play(g_pMp3DmaBuffer, MP3_DMA_BUFFER_SIZE * sizeof(uint16_t));
 8015396:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 801539a:	4823      	ldr	r0, [pc, #140]	; (8015428 <PlayMp3File+0x240>)
 801539c:	f001 fa3e 	bl	801681c <BSP_AUDIO_OUT_Play>
							BSP_AUDIO_OUT_SetVolume(volume);
 80153a0:	4b30      	ldr	r3, [pc, #192]	; (8015464 <PlayMp3File+0x27c>)
 80153a2:	7818      	ldrb	r0, [r3, #0]
 80153a4:	f001 fa84 	bl	80168b0 <BSP_AUDIO_OUT_SetVolume>
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 80153a8:	4b2f      	ldr	r3, [pc, #188]	; (8015468 <PlayMp3File+0x280>)
 80153aa:	f893 3b90 	ldrb.w	r3, [r3, #2960]	; 0xb90
 80153ae:	2b02      	cmp	r3, #2
 80153b0:	d009      	beq.n	80153c6 <PlayMp3File+0x1de>
						while(unDmaBufMode == 0);
 80153b2:	4b22      	ldr	r3, [pc, #136]	; (801543c <PlayMp3File+0x254>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d0fb      	beq.n	80153b2 <PlayMp3File+0x1ca>
 80153ba:	e7a4      	b.n	8015306 <PlayMp3File+0x11e>
							else trak.bitrate = AUDIO_FREQUENCY_44K;
 80153bc:	4b27      	ldr	r3, [pc, #156]	; (801545c <PlayMp3File+0x274>)
 80153be:	f64a 4244 	movw	r2, #44100	; 0xac44
 80153c2:	811a      	strh	r2, [r3, #8]
 80153c4:	e7d0      	b.n	8015368 <PlayMp3File+0x180>
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 80153c6:	4b25      	ldr	r3, [pc, #148]	; (801545c <PlayMp3File+0x274>)
 80153c8:	781b      	ldrb	r3, [r3, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d1f1      	bne.n	80153b2 <PlayMp3File+0x1ca>
								BSP_AUDIO_OUT_Pause();
 80153ce:	f001 fa45 	bl	801685c <BSP_AUDIO_OUT_Pause>
								trak.state = STOPPED;
 80153d2:	4b22      	ldr	r3, [pc, #136]	; (801545c <PlayMp3File+0x274>)
 80153d4:	2201      	movs	r2, #1
 80153d6:	701a      	strb	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim8);
 80153d8:	4824      	ldr	r0, [pc, #144]	; (801546c <PlayMp3File+0x284>)
 80153da:	f7f1 fe3d 	bl	8007058 <HAL_TIM_Base_Start_IT>
								GoToPosition(rekordbox.cue_start_position[0]);
 80153de:	4b22      	ldr	r3, [pc, #136]	; (8015468 <PlayMp3File+0x280>)
 80153e0:	f8d3 080c 	ldr.w	r0, [r3, #2060]	; 0x80c
 80153e4:	f003 fc80 	bl	8018ce8 <GoToPosition>
								TrackTime();
 80153e8:	f003 fc28 	bl	8018c3c <TrackTime>
 80153ec:	e7e1      	b.n	80153b2 <PlayMp3File+0x1ca>
				if(nOffset == 0)
 80153ee:	b91c      	cbnz	r4, 80153f8 <PlayMp3File+0x210>
					bOutOfData = 1;
 80153f0:	4b0b      	ldr	r3, [pc, #44]	; (8015420 <PlayMp3File+0x238>)
 80153f2:	2201      	movs	r2, #1
 80153f4:	601a      	str	r2, [r3, #0]
 80153f6:	e751      	b.n	801529c <PlayMp3File+0xb4>
					unInDataLeft = 0;
 80153f8:	4b0c      	ldr	r3, [pc, #48]	; (801542c <PlayMp3File+0x244>)
 80153fa:	2200      	movs	r2, #0
 80153fc:	601a      	str	r2, [r3, #0]
 80153fe:	e74d      	b.n	801529c <PlayMp3File+0xb4>
	BSP_AUDIO_OUT_SetVolume(0);
 8015400:	2000      	movs	r0, #0
 8015402:	f001 fa55 	bl	80168b0 <BSP_AUDIO_OUT_SetVolume>
	while(unDmaBufMode < 3);
 8015406:	4b0d      	ldr	r3, [pc, #52]	; (801543c <PlayMp3File+0x254>)
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2b02      	cmp	r3, #2
 801540c:	d9fb      	bls.n	8015406 <PlayMp3File+0x21e>
}
 801540e:	b03f      	add	sp, #252	; 0xfc
 8015410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015414:	200007ac 	.word	0x200007ac
 8015418:	200145f0 	.word	0x200145f0
 801541c:	200017b8 	.word	0x200017b8
 8015420:	2000e378 	.word	0x2000e378
 8015424:	200133e8 	.word	0x200133e8
 8015428:	2000ebe8 	.word	0x2000ebe8
 801542c:	2001461c 	.word	0x2001461c
 8015430:	20014614 	.word	0x20014614
 8015434:	20014618 	.word	0x20014618
 8015438:	20014610 	.word	0x20014610
 801543c:	2000ebe4 	.word	0x2000ebe4
 8015440:	20000060 	.word	0x20000060
 8015444:	200133ec 	.word	0x200133ec
 8015448:	2000e604 	.word	0x2000e604
 801544c:	200145f4 	.word	0x200145f4
 8015450:	200145ec 	.word	0x200145ec
 8015454:	200133e8 	.word	0x200133e8
 8015458:	20010fe8 	.word	0x20010fe8
 801545c:	2000ebac 	.word	0x2000ebac
 8015460:	20017228 	.word	0x20017228
 8015464:	2000005c 	.word	0x2000005c
 8015468:	20016620 	.word	0x20016620
 801546c:	20017574 	.word	0x20017574

08015470 <GetLongNumber>:
		if(strcmp(tag, token) == 0) return 0;
	}
	return 1;
}

static int32_t GetLongNumber () {
 8015470:	b508      	push	{r3, lr}
	uint8_t i = 0;
	int32_t out_data = 0;
	for(int i = 0; i < 5; i++) tag[i] = 0;
 8015472:	2300      	movs	r3, #0
 8015474:	e003      	b.n	801547e <GetLongNumber+0xe>
 8015476:	4a0d      	ldr	r2, [pc, #52]	; (80154ac <GetLongNumber+0x3c>)
 8015478:	2100      	movs	r1, #0
 801547a:	54d1      	strb	r1, [r2, r3]
 801547c:	3301      	adds	r3, #1
 801547e:	2b04      	cmp	r3, #4
 8015480:	ddf9      	ble.n	8015476 <GetLongNumber+0x6>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 8015482:	4b0b      	ldr	r3, [pc, #44]	; (80154b0 <GetLongNumber+0x40>)
 8015484:	2204      	movs	r2, #4
 8015486:	4909      	ldr	r1, [pc, #36]	; (80154ac <GetLongNumber+0x3c>)
 8015488:	480a      	ldr	r0, [pc, #40]	; (80154b4 <GetLongNumber+0x44>)
 801548a:	f7f6 fbfc 	bl	800bc86 <f_read>
 801548e:	4603      	mov	r3, r0
 8015490:	2800      	cmp	r0, #0
 8015492:	d1f6      	bne.n	8015482 <GetLongNumber+0x12>
	for(i = 0; i < 4; i++) {
 8015494:	2b03      	cmp	r3, #3
 8015496:	d806      	bhi.n	80154a6 <GetLongNumber+0x36>
		out_data |= tag[i];
 8015498:	4a04      	ldr	r2, [pc, #16]	; (80154ac <GetLongNumber+0x3c>)
 801549a:	5cd2      	ldrb	r2, [r2, r3]
 801549c:	4310      	orrs	r0, r2
		out_data <<= 8;
 801549e:	0200      	lsls	r0, r0, #8
	for(i = 0; i < 4; i++) {
 80154a0:	3301      	adds	r3, #1
 80154a2:	b2db      	uxtb	r3, r3
 80154a4:	e7f6      	b.n	8015494 <GetLongNumber+0x24>
	}
	out_data >>= 8;
	return out_data;
}
 80154a6:	1200      	asrs	r0, r0, #8
 80154a8:	bd08      	pop	{r3, pc}
 80154aa:	bf00      	nop
 80154ac:	200171bc 	.word	0x200171bc
 80154b0:	2000e37c 	.word	0x2000e37c
 80154b4:	200017b8 	.word	0x200017b8

080154b8 <FindToken>:
static uint8_t FindToken (char *token) {
 80154b8:	b538      	push	{r3, r4, r5, lr}
 80154ba:	4604      	mov	r4, r0
	for(int i = 0; i < 5; i++) tag[i] = 0;
 80154bc:	2300      	movs	r3, #0
 80154be:	e003      	b.n	80154c8 <FindToken+0x10>
 80154c0:	4a1c      	ldr	r2, [pc, #112]	; (8015534 <FindToken+0x7c>)
 80154c2:	2100      	movs	r1, #0
 80154c4:	54d1      	strb	r1, [r2, r3]
 80154c6:	3301      	adds	r3, #1
 80154c8:	2b04      	cmp	r3, #4
 80154ca:	ddf9      	ble.n	80154c0 <FindToken+0x8>
 80154cc:	e00f      	b.n	80154ee <FindToken+0x36>
		while(f_read(&MyFile, &tag[1], 3, (void *)&bytesread) != FR_OK);
 80154ce:	4b1a      	ldr	r3, [pc, #104]	; (8015538 <FindToken+0x80>)
 80154d0:	2203      	movs	r2, #3
 80154d2:	491a      	ldr	r1, [pc, #104]	; (801553c <FindToken+0x84>)
 80154d4:	481a      	ldr	r0, [pc, #104]	; (8015540 <FindToken+0x88>)
 80154d6:	f7f6 fbd6 	bl	800bc86 <f_read>
 80154da:	4605      	mov	r5, r0
 80154dc:	2800      	cmp	r0, #0
 80154de:	d1f6      	bne.n	80154ce <FindToken+0x16>
		tag[4] = '\0';
 80154e0:	4814      	ldr	r0, [pc, #80]	; (8015534 <FindToken+0x7c>)
 80154e2:	2300      	movs	r3, #0
 80154e4:	7103      	strb	r3, [r0, #4]
		if(strcmp(tag, token) == 0) return 0;
 80154e6:	4621      	mov	r1, r4
 80154e8:	f7ea fe92 	bl	8000210 <strcmp>
 80154ec:	b1f8      	cbz	r0, 801552e <FindToken+0x76>
	while(f_tell(&MyFile) < f_size(&MyFile)) {
 80154ee:	4b14      	ldr	r3, [pc, #80]	; (8015540 <FindToken+0x88>)
 80154f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80154f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80154f4:	6919      	ldr	r1, [r3, #16]
 80154f6:	695b      	ldr	r3, [r3, #20]
 80154f8:	4288      	cmp	r0, r1
 80154fa:	eb72 0303 	sbcs.w	r3, r2, r3
 80154fe:	d215      	bcs.n	801552c <FindToken+0x74>
		while(f_tell(&MyFile) < f_size(&MyFile)) {
 8015500:	4b0f      	ldr	r3, [pc, #60]	; (8015540 <FindToken+0x88>)
 8015502:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015506:	6919      	ldr	r1, [r3, #16]
 8015508:	695b      	ldr	r3, [r3, #20]
 801550a:	4288      	cmp	r0, r1
 801550c:	eb72 0303 	sbcs.w	r3, r2, r3
 8015510:	d2dd      	bcs.n	80154ce <FindToken+0x16>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 8015512:	4b09      	ldr	r3, [pc, #36]	; (8015538 <FindToken+0x80>)
 8015514:	2201      	movs	r2, #1
 8015516:	4907      	ldr	r1, [pc, #28]	; (8015534 <FindToken+0x7c>)
 8015518:	4809      	ldr	r0, [pc, #36]	; (8015540 <FindToken+0x88>)
 801551a:	f7f6 fbb4 	bl	800bc86 <f_read>
 801551e:	2800      	cmp	r0, #0
 8015520:	d1f7      	bne.n	8015512 <FindToken+0x5a>
			if(tag[0] == 'P') break;
 8015522:	4b04      	ldr	r3, [pc, #16]	; (8015534 <FindToken+0x7c>)
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	2b50      	cmp	r3, #80	; 0x50
 8015528:	d1ea      	bne.n	8015500 <FindToken+0x48>
 801552a:	e7d0      	b.n	80154ce <FindToken+0x16>
	return 1;
 801552c:	2501      	movs	r5, #1
}
 801552e:	4628      	mov	r0, r5
 8015530:	bd38      	pop	{r3, r4, r5, pc}
 8015532:	bf00      	nop
 8015534:	200171bc 	.word	0x200171bc
 8015538:	2000e37c 	.word	0x2000e37c
 801553c:	200171bd 	.word	0x200171bd
 8015540:	200017b8 	.word	0x200017b8

08015544 <DecodeRekordboxFiles>:
	}
	out_data >>= 8;
	return out_data;
}

uint8_t DecodeRekordboxFiles(TCHAR *path) {
 8015544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015548:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 801554c:	4604      	mov	r4, r0
	uint32_t data_size = 0;
	uint8_t k;
	uint32_t i;
	uint8_t res = FR_OK;
	for(i = 0; i < 1000; i++) {
 801554e:	2300      	movs	r3, #0
 8015550:	e00e      	b.n	8015570 <DecodeRekordboxFiles+0x2c>
		rekordbox.bpm[i] = 0;
 8015552:	4a95      	ldr	r2, [pc, #596]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 8015554:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 8015558:	2100      	movs	r1, #0
 801555a:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
		rekordbox.phase[i] = 0;
 801555e:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 8015562:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
		rekordbox.timeindex[i] = 0;
 8015566:	f203 40aa 	addw	r0, r3, #1194	; 0x4aa
 801556a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
	for(i = 0; i < 1000; i++) {
 801556e:	3301      	adds	r3, #1
 8015570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015574:	d3ed      	bcc.n	8015552 <DecodeRekordboxFiles+0xe>
	}
	rekordbox.cues = 0;
 8015576:	2300      	movs	r3, #0
 8015578:	4a8c      	ldr	r2, [pc, #560]	; (80157ac <DecodeRekordboxFiles+0x268>)
 801557a:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
	// Clear SDRAM or fill with some pattern/color
	for(i = 0; i < 1000000; i++) *(__IO uint8_t*)(WAVE_BUFFER+i) = 0;
 801557e:	e003      	b.n	8015588 <DecodeRekordboxFiles+0x44>
 8015580:	4a8b      	ldr	r2, [pc, #556]	; (80157b0 <DecodeRekordboxFiles+0x26c>)
 8015582:	2100      	movs	r1, #0
 8015584:	5499      	strb	r1, [r3, r2]
 8015586:	3301      	adds	r3, #1
 8015588:	4a8a      	ldr	r2, [pc, #552]	; (80157b4 <DecodeRekordboxFiles+0x270>)
 801558a:	4293      	cmp	r3, r2
 801558c:	d9f8      	bls.n	8015580 <DecodeRekordboxFiles+0x3c>
	for(i = 0; i < 255; i++) rekordbox.filename[i] = 0;
 801558e:	2300      	movs	r3, #0
 8015590:	e004      	b.n	801559c <DecodeRekordboxFiles+0x58>
 8015592:	4a85      	ldr	r2, [pc, #532]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 8015594:	2100      	movs	r1, #0
 8015596:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801559a:	3301      	adds	r3, #1
 801559c:	2bfe      	cmp	r3, #254	; 0xfe
 801559e:	d9f8      	bls.n	8015592 <DecodeRekordboxFiles+0x4e>
	char filename[255] = {0};
 80155a0:	2500      	movs	r5, #0
 80155a2:	9580      	str	r5, [sp, #512]	; 0x200
 80155a4:	22fb      	movs	r2, #251	; 0xfb
 80155a6:	4629      	mov	r1, r5
 80155a8:	a881      	add	r0, sp, #516	; 0x204
 80155aa:	f004 fc27 	bl	8019dfc <memset>
	TCHAR my_path[255] = {0};
 80155ae:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 80155b2:	4629      	mov	r1, r5
 80155b4:	4668      	mov	r0, sp
 80155b6:	f004 fc21 	bl	8019dfc <memset>
	wcscpy(my_path, path);
 80155ba:	4621      	mov	r1, r4
 80155bc:	4668      	mov	r0, sp
 80155be:	f004 fd68 	bl	801a092 <wcscpy>
	wcscat(my_path, L"/ANLZ0000.DAT");
 80155c2:	497d      	ldr	r1, [pc, #500]	; (80157b8 <DecodeRekordboxFiles+0x274>)
 80155c4:	4668      	mov	r0, sp
 80155c6:	f004 fd54 	bl	801a072 <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 80155ca:	2201      	movs	r2, #1
 80155cc:	4669      	mov	r1, sp
 80155ce:	487b      	ldr	r0, [pc, #492]	; (80157bc <DecodeRekordboxFiles+0x278>)
 80155d0:	f7f6 faea 	bl	800bba8 <f_open>
	if(res == FR_OK)
 80155d4:	b108      	cbz	r0, 80155da <DecodeRekordboxFiles+0x96>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);

		if(FindToken(cob_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
		rekordbox.cues = GetLongNumber() + 1;
		for(i = 1; i < rekordbox.cues; i++) {
 80155d6:	2300      	movs	r3, #0
 80155d8:	e261      	b.n	8015a9e <DecodeRekordboxFiles+0x55a>
		if(FindToken(path_token) != 0) return 1;
 80155da:	4879      	ldr	r0, [pc, #484]	; (80157c0 <DecodeRekordboxFiles+0x27c>)
 80155dc:	f7ff ff6c 	bl	80154b8 <FindToken>
 80155e0:	2800      	cmp	r0, #0
 80155e2:	f040 8604 	bne.w	80161ee <DecodeRekordboxFiles+0xcaa>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 80155e6:	4b77      	ldr	r3, [pc, #476]	; (80157c4 <DecodeRekordboxFiles+0x280>)
 80155e8:	2208      	movs	r2, #8
 80155ea:	4977      	ldr	r1, [pc, #476]	; (80157c8 <DecodeRekordboxFiles+0x284>)
 80155ec:	4873      	ldr	r0, [pc, #460]	; (80157bc <DecodeRekordboxFiles+0x278>)
 80155ee:	f7f6 fb4a 	bl	800bc86 <f_read>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d1f7      	bne.n	80155e6 <DecodeRekordboxFiles+0xa2>
		data_size = GetLongNumber();
 80155f6:	f7ff ff3b 	bl	8015470 <GetLongNumber>
 80155fa:	4605      	mov	r5, r0
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 80155fc:	4b71      	ldr	r3, [pc, #452]	; (80157c4 <DecodeRekordboxFiles+0x280>)
 80155fe:	462a      	mov	r2, r5
 8015600:	a980      	add	r1, sp, #512	; 0x200
 8015602:	486e      	ldr	r0, [pc, #440]	; (80157bc <DecodeRekordboxFiles+0x278>)
 8015604:	f7f6 fb3f 	bl	800bc86 <f_read>
 8015608:	4606      	mov	r6, r0
 801560a:	2800      	cmp	r0, #0
 801560c:	d1f6      	bne.n	80155fc <DecodeRekordboxFiles+0xb8>
		k = 0;
 801560e:	4607      	mov	r7, r0
		i = 0;
 8015610:	f04f 0800 	mov.w	r8, #0
		while(i < data_size) {
 8015614:	45a8      	cmp	r8, r5
 8015616:	d216      	bcs.n	8015646 <DecodeRekordboxFiles+0x102>
			WCHAR c = filename[i];
 8015618:	f50d 7900 	add.w	r9, sp, #512	; 0x200
 801561c:	f819 3008 	ldrb.w	r3, [r9, r8]
			i++;
 8015620:	f108 0201 	add.w	r2, r8, #1
			c |= filename[i];
 8015624:	f819 0002 	ldrb.w	r0, [r9, r2]
 8015628:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			i++;
 801562c:	f108 0802 	add.w	r8, r8, #2
			rekordbox.filename[k] = c;
 8015630:	4b5d      	ldr	r3, [pc, #372]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 8015632:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
			filename[k] = ff_convert(c, 0);
 8015636:	2100      	movs	r1, #0
 8015638:	f7f6 fe04 	bl	800c244 <ff_convert>
 801563c:	f809 0007 	strb.w	r0, [r9, r7]
			k++;
 8015640:	3701      	adds	r7, #1
 8015642:	b2ff      	uxtb	r7, r7
 8015644:	e7e6      	b.n	8015614 <DecodeRekordboxFiles+0xd0>
		for(i = k; i < data_size; i++) filename[i] = 0;
 8015646:	42af      	cmp	r7, r5
 8015648:	d204      	bcs.n	8015654 <DecodeRekordboxFiles+0x110>
 801564a:	ab80      	add	r3, sp, #512	; 0x200
 801564c:	2200      	movs	r2, #0
 801564e:	55da      	strb	r2, [r3, r7]
 8015650:	3701      	adds	r7, #1
 8015652:	e7f8      	b.n	8015646 <DecodeRekordboxFiles+0x102>
		i = data_size;
 8015654:	462b      	mov	r3, r5
		while((i > 0) && (filename[i] != '.')) i--;
 8015656:	b1ab      	cbz	r3, 8015684 <DecodeRekordboxFiles+0x140>
 8015658:	aa80      	add	r2, sp, #512	; 0x200
 801565a:	5cd2      	ldrb	r2, [r2, r3]
 801565c:	2a2e      	cmp	r2, #46	; 0x2e
 801565e:	d001      	beq.n	8015664 <DecodeRekordboxFiles+0x120>
 8015660:	3b01      	subs	r3, #1
 8015662:	e7f8      	b.n	8015656 <DecodeRekordboxFiles+0x112>
 8015664:	4632      	mov	r2, r6
 8015666:	e000      	b.n	801566a <DecodeRekordboxFiles+0x126>
			i++;
 8015668:	3301      	adds	r3, #1
		while(k < 5)
 801566a:	2a04      	cmp	r2, #4
 801566c:	d80c      	bhi.n	8015688 <DecodeRekordboxFiles+0x144>
			if(filename[i] >= 32) {
 801566e:	a980      	add	r1, sp, #512	; 0x200
 8015670:	5cc9      	ldrb	r1, [r1, r3]
 8015672:	291f      	cmp	r1, #31
 8015674:	d9f8      	bls.n	8015668 <DecodeRekordboxFiles+0x124>
				rekordbox.filetype[k] = filename[i];
 8015676:	484c      	ldr	r0, [pc, #304]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 8015678:	4410      	add	r0, r2
 801567a:	f880 12fd 	strb.w	r1, [r0, #765]	; 0x2fd
				k++;
 801567e:	3201      	adds	r2, #1
 8015680:	b2d2      	uxtb	r2, r2
 8015682:	e7f1      	b.n	8015668 <DecodeRekordboxFiles+0x124>
 8015684:	4632      	mov	r2, r6
 8015686:	e7f0      	b.n	801566a <DecodeRekordboxFiles+0x126>
		rekordbox.filetype[4] = 0;
 8015688:	2300      	movs	r3, #0
 801568a:	4a47      	ldr	r2, [pc, #284]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 801568c:	f882 3301 	strb.w	r3, [r2, #769]	; 0x301
		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 8015690:	e005      	b.n	801569e <DecodeRekordboxFiles+0x15a>
 8015692:	4a45      	ldr	r2, [pc, #276]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 8015694:	441a      	add	r2, r3
 8015696:	2100      	movs	r1, #0
 8015698:	f882 11fe 	strb.w	r1, [r2, #510]	; 0x1fe
 801569c:	3301      	adds	r3, #1
 801569e:	2bfe      	cmp	r3, #254	; 0xfe
 80156a0:	d9f7      	bls.n	8015692 <DecodeRekordboxFiles+0x14e>
		i = data_size;
 80156a2:	462b      	mov	r3, r5
 80156a4:	e000      	b.n	80156a8 <DecodeRekordboxFiles+0x164>
		while((i > 0) && (filename[i] != '/')) i--;
 80156a6:	3b01      	subs	r3, #1
 80156a8:	b11b      	cbz	r3, 80156b2 <DecodeRekordboxFiles+0x16e>
 80156aa:	aa80      	add	r2, sp, #512	; 0x200
 80156ac:	5cd2      	ldrb	r2, [r2, r3]
 80156ae:	2a2f      	cmp	r2, #47	; 0x2f
 80156b0:	d1f9      	bne.n	80156a6 <DecodeRekordboxFiles+0x162>
		i++;
 80156b2:	3301      	adds	r3, #1
		while(i < data_size)
 80156b4:	e000      	b.n	80156b8 <DecodeRekordboxFiles+0x174>
			i++;
 80156b6:	3301      	adds	r3, #1
		while(i < data_size)
 80156b8:	42ab      	cmp	r3, r5
 80156ba:	d20a      	bcs.n	80156d2 <DecodeRekordboxFiles+0x18e>
			if(filename[i] >= 32) {
 80156bc:	aa80      	add	r2, sp, #512	; 0x200
 80156be:	5cd2      	ldrb	r2, [r2, r3]
 80156c0:	2a1f      	cmp	r2, #31
 80156c2:	d9f8      	bls.n	80156b6 <DecodeRekordboxFiles+0x172>
				rekordbox.file[k] = filename[i];
 80156c4:	4938      	ldr	r1, [pc, #224]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 80156c6:	4431      	add	r1, r6
 80156c8:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
				k++;
 80156cc:	3601      	adds	r6, #1
 80156ce:	b2f6      	uxtb	r6, r6
 80156d0:	e7f1      	b.n	80156b6 <DecodeRekordboxFiles+0x172>
		rekordbox.file[i] = 0;
 80156d2:	4a35      	ldr	r2, [pc, #212]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 80156d4:	4413      	add	r3, r2
 80156d6:	2200      	movs	r2, #0
 80156d8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		if(FindToken(qtz_token) != 0) return 1;
 80156dc:	483b      	ldr	r0, [pc, #236]	; (80157cc <DecodeRekordboxFiles+0x288>)
 80156de:	f7ff feeb 	bl	80154b8 <FindToken>
 80156e2:	2800      	cmp	r0, #0
 80156e4:	f040 8585 	bne.w	80161f2 <DecodeRekordboxFiles+0xcae>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 16 bytes
 80156e8:	4b36      	ldr	r3, [pc, #216]	; (80157c4 <DecodeRekordboxFiles+0x280>)
 80156ea:	2210      	movs	r2, #16
 80156ec:	4936      	ldr	r1, [pc, #216]	; (80157c8 <DecodeRekordboxFiles+0x284>)
 80156ee:	4833      	ldr	r0, [pc, #204]	; (80157bc <DecodeRekordboxFiles+0x278>)
 80156f0:	f7f6 fac9 	bl	800bc86 <f_read>
 80156f4:	4607      	mov	r7, r0
 80156f6:	2800      	cmp	r0, #0
 80156f8:	d1f6      	bne.n	80156e8 <DecodeRekordboxFiles+0x1a4>
		data_size = GetLongNumber();
 80156fa:	f7ff feb9 	bl	8015470 <GetLongNumber>
		rekordbox.timezones = data_size;
 80156fe:	4b2a      	ldr	r3, [pc, #168]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 8015700:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
		for(i=0; i<rekordbox.timezones; i++) {
 8015704:	2600      	movs	r6, #0
 8015706:	e048      	b.n	801579a <DecodeRekordboxFiles+0x256>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 8015708:	4b2e      	ldr	r3, [pc, #184]	; (80157c4 <DecodeRekordboxFiles+0x280>)
 801570a:	2201      	movs	r2, #1
 801570c:	4930      	ldr	r1, [pc, #192]	; (80157d0 <DecodeRekordboxFiles+0x28c>)
 801570e:	4429      	add	r1, r5
 8015710:	482a      	ldr	r0, [pc, #168]	; (80157bc <DecodeRekordboxFiles+0x278>)
 8015712:	f7f6 fab8 	bl	800bc86 <f_read>
 8015716:	2800      	cmp	r0, #0
 8015718:	d1f6      	bne.n	8015708 <DecodeRekordboxFiles+0x1c4>
			for(k=0; k<2; k++) {
 801571a:	3501      	adds	r5, #1
 801571c:	b2ed      	uxtb	r5, r5
 801571e:	2d01      	cmp	r5, #1
 8015720:	d9f2      	bls.n	8015708 <DecodeRekordboxFiles+0x1c4>
			rekordbox.phase[i] |= tag[0];
 8015722:	482b      	ldr	r0, [pc, #172]	; (80157d0 <DecodeRekordboxFiles+0x28c>)
 8015724:	7803      	ldrb	r3, [r0, #0]
 8015726:	4a20      	ldr	r2, [pc, #128]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 8015728:	f206 516c 	addw	r1, r6, #1388	; 0x56c
 801572c:	f832 5011 	ldrh.w	r5, [r2, r1, lsl #1]
 8015730:	432b      	orrs	r3, r5
 8015732:	b29b      	uxth	r3, r3
 8015734:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			rekordbox.phase[i] <<= 8;
 8015738:	021b      	lsls	r3, r3, #8
 801573a:	b29b      	uxth	r3, r3
 801573c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			rekordbox.phase[i] |= tag[1];
 8015740:	7840      	ldrb	r0, [r0, #1]
 8015742:	4303      	orrs	r3, r0
 8015744:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			for(k=0; k<2; k++) {
 8015748:	463d      	mov	r5, r7
 801574a:	e00a      	b.n	8015762 <DecodeRekordboxFiles+0x21e>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 801574c:	4b1d      	ldr	r3, [pc, #116]	; (80157c4 <DecodeRekordboxFiles+0x280>)
 801574e:	2201      	movs	r2, #1
 8015750:	491f      	ldr	r1, [pc, #124]	; (80157d0 <DecodeRekordboxFiles+0x28c>)
 8015752:	4429      	add	r1, r5
 8015754:	4819      	ldr	r0, [pc, #100]	; (80157bc <DecodeRekordboxFiles+0x278>)
 8015756:	f7f6 fa96 	bl	800bc86 <f_read>
 801575a:	2800      	cmp	r0, #0
 801575c:	d1f6      	bne.n	801574c <DecodeRekordboxFiles+0x208>
			for(k=0; k<2; k++) {
 801575e:	3501      	adds	r5, #1
 8015760:	b2ed      	uxtb	r5, r5
 8015762:	2d01      	cmp	r5, #1
 8015764:	d9f2      	bls.n	801574c <DecodeRekordboxFiles+0x208>
			rekordbox.bpm[i] |= tag[0];
 8015766:	491a      	ldr	r1, [pc, #104]	; (80157d0 <DecodeRekordboxFiles+0x28c>)
 8015768:	780b      	ldrb	r3, [r1, #0]
 801576a:	4d0f      	ldr	r5, [pc, #60]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 801576c:	f506 72c2 	add.w	r2, r6, #388	; 0x184
 8015770:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 8015774:	4303      	orrs	r3, r0
 8015776:	b29b      	uxth	r3, r3
 8015778:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.bpm[i] <<= 8;
 801577c:	021b      	lsls	r3, r3, #8
 801577e:	b29b      	uxth	r3, r3
 8015780:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.bpm[i] |= tag[1];
 8015784:	7849      	ldrb	r1, [r1, #1]
 8015786:	430b      	orrs	r3, r1
 8015788:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.timeindex[i] = GetLongNumber();
 801578c:	f7ff fe70 	bl	8015470 <GetLongNumber>
 8015790:	f206 43aa 	addw	r3, r6, #1194	; 0x4aa
 8015794:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
		for(i=0; i<rekordbox.timezones; i++) {
 8015798:	3601      	adds	r6, #1
 801579a:	4b03      	ldr	r3, [pc, #12]	; (80157a8 <DecodeRekordboxFiles+0x264>)
 801579c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80157a0:	42b3      	cmp	r3, r6
 80157a2:	d917      	bls.n	80157d4 <DecodeRekordboxFiles+0x290>
			for(k=0; k<2; k++) {
 80157a4:	463d      	mov	r5, r7
 80157a6:	e7ba      	b.n	801571e <DecodeRekordboxFiles+0x1da>
 80157a8:	20014620 	.word	0x20014620
 80157ac:	20016620 	.word	0x20016620
 80157b0:	c00ff000 	.word	0xc00ff000
 80157b4:	000f423f 	.word	0x000f423f
 80157b8:	0801f79c 	.word	0x0801f79c
 80157bc:	200017b8 	.word	0x200017b8
 80157c0:	20000074 	.word	0x20000074
 80157c4:	2000e37c 	.word	0x2000e37c
 80157c8:	200007ac 	.word	0x200007ac
 80157cc:	2000007c 	.word	0x2000007c
 80157d0:	200171bc 	.word	0x200171bc
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 80157d4:	4bbb      	ldr	r3, [pc, #748]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 80157d6:	f8b3 3ad8 	ldrh.w	r3, [r3, #2776]	; 0xad8
 80157da:	2b01      	cmp	r3, #1
 80157dc:	d03e      	beq.n	801585c <DecodeRekordboxFiles+0x318>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 80157de:	3b01      	subs	r3, #1
 80157e0:	4ab9      	ldr	r2, [pc, #740]	; (8015ac8 <DecodeRekordboxFiles+0x584>)
 80157e2:	f882 3248 	strb.w	r3, [r2, #584]	; 0x248
		if(FindToken(wave_token) != 0) return 1;
 80157e6:	48b9      	ldr	r0, [pc, #740]	; (8015acc <DecodeRekordboxFiles+0x588>)
 80157e8:	f7ff fe66 	bl	80154b8 <FindToken>
 80157ec:	2800      	cmp	r0, #0
 80157ee:	f040 8502 	bne.w	80161f6 <DecodeRekordboxFiles+0xcb2>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 80157f2:	4bb7      	ldr	r3, [pc, #732]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 80157f4:	2208      	movs	r2, #8
 80157f6:	49b7      	ldr	r1, [pc, #732]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 80157f8:	48b7      	ldr	r0, [pc, #732]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 80157fa:	f7f6 fa44 	bl	800bc86 <f_read>
 80157fe:	2800      	cmp	r0, #0
 8015800:	d1f7      	bne.n	80157f2 <DecodeRekordboxFiles+0x2ae>
		rekordbox.lowp_spectrum_size = GetLongNumber();
 8015802:	f7ff fe35 	bl	8015470 <GetLongNumber>
 8015806:	4bb0      	ldr	r3, [pc, #704]	; (8015ac8 <DecodeRekordboxFiles+0x584>)
 8015808:	f8c3 024c 	str.w	r0, [r3, #588]	; 0x24c
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801580c:	4bb0      	ldr	r3, [pc, #704]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 801580e:	2204      	movs	r2, #4
 8015810:	49b0      	ldr	r1, [pc, #704]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 8015812:	48b1      	ldr	r0, [pc, #708]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 8015814:	f7f6 fa37 	bl	800bc86 <f_read>
 8015818:	2800      	cmp	r0, #0
 801581a:	d1f7      	bne.n	801580c <DecodeRekordboxFiles+0x2c8>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 801581c:	4bac      	ldr	r3, [pc, #688]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 801581e:	4aaa      	ldr	r2, [pc, #680]	; (8015ac8 <DecodeRekordboxFiles+0x584>)
 8015820:	f8d2 224c 	ldr.w	r2, [r2, #588]	; 0x24c
 8015824:	49ad      	ldr	r1, [pc, #692]	; (8015adc <DecodeRekordboxFiles+0x598>)
 8015826:	48ac      	ldr	r0, [pc, #688]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 8015828:	f7f6 fa2d 	bl	800bc86 <f_read>
 801582c:	2800      	cmp	r0, #0
 801582e:	d1f5      	bne.n	801581c <DecodeRekordboxFiles+0x2d8>
		if(FindToken(cob_token) != 0) return 1;
 8015830:	48ab      	ldr	r0, [pc, #684]	; (8015ae0 <DecodeRekordboxFiles+0x59c>)
 8015832:	f7ff fe41 	bl	80154b8 <FindToken>
 8015836:	2800      	cmp	r0, #0
 8015838:	f040 84df 	bne.w	80161fa <DecodeRekordboxFiles+0xcb6>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801583c:	4ba4      	ldr	r3, [pc, #656]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 801583e:	220c      	movs	r2, #12
 8015840:	49a4      	ldr	r1, [pc, #656]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 8015842:	48a5      	ldr	r0, [pc, #660]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 8015844:	f7f6 fa1f 	bl	800bc86 <f_read>
 8015848:	2800      	cmp	r0, #0
 801584a:	d1f7      	bne.n	801583c <DecodeRekordboxFiles+0x2f8>
		rekordbox.cues = GetLongNumber() + 1;
 801584c:	f7ff fe10 	bl	8015470 <GetLongNumber>
 8015850:	3001      	adds	r0, #1
 8015852:	4a9d      	ldr	r2, [pc, #628]	; (8015ac8 <DecodeRekordboxFiles+0x584>)
 8015854:	f8c2 0358 	str.w	r0, [r2, #856]	; 0x358
		for(i = 1; i < rekordbox.cues; i++) {
 8015858:	2501      	movs	r5, #1
 801585a:	e005      	b.n	8015868 <DecodeRekordboxFiles+0x324>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 801585c:	4b9a      	ldr	r3, [pc, #616]	; (8015ac8 <DecodeRekordboxFiles+0x584>)
 801585e:	2204      	movs	r2, #4
 8015860:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8015864:	e7bf      	b.n	80157e6 <DecodeRekordboxFiles+0x2a2>
		for(i = 1; i < rekordbox.cues; i++) {
 8015866:	3501      	adds	r5, #1
 8015868:	4b97      	ldr	r3, [pc, #604]	; (8015ac8 <DecodeRekordboxFiles+0x584>)
 801586a:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 801586e:	42ab      	cmp	r3, r5
 8015870:	d976      	bls.n	8015960 <DecodeRekordboxFiles+0x41c>
			if(FindToken(cue_token) != 0) return 1;
 8015872:	489c      	ldr	r0, [pc, #624]	; (8015ae4 <DecodeRekordboxFiles+0x5a0>)
 8015874:	f7ff fe20 	bl	80154b8 <FindToken>
 8015878:	2800      	cmp	r0, #0
 801587a:	f040 84c0 	bne.w	80161fe <DecodeRekordboxFiles+0xcba>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801587e:	4b94      	ldr	r3, [pc, #592]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 8015880:	2208      	movs	r2, #8
 8015882:	4994      	ldr	r1, [pc, #592]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 8015884:	4894      	ldr	r0, [pc, #592]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 8015886:	f7f6 f9fe 	bl	800bc86 <f_read>
 801588a:	2800      	cmp	r0, #0
 801588c:	d1f7      	bne.n	801587e <DecodeRekordboxFiles+0x33a>
			rekordbox.cue_number[i] = GetLongNumber();
 801588e:	f7ff fdef 	bl	8015470 <GetLongNumber>
 8015892:	4e8c      	ldr	r6, [pc, #560]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 8015894:	f605 03d6 	addw	r3, r5, #2262	; 0x8d6
 8015898:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801589c:	6058      	str	r0, [r3, #4]
			rekordbox.cue_active[i] = GetLongNumber();
 801589e:	f7ff fde7 	bl	8015470 <GetLongNumber>
 80158a2:	f605 133a 	addw	r3, r5, #2362	; 0x93a
 80158a6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80158aa:	6070      	str	r0, [r6, #4]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 80158ac:	4b88      	ldr	r3, [pc, #544]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 80158ae:	2204      	movs	r2, #4
 80158b0:	4988      	ldr	r1, [pc, #544]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 80158b2:	4889      	ldr	r0, [pc, #548]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 80158b4:	f7f6 f9e7 	bl	800bc86 <f_read>
 80158b8:	2800      	cmp	r0, #0
 80158ba:	d1f7      	bne.n	80158ac <DecodeRekordboxFiles+0x368>
			rekordbox.cue_type[i] = GetLongNumber();
 80158bc:	f7ff fdd8 	bl	8015470 <GetLongNumber>
 80158c0:	f605 129e 	addw	r2, r5, #2462	; 0x99e
 80158c4:	4b7f      	ldr	r3, [pc, #508]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 80158c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80158ca:	6058      	str	r0, [r3, #4]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 80158cc:	f642 3128 	movw	r1, #11048	; 0x2b28
 80158d0:	4429      	add	r1, r5
 80158d2:	4b7c      	ldr	r3, [pc, #496]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 80158d4:	4419      	add	r1, r3
 80158d6:	4b7e      	ldr	r3, [pc, #504]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 80158d8:	2201      	movs	r2, #1
 80158da:	3104      	adds	r1, #4
 80158dc:	487e      	ldr	r0, [pc, #504]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 80158de:	f7f6 f9d2 	bl	800bc86 <f_read>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	d1f2      	bne.n	80158cc <DecodeRekordboxFiles+0x388>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 80158e6:	4b7a      	ldr	r3, [pc, #488]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 80158e8:	2203      	movs	r2, #3
 80158ea:	497a      	ldr	r1, [pc, #488]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 80158ec:	487a      	ldr	r0, [pc, #488]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 80158ee:	f7f6 f9ca 	bl	800bc86 <f_read>
 80158f2:	2800      	cmp	r0, #0
 80158f4:	d1f7      	bne.n	80158e6 <DecodeRekordboxFiles+0x3a2>
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 80158f6:	f7ff fdbb 	bl	8015470 <GetLongNumber>
 80158fa:	ee07 0a90 	vmov	s15, r0
 80158fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015902:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8015ae8 <DecodeRekordboxFiles+0x5a4>
 8015906:	ee67 7a87 	vmul.f32	s15, s15, s14
 801590a:	eddf 6a78 	vldr	s13, [pc, #480]	; 8015aec <DecodeRekordboxFiles+0x5a8>
 801590e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015912:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015916:	4b6b      	ldr	r3, [pc, #428]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 8015918:	f605 2202 	addw	r2, r5, #2562	; 0xa02
 801591c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015920:	ed82 7a01 	vstr	s14, [r2, #4]
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8015924:	442b      	add	r3, r5
 8015926:	f642 322c 	movw	r2, #11052	; 0x2b2c
 801592a:	5c9b      	ldrb	r3, [r3, r2]
 801592c:	2b02      	cmp	r3, #2
 801592e:	d19a      	bne.n	8015866 <DecodeRekordboxFiles+0x322>
 8015930:	f7ff fd9e 	bl	8015470 <GetLongNumber>
 8015934:	ee07 0a90 	vmov	s15, r0
 8015938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801593c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8015ae8 <DecodeRekordboxFiles+0x5a4>
 8015940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015944:	eddf 6a69 	vldr	s13, [pc, #420]	; 8015aec <DecodeRekordboxFiles+0x5a8>
 8015948:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801594c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015950:	f605 2266 	addw	r2, r5, #2662	; 0xa66
 8015954:	4b5b      	ldr	r3, [pc, #364]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 8015956:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801595a:	ed83 7a01 	vstr	s14, [r3, #4]
 801595e:	e782      	b.n	8015866 <DecodeRekordboxFiles+0x322>
		}
		if(FindToken(cob_token) != 0) return 1;
 8015960:	485f      	ldr	r0, [pc, #380]	; (8015ae0 <DecodeRekordboxFiles+0x59c>)
 8015962:	f7ff fda9 	bl	80154b8 <FindToken>
 8015966:	2800      	cmp	r0, #0
 8015968:	f040 844b 	bne.w	8016202 <DecodeRekordboxFiles+0xcbe>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801596c:	4b58      	ldr	r3, [pc, #352]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 801596e:	220c      	movs	r2, #12
 8015970:	4958      	ldr	r1, [pc, #352]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 8015972:	4859      	ldr	r0, [pc, #356]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 8015974:	f7f6 f987 	bl	800bc86 <f_read>
 8015978:	2800      	cmp	r0, #0
 801597a:	d1f7      	bne.n	801596c <DecodeRekordboxFiles+0x428>
		rekordbox.cues += GetLongNumber();
 801597c:	f7ff fd78 	bl	8015470 <GetLongNumber>
 8015980:	4a51      	ldr	r2, [pc, #324]	; (8015ac8 <DecodeRekordboxFiles+0x584>)
 8015982:	f8d2 3358 	ldr.w	r3, [r2, #856]	; 0x358
 8015986:	4403      	add	r3, r0
 8015988:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
		k = i;
 801598c:	b2ed      	uxtb	r5, r5
		for(k = i; k < rekordbox.cues; k++) {
 801598e:	e001      	b.n	8015994 <DecodeRekordboxFiles+0x450>
 8015990:	3501      	adds	r5, #1
 8015992:	b2ed      	uxtb	r5, r5
 8015994:	462e      	mov	r6, r5
 8015996:	4b4c      	ldr	r3, [pc, #304]	; (8015ac8 <DecodeRekordboxFiles+0x584>)
 8015998:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 801599c:	429d      	cmp	r5, r3
 801599e:	da76      	bge.n	8015a8e <DecodeRekordboxFiles+0x54a>
			if(FindToken(cue_token) != 0) return 1;
 80159a0:	4850      	ldr	r0, [pc, #320]	; (8015ae4 <DecodeRekordboxFiles+0x5a0>)
 80159a2:	f7ff fd89 	bl	80154b8 <FindToken>
 80159a6:	2800      	cmp	r0, #0
 80159a8:	f040 842d 	bne.w	8016206 <DecodeRekordboxFiles+0xcc2>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 80159ac:	4b48      	ldr	r3, [pc, #288]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 80159ae:	2208      	movs	r2, #8
 80159b0:	4948      	ldr	r1, [pc, #288]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 80159b2:	4849      	ldr	r0, [pc, #292]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 80159b4:	f7f6 f967 	bl	800bc86 <f_read>
 80159b8:	2800      	cmp	r0, #0
 80159ba:	d1f7      	bne.n	80159ac <DecodeRekordboxFiles+0x468>
			rekordbox.cue_number[k] = GetLongNumber();
 80159bc:	f7ff fd58 	bl	8015470 <GetLongNumber>
 80159c0:	4f40      	ldr	r7, [pc, #256]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 80159c2:	f606 03d6 	addw	r3, r6, #2262	; 0x8d6
 80159c6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80159ca:	6058      	str	r0, [r3, #4]
			rekordbox.cue_active[k] = GetLongNumber();
 80159cc:	f7ff fd50 	bl	8015470 <GetLongNumber>
 80159d0:	f606 133a 	addw	r3, r6, #2362	; 0x93a
 80159d4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80159d8:	6078      	str	r0, [r7, #4]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 80159da:	4b3d      	ldr	r3, [pc, #244]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 80159dc:	2204      	movs	r2, #4
 80159de:	493d      	ldr	r1, [pc, #244]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 80159e0:	483d      	ldr	r0, [pc, #244]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 80159e2:	f7f6 f950 	bl	800bc86 <f_read>
 80159e6:	2800      	cmp	r0, #0
 80159e8:	d1f7      	bne.n	80159da <DecodeRekordboxFiles+0x496>
			rekordbox.cue_type[k] = GetLongNumber();
 80159ea:	f7ff fd41 	bl	8015470 <GetLongNumber>
 80159ee:	f606 129e 	addw	r2, r6, #2462	; 0x99e
 80159f2:	4b34      	ldr	r3, [pc, #208]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 80159f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80159f8:	6058      	str	r0, [r3, #4]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 80159fa:	f642 3128 	movw	r1, #11048	; 0x2b28
 80159fe:	4431      	add	r1, r6
 8015a00:	4b30      	ldr	r3, [pc, #192]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 8015a02:	4419      	add	r1, r3
 8015a04:	4b32      	ldr	r3, [pc, #200]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 8015a06:	2201      	movs	r2, #1
 8015a08:	3104      	adds	r1, #4
 8015a0a:	4833      	ldr	r0, [pc, #204]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 8015a0c:	f7f6 f93b 	bl	800bc86 <f_read>
 8015a10:	2800      	cmp	r0, #0
 8015a12:	d1f2      	bne.n	80159fa <DecodeRekordboxFiles+0x4b6>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 8015a14:	4b2e      	ldr	r3, [pc, #184]	; (8015ad0 <DecodeRekordboxFiles+0x58c>)
 8015a16:	2203      	movs	r2, #3
 8015a18:	492e      	ldr	r1, [pc, #184]	; (8015ad4 <DecodeRekordboxFiles+0x590>)
 8015a1a:	482f      	ldr	r0, [pc, #188]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 8015a1c:	f7f6 f933 	bl	800bc86 <f_read>
 8015a20:	2800      	cmp	r0, #0
 8015a22:	d1f7      	bne.n	8015a14 <DecodeRekordboxFiles+0x4d0>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 8015a24:	f7ff fd24 	bl	8015470 <GetLongNumber>
 8015a28:	ee07 0a90 	vmov	s15, r0
 8015a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a30:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8015ae8 <DecodeRekordboxFiles+0x5a4>
 8015a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015a38:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8015aec <DecodeRekordboxFiles+0x5a8>
 8015a3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015a40:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015a44:	4b1f      	ldr	r3, [pc, #124]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 8015a46:	f606 2202 	addw	r2, r6, #2562	; 0xa02
 8015a4a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015a4e:	ed82 7a01 	vstr	s14, [r2, #4]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 8015a52:	4433      	add	r3, r6
 8015a54:	f642 322c 	movw	r2, #11052	; 0x2b2c
 8015a58:	5c9b      	ldrb	r3, [r3, r2]
 8015a5a:	2b02      	cmp	r3, #2
 8015a5c:	d198      	bne.n	8015990 <DecodeRekordboxFiles+0x44c>
 8015a5e:	f7ff fd07 	bl	8015470 <GetLongNumber>
 8015a62:	ee07 0a90 	vmov	s15, r0
 8015a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a6a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8015ae8 <DecodeRekordboxFiles+0x5a4>
 8015a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015a72:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8015aec <DecodeRekordboxFiles+0x5a8>
 8015a76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015a7a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015a7e:	f606 2666 	addw	r6, r6, #2662	; 0xa66
 8015a82:	4b10      	ldr	r3, [pc, #64]	; (8015ac4 <DecodeRekordboxFiles+0x580>)
 8015a84:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8015a88:	ed83 7a01 	vstr	s14, [r3, #4]
 8015a8c:	e780      	b.n	8015990 <DecodeRekordboxFiles+0x44c>
		}
		f_close(&MyFile);
 8015a8e:	4812      	ldr	r0, [pc, #72]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 8015a90:	f7f6 f9c0 	bl	800be14 <f_close>
 8015a94:	e59f      	b.n	80155d6 <DecodeRekordboxFiles+0x92>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 8015a96:	2200      	movs	r2, #0
 8015a98:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	2bfe      	cmp	r3, #254	; 0xfe
 8015aa0:	d9f9      	bls.n	8015a96 <DecodeRekordboxFiles+0x552>
	wcscpy(my_path, path);
 8015aa2:	4621      	mov	r1, r4
 8015aa4:	4668      	mov	r0, sp
 8015aa6:	f004 faf4 	bl	801a092 <wcscpy>
	wcscat(my_path, L"/ANLZ0000.EXT");
 8015aaa:	4911      	ldr	r1, [pc, #68]	; (8015af0 <DecodeRekordboxFiles+0x5ac>)
 8015aac:	4668      	mov	r0, sp
 8015aae:	f004 fae0 	bl	801a072 <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	4669      	mov	r1, sp
 8015ab6:	4808      	ldr	r0, [pc, #32]	; (8015ad8 <DecodeRekordboxFiles+0x594>)
 8015ab8:	f7f6 f876 	bl	800bba8 <f_open>
	if(res == FR_OK) {
 8015abc:	b1d0      	cbz	r0, 8015af4 <DecodeRekordboxFiles+0x5b0>
		if(FindToken(wv3_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
		rekordbox.spectrum_size = GetLongNumber();
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
		rekordbox.cue_start_position[0] = 0;
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 8015abe:	2300      	movs	r3, #0
 8015ac0:	e06a      	b.n	8015b98 <DecodeRekordboxFiles+0x654>
 8015ac2:	bf00      	nop
 8015ac4:	20014620 	.word	0x20014620
 8015ac8:	20016620 	.word	0x20016620
 8015acc:	20000084 	.word	0x20000084
 8015ad0:	2000e37c 	.word	0x2000e37c
 8015ad4:	200007ac 	.word	0x200007ac
 8015ad8:	200017b8 	.word	0x200017b8
 8015adc:	2000e608 	.word	0x2000e608
 8015ae0:	20000064 	.word	0x20000064
 8015ae4:	2000006c 	.word	0x2000006c
 8015ae8:	43160000 	.word	0x43160000
 8015aec:	447a0000 	.word	0x447a0000
 8015af0:	0801f7d4 	.word	0x0801f7d4
		if(FindToken(wv3_token) != 0) return 1;
 8015af4:	48a5      	ldr	r0, [pc, #660]	; (8015d8c <DecodeRekordboxFiles+0x848>)
 8015af6:	f7ff fcdf 	bl	80154b8 <FindToken>
 8015afa:	2800      	cmp	r0, #0
 8015afc:	f040 8385 	bne.w	801620a <DecodeRekordboxFiles+0xcc6>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 8015b00:	4ba3      	ldr	r3, [pc, #652]	; (8015d90 <DecodeRekordboxFiles+0x84c>)
 8015b02:	220c      	movs	r2, #12
 8015b04:	49a3      	ldr	r1, [pc, #652]	; (8015d94 <DecodeRekordboxFiles+0x850>)
 8015b06:	48a4      	ldr	r0, [pc, #656]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015b08:	f7f6 f8bd 	bl	800bc86 <f_read>
 8015b0c:	2800      	cmp	r0, #0
 8015b0e:	d1f7      	bne.n	8015b00 <DecodeRekordboxFiles+0x5bc>
		rekordbox.spectrum_size = GetLongNumber();
 8015b10:	f7ff fcae 	bl	8015470 <GetLongNumber>
 8015b14:	4ba1      	ldr	r3, [pc, #644]	; (8015d9c <DecodeRekordboxFiles+0x858>)
 8015b16:	f8c3 0250 	str.w	r0, [r3, #592]	; 0x250
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8015b1a:	4b9d      	ldr	r3, [pc, #628]	; (8015d90 <DecodeRekordboxFiles+0x84c>)
 8015b1c:	2204      	movs	r2, #4
 8015b1e:	499d      	ldr	r1, [pc, #628]	; (8015d94 <DecodeRekordboxFiles+0x850>)
 8015b20:	489d      	ldr	r0, [pc, #628]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015b22:	f7f6 f8b0 	bl	800bc86 <f_read>
 8015b26:	2800      	cmp	r0, #0
 8015b28:	d1f7      	bne.n	8015b1a <DecodeRekordboxFiles+0x5d6>
		rekordbox.cue_start_position[0] = 0;
 8015b2a:	2500      	movs	r5, #0
 8015b2c:	4b9b      	ldr	r3, [pc, #620]	; (8015d9c <DecodeRekordboxFiles+0x858>)
 8015b2e:	f8c3 580c 	str.w	r5, [r3, #2060]	; 0x80c
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 8015b32:	e000      	b.n	8015b36 <DecodeRekordboxFiles+0x5f2>
 8015b34:	3501      	adds	r5, #1
 8015b36:	4b99      	ldr	r3, [pc, #612]	; (8015d9c <DecodeRekordboxFiles+0x858>)
 8015b38:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8015b3c:	42ab      	cmp	r3, r5
 8015b3e:	d923      	bls.n	8015b88 <DecodeRekordboxFiles+0x644>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 8015b40:	4b93      	ldr	r3, [pc, #588]	; (8015d90 <DecodeRekordboxFiles+0x84c>)
 8015b42:	2201      	movs	r2, #1
 8015b44:	4996      	ldr	r1, [pc, #600]	; (8015da0 <DecodeRekordboxFiles+0x85c>)
 8015b46:	4894      	ldr	r0, [pc, #592]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015b48:	f7f6 f89d 	bl	800bc86 <f_read>
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	d1f7      	bne.n	8015b40 <DecodeRekordboxFiles+0x5fc>
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 8015b50:	4b93      	ldr	r3, [pc, #588]	; (8015da0 <DecodeRekordboxFiles+0x85c>)
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	4a93      	ldr	r2, [pc, #588]	; (8015da4 <DecodeRekordboxFiles+0x860>)
 8015b56:	54ab      	strb	r3, [r5, r2]
			if(rekordbox.autocue == 1) {
 8015b58:	4a90      	ldr	r2, [pc, #576]	; (8015d9c <DecodeRekordboxFiles+0x858>)
 8015b5a:	f892 2b90 	ldrb.w	r2, [r2, #2960]	; 0xb90
 8015b5e:	2a01      	cmp	r2, #1
 8015b60:	d1e8      	bne.n	8015b34 <DecodeRekordboxFiles+0x5f0>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 8015b62:	4a91      	ldr	r2, [pc, #580]	; (8015da8 <DecodeRekordboxFiles+0x864>)
 8015b64:	7812      	ldrb	r2, [r2, #0]
 8015b66:	4991      	ldr	r1, [pc, #580]	; (8015dac <DecodeRekordboxFiles+0x868>)
 8015b68:	fba1 1202 	umull	r1, r2, r1, r2
 8015b6c:	f003 011f 	and.w	r1, r3, #31
 8015b70:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 8015b74:	d9de      	bls.n	8015b34 <DecodeRekordboxFiles+0x5f0>
 8015b76:	09db      	lsrs	r3, r3, #7
 8015b78:	d1dc      	bne.n	8015b34 <DecodeRekordboxFiles+0x5f0>
					rekordbox.autocue = 2;
 8015b7a:	4b88      	ldr	r3, [pc, #544]	; (8015d9c <DecodeRekordboxFiles+0x858>)
 8015b7c:	2202      	movs	r2, #2
 8015b7e:	f883 2b90 	strb.w	r2, [r3, #2960]	; 0xb90
					rekordbox.cue_start_position[0] = i;
 8015b82:	f8c3 580c 	str.w	r5, [r3, #2060]	; 0x80c
 8015b86:	e7d5      	b.n	8015b34 <DecodeRekordboxFiles+0x5f0>
				}
			}
		}
		f_close(&MyFile);
 8015b88:	4883      	ldr	r0, [pc, #524]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015b8a:	f7f6 f943 	bl	800be14 <f_close>
 8015b8e:	e796      	b.n	8015abe <DecodeRekordboxFiles+0x57a>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 8015b90:	2200      	movs	r2, #0
 8015b92:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
 8015b96:	3301      	adds	r3, #1
 8015b98:	2bfe      	cmp	r3, #254	; 0xfe
 8015b9a:	d9f9      	bls.n	8015b90 <DecodeRekordboxFiles+0x64c>
	wcscpy(my_path, path);
 8015b9c:	4621      	mov	r1, r4
 8015b9e:	4668      	mov	r0, sp
 8015ba0:	f004 fa77 	bl	801a092 <wcscpy>
	wcscat(my_path, L"/ANLZ0001.DAT");
 8015ba4:	4982      	ldr	r1, [pc, #520]	; (8015db0 <DecodeRekordboxFiles+0x86c>)
 8015ba6:	4668      	mov	r0, sp
 8015ba8:	f004 fa63 	bl	801a072 <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8015bac:	2201      	movs	r2, #1
 8015bae:	4669      	mov	r1, sp
 8015bb0:	4879      	ldr	r0, [pc, #484]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015bb2:	f7f5 fff9 	bl	800bba8 <f_open>
	if(res == FR_OK)
 8015bb6:	b108      	cbz	r0, 8015bbc <DecodeRekordboxFiles+0x678>
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
		if(FindToken(cob_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
		rekordbox.cues = GetLongNumber() + 1;
		for(i = 1; i < rekordbox.cues; i++) {
 8015bb8:	2300      	movs	r3, #0
 8015bba:	e266      	b.n	801608a <DecodeRekordboxFiles+0xb46>
		if(FindToken(path_token) != 0) return 1;
 8015bbc:	487d      	ldr	r0, [pc, #500]	; (8015db4 <DecodeRekordboxFiles+0x870>)
 8015bbe:	f7ff fc7b 	bl	80154b8 <FindToken>
 8015bc2:	2800      	cmp	r0, #0
 8015bc4:	f040 8323 	bne.w	801620e <DecodeRekordboxFiles+0xcca>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8015bc8:	4b71      	ldr	r3, [pc, #452]	; (8015d90 <DecodeRekordboxFiles+0x84c>)
 8015bca:	2208      	movs	r2, #8
 8015bcc:	4971      	ldr	r1, [pc, #452]	; (8015d94 <DecodeRekordboxFiles+0x850>)
 8015bce:	4872      	ldr	r0, [pc, #456]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015bd0:	f7f6 f859 	bl	800bc86 <f_read>
 8015bd4:	2800      	cmp	r0, #0
 8015bd6:	d1f7      	bne.n	8015bc8 <DecodeRekordboxFiles+0x684>
		data_size = GetLongNumber();
 8015bd8:	f7ff fc4a 	bl	8015470 <GetLongNumber>
 8015bdc:	4605      	mov	r5, r0
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 8015bde:	4b6c      	ldr	r3, [pc, #432]	; (8015d90 <DecodeRekordboxFiles+0x84c>)
 8015be0:	462a      	mov	r2, r5
 8015be2:	a980      	add	r1, sp, #512	; 0x200
 8015be4:	486c      	ldr	r0, [pc, #432]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015be6:	f7f6 f84e 	bl	800bc86 <f_read>
 8015bea:	4606      	mov	r6, r0
 8015bec:	2800      	cmp	r0, #0
 8015bee:	d1f6      	bne.n	8015bde <DecodeRekordboxFiles+0x69a>
		k = 0;
 8015bf0:	4607      	mov	r7, r0
		i = 0;
 8015bf2:	f04f 0800 	mov.w	r8, #0
 8015bf6:	e015      	b.n	8015c24 <DecodeRekordboxFiles+0x6e0>
			WCHAR c = filename[i];
 8015bf8:	f50d 7900 	add.w	r9, sp, #512	; 0x200
 8015bfc:	f819 3008 	ldrb.w	r3, [r9, r8]
			i++;
 8015c00:	f108 0201 	add.w	r2, r8, #1
			c |= filename[i];
 8015c04:	f819 0002 	ldrb.w	r0, [r9, r2]
 8015c08:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			i++;
 8015c0c:	f108 0802 	add.w	r8, r8, #2
			rekordbox.filename[k] = c;
 8015c10:	4b69      	ldr	r3, [pc, #420]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015c12:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
			filename[k] = ff_convert(c, 0);
 8015c16:	2100      	movs	r1, #0
 8015c18:	f7f6 fb14 	bl	800c244 <ff_convert>
 8015c1c:	f809 0007 	strb.w	r0, [r9, r7]
			k++;
 8015c20:	1c7b      	adds	r3, r7, #1
 8015c22:	b2df      	uxtb	r7, r3
		while(i < data_size) {
 8015c24:	45a8      	cmp	r8, r5
 8015c26:	d3e7      	bcc.n	8015bf8 <DecodeRekordboxFiles+0x6b4>
		for(i = k; i < data_size; i++) filename[i] = 0;
 8015c28:	463b      	mov	r3, r7
 8015c2a:	e003      	b.n	8015c34 <DecodeRekordboxFiles+0x6f0>
 8015c2c:	aa80      	add	r2, sp, #512	; 0x200
 8015c2e:	2100      	movs	r1, #0
 8015c30:	54d1      	strb	r1, [r2, r3]
 8015c32:	3301      	adds	r3, #1
 8015c34:	42ab      	cmp	r3, r5
 8015c36:	d3f9      	bcc.n	8015c2c <DecodeRekordboxFiles+0x6e8>
		i = data_size;
 8015c38:	462b      	mov	r3, r5
 8015c3a:	e000      	b.n	8015c3e <DecodeRekordboxFiles+0x6fa>
		while((i > 0) && (filename[i] != '.')) i--;
 8015c3c:	3b01      	subs	r3, #1
 8015c3e:	b19b      	cbz	r3, 8015c68 <DecodeRekordboxFiles+0x724>
 8015c40:	aa80      	add	r2, sp, #512	; 0x200
 8015c42:	5cd2      	ldrb	r2, [r2, r3]
 8015c44:	2a2e      	cmp	r2, #46	; 0x2e
 8015c46:	d1f9      	bne.n	8015c3c <DecodeRekordboxFiles+0x6f8>
 8015c48:	4632      	mov	r2, r6
 8015c4a:	e000      	b.n	8015c4e <DecodeRekordboxFiles+0x70a>
			i++;
 8015c4c:	3301      	adds	r3, #1
		while(k < 5)
 8015c4e:	2a04      	cmp	r2, #4
 8015c50:	d80c      	bhi.n	8015c6c <DecodeRekordboxFiles+0x728>
			if(filename[i] >= 32) {
 8015c52:	a980      	add	r1, sp, #512	; 0x200
 8015c54:	5cc9      	ldrb	r1, [r1, r3]
 8015c56:	291f      	cmp	r1, #31
 8015c58:	d9f8      	bls.n	8015c4c <DecodeRekordboxFiles+0x708>
				rekordbox.filetype[k] = filename[i];
 8015c5a:	4857      	ldr	r0, [pc, #348]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015c5c:	4410      	add	r0, r2
 8015c5e:	f880 12fd 	strb.w	r1, [r0, #765]	; 0x2fd
				k++;
 8015c62:	3201      	adds	r2, #1
 8015c64:	b2d2      	uxtb	r2, r2
 8015c66:	e7f1      	b.n	8015c4c <DecodeRekordboxFiles+0x708>
 8015c68:	4632      	mov	r2, r6
 8015c6a:	e7f0      	b.n	8015c4e <DecodeRekordboxFiles+0x70a>
		rekordbox.filetype[4] = 0;
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	4a52      	ldr	r2, [pc, #328]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015c70:	f882 3301 	strb.w	r3, [r2, #769]	; 0x301
		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 8015c74:	e005      	b.n	8015c82 <DecodeRekordboxFiles+0x73e>
 8015c76:	4a50      	ldr	r2, [pc, #320]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015c78:	441a      	add	r2, r3
 8015c7a:	2100      	movs	r1, #0
 8015c7c:	f882 11fe 	strb.w	r1, [r2, #510]	; 0x1fe
 8015c80:	3301      	adds	r3, #1
 8015c82:	2bfe      	cmp	r3, #254	; 0xfe
 8015c84:	d9f7      	bls.n	8015c76 <DecodeRekordboxFiles+0x732>
		i = data_size;
 8015c86:	462b      	mov	r3, r5
 8015c88:	e000      	b.n	8015c8c <DecodeRekordboxFiles+0x748>
		while((i > 0) && (filename[i] != '/')) i--;
 8015c8a:	3b01      	subs	r3, #1
 8015c8c:	b11b      	cbz	r3, 8015c96 <DecodeRekordboxFiles+0x752>
 8015c8e:	aa80      	add	r2, sp, #512	; 0x200
 8015c90:	5cd2      	ldrb	r2, [r2, r3]
 8015c92:	2a2f      	cmp	r2, #47	; 0x2f
 8015c94:	d1f9      	bne.n	8015c8a <DecodeRekordboxFiles+0x746>
		i++;
 8015c96:	3301      	adds	r3, #1
		while(i < data_size)
 8015c98:	e000      	b.n	8015c9c <DecodeRekordboxFiles+0x758>
			i++;
 8015c9a:	3301      	adds	r3, #1
		while(i < data_size)
 8015c9c:	42ab      	cmp	r3, r5
 8015c9e:	d20a      	bcs.n	8015cb6 <DecodeRekordboxFiles+0x772>
			if(filename[i] >= 32) {
 8015ca0:	aa80      	add	r2, sp, #512	; 0x200
 8015ca2:	5cd2      	ldrb	r2, [r2, r3]
 8015ca4:	2a1f      	cmp	r2, #31
 8015ca6:	d9f8      	bls.n	8015c9a <DecodeRekordboxFiles+0x756>
				rekordbox.file[k] = filename[i];
 8015ca8:	4943      	ldr	r1, [pc, #268]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015caa:	4431      	add	r1, r6
 8015cac:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
				k++;
 8015cb0:	3601      	adds	r6, #1
 8015cb2:	b2f6      	uxtb	r6, r6
 8015cb4:	e7f1      	b.n	8015c9a <DecodeRekordboxFiles+0x756>
		rekordbox.file[i] = 0;
 8015cb6:	4a40      	ldr	r2, [pc, #256]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015cb8:	4413      	add	r3, r2
 8015cba:	2200      	movs	r2, #0
 8015cbc:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		if(FindToken(qtz_token) != 0) return 1;
 8015cc0:	483e      	ldr	r0, [pc, #248]	; (8015dbc <DecodeRekordboxFiles+0x878>)
 8015cc2:	f7ff fbf9 	bl	80154b8 <FindToken>
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	f040 82a3 	bne.w	8016212 <DecodeRekordboxFiles+0xcce>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 22 bytes
 8015ccc:	4b30      	ldr	r3, [pc, #192]	; (8015d90 <DecodeRekordboxFiles+0x84c>)
 8015cce:	2210      	movs	r2, #16
 8015cd0:	4930      	ldr	r1, [pc, #192]	; (8015d94 <DecodeRekordboxFiles+0x850>)
 8015cd2:	4831      	ldr	r0, [pc, #196]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015cd4:	f7f5 ffd7 	bl	800bc86 <f_read>
 8015cd8:	4607      	mov	r7, r0
 8015cda:	2800      	cmp	r0, #0
 8015cdc:	d1f6      	bne.n	8015ccc <DecodeRekordboxFiles+0x788>
		data_size = GetLongNumber();
 8015cde:	f7ff fbc7 	bl	8015470 <GetLongNumber>
		rekordbox.timezones = data_size;
 8015ce2:	4b35      	ldr	r3, [pc, #212]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015ce4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
		for(i=0; i<rekordbox.timezones; i++) {
 8015ce8:	2600      	movs	r6, #0
 8015cea:	e048      	b.n	8015d7e <DecodeRekordboxFiles+0x83a>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 8015cec:	4b28      	ldr	r3, [pc, #160]	; (8015d90 <DecodeRekordboxFiles+0x84c>)
 8015cee:	2201      	movs	r2, #1
 8015cf0:	492b      	ldr	r1, [pc, #172]	; (8015da0 <DecodeRekordboxFiles+0x85c>)
 8015cf2:	4429      	add	r1, r5
 8015cf4:	4828      	ldr	r0, [pc, #160]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015cf6:	f7f5 ffc6 	bl	800bc86 <f_read>
 8015cfa:	2800      	cmp	r0, #0
 8015cfc:	d1f6      	bne.n	8015cec <DecodeRekordboxFiles+0x7a8>
			for(k=0; k<2; k++) {
 8015cfe:	3501      	adds	r5, #1
 8015d00:	b2ed      	uxtb	r5, r5
 8015d02:	2d01      	cmp	r5, #1
 8015d04:	d9f2      	bls.n	8015cec <DecodeRekordboxFiles+0x7a8>
			rekordbox.phase[i] |= tag[0];
 8015d06:	4826      	ldr	r0, [pc, #152]	; (8015da0 <DecodeRekordboxFiles+0x85c>)
 8015d08:	7803      	ldrb	r3, [r0, #0]
 8015d0a:	4a2b      	ldr	r2, [pc, #172]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015d0c:	f206 516c 	addw	r1, r6, #1388	; 0x56c
 8015d10:	f832 5011 	ldrh.w	r5, [r2, r1, lsl #1]
 8015d14:	432b      	orrs	r3, r5
 8015d16:	b29b      	uxth	r3, r3
 8015d18:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			rekordbox.phase[i] <<= 8;
 8015d1c:	021b      	lsls	r3, r3, #8
 8015d1e:	b29b      	uxth	r3, r3
 8015d20:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			rekordbox.phase[i] |= tag[1];
 8015d24:	7840      	ldrb	r0, [r0, #1]
 8015d26:	4303      	orrs	r3, r0
 8015d28:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			for(k=0; k<2; k++) {
 8015d2c:	463d      	mov	r5, r7
 8015d2e:	e00a      	b.n	8015d46 <DecodeRekordboxFiles+0x802>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 8015d30:	4b17      	ldr	r3, [pc, #92]	; (8015d90 <DecodeRekordboxFiles+0x84c>)
 8015d32:	2201      	movs	r2, #1
 8015d34:	491a      	ldr	r1, [pc, #104]	; (8015da0 <DecodeRekordboxFiles+0x85c>)
 8015d36:	4429      	add	r1, r5
 8015d38:	4817      	ldr	r0, [pc, #92]	; (8015d98 <DecodeRekordboxFiles+0x854>)
 8015d3a:	f7f5 ffa4 	bl	800bc86 <f_read>
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	d1f6      	bne.n	8015d30 <DecodeRekordboxFiles+0x7ec>
			for(k=0; k<2; k++) {
 8015d42:	3501      	adds	r5, #1
 8015d44:	b2ed      	uxtb	r5, r5
 8015d46:	2d01      	cmp	r5, #1
 8015d48:	d9f2      	bls.n	8015d30 <DecodeRekordboxFiles+0x7ec>
			rekordbox.bpm[i] |= tag[0];
 8015d4a:	4915      	ldr	r1, [pc, #84]	; (8015da0 <DecodeRekordboxFiles+0x85c>)
 8015d4c:	780b      	ldrb	r3, [r1, #0]
 8015d4e:	4d1a      	ldr	r5, [pc, #104]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015d50:	f506 72c2 	add.w	r2, r6, #388	; 0x184
 8015d54:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 8015d58:	4303      	orrs	r3, r0
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.bpm[i] <<= 8;
 8015d60:	021b      	lsls	r3, r3, #8
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.bpm[i] |= tag[1];
 8015d68:	7849      	ldrb	r1, [r1, #1]
 8015d6a:	430b      	orrs	r3, r1
 8015d6c:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.timeindex[i] = GetLongNumber();
 8015d70:	f7ff fb7e 	bl	8015470 <GetLongNumber>
 8015d74:	f206 43aa 	addw	r3, r6, #1194	; 0x4aa
 8015d78:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
		for(i=0; i<rekordbox.timezones; i++) {
 8015d7c:	3601      	adds	r6, #1
 8015d7e:	4b0e      	ldr	r3, [pc, #56]	; (8015db8 <DecodeRekordboxFiles+0x874>)
 8015d80:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8015d84:	42b3      	cmp	r3, r6
 8015d86:	d91b      	bls.n	8015dc0 <DecodeRekordboxFiles+0x87c>
			for(k=0; k<2; k++) {
 8015d88:	463d      	mov	r5, r7
 8015d8a:	e7ba      	b.n	8015d02 <DecodeRekordboxFiles+0x7be>
 8015d8c:	2000008c 	.word	0x2000008c
 8015d90:	2000e37c 	.word	0x2000e37c
 8015d94:	200007ac 	.word	0x200007ac
 8015d98:	200017b8 	.word	0x200017b8
 8015d9c:	20016620 	.word	0x20016620
 8015da0:	200171bc 	.word	0x200171bc
 8015da4:	c00ff000 	.word	0xc00ff000
 8015da8:	20000054 	.word	0x20000054
 8015dac:	cccccccd 	.word	0xcccccccd
 8015db0:	0801f80c 	.word	0x0801f80c
 8015db4:	20000074 	.word	0x20000074
 8015db8:	20014620 	.word	0x20014620
 8015dbc:	2000007c 	.word	0x2000007c
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 8015dc0:	4bbb      	ldr	r3, [pc, #748]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8015dc2:	f8b3 3ad8 	ldrh.w	r3, [r3, #2776]	; 0xad8
 8015dc6:	2b01      	cmp	r3, #1
 8015dc8:	d03e      	beq.n	8015e48 <DecodeRekordboxFiles+0x904>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 8015dca:	3b01      	subs	r3, #1
 8015dcc:	4ab9      	ldr	r2, [pc, #740]	; (80160b4 <DecodeRekordboxFiles+0xb70>)
 8015dce:	f882 3248 	strb.w	r3, [r2, #584]	; 0x248
		if(FindToken(wave_token) != 0) return 1;
 8015dd2:	48b9      	ldr	r0, [pc, #740]	; (80160b8 <DecodeRekordboxFiles+0xb74>)
 8015dd4:	f7ff fb70 	bl	80154b8 <FindToken>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	f040 821c 	bne.w	8016216 <DecodeRekordboxFiles+0xcd2>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8015dde:	4bb7      	ldr	r3, [pc, #732]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015de0:	2208      	movs	r2, #8
 8015de2:	49b7      	ldr	r1, [pc, #732]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8015de4:	48b7      	ldr	r0, [pc, #732]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015de6:	f7f5 ff4e 	bl	800bc86 <f_read>
 8015dea:	2800      	cmp	r0, #0
 8015dec:	d1f7      	bne.n	8015dde <DecodeRekordboxFiles+0x89a>
		rekordbox.lowp_spectrum_size = GetLongNumber();
 8015dee:	f7ff fb3f 	bl	8015470 <GetLongNumber>
 8015df2:	4bb0      	ldr	r3, [pc, #704]	; (80160b4 <DecodeRekordboxFiles+0xb70>)
 8015df4:	f8c3 024c 	str.w	r0, [r3, #588]	; 0x24c
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8015df8:	4bb0      	ldr	r3, [pc, #704]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015dfa:	2204      	movs	r2, #4
 8015dfc:	49b0      	ldr	r1, [pc, #704]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8015dfe:	48b1      	ldr	r0, [pc, #708]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015e00:	f7f5 ff41 	bl	800bc86 <f_read>
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d1f7      	bne.n	8015df8 <DecodeRekordboxFiles+0x8b4>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 8015e08:	4bac      	ldr	r3, [pc, #688]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015e0a:	4aaa      	ldr	r2, [pc, #680]	; (80160b4 <DecodeRekordboxFiles+0xb70>)
 8015e0c:	f8d2 224c 	ldr.w	r2, [r2, #588]	; 0x24c
 8015e10:	49ad      	ldr	r1, [pc, #692]	; (80160c8 <DecodeRekordboxFiles+0xb84>)
 8015e12:	48ac      	ldr	r0, [pc, #688]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015e14:	f7f5 ff37 	bl	800bc86 <f_read>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d1f5      	bne.n	8015e08 <DecodeRekordboxFiles+0x8c4>
		if(FindToken(cob_token) != 0) return 1;
 8015e1c:	48ab      	ldr	r0, [pc, #684]	; (80160cc <DecodeRekordboxFiles+0xb88>)
 8015e1e:	f7ff fb4b 	bl	80154b8 <FindToken>
 8015e22:	2800      	cmp	r0, #0
 8015e24:	f040 81f9 	bne.w	801621a <DecodeRekordboxFiles+0xcd6>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 8015e28:	4ba4      	ldr	r3, [pc, #656]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015e2a:	220c      	movs	r2, #12
 8015e2c:	49a4      	ldr	r1, [pc, #656]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8015e2e:	48a5      	ldr	r0, [pc, #660]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015e30:	f7f5 ff29 	bl	800bc86 <f_read>
 8015e34:	2800      	cmp	r0, #0
 8015e36:	d1f7      	bne.n	8015e28 <DecodeRekordboxFiles+0x8e4>
		rekordbox.cues = GetLongNumber() + 1;
 8015e38:	f7ff fb1a 	bl	8015470 <GetLongNumber>
 8015e3c:	3001      	adds	r0, #1
 8015e3e:	4a9d      	ldr	r2, [pc, #628]	; (80160b4 <DecodeRekordboxFiles+0xb70>)
 8015e40:	f8c2 0358 	str.w	r0, [r2, #856]	; 0x358
		for(i = 1; i < rekordbox.cues; i++) {
 8015e44:	2501      	movs	r5, #1
 8015e46:	e005      	b.n	8015e54 <DecodeRekordboxFiles+0x910>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 8015e48:	4b9a      	ldr	r3, [pc, #616]	; (80160b4 <DecodeRekordboxFiles+0xb70>)
 8015e4a:	2204      	movs	r2, #4
 8015e4c:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8015e50:	e7bf      	b.n	8015dd2 <DecodeRekordboxFiles+0x88e>
		for(i = 1; i < rekordbox.cues; i++) {
 8015e52:	3501      	adds	r5, #1
 8015e54:	4b97      	ldr	r3, [pc, #604]	; (80160b4 <DecodeRekordboxFiles+0xb70>)
 8015e56:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8015e5a:	42ab      	cmp	r3, r5
 8015e5c:	d976      	bls.n	8015f4c <DecodeRekordboxFiles+0xa08>
			if(FindToken(cue_token) != 0) return 1;
 8015e5e:	489c      	ldr	r0, [pc, #624]	; (80160d0 <DecodeRekordboxFiles+0xb8c>)
 8015e60:	f7ff fb2a 	bl	80154b8 <FindToken>
 8015e64:	2800      	cmp	r0, #0
 8015e66:	f040 81da 	bne.w	801621e <DecodeRekordboxFiles+0xcda>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8015e6a:	4b94      	ldr	r3, [pc, #592]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015e6c:	2208      	movs	r2, #8
 8015e6e:	4994      	ldr	r1, [pc, #592]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8015e70:	4894      	ldr	r0, [pc, #592]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015e72:	f7f5 ff08 	bl	800bc86 <f_read>
 8015e76:	2800      	cmp	r0, #0
 8015e78:	d1f7      	bne.n	8015e6a <DecodeRekordboxFiles+0x926>
			rekordbox.cue_number[i] = GetLongNumber();
 8015e7a:	f7ff faf9 	bl	8015470 <GetLongNumber>
 8015e7e:	4e8c      	ldr	r6, [pc, #560]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8015e80:	f605 03d6 	addw	r3, r5, #2262	; 0x8d6
 8015e84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015e88:	6058      	str	r0, [r3, #4]
			rekordbox.cue_active[i] = GetLongNumber();
 8015e8a:	f7ff faf1 	bl	8015470 <GetLongNumber>
 8015e8e:	f605 133a 	addw	r3, r5, #2362	; 0x93a
 8015e92:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8015e96:	6070      	str	r0, [r6, #4]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8015e98:	4b88      	ldr	r3, [pc, #544]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015e9a:	2204      	movs	r2, #4
 8015e9c:	4988      	ldr	r1, [pc, #544]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8015e9e:	4889      	ldr	r0, [pc, #548]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015ea0:	f7f5 fef1 	bl	800bc86 <f_read>
 8015ea4:	2800      	cmp	r0, #0
 8015ea6:	d1f7      	bne.n	8015e98 <DecodeRekordboxFiles+0x954>
			rekordbox.cue_type[i] = GetLongNumber();
 8015ea8:	f7ff fae2 	bl	8015470 <GetLongNumber>
 8015eac:	f605 129e 	addw	r2, r5, #2462	; 0x99e
 8015eb0:	4b7f      	ldr	r3, [pc, #508]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8015eb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015eb6:	6058      	str	r0, [r3, #4]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 8015eb8:	f642 3128 	movw	r1, #11048	; 0x2b28
 8015ebc:	4429      	add	r1, r5
 8015ebe:	4b7c      	ldr	r3, [pc, #496]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8015ec0:	4419      	add	r1, r3
 8015ec2:	4b7e      	ldr	r3, [pc, #504]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015ec4:	2201      	movs	r2, #1
 8015ec6:	3104      	adds	r1, #4
 8015ec8:	487e      	ldr	r0, [pc, #504]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015eca:	f7f5 fedc 	bl	800bc86 <f_read>
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	d1f2      	bne.n	8015eb8 <DecodeRekordboxFiles+0x974>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 8015ed2:	4b7a      	ldr	r3, [pc, #488]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015ed4:	2203      	movs	r2, #3
 8015ed6:	497a      	ldr	r1, [pc, #488]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8015ed8:	487a      	ldr	r0, [pc, #488]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015eda:	f7f5 fed4 	bl	800bc86 <f_read>
 8015ede:	2800      	cmp	r0, #0
 8015ee0:	d1f7      	bne.n	8015ed2 <DecodeRekordboxFiles+0x98e>
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8015ee2:	f7ff fac5 	bl	8015470 <GetLongNumber>
 8015ee6:	ee07 0a90 	vmov	s15, r0
 8015eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015eee:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80160d4 <DecodeRekordboxFiles+0xb90>
 8015ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015ef6:	eddf 6a78 	vldr	s13, [pc, #480]	; 80160d8 <DecodeRekordboxFiles+0xb94>
 8015efa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015efe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015f02:	4b6b      	ldr	r3, [pc, #428]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8015f04:	f605 2202 	addw	r2, r5, #2562	; 0xa02
 8015f08:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015f0c:	ed82 7a01 	vstr	s14, [r2, #4]
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8015f10:	442b      	add	r3, r5
 8015f12:	f642 322c 	movw	r2, #11052	; 0x2b2c
 8015f16:	5c9b      	ldrb	r3, [r3, r2]
 8015f18:	2b02      	cmp	r3, #2
 8015f1a:	d19a      	bne.n	8015e52 <DecodeRekordboxFiles+0x90e>
 8015f1c:	f7ff faa8 	bl	8015470 <GetLongNumber>
 8015f20:	ee07 0a90 	vmov	s15, r0
 8015f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f28:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80160d4 <DecodeRekordboxFiles+0xb90>
 8015f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015f30:	eddf 6a69 	vldr	s13, [pc, #420]	; 80160d8 <DecodeRekordboxFiles+0xb94>
 8015f34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015f38:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015f3c:	f605 2266 	addw	r2, r5, #2662	; 0xa66
 8015f40:	4b5b      	ldr	r3, [pc, #364]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8015f42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015f46:	ed83 7a01 	vstr	s14, [r3, #4]
 8015f4a:	e782      	b.n	8015e52 <DecodeRekordboxFiles+0x90e>
		}
		if(FindToken(cob_token) != 0) return 1;
 8015f4c:	485f      	ldr	r0, [pc, #380]	; (80160cc <DecodeRekordboxFiles+0xb88>)
 8015f4e:	f7ff fab3 	bl	80154b8 <FindToken>
 8015f52:	2800      	cmp	r0, #0
 8015f54:	f040 8165 	bne.w	8016222 <DecodeRekordboxFiles+0xcde>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 8015f58:	4b58      	ldr	r3, [pc, #352]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015f5a:	220c      	movs	r2, #12
 8015f5c:	4958      	ldr	r1, [pc, #352]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8015f5e:	4859      	ldr	r0, [pc, #356]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015f60:	f7f5 fe91 	bl	800bc86 <f_read>
 8015f64:	2800      	cmp	r0, #0
 8015f66:	d1f7      	bne.n	8015f58 <DecodeRekordboxFiles+0xa14>
		rekordbox.cues += GetLongNumber();
 8015f68:	f7ff fa82 	bl	8015470 <GetLongNumber>
 8015f6c:	4a51      	ldr	r2, [pc, #324]	; (80160b4 <DecodeRekordboxFiles+0xb70>)
 8015f6e:	f8d2 3358 	ldr.w	r3, [r2, #856]	; 0x358
 8015f72:	4403      	add	r3, r0
 8015f74:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
		k = i;
 8015f78:	b2ed      	uxtb	r5, r5
		for(k = i; k < rekordbox.cues; k++) {
 8015f7a:	e001      	b.n	8015f80 <DecodeRekordboxFiles+0xa3c>
 8015f7c:	3501      	adds	r5, #1
 8015f7e:	b2ed      	uxtb	r5, r5
 8015f80:	462e      	mov	r6, r5
 8015f82:	4b4c      	ldr	r3, [pc, #304]	; (80160b4 <DecodeRekordboxFiles+0xb70>)
 8015f84:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8015f88:	429d      	cmp	r5, r3
 8015f8a:	da76      	bge.n	801607a <DecodeRekordboxFiles+0xb36>
			if(FindToken(cue_token) != 0) return 1;
 8015f8c:	4850      	ldr	r0, [pc, #320]	; (80160d0 <DecodeRekordboxFiles+0xb8c>)
 8015f8e:	f7ff fa93 	bl	80154b8 <FindToken>
 8015f92:	2800      	cmp	r0, #0
 8015f94:	f040 8147 	bne.w	8016226 <DecodeRekordboxFiles+0xce2>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8015f98:	4b48      	ldr	r3, [pc, #288]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015f9a:	2208      	movs	r2, #8
 8015f9c:	4948      	ldr	r1, [pc, #288]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8015f9e:	4849      	ldr	r0, [pc, #292]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015fa0:	f7f5 fe71 	bl	800bc86 <f_read>
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	d1f7      	bne.n	8015f98 <DecodeRekordboxFiles+0xa54>
			rekordbox.cue_number[k] = GetLongNumber();
 8015fa8:	f7ff fa62 	bl	8015470 <GetLongNumber>
 8015fac:	4f40      	ldr	r7, [pc, #256]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8015fae:	f606 03d6 	addw	r3, r6, #2262	; 0x8d6
 8015fb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015fb6:	6058      	str	r0, [r3, #4]
			rekordbox.cue_active[k] = GetLongNumber();
 8015fb8:	f7ff fa5a 	bl	8015470 <GetLongNumber>
 8015fbc:	f606 133a 	addw	r3, r6, #2362	; 0x93a
 8015fc0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8015fc4:	6078      	str	r0, [r7, #4]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8015fc6:	4b3d      	ldr	r3, [pc, #244]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015fc8:	2204      	movs	r2, #4
 8015fca:	493d      	ldr	r1, [pc, #244]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8015fcc:	483d      	ldr	r0, [pc, #244]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015fce:	f7f5 fe5a 	bl	800bc86 <f_read>
 8015fd2:	2800      	cmp	r0, #0
 8015fd4:	d1f7      	bne.n	8015fc6 <DecodeRekordboxFiles+0xa82>
			rekordbox.cue_type[k] = GetLongNumber();
 8015fd6:	f7ff fa4b 	bl	8015470 <GetLongNumber>
 8015fda:	f606 129e 	addw	r2, r6, #2462	; 0x99e
 8015fde:	4b34      	ldr	r3, [pc, #208]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8015fe0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015fe4:	6058      	str	r0, [r3, #4]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 8015fe6:	f642 3328 	movw	r3, #11048	; 0x2b28
 8015fea:	4433      	add	r3, r6
 8015fec:	4930      	ldr	r1, [pc, #192]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8015fee:	4419      	add	r1, r3
 8015ff0:	4b32      	ldr	r3, [pc, #200]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8015ff2:	2201      	movs	r2, #1
 8015ff4:	3104      	adds	r1, #4
 8015ff6:	4833      	ldr	r0, [pc, #204]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8015ff8:	f7f5 fe45 	bl	800bc86 <f_read>
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	d1f2      	bne.n	8015fe6 <DecodeRekordboxFiles+0xaa2>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 8016000:	4b2e      	ldr	r3, [pc, #184]	; (80160bc <DecodeRekordboxFiles+0xb78>)
 8016002:	2203      	movs	r2, #3
 8016004:	492e      	ldr	r1, [pc, #184]	; (80160c0 <DecodeRekordboxFiles+0xb7c>)
 8016006:	482f      	ldr	r0, [pc, #188]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 8016008:	f7f5 fe3d 	bl	800bc86 <f_read>
 801600c:	2800      	cmp	r0, #0
 801600e:	d1f7      	bne.n	8016000 <DecodeRekordboxFiles+0xabc>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 8016010:	f7ff fa2e 	bl	8015470 <GetLongNumber>
 8016014:	ee07 0a90 	vmov	s15, r0
 8016018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801601c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80160d4 <DecodeRekordboxFiles+0xb90>
 8016020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016024:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80160d8 <DecodeRekordboxFiles+0xb94>
 8016028:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801602c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016030:	4b1f      	ldr	r3, [pc, #124]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8016032:	f606 2202 	addw	r2, r6, #2562	; 0xa02
 8016036:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801603a:	ed82 7a01 	vstr	s14, [r2, #4]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801603e:	4433      	add	r3, r6
 8016040:	f642 322c 	movw	r2, #11052	; 0x2b2c
 8016044:	5c9b      	ldrb	r3, [r3, r2]
 8016046:	2b02      	cmp	r3, #2
 8016048:	d198      	bne.n	8015f7c <DecodeRekordboxFiles+0xa38>
 801604a:	f7ff fa11 	bl	8015470 <GetLongNumber>
 801604e:	ee07 0a90 	vmov	s15, r0
 8016052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016056:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80160d4 <DecodeRekordboxFiles+0xb90>
 801605a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801605e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80160d8 <DecodeRekordboxFiles+0xb94>
 8016062:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016066:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801606a:	f606 2666 	addw	r6, r6, #2662	; 0xa66
 801606e:	4b10      	ldr	r3, [pc, #64]	; (80160b0 <DecodeRekordboxFiles+0xb6c>)
 8016070:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8016074:	ed83 7a01 	vstr	s14, [r3, #4]
 8016078:	e780      	b.n	8015f7c <DecodeRekordboxFiles+0xa38>
		}
		f_close(&MyFile);
 801607a:	4812      	ldr	r0, [pc, #72]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 801607c:	f7f5 feca 	bl	800be14 <f_close>
 8016080:	e59a      	b.n	8015bb8 <DecodeRekordboxFiles+0x674>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 8016082:	2200      	movs	r2, #0
 8016084:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
 8016088:	3301      	adds	r3, #1
 801608a:	2bfe      	cmp	r3, #254	; 0xfe
 801608c:	d9f9      	bls.n	8016082 <DecodeRekordboxFiles+0xb3e>
	wcscpy(my_path, path);
 801608e:	4621      	mov	r1, r4
 8016090:	4668      	mov	r0, sp
 8016092:	f003 fffe 	bl	801a092 <wcscpy>
	wcscat(my_path, L"/ANLZ0001.EXT");
 8016096:	4911      	ldr	r1, [pc, #68]	; (80160dc <DecodeRekordboxFiles+0xb98>)
 8016098:	4668      	mov	r0, sp
 801609a:	f003 ffea 	bl	801a072 <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 801609e:	2201      	movs	r2, #1
 80160a0:	4669      	mov	r1, sp
 80160a2:	4808      	ldr	r0, [pc, #32]	; (80160c4 <DecodeRekordboxFiles+0xb80>)
 80160a4:	f7f5 fd80 	bl	800bba8 <f_open>
	if(res == FR_OK) {
 80160a8:	b1d0      	cbz	r0, 80160e0 <DecodeRekordboxFiles+0xb9c>
		if(FindToken(wv3_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
		rekordbox.spectrum_size = GetLongNumber();
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
		rekordbox.cue_start_position[0] = 0;
		for(i=0; i<rekordbox.spectrum_size; i++) {
 80160aa:	2000      	movs	r0, #0
 80160ac:	4603      	mov	r3, r0
 80160ae:	e066      	b.n	801617e <DecodeRekordboxFiles+0xc3a>
 80160b0:	20014620 	.word	0x20014620
 80160b4:	20016620 	.word	0x20016620
 80160b8:	20000084 	.word	0x20000084
 80160bc:	2000e37c 	.word	0x2000e37c
 80160c0:	200007ac 	.word	0x200007ac
 80160c4:	200017b8 	.word	0x200017b8
 80160c8:	2000e608 	.word	0x2000e608
 80160cc:	20000064 	.word	0x20000064
 80160d0:	2000006c 	.word	0x2000006c
 80160d4:	43160000 	.word	0x43160000
 80160d8:	447a0000 	.word	0x447a0000
 80160dc:	0801f844 	.word	0x0801f844
		if(FindToken(wv3_token) != 0) return 1;
 80160e0:	4853      	ldr	r0, [pc, #332]	; (8016230 <DecodeRekordboxFiles+0xcec>)
 80160e2:	f7ff f9e9 	bl	80154b8 <FindToken>
 80160e6:	2800      	cmp	r0, #0
 80160e8:	f040 809f 	bne.w	801622a <DecodeRekordboxFiles+0xce6>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 80160ec:	4b51      	ldr	r3, [pc, #324]	; (8016234 <DecodeRekordboxFiles+0xcf0>)
 80160ee:	220c      	movs	r2, #12
 80160f0:	4951      	ldr	r1, [pc, #324]	; (8016238 <DecodeRekordboxFiles+0xcf4>)
 80160f2:	4852      	ldr	r0, [pc, #328]	; (801623c <DecodeRekordboxFiles+0xcf8>)
 80160f4:	f7f5 fdc7 	bl	800bc86 <f_read>
 80160f8:	2800      	cmp	r0, #0
 80160fa:	d1f7      	bne.n	80160ec <DecodeRekordboxFiles+0xba8>
		rekordbox.spectrum_size = GetLongNumber();
 80160fc:	f7ff f9b8 	bl	8015470 <GetLongNumber>
 8016100:	4b4f      	ldr	r3, [pc, #316]	; (8016240 <DecodeRekordboxFiles+0xcfc>)
 8016102:	f8c3 0250 	str.w	r0, [r3, #592]	; 0x250
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8016106:	4b4b      	ldr	r3, [pc, #300]	; (8016234 <DecodeRekordboxFiles+0xcf0>)
 8016108:	2204      	movs	r2, #4
 801610a:	494b      	ldr	r1, [pc, #300]	; (8016238 <DecodeRekordboxFiles+0xcf4>)
 801610c:	484b      	ldr	r0, [pc, #300]	; (801623c <DecodeRekordboxFiles+0xcf8>)
 801610e:	f7f5 fdba 	bl	800bc86 <f_read>
 8016112:	2800      	cmp	r0, #0
 8016114:	d1f7      	bne.n	8016106 <DecodeRekordboxFiles+0xbc2>
		rekordbox.cue_start_position[0] = 0;
 8016116:	2400      	movs	r4, #0
 8016118:	4b49      	ldr	r3, [pc, #292]	; (8016240 <DecodeRekordboxFiles+0xcfc>)
 801611a:	f8c3 480c 	str.w	r4, [r3, #2060]	; 0x80c
		for(i=0; i<rekordbox.spectrum_size; i++) {
 801611e:	e000      	b.n	8016122 <DecodeRekordboxFiles+0xbde>
 8016120:	3401      	adds	r4, #1
 8016122:	4b47      	ldr	r3, [pc, #284]	; (8016240 <DecodeRekordboxFiles+0xcfc>)
 8016124:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8016128:	42a3      	cmp	r3, r4
 801612a:	d923      	bls.n	8016174 <DecodeRekordboxFiles+0xc30>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 801612c:	4b41      	ldr	r3, [pc, #260]	; (8016234 <DecodeRekordboxFiles+0xcf0>)
 801612e:	2201      	movs	r2, #1
 8016130:	4944      	ldr	r1, [pc, #272]	; (8016244 <DecodeRekordboxFiles+0xd00>)
 8016132:	4842      	ldr	r0, [pc, #264]	; (801623c <DecodeRekordboxFiles+0xcf8>)
 8016134:	f7f5 fda7 	bl	800bc86 <f_read>
 8016138:	2800      	cmp	r0, #0
 801613a:	d1f7      	bne.n	801612c <DecodeRekordboxFiles+0xbe8>
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 801613c:	4b41      	ldr	r3, [pc, #260]	; (8016244 <DecodeRekordboxFiles+0xd00>)
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	4a41      	ldr	r2, [pc, #260]	; (8016248 <DecodeRekordboxFiles+0xd04>)
 8016142:	54a3      	strb	r3, [r4, r2]
			if(rekordbox.autocue == 1) {
 8016144:	4a3e      	ldr	r2, [pc, #248]	; (8016240 <DecodeRekordboxFiles+0xcfc>)
 8016146:	f892 2b90 	ldrb.w	r2, [r2, #2960]	; 0xb90
 801614a:	2a01      	cmp	r2, #1
 801614c:	d1e8      	bne.n	8016120 <DecodeRekordboxFiles+0xbdc>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 801614e:	4a3f      	ldr	r2, [pc, #252]	; (801624c <DecodeRekordboxFiles+0xd08>)
 8016150:	7812      	ldrb	r2, [r2, #0]
 8016152:	493f      	ldr	r1, [pc, #252]	; (8016250 <DecodeRekordboxFiles+0xd0c>)
 8016154:	fba1 1202 	umull	r1, r2, r1, r2
 8016158:	f003 011f 	and.w	r1, r3, #31
 801615c:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 8016160:	d9de      	bls.n	8016120 <DecodeRekordboxFiles+0xbdc>
 8016162:	09db      	lsrs	r3, r3, #7
 8016164:	d1dc      	bne.n	8016120 <DecodeRekordboxFiles+0xbdc>
					rekordbox.autocue = 2;
 8016166:	4b36      	ldr	r3, [pc, #216]	; (8016240 <DecodeRekordboxFiles+0xcfc>)
 8016168:	2202      	movs	r2, #2
 801616a:	f883 2b90 	strb.w	r2, [r3, #2960]	; 0xb90
					rekordbox.cue_start_position[0] = i;
 801616e:	f8c3 480c 	str.w	r4, [r3, #2060]	; 0x80c
 8016172:	e7d5      	b.n	8016120 <DecodeRekordboxFiles+0xbdc>
				}
			}
		}
		f_close(&MyFile);
 8016174:	4831      	ldr	r0, [pc, #196]	; (801623c <DecodeRekordboxFiles+0xcf8>)
 8016176:	f7f5 fe4d 	bl	800be14 <f_close>
 801617a:	e796      	b.n	80160aa <DecodeRekordboxFiles+0xb66>
		for(i=0; i<rekordbox.spectrum_size; i++) {
 801617c:	4613      	mov	r3, r2
	}
	i = 0;
	uint8_t l = 0;
	while(i++  < rekordbox.spectrum_size) {
 801617e:	1c5a      	adds	r2, r3, #1
 8016180:	492f      	ldr	r1, [pc, #188]	; (8016240 <DecodeRekordboxFiles+0xcfc>)
 8016182:	f8d1 1250 	ldr.w	r1, [r1, #592]	; 0x250
 8016186:	4299      	cmp	r1, r3
 8016188:	d926      	bls.n	80161d8 <DecodeRekordboxFiles+0xc94>
		if((i % 9000) == 0) {
 801618a:	4b32      	ldr	r3, [pc, #200]	; (8016254 <DecodeRekordboxFiles+0xd10>)
 801618c:	fba3 4302 	umull	r4, r3, r3, r2
 8016190:	0b5b      	lsrs	r3, r3, #13
 8016192:	f242 3428 	movw	r4, #9000	; 0x2328
 8016196:	fb04 2313 	mls	r3, r4, r3, r2
 801619a:	2b00      	cmp	r3, #0
 801619c:	d1ee      	bne.n	801617c <DecodeRekordboxFiles+0xc38>
			rekordbox.remminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * (rekordbox.spectrum_size - i) / rekordbox.spectrum_size);
 801619e:	4c2e      	ldr	r4, [pc, #184]	; (8016258 <DecodeRekordboxFiles+0xd14>)
 80161a0:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80161a4:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80161a8:	1a8e      	subs	r6, r1, r2
 80161aa:	fb03 f606 	mul.w	r6, r3, r6
 80161ae:	fbb6 f6f1 	udiv	r6, r6, r1
 80161b2:	f241 1528 	movw	r5, #4392	; 0x1128
 80161b6:	4405      	add	r5, r0
 80161b8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80161bc:	80ae      	strh	r6, [r5, #4]
			rekordbox.elminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * i / rekordbox.spectrum_size);
 80161be:	fb02 f303 	mul.w	r3, r2, r3
 80161c2:	fbb3 f1f1 	udiv	r1, r3, r1
 80161c6:	f241 1368 	movw	r3, #4456	; 0x1168
 80161ca:	4403      	add	r3, r0
 80161cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80161d0:	80a1      	strh	r1, [r4, #4]
			l++;
 80161d2:	3001      	adds	r0, #1
 80161d4:	b2c0      	uxtb	r0, r0
 80161d6:	e7d1      	b.n	801617c <DecodeRekordboxFiles+0xc38>
		}
	}
	rekordbox.minutes = l;
 80161d8:	4b19      	ldr	r3, [pc, #100]	; (8016240 <DecodeRekordboxFiles+0xcfc>)
 80161da:	f883 0354 	strb.w	r0, [r3, #852]	; 0x354
	rekordbox.state = 1;
 80161de:	2201      	movs	r2, #1
 80161e0:	f883 2b98 	strb.w	r2, [r3, #2968]	; 0xb98
	return 0;
 80161e4:	2000      	movs	r0, #0
}
 80161e6:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
 80161ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(FindToken(path_token) != 0) return 1;
 80161ee:	2001      	movs	r0, #1
 80161f0:	e7f9      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(qtz_token) != 0) return 1;
 80161f2:	2001      	movs	r0, #1
 80161f4:	e7f7      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(wave_token) != 0) return 1;
 80161f6:	2001      	movs	r0, #1
 80161f8:	e7f5      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(cob_token) != 0) return 1;
 80161fa:	2001      	movs	r0, #1
 80161fc:	e7f3      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
			if(FindToken(cue_token) != 0) return 1;
 80161fe:	2001      	movs	r0, #1
 8016200:	e7f1      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(cob_token) != 0) return 1;
 8016202:	2001      	movs	r0, #1
 8016204:	e7ef      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
			if(FindToken(cue_token) != 0) return 1;
 8016206:	2001      	movs	r0, #1
 8016208:	e7ed      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(wv3_token) != 0) return 1;
 801620a:	2001      	movs	r0, #1
 801620c:	e7eb      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(path_token) != 0) return 1;
 801620e:	2001      	movs	r0, #1
 8016210:	e7e9      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(qtz_token) != 0) return 1;
 8016212:	2001      	movs	r0, #1
 8016214:	e7e7      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(wave_token) != 0) return 1;
 8016216:	2001      	movs	r0, #1
 8016218:	e7e5      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(cob_token) != 0) return 1;
 801621a:	2001      	movs	r0, #1
 801621c:	e7e3      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
			if(FindToken(cue_token) != 0) return 1;
 801621e:	2001      	movs	r0, #1
 8016220:	e7e1      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(cob_token) != 0) return 1;
 8016222:	2001      	movs	r0, #1
 8016224:	e7df      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
			if(FindToken(cue_token) != 0) return 1;
 8016226:	2001      	movs	r0, #1
 8016228:	e7dd      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
		if(FindToken(wv3_token) != 0) return 1;
 801622a:	2001      	movs	r0, #1
 801622c:	e7db      	b.n	80161e6 <DecodeRekordboxFiles+0xca2>
 801622e:	bf00      	nop
 8016230:	2000008c 	.word	0x2000008c
 8016234:	2000e37c 	.word	0x2000e37c
 8016238:	200007ac 	.word	0x200007ac
 801623c:	200017b8 	.word	0x200017b8
 8016240:	20016620 	.word	0x20016620
 8016244:	200171bc 	.word	0x200171bc
 8016248:	c00ff000 	.word	0xc00ff000
 801624c:	20000054 	.word	0x20000054
 8016250:	cccccccd 	.word	0xcccccccd
 8016254:	e90452d5 	.word	0xe90452d5
 8016258:	20014620 	.word	0x20014620

0801625c <GetFileName>:

uint8_t GetFileName(TCHAR *path)
{
 801625c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801625e:	b0c1      	sub	sp, #260	; 0x104
 8016260:	4604      	mov	r4, r0
	uint32_t data_size = 0;
	uint8_t k;
	uint32_t i;
	uint8_t res = FR_OK;
	for(i = 0; i < 255; i++) rekordbox.filename[i] = 0;
 8016262:	2300      	movs	r3, #0
 8016264:	e005      	b.n	8016272 <GetFileName+0x16>
 8016266:	4a4c      	ldr	r2, [pc, #304]	; (8016398 <GetFileName+0x13c>)
 8016268:	f04f 0c00 	mov.w	ip, #0
 801626c:	f822 c013 	strh.w	ip, [r2, r3, lsl #1]
 8016270:	3301      	adds	r3, #1
 8016272:	2bfe      	cmp	r3, #254	; 0xfe
 8016274:	d9f7      	bls.n	8016266 <GetFileName+0xa>
	char filename[255] = {0};
 8016276:	2100      	movs	r1, #0
 8016278:	9100      	str	r1, [sp, #0]
 801627a:	22fb      	movs	r2, #251	; 0xfb
 801627c:	a801      	add	r0, sp, #4
 801627e:	f003 fdbd 	bl	8019dfc <memset>

	res = f_open(&MyFile, path, FA_READ);
 8016282:	2201      	movs	r2, #1
 8016284:	4621      	mov	r1, r4
 8016286:	4845      	ldr	r0, [pc, #276]	; (801639c <GetFileName+0x140>)
 8016288:	f7f5 fc8e 	bl	800bba8 <f_open>
	if(res == FR_OK)
 801628c:	2800      	cmp	r0, #0
 801628e:	d17b      	bne.n	8016388 <GetFileName+0x12c>
	{
		if(FindToken(path_token) != 0) return 1;
 8016290:	4843      	ldr	r0, [pc, #268]	; (80163a0 <GetFileName+0x144>)
 8016292:	f7ff f911 	bl	80154b8 <FindToken>
 8016296:	2800      	cmp	r0, #0
 8016298:	d17c      	bne.n	8016394 <GetFileName+0x138>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801629a:	4b42      	ldr	r3, [pc, #264]	; (80163a4 <GetFileName+0x148>)
 801629c:	2208      	movs	r2, #8
 801629e:	4942      	ldr	r1, [pc, #264]	; (80163a8 <GetFileName+0x14c>)
 80162a0:	483e      	ldr	r0, [pc, #248]	; (801639c <GetFileName+0x140>)
 80162a2:	f7f5 fcf0 	bl	800bc86 <f_read>
 80162a6:	2800      	cmp	r0, #0
 80162a8:	d1f7      	bne.n	801629a <GetFileName+0x3e>
		data_size = GetLongNumber();
 80162aa:	f7ff f8e1 	bl	8015470 <GetLongNumber>
 80162ae:	4604      	mov	r4, r0
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 80162b0:	4b3c      	ldr	r3, [pc, #240]	; (80163a4 <GetFileName+0x148>)
 80162b2:	4622      	mov	r2, r4
 80162b4:	4669      	mov	r1, sp
 80162b6:	4839      	ldr	r0, [pc, #228]	; (801639c <GetFileName+0x140>)
 80162b8:	f7f5 fce5 	bl	800bc86 <f_read>
 80162bc:	4605      	mov	r5, r0
 80162be:	2800      	cmp	r0, #0
 80162c0:	d1f6      	bne.n	80162b0 <GetFileName+0x54>
		i = 0;
		k = 0;
 80162c2:	4606      	mov	r6, r0
		i = 0;
 80162c4:	2700      	movs	r7, #0
 80162c6:	e011      	b.n	80162ec <GetFileName+0x90>
		while(i < data_size) {
			WCHAR c = filename[i];
 80162c8:	f81d 3007 	ldrb.w	r3, [sp, r7]
			c <<= 8;
			i++;
 80162cc:	1c7a      	adds	r2, r7, #1
			c |= filename[i];
 80162ce:	f81d 0002 	ldrb.w	r0, [sp, r2]
 80162d2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			i++;
 80162d6:	3702      	adds	r7, #2
			rekordbox.filename[k] = c;
 80162d8:	4b2f      	ldr	r3, [pc, #188]	; (8016398 <GetFileName+0x13c>)
 80162da:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
			filename[k] = ff_convert(c, 0);
 80162de:	2100      	movs	r1, #0
 80162e0:	f7f5 ffb0 	bl	800c244 <ff_convert>
 80162e4:	f80d 0006 	strb.w	r0, [sp, r6]
			k++;
 80162e8:	1c73      	adds	r3, r6, #1
 80162ea:	b2de      	uxtb	r6, r3
		while(i < data_size) {
 80162ec:	42a7      	cmp	r7, r4
 80162ee:	d3eb      	bcc.n	80162c8 <GetFileName+0x6c>
		}
		for(i = k; i < data_size; i++) filename[i] = 0;
 80162f0:	4633      	mov	r3, r6
 80162f2:	e003      	b.n	80162fc <GetFileName+0xa0>
 80162f4:	2200      	movs	r2, #0
 80162f6:	f80d 2003 	strb.w	r2, [sp, r3]
 80162fa:	3301      	adds	r3, #1
 80162fc:	42a3      	cmp	r3, r4
 80162fe:	d3f9      	bcc.n	80162f4 <GetFileName+0x98>
		i = data_size;
 8016300:	4623      	mov	r3, r4
 8016302:	e000      	b.n	8016306 <GetFileName+0xaa>
		while((i > 0) && (filename[i] != '.')) i--;
 8016304:	3b01      	subs	r3, #1
 8016306:	b19b      	cbz	r3, 8016330 <GetFileName+0xd4>
 8016308:	f81d 2003 	ldrb.w	r2, [sp, r3]
 801630c:	2a2e      	cmp	r2, #46	; 0x2e
 801630e:	d1f9      	bne.n	8016304 <GetFileName+0xa8>
 8016310:	462a      	mov	r2, r5
 8016312:	e000      	b.n	8016316 <GetFileName+0xba>
		{
			if(filename[i] >= 32) {
				rekordbox.filetype[k] = filename[i];
				k++;
			}
			i++;
 8016314:	3301      	adds	r3, #1
		while(k < 5)
 8016316:	2a04      	cmp	r2, #4
 8016318:	d80c      	bhi.n	8016334 <GetFileName+0xd8>
			if(filename[i] >= 32) {
 801631a:	f81d 1003 	ldrb.w	r1, [sp, r3]
 801631e:	291f      	cmp	r1, #31
 8016320:	d9f8      	bls.n	8016314 <GetFileName+0xb8>
				rekordbox.filetype[k] = filename[i];
 8016322:	481d      	ldr	r0, [pc, #116]	; (8016398 <GetFileName+0x13c>)
 8016324:	4410      	add	r0, r2
 8016326:	f880 12fd 	strb.w	r1, [r0, #765]	; 0x2fd
				k++;
 801632a:	3201      	adds	r2, #1
 801632c:	b2d2      	uxtb	r2, r2
 801632e:	e7f1      	b.n	8016314 <GetFileName+0xb8>
 8016330:	462a      	mov	r2, r5
 8016332:	e7f0      	b.n	8016316 <GetFileName+0xba>
		}
		rekordbox.filetype[4] = 0;
 8016334:	2300      	movs	r3, #0
 8016336:	4a18      	ldr	r2, [pc, #96]	; (8016398 <GetFileName+0x13c>)
 8016338:	f882 3301 	strb.w	r3, [r2, #769]	; 0x301

		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 801633c:	e005      	b.n	801634a <GetFileName+0xee>
 801633e:	4a16      	ldr	r2, [pc, #88]	; (8016398 <GetFileName+0x13c>)
 8016340:	441a      	add	r2, r3
 8016342:	2100      	movs	r1, #0
 8016344:	f882 11fe 	strb.w	r1, [r2, #510]	; 0x1fe
 8016348:	3301      	adds	r3, #1
 801634a:	2bfe      	cmp	r3, #254	; 0xfe
 801634c:	d9f7      	bls.n	801633e <GetFileName+0xe2>
		i = data_size;
 801634e:	4623      	mov	r3, r4
 8016350:	e000      	b.n	8016354 <GetFileName+0xf8>
		while((i > 0) && (filename[i] != '/')) i--;
 8016352:	3b01      	subs	r3, #1
 8016354:	b11b      	cbz	r3, 801635e <GetFileName+0x102>
 8016356:	f81d 2003 	ldrb.w	r2, [sp, r3]
 801635a:	2a2f      	cmp	r2, #47	; 0x2f
 801635c:	d1f9      	bne.n	8016352 <GetFileName+0xf6>
		k = 0;
		i++;
 801635e:	3301      	adds	r3, #1
		while(i < data_size)
 8016360:	e000      	b.n	8016364 <GetFileName+0x108>
		{
			if(filename[i] >= 32) {
				rekordbox.file[k] = filename[i];
				k++;
			}
			i++;
 8016362:	3301      	adds	r3, #1
		while(i < data_size)
 8016364:	42a3      	cmp	r3, r4
 8016366:	d20a      	bcs.n	801637e <GetFileName+0x122>
			if(filename[i] >= 32) {
 8016368:	f81d 2003 	ldrb.w	r2, [sp, r3]
 801636c:	2a1f      	cmp	r2, #31
 801636e:	d9f8      	bls.n	8016362 <GetFileName+0x106>
				rekordbox.file[k] = filename[i];
 8016370:	4909      	ldr	r1, [pc, #36]	; (8016398 <GetFileName+0x13c>)
 8016372:	4429      	add	r1, r5
 8016374:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
				k++;
 8016378:	3501      	adds	r5, #1
 801637a:	b2ed      	uxtb	r5, r5
 801637c:	e7f1      	b.n	8016362 <GetFileName+0x106>
		}
		rekordbox.file[i] = 0;
 801637e:	4a06      	ldr	r2, [pc, #24]	; (8016398 <GetFileName+0x13c>)
 8016380:	4413      	add	r3, r2
 8016382:	2200      	movs	r2, #0
 8016384:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
	}
	f_close(&MyFile);
 8016388:	4804      	ldr	r0, [pc, #16]	; (801639c <GetFileName+0x140>)
 801638a:	f7f5 fd43 	bl	800be14 <f_close>
	return 0;
 801638e:	2000      	movs	r0, #0
}
 8016390:	b041      	add	sp, #260	; 0x104
 8016392:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(FindToken(path_token) != 0) return 1;
 8016394:	2001      	movs	r0, #1
 8016396:	e7fb      	b.n	8016390 <GetFileName+0x134>
 8016398:	20014620 	.word	0x20014620
 801639c:	200017b8 	.word	0x200017b8
 80163a0:	20000074 	.word	0x20000074
 80163a4:	2000e37c 	.word	0x2000e37c
 80163a8:	200007ac 	.word	0x200007ac

080163ac <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
DMA_HandleTypeDef hdma_sai2_a;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80163ac:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 80163ae:	4818      	ldr	r0, [pc, #96]	; (8016410 <MX_SAI2_Init+0x64>)
 80163b0:	4b18      	ldr	r3, [pc, #96]	; (8016414 <MX_SAI2_Init+0x68>)
 80163b2:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80163b4:	2300      	movs	r3, #0
 80163b6:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80163b8:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 80163ba:	2280      	movs	r2, #128	; 0x80
 80163bc:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80163be:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80163c0:	2201      	movs	r2, #1
 80163c2:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80163c4:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80163c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80163ca:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80163cc:	6143      	str	r3, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80163ce:	6182      	str	r2, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80163d0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80163d4:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80163d6:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80163d8:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80163da:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80163dc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 80163de:	2240      	movs	r2, #64	; 0x40
 80163e0:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 80163e2:	2220      	movs	r2, #32
 80163e4:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80163e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80163ea:	6482      	str	r2, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80163ec:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80163ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80163f2:	6502      	str	r2, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80163f4:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80163f6:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 80163f8:	2304      	movs	r3, #4
 80163fa:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x0000000F;
 80163fc:	230f      	movs	r3, #15
 80163fe:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8016400:	f7ef f834 	bl	800546c <HAL_SAI_Init>
 8016404:	b900      	cbnz	r0, 8016408 <MX_SAI2_Init+0x5c>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8016406:	bd08      	pop	{r3, pc}
    Error_Handler();
 8016408:	f7fe fb6c 	bl	8014ae4 <Error_Handler>
}
 801640c:	e7fb      	b.n	8016406 <MX_SAI2_Init+0x5a>
 801640e:	bf00      	nop
 8016410:	20017228 	.word	0x20017228
 8016414:	40015c04 	.word	0x40015c04

08016418 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8016418:	b530      	push	{r4, r5, lr}
 801641a:	b0a9      	sub	sp, #164	; 0xa4
 801641c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801641e:	2284      	movs	r2, #132	; 0x84
 8016420:	2100      	movs	r1, #0
 8016422:	a802      	add	r0, sp, #8
 8016424:	f003 fcea 	bl	8019dfc <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8016428:	6822      	ldr	r2, [r4, #0]
 801642a:	4b2d      	ldr	r3, [pc, #180]	; (80164e0 <HAL_SAI_MspInit+0xc8>)
 801642c:	429a      	cmp	r2, r3
 801642e:	d001      	beq.n	8016434 <HAL_SAI_MspInit+0x1c>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
    }
}
 8016430:	b029      	add	sp, #164	; 0xa4
 8016432:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8016434:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016438:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 801643a:	2364      	movs	r3, #100	; 0x64
 801643c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 801643e:	2302      	movs	r3, #2
 8016440:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8016442:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8016444:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8016446:	2301      	movs	r3, #1
 8016448:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 801644a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801644e:	9312      	str	r3, [sp, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016450:	a802      	add	r0, sp, #8
 8016452:	f7ee f8ff 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8016456:	2800      	cmp	r0, #0
 8016458:	d13b      	bne.n	80164d2 <HAL_SAI_MspInit+0xba>
    if (SAI2_client == 0)
 801645a:	4b22      	ldr	r3, [pc, #136]	; (80164e4 <HAL_SAI_MspInit+0xcc>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	b94b      	cbnz	r3, 8016474 <HAL_SAI_MspInit+0x5c>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8016460:	4a21      	ldr	r2, [pc, #132]	; (80164e8 <HAL_SAI_MspInit+0xd0>)
 8016462:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8016464:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8016468:	6451      	str	r1, [r2, #68]	; 0x44
 801646a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801646c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8016470:	9201      	str	r2, [sp, #4]
 8016472:	9a01      	ldr	r2, [sp, #4]
    SAI2_client ++;
 8016474:	3301      	adds	r3, #1
 8016476:	4a1b      	ldr	r2, [pc, #108]	; (80164e4 <HAL_SAI_MspInit+0xcc>)
 8016478:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 801647a:	23f0      	movs	r3, #240	; 0xf0
 801647c:	9323      	str	r3, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801647e:	2302      	movs	r3, #2
 8016480:	9324      	str	r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016482:	2500      	movs	r5, #0
 8016484:	9525      	str	r5, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8016486:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8016488:	230a      	movs	r3, #10
 801648a:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801648c:	a923      	add	r1, sp, #140	; 0x8c
 801648e:	4817      	ldr	r0, [pc, #92]	; (80164ec <HAL_SAI_MspInit+0xd4>)
 8016490:	f7eb fd3e 	bl	8001f10 <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA2_Stream4;
 8016494:	4816      	ldr	r0, [pc, #88]	; (80164f0 <HAL_SAI_MspInit+0xd8>)
 8016496:	4b17      	ldr	r3, [pc, #92]	; (80164f4 <HAL_SAI_MspInit+0xdc>)
 8016498:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 801649a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 801649e:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80164a0:	2340      	movs	r3, #64	; 0x40
 80164a2:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80164a4:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80164a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164aa:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80164ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80164b0:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80164b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80164b6:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80164b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80164bc:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80164be:	6205      	str	r5, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80164c0:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80164c2:	f7eb f81f 	bl	8001504 <HAL_DMA_Init>
 80164c6:	b938      	cbnz	r0, 80164d8 <HAL_SAI_MspInit+0xc0>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 80164c8:	4b09      	ldr	r3, [pc, #36]	; (80164f0 <HAL_SAI_MspInit+0xd8>)
 80164ca:	6723      	str	r3, [r4, #112]	; 0x70
 80164cc:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 80164ce:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80164d0:	e7ae      	b.n	8016430 <HAL_SAI_MspInit+0x18>
      Error_Handler();
 80164d2:	f7fe fb07 	bl	8014ae4 <Error_Handler>
 80164d6:	e7c0      	b.n	801645a <HAL_SAI_MspInit+0x42>
      Error_Handler();
 80164d8:	f7fe fb04 	bl	8014ae4 <Error_Handler>
 80164dc:	e7f4      	b.n	80164c8 <HAL_SAI_MspInit+0xb0>
 80164de:	bf00      	nop
 80164e0:	40015c04 	.word	0x40015c04
 80164e4:	200171c4 	.word	0x200171c4
 80164e8:	40023800 	.word	0x40023800
 80164ec:	40022000 	.word	0x40022000
 80164f0:	200171c8 	.word	0x200171c8
 80164f4:	40026470 	.word	0x40026470

080164f8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80164f8:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 80164fa:	4b07      	ldr	r3, [pc, #28]	; (8016518 <SD_CheckStatus+0x20>)
 80164fc:	2201      	movs	r2, #1
 80164fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8016500:	f7fa ffa2 	bl	8011448 <BSP_SD_GetCardState>
 8016504:	b920      	cbnz	r0, 8016510 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8016506:	4a04      	ldr	r2, [pc, #16]	; (8016518 <SD_CheckStatus+0x20>)
 8016508:	7813      	ldrb	r3, [r2, #0]
 801650a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801650e:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8016510:	4b01      	ldr	r3, [pc, #4]	; (8016518 <SD_CheckStatus+0x20>)
 8016512:	7818      	ldrb	r0, [r3, #0]
}
 8016514:	bd08      	pop	{r3, pc}
 8016516:	bf00      	nop
 8016518:	20000091 	.word	0x20000091

0801651c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801651c:	b510      	push	{r4, lr}
 801651e:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8016520:	4b07      	ldr	r3, [pc, #28]	; (8016540 <SD_initialize+0x24>)
 8016522:	2201      	movs	r2, #1
 8016524:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8016526:	f7fa ffb1 	bl	801148c <BSP_SD_Init>
 801652a:	b110      	cbz	r0, 8016532 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801652c:	4b04      	ldr	r3, [pc, #16]	; (8016540 <SD_initialize+0x24>)
 801652e:	7818      	ldrb	r0, [r3, #0]
}
 8016530:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8016532:	4620      	mov	r0, r4
 8016534:	f7ff ffe0 	bl	80164f8 <SD_CheckStatus>
 8016538:	4b01      	ldr	r3, [pc, #4]	; (8016540 <SD_initialize+0x24>)
 801653a:	7018      	strb	r0, [r3, #0]
 801653c:	e7f6      	b.n	801652c <SD_initialize+0x10>
 801653e:	bf00      	nop
 8016540:	20000091 	.word	0x20000091

08016544 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8016544:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8016546:	f7ff ffd7 	bl	80164f8 <SD_CheckStatus>
}
 801654a:	bd08      	pop	{r3, pc}

0801654c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801654c:	b508      	push	{r3, lr}
 801654e:	4608      	mov	r0, r1
 8016550:	4611      	mov	r1, r2
 8016552:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8016554:	f04f 33ff 	mov.w	r3, #4294967295
 8016558:	f7fa ff56 	bl	8011408 <BSP_SD_ReadBlocks>
 801655c:	b930      	cbnz	r0, 801656c <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 801655e:	f7fa ff73 	bl	8011448 <BSP_SD_GetCardState>
 8016562:	4603      	mov	r3, r0
 8016564:	2800      	cmp	r0, #0
 8016566:	d1fa      	bne.n	801655e <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8016568:	4618      	mov	r0, r3
 801656a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 801656c:	2301      	movs	r3, #1
 801656e:	e7fb      	b.n	8016568 <SD_read+0x1c>

08016570 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016570:	b508      	push	{r3, lr}
 8016572:	4608      	mov	r0, r1
 8016574:	4611      	mov	r1, r2
 8016576:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8016578:	f04f 33ff 	mov.w	r3, #4294967295
 801657c:	f7fa ff54 	bl	8011428 <BSP_SD_WriteBlocks>
 8016580:	b930      	cbnz	r0, 8016590 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8016582:	f7fa ff61 	bl	8011448 <BSP_SD_GetCardState>
 8016586:	4603      	mov	r3, r0
 8016588:	2800      	cmp	r0, #0
 801658a:	d1fa      	bne.n	8016582 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 801658c:	4618      	mov	r0, r3
 801658e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8016590:	2301      	movs	r3, #1
 8016592:	e7fb      	b.n	801658c <SD_write+0x1c>

08016594 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016594:	b530      	push	{r4, r5, lr}
 8016596:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8016598:	4b13      	ldr	r3, [pc, #76]	; (80165e8 <SD_ioctl+0x54>)
 801659a:	7818      	ldrb	r0, [r3, #0]
 801659c:	f010 0401 	ands.w	r4, r0, #1
 80165a0:	d11b      	bne.n	80165da <SD_ioctl+0x46>
 80165a2:	4615      	mov	r5, r2

  switch (cmd)
 80165a4:	2903      	cmp	r1, #3
 80165a6:	d81c      	bhi.n	80165e2 <SD_ioctl+0x4e>
 80165a8:	e8df f001 	tbb	[pc, r1]
 80165ac:	100a0402 	.word	0x100a0402
 80165b0:	460c      	mov	r4, r1
 80165b2:	e013      	b.n	80165dc <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80165b4:	4668      	mov	r0, sp
 80165b6:	f7fa ff51 	bl	801145c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80165ba:	9b06      	ldr	r3, [sp, #24]
 80165bc:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 80165be:	e00d      	b.n	80165dc <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80165c0:	4668      	mov	r0, sp
 80165c2:	f7fa ff4b 	bl	801145c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80165c6:	9b07      	ldr	r3, [sp, #28]
 80165c8:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 80165ca:	e007      	b.n	80165dc <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80165cc:	4668      	mov	r0, sp
 80165ce:	f7fa ff45 	bl	801145c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80165d2:	9b07      	ldr	r3, [sp, #28]
 80165d4:	0a5b      	lsrs	r3, r3, #9
 80165d6:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 80165d8:	e000      	b.n	80165dc <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80165da:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 80165dc:	4620      	mov	r0, r4
 80165de:	b009      	add	sp, #36	; 0x24
 80165e0:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 80165e2:	2404      	movs	r4, #4
 80165e4:	e7fa      	b.n	80165dc <SD_ioctl+0x48>
 80165e6:	bf00      	nop
 80165e8:	20000091 	.word	0x20000091

080165ec <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80165ec:	4b07      	ldr	r3, [pc, #28]	; (801660c <MX_SDMMC1_SD_Init+0x20>)
 80165ee:	4a08      	ldr	r2, [pc, #32]	; (8016610 <MX_SDMMC1_SD_Init+0x24>)
 80165f0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80165f2:	2200      	movs	r2, #0
 80165f4:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80165f6:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80165f8:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80165fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80165fe:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8016600:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016604:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 2;
 8016606:	2202      	movs	r2, #2
 8016608:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 801660a:	4770      	bx	lr
 801660c:	200172ac 	.word	0x200172ac
 8016610:	40012c00 	.word	0x40012c00

08016614 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8016614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016616:	b0ab      	sub	sp, #172	; 0xac
 8016618:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801661a:	2100      	movs	r1, #0
 801661c:	9125      	str	r1, [sp, #148]	; 0x94
 801661e:	9126      	str	r1, [sp, #152]	; 0x98
 8016620:	9127      	str	r1, [sp, #156]	; 0x9c
 8016622:	9128      	str	r1, [sp, #160]	; 0xa0
 8016624:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016626:	2284      	movs	r2, #132	; 0x84
 8016628:	a804      	add	r0, sp, #16
 801662a:	f003 fbe7 	bl	8019dfc <memset>
  if(sdHandle->Instance==SDMMC1)
 801662e:	6822      	ldr	r2, [r4, #0]
 8016630:	4b22      	ldr	r3, [pc, #136]	; (80166bc <HAL_SD_MspInit+0xa8>)
 8016632:	429a      	cmp	r2, r3
 8016634:	d001      	beq.n	801663a <HAL_SD_MspInit+0x26>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8016636:	b02b      	add	sp, #172	; 0xac
 8016638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 801663a:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 801663e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016640:	a804      	add	r0, sp, #16
 8016642:	f7ee f807 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8016646:	2800      	cmp	r0, #0
 8016648:	d135      	bne.n	80166b6 <HAL_SD_MspInit+0xa2>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801664a:	4b1d      	ldr	r3, [pc, #116]	; (80166c0 <HAL_SD_MspInit+0xac>)
 801664c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801664e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016652:	645a      	str	r2, [r3, #68]	; 0x44
 8016654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016656:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801665a:	9201      	str	r2, [sp, #4]
 801665c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801665e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016660:	f042 0204 	orr.w	r2, r2, #4
 8016664:	631a      	str	r2, [r3, #48]	; 0x30
 8016666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016668:	f002 0204 	and.w	r2, r2, #4
 801666c:	9202      	str	r2, [sp, #8]
 801666e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8016670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016672:	f042 0208 	orr.w	r2, r2, #8
 8016676:	631a      	str	r2, [r3, #48]	; 0x30
 8016678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801667a:	f003 0308 	and.w	r3, r3, #8
 801667e:	9303      	str	r3, [sp, #12]
 8016680:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8016682:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8016686:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016688:	2702      	movs	r7, #2
 801668a:	9726      	str	r7, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801668c:	2600      	movs	r6, #0
 801668e:	9627      	str	r6, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016690:	2503      	movs	r5, #3
 8016692:	9528      	str	r5, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8016694:	240c      	movs	r4, #12
 8016696:	9429      	str	r4, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016698:	a925      	add	r1, sp, #148	; 0x94
 801669a:	480a      	ldr	r0, [pc, #40]	; (80166c4 <HAL_SD_MspInit+0xb0>)
 801669c:	f7eb fc38 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80166a0:	2304      	movs	r3, #4
 80166a2:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80166a4:	9726      	str	r7, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166a6:	9627      	str	r6, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80166a8:	9528      	str	r5, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80166aa:	9429      	str	r4, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80166ac:	a925      	add	r1, sp, #148	; 0x94
 80166ae:	4806      	ldr	r0, [pc, #24]	; (80166c8 <HAL_SD_MspInit+0xb4>)
 80166b0:	f7eb fc2e 	bl	8001f10 <HAL_GPIO_Init>
}
 80166b4:	e7bf      	b.n	8016636 <HAL_SD_MspInit+0x22>
      Error_Handler();
 80166b6:	f7fe fa15 	bl	8014ae4 <Error_Handler>
 80166ba:	e7c6      	b.n	801664a <HAL_SD_MspInit+0x36>
 80166bc:	40012c00 	.word	0x40012c00
 80166c0:	40023800 	.word	0x40023800
 80166c4:	40020800 	.word	0x40020800
 80166c8:	40020c00 	.word	0x40020c00

080166cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80166cc:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80166ce:	480f      	ldr	r0, [pc, #60]	; (801670c <MX_SPI2_Init+0x40>)
 80166d0:	4b0f      	ldr	r3, [pc, #60]	; (8016710 <MX_SPI2_Init+0x44>)
 80166d2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80166d4:	2300      	movs	r3, #0
 80166d6:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80166d8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80166da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80166de:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80166e0:	2202      	movs	r2, #2
 80166e2:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80166e4:	2201      	movs	r2, #1
 80166e6:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80166e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80166ec:	6182      	str	r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80166ee:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80166f0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80166f2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80166f4:	2207      	movs	r2, #7
 80166f6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80166f8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80166fa:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80166fc:	f7f0 f954 	bl	80069a8 <HAL_SPI_Init>
 8016700:	b900      	cbnz	r0, 8016704 <MX_SPI2_Init+0x38>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8016702:	bd08      	pop	{r3, pc}
    Error_Handler();
 8016704:	f7fe f9ee 	bl	8014ae4 <Error_Handler>
}
 8016708:	e7fb      	b.n	8016702 <MX_SPI2_Init+0x36>
 801670a:	bf00      	nop
 801670c:	20017330 	.word	0x20017330
 8016710:	40003800 	.word	0x40003800

08016714 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8016714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016716:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016718:	2300      	movs	r3, #0
 801671a:	9303      	str	r3, [sp, #12]
 801671c:	9304      	str	r3, [sp, #16]
 801671e:	9305      	str	r3, [sp, #20]
 8016720:	9306      	str	r3, [sp, #24]
 8016722:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8016724:	6802      	ldr	r2, [r0, #0]
 8016726:	4b21      	ldr	r3, [pc, #132]	; (80167ac <HAL_SPI_MspInit+0x98>)
 8016728:	429a      	cmp	r2, r3
 801672a:	d001      	beq.n	8016730 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801672c:	b009      	add	sp, #36	; 0x24
 801672e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8016730:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8016734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801673a:	641a      	str	r2, [r3, #64]	; 0x40
 801673c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801673e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8016742:	9200      	str	r2, [sp, #0]
 8016744:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8016746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801674c:	631a      	str	r2, [r3, #48]	; 0x30
 801674e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016750:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016754:	9201      	str	r2, [sp, #4]
 8016756:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801675a:	f042 0202 	orr.w	r2, r2, #2
 801675e:	631a      	str	r2, [r3, #48]	; 0x30
 8016760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016762:	f003 0302 	and.w	r3, r3, #2
 8016766:	9302      	str	r3, [sp, #8]
 8016768:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801676a:	2402      	movs	r4, #2
 801676c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801676e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016770:	2703      	movs	r7, #3
 8016772:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8016774:	2605      	movs	r6, #5
 8016776:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8016778:	a903      	add	r1, sp, #12
 801677a:	480d      	ldr	r0, [pc, #52]	; (80167b0 <HAL_SPI_MspInit+0x9c>)
 801677c:	f7eb fbc8 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8016780:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8016784:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016786:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016788:	2500      	movs	r5, #0
 801678a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801678c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801678e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016790:	a903      	add	r1, sp, #12
 8016792:	4808      	ldr	r0, [pc, #32]	; (80167b4 <HAL_SPI_MspInit+0xa0>)
 8016794:	f7eb fbbc 	bl	8001f10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8016798:	462a      	mov	r2, r5
 801679a:	4621      	mov	r1, r4
 801679c:	2024      	movs	r0, #36	; 0x24
 801679e:	f7ea fd89 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80167a2:	2024      	movs	r0, #36	; 0x24
 80167a4:	f7ea fdca 	bl	800133c <HAL_NVIC_EnableIRQ>
}
 80167a8:	e7c0      	b.n	801672c <HAL_SPI_MspInit+0x18>
 80167aa:	bf00      	nop
 80167ac:	40003800 	.word	0x40003800
 80167b0:	40022000 	.word	0x40022000
 80167b4:	40020400 	.word	0x40020400

080167b8 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 80167b8:	b510      	push	{r4, lr}
  /* Initialize the hsai_BlockA2 Instance parameter */
  hsai_BlockA2.Instance = AUDIO_OUT_SAIx;
 80167ba:	4c16      	ldr	r4, [pc, #88]	; (8016814 <SAIx_Out_Init+0x5c>)
 80167bc:	4b16      	ldr	r3, [pc, #88]	; (8016818 <SAIx_Out_Init+0x60>)
 80167be:	6023      	str	r3, [r4, #0]
  //__HAL_SAI_DISABLE(&hsai_BlockA2);
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  hsai_BlockA2.Init.AudioFrequency = AudioFreq;
 80167c0:	61e0      	str	r0, [r4, #28]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80167c2:	2300      	movs	r3, #0
 80167c4:	6063      	str	r3, [r4, #4]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80167c6:	6163      	str	r3, [r4, #20]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80167c8:	6323      	str	r3, [r4, #48]	; 0x30
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 80167ca:	2280      	movs	r2, #128	; 0x80
 80167cc:	6362      	str	r2, [r4, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80167ce:	63a3      	str	r3, [r4, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80167d0:	2201      	movs	r2, #1
 80167d2:	63e2      	str	r2, [r4, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80167d4:	60a3      	str	r3, [r4, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80167d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80167da:	6121      	str	r1, [r4, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80167dc:	61a2      	str	r2, [r4, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  hsai_BlockA2.FrameInit.FrameLength = 64;
 80167de:	2240      	movs	r2, #64	; 0x40
 80167e0:	6422      	str	r2, [r4, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 80167e2:	2220      	movs	r2, #32
 80167e4:	6462      	str	r2, [r4, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80167e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80167ea:	64a2      	str	r2, [r4, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80167ec:	64e3      	str	r3, [r4, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80167ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80167f2:	6522      	str	r2, [r4, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80167f4:	6563      	str	r3, [r4, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80167f6:	65a3      	str	r3, [r4, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 80167f8:	2304      	movs	r3, #4
 80167fa:	65e3      	str	r3, [r4, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 80167fc:	230f      	movs	r3, #15
 80167fe:	6623      	str	r3, [r4, #96]	; 0x60

  HAL_SAI_Init(&hsai_BlockA2);
 8016800:	4620      	mov	r0, r4
 8016802:	f7ee fe33 	bl	800546c <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 8016806:	6822      	ldr	r2, [r4, #0]
 8016808:	6813      	ldr	r3, [r2, #0]
 801680a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801680e:	6013      	str	r3, [r2, #0]
}
 8016810:	bd10      	pop	{r4, pc}
 8016812:	bf00      	nop
 8016814:	20017228 	.word	0x20017228
 8016818:	40015c04 	.word	0x40015c04

0801681c <BSP_AUDIO_OUT_Play>:
{
 801681c:	b538      	push	{r3, r4, r5, lr}
 801681e:	4605      	mov	r5, r0
 8016820:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8016822:	4b0c      	ldr	r3, [pc, #48]	; (8016854 <BSP_AUDIO_OUT_Play+0x38>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	68db      	ldr	r3, [r3, #12]
 8016828:	b28a      	uxth	r2, r1
 801682a:	4601      	mov	r1, r0
 801682c:	2034      	movs	r0, #52	; 0x34
 801682e:	4798      	blx	r3
 8016830:	b968      	cbnz	r0, 801684e <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8016832:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8016836:	d202      	bcs.n	801683e <BSP_AUDIO_OUT_Play+0x22>
 8016838:	f3c4 024f 	ubfx	r2, r4, #1, #16
 801683c:	e001      	b.n	8016842 <BSP_AUDIO_OUT_Play+0x26>
 801683e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016842:	4629      	mov	r1, r5
 8016844:	4804      	ldr	r0, [pc, #16]	; (8016858 <BSP_AUDIO_OUT_Play+0x3c>)
 8016846:	f7ef f8f5 	bl	8005a34 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 801684a:	2000      	movs	r0, #0
}
 801684c:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 801684e:	2001      	movs	r0, #1
 8016850:	e7fc      	b.n	801684c <BSP_AUDIO_OUT_Play+0x30>
 8016852:	bf00      	nop
 8016854:	20017394 	.word	0x20017394
 8016858:	20017228 	.word	0x20017228

0801685c <BSP_AUDIO_OUT_Pause>:
{    
 801685c:	b508      	push	{r3, lr}
    HAL_SAI_DMAPause(&hsai_BlockA2);
 801685e:	4802      	ldr	r0, [pc, #8]	; (8016868 <BSP_AUDIO_OUT_Pause+0xc>)
 8016860:	f7ef f864 	bl	800592c <HAL_SAI_DMAPause>
}
 8016864:	2000      	movs	r0, #0
 8016866:	bd08      	pop	{r3, pc}
 8016868:	20017228 	.word	0x20017228

0801686c <BSP_AUDIO_OUT_Resume>:
{    
 801686c:	b508      	push	{r3, lr}
    HAL_SAI_DMAResume(&hsai_BlockA2);
 801686e:	4802      	ldr	r0, [pc, #8]	; (8016878 <BSP_AUDIO_OUT_Resume+0xc>)
 8016870:	f7ef f86f 	bl	8005952 <HAL_SAI_DMAResume>
}
 8016874:	2000      	movs	r0, #0
 8016876:	bd08      	pop	{r3, pc}
 8016878:	20017228 	.word	0x20017228

0801687c <BSP_AUDIO_OUT_Stop>:
{
 801687c:	b510      	push	{r4, lr}
 801687e:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&hsai_BlockA2);
 8016880:	4809      	ldr	r0, [pc, #36]	; (80168a8 <BSP_AUDIO_OUT_Stop+0x2c>)
 8016882:	f7ef f882 	bl	800598a <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8016886:	4b09      	ldr	r3, [pc, #36]	; (80168ac <BSP_AUDIO_OUT_Stop+0x30>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	699b      	ldr	r3, [r3, #24]
 801688c:	4621      	mov	r1, r4
 801688e:	2034      	movs	r0, #52	; 0x34
 8016890:	4798      	blx	r3
 8016892:	b938      	cbnz	r0, 80168a4 <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 8016894:	2c01      	cmp	r4, #1
 8016896:	d001      	beq.n	801689c <BSP_AUDIO_OUT_Stop+0x20>
    return AUDIO_OK;
 8016898:	2000      	movs	r0, #0
}
 801689a:	bd10      	pop	{r4, pc}
      HAL_Delay(1);
 801689c:	2001      	movs	r0, #1
 801689e:	f7ea fcd7 	bl	8001250 <HAL_Delay>
 80168a2:	e7f9      	b.n	8016898 <BSP_AUDIO_OUT_Stop+0x1c>
    return AUDIO_ERROR;
 80168a4:	2001      	movs	r0, #1
 80168a6:	e7f8      	b.n	801689a <BSP_AUDIO_OUT_Stop+0x1e>
 80168a8:	20017228 	.word	0x20017228
 80168ac:	20017394 	.word	0x20017394

080168b0 <BSP_AUDIO_OUT_SetVolume>:
{
 80168b0:	b508      	push	{r3, lr}
 80168b2:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80168b4:	4b04      	ldr	r3, [pc, #16]	; (80168c8 <BSP_AUDIO_OUT_SetVolume+0x18>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	6a1b      	ldr	r3, [r3, #32]
 80168ba:	2034      	movs	r0, #52	; 0x34
 80168bc:	4798      	blx	r3
 80168be:	b108      	cbz	r0, 80168c4 <BSP_AUDIO_OUT_SetVolume+0x14>
    return AUDIO_ERROR;
 80168c0:	2001      	movs	r0, #1
}
 80168c2:	bd08      	pop	{r3, pc}
    return AUDIO_OK;
 80168c4:	2000      	movs	r0, #0
 80168c6:	e7fc      	b.n	80168c2 <BSP_AUDIO_OUT_SetVolume+0x12>
 80168c8:	20017394 	.word	0x20017394

080168cc <HAL_SAI_TxCpltCallback>:
{
 80168cc:	b508      	push	{r3, lr}
	if(BufferCtl.filetype == 0) {
 80168ce:	4b17      	ldr	r3, [pc, #92]	; (801692c <HAL_SAI_TxCpltCallback+0x60>)
 80168d0:	7a1b      	ldrb	r3, [r3, #8]
 80168d2:	b96b      	cbnz	r3, 80168f0 <HAL_SAI_TxCpltCallback+0x24>
		while(f_read(&MyFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE / 2],
 80168d4:	4b16      	ldr	r3, [pc, #88]	; (8016930 <HAL_SAI_TxCpltCallback+0x64>)
 80168d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80168da:	4916      	ldr	r1, [pc, #88]	; (8016934 <HAL_SAI_TxCpltCallback+0x68>)
 80168dc:	4816      	ldr	r0, [pc, #88]	; (8016938 <HAL_SAI_TxCpltCallback+0x6c>)
 80168de:	f7f5 f9d2 	bl	800bc86 <f_read>
 80168e2:	2800      	cmp	r0, #0
 80168e4:	d1f6      	bne.n	80168d4 <HAL_SAI_TxCpltCallback+0x8>
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 80168e6:	4a11      	ldr	r2, [pc, #68]	; (801692c <HAL_SAI_TxCpltCallback+0x60>)
 80168e8:	6853      	ldr	r3, [r2, #4]
 80168ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80168ee:	6053      	str	r3, [r2, #4]
	if(BufferCtl.filetype == 1) {
 80168f0:	4b0e      	ldr	r3, [pc, #56]	; (801692c <HAL_SAI_TxCpltCallback+0x60>)
 80168f2:	7a1b      	ldrb	r3, [r3, #8]
 80168f4:	2b01      	cmp	r3, #1
 80168f6:	d00b      	beq.n	8016910 <HAL_SAI_TxCpltCallback+0x44>
	GetTrackTime();
 80168f8:	f002 fa98 	bl	8018e2c <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 80168fc:	4b0e      	ldr	r3, [pc, #56]	; (8016938 <HAL_SAI_TxCpltCallback+0x6c>)
 80168fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016902:	6919      	ldr	r1, [r3, #16]
 8016904:	695b      	ldr	r3, [r3, #20]
 8016906:	429a      	cmp	r2, r3
 8016908:	bf08      	it	eq
 801690a:	4288      	cmpeq	r0, r1
 801690c:	d007      	beq.n	801691e <HAL_SAI_TxCpltCallback+0x52>
}
 801690e:	bd08      	pop	{r3, pc}
        unDmaBufMode = 2;
 8016910:	4b0a      	ldr	r3, [pc, #40]	; (801693c <HAL_SAI_TxCpltCallback+0x70>)
 8016912:	2202      	movs	r2, #2
 8016914:	601a      	str	r2, [r3, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2);
 8016916:	4b0a      	ldr	r3, [pc, #40]	; (8016940 <HAL_SAI_TxCpltCallback+0x74>)
 8016918:	4a0a      	ldr	r2, [pc, #40]	; (8016944 <HAL_SAI_TxCpltCallback+0x78>)
 801691a:	601a      	str	r2, [r3, #0]
 801691c:	e7ec      	b.n	80168f8 <HAL_SAI_TxCpltCallback+0x2c>
		bOutOfData = 1;
 801691e:	4b0a      	ldr	r3, [pc, #40]	; (8016948 <HAL_SAI_TxCpltCallback+0x7c>)
 8016920:	2201      	movs	r2, #1
 8016922:	601a      	str	r2, [r3, #0]
		unDmaBufMode = 3;
 8016924:	4b05      	ldr	r3, [pc, #20]	; (801693c <HAL_SAI_TxCpltCallback+0x70>)
 8016926:	2203      	movs	r2, #3
 8016928:	601a      	str	r2, [r3, #0]
}
 801692a:	e7f0      	b.n	801690e <HAL_SAI_TxCpltCallback+0x42>
 801692c:	200017ac 	.word	0x200017ac
 8016930:	2000e37c 	.word	0x2000e37c
 8016934:	20000fac 	.word	0x20000fac
 8016938:	200017b8 	.word	0x200017b8
 801693c:	2000ebe4 	.word	0x2000ebe4
 8016940:	200133e8 	.word	0x200133e8
 8016944:	20010fe8 	.word	0x20010fe8
 8016948:	2000e378 	.word	0x2000e378

0801694c <HAL_SAI_TxHalfCpltCallback>:
{
 801694c:	b508      	push	{r3, lr}
	if(BufferCtl.filetype == 0) {
 801694e:	4b17      	ldr	r3, [pc, #92]	; (80169ac <HAL_SAI_TxHalfCpltCallback+0x60>)
 8016950:	7a1b      	ldrb	r3, [r3, #8]
 8016952:	b96b      	cbnz	r3, 8016970 <HAL_SAI_TxHalfCpltCallback+0x24>
		while(f_read(&MyFile, &BufferCtl.buff[0],
 8016954:	4b16      	ldr	r3, [pc, #88]	; (80169b0 <HAL_SAI_TxHalfCpltCallback+0x64>)
 8016956:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801695a:	4916      	ldr	r1, [pc, #88]	; (80169b4 <HAL_SAI_TxHalfCpltCallback+0x68>)
 801695c:	4816      	ldr	r0, [pc, #88]	; (80169b8 <HAL_SAI_TxHalfCpltCallback+0x6c>)
 801695e:	f7f5 f992 	bl	800bc86 <f_read>
 8016962:	2800      	cmp	r0, #0
 8016964:	d1f6      	bne.n	8016954 <HAL_SAI_TxHalfCpltCallback+0x8>
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 8016966:	4a11      	ldr	r2, [pc, #68]	; (80169ac <HAL_SAI_TxHalfCpltCallback+0x60>)
 8016968:	6853      	ldr	r3, [r2, #4]
 801696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801696e:	6053      	str	r3, [r2, #4]
	if(BufferCtl.filetype == 1) {
 8016970:	4b0e      	ldr	r3, [pc, #56]	; (80169ac <HAL_SAI_TxHalfCpltCallback+0x60>)
 8016972:	7a1b      	ldrb	r3, [r3, #8]
 8016974:	2b01      	cmp	r3, #1
 8016976:	d00b      	beq.n	8016990 <HAL_SAI_TxHalfCpltCallback+0x44>
	GetTrackTime();
 8016978:	f002 fa58 	bl	8018e2c <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 801697c:	4b0e      	ldr	r3, [pc, #56]	; (80169b8 <HAL_SAI_TxHalfCpltCallback+0x6c>)
 801697e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016982:	6919      	ldr	r1, [r3, #16]
 8016984:	695b      	ldr	r3, [r3, #20]
 8016986:	429a      	cmp	r2, r3
 8016988:	bf08      	it	eq
 801698a:	4288      	cmpeq	r0, r1
 801698c:	d007      	beq.n	801699e <HAL_SAI_TxHalfCpltCallback+0x52>
}
 801698e:	bd08      	pop	{r3, pc}
        unDmaBufMode = 1;
 8016990:	4b0a      	ldr	r3, [pc, #40]	; (80169bc <HAL_SAI_TxHalfCpltCallback+0x70>)
 8016992:	2201      	movs	r2, #1
 8016994:	601a      	str	r2, [r3, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 8016996:	4b0a      	ldr	r3, [pc, #40]	; (80169c0 <HAL_SAI_TxHalfCpltCallback+0x74>)
 8016998:	4a0a      	ldr	r2, [pc, #40]	; (80169c4 <HAL_SAI_TxHalfCpltCallback+0x78>)
 801699a:	601a      	str	r2, [r3, #0]
 801699c:	e7ec      	b.n	8016978 <HAL_SAI_TxHalfCpltCallback+0x2c>
		bOutOfData = 1;
 801699e:	4b0a      	ldr	r3, [pc, #40]	; (80169c8 <HAL_SAI_TxHalfCpltCallback+0x7c>)
 80169a0:	2201      	movs	r2, #1
 80169a2:	601a      	str	r2, [r3, #0]
		unDmaBufMode = 3;
 80169a4:	4b05      	ldr	r3, [pc, #20]	; (80169bc <HAL_SAI_TxHalfCpltCallback+0x70>)
 80169a6:	2203      	movs	r2, #3
 80169a8:	601a      	str	r2, [r3, #0]
}
 80169aa:	e7f0      	b.n	801698e <HAL_SAI_TxHalfCpltCallback+0x42>
 80169ac:	200017ac 	.word	0x200017ac
 80169b0:	2000e37c 	.word	0x2000e37c
 80169b4:	200007ac 	.word	0x200007ac
 80169b8:	200017b8 	.word	0x200017b8
 80169bc:	2000ebe4 	.word	0x2000ebe4
 80169c0:	200133e8 	.word	0x200133e8
 80169c4:	2000ebe8 	.word	0x2000ebe8
 80169c8:	2000e378 	.word	0x2000e378

080169cc <BSP_AUDIO_OUT_Error_CallBack>:
}
 80169cc:	4770      	bx	lr
	...

080169d0 <HAL_SAI_ErrorCallback>:
{
 80169d0:	b510      	push	{r4, lr}
  audio_out_state = HAL_SAI_GetState(&hsai_BlockA2);
 80169d2:	4807      	ldr	r0, [pc, #28]	; (80169f0 <HAL_SAI_ErrorCallback+0x20>)
 80169d4:	f7ef f8d4 	bl	8005b80 <HAL_SAI_GetState>
 80169d8:	4604      	mov	r4, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80169da:	4806      	ldr	r0, [pc, #24]	; (80169f4 <HAL_SAI_ErrorCallback+0x24>)
 80169dc:	f7ef f8d0 	bl	8005b80 <HAL_SAI_GetState>
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80169e0:	2c12      	cmp	r4, #18
 80169e2:	bf18      	it	ne
 80169e4:	2c02      	cmpne	r4, #2
 80169e6:	d000      	beq.n	80169ea <HAL_SAI_ErrorCallback+0x1a>
}
 80169e8:	bd10      	pop	{r4, pc}
    BSP_AUDIO_OUT_Error_CallBack();
 80169ea:	f7ff ffef 	bl	80169cc <BSP_AUDIO_OUT_Error_CallBack>
}
 80169ee:	e7fb      	b.n	80169e8 <HAL_SAI_ErrorCallback+0x18>
 80169f0:	20017228 	.word	0x20017228
 80169f4:	20017398 	.word	0x20017398

080169f8 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 80169f8:	b500      	push	{lr}
 80169fa:	ed2d 8b02 	vpush	{d8}
 80169fe:	b0a3      	sub	sp, #140	; 0x8c
 8016a00:	ee08 1a10 	vmov	s16, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8016a04:	a801      	add	r0, sp, #4
 8016a06:	f7ee fb6f 	bl	80050e8 <HAL_RCCEx_GetPeriphCLKConfig>
  uint32_t new_frequency_Hz = (203000000 / 9 * (float)AudioFreq /
 8016a0a:	eeb8 7a48 	vcvt.f32.u32	s14, s16
 8016a0e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8016a78 <BSP_AUDIO_OUT_ClockConfig+0x80>
 8016a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016a16:	eddf 6a19 	vldr	s13, [pc, #100]	; 8016a7c <BSP_AUDIO_OUT_ClockConfig+0x84>
 8016a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016a22:	ee17 0a90 	vmov	r0, s15
  uint32_t set_frequency_Hz = 0;
 8016a26:	2300      	movs	r3, #0
  uint32_t I2SN = 49;
 8016a28:	2231      	movs	r2, #49	; 0x31
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 8016a2a:	2120      	movs	r1, #32
 8016a2c:	e002      	b.n	8016a34 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	  if(set_frequency_Hz >= new_frequency_Hz) break;
 8016a2e:	4283      	cmp	r3, r0
 8016a30:	d20f      	bcs.n	8016a52 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 8016a32:	3901      	subs	r1, #1
 8016a34:	2901      	cmp	r1, #1
 8016a36:	d90c      	bls.n	8016a52 <BSP_AUDIO_OUT_ClockConfig+0x5a>
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 8016a38:	2232      	movs	r2, #50	; 0x32
 8016a3a:	f5b2 7fd8 	cmp.w	r2, #432	; 0x1b0
 8016a3e:	d2f6      	bcs.n	8016a2e <BSP_AUDIO_OUT_ClockConfig+0x36>
		  set_frequency_Hz = I2SN * 1000000 / I2SDivQ;
 8016a40:	4b0f      	ldr	r3, [pc, #60]	; (8016a80 <BSP_AUDIO_OUT_ClockConfig+0x88>)
 8016a42:	fb02 f303 	mul.w	r3, r2, r3
 8016a46:	fbb3 f3f1 	udiv	r3, r3, r1
		  if(set_frequency_Hz >= new_frequency_Hz) break;
 8016a4a:	4298      	cmp	r0, r3
 8016a4c:	d9ef      	bls.n	8016a2e <BSP_AUDIO_OUT_ClockConfig+0x36>
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 8016a4e:	3201      	adds	r2, #1
 8016a50:	e7f3      	b.n	8016a3a <BSP_AUDIO_OUT_ClockConfig+0x42>
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8016a52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016a56:	9301      	str	r3, [sp, #4]
  rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8016a58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016a5c:	9311      	str	r3, [sp, #68]	; 0x44
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = I2SN;
 8016a5e:	9202      	str	r2, [sp, #8]
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8016a60:	2302      	movs	r3, #2
 8016a62:	9304      	str	r3, [sp, #16]
  rcc_ex_clk_init_struct.PLLI2SDivQ = I2SDivQ;
 8016a64:	910a      	str	r1, [sp, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8016a66:	a801      	add	r0, sp, #4
 8016a68:	f7ed fdf4 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
}
 8016a6c:	b023      	add	sp, #140	; 0x8c
 8016a6e:	ecbd 8b02 	vpop	{d8}
 8016a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a76:	bf00      	nop
 8016a78:	4bac15d2 	.word	0x4bac15d2
 8016a7c:	46ac4400 	.word	0x46ac4400
 8016a80:	000f4240 	.word	0x000f4240

08016a84 <BSP_AUDIO_OUT_Init>:
{ 
 8016a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a86:	4605      	mov	r5, r0
 8016a88:	460e      	mov	r6, r1
 8016a8a:	4614      	mov	r4, r2
    BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, AudioFreq, NULL);
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	4621      	mov	r1, r4
 8016a90:	480e      	ldr	r0, [pc, #56]	; (8016acc <BSP_AUDIO_OUT_Init+0x48>)
 8016a92:	f7ff ffb1 	bl	80169f8 <BSP_AUDIO_OUT_ClockConfig>
    SAIx_Out_Init(AudioFreq);
 8016a96:	4620      	mov	r0, r4
 8016a98:	f7ff fe8e 	bl	80167b8 <SAIx_Out_Init>
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8016a9c:	4b0c      	ldr	r3, [pc, #48]	; (8016ad0 <BSP_AUDIO_OUT_Init+0x4c>)
 8016a9e:	689b      	ldr	r3, [r3, #8]
 8016aa0:	2034      	movs	r0, #52	; 0x34
 8016aa2:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 8016aa4:	f648 1394 	movw	r3, #35220	; 0x8994
 8016aa8:	4298      	cmp	r0, r3
 8016aaa:	d001      	beq.n	8016ab0 <BSP_AUDIO_OUT_Init+0x2c>
    ret = AUDIO_ERROR;
 8016aac:	2001      	movs	r0, #1
}
 8016aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8016ab0:	4f07      	ldr	r7, [pc, #28]	; (8016ad0 <BSP_AUDIO_OUT_Init+0x4c>)
 8016ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab4:	2034      	movs	r0, #52	; 0x34
 8016ab6:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 8016ab8:	4b06      	ldr	r3, [pc, #24]	; (8016ad4 <BSP_AUDIO_OUT_Init+0x50>)
 8016aba:	601f      	str	r7, [r3, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8016abc:	683f      	ldr	r7, [r7, #0]
 8016abe:	4623      	mov	r3, r4
 8016ac0:	4632      	mov	r2, r6
 8016ac2:	4629      	mov	r1, r5
 8016ac4:	2034      	movs	r0, #52	; 0x34
 8016ac6:	47b8      	blx	r7
    ret = AUDIO_OK;
 8016ac8:	2000      	movs	r0, #0
 8016aca:	e7f0      	b.n	8016aae <BSP_AUDIO_OUT_Init+0x2a>
 8016acc:	20017228 	.word	0x20017228
 8016ad0:	200000ac 	.word	0x200000ac
 8016ad4:	20017394 	.word	0x20017394

08016ad8 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8016ad8:	b508      	push	{r3, lr}
	HAL_I2C_Init(&hi2c3);
 8016ada:	4802      	ldr	r0, [pc, #8]	; (8016ae4 <AUDIO_IO_Init+0xc>)
 8016adc:	f7ec fb58 	bl	8003190 <HAL_I2C_Init>
}
 8016ae0:	bd08      	pop	{r3, pc}
 8016ae2:	bf00      	nop
 8016ae4:	200006b4 	.word	0x200006b4

08016ae8 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 8016ae8:	4770      	bx	lr
	...

08016aec <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8016aec:	b500      	push	{lr}
 8016aee:	b087      	sub	sp, #28
 8016af0:	f8ad 2016 	strh.w	r2, [sp, #22]
  uint16_t tmp = Value;
 8016af4:	b293      	uxth	r3, r2

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8016af6:	0a1a      	lsrs	r2, r3, #8
 8016af8:	f8ad 2016 	strh.w	r2, [sp, #22]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8016afc:	021b      	lsls	r3, r3, #8
 8016afe:	b21b      	sxth	r3, r3
 8016b00:	4313      	orrs	r3, r2
 8016b02:	f8ad 3016 	strh.w	r3, [sp, #22]

  HAL_I2C_Mem_Write(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2, 1000);
 8016b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b0a:	9302      	str	r3, [sp, #8]
 8016b0c:	2302      	movs	r3, #2
 8016b0e:	9301      	str	r3, [sp, #4]
 8016b10:	f10d 0216 	add.w	r2, sp, #22
 8016b14:	9200      	str	r2, [sp, #0]
 8016b16:	460a      	mov	r2, r1
 8016b18:	4601      	mov	r1, r0
 8016b1a:	4803      	ldr	r0, [pc, #12]	; (8016b28 <AUDIO_IO_Write+0x3c>)
 8016b1c:	f7ec fbfc 	bl	8003318 <HAL_I2C_Mem_Write>
}
 8016b20:	b007      	add	sp, #28
 8016b22:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b26:	bf00      	nop
 8016b28:	200006b4 	.word	0x200006b4

08016b2c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8016b2c:	b500      	push	{lr}
 8016b2e:	b087      	sub	sp, #28
 8016b30:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;
 8016b32:	2300      	movs	r3, #0
 8016b34:	f8ad 3016 	strh.w	r3, [sp, #22]

  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2, 1000);
 8016b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b3c:	9302      	str	r3, [sp, #8]
 8016b3e:	2302      	movs	r3, #2
 8016b40:	9301      	str	r3, [sp, #4]
 8016b42:	f10d 0116 	add.w	r1, sp, #22
 8016b46:	9100      	str	r1, [sp, #0]
 8016b48:	4601      	mov	r1, r0
 8016b4a:	4807      	ldr	r0, [pc, #28]	; (8016b68 <AUDIO_IO_Read+0x3c>)
 8016b4c:	f7ec fcc6 	bl	80034dc <HAL_I2C_Mem_Read>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8016b50:	f8bd 3016 	ldrh.w	r3, [sp, #22]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8016b54:	0218      	lsls	r0, r3, #8
 8016b56:	b200      	sxth	r0, r0
 8016b58:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
 8016b5c:	b280      	uxth	r0, r0

  read_value = tmp;
 8016b5e:	f8ad 0016 	strh.w	r0, [sp, #22]

  return read_value;
}
 8016b62:	b007      	add	sp, #28
 8016b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b68:	200006b4 	.word	0x200006b4

08016b6c <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8016b6c:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8016b6e:	f7ea fb6f 	bl	8001250 <HAL_Delay>
}
 8016b72:	bd08      	pop	{r3, pc}

08016b74 <Mp3FillReadBuffer>:

UINT Mp3FillReadBuffer(BYTE* pInData, UINT unInDataLeft, FIL* pInFile)
{
 8016b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b76:	b083      	sub	sp, #12
 8016b78:	460c      	mov	r4, r1
 8016b7a:	4615      	mov	r5, r2
	// move last, small chunk from end of buffer to start, then fill with new data
	memmove(BufferCtl.buff, pInData, unInDataLeft);
 8016b7c:	4f10      	ldr	r7, [pc, #64]	; (8016bc0 <Mp3FillReadBuffer+0x4c>)
 8016b7e:	460a      	mov	r2, r1
 8016b80:	4601      	mov	r1, r0
 8016b82:	4638      	mov	r0, r7
 8016b84:	f003 f920 	bl	8019dc8 <memmove>

	UINT unSpaceLeft = MP3_INBUF_SIZE - unInDataLeft;
 8016b88:	f5c4 5680 	rsb	r6, r4, #4096	; 0x1000
	UINT unRead = 0;
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	9301      	str	r3, [sp, #4]
	FRESULT fr = f_read(pInFile, BufferCtl.buff + unInDataLeft, unSpaceLeft, &unRead);
 8016b90:	ab01      	add	r3, sp, #4
 8016b92:	4632      	mov	r2, r6
 8016b94:	1939      	adds	r1, r7, r4
 8016b96:	4628      	mov	r0, r5
 8016b98:	f7f5 f875 	bl	800bc86 <f_read>
	if(fr != FR_OK)
 8016b9c:	b108      	cbz	r0, 8016ba2 <Mp3FillReadBuffer+0x2e>
	{
		unRead = 0;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	9301      	str	r3, [sp, #4]
	}
	if(unRead < unSpaceLeft)
 8016ba2:	9a01      	ldr	r2, [sp, #4]
 8016ba4:	42b2      	cmp	r2, r6
 8016ba6:	d302      	bcc.n	8016bae <Mp3FillReadBuffer+0x3a>
	{
	    // zero-pad to avoid finding false sync word after last frame (from old data in readBuf)
	    memset(BufferCtl.buff + unInDataLeft + unRead, 0, unSpaceLeft - unRead);
	}
	return unRead;
}
 8016ba8:	9801      	ldr	r0, [sp, #4]
 8016baa:	b003      	add	sp, #12
 8016bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    memset(BufferCtl.buff + unInDataLeft + unRead, 0, unSpaceLeft - unRead);
 8016bae:	4414      	add	r4, r2
 8016bb0:	1ab2      	subs	r2, r6, r2
 8016bb2:	2100      	movs	r1, #0
 8016bb4:	4802      	ldr	r0, [pc, #8]	; (8016bc0 <Mp3FillReadBuffer+0x4c>)
 8016bb6:	4420      	add	r0, r4
 8016bb8:	f003 f920 	bl	8019dfc <memset>
 8016bbc:	e7f4      	b.n	8016ba8 <Mp3FillReadBuffer+0x34>
 8016bbe:	bf00      	nop
 8016bc0:	200007ac 	.word	0x200007ac

08016bc4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8016bc4:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8016bc6:	4b0d      	ldr	r3, [pc, #52]	; (8016bfc <BSP_TS_Init+0x38>)
 8016bc8:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
 8016bca:	4b0d      	ldr	r3, [pc, #52]	; (8016c00 <BSP_TS_Init+0x3c>)
 8016bcc:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8016bce:	4c0d      	ldr	r4, [pc, #52]	; (8016c04 <BSP_TS_Init+0x40>)
 8016bd0:	6823      	ldr	r3, [r4, #0]
 8016bd2:	2070      	movs	r0, #112	; 0x70
 8016bd4:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8016bd6:	6863      	ldr	r3, [r4, #4]
 8016bd8:	2070      	movs	r0, #112	; 0x70
 8016bda:	4798      	blx	r3
 8016bdc:	2851      	cmp	r0, #81	; 0x51
 8016bde:	d001      	beq.n	8016be4 <BSP_TS_Init+0x20>
    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8016be0:	2003      	movs	r0, #3
  }

  return status;
}
 8016be2:	bd10      	pop	{r4, pc}
    tsDriver = &ft5336_ts_drv;
 8016be4:	4a08      	ldr	r2, [pc, #32]	; (8016c08 <BSP_TS_Init+0x44>)
 8016be6:	6014      	str	r4, [r2, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8016be8:	2070      	movs	r0, #112	; 0x70
 8016bea:	4a08      	ldr	r2, [pc, #32]	; (8016c0c <BSP_TS_Init+0x48>)
 8016bec:	7010      	strb	r0, [r2, #0]
    tsOrientation = TS_SWAP_XY;
 8016bee:	4a08      	ldr	r2, [pc, #32]	; (8016c10 <BSP_TS_Init+0x4c>)
 8016bf0:	2108      	movs	r1, #8
 8016bf2:	7011      	strb	r1, [r2, #0]
    tsDriver->Start(I2cAddress);
 8016bf4:	68e3      	ldr	r3, [r4, #12]
 8016bf6:	4798      	blx	r3
  uint8_t status = TS_OK;
 8016bf8:	2000      	movs	r0, #0
 8016bfa:	e7f2      	b.n	8016be2 <BSP_TS_Init+0x1e>
 8016bfc:	2001744e 	.word	0x2001744e
 8016c00:	20017450 	.word	0x20017450
 8016c04:	2000002c 	.word	0x2000002c
 8016c08:	20017448 	.word	0x20017448
 8016c0c:	2001741c 	.word	0x2001741c
 8016c10:	2001744c 	.word	0x2001744c

08016c14 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8016c14:	b510      	push	{r4, lr}
 8016c16:	b086      	sub	sp, #24
	GPIO_InitTypeDef gpio_init_structure;

	/* Configure Interrupt mode for SD detection pin */
	gpio_init_structure.Pin = TS_INT_PIN;
 8016c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016c1c:	9301      	str	r3, [sp, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8016c1e:	2400      	movs	r4, #0
 8016c20:	9403      	str	r4, [sp, #12]
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8016c22:	2302      	movs	r3, #2
 8016c24:	9304      	str	r3, [sp, #16]
	gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8016c26:	4b0a      	ldr	r3, [pc, #40]	; (8016c50 <BSP_TS_ITConfig+0x3c>)
 8016c28:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8016c2a:	a901      	add	r1, sp, #4
 8016c2c:	4809      	ldr	r0, [pc, #36]	; (8016c54 <BSP_TS_ITConfig+0x40>)
 8016c2e:	f7eb f96f 	bl	8001f10 <HAL_GPIO_Init>

	/* Enable and set Touch screen EXTI Interrupt to the lowest priority */
	HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8016c32:	4622      	mov	r2, r4
 8016c34:	210f      	movs	r1, #15
 8016c36:	2028      	movs	r0, #40	; 0x28
 8016c38:	f7ea fb3c 	bl	80012b4 <HAL_NVIC_SetPriority>
	/* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8016c3c:	4b06      	ldr	r3, [pc, #24]	; (8016c58 <BSP_TS_ITConfig+0x44>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	699b      	ldr	r3, [r3, #24]
 8016c42:	4a06      	ldr	r2, [pc, #24]	; (8016c5c <BSP_TS_ITConfig+0x48>)
 8016c44:	7810      	ldrb	r0, [r2, #0]
 8016c46:	4798      	blx	r3

  return TS_OK;  
}
 8016c48:	4620      	mov	r0, r4
 8016c4a:	b006      	add	sp, #24
 8016c4c:	bd10      	pop	{r4, pc}
 8016c4e:	bf00      	nop
 8016c50:	10110000 	.word	0x10110000
 8016c54:	40022000 	.word	0x40022000
 8016c58:	20017448 	.word	0x20017448
 8016c5c:	2001741c 	.word	0x2001741c

08016c60 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8016c60:	b510      	push	{r4, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	4604      	mov	r4, r0
  uint32_t gestureId = 0;
 8016c66:	2300      	movs	r3, #0
 8016c68:	9301      	str	r3, [sp, #4]
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8016c6a:	a901      	add	r1, sp, #4
 8016c6c:	4b1e      	ldr	r3, [pc, #120]	; (8016ce8 <BSP_TS_Get_GestureId+0x88>)
 8016c6e:	7818      	ldrb	r0, [r3, #0]
 8016c70:	f7fd fa56 	bl	8014120 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8016c74:	9b01      	ldr	r3, [sp, #4]
 8016c76:	2b1c      	cmp	r3, #28
 8016c78:	d812      	bhi.n	8016ca0 <BSP_TS_Get_GestureId+0x40>
 8016c7a:	2b1c      	cmp	r3, #28
 8016c7c:	d831      	bhi.n	8016ce2 <BSP_TS_Get_GestureId+0x82>
 8016c7e:	e8df f003 	tbb	[pc, r3]
 8016c82:	3019      	.short	0x3019
 8016c84:	30303030 	.word	0x30303030
 8016c88:	30303030 	.word	0x30303030
 8016c8c:	30303030 	.word	0x30303030
 8016c90:	301c3030 	.word	0x301c3030
 8016c94:	30203030 	.word	0x30203030
 8016c98:	30243030 	.word	0x30243030
 8016c9c:	3030      	.short	0x3030
 8016c9e:	28          	.byte	0x28
 8016c9f:	00          	.byte	0x00
 8016ca0:	2b40      	cmp	r3, #64	; 0x40
 8016ca2:	d01a      	beq.n	8016cda <BSP_TS_Get_GestureId+0x7a>
 8016ca4:	2b49      	cmp	r3, #73	; 0x49
 8016ca6:	d103      	bne.n	8016cb0 <BSP_TS_Get_GestureId+0x50>
      break;
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8016ca8:	2306      	movs	r3, #6
 8016caa:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016cac:	2000      	movs	r0, #0
      break;
 8016cae:	e019      	b.n	8016ce4 <BSP_TS_Get_GestureId+0x84>
  switch(gestureId)
 8016cb0:	2001      	movs	r0, #1
 8016cb2:	e017      	b.n	8016ce4 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8016cb4:	2000      	movs	r0, #0
 8016cb6:	62a0      	str	r0, [r4, #40]	; 0x28
      break;
 8016cb8:	e014      	b.n	8016ce4 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8016cba:	2301      	movs	r3, #1
 8016cbc:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016cbe:	2000      	movs	r0, #0
      break;
 8016cc0:	e010      	b.n	8016ce4 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8016cc2:	2302      	movs	r3, #2
 8016cc4:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016cc6:	2000      	movs	r0, #0
      break;
 8016cc8:	e00c      	b.n	8016ce4 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8016cca:	2303      	movs	r3, #3
 8016ccc:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016cce:	2000      	movs	r0, #0
      break;
 8016cd0:	e008      	b.n	8016ce4 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8016cd2:	2304      	movs	r3, #4
 8016cd4:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016cd6:	2000      	movs	r0, #0
      break;
 8016cd8:	e004      	b.n	8016ce4 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8016cda:	2305      	movs	r3, #5
 8016cdc:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016cde:	2000      	movs	r0, #0
      break;
 8016ce0:	e000      	b.n	8016ce4 <BSP_TS_Get_GestureId+0x84>
  switch(gestureId)
 8016ce2:	2001      	movs	r0, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8016ce4:	b002      	add	sp, #8
 8016ce6:	bd10      	pop	{r4, pc}
 8016ce8:	2001741c 	.word	0x2001741c

08016cec <BSP_TS_GetState>:
{
 8016cec:	b570      	push	{r4, r5, r6, lr}
 8016cee:	b092      	sub	sp, #72	; 0x48
 8016cf0:	4605      	mov	r5, r0
  uint32_t weight = 0;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	9305      	str	r3, [sp, #20]
  uint32_t area = 0;
 8016cf6:	9304      	str	r3, [sp, #16]
  uint32_t event = 0;
 8016cf8:	9303      	str	r3, [sp, #12]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8016cfa:	4b69      	ldr	r3, [pc, #420]	; (8016ea0 <BSP_TS_GetState+0x1b4>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	691b      	ldr	r3, [r3, #16]
 8016d00:	4a68      	ldr	r2, [pc, #416]	; (8016ea4 <BSP_TS_GetState+0x1b8>)
 8016d02:	7810      	ldrb	r0, [r2, #0]
 8016d04:	4798      	blx	r3
 8016d06:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	f000 80c6 	beq.w	8016e9a <BSP_TS_GetState+0x1ae>
    for(index=0; index < TS_State->touchDetected; index++)
 8016d0e:	2400      	movs	r4, #0
 8016d10:	e01f      	b.n	8016d52 <BSP_TS_GetState+0x66>
        x[index] = brute_x[index];
 8016d12:	aa12      	add	r2, sp, #72	; 0x48
 8016d14:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8016d18:	f832 1c24 	ldrh.w	r1, [r2, #-36]
 8016d1c:	f822 1c0c 	strh.w	r1, [r2, #-12]
        y[index] = brute_y[index];
 8016d20:	f832 1c30 	ldrh.w	r1, [r2, #-48]
 8016d24:	f822 1c18 	strh.w	r1, [r2, #-24]
 8016d28:	e027      	b.n	8016d7a <BSP_TS_GetState+0x8e>
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	1a5b      	subs	r3, r3, r1
 8016d2e:	b29b      	uxth	r3, r3
 8016d30:	e056      	b.n	8016de0 <BSP_TS_GetState+0xf4>
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8016d32:	b292      	uxth	r2, r2
 8016d34:	1b92      	subs	r2, r2, r6
 8016d36:	b292      	uxth	r2, r2
 8016d38:	e05f      	b.n	8016dfa <BSP_TS_GetState+0x10e>
        TS_State->touchX[index] = x[index];
 8016d3a:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8016d3e:	8059      	strh	r1, [r3, #2]
        TS_State->touchY[index] = y[index];
 8016d40:	1d23      	adds	r3, r4, #4
 8016d42:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8016d46:	809e      	strh	r6, [r3, #4]
 8016d48:	e07b      	b.n	8016e42 <BSP_TS_GetState+0x156>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8016d4a:	192b      	adds	r3, r5, r4
 8016d4c:	2201      	movs	r2, #1
 8016d4e:	76da      	strb	r2, [r3, #27]
    for(index=0; index < TS_State->touchDetected; index++)
 8016d50:	3401      	adds	r4, #1
 8016d52:	782b      	ldrb	r3, [r5, #0]
 8016d54:	42a3      	cmp	r3, r4
 8016d56:	f240 809d 	bls.w	8016e94 <BSP_TS_GetState+0x1a8>
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8016d5a:	4b51      	ldr	r3, [pc, #324]	; (8016ea0 <BSP_TS_GetState+0x1b4>)
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	695b      	ldr	r3, [r3, #20]
 8016d60:	aa06      	add	r2, sp, #24
 8016d62:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8016d66:	a909      	add	r1, sp, #36	; 0x24
 8016d68:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8016d6c:	484d      	ldr	r0, [pc, #308]	; (8016ea4 <BSP_TS_GetState+0x1b8>)
 8016d6e:	7800      	ldrb	r0, [r0, #0]
 8016d70:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8016d72:	4b4d      	ldr	r3, [pc, #308]	; (8016ea8 <BSP_TS_GetState+0x1bc>)
 8016d74:	781b      	ldrb	r3, [r3, #0]
 8016d76:	2b01      	cmp	r3, #1
 8016d78:	d0cb      	beq.n	8016d12 <BSP_TS_GetState+0x26>
      if(tsOrientation & TS_SWAP_X)
 8016d7a:	f013 0f02 	tst.w	r3, #2
 8016d7e:	d008      	beq.n	8016d92 <BSP_TS_GetState+0xa6>
        x[index] = 4096 - brute_x[index];
 8016d80:	aa12      	add	r2, sp, #72	; 0x48
 8016d82:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8016d86:	f831 2c24 	ldrh.w	r2, [r1, #-36]
 8016d8a:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8016d8e:	f821 2c0c 	strh.w	r2, [r1, #-12]
      if(tsOrientation & TS_SWAP_Y)
 8016d92:	f013 0f04 	tst.w	r3, #4
 8016d96:	d008      	beq.n	8016daa <BSP_TS_GetState+0xbe>
        y[index] = 4096 - brute_y[index];
 8016d98:	aa12      	add	r2, sp, #72	; 0x48
 8016d9a:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8016d9e:	f831 2c30 	ldrh.w	r2, [r1, #-48]
 8016da2:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8016da6:	f821 2c18 	strh.w	r2, [r1, #-24]
      if(tsOrientation & TS_SWAP_XY)
 8016daa:	f013 0f08 	tst.w	r3, #8
 8016dae:	d00a      	beq.n	8016dc6 <BSP_TS_GetState+0xda>
        y[index] = brute_x[index];
 8016db0:	ab12      	add	r3, sp, #72	; 0x48
 8016db2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8016db6:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8016dba:	f823 2c18 	strh.w	r2, [r3, #-24]
        x[index] = brute_y[index];
 8016dbe:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8016dc2:	f823 2c0c 	strh.w	r2, [r3, #-12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8016dc6:	ab12      	add	r3, sp, #72	; 0x48
 8016dc8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8016dcc:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8016dd0:	4b36      	ldr	r3, [pc, #216]	; (8016eac <BSP_TS_GetState+0x1c0>)
 8016dd2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016dd6:	4299      	cmp	r1, r3
 8016dd8:	d9a7      	bls.n	8016d2a <BSP_TS_GetState+0x3e>
 8016dda:	b29b      	uxth	r3, r3
 8016ddc:	1acb      	subs	r3, r1, r3
 8016dde:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8016de0:	aa12      	add	r2, sp, #72	; 0x48
 8016de2:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8016de6:	f832 6c18 	ldrh.w	r6, [r2, #-24]
 8016dea:	4a31      	ldr	r2, [pc, #196]	; (8016eb0 <BSP_TS_GetState+0x1c4>)
 8016dec:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8016df0:	4296      	cmp	r6, r2
 8016df2:	d99e      	bls.n	8016d32 <BSP_TS_GetState+0x46>
 8016df4:	b292      	uxth	r2, r2
 8016df6:	1ab2      	subs	r2, r6, r2
 8016df8:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 8016dfa:	4413      	add	r3, r2
 8016dfc:	2b05      	cmp	r3, #5
 8016dfe:	dd05      	ble.n	8016e0c <BSP_TS_GetState+0x120>
        _x[index] = x[index];
 8016e00:	4b2a      	ldr	r3, [pc, #168]	; (8016eac <BSP_TS_GetState+0x1c0>)
 8016e02:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        _y[index] = y[index];
 8016e06:	4b2a      	ldr	r3, [pc, #168]	; (8016eb0 <BSP_TS_GetState+0x1c4>)
 8016e08:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8016e0c:	4b25      	ldr	r3, [pc, #148]	; (8016ea4 <BSP_TS_GetState+0x1b8>)
 8016e0e:	7818      	ldrb	r0, [r3, #0]
 8016e10:	2870      	cmp	r0, #112	; 0x70
 8016e12:	d092      	beq.n	8016d3a <BSP_TS_GetState+0x4e>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8016e14:	4b25      	ldr	r3, [pc, #148]	; (8016eac <BSP_TS_GetState+0x1c0>)
 8016e16:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8016e1a:	4b26      	ldr	r3, [pc, #152]	; (8016eb4 <BSP_TS_GetState+0x1c8>)
 8016e1c:	881b      	ldrh	r3, [r3, #0]
 8016e1e:	fb02 f303 	mul.w	r3, r2, r3
 8016e22:	0b1b      	lsrs	r3, r3, #12
 8016e24:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 8016e28:	8053      	strh	r3, [r2, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8016e2a:	4b21      	ldr	r3, [pc, #132]	; (8016eb0 <BSP_TS_GetState+0x1c4>)
 8016e2c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8016e30:	4b21      	ldr	r3, [pc, #132]	; (8016eb8 <BSP_TS_GetState+0x1cc>)
 8016e32:	881b      	ldrh	r3, [r3, #0]
 8016e34:	fb02 f303 	mul.w	r3, r2, r3
 8016e38:	0b1b      	lsrs	r3, r3, #12
 8016e3a:	1d22      	adds	r2, r4, #4
 8016e3c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8016e40:	8093      	strh	r3, [r2, #4]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8016e42:	ab03      	add	r3, sp, #12
 8016e44:	9300      	str	r3, [sp, #0]
 8016e46:	ab04      	add	r3, sp, #16
 8016e48:	aa05      	add	r2, sp, #20
 8016e4a:	4621      	mov	r1, r4
 8016e4c:	f7fd f97a 	bl	8014144 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 8016e50:	192b      	adds	r3, r5, r4
 8016e52:	9a05      	ldr	r2, [sp, #20]
 8016e54:	759a      	strb	r2, [r3, #22]
      TS_State->touchArea[index]   = area;
 8016e56:	9a04      	ldr	r2, [sp, #16]
 8016e58:	f883 2020 	strb.w	r2, [r3, #32]
      switch(event)
 8016e5c:	9b03      	ldr	r3, [sp, #12]
 8016e5e:	2b03      	cmp	r3, #3
 8016e60:	f63f af76 	bhi.w	8016d50 <BSP_TS_GetState+0x64>
 8016e64:	a201      	add	r2, pc, #4	; (adr r2, 8016e6c <BSP_TS_GetState+0x180>)
 8016e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e6a:	bf00      	nop
 8016e6c:	08016d4b 	.word	0x08016d4b
 8016e70:	08016e7d 	.word	0x08016e7d
 8016e74:	08016e85 	.word	0x08016e85
 8016e78:	08016e8d 	.word	0x08016e8d
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8016e7c:	192b      	adds	r3, r5, r4
 8016e7e:	2202      	movs	r2, #2
 8016e80:	76da      	strb	r2, [r3, #27]
          break;
 8016e82:	e765      	b.n	8016d50 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8016e84:	192b      	adds	r3, r5, r4
 8016e86:	2203      	movs	r2, #3
 8016e88:	76da      	strb	r2, [r3, #27]
          break;
 8016e8a:	e761      	b.n	8016d50 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8016e8c:	192b      	adds	r3, r5, r4
 8016e8e:	2200      	movs	r2, #0
 8016e90:	76da      	strb	r2, [r3, #27]
          break;
 8016e92:	e75d      	b.n	8016d50 <BSP_TS_GetState+0x64>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8016e94:	4628      	mov	r0, r5
 8016e96:	f7ff fee3 	bl	8016c60 <BSP_TS_Get_GestureId>
}
 8016e9a:	b012      	add	sp, #72	; 0x48
 8016e9c:	bd70      	pop	{r4, r5, r6, pc}
 8016e9e:	bf00      	nop
 8016ea0:	20017448 	.word	0x20017448
 8016ea4:	2001741c 	.word	0x2001741c
 8016ea8:	2001744c 	.word	0x2001744c
 8016eac:	20017420 	.word	0x20017420
 8016eb0:	20017434 	.word	0x20017434
 8016eb4:	2001744e 	.word	0x2001744e
 8016eb8:	20017450 	.word	0x20017450

08016ebc <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */
void BSP_TS_ITClear(void)
{
 8016ebc:	b508      	push	{r3, lr}
  /* Clear TS IT pending bits */
  tsDriver->ClearIT(I2cAddress); 
 8016ebe:	4b03      	ldr	r3, [pc, #12]	; (8016ecc <BSP_TS_ITClear+0x10>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	69db      	ldr	r3, [r3, #28]
 8016ec4:	4a02      	ldr	r2, [pc, #8]	; (8016ed0 <BSP_TS_ITClear+0x14>)
 8016ec6:	7810      	ldrb	r0, [r2, #0]
 8016ec8:	4798      	blx	r3
}
 8016eca:	bd08      	pop	{r3, pc}
 8016ecc:	20017448 	.word	0x20017448
 8016ed0:	2001741c 	.word	0x2001741c

08016ed4 <BSP_TS_ResetTouchData>:
uint8_t BSP_TS_ResetTouchData(TS_StateTypeDef *TS_State)
{
  uint8_t ts_status = TS_ERROR;
  uint32_t index;

  if (TS_State != (TS_StateTypeDef *)NULL)
 8016ed4:	4684      	mov	ip, r0
 8016ed6:	b1b0      	cbz	r0, 8016f06 <BSP_TS_ResetTouchData+0x32>
  {
    TS_State->gestureId = GEST_ID_NO_GESTURE;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	6283      	str	r3, [r0, #40]	; 0x28
    TS_State->touchDetected = 0;
 8016edc:	7003      	strb	r3, [r0, #0]

    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 8016ede:	e00e      	b.n	8016efe <BSP_TS_ResetTouchData+0x2a>
    {
      TS_State->touchX[index]       = 0;
 8016ee0:	eb0c 0143 	add.w	r1, ip, r3, lsl #1
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	804a      	strh	r2, [r1, #2]
      TS_State->touchY[index]       = 0;
 8016ee8:	1d19      	adds	r1, r3, #4
 8016eea:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8016eee:	808a      	strh	r2, [r1, #4]
      TS_State->touchArea[index]    = 0;
 8016ef0:	eb0c 0103 	add.w	r1, ip, r3
 8016ef4:	f881 2020 	strb.w	r2, [r1, #32]
      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8016ef8:	76ca      	strb	r2, [r1, #27]
      TS_State->touchWeight[index]  = 0;
 8016efa:	758a      	strb	r2, [r1, #22]
    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 8016efc:	3301      	adds	r3, #1
 8016efe:	2b04      	cmp	r3, #4
 8016f00:	d9ee      	bls.n	8016ee0 <BSP_TS_ResetTouchData+0xc>
    }

    ts_status = TS_OK;
 8016f02:	2000      	movs	r0, #0
 8016f04:	4770      	bx	lr
  uint8_t ts_status = TS_ERROR;
 8016f06:	2001      	movs	r0, #1

  } /* of if (TS_State != (TS_StateTypeDef *)NULL) */

  return (ts_status);
}
 8016f08:	4770      	bx	lr
	...

08016f0c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8016f0c:	b508      	push	{r3, lr}
	HAL_I2C_Init(&hi2c3);
 8016f0e:	4802      	ldr	r0, [pc, #8]	; (8016f18 <TS_IO_Init+0xc>)
 8016f10:	f7ec f93e 	bl	8003190 <HAL_I2C_Init>
}
 8016f14:	bd08      	pop	{r3, pc}
 8016f16:	bf00      	nop
 8016f18:	200006b4 	.word	0x200006b4

08016f1c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8016f1c:	b500      	push	{lr}
 8016f1e:	b087      	sub	sp, #28
 8016f20:	f88d 2017 	strb.w	r2, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1, 1000);
 8016f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016f28:	9302      	str	r3, [sp, #8]
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	9301      	str	r3, [sp, #4]
 8016f2e:	f10d 0217 	add.w	r2, sp, #23
 8016f32:	9200      	str	r2, [sp, #0]
 8016f34:	460a      	mov	r2, r1
 8016f36:	4601      	mov	r1, r0
 8016f38:	4802      	ldr	r0, [pc, #8]	; (8016f44 <TS_IO_Write+0x28>)
 8016f3a:	f7ec f9ed 	bl	8003318 <HAL_I2C_Mem_Write>
}
 8016f3e:	b007      	add	sp, #28
 8016f40:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f44:	200006b4 	.word	0x200006b4

08016f48 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8016f48:	b500      	push	{lr}
 8016f4a:	b087      	sub	sp, #28
 8016f4c:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8016f4e:	2300      	movs	r3, #0
 8016f50:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1, 1000);
 8016f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016f58:	9302      	str	r3, [sp, #8]
 8016f5a:	2301      	movs	r3, #1
 8016f5c:	9301      	str	r3, [sp, #4]
 8016f5e:	f10d 0117 	add.w	r1, sp, #23
 8016f62:	9100      	str	r1, [sp, #0]
 8016f64:	4601      	mov	r1, r0
 8016f66:	4804      	ldr	r0, [pc, #16]	; (8016f78 <TS_IO_Read+0x30>)
 8016f68:	f7ec fab8 	bl	80034dc <HAL_I2C_Mem_Read>
  return read_value;
}
 8016f6c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8016f70:	b007      	add	sp, #28
 8016f72:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f76:	bf00      	nop
 8016f78:	200006b4 	.word	0x200006b4

08016f7c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8016f7c:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8016f7e:	f7ea f967 	bl	8001250 <HAL_Delay>
}
 8016f82:	bd08      	pop	{r3, pc}

08016f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016f84:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8016f86:	4b0a      	ldr	r3, [pc, #40]	; (8016fb0 <HAL_MspInit+0x2c>)
 8016f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016f8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8016f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8016f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016f92:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8016f96:	9200      	str	r2, [sp, #0]
 8016f98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016fa0:	645a      	str	r2, [r3, #68]	; 0x44
 8016fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016fa8:	9301      	str	r3, [sp, #4]
 8016faa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8016fac:	b002      	add	sp, #8
 8016fae:	4770      	bx	lr
 8016fb0:	40023800 	.word	0x40023800

08016fb4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8016fb4:	4770      	bx	lr

08016fb6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8016fb6:	e7fe      	b.n	8016fb6 <HardFault_Handler>

08016fb8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016fb8:	e7fe      	b.n	8016fb8 <MemManage_Handler>

08016fba <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016fba:	e7fe      	b.n	8016fba <BusFault_Handler>

08016fbc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016fbc:	e7fe      	b.n	8016fbc <UsageFault_Handler>

08016fbe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016fbe:	4770      	bx	lr

08016fc0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016fc0:	4770      	bx	lr

08016fc2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016fc2:	4770      	bx	lr

08016fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016fc6:	f7ea f931 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016fca:	bd08      	pop	{r3, pc}

08016fcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8016fcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 8016fce:	2304      	movs	r3, #4
 8016fd0:	4a04      	ldr	r2, [pc, #16]	; (8016fe4 <EXTI0_IRQHandler+0x18>)
 8016fd2:	4905      	ldr	r1, [pc, #20]	; (8016fe8 <EXTI0_IRQHandler+0x1c>)
 8016fd4:	4805      	ldr	r0, [pc, #20]	; (8016fec <EXTI0_IRQHandler+0x20>)
 8016fd6:	f7ef fe19 	bl	8006c0c <HAL_SPI_TransmitReceive_IT>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_NSS_Pin);
 8016fda:	2001      	movs	r0, #1
 8016fdc:	f7eb f94a 	bl	8002274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8016fe0:	bd08      	pop	{r3, pc}
 8016fe2:	bf00      	nop
 8016fe4:	2000eba4 	.word	0x2000eba4
 8016fe8:	20000058 	.word	0x20000058
 8016fec:	20017330 	.word	0x20017330

08016ff0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8016ff0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KBD_INT_Pin);
 8016ff2:	2004      	movs	r0, #4
 8016ff4:	f7eb f93e 	bl	8002274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8016ff8:	bd08      	pop	{r3, pc}
	...

08016ffc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8016ffc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if(button_flag & (1 << 0)) {
 8016ffe:	4b1a      	ldr	r3, [pc, #104]	; (8017068 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8017000:	881b      	ldrh	r3, [r3, #0]
 8017002:	f013 0f01 	tst.w	r3, #1
 8017006:	d015      	beq.n	8017034 <TIM1_BRK_TIM9_IRQHandler+0x38>
		if(display.cuemode == 0) display.cuemode = 1;
 8017008:	4a18      	ldr	r2, [pc, #96]	; (801706c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 801700a:	7892      	ldrb	r2, [r2, #2]
 801700c:	b972      	cbnz	r2, 801702c <TIM1_BRK_TIM9_IRQHandler+0x30>
 801700e:	4a17      	ldr	r2, [pc, #92]	; (801706c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8017010:	2101      	movs	r1, #1
 8017012:	7091      	strb	r1, [r2, #2]
		else display.cuemode = 0;
		button_flag ^= (1 << 0);
 8017014:	f083 0301 	eor.w	r3, r3, #1
 8017018:	4a13      	ldr	r2, [pc, #76]	; (8017068 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 801701a:	8013      	strh	r3, [r2, #0]
	else if(button_flag & (1 << 3)) {
		if(display.quantize == 0) display.quantize = 1;
		else display.quantize = 0;
		button_flag ^= (1 << 3);
	}
	HAL_TIM_Base_Stop_IT(&htim9);
 801701c:	4c14      	ldr	r4, [pc, #80]	; (8017070 <TIM1_BRK_TIM9_IRQHandler+0x74>)
 801701e:	4620      	mov	r0, r4
 8017020:	f7f0 f872 	bl	8007108 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8017024:	4620      	mov	r0, r4
 8017026:	f7f0 f8cc 	bl	80071c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 801702a:	bd10      	pop	{r4, pc}
		else display.cuemode = 0;
 801702c:	4a0f      	ldr	r2, [pc, #60]	; (801706c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 801702e:	2100      	movs	r1, #0
 8017030:	7091      	strb	r1, [r2, #2]
 8017032:	e7ef      	b.n	8017014 <TIM1_BRK_TIM9_IRQHandler+0x18>
	else if(button_flag & (1 << 1)) {
 8017034:	f013 0f02 	tst.w	r3, #2
 8017038:	d004      	beq.n	8017044 <TIM1_BRK_TIM9_IRQHandler+0x48>
		button_flag ^= (1 << 1);
 801703a:	f083 0302 	eor.w	r3, r3, #2
 801703e:	4a0a      	ldr	r2, [pc, #40]	; (8017068 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8017040:	8013      	strh	r3, [r2, #0]
 8017042:	e7eb      	b.n	801701c <TIM1_BRK_TIM9_IRQHandler+0x20>
	else if(button_flag & (1 << 3)) {
 8017044:	f013 0f08 	tst.w	r3, #8
 8017048:	d0e8      	beq.n	801701c <TIM1_BRK_TIM9_IRQHandler+0x20>
		if(display.quantize == 0) display.quantize = 1;
 801704a:	4a08      	ldr	r2, [pc, #32]	; (801706c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 801704c:	7c52      	ldrb	r2, [r2, #17]
 801704e:	b93a      	cbnz	r2, 8017060 <TIM1_BRK_TIM9_IRQHandler+0x64>
 8017050:	4a06      	ldr	r2, [pc, #24]	; (801706c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8017052:	2101      	movs	r1, #1
 8017054:	7451      	strb	r1, [r2, #17]
		button_flag ^= (1 << 3);
 8017056:	f083 0308 	eor.w	r3, r3, #8
 801705a:	4a03      	ldr	r2, [pc, #12]	; (8017068 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 801705c:	8013      	strh	r3, [r2, #0]
 801705e:	e7dd      	b.n	801701c <TIM1_BRK_TIM9_IRQHandler+0x20>
		else display.quantize = 0;
 8017060:	4a02      	ldr	r2, [pc, #8]	; (801706c <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8017062:	2100      	movs	r1, #0
 8017064:	7451      	strb	r1, [r2, #17]
 8017066:	e7f6      	b.n	8017056 <TIM1_BRK_TIM9_IRQHandler+0x5a>
 8017068:	20017452 	.word	0x20017452
 801706c:	200005f0 	.word	0x200005f0
 8017070:	200175b4 	.word	0x200175b4

08017074 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8017074:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
	ClearLayer();
 8017076:	f7fa fa37 	bl	80114e8 <ClearLayer>
	SetBeatGrid();
 801707a:	f7fa fa83 	bl	8011584 <SetBeatGrid>
	if(menu_mode == 0) DrawSpectrum();
 801707e:	4b0b      	ldr	r3, [pc, #44]	; (80170ac <TIM4_IRQHandler+0x38>)
 8017080:	f993 3000 	ldrsb.w	r3, [r3]
 8017084:	b163      	cbz	r3, 80170a0 <TIM4_IRQHandler+0x2c>
	if(menu_mode != 3) 	DrawLowSpectrum();
 8017086:	4b09      	ldr	r3, [pc, #36]	; (80170ac <TIM4_IRQHandler+0x38>)
 8017088:	f993 3000 	ldrsb.w	r3, [r3]
 801708c:	2b03      	cmp	r3, #3
 801708e:	d10a      	bne.n	80170a6 <TIM4_IRQHandler+0x32>
	DrawMenu();
 8017090:	f7fc faa2 	bl	80135d8 <DrawMenu>
	//DrawFrequencySpectrum();
	ChangeLayers();
 8017094:	f7fa fa4e 	bl	8011534 <ChangeLayers>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8017098:	4805      	ldr	r0, [pc, #20]	; (80170b0 <TIM4_IRQHandler+0x3c>)
 801709a:	f7f0 f892 	bl	80071c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 801709e:	bd08      	pop	{r3, pc}
	if(menu_mode == 0) DrawSpectrum();
 80170a0:	f7fb fe70 	bl	8012d84 <DrawSpectrum>
 80170a4:	e7ef      	b.n	8017086 <TIM4_IRQHandler+0x12>
	if(menu_mode != 3) 	DrawLowSpectrum();
 80170a6:	f7fa ffeb 	bl	8012080 <DrawLowSpectrum>
 80170aa:	e7f1      	b.n	8017090 <TIM4_IRQHandler+0x1c>
 80170ac:	2000060c 	.word	0x2000060c
 80170b0:	20017474 	.word	0x20017474

080170b4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80170b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80170b6:	4802      	ldr	r0, [pc, #8]	; (80170c0 <SPI2_IRQHandler+0xc>)
 80170b8:	f7ef ff04 	bl	8006ec4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80170bc:	bd08      	pop	{r3, pc}
 80170be:	bf00      	nop
 80170c0:	20017330 	.word	0x20017330
 80170c4:	00000000 	.word	0x00000000

080170c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80170c8:	b510      	push	{r4, lr}
 80170ca:	b082      	sub	sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	BSP_TS_GetState(&ts_State);
 80170cc:	4cae      	ldr	r4, [pc, #696]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 80170ce:	4620      	mov	r0, r4
 80170d0:	f7ff fe0c 	bl	8016cec <BSP_TS_GetState>
	if(ts_State.touchDetected == 1) {
 80170d4:	7823      	ldrb	r3, [r4, #0]
 80170d6:	2b01      	cmp	r3, #1
 80170d8:	d00a      	beq.n	80170f0 <EXTI15_10_IRQHandler+0x28>
				if(stretch > 4) stretch = 4;
			}
			touch_count++;
		}
	}*/
	BSP_TS_ResetTouchData(&ts_State);
 80170da:	48ab      	ldr	r0, [pc, #684]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 80170dc:	f7ff fefa 	bl	8016ed4 <BSP_TS_ResetTouchData>
	BSP_TS_ITClear();
 80170e0:	f7ff feec 	bl	8016ebc <BSP_TS_ITClear>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80170e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80170e8:	f7eb f8c4 	bl	8002274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80170ec:	b002      	add	sp, #8
 80170ee:	bd10      	pop	{r4, pc}
		if((ts_State.touchX[0] > 40) && (ts_State.touchX[0] < 440) && (ts_State.touchY[0] > 220) && (ts_State.touchY[0] < 260)) {
 80170f0:	8863      	ldrh	r3, [r4, #2]
 80170f2:	f1a3 0229 	sub.w	r2, r3, #41	; 0x29
 80170f6:	b292      	uxth	r2, r2
 80170f8:	f5b2 7fc7 	cmp.w	r2, #398	; 0x18e
 80170fc:	d805      	bhi.n	801710a <EXTI15_10_IRQHandler+0x42>
 80170fe:	89a2      	ldrh	r2, [r4, #12]
 8017100:	2adc      	cmp	r2, #220	; 0xdc
 8017102:	d902      	bls.n	801710a <EXTI15_10_IRQHandler+0x42>
 8017104:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8017108:	d367      	bcc.n	80171da <EXTI15_10_IRQHandler+0x112>
		else if((ts_State.touchY[0] > 20) && (ts_State.touchY[0] < 165)) {
 801710a:	4a9f      	ldr	r2, [pc, #636]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 801710c:	8992      	ldrh	r2, [r2, #12]
 801710e:	f1a2 0115 	sub.w	r1, r2, #21
 8017112:	b289      	uxth	r1, r1
 8017114:	298f      	cmp	r1, #143	; 0x8f
 8017116:	f200 81cc 	bhi.w	80174b2 <EXTI15_10_IRQHandler+0x3ea>
			if(menu_mode == 0) {
 801711a:	4b9c      	ldr	r3, [pc, #624]	; (801738c <EXTI15_10_IRQHandler+0x2c4>)
 801711c:	f993 3000 	ldrsb.w	r3, [r3]
 8017120:	b923      	cbnz	r3, 801712c <EXTI15_10_IRQHandler+0x64>
				if((ts_State.touchY[0] > 75) && (ts_State.touchY[0] < 165)) {
 8017122:	3a4c      	subs	r2, #76	; 0x4c
 8017124:	b292      	uxth	r2, r2
 8017126:	2a58      	cmp	r2, #88	; 0x58
 8017128:	f240 808f 	bls.w	801724a <EXTI15_10_IRQHandler+0x182>
			if(menu_mode == 1) {
 801712c:	4b97      	ldr	r3, [pc, #604]	; (801738c <EXTI15_10_IRQHandler+0x2c4>)
 801712e:	f993 3000 	ldrsb.w	r3, [r3]
 8017132:	2b01      	cmp	r3, #1
 8017134:	f000 80ec 	beq.w	8017310 <EXTI15_10_IRQHandler+0x248>
			if(menu_mode == 2) {
 8017138:	4b94      	ldr	r3, [pc, #592]	; (801738c <EXTI15_10_IRQHandler+0x2c4>)
 801713a:	f993 3000 	ldrsb.w	r3, [r3]
 801713e:	2b02      	cmp	r3, #2
 8017140:	d1cb      	bne.n	80170da <EXTI15_10_IRQHandler+0x12>
				touch_count = 0;
 8017142:	4b93      	ldr	r3, [pc, #588]	; (8017390 <EXTI15_10_IRQHandler+0x2c8>)
 8017144:	2200      	movs	r2, #0
 8017146:	701a      	strb	r2, [r3, #0]
				if((ts_State.touchX[0] >= 40) && (ts_State.touchX[0] <= 440)) {
 8017148:	4b8f      	ldr	r3, [pc, #572]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 801714a:	885a      	ldrh	r2, [r3, #2]
 801714c:	f1a2 0328 	sub.w	r3, r2, #40	; 0x28
 8017150:	b29b      	uxth	r3, r3
 8017152:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8017156:	d8c0      	bhi.n	80170da <EXTI15_10_IRQHandler+0x12>
					if((ts_State.touchY[0] > 40) && (ts_State.touchY[0] < 60))	{
 8017158:	4b8b      	ldr	r3, [pc, #556]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 801715a:	899b      	ldrh	r3, [r3, #12]
 801715c:	3b29      	subs	r3, #41	; 0x29
 801715e:	b29b      	uxth	r3, r3
 8017160:	2b12      	cmp	r3, #18
 8017162:	f240 818d 	bls.w	8017480 <EXTI15_10_IRQHandler+0x3b8>
					if((ts_State.touchY[0] > 80) && (ts_State.touchY[0] < 100)) {
 8017166:	4b88      	ldr	r3, [pc, #544]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 8017168:	899c      	ldrh	r4, [r3, #12]
 801716a:	f1a4 0351 	sub.w	r3, r4, #81	; 0x51
 801716e:	b29b      	uxth	r3, r3
 8017170:	2b12      	cmp	r3, #18
 8017172:	d818      	bhi.n	80171a6 <EXTI15_10_IRQHandler+0xde>
						jog_sensitivity = 0.01 * (float)(ts_State.touchX[0]-40) / 400;
 8017174:	4b84      	ldr	r3, [pc, #528]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 8017176:	885b      	ldrh	r3, [r3, #2]
 8017178:	f1a3 0028 	sub.w	r0, r3, #40	; 0x28
 801717c:	ee07 0a90 	vmov	s15, r0
 8017180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017184:	ee17 0a90 	vmov	r0, s15
 8017188:	f7e9 fa06 	bl	8000598 <__aeabi_f2d>
 801718c:	a37a      	add	r3, pc, #488	; (adr r3, 8017378 <EXTI15_10_IRQHandler+0x2b0>)
 801718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017192:	f7e9 fa59 	bl	8000648 <__aeabi_dmul>
 8017196:	2200      	movs	r2, #0
 8017198:	4b7e      	ldr	r3, [pc, #504]	; (8017394 <EXTI15_10_IRQHandler+0x2cc>)
 801719a:	f7e9 fb7f 	bl	800089c <__aeabi_ddiv>
 801719e:	f7e9 fd0d 	bl	8000bbc <__aeabi_d2f>
 80171a2:	4b7d      	ldr	r3, [pc, #500]	; (8017398 <EXTI15_10_IRQHandler+0x2d0>)
 80171a4:	6018      	str	r0, [r3, #0]
					if((ts_State.touchY[0] > 120) && (ts_State.touchY[0] < 140)) {
 80171a6:	3c79      	subs	r4, #121	; 0x79
 80171a8:	b2a4      	uxth	r4, r4
 80171aa:	2c12      	cmp	r4, #18
 80171ac:	d895      	bhi.n	80170da <EXTI15_10_IRQHandler+0x12>
						acue_sensitivity = 250 * (float)(ts_State.touchX[0]-40) / 400;
 80171ae:	4b76      	ldr	r3, [pc, #472]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 80171b0:	885b      	ldrh	r3, [r3, #2]
 80171b2:	3b28      	subs	r3, #40	; 0x28
 80171b4:	ee07 3a90 	vmov	s15, r3
 80171b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171bc:	ed9f 7a77 	vldr	s14, [pc, #476]	; 801739c <EXTI15_10_IRQHandler+0x2d4>
 80171c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80171c4:	eddf 6a76 	vldr	s13, [pc, #472]	; 80173a0 <EXTI15_10_IRQHandler+0x2d8>
 80171c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80171cc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80171d0:	ee17 3a90 	vmov	r3, s15
 80171d4:	4a73      	ldr	r2, [pc, #460]	; (80173a4 <EXTI15_10_IRQHandler+0x2dc>)
 80171d6:	7013      	strb	r3, [r2, #0]
 80171d8:	e77f      	b.n	80170da <EXTI15_10_IRQHandler+0x12>
			touch_count = 0;
 80171da:	4a6d      	ldr	r2, [pc, #436]	; (8017390 <EXTI15_10_IRQHandler+0x2c8>)
 80171dc:	2100      	movs	r1, #0
 80171de:	7011      	strb	r1, [r2, #0]
			GoToPosition(((float)ts_State.touchX[0] - 40) * (float)rekordbox.spectrum_size / rekordbox.lowp_spectrum_size);
 80171e0:	ee07 3a90 	vmov	s15, r3
 80171e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80171e8:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80173a8 <EXTI15_10_IRQHandler+0x2e0>
 80171ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80171f0:	4b6e      	ldr	r3, [pc, #440]	; (80173ac <EXTI15_10_IRQHandler+0x2e4>)
 80171f2:	ed93 7a94 	vldr	s14, [r3, #592]	; 0x250
 80171f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80171fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80171fe:	ed93 7a93 	vldr	s14, [r3, #588]	; 0x24c
 8017202:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017206:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801720a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 801720e:	ee17 0a90 	vmov	r0, s15
 8017212:	f001 fd69 	bl	8018ce8 <GoToPosition>
			if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 8017216:	4b66      	ldr	r3, [pc, #408]	; (80173b0 <EXTI15_10_IRQHandler+0x2e8>)
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	b913      	cbnz	r3, 8017222 <EXTI15_10_IRQHandler+0x15a>
 801721c:	f7ff fb26 	bl	801686c <BSP_AUDIO_OUT_Resume>
 8017220:	e75b      	b.n	80170da <EXTI15_10_IRQHandler+0x12>
				GetTrackTime();
 8017222:	f001 fe03 	bl	8018e2c <GetTrackTime>
				if(spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 8017226:	4b63      	ldr	r3, [pc, #396]	; (80173b4 <EXTI15_10_IRQHandler+0x2ec>)
 8017228:	789b      	ldrb	r3, [r3, #2]
 801722a:	f013 0f01 	tst.w	r3, #1
 801722e:	d007      	beq.n	8017240 <EXTI15_10_IRQHandler+0x178>
 8017230:	f043 0302 	orr.w	r3, r3, #2
 8017234:	4a5f      	ldr	r2, [pc, #380]	; (80173b4 <EXTI15_10_IRQHandler+0x2ec>)
 8017236:	7093      	strb	r3, [r2, #2]
				trak.state = SETCUE;
 8017238:	4b5d      	ldr	r3, [pc, #372]	; (80173b0 <EXTI15_10_IRQHandler+0x2e8>)
 801723a:	2202      	movs	r2, #2
 801723c:	701a      	strb	r2, [r3, #0]
 801723e:	e74c      	b.n	80170da <EXTI15_10_IRQHandler+0x12>
				else spi_tx[2] &= ~(1 << 1);
 8017240:	f023 0302 	bic.w	r3, r3, #2
 8017244:	4a5b      	ldr	r2, [pc, #364]	; (80173b4 <EXTI15_10_IRQHandler+0x2ec>)
 8017246:	7093      	strb	r3, [r2, #2]
 8017248:	e7f6      	b.n	8017238 <EXTI15_10_IRQHandler+0x170>
					HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801724a:	2028      	movs	r0, #40	; 0x28
 801724c:	f7ea f88e 	bl	800136c <HAL_NVIC_DisableIRQ>
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8017250:	4859      	ldr	r0, [pc, #356]	; (80173b8 <EXTI15_10_IRQHandler+0x2f0>)
 8017252:	6803      	ldr	r3, [r0, #0]
 8017254:	f06f 0201 	mvn.w	r2, #1
 8017258:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 801725a:	2400      	movs	r4, #0
 801725c:	625c      	str	r4, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 801725e:	f7ef fefb 	bl	8007058 <HAL_TIM_Base_Start_IT>
					touch_count = 0;
 8017262:	4b4b      	ldr	r3, [pc, #300]	; (8017390 <EXTI15_10_IRQHandler+0x2c8>)
 8017264:	701c      	strb	r4, [r3, #0]
					if(ts_State.touchX[0] > 280) {
 8017266:	4b48      	ldr	r3, [pc, #288]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 8017268:	885b      	ldrh	r3, [r3, #2]
 801726a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801726e:	d926      	bls.n	80172be <EXTI15_10_IRQHandler+0x1f6>
						if(stretch > 1) stretch--;
 8017270:	4b52      	ldr	r3, [pc, #328]	; (80173bc <EXTI15_10_IRQHandler+0x2f4>)
 8017272:	edd3 7a00 	vldr	s15, [r3]
 8017276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801727a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801727e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017282:	dd14      	ble.n	80172ae <EXTI15_10_IRQHandler+0x1e6>
 8017284:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017288:	edc3 7a00 	vstr	s15, [r3]
						if(stretch < 0.1) stretch = 0.125;
 801728c:	4b4b      	ldr	r3, [pc, #300]	; (80173bc <EXTI15_10_IRQHandler+0x2f4>)
 801728e:	6818      	ldr	r0, [r3, #0]
 8017290:	f7e9 f982 	bl	8000598 <__aeabi_f2d>
 8017294:	a33a      	add	r3, pc, #232	; (adr r3, 8017380 <EXTI15_10_IRQHandler+0x2b8>)
 8017296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801729a:	f7e9 fc47 	bl	8000b2c <__aeabi_dcmplt>
 801729e:	2800      	cmp	r0, #0
 80172a0:	f43f af44 	beq.w	801712c <EXTI15_10_IRQHandler+0x64>
 80172a4:	4b45      	ldr	r3, [pc, #276]	; (80173bc <EXTI15_10_IRQHandler+0x2f4>)
 80172a6:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 80172aa:	601a      	str	r2, [r3, #0]
 80172ac:	e73e      	b.n	801712c <EXTI15_10_IRQHandler+0x64>
						else stretch /= 2;
 80172ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80172b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80172b6:	4b41      	ldr	r3, [pc, #260]	; (80173bc <EXTI15_10_IRQHandler+0x2f4>)
 80172b8:	edc3 7a00 	vstr	s15, [r3]
 80172bc:	e7e6      	b.n	801728c <EXTI15_10_IRQHandler+0x1c4>
					else if(ts_State.touchX[0] < 200) {
 80172be:	2bc7      	cmp	r3, #199	; 0xc7
 80172c0:	d821      	bhi.n	8017306 <EXTI15_10_IRQHandler+0x23e>
						if(stretch >= 1) stretch++;
 80172c2:	4b3e      	ldr	r3, [pc, #248]	; (80173bc <EXTI15_10_IRQHandler+0x2f4>)
 80172c4:	edd3 7a00 	vldr	s15, [r3]
 80172c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80172cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80172d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172d4:	db11      	blt.n	80172fa <EXTI15_10_IRQHandler+0x232>
 80172d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80172da:	edc3 7a00 	vstr	s15, [r3]
						if(stretch > 4) stretch = 4;
 80172de:	4b37      	ldr	r3, [pc, #220]	; (80173bc <EXTI15_10_IRQHandler+0x2f4>)
 80172e0:	ed93 7a00 	vldr	s14, [r3]
 80172e4:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80172e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80172ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172f0:	f77f af1c 	ble.w	801712c <EXTI15_10_IRQHandler+0x64>
 80172f4:	edc3 7a00 	vstr	s15, [r3]
 80172f8:	e718      	b.n	801712c <EXTI15_10_IRQHandler+0x64>
						else stretch *= 2;
 80172fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80172fe:	4b2f      	ldr	r3, [pc, #188]	; (80173bc <EXTI15_10_IRQHandler+0x2f4>)
 8017300:	edc3 7a00 	vstr	s15, [r3]
 8017304:	e7eb      	b.n	80172de <EXTI15_10_IRQHandler+0x216>
					else stretch = 1;
 8017306:	4b2d      	ldr	r3, [pc, #180]	; (80173bc <EXTI15_10_IRQHandler+0x2f4>)
 8017308:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801730c:	601a      	str	r2, [r3, #0]
 801730e:	e70d      	b.n	801712c <EXTI15_10_IRQHandler+0x64>
				if(touch_count == 0) {
 8017310:	4b1f      	ldr	r3, [pc, #124]	; (8017390 <EXTI15_10_IRQHandler+0x2c8>)
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d05f      	beq.n	80173d8 <EXTI15_10_IRQHandler+0x310>
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8017318:	4b27      	ldr	r3, [pc, #156]	; (80173b8 <EXTI15_10_IRQHandler+0x2f0>)
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	2200      	movs	r2, #0
 801731e:	625a      	str	r2, [r3, #36]	; 0x24
					str_offset = ts_State.touchX[0] - prev_x;
 8017320:	4b19      	ldr	r3, [pc, #100]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 8017322:	885b      	ldrh	r3, [r3, #2]
 8017324:	4a26      	ldr	r2, [pc, #152]	; (80173c0 <EXTI15_10_IRQHandler+0x2f8>)
 8017326:	8812      	ldrh	r2, [r2, #0]
 8017328:	1a9b      	subs	r3, r3, r2
 801732a:	4a26      	ldr	r2, [pc, #152]	; (80173c4 <EXTI15_10_IRQHandler+0x2fc>)
 801732c:	6013      	str	r3, [r2, #0]
				touch_count++;
 801732e:	4a18      	ldr	r2, [pc, #96]	; (8017390 <EXTI15_10_IRQHandler+0x2c8>)
 8017330:	7813      	ldrb	r3, [r2, #0]
 8017332:	3301      	adds	r3, #1
 8017334:	7013      	strb	r3, [r2, #0]
				if((String_number != ts_State.touchY[0] / 20 - 1)) {
 8017336:	4b14      	ldr	r3, [pc, #80]	; (8017388 <EXTI15_10_IRQHandler+0x2c0>)
 8017338:	899b      	ldrh	r3, [r3, #12]
 801733a:	4a23      	ldr	r2, [pc, #140]	; (80173c8 <EXTI15_10_IRQHandler+0x300>)
 801733c:	fba2 2303 	umull	r2, r3, r2, r3
 8017340:	091b      	lsrs	r3, r3, #4
 8017342:	1e5a      	subs	r2, r3, #1
 8017344:	4921      	ldr	r1, [pc, #132]	; (80173cc <EXTI15_10_IRQHandler+0x304>)
 8017346:	6809      	ldr	r1, [r1, #0]
 8017348:	428a      	cmp	r2, r1
 801734a:	d072      	beq.n	8017432 <EXTI15_10_IRQHandler+0x36a>
					if(Total_tracks > 7) {
 801734c:	4820      	ldr	r0, [pc, #128]	; (80173d0 <EXTI15_10_IRQHandler+0x308>)
 801734e:	8800      	ldrh	r0, [r0, #0]
 8017350:	2807      	cmp	r0, #7
 8017352:	d965      	bls.n	8017420 <EXTI15_10_IRQHandler+0x358>
						if(String_number > (ts_State.touchY[0] / 20 - 1)) {
 8017354:	428b      	cmp	r3, r1
 8017356:	dc59      	bgt.n	801740c <EXTI15_10_IRQHandler+0x344>
							str_increment += abs((ts_State.touchY[0] / 20 - 1) - String_number);
 8017358:	1a53      	subs	r3, r2, r1
 801735a:	2b00      	cmp	r3, #0
 801735c:	bfb8      	it	lt
 801735e:	425b      	neglt	r3, r3
 8017360:	4a1c      	ldr	r2, [pc, #112]	; (80173d4 <EXTI15_10_IRQHandler+0x30c>)
 8017362:	6811      	ldr	r1, [r2, #0]
 8017364:	440b      	add	r3, r1
 8017366:	6013      	str	r3, [r2, #0]
							if(str_increment > Total_tracks - 7) str_increment = Total_tracks - 7;
 8017368:	1f82      	subs	r2, r0, #6
 801736a:	4293      	cmp	r3, r2
 801736c:	db58      	blt.n	8017420 <EXTI15_10_IRQHandler+0x358>
 801736e:	3807      	subs	r0, #7
 8017370:	4b18      	ldr	r3, [pc, #96]	; (80173d4 <EXTI15_10_IRQHandler+0x30c>)
 8017372:	6018      	str	r0, [r3, #0]
 8017374:	e054      	b.n	8017420 <EXTI15_10_IRQHandler+0x358>
 8017376:	bf00      	nop
 8017378:	47ae147b 	.word	0x47ae147b
 801737c:	3f847ae1 	.word	0x3f847ae1
 8017380:	9999999a 	.word	0x9999999a
 8017384:	3fb99999 	.word	0x3fb99999
 8017388:	2000ebb8 	.word	0x2000ebb8
 801738c:	2000060c 	.word	0x2000060c
 8017390:	2001746c 	.word	0x2001746c
 8017394:	40790000 	.word	0x40790000
 8017398:	200000a0 	.word	0x200000a0
 801739c:	437a0000 	.word	0x437a0000
 80173a0:	43c80000 	.word	0x43c80000
 80173a4:	20000054 	.word	0x20000054
 80173a8:	42200000 	.word	0x42200000
 80173ac:	20016620 	.word	0x20016620
 80173b0:	2000ebac 	.word	0x2000ebac
 80173b4:	20000058 	.word	0x20000058
 80173b8:	200174f4 	.word	0x200174f4
 80173bc:	20000028 	.word	0x20000028
 80173c0:	2001745c 	.word	0x2001745c
 80173c4:	20017468 	.word	0x20017468
 80173c8:	cccccccd 	.word	0xcccccccd
 80173cc:	2000009c 	.word	0x2000009c
 80173d0:	20001c38 	.word	0x20001c38
 80173d4:	20017464 	.word	0x20017464
					str_offset = 0;
 80173d8:	2200      	movs	r2, #0
 80173da:	4b62      	ldr	r3, [pc, #392]	; (8017564 <EXTI15_10_IRQHandler+0x49c>)
 80173dc:	601a      	str	r2, [r3, #0]
					prev_x = ts_State.touchX[0];
 80173de:	4b62      	ldr	r3, [pc, #392]	; (8017568 <EXTI15_10_IRQHandler+0x4a0>)
 80173e0:	8858      	ldrh	r0, [r3, #2]
 80173e2:	4962      	ldr	r1, [pc, #392]	; (801756c <EXTI15_10_IRQHandler+0x4a4>)
 80173e4:	8008      	strh	r0, [r1, #0]
					String_number = ts_State.touchY[0] / 20 - 1;
 80173e6:	899b      	ldrh	r3, [r3, #12]
 80173e8:	4961      	ldr	r1, [pc, #388]	; (8017570 <EXTI15_10_IRQHandler+0x4a8>)
 80173ea:	fba1 1303 	umull	r1, r3, r1, r3
 80173ee:	091b      	lsrs	r3, r3, #4
 80173f0:	3b01      	subs	r3, #1
 80173f2:	4960      	ldr	r1, [pc, #384]	; (8017574 <EXTI15_10_IRQHandler+0x4ac>)
 80173f4:	600b      	str	r3, [r1, #0]
					Mark_number = String_number;
 80173f6:	4960      	ldr	r1, [pc, #384]	; (8017578 <EXTI15_10_IRQHandler+0x4b0>)
 80173f8:	600b      	str	r3, [r1, #0]
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80173fa:	4860      	ldr	r0, [pc, #384]	; (801757c <EXTI15_10_IRQHandler+0x4b4>)
 80173fc:	6803      	ldr	r3, [r0, #0]
 80173fe:	f06f 0101 	mvn.w	r1, #1
 8017402:	6119      	str	r1, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8017404:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 8017406:	f7ef fe27 	bl	8007058 <HAL_TIM_Base_Start_IT>
 801740a:	e790      	b.n	801732e <EXTI15_10_IRQHandler+0x266>
							str_increment -= abs((ts_State.touchY[0] / 20 - 1) - String_number);
 801740c:	1a53      	subs	r3, r2, r1
 801740e:	2b00      	cmp	r3, #0
 8017410:	bfb8      	it	lt
 8017412:	425b      	neglt	r3, r3
 8017414:	495a      	ldr	r1, [pc, #360]	; (8017580 <EXTI15_10_IRQHandler+0x4b8>)
 8017416:	680a      	ldr	r2, [r1, #0]
 8017418:	1ad3      	subs	r3, r2, r3
 801741a:	600b      	str	r3, [r1, #0]
							if(str_increment < 0) str_increment = 0;
 801741c:	2b00      	cmp	r3, #0
 801741e:	db2c      	blt.n	801747a <EXTI15_10_IRQHandler+0x3b2>
					str_offset = 0;
 8017420:	2300      	movs	r3, #0
 8017422:	4a50      	ldr	r2, [pc, #320]	; (8017564 <EXTI15_10_IRQHandler+0x49c>)
 8017424:	6013      	str	r3, [r2, #0]
					touch_count = 0;
 8017426:	4a57      	ldr	r2, [pc, #348]	; (8017584 <EXTI15_10_IRQHandler+0x4bc>)
 8017428:	7013      	strb	r3, [r2, #0]
					String_number = -1;
 801742a:	4b52      	ldr	r3, [pc, #328]	; (8017574 <EXTI15_10_IRQHandler+0x4ac>)
 801742c:	f04f 32ff 	mov.w	r2, #4294967295
 8017430:	601a      	str	r2, [r3, #0]
				if(ts_State.touchX[0] > 380) {
 8017432:	4b4d      	ldr	r3, [pc, #308]	; (8017568 <EXTI15_10_IRQHandler+0x4a0>)
 8017434:	885b      	ldrh	r3, [r3, #2]
 8017436:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 801743a:	f67f ae7d 	bls.w	8017138 <EXTI15_10_IRQHandler+0x70>
					str_offset = 0;
 801743e:	2300      	movs	r3, #0
 8017440:	4a48      	ldr	r2, [pc, #288]	; (8017564 <EXTI15_10_IRQHandler+0x49c>)
 8017442:	6013      	str	r3, [r2, #0]
					touch_count = 0;
 8017444:	4a4f      	ldr	r2, [pc, #316]	; (8017584 <EXTI15_10_IRQHandler+0x4bc>)
 8017446:	7013      	strb	r3, [r2, #0]
					bOutOfData = 1;
 8017448:	4b4f      	ldr	r3, [pc, #316]	; (8017588 <EXTI15_10_IRQHandler+0x4c0>)
 801744a:	2201      	movs	r2, #1
 801744c:	601a      	str	r2, [r3, #0]
					unDmaBufMode = 3;
 801744e:	4b4f      	ldr	r3, [pc, #316]	; (801758c <EXTI15_10_IRQHandler+0x4c4>)
 8017450:	2203      	movs	r2, #3
 8017452:	601a      	str	r2, [r3, #0]
					Track_number = String_number + str_increment;
 8017454:	4b47      	ldr	r3, [pc, #284]	; (8017574 <EXTI15_10_IRQHandler+0x4ac>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	4a49      	ldr	r2, [pc, #292]	; (8017580 <EXTI15_10_IRQHandler+0x4b8>)
 801745a:	6812      	ldr	r2, [r2, #0]
 801745c:	4413      	add	r3, r2
 801745e:	4a4c      	ldr	r2, [pc, #304]	; (8017590 <EXTI15_10_IRQHandler+0x4c8>)
 8017460:	6013      	str	r3, [r2, #0]
					if(Track_number >= Total_tracks) Track_number = 0;
 8017462:	4a4c      	ldr	r2, [pc, #304]	; (8017594 <EXTI15_10_IRQHandler+0x4cc>)
 8017464:	8812      	ldrh	r2, [r2, #0]
 8017466:	4293      	cmp	r3, r2
 8017468:	db02      	blt.n	8017470 <EXTI15_10_IRQHandler+0x3a8>
 801746a:	4b49      	ldr	r3, [pc, #292]	; (8017590 <EXTI15_10_IRQHandler+0x4c8>)
 801746c:	2200      	movs	r2, #0
 801746e:	601a      	str	r2, [r3, #0]
					String_number = -1;
 8017470:	4b40      	ldr	r3, [pc, #256]	; (8017574 <EXTI15_10_IRQHandler+0x4ac>)
 8017472:	f04f 32ff 	mov.w	r2, #4294967295
 8017476:	601a      	str	r2, [r3, #0]
 8017478:	e65e      	b.n	8017138 <EXTI15_10_IRQHandler+0x70>
							if(str_increment < 0) str_increment = 0;
 801747a:	2200      	movs	r2, #0
 801747c:	600a      	str	r2, [r1, #0]
 801747e:	e7cf      	b.n	8017420 <EXTI15_10_IRQHandler+0x358>
						volume = 100 * (float)(ts_State.touchX[0]-40) / 400;
 8017480:	f1a2 0328 	sub.w	r3, r2, #40	; 0x28
 8017484:	ee07 3a90 	vmov	s15, r3
 8017488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801748c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8017598 <EXTI15_10_IRQHandler+0x4d0>
 8017490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017494:	eddf 6a41 	vldr	s13, [pc, #260]	; 801759c <EXTI15_10_IRQHandler+0x4d4>
 8017498:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801749c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80174a0:	edcd 7a01 	vstr	s15, [sp, #4]
 80174a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80174a8:	4b3d      	ldr	r3, [pc, #244]	; (80175a0 <EXTI15_10_IRQHandler+0x4d8>)
 80174aa:	7018      	strb	r0, [r3, #0]
						BSP_AUDIO_OUT_SetVolume(volume);
 80174ac:	f7ff fa00 	bl	80168b0 <BSP_AUDIO_OUT_SetVolume>
 80174b0:	e659      	b.n	8017166 <EXTI15_10_IRQHandler+0x9e>
		else if((ts_State.touchY[0] > 0) && (ts_State.touchY[0] < 20)) {
 80174b2:	1e51      	subs	r1, r2, #1
 80174b4:	b289      	uxth	r1, r1
 80174b6:	2912      	cmp	r1, #18
 80174b8:	d90b      	bls.n	80174d2 <EXTI15_10_IRQHandler+0x40a>
		else if((ts_State.touchX[0] > 80) && (ts_State.touchX[0] < 280) && (ts_State.touchY[0] > 180) && (ts_State.touchY[0] < 210)) {
 80174ba:	3b51      	subs	r3, #81	; 0x51
 80174bc:	b29b      	uxth	r3, r3
 80174be:	2bc6      	cmp	r3, #198	; 0xc6
 80174c0:	d803      	bhi.n	80174ca <EXTI15_10_IRQHandler+0x402>
 80174c2:	2ab4      	cmp	r2, #180	; 0xb4
 80174c4:	d901      	bls.n	80174ca <EXTI15_10_IRQHandler+0x402>
 80174c6:	2ad1      	cmp	r2, #209	; 0xd1
 80174c8:	d931      	bls.n	801752e <EXTI15_10_IRQHandler+0x466>
			touch_count = 0;
 80174ca:	4b2e      	ldr	r3, [pc, #184]	; (8017584 <EXTI15_10_IRQHandler+0x4bc>)
 80174cc:	2200      	movs	r2, #0
 80174ce:	701a      	strb	r2, [r3, #0]
 80174d0:	e603      	b.n	80170da <EXTI15_10_IRQHandler+0x12>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80174d2:	2028      	movs	r0, #40	; 0x28
 80174d4:	f7e9 ff4a 	bl	800136c <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80174d8:	4828      	ldr	r0, [pc, #160]	; (801757c <EXTI15_10_IRQHandler+0x4b4>)
 80174da:	6803      	ldr	r3, [r0, #0]
 80174dc:	f06f 0201 	mvn.w	r2, #1
 80174e0:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 80174e2:	2400      	movs	r4, #0
 80174e4:	625c      	str	r4, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 80174e6:	f7ef fdb7 	bl	8007058 <HAL_TIM_Base_Start_IT>
			touch_count = 0;
 80174ea:	4b26      	ldr	r3, [pc, #152]	; (8017584 <EXTI15_10_IRQHandler+0x4bc>)
 80174ec:	701c      	strb	r4, [r3, #0]
			if(ts_State.touchX[0] < 200) {
 80174ee:	4b1e      	ldr	r3, [pc, #120]	; (8017568 <EXTI15_10_IRQHandler+0x4a0>)
 80174f0:	885b      	ldrh	r3, [r3, #2]
 80174f2:	2bc7      	cmp	r3, #199	; 0xc7
 80174f4:	d80b      	bhi.n	801750e <EXTI15_10_IRQHandler+0x446>
				menu_mode--;
 80174f6:	4a2b      	ldr	r2, [pc, #172]	; (80175a4 <EXTI15_10_IRQHandler+0x4dc>)
 80174f8:	7813      	ldrb	r3, [r2, #0]
 80174fa:	3b01      	subs	r3, #1
 80174fc:	b25b      	sxtb	r3, r3
 80174fe:	7013      	strb	r3, [r2, #0]
				if(menu_mode < 0) menu_mode = 2;
 8017500:	42a3      	cmp	r3, r4
 8017502:	f6bf adea 	bge.w	80170da <EXTI15_10_IRQHandler+0x12>
 8017506:	4613      	mov	r3, r2
 8017508:	2202      	movs	r2, #2
 801750a:	701a      	strb	r2, [r3, #0]
 801750c:	e5e5      	b.n	80170da <EXTI15_10_IRQHandler+0x12>
			else if(ts_State.touchX[0] > 280) {
 801750e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8017512:	f67f ade2 	bls.w	80170da <EXTI15_10_IRQHandler+0x12>
				menu_mode++;
 8017516:	4a23      	ldr	r2, [pc, #140]	; (80175a4 <EXTI15_10_IRQHandler+0x4dc>)
 8017518:	7813      	ldrb	r3, [r2, #0]
 801751a:	3301      	adds	r3, #1
 801751c:	b25b      	sxtb	r3, r3
 801751e:	7013      	strb	r3, [r2, #0]
				if(menu_mode > 2) menu_mode = 0;
 8017520:	2b02      	cmp	r3, #2
 8017522:	f77f adda 	ble.w	80170da <EXTI15_10_IRQHandler+0x12>
 8017526:	4613      	mov	r3, r2
 8017528:	2200      	movs	r2, #0
 801752a:	701a      	strb	r2, [r3, #0]
 801752c:	e5d5      	b.n	80170da <EXTI15_10_IRQHandler+0x12>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801752e:	2028      	movs	r0, #40	; 0x28
 8017530:	f7e9 ff1c 	bl	800136c <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8017534:	4811      	ldr	r0, [pc, #68]	; (801757c <EXTI15_10_IRQHandler+0x4b4>)
 8017536:	6803      	ldr	r3, [r0, #0]
 8017538:	f06f 0201 	mvn.w	r2, #1
 801753c:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 801753e:	2400      	movs	r4, #0
 8017540:	625c      	str	r4, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8017542:	f7ef fd89 	bl	8007058 <HAL_TIM_Base_Start_IT>
			touch_count = 0;
 8017546:	4b0f      	ldr	r3, [pc, #60]	; (8017584 <EXTI15_10_IRQHandler+0x4bc>)
 8017548:	701c      	strb	r4, [r3, #0]
			if(display.timemode == 0) {
 801754a:	4b17      	ldr	r3, [pc, #92]	; (80175a8 <EXTI15_10_IRQHandler+0x4e0>)
 801754c:	781b      	ldrb	r3, [r3, #0]
 801754e:	b923      	cbnz	r3, 801755a <EXTI15_10_IRQHandler+0x492>
				display.timemode = 1;
 8017550:	4b15      	ldr	r3, [pc, #84]	; (80175a8 <EXTI15_10_IRQHandler+0x4e0>)
 8017552:	2201      	movs	r2, #1
 8017554:	701a      	strb	r2, [r3, #0]
				display.trackbarmode = 1;
 8017556:	711a      	strb	r2, [r3, #4]
 8017558:	e5bf      	b.n	80170da <EXTI15_10_IRQHandler+0x12>
				display.timemode = 0;
 801755a:	4b13      	ldr	r3, [pc, #76]	; (80175a8 <EXTI15_10_IRQHandler+0x4e0>)
 801755c:	2200      	movs	r2, #0
 801755e:	701a      	strb	r2, [r3, #0]
				display.trackbarmode = 0;
 8017560:	711a      	strb	r2, [r3, #4]
 8017562:	e5ba      	b.n	80170da <EXTI15_10_IRQHandler+0x12>
 8017564:	20017468 	.word	0x20017468
 8017568:	2000ebb8 	.word	0x2000ebb8
 801756c:	2001745c 	.word	0x2001745c
 8017570:	cccccccd 	.word	0xcccccccd
 8017574:	2000009c 	.word	0x2000009c
 8017578:	20000094 	.word	0x20000094
 801757c:	200174f4 	.word	0x200174f4
 8017580:	20017464 	.word	0x20017464
 8017584:	2001746c 	.word	0x2001746c
 8017588:	2000e378 	.word	0x2000e378
 801758c:	2000ebe4 	.word	0x2000ebe4
 8017590:	2000e374 	.word	0x2000e374
 8017594:	20001c38 	.word	0x20001c38
 8017598:	42c80000 	.word	0x42c80000
 801759c:	43c80000 	.word	0x43c80000
 80175a0:	2000005c 	.word	0x2000005c
 80175a4:	2000060c 	.word	0x2000060c
 80175a8:	200005f0 	.word	0x200005f0

080175ac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80175ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(trak.state == STOPPED) {
 80175ae:	4b0c      	ldr	r3, [pc, #48]	; (80175e0 <TIM8_UP_TIM13_IRQHandler+0x34>)
 80175b0:	781b      	ldrb	r3, [r3, #0]
 80175b2:	2b01      	cmp	r3, #1
 80175b4:	d005      	beq.n	80175c2 <TIM8_UP_TIM13_IRQHandler+0x16>
		spi_tx[2] ^= (1 << 0);
	}
	if(trak.state == SETCUE) {
 80175b6:	2b02      	cmp	r3, #2
 80175b8:	d009      	beq.n	80175ce <TIM8_UP_TIM13_IRQHandler+0x22>
		spi_tx[2] ^= (1 << 0);
		spi_tx[2] ^= (1 << 1);
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80175ba:	480a      	ldr	r0, [pc, #40]	; (80175e4 <TIM8_UP_TIM13_IRQHandler+0x38>)
 80175bc:	f7ef fe01 	bl	80071c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80175c0:	bd08      	pop	{r3, pc}
		spi_tx[2] ^= (1 << 0);
 80175c2:	4909      	ldr	r1, [pc, #36]	; (80175e8 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 80175c4:	788a      	ldrb	r2, [r1, #2]
 80175c6:	f082 0201 	eor.w	r2, r2, #1
 80175ca:	708a      	strb	r2, [r1, #2]
 80175cc:	e7f3      	b.n	80175b6 <TIM8_UP_TIM13_IRQHandler+0xa>
		spi_tx[2] ^= (1 << 0);
 80175ce:	4a06      	ldr	r2, [pc, #24]	; (80175e8 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 80175d0:	7893      	ldrb	r3, [r2, #2]
 80175d2:	f083 0301 	eor.w	r3, r3, #1
 80175d6:	7093      	strb	r3, [r2, #2]
		spi_tx[2] ^= (1 << 1);
 80175d8:	f083 0302 	eor.w	r3, r3, #2
 80175dc:	7093      	strb	r3, [r2, #2]
 80175de:	e7ec      	b.n	80175ba <TIM8_UP_TIM13_IRQHandler+0xe>
 80175e0:	2000ebac 	.word	0x2000ebac
 80175e4:	20017574 	.word	0x20017574
 80175e8:	20000058 	.word	0x20000058

080175ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80175ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(pulses != old_pulses) {
 80175ee:	4b26      	ldr	r3, [pc, #152]	; (8017688 <TIM5_IRQHandler+0x9c>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	4a26      	ldr	r2, [pc, #152]	; (801768c <TIM5_IRQHandler+0xa0>)
 80175f4:	6812      	ldr	r2, [r2, #0]
 80175f6:	4293      	cmp	r3, r2
 80175f8:	d029      	beq.n	801764e <TIM5_IRQHandler+0x62>
		if(pulses != 0) {
 80175fa:	b37b      	cbz	r3, 801765c <TIM5_IRQHandler+0x70>
			New_frequency = (uint32_t)((trak.bitrate / 2)
 80175fc:	4924      	ldr	r1, [pc, #144]	; (8017690 <TIM5_IRQHandler+0xa4>)
 80175fe:	890a      	ldrh	r2, [r1, #8]
 8017600:	0852      	lsrs	r2, r2, #1
					*(1 + trak.percent + jog_sensitivity*pulses));
 8017602:	ed91 7a01 	vldr	s14, [r1, #4]
 8017606:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801760a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801760e:	ee07 3a90 	vmov	s15, r3
 8017612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017616:	4b1f      	ldr	r3, [pc, #124]	; (8017694 <TIM5_IRQHandler+0xa8>)
 8017618:	edd3 6a00 	vldr	s13, [r3]
 801761c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017624:	ee07 2a90 	vmov	s15, r2
 8017628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801762c:	ee67 7a87 	vmul.f32	s15, s15, s14
			New_frequency = (uint32_t)((trak.bitrate / 2)
 8017630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017634:	4b18      	ldr	r3, [pc, #96]	; (8017698 <TIM5_IRQHandler+0xac>)
 8017636:	edc3 7a00 	vstr	s15, [r3]
		}
		else {
			New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
		}
		BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801763a:	4b17      	ldr	r3, [pc, #92]	; (8017698 <TIM5_IRQHandler+0xac>)
 801763c:	6819      	ldr	r1, [r3, #0]
 801763e:	2200      	movs	r2, #0
 8017640:	4816      	ldr	r0, [pc, #88]	; (801769c <TIM5_IRQHandler+0xb0>)
 8017642:	f7ff f9d9 	bl	80169f8 <BSP_AUDIO_OUT_ClockConfig>
		old_pulses = pulses;
 8017646:	4b10      	ldr	r3, [pc, #64]	; (8017688 <TIM5_IRQHandler+0x9c>)
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	4b10      	ldr	r3, [pc, #64]	; (801768c <TIM5_IRQHandler+0xa0>)
 801764c:	601a      	str	r2, [r3, #0]
	}
	pulses = 0;
 801764e:	4b0e      	ldr	r3, [pc, #56]	; (8017688 <TIM5_IRQHandler+0x9c>)
 8017650:	2200      	movs	r2, #0
 8017652:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8017654:	4812      	ldr	r0, [pc, #72]	; (80176a0 <TIM5_IRQHandler+0xb4>)
 8017656:	f7ef fdb4 	bl	80071c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 801765a:	bd08      	pop	{r3, pc}
			New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801765c:	4a0c      	ldr	r2, [pc, #48]	; (8017690 <TIM5_IRQHandler+0xa4>)
 801765e:	8913      	ldrh	r3, [r2, #8]
 8017660:	085b      	lsrs	r3, r3, #1
 8017662:	ee07 3a90 	vmov	s15, r3
 8017666:	ed92 7a01 	vldr	s14, [r2, #4]
 801766a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801766e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017676:	ee67 7a87 	vmul.f32	s15, s15, s14
 801767a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801767e:	4b06      	ldr	r3, [pc, #24]	; (8017698 <TIM5_IRQHandler+0xac>)
 8017680:	edc3 7a00 	vstr	s15, [r3]
 8017684:	e7d9      	b.n	801763a <TIM5_IRQHandler+0x4e>
 8017686:	bf00      	nop
 8017688:	20017460 	.word	0x20017460
 801768c:	20017458 	.word	0x20017458
 8017690:	2000ebac 	.word	0x2000ebac
 8017694:	200000a0 	.word	0x200000a0
 8017698:	20000098 	.word	0x20000098
 801769c:	20017228 	.word	0x20017228
 80176a0:	200174b4 	.word	0x200174b4

080176a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80176a4:	b510      	push	{r4, lr}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80176a6:	4b07      	ldr	r3, [pc, #28]	; (80176c4 <TIM6_DAC_IRQHandler+0x20>)
 80176a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80176ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	NVIC_EnableIRQ(EXTI15_10_IRQn);
	HAL_TIM_Base_Stop_IT(&htim6);
 80176ae:	4c06      	ldr	r4, [pc, #24]	; (80176c8 <TIM6_DAC_IRQHandler+0x24>)
 80176b0:	4620      	mov	r0, r4
 80176b2:	f7ef fd29 	bl	8007108 <HAL_TIM_Base_Stop_IT>
	touch_count = 0;
 80176b6:	4b05      	ldr	r3, [pc, #20]	; (80176cc <TIM6_DAC_IRQHandler+0x28>)
 80176b8:	2200      	movs	r2, #0
 80176ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80176bc:	4620      	mov	r0, r4
 80176be:	f7ef fd80 	bl	80071c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80176c2:	bd10      	pop	{r4, pc}
 80176c4:	e000e100 	.word	0xe000e100
 80176c8:	200174f4 	.word	0x200174f4
 80176cc:	2001746c 	.word	0x2001746c

080176d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80176d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(display.trackbarmode == 0) display.trackbarmode = 1;
 80176d2:	4b07      	ldr	r3, [pc, #28]	; (80176f0 <TIM7_IRQHandler+0x20>)
 80176d4:	791b      	ldrb	r3, [r3, #4]
 80176d6:	b933      	cbnz	r3, 80176e6 <TIM7_IRQHandler+0x16>
 80176d8:	4b05      	ldr	r3, [pc, #20]	; (80176f0 <TIM7_IRQHandler+0x20>)
 80176da:	2201      	movs	r2, #1
 80176dc:	711a      	strb	r2, [r3, #4]
	else display.trackbarmode = 0;
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80176de:	4805      	ldr	r0, [pc, #20]	; (80176f4 <TIM7_IRQHandler+0x24>)
 80176e0:	f7ef fd6f 	bl	80071c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80176e4:	bd08      	pop	{r3, pc}
	else display.trackbarmode = 0;
 80176e6:	4b02      	ldr	r3, [pc, #8]	; (80176f0 <TIM7_IRQHandler+0x20>)
 80176e8:	2200      	movs	r2, #0
 80176ea:	711a      	strb	r2, [r3, #4]
 80176ec:	e7f7      	b.n	80176de <TIM7_IRQHandler+0xe>
 80176ee:	bf00      	nop
 80176f0:	200005f0 	.word	0x200005f0
 80176f4:	20017534 	.word	0x20017534

080176f8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80176f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80176fa:	4802      	ldr	r0, [pc, #8]	; (8017704 <DMA2_Stream4_IRQHandler+0xc>)
 80176fc:	f7ea f904 	bl	8001908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8017700:	bd08      	pop	{r3, pc}
 8017702:	bf00      	nop
 8017704:	200171c8 	.word	0x200171c8

08017708 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8017708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 801770a:	4802      	ldr	r0, [pc, #8]	; (8017714 <OTG_FS_IRQHandler+0xc>)
 801770c:	f7eb faa3 	bl	8002c56 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8017710:	bd08      	pop	{r3, pc}
 8017712:	bf00      	nop
 8017714:	20017d90 	.word	0x20017d90

08017718 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8017718:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 801771a:	4802      	ldr	r0, [pc, #8]	; (8017724 <OTG_HS_IRQHandler+0xc>)
 801771c:	f7eb fa9b 	bl	8002c56 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8017720:	bd08      	pop	{r3, pc}
 8017722:	bf00      	nop
 8017724:	20018054 	.word	0x20018054

08017728 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8017728:	b538      	push	{r3, r4, r5, lr}
 801772a:	ed2d 8b02 	vpush	{d8}
	switch(spi_rx[1] & 0xF0) {
 801772e:	4b8d      	ldr	r3, [pc, #564]	; (8017964 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8017730:	785b      	ldrb	r3, [r3, #1]
 8017732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017736:	2bb0      	cmp	r3, #176	; 0xb0
 8017738:	f000 83ba 	beq.w	8017eb0 <HAL_SPI_TxRxCpltCallback+0x788>
 801773c:	d819      	bhi.n	8017772 <HAL_SPI_TxRxCpltCallback+0x4a>
 801773e:	2b80      	cmp	r3, #128	; 0x80
 8017740:	f000 82e8 	beq.w	8017d14 <HAL_SPI_TxRxCpltCallback+0x5ec>
 8017744:	2b90      	cmp	r3, #144	; 0x90
 8017746:	d132      	bne.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
	case 0x90: {
		switch(spi_rx[2]) {
 8017748:	4b86      	ldr	r3, [pc, #536]	; (8017964 <HAL_SPI_TxRxCpltCallback+0x23c>)
 801774a:	789b      	ldrb	r3, [r3, #2]
 801774c:	3b40      	subs	r3, #64	; 0x40
 801774e:	2b0d      	cmp	r3, #13
 8017750:	d82d      	bhi.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
 8017752:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017756:	0092      	.short	0x0092
 8017758:	002c00a1 	.word	0x002c00a1
 801775c:	00bf00b0 	.word	0x00bf00b0
 8017760:	002f00e6 	.word	0x002f00e6
 8017764:	00830068 	.word	0x00830068
 8017768:	02ad024f 	.word	0x02ad024f
 801776c:	01bc0129 	.word	0x01bc0129
 8017770:	003e      	.short	0x003e
	switch(spi_rx[1] & 0xF0) {
 8017772:	2be0      	cmp	r3, #224	; 0xe0
 8017774:	d11b      	bne.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				}
			}
			break;
		}
		case 0xE0: {
			uint16_t pitch_rx = spi_rx[3];
 8017776:	4b7b      	ldr	r3, [pc, #492]	; (8017964 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8017778:	78da      	ldrb	r2, [r3, #3]
			pitch_rx <<= 8;
			pitch_rx |= spi_rx[2];
 801777a:	789c      	ldrb	r4, [r3, #2]
 801777c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
			if(flag == 0) {
 8017780:	4b79      	ldr	r3, [pc, #484]	; (8017968 <HAL_SPI_TxRxCpltCallback+0x240>)
 8017782:	781b      	ldrb	r3, [r3, #0]
 8017784:	b93b      	cbnz	r3, 8017796 <HAL_SPI_TxRxCpltCallback+0x6e>
				if(trak.pitch == 0) trak.pitch = pitch_rx;
 8017786:	4b79      	ldr	r3, [pc, #484]	; (801796c <HAL_SPI_TxRxCpltCallback+0x244>)
 8017788:	885b      	ldrh	r3, [r3, #2]
 801778a:	b90b      	cbnz	r3, 8017790 <HAL_SPI_TxRxCpltCallback+0x68>
 801778c:	4b77      	ldr	r3, [pc, #476]	; (801796c <HAL_SPI_TxRxCpltCallback+0x244>)
 801778e:	805c      	strh	r4, [r3, #2]
				flag = 1;
 8017790:	4b75      	ldr	r3, [pc, #468]	; (8017968 <HAL_SPI_TxRxCpltCallback+0x240>)
 8017792:	2201      	movs	r2, #1
 8017794:	701a      	strb	r2, [r3, #0]
			}
			int delta = trak.pitch - pitch_rx;
 8017796:	4b75      	ldr	r3, [pc, #468]	; (801796c <HAL_SPI_TxRxCpltCallback+0x244>)
 8017798:	885b      	ldrh	r3, [r3, #2]
			if(delta < 0) delta = pitch_rx - trak.pitch;
 801779a:	1b1a      	subs	r2, r3, r4
 801779c:	f100 8457 	bmi.w	801804e <HAL_SPI_TxRxCpltCallback+0x926>
			if(pitch_rx < 64) pitch_rx = 64;
 80177a0:	2c3f      	cmp	r4, #63	; 0x3f
 80177a2:	d800      	bhi.n	80177a6 <HAL_SPI_TxRxCpltCallback+0x7e>
 80177a4:	2440      	movs	r4, #64	; 0x40
			if(delta < 16384) {
 80177a6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80177aa:	f2c0 8453 	blt.w	8018054 <HAL_SPI_TxRxCpltCallback+0x92c>
			if(pitch_rx < 64) pitch_rx = 64;
 80177ae:	2300      	movs	r3, #0
 80177b0:	f000 bc81 	b.w	80180b6 <HAL_SPI_TxRxCpltCallback+0x98e>
			if(display.quantize == 1) {
 80177b4:	4b6e      	ldr	r3, [pc, #440]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 80177b6:	7c5b      	ldrb	r3, [r3, #17]
 80177b8:	2b01      	cmp	r3, #1
 80177ba:	d004      	beq.n	80177c6 <HAL_SPI_TxRxCpltCallback+0x9e>
				display.loopstart = file_pos_wide;
 80177bc:	4b6d      	ldr	r3, [pc, #436]	; (8017974 <HAL_SPI_TxRxCpltCallback+0x24c>)
 80177be:	681a      	ldr	r2, [r3, #0]
 80177c0:	4b6b      	ldr	r3, [pc, #428]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 80177c2:	609a      	str	r2, [r3, #8]
 80177c4:	e7f3      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				display.loopstart = QuantizePosition(0);
 80177c6:	2000      	movs	r0, #0
 80177c8:	f7fc f9be 	bl	8013b48 <QuantizePosition>
 80177cc:	4b68      	ldr	r3, [pc, #416]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 80177ce:	6098      	str	r0, [r3, #8]
 80177d0:	e7ed      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			if(menu_mode == 1) {
 80177d2:	4b69      	ldr	r3, [pc, #420]	; (8017978 <HAL_SPI_TxRxCpltCallback+0x250>)
 80177d4:	f993 3000 	ldrsb.w	r3, [r3]
 80177d8:	2b01      	cmp	r3, #1
 80177da:	d1e8      	bne.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				bOutOfData = 1;
 80177dc:	4b67      	ldr	r3, [pc, #412]	; (801797c <HAL_SPI_TxRxCpltCallback+0x254>)
 80177de:	2201      	movs	r2, #1
 80177e0:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 80177e2:	4b67      	ldr	r3, [pc, #412]	; (8017980 <HAL_SPI_TxRxCpltCallback+0x258>)
 80177e4:	2203      	movs	r2, #3
 80177e6:	601a      	str	r2, [r3, #0]
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80177e8:	2028      	movs	r0, #40	; 0x28
 80177ea:	f7e9 fdbf 	bl	800136c <HAL_NVIC_DisableIRQ>
				__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80177ee:	4865      	ldr	r0, [pc, #404]	; (8017984 <HAL_SPI_TxRxCpltCallback+0x25c>)
 80177f0:	6803      	ldr	r3, [r0, #0]
 80177f2:	f06f 0201 	mvn.w	r2, #1
 80177f6:	611a      	str	r2, [r3, #16]
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 80177f8:	2200      	movs	r2, #0
 80177fa:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim6);
 80177fc:	f7ef fc2c 	bl	8007058 <HAL_TIM_Base_Start_IT>
				Track_number = Mark_number + str_increment;
 8017800:	4b61      	ldr	r3, [pc, #388]	; (8017988 <HAL_SPI_TxRxCpltCallback+0x260>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	4a61      	ldr	r2, [pc, #388]	; (801798c <HAL_SPI_TxRxCpltCallback+0x264>)
 8017806:	6812      	ldr	r2, [r2, #0]
 8017808:	4413      	add	r3, r2
 801780a:	4a61      	ldr	r2, [pc, #388]	; (8017990 <HAL_SPI_TxRxCpltCallback+0x268>)
 801780c:	6013      	str	r3, [r2, #0]
				if(Track_number >= Total_tracks) Track_number = 0;
 801780e:	4a61      	ldr	r2, [pc, #388]	; (8017994 <HAL_SPI_TxRxCpltCallback+0x26c>)
 8017810:	8812      	ldrh	r2, [r2, #0]
 8017812:	4293      	cmp	r3, r2
 8017814:	db02      	blt.n	801781c <HAL_SPI_TxRxCpltCallback+0xf4>
 8017816:	4b5e      	ldr	r3, [pc, #376]	; (8017990 <HAL_SPI_TxRxCpltCallback+0x268>)
 8017818:	2200      	movs	r2, #0
 801781a:	601a      	str	r2, [r3, #0]
				String_number = -1;
 801781c:	4b5e      	ldr	r3, [pc, #376]	; (8017998 <HAL_SPI_TxRxCpltCallback+0x270>)
 801781e:	f04f 32ff 	mov.w	r2, #4294967295
 8017822:	601a      	str	r2, [r3, #0]
 8017824:	e7c3      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			if(display.quantize == 1) {
 8017826:	4b52      	ldr	r3, [pc, #328]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 8017828:	7c5b      	ldrb	r3, [r3, #17]
 801782a:	2b01      	cmp	r3, #1
 801782c:	d010      	beq.n	8017850 <HAL_SPI_TxRxCpltCallback+0x128>
				display.loopend = file_pos_wide;
 801782e:	4b51      	ldr	r3, [pc, #324]	; (8017974 <HAL_SPI_TxRxCpltCallback+0x24c>)
 8017830:	681a      	ldr	r2, [r3, #0]
 8017832:	4b4f      	ldr	r3, [pc, #316]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 8017834:	60da      	str	r2, [r3, #12]
			if(display.loop == 0) display.loop = 1;
 8017836:	4b4e      	ldr	r3, [pc, #312]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 8017838:	7c1b      	ldrb	r3, [r3, #16]
 801783a:	b913      	cbnz	r3, 8017842 <HAL_SPI_TxRxCpltCallback+0x11a>
 801783c:	4b4c      	ldr	r3, [pc, #304]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 801783e:	2201      	movs	r2, #1
 8017840:	741a      	strb	r2, [r3, #16]
			GoToPosition(display.loopstart);
 8017842:	4b4b      	ldr	r3, [pc, #300]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 8017844:	6898      	ldr	r0, [r3, #8]
 8017846:	f001 fa4f 	bl	8018ce8 <GoToPosition>
			BSP_AUDIO_OUT_Resume();
 801784a:	f7ff f80f 	bl	801686c <BSP_AUDIO_OUT_Resume>
			break;
 801784e:	e7ae      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				display.loopend = QuantizePosition(0);
 8017850:	2000      	movs	r0, #0
 8017852:	f7fc f979 	bl	8013b48 <QuantizePosition>
 8017856:	4b46      	ldr	r3, [pc, #280]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 8017858:	60d8      	str	r0, [r3, #12]
 801785a:	e7ec      	b.n	8017836 <HAL_SPI_TxRxCpltCallback+0x10e>
			button_flag ^= (1 << 2);
 801785c:	4a4f      	ldr	r2, [pc, #316]	; (801799c <HAL_SPI_TxRxCpltCallback+0x274>)
 801785e:	8813      	ldrh	r3, [r2, #0]
 8017860:	f083 0304 	eor.w	r3, r3, #4
 8017864:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 8017866:	484e      	ldr	r0, [pc, #312]	; (80179a0 <HAL_SPI_TxRxCpltCallback+0x278>)
 8017868:	6803      	ldr	r3, [r0, #0]
 801786a:	f06f 0201 	mvn.w	r2, #1
 801786e:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 8017870:	2200      	movs	r2, #0
 8017872:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 8017874:	f7ef fbf0 	bl	8007058 <HAL_TIM_Base_Start_IT>
			break;
 8017878:	e799      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			button_flag ^= (1 << 3);
 801787a:	4a48      	ldr	r2, [pc, #288]	; (801799c <HAL_SPI_TxRxCpltCallback+0x274>)
 801787c:	8813      	ldrh	r3, [r2, #0]
 801787e:	f083 0308 	eor.w	r3, r3, #8
 8017882:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 8017884:	4846      	ldr	r0, [pc, #280]	; (80179a0 <HAL_SPI_TxRxCpltCallback+0x278>)
 8017886:	6803      	ldr	r3, [r0, #0]
 8017888:	f06f 0201 	mvn.w	r2, #1
 801788c:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 801788e:	2200      	movs	r2, #0
 8017890:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 8017892:	f7ef fbe1 	bl	8007058 <HAL_TIM_Base_Start_IT>
			break;
 8017896:	e78a      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			button_flag ^= (1 << 0);
 8017898:	4a40      	ldr	r2, [pc, #256]	; (801799c <HAL_SPI_TxRxCpltCallback+0x274>)
 801789a:	8813      	ldrh	r3, [r2, #0]
 801789c:	f083 0301 	eor.w	r3, r3, #1
 80178a0:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 80178a2:	483f      	ldr	r0, [pc, #252]	; (80179a0 <HAL_SPI_TxRxCpltCallback+0x278>)
 80178a4:	6803      	ldr	r3, [r0, #0]
 80178a6:	f06f 0201 	mvn.w	r2, #1
 80178aa:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 80178ac:	2200      	movs	r2, #0
 80178ae:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 80178b0:	f7ef fbd2 	bl	8007058 <HAL_TIM_Base_Start_IT>
			break;
 80178b4:	e77b      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			button_flag ^= (1 << 1);
 80178b6:	4a39      	ldr	r2, [pc, #228]	; (801799c <HAL_SPI_TxRxCpltCallback+0x274>)
 80178b8:	8813      	ldrh	r3, [r2, #0]
 80178ba:	f083 0302 	eor.w	r3, r3, #2
 80178be:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 80178c0:	4837      	ldr	r0, [pc, #220]	; (80179a0 <HAL_SPI_TxRxCpltCallback+0x278>)
 80178c2:	6803      	ldr	r3, [r0, #0]
 80178c4:	f06f 0201 	mvn.w	r2, #1
 80178c8:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 80178ca:	2200      	movs	r2, #0
 80178cc:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 80178ce:	f7ef fbc3 	bl	8007058 <HAL_TIM_Base_Start_IT>
			break;
 80178d2:	e76c      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			if(!(button_flag & (1 << 2))) {
 80178d4:	4b31      	ldr	r3, [pc, #196]	; (801799c <HAL_SPI_TxRxCpltCallback+0x274>)
 80178d6:	881b      	ldrh	r3, [r3, #0]
 80178d8:	f013 0f04 	tst.w	r3, #4
 80178dc:	d10a      	bne.n	80178f4 <HAL_SPI_TxRxCpltCallback+0x1cc>
				bOutOfData = 1;
 80178de:	4b27      	ldr	r3, [pc, #156]	; (801797c <HAL_SPI_TxRxCpltCallback+0x254>)
 80178e0:	2201      	movs	r2, #1
 80178e2:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 80178e4:	4b26      	ldr	r3, [pc, #152]	; (8017980 <HAL_SPI_TxRxCpltCallback+0x258>)
 80178e6:	2203      	movs	r2, #3
 80178e8:	601a      	str	r2, [r3, #0]
				Track_number--;
 80178ea:	4a29      	ldr	r2, [pc, #164]	; (8017990 <HAL_SPI_TxRxCpltCallback+0x268>)
 80178ec:	6813      	ldr	r3, [r2, #0]
 80178ee:	3b01      	subs	r3, #1
 80178f0:	6013      	str	r3, [r2, #0]
 80178f2:	e75c      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				display.loopend = (display.loopend+display.loopstart)/2;
 80178f4:	4a1e      	ldr	r2, [pc, #120]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 80178f6:	68d3      	ldr	r3, [r2, #12]
 80178f8:	6890      	ldr	r0, [r2, #8]
 80178fa:	4403      	add	r3, r0
 80178fc:	085b      	lsrs	r3, r3, #1
 80178fe:	60d3      	str	r3, [r2, #12]
				if(display.loopend - display.loopstart < 1)
 8017900:	4298      	cmp	r0, r3
 8017902:	d00b      	beq.n	801791c <HAL_SPI_TxRxCpltCallback+0x1f4>
				if(file_pos_wide >= display.loopend) {
 8017904:	4b1a      	ldr	r3, [pc, #104]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 8017906:	68da      	ldr	r2, [r3, #12]
 8017908:	4b1a      	ldr	r3, [pc, #104]	; (8017974 <HAL_SPI_TxRxCpltCallback+0x24c>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	429a      	cmp	r2, r3
 801790e:	f63f af4e 	bhi.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					GoToPosition(display.loopstart);
 8017912:	f001 f9e9 	bl	8018ce8 <GoToPosition>
					BSP_AUDIO_OUT_Resume();
 8017916:	f7fe ffa9 	bl	801686c <BSP_AUDIO_OUT_Resume>
 801791a:	e748      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					display.loopend = display.loopstart + 1;
 801791c:	1c43      	adds	r3, r0, #1
 801791e:	60d3      	str	r3, [r2, #12]
 8017920:	e7f0      	b.n	8017904 <HAL_SPI_TxRxCpltCallback+0x1dc>
			if(!(button_flag & (1 << 2))) {
 8017922:	4b1e      	ldr	r3, [pc, #120]	; (801799c <HAL_SPI_TxRxCpltCallback+0x274>)
 8017924:	881b      	ldrh	r3, [r3, #0]
 8017926:	f013 0f04 	tst.w	r3, #4
 801792a:	d10a      	bne.n	8017942 <HAL_SPI_TxRxCpltCallback+0x21a>
				bOutOfData = 1;
 801792c:	4b13      	ldr	r3, [pc, #76]	; (801797c <HAL_SPI_TxRxCpltCallback+0x254>)
 801792e:	2201      	movs	r2, #1
 8017930:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 8017932:	4b13      	ldr	r3, [pc, #76]	; (8017980 <HAL_SPI_TxRxCpltCallback+0x258>)
 8017934:	2203      	movs	r2, #3
 8017936:	601a      	str	r2, [r3, #0]
				Track_number++;
 8017938:	4a15      	ldr	r2, [pc, #84]	; (8017990 <HAL_SPI_TxRxCpltCallback+0x268>)
 801793a:	6813      	ldr	r3, [r2, #0]
 801793c:	3301      	adds	r3, #1
 801793e:	6013      	str	r3, [r2, #0]
 8017940:	e735      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				display.loopend = display.loopend*2-display.loopstart;
 8017942:	4b0b      	ldr	r3, [pc, #44]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 8017944:	68d9      	ldr	r1, [r3, #12]
 8017946:	689a      	ldr	r2, [r3, #8]
 8017948:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801794c:	60da      	str	r2, [r3, #12]
				if(display.loopend >= rekordbox.spectrum_size)
 801794e:	4b15      	ldr	r3, [pc, #84]	; (80179a4 <HAL_SPI_TxRxCpltCallback+0x27c>)
 8017950:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8017954:	429a      	cmp	r2, r3
 8017956:	f4ff af2a 	bcc.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					display.loopend = rekordbox.spectrum_size - 1;
 801795a:	3b01      	subs	r3, #1
 801795c:	4a04      	ldr	r2, [pc, #16]	; (8017970 <HAL_SPI_TxRxCpltCallback+0x248>)
 801795e:	60d3      	str	r3, [r2, #12]
 8017960:	e725      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
 8017962:	bf00      	nop
 8017964:	2000eba4 	.word	0x2000eba4
 8017968:	20017454 	.word	0x20017454
 801796c:	2000ebac 	.word	0x2000ebac
 8017970:	200005f0 	.word	0x200005f0
 8017974:	2000e3d4 	.word	0x2000e3d4
 8017978:	2000060c 	.word	0x2000060c
 801797c:	2000e378 	.word	0x2000e378
 8017980:	2000ebe4 	.word	0x2000ebe4
 8017984:	200174f4 	.word	0x200174f4
 8017988:	20000094 	.word	0x20000094
 801798c:	20017464 	.word	0x20017464
 8017990:	2000e374 	.word	0x2000e374
 8017994:	20001c38 	.word	0x20001c38
 8017998:	2000009c 	.word	0x2000009c
 801799c:	20017452 	.word	0x20017452
 80179a0:	200175b4 	.word	0x200175b4
 80179a4:	20016620 	.word	0x20016620
			if(!(button_flag & (1 << 2))) {
 80179a8:	4ba4      	ldr	r3, [pc, #656]	; (8017c3c <HAL_SPI_TxRxCpltCallback+0x514>)
 80179aa:	881b      	ldrh	r3, [r3, #0]
 80179ac:	f013 0f04 	tst.w	r3, #4
 80179b0:	d14c      	bne.n	8017a4c <HAL_SPI_TxRxCpltCallback+0x324>
				if(display.quantize == 1) {
 80179b2:	4ba3      	ldr	r3, [pc, #652]	; (8017c40 <HAL_SPI_TxRxCpltCallback+0x518>)
 80179b4:	7c5b      	ldrb	r3, [r3, #17]
 80179b6:	2b01      	cmp	r3, #1
 80179b8:	d02f      	beq.n	8017a1a <HAL_SPI_TxRxCpltCallback+0x2f2>
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 80179ba:	4ca2      	ldr	r4, [pc, #648]	; (8017c44 <HAL_SPI_TxRxCpltCallback+0x51c>)
 80179bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80179be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80179c0:	48a1      	ldr	r0, [pc, #644]	; (8017c48 <HAL_SPI_TxRxCpltCallback+0x520>)
 80179c2:	1818      	adds	r0, r3, r0
 80179c4:	f161 0100 	sbc.w	r1, r1, #0
 80179c8:	f7e9 fa10 	bl	8000dec <__aeabi_ul2f>
 80179cc:	ee08 0a10 	vmov	s16, r0
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 80179d0:	6923      	ldr	r3, [r4, #16]
 80179d2:	6961      	ldr	r1, [r4, #20]
 80179d4:	4a9d      	ldr	r2, [pc, #628]	; (8017c4c <HAL_SPI_TxRxCpltCallback+0x524>)
 80179d6:	6812      	ldr	r2, [r2, #0]
 80179d8:	1a9b      	subs	r3, r3, r2
 80179da:	f161 0100 	sbc.w	r1, r1, #0
 80179de:	4a9c      	ldr	r2, [pc, #624]	; (8017c50 <HAL_SPI_TxRxCpltCallback+0x528>)
 80179e0:	6810      	ldr	r0, [r2, #0]
 80179e2:	1a18      	subs	r0, r3, r0
 80179e4:	f161 0100 	sbc.w	r1, r1, #0
 80179e8:	f7e9 fa00 	bl	8000dec <__aeabi_ul2f>
 80179ec:	ee07 0a90 	vmov	s15, r0
 80179f0:	ee88 7a27 	vdiv.f32	s14, s16, s15
							*rekordbox.spectrum_size);
 80179f4:	4b97      	ldr	r3, [pc, #604]	; (8017c54 <HAL_SPI_TxRxCpltCallback+0x52c>)
 80179f6:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 80179fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80179fe:	ee67 7a87 	vmul.f32	s15, s15, s14
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 8017a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017a06:	ee17 0a90 	vmov	r0, s15
 8017a0a:	f001 f96d 	bl	8018ce8 <GoToPosition>
				if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 8017a0e:	4b92      	ldr	r3, [pc, #584]	; (8017c58 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017a10:	781b      	ldrb	r3, [r3, #0]
 8017a12:	b94b      	cbnz	r3, 8017a28 <HAL_SPI_TxRxCpltCallback+0x300>
 8017a14:	f7fe ff2a 	bl	801686c <BSP_AUDIO_OUT_Resume>
 8017a18:	e6c9      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					GoToPosition(QuantizePosition(-1));
 8017a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a1e:	f7fc f893 	bl	8013b48 <QuantizePosition>
 8017a22:	f001 f961 	bl	8018ce8 <GoToPosition>
 8017a26:	e7f2      	b.n	8017a0e <HAL_SPI_TxRxCpltCallback+0x2e6>
					GetTrackTime();
 8017a28:	f001 fa00 	bl	8018e2c <GetTrackTime>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 8017a2c:	4b8b      	ldr	r3, [pc, #556]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017a2e:	789b      	ldrb	r3, [r3, #2]
 8017a30:	b93b      	cbnz	r3, 8017a42 <HAL_SPI_TxRxCpltCallback+0x31a>
 8017a32:	f043 0302 	orr.w	r3, r3, #2
 8017a36:	4a89      	ldr	r2, [pc, #548]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017a38:	7093      	strb	r3, [r2, #2]
					trak.state = SETCUE;
 8017a3a:	4b87      	ldr	r3, [pc, #540]	; (8017c58 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017a3c:	2202      	movs	r2, #2
 8017a3e:	701a      	strb	r2, [r3, #0]
 8017a40:	e6b5      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					else spi_tx[2] &= ~(1 << 1);
 8017a42:	f023 0302 	bic.w	r3, r3, #2
 8017a46:	4a85      	ldr	r2, [pc, #532]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017a48:	7093      	strb	r3, [r2, #2]
 8017a4a:	e7f6      	b.n	8017a3a <HAL_SPI_TxRxCpltCallback+0x312>
				rekordbox.currentcue++;
 8017a4c:	4a81      	ldr	r2, [pc, #516]	; (8017c54 <HAL_SPI_TxRxCpltCallback+0x52c>)
 8017a4e:	f8d2 3b94 	ldr.w	r3, [r2, #2964]	; 0xb94
 8017a52:	3301      	adds	r3, #1
 8017a54:	f8c2 3b94 	str.w	r3, [r2, #2964]	; 0xb94
				if(rekordbox.currentcue >= rekordbox.cues)
 8017a58:	f8d2 2358 	ldr.w	r2, [r2, #856]	; 0x358
 8017a5c:	4293      	cmp	r3, r2
 8017a5e:	db03      	blt.n	8017a68 <HAL_SPI_TxRxCpltCallback+0x340>
					rekordbox.currentcue = 0;
 8017a60:	4b7c      	ldr	r3, [pc, #496]	; (8017c54 <HAL_SPI_TxRxCpltCallback+0x52c>)
 8017a62:	2200      	movs	r2, #0
 8017a64:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 8017a68:	4b7d      	ldr	r3, [pc, #500]	; (8017c60 <HAL_SPI_TxRxCpltCallback+0x538>)
 8017a6a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8017a6e:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 8017a72:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 8017a76:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017a7a:	6858      	ldr	r0, [r3, #4]
 8017a7c:	f001 f934 	bl	8018ce8 <GoToPosition>
				if(trak.state == PLAYING) {
 8017a80:	4b75      	ldr	r3, [pc, #468]	; (8017c58 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017a82:	781b      	ldrb	r3, [r3, #0]
 8017a84:	b9d3      	cbnz	r3, 8017abc <HAL_SPI_TxRxCpltCallback+0x394>
					BSP_AUDIO_OUT_Resume();
 8017a86:	f7fe fef1 	bl	801686c <BSP_AUDIO_OUT_Resume>
					HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8017a8a:	4876      	ldr	r0, [pc, #472]	; (8017c64 <HAL_SPI_TxRxCpltCallback+0x53c>)
 8017a8c:	f7ef fb3c 	bl	8007108 <HAL_TIM_Base_Stop_IT>
					spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 8017a90:	4a72      	ldr	r2, [pc, #456]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017a92:	7893      	ldrb	r3, [r2, #2]
 8017a94:	f023 0301 	bic.w	r3, r3, #1
 8017a98:	7093      	strb	r3, [r2, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 8017a9a:	4b71      	ldr	r3, [pc, #452]	; (8017c60 <HAL_SPI_TxRxCpltCallback+0x538>)
 8017a9c:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8017aa0:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 8017aa4:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 8017aa8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017aac:	685b      	ldr	r3, [r3, #4]
 8017aae:	b143      	cbz	r3, 8017ac2 <HAL_SPI_TxRxCpltCallback+0x39a>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8017ab0:	4a6a      	ldr	r2, [pc, #424]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017ab2:	7893      	ldrb	r3, [r2, #2]
 8017ab4:	f023 0302 	bic.w	r3, r3, #2
 8017ab8:	7093      	strb	r3, [r2, #2]
 8017aba:	e678      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					GetTrackTime();
 8017abc:	f001 f9b6 	bl	8018e2c <GetTrackTime>
 8017ac0:	e7eb      	b.n	8017a9a <HAL_SPI_TxRxCpltCallback+0x372>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8017ac2:	4a66      	ldr	r2, [pc, #408]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017ac4:	7893      	ldrb	r3, [r2, #2]
 8017ac6:	f043 0302 	orr.w	r3, r3, #2
 8017aca:	7093      	strb	r3, [r2, #2]
 8017acc:	e66f      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			if(!(button_flag & (1 << 2))) {
 8017ace:	4b5b      	ldr	r3, [pc, #364]	; (8017c3c <HAL_SPI_TxRxCpltCallback+0x514>)
 8017ad0:	881b      	ldrh	r3, [r3, #0]
 8017ad2:	f013 0f04 	tst.w	r3, #4
 8017ad6:	d14c      	bne.n	8017b72 <HAL_SPI_TxRxCpltCallback+0x44a>
				if(display.quantize == 1) {
 8017ad8:	4b59      	ldr	r3, [pc, #356]	; (8017c40 <HAL_SPI_TxRxCpltCallback+0x518>)
 8017ada:	7c5b      	ldrb	r3, [r3, #17]
 8017adc:	2b01      	cmp	r3, #1
 8017ade:	d030      	beq.n	8017b42 <HAL_SPI_TxRxCpltCallback+0x41a>
					GoToPosition((float)(f_tell(&MyFile) + 60000)
 8017ae0:	4c58      	ldr	r4, [pc, #352]	; (8017c44 <HAL_SPI_TxRxCpltCallback+0x51c>)
 8017ae2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017ae4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017ae6:	f64e 2060 	movw	r0, #60000	; 0xea60
 8017aea:	1818      	adds	r0, r3, r0
 8017aec:	f141 0100 	adc.w	r1, r1, #0
 8017af0:	f7e9 f97c 	bl	8000dec <__aeabi_ul2f>
 8017af4:	ee08 0a10 	vmov	s16, r0
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8017af8:	6923      	ldr	r3, [r4, #16]
 8017afa:	6961      	ldr	r1, [r4, #20]
 8017afc:	4a53      	ldr	r2, [pc, #332]	; (8017c4c <HAL_SPI_TxRxCpltCallback+0x524>)
 8017afe:	6812      	ldr	r2, [r2, #0]
 8017b00:	1a9b      	subs	r3, r3, r2
 8017b02:	f161 0100 	sbc.w	r1, r1, #0
 8017b06:	4a52      	ldr	r2, [pc, #328]	; (8017c50 <HAL_SPI_TxRxCpltCallback+0x528>)
 8017b08:	6810      	ldr	r0, [r2, #0]
 8017b0a:	1a18      	subs	r0, r3, r0
 8017b0c:	f161 0100 	sbc.w	r1, r1, #0
 8017b10:	f7e9 f96c 	bl	8000dec <__aeabi_ul2f>
 8017b14:	ee07 0a90 	vmov	s15, r0
 8017b18:	ee88 7a27 	vdiv.f32	s14, s16, s15
							*rekordbox.spectrum_size);
 8017b1c:	4b4d      	ldr	r3, [pc, #308]	; (8017c54 <HAL_SPI_TxRxCpltCallback+0x52c>)
 8017b1e:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8017b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017b26:	ee67 7a87 	vmul.f32	s15, s15, s14
					GoToPosition((float)(f_tell(&MyFile) + 60000)
 8017b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017b2e:	ee17 0a90 	vmov	r0, s15
 8017b32:	f001 f8d9 	bl	8018ce8 <GoToPosition>
				if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 8017b36:	4b48      	ldr	r3, [pc, #288]	; (8017c58 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017b38:	781b      	ldrb	r3, [r3, #0]
 8017b3a:	b943      	cbnz	r3, 8017b4e <HAL_SPI_TxRxCpltCallback+0x426>
 8017b3c:	f7fe fe96 	bl	801686c <BSP_AUDIO_OUT_Resume>
 8017b40:	e635      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					GoToPosition(QuantizePosition(1));
 8017b42:	2001      	movs	r0, #1
 8017b44:	f7fc f800 	bl	8013b48 <QuantizePosition>
 8017b48:	f001 f8ce 	bl	8018ce8 <GoToPosition>
 8017b4c:	e7f3      	b.n	8017b36 <HAL_SPI_TxRxCpltCallback+0x40e>
					GetTrackTime();
 8017b4e:	f001 f96d 	bl	8018e2c <GetTrackTime>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 8017b52:	4b42      	ldr	r3, [pc, #264]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017b54:	789b      	ldrb	r3, [r3, #2]
 8017b56:	b93b      	cbnz	r3, 8017b68 <HAL_SPI_TxRxCpltCallback+0x440>
 8017b58:	f043 0302 	orr.w	r3, r3, #2
 8017b5c:	4a3f      	ldr	r2, [pc, #252]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017b5e:	7093      	strb	r3, [r2, #2]
					trak.state = SETCUE;
 8017b60:	4b3d      	ldr	r3, [pc, #244]	; (8017c58 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017b62:	2202      	movs	r2, #2
 8017b64:	701a      	strb	r2, [r3, #0]
 8017b66:	e622      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					else spi_tx[2] &= ~(1 << 1);
 8017b68:	f023 0302 	bic.w	r3, r3, #2
 8017b6c:	4a3b      	ldr	r2, [pc, #236]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017b6e:	7093      	strb	r3, [r2, #2]
 8017b70:	e7f6      	b.n	8017b60 <HAL_SPI_TxRxCpltCallback+0x438>
				rekordbox.currentcue--;
 8017b72:	4a38      	ldr	r2, [pc, #224]	; (8017c54 <HAL_SPI_TxRxCpltCallback+0x52c>)
 8017b74:	f8d2 3b94 	ldr.w	r3, [r2, #2964]	; 0xb94
 8017b78:	3b01      	subs	r3, #1
 8017b7a:	f8c2 3b94 	str.w	r3, [r2, #2964]	; 0xb94
				if(rekordbox.currentcue < 0)
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	db29      	blt.n	8017bd6 <HAL_SPI_TxRxCpltCallback+0x4ae>
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 8017b82:	4b37      	ldr	r3, [pc, #220]	; (8017c60 <HAL_SPI_TxRxCpltCallback+0x538>)
 8017b84:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8017b88:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 8017b8c:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 8017b90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017b94:	6858      	ldr	r0, [r3, #4]
 8017b96:	f001 f8a7 	bl	8018ce8 <GoToPosition>
				if(trak.state == PLAYING) {
 8017b9a:	4b2f      	ldr	r3, [pc, #188]	; (8017c58 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017b9c:	781b      	ldrb	r3, [r3, #0]
 8017b9e:	bb03      	cbnz	r3, 8017be2 <HAL_SPI_TxRxCpltCallback+0x4ba>
					BSP_AUDIO_OUT_Resume();
 8017ba0:	f7fe fe64 	bl	801686c <BSP_AUDIO_OUT_Resume>
					HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8017ba4:	482f      	ldr	r0, [pc, #188]	; (8017c64 <HAL_SPI_TxRxCpltCallback+0x53c>)
 8017ba6:	f7ef faaf 	bl	8007108 <HAL_TIM_Base_Stop_IT>
					spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 8017baa:	4a2c      	ldr	r2, [pc, #176]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017bac:	7893      	ldrb	r3, [r2, #2]
 8017bae:	f023 0301 	bic.w	r3, r3, #1
 8017bb2:	7093      	strb	r3, [r2, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 8017bb4:	4b2a      	ldr	r3, [pc, #168]	; (8017c60 <HAL_SPI_TxRxCpltCallback+0x538>)
 8017bb6:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8017bba:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 8017bbe:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 8017bc2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017bc6:	685b      	ldr	r3, [r3, #4]
 8017bc8:	b173      	cbz	r3, 8017be8 <HAL_SPI_TxRxCpltCallback+0x4c0>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8017bca:	4a24      	ldr	r2, [pc, #144]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017bcc:	7893      	ldrb	r3, [r2, #2]
 8017bce:	f023 0302 	bic.w	r3, r3, #2
 8017bd2:	7093      	strb	r3, [r2, #2]
 8017bd4:	e5eb      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					rekordbox.currentcue = rekordbox.cues - 1;
 8017bd6:	f8d2 3358 	ldr.w	r3, [r2, #856]	; 0x358
 8017bda:	3b01      	subs	r3, #1
 8017bdc:	f8c2 3b94 	str.w	r3, [r2, #2964]	; 0xb94
 8017be0:	e7cf      	b.n	8017b82 <HAL_SPI_TxRxCpltCallback+0x45a>
					GetTrackTime();
 8017be2:	f001 f923 	bl	8018e2c <GetTrackTime>
 8017be6:	e7e5      	b.n	8017bb4 <HAL_SPI_TxRxCpltCallback+0x48c>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8017be8:	4a1c      	ldr	r2, [pc, #112]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017bea:	7893      	ldrb	r3, [r2, #2]
 8017bec:	f043 0302 	orr.w	r3, r3, #2
 8017bf0:	7093      	strb	r3, [r2, #2]
 8017bf2:	e5dc      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			if(trak.state == PLAYING) {
 8017bf4:	4b18      	ldr	r3, [pc, #96]	; (8017c58 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d137      	bne.n	8017c6c <HAL_SPI_TxRxCpltCallback+0x544>
				BSP_AUDIO_OUT_Pause();
 8017bfc:	f7fe fe2e 	bl	801685c <BSP_AUDIO_OUT_Pause>
				if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 8017c00:	4b16      	ldr	r3, [pc, #88]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017c02:	789b      	ldrb	r3, [r3, #2]
 8017c04:	b98b      	cbnz	r3, 8017c2a <HAL_SPI_TxRxCpltCallback+0x502>
 8017c06:	f043 0302 	orr.w	r3, r3, #2
 8017c0a:	4a14      	ldr	r2, [pc, #80]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017c0c:	7093      	strb	r3, [r2, #2]
				HAL_TIM_Base_Start_IT(&htim8); //start blinking
 8017c0e:	4815      	ldr	r0, [pc, #84]	; (8017c64 <HAL_SPI_TxRxCpltCallback+0x53c>)
 8017c10:	f7ef fa22 	bl	8007058 <HAL_TIM_Base_Start_IT>
				if(file_pos_wide != rekordbox.cue_start_position[0]) {
 8017c14:	4b0f      	ldr	r3, [pc, #60]	; (8017c54 <HAL_SPI_TxRxCpltCallback+0x52c>)
 8017c16:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8017c1a:	4b13      	ldr	r3, [pc, #76]	; (8017c68 <HAL_SPI_TxRxCpltCallback+0x540>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	429a      	cmp	r2, r3
 8017c20:	d008      	beq.n	8017c34 <HAL_SPI_TxRxCpltCallback+0x50c>
					trak.state = SETCUE;
 8017c22:	4b0d      	ldr	r3, [pc, #52]	; (8017c58 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017c24:	2202      	movs	r2, #2
 8017c26:	701a      	strb	r2, [r3, #0]
 8017c28:	e5c1      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				else spi_tx[2] &= ~(1 << 1);
 8017c2a:	f023 0302 	bic.w	r3, r3, #2
 8017c2e:	4a0b      	ldr	r2, [pc, #44]	; (8017c5c <HAL_SPI_TxRxCpltCallback+0x534>)
 8017c30:	7093      	strb	r3, [r2, #2]
 8017c32:	e7ec      	b.n	8017c0e <HAL_SPI_TxRxCpltCallback+0x4e6>
					trak.state = STOPPED;
 8017c34:	4b08      	ldr	r3, [pc, #32]	; (8017c58 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017c36:	2201      	movs	r2, #1
 8017c38:	701a      	strb	r2, [r3, #0]
 8017c3a:	e5b8      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
 8017c3c:	20017452 	.word	0x20017452
 8017c40:	200005f0 	.word	0x200005f0
 8017c44:	200017b8 	.word	0x200017b8
 8017c48:	fffe2b40 	.word	0xfffe2b40
 8017c4c:	200145f0 	.word	0x200145f0
 8017c50:	20018344 	.word	0x20018344
 8017c54:	20016620 	.word	0x20016620
 8017c58:	2000ebac 	.word	0x2000ebac
 8017c5c:	20000058 	.word	0x20000058
 8017c60:	20014620 	.word	0x20014620
 8017c64:	20017574 	.word	0x20017574
 8017c68:	2000e3d4 	.word	0x2000e3d4
				BSP_AUDIO_OUT_Resume();
 8017c6c:	f7fe fdfe 	bl	801686c <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 8017c70:	4baa      	ldr	r3, [pc, #680]	; (8017f1c <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017c72:	2200      	movs	r2, #0
 8017c74:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8017c76:	48aa      	ldr	r0, [pc, #680]	; (8017f20 <HAL_SPI_TxRxCpltCallback+0x7f8>)
 8017c78:	f7ef fa46 	bl	8007108 <HAL_TIM_Base_Stop_IT>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 8017c7c:	4aa9      	ldr	r2, [pc, #676]	; (8017f24 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 8017c7e:	7893      	ldrb	r3, [r2, #2]
 8017c80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8017c84:	7093      	strb	r3, [r2, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 8017c86:	4aa8      	ldr	r2, [pc, #672]	; (8017f28 <HAL_SPI_TxRxCpltCallback+0x800>)
 8017c88:	f502 5100 	add.w	r1, r2, #8192	; 0x2000
 8017c8c:	f8d1 1b94 	ldr.w	r1, [r1, #2964]	; 0xb94
 8017c90:	f601 2102 	addw	r1, r1, #2562	; 0xa02
 8017c94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8017c98:	6852      	ldr	r2, [r2, #4]
 8017c9a:	b122      	cbz	r2, 8017ca6 <HAL_SPI_TxRxCpltCallback+0x57e>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8017c9c:	f023 0302 	bic.w	r3, r3, #2
 8017ca0:	4aa0      	ldr	r2, [pc, #640]	; (8017f24 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 8017ca2:	7093      	strb	r3, [r2, #2]
 8017ca4:	e583      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8017ca6:	f043 0302 	orr.w	r3, r3, #2
 8017caa:	4a9e      	ldr	r2, [pc, #632]	; (8017f24 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 8017cac:	7093      	strb	r3, [r2, #2]
 8017cae:	e57e      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			if(trak.state == STOPPED) {
 8017cb0:	4b9a      	ldr	r3, [pc, #616]	; (8017f1c <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017cb2:	781b      	ldrb	r3, [r3, #0]
 8017cb4:	2b01      	cmp	r3, #1
 8017cb6:	d018      	beq.n	8017cea <HAL_SPI_TxRxCpltCallback+0x5c2>
			else if(trak.state == SETCUE) {
 8017cb8:	2b02      	cmp	r3, #2
 8017cba:	f47f ad78 	bne.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				if(display.quantize == 1) {
 8017cbe:	4b9b      	ldr	r3, [pc, #620]	; (8017f2c <HAL_SPI_TxRxCpltCallback+0x804>)
 8017cc0:	7c5b      	ldrb	r3, [r3, #17]
 8017cc2:	2b01      	cmp	r3, #1
 8017cc4:	d01f      	beq.n	8017d06 <HAL_SPI_TxRxCpltCallback+0x5de>
					rekordbox.cue_start_position[0] = file_pos_wide;
 8017cc6:	4b9a      	ldr	r3, [pc, #616]	; (8017f30 <HAL_SPI_TxRxCpltCallback+0x808>)
 8017cc8:	681a      	ldr	r2, [r3, #0]
 8017cca:	4b9a      	ldr	r3, [pc, #616]	; (8017f34 <HAL_SPI_TxRxCpltCallback+0x80c>)
 8017ccc:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
				rekordbox.currentcue = 0;
 8017cd0:	4b98      	ldr	r3, [pc, #608]	; (8017f34 <HAL_SPI_TxRxCpltCallback+0x80c>)
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
				spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8017cd8:	4a92      	ldr	r2, [pc, #584]	; (8017f24 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 8017cda:	7893      	ldrb	r3, [r2, #2]
 8017cdc:	f023 0302 	bic.w	r3, r3, #2
 8017ce0:	7093      	strb	r3, [r2, #2]
				trak.state = STOPPED;
 8017ce2:	4b8e      	ldr	r3, [pc, #568]	; (8017f1c <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017ce4:	2201      	movs	r2, #1
 8017ce6:	701a      	strb	r2, [r3, #0]
 8017ce8:	e561      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				BSP_AUDIO_OUT_Resume();
 8017cea:	f7fe fdbf 	bl	801686c <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 8017cee:	4b8b      	ldr	r3, [pc, #556]	; (8017f1c <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8017cf4:	488a      	ldr	r0, [pc, #552]	; (8017f20 <HAL_SPI_TxRxCpltCallback+0x7f8>)
 8017cf6:	f7ef fa07 	bl	8007108 <HAL_TIM_Base_Stop_IT>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 8017cfa:	4a8a      	ldr	r2, [pc, #552]	; (8017f24 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 8017cfc:	7893      	ldrb	r3, [r2, #2]
 8017cfe:	f023 0301 	bic.w	r3, r3, #1
 8017d02:	7093      	strb	r3, [r2, #2]
 8017d04:	e553      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					rekordbox.cue_start_position[0] = QuantizePosition(0);
 8017d06:	2000      	movs	r0, #0
 8017d08:	f7fb ff1e 	bl	8013b48 <QuantizePosition>
 8017d0c:	4b89      	ldr	r3, [pc, #548]	; (8017f34 <HAL_SPI_TxRxCpltCallback+0x80c>)
 8017d0e:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 8017d12:	e7dd      	b.n	8017cd0 <HAL_SPI_TxRxCpltCallback+0x5a8>
			switch(spi_rx[2]) {
 8017d14:	4b88      	ldr	r3, [pc, #544]	; (8017f38 <HAL_SPI_TxRxCpltCallback+0x810>)
 8017d16:	789b      	ldrb	r3, [r3, #2]
 8017d18:	3b40      	subs	r3, #64	; 0x40
 8017d1a:	2b0a      	cmp	r3, #10
 8017d1c:	f63f ad47 	bhi.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
 8017d20:	a201      	add	r2, pc, #4	; (adr r2, 8017d28 <HAL_SPI_TxRxCpltCallback+0x600>)
 8017d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d26:	bf00      	nop
 8017d28:	08017e81 	.word	0x08017e81
 8017d2c:	08017d8d 	.word	0x08017d8d
 8017d30:	080177af 	.word	0x080177af
 8017d34:	08017dc5 	.word	0x08017dc5
 8017d38:	080177af 	.word	0x080177af
 8017d3c:	080177af 	.word	0x080177af
 8017d40:	080177af 	.word	0x080177af
 8017d44:	080177af 	.word	0x080177af
 8017d48:	08017e93 	.word	0x08017e93
 8017d4c:	080177af 	.word	0x080177af
 8017d50:	08017d55 	.word	0x08017d55
				if(trak.state == PLAYING) {
 8017d54:	4b71      	ldr	r3, [pc, #452]	; (8017f1c <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017d56:	781b      	ldrb	r3, [r3, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	f47f ad28 	bne.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					BSP_AUDIO_OUT_Pause();
 8017d5e:	f7fe fd7d 	bl	801685c <BSP_AUDIO_OUT_Pause>
					trak.state = STOPPED;
 8017d62:	4b6e      	ldr	r3, [pc, #440]	; (8017f1c <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017d64:	2201      	movs	r2, #1
 8017d66:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim8); //start blinking
 8017d68:	486d      	ldr	r0, [pc, #436]	; (8017f20 <HAL_SPI_TxRxCpltCallback+0x7f8>)
 8017d6a:	f7ef f975 	bl	8007058 <HAL_TIM_Base_Start_IT>
					GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 8017d6e:	4b6e      	ldr	r3, [pc, #440]	; (8017f28 <HAL_SPI_TxRxCpltCallback+0x800>)
 8017d70:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8017d74:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 8017d78:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 8017d7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017d80:	6858      	ldr	r0, [r3, #4]
 8017d82:	f000 ffb1 	bl	8018ce8 <GoToPosition>
					TrackTime();
 8017d86:	f000 ff59 	bl	8018c3c <TrackTime>
 8017d8a:	e510      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 8017d8c:	4b6b      	ldr	r3, [pc, #428]	; (8017f3c <HAL_SPI_TxRxCpltCallback+0x814>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017d92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017d96:	4291      	cmp	r1, r2
 8017d98:	f63f ad09 	bhi.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 8017d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	f43f ad05 	beq.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					HAL_TIM_Base_Stop_IT(&htim9);
 8017da4:	4865      	ldr	r0, [pc, #404]	; (8017f3c <HAL_SPI_TxRxCpltCallback+0x814>)
 8017da6:	f7ef f9af 	bl	8007108 <HAL_TIM_Base_Stop_IT>
					if(display.timemode == 0) {
 8017daa:	4b60      	ldr	r3, [pc, #384]	; (8017f2c <HAL_SPI_TxRxCpltCallback+0x804>)
 8017dac:	781b      	ldrb	r3, [r3, #0]
 8017dae:	b923      	cbnz	r3, 8017dba <HAL_SPI_TxRxCpltCallback+0x692>
						display.timemode = 1;
 8017db0:	4b5e      	ldr	r3, [pc, #376]	; (8017f2c <HAL_SPI_TxRxCpltCallback+0x804>)
 8017db2:	2201      	movs	r2, #1
 8017db4:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 1;
 8017db6:	711a      	strb	r2, [r3, #4]
 8017db8:	e4f9      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
						display.timemode = 0;
 8017dba:	4b5c      	ldr	r3, [pc, #368]	; (8017f2c <HAL_SPI_TxRxCpltCallback+0x804>)
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 0;
 8017dc0:	711a      	strb	r2, [r3, #4]
 8017dc2:	e4f4      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 8017dc4:	4b5d      	ldr	r3, [pc, #372]	; (8017f3c <HAL_SPI_TxRxCpltCallback+0x814>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017dca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017dce:	4291      	cmp	r1, r2
 8017dd0:	f63f aced 	bhi.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 8017dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	f43f ace9 	beq.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					HAL_TIM_Base_Stop_IT(&htim9);
 8017ddc:	4857      	ldr	r0, [pc, #348]	; (8017f3c <HAL_SPI_TxRxCpltCallback+0x814>)
 8017dde:	f7ef f993 	bl	8007108 <HAL_TIM_Base_Stop_IT>
					display.pitchmode++;
 8017de2:	4a52      	ldr	r2, [pc, #328]	; (8017f2c <HAL_SPI_TxRxCpltCallback+0x804>)
 8017de4:	7853      	ldrb	r3, [r2, #1]
 8017de6:	3301      	adds	r3, #1
 8017de8:	b2db      	uxtb	r3, r3
 8017dea:	7053      	strb	r3, [r2, #1]
					if(display.pitchmode > 3) display.pitchmode = 0;
 8017dec:	2b03      	cmp	r3, #3
 8017dee:	d902      	bls.n	8017df6 <HAL_SPI_TxRxCpltCallback+0x6ce>
 8017df0:	4613      	mov	r3, r2
 8017df2:	2200      	movs	r2, #0
 8017df4:	705a      	strb	r2, [r3, #1]
					if(display.pitchmode == 0) scale_pitch = 1; //wide
 8017df6:	4b4d      	ldr	r3, [pc, #308]	; (8017f2c <HAL_SPI_TxRxCpltCallback+0x804>)
 8017df8:	785b      	ldrb	r3, [r3, #1]
 8017dfa:	bb7b      	cbnz	r3, 8017e5c <HAL_SPI_TxRxCpltCallback+0x734>
 8017dfc:	4b50      	ldr	r3, [pc, #320]	; (8017f40 <HAL_SPI_TxRxCpltCallback+0x818>)
 8017dfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017e02:	601a      	str	r2, [r3, #0]
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 8017e04:	4b45      	ldr	r3, [pc, #276]	; (8017f1c <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017e06:	885a      	ldrh	r2, [r3, #2]
 8017e08:	ee07 2a90 	vmov	s15, r2
 8017e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017e10:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8017f44 <HAL_SPI_TxRxCpltCallback+0x81c>
 8017e14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e18:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8017f48 <HAL_SPI_TxRxCpltCallback+0x820>
 8017e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017e20:	4a47      	ldr	r2, [pc, #284]	; (8017f40 <HAL_SPI_TxRxCpltCallback+0x818>)
 8017e22:	ed92 7a00 	vldr	s14, [r2]
 8017e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017e2a:	edc3 7a01 	vstr	s15, [r3, #4]
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 8017e2e:	891b      	ldrh	r3, [r3, #8]
 8017e30:	085b      	lsrs	r3, r3, #1
 8017e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017e36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017e3a:	ee07 3a10 	vmov	s14, r3
 8017e3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017e4a:	4b40      	ldr	r3, [pc, #256]	; (8017f4c <HAL_SPI_TxRxCpltCallback+0x824>)
 8017e4c:	edc3 7a00 	vstr	s15, [r3]
					BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 8017e50:	6819      	ldr	r1, [r3, #0]
 8017e52:	2200      	movs	r2, #0
 8017e54:	483e      	ldr	r0, [pc, #248]	; (8017f50 <HAL_SPI_TxRxCpltCallback+0x828>)
 8017e56:	f7fe fdcf 	bl	80169f8 <BSP_AUDIO_OUT_ClockConfig>
 8017e5a:	e4a8      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					else if(display.pitchmode == 1) scale_pitch = 0.16; //16%
 8017e5c:	2b01      	cmp	r3, #1
 8017e5e:	d007      	beq.n	8017e70 <HAL_SPI_TxRxCpltCallback+0x748>
					else if(display.pitchmode == 2) scale_pitch = 0.1; //10%
 8017e60:	2b02      	cmp	r3, #2
 8017e62:	d009      	beq.n	8017e78 <HAL_SPI_TxRxCpltCallback+0x750>
					else if(display.pitchmode == 3) scale_pitch = 0.06; //6%
 8017e64:	2b03      	cmp	r3, #3
 8017e66:	d1cd      	bne.n	8017e04 <HAL_SPI_TxRxCpltCallback+0x6dc>
 8017e68:	4b35      	ldr	r3, [pc, #212]	; (8017f40 <HAL_SPI_TxRxCpltCallback+0x818>)
 8017e6a:	4a3a      	ldr	r2, [pc, #232]	; (8017f54 <HAL_SPI_TxRxCpltCallback+0x82c>)
 8017e6c:	601a      	str	r2, [r3, #0]
 8017e6e:	e7c9      	b.n	8017e04 <HAL_SPI_TxRxCpltCallback+0x6dc>
					else if(display.pitchmode == 1) scale_pitch = 0.16; //16%
 8017e70:	4b33      	ldr	r3, [pc, #204]	; (8017f40 <HAL_SPI_TxRxCpltCallback+0x818>)
 8017e72:	4a39      	ldr	r2, [pc, #228]	; (8017f58 <HAL_SPI_TxRxCpltCallback+0x830>)
 8017e74:	601a      	str	r2, [r3, #0]
 8017e76:	e7c5      	b.n	8017e04 <HAL_SPI_TxRxCpltCallback+0x6dc>
					else if(display.pitchmode == 2) scale_pitch = 0.1; //10%
 8017e78:	4b31      	ldr	r3, [pc, #196]	; (8017f40 <HAL_SPI_TxRxCpltCallback+0x818>)
 8017e7a:	4a38      	ldr	r2, [pc, #224]	; (8017f5c <HAL_SPI_TxRxCpltCallback+0x834>)
 8017e7c:	601a      	str	r2, [r3, #0]
 8017e7e:	e7c1      	b.n	8017e04 <HAL_SPI_TxRxCpltCallback+0x6dc>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 8017e80:	4b2e      	ldr	r3, [pc, #184]	; (8017f3c <HAL_SPI_TxRxCpltCallback+0x814>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017e86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017e8a:	4291      	cmp	r1, r2
 8017e8c:	d801      	bhi.n	8017e92 <HAL_SPI_TxRxCpltCallback+0x76a>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 8017e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e90:	b91b      	cbnz	r3, 8017e9a <HAL_SPI_TxRxCpltCallback+0x772>
				button_flag &= (0 << 2);
 8017e92:	4b33      	ldr	r3, [pc, #204]	; (8017f60 <HAL_SPI_TxRxCpltCallback+0x838>)
 8017e94:	2200      	movs	r2, #0
 8017e96:	801a      	strh	r2, [r3, #0]
				break;
 8017e98:	e489      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					HAL_TIM_Base_Stop_IT(&htim9);
 8017e9a:	4828      	ldr	r0, [pc, #160]	; (8017f3c <HAL_SPI_TxRxCpltCallback+0x814>)
 8017e9c:	f7ef f934 	bl	8007108 <HAL_TIM_Base_Stop_IT>
					if(display.loop == 1) display.loop = 0;
 8017ea0:	4b22      	ldr	r3, [pc, #136]	; (8017f2c <HAL_SPI_TxRxCpltCallback+0x804>)
 8017ea2:	7c1b      	ldrb	r3, [r3, #16]
 8017ea4:	2b01      	cmp	r3, #1
 8017ea6:	d1f4      	bne.n	8017e92 <HAL_SPI_TxRxCpltCallback+0x76a>
 8017ea8:	4b20      	ldr	r3, [pc, #128]	; (8017f2c <HAL_SPI_TxRxCpltCallback+0x804>)
 8017eaa:	2200      	movs	r2, #0
 8017eac:	741a      	strb	r2, [r3, #16]
 8017eae:	e7f0      	b.n	8017e92 <HAL_SPI_TxRxCpltCallback+0x76a>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8017eb0:	2028      	movs	r0, #40	; 0x28
 8017eb2:	f7e9 fa5b 	bl	800136c <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8017eb6:	482b      	ldr	r0, [pc, #172]	; (8017f64 <HAL_SPI_TxRxCpltCallback+0x83c>)
 8017eb8:	6803      	ldr	r3, [r0, #0]
 8017eba:	f06f 0201 	mvn.w	r2, #1
 8017ebe:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8017ec4:	f7ef f8c8 	bl	8007058 <HAL_TIM_Base_Start_IT>
			if(spi_rx[2] == 0x24) {
 8017ec8:	4b1b      	ldr	r3, [pc, #108]	; (8017f38 <HAL_SPI_TxRxCpltCallback+0x810>)
 8017eca:	789b      	ldrb	r3, [r3, #2]
 8017ecc:	2b24      	cmp	r3, #36	; 0x24
 8017ece:	f47f ac6e 	bne.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
				if(spi_rx[3] == 0x01) {
 8017ed2:	4b19      	ldr	r3, [pc, #100]	; (8017f38 <HAL_SPI_TxRxCpltCallback+0x810>)
 8017ed4:	78db      	ldrb	r3, [r3, #3]
 8017ed6:	2b01      	cmp	r3, #1
 8017ed8:	d011      	beq.n	8017efe <HAL_SPI_TxRxCpltCallback+0x7d6>
				else if(spi_rx[3] == 0x7F) {
 8017eda:	2b7f      	cmp	r3, #127	; 0x7f
 8017edc:	f47f ac67 	bne.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					if(menu_mode == 1) {
 8017ee0:	4b21      	ldr	r3, [pc, #132]	; (8017f68 <HAL_SPI_TxRxCpltCallback+0x840>)
 8017ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8017ee6:	2b01      	cmp	r3, #1
 8017ee8:	d074      	beq.n	8017fd4 <HAL_SPI_TxRxCpltCallback+0x8ac>
						if(trak.state == PLAYING) {
 8017eea:	4b0c      	ldr	r3, [pc, #48]	; (8017f1c <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017eec:	781b      	ldrb	r3, [r3, #0]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	f040 80a1 	bne.w	8018036 <HAL_SPI_TxRxCpltCallback+0x90e>
							pulses--;
 8017ef4:	4a1d      	ldr	r2, [pc, #116]	; (8017f6c <HAL_SPI_TxRxCpltCallback+0x844>)
 8017ef6:	6813      	ldr	r3, [r2, #0]
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	6013      	str	r3, [r2, #0]
 8017efc:	e457      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
					if(menu_mode == 1) {
 8017efe:	4b1a      	ldr	r3, [pc, #104]	; (8017f68 <HAL_SPI_TxRxCpltCallback+0x840>)
 8017f00:	f993 3000 	ldrsb.w	r3, [r3]
 8017f04:	2b01      	cmp	r3, #1
 8017f06:	d033      	beq.n	8017f70 <HAL_SPI_TxRxCpltCallback+0x848>
						if(trak.state == PLAYING) {
 8017f08:	4b04      	ldr	r3, [pc, #16]	; (8017f1c <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017f0a:	781b      	ldrb	r3, [r3, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d155      	bne.n	8017fbc <HAL_SPI_TxRxCpltCallback+0x894>
							pulses++;
 8017f10:	4a16      	ldr	r2, [pc, #88]	; (8017f6c <HAL_SPI_TxRxCpltCallback+0x844>)
 8017f12:	6813      	ldr	r3, [r2, #0]
 8017f14:	3301      	adds	r3, #1
 8017f16:	6013      	str	r3, [r2, #0]
 8017f18:	e449      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
 8017f1a:	bf00      	nop
 8017f1c:	2000ebac 	.word	0x2000ebac
 8017f20:	20017574 	.word	0x20017574
 8017f24:	20000058 	.word	0x20000058
 8017f28:	20014620 	.word	0x20014620
 8017f2c:	200005f0 	.word	0x200005f0
 8017f30:	2000e3d4 	.word	0x2000e3d4
 8017f34:	20016620 	.word	0x20016620
 8017f38:	2000eba4 	.word	0x2000eba4
 8017f3c:	200175b4 	.word	0x200175b4
 8017f40:	200000a4 	.word	0x200000a4
 8017f44:	46800000 	.word	0x46800000
 8017f48:	38800000 	.word	0x38800000
 8017f4c:	20000098 	.word	0x20000098
 8017f50:	20017228 	.word	0x20017228
 8017f54:	3d75c28f 	.word	0x3d75c28f
 8017f58:	3e23d70a 	.word	0x3e23d70a
 8017f5c:	3dcccccd 	.word	0x3dcccccd
 8017f60:	20017452 	.word	0x20017452
 8017f64:	200174f4 	.word	0x200174f4
 8017f68:	2000060c 	.word	0x2000060c
 8017f6c:	20017460 	.word	0x20017460
						String_number++;
 8017f70:	4b56      	ldr	r3, [pc, #344]	; (80180cc <HAL_SPI_TxRxCpltCallback+0x9a4>)
 8017f72:	681a      	ldr	r2, [r3, #0]
 8017f74:	3201      	adds	r2, #1
 8017f76:	601a      	str	r2, [r3, #0]
						Mark_number = String_number;
 8017f78:	4b55      	ldr	r3, [pc, #340]	; (80180d0 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 8017f7a:	601a      	str	r2, [r3, #0]
						if(Total_tracks < 7) {
 8017f7c:	4b55      	ldr	r3, [pc, #340]	; (80180d4 <HAL_SPI_TxRxCpltCallback+0x9ac>)
 8017f7e:	881b      	ldrh	r3, [r3, #0]
 8017f80:	2b06      	cmp	r3, #6
 8017f82:	d808      	bhi.n	8017f96 <HAL_SPI_TxRxCpltCallback+0x86e>
							if(String_number + 1 > Total_tracks) {
 8017f84:	429a      	cmp	r2, r3
 8017f86:	f6ff ac12 	blt.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
								String_number = 0;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	4a4f      	ldr	r2, [pc, #316]	; (80180cc <HAL_SPI_TxRxCpltCallback+0x9a4>)
 8017f8e:	6013      	str	r3, [r2, #0]
								Mark_number = 0;
 8017f90:	4a4f      	ldr	r2, [pc, #316]	; (80180d0 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 8017f92:	6013      	str	r3, [r2, #0]
 8017f94:	e40b      	b.n	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
							if(String_number > 6) {
 8017f96:	2a06      	cmp	r2, #6
 8017f98:	f77f ac09 	ble.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
								String_number = 0;
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	494b      	ldr	r1, [pc, #300]	; (80180cc <HAL_SPI_TxRxCpltCallback+0x9a4>)
 8017fa0:	600a      	str	r2, [r1, #0]
								Mark_number = 0;
 8017fa2:	494b      	ldr	r1, [pc, #300]	; (80180d0 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 8017fa4:	600a      	str	r2, [r1, #0]
								str_increment += 7;
 8017fa6:	494c      	ldr	r1, [pc, #304]	; (80180d8 <HAL_SPI_TxRxCpltCallback+0x9b0>)
 8017fa8:	680a      	ldr	r2, [r1, #0]
 8017faa:	3207      	adds	r2, #7
 8017fac:	600a      	str	r2, [r1, #0]
								if(str_increment >= Total_tracks - 7)
 8017fae:	3b07      	subs	r3, #7
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	f6ff abfc 	blt.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
									str_increment = Total_tracks - 7;
 8017fb6:	600b      	str	r3, [r1, #0]
 8017fb8:	f7ff bbf9 	b.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
						else if(trak.state == SETCUE) {
 8017fbc:	2b02      	cmp	r3, #2
 8017fbe:	f47f abf6 	bne.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
							GoToPosition(file_pos_wide + 2);
 8017fc2:	4b46      	ldr	r3, [pc, #280]	; (80180dc <HAL_SPI_TxRxCpltCallback+0x9b4>)
 8017fc4:	6818      	ldr	r0, [r3, #0]
 8017fc6:	3002      	adds	r0, #2
 8017fc8:	f000 fe8e 	bl	8018ce8 <GoToPosition>
							GetTrackTime();
 8017fcc:	f000 ff2e 	bl	8018e2c <GetTrackTime>
 8017fd0:	f7ff bbed 	b.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
						String_number--;
 8017fd4:	4a3d      	ldr	r2, [pc, #244]	; (80180cc <HAL_SPI_TxRxCpltCallback+0x9a4>)
 8017fd6:	6813      	ldr	r3, [r2, #0]
 8017fd8:	3b01      	subs	r3, #1
 8017fda:	6013      	str	r3, [r2, #0]
						Mark_number = String_number;
 8017fdc:	4a3c      	ldr	r2, [pc, #240]	; (80180d0 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 8017fde:	6013      	str	r3, [r2, #0]
						if(String_number < 0) {
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	f6bf abe4 	bge.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
							if(Total_tracks > 7) {
 8017fe6:	4b3b      	ldr	r3, [pc, #236]	; (80180d4 <HAL_SPI_TxRxCpltCallback+0x9ac>)
 8017fe8:	881a      	ldrh	r2, [r3, #0]
 8017fea:	2a07      	cmp	r2, #7
 8017fec:	d91c      	bls.n	8018028 <HAL_SPI_TxRxCpltCallback+0x900>
								String_number = 6;
 8017fee:	2306      	movs	r3, #6
 8017ff0:	4936      	ldr	r1, [pc, #216]	; (80180cc <HAL_SPI_TxRxCpltCallback+0x9a4>)
 8017ff2:	600b      	str	r3, [r1, #0]
								Mark_number = 6;
 8017ff4:	4936      	ldr	r1, [pc, #216]	; (80180d0 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 8017ff6:	600b      	str	r3, [r1, #0]
								str_increment -= 7;
 8017ff8:	4937      	ldr	r1, [pc, #220]	; (80180d8 <HAL_SPI_TxRxCpltCallback+0x9b0>)
 8017ffa:	680b      	ldr	r3, [r1, #0]
 8017ffc:	3b07      	subs	r3, #7
 8017ffe:	600b      	str	r3, [r1, #0]
								if(str_increment == Total_tracks - 7)
 8018000:	3a07      	subs	r2, #7
 8018002:	4293      	cmp	r3, r2
 8018004:	d009      	beq.n	801801a <HAL_SPI_TxRxCpltCallback+0x8f2>
								if(str_increment <= 0)
 8018006:	4b34      	ldr	r3, [pc, #208]	; (80180d8 <HAL_SPI_TxRxCpltCallback+0x9b0>)
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	2b00      	cmp	r3, #0
 801800c:	f73f abcf 	bgt.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
									str_increment = 0;
 8018010:	4b31      	ldr	r3, [pc, #196]	; (80180d8 <HAL_SPI_TxRxCpltCallback+0x9b0>)
 8018012:	2200      	movs	r2, #0
 8018014:	601a      	str	r2, [r3, #0]
 8018016:	f7ff bbca 	b.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
									str_increment = (str_increment / 7) * 7;
 801801a:	2207      	movs	r2, #7
 801801c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018020:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8018024:	600b      	str	r3, [r1, #0]
 8018026:	e7ee      	b.n	8018006 <HAL_SPI_TxRxCpltCallback+0x8de>
								String_number = Total_tracks - 1;
 8018028:	3a01      	subs	r2, #1
 801802a:	4b28      	ldr	r3, [pc, #160]	; (80180cc <HAL_SPI_TxRxCpltCallback+0x9a4>)
 801802c:	601a      	str	r2, [r3, #0]
								Mark_number = Total_tracks - 1;;
 801802e:	4b28      	ldr	r3, [pc, #160]	; (80180d0 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 8018030:	601a      	str	r2, [r3, #0]
 8018032:	f7ff bbbc 	b.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
						else if(trak.state == SETCUE) {
 8018036:	2b02      	cmp	r3, #2
 8018038:	f47f abb9 	bne.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
							GoToPosition(file_pos_wide - 2);
 801803c:	4b27      	ldr	r3, [pc, #156]	; (80180dc <HAL_SPI_TxRxCpltCallback+0x9b4>)
 801803e:	6818      	ldr	r0, [r3, #0]
 8018040:	3802      	subs	r0, #2
 8018042:	f000 fe51 	bl	8018ce8 <GoToPosition>
							GetTrackTime();
 8018046:	f000 fef1 	bl	8018e2c <GetTrackTime>
 801804a:	f7ff bbb0 	b.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			if(delta < 0) delta = pitch_rx - trak.pitch;
 801804e:	1ae2      	subs	r2, r4, r3
 8018050:	f7ff bba6 	b.w	80177a0 <HAL_SPI_TxRxCpltCallback+0x78>
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 8018054:	ee07 4a90 	vmov	s15, r4
 8018058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801805c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80180e0 <HAL_SPI_TxRxCpltCallback+0x9b8>
 8018060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018064:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80180e4 <HAL_SPI_TxRxCpltCallback+0x9bc>
 8018068:	ee67 7a87 	vmul.f32	s15, s15, s14
 801806c:	4b1e      	ldr	r3, [pc, #120]	; (80180e8 <HAL_SPI_TxRxCpltCallback+0x9c0>)
 801806e:	ed93 7a00 	vldr	s14, [r3]
 8018072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018076:	4d1d      	ldr	r5, [pc, #116]	; (80180ec <HAL_SPI_TxRxCpltCallback+0x9c4>)
 8018078:	edc5 7a01 	vstr	s15, [r5, #4]
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801807c:	892b      	ldrh	r3, [r5, #8]
 801807e:	085b      	lsrs	r3, r3, #1
 8018080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018084:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018088:	ee07 3a10 	vmov	s14, r3
 801808c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018098:	4b15      	ldr	r3, [pc, #84]	; (80180f0 <HAL_SPI_TxRxCpltCallback+0x9c8>)
 801809a:	edc3 7a00 	vstr	s15, [r3]
				BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801809e:	6819      	ldr	r1, [r3, #0]
 80180a0:	2200      	movs	r2, #0
 80180a2:	4814      	ldr	r0, [pc, #80]	; (80180f4 <HAL_SPI_TxRxCpltCallback+0x9cc>)
 80180a4:	f7fe fca8 	bl	80169f8 <BSP_AUDIO_OUT_ClockConfig>
				trak.pitch = pitch_rx;
 80180a8:	806c      	strh	r4, [r5, #2]
 80180aa:	f7ff bb80 	b.w	80177ae <HAL_SPI_TxRxCpltCallback+0x86>
			}
			break;
		}
		default: break;
		}
	for(int i = 0; i < 4; i++) spi_rx[i] = 0;
 80180ae:	4a12      	ldr	r2, [pc, #72]	; (80180f8 <HAL_SPI_TxRxCpltCallback+0x9d0>)
 80180b0:	2100      	movs	r1, #0
 80180b2:	54d1      	strb	r1, [r2, r3]
 80180b4:	3301      	adds	r3, #1
 80180b6:	2b03      	cmp	r3, #3
 80180b8:	ddf9      	ble.n	80180ae <HAL_SPI_TxRxCpltCallback+0x986>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 80180ba:	2304      	movs	r3, #4
 80180bc:	4a0e      	ldr	r2, [pc, #56]	; (80180f8 <HAL_SPI_TxRxCpltCallback+0x9d0>)
 80180be:	490f      	ldr	r1, [pc, #60]	; (80180fc <HAL_SPI_TxRxCpltCallback+0x9d4>)
 80180c0:	480f      	ldr	r0, [pc, #60]	; (8018100 <HAL_SPI_TxRxCpltCallback+0x9d8>)
 80180c2:	f7ee fda3 	bl	8006c0c <HAL_SPI_TransmitReceive_IT>
}
 80180c6:	ecbd 8b02 	vpop	{d8}
 80180ca:	bd38      	pop	{r3, r4, r5, pc}
 80180cc:	2000009c 	.word	0x2000009c
 80180d0:	20000094 	.word	0x20000094
 80180d4:	20001c38 	.word	0x20001c38
 80180d8:	20017464 	.word	0x20017464
 80180dc:	2000e3d4 	.word	0x2000e3d4
 80180e0:	467ffc00 	.word	0x467ffc00
 80180e4:	38800000 	.word	0x38800000
 80180e8:	200000a4 	.word	0x200000a4
 80180ec:	2000ebac 	.word	0x2000ebac
 80180f0:	20000098 	.word	0x20000098
 80180f4:	20017228 	.word	0x20017228
 80180f8:	2000eba4 	.word	0x2000eba4
 80180fc:	20000058 	.word	0x20000058
 8018100:	20017330 	.word	0x20017330

08018104 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8018104:	b508      	push	{r3, lr}
 8018106:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8018108:	4a0b      	ldr	r2, [pc, #44]	; (8018138 <_sbrk+0x34>)
 801810a:	6812      	ldr	r2, [r2, #0]
 801810c:	b142      	cbz	r2, 8018120 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 801810e:	4a0a      	ldr	r2, [pc, #40]	; (8018138 <_sbrk+0x34>)
 8018110:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8018112:	4403      	add	r3, r0
 8018114:	466a      	mov	r2, sp
 8018116:	4293      	cmp	r3, r2
 8018118:	d806      	bhi.n	8018128 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 801811a:	4a07      	ldr	r2, [pc, #28]	; (8018138 <_sbrk+0x34>)
 801811c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 801811e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8018120:	4a05      	ldr	r2, [pc, #20]	; (8018138 <_sbrk+0x34>)
 8018122:	4906      	ldr	r1, [pc, #24]	; (801813c <_sbrk+0x38>)
 8018124:	6011      	str	r1, [r2, #0]
 8018126:	e7f2      	b.n	801810e <_sbrk+0xa>
		errno = ENOMEM;
 8018128:	f001 fe06 	bl	8019d38 <__errno>
 801812c:	230c      	movs	r3, #12
 801812e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8018130:	f04f 30ff 	mov.w	r0, #4294967295
 8018134:	e7f3      	b.n	801811e <_sbrk+0x1a>
 8018136:	bf00      	nop
 8018138:	20017470 	.word	0x20017470
 801813c:	20018360 	.word	0x20018360

08018140 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018140:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018142:	4a0f      	ldr	r2, [pc, #60]	; (8018180 <SystemInit+0x40>)
 8018144:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8018148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801814c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8018150:	4b0c      	ldr	r3, [pc, #48]	; (8018184 <SystemInit+0x44>)
 8018152:	6819      	ldr	r1, [r3, #0]
 8018154:	f041 0101 	orr.w	r1, r1, #1
 8018158:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801815a:	2000      	movs	r0, #0
 801815c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801815e:	681c      	ldr	r4, [r3, #0]
 8018160:	4909      	ldr	r1, [pc, #36]	; (8018188 <SystemInit+0x48>)
 8018162:	4021      	ands	r1, r4
 8018164:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8018166:	4909      	ldr	r1, [pc, #36]	; (801818c <SystemInit+0x4c>)
 8018168:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801816a:	6819      	ldr	r1, [r3, #0]
 801816c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8018170:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8018172:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8018174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018178:	6093      	str	r3, [r2, #8]
#endif
}
 801817a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801817e:	4770      	bx	lr
 8018180:	e000ed00 	.word	0xe000ed00
 8018184:	40023800 	.word	0x40023800
 8018188:	fef6ffff 	.word	0xfef6ffff
 801818c:	24003010 	.word	0x24003010

08018190 <MX_TIM4_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8018190:	b500      	push	{lr}
 8018192:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8018194:	2300      	movs	r3, #0
 8018196:	9304      	str	r3, [sp, #16]
 8018198:	9305      	str	r3, [sp, #20]
 801819a:	9306      	str	r3, [sp, #24]
 801819c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801819e:	9301      	str	r3, [sp, #4]
 80181a0:	9302      	str	r3, [sp, #8]
 80181a2:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80181a4:	4815      	ldr	r0, [pc, #84]	; (80181fc <MX_TIM4_Init+0x6c>)
 80181a6:	4a16      	ldr	r2, [pc, #88]	; (8018200 <MX_TIM4_Init+0x70>)
 80181a8:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9999;
 80181aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80181ae:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80181b0:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 399;
 80181b2:	f240 128f 	movw	r2, #399	; 0x18f
 80181b6:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80181b8:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80181ba:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80181bc:	f7ef f956 	bl	800746c <HAL_TIM_Base_Init>
 80181c0:	b990      	cbnz	r0, 80181e8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80181c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80181c6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80181c8:	a904      	add	r1, sp, #16
 80181ca:	480c      	ldr	r0, [pc, #48]	; (80181fc <MX_TIM4_Init+0x6c>)
 80181cc:	f7ef f9e4 	bl	8007598 <HAL_TIM_ConfigClockSource>
 80181d0:	b968      	cbnz	r0, 80181ee <MX_TIM4_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80181d2:	2300      	movs	r3, #0
 80181d4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80181d6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80181d8:	a901      	add	r1, sp, #4
 80181da:	4808      	ldr	r0, [pc, #32]	; (80181fc <MX_TIM4_Init+0x6c>)
 80181dc:	f7ef fc1a 	bl	8007a14 <HAL_TIMEx_MasterConfigSynchronization>
 80181e0:	b940      	cbnz	r0, 80181f4 <MX_TIM4_Init+0x64>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80181e2:	b009      	add	sp, #36	; 0x24
 80181e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80181e8:	f7fc fc7c 	bl	8014ae4 <Error_Handler>
 80181ec:	e7e9      	b.n	80181c2 <MX_TIM4_Init+0x32>
    Error_Handler();
 80181ee:	f7fc fc79 	bl	8014ae4 <Error_Handler>
 80181f2:	e7ee      	b.n	80181d2 <MX_TIM4_Init+0x42>
    Error_Handler();
 80181f4:	f7fc fc76 	bl	8014ae4 <Error_Handler>
}
 80181f8:	e7f3      	b.n	80181e2 <MX_TIM4_Init+0x52>
 80181fa:	bf00      	nop
 80181fc:	20017474 	.word	0x20017474
 8018200:	40000800 	.word	0x40000800

08018204 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8018204:	b500      	push	{lr}
 8018206:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8018208:	2300      	movs	r3, #0
 801820a:	9304      	str	r3, [sp, #16]
 801820c:	9305      	str	r3, [sp, #20]
 801820e:	9306      	str	r3, [sp, #24]
 8018210:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8018212:	9301      	str	r3, [sp, #4]
 8018214:	9302      	str	r3, [sp, #8]
 8018216:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8018218:	4815      	ldr	r0, [pc, #84]	; (8018270 <MX_TIM5_Init+0x6c>)
 801821a:	4a16      	ldr	r2, [pc, #88]	; (8018274 <MX_TIM5_Init+0x70>)
 801821c:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 19199;
 801821e:	f644 22ff 	movw	r2, #19199	; 0x4aff
 8018222:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018224:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 1999;
 8018226:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801822a:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801822c:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801822e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8018230:	f7ef f91c 	bl	800746c <HAL_TIM_Base_Init>
 8018234:	b990      	cbnz	r0, 801825c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8018236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801823a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 801823c:	a904      	add	r1, sp, #16
 801823e:	480c      	ldr	r0, [pc, #48]	; (8018270 <MX_TIM5_Init+0x6c>)
 8018240:	f7ef f9aa 	bl	8007598 <HAL_TIM_ConfigClockSource>
 8018244:	b968      	cbnz	r0, 8018262 <MX_TIM5_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8018246:	2300      	movs	r3, #0
 8018248:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801824a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801824c:	a901      	add	r1, sp, #4
 801824e:	4808      	ldr	r0, [pc, #32]	; (8018270 <MX_TIM5_Init+0x6c>)
 8018250:	f7ef fbe0 	bl	8007a14 <HAL_TIMEx_MasterConfigSynchronization>
 8018254:	b940      	cbnz	r0, 8018268 <MX_TIM5_Init+0x64>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8018256:	b009      	add	sp, #36	; 0x24
 8018258:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801825c:	f7fc fc42 	bl	8014ae4 <Error_Handler>
 8018260:	e7e9      	b.n	8018236 <MX_TIM5_Init+0x32>
    Error_Handler();
 8018262:	f7fc fc3f 	bl	8014ae4 <Error_Handler>
 8018266:	e7ee      	b.n	8018246 <MX_TIM5_Init+0x42>
    Error_Handler();
 8018268:	f7fc fc3c 	bl	8014ae4 <Error_Handler>
}
 801826c:	e7f3      	b.n	8018256 <MX_TIM5_Init+0x52>
 801826e:	bf00      	nop
 8018270:	200174b4 	.word	0x200174b4
 8018274:	40000c00 	.word	0x40000c00

08018278 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8018278:	b500      	push	{lr}
 801827a:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801827c:	2300      	movs	r3, #0
 801827e:	9301      	str	r3, [sp, #4]
 8018280:	9302      	str	r3, [sp, #8]
 8018282:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8018284:	480f      	ldr	r0, [pc, #60]	; (80182c4 <MX_TIM6_Init+0x4c>)
 8018286:	4a10      	ldr	r2, [pc, #64]	; (80182c8 <MX_TIM6_Init+0x50>)
 8018288:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 9999;
 801828a:	f242 720f 	movw	r2, #9999	; 0x270f
 801828e:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018290:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 999;
 8018292:	f240 32e7 	movw	r2, #999	; 0x3e7
 8018296:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8018298:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801829a:	f7ef f8e7 	bl	800746c <HAL_TIM_Base_Init>
 801829e:	b950      	cbnz	r0, 80182b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80182a0:	2300      	movs	r3, #0
 80182a2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80182a4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80182a6:	a901      	add	r1, sp, #4
 80182a8:	4806      	ldr	r0, [pc, #24]	; (80182c4 <MX_TIM6_Init+0x4c>)
 80182aa:	f7ef fbb3 	bl	8007a14 <HAL_TIMEx_MasterConfigSynchronization>
 80182ae:	b928      	cbnz	r0, 80182bc <MX_TIM6_Init+0x44>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80182b0:	b005      	add	sp, #20
 80182b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80182b6:	f7fc fc15 	bl	8014ae4 <Error_Handler>
 80182ba:	e7f1      	b.n	80182a0 <MX_TIM6_Init+0x28>
    Error_Handler();
 80182bc:	f7fc fc12 	bl	8014ae4 <Error_Handler>
}
 80182c0:	e7f6      	b.n	80182b0 <MX_TIM6_Init+0x38>
 80182c2:	bf00      	nop
 80182c4:	200174f4 	.word	0x200174f4
 80182c8:	40001000 	.word	0x40001000

080182cc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80182cc:	b500      	push	{lr}
 80182ce:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80182d0:	2300      	movs	r3, #0
 80182d2:	9301      	str	r3, [sp, #4]
 80182d4:	9302      	str	r3, [sp, #8]
 80182d6:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80182d8:	480f      	ldr	r0, [pc, #60]	; (8018318 <MX_TIM7_Init+0x4c>)
 80182da:	4a10      	ldr	r2, [pc, #64]	; (801831c <MX_TIM7_Init+0x50>)
 80182dc:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 9999;
 80182de:	f242 720f 	movw	r2, #9999	; 0x270f
 80182e2:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80182e4:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 4999;
 80182e6:	f241 3287 	movw	r2, #4999	; 0x1387
 80182ea:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80182ec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80182ee:	f7ef f8bd 	bl	800746c <HAL_TIM_Base_Init>
 80182f2:	b950      	cbnz	r0, 801830a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80182f4:	2300      	movs	r3, #0
 80182f6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80182f8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80182fa:	a901      	add	r1, sp, #4
 80182fc:	4806      	ldr	r0, [pc, #24]	; (8018318 <MX_TIM7_Init+0x4c>)
 80182fe:	f7ef fb89 	bl	8007a14 <HAL_TIMEx_MasterConfigSynchronization>
 8018302:	b928      	cbnz	r0, 8018310 <MX_TIM7_Init+0x44>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8018304:	b005      	add	sp, #20
 8018306:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801830a:	f7fc fbeb 	bl	8014ae4 <Error_Handler>
 801830e:	e7f1      	b.n	80182f4 <MX_TIM7_Init+0x28>
    Error_Handler();
 8018310:	f7fc fbe8 	bl	8014ae4 <Error_Handler>
}
 8018314:	e7f6      	b.n	8018304 <MX_TIM7_Init+0x38>
 8018316:	bf00      	nop
 8018318:	20017534 	.word	0x20017534
 801831c:	40001400 	.word	0x40001400

08018320 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8018320:	b500      	push	{lr}
 8018322:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8018324:	2300      	movs	r3, #0
 8018326:	9304      	str	r3, [sp, #16]
 8018328:	9305      	str	r3, [sp, #20]
 801832a:	9306      	str	r3, [sp, #24]
 801832c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801832e:	9301      	str	r3, [sp, #4]
 8018330:	9302      	str	r3, [sp, #8]
 8018332:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8018334:	4816      	ldr	r0, [pc, #88]	; (8018390 <MX_TIM8_Init+0x70>)
 8018336:	4a17      	ldr	r2, [pc, #92]	; (8018394 <MX_TIM8_Init+0x74>)
 8018338:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 9599;
 801833a:	f242 527f 	movw	r2, #9599	; 0x257f
 801833e:	6042      	str	r2, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018340:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 9999;
 8018342:	f242 720f 	movw	r2, #9999	; 0x270f
 8018346:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018348:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 801834a:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801834c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801834e:	f7ef f88d 	bl	800746c <HAL_TIM_Base_Init>
 8018352:	b998      	cbnz	r0, 801837c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8018354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018358:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801835a:	a904      	add	r1, sp, #16
 801835c:	480c      	ldr	r0, [pc, #48]	; (8018390 <MX_TIM8_Init+0x70>)
 801835e:	f7ef f91b 	bl	8007598 <HAL_TIM_ConfigClockSource>
 8018362:	b970      	cbnz	r0, 8018382 <MX_TIM8_Init+0x62>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8018364:	2300      	movs	r3, #0
 8018366:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8018368:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801836a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801836c:	a901      	add	r1, sp, #4
 801836e:	4808      	ldr	r0, [pc, #32]	; (8018390 <MX_TIM8_Init+0x70>)
 8018370:	f7ef fb50 	bl	8007a14 <HAL_TIMEx_MasterConfigSynchronization>
 8018374:	b940      	cbnz	r0, 8018388 <MX_TIM8_Init+0x68>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8018376:	b009      	add	sp, #36	; 0x24
 8018378:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801837c:	f7fc fbb2 	bl	8014ae4 <Error_Handler>
 8018380:	e7e8      	b.n	8018354 <MX_TIM8_Init+0x34>
    Error_Handler();
 8018382:	f7fc fbaf 	bl	8014ae4 <Error_Handler>
 8018386:	e7ed      	b.n	8018364 <MX_TIM8_Init+0x44>
    Error_Handler();
 8018388:	f7fc fbac 	bl	8014ae4 <Error_Handler>
}
 801838c:	e7f3      	b.n	8018376 <MX_TIM8_Init+0x56>
 801838e:	bf00      	nop
 8018390:	20017574 	.word	0x20017574
 8018394:	40010400 	.word	0x40010400

08018398 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8018398:	b500      	push	{lr}
 801839a:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801839c:	2300      	movs	r3, #0
 801839e:	9300      	str	r3, [sp, #0]
 80183a0:	9301      	str	r3, [sp, #4]
 80183a2:	9302      	str	r3, [sp, #8]
 80183a4:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80183a6:	4810      	ldr	r0, [pc, #64]	; (80183e8 <MX_TIM9_Init+0x50>)
 80183a8:	4a10      	ldr	r2, [pc, #64]	; (80183ec <MX_TIM9_Init+0x54>)
 80183aa:	6002      	str	r2, [r0, #0]
  htim9.Init.Prescaler = 9599;
 80183ac:	f242 527f 	movw	r2, #9599	; 0x257f
 80183b0:	6042      	str	r2, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80183b2:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 19999;
 80183b4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80183b8:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80183ba:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80183bc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80183be:	f7ef f855 	bl	800746c <HAL_TIM_Base_Init>
 80183c2:	b950      	cbnz	r0, 80183da <MX_TIM9_Init+0x42>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80183c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80183c8:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80183ca:	4669      	mov	r1, sp
 80183cc:	4806      	ldr	r0, [pc, #24]	; (80183e8 <MX_TIM9_Init+0x50>)
 80183ce:	f7ef f8e3 	bl	8007598 <HAL_TIM_ConfigClockSource>
 80183d2:	b928      	cbnz	r0, 80183e0 <MX_TIM9_Init+0x48>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80183d4:	b005      	add	sp, #20
 80183d6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80183da:	f7fc fb83 	bl	8014ae4 <Error_Handler>
 80183de:	e7f1      	b.n	80183c4 <MX_TIM9_Init+0x2c>
    Error_Handler();
 80183e0:	f7fc fb80 	bl	8014ae4 <Error_Handler>
}
 80183e4:	e7f6      	b.n	80183d4 <MX_TIM9_Init+0x3c>
 80183e6:	bf00      	nop
 80183e8:	200175b4 	.word	0x200175b4
 80183ec:	40014000 	.word	0x40014000

080183f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80183f0:	b510      	push	{r4, lr}
 80183f2:	b086      	sub	sp, #24

  if(tim_baseHandle->Instance==TIM4)
 80183f4:	6803      	ldr	r3, [r0, #0]
 80183f6:	4a55      	ldr	r2, [pc, #340]	; (801854c <HAL_TIM_Base_MspInit+0x15c>)
 80183f8:	4293      	cmp	r3, r2
 80183fa:	d011      	beq.n	8018420 <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 80183fc:	4a54      	ldr	r2, [pc, #336]	; (8018550 <HAL_TIM_Base_MspInit+0x160>)
 80183fe:	4293      	cmp	r3, r2
 8018400:	d045      	beq.n	801848e <HAL_TIM_Base_MspInit+0x9e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 8018402:	4a54      	ldr	r2, [pc, #336]	; (8018554 <HAL_TIM_Base_MspInit+0x164>)
 8018404:	4293      	cmp	r3, r2
 8018406:	d055      	beq.n	80184b4 <HAL_TIM_Base_MspInit+0xc4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 8018408:	4a53      	ldr	r2, [pc, #332]	; (8018558 <HAL_TIM_Base_MspInit+0x168>)
 801840a:	4293      	cmp	r3, r2
 801840c:	d065      	beq.n	80184da <HAL_TIM_Base_MspInit+0xea>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 801840e:	4a53      	ldr	r2, [pc, #332]	; (801855c <HAL_TIM_Base_MspInit+0x16c>)
 8018410:	4293      	cmp	r3, r2
 8018412:	d075      	beq.n	8018500 <HAL_TIM_Base_MspInit+0x110>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 8018414:	4a52      	ldr	r2, [pc, #328]	; (8018560 <HAL_TIM_Base_MspInit+0x170>)
 8018416:	4293      	cmp	r3, r2
 8018418:	f000 8085 	beq.w	8018526 <HAL_TIM_Base_MspInit+0x136>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 801841c:	b006      	add	sp, #24
 801841e:	bd10      	pop	{r4, pc}
	  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_IT_UPDATE);
 8018420:	4b50      	ldr	r3, [pc, #320]	; (8018564 <HAL_TIM_Base_MspInit+0x174>)
 8018422:	681c      	ldr	r4, [r3, #0]
 8018424:	f06f 0301 	mvn.w	r3, #1
 8018428:	6123      	str	r3, [r4, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_IT_UPDATE);
 801842a:	4a4f      	ldr	r2, [pc, #316]	; (8018568 <HAL_TIM_Base_MspInit+0x178>)
 801842c:	6810      	ldr	r0, [r2, #0]
 801842e:	6103      	str	r3, [r0, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 8018430:	4a4e      	ldr	r2, [pc, #312]	; (801856c <HAL_TIM_Base_MspInit+0x17c>)
 8018432:	6811      	ldr	r1, [r2, #0]
 8018434:	610b      	str	r3, [r1, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_IT_UPDATE);
 8018436:	4a4e      	ldr	r2, [pc, #312]	; (8018570 <HAL_TIM_Base_MspInit+0x180>)
 8018438:	6812      	ldr	r2, [r2, #0]
 801843a:	6113      	str	r3, [r2, #16]
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 801843c:	68e3      	ldr	r3, [r4, #12]
 801843e:	f043 0301 	orr.w	r3, r3, #1
 8018442:	60e3      	str	r3, [r4, #12]
	  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 8018444:	68c3      	ldr	r3, [r0, #12]
 8018446:	f043 0301 	orr.w	r3, r3, #1
 801844a:	60c3      	str	r3, [r0, #12]
	  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 801844c:	68cb      	ldr	r3, [r1, #12]
 801844e:	f043 0301 	orr.w	r3, r3, #1
 8018452:	60cb      	str	r3, [r1, #12]
	  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8018454:	68d3      	ldr	r3, [r2, #12]
 8018456:	f043 0301 	orr.w	r3, r3, #1
 801845a:	60d3      	str	r3, [r2, #12]
	  __HAL_TIM_ENABLE_IT(&htim9, TIM_IT_UPDATE);
 801845c:	4b45      	ldr	r3, [pc, #276]	; (8018574 <HAL_TIM_Base_MspInit+0x184>)
 801845e:	681a      	ldr	r2, [r3, #0]
 8018460:	68d3      	ldr	r3, [r2, #12]
 8018462:	f043 0301 	orr.w	r3, r3, #1
 8018466:	60d3      	str	r3, [r2, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
 8018468:	4b43      	ldr	r3, [pc, #268]	; (8018578 <HAL_TIM_Base_MspInit+0x188>)
 801846a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801846c:	f042 0204 	orr.w	r2, r2, #4
 8018470:	641a      	str	r2, [r3, #64]	; 0x40
 8018472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018474:	f003 0304 	and.w	r3, r3, #4
 8018478:	9300      	str	r3, [sp, #0]
 801847a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 801847c:	2200      	movs	r2, #0
 801847e:	2101      	movs	r1, #1
 8018480:	201e      	movs	r0, #30
 8018482:	f7e8 ff17 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8018486:	201e      	movs	r0, #30
 8018488:	f7e8 ff58 	bl	800133c <HAL_NVIC_EnableIRQ>
 801848c:	e7c6      	b.n	801841c <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801848e:	4b3a      	ldr	r3, [pc, #232]	; (8018578 <HAL_TIM_Base_MspInit+0x188>)
 8018490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018492:	f042 0208 	orr.w	r2, r2, #8
 8018496:	641a      	str	r2, [r3, #64]	; 0x40
 8018498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801849a:	f003 0308 	and.w	r3, r3, #8
 801849e:	9301      	str	r3, [sp, #4]
 80184a0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 80184a2:	2200      	movs	r2, #0
 80184a4:	2103      	movs	r1, #3
 80184a6:	2032      	movs	r0, #50	; 0x32
 80184a8:	f7e8 ff04 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80184ac:	2032      	movs	r0, #50	; 0x32
 80184ae:	f7e8 ff45 	bl	800133c <HAL_NVIC_EnableIRQ>
 80184b2:	e7b3      	b.n	801841c <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80184b4:	4b30      	ldr	r3, [pc, #192]	; (8018578 <HAL_TIM_Base_MspInit+0x188>)
 80184b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80184b8:	f042 0210 	orr.w	r2, r2, #16
 80184bc:	641a      	str	r2, [r3, #64]	; 0x40
 80184be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184c0:	f003 0310 	and.w	r3, r3, #16
 80184c4:	9302      	str	r3, [sp, #8]
 80184c6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80184c8:	2200      	movs	r2, #0
 80184ca:	2101      	movs	r1, #1
 80184cc:	2036      	movs	r0, #54	; 0x36
 80184ce:	f7e8 fef1 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80184d2:	2036      	movs	r0, #54	; 0x36
 80184d4:	f7e8 ff32 	bl	800133c <HAL_NVIC_EnableIRQ>
 80184d8:	e7a0      	b.n	801841c <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80184da:	4b27      	ldr	r3, [pc, #156]	; (8018578 <HAL_TIM_Base_MspInit+0x188>)
 80184dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80184de:	f042 0220 	orr.w	r2, r2, #32
 80184e2:	641a      	str	r2, [r3, #64]	; 0x40
 80184e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184e6:	f003 0320 	and.w	r3, r3, #32
 80184ea:	9303      	str	r3, [sp, #12]
 80184ec:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 80184ee:	2200      	movs	r2, #0
 80184f0:	2104      	movs	r1, #4
 80184f2:	2037      	movs	r0, #55	; 0x37
 80184f4:	f7e8 fede 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80184f8:	2037      	movs	r0, #55	; 0x37
 80184fa:	f7e8 ff1f 	bl	800133c <HAL_NVIC_EnableIRQ>
 80184fe:	e78d      	b.n	801841c <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8018500:	4b1d      	ldr	r3, [pc, #116]	; (8018578 <HAL_TIM_Base_MspInit+0x188>)
 8018502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018504:	f042 0202 	orr.w	r2, r2, #2
 8018508:	645a      	str	r2, [r3, #68]	; 0x44
 801850a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801850c:	f003 0302 	and.w	r3, r3, #2
 8018510:	9304      	str	r3, [sp, #16]
 8018512:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8018514:	2200      	movs	r2, #0
 8018516:	2101      	movs	r1, #1
 8018518:	202c      	movs	r0, #44	; 0x2c
 801851a:	f7e8 fecb 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801851e:	202c      	movs	r0, #44	; 0x2c
 8018520:	f7e8 ff0c 	bl	800133c <HAL_NVIC_EnableIRQ>
 8018524:	e77a      	b.n	801841c <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8018526:	4b14      	ldr	r3, [pc, #80]	; (8018578 <HAL_TIM_Base_MspInit+0x188>)
 8018528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801852a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801852e:	645a      	str	r2, [r3, #68]	; 0x44
 8018530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018536:	9305      	str	r3, [sp, #20]
 8018538:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 801853a:	2200      	movs	r2, #0
 801853c:	2102      	movs	r1, #2
 801853e:	2018      	movs	r0, #24
 8018540:	f7e8 feb8 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8018544:	2018      	movs	r0, #24
 8018546:	f7e8 fef9 	bl	800133c <HAL_NVIC_EnableIRQ>
}
 801854a:	e767      	b.n	801841c <HAL_TIM_Base_MspInit+0x2c>
 801854c:	40000800 	.word	0x40000800
 8018550:	40000c00 	.word	0x40000c00
 8018554:	40001000 	.word	0x40001000
 8018558:	40001400 	.word	0x40001400
 801855c:	40010400 	.word	0x40010400
 8018560:	40014000 	.word	0x40014000
 8018564:	20017474 	.word	0x20017474
 8018568:	200174b4 	.word	0x200174b4
 801856c:	200174f4 	.word	0x200174f4
 8018570:	20017534 	.word	0x20017534
 8018574:	200175b4 	.word	0x200175b4
 8018578:	40023800 	.word	0x40023800

0801857c <USBH_UserProcess1>:
 * user callback definition
 */
static void USBH_UserProcess1  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_2 */
  switch(id)
 801857c:	2904      	cmp	r1, #4
 801857e:	d00c      	beq.n	801859a <USBH_UserProcess1+0x1e>
 8018580:	2905      	cmp	r1, #5
 8018582:	d002      	beq.n	801858a <USBH_UserProcess1+0xe>
 8018584:	2902      	cmp	r1, #2
 8018586:	d004      	beq.n	8018592 <USBH_UserProcess1+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_2 */
}
 8018588:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 801858a:	4b06      	ldr	r3, [pc, #24]	; (80185a4 <USBH_UserProcess1+0x28>)
 801858c:	2203      	movs	r2, #3
 801858e:	701a      	strb	r2, [r3, #0]
  break;
 8018590:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8018592:	4b04      	ldr	r3, [pc, #16]	; (80185a4 <USBH_UserProcess1+0x28>)
 8018594:	2202      	movs	r2, #2
 8018596:	701a      	strb	r2, [r3, #0]
  break;
 8018598:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 801859a:	4b02      	ldr	r3, [pc, #8]	; (80185a4 <USBH_UserProcess1+0x28>)
 801859c:	2201      	movs	r2, #1
 801859e:	701a      	strb	r2, [r3, #0]
}
 80185a0:	e7f2      	b.n	8018588 <USBH_UserProcess1+0xc>
 80185a2:	bf00      	nop
 80185a4:	200175f4 	.word	0x200175f4

080185a8 <USBH_UserProcess2>:

static void USBH_UserProcess2  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_21 */
  switch(id)
 80185a8:	2904      	cmp	r1, #4
 80185aa:	d00c      	beq.n	80185c6 <USBH_UserProcess2+0x1e>
 80185ac:	2905      	cmp	r1, #5
 80185ae:	d002      	beq.n	80185b6 <USBH_UserProcess2+0xe>
 80185b0:	2902      	cmp	r1, #2
 80185b2:	d004      	beq.n	80185be <USBH_UserProcess2+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_21 */
}
 80185b4:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80185b6:	4b06      	ldr	r3, [pc, #24]	; (80185d0 <USBH_UserProcess2+0x28>)
 80185b8:	2203      	movs	r2, #3
 80185ba:	701a      	strb	r2, [r3, #0]
  break;
 80185bc:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 80185be:	4b04      	ldr	r3, [pc, #16]	; (80185d0 <USBH_UserProcess2+0x28>)
 80185c0:	2202      	movs	r2, #2
 80185c2:	701a      	strb	r2, [r3, #0]
  break;
 80185c4:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 80185c6:	4b02      	ldr	r3, [pc, #8]	; (80185d0 <USBH_UserProcess2+0x28>)
 80185c8:	2201      	movs	r2, #1
 80185ca:	701a      	strb	r2, [r3, #0]
}
 80185cc:	e7f2      	b.n	80185b4 <USBH_UserProcess2+0xc>
 80185ce:	bf00      	nop
 80185d0:	200175f4 	.word	0x200175f4

080185d4 <MX_USB_HOST_Init>:
{
 80185d4:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess1, HOST_HS) != USBH_OK)
 80185d6:	2200      	movs	r2, #0
 80185d8:	4917      	ldr	r1, [pc, #92]	; (8018638 <MX_USB_HOST_Init+0x64>)
 80185da:	4818      	ldr	r0, [pc, #96]	; (801863c <MX_USB_HOST_Init+0x68>)
 80185dc:	f7f1 fc81 	bl	8009ee2 <USBH_Init>
 80185e0:	b9c0      	cbnz	r0, 8018614 <MX_USB_HOST_Init+0x40>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 80185e2:	4917      	ldr	r1, [pc, #92]	; (8018640 <MX_USB_HOST_Init+0x6c>)
 80185e4:	4815      	ldr	r0, [pc, #84]	; (801863c <MX_USB_HOST_Init+0x68>)
 80185e6:	f7f1 fc93 	bl	8009f10 <USBH_RegisterClass>
 80185ea:	b9b0      	cbnz	r0, 801861a <MX_USB_HOST_Init+0x46>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80185ec:	4813      	ldr	r0, [pc, #76]	; (801863c <MX_USB_HOST_Init+0x68>)
 80185ee:	f7f1 fcd5 	bl	8009f9c <USBH_Start>
 80185f2:	b9a8      	cbnz	r0, 8018620 <MX_USB_HOST_Init+0x4c>
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess2, HOST_FS) != USBH_OK)
 80185f4:	2201      	movs	r2, #1
 80185f6:	4913      	ldr	r1, [pc, #76]	; (8018644 <MX_USB_HOST_Init+0x70>)
 80185f8:	4813      	ldr	r0, [pc, #76]	; (8018648 <MX_USB_HOST_Init+0x74>)
 80185fa:	f7f1 fc72 	bl	8009ee2 <USBH_Init>
 80185fe:	b990      	cbnz	r0, 8018626 <MX_USB_HOST_Init+0x52>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8018600:	490f      	ldr	r1, [pc, #60]	; (8018640 <MX_USB_HOST_Init+0x6c>)
 8018602:	4811      	ldr	r0, [pc, #68]	; (8018648 <MX_USB_HOST_Init+0x74>)
 8018604:	f7f1 fc84 	bl	8009f10 <USBH_RegisterClass>
 8018608:	b980      	cbnz	r0, 801862c <MX_USB_HOST_Init+0x58>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801860a:	480f      	ldr	r0, [pc, #60]	; (8018648 <MX_USB_HOST_Init+0x74>)
 801860c:	f7f1 fcc6 	bl	8009f9c <USBH_Start>
 8018610:	b978      	cbnz	r0, 8018632 <MX_USB_HOST_Init+0x5e>
}
 8018612:	bd08      	pop	{r3, pc}
    Error_Handler();
 8018614:	f7fc fa66 	bl	8014ae4 <Error_Handler>
 8018618:	e7e3      	b.n	80185e2 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 801861a:	f7fc fa63 	bl	8014ae4 <Error_Handler>
 801861e:	e7e5      	b.n	80185ec <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8018620:	f7fc fa60 	bl	8014ae4 <Error_Handler>
 8018624:	e7e6      	b.n	80185f4 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8018626:	f7fc fa5d 	bl	8014ae4 <Error_Handler>
 801862a:	e7e9      	b.n	8018600 <MX_USB_HOST_Init+0x2c>
    Error_Handler();
 801862c:	f7fc fa5a 	bl	8014ae4 <Error_Handler>
 8018630:	e7eb      	b.n	801860a <MX_USB_HOST_Init+0x36>
    Error_Handler();
 8018632:	f7fc fa57 	bl	8014ae4 <Error_Handler>
}
 8018636:	e7ec      	b.n	8018612 <MX_USB_HOST_Init+0x3e>
 8018638:	0801857d 	.word	0x0801857d
 801863c:	200179c4 	.word	0x200179c4
 8018640:	20000008 	.word	0x20000008
 8018644:	080185a9 	.word	0x080185a9
 8018648:	200175f8 	.word	0x200175f8

0801864c <MX_USB_HOST_Process>:
{
 801864c:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostHS);
 801864e:	4803      	ldr	r0, [pc, #12]	; (801865c <MX_USB_HOST_Process+0x10>)
 8018650:	f7f1 fcc5 	bl	8009fde <USBH_Process>
  USBH_Process(&hUsbHostFS);
 8018654:	4802      	ldr	r0, [pc, #8]	; (8018660 <MX_USB_HOST_Process+0x14>)
 8018656:	f7f1 fcc2 	bl	8009fde <USBH_Process>
}
 801865a:	bd08      	pop	{r3, pc}
 801865c:	200179c4 	.word	0x200179c4
 8018660:	200175f8 	.word	0x200175f8

08018664 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018668:	b0b0      	sub	sp, #192	; 0xc0
 801866a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801866c:	2100      	movs	r1, #0
 801866e:	912b      	str	r1, [sp, #172]	; 0xac
 8018670:	912c      	str	r1, [sp, #176]	; 0xb0
 8018672:	912d      	str	r1, [sp, #180]	; 0xb4
 8018674:	912e      	str	r1, [sp, #184]	; 0xb8
 8018676:	912f      	str	r1, [sp, #188]	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018678:	2284      	movs	r2, #132	; 0x84
 801867a:	a80a      	add	r0, sp, #40	; 0x28
 801867c:	f001 fbbe 	bl	8019dfc <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8018680:	6823      	ldr	r3, [r4, #0]
 8018682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018686:	d005      	beq.n	8018694 <HAL_HCD_MspInit+0x30>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
  else if(hcdHandle->Instance==USB_OTG_HS)
 8018688:	4a65      	ldr	r2, [pc, #404]	; (8018820 <HAL_HCD_MspInit+0x1bc>)
 801868a:	4293      	cmp	r3, r2
 801868c:	d041      	beq.n	8018712 <HAL_HCD_MspInit+0xae>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801868e:	b030      	add	sp, #192	; 0xc0
 8018690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8018694:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8018698:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801869a:	a80a      	add	r0, sp, #40	; 0x28
 801869c:	f7eb ffda 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 80186a0:	2800      	cmp	r0, #0
 80186a2:	d133      	bne.n	801870c <HAL_HCD_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80186a4:	4c5f      	ldr	r4, [pc, #380]	; (8018824 <HAL_HCD_MspInit+0x1c0>)
 80186a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80186a8:	f043 0301 	orr.w	r3, r3, #1
 80186ac:	6323      	str	r3, [r4, #48]	; 0x30
 80186ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80186b0:	f003 0301 	and.w	r3, r3, #1
 80186b4:	9300      	str	r3, [sp, #0]
 80186b6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80186b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80186bc:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80186be:	2302      	movs	r3, #2
 80186c0:	932c      	str	r3, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80186c2:	2500      	movs	r5, #0
 80186c4:	952d      	str	r5, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80186c6:	2303      	movs	r3, #3
 80186c8:	932e      	str	r3, [sp, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80186ca:	230a      	movs	r3, #10
 80186cc:	932f      	str	r3, [sp, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80186ce:	a92b      	add	r1, sp, #172	; 0xac
 80186d0:	4855      	ldr	r0, [pc, #340]	; (8018828 <HAL_HCD_MspInit+0x1c4>)
 80186d2:	f7e9 fc1d 	bl	8001f10 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80186d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80186d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80186dc:	6363      	str	r3, [r4, #52]	; 0x34
 80186de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80186e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80186e4:	9301      	str	r3, [sp, #4]
 80186e6:	9b01      	ldr	r3, [sp, #4]
 80186e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80186ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80186ee:	6463      	str	r3, [r4, #68]	; 0x44
 80186f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80186f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80186f6:	9302      	str	r3, [sp, #8]
 80186f8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80186fa:	462a      	mov	r2, r5
 80186fc:	4629      	mov	r1, r5
 80186fe:	2043      	movs	r0, #67	; 0x43
 8018700:	f7e8 fdd8 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018704:	2043      	movs	r0, #67	; 0x43
 8018706:	f7e8 fe19 	bl	800133c <HAL_NVIC_EnableIRQ>
 801870a:	e7c0      	b.n	801868e <HAL_HCD_MspInit+0x2a>
      Error_Handler();
 801870c:	f7fc f9ea 	bl	8014ae4 <Error_Handler>
 8018710:	e7c8      	b.n	80186a4 <HAL_HCD_MspInit+0x40>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018712:	4c44      	ldr	r4, [pc, #272]	; (8018824 <HAL_HCD_MspInit+0x1c0>)
 8018714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018716:	f043 0302 	orr.w	r3, r3, #2
 801871a:	6323      	str	r3, [r4, #48]	; 0x30
 801871c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801871e:	f003 0302 	and.w	r3, r3, #2
 8018722:	9303      	str	r3, [sp, #12]
 8018724:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8018726:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801872c:	6323      	str	r3, [r4, #48]	; 0x30
 801872e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018734:	9304      	str	r3, [sp, #16]
 8018736:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8018738:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801873a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801873e:	6323      	str	r3, [r4, #48]	; 0x30
 8018740:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018746:	9305      	str	r3, [sp, #20]
 8018748:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801874a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801874c:	f043 0304 	orr.w	r3, r3, #4
 8018750:	6323      	str	r3, [r4, #48]	; 0x30
 8018752:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018754:	f003 0304 	and.w	r3, r3, #4
 8018758:	9306      	str	r3, [sp, #24]
 801875a:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801875c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801875e:	f043 0301 	orr.w	r3, r3, #1
 8018762:	6323      	str	r3, [r4, #48]	; 0x30
 8018764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018766:	f003 0301 	and.w	r3, r3, #1
 801876a:	9307      	str	r3, [sp, #28]
 801876c:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_10
 801876e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8018772:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018774:	f04f 0802 	mov.w	r8, #2
 8018778:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801877c:	2703      	movs	r7, #3
 801877e:	972e      	str	r7, [sp, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8018780:	260a      	movs	r6, #10
 8018782:	962f      	str	r6, [sp, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018784:	a92b      	add	r1, sp, #172	; 0xac
 8018786:	4829      	ldr	r0, [pc, #164]	; (801882c <HAL_HCD_MspInit+0x1c8>)
 8018788:	f7e9 fbc2 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801878c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018790:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018792:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018796:	2500      	movs	r5, #0
 8018798:	952d      	str	r5, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801879a:	972e      	str	r7, [sp, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801879c:	962f      	str	r6, [sp, #188]	; 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801879e:	a92b      	add	r1, sp, #172	; 0xac
 80187a0:	4823      	ldr	r0, [pc, #140]	; (8018830 <HAL_HCD_MspInit+0x1cc>)
 80187a2:	f7e9 fbb5 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80187a6:	2310      	movs	r3, #16
 80187a8:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80187aa:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80187ae:	952d      	str	r5, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80187b0:	972e      	str	r7, [sp, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80187b2:	962f      	str	r6, [sp, #188]	; 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80187b4:	a92b      	add	r1, sp, #172	; 0xac
 80187b6:	481f      	ldr	r0, [pc, #124]	; (8018834 <HAL_HCD_MspInit+0x1d0>)
 80187b8:	f7e9 fbaa 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80187bc:	2301      	movs	r3, #1
 80187be:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80187c0:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80187c4:	952d      	str	r5, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80187c6:	972e      	str	r7, [sp, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80187c8:	962f      	str	r6, [sp, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80187ca:	a92b      	add	r1, sp, #172	; 0xac
 80187cc:	481a      	ldr	r0, [pc, #104]	; (8018838 <HAL_HCD_MspInit+0x1d4>)
 80187ce:	f7e9 fb9f 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80187d2:	2328      	movs	r3, #40	; 0x28
 80187d4:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80187d6:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80187da:	952d      	str	r5, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80187dc:	972e      	str	r7, [sp, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80187de:	962f      	str	r6, [sp, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80187e0:	a92b      	add	r1, sp, #172	; 0xac
 80187e2:	4811      	ldr	r0, [pc, #68]	; (8018828 <HAL_HCD_MspInit+0x1c4>)
 80187e4:	f7e9 fb94 	bl	8001f10 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80187e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80187ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80187ee:	6323      	str	r3, [r4, #48]	; 0x30
 80187f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80187f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80187f6:	9308      	str	r3, [sp, #32]
 80187f8:	9b08      	ldr	r3, [sp, #32]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80187fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80187fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8018800:	6323      	str	r3, [r4, #48]	; 0x30
 8018802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8018808:	9309      	str	r3, [sp, #36]	; 0x24
 801880a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801880c:	462a      	mov	r2, r5
 801880e:	4629      	mov	r1, r5
 8018810:	204d      	movs	r0, #77	; 0x4d
 8018812:	f7e8 fd4f 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8018816:	204d      	movs	r0, #77	; 0x4d
 8018818:	f7e8 fd90 	bl	800133c <HAL_NVIC_EnableIRQ>
}
 801881c:	e737      	b.n	801868e <HAL_HCD_MspInit+0x2a>
 801881e:	bf00      	nop
 8018820:	40040000 	.word	0x40040000
 8018824:	40023800 	.word	0x40023800
 8018828:	40020000 	.word	0x40020000
 801882c:	40020400 	.word	0x40020400
 8018830:	40022000 	.word	0x40022000
 8018834:	40021c00 	.word	0x40021c00
 8018838:	40020800 	.word	0x40020800

0801883c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801883c:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 801883e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8018842:	f7f1 fbb8 	bl	8009fb6 <USBH_LL_IncTimer>
}
 8018846:	bd08      	pop	{r3, pc}

08018848 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018848:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 801884a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801884e:	f7f1 fcb6 	bl	800a1be <USBH_LL_Connect>
}
 8018852:	bd08      	pop	{r3, pc}

08018854 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018854:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8018856:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801885a:	f7f1 fcc4 	bl	800a1e6 <USBH_LL_Disconnect>
}
 801885e:	bd08      	pop	{r3, pc}

08018860 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8018860:	4770      	bx	lr

08018862 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018862:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 8018864:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8018868:	f7f1 fbae 	bl	8009fc8 <USBH_LL_PortEnabled>
}
 801886c:	bd08      	pop	{r3, pc}

0801886e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801886e:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8018870:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8018874:	f7f1 fbac 	bl	8009fd0 <USBH_LL_PortDisabled>
}
 8018878:	bd08      	pop	{r3, pc}
	...

0801887c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801887c:	b510      	push	{r4, lr}
 801887e:	4604      	mov	r4, r0
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8018880:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8018884:	2b01      	cmp	r3, #1
 8018886:	d004      	beq.n	8018892 <USBH_LL_Init+0x16>
    Error_Handler( );
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  if (phost->id == HOST_HS) {
 8018888:	f894 33c0 	ldrb.w	r3, [r4, #960]	; 0x3c0
 801888c:	b303      	cbz	r3, 80188d0 <USBH_LL_Init+0x54>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
  }
  return USBH_OK;
}
 801888e:	2000      	movs	r0, #0
 8018890:	bd10      	pop	{r4, pc}
  hhcd_USB_OTG_FS.pData = phost;
 8018892:	481f      	ldr	r0, [pc, #124]	; (8018910 <USBH_LL_Init+0x94>)
 8018894:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8018898:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801889c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80188a0:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80188a2:	2308      	movs	r3, #8
 80188a4:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80188a6:	2303      	movs	r3, #3
 80188a8:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80188aa:	2300      	movs	r3, #0
 80188ac:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80188ae:	2202      	movs	r2, #2
 80188b0:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80188b2:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80188b4:	f7e9 fd8c 	bl	80023d0 <HAL_HCD_Init>
 80188b8:	b938      	cbnz	r0, 80188ca <USBH_LL_Init+0x4e>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80188ba:	4815      	ldr	r0, [pc, #84]	; (8018910 <USBH_LL_Init+0x94>)
 80188bc:	f7ea faa9 	bl	8002e12 <HAL_HCD_GetCurrentFrame>
 80188c0:	4601      	mov	r1, r0
 80188c2:	4620      	mov	r0, r4
 80188c4:	f7f1 fb74 	bl	8009fb0 <USBH_LL_SetTimer>
 80188c8:	e7de      	b.n	8018888 <USBH_LL_Init+0xc>
    Error_Handler( );
 80188ca:	f7fc f90b 	bl	8014ae4 <Error_Handler>
 80188ce:	e7f4      	b.n	80188ba <USBH_LL_Init+0x3e>
  hhcd_USB_OTG_HS.pData = phost;
 80188d0:	4810      	ldr	r0, [pc, #64]	; (8018914 <USBH_LL_Init+0x98>)
 80188d2:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 80188d6:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80188da:	4b0f      	ldr	r3, [pc, #60]	; (8018918 <USBH_LL_Init+0x9c>)
 80188dc:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80188de:	230c      	movs	r3, #12
 80188e0:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 80188e2:	2300      	movs	r3, #0
 80188e4:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80188e6:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80188e8:	2201      	movs	r2, #1
 80188ea:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80188ec:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80188ee:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 80188f0:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80188f2:	f7e9 fd6d 	bl	80023d0 <HAL_HCD_Init>
 80188f6:	b938      	cbnz	r0, 8018908 <USBH_LL_Init+0x8c>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80188f8:	4806      	ldr	r0, [pc, #24]	; (8018914 <USBH_LL_Init+0x98>)
 80188fa:	f7ea fa8a 	bl	8002e12 <HAL_HCD_GetCurrentFrame>
 80188fe:	4601      	mov	r1, r0
 8018900:	4620      	mov	r0, r4
 8018902:	f7f1 fb55 	bl	8009fb0 <USBH_LL_SetTimer>
 8018906:	e7c2      	b.n	801888e <USBH_LL_Init+0x12>
    Error_Handler( );
 8018908:	f7fc f8ec 	bl	8014ae4 <Error_Handler>
 801890c:	e7f4      	b.n	80188f8 <USBH_LL_Init+0x7c>
 801890e:	bf00      	nop
 8018910:	20017d90 	.word	0x20017d90
 8018914:	20018054 	.word	0x20018054
 8018918:	40040000 	.word	0x40040000

0801891c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801891c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801891e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8018922:	f7ea fa7b 	bl	8002e1c <HAL_HCD_GetCurrentSpeed>
 8018926:	2801      	cmp	r0, #1
 8018928:	d004      	beq.n	8018934 <USBH_LL_GetSpeed+0x18>
 801892a:	2802      	cmp	r0, #2
 801892c:	d004      	beq.n	8018938 <USBH_LL_GetSpeed+0x1c>
 801892e:	b100      	cbz	r0, 8018932 <USBH_LL_GetSpeed+0x16>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 8018930:	2001      	movs	r0, #1
    break;
  }
  return  speed;
}
 8018932:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_FULL;
 8018934:	2001      	movs	r0, #1
 8018936:	e7fc      	b.n	8018932 <USBH_LL_GetSpeed+0x16>
    speed = USBH_SPEED_LOW;
 8018938:	2002      	movs	r0, #2
 801893a:	e7fa      	b.n	8018932 <USBH_LL_GetSpeed+0x16>

0801893c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801893c:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801893e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8018942:	f7ea fa60 	bl	8002e06 <HAL_HCD_HC_GetXferCount>
}
 8018946:	bd08      	pop	{r3, pc}

08018948 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018948:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801894a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 801894e:	f7ea fa53 	bl	8002df8 <HAL_HCD_HC_GetURBState>
}
 8018952:	bd08      	pop	{r3, pc}

08018954 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8018954:	b538      	push	{r3, r4, r5, lr}
 8018956:	4604      	mov	r4, r0
 8018958:	460d      	mov	r5, r1
  if (phost->id == HOST_FS) {
 801895a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 801895e:	2b01      	cmp	r3, #1
 8018960:	d007      	beq.n	8018972 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
  }
  if (phost->id == HOST_HS) {
 8018962:	f894 33c0 	ldrb.w	r3, [r4, #960]	; 0x3c0
 8018966:	b143      	cbz	r3, 801897a <USBH_LL_DriverVBUS+0x26>
    MX_DriverVbusHS(state);
  }

  HAL_Delay(200);
 8018968:	20c8      	movs	r0, #200	; 0xc8
 801896a:	f7e8 fc71 	bl	8001250 <HAL_Delay>
  return USBH_OK;
}
 801896e:	2000      	movs	r0, #0
 8018970:	bd38      	pop	{r3, r4, r5, pc}
    MX_DriverVbusFS(state);
 8018972:	4608      	mov	r0, r1
 8018974:	f000 f91c 	bl	8018bb0 <MX_DriverVbusFS>
 8018978:	e7f3      	b.n	8018962 <USBH_LL_DriverVBUS+0xe>
    MX_DriverVbusHS(state);
 801897a:	4628      	mov	r0, r5
 801897c:	f000 f924 	bl	8018bc8 <MX_DriverVbusHS>
 8018980:	e7f2      	b.n	8018968 <USBH_LL_DriverVBUS+0x14>

08018982 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018982:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8018986:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 801898a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801898e:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 8018992:	b138      	cbz	r0, 80189a4 <USBH_LL_SetToggle+0x22>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018994:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8018998:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801899c:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80189a0:	2000      	movs	r0, #0
 80189a2:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80189a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80189a8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80189ac:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 80189b0:	e7f6      	b.n	80189a0 <USBH_LL_SetToggle+0x1e>

080189b2 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80189b2:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 80189b6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80189ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80189be:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 80189c2:	b132      	cbz	r2, 80189d2 <USBH_LL_GetToggle+0x20>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80189c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80189c8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80189cc:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 80189d0:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80189d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80189d6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80189da:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 80189de:	4770      	bx	lr

080189e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80189e0:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80189e2:	f7e8 fc35 	bl	8001250 <HAL_Delay>
}
 80189e6:	bd08      	pop	{r3, pc}

080189e8 <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 80189e8:	2802      	cmp	r0, #2
 80189ea:	d805      	bhi.n	80189f8 <USBH_Get_USB_Status+0x10>
 80189ec:	e8df f000 	tbb	[pc, r0]
 80189f0:	0405      	.short	0x0405
 80189f2:	02          	.byte	0x02
 80189f3:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80189f4:	2001      	movs	r0, #1
    break;
 80189f6:	4770      	bx	lr
      usb_status = USBH_FAIL;
 80189f8:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80189fa:	4770      	bx	lr

080189fc <USBH_LL_Start>:
{
 80189fc:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 80189fe:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8018a02:	f7ea f9cc 	bl	8002d9e <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8018a06:	f7ff ffef 	bl	80189e8 <USBH_Get_USB_Status>
}
 8018a0a:	bd08      	pop	{r3, pc}

08018a0c <USBH_LL_Stop>:
{
 8018a0c:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8018a0e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8018a12:	f7ea f9da 	bl	8002dca <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8018a16:	f7ff ffe7 	bl	80189e8 <USBH_Get_USB_Status>
}
 8018a1a:	bd08      	pop	{r3, pc}

08018a1c <USBH_LL_ResetPort>:
{
 8018a1c:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8018a1e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8018a22:	f7ea f9e4 	bl	8002dee <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 8018a26:	f7ff ffdf 	bl	80189e8 <USBH_Get_USB_Status>
}
 8018a2a:	bd08      	pop	{r3, pc}

08018a2c <USBH_LL_OpenPipe>:
{
 8018a2c:	b510      	push	{r4, lr}
 8018a2e:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8018a30:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8018a34:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8018a38:	9402      	str	r4, [sp, #8]
 8018a3a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8018a3e:	9401      	str	r4, [sp, #4]
 8018a40:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8018a44:	9400      	str	r4, [sp, #0]
 8018a46:	f7e9 fc65 	bl	8002314 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8018a4a:	f7ff ffcd 	bl	80189e8 <USBH_Get_USB_Status>
}
 8018a4e:	b004      	add	sp, #16
 8018a50:	bd10      	pop	{r4, pc}

08018a52 <USBH_LL_ClosePipe>:
{
 8018a52:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8018a54:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8018a58:	f7e9 fca7 	bl	80023aa <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 8018a5c:	f7ff ffc4 	bl	80189e8 <USBH_Get_USB_Status>
}
 8018a60:	bd08      	pop	{r3, pc}

08018a62 <USBH_LL_SubmitURB>:
{
 8018a62:	b510      	push	{r4, lr}
 8018a64:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018a66:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8018a6a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8018a6e:	9403      	str	r4, [sp, #12]
 8018a70:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8018a74:	9402      	str	r4, [sp, #8]
 8018a76:	9c07      	ldr	r4, [sp, #28]
 8018a78:	9401      	str	r4, [sp, #4]
 8018a7a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8018a7e:	9400      	str	r4, [sp, #0]
 8018a80:	f7e9 fd02 	bl	8002488 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 8018a84:	f7ff ffb0 	bl	80189e8 <USBH_Get_USB_Status>
}
 8018a88:	b004      	add	sp, #16
 8018a8a:	bd10      	pop	{r4, pc}

08018a8c <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8018a8c:	2000      	movs	r0, #0
 8018a8e:	4770      	bx	lr

08018a90 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8018a90:	b508      	push	{r3, lr}
 8018a92:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8018a94:	4803      	ldr	r0, [pc, #12]	; (8018aa4 <USBH_status+0x14>)
 8018a96:	f7f0 fd36 	bl	8009506 <USBH_MSC_UnitIsReady>
 8018a9a:	b108      	cbz	r0, 8018aa0 <USBH_status+0x10>
  {
    res = RES_OK;
 8018a9c:	2000      	movs	r0, #0
  {
    res = RES_ERROR;
  }

  return res;
}
 8018a9e:	bd08      	pop	{r3, pc}
    res = RES_ERROR;
 8018aa0:	2001      	movs	r0, #1
 8018aa2:	e7fc      	b.n	8018a9e <USBH_status+0xe>
 8018aa4:	200175f8 	.word	0x200175f8

08018aa8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8018aa8:	b510      	push	{r4, lr}
 8018aaa:	b090      	sub	sp, #64	; 0x40
 8018aac:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8018aae:	9300      	str	r3, [sp, #0]
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	4601      	mov	r1, r0
 8018ab4:	480d      	ldr	r0, [pc, #52]	; (8018aec <USBH_read+0x44>)
 8018ab6:	f7f0 fd5e 	bl	8009576 <USBH_MSC_Read>
 8018aba:	b908      	cbnz	r0, 8018ac0 <USBH_read+0x18>
      break;
    }
  }

  return res;
}
 8018abc:	b010      	add	sp, #64	; 0x40
 8018abe:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8018ac0:	aa03      	add	r2, sp, #12
 8018ac2:	4621      	mov	r1, r4
 8018ac4:	4809      	ldr	r0, [pc, #36]	; (8018aec <USBH_read+0x44>)
 8018ac6:	f7f0 fd31 	bl	800952c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8018aca:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018ace:	2b28      	cmp	r3, #40	; 0x28
 8018ad0:	d007      	beq.n	8018ae2 <USBH_read+0x3a>
 8018ad2:	2b3a      	cmp	r3, #58	; 0x3a
 8018ad4:	d007      	beq.n	8018ae6 <USBH_read+0x3e>
 8018ad6:	2b04      	cmp	r3, #4
 8018ad8:	d001      	beq.n	8018ade <USBH_read+0x36>
      res = RES_ERROR;
 8018ada:	2001      	movs	r0, #1
 8018adc:	e7ee      	b.n	8018abc <USBH_read+0x14>
    switch (info.sense.asc)
 8018ade:	2003      	movs	r0, #3
 8018ae0:	e7ec      	b.n	8018abc <USBH_read+0x14>
 8018ae2:	2003      	movs	r0, #3
 8018ae4:	e7ea      	b.n	8018abc <USBH_read+0x14>
 8018ae6:	2003      	movs	r0, #3
 8018ae8:	e7e8      	b.n	8018abc <USBH_read+0x14>
 8018aea:	bf00      	nop
 8018aec:	200175f8 	.word	0x200175f8

08018af0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8018af0:	b530      	push	{r4, r5, lr}
 8018af2:	b08f      	sub	sp, #60	; 0x3c
 8018af4:	460c      	mov	r4, r1
 8018af6:	4615      	mov	r5, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8018af8:	2903      	cmp	r1, #3
 8018afa:	d824      	bhi.n	8018b46 <USBH_ioctl+0x56>
 8018afc:	e8df f001 	tbb	[pc, r1]
 8018b00:	180e0502 	.word	0x180e0502
 8018b04:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 8018b06:	b00f      	add	sp, #60	; 0x3c
 8018b08:	bd30      	pop	{r4, r5, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8018b0a:	aa01      	add	r2, sp, #4
 8018b0c:	4601      	mov	r1, r0
 8018b0e:	4812      	ldr	r0, [pc, #72]	; (8018b58 <USBH_ioctl+0x68>)
 8018b10:	f7f0 fd0c 	bl	800952c <USBH_MSC_GetLUNInfo>
 8018b14:	b9c8      	cbnz	r0, 8018b4a <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_nbr;
 8018b16:	9b02      	ldr	r3, [sp, #8]
 8018b18:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8018b1a:	e7f4      	b.n	8018b06 <USBH_ioctl+0x16>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8018b1c:	aa01      	add	r2, sp, #4
 8018b1e:	4601      	mov	r1, r0
 8018b20:	480d      	ldr	r0, [pc, #52]	; (8018b58 <USBH_ioctl+0x68>)
 8018b22:	f7f0 fd03 	bl	800952c <USBH_MSC_GetLUNInfo>
 8018b26:	b990      	cbnz	r0, 8018b4e <USBH_ioctl+0x5e>
      *(DWORD*)buff = info.capacity.block_size;
 8018b28:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018b2c:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8018b2e:	e7ea      	b.n	8018b06 <USBH_ioctl+0x16>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8018b30:	aa01      	add	r2, sp, #4
 8018b32:	4601      	mov	r1, r0
 8018b34:	4808      	ldr	r0, [pc, #32]	; (8018b58 <USBH_ioctl+0x68>)
 8018b36:	f7f0 fcf9 	bl	800952c <USBH_MSC_GetLUNInfo>
 8018b3a:	b950      	cbnz	r0, 8018b52 <USBH_ioctl+0x62>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8018b3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018b40:	0a5b      	lsrs	r3, r3, #9
 8018b42:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 8018b44:	e7df      	b.n	8018b06 <USBH_ioctl+0x16>
    res = RES_PARERR;
 8018b46:	2004      	movs	r0, #4
 8018b48:	e7dd      	b.n	8018b06 <USBH_ioctl+0x16>
      res = RES_ERROR;
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	e7db      	b.n	8018b06 <USBH_ioctl+0x16>
      res = RES_ERROR;
 8018b4e:	2001      	movs	r0, #1
 8018b50:	e7d9      	b.n	8018b06 <USBH_ioctl+0x16>
      res = RES_ERROR;
 8018b52:	2001      	movs	r0, #1
 8018b54:	e7d7      	b.n	8018b06 <USBH_ioctl+0x16>
 8018b56:	bf00      	nop
 8018b58:	200175f8 	.word	0x200175f8

08018b5c <USBH_write>:
{
 8018b5c:	b510      	push	{r4, lr}
 8018b5e:	b090      	sub	sp, #64	; 0x40
 8018b60:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8018b62:	9300      	str	r3, [sp, #0]
 8018b64:	460b      	mov	r3, r1
 8018b66:	4601      	mov	r1, r0
 8018b68:	4810      	ldr	r0, [pc, #64]	; (8018bac <USBH_write+0x50>)
 8018b6a:	f7f0 fd4f 	bl	800960c <USBH_MSC_Write>
 8018b6e:	b908      	cbnz	r0, 8018b74 <USBH_write+0x18>
}
 8018b70:	b010      	add	sp, #64	; 0x40
 8018b72:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8018b74:	aa03      	add	r2, sp, #12
 8018b76:	4621      	mov	r1, r4
 8018b78:	480c      	ldr	r0, [pc, #48]	; (8018bac <USBH_write+0x50>)
 8018b7a:	f7f0 fcd7 	bl	800952c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8018b7e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018b82:	2b27      	cmp	r3, #39	; 0x27
 8018b84:	d00c      	beq.n	8018ba0 <USBH_write+0x44>
 8018b86:	d905      	bls.n	8018b94 <USBH_write+0x38>
 8018b88:	2b28      	cmp	r3, #40	; 0x28
 8018b8a:	d00b      	beq.n	8018ba4 <USBH_write+0x48>
 8018b8c:	2b3a      	cmp	r3, #58	; 0x3a
 8018b8e:	d10b      	bne.n	8018ba8 <USBH_write+0x4c>
      res = RES_NOTRDY;
 8018b90:	2003      	movs	r0, #3
 8018b92:	e7ed      	b.n	8018b70 <USBH_write+0x14>
    switch (info.sense.asc)
 8018b94:	2b04      	cmp	r3, #4
 8018b96:	d001      	beq.n	8018b9c <USBH_write+0x40>
      res = RES_ERROR;
 8018b98:	2001      	movs	r0, #1
 8018b9a:	e7e9      	b.n	8018b70 <USBH_write+0x14>
      res = RES_NOTRDY;
 8018b9c:	2003      	movs	r0, #3
 8018b9e:	e7e7      	b.n	8018b70 <USBH_write+0x14>
    switch (info.sense.asc)
 8018ba0:	2002      	movs	r0, #2
 8018ba2:	e7e5      	b.n	8018b70 <USBH_write+0x14>
      res = RES_NOTRDY;
 8018ba4:	2003      	movs	r0, #3
 8018ba6:	e7e3      	b.n	8018b70 <USBH_write+0x14>
      res = RES_ERROR;
 8018ba8:	2001      	movs	r0, #1
 8018baa:	e7e1      	b.n	8018b70 <USBH_write+0x14>
 8018bac:	200175f8 	.word	0x200175f8

08018bb0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8018bb0:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8018bb2:	4602      	mov	r2, r0
 8018bb4:	b100      	cbz	r0, 8018bb8 <MX_DriverVbusFS+0x8>
    data = GPIO_PIN_RESET;
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8018bb6:	2201      	movs	r2, #1
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8018bb8:	2120      	movs	r1, #32
 8018bba:	4802      	ldr	r0, [pc, #8]	; (8018bc4 <MX_DriverVbusFS+0x14>)
 8018bbc:	f7e9 fb3c 	bl	8002238 <HAL_GPIO_WritePin>
}
 8018bc0:	bd08      	pop	{r3, pc}
 8018bc2:	bf00      	nop
 8018bc4:	40020c00 	.word	0x40020c00

08018bc8 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8018bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bca:	b087      	sub	sp, #28
  HAL_StatusTypeDef status = HAL_OK;
   /* USER CODE BEGIN PREPARE_I2C_ADDR_VBUS_HS */
  uint8_t Component_Addr = 0 << 1;
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_HS */
  /* USER CODE BEGIN PREPARE_DATA_VBUS_HS */
  uint8_t data = state;
 8018bcc:	f88d 0017 	strb.w	r0, [sp, #23]
  /* USER CODE END PREPARE_DATA_VBUS_HS */
  uint8_t data_tmp = 0;
 8018bd0:	2400      	movs	r4, #0
 8018bd2:	f88d 4016 	strb.w	r4, [sp, #22]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 8018bd6:	4e11      	ldr	r6, [pc, #68]	; (8018c1c <MX_DriverVbusHS+0x54>)
 8018bd8:	2764      	movs	r7, #100	; 0x64
 8018bda:	9702      	str	r7, [sp, #8]
 8018bdc:	2501      	movs	r5, #1
 8018bde:	9501      	str	r5, [sp, #4]
 8018be0:	f10d 0316 	add.w	r3, sp, #22
 8018be4:	9300      	str	r3, [sp, #0]
 8018be6:	462b      	mov	r3, r5
 8018be8:	4622      	mov	r2, r4
 8018bea:	4621      	mov	r1, r4
 8018bec:	4630      	mov	r0, r6
 8018bee:	f7ea fc75 	bl	80034dc <HAL_I2C_Mem_Read>
  data |= data_tmp;
 8018bf2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8018bf6:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8018bfa:	4313      	orrs	r3, r2
 8018bfc:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 8018c00:	9702      	str	r7, [sp, #8]
 8018c02:	9501      	str	r5, [sp, #4]
 8018c04:	f10d 0317 	add.w	r3, sp, #23
 8018c08:	9300      	str	r3, [sp, #0]
 8018c0a:	462b      	mov	r3, r5
 8018c0c:	4622      	mov	r2, r4
 8018c0e:	4621      	mov	r1, r4
 8018c10:	4630      	mov	r0, r6
 8018c12:	f7ea fb81 	bl	8003318 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_HS */
}
 8018c16:	b007      	add	sp, #28
 8018c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c1a:	bf00      	nop
 8018c1c:	200006b4 	.word	0x200006b4

08018c20 <ReadWavHeader>:

extern uint8_t volume;
uint32_t wavtagsize = 0;
WavHeaderTypeDef wavfile;

uint8_t ReadWavHeader(WavHeaderTypeDef *waveformat) {
 8018c20:	b500      	push	{lr}
 8018c22:	b083      	sub	sp, #12
 8018c24:	4601      	mov	r1, r0
	uint32_t bytesread;
	FRESULT res;
	/* Fill the buffer to Send */
	res = f_read(&MyFile, waveformat, sizeof(wavfile), (void*)&bytesread);
 8018c26:	ab01      	add	r3, sp, #4
 8018c28:	222c      	movs	r2, #44	; 0x2c
 8018c2a:	4803      	ldr	r0, [pc, #12]	; (8018c38 <ReadWavHeader+0x18>)
 8018c2c:	f7f3 f82b 	bl	800bc86 <f_read>
	return res;
}
 8018c30:	b003      	add	sp, #12
 8018c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c36:	bf00      	nop
 8018c38:	200017b8 	.word	0x200017b8

08018c3c <TrackTime>:
			}
		}
	}
}

void TrackTime() {
 8018c3c:	b570      	push	{r4, r5, r6, lr}
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 8018c3e:	4d20      	ldr	r5, [pc, #128]	; (8018cc0 <TrackTime+0x84>)
 8018c40:	f8d5 1250 	ldr.w	r1, [r5, #592]	; 0x250
 8018c44:	4b1f      	ldr	r3, [pc, #124]	; (8018cc4 <TrackTime+0x88>)
 8018c46:	6818      	ldr	r0, [r3, #0]
 8018c48:	1a09      	subs	r1, r1, r0
 8018c4a:	4b1f      	ldr	r3, [pc, #124]	; (8018cc8 <TrackTime+0x8c>)
 8018c4c:	fba3 4201 	umull	r4, r2, r3, r1
 8018c50:	0b52      	lsrs	r2, r2, #13
 8018c52:	f242 3e28 	movw	lr, #9000	; 0x2328
 8018c56:	fb0e 1212 	mls	r2, lr, r2, r1
 8018c5a:	491c      	ldr	r1, [pc, #112]	; (8018ccc <TrackTime+0x90>)
 8018c5c:	fba1 c402 	umull	ip, r4, r1, r2
 8018c60:	0924      	lsrs	r4, r4, #4
 8018c62:	f04f 0c96 	mov.w	ip, #150	; 0x96
 8018c66:	fb0c 2414 	mls	r4, ip, r4, r2
 8018c6a:	4a19      	ldr	r2, [pc, #100]	; (8018cd0 <TrackTime+0x94>)
 8018c6c:	8014      	strh	r4, [r2, #0]
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 8018c6e:	f8d5 4250 	ldr.w	r4, [r5, #592]	; 0x250
 8018c72:	1a24      	subs	r4, r4, r0
 8018c74:	fba3 6204 	umull	r6, r2, r3, r4
 8018c78:	0b52      	lsrs	r2, r2, #13
 8018c7a:	fb0e 4212 	mls	r2, lr, r2, r4
 8018c7e:	fba1 4202 	umull	r4, r2, r1, r2
 8018c82:	0912      	lsrs	r2, r2, #4
 8018c84:	4c13      	ldr	r4, [pc, #76]	; (8018cd4 <TrackTime+0x98>)
 8018c86:	7022      	strb	r2, [r4, #0]
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 8018c88:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 8018c8c:	1a12      	subs	r2, r2, r0
 8018c8e:	fba3 4202 	umull	r4, r2, r3, r2
 8018c92:	0b52      	lsrs	r2, r2, #13
 8018c94:	4c10      	ldr	r4, [pc, #64]	; (8018cd8 <TrackTime+0x9c>)
 8018c96:	7022      	strb	r2, [r4, #0]
	fr = ((file_pos_wide) % 9000) % 150;
 8018c98:	fba3 2300 	umull	r2, r3, r3, r0
 8018c9c:	0b5a      	lsrs	r2, r3, #13
 8018c9e:	fb0e 0212 	mls	r2, lr, r2, r0
 8018ca2:	fba1 0102 	umull	r0, r1, r1, r2
 8018ca6:	0908      	lsrs	r0, r1, #4
 8018ca8:	fb0c 2010 	mls	r0, ip, r0, r2
 8018cac:	4a0b      	ldr	r2, [pc, #44]	; (8018cdc <TrackTime+0xa0>)
 8018cae:	8010      	strh	r0, [r2, #0]
	sec = ((file_pos_wide) % 9000) / 150;
 8018cb0:	0909      	lsrs	r1, r1, #4
 8018cb2:	4a0b      	ldr	r2, [pc, #44]	; (8018ce0 <TrackTime+0xa4>)
 8018cb4:	7011      	strb	r1, [r2, #0]
	min = (file_pos_wide) / 9000;
 8018cb6:	0b5b      	lsrs	r3, r3, #13
 8018cb8:	4a0a      	ldr	r2, [pc, #40]	; (8018ce4 <TrackTime+0xa8>)
 8018cba:	7013      	strb	r3, [r2, #0]
}
 8018cbc:	bd70      	pop	{r4, r5, r6, pc}
 8018cbe:	bf00      	nop
 8018cc0:	20016620 	.word	0x20016620
 8018cc4:	2000e3d4 	.word	0x2000e3d4
 8018cc8:	e90452d5 	.word	0xe90452d5
 8018ccc:	1b4e81b5 	.word	0x1b4e81b5
 8018cd0:	2000eb9c 	.word	0x2000eb9c
 8018cd4:	2000eb9f 	.word	0x2000eb9f
 8018cd8:	2000eb9e 	.word	0x2000eb9e
 8018cdc:	2000e600 	.word	0x2000e600
 8018ce0:	2000eba0 	.word	0x2000eba0
 8018ce4:	2000e798 	.word	0x2000e798

08018ce8 <GoToPosition>:
	tim7_flag = 0;
	if(display.timemode == 0) display.trackbarmode = 0;
	else display.trackbarmode = 1;
}

void GoToPosition(uint32_t position) {
 8018ce8:	b538      	push	{r3, r4, r5, lr}
 8018cea:	ed2d 8b02 	vpush	{d8}
 8018cee:	4604      	mov	r4, r0
	BSP_AUDIO_OUT_Pause();
 8018cf0:	f7fd fdb4 	bl	801685c <BSP_AUDIO_OUT_Pause>
	file_pos_wide = position;
 8018cf4:	4b41      	ldr	r3, [pc, #260]	; (8018dfc <GoToPosition+0x114>)
 8018cf6:	601c      	str	r4, [r3, #0]
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 8018cf8:	ee07 4a90 	vmov	s15, r4
 8018cfc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8018d00:	4b3f      	ldr	r3, [pc, #252]	; (8018e00 <GoToPosition+0x118>)
 8018d02:	ed93 7a94 	vldr	s14, [r3, #592]	; 0x250
 8018d06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8018d0a:	eec8 6a07 	vdiv.f32	s13, s16, s14
			rekordbox.lowp_spectrum_size;
 8018d0e:	edd3 7a93 	vldr	s15, [r3, #588]	; 0x24c
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 8018d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018d1e:	4b39      	ldr	r3, [pc, #228]	; (8018e04 <GoToPosition+0x11c>)
 8018d20:	edc3 7a00 	vstr	s15, [r3]
	if(BufferCtl.filetype == 0)	{
 8018d24:	4b38      	ldr	r3, [pc, #224]	; (8018e08 <GoToPosition+0x120>)
 8018d26:	7a1b      	ldrb	r3, [r3, #8]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d138      	bne.n	8018d9e <GoToPosition+0xb6>
		uint16_t i = 0;
 8018d2c:	2400      	movs	r4, #0
		do {
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8018d2e:	4d37      	ldr	r5, [pc, #220]	; (8018e0c <GoToPosition+0x124>)
 8018d30:	6928      	ldr	r0, [r5, #16]
 8018d32:	6969      	ldr	r1, [r5, #20]
 8018d34:	4b36      	ldr	r3, [pc, #216]	; (8018e10 <GoToPosition+0x128>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	1ac0      	subs	r0, r0, r3
 8018d3a:	f161 0100 	sbc.w	r1, r1, #0
 8018d3e:	4b35      	ldr	r3, [pc, #212]	; (8018e14 <GoToPosition+0x12c>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	1ac0      	subs	r0, r0, r3
 8018d44:	f161 0100 	sbc.w	r1, r1, #0
 8018d48:	f7e8 f850 	bl	8000dec <__aeabi_ul2f>
 8018d4c:	ee07 0a10 	vmov	s14, r0
 8018d50:	ee28 7a07 	vmul.f32	s14, s16, s14
				/rekordbox.spectrum_size + i));
 8018d54:	4b2a      	ldr	r3, [pc, #168]	; (8018e00 <GoToPosition+0x118>)
 8018d56:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8018d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018d62:	ee07 4a90 	vmov	s15, r4
 8018d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8018d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018d6e:	ee17 0a90 	vmov	r0, s15
 8018d72:	f7e8 f899 	bl	8000ea8 <__aeabi_f2ulz>
 8018d76:	4602      	mov	r2, r0
 8018d78:	460b      	mov	r3, r1
 8018d7a:	4628      	mov	r0, r5
 8018d7c:	f7f3 f854 	bl	800be28 <f_lseek>
			i++;
 8018d80:	3401      	adds	r4, #1
 8018d82:	b2a4      	uxth	r4, r4
		}
		while(((UINT)BufferCtl.buff & 1) != (f_tell(&MyFile) & 1));
 8018d84:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018d86:	4a24      	ldr	r2, [pc, #144]	; (8018e18 <GoToPosition+0x130>)
 8018d88:	4053      	eors	r3, r2
 8018d8a:	f013 0f01 	tst.w	r3, #1
 8018d8e:	d1ce      	bne.n	8018d2e <GoToPosition+0x46>
	}
	else {
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
						/rekordbox.spectrum_size));
	}
	if(BufferCtl.filetype == 1) {
 8018d90:	4b1d      	ldr	r3, [pc, #116]	; (8018e08 <GoToPosition+0x120>)
 8018d92:	7a1b      	ldrb	r3, [r3, #8]
 8018d94:	2b01      	cmp	r3, #1
 8018d96:	d026      	beq.n	8018de6 <GoToPosition+0xfe>
		unInDataLeft = 0;
		unDmaBufferSpace = 0;
		unFramesDecoded = 0;
		unDmaBufMode = 0;
	}
}
 8018d98:	ecbd 8b02 	vpop	{d8}
 8018d9c:	bd38      	pop	{r3, r4, r5, pc}
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8018d9e:	4c1b      	ldr	r4, [pc, #108]	; (8018e0c <GoToPosition+0x124>)
 8018da0:	6923      	ldr	r3, [r4, #16]
 8018da2:	6961      	ldr	r1, [r4, #20]
 8018da4:	4a1a      	ldr	r2, [pc, #104]	; (8018e10 <GoToPosition+0x128>)
 8018da6:	6810      	ldr	r0, [r2, #0]
 8018da8:	1a1b      	subs	r3, r3, r0
 8018daa:	f161 0100 	sbc.w	r1, r1, #0
 8018dae:	4a19      	ldr	r2, [pc, #100]	; (8018e14 <GoToPosition+0x12c>)
 8018db0:	6810      	ldr	r0, [r2, #0]
 8018db2:	1a18      	subs	r0, r3, r0
 8018db4:	f161 0100 	sbc.w	r1, r1, #0
 8018db8:	f7e8 f818 	bl	8000dec <__aeabi_ul2f>
 8018dbc:	ee07 0a90 	vmov	s15, r0
 8018dc0:	ee28 8a27 	vmul.f32	s16, s16, s15
						/rekordbox.spectrum_size));
 8018dc4:	4b0e      	ldr	r3, [pc, #56]	; (8018e00 <GoToPosition+0x118>)
 8018dc6:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8018dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8018dce:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8018dd2:	ee17 0a90 	vmov	r0, s15
 8018dd6:	f7e8 f867 	bl	8000ea8 <__aeabi_f2ulz>
 8018dda:	4602      	mov	r2, r0
 8018ddc:	460b      	mov	r3, r1
 8018dde:	4620      	mov	r0, r4
 8018de0:	f7f3 f822 	bl	800be28 <f_lseek>
 8018de4:	e7d4      	b.n	8018d90 <GoToPosition+0xa8>
		unInDataLeft = 0;
 8018de6:	2300      	movs	r3, #0
 8018de8:	4a0c      	ldr	r2, [pc, #48]	; (8018e1c <GoToPosition+0x134>)
 8018dea:	6013      	str	r3, [r2, #0]
		unDmaBufferSpace = 0;
 8018dec:	4a0c      	ldr	r2, [pc, #48]	; (8018e20 <GoToPosition+0x138>)
 8018dee:	6013      	str	r3, [r2, #0]
		unFramesDecoded = 0;
 8018df0:	4a0c      	ldr	r2, [pc, #48]	; (8018e24 <GoToPosition+0x13c>)
 8018df2:	6013      	str	r3, [r2, #0]
		unDmaBufMode = 0;
 8018df4:	4a0c      	ldr	r2, [pc, #48]	; (8018e28 <GoToPosition+0x140>)
 8018df6:	6013      	str	r3, [r2, #0]
}
 8018df8:	e7ce      	b.n	8018d98 <GoToPosition+0xb0>
 8018dfa:	bf00      	nop
 8018dfc:	2000e3d4 	.word	0x2000e3d4
 8018e00:	20016620 	.word	0x20016620
 8018e04:	2000e3d0 	.word	0x2000e3d0
 8018e08:	200017ac 	.word	0x200017ac
 8018e0c:	200017b8 	.word	0x200017b8
 8018e10:	200145f0 	.word	0x200145f0
 8018e14:	20018344 	.word	0x20018344
 8018e18:	200007ac 	.word	0x200007ac
 8018e1c:	2001461c 	.word	0x2001461c
 8018e20:	20014614 	.word	0x20014614
 8018e24:	20014618 	.word	0x20014618
 8018e28:	2000ebe4 	.word	0x2000ebe4

08018e2c <GetTrackTime>:
void GetTrackTime() {
 8018e2c:	b538      	push	{r3, r4, r5, lr}
 8018e2e:	ed2d 8b02 	vpush	{d8}
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 8018e32:	4d2a      	ldr	r5, [pc, #168]	; (8018edc <GetTrackTime+0xb0>)
 8018e34:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8018e36:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8018e38:	4b29      	ldr	r3, [pc, #164]	; (8018ee0 <GetTrackTime+0xb4>)
 8018e3a:	681c      	ldr	r4, [r3, #0]
 8018e3c:	1b00      	subs	r0, r0, r4
 8018e3e:	f161 0100 	sbc.w	r1, r1, #0
 8018e42:	f7e7 ffd3 	bl	8000dec <__aeabi_ul2f>
 8018e46:	ee08 0a10 	vmov	s16, r0
			(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8018e4a:	6928      	ldr	r0, [r5, #16]
 8018e4c:	6969      	ldr	r1, [r5, #20]
 8018e4e:	1b00      	subs	r0, r0, r4
 8018e50:	f161 0100 	sbc.w	r1, r1, #0
 8018e54:	4b23      	ldr	r3, [pc, #140]	; (8018ee4 <GetTrackTime+0xb8>)
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	1ac0      	subs	r0, r0, r3
 8018e5a:	f161 0100 	sbc.w	r1, r1, #0
 8018e5e:	f7e7 ffc5 	bl	8000dec <__aeabi_ul2f>
 8018e62:	ee07 0a90 	vmov	s15, r0
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 8018e66:	ee88 7a27 	vdiv.f32	s14, s16, s15
			*rekordbox.spectrum_size;
 8018e6a:	4c1f      	ldr	r4, [pc, #124]	; (8018ee8 <GetTrackTime+0xbc>)
 8018e6c:	edd4 7a94 	vldr	s15, [r4, #592]	; 0x250
 8018e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
	file_pos_wide = (track_lenght + 0.5);
 8018e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018e78:	ee17 0a90 	vmov	r0, s15
 8018e7c:	f7e7 fb8c 	bl	8000598 <__aeabi_f2d>
 8018e80:	2200      	movs	r2, #0
 8018e82:	4b1a      	ldr	r3, [pc, #104]	; (8018eec <GetTrackTime+0xc0>)
 8018e84:	f7e7 fa2a 	bl	80002dc <__adddf3>
 8018e88:	f7e7 fe78 	bl	8000b7c <__aeabi_d2uiz>
 8018e8c:	4b18      	ldr	r3, [pc, #96]	; (8018ef0 <GetTrackTime+0xc4>)
 8018e8e:	6018      	str	r0, [r3, #0]
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 8018e90:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
 8018e94:	fb03 f000 	mul.w	r0, r3, r0
			rekordbox.spectrum_size);
 8018e98:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 8018e9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8018ea0:	b280      	uxth	r0, r0
 8018ea2:	4b14      	ldr	r3, [pc, #80]	; (8018ef4 <GetTrackTime+0xc8>)
 8018ea4:	6018      	str	r0, [r3, #0]
	TrackTime();
 8018ea6:	f7ff fec9 	bl	8018c3c <TrackTime>
	if(display.loop == 1) {
 8018eaa:	4b13      	ldr	r3, [pc, #76]	; (8018ef8 <GetTrackTime+0xcc>)
 8018eac:	7c1b      	ldrb	r3, [r3, #16]
 8018eae:	2b01      	cmp	r3, #1
 8018eb0:	d002      	beq.n	8018eb8 <GetTrackTime+0x8c>
}
 8018eb2:	ecbd 8b02 	vpop	{d8}
 8018eb6:	bd38      	pop	{r3, r4, r5, pc}
		if(trak.state == PLAYING) {
 8018eb8:	4b10      	ldr	r3, [pc, #64]	; (8018efc <GetTrackTime+0xd0>)
 8018eba:	781b      	ldrb	r3, [r3, #0]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d1f8      	bne.n	8018eb2 <GetTrackTime+0x86>
			if(file_pos_wide >= display.loopend) {
 8018ec0:	4b0d      	ldr	r3, [pc, #52]	; (8018ef8 <GetTrackTime+0xcc>)
 8018ec2:	68da      	ldr	r2, [r3, #12]
 8018ec4:	4b0a      	ldr	r3, [pc, #40]	; (8018ef0 <GetTrackTime+0xc4>)
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	429a      	cmp	r2, r3
 8018eca:	d8f2      	bhi.n	8018eb2 <GetTrackTime+0x86>
				GoToPosition(display.loopstart);
 8018ecc:	4b0a      	ldr	r3, [pc, #40]	; (8018ef8 <GetTrackTime+0xcc>)
 8018ece:	6898      	ldr	r0, [r3, #8]
 8018ed0:	f7ff ff0a 	bl	8018ce8 <GoToPosition>
				BSP_AUDIO_OUT_Resume();
 8018ed4:	f7fd fcca 	bl	801686c <BSP_AUDIO_OUT_Resume>
}
 8018ed8:	e7eb      	b.n	8018eb2 <GetTrackTime+0x86>
 8018eda:	bf00      	nop
 8018edc:	200017b8 	.word	0x200017b8
 8018ee0:	200145f0 	.word	0x200145f0
 8018ee4:	20018344 	.word	0x20018344
 8018ee8:	20016620 	.word	0x20016620
 8018eec:	3fe00000 	.word	0x3fe00000
 8018ef0:	2000e3d4 	.word	0x2000e3d4
 8018ef4:	2000e3d0 	.word	0x2000e3d0
 8018ef8:	200005f0 	.word	0x200005f0
 8018efc:	2000ebac 	.word	0x2000ebac

08018f00 <PlayWavFile>:
void PlayWavFile() {
 8018f00:	b530      	push	{r4, r5, lr}
 8018f02:	b083      	sub	sp, #12
	wavtagsize = 0;
 8018f04:	4d8a      	ldr	r5, [pc, #552]	; (8019130 <PlayWavFile+0x230>)
 8018f06:	2400      	movs	r4, #0
 8018f08:	602c      	str	r4, [r5, #0]
	BufferCtl.filetype = 0;
 8018f0a:	488a      	ldr	r0, [pc, #552]	; (8019134 <PlayWavFile+0x234>)
 8018f0c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8018f10:	721c      	strb	r4, [r3, #8]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 8018f12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018f16:	4621      	mov	r1, r4
 8018f18:	f000 ff70 	bl	8019dfc <memset>
	bOutOfData = 0;
 8018f1c:	4b86      	ldr	r3, [pc, #536]	; (8019138 <PlayWavFile+0x238>)
 8018f1e:	601c      	str	r4, [r3, #0]
	uint16_t bytesread = 0;
 8018f20:	f8ad 4006 	strh.w	r4, [sp, #6]
	ReadWavHeader(&wavfile);
 8018f24:	4c85      	ldr	r4, [pc, #532]	; (801913c <PlayWavFile+0x23c>)
 8018f26:	4620      	mov	r0, r4
 8018f28:	f7ff fe7a 	bl	8018c20 <ReadWavHeader>
	wavtagsize = wavfile.FileSize - wavfile.SubChunk2Size;
 8018f2c:	6863      	ldr	r3, [r4, #4]
 8018f2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018f30:	1a9b      	subs	r3, r3, r2
 8018f32:	602b      	str	r3, [r5, #0]
	if(wavfile.SampleRate > 0) trak.bitrate = wavfile.SampleRate;
 8018f34:	69a3      	ldr	r3, [r4, #24]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d03f      	beq.n	8018fba <PlayWavFile+0xba>
 8018f3a:	4a81      	ldr	r2, [pc, #516]	; (8019140 <PlayWavFile+0x240>)
 8018f3c:	8113      	strh	r3, [r2, #8]
	BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)*(1 + trak.percent), NULL);
 8018f3e:	4a80      	ldr	r2, [pc, #512]	; (8019140 <PlayWavFile+0x240>)
 8018f40:	8913      	ldrh	r3, [r2, #8]
 8018f42:	edd2 7a01 	vldr	s15, [r2, #4]
 8018f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018f4e:	085b      	lsrs	r3, r3, #1
 8018f50:	ee07 3a90 	vmov	s15, r3
 8018f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018f5c:	2200      	movs	r2, #0
 8018f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018f62:	ee17 1a90 	vmov	r1, s15
 8018f66:	4877      	ldr	r0, [pc, #476]	; (8019144 <PlayWavFile+0x244>)
 8018f68:	f7fd fd46 	bl	80169f8 <BSP_AUDIO_OUT_ClockConfig>
	while(f_read(&MyFile, &BufferCtl.buff[0], 2048, (void *)&bytesread) != FR_OK);
 8018f6c:	f10d 0306 	add.w	r3, sp, #6
 8018f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018f74:	496f      	ldr	r1, [pc, #444]	; (8019134 <PlayWavFile+0x234>)
 8018f76:	4874      	ldr	r0, [pc, #464]	; (8019148 <PlayWavFile+0x248>)
 8018f78:	f7f2 fe85 	bl	800bc86 <f_read>
 8018f7c:	2800      	cmp	r0, #0
 8018f7e:	d1f5      	bne.n	8018f6c <PlayWavFile+0x6c>
	if(bytesread != 0) {
 8018f80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018f84:	b9f3      	cbnz	r3, 8018fc4 <PlayWavFile+0xc4>
	if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 8018f86:	4b71      	ldr	r3, [pc, #452]	; (801914c <PlayWavFile+0x24c>)
 8018f88:	f893 3b90 	ldrb.w	r3, [r3, #2960]	; 0xb90
 8018f8c:	b2db      	uxtb	r3, r3
 8018f8e:	2b02      	cmp	r3, #2
 8018f90:	d166      	bne.n	8019060 <PlayWavFile+0x160>
 8018f92:	4b6b      	ldr	r3, [pc, #428]	; (8019140 <PlayWavFile+0x240>)
 8018f94:	781b      	ldrb	r3, [r3, #0]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d162      	bne.n	8019060 <PlayWavFile+0x160>
		BSP_AUDIO_OUT_Pause();
 8018f9a:	f7fd fc5f 	bl	801685c <BSP_AUDIO_OUT_Pause>
		trak.state = STOPPED;
 8018f9e:	4b68      	ldr	r3, [pc, #416]	; (8019140 <PlayWavFile+0x240>)
 8018fa0:	2201      	movs	r2, #1
 8018fa2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim8);
 8018fa4:	486a      	ldr	r0, [pc, #424]	; (8019150 <PlayWavFile+0x250>)
 8018fa6:	f7ee f857 	bl	8007058 <HAL_TIM_Base_Start_IT>
		GoToPosition(rekordbox.cue_start_position[0]);
 8018faa:	4b68      	ldr	r3, [pc, #416]	; (801914c <PlayWavFile+0x24c>)
 8018fac:	f8d3 080c 	ldr.w	r0, [r3, #2060]	; 0x80c
 8018fb0:	f7ff fe9a 	bl	8018ce8 <GoToPosition>
		TrackTime();
 8018fb4:	f7ff fe42 	bl	8018c3c <TrackTime>
 8018fb8:	e052      	b.n	8019060 <PlayWavFile+0x160>
	else trak.bitrate = AUDIO_FREQUENCY_44K;
 8018fba:	4b61      	ldr	r3, [pc, #388]	; (8019140 <PlayWavFile+0x240>)
 8018fbc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8018fc0:	811a      	strh	r2, [r3, #8]
 8018fc2:	e7bc      	b.n	8018f3e <PlayWavFile+0x3e>
		BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8018fc4:	4c5b      	ldr	r4, [pc, #364]	; (8019134 <PlayWavFile+0x234>)
 8018fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018fca:	4620      	mov	r0, r4
 8018fcc:	f7fd fc26 	bl	801681c <BSP_AUDIO_OUT_Play>
		BufferCtl.fptr = bytesread;
 8018fd0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8018fd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018fd8:	6063      	str	r3, [r4, #4]
		BSP_AUDIO_OUT_SetVolume(volume);
 8018fda:	4b5e      	ldr	r3, [pc, #376]	; (8019154 <PlayWavFile+0x254>)
 8018fdc:	7818      	ldrb	r0, [r3, #0]
 8018fde:	f7fd fc67 	bl	80168b0 <BSP_AUDIO_OUT_SetVolume>
 8018fe2:	e7d0      	b.n	8018f86 <PlayWavFile+0x86>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 8018fe4:	485c      	ldr	r0, [pc, #368]	; (8019158 <PlayWavFile+0x258>)
 8018fe6:	6802      	ldr	r2, [r0, #0]
 8018fe8:	f241 3387 	movw	r3, #4999	; 0x1387
 8018fec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8018fee:	60c3      	str	r3, [r0, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 8018ff0:	f7ee f832 	bl	8007058 <HAL_TIM_Base_Start_IT>
					tim7_flag =  1;
 8018ff4:	4b59      	ldr	r3, [pc, #356]	; (801915c <PlayWavFile+0x25c>)
 8018ff6:	2201      	movs	r2, #1
 8018ff8:	701a      	strb	r2, [r3, #0]
 8018ffa:	e04c      	b.n	8019096 <PlayWavFile+0x196>
			else if((rmin == 0) && (rsec <= 10)) {
 8018ffc:	bb63      	cbnz	r3, 8019058 <PlayWavFile+0x158>
 8018ffe:	4b58      	ldr	r3, [pc, #352]	; (8019160 <PlayWavFile+0x260>)
 8019000:	f993 3000 	ldrsb.w	r3, [r3]
 8019004:	2b0a      	cmp	r3, #10
 8019006:	dc27      	bgt.n	8019058 <PlayWavFile+0x158>
				if(tim7_flag == 0) {
 8019008:	4b54      	ldr	r3, [pc, #336]	; (801915c <PlayWavFile+0x25c>)
 801900a:	781b      	ldrb	r3, [r3, #0]
 801900c:	b1c3      	cbz	r3, 8019040 <PlayWavFile+0x140>
				if(tim7_flag == 1) {
 801900e:	4b53      	ldr	r3, [pc, #332]	; (801915c <PlayWavFile+0x25c>)
 8019010:	781b      	ldrb	r3, [r3, #0]
 8019012:	2b01      	cmp	r3, #1
 8019014:	d124      	bne.n	8019060 <PlayWavFile+0x160>
					HAL_TIM_Base_Stop_IT(&htim7);
 8019016:	4c50      	ldr	r4, [pc, #320]	; (8019158 <PlayWavFile+0x258>)
 8019018:	4620      	mov	r0, r4
 801901a:	f7ee f875 	bl	8007108 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801901e:	6823      	ldr	r3, [r4, #0]
 8019020:	f06f 0201 	mvn.w	r2, #1
 8019024:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 8019026:	2200      	movs	r2, #0
 8019028:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 801902a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801902e:	62da      	str	r2, [r3, #44]	; 0x2c
 8019030:	60e2      	str	r2, [r4, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 8019032:	4620      	mov	r0, r4
 8019034:	f7ee f810 	bl	8007058 <HAL_TIM_Base_Start_IT>
					tim7_flag = 2;
 8019038:	4b48      	ldr	r3, [pc, #288]	; (801915c <PlayWavFile+0x25c>)
 801903a:	2202      	movs	r2, #2
 801903c:	701a      	strb	r2, [r3, #0]
 801903e:	e00f      	b.n	8019060 <PlayWavFile+0x160>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 8019040:	4845      	ldr	r0, [pc, #276]	; (8019158 <PlayWavFile+0x258>)
 8019042:	6802      	ldr	r2, [r0, #0]
 8019044:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8019048:	62d3      	str	r3, [r2, #44]	; 0x2c
 801904a:	60c3      	str	r3, [r0, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 801904c:	f7ee f804 	bl	8007058 <HAL_TIM_Base_Start_IT>
					tim7_flag =  2;
 8019050:	4b42      	ldr	r3, [pc, #264]	; (801915c <PlayWavFile+0x25c>)
 8019052:	2202      	movs	r2, #2
 8019054:	701a      	strb	r2, [r3, #0]
 8019056:	e7da      	b.n	801900e <PlayWavFile+0x10e>
				if(tim7_flag > 0) {
 8019058:	4b40      	ldr	r3, [pc, #256]	; (801915c <PlayWavFile+0x25c>)
 801905a:	781b      	ldrb	r3, [r3, #0]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d133      	bne.n	80190c8 <PlayWavFile+0x1c8>
	while((!bOutOfData) && (file_pos_wide < rekordbox.spectrum_size)) {
 8019060:	4b35      	ldr	r3, [pc, #212]	; (8019138 <PlayWavFile+0x238>)
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d146      	bne.n	80190f6 <PlayWavFile+0x1f6>
 8019068:	4b38      	ldr	r3, [pc, #224]	; (801914c <PlayWavFile+0x24c>)
 801906a:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 801906e:	4b3d      	ldr	r3, [pc, #244]	; (8019164 <PlayWavFile+0x264>)
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	429a      	cmp	r2, r3
 8019074:	d93f      	bls.n	80190f6 <PlayWavFile+0x1f6>
			if((rmin == 0) && (rsec < 30) && (rsec > 10)) {
 8019076:	4b3c      	ldr	r3, [pc, #240]	; (8019168 <PlayWavFile+0x268>)
 8019078:	f993 3000 	ldrsb.w	r3, [r3]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d1bd      	bne.n	8018ffc <PlayWavFile+0xfc>
 8019080:	4a37      	ldr	r2, [pc, #220]	; (8019160 <PlayWavFile+0x260>)
 8019082:	f992 2000 	ldrsb.w	r2, [r2]
 8019086:	2a1d      	cmp	r2, #29
 8019088:	dcb8      	bgt.n	8018ffc <PlayWavFile+0xfc>
 801908a:	2a0a      	cmp	r2, #10
 801908c:	ddb6      	ble.n	8018ffc <PlayWavFile+0xfc>
				if(tim7_flag == 0) {
 801908e:	4b33      	ldr	r3, [pc, #204]	; (801915c <PlayWavFile+0x25c>)
 8019090:	781b      	ldrb	r3, [r3, #0]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d0a6      	beq.n	8018fe4 <PlayWavFile+0xe4>
				if(tim7_flag == 2) {
 8019096:	4b31      	ldr	r3, [pc, #196]	; (801915c <PlayWavFile+0x25c>)
 8019098:	781b      	ldrb	r3, [r3, #0]
 801909a:	2b02      	cmp	r3, #2
 801909c:	d1e0      	bne.n	8019060 <PlayWavFile+0x160>
					HAL_TIM_Base_Stop_IT(&htim7);
 801909e:	4c2e      	ldr	r4, [pc, #184]	; (8019158 <PlayWavFile+0x258>)
 80190a0:	4620      	mov	r0, r4
 80190a2:	f7ee f831 	bl	8007108 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80190a6:	6823      	ldr	r3, [r4, #0]
 80190a8:	f06f 0201 	mvn.w	r2, #1
 80190ac:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 80190ae:	2200      	movs	r2, #0
 80190b0:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 80190b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80190b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80190b8:	60e2      	str	r2, [r4, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 80190ba:	4620      	mov	r0, r4
 80190bc:	f7ed ffcc 	bl	8007058 <HAL_TIM_Base_Start_IT>
					tim7_flag = 1;
 80190c0:	4b26      	ldr	r3, [pc, #152]	; (801915c <PlayWavFile+0x25c>)
 80190c2:	2201      	movs	r2, #1
 80190c4:	701a      	strb	r2, [r3, #0]
 80190c6:	e7cb      	b.n	8019060 <PlayWavFile+0x160>
					HAL_TIM_Base_Stop_IT(&htim7);
 80190c8:	4c23      	ldr	r4, [pc, #140]	; (8019158 <PlayWavFile+0x258>)
 80190ca:	4620      	mov	r0, r4
 80190cc:	f7ee f81c 	bl	8007108 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80190d0:	6822      	ldr	r2, [r4, #0]
 80190d2:	f06f 0301 	mvn.w	r3, #1
 80190d6:	6113      	str	r3, [r2, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 80190d8:	2300      	movs	r3, #0
 80190da:	6253      	str	r3, [r2, #36]	; 0x24
					tim7_flag = 0;
 80190dc:	4a1f      	ldr	r2, [pc, #124]	; (801915c <PlayWavFile+0x25c>)
 80190de:	7013      	strb	r3, [r2, #0]
					if(display.timemode == 0) {
 80190e0:	4b22      	ldr	r3, [pc, #136]	; (801916c <PlayWavFile+0x26c>)
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	b91b      	cbnz	r3, 80190ee <PlayWavFile+0x1ee>
						display.trackbarmode = 0;
 80190e6:	4b21      	ldr	r3, [pc, #132]	; (801916c <PlayWavFile+0x26c>)
 80190e8:	2200      	movs	r2, #0
 80190ea:	711a      	strb	r2, [r3, #4]
 80190ec:	e7b8      	b.n	8019060 <PlayWavFile+0x160>
						display.trackbarmode = 1;
 80190ee:	4b1f      	ldr	r3, [pc, #124]	; (801916c <PlayWavFile+0x26c>)
 80190f0:	2201      	movs	r2, #1
 80190f2:	711a      	strb	r2, [r3, #4]
 80190f4:	e7b4      	b.n	8019060 <PlayWavFile+0x160>
	BSP_AUDIO_OUT_SetVolume(0);
 80190f6:	2000      	movs	r0, #0
 80190f8:	f7fd fbda 	bl	80168b0 <BSP_AUDIO_OUT_SetVolume>
	wavtagsize = 0;
 80190fc:	2400      	movs	r4, #0
 80190fe:	4b0c      	ldr	r3, [pc, #48]	; (8019130 <PlayWavFile+0x230>)
 8019100:	601c      	str	r4, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim7);
 8019102:	4d15      	ldr	r5, [pc, #84]	; (8019158 <PlayWavFile+0x258>)
 8019104:	4628      	mov	r0, r5
 8019106:	f7ed ffff 	bl	8007108 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801910a:	682b      	ldr	r3, [r5, #0]
 801910c:	f06f 0201 	mvn.w	r2, #1
 8019110:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8019112:	625c      	str	r4, [r3, #36]	; 0x24
	tim7_flag = 0;
 8019114:	4b11      	ldr	r3, [pc, #68]	; (801915c <PlayWavFile+0x25c>)
 8019116:	701c      	strb	r4, [r3, #0]
	if(display.timemode == 0) display.trackbarmode = 0;
 8019118:	4b14      	ldr	r3, [pc, #80]	; (801916c <PlayWavFile+0x26c>)
 801911a:	781b      	ldrb	r3, [r3, #0]
 801911c:	b91b      	cbnz	r3, 8019126 <PlayWavFile+0x226>
 801911e:	4b13      	ldr	r3, [pc, #76]	; (801916c <PlayWavFile+0x26c>)
 8019120:	711c      	strb	r4, [r3, #4]
}
 8019122:	b003      	add	sp, #12
 8019124:	bd30      	pop	{r4, r5, pc}
	else display.trackbarmode = 1;
 8019126:	4b11      	ldr	r3, [pc, #68]	; (801916c <PlayWavFile+0x26c>)
 8019128:	2201      	movs	r2, #1
 801912a:	711a      	strb	r2, [r3, #4]
}
 801912c:	e7f9      	b.n	8019122 <PlayWavFile+0x222>
 801912e:	bf00      	nop
 8019130:	20018344 	.word	0x20018344
 8019134:	200007ac 	.word	0x200007ac
 8019138:	2000e378 	.word	0x2000e378
 801913c:	20018318 	.word	0x20018318
 8019140:	2000ebac 	.word	0x2000ebac
 8019144:	20017228 	.word	0x20017228
 8019148:	200017b8 	.word	0x200017b8
 801914c:	20016620 	.word	0x20016620
 8019150:	20017574 	.word	0x20017574
 8019154:	2000005c 	.word	0x2000005c
 8019158:	20017534 	.word	0x20017534
 801915c:	2000eba8 	.word	0x2000eba8
 8019160:	2000eb9f 	.word	0x2000eb9f
 8019164:	2000e3d4 	.word	0x2000e3d4
 8019168:	2000eb9e 	.word	0x2000eb9e
 801916c:	200005f0 	.word	0x200005f0

08019170 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8019170:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8019172:	f7fd fcbb 	bl	8016aec <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 8019176:	2000      	movs	r0, #0
 8019178:	bd08      	pop	{r3, pc}
	...

0801917c <wm8994_SetMute>:
{
 801917c:	b538      	push	{r3, r4, r5, lr}
 801917e:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 8019180:	4a13      	ldr	r2, [pc, #76]	; (80191d0 <wm8994_SetMute+0x54>)
 8019182:	6810      	ldr	r0, [r2, #0]
 8019184:	b180      	cbz	r0, 80191a8 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 8019186:	2901      	cmp	r1, #1
 8019188:	d00f      	beq.n	80191aa <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 801918a:	b2dd      	uxtb	r5, r3
 801918c:	2200      	movs	r2, #0
 801918e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8019192:	4628      	mov	r0, r5
 8019194:	f7ff ffec 	bl	8019170 <CODEC_IO_Write>
 8019198:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 801919a:	2200      	movs	r2, #0
 801919c:	f240 4122 	movw	r1, #1058	; 0x422
 80191a0:	4628      	mov	r0, r5
 80191a2:	f7ff ffe5 	bl	8019170 <CODEC_IO_Write>
 80191a6:	4420      	add	r0, r4
}
 80191a8:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80191aa:	b2dd      	uxtb	r5, r3
 80191ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80191b0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80191b4:	4628      	mov	r0, r5
 80191b6:	f7ff ffdb 	bl	8019170 <CODEC_IO_Write>
 80191ba:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80191bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80191c0:	f240 4122 	movw	r1, #1058	; 0x422
 80191c4:	4628      	mov	r0, r5
 80191c6:	f7ff ffd3 	bl	8019170 <CODEC_IO_Write>
 80191ca:	4420      	add	r0, r4
 80191cc:	e7ec      	b.n	80191a8 <wm8994_SetMute+0x2c>
 80191ce:	bf00      	nop
 80191d0:	2001834c 	.word	0x2001834c

080191d4 <wm8994_Play>:
{
 80191d4:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80191d6:	2100      	movs	r1, #0
 80191d8:	f7ff ffd0 	bl	801917c <wm8994_SetMute>
}
 80191dc:	bd08      	pop	{r3, pc}

080191de <wm8994_Resume>:
{
 80191de:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80191e0:	2100      	movs	r1, #0
 80191e2:	f7ff ffcb 	bl	801917c <wm8994_SetMute>
}
 80191e6:	bd08      	pop	{r3, pc}

080191e8 <wm8994_Pause>:
{  
 80191e8:	b538      	push	{r3, r4, r5, lr}
 80191ea:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80191ec:	2101      	movs	r1, #1
 80191ee:	f7ff ffc5 	bl	801917c <wm8994_SetMute>
 80191f2:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80191f4:	2201      	movs	r2, #1
 80191f6:	2102      	movs	r1, #2
 80191f8:	b2e8      	uxtb	r0, r5
 80191fa:	f7ff ffb9 	bl	8019170 <CODEC_IO_Write>
}
 80191fe:	4420      	add	r0, r4
 8019200:	bd38      	pop	{r3, r4, r5, pc}
	...

08019204 <wm8994_Stop>:
{
 8019204:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 8019206:	4b1d      	ldr	r3, [pc, #116]	; (801927c <wm8994_Stop+0x78>)
 8019208:	681c      	ldr	r4, [r3, #0]
 801920a:	b90c      	cbnz	r4, 8019210 <wm8994_Stop+0xc>
}
 801920c:	4620      	mov	r0, r4
 801920e:	bd70      	pop	{r4, r5, r6, pc}
 8019210:	4605      	mov	r5, r0
 8019212:	460e      	mov	r6, r1
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8019214:	2101      	movs	r1, #1
 8019216:	f7ff ffb1 	bl	801917c <wm8994_SetMute>
 801921a:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 801921c:	2e02      	cmp	r6, #2
 801921e:	d0f5      	beq.n	801920c <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8019220:	b2ed      	uxtb	r5, r5
 8019222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019226:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801922a:	4628      	mov	r0, r5
 801922c:	f7ff ffa0 	bl	8019170 <CODEC_IO_Write>
 8019230:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8019232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019236:	f240 4122 	movw	r1, #1058	; 0x422
 801923a:	4628      	mov	r0, r5
 801923c:	f7ff ff98 	bl	8019170 <CODEC_IO_Write>
 8019240:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8019242:	2200      	movs	r2, #0
 8019244:	212d      	movs	r1, #45	; 0x2d
 8019246:	4628      	mov	r0, r5
 8019248:	f7ff ff92 	bl	8019170 <CODEC_IO_Write>
 801924c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 801924e:	2200      	movs	r2, #0
 8019250:	212e      	movs	r1, #46	; 0x2e
 8019252:	4628      	mov	r0, r5
 8019254:	f7ff ff8c 	bl	8019170 <CODEC_IO_Write>
 8019258:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 801925a:	2200      	movs	r2, #0
 801925c:	2105      	movs	r1, #5
 801925e:	4628      	mov	r0, r5
 8019260:	f7ff ff86 	bl	8019170 <CODEC_IO_Write>
 8019264:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8019266:	2200      	movs	r2, #0
 8019268:	4611      	mov	r1, r2
 801926a:	4628      	mov	r0, r5
 801926c:	f7ff ff80 	bl	8019170 <CODEC_IO_Write>
 8019270:	4404      	add	r4, r0
      outputEnabled = 0;
 8019272:	4b02      	ldr	r3, [pc, #8]	; (801927c <wm8994_Stop+0x78>)
 8019274:	2200      	movs	r2, #0
 8019276:	601a      	str	r2, [r3, #0]
  return counter;
 8019278:	e7c8      	b.n	801920c <wm8994_Stop+0x8>
 801927a:	bf00      	nop
 801927c:	2001834c 	.word	0x2001834c

08019280 <wm8994_SetVolume>:
{
 8019280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019284:	4606      	mov	r6, r0
 8019286:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8019288:	2964      	cmp	r1, #100	; 0x64
 801928a:	d825      	bhi.n	80192d8 <wm8994_SetVolume+0x58>
 801928c:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8019290:	4a46      	ldr	r2, [pc, #280]	; (80193ac <wm8994_SetVolume+0x12c>)
 8019292:	fb82 1203 	smull	r1, r2, r2, r3
 8019296:	17df      	asrs	r7, r3, #31
 8019298:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 801929c:	b2ff      	uxtb	r7, r7
  if (outputEnabled != 0)
 801929e:	4b44      	ldr	r3, [pc, #272]	; (80193b0 <wm8994_SetVolume+0x130>)
 80192a0:	681d      	ldr	r5, [r3, #0]
 80192a2:	b145      	cbz	r5, 80192b6 <wm8994_SetVolume+0x36>
    if(convertedvol > 0x3E)
 80192a4:	2f3e      	cmp	r7, #62	; 0x3e
 80192a6:	d819      	bhi.n	80192dc <wm8994_SetVolume+0x5c>
    else if (Volume == 0)
 80192a8:	2c00      	cmp	r4, #0
 80192aa:	d13a      	bne.n	8019322 <wm8994_SetVolume+0xa2>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80192ac:	2101      	movs	r1, #1
 80192ae:	4630      	mov	r0, r6
 80192b0:	f7ff ff64 	bl	801917c <wm8994_SetMute>
 80192b4:	4605      	mov	r5, r0
  if (inputEnabled != 0)
 80192b6:	4b3f      	ldr	r3, [pc, #252]	; (80193b4 <wm8994_SetVolume+0x134>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d073      	beq.n	80193a6 <wm8994_SetVolume+0x126>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80192be:	2c63      	cmp	r4, #99	; 0x63
 80192c0:	d851      	bhi.n	8019366 <wm8994_SetVolume+0xe6>
 80192c2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 80192c6:	0124      	lsls	r4, r4, #4
 80192c8:	4b38      	ldr	r3, [pc, #224]	; (80193ac <wm8994_SetVolume+0x12c>)
 80192ca:	fb83 2304 	smull	r2, r3, r3, r4
 80192ce:	17e4      	asrs	r4, r4, #31
 80192d0:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 80192d4:	b2e4      	uxtb	r4, r4
 80192d6:	e047      	b.n	8019368 <wm8994_SetVolume+0xe8>
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80192d8:	2764      	movs	r7, #100	; 0x64
 80192da:	e7e0      	b.n	801929e <wm8994_SetVolume+0x1e>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80192dc:	2100      	movs	r1, #0
 80192de:	4630      	mov	r0, r6
 80192e0:	f7ff ff4c 	bl	801917c <wm8994_SetMute>
 80192e4:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80192e6:	b2f7      	uxtb	r7, r6
 80192e8:	f240 127f 	movw	r2, #383	; 0x17f
 80192ec:	211c      	movs	r1, #28
 80192ee:	4638      	mov	r0, r7
 80192f0:	f7ff ff3e 	bl	8019170 <CODEC_IO_Write>
 80192f4:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80192f6:	f240 127f 	movw	r2, #383	; 0x17f
 80192fa:	211d      	movs	r1, #29
 80192fc:	4638      	mov	r0, r7
 80192fe:	f7ff ff37 	bl	8019170 <CODEC_IO_Write>
 8019302:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8019304:	f240 127f 	movw	r2, #383	; 0x17f
 8019308:	2126      	movs	r1, #38	; 0x26
 801930a:	4638      	mov	r0, r7
 801930c:	f7ff ff30 	bl	8019170 <CODEC_IO_Write>
 8019310:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8019312:	f240 127f 	movw	r2, #383	; 0x17f
 8019316:	2127      	movs	r1, #39	; 0x27
 8019318:	4638      	mov	r0, r7
 801931a:	f7ff ff29 	bl	8019170 <CODEC_IO_Write>
 801931e:	4405      	add	r5, r0
 8019320:	e7c9      	b.n	80192b6 <wm8994_SetVolume+0x36>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8019322:	2100      	movs	r1, #0
 8019324:	4630      	mov	r0, r6
 8019326:	f7ff ff29 	bl	801917c <wm8994_SetMute>
 801932a:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 801932c:	fa5f f886 	uxtb.w	r8, r6
 8019330:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
 8019334:	463a      	mov	r2, r7
 8019336:	211c      	movs	r1, #28
 8019338:	4640      	mov	r0, r8
 801933a:	f7ff ff19 	bl	8019170 <CODEC_IO_Write>
 801933e:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8019340:	463a      	mov	r2, r7
 8019342:	211d      	movs	r1, #29
 8019344:	4640      	mov	r0, r8
 8019346:	f7ff ff13 	bl	8019170 <CODEC_IO_Write>
 801934a:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 801934c:	463a      	mov	r2, r7
 801934e:	2126      	movs	r1, #38	; 0x26
 8019350:	4640      	mov	r0, r8
 8019352:	f7ff ff0d 	bl	8019170 <CODEC_IO_Write>
 8019356:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8019358:	463a      	mov	r2, r7
 801935a:	2127      	movs	r1, #39	; 0x27
 801935c:	4640      	mov	r0, r8
 801935e:	f7ff ff07 	bl	8019170 <CODEC_IO_Write>
 8019362:	4405      	add	r5, r0
 8019364:	e7a7      	b.n	80192b6 <wm8994_SetVolume+0x36>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8019366:	24ef      	movs	r4, #239	; 0xef
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8019368:	b2f6      	uxtb	r6, r6
 801936a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 801936e:	4622      	mov	r2, r4
 8019370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019374:	4630      	mov	r0, r6
 8019376:	f7ff fefb 	bl	8019170 <CODEC_IO_Write>
 801937a:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 801937c:	4622      	mov	r2, r4
 801937e:	f240 4101 	movw	r1, #1025	; 0x401
 8019382:	4630      	mov	r0, r6
 8019384:	f7ff fef4 	bl	8019170 <CODEC_IO_Write>
 8019388:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 801938a:	4622      	mov	r2, r4
 801938c:	f240 4104 	movw	r1, #1028	; 0x404
 8019390:	4630      	mov	r0, r6
 8019392:	f7ff feed 	bl	8019170 <CODEC_IO_Write>
 8019396:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8019398:	4622      	mov	r2, r4
 801939a:	f240 4105 	movw	r1, #1029	; 0x405
 801939e:	4630      	mov	r0, r6
 80193a0:	f7ff fee6 	bl	8019170 <CODEC_IO_Write>
 80193a4:	4405      	add	r5, r0
}
 80193a6:	4628      	mov	r0, r5
 80193a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193ac:	51eb851f 	.word	0x51eb851f
 80193b0:	2001834c 	.word	0x2001834c
 80193b4:	20018348 	.word	0x20018348

080193b8 <wm8994_Init>:
{
 80193b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193bc:	4680      	mov	r8, r0
 80193be:	4691      	mov	r9, r2
 80193c0:	469a      	mov	sl, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 80193c2:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80193c4:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 80193c8:	f7fd fb86 	bl	8016ad8 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80193cc:	fa5f f488 	uxtb.w	r4, r8
 80193d0:	2203      	movs	r2, #3
 80193d2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80193d6:	4620      	mov	r0, r4
 80193d8:	f7ff feca 	bl	8019170 <CODEC_IO_Write>
 80193dc:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80193de:	2200      	movs	r2, #0
 80193e0:	f640 0117 	movw	r1, #2071	; 0x817
 80193e4:	4620      	mov	r0, r4
 80193e6:	f7ff fec3 	bl	8019170 <CODEC_IO_Write>
 80193ea:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80193ec:	2200      	movs	r2, #0
 80193ee:	f44f 7181 	mov.w	r1, #258	; 0x102
 80193f2:	4620      	mov	r0, r4
 80193f4:	f7ff febc 	bl	8019170 <CODEC_IO_Write>
 80193f8:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80193fa:	226c      	movs	r2, #108	; 0x6c
 80193fc:	2139      	movs	r1, #57	; 0x39
 80193fe:	4620      	mov	r0, r4
 8019400:	f7ff feb6 	bl	8019170 <CODEC_IO_Write>
 8019404:	4406      	add	r6, r0
  if (input_device > 0)
 8019406:	b3c5      	cbz	r5, 801947a <wm8994_Init+0xc2>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8019408:	2213      	movs	r2, #19
 801940a:	2101      	movs	r1, #1
 801940c:	4620      	mov	r0, r4
 801940e:	f7ff feaf 	bl	8019170 <CODEC_IO_Write>
 8019412:	4406      	add	r6, r0
  AUDIO_IO_Delay(50);
 8019414:	2032      	movs	r0, #50	; 0x32
 8019416:	f7fd fba9 	bl	8016b6c <AUDIO_IO_Delay>
  if (output_device > 0)
 801941a:	2f00      	cmp	r7, #0
 801941c:	f000 80c7 	beq.w	80195ae <wm8994_Init+0x1f6>
    outputEnabled = 1;
 8019420:	4be6      	ldr	r3, [pc, #920]	; (80197bc <wm8994_Init+0x404>)
 8019422:	2201      	movs	r2, #1
 8019424:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8019426:	2f02      	cmp	r7, #2
 8019428:	d052      	beq.n	80194d0 <wm8994_Init+0x118>
 801942a:	2f03      	cmp	r7, #3
 801942c:	d074      	beq.n	8019518 <wm8994_Init+0x160>
 801942e:	4297      	cmp	r7, r2
 8019430:	d02a      	beq.n	8019488 <wm8994_Init+0xd0>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8019432:	f240 3203 	movw	r2, #771	; 0x303
 8019436:	2105      	movs	r1, #5
 8019438:	4620      	mov	r0, r4
 801943a:	f7ff fe99 	bl	8019170 <CODEC_IO_Write>
 801943e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8019440:	2201      	movs	r2, #1
 8019442:	f240 6101 	movw	r1, #1537	; 0x601
 8019446:	4620      	mov	r0, r4
 8019448:	f7ff fe92 	bl	8019170 <CODEC_IO_Write>
 801944c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 801944e:	2201      	movs	r2, #1
 8019450:	f240 6102 	movw	r1, #1538	; 0x602
 8019454:	4620      	mov	r0, r4
 8019456:	f7ff fe8b 	bl	8019170 <CODEC_IO_Write>
 801945a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 801945c:	2200      	movs	r2, #0
 801945e:	f240 6104 	movw	r1, #1540	; 0x604
 8019462:	4620      	mov	r0, r4
 8019464:	f7ff fe84 	bl	8019170 <CODEC_IO_Write>
 8019468:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 801946a:	2200      	movs	r2, #0
 801946c:	f240 6105 	movw	r1, #1541	; 0x605
 8019470:	4620      	mov	r0, r4
 8019472:	f7ff fe7d 	bl	8019170 <CODEC_IO_Write>
 8019476:	4406      	add	r6, r0
      break;
 8019478:	e09c      	b.n	80195b4 <wm8994_Init+0x1fc>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 801947a:	2203      	movs	r2, #3
 801947c:	2101      	movs	r1, #1
 801947e:	4620      	mov	r0, r4
 8019480:	f7ff fe76 	bl	8019170 <CODEC_IO_Write>
 8019484:	4406      	add	r6, r0
 8019486:	e7c5      	b.n	8019414 <wm8994_Init+0x5c>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8019488:	f640 420c 	movw	r2, #3084	; 0xc0c
 801948c:	2105      	movs	r1, #5
 801948e:	4620      	mov	r0, r4
 8019490:	f7ff fe6e 	bl	8019170 <CODEC_IO_Write>
 8019494:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8019496:	2200      	movs	r2, #0
 8019498:	f240 6101 	movw	r1, #1537	; 0x601
 801949c:	4620      	mov	r0, r4
 801949e:	f7ff fe67 	bl	8019170 <CODEC_IO_Write>
 80194a2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80194a4:	2200      	movs	r2, #0
 80194a6:	f240 6102 	movw	r1, #1538	; 0x602
 80194aa:	4620      	mov	r0, r4
 80194ac:	f7ff fe60 	bl	8019170 <CODEC_IO_Write>
 80194b0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80194b2:	2202      	movs	r2, #2
 80194b4:	f240 6104 	movw	r1, #1540	; 0x604
 80194b8:	4620      	mov	r0, r4
 80194ba:	f7ff fe59 	bl	8019170 <CODEC_IO_Write>
 80194be:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80194c0:	2202      	movs	r2, #2
 80194c2:	f240 6105 	movw	r1, #1541	; 0x605
 80194c6:	4620      	mov	r0, r4
 80194c8:	f7ff fe52 	bl	8019170 <CODEC_IO_Write>
 80194cc:	4406      	add	r6, r0
      break;
 80194ce:	e071      	b.n	80195b4 <wm8994_Init+0x1fc>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80194d0:	f240 3203 	movw	r2, #771	; 0x303
 80194d4:	2105      	movs	r1, #5
 80194d6:	4620      	mov	r0, r4
 80194d8:	f7ff fe4a 	bl	8019170 <CODEC_IO_Write>
 80194dc:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80194de:	2201      	movs	r2, #1
 80194e0:	f240 6101 	movw	r1, #1537	; 0x601
 80194e4:	4620      	mov	r0, r4
 80194e6:	f7ff fe43 	bl	8019170 <CODEC_IO_Write>
 80194ea:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80194ec:	2201      	movs	r2, #1
 80194ee:	f240 6102 	movw	r1, #1538	; 0x602
 80194f2:	4620      	mov	r0, r4
 80194f4:	f7ff fe3c 	bl	8019170 <CODEC_IO_Write>
 80194f8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80194fa:	2200      	movs	r2, #0
 80194fc:	f240 6104 	movw	r1, #1540	; 0x604
 8019500:	4620      	mov	r0, r4
 8019502:	f7ff fe35 	bl	8019170 <CODEC_IO_Write>
 8019506:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8019508:	2200      	movs	r2, #0
 801950a:	f240 6105 	movw	r1, #1541	; 0x605
 801950e:	4620      	mov	r0, r4
 8019510:	f7ff fe2e 	bl	8019170 <CODEC_IO_Write>
 8019514:	4406      	add	r6, r0
      break;
 8019516:	e04d      	b.n	80195b4 <wm8994_Init+0x1fc>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8019518:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801951c:	d023      	beq.n	8019566 <wm8994_Init+0x1ae>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 801951e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8019522:	2105      	movs	r1, #5
 8019524:	4620      	mov	r0, r4
 8019526:	f7ff fe23 	bl	8019170 <CODEC_IO_Write>
 801952a:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 801952c:	2201      	movs	r2, #1
 801952e:	f240 6101 	movw	r1, #1537	; 0x601
 8019532:	4620      	mov	r0, r4
 8019534:	f7ff fe1c 	bl	8019170 <CODEC_IO_Write>
 8019538:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 801953a:	2201      	movs	r2, #1
 801953c:	f240 6102 	movw	r1, #1538	; 0x602
 8019540:	4620      	mov	r0, r4
 8019542:	f7ff fe15 	bl	8019170 <CODEC_IO_Write>
 8019546:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8019548:	2202      	movs	r2, #2
 801954a:	f240 6104 	movw	r1, #1540	; 0x604
 801954e:	4620      	mov	r0, r4
 8019550:	f7ff fe0e 	bl	8019170 <CODEC_IO_Write>
 8019554:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8019556:	2202      	movs	r2, #2
 8019558:	f240 6105 	movw	r1, #1541	; 0x605
 801955c:	4620      	mov	r0, r4
 801955e:	f7ff fe07 	bl	8019170 <CODEC_IO_Write>
 8019562:	4406      	add	r6, r0
 8019564:	e026      	b.n	80195b4 <wm8994_Init+0x1fc>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8019566:	f640 720f 	movw	r2, #3855	; 0xf0f
 801956a:	2105      	movs	r1, #5
 801956c:	4620      	mov	r0, r4
 801956e:	f7ff fdff 	bl	8019170 <CODEC_IO_Write>
 8019572:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8019574:	2203      	movs	r2, #3
 8019576:	f240 6101 	movw	r1, #1537	; 0x601
 801957a:	4620      	mov	r0, r4
 801957c:	f7ff fdf8 	bl	8019170 <CODEC_IO_Write>
 8019580:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8019582:	2203      	movs	r2, #3
 8019584:	f240 6102 	movw	r1, #1538	; 0x602
 8019588:	4620      	mov	r0, r4
 801958a:	f7ff fdf1 	bl	8019170 <CODEC_IO_Write>
 801958e:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8019590:	2203      	movs	r2, #3
 8019592:	f240 6104 	movw	r1, #1540	; 0x604
 8019596:	4620      	mov	r0, r4
 8019598:	f7ff fdea 	bl	8019170 <CODEC_IO_Write>
 801959c:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 801959e:	2203      	movs	r2, #3
 80195a0:	f240 6105 	movw	r1, #1541	; 0x605
 80195a4:	4620      	mov	r0, r4
 80195a6:	f7ff fde3 	bl	8019170 <CODEC_IO_Write>
 80195aa:	4406      	add	r6, r0
 80195ac:	e002      	b.n	80195b4 <wm8994_Init+0x1fc>
    outputEnabled = 0;
 80195ae:	4b83      	ldr	r3, [pc, #524]	; (80197bc <wm8994_Init+0x404>)
 80195b0:	2200      	movs	r2, #0
 80195b2:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 80195b4:	2d00      	cmp	r5, #0
 80195b6:	f000 80e8 	beq.w	801978a <wm8994_Init+0x3d2>
    inputEnabled = 1;
 80195ba:	4b81      	ldr	r3, [pc, #516]	; (80197c0 <wm8994_Init+0x408>)
 80195bc:	2201      	movs	r2, #1
 80195be:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80195c0:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 80195c4:	d077      	beq.n	80196b6 <wm8994_Init+0x2fe>
 80195c6:	d832      	bhi.n	801962e <wm8994_Init+0x276>
 80195c8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80195cc:	f000 80b0 	beq.w	8019730 <wm8994_Init+0x378>
 80195d0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80195d4:	f040 80d7 	bne.w	8019786 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80195d8:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80195dc:	2104      	movs	r1, #4
 80195de:	4620      	mov	r0, r4
 80195e0:	f7ff fdc6 	bl	8019170 <CODEC_IO_Write>
 80195e4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80195e6:	22db      	movs	r2, #219	; 0xdb
 80195e8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80195ec:	4620      	mov	r0, r4
 80195ee:	f7ff fdbf 	bl	8019170 <CODEC_IO_Write>
 80195f2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80195f4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80195f8:	2102      	movs	r1, #2
 80195fa:	4620      	mov	r0, r4
 80195fc:	f7ff fdb8 	bl	8019170 <CODEC_IO_Write>
 8019600:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8019602:	2202      	movs	r2, #2
 8019604:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8019608:	4620      	mov	r0, r4
 801960a:	f7ff fdb1 	bl	8019170 <CODEC_IO_Write>
 801960e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8019610:	2202      	movs	r2, #2
 8019612:	f240 6109 	movw	r1, #1545	; 0x609
 8019616:	4620      	mov	r0, r4
 8019618:	f7ff fdaa 	bl	8019170 <CODEC_IO_Write>
 801961c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 801961e:	220e      	movs	r2, #14
 8019620:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8019624:	4620      	mov	r0, r4
 8019626:	f7ff fda3 	bl	8019170 <CODEC_IO_Write>
 801962a:	4406      	add	r6, r0
      break;
 801962c:	e0b0      	b.n	8019790 <wm8994_Init+0x3d8>
    switch (input_device)
 801962e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8019632:	f040 80a8 	bne.w	8019786 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8019636:	f640 723c 	movw	r2, #3900	; 0xf3c
 801963a:	2104      	movs	r1, #4
 801963c:	4620      	mov	r0, r4
 801963e:	f7ff fd97 	bl	8019170 <CODEC_IO_Write>
 8019642:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8019644:	22db      	movs	r2, #219	; 0xdb
 8019646:	f44f 618a 	mov.w	r1, #1104	; 0x450
 801964a:	4620      	mov	r0, r4
 801964c:	f7ff fd90 	bl	8019170 <CODEC_IO_Write>
 8019650:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8019652:	22db      	movs	r2, #219	; 0xdb
 8019654:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8019658:	4620      	mov	r0, r4
 801965a:	f7ff fd89 	bl	8019170 <CODEC_IO_Write>
 801965e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8019660:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8019664:	2102      	movs	r1, #2
 8019666:	4620      	mov	r0, r4
 8019668:	f7ff fd82 	bl	8019170 <CODEC_IO_Write>
 801966c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 801966e:	2202      	movs	r2, #2
 8019670:	f240 6106 	movw	r1, #1542	; 0x606
 8019674:	4620      	mov	r0, r4
 8019676:	f7ff fd7b 	bl	8019170 <CODEC_IO_Write>
 801967a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 801967c:	2202      	movs	r2, #2
 801967e:	f240 6107 	movw	r1, #1543	; 0x607
 8019682:	4620      	mov	r0, r4
 8019684:	f7ff fd74 	bl	8019170 <CODEC_IO_Write>
 8019688:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 801968a:	2202      	movs	r2, #2
 801968c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8019690:	4620      	mov	r0, r4
 8019692:	f7ff fd6d 	bl	8019170 <CODEC_IO_Write>
 8019696:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8019698:	2202      	movs	r2, #2
 801969a:	f240 6109 	movw	r1, #1545	; 0x609
 801969e:	4620      	mov	r0, r4
 80196a0:	f7ff fd66 	bl	8019170 <CODEC_IO_Write>
 80196a4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80196a6:	220d      	movs	r2, #13
 80196a8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80196ac:	4620      	mov	r0, r4
 80196ae:	f7ff fd5f 	bl	8019170 <CODEC_IO_Write>
 80196b2:	4406      	add	r6, r0
      break;    
 80196b4:	e06c      	b.n	8019790 <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80196b6:	2211      	movs	r2, #17
 80196b8:	2128      	movs	r1, #40	; 0x28
 80196ba:	4620      	mov	r0, r4
 80196bc:	f7ff fd58 	bl	8019170 <CODEC_IO_Write>
 80196c0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80196c2:	2235      	movs	r2, #53	; 0x35
 80196c4:	2129      	movs	r1, #41	; 0x29
 80196c6:	4620      	mov	r0, r4
 80196c8:	f7ff fd52 	bl	8019170 <CODEC_IO_Write>
 80196cc:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80196ce:	2235      	movs	r2, #53	; 0x35
 80196d0:	212a      	movs	r1, #42	; 0x2a
 80196d2:	4620      	mov	r0, r4
 80196d4:	f7ff fd4c 	bl	8019170 <CODEC_IO_Write>
 80196d8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80196da:	f240 3203 	movw	r2, #771	; 0x303
 80196de:	2104      	movs	r1, #4
 80196e0:	4620      	mov	r0, r4
 80196e2:	f7ff fd45 	bl	8019170 <CODEC_IO_Write>
 80196e6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80196e8:	22db      	movs	r2, #219	; 0xdb
 80196ea:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80196ee:	4620      	mov	r0, r4
 80196f0:	f7ff fd3e 	bl	8019170 <CODEC_IO_Write>
 80196f4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80196f6:	f246 3250 	movw	r2, #25424	; 0x6350
 80196fa:	2102      	movs	r1, #2
 80196fc:	4620      	mov	r0, r4
 80196fe:	f7ff fd37 	bl	8019170 <CODEC_IO_Write>
 8019702:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8019704:	2202      	movs	r2, #2
 8019706:	f240 6106 	movw	r1, #1542	; 0x606
 801970a:	4620      	mov	r0, r4
 801970c:	f7ff fd30 	bl	8019170 <CODEC_IO_Write>
 8019710:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8019712:	2202      	movs	r2, #2
 8019714:	f240 6107 	movw	r1, #1543	; 0x607
 8019718:	4620      	mov	r0, r4
 801971a:	f7ff fd29 	bl	8019170 <CODEC_IO_Write>
 801971e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8019720:	220d      	movs	r2, #13
 8019722:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8019726:	4620      	mov	r0, r4
 8019728:	f7ff fd22 	bl	8019170 <CODEC_IO_Write>
 801972c:	4406      	add	r6, r0
      break;
 801972e:	e02f      	b.n	8019790 <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8019730:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8019734:	2104      	movs	r1, #4
 8019736:	4620      	mov	r0, r4
 8019738:	f7ff fd1a 	bl	8019170 <CODEC_IO_Write>
 801973c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 801973e:	22db      	movs	r2, #219	; 0xdb
 8019740:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8019744:	4620      	mov	r0, r4
 8019746:	f7ff fd13 	bl	8019170 <CODEC_IO_Write>
 801974a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 801974c:	f246 3250 	movw	r2, #25424	; 0x6350
 8019750:	2102      	movs	r1, #2
 8019752:	4620      	mov	r0, r4
 8019754:	f7ff fd0c 	bl	8019170 <CODEC_IO_Write>
 8019758:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 801975a:	2202      	movs	r2, #2
 801975c:	f240 6106 	movw	r1, #1542	; 0x606
 8019760:	4620      	mov	r0, r4
 8019762:	f7ff fd05 	bl	8019170 <CODEC_IO_Write>
 8019766:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8019768:	2202      	movs	r2, #2
 801976a:	f240 6107 	movw	r1, #1543	; 0x607
 801976e:	4620      	mov	r0, r4
 8019770:	f7ff fcfe 	bl	8019170 <CODEC_IO_Write>
 8019774:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8019776:	220d      	movs	r2, #13
 8019778:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 801977c:	4620      	mov	r0, r4
 801977e:	f7ff fcf7 	bl	8019170 <CODEC_IO_Write>
 8019782:	4406      	add	r6, r0
      break; 
 8019784:	e004      	b.n	8019790 <wm8994_Init+0x3d8>
      counter++;
 8019786:	3601      	adds	r6, #1
      break;
 8019788:	e002      	b.n	8019790 <wm8994_Init+0x3d8>
    inputEnabled = 0;
 801978a:	4b0d      	ldr	r3, [pc, #52]	; (80197c0 <wm8994_Init+0x408>)
 801978c:	2200      	movs	r2, #0
 801978e:	601a      	str	r2, [r3, #0]
  switch (AudioFreq)
 8019790:	f5ba 4ffa 	cmp.w	sl, #32000	; 0x7d00
 8019794:	f000 808b 	beq.w	80198ae <wm8994_Init+0x4f6>
 8019798:	d823      	bhi.n	80197e2 <wm8994_Init+0x42a>
 801979a:	f5ba 5f7a 	cmp.w	sl, #16000	; 0x3e80
 801979e:	d07e      	beq.n	801989e <wm8994_Init+0x4e6>
 80197a0:	d910      	bls.n	80197c4 <wm8994_Init+0x40c>
 80197a2:	f245 6322 	movw	r3, #22050	; 0x5622
 80197a6:	459a      	cmp	sl, r3
 80197a8:	f040 8091 	bne.w	80198ce <wm8994_Init+0x516>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80197ac:	2243      	movs	r2, #67	; 0x43
 80197ae:	f44f 7104 	mov.w	r1, #528	; 0x210
 80197b2:	4620      	mov	r0, r4
 80197b4:	f7ff fcdc 	bl	8019170 <CODEC_IO_Write>
 80197b8:	4406      	add	r6, r0
    break;
 80197ba:	e034      	b.n	8019826 <wm8994_Init+0x46e>
 80197bc:	2001834c 	.word	0x2001834c
 80197c0:	20018348 	.word	0x20018348
  switch (AudioFreq)
 80197c4:	f5ba 5ffa 	cmp.w	sl, #8000	; 0x1f40
 80197c8:	d026      	beq.n	8019818 <wm8994_Init+0x460>
 80197ca:	f642 3311 	movw	r3, #11025	; 0x2b11
 80197ce:	459a      	cmp	sl, r3
 80197d0:	d17d      	bne.n	80198ce <wm8994_Init+0x516>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80197d2:	2213      	movs	r2, #19
 80197d4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80197d8:	4620      	mov	r0, r4
 80197da:	f7ff fcc9 	bl	8019170 <CODEC_IO_Write>
 80197de:	4406      	add	r6, r0
    break;
 80197e0:	e021      	b.n	8019826 <wm8994_Init+0x46e>
  switch (AudioFreq)
 80197e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80197e6:	459a      	cmp	sl, r3
 80197e8:	d069      	beq.n	80198be <wm8994_Init+0x506>
 80197ea:	4bb5      	ldr	r3, [pc, #724]	; (8019ac0 <wm8994_Init+0x708>)
 80197ec:	459a      	cmp	sl, r3
 80197ee:	d107      	bne.n	8019800 <wm8994_Init+0x448>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80197f0:	22a3      	movs	r2, #163	; 0xa3
 80197f2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80197f6:	4620      	mov	r0, r4
 80197f8:	f7ff fcba 	bl	8019170 <CODEC_IO_Write>
 80197fc:	4406      	add	r6, r0
    break;
 80197fe:	e012      	b.n	8019826 <wm8994_Init+0x46e>
  switch (AudioFreq)
 8019800:	f64a 4344 	movw	r3, #44100	; 0xac44
 8019804:	459a      	cmp	sl, r3
 8019806:	d162      	bne.n	80198ce <wm8994_Init+0x516>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8019808:	2273      	movs	r2, #115	; 0x73
 801980a:	f44f 7104 	mov.w	r1, #528	; 0x210
 801980e:	4620      	mov	r0, r4
 8019810:	f7ff fcae 	bl	8019170 <CODEC_IO_Write>
 8019814:	4406      	add	r6, r0
    break; 
 8019816:	e006      	b.n	8019826 <wm8994_Init+0x46e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8019818:	2203      	movs	r2, #3
 801981a:	f44f 7104 	mov.w	r1, #528	; 0x210
 801981e:	4620      	mov	r0, r4
 8019820:	f7ff fca6 	bl	8019170 <CODEC_IO_Write>
 8019824:	4406      	add	r6, r0
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8019826:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801982a:	d058      	beq.n	80198de <wm8994_Init+0x526>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 801982c:	f244 0210 	movw	r2, #16400	; 0x4010
 8019830:	f44f 7140 	mov.w	r1, #768	; 0x300
 8019834:	4620      	mov	r0, r4
 8019836:	f7ff fc9b 	bl	8019170 <CODEC_IO_Write>
 801983a:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 801983c:	2200      	movs	r2, #0
 801983e:	f240 3102 	movw	r1, #770	; 0x302
 8019842:	4620      	mov	r0, r4
 8019844:	f7ff fc94 	bl	8019170 <CODEC_IO_Write>
 8019848:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 801984a:	220a      	movs	r2, #10
 801984c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8019850:	4620      	mov	r0, r4
 8019852:	f7ff fc8d 	bl	8019170 <CODEC_IO_Write>
 8019856:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8019858:	2201      	movs	r2, #1
 801985a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801985e:	4620      	mov	r0, r4
 8019860:	f7ff fc86 	bl	8019170 <CODEC_IO_Write>
 8019864:	4406      	add	r6, r0
  if (output_device > 0)  /* Audio output selected */
 8019866:	2f00      	cmp	r7, #0
 8019868:	d142      	bne.n	80198f0 <wm8994_Init+0x538>
  if (input_device > 0) /* Audio input selected */
 801986a:	b1ad      	cbz	r5, 8019898 <wm8994_Init+0x4e0>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 801986c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8019870:	bf18      	it	ne
 8019872:	f5b5 7f80 	cmpne.w	r5, #256	; 0x100
 8019876:	f000 80d7 	beq.w	8019a28 <wm8994_Init+0x670>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 801987a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801987e:	f000 80ea 	beq.w	8019a56 <wm8994_Init+0x69e>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8019882:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8019886:	bf18      	it	ne
 8019888:	f5b5 7f40 	cmpne.w	r5, #768	; 0x300
 801988c:	f000 8102 	beq.w	8019a94 <wm8994_Init+0x6dc>
    wm8994_SetVolume(DeviceAddr, Volume);
 8019890:	4649      	mov	r1, r9
 8019892:	4640      	mov	r0, r8
 8019894:	f7ff fcf4 	bl	8019280 <wm8994_SetVolume>
}
 8019898:	4630      	mov	r0, r6
 801989a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 801989e:	2233      	movs	r2, #51	; 0x33
 80198a0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80198a4:	4620      	mov	r0, r4
 80198a6:	f7ff fc63 	bl	8019170 <CODEC_IO_Write>
 80198aa:	4406      	add	r6, r0
    break;
 80198ac:	e7bb      	b.n	8019826 <wm8994_Init+0x46e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80198ae:	2263      	movs	r2, #99	; 0x63
 80198b0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80198b4:	4620      	mov	r0, r4
 80198b6:	f7ff fc5b 	bl	8019170 <CODEC_IO_Write>
 80198ba:	4406      	add	r6, r0
    break;
 80198bc:	e7b3      	b.n	8019826 <wm8994_Init+0x46e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80198be:	2283      	movs	r2, #131	; 0x83
 80198c0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80198c4:	4620      	mov	r0, r4
 80198c6:	f7ff fc53 	bl	8019170 <CODEC_IO_Write>
 80198ca:	4406      	add	r6, r0
    break;
 80198cc:	e7ab      	b.n	8019826 <wm8994_Init+0x46e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80198ce:	2283      	movs	r2, #131	; 0x83
 80198d0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80198d4:	4620      	mov	r0, r4
 80198d6:	f7ff fc4b 	bl	8019170 <CODEC_IO_Write>
 80198da:	4406      	add	r6, r0
    break; 
 80198dc:	e7a3      	b.n	8019826 <wm8994_Init+0x46e>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80198de:	f244 0218 	movw	r2, #16408	; 0x4018
 80198e2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80198e6:	4620      	mov	r0, r4
 80198e8:	f7ff fc42 	bl	8019170 <CODEC_IO_Write>
 80198ec:	4406      	add	r6, r0
 80198ee:	e7a5      	b.n	801983c <wm8994_Init+0x484>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80198f0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80198f4:	2103      	movs	r1, #3
 80198f6:	4620      	mov	r0, r4
 80198f8:	f7ff fc3a 	bl	8019170 <CODEC_IO_Write>
 80198fc:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80198fe:	2200      	movs	r2, #0
 8019900:	2122      	movs	r1, #34	; 0x22
 8019902:	4620      	mov	r0, r4
 8019904:	f7ff fc34 	bl	8019170 <CODEC_IO_Write>
 8019908:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 801990a:	2200      	movs	r2, #0
 801990c:	2123      	movs	r1, #35	; 0x23
 801990e:	4620      	mov	r0, r4
 8019910:	f7ff fc2e 	bl	8019170 <CODEC_IO_Write>
 8019914:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8019916:	f44f 7240 	mov.w	r2, #768	; 0x300
 801991a:	2136      	movs	r1, #54	; 0x36
 801991c:	4620      	mov	r0, r4
 801991e:	f7ff fc27 	bl	8019170 <CODEC_IO_Write>
 8019922:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8019924:	f243 0203 	movw	r2, #12291	; 0x3003
 8019928:	2101      	movs	r1, #1
 801992a:	4620      	mov	r0, r4
 801992c:	f7ff fc20 	bl	8019170 <CODEC_IO_Write>
 8019930:	4406      	add	r6, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8019932:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8019936:	d06f      	beq.n	8019a18 <wm8994_Init+0x660>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8019938:	2205      	movs	r2, #5
 801993a:	2151      	movs	r1, #81	; 0x51
 801993c:	4620      	mov	r0, r4
 801993e:	f7ff fc17 	bl	8019170 <CODEC_IO_Write>
 8019942:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8019944:	f243 3203 	movw	r2, #13059	; 0x3303
 8019948:	2101      	movs	r1, #1
 801994a:	4620      	mov	r0, r4
 801994c:	f7ff fc10 	bl	8019170 <CODEC_IO_Write>
 8019950:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8019952:	2222      	movs	r2, #34	; 0x22
 8019954:	2160      	movs	r1, #96	; 0x60
 8019956:	4620      	mov	r0, r4
 8019958:	f7ff fc0a 	bl	8019170 <CODEC_IO_Write>
 801995c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 801995e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8019962:	214c      	movs	r1, #76	; 0x4c
 8019964:	4620      	mov	r0, r4
 8019966:	f7ff fc03 	bl	8019170 <CODEC_IO_Write>
 801996a:	4406      	add	r6, r0
    AUDIO_IO_Delay(15);
 801996c:	200f      	movs	r0, #15
 801996e:	f7fd f8fd 	bl	8016b6c <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8019972:	2201      	movs	r2, #1
 8019974:	212d      	movs	r1, #45	; 0x2d
 8019976:	4620      	mov	r0, r4
 8019978:	f7ff fbfa 	bl	8019170 <CODEC_IO_Write>
 801997c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 801997e:	2201      	movs	r2, #1
 8019980:	212e      	movs	r1, #46	; 0x2e
 8019982:	4620      	mov	r0, r4
 8019984:	f7ff fbf4 	bl	8019170 <CODEC_IO_Write>
 8019988:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 801998a:	f44f 724c 	mov.w	r2, #816	; 0x330
 801998e:	2103      	movs	r1, #3
 8019990:	4620      	mov	r0, r4
 8019992:	f7ff fbed 	bl	8019170 <CODEC_IO_Write>
 8019996:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8019998:	2233      	movs	r2, #51	; 0x33
 801999a:	2154      	movs	r1, #84	; 0x54
 801999c:	4620      	mov	r0, r4
 801999e:	f7ff fbe7 	bl	8019170 <CODEC_IO_Write>
 80199a2:	4406      	add	r6, r0
    AUDIO_IO_Delay(250);
 80199a4:	20fa      	movs	r0, #250	; 0xfa
 80199a6:	f7fd f8e1 	bl	8016b6c <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80199aa:	22ee      	movs	r2, #238	; 0xee
 80199ac:	2160      	movs	r1, #96	; 0x60
 80199ae:	4620      	mov	r0, r4
 80199b0:	f7ff fbde 	bl	8019170 <CODEC_IO_Write>
 80199b4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80199b6:	22c0      	movs	r2, #192	; 0xc0
 80199b8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80199bc:	4620      	mov	r0, r4
 80199be:	f7ff fbd7 	bl	8019170 <CODEC_IO_Write>
 80199c2:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80199c4:	22c0      	movs	r2, #192	; 0xc0
 80199c6:	f240 6111 	movw	r1, #1553	; 0x611
 80199ca:	4620      	mov	r0, r4
 80199cc:	f7ff fbd0 	bl	8019170 <CODEC_IO_Write>
 80199d0:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80199d2:	2200      	movs	r2, #0
 80199d4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80199d8:	4620      	mov	r0, r4
 80199da:	f7ff fbc9 	bl	8019170 <CODEC_IO_Write>
 80199de:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80199e0:	22c0      	movs	r2, #192	; 0xc0
 80199e2:	f240 6112 	movw	r1, #1554	; 0x612
 80199e6:	4620      	mov	r0, r4
 80199e8:	f7ff fbc2 	bl	8019170 <CODEC_IO_Write>
 80199ec:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80199ee:	22c0      	movs	r2, #192	; 0xc0
 80199f0:	f240 6113 	movw	r1, #1555	; 0x613
 80199f4:	4620      	mov	r0, r4
 80199f6:	f7ff fbbb 	bl	8019170 <CODEC_IO_Write>
 80199fa:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80199fc:	2200      	movs	r2, #0
 80199fe:	f240 4122 	movw	r1, #1058	; 0x422
 8019a02:	4620      	mov	r0, r4
 8019a04:	f7ff fbb4 	bl	8019170 <CODEC_IO_Write>
 8019a08:	4406      	add	r6, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 8019a0a:	4649      	mov	r1, r9
 8019a0c:	4640      	mov	r0, r8
 8019a0e:	f7ff fc37 	bl	8019280 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8019a12:	f243 3703 	movw	r7, #13059	; 0x3303
 8019a16:	e728      	b.n	801986a <wm8994_Init+0x4b2>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8019a18:	f240 2205 	movw	r2, #517	; 0x205
 8019a1c:	2151      	movs	r1, #81	; 0x51
 8019a1e:	4620      	mov	r0, r4
 8019a20:	f7ff fba6 	bl	8019170 <CODEC_IO_Write>
 8019a24:	4406      	add	r6, r0
 8019a26:	e78d      	b.n	8019944 <wm8994_Init+0x58c>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8019a28:	f047 0213 	orr.w	r2, r7, #19
 8019a2c:	2101      	movs	r1, #1
 8019a2e:	4620      	mov	r0, r4
 8019a30:	f7ff fb9e 	bl	8019170 <CODEC_IO_Write>
 8019a34:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8019a36:	2202      	movs	r2, #2
 8019a38:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	f7ff fb97 	bl	8019170 <CODEC_IO_Write>
 8019a42:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8019a44:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8019a48:	f240 4111 	movw	r1, #1041	; 0x411
 8019a4c:	4620      	mov	r0, r4
 8019a4e:	f7ff fb8f 	bl	8019170 <CODEC_IO_Write>
 8019a52:	4406      	add	r6, r0
 8019a54:	e71c      	b.n	8019890 <wm8994_Init+0x4d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8019a56:	f047 0213 	orr.w	r2, r7, #19
 8019a5a:	2101      	movs	r1, #1
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	f7ff fb87 	bl	8019170 <CODEC_IO_Write>
 8019a62:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8019a64:	2202      	movs	r2, #2
 8019a66:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8019a6a:	4620      	mov	r0, r4
 8019a6c:	f7ff fb80 	bl	8019170 <CODEC_IO_Write>
 8019a70:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8019a72:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8019a76:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	f7ff fb78 	bl	8019170 <CODEC_IO_Write>
 8019a80:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8019a82:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8019a86:	f240 4111 	movw	r1, #1041	; 0x411
 8019a8a:	4620      	mov	r0, r4
 8019a8c:	f7ff fb70 	bl	8019170 <CODEC_IO_Write>
 8019a90:	4406      	add	r6, r0
 8019a92:	e6fd      	b.n	8019890 <wm8994_Init+0x4d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8019a94:	220b      	movs	r2, #11
 8019a96:	2118      	movs	r1, #24
 8019a98:	4620      	mov	r0, r4
 8019a9a:	f7ff fb69 	bl	8019170 <CODEC_IO_Write>
 8019a9e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8019aa0:	220b      	movs	r2, #11
 8019aa2:	211a      	movs	r1, #26
 8019aa4:	4620      	mov	r0, r4
 8019aa6:	f7ff fb63 	bl	8019170 <CODEC_IO_Write>
 8019aaa:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8019aac:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8019ab0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8019ab4:	4620      	mov	r0, r4
 8019ab6:	f7ff fb5b 	bl	8019170 <CODEC_IO_Write>
 8019aba:	4406      	add	r6, r0
 8019abc:	e6e8      	b.n	8019890 <wm8994_Init+0x4d8>
 8019abe:	bf00      	nop
 8019ac0:	00017700 	.word	0x00017700

08019ac4 <wm8994_SetOutputMode>:
{
 8019ac4:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 8019ac6:	2902      	cmp	r1, #2
 8019ac8:	d04d      	beq.n	8019b66 <wm8994_SetOutputMode+0xa2>
 8019aca:	2903      	cmp	r1, #3
 8019acc:	d070      	beq.n	8019bb0 <wm8994_SetOutputMode+0xec>
 8019ace:	2901      	cmp	r1, #1
 8019ad0:	d024      	beq.n	8019b1c <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8019ad2:	b2c4      	uxtb	r4, r0
 8019ad4:	f240 3203 	movw	r2, #771	; 0x303
 8019ad8:	2105      	movs	r1, #5
 8019ada:	4620      	mov	r0, r4
 8019adc:	f7ff fb48 	bl	8019170 <CODEC_IO_Write>
 8019ae0:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8019ae2:	2201      	movs	r2, #1
 8019ae4:	f240 6101 	movw	r1, #1537	; 0x601
 8019ae8:	4620      	mov	r0, r4
 8019aea:	f7ff fb41 	bl	8019170 <CODEC_IO_Write>
 8019aee:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8019af0:	2201      	movs	r2, #1
 8019af2:	f240 6102 	movw	r1, #1538	; 0x602
 8019af6:	4620      	mov	r0, r4
 8019af8:	f7ff fb3a 	bl	8019170 <CODEC_IO_Write>
 8019afc:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8019afe:	2200      	movs	r2, #0
 8019b00:	f240 6104 	movw	r1, #1540	; 0x604
 8019b04:	4620      	mov	r0, r4
 8019b06:	f7ff fb33 	bl	8019170 <CODEC_IO_Write>
 8019b0a:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	f240 6105 	movw	r1, #1541	; 0x605
 8019b12:	4620      	mov	r0, r4
 8019b14:	f7ff fb2c 	bl	8019170 <CODEC_IO_Write>
 8019b18:	4428      	add	r0, r5
  return counter;
 8019b1a:	e023      	b.n	8019b64 <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8019b1c:	b2c4      	uxtb	r4, r0
 8019b1e:	f640 420c 	movw	r2, #3084	; 0xc0c
 8019b22:	2105      	movs	r1, #5
 8019b24:	4620      	mov	r0, r4
 8019b26:	f7ff fb23 	bl	8019170 <CODEC_IO_Write>
 8019b2a:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	f240 6101 	movw	r1, #1537	; 0x601
 8019b32:	4620      	mov	r0, r4
 8019b34:	f7ff fb1c 	bl	8019170 <CODEC_IO_Write>
 8019b38:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8019b3a:	2200      	movs	r2, #0
 8019b3c:	f240 6102 	movw	r1, #1538	; 0x602
 8019b40:	4620      	mov	r0, r4
 8019b42:	f7ff fb15 	bl	8019170 <CODEC_IO_Write>
 8019b46:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8019b48:	2202      	movs	r2, #2
 8019b4a:	f240 6104 	movw	r1, #1540	; 0x604
 8019b4e:	4620      	mov	r0, r4
 8019b50:	f7ff fb0e 	bl	8019170 <CODEC_IO_Write>
 8019b54:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8019b56:	2202      	movs	r2, #2
 8019b58:	f240 6105 	movw	r1, #1541	; 0x605
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	f7ff fb07 	bl	8019170 <CODEC_IO_Write>
 8019b62:	4428      	add	r0, r5
}
 8019b64:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8019b66:	b2c4      	uxtb	r4, r0
 8019b68:	f240 3203 	movw	r2, #771	; 0x303
 8019b6c:	2105      	movs	r1, #5
 8019b6e:	4620      	mov	r0, r4
 8019b70:	f7ff fafe 	bl	8019170 <CODEC_IO_Write>
 8019b74:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8019b76:	2201      	movs	r2, #1
 8019b78:	f240 6101 	movw	r1, #1537	; 0x601
 8019b7c:	4620      	mov	r0, r4
 8019b7e:	f7ff faf7 	bl	8019170 <CODEC_IO_Write>
 8019b82:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8019b84:	2201      	movs	r2, #1
 8019b86:	f240 6102 	movw	r1, #1538	; 0x602
 8019b8a:	4620      	mov	r0, r4
 8019b8c:	f7ff faf0 	bl	8019170 <CODEC_IO_Write>
 8019b90:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8019b92:	2200      	movs	r2, #0
 8019b94:	f240 6104 	movw	r1, #1540	; 0x604
 8019b98:	4620      	mov	r0, r4
 8019b9a:	f7ff fae9 	bl	8019170 <CODEC_IO_Write>
 8019b9e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8019ba0:	2200      	movs	r2, #0
 8019ba2:	f240 6105 	movw	r1, #1541	; 0x605
 8019ba6:	4620      	mov	r0, r4
 8019ba8:	f7ff fae2 	bl	8019170 <CODEC_IO_Write>
 8019bac:	4428      	add	r0, r5
    break;
 8019bae:	e7d9      	b.n	8019b64 <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8019bb0:	b2c4      	uxtb	r4, r0
 8019bb2:	f640 720f 	movw	r2, #3855	; 0xf0f
 8019bb6:	2105      	movs	r1, #5
 8019bb8:	4620      	mov	r0, r4
 8019bba:	f7ff fad9 	bl	8019170 <CODEC_IO_Write>
 8019bbe:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8019bc0:	2201      	movs	r2, #1
 8019bc2:	f240 6101 	movw	r1, #1537	; 0x601
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	f7ff fad2 	bl	8019170 <CODEC_IO_Write>
 8019bcc:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8019bce:	2201      	movs	r2, #1
 8019bd0:	f240 6102 	movw	r1, #1538	; 0x602
 8019bd4:	4620      	mov	r0, r4
 8019bd6:	f7ff facb 	bl	8019170 <CODEC_IO_Write>
 8019bda:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8019bdc:	2202      	movs	r2, #2
 8019bde:	f240 6104 	movw	r1, #1540	; 0x604
 8019be2:	4620      	mov	r0, r4
 8019be4:	f7ff fac4 	bl	8019170 <CODEC_IO_Write>
 8019be8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8019bea:	2202      	movs	r2, #2
 8019bec:	f240 6105 	movw	r1, #1541	; 0x605
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	f7ff fabd 	bl	8019170 <CODEC_IO_Write>
 8019bf6:	4428      	add	r0, r5
    break;
 8019bf8:	e7b4      	b.n	8019b64 <wm8994_SetOutputMode+0xa0>
	...

08019bfc <wm8994_SetFrequency>:
{
 8019bfc:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8019bfe:	f245 6322 	movw	r3, #22050	; 0x5622
 8019c02:	4299      	cmp	r1, r3
 8019c04:	d03f      	beq.n	8019c86 <wm8994_SetFrequency+0x8a>
 8019c06:	d817      	bhi.n	8019c38 <wm8994_SetFrequency+0x3c>
 8019c08:	f642 3311 	movw	r3, #11025	; 0x2b11
 8019c0c:	4299      	cmp	r1, r3
 8019c0e:	d033      	beq.n	8019c78 <wm8994_SetFrequency+0x7c>
 8019c10:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8019c14:	d106      	bne.n	8019c24 <wm8994_SetFrequency+0x28>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8019c16:	2233      	movs	r2, #51	; 0x33
 8019c18:	f44f 7104 	mov.w	r1, #528	; 0x210
 8019c1c:	b2c0      	uxtb	r0, r0
 8019c1e:	f7ff faa7 	bl	8019170 <CODEC_IO_Write>
    break;
 8019c22:	e008      	b.n	8019c36 <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8019c24:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8019c28:	d134      	bne.n	8019c94 <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8019c2a:	2203      	movs	r2, #3
 8019c2c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8019c30:	b2c0      	uxtb	r0, r0
 8019c32:	f7ff fa9d 	bl	8019170 <CODEC_IO_Write>
}
 8019c36:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 8019c38:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8019c3c:	4299      	cmp	r1, r3
 8019c3e:	d014      	beq.n	8019c6a <wm8994_SetFrequency+0x6e>
 8019c40:	4b18      	ldr	r3, [pc, #96]	; (8019ca4 <wm8994_SetFrequency+0xa8>)
 8019c42:	4299      	cmp	r1, r3
 8019c44:	d106      	bne.n	8019c54 <wm8994_SetFrequency+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8019c46:	22a3      	movs	r2, #163	; 0xa3
 8019c48:	f44f 7104 	mov.w	r1, #528	; 0x210
 8019c4c:	b2c0      	uxtb	r0, r0
 8019c4e:	f7ff fa8f 	bl	8019170 <CODEC_IO_Write>
    break;
 8019c52:	e7f0      	b.n	8019c36 <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8019c54:	f64a 4344 	movw	r3, #44100	; 0xac44
 8019c58:	4299      	cmp	r1, r3
 8019c5a:	d11b      	bne.n	8019c94 <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8019c5c:	2273      	movs	r2, #115	; 0x73
 8019c5e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8019c62:	b2c0      	uxtb	r0, r0
 8019c64:	f7ff fa84 	bl	8019170 <CODEC_IO_Write>
    break; 
 8019c68:	e7e5      	b.n	8019c36 <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8019c6a:	2283      	movs	r2, #131	; 0x83
 8019c6c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8019c70:	b2c0      	uxtb	r0, r0
 8019c72:	f7ff fa7d 	bl	8019170 <CODEC_IO_Write>
    break;
 8019c76:	e7de      	b.n	8019c36 <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8019c78:	2213      	movs	r2, #19
 8019c7a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8019c7e:	b2c0      	uxtb	r0, r0
 8019c80:	f7ff fa76 	bl	8019170 <CODEC_IO_Write>
    break;
 8019c84:	e7d7      	b.n	8019c36 <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8019c86:	2243      	movs	r2, #67	; 0x43
 8019c88:	f44f 7104 	mov.w	r1, #528	; 0x210
 8019c8c:	b2c0      	uxtb	r0, r0
 8019c8e:	f7ff fa6f 	bl	8019170 <CODEC_IO_Write>
    break;
 8019c92:	e7d0      	b.n	8019c36 <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8019c94:	2283      	movs	r2, #131	; 0x83
 8019c96:	f44f 7104 	mov.w	r1, #528	; 0x210
 8019c9a:	b2c0      	uxtb	r0, r0
 8019c9c:	f7ff fa68 	bl	8019170 <CODEC_IO_Write>
  return counter;
 8019ca0:	e7c9      	b.n	8019c36 <wm8994_SetFrequency+0x3a>
 8019ca2:	bf00      	nop
 8019ca4:	00017700 	.word	0x00017700

08019ca8 <wm8994_Reset>:
{
 8019ca8:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8019caa:	2200      	movs	r2, #0
 8019cac:	4611      	mov	r1, r2
 8019cae:	b2c0      	uxtb	r0, r0
 8019cb0:	f7ff fa5e 	bl	8019170 <CODEC_IO_Write>
  outputEnabled = 0;
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	4a02      	ldr	r2, [pc, #8]	; (8019cc0 <wm8994_Reset+0x18>)
 8019cb8:	6013      	str	r3, [r2, #0]
  inputEnabled=0;
 8019cba:	4a02      	ldr	r2, [pc, #8]	; (8019cc4 <wm8994_Reset+0x1c>)
 8019cbc:	6013      	str	r3, [r2, #0]
}
 8019cbe:	bd08      	pop	{r3, pc}
 8019cc0:	2001834c 	.word	0x2001834c
 8019cc4:	20018348 	.word	0x20018348

08019cc8 <wm8994_DeInit>:
{
 8019cc8:	b508      	push	{r3, lr}
  /* Deinitialize Audio Codec interface */  AUDIO_IO_DeInit();
 8019cca:	f7fc ff0d 	bl	8016ae8 <AUDIO_IO_DeInit>
}
 8019cce:	bd08      	pop	{r3, pc}

08019cd0 <wm8994_ReadID>:
{
 8019cd0:	b510      	push	{r4, lr}
 8019cd2:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8019cd4:	f7fc ff00 	bl	8016ad8 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8019cd8:	2100      	movs	r1, #0
 8019cda:	b2e0      	uxtb	r0, r4
 8019cdc:	f7fc ff26 	bl	8016b2c <AUDIO_IO_Read>
}
 8019ce0:	bd10      	pop	{r4, pc}
	...

08019ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8019ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019d1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8019ce8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8019cea:	e003      	b.n	8019cf4 <LoopCopyDataInit>

08019cec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8019cec:	4b0c      	ldr	r3, [pc, #48]	; (8019d20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8019cee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8019cf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8019cf2:	3104      	adds	r1, #4

08019cf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8019cf4:	480b      	ldr	r0, [pc, #44]	; (8019d24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8019cf6:	4b0c      	ldr	r3, [pc, #48]	; (8019d28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8019cf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8019cfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8019cfc:	d3f6      	bcc.n	8019cec <CopyDataInit>
  ldr  r2, =_sbss
 8019cfe:	4a0b      	ldr	r2, [pc, #44]	; (8019d2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8019d00:	e002      	b.n	8019d08 <LoopFillZerobss>

08019d02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8019d02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8019d04:	f842 3b04 	str.w	r3, [r2], #4

08019d08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8019d08:	4b09      	ldr	r3, [pc, #36]	; (8019d30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8019d0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8019d0c:	d3f9      	bcc.n	8019d02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8019d0e:	f7fe fa17 	bl	8018140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019d12:	f000 f817 	bl	8019d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019d16:	f7fa ff3f 	bl	8014b98 <main>
  bx  lr    
 8019d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8019d1c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8019d20:	0801f8f8 	.word	0x0801f8f8
  ldr  r0, =_sdata
 8019d24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8019d28:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 8019d2c:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8019d30:	20018360 	.word	0x20018360

08019d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019d34:	e7fe      	b.n	8019d34 <ADC_IRQHandler>
	...

08019d38 <__errno>:
 8019d38:	4b01      	ldr	r3, [pc, #4]	; (8019d40 <__errno+0x8>)
 8019d3a:	6818      	ldr	r0, [r3, #0]
 8019d3c:	4770      	bx	lr
 8019d3e:	bf00      	nop
 8019d40:	200000dc 	.word	0x200000dc

08019d44 <__libc_init_array>:
 8019d44:	b570      	push	{r4, r5, r6, lr}
 8019d46:	4d0d      	ldr	r5, [pc, #52]	; (8019d7c <__libc_init_array+0x38>)
 8019d48:	4c0d      	ldr	r4, [pc, #52]	; (8019d80 <__libc_init_array+0x3c>)
 8019d4a:	1b64      	subs	r4, r4, r5
 8019d4c:	10a4      	asrs	r4, r4, #2
 8019d4e:	2600      	movs	r6, #0
 8019d50:	42a6      	cmp	r6, r4
 8019d52:	d109      	bne.n	8019d68 <__libc_init_array+0x24>
 8019d54:	4d0b      	ldr	r5, [pc, #44]	; (8019d84 <__libc_init_array+0x40>)
 8019d56:	4c0c      	ldr	r4, [pc, #48]	; (8019d88 <__libc_init_array+0x44>)
 8019d58:	f000 fcde 	bl	801a718 <_init>
 8019d5c:	1b64      	subs	r4, r4, r5
 8019d5e:	10a4      	asrs	r4, r4, #2
 8019d60:	2600      	movs	r6, #0
 8019d62:	42a6      	cmp	r6, r4
 8019d64:	d105      	bne.n	8019d72 <__libc_init_array+0x2e>
 8019d66:	bd70      	pop	{r4, r5, r6, pc}
 8019d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d6c:	4798      	blx	r3
 8019d6e:	3601      	adds	r6, #1
 8019d70:	e7ee      	b.n	8019d50 <__libc_init_array+0xc>
 8019d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d76:	4798      	blx	r3
 8019d78:	3601      	adds	r6, #1
 8019d7a:	e7f2      	b.n	8019d62 <__libc_init_array+0x1e>
 8019d7c:	0801f8f0 	.word	0x0801f8f0
 8019d80:	0801f8f0 	.word	0x0801f8f0
 8019d84:	0801f8f0 	.word	0x0801f8f0
 8019d88:	0801f8f4 	.word	0x0801f8f4

08019d8c <malloc>:
 8019d8c:	4b02      	ldr	r3, [pc, #8]	; (8019d98 <malloc+0xc>)
 8019d8e:	4601      	mov	r1, r0
 8019d90:	6818      	ldr	r0, [r3, #0]
 8019d92:	f000 b8a7 	b.w	8019ee4 <_malloc_r>
 8019d96:	bf00      	nop
 8019d98:	200000dc 	.word	0x200000dc

08019d9c <free>:
 8019d9c:	4b02      	ldr	r3, [pc, #8]	; (8019da8 <free+0xc>)
 8019d9e:	4601      	mov	r1, r0
 8019da0:	6818      	ldr	r0, [r3, #0]
 8019da2:	f000 b833 	b.w	8019e0c <_free_r>
 8019da6:	bf00      	nop
 8019da8:	200000dc 	.word	0x200000dc

08019dac <memcpy>:
 8019dac:	440a      	add	r2, r1
 8019dae:	4291      	cmp	r1, r2
 8019db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8019db4:	d100      	bne.n	8019db8 <memcpy+0xc>
 8019db6:	4770      	bx	lr
 8019db8:	b510      	push	{r4, lr}
 8019dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019dc2:	4291      	cmp	r1, r2
 8019dc4:	d1f9      	bne.n	8019dba <memcpy+0xe>
 8019dc6:	bd10      	pop	{r4, pc}

08019dc8 <memmove>:
 8019dc8:	4288      	cmp	r0, r1
 8019dca:	b510      	push	{r4, lr}
 8019dcc:	eb01 0402 	add.w	r4, r1, r2
 8019dd0:	d902      	bls.n	8019dd8 <memmove+0x10>
 8019dd2:	4284      	cmp	r4, r0
 8019dd4:	4623      	mov	r3, r4
 8019dd6:	d807      	bhi.n	8019de8 <memmove+0x20>
 8019dd8:	1e43      	subs	r3, r0, #1
 8019dda:	42a1      	cmp	r1, r4
 8019ddc:	d008      	beq.n	8019df0 <memmove+0x28>
 8019dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019de6:	e7f8      	b.n	8019dda <memmove+0x12>
 8019de8:	4402      	add	r2, r0
 8019dea:	4601      	mov	r1, r0
 8019dec:	428a      	cmp	r2, r1
 8019dee:	d100      	bne.n	8019df2 <memmove+0x2a>
 8019df0:	bd10      	pop	{r4, pc}
 8019df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019dfa:	e7f7      	b.n	8019dec <memmove+0x24>

08019dfc <memset>:
 8019dfc:	4402      	add	r2, r0
 8019dfe:	4603      	mov	r3, r0
 8019e00:	4293      	cmp	r3, r2
 8019e02:	d100      	bne.n	8019e06 <memset+0xa>
 8019e04:	4770      	bx	lr
 8019e06:	f803 1b01 	strb.w	r1, [r3], #1
 8019e0a:	e7f9      	b.n	8019e00 <memset+0x4>

08019e0c <_free_r>:
 8019e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e0e:	2900      	cmp	r1, #0
 8019e10:	d044      	beq.n	8019e9c <_free_r+0x90>
 8019e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e16:	9001      	str	r0, [sp, #4]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8019e1e:	bfb8      	it	lt
 8019e20:	18e4      	addlt	r4, r4, r3
 8019e22:	f000 f943 	bl	801a0ac <__malloc_lock>
 8019e26:	4a1e      	ldr	r2, [pc, #120]	; (8019ea0 <_free_r+0x94>)
 8019e28:	9801      	ldr	r0, [sp, #4]
 8019e2a:	6813      	ldr	r3, [r2, #0]
 8019e2c:	b933      	cbnz	r3, 8019e3c <_free_r+0x30>
 8019e2e:	6063      	str	r3, [r4, #4]
 8019e30:	6014      	str	r4, [r2, #0]
 8019e32:	b003      	add	sp, #12
 8019e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e38:	f000 b93e 	b.w	801a0b8 <__malloc_unlock>
 8019e3c:	42a3      	cmp	r3, r4
 8019e3e:	d908      	bls.n	8019e52 <_free_r+0x46>
 8019e40:	6825      	ldr	r5, [r4, #0]
 8019e42:	1961      	adds	r1, r4, r5
 8019e44:	428b      	cmp	r3, r1
 8019e46:	bf01      	itttt	eq
 8019e48:	6819      	ldreq	r1, [r3, #0]
 8019e4a:	685b      	ldreq	r3, [r3, #4]
 8019e4c:	1949      	addeq	r1, r1, r5
 8019e4e:	6021      	streq	r1, [r4, #0]
 8019e50:	e7ed      	b.n	8019e2e <_free_r+0x22>
 8019e52:	461a      	mov	r2, r3
 8019e54:	685b      	ldr	r3, [r3, #4]
 8019e56:	b10b      	cbz	r3, 8019e5c <_free_r+0x50>
 8019e58:	42a3      	cmp	r3, r4
 8019e5a:	d9fa      	bls.n	8019e52 <_free_r+0x46>
 8019e5c:	6811      	ldr	r1, [r2, #0]
 8019e5e:	1855      	adds	r5, r2, r1
 8019e60:	42a5      	cmp	r5, r4
 8019e62:	d10b      	bne.n	8019e7c <_free_r+0x70>
 8019e64:	6824      	ldr	r4, [r4, #0]
 8019e66:	4421      	add	r1, r4
 8019e68:	1854      	adds	r4, r2, r1
 8019e6a:	42a3      	cmp	r3, r4
 8019e6c:	6011      	str	r1, [r2, #0]
 8019e6e:	d1e0      	bne.n	8019e32 <_free_r+0x26>
 8019e70:	681c      	ldr	r4, [r3, #0]
 8019e72:	685b      	ldr	r3, [r3, #4]
 8019e74:	6053      	str	r3, [r2, #4]
 8019e76:	4421      	add	r1, r4
 8019e78:	6011      	str	r1, [r2, #0]
 8019e7a:	e7da      	b.n	8019e32 <_free_r+0x26>
 8019e7c:	d902      	bls.n	8019e84 <_free_r+0x78>
 8019e7e:	230c      	movs	r3, #12
 8019e80:	6003      	str	r3, [r0, #0]
 8019e82:	e7d6      	b.n	8019e32 <_free_r+0x26>
 8019e84:	6825      	ldr	r5, [r4, #0]
 8019e86:	1961      	adds	r1, r4, r5
 8019e88:	428b      	cmp	r3, r1
 8019e8a:	bf04      	itt	eq
 8019e8c:	6819      	ldreq	r1, [r3, #0]
 8019e8e:	685b      	ldreq	r3, [r3, #4]
 8019e90:	6063      	str	r3, [r4, #4]
 8019e92:	bf04      	itt	eq
 8019e94:	1949      	addeq	r1, r1, r5
 8019e96:	6021      	streq	r1, [r4, #0]
 8019e98:	6054      	str	r4, [r2, #4]
 8019e9a:	e7ca      	b.n	8019e32 <_free_r+0x26>
 8019e9c:	b003      	add	sp, #12
 8019e9e:	bd30      	pop	{r4, r5, pc}
 8019ea0:	20018350 	.word	0x20018350

08019ea4 <sbrk_aligned>:
 8019ea4:	b570      	push	{r4, r5, r6, lr}
 8019ea6:	4e0e      	ldr	r6, [pc, #56]	; (8019ee0 <sbrk_aligned+0x3c>)
 8019ea8:	460c      	mov	r4, r1
 8019eaa:	6831      	ldr	r1, [r6, #0]
 8019eac:	4605      	mov	r5, r0
 8019eae:	b911      	cbnz	r1, 8019eb6 <sbrk_aligned+0x12>
 8019eb0:	f000 f88c 	bl	8019fcc <_sbrk_r>
 8019eb4:	6030      	str	r0, [r6, #0]
 8019eb6:	4621      	mov	r1, r4
 8019eb8:	4628      	mov	r0, r5
 8019eba:	f000 f887 	bl	8019fcc <_sbrk_r>
 8019ebe:	1c43      	adds	r3, r0, #1
 8019ec0:	d00a      	beq.n	8019ed8 <sbrk_aligned+0x34>
 8019ec2:	1cc4      	adds	r4, r0, #3
 8019ec4:	f024 0403 	bic.w	r4, r4, #3
 8019ec8:	42a0      	cmp	r0, r4
 8019eca:	d007      	beq.n	8019edc <sbrk_aligned+0x38>
 8019ecc:	1a21      	subs	r1, r4, r0
 8019ece:	4628      	mov	r0, r5
 8019ed0:	f000 f87c 	bl	8019fcc <_sbrk_r>
 8019ed4:	3001      	adds	r0, #1
 8019ed6:	d101      	bne.n	8019edc <sbrk_aligned+0x38>
 8019ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8019edc:	4620      	mov	r0, r4
 8019ede:	bd70      	pop	{r4, r5, r6, pc}
 8019ee0:	20018354 	.word	0x20018354

08019ee4 <_malloc_r>:
 8019ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ee8:	1ccd      	adds	r5, r1, #3
 8019eea:	f025 0503 	bic.w	r5, r5, #3
 8019eee:	3508      	adds	r5, #8
 8019ef0:	2d0c      	cmp	r5, #12
 8019ef2:	bf38      	it	cc
 8019ef4:	250c      	movcc	r5, #12
 8019ef6:	2d00      	cmp	r5, #0
 8019ef8:	4607      	mov	r7, r0
 8019efa:	db01      	blt.n	8019f00 <_malloc_r+0x1c>
 8019efc:	42a9      	cmp	r1, r5
 8019efe:	d905      	bls.n	8019f0c <_malloc_r+0x28>
 8019f00:	230c      	movs	r3, #12
 8019f02:	603b      	str	r3, [r7, #0]
 8019f04:	2600      	movs	r6, #0
 8019f06:	4630      	mov	r0, r6
 8019f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f0c:	4e2e      	ldr	r6, [pc, #184]	; (8019fc8 <_malloc_r+0xe4>)
 8019f0e:	f000 f8cd 	bl	801a0ac <__malloc_lock>
 8019f12:	6833      	ldr	r3, [r6, #0]
 8019f14:	461c      	mov	r4, r3
 8019f16:	bb34      	cbnz	r4, 8019f66 <_malloc_r+0x82>
 8019f18:	4629      	mov	r1, r5
 8019f1a:	4638      	mov	r0, r7
 8019f1c:	f7ff ffc2 	bl	8019ea4 <sbrk_aligned>
 8019f20:	1c43      	adds	r3, r0, #1
 8019f22:	4604      	mov	r4, r0
 8019f24:	d14d      	bne.n	8019fc2 <_malloc_r+0xde>
 8019f26:	6834      	ldr	r4, [r6, #0]
 8019f28:	4626      	mov	r6, r4
 8019f2a:	2e00      	cmp	r6, #0
 8019f2c:	d140      	bne.n	8019fb0 <_malloc_r+0xcc>
 8019f2e:	6823      	ldr	r3, [r4, #0]
 8019f30:	4631      	mov	r1, r6
 8019f32:	4638      	mov	r0, r7
 8019f34:	eb04 0803 	add.w	r8, r4, r3
 8019f38:	f000 f848 	bl	8019fcc <_sbrk_r>
 8019f3c:	4580      	cmp	r8, r0
 8019f3e:	d13a      	bne.n	8019fb6 <_malloc_r+0xd2>
 8019f40:	6821      	ldr	r1, [r4, #0]
 8019f42:	3503      	adds	r5, #3
 8019f44:	1a6d      	subs	r5, r5, r1
 8019f46:	f025 0503 	bic.w	r5, r5, #3
 8019f4a:	3508      	adds	r5, #8
 8019f4c:	2d0c      	cmp	r5, #12
 8019f4e:	bf38      	it	cc
 8019f50:	250c      	movcc	r5, #12
 8019f52:	4629      	mov	r1, r5
 8019f54:	4638      	mov	r0, r7
 8019f56:	f7ff ffa5 	bl	8019ea4 <sbrk_aligned>
 8019f5a:	3001      	adds	r0, #1
 8019f5c:	d02b      	beq.n	8019fb6 <_malloc_r+0xd2>
 8019f5e:	6823      	ldr	r3, [r4, #0]
 8019f60:	442b      	add	r3, r5
 8019f62:	6023      	str	r3, [r4, #0]
 8019f64:	e00e      	b.n	8019f84 <_malloc_r+0xa0>
 8019f66:	6822      	ldr	r2, [r4, #0]
 8019f68:	1b52      	subs	r2, r2, r5
 8019f6a:	d41e      	bmi.n	8019faa <_malloc_r+0xc6>
 8019f6c:	2a0b      	cmp	r2, #11
 8019f6e:	d916      	bls.n	8019f9e <_malloc_r+0xba>
 8019f70:	1961      	adds	r1, r4, r5
 8019f72:	42a3      	cmp	r3, r4
 8019f74:	6025      	str	r5, [r4, #0]
 8019f76:	bf18      	it	ne
 8019f78:	6059      	strne	r1, [r3, #4]
 8019f7a:	6863      	ldr	r3, [r4, #4]
 8019f7c:	bf08      	it	eq
 8019f7e:	6031      	streq	r1, [r6, #0]
 8019f80:	5162      	str	r2, [r4, r5]
 8019f82:	604b      	str	r3, [r1, #4]
 8019f84:	4638      	mov	r0, r7
 8019f86:	f104 060b 	add.w	r6, r4, #11
 8019f8a:	f000 f895 	bl	801a0b8 <__malloc_unlock>
 8019f8e:	f026 0607 	bic.w	r6, r6, #7
 8019f92:	1d23      	adds	r3, r4, #4
 8019f94:	1af2      	subs	r2, r6, r3
 8019f96:	d0b6      	beq.n	8019f06 <_malloc_r+0x22>
 8019f98:	1b9b      	subs	r3, r3, r6
 8019f9a:	50a3      	str	r3, [r4, r2]
 8019f9c:	e7b3      	b.n	8019f06 <_malloc_r+0x22>
 8019f9e:	6862      	ldr	r2, [r4, #4]
 8019fa0:	42a3      	cmp	r3, r4
 8019fa2:	bf0c      	ite	eq
 8019fa4:	6032      	streq	r2, [r6, #0]
 8019fa6:	605a      	strne	r2, [r3, #4]
 8019fa8:	e7ec      	b.n	8019f84 <_malloc_r+0xa0>
 8019faa:	4623      	mov	r3, r4
 8019fac:	6864      	ldr	r4, [r4, #4]
 8019fae:	e7b2      	b.n	8019f16 <_malloc_r+0x32>
 8019fb0:	4634      	mov	r4, r6
 8019fb2:	6876      	ldr	r6, [r6, #4]
 8019fb4:	e7b9      	b.n	8019f2a <_malloc_r+0x46>
 8019fb6:	230c      	movs	r3, #12
 8019fb8:	603b      	str	r3, [r7, #0]
 8019fba:	4638      	mov	r0, r7
 8019fbc:	f000 f87c 	bl	801a0b8 <__malloc_unlock>
 8019fc0:	e7a1      	b.n	8019f06 <_malloc_r+0x22>
 8019fc2:	6025      	str	r5, [r4, #0]
 8019fc4:	e7de      	b.n	8019f84 <_malloc_r+0xa0>
 8019fc6:	bf00      	nop
 8019fc8:	20018350 	.word	0x20018350

08019fcc <_sbrk_r>:
 8019fcc:	b538      	push	{r3, r4, r5, lr}
 8019fce:	4d06      	ldr	r5, [pc, #24]	; (8019fe8 <_sbrk_r+0x1c>)
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	4604      	mov	r4, r0
 8019fd4:	4608      	mov	r0, r1
 8019fd6:	602b      	str	r3, [r5, #0]
 8019fd8:	f7fe f894 	bl	8018104 <_sbrk>
 8019fdc:	1c43      	adds	r3, r0, #1
 8019fde:	d102      	bne.n	8019fe6 <_sbrk_r+0x1a>
 8019fe0:	682b      	ldr	r3, [r5, #0]
 8019fe2:	b103      	cbz	r3, 8019fe6 <_sbrk_r+0x1a>
 8019fe4:	6023      	str	r3, [r4, #0]
 8019fe6:	bd38      	pop	{r3, r4, r5, pc}
 8019fe8:	20018358 	.word	0x20018358

08019fec <siprintf>:
 8019fec:	b40e      	push	{r1, r2, r3}
 8019fee:	b500      	push	{lr}
 8019ff0:	b09c      	sub	sp, #112	; 0x70
 8019ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8019ff4:	9002      	str	r0, [sp, #8]
 8019ff6:	9006      	str	r0, [sp, #24]
 8019ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019ffc:	4809      	ldr	r0, [pc, #36]	; (801a024 <siprintf+0x38>)
 8019ffe:	9107      	str	r1, [sp, #28]
 801a000:	9104      	str	r1, [sp, #16]
 801a002:	4909      	ldr	r1, [pc, #36]	; (801a028 <siprintf+0x3c>)
 801a004:	f853 2b04 	ldr.w	r2, [r3], #4
 801a008:	9105      	str	r1, [sp, #20]
 801a00a:	6800      	ldr	r0, [r0, #0]
 801a00c:	9301      	str	r3, [sp, #4]
 801a00e:	a902      	add	r1, sp, #8
 801a010:	f000 f8b4 	bl	801a17c <_svfiprintf_r>
 801a014:	9b02      	ldr	r3, [sp, #8]
 801a016:	2200      	movs	r2, #0
 801a018:	701a      	strb	r2, [r3, #0]
 801a01a:	b01c      	add	sp, #112	; 0x70
 801a01c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a020:	b003      	add	sp, #12
 801a022:	4770      	bx	lr
 801a024:	200000dc 	.word	0x200000dc
 801a028:	ffff0208 	.word	0xffff0208

0801a02c <strcat>:
 801a02c:	b510      	push	{r4, lr}
 801a02e:	4602      	mov	r2, r0
 801a030:	7814      	ldrb	r4, [r2, #0]
 801a032:	4613      	mov	r3, r2
 801a034:	3201      	adds	r2, #1
 801a036:	2c00      	cmp	r4, #0
 801a038:	d1fa      	bne.n	801a030 <strcat+0x4>
 801a03a:	3b01      	subs	r3, #1
 801a03c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a040:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a044:	2a00      	cmp	r2, #0
 801a046:	d1f9      	bne.n	801a03c <strcat+0x10>
 801a048:	bd10      	pop	{r4, pc}

0801a04a <strncmp>:
 801a04a:	b510      	push	{r4, lr}
 801a04c:	b17a      	cbz	r2, 801a06e <strncmp+0x24>
 801a04e:	4603      	mov	r3, r0
 801a050:	3901      	subs	r1, #1
 801a052:	1884      	adds	r4, r0, r2
 801a054:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a058:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a05c:	4290      	cmp	r0, r2
 801a05e:	d101      	bne.n	801a064 <strncmp+0x1a>
 801a060:	42a3      	cmp	r3, r4
 801a062:	d101      	bne.n	801a068 <strncmp+0x1e>
 801a064:	1a80      	subs	r0, r0, r2
 801a066:	bd10      	pop	{r4, pc}
 801a068:	2800      	cmp	r0, #0
 801a06a:	d1f3      	bne.n	801a054 <strncmp+0xa>
 801a06c:	e7fa      	b.n	801a064 <strncmp+0x1a>
 801a06e:	4610      	mov	r0, r2
 801a070:	e7f9      	b.n	801a066 <strncmp+0x1c>

0801a072 <wcscat>:
 801a072:	b510      	push	{r4, lr}
 801a074:	4602      	mov	r2, r0
 801a076:	4613      	mov	r3, r2
 801a078:	f852 4b04 	ldr.w	r4, [r2], #4
 801a07c:	2c00      	cmp	r4, #0
 801a07e:	d1fa      	bne.n	801a076 <wcscat+0x4>
 801a080:	3904      	subs	r1, #4
 801a082:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a086:	b90a      	cbnz	r2, 801a08c <wcscat+0x1a>
 801a088:	601a      	str	r2, [r3, #0]
 801a08a:	bd10      	pop	{r4, pc}
 801a08c:	f843 2b04 	str.w	r2, [r3], #4
 801a090:	e7f7      	b.n	801a082 <wcscat+0x10>

0801a092 <wcscpy>:
 801a092:	2300      	movs	r3, #0
 801a094:	6003      	str	r3, [r0, #0]
 801a096:	3904      	subs	r1, #4
 801a098:	4603      	mov	r3, r0
 801a09a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a09e:	b90a      	cbnz	r2, 801a0a4 <wcscpy+0x12>
 801a0a0:	601a      	str	r2, [r3, #0]
 801a0a2:	4770      	bx	lr
 801a0a4:	f843 2b04 	str.w	r2, [r3], #4
 801a0a8:	e7f7      	b.n	801a09a <wcscpy+0x8>
	...

0801a0ac <__malloc_lock>:
 801a0ac:	4801      	ldr	r0, [pc, #4]	; (801a0b4 <__malloc_lock+0x8>)
 801a0ae:	f000 baf9 	b.w	801a6a4 <__retarget_lock_acquire_recursive>
 801a0b2:	bf00      	nop
 801a0b4:	2001835c 	.word	0x2001835c

0801a0b8 <__malloc_unlock>:
 801a0b8:	4801      	ldr	r0, [pc, #4]	; (801a0c0 <__malloc_unlock+0x8>)
 801a0ba:	f000 baf4 	b.w	801a6a6 <__retarget_lock_release_recursive>
 801a0be:	bf00      	nop
 801a0c0:	2001835c 	.word	0x2001835c

0801a0c4 <__ssputs_r>:
 801a0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0c8:	688e      	ldr	r6, [r1, #8]
 801a0ca:	429e      	cmp	r6, r3
 801a0cc:	4682      	mov	sl, r0
 801a0ce:	460c      	mov	r4, r1
 801a0d0:	4690      	mov	r8, r2
 801a0d2:	461f      	mov	r7, r3
 801a0d4:	d838      	bhi.n	801a148 <__ssputs_r+0x84>
 801a0d6:	898a      	ldrh	r2, [r1, #12]
 801a0d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a0dc:	d032      	beq.n	801a144 <__ssputs_r+0x80>
 801a0de:	6825      	ldr	r5, [r4, #0]
 801a0e0:	6909      	ldr	r1, [r1, #16]
 801a0e2:	eba5 0901 	sub.w	r9, r5, r1
 801a0e6:	6965      	ldr	r5, [r4, #20]
 801a0e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a0ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a0f0:	3301      	adds	r3, #1
 801a0f2:	444b      	add	r3, r9
 801a0f4:	106d      	asrs	r5, r5, #1
 801a0f6:	429d      	cmp	r5, r3
 801a0f8:	bf38      	it	cc
 801a0fa:	461d      	movcc	r5, r3
 801a0fc:	0553      	lsls	r3, r2, #21
 801a0fe:	d531      	bpl.n	801a164 <__ssputs_r+0xa0>
 801a100:	4629      	mov	r1, r5
 801a102:	f7ff feef 	bl	8019ee4 <_malloc_r>
 801a106:	4606      	mov	r6, r0
 801a108:	b950      	cbnz	r0, 801a120 <__ssputs_r+0x5c>
 801a10a:	230c      	movs	r3, #12
 801a10c:	f8ca 3000 	str.w	r3, [sl]
 801a110:	89a3      	ldrh	r3, [r4, #12]
 801a112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a116:	81a3      	strh	r3, [r4, #12]
 801a118:	f04f 30ff 	mov.w	r0, #4294967295
 801a11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a120:	6921      	ldr	r1, [r4, #16]
 801a122:	464a      	mov	r2, r9
 801a124:	f7ff fe42 	bl	8019dac <memcpy>
 801a128:	89a3      	ldrh	r3, [r4, #12]
 801a12a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a132:	81a3      	strh	r3, [r4, #12]
 801a134:	6126      	str	r6, [r4, #16]
 801a136:	6165      	str	r5, [r4, #20]
 801a138:	444e      	add	r6, r9
 801a13a:	eba5 0509 	sub.w	r5, r5, r9
 801a13e:	6026      	str	r6, [r4, #0]
 801a140:	60a5      	str	r5, [r4, #8]
 801a142:	463e      	mov	r6, r7
 801a144:	42be      	cmp	r6, r7
 801a146:	d900      	bls.n	801a14a <__ssputs_r+0x86>
 801a148:	463e      	mov	r6, r7
 801a14a:	6820      	ldr	r0, [r4, #0]
 801a14c:	4632      	mov	r2, r6
 801a14e:	4641      	mov	r1, r8
 801a150:	f7ff fe3a 	bl	8019dc8 <memmove>
 801a154:	68a3      	ldr	r3, [r4, #8]
 801a156:	1b9b      	subs	r3, r3, r6
 801a158:	60a3      	str	r3, [r4, #8]
 801a15a:	6823      	ldr	r3, [r4, #0]
 801a15c:	4433      	add	r3, r6
 801a15e:	6023      	str	r3, [r4, #0]
 801a160:	2000      	movs	r0, #0
 801a162:	e7db      	b.n	801a11c <__ssputs_r+0x58>
 801a164:	462a      	mov	r2, r5
 801a166:	f000 fa9f 	bl	801a6a8 <_realloc_r>
 801a16a:	4606      	mov	r6, r0
 801a16c:	2800      	cmp	r0, #0
 801a16e:	d1e1      	bne.n	801a134 <__ssputs_r+0x70>
 801a170:	6921      	ldr	r1, [r4, #16]
 801a172:	4650      	mov	r0, sl
 801a174:	f7ff fe4a 	bl	8019e0c <_free_r>
 801a178:	e7c7      	b.n	801a10a <__ssputs_r+0x46>
	...

0801a17c <_svfiprintf_r>:
 801a17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a180:	4698      	mov	r8, r3
 801a182:	898b      	ldrh	r3, [r1, #12]
 801a184:	061b      	lsls	r3, r3, #24
 801a186:	b09d      	sub	sp, #116	; 0x74
 801a188:	4607      	mov	r7, r0
 801a18a:	460d      	mov	r5, r1
 801a18c:	4614      	mov	r4, r2
 801a18e:	d50e      	bpl.n	801a1ae <_svfiprintf_r+0x32>
 801a190:	690b      	ldr	r3, [r1, #16]
 801a192:	b963      	cbnz	r3, 801a1ae <_svfiprintf_r+0x32>
 801a194:	2140      	movs	r1, #64	; 0x40
 801a196:	f7ff fea5 	bl	8019ee4 <_malloc_r>
 801a19a:	6028      	str	r0, [r5, #0]
 801a19c:	6128      	str	r0, [r5, #16]
 801a19e:	b920      	cbnz	r0, 801a1aa <_svfiprintf_r+0x2e>
 801a1a0:	230c      	movs	r3, #12
 801a1a2:	603b      	str	r3, [r7, #0]
 801a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a1a8:	e0d1      	b.n	801a34e <_svfiprintf_r+0x1d2>
 801a1aa:	2340      	movs	r3, #64	; 0x40
 801a1ac:	616b      	str	r3, [r5, #20]
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	9309      	str	r3, [sp, #36]	; 0x24
 801a1b2:	2320      	movs	r3, #32
 801a1b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a1b8:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1bc:	2330      	movs	r3, #48	; 0x30
 801a1be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a368 <_svfiprintf_r+0x1ec>
 801a1c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a1c6:	f04f 0901 	mov.w	r9, #1
 801a1ca:	4623      	mov	r3, r4
 801a1cc:	469a      	mov	sl, r3
 801a1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1d2:	b10a      	cbz	r2, 801a1d8 <_svfiprintf_r+0x5c>
 801a1d4:	2a25      	cmp	r2, #37	; 0x25
 801a1d6:	d1f9      	bne.n	801a1cc <_svfiprintf_r+0x50>
 801a1d8:	ebba 0b04 	subs.w	fp, sl, r4
 801a1dc:	d00b      	beq.n	801a1f6 <_svfiprintf_r+0x7a>
 801a1de:	465b      	mov	r3, fp
 801a1e0:	4622      	mov	r2, r4
 801a1e2:	4629      	mov	r1, r5
 801a1e4:	4638      	mov	r0, r7
 801a1e6:	f7ff ff6d 	bl	801a0c4 <__ssputs_r>
 801a1ea:	3001      	adds	r0, #1
 801a1ec:	f000 80aa 	beq.w	801a344 <_svfiprintf_r+0x1c8>
 801a1f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a1f2:	445a      	add	r2, fp
 801a1f4:	9209      	str	r2, [sp, #36]	; 0x24
 801a1f6:	f89a 3000 	ldrb.w	r3, [sl]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	f000 80a2 	beq.w	801a344 <_svfiprintf_r+0x1c8>
 801a200:	2300      	movs	r3, #0
 801a202:	f04f 32ff 	mov.w	r2, #4294967295
 801a206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a20a:	f10a 0a01 	add.w	sl, sl, #1
 801a20e:	9304      	str	r3, [sp, #16]
 801a210:	9307      	str	r3, [sp, #28]
 801a212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a216:	931a      	str	r3, [sp, #104]	; 0x68
 801a218:	4654      	mov	r4, sl
 801a21a:	2205      	movs	r2, #5
 801a21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a220:	4851      	ldr	r0, [pc, #324]	; (801a368 <_svfiprintf_r+0x1ec>)
 801a222:	f7e6 f805 	bl	8000230 <memchr>
 801a226:	9a04      	ldr	r2, [sp, #16]
 801a228:	b9d8      	cbnz	r0, 801a262 <_svfiprintf_r+0xe6>
 801a22a:	06d0      	lsls	r0, r2, #27
 801a22c:	bf44      	itt	mi
 801a22e:	2320      	movmi	r3, #32
 801a230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a234:	0711      	lsls	r1, r2, #28
 801a236:	bf44      	itt	mi
 801a238:	232b      	movmi	r3, #43	; 0x2b
 801a23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a23e:	f89a 3000 	ldrb.w	r3, [sl]
 801a242:	2b2a      	cmp	r3, #42	; 0x2a
 801a244:	d015      	beq.n	801a272 <_svfiprintf_r+0xf6>
 801a246:	9a07      	ldr	r2, [sp, #28]
 801a248:	4654      	mov	r4, sl
 801a24a:	2000      	movs	r0, #0
 801a24c:	f04f 0c0a 	mov.w	ip, #10
 801a250:	4621      	mov	r1, r4
 801a252:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a256:	3b30      	subs	r3, #48	; 0x30
 801a258:	2b09      	cmp	r3, #9
 801a25a:	d94e      	bls.n	801a2fa <_svfiprintf_r+0x17e>
 801a25c:	b1b0      	cbz	r0, 801a28c <_svfiprintf_r+0x110>
 801a25e:	9207      	str	r2, [sp, #28]
 801a260:	e014      	b.n	801a28c <_svfiprintf_r+0x110>
 801a262:	eba0 0308 	sub.w	r3, r0, r8
 801a266:	fa09 f303 	lsl.w	r3, r9, r3
 801a26a:	4313      	orrs	r3, r2
 801a26c:	9304      	str	r3, [sp, #16]
 801a26e:	46a2      	mov	sl, r4
 801a270:	e7d2      	b.n	801a218 <_svfiprintf_r+0x9c>
 801a272:	9b03      	ldr	r3, [sp, #12]
 801a274:	1d19      	adds	r1, r3, #4
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	9103      	str	r1, [sp, #12]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	bfbb      	ittet	lt
 801a27e:	425b      	neglt	r3, r3
 801a280:	f042 0202 	orrlt.w	r2, r2, #2
 801a284:	9307      	strge	r3, [sp, #28]
 801a286:	9307      	strlt	r3, [sp, #28]
 801a288:	bfb8      	it	lt
 801a28a:	9204      	strlt	r2, [sp, #16]
 801a28c:	7823      	ldrb	r3, [r4, #0]
 801a28e:	2b2e      	cmp	r3, #46	; 0x2e
 801a290:	d10c      	bne.n	801a2ac <_svfiprintf_r+0x130>
 801a292:	7863      	ldrb	r3, [r4, #1]
 801a294:	2b2a      	cmp	r3, #42	; 0x2a
 801a296:	d135      	bne.n	801a304 <_svfiprintf_r+0x188>
 801a298:	9b03      	ldr	r3, [sp, #12]
 801a29a:	1d1a      	adds	r2, r3, #4
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	9203      	str	r2, [sp, #12]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	bfb8      	it	lt
 801a2a4:	f04f 33ff 	movlt.w	r3, #4294967295
 801a2a8:	3402      	adds	r4, #2
 801a2aa:	9305      	str	r3, [sp, #20]
 801a2ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a378 <_svfiprintf_r+0x1fc>
 801a2b0:	7821      	ldrb	r1, [r4, #0]
 801a2b2:	2203      	movs	r2, #3
 801a2b4:	4650      	mov	r0, sl
 801a2b6:	f7e5 ffbb 	bl	8000230 <memchr>
 801a2ba:	b140      	cbz	r0, 801a2ce <_svfiprintf_r+0x152>
 801a2bc:	2340      	movs	r3, #64	; 0x40
 801a2be:	eba0 000a 	sub.w	r0, r0, sl
 801a2c2:	fa03 f000 	lsl.w	r0, r3, r0
 801a2c6:	9b04      	ldr	r3, [sp, #16]
 801a2c8:	4303      	orrs	r3, r0
 801a2ca:	3401      	adds	r4, #1
 801a2cc:	9304      	str	r3, [sp, #16]
 801a2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2d2:	4826      	ldr	r0, [pc, #152]	; (801a36c <_svfiprintf_r+0x1f0>)
 801a2d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a2d8:	2206      	movs	r2, #6
 801a2da:	f7e5 ffa9 	bl	8000230 <memchr>
 801a2de:	2800      	cmp	r0, #0
 801a2e0:	d038      	beq.n	801a354 <_svfiprintf_r+0x1d8>
 801a2e2:	4b23      	ldr	r3, [pc, #140]	; (801a370 <_svfiprintf_r+0x1f4>)
 801a2e4:	bb1b      	cbnz	r3, 801a32e <_svfiprintf_r+0x1b2>
 801a2e6:	9b03      	ldr	r3, [sp, #12]
 801a2e8:	3307      	adds	r3, #7
 801a2ea:	f023 0307 	bic.w	r3, r3, #7
 801a2ee:	3308      	adds	r3, #8
 801a2f0:	9303      	str	r3, [sp, #12]
 801a2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2f4:	4433      	add	r3, r6
 801a2f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a2f8:	e767      	b.n	801a1ca <_svfiprintf_r+0x4e>
 801a2fa:	fb0c 3202 	mla	r2, ip, r2, r3
 801a2fe:	460c      	mov	r4, r1
 801a300:	2001      	movs	r0, #1
 801a302:	e7a5      	b.n	801a250 <_svfiprintf_r+0xd4>
 801a304:	2300      	movs	r3, #0
 801a306:	3401      	adds	r4, #1
 801a308:	9305      	str	r3, [sp, #20]
 801a30a:	4619      	mov	r1, r3
 801a30c:	f04f 0c0a 	mov.w	ip, #10
 801a310:	4620      	mov	r0, r4
 801a312:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a316:	3a30      	subs	r2, #48	; 0x30
 801a318:	2a09      	cmp	r2, #9
 801a31a:	d903      	bls.n	801a324 <_svfiprintf_r+0x1a8>
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d0c5      	beq.n	801a2ac <_svfiprintf_r+0x130>
 801a320:	9105      	str	r1, [sp, #20]
 801a322:	e7c3      	b.n	801a2ac <_svfiprintf_r+0x130>
 801a324:	fb0c 2101 	mla	r1, ip, r1, r2
 801a328:	4604      	mov	r4, r0
 801a32a:	2301      	movs	r3, #1
 801a32c:	e7f0      	b.n	801a310 <_svfiprintf_r+0x194>
 801a32e:	ab03      	add	r3, sp, #12
 801a330:	9300      	str	r3, [sp, #0]
 801a332:	462a      	mov	r2, r5
 801a334:	4b0f      	ldr	r3, [pc, #60]	; (801a374 <_svfiprintf_r+0x1f8>)
 801a336:	a904      	add	r1, sp, #16
 801a338:	4638      	mov	r0, r7
 801a33a:	f3af 8000 	nop.w
 801a33e:	1c42      	adds	r2, r0, #1
 801a340:	4606      	mov	r6, r0
 801a342:	d1d6      	bne.n	801a2f2 <_svfiprintf_r+0x176>
 801a344:	89ab      	ldrh	r3, [r5, #12]
 801a346:	065b      	lsls	r3, r3, #25
 801a348:	f53f af2c 	bmi.w	801a1a4 <_svfiprintf_r+0x28>
 801a34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a34e:	b01d      	add	sp, #116	; 0x74
 801a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a354:	ab03      	add	r3, sp, #12
 801a356:	9300      	str	r3, [sp, #0]
 801a358:	462a      	mov	r2, r5
 801a35a:	4b06      	ldr	r3, [pc, #24]	; (801a374 <_svfiprintf_r+0x1f8>)
 801a35c:	a904      	add	r1, sp, #16
 801a35e:	4638      	mov	r0, r7
 801a360:	f000 f87a 	bl	801a458 <_printf_i>
 801a364:	e7eb      	b.n	801a33e <_svfiprintf_r+0x1c2>
 801a366:	bf00      	nop
 801a368:	0801f8b4 	.word	0x0801f8b4
 801a36c:	0801f8be 	.word	0x0801f8be
 801a370:	00000000 	.word	0x00000000
 801a374:	0801a0c5 	.word	0x0801a0c5
 801a378:	0801f8ba 	.word	0x0801f8ba

0801a37c <_printf_common>:
 801a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a380:	4616      	mov	r6, r2
 801a382:	4699      	mov	r9, r3
 801a384:	688a      	ldr	r2, [r1, #8]
 801a386:	690b      	ldr	r3, [r1, #16]
 801a388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a38c:	4293      	cmp	r3, r2
 801a38e:	bfb8      	it	lt
 801a390:	4613      	movlt	r3, r2
 801a392:	6033      	str	r3, [r6, #0]
 801a394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a398:	4607      	mov	r7, r0
 801a39a:	460c      	mov	r4, r1
 801a39c:	b10a      	cbz	r2, 801a3a2 <_printf_common+0x26>
 801a39e:	3301      	adds	r3, #1
 801a3a0:	6033      	str	r3, [r6, #0]
 801a3a2:	6823      	ldr	r3, [r4, #0]
 801a3a4:	0699      	lsls	r1, r3, #26
 801a3a6:	bf42      	ittt	mi
 801a3a8:	6833      	ldrmi	r3, [r6, #0]
 801a3aa:	3302      	addmi	r3, #2
 801a3ac:	6033      	strmi	r3, [r6, #0]
 801a3ae:	6825      	ldr	r5, [r4, #0]
 801a3b0:	f015 0506 	ands.w	r5, r5, #6
 801a3b4:	d106      	bne.n	801a3c4 <_printf_common+0x48>
 801a3b6:	f104 0a19 	add.w	sl, r4, #25
 801a3ba:	68e3      	ldr	r3, [r4, #12]
 801a3bc:	6832      	ldr	r2, [r6, #0]
 801a3be:	1a9b      	subs	r3, r3, r2
 801a3c0:	42ab      	cmp	r3, r5
 801a3c2:	dc26      	bgt.n	801a412 <_printf_common+0x96>
 801a3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a3c8:	1e13      	subs	r3, r2, #0
 801a3ca:	6822      	ldr	r2, [r4, #0]
 801a3cc:	bf18      	it	ne
 801a3ce:	2301      	movne	r3, #1
 801a3d0:	0692      	lsls	r2, r2, #26
 801a3d2:	d42b      	bmi.n	801a42c <_printf_common+0xb0>
 801a3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a3d8:	4649      	mov	r1, r9
 801a3da:	4638      	mov	r0, r7
 801a3dc:	47c0      	blx	r8
 801a3de:	3001      	adds	r0, #1
 801a3e0:	d01e      	beq.n	801a420 <_printf_common+0xa4>
 801a3e2:	6823      	ldr	r3, [r4, #0]
 801a3e4:	68e5      	ldr	r5, [r4, #12]
 801a3e6:	6832      	ldr	r2, [r6, #0]
 801a3e8:	f003 0306 	and.w	r3, r3, #6
 801a3ec:	2b04      	cmp	r3, #4
 801a3ee:	bf08      	it	eq
 801a3f0:	1aad      	subeq	r5, r5, r2
 801a3f2:	68a3      	ldr	r3, [r4, #8]
 801a3f4:	6922      	ldr	r2, [r4, #16]
 801a3f6:	bf0c      	ite	eq
 801a3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a3fc:	2500      	movne	r5, #0
 801a3fe:	4293      	cmp	r3, r2
 801a400:	bfc4      	itt	gt
 801a402:	1a9b      	subgt	r3, r3, r2
 801a404:	18ed      	addgt	r5, r5, r3
 801a406:	2600      	movs	r6, #0
 801a408:	341a      	adds	r4, #26
 801a40a:	42b5      	cmp	r5, r6
 801a40c:	d11a      	bne.n	801a444 <_printf_common+0xc8>
 801a40e:	2000      	movs	r0, #0
 801a410:	e008      	b.n	801a424 <_printf_common+0xa8>
 801a412:	2301      	movs	r3, #1
 801a414:	4652      	mov	r2, sl
 801a416:	4649      	mov	r1, r9
 801a418:	4638      	mov	r0, r7
 801a41a:	47c0      	blx	r8
 801a41c:	3001      	adds	r0, #1
 801a41e:	d103      	bne.n	801a428 <_printf_common+0xac>
 801a420:	f04f 30ff 	mov.w	r0, #4294967295
 801a424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a428:	3501      	adds	r5, #1
 801a42a:	e7c6      	b.n	801a3ba <_printf_common+0x3e>
 801a42c:	18e1      	adds	r1, r4, r3
 801a42e:	1c5a      	adds	r2, r3, #1
 801a430:	2030      	movs	r0, #48	; 0x30
 801a432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a436:	4422      	add	r2, r4
 801a438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a43c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a440:	3302      	adds	r3, #2
 801a442:	e7c7      	b.n	801a3d4 <_printf_common+0x58>
 801a444:	2301      	movs	r3, #1
 801a446:	4622      	mov	r2, r4
 801a448:	4649      	mov	r1, r9
 801a44a:	4638      	mov	r0, r7
 801a44c:	47c0      	blx	r8
 801a44e:	3001      	adds	r0, #1
 801a450:	d0e6      	beq.n	801a420 <_printf_common+0xa4>
 801a452:	3601      	adds	r6, #1
 801a454:	e7d9      	b.n	801a40a <_printf_common+0x8e>
	...

0801a458 <_printf_i>:
 801a458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a45c:	7e0f      	ldrb	r7, [r1, #24]
 801a45e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a460:	2f78      	cmp	r7, #120	; 0x78
 801a462:	4691      	mov	r9, r2
 801a464:	4680      	mov	r8, r0
 801a466:	460c      	mov	r4, r1
 801a468:	469a      	mov	sl, r3
 801a46a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a46e:	d807      	bhi.n	801a480 <_printf_i+0x28>
 801a470:	2f62      	cmp	r7, #98	; 0x62
 801a472:	d80a      	bhi.n	801a48a <_printf_i+0x32>
 801a474:	2f00      	cmp	r7, #0
 801a476:	f000 80d8 	beq.w	801a62a <_printf_i+0x1d2>
 801a47a:	2f58      	cmp	r7, #88	; 0x58
 801a47c:	f000 80a3 	beq.w	801a5c6 <_printf_i+0x16e>
 801a480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a488:	e03a      	b.n	801a500 <_printf_i+0xa8>
 801a48a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a48e:	2b15      	cmp	r3, #21
 801a490:	d8f6      	bhi.n	801a480 <_printf_i+0x28>
 801a492:	a101      	add	r1, pc, #4	; (adr r1, 801a498 <_printf_i+0x40>)
 801a494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a498:	0801a4f1 	.word	0x0801a4f1
 801a49c:	0801a505 	.word	0x0801a505
 801a4a0:	0801a481 	.word	0x0801a481
 801a4a4:	0801a481 	.word	0x0801a481
 801a4a8:	0801a481 	.word	0x0801a481
 801a4ac:	0801a481 	.word	0x0801a481
 801a4b0:	0801a505 	.word	0x0801a505
 801a4b4:	0801a481 	.word	0x0801a481
 801a4b8:	0801a481 	.word	0x0801a481
 801a4bc:	0801a481 	.word	0x0801a481
 801a4c0:	0801a481 	.word	0x0801a481
 801a4c4:	0801a611 	.word	0x0801a611
 801a4c8:	0801a535 	.word	0x0801a535
 801a4cc:	0801a5f3 	.word	0x0801a5f3
 801a4d0:	0801a481 	.word	0x0801a481
 801a4d4:	0801a481 	.word	0x0801a481
 801a4d8:	0801a633 	.word	0x0801a633
 801a4dc:	0801a481 	.word	0x0801a481
 801a4e0:	0801a535 	.word	0x0801a535
 801a4e4:	0801a481 	.word	0x0801a481
 801a4e8:	0801a481 	.word	0x0801a481
 801a4ec:	0801a5fb 	.word	0x0801a5fb
 801a4f0:	682b      	ldr	r3, [r5, #0]
 801a4f2:	1d1a      	adds	r2, r3, #4
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	602a      	str	r2, [r5, #0]
 801a4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a500:	2301      	movs	r3, #1
 801a502:	e0a3      	b.n	801a64c <_printf_i+0x1f4>
 801a504:	6820      	ldr	r0, [r4, #0]
 801a506:	6829      	ldr	r1, [r5, #0]
 801a508:	0606      	lsls	r6, r0, #24
 801a50a:	f101 0304 	add.w	r3, r1, #4
 801a50e:	d50a      	bpl.n	801a526 <_printf_i+0xce>
 801a510:	680e      	ldr	r6, [r1, #0]
 801a512:	602b      	str	r3, [r5, #0]
 801a514:	2e00      	cmp	r6, #0
 801a516:	da03      	bge.n	801a520 <_printf_i+0xc8>
 801a518:	232d      	movs	r3, #45	; 0x2d
 801a51a:	4276      	negs	r6, r6
 801a51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a520:	485e      	ldr	r0, [pc, #376]	; (801a69c <_printf_i+0x244>)
 801a522:	230a      	movs	r3, #10
 801a524:	e019      	b.n	801a55a <_printf_i+0x102>
 801a526:	680e      	ldr	r6, [r1, #0]
 801a528:	602b      	str	r3, [r5, #0]
 801a52a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a52e:	bf18      	it	ne
 801a530:	b236      	sxthne	r6, r6
 801a532:	e7ef      	b.n	801a514 <_printf_i+0xbc>
 801a534:	682b      	ldr	r3, [r5, #0]
 801a536:	6820      	ldr	r0, [r4, #0]
 801a538:	1d19      	adds	r1, r3, #4
 801a53a:	6029      	str	r1, [r5, #0]
 801a53c:	0601      	lsls	r1, r0, #24
 801a53e:	d501      	bpl.n	801a544 <_printf_i+0xec>
 801a540:	681e      	ldr	r6, [r3, #0]
 801a542:	e002      	b.n	801a54a <_printf_i+0xf2>
 801a544:	0646      	lsls	r6, r0, #25
 801a546:	d5fb      	bpl.n	801a540 <_printf_i+0xe8>
 801a548:	881e      	ldrh	r6, [r3, #0]
 801a54a:	4854      	ldr	r0, [pc, #336]	; (801a69c <_printf_i+0x244>)
 801a54c:	2f6f      	cmp	r7, #111	; 0x6f
 801a54e:	bf0c      	ite	eq
 801a550:	2308      	moveq	r3, #8
 801a552:	230a      	movne	r3, #10
 801a554:	2100      	movs	r1, #0
 801a556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a55a:	6865      	ldr	r5, [r4, #4]
 801a55c:	60a5      	str	r5, [r4, #8]
 801a55e:	2d00      	cmp	r5, #0
 801a560:	bfa2      	ittt	ge
 801a562:	6821      	ldrge	r1, [r4, #0]
 801a564:	f021 0104 	bicge.w	r1, r1, #4
 801a568:	6021      	strge	r1, [r4, #0]
 801a56a:	b90e      	cbnz	r6, 801a570 <_printf_i+0x118>
 801a56c:	2d00      	cmp	r5, #0
 801a56e:	d04d      	beq.n	801a60c <_printf_i+0x1b4>
 801a570:	4615      	mov	r5, r2
 801a572:	fbb6 f1f3 	udiv	r1, r6, r3
 801a576:	fb03 6711 	mls	r7, r3, r1, r6
 801a57a:	5dc7      	ldrb	r7, [r0, r7]
 801a57c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a580:	4637      	mov	r7, r6
 801a582:	42bb      	cmp	r3, r7
 801a584:	460e      	mov	r6, r1
 801a586:	d9f4      	bls.n	801a572 <_printf_i+0x11a>
 801a588:	2b08      	cmp	r3, #8
 801a58a:	d10b      	bne.n	801a5a4 <_printf_i+0x14c>
 801a58c:	6823      	ldr	r3, [r4, #0]
 801a58e:	07de      	lsls	r6, r3, #31
 801a590:	d508      	bpl.n	801a5a4 <_printf_i+0x14c>
 801a592:	6923      	ldr	r3, [r4, #16]
 801a594:	6861      	ldr	r1, [r4, #4]
 801a596:	4299      	cmp	r1, r3
 801a598:	bfde      	ittt	le
 801a59a:	2330      	movle	r3, #48	; 0x30
 801a59c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a5a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a5a4:	1b52      	subs	r2, r2, r5
 801a5a6:	6122      	str	r2, [r4, #16]
 801a5a8:	f8cd a000 	str.w	sl, [sp]
 801a5ac:	464b      	mov	r3, r9
 801a5ae:	aa03      	add	r2, sp, #12
 801a5b0:	4621      	mov	r1, r4
 801a5b2:	4640      	mov	r0, r8
 801a5b4:	f7ff fee2 	bl	801a37c <_printf_common>
 801a5b8:	3001      	adds	r0, #1
 801a5ba:	d14c      	bne.n	801a656 <_printf_i+0x1fe>
 801a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a5c0:	b004      	add	sp, #16
 801a5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5c6:	4835      	ldr	r0, [pc, #212]	; (801a69c <_printf_i+0x244>)
 801a5c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a5cc:	6829      	ldr	r1, [r5, #0]
 801a5ce:	6823      	ldr	r3, [r4, #0]
 801a5d0:	f851 6b04 	ldr.w	r6, [r1], #4
 801a5d4:	6029      	str	r1, [r5, #0]
 801a5d6:	061d      	lsls	r5, r3, #24
 801a5d8:	d514      	bpl.n	801a604 <_printf_i+0x1ac>
 801a5da:	07df      	lsls	r7, r3, #31
 801a5dc:	bf44      	itt	mi
 801a5de:	f043 0320 	orrmi.w	r3, r3, #32
 801a5e2:	6023      	strmi	r3, [r4, #0]
 801a5e4:	b91e      	cbnz	r6, 801a5ee <_printf_i+0x196>
 801a5e6:	6823      	ldr	r3, [r4, #0]
 801a5e8:	f023 0320 	bic.w	r3, r3, #32
 801a5ec:	6023      	str	r3, [r4, #0]
 801a5ee:	2310      	movs	r3, #16
 801a5f0:	e7b0      	b.n	801a554 <_printf_i+0xfc>
 801a5f2:	6823      	ldr	r3, [r4, #0]
 801a5f4:	f043 0320 	orr.w	r3, r3, #32
 801a5f8:	6023      	str	r3, [r4, #0]
 801a5fa:	2378      	movs	r3, #120	; 0x78
 801a5fc:	4828      	ldr	r0, [pc, #160]	; (801a6a0 <_printf_i+0x248>)
 801a5fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a602:	e7e3      	b.n	801a5cc <_printf_i+0x174>
 801a604:	0659      	lsls	r1, r3, #25
 801a606:	bf48      	it	mi
 801a608:	b2b6      	uxthmi	r6, r6
 801a60a:	e7e6      	b.n	801a5da <_printf_i+0x182>
 801a60c:	4615      	mov	r5, r2
 801a60e:	e7bb      	b.n	801a588 <_printf_i+0x130>
 801a610:	682b      	ldr	r3, [r5, #0]
 801a612:	6826      	ldr	r6, [r4, #0]
 801a614:	6961      	ldr	r1, [r4, #20]
 801a616:	1d18      	adds	r0, r3, #4
 801a618:	6028      	str	r0, [r5, #0]
 801a61a:	0635      	lsls	r5, r6, #24
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	d501      	bpl.n	801a624 <_printf_i+0x1cc>
 801a620:	6019      	str	r1, [r3, #0]
 801a622:	e002      	b.n	801a62a <_printf_i+0x1d2>
 801a624:	0670      	lsls	r0, r6, #25
 801a626:	d5fb      	bpl.n	801a620 <_printf_i+0x1c8>
 801a628:	8019      	strh	r1, [r3, #0]
 801a62a:	2300      	movs	r3, #0
 801a62c:	6123      	str	r3, [r4, #16]
 801a62e:	4615      	mov	r5, r2
 801a630:	e7ba      	b.n	801a5a8 <_printf_i+0x150>
 801a632:	682b      	ldr	r3, [r5, #0]
 801a634:	1d1a      	adds	r2, r3, #4
 801a636:	602a      	str	r2, [r5, #0]
 801a638:	681d      	ldr	r5, [r3, #0]
 801a63a:	6862      	ldr	r2, [r4, #4]
 801a63c:	2100      	movs	r1, #0
 801a63e:	4628      	mov	r0, r5
 801a640:	f7e5 fdf6 	bl	8000230 <memchr>
 801a644:	b108      	cbz	r0, 801a64a <_printf_i+0x1f2>
 801a646:	1b40      	subs	r0, r0, r5
 801a648:	6060      	str	r0, [r4, #4]
 801a64a:	6863      	ldr	r3, [r4, #4]
 801a64c:	6123      	str	r3, [r4, #16]
 801a64e:	2300      	movs	r3, #0
 801a650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a654:	e7a8      	b.n	801a5a8 <_printf_i+0x150>
 801a656:	6923      	ldr	r3, [r4, #16]
 801a658:	462a      	mov	r2, r5
 801a65a:	4649      	mov	r1, r9
 801a65c:	4640      	mov	r0, r8
 801a65e:	47d0      	blx	sl
 801a660:	3001      	adds	r0, #1
 801a662:	d0ab      	beq.n	801a5bc <_printf_i+0x164>
 801a664:	6823      	ldr	r3, [r4, #0]
 801a666:	079b      	lsls	r3, r3, #30
 801a668:	d413      	bmi.n	801a692 <_printf_i+0x23a>
 801a66a:	68e0      	ldr	r0, [r4, #12]
 801a66c:	9b03      	ldr	r3, [sp, #12]
 801a66e:	4298      	cmp	r0, r3
 801a670:	bfb8      	it	lt
 801a672:	4618      	movlt	r0, r3
 801a674:	e7a4      	b.n	801a5c0 <_printf_i+0x168>
 801a676:	2301      	movs	r3, #1
 801a678:	4632      	mov	r2, r6
 801a67a:	4649      	mov	r1, r9
 801a67c:	4640      	mov	r0, r8
 801a67e:	47d0      	blx	sl
 801a680:	3001      	adds	r0, #1
 801a682:	d09b      	beq.n	801a5bc <_printf_i+0x164>
 801a684:	3501      	adds	r5, #1
 801a686:	68e3      	ldr	r3, [r4, #12]
 801a688:	9903      	ldr	r1, [sp, #12]
 801a68a:	1a5b      	subs	r3, r3, r1
 801a68c:	42ab      	cmp	r3, r5
 801a68e:	dcf2      	bgt.n	801a676 <_printf_i+0x21e>
 801a690:	e7eb      	b.n	801a66a <_printf_i+0x212>
 801a692:	2500      	movs	r5, #0
 801a694:	f104 0619 	add.w	r6, r4, #25
 801a698:	e7f5      	b.n	801a686 <_printf_i+0x22e>
 801a69a:	bf00      	nop
 801a69c:	0801f8c5 	.word	0x0801f8c5
 801a6a0:	0801f8d6 	.word	0x0801f8d6

0801a6a4 <__retarget_lock_acquire_recursive>:
 801a6a4:	4770      	bx	lr

0801a6a6 <__retarget_lock_release_recursive>:
 801a6a6:	4770      	bx	lr

0801a6a8 <_realloc_r>:
 801a6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6ac:	4680      	mov	r8, r0
 801a6ae:	4614      	mov	r4, r2
 801a6b0:	460e      	mov	r6, r1
 801a6b2:	b921      	cbnz	r1, 801a6be <_realloc_r+0x16>
 801a6b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a6b8:	4611      	mov	r1, r2
 801a6ba:	f7ff bc13 	b.w	8019ee4 <_malloc_r>
 801a6be:	b92a      	cbnz	r2, 801a6cc <_realloc_r+0x24>
 801a6c0:	f7ff fba4 	bl	8019e0c <_free_r>
 801a6c4:	4625      	mov	r5, r4
 801a6c6:	4628      	mov	r0, r5
 801a6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6cc:	f000 f81b 	bl	801a706 <_malloc_usable_size_r>
 801a6d0:	4284      	cmp	r4, r0
 801a6d2:	4607      	mov	r7, r0
 801a6d4:	d802      	bhi.n	801a6dc <_realloc_r+0x34>
 801a6d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a6da:	d812      	bhi.n	801a702 <_realloc_r+0x5a>
 801a6dc:	4621      	mov	r1, r4
 801a6de:	4640      	mov	r0, r8
 801a6e0:	f7ff fc00 	bl	8019ee4 <_malloc_r>
 801a6e4:	4605      	mov	r5, r0
 801a6e6:	2800      	cmp	r0, #0
 801a6e8:	d0ed      	beq.n	801a6c6 <_realloc_r+0x1e>
 801a6ea:	42bc      	cmp	r4, r7
 801a6ec:	4622      	mov	r2, r4
 801a6ee:	4631      	mov	r1, r6
 801a6f0:	bf28      	it	cs
 801a6f2:	463a      	movcs	r2, r7
 801a6f4:	f7ff fb5a 	bl	8019dac <memcpy>
 801a6f8:	4631      	mov	r1, r6
 801a6fa:	4640      	mov	r0, r8
 801a6fc:	f7ff fb86 	bl	8019e0c <_free_r>
 801a700:	e7e1      	b.n	801a6c6 <_realloc_r+0x1e>
 801a702:	4635      	mov	r5, r6
 801a704:	e7df      	b.n	801a6c6 <_realloc_r+0x1e>

0801a706 <_malloc_usable_size_r>:
 801a706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a70a:	1f18      	subs	r0, r3, #4
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	bfbc      	itt	lt
 801a710:	580b      	ldrlt	r3, [r1, r0]
 801a712:	18c0      	addlt	r0, r0, r3
 801a714:	4770      	bx	lr
	...

0801a718 <_init>:
 801a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a71a:	bf00      	nop
 801a71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a71e:	bc08      	pop	{r3}
 801a720:	469e      	mov	lr, r3
 801a722:	4770      	bx	lr

0801a724 <_fini>:
 801a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a726:	bf00      	nop
 801a728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a72a:	bc08      	pop	{r3}
 801a72c:	469e      	mov	lr, r3
 801a72e:	4770      	bx	lr
